{"blogid": "126740586", "writerAge": "码龄5年", "writerBlogNum": "614", "writerCollect": "332", "writerComment": "78", "writerFan": "102", "writerGrade": "6级", "writerIntegral": "6546", "writerName": "yitahutu79", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126740586.jpg", "writerRankTotal": "3047", "writerRankWeekly": "5894", "writerThumb": "136", "writerVisitNum": "155318", "blog_read_count": "18", "blog_time": "已于 2022-09-07 11:30:16 修改", "blog_title": "C++ vector使用方法", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>C++ vector使用方法</h3>\n<ul><li><a href=\"#vector_1\">一、什么是vector？</a></li><li><a href=\"#_4\">二、容器特性</a></li><li><a href=\"#_14\">三、基本函数实现</a></li><li><a href=\"#_211\">四、基本用法</a></li><li><a href=\"#_218\">五、简单介绍</a></li><li><a href=\"#vector_228\">六、vector使用实例</a></li><li><a href=\"#vector_256\">vector对象动态增长：</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"vector_1\"></a>一、什么是vector？</h1>\n<p>向量（vector）是一个封装了动态大小数组的顺序容器（Sequence Container）。跟任意其它类型容器一样，它能够存放各种类型的对象。可以简单的认为，向量是一个能够存放任意类型的动态数组。</p>\n<h1><a id=\"_4\"></a>二、容器特性</h1>\n<p>1.顺序序列<br/> 顺序容器中的元素按照严格的线性顺序排序。可以通过元素在序列中的位置访问对应的元素。</p>\n<p>2.动态数组<br/> 支持对序列中的任意元素进行快速直接访问，甚至可以通过指针算述进行该操作。操供了在序列末尾相对快速地添加/删除元素的操作。</p>\n<p>3.能够感知内存分配器的（Allocator-aware）<br/> 容器使用一个内存分配器对象来动态地处理它的存储需求。</p>\n<h1><a id=\"_14\"></a>三、基本函数实现</h1>\n<p>1.构造函数</p>\n<pre><code class=\"prism language-cpp\">​<span class=\"token function\">vector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>​<span class=\"token operator\">:</span>创建一个空vector\n</code></pre>\n<pre><code class=\"prism language-cpp\">​<span class=\"token function\">vector</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nSize<span class=\"token punctuation\">)</span>​<span class=\"token operator\">:</span>创建一个vector<span class=\"token punctuation\">,</span>元素个数为nSize\n</code></pre>\n<pre><code class=\"prism language-cpp\">​<span class=\"token function\">vector</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nSize<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> t<span class=\"token operator\">&amp;</span> t<span class=\"token punctuation\">)</span>​<span class=\"token operator\">:</span>创建一个vector，元素个数为nSize<span class=\"token punctuation\">,</span>且值均为t\n</code></pre>\n<pre><code class=\"prism language-cpp\">​<span class=\"token function\">vector</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span>​<span class=\"token operator\">:</span>复制构造函数\n</code></pre>\n<pre><code class=\"prism language-cpp\">​<span class=\"token function\">vector</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">)</span>​<span class=\"token operator\">:</span>复制<span class=\"token punctuation\">[</span>begin<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">)</span>区间内另一个数组的元素到vector中\n</code></pre>\n<p>2.增加函数</p>\n<pre><code class=\"prism language-cpp\">​<span class=\"token keyword\">void</span> <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span>​<span class=\"token operator\">:</span>向量尾部增加一个元素X\n</code></pre>\n<pre><code class=\"prism language-cpp\">​iterator <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>iterator it<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span>​<span class=\"token operator\">:</span>向量中迭代器指向元素前增加一个元素x\n</code></pre>\n<pre><code class=\"prism language-cpp\">​iterator <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>iterator it<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span>​<span class=\"token operator\">:</span>向量中迭代器指向元素前增加n个相同的元素x\n</code></pre>\n<pre><code class=\"prism language-cpp\">​iterator <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>iterator it<span class=\"token punctuation\">,</span>const_iterator first<span class=\"token punctuation\">,</span>const_iterator last<span class=\"token punctuation\">)</span>​<span class=\"token operator\">:</span>向量中迭代器指向元素前插入另一个相同类型向量的<span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span>last<span class=\"token punctuation\">)</span>间的数据\n</code></pre>\n<p>3.删除函数</p>\n<pre><code class=\"prism language-cpp\">​iterator <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>iterator it<span class=\"token punctuation\">)</span>​<span class=\"token operator\">:</span>删除向量中迭代器指向元素\n</code></pre>\n<pre><code class=\"prism language-cpp\">​iterator <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>iterator first<span class=\"token punctuation\">,</span>iterator last<span class=\"token punctuation\">)</span>​<span class=\"token operator\">:</span>删除向量中<span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span>last<span class=\"token punctuation\">)</span>中元素\n</code></pre>\n<pre><code class=\"prism language-cpp\">​<span class=\"token keyword\">void</span> <span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>​<span class=\"token operator\">:</span>删除向量中最后一个元素\n</code></pre>\n<pre><code class=\"prism language-cpp\">​<span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>​<span class=\"token operator\">:</span>清空向量中所有元素\n</code></pre>\n<p>4.遍历函数</p>\n<pre><code class=\"prism language-cpp\">​reference <span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span>​<span class=\"token operator\">:</span>返回pos位置元素的引用\n</code></pre>\n<pre><code class=\"prism language-cpp\">​reference <span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>​<span class=\"token operator\">:</span>返回首元素的引用\n</code></pre>\n<pre><code class=\"prism language-cpp\">​reference <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>​<span class=\"token operator\">:</span>返回尾元素的引用\n</code></pre>\n<pre><code class=\"prism language-cpp\">​iterator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>​<span class=\"token operator\">:</span>返回向量头指针，指向第一个元素\n</code></pre>\n<pre><code class=\"prism language-cpp\">​iterator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>​<span class=\"token operator\">:</span>返回向量尾指针，指向向量最后一个元素的下一个位置\n</code></pre>\n<pre><code class=\"prism language-cpp\">​reverse_iterator <span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>​<span class=\"token operator\">:</span>反向迭代器，指向最后一个元素\n</code></pre>\n<pre><code class=\"prism language-cpp\">​reverse_iterator <span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>​<span class=\"token operator\">:</span>反向迭代器，指向第一个元素之前的位置\n</code></pre>\n<p>5.判断函数</p>\n<pre><code class=\"prism language-cpp\">​<span class=\"token keyword\">bool</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>​<span class=\"token operator\">:</span>判断向量是否为空，若为空，则向量中无元素\n</code></pre>\n<p>6.大小函数</p>\n<pre><code class=\"prism language-cpp\">​<span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>​<span class=\"token operator\">:</span>返回向量中元素的个数\n</code></pre>\n<pre><code class=\"prism language-cpp\">​<span class=\"token keyword\">int</span> <span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>​<span class=\"token operator\">:</span>返回当前向量所能容纳的最大元素值\n</code></pre>\n<pre><code class=\"prism language-cpp\">​<span class=\"token keyword\">int</span> <span class=\"token function\">max_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>​<span class=\"token operator\">:</span>返回最大可允许的 vector 元素数量值\n</code></pre>\n<p>7.其他函数</p>\n<pre><code class=\"prism language-cpp\">​<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span>​<span class=\"token operator\">:</span>交换两个同类型向量的数据\n</code></pre>\n<pre><code class=\"prism language-cpp\">​<span class=\"token keyword\">void</span> <span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span>​<span class=\"token operator\">:</span>设置向量中前n个元素的值为x\n</code></pre>\n<pre><code class=\"prism language-cpp\">​<span class=\"token keyword\">void</span> <span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>const_iterator first<span class=\"token punctuation\">,</span>const_iterator last<span class=\"token punctuation\">)</span>​<span class=\"token operator\">:</span>向量中<span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span>last<span class=\"token punctuation\">)</span>中元素设置成当前向量元素\n</code></pre>\n<p>8.看着清楚</p>\n<pre><code class=\"prism language-cpp\">push_back 在数组的最后添加一个数据\n</code></pre>\n<pre><code class=\"prism language-cpp\">pop_back 去掉数组的最后一个数据\n</code></pre>\n<pre><code class=\"prism language-cpp\">at 得到编号位置的数据\n</code></pre>\n<pre><code class=\"prism language-cpp\">begin 得到数组头的指针\n</code></pre>\n<pre><code class=\"prism language-cpp\">end 得到数组的最后一个单元<span class=\"token operator\">+</span><span class=\"token number\">1</span>的指针\n</code></pre>\n<pre><code class=\"prism language-cpp\">front 得到数组头的引用\n</code></pre>\n<pre><code class=\"prism language-cpp\">back 得到数组的最后一个单元的引用\n</code></pre>\n<pre><code class=\"prism language-cpp\">max_size 得到vector最大可以是多大\n</code></pre>\n<pre><code class=\"prism language-cpp\">capacity 当前vector分配的大小\n</code></pre>\n<pre><code class=\"prism language-cpp\">size 当前使用数据的大小\n</code></pre>\n<pre><code class=\"prism language-cpp\">resize 改变当前使用数据的大小，如果它比当前使用的大，填充默认值\n</code></pre>\n<pre><code class=\"prism language-cpp\">reserve 改变当前vecotr所分配空间的大小\n</code></pre>\n<pre><code class=\"prism language-cpp\">erase 删除指针指向的数据项\n</code></pre>\n<pre><code class=\"prism language-cpp\">clear 清空当前的vector\n</code></pre>\n<pre><code class=\"prism language-cpp\">rbegin 将vector反转后的开始指针返回<span class=\"token punctuation\">(</span>其实就是原来的end<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<pre><code class=\"prism language-cpp\">rend 将vector反转构的结束指针返回<span class=\"token punctuation\">(</span>其实就是原来的begin<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<pre><code class=\"prism language-cpp\">empty 判断vector是否为空\n</code></pre>\n<pre><code class=\"prism language-cpp\">swap 与另一个vector交换数据\n</code></pre>\n<h1><a id=\"_211\"></a>四、基本用法</h1>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt; vector&gt;</span> </span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n</code></pre>\n<h1><a id=\"_218\"></a>五、简单介绍</h1>\n<pre><code class=\"prism language-cpp\">vector<span class=\"token operator\">&lt;</span>类型<span class=\"token operator\">&gt;</span>标识符\nvector<span class=\"token operator\">&lt;</span>类型<span class=\"token operator\">&gt;</span>标识符<span class=\"token punctuation\">(</span>最大容量<span class=\"token punctuation\">)</span>\nvector<span class=\"token operator\">&lt;</span>类型<span class=\"token operator\">&gt;</span>标识符<span class=\"token punctuation\">(</span>最大容量<span class=\"token punctuation\">,</span>初始所有值<span class=\"token punctuation\">)</span>\nInt i<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span>vector<span class=\"token operator\">&lt;</span>类型<span class=\"token operator\">&gt;</span><span class=\"token function\">vi</span><span class=\"token punctuation\">(</span>I<span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//得到i索引值为3以后的值</span>\nvector<span class=\"token operator\">&lt;</span> vector<span class=\"token operator\">&lt;</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&gt;</span>v<span class=\"token punctuation\">;</span> 二维向量<span class=\"token comment\">//这里最外的&lt;&gt;要有空格。否则在比较旧的编译器下无法通过</span>\n</code></pre>\n<h1><a id=\"vector_228\"></a>六、vector使用实例</h1>\n<p>使用vector注意事项：</p>\n<p>1、如果你要表示的向量长度较长（需要为向量内部保存很多数），容易导致内存泄漏，而且效率会很低；</p>\n<p>2、vector 作为函数的参数或者返回值时，需要注意它的写法：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">double</span> <span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>其中的“&amp;”绝对不能少！！！</p>\n<p>vector对象的定义和初始化<br/> 同样的，使用前，导入头文件 #include 可以使用using声明：using std::vector;vector 是一个类模板（class template）。使用模板可以编写一个类定义或函数定义，而用于多个不同的数据类型。因此，我们可以定义保存 string 对象的 vector，或保存 int 值的 vector，又或是保存自定义的类类型对象（如 Sales_items 对象）的 vector。<br/> 声明从类模板产生的某种类型的对象，需要提供附加信息，信息的种类取决于模板。以 vector 为例，必须说明 vector 保存何种对象的类型，通过将类型放在类型放在类模板名称后面的尖括号中来指定类型：</p>\n<table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>vector v1;</td><td>保存类型为 T 对象。默认构造函数 v1 为空。</td></tr><tr><td>vector v2(v1);</td><td>v2 是 v1 的一个副本。</td></tr><tr><td>vector v3(n, i);</td><td>v3 包含 n 个值为 i 的元素。</td></tr><tr><td>vector v4(n);</td><td>v4 含有值初始化的元素的 n 个副本。</td></tr></tbody></table>\n<p>【注意：1、若要创建非空的 vector 对象，必须给出初始化元素的值；2、当把一个 vector 对象复制到另一个 vector 对象时，新复制的 vector 中每一个元素都初始化为原 vectors 中相应元素的副本。但这两个 vector 对象必须保存同一种元素类型；3、可以用元素个数和元素值对 vector 对象进行初始化。构造函数用元素个数来决定 vector 对象保存元素的<br/> 个数，元素值指定每个元素的初始值】</p>\n<h1><a id=\"vector_256\"></a>vector对象动态增长：</h1>\n<p>vector 对象（以及其他标准库容器对象）的重要属性就在于可以在运行时高效地添加元素。</p>\n<pre><code class=\"prism language-cpp\">注意：因为 vector 增长的效率高，在元素值已知的情况下，最好是动态地添加元素。\n</code></pre>\n<p>实例：</p>\n<pre><code class=\"prism language-cpp\">vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span>test<span class=\"token punctuation\">;</span><span class=\"token comment\">//建立一个vector，int为数组元素的数据类型，test为动态数组名</span>\n</code></pre>\n<p>简单的使用方法如下：</p>\n<pre><code class=\"prism language-cpp\">vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span>test<span class=\"token punctuation\">;</span><span class=\"token comment\">//建立一个vector</span>\ntest<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntest<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//把1和2压入vector，这样test[0]就是1,test[1]就是2</span>\n</code></pre>\n<p>实例：</p>\n<pre><code class=\"prism language-cpp\">vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>Point2f<span class=\"token operator\">&gt;</span> <span class=\"token operator\">&gt;</span> points<span class=\"token punctuation\">;</span> <span class=\"token comment\">//定义一个二维数组</span>\npoints<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//指第一行的列数</span>\n</code></pre>\n<p>1 、基本操作</p>\n<p>(1)头文件​<code>#include&lt;vector&gt;​.</code></p>\n<p>(2)创建vector对象，<code>​vector&lt;int&gt; vec​;</code></p>\n<p>(3)尾部插入数字：<code>​vec.push_back(a)​;</code></p>\n<p>(4)使用下标访问元素，<code>​cout&lt;&lt;vec[0]&lt;&lt;endl​;</code>记住下标是从0开始的。</p>\n<p>(5)使用迭代器访问元素.</p>\n<pre><code class=\"prism language-cpp\">vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span>iterator it<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">=</span>vec<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">!=</span>vec<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">*</span>it<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>(6)插入元素：<code>​vec.insert(vec.begin()+i,a)​;</code> 在第i+1个元素前面插入a;</p>\n<p>(7)删除元素：<code>​vec.erase(vec.begin()+2)​ ;</code> 删除第3个元素</p>\n<p><code>​vec.erase(vec.begin()+i,vec.end()+j)​;</code> 删除区间[ i,j-1] 区间从0开始</p>\n<p>(8)向量大小: <code>​vec.size()​;</code></p>\n<p>(9)清空: <code>​vec.clear()​;</code></p>\n<blockquote>\n<p>特别提示：这里有 begin() 与 end() 函数、front() 与 back() 的差别</p>\n</blockquote>\n<p>2、重要说明</p>\n<p>vector 的元素不仅仅可以是 int,double,string 还可以是结构体，但是要注意：结构体要定义为全局的，否则会出错。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span>  </span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;algorithm&gt;</span>  </span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector&gt;</span>  </span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span>  </span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">rect</span>  \n<span class=\"token punctuation\">{<!-- --></span>  \n    <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">;</span>  \n　　<span class=\"token comment\">//对于向量元素是结构体的，可在结构体内部定义比较函数，下面按照id,length,width升序排序。  </span>\n　　<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> rect <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span>  \n    <span class=\"token punctuation\">{<!-- --></span>  \n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">!=</span>a<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>  \n            <span class=\"token keyword\">return</span> id<span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">else</span>  \n        <span class=\"token punctuation\">{<!-- --></span>  \n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>length<span class=\"token operator\">!=</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>  \n                <span class=\"token keyword\">return</span> length<span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>  \n            <span class=\"token keyword\">else</span>  \n                <span class=\"token keyword\">return</span> width<span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>Rect<span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">{<!-- --></span>  \n    vector<span class=\"token operator\">&lt;</span>Rect<span class=\"token operator\">&gt;</span> vec<span class=\"token punctuation\">;</span>  \n    Rect rect<span class=\"token punctuation\">;</span>  \n    rect<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  \n    rect<span class=\"token punctuation\">.</span>length<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>  \n    rect<span class=\"token punctuation\">.</span>width<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>  \n    vec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    vector<span class=\"token operator\">&lt;</span>Rect<span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span>iterator it<span class=\"token operator\">=</span>vec<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>id<span class=\"token operator\">&lt;&lt;</span><span class=\"token char\">' '</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">&lt;&lt;</span><span class=\"token char\">' '</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>width<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>      \n<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>  \n</code></pre>\n<p>3、算法</p>\n<p>(1) 使用reverse将元素翻转：需要头文件 #include</p>\n<p>reverse(vec.begin(),vec.end());将元素翻转，即逆序排列！</p>\n<p>(在vecto r中，如果一个函数中需要两个迭代器，一般后一个都不包含)</p>\n<p>(2)使用 sort 排序：需要头文件 #include，</p>\n<p>sort(vec.begin(),vec.end());(默认是按升序排列,即从小到大).</p>\n<p>可以通过重写排序比较函数按照降序比较，如下：</p>\n<p>定义排序比较函数：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">bool</span> <span class=\"token function\">Comp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> a<span class=\"token operator\">&gt;</span>b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>调用时: sort(vec.begin(),vec.end(),Comp)，这样就降序排序。</p>\n<p>输出vector的中的元素</p>\n<pre><code class=\"prism language-cpp\">vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">&gt;</span> vecClass<span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">int</span> nSize <span class=\"token operator\">=</span> vecClass<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n</code></pre>\n<p>//打印 vecClass,方法一：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>nSize<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>    \n<span class=\"token punctuation\">{<!-- --></span>    \n   cout<span class=\"token operator\">&lt;&lt;</span>vecClass<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"     \"</span><span class=\"token punctuation\">;</span>    \n<span class=\"token punctuation\">}</span>    \n   cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>   \n</code></pre>\n<blockquote>\n<p>需要注意的是：以方法一进行输出时，数组的下表必须保证是整数。</p>\n</blockquote>\n<p>//打印 vecClass,方法二：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>nSize<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>    \n<span class=\"token punctuation\">{<!-- --></span>    \n   cout<span class=\"token operator\">&lt;&lt;</span>vecClass<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"     \"</span><span class=\"token punctuation\">;</span>    \n<span class=\"token punctuation\">}</span>    \n   cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>    \n</code></pre>\n<p>//打印 vecClass,方法三：输出某一指定的数值时不方便</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> vecClass<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">!=</span>vecClass<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>    \n<span class=\"token punctuation\">{<!-- --></span>    \n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">*</span>it<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"   \"</span><span class=\"token punctuation\">;</span>    \n<span class=\"token punctuation\">}</span>    \n    cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>    \n</code></pre>\n<p>二维数组的使用：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdafx.h\"</span>  </span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cv.h&gt;</span>  </span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span>   </span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span>   </span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">{<!-- --></span>  \n    <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">int</span> out<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>   \n             <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>  \n            <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  \n    vector <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> v1<span class=\"token punctuation\">;</span>  \n    v1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    v1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    v1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    cout <span class=\"token operator\">&lt;&lt;</span> v1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//1  </span>\n    cout <span class=\"token operator\">&lt;&lt;</span> v1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//2  </span>\n    cout <span class=\"token operator\">&lt;&lt;</span> v1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//3  </span>\n    cout <span class=\"token operator\">&lt;&lt;</span> v1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//4  </span>\n    cout <span class=\"token operator\">&lt;&lt;</span> v1<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//5  </span>\n    cout <span class=\"token operator\">&lt;&lt;</span> v1<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//6  </span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>  \n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-07 11:30:16", "summary": "使用方法一、什么是？二、容器特性三、基本函数实现四、基本用法五、简单介绍六、使用实例对象动态增长：一、什么是？向量是一个封装了动态大小数组的顺序容器。跟任意其它类型容器一样，它能够存放各种类型的对象。"}