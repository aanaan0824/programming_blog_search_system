{"blogid": "123794685", "writerAge": "码龄10年", "writerBlogNum": "373", "writerCollect": "541", "writerComment": "137", "writerFan": "4591", "writerGrade": "7级", "writerIntegral": "10785", "writerName": "黄啊码", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123794685.jpg", "writerRankTotal": "1637", "writerRankWeekly": "2279", "writerThumb": "170", "writerVisitNum": "857710", "blog_read_count": "975", "blog_time": "于 2022-03-29 09:00:00 发布", "blog_title": "【黄啊码】PHP实现token验证登录（JWT鉴权登录）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p><strong>什么是JWT</strong></p>\n<p></p>\n<p>JWT(JSON Web Token)是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准。</p>\n<p>简单的说，JWT就是一种Token的编码算法，服务器端负责根据一个密码和算法生成Token，然后发给客户端，客户端只负责后面每次请求都在HTTP header里面带上这个Token，服务器负责验证这个Token是不是合法的，有没有过期等，并可以解析出subject和claim里面的数据。</p>\n<p><strong>JWT的组成</strong></p>\n<p></p>\n<p>第一部分为头部（header)，第二部分我们称其为载荷（payload)，第三部分是签证（signature)。【中间用 . 分隔】</p>\n<p>一个标准的JWT生成的token格式如下:</p>\n<p>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImp0aSI6IjRmMWcyM2ExMmFhMTEifQ.eyJpc3MiOiJodHRwOlwvXC9leGFtcGxlLmNvbSIsImF1ZCI6Imh0dHA6XC9cL2V4YW1wbGUub3JnIiwianRpIjoiNGYxZzIzYTEyYWExMSIsImlhdCI6MTY0MDE3MTA1MywibmJmIjoxNjQwMTcxMDU0LCJleHAiOjE2NDAxNzQ2NTMsInVpZCI6MjAsInVzZXJuYW1lIjoiTWFrZSJ9.bysUwNIyhqqEyL0JecSHdplSTfE6G6zuCsrAn6eyrQM</p>\n<p>使用https://jwt.io/这个网站对JWT Token进行解析的结果如下</p>\n<p><img alt=\"\" height=\"608\" src=\"..\\..\\static\\image\\1054f439d790474996e37efd4c9e9fa8.png\" width=\"1050\"/></p>\n<p><strong>JWT验证流程和特点</strong></p>\n<p><strong>验证流程：</strong></p>\n<p>① 在头部信息中声明加密算法和常量， 然后把header使用json转化为字符串</p>\n<p>② 在载荷中声明用户信息，同时还有一些其他的内容；再次使用json 把载荷部分进行转化，转化为字符串</p>\n<p>③ 使用在header中声明的加密算法和每个项目随机生成的secret来进行加密， 把第一步分字符串和第二部分的字符串进行加密， 生成新的字符串。词字符串是独一无二的。</p>\n<p>④ 解密的时候，只要客户端带着JWT来发起请求，服务端就直接使用secret进行解密。</p>\n<p><strong>特点：</strong></p>\n<p>① 三部分组成，每一部分都进行字符串的转化</p>\n<p>② 解密的时候没有使用数据库，仅仅使用的是secret进行解密</p>\n<p>③ JWT的secret千万不能泄密！</p>\n<p>④ 不依赖数据库，而是直接根据token取出保存的用户信息，以及对token可用性校验，校验方式更加简单便捷化，单点登录更为简单。</p>\n<p><strong>二、相关问题</strong></p>\n<ul><li> <p>JWT Token需要持久化在redis、Memcached中吗？</p> <p>不应该这样做，无状态的jwt变成了有状态了，背离了JWT通过算法验证的初心。</p> </li><li> <p>在退出登录时怎样实现JWT Token失效呢？</p> <p>退出登录， 只要客户端端把Token丢弃就可以了，服务器端不需要废弃Token。</p> </li><li> <p>怎样保持客户端长时间保持登录状态？</p> <p>服务器端提供刷新Token的接口， 客户端负责按一定的逻辑刷新服务器Token。</p> </li></ul>\n<p> <strong>PHP实现</strong></p>\n<p><strong>1、引入依赖</strong></p>\n<pre><code>composer require lcobucci/jwt 3.*</code></pre>\n<p><strong>2、功能实现</strong></p>\n<ul><li> <p>签发token, 设置签发人、接收人、唯一标识、签发时间、立即生效、过期时间、用户id、用户username、签名。其中，用户id、用户username是特意存储在token中的信息，也可以增加一些其他信息，这样在解析的时候就可以直接获取到这些信息，不能是敏感数据</p> </li><li> <p>验证令牌验证这个Token是不是合法的，有没有过期等，并可以解析出subject和claim里面的数据，传递jwt token的方式为Authorization中的Bearer Token，如下</p> </li></ul>\n<p><img alt=\"\" height=\"449\" src=\"..\\..\\static\\image\\b6316f1b332946219b204b740e721f3d.png\" width=\"1068\"/></p>\n<p> <strong>封装工具类如下</strong></p>\n<blockquote>\n<p>&lt;?php<br/> /**<br/>  * Created by PhpStorm<br/>  * @author sxd<br/>  */</p>\n<p>namespace App\\Utils;</p>\n<p><br/> use Lcobucci\\JWT\\Configuration;<br/> use Lcobucci\\JWT\\Parser;<br/> use Lcobucci\\JWT\\Signer\\Hmac\\Sha256;<br/> use Lcobucci\\JWT\\Signer\\Key\\InMemory;<br/> use Lcobucci\\JWT\\Token\\Plain;<br/> use Lcobucci\\JWT\\Validation\\Constraint\\IdentifiedBy;<br/> use Lcobucci\\JWT\\Validation\\Constraint\\IssuedBy;<br/> use Lcobucci\\JWT\\Validation\\Constraint\\PermittedFor;<br/> use Lcobucci\\JWT\\ValidationData;</p>\n<p>class JwtUtil<br/> {<!-- --><br/>     // jwt github: https://github.com/lcobucci/jwt     https://jwt.io/<br/>     protected $issuer = \"http://example.com\";<br/>     protected $audience = \"http://example.org\";<br/>     protected $id = \"4f1g23a12aa11\";<br/>     // key 是绝对不允许泄露的<br/>     protected static $key = \"8swQsm1Xb0TA0Jw5ASPwClKVZPoTyS7GvhtaW0MxzKEihs1BNpcS2q3FYMJ11111\";</p>\n<p>    /**<br/>      * 签发令牌<br/>      */<br/>     public function getToken()<br/> {<!-- --><br/>         $time = time();<br/>         $config = self::getConfig();<br/>         assert($config instanceof Configuration);</p>\n<p>        // 签发token, 设置签发人、接收人、唯一标识、签发时间、立即生效、过期时间、用户id、用户username、签名<br/>         $token = $config-&gt;builder()<br/>             -&gt;issuedBy($this-&gt;issuer) // Configures the issuer (iss claim)<br/>             -&gt;permittedFor($this-&gt;audience) // Configures the audience (aud claim)<br/>             -&gt;identifiedBy($this-&gt;id, true) // Configures the id (jti claim), replicating as a header item<br/>             -&gt;issuedAt($time) // Configures the time that the token was issue (iat claim)<br/>             -&gt;canOnlyBeUsedAfter($time + 1) // Configures the time that the token can be used (nbf claim)  签发x秒钟后生效<br/>             -&gt;expiresAt($time + 3600) // Configures the expiration time of the token (exp claim)<br/>             -&gt;withClaim('uid', 20) // Configures a new claim, called \"uid\"<br/>             -&gt;withClaim('username', \"Make\") // Configures a new claim, called \"uid\"<br/>             -&gt;getToken($config-&gt;signer(), $config-&gt;signingKey()); // Retrieves the generated token<br/>         return $token-&gt;toString();<br/>     }</p>\n<p>    /**<br/>      * 验证 jwt token 并返回其中的用户id<br/>      * verify token<br/>      */<br/>     public function verifyToken_bak($token)<br/> {<!-- --><br/>         try {<!-- --><br/>             $config = self::getConfig();<br/>             assert($config instanceof Configuration);</p>\n<p>            $token = $config-&gt;parser()-&gt;parse($token);<br/>             assert($token instanceof Plain);</p>\n<p>            //Lcobucci\\JWT\\Validation\\Constraint\\IdentifiedBy: 验证jwt id是否匹配<br/>             //Lcobucci\\JWT\\Validation\\Constraint\\IssuedBy: 验证签发人参数是否匹配<br/>             //Lcobucci\\JWT\\Validation\\Constraint\\PermittedFor: 验证受众人参数是否匹配<br/>             //Lcobucci\\JWT\\Validation\\Constraint\\RelatedTo: 验证自定义cliam参数是否匹配<br/>             //Lcobucci\\JWT\\Validation\\Constraint\\SignedWith: 验证令牌是否已使用预期的签名者和密钥签名<br/>             //Lcobucci\\JWT\\Validation\\Constraint\\StrictValidAt: ：：验证存在及其有效性的权利要求中的iat，nbf和exp（支持余地配置<br/>             //Lcobucci\\JWT\\Validation\\Constraint\\LooseValidAt: 验证的权利要求iat，nbf和exp，当存在时（支持余地配置）</p>\n<p>            //验证jwt id是否匹配<br/>             $validate_jwt_id = new IdentifiedBy($this-&gt;id);<br/>             //验证签发人url是否正确<br/>             $validate_issued = new IssuedBy($this-&gt;issuer);<br/>             //验证客户端url是否匹配<br/>             $validate_aud = new PermittedFor($this-&gt;audience);<br/>             $config-&gt;setValidationConstraints($validate_jwt_id, $validate_issued, $validate_aud);</p>\n<p>            $constraints = $config-&gt;validationConstraints();</p>\n<p>            if (!$config-&gt;validator()-&gt;validate($token, ...$constraints)) {<!-- --><br/>                 die(\"token invalid!\");<br/>             }<br/>         } catch (\\Exception $e) {<!-- --><br/>             die(\"error:\" . $e-&gt;getMessage());<br/>         }<br/>         $jwtInfo = $token-&gt;claims();  // 这是jwt token中存储的所有信息<br/>         return $jwtInfo-&gt;get(\"uid\");  // 获取uid<br/>     }</p>\n<p>    /**<br/>      * 加密解密使用的配置<br/>      * @return Configuration<br/>      */<br/>     public static function getConfig()<br/> {<!-- --><br/>         $configuration = Configuration::forSymmetricSigner(<br/>         // You may use any HMAC variations (256, 384, and 512)<br/>             new Sha256(),<br/>             // replace the value below with a key of your own!<br/>             InMemory::base64Encoded(self::$key)<br/>         // You may also override the JOSE encoder/decoder if needed by providing extra arguments here<br/>         );<br/>         return $configuration;<br/>     }</p>\n<p>    /**<br/>      * 另一种验证方法，但是已经弃用<br/>      * verify token<br/>      */<br/>     public function verifyToken($token)<br/> {<!-- --><br/>         $token = (new Parser())-&gt;parse((string)$token);<br/>         //验证token<br/>         $data = new ValidationData();<br/>         $data-&gt;setIssuer($this-&gt;issuer);//验证的签发人<br/>         $data-&gt;setAudience($this-&gt;audience);//验证的接收人<br/>         $data-&gt;setId($this-&gt;id);//验证token标识</p>\n<p>        if (!$token-&gt;validate($data)) {<!-- --><br/>             //token验证失败<br/>             die(\"token invalid!\");<br/>         }<br/>         $jwtInfo = $token-&gt;claims();  // 这是jwt token中存储的所有信息<br/>         return $jwtInfo-&gt;get(\"uid\");  // 获取uid<br/>     }</p>\n<p>}</p>\n</blockquote>\n<p></p>\n</div>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 1, "time": "2022-03-29 09:00:00", "summary": "什么是是为了在网络应用环境间传递声明而执行的一种基于的开放标准。简单的说，就是一种的编码算法，服务器端负责根据一个密码和算法生成，然后发给客户端，客户端只负责后面每次请求都在里面带上这个，服务器负责验"}