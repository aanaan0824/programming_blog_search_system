{"blogid": "123268292", "writerAge": "码龄5年", "writerBlogNum": "2", "writerCollect": "4", "writerComment": "0", "writerFan": "2", "writerGrade": "1级", "writerIntegral": "27", "writerName": "lingWillion", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123268292.jpg", "writerRankTotal": "225784", "writerRankWeekly": "574112", "writerThumb": "0", "writerVisitNum": "4990", "blog_read_count": "4165", "blog_time": "已于 2022-03-05 16:05:09 修改", "blog_title": "Unity 伤害飘血效果", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>Unity 伤害飘血效果</h3>\n<ul><li><a href=\"#_5\">前言</a></li><li><a href=\"#_8\">一、效果演示</a></li><li><a href=\"#_12\">二、相关代码</a></li></ul>\n</div>\n<p></p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_5\"></a>前言</h1>\n<blockquote>\n<p>一个对于战斗中飘字飘血的功能，比较简单。</p>\n</blockquote>\n<h1><a id=\"_8\"></a>一、效果演示</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/6283c06bd3f747adbdfa63bdb69980d1.gif#pic_center\"/><br/> 字的颜色没调整好，所以有点不好看。</p>\n<h1><a id=\"_12\"></a>二、相关代码</h1>\n<p>根据自定义曲线控制飘字效果</p>\n<pre><code class=\"prism language-C#\">using LFrameWork;\nusing TMPro;\nusing UnityEngine;\n\nnamespace Game\n{\n    public class HUDText : LMonoBehaviour,IUpdate\n    {\n        private readonly Vector3 r_LifeBarOffsetY = new Vector3(0, 2.2f, 0);\n\n        //飘字持续时间\n        [Range(0, 10f)] [SerializeField] protected float m_DurationTime;\n        [SerializeField] protected AnimationCurve m_AlphaCurve;\n        [SerializeField] protected AnimationCurve m_ScaleCurve;\n        [SerializeField] protected AnimationCurve m_OffsetXCurve;\n        [SerializeField] protected AnimationCurve m_OffsetYCurve;\n\n        protected Transform m_FollowPlayer;\n        protected TMP_Text m_HUDText;\n        protected float m_CurrentTime;\n\n        protected float m_OriginX;\n        protected float m_OriginY;\n        \n        public void SetData(Transform target, string info)\n        {\n            m_FollowPlayer = target;\n            m_HUDText = GetComponent&lt;TMP_Text&gt;();\n            m_HUDText.text = info;\n\n\t\t\t//设置文本的起始位置\n            transform.position =\n                Utils.GetScreenPos(Camera.current, m_FollowPlayer.position + r_LifeBarOffsetY);\n            \n            m_OriginX = transform.localPosition.x;\n            m_OriginY = transform.localPosition.y;\n            \n            //加入到自定义生命周期控制中\n            LifeCycleManager.Instance.AddUpdate(this);\n        }\n\n        private void OnDisable()\n        {\n            LifeCycleManager.Instance.RemoveUpdate(this);\n        }\n\n        public void UpdateFun()\n        {\n            m_CurrentTime += Time.deltaTime;\n            var tmpPercent = m_CurrentTime / m_DurationTime;\n            if (tmpPercent &gt; 1f)\n            {\n                //对象池回收\n                RPGGame.Instance.RecycleObject(gameObject);\n                return;\n            }\n            //静态扩展方法\n            m_HUDText.SetColorAlpha(m_AlphaCurve.Evaluate(tmpPercent));\n            transform.localScale = Vector3.one * m_ScaleCurve.Evaluate(tmpPercent);\n            transform.SetTransLocalPosX(m_OriginX + m_OffsetXCurve.Evaluate(tmpPercent));\n            transform.SetTransLocalPosY(m_OriginY + m_OffsetYCurve.Evaluate(tmpPercent));\n        }\n    }\n}\n</code></pre>\n<p>工具方法，世界坐标和屏幕坐标的转换</p>\n<pre><code class=\"prism language-C#\">        public static Vector3 GetScreenPos(Camera camera, Vector3 worldPos)\n        {\n            var tmpScreenPos = RectTransformUtility.WorldToScreenPoint(camera, worldPos);\n            return new Vector3(tmpScreenPos.x, tmpScreenPos.y, 0);\n        }\n</code></pre>\n<p>对于颜色渐变效果：<br/> 因为我这里的文本用的是TextMeshPro组件，所以对于字体变色可以直接修改其对应的属性。来控制文本的颜色渐变。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4c64f61a002c471391af535438870865.png\"/><br/> 对于老版的Text组件，这里贴上一个脚本。在生成网格时修改顶点颜色，达成渐变的效果</p>\n<pre><code class=\"prism language-C#\">using System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\n\nnamespace Game\n{\n    public class TextGradient : BaseMeshEffect\n    {\n        public Color32 topColor = Color.white;\n        public Color32 bottomColor = Color.black;\n\n        public override void ModifyMesh(VertexHelper vh)\n        {\n            if (!IsActive() || vh.currentVertCount == 0) return;\n            \n            var tmpVertices = new List&lt;UIVertex&gt;();\n            vh.GetUIVertexStream(tmpVertices);\n            \n            for (var i = 0; i &lt; tmpVertices.Count &amp;&amp; tmpVertices.Count - i &gt;= 6; i += 6)\n            {\n                ChangeColor(tmpVertices,i, topColor);\n                ChangeColor(tmpVertices,i + 1, topColor);\n                ChangeColor(tmpVertices,i + 2, bottomColor);\n                ChangeColor(tmpVertices,i + 3, bottomColor);\n                ChangeColor(tmpVertices,i + 4, bottomColor);\n                ChangeColor(tmpVertices,i + 5, topColor);\n            }\n            \n            vh.Clear();\n            vh.AddUIVertexTriangleStream(tmpVertices);\n        }   \n\n        private void ChangeColor(List&lt;UIVertex&gt; uiVertices,int index, Color color)\n        {\n            var tmpVertex = uiVertices[index];\n            tmpVertex.color *= color;\n            uiVertices[index] = tmpVertex;\n        }\n    }\n}\n</code></pre>\n<p>在文本上添加此脚本以后，修改TopColor和BottomColor脚本也可以实现渐变的效果<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4e4b488c7f3f4890a05235d691e2e5dc.png\"/></p>\n<p>最后再分享一下自己调的四种曲线<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\47c913dba58a46e687e83991d91e58ba.png\"/><br/> AlphaCurve<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\26dc3d6e35b64fe483d35157afc8a367.png\"/><br/> ScaleCurve<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c9ec7ea373c84b2bb7582d42ac487d6c.png\"/></p>\n<p>OffsetXCurve<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a4f61bee39ef4ceb8bd2664ca4e8159a.png\"/><br/> OffsetYCurve<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\65c8e5f12ce146c3a71f613d3f4f805b.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-05 16:05:09", "summary": "伤害飘血效果前言一、效果演示二、相关代码前言一个对于战斗中飘字飘血的功能，比较简单。一、效果演示在这里插入图片描述字的颜色没调整好，所以有点不好看。二、相关代码根据自定义曲线控制飘字效果飘字持续时间设"}