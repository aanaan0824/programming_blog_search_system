{"blogid": "126623069", "writerAge": "码龄1年", "writerBlogNum": "34", "writerCollect": "370", "writerComment": "519", "writerFan": "796", "writerGrade": "5级", "writerIntegral": "1867", "writerName": "猪皮兄弟", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126623069.jpg", "writerRankTotal": "10284", "writerRankWeekly": "142", "writerThumb": "608", "writerVisitNum": "30840", "blog_read_count": "661", "blog_time": "已于 2022-08-31 22:21:13 修改", "blog_title": "【C++】类和对象（三）运算符重载 (其中有默认成员函数中的 赋值运算符重载、等等)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>🧸🧸🧸 <font color=\"red\"><strong>各位大佬大家好，我是猪皮兄弟</strong></font>🧸🧸🧸<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a0538806e6ab460399e548c01e7abb41.png\"/></p>\n<p>    <font color=\"red\"><strong>今天的内容是运算符重载，内置类型可以直接使用运算符运算，因为编译器知道该如何进行运算，自定义类型无法直接使用运算符，编译器也不知道该如何运算，如果想要让编译器支持，就需要自己实现运算重载</strong></font></p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_11\">一、概念</a></li><li><a href=\"#private_17\">二、类里的private无法访问的解决办法</a></li><li><a href=\"#_23\">三、各种运算符重载</a></li><li><ul><li><a href=\"#1_27\">1.==运算符重载</a></li><li><a href=\"#2_54\">2.+=运算符重载</a></li><li><a href=\"#3_104\">3.+运算符重载</a></li></ul>\n</li><li><a href=\"#_159\">三、赋值运算符重载</a></li><li><a href=\"#_198\">四、对于前四个默认成员函数的总结</a></li><li><a href=\"#_214\">五、对于前置++和后置++的运算符重载</a></li><li><a href=\"#_224\">六、流插入&lt;&lt;和流提取&gt;&gt;的运算符重载</a></li><li><a href=\"#_278\">七、运算符重载注意事项</a></li><li><a href=\"#_290\">八、取地址&amp;运算符重载</a></li><li><a href=\"#_302\">九、总结</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_11\"></a>一、概念</h1>\n<p><mark>C++为了增加代码的可读性增加了运算符重载，运算符重载是具有特殊函数名的函数，也具有返回类型，函数名字以及参数列表，其返回值和参数列表与普通函数相似，<strong>最大的不同就是它具有特殊的函数名</strong></mark></p>\n<p><strong>函数名为：关键字operator后跟需要重载的运算符<br/> 返回值和参数列表由操作符的性质决定</strong></p>\n<h1><a id=\"private_17\"></a>二、类里的private无法访问的解决办法</h1>\n<blockquote>\n<p><strong>1.类中提供获取成员变量的函数，来返回成员变量<br/> 2.友元、但是友元破坏了封装，所以不建议使用<br/> 3.将函数写在类里</strong></p>\n</blockquote>\n<h1><a id=\"_23\"></a>三、各种运算符重载</h1>\n<p><strong>运算符重载的第一个参数也就是this指针是在运算符前面的，比如==的运算符重载<br/> d1==d2; d1就是this指针的参数</strong></p>\n<h2><a id=\"1_27\"></a>1.==运算符重载</h2>\n<p><font color=\"red\"><strong>对于大结构体来说，传引用是很提高效率的，并且里面不需要改变，最好加上const，保证安全（保证里面不会写错），另外，因为this指针我们不能显示写，所以C++中为了修饰this指针指向的内容不能改变，就只能加在后面，如下所示</strong></font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Date</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> year<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> month<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> day<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t_year<span class=\"token operator\">=</span>year<span class=\"token punctuation\">;</span>\n\t\t_month<span class=\"token operator\">=</span>month<span class=\"token punctuation\">;</span>\n\t\t_day <span class=\"token operator\">=</span> day<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> _year<span class=\"token operator\">==</span>d<span class=\"token punctuation\">.</span>_year\n\t\t\t<span class=\"token operator\">&amp;&amp;</span> _month<span class=\"token operator\">==</span>d<span class=\"token punctuation\">.</span>_month\n\t\t\t<span class=\"token operator\">&amp;&amp;</span> _day<span class=\"token operator\">==</span>d<span class=\"token punctuation\">.</span>_day<span class=\"token punctuation\">;</span>   \n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _year<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _month<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _day<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"2_54\"></a>2.+=运算符重载</h2>\n<p>可以看出，+=是可以实现连续加等的，所以要传返回值<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\39506a80eed84889abbb94efc6cd33ae.png\"/></p>\n<pre><code class=\"prism language-cpp\"> <span class=\"token keyword\">class</span>  <span class=\"token class-name\">Date</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> year<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> month<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> day<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">_year</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_month</span><span class=\"token punctuation\">(</span>month<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_day</span><span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">)</span><span class=\"token comment\">//初始化列表，后面讲</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isLeapYear</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> year<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>year <span class=\"token operator\">%</span> <span class=\"token number\">4</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> year <span class=\"token operator\">%</span> <span class=\"token number\">100</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>year <span class=\"token operator\">%</span> <span class=\"token number\">400</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tsize_t <span class=\"token function\">getMonthDay</span><span class=\"token punctuation\">(</span>size_t year<span class=\"token punctuation\">,</span> size_t month<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isLeapYear</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> month <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">29</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">[</span>month<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//当然这里不传引用也是可以</span>\n\tDate<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> size_t<span class=\"token operator\">&amp;</span> day<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t_day <span class=\"token operator\">+=</span> day<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>_day <span class=\"token operator\">&gt;</span> <span class=\"token function\">getMonthDay</span><span class=\"token punctuation\">(</span>_year<span class=\"token punctuation\">,</span> _month<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t_day <span class=\"token operator\">-=</span> <span class=\"token function\">getMonthDay</span><span class=\"token punctuation\">(</span>_year<span class=\"token punctuation\">,</span> _month<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t_month<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_month <span class=\"token operator\">==</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span>\n\t\t\t\t_year<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//因为支持连续+=;</span>\n\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _year<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _month<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _day<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//定义一个静态的数组，方便获得每月的天数</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> Date<span class=\"token double-colon punctuation\">::</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">31</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"3_104\"></a>3.+运算符重载</h2>\n<pre><code class=\"prism language-cpp\"> <span class=\"token keyword\">class</span>  <span class=\"token class-name\">Date</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> year<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> month<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> day<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">_year</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_month</span><span class=\"token punctuation\">(</span>month<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_day</span><span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">)</span><span class=\"token comment\">//初始化列表，后面讲</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isLeapYear</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> year<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>year <span class=\"token operator\">%</span> <span class=\"token number\">4</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> year <span class=\"token operator\">%</span> <span class=\"token number\">100</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>year <span class=\"token operator\">%</span> <span class=\"token number\">400</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tsize_t <span class=\"token function\">getMonthDay</span><span class=\"token punctuation\">(</span>size_t year<span class=\"token punctuation\">,</span> size_t month<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isLeapYear</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> month <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">29</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">[</span>month<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//当然这里不传引用也是可以</span>\n\tDate <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> size_t<span class=\"token operator\">&amp;</span> day<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tDate ret<span class=\"token operator\">=</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//拷贝构造</span>\n\t\tret<span class=\"token punctuation\">.</span>_day <span class=\"token operator\">+=</span> day<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">.</span>_day <span class=\"token operator\">&gt;</span> <span class=\"token function\">getMonthDay</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">.</span>_year<span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">.</span>_month<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tret<span class=\"token punctuation\">.</span>_day <span class=\"token operator\">-=</span> <span class=\"token function\">getMonthDay</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">.</span>_year<span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">.</span>_month<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tret<span class=\"token punctuation\">.</span>_month<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">.</span>_month <span class=\"token operator\">==</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span>\n\t\t\t\tret<span class=\"token punctuation\">.</span>_year<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _year<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _month<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _day<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//定义一个静态的数组，方便获得每月的天数</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> Date<span class=\"token double-colon punctuation\">::</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">31</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>其他的普通的运算符重载我就不写了</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\df42be1e7b504bee92cbe132de11d742.png\"/></p>\n<hr/>\n<h1><a id=\"_159\"></a>三、赋值运算符重载</h1>\n<p><font color=\"red\"><strong>赋值运算符重载只能重载与成员，不能重载于全局，因为赋值运算符重载是默认成员函数，不写也会自动生成，所以，重载于全局的话会起冲突！</strong></font><br/> <strong>注意，赋值也是可以连续赋值的</strong></p>\n<pre><code class=\"prism language-cpp\"> <span class=\"token keyword\">class</span>  <span class=\"token class-name\">Date</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> year<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> month<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> day<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">_year</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_month</span><span class=\"token punctuation\">(</span>month<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_day</span><span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">)</span><span class=\"token comment\">//初始化列表，后面讲</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token punctuation\">}</span>\n\tDate<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> d<span class=\"token punctuation\">)</span><span class=\"token comment\">//支持连续赋值</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">!=</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t_year<span class=\"token operator\">=</span>d<span class=\"token punctuation\">.</span>_year<span class=\"token punctuation\">;</span>\n\t\t\t_month<span class=\"token operator\">=</span>d<span class=\"token punctuation\">.</span>_month<span class=\"token punctuation\">;</span>\n\t\t\t_day<span class=\"token operator\">=</span>d<span class=\"token punctuation\">.</span>_day<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _year<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _month<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _day<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p><strong>赋值运算符重载也是默认成员函数，我们不显示写时编译器默认生成，以值拷贝（浅拷贝）的方式逐字节进行，同样，对于内置类型直接浅拷贝，对于自定义类型，调用对应的默认赋值运算符重载函数完成赋值，所以像日期类这种就不需要自己写了，但是如果是自己开辟空间的那种，就需要自己来实现深拷贝完成赋值。</strong><br/> <strong>原因：</strong><br/> <strong>1.浅拷贝拷贝出来的地址和参数是相同的，所以会存在可以互相修改的问题</strong><br/> <strong>2.会被free或者delete两次，报错</strong></p>\n</blockquote>\n<hr/>\n<h1><a id=\"_198\"></a>四、对于前四个默认成员函数的总结</h1>\n<p>1.大部分的类都要自己去实现构造函数，除了像用两个栈来实现队列的这一种类，这个队列会去<br/> 调用栈的构造函数，所以不用自己写。<br/> 2.每个类最好都提供不传参数的构造函数<br/>     a.编译器生成的构造<br/>     b.自己写的无参构造<br/>     c.全缺省构造<br/> 3.对于析构，只需要自己申请了空间的类去写，包括两个栈实现队列的也不用写（栈要写，队列不写），而栈帧和栈的性质相似，所以先定义的后析构，后定义的先析构。<br/> 4.拷贝构造函数其实是构造函数的重载<br/> <strong>对于重载，发现void func(int a)和void func(int&amp;aa)构成重载，因为函数名的修饰规则不同<br/> 但是又发现typeid(a).name()和typeid(aa).name()都是int</strong><br/> 5.拷贝构造和赋值运算符重载对于不需要深拷贝的类就不用写，默认使用的浅拷贝足够<br/> 6.很多运算符重载都是可以复用的，比如说+=和+，&gt; &gt;= &lt; &lt;=.</p>\n<hr/>\n<h1><a id=\"_214\"></a>五、对于前置++和后置++的运算符重载</h1>\n<p>为了对前置++和后置++和前置–和后置–做区分，C++对于这一点利用函数重载去区分</p>\n<pre><code class=\"prism language-cpp\">Date<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//前置</span>\nDate<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//后置</span>\n</code></pre>\n<hr/>\n<h1><a id=\"_224\"></a>六、流插入&lt;&lt;和流提取&gt;&gt;的运算符重载</h1>\n<blockquote>\n<p>首先说明<br/> cin和cout是对象而不是函数<br/> cin是istream的对象<br/> cout是ostream的对象</p>\n</blockquote>\n<p>流插入&lt;&lt;和流提取&gt;&gt;需要写成全局的，因为在类里，cin无法作为左操作数，而cin或者cout</p>\n<pre><code class=\"prism language-cpp\">cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">2</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">3</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\ncin<span class=\"token operator\">&gt;&gt;</span>a<span class=\"token operator\">&gt;&gt;</span>b<span class=\"token operator\">&gt;&gt;</span>c<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//因为cin和cout需要当左操作数，所以写成全局的，不受this指针影响。</span>\n</code></pre>\n<p><strong>所以正确写法：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">friend</span> ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>ostream<span class=\"token operator\">&amp;</span>out<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> year<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> month<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> day<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">_year</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">_month</span><span class=\"token punctuation\">(</span>month<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">_day</span><span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token punctuation\">}</span>\t\n\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _year<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _month<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _day<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//cout与cin类似</span>\n<span class=\"token keyword\">inline</span> ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>ostream<span class=\"token operator\">&amp;</span>out<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> d<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//因为在类外，获得private成员变量三种方式</span>\n\t<span class=\"token number\">1.</span>类里写get的函数\n\t<span class=\"token number\">2.</span>友元，不建议使用，破坏封装，但是这里用一下友元\n\t<span class=\"token number\">3.</span>私有改公有\n\tout<span class=\"token operator\">&lt;&lt;</span>d<span class=\"token punctuation\">.</span>_year<span class=\"token operator\">&lt;&lt;</span><span class=\"token char\">'.'</span><span class=\"token operator\">&lt;&lt;</span>d<span class=\"token punctuation\">.</span>_month<span class=\"token operator\">&lt;&lt;</span><span class=\"token char\">'.'</span><span class=\"token operator\">&lt;&lt;</span>d<span class=\"token punctuation\">.</span>_day<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> out<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><mark>因为会频繁的调用，所以写成内敛，但是注意，这里不能够声明于定义分离，因为内敛不会进符号表。如果分离，那么在链接的时候找不到函数地址而出现链接错误</mark></p>\n<hr/>\n<h1><a id=\"_278\"></a>七、运算符重载注意事项</h1>\n<p>1.运算符重载不能够去创造新的运算符<br/> 2.重载操作必须有一个类类型参数<br/> 3.重载的含义不能改变，比如说+去实现*<br/> 4.有隐含的this指针<br/> 5.有几个操作符是不能够被重载的<br/>     a.域作用限定符 ::<br/>     b.sizeof()<br/>     c.三目运算符 ?:<br/>     d. .点<br/>     e. .*点乘</p>\n<h1><a id=\"_290\"></a>八、取地址&amp;运算符重载</h1>\n<p>对于这个运算符来说，因为他是默认成员函数，编译器会自己生成，并且，编译器自己生成的也就够用了，所以<strong>一般不用我们自己写，除非遇到特殊的场景：比如我不想让别人拿到我的地址：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//const在*之前修饰指针指向的内容</span>\n<span class=\"token comment\">//const在*之后修饰指针</span>\nA<span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//Date *const this默认参数</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_302\"></a>九、总结</h1>\n<p><font color=\"red\"><strong>上面对C++运算符重载重要知识点进行了总结，感谢大家的支持，后面我会继续更新类和对象有关方面的内容！</strong></font><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cc22094f8d2c4aecb86ec1ac6bd261a1.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-31 22:21:13", "summary": "各位大佬大家好，我是猪皮兄弟在这里插入图片描述今天的内容是运算符重载，内置类型可以直接使用运算符运算，因为编译器知道该如何进行运算，自定义类型无法直接使用运算符，编译器也不知道该如何运算，如果想要让编"}