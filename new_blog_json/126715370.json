{"blogid": "126715370", "writerAge": "码龄5年", "writerBlogNum": "237", "writerCollect": "1305", "writerComment": "164", "writerFan": "2671", "writerGrade": "5级", "writerIntegral": "4096", "writerName": "Python 集中营", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126715370.jpg", "writerRankTotal": "4138", "writerRankWeekly": "3933", "writerThumb": "318", "writerVisitNum": "309065", "blog_read_count": "67", "blog_time": "于 2022-09-05 22:56:47 发布", "blog_title": "pyqt5 应用的主题样式！", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night-eighties\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>在论坛上逛着逛着又发现一个看起来比较好看的pyqt5的主题样式非标准库qt_material，这是除了之前应用过程的第三个pyqt5主题样式库的使用。</p>\n<p>qt_material总共包含了25种主题样式，我们直接在application中使用即可，使用起来相当简单，下面从官网上面截取的官方示例图的展示。</p>\n<p><img alt=\"qt-mat官方示例图\" src=\"..\\..\\static\\image\\86d67eedfa394bb5a3865bf6ff5ba086.png\"/></p>\n<p>给发布qt_material非标准库的大佬递茶！</p>\n<p>1、准备</p>\n<p>言归正传，qt_material作为独立的python非标准库同样需要安装一下才行，采用pip的方式进行安装。</p>\n<pre><code class=\"prism language-python\">pip install <span class=\"token operator\">-</span>i https<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>pypi<span class=\"token punctuation\">.</span>tuna<span class=\"token punctuation\">.</span>tsinghua<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>cn<span class=\"token operator\">/</span>simple qt<span class=\"token operator\">-</span>material\n</code></pre>\n<p>我这边是已经安装好的效果，提示已经安装成功了。</p>\n<p><img alt=\"qt-mat样式安装.png\" src=\"..\\..\\static\\image\\245bc713f6194a29bb681360811f562e.png\"/></p>\n<p>安装完成之后，导入qt_material模块的list_themes接口，查看一下提供多少种主题样式的.xml文件。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> qt_material <span class=\"token keyword\">import</span> list_themes\n\n<span class=\"token comment\"># 导入pprint接口，可以打印出更加漂亮的list列表数据</span>\n<span class=\"token keyword\">from</span> pprint <span class=\"token keyword\">import</span> pprint\n\npprint<span class=\"token punctuation\">(</span><span class=\"token string\">'总计主题样式：{} 种！'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>list_themes<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\npprint<span class=\"token punctuation\">(</span>list_themes<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># WARNING:root:qt_material must be imported after PySide or PyQt!</span>\n<span class=\"token comment\"># '总计主题样式：26 种！'</span>\n<span class=\"token comment\"># ['dark_amber.xml',</span>\n<span class=\"token comment\">#  'dark_blue.xml',</span>\n<span class=\"token comment\">#  'dark_cyan.xml',</span>\n<span class=\"token comment\">#  'dark_lightgreen.xml',</span>\n<span class=\"token comment\">#  'dark_pink.xml',</span>\n<span class=\"token comment\">#  'dark_purple.xml',</span>\n<span class=\"token comment\">#  'dark_red.xml',</span>\n<span class=\"token comment\">#  'dark_teal.xml',</span>\n<span class=\"token comment\">#  'dark_yellow.xml',</span>\n<span class=\"token comment\">#  'light_amber.xml',</span>\n<span class=\"token comment\">#  'light_blue.xml',</span>\n<span class=\"token comment\">#  'light_blue_500.xml',</span>\n<span class=\"token comment\">#  'light_cyan.xml',</span>\n<span class=\"token comment\">#  'light_cyan_500.xml',</span>\n<span class=\"token comment\">#  'light_lightgreen.xml',</span>\n<span class=\"token comment\">#  'light_lightgreen_500.xml',</span>\n<span class=\"token comment\">#  'light_orange.xml',</span>\n<span class=\"token comment\">#  'light_pink.xml',</span>\n<span class=\"token comment\">#  'light_pink_500.xml',</span>\n<span class=\"token comment\">#  'light_purple.xml',</span>\n<span class=\"token comment\">#  'light_purple_500.xml',</span>\n<span class=\"token comment\">#  'light_red.xml',</span>\n<span class=\"token comment\">#  'light_red_500.xml',</span>\n<span class=\"token comment\">#  'light_teal.xml',</span>\n<span class=\"token comment\">#  'light_teal_500.xml',</span>\n<span class=\"token comment\">#  'light_yellow.xml']</span>\n</code></pre>\n<p>开发pyqt5应用时可以选择其中的主题样式来使用起来。</p>\n<p>2、使用主题</p>\n<p>安装完成之后，在我们的应用直接导入使用就能出现比较漂亮的样式，可视化效果杠杠的。</p>\n<p>这里使用我们的传统的方式来创建一个pyqt5 application应用，并选择任意一种主题样式来使用。</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 导入pyqt5应用需要的相关的python非标准库用来编写这个测试用例的应用。</span>\n\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> QWidget<span class=\"token punctuation\">,</span> QApplication\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> QIcon\n<span class=\"token keyword\">import</span> sys\n\n<span class=\"token keyword\">from</span> qt_material <span class=\"token keyword\">import</span> apply_stylesheet\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorldUI</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>HelloWorldUI<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>init_ui<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">init_ui</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World [Python 集中营]'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>setWindowIcon<span class=\"token punctuation\">(</span>QIcon<span class=\"token punctuation\">(</span><span class=\"token string\">'python.ico'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># TODO：此实例为了展示apply_stylesheet主题的用法，这里就不添加详细按钮等组件了。</span>\n</code></pre>\n<p>编写完成之后就要使用这个qt_material模块给我这里的测试用例hello_world添加预期的主题样式显得更加的美观。</p>\n<p>首先将样式库导入到当前的代码块中，然后在main函数启动整个应用时直接调用。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    apply_stylesheet<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span> theme<span class=\"token operator\">=</span><span class=\"token string\">'dark_teal.xml'</span><span class=\"token punctuation\">)</span>\n    hello_world <span class=\"token operator\">=</span> HelloWorldUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    hello_world<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>下面这行代码块就是我们自己添加的主题样式引用的代码块，调用时一行代码就直接完成了，是不是很方便呢？</p>\n<pre><code class=\"prism language-python\">apply_stylesheet<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span> theme<span class=\"token operator\">=</span><span class=\"token string\">'dark_teal.xml'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>另外我们通过替换dark_teal.xml文件就可以完成对不同样式的引用，相当好用。其他的样式文件，我们在第一步做准备时已经使用list_themes全部列举出来了。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-05 22:56:47", "summary": "在论坛上逛着逛着又发现一个看起来比较好看的的主题样式非标准库，这是除了之前应用过程的第三个主题样式库的使用。总共包含了种主题样式，我们直接在中使用即可，使用起来相当简单，下面从官网上面截取的官方示例图"}