{"blogid": "120660845", "writerAge": "码龄4年", "writerBlogNum": "64", "writerCollect": "249", "writerComment": "79", "writerFan": "101", "writerGrade": "4级", "writerIntegral": "901", "writerName": "1+!", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_120660845.jpg", "writerRankTotal": "222933", "writerRankWeekly": "284260", "writerThumb": "96", "writerVisitNum": "79959", "blog_read_count": "14788", "blog_time": "于 2021-10-08 21:54:35 发布", "blog_title": "Nginx漏洞总结", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"Nginx_0\"></a>Nginx简介</h2>\n<p><em>Nginx</em> (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、简单的配置文件和低系统资源的消耗而闻名。2011年6月1日，nginx 1.0.4发布。</p>\n<p>Nginx是一款轻量级的Web服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。</p>\n<h2><a id=\"Nginx_6\"></a>Nginx环境安装</h2>\n<p>这里我用的小皮代替，就不一步步安装了</p>\n<p><img alt=\"image-20210920171454084\" src=\"..\\..\\static\\image\\360cfef9b5fea679de2f4621385e2f8a.png\"/></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\19b1cce43ee7549af89a41721e93a14e.png\"/></p>\n<p>不用小皮安装的可以参考这两个：</p>\n<p>https://zhuanlan.zhihu.com/p/83890573</p>\n<p>https://www.runoob.com/linux/nginx-install-setup.html</p>\n<h2><a id=\"Nginx_20\"></a>Nginx渗透</h2>\n<h3><a id=\"_22\"></a>文件解析漏洞</h3>\n<h4><a id=\"_24\"></a>漏洞描述</h4>\n<p>该漏洞与nginx、php版本无关,属于用户配置不当造成的解析漏洞。由于nginx.conf的如下配置导致nginx把以’.php’结尾的文件交给fastcgi处理,对于任意文件名，在后面添加/xxx.php（xxx）为任意字符后，即可将文件作为php解析。</p>\n<p>常见的漏洞配置：</p>\n<p><img alt=\"image-20210922135925331\" src=\"..\\..\\static\\image\\7b32e67dc1800945053c44481e238ca6.png\"/></p>\n<h4><a id=\"_32\"></a>漏洞复现</h4>\n<p>新建一个1.jpg写入phpinfo</p>\n<p><img alt=\"image-20210922104516994\" src=\"..\\..\\static\\image\\d127963a5f8aed26a0c284df95e7b6b8.png\"/></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\3170f1a4b31795540bd14f9f821f4a11.png\"/></p>\n<p>1.jpg后面加上/xxx.php，便会以php解析</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\723cdc3683018f81d08735a7a7f3a9ce.png\"/></p>\n<p>当访问/1.jpg/xxx.php时，nginx将查看url，看到它以.php结尾，将路径传给PHP fastcgi进行处理。但是fastcgi在处理’xxx.php’文件时发现文件并不存在,这时php.ini配置文件中cgi.fix_pathinfo=1 发挥作用,这项配置默认开启，值为1，用于修复路径,如果当前路径不存在则采用上层路径。为此这里交由fastcgi处理的文件就变成了’/1.jpg’。新版本的php的配置文件php-fpm.conf引入了“security.limit_extensions”，限制了可执行文件的后缀，默认只允许执行.php文件。</p>\n<h4><a id=\"_46\"></a>修复方法</h4>\n<p>1、 将php.ini文件中的cgi.fix_pathinfo的值设置为0</p>\n<p>2、 php-fpm.conf中的security.limit_extensions后面的值设置为.php</p>\n<h3><a id=\"_52\"></a>目录遍历</h3>\n<h4><a id=\"_54\"></a>漏洞原理</h4>\n<p>Nginx的目录遍历与apache一样,属于配置方面的问题,错误的配置可导致目录遍历与源码泄露。</p>\n<h4><a id=\"_58\"></a>漏洞复现</h4>\n<p><img alt=\"image-20210922140456388\" src=\"..\\..\\static\\image\\508c79f40c026001262bf16f807f3839.png\"/></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\2712042ecdd026fa2c6a63f974a6189c.png\"/></p>\n<p>在www目录下新建一个web目录测试</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\18e6e219472aca5805abda077b32c3cc.png\"/></p>\n<p><img alt=\"image-20210923110307070\" src=\"..\\..\\static\\image\\185fd02c5af2ea448b395f3912a7f536.png\"/></p>\n<h4><a id=\"_70\"></a>修复方法</h4>\n<p>修复on改为off即可。</p>\n<h3><a id=\"_74\"></a>空字节任意代码执行漏洞</h3>\n<h4><a id=\"_76\"></a>漏洞原理</h4>\n<p>Ngnix在遇到%00空字节时与后端FastCGI处理不一致，导致可以在图片中嵌入PHP代码然后通过访问xxx.jpg%00.php来执行其中的代码.</p>\n<h4><a id=\"_80\"></a>影响版本</h4>\n<pre><code>nginx 0.5.*\nnginx 0.6.*\nnginx 0.7 &lt;= 0.7.65\nnginx 0.8 &lt;= 0.8.37\n</code></pre>\n<h4><a id=\"_89\"></a>漏洞复现</h4>\n<p>这里复现环境是Nginx 0.7.65+php 5.3.2，这里需要电脑上有.net framework4的环境。</p>\n<p><img alt=\"image-20210923133638926\" src=\"..\\..\\static\\image\\0869d4fc6773be83d197a7d0f8e33bb5.png\"/></p>\n<p>在nginx目录下执行startup.bat</p>\n<p><img alt=\"image-20210924100329615\" src=\"..\\..\\static\\image\\fa7668c2f1586d433ac378684e6069e5.png\"/></p>\n<p><img alt=\"image-20210924100713225\" src=\"..\\..\\static\\image\\3125eb0941c3eafffbddf34fdafffb03.png\"/></p>\n<p>建立1.jpg，写入</p>\n<p><img alt=\"image-20210924101955592\" src=\"..\\..\\static\\image\\571a496e2aeddc91a7974943b939d144.png\"/></p>\n<p>访问1.jpg…php,抓包</p>\n<p><img alt=\"image-20210924105355003\" src=\"..\\..\\static\\image\\adffca8a42184497e8522d3e6e745c0a.png\"/></p>\n<p>在hex选项卡中将jpg后面的点修改为00</p>\n<p><img alt=\"image-20211007151031982\" src=\"..\\..\\static\\image\\dfae240b0e7b88c96fa84151068fdb21.png\"/></p>\n<p><img alt=\"image-20211007151058422\" src=\"..\\..\\static\\image\\a2dc337b206cc23759a213379d329223.png\"/></p>\n<p>成功绕过。</p>\n<p><img alt=\"image-20211007151131148\" src=\"..\\..\\static\\image\\7814cc87700cf2d6d548c5a7f3c7a945.png\"/></p>\n<p>forward一下</p>\n<p><img alt=\"image-20211007151633082\" src=\"..\\..\\static\\image\\171c872a9b3dcdf0872d6b80911aab40.png\"/></p>\n<p>该漏洞不受cgi.fix_pathinfo影响，其为0也能解析。</p>\n<h4><a id=\"_125\"></a>修复方法</h4>\n<p>升级nginx版本。</p>\n<h3><a id=\"CRLF_129\"></a>CRLF注入漏洞</h3>\n<h4><a id=\"_131\"></a>漏洞原理</h4>\n<p>CRLF是”回车+换行”(rn)的简称,其十六进制编码分别为0x0d和0x0a。在HTTP协议中,HTTP header与HTTP Body是用两个CRLF分隔的,浏览器就是根据这两个CRLF来取出HTTP内容并显示出来。所以,一旦我们能够控制HTTP消息头中的字符,注入一些恶意的换行,这样我们就能注入一些会话Cookie或者HTML代码。CRLF漏洞常出现在Location与Set-cookie消息头中。</p>\n<p>在nginx.conf中，在location位置添加如下配置，当用户访问nginx服务器时此配置实现强制跳转到https协议访问之前访问的链接。</p>\n<pre><code>location / { \n return 302 https://$host$uri;\n}\n</code></pre>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\a697411dd40d52ba674a3301852e72bf.png\"/></p>\n<pre><code>1.是配置中的$url是我们可以控制的,这样我们就可以在$url处填入CRLF,然后对服务器进行访问实现头部注入。\n2.服务器会返回一个302跳转给用户,所以我们注入的头部参数又会返回到客户这边。\n</code></pre>\n<h4><a id=\"_150\"></a>漏洞复现</h4>\n<p>修改完上面nginx.conf配置后，重启nginx；</p>\n<p>访问链接：http://192.168.190.150/%0ASet-cookie:JSPSESSID%3D6666</p>\n<p>（换行和回车的URL编码分别是%0d%0a）</p>\n<p>抓包，可以看到将6666通过set-cookie返回；</p>\n<p><img alt=\"image-20211008164305084\" src=\"..\\..\\static\\image\\f513e6270d68d462ae500cf70aba8d0b.png\"/></p>\n<p>CRLF+XSS配合：</p>\n<pre><code>%0D%0A%0D%0A%3Cimg%20src=1%20onerror=alert(/xss/)%3E\n</code></pre>\n<p><img alt=\"image-20211008165740115\" src=\"..\\..\\static\\image\\34bb2b1f8abfd60a3875dd47b7502e54.png\"/></p>\n<p>不过这里浏览器并没有弹窗，那是因为浏览器filter对xss特征进行了过滤，这里用低版本浏览器才可以弹出来。</p>\n<h4><a id=\"_172\"></a>修复方法</h4>\n<p>删除配置不当的配置。</p>\n<h3><a id=\"CVE20134547_176\"></a>文件名逻辑漏洞(CVE-2013-4547)</h3>\n<h4><a id=\"_178\"></a>漏洞原理</h4>\n<p>当请求如下URI时：/test[0x20]/…/admin/index.php，这个URI不会匹配上location后面的/admin/，也就绕过了其中的IP验证；但最后请求的是/test[0x20]/…/admin/index.php文件，也就是/admin/index.php，成功访问到后台。（这个前提是需要有一个目录叫test：这是Linux系统的特点，如果有一个不存在的目录，则即使跳转到上一层，也会爆文件不存在的错误，Windows下没有这个限制）。</p>\n<h4><a id=\"_182\"></a>影响版本</h4>\n<pre><code>Nginx 0.8.41 ~ 1.4.3\nNginx 1.5.0 ~ 1.5.7\n</code></pre>\n<h4><a id=\"_189\"></a>漏洞复现</h4>\n<p>windows环境下不允许存在文件名后带空格的文件，因此复现使用vulhub进行测试。</p>\n<p>启动漏洞环境：</p>\n<p><img alt=\"image-20211008181003971\" src=\"..\\..\\static\\image\\ef2059e8b2bb25863bc82009fb9d4ffc.png\"/></p>\n<p><img alt=\"image-20211008181056338\" src=\"..\\..\\static\\image\\7125e56bca1642e0ff4b62254aac3ebd.png\"/></p>\n<p>上传1.jpg，并进行抓包；</p>\n<p><img alt=\"image-20211008181329364\" src=\"..\\..\\static\\image\\2f1cd3a8b5e9a08d9070224d7d3b1016.png\"/></p>\n<p><img alt=\"image-20211008181502941\" src=\"..\\..\\static\\image\\5d59e54dc8b2878f82d23af9c494c255.png\"/></p>\n<p>在1.jpg后添加一个空格</p>\n<p><img alt=\"image-20211008181837060\" src=\"..\\..\\static\\image\\74fb604b2a1ba81d95bbdcd41ea4bf41.png\"/></p>\n<p>访问返回的该链接并加.php抓包；</p>\n<pre><code>http://192.168.190.134:8080/uploadfiles/1.jpg...php\n</code></pre>\n<p><img alt=\"image-20211008182054213\" src=\"..\\..\\static\\image\\dc3eae96fcec4ccca2a630b79f9144d5.png\"/></p>\n<p>在hex选项卡中将jpg后面的2个点的hex值2e分别修改为20，00；</p>\n<p><img alt=\"image-20211008182459046\" src=\"..\\..\\static\\image\\b1100659b846c6cf4db7ecbac5c77865.png\"/></p>\n<p><img alt=\"image-20211008182521630\" src=\"..\\..\\static\\image\\c8d3a07b35113cc7ad655a08e7bff88e.png\"/></p>\n<p><img alt=\"image-20211008182556356\" src=\"..\\..\\static\\image\\da4847ed34f5f0a48577d9f0ee2bbcf5.png\"/></p>\n<p><img alt=\"image-20211008182610748\" src=\"..\\..\\static\\image\\40c4ef11c482a437a93a829dca76dbf9.png\"/></p>\n<p>成功绕过。</p>\n<p>这个漏洞主要原因是错误地解析了请求的URL，错误地获取到用户请求的文件名，导致出现权限绕过、代码执行的连带影响。</p>\n<p>Nginx匹配到.php结尾的请求，就发送给fastcgi进行解析，常见的写法如下：</p>\n<p><img alt=\"image-20211008192010031\" src=\"..\\..\\static\\image\\3ecdfda28bf6e3148a096b30ce1ab0ec.png\"/></p>\n<p>正常情况下（关闭pathinfo的情况下），只有.php后缀的文件才会被发送给fastcgi解析。</p>\n<p>而存在CVE-2013-4547的情况下，我们请求1.jpg\\0x20\\0x00.php，这个URI可以匹配上正则.php$，可以进入这个Location块；但进入后，Nginx却错误地认为请求的文件是1.jpg\\0x20，就设置其为SCRIPT_FILENAME的值发送给fastcgi。fastcgi根据SCRIPT_FILENAME的值进行解析，最后造成了解析漏洞。所以，我们只需要上传一个空格结尾的文件，即可使PHP解析之。</p>\n<p>参考链接：https://blog.csdn.net/weixin_40412037/article/details/106234840</p>\n<h4><a id=\"_241\"></a>修复方法</h4>\n<p>升级版本</p>\n<h3><a id=\"CVE20177529_245\"></a>整数溢出(CVE-2017-7529)</h3>\n<h4><a id=\"_247\"></a>漏洞原理</h4>\n<p>在Nginx的range filter中存在整数溢出漏洞，可以通过带有特殊构造的range的HTTP头的恶意请求引发这个整数溢出漏洞，并导致信息泄露。</p>\n<h4><a id=\"_251\"></a>影响版本</h4>\n<pre><code>Nginx 0.5.6 – 1.13.2\n</code></pre>\n<h4><a id=\"_257\"></a>漏洞复现</h4>\n<p>开启漏洞</p>\n<p><img alt=\"image-20211008194019260\" src=\"..\\..\\static\\image\\a30cad991ede8fa40ad534c033a635b6.png\"/></p>\n<p><img alt=\"image-20211008194048620\" src=\"..\\..\\static\\image\\e66088a3b23941f677bcbd4c9cdca92b.png\"/></p>\n<p>在靶机web根目录下创建一个图片文件当缓存文件</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\3750cdb1e4f67741171b648cfdb116d9.png\"/></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\c4f99daa9c5eed7c160af1e646102267.png\"/></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\02d00c1ea45cc1179222899e826843d2.png\"/></p>\n<p>去靶机中的 <code>/tmp/nginx</code>中查看缓存文件，可以看到，cache key的内容保存在了里面，此外还有服务器信息，这些都是不会返回给客户端的，但是因为这次的漏洞而导致这些信息也被返回，导致信息泄露；</p>\n<p><img alt=\"image-20211008214554464\" src=\"..\\..\\static\\image\\18470a18f8e2b8ea9f4e3c8c35947772.png\"/></p>\n<p>对，这个没成功，缓存文件中的这些信息并没有返回回来，先待定~</p>\n<p>参考文档：https://paper.seebug.org/353/ https://cloud.tencent.com/developer/article/1680569</p>\n<h4><a id=\"_281\"></a>修复方法</h4>\n<p>建议升级到 1.13.3 和 1.12.1 版本；如果不能升级，可以在 Nginx 配置文件中添加 max_ranges 1，从而禁用 multipart range。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 1, "time": "2021-10-08 21:54:35", "summary": "简介是一个高性能的和反向代理服务器，同时也提供了服务。其将源代码以类许可证的形式发布，因它的稳定性、丰富的功能集、简单的配置文件和低系统资源的消耗而闻名。年月日，发布。是一款轻量级的服务器反向代理服务"}