{"blogid": "119707231", "writerAge": "码龄2年", "writerBlogNum": "103", "writerCollect": "2721", "writerComment": "1835", "writerFan": "10699", "writerGrade": "6级", "writerIntegral": "6328", "writerName": "捕获一只小肚皮", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_119707231.jpg", "writerRankTotal": "33238", "writerRankWeekly": "10087", "writerThumb": "2882", "writerVisitNum": "106067", "blog_read_count": "2341", "blog_time": "于 2021-08-14 22:29:51 发布", "blog_title": "C++内存四大区域", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_1\">前言</a></li><li><a href=\"#_13\">所划分的内存区块有?</a></li><li><a href=\"#_34\">代码区解析</a></li><li><a href=\"#_49\">全局区解析</a></li><li><ul><li><a href=\"#1__57\">1 全局变量的地址</a></li><li><a href=\"#2__90\">2 静态变量的地址</a></li><li><a href=\"#3_const_133\">3 常量(字符常量及const全局常量)</a></li></ul>\n</li><li><a href=\"#_185\">栈区解析</a></li><li><ul><li><a href=\"#1__191\">1 普通局部变量</a></li><li><a href=\"#2_const_226\">2 const修饰局部变量</a></li><li><a href=\"#3__279\">3 栈区注意事项</a></li></ul>\n</li><li><a href=\"#_317\">堆区解析</a></li><li><a href=\"#new_354\">new的用法</a></li><li><ul><li><a href=\"#1__358\">1 开辟单个堆区元素</a></li><li><a href=\"#2__391\">2 开辟数组</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>前言</h1>\n<blockquote>\n<p><strong>c++在执行程序(<code>.exe</code>程序)时候会对内存进行划分区域,主要目的就是方便更加<code>高效以及灵活</code>编程</strong>.</p>\n<p><strong>那么,在此过程阶段,是怎样划分区域,以及各区域都是在发挥着什么作用呢? 下面博主就详细的给大家介绍介绍</strong></p>\n</blockquote>\n<hr/>\n<h1><a id=\"_13\"></a>所划分的内存区块有?</h1>\n<p><strong>在执行C++程序时候,所划分出的内存区块主要有四个:</strong></p>\n<ul><li><strong><code>代码区:</code> 存放着程序的二进制代码,由操作系统管理</strong></li><li><strong><code>全局区:</code>存放全局变量,静态变量,以及常量(字符常量和<code>const</code>修饰的<code>全局</code>变量)</strong></li><li><strong><code>栈区:</code>存放所有的局部变量,其空间分配释放由编译器管理,当函数结束,局部变量自动被释放</strong></li><li><strong><code>堆区:</code>存放所有动态开辟的变量,其空间分配释放由程序员管理</strong></li></ul>\n<p><strong>其中在<code>exe程序</code>执行前只有代码区和全局区,在执行时才具有栈区与堆区</strong></p>\n<hr/>\n<h1><a id=\"_34\"></a>代码区解析</h1>\n<blockquote>\n<p><strong>在代码区里面存放的是<code>exe</code>二进制机器指令,它(<code>代码区</code>)具有两个特性:</strong></p>\n<ul><li><strong><code>共享性:</code>即在内存里面只有一份此程序代码,而无论谁都可以使用并运行它. 好处是当被频繁使用时,节约更多空间</strong></li><li><strong><code>只读性:</code>即不允许被修改,这个很好理解.比如我们玩的王者游戏,官方设定一套皮肤100元,而当你下载此游戏并运行时候,有人给你修改了,变成一套皮肤1000元,你干吗?</strong></li></ul>\n</blockquote>\n<hr/>\n<h1><a id=\"_49\"></a>全局区解析</h1>\n<blockquote>\n<p><strong>全局区存的是全局变量,静态变量,以及常量,下面博主便演示下:</strong></p>\n</blockquote>\n<h2><a id=\"1__57\"></a>1 全局变量的地址</h2>\n<blockquote>\n<p><strong>我们先定义几个全局变量,然后进行输出:</strong></p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> ga <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//g是global(全局)的意思</span>\n<span class=\"token keyword\">int</span> gb <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> gc <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"全局变量ga的地址是\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">&amp;</span>ga<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"全局变量gb的地址是\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">&amp;</span>gb<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"全局变量gc的地址是\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">&amp;</span>gc<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<img alt=\"image-20210814194627826\" src=\"..\\..\\static\\image\\20210814194634.png\"/>\n<p><strong>我们可以清晰的发现全局变量的地址都是很接近的.</strong></p>\n<hr/>\n<h2><a id=\"2__90\"></a>2 静态变量的地址</h2>\n<blockquote>\n<p><strong>我们定义几个静态变量,然后输出地址:</strong></p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> ga <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//g是global(全局)的意思</span>\n<span class=\"token keyword\">int</span> gb <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> gc <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> sa <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> sb <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> sc <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    \n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"全局变量ga的地址是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>ga <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"全局变量gb的地址是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>gb <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"全局变量gc的地址是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>gc <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"静态变量sa的地址是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>sa <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"静态变量sb的地址是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>sb <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"静态变量sc的地址是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>sc <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<img alt=\"屏幕截图 2021-08-14 195224\" src=\"..\\..\\static\\image\\20210814195415.png\"/>\n<p><strong>我们发现静态变量与全局变量的地址都是非常接近的,原因就是他们都存在全局区域</strong></p>\n<hr/>\n<h2><a id=\"3_const_133\"></a>3 常量(字符常量及const全局常量)</h2>\n<blockquote>\n<p><strong>一样的道理,首先创建常量,然后输出地址</strong></p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> ga <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//g是global(全局)的意思</span>\n<span class=\"token keyword\">int</span> gb <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> gc <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> cga <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//c是const</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> cgb <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> cgc <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> \n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> sa <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> sb <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> sc <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"全局变量ga的地址是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>ga <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"全局变量gb的地址是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>gb <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"全局变量gc的地址是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>gc <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"静态变量sa的地址是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>sa <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"静态变量sb的地址是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>sb <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"静态变量sc的地址是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>sc <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"字符常量1的地址是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span><span class=\"token string\">\"123\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"字符常量1的地址是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span><span class=\"token string\">\"124\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"字符常量1的地址是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span><span class=\"token string\">\"125\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"const修饰的全局变量cga地址是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>cga<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"const修饰的全局变量cgb地址是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>cgb<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"const修饰的全局变量cgc地址是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>cgc<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<img alt=\"屏幕截图 2021-08-14 195224\" src=\"..\\..\\static\\image\\20210814200559.png\"/>\n<p><strong>我们仍然可以清晰的看到全局变量的地址都是在一定的区域段的(不要说相同段只有005B哦,这是16进制,换算成10进制,这个区段很大的)</strong></p>\n<hr/>\n<h1><a id=\"_185\"></a>栈区解析</h1>\n<blockquote>\n<p><strong>栈区存放的是局部变量,现在我们用一些全局变量和局部变量进行比较</strong></p>\n</blockquote>\n<h2><a id=\"1__191\"></a>1 普通局部变量</h2>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> ga <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//g是global(全局)的意思</span>\n<span class=\"token keyword\">int</span> gb <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> gc <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> la <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//l是local(局部的意思)</span>\n\t<span class=\"token keyword\">int</span> lb <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> lc <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    \n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"全局变量ga的地址是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>ga <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"全局变量gb的地址是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>gb <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"全局变量gc的地址是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>gc <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"局部变量la的地址是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>la <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"局部变量lb的地址是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>lb <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"局部变量lc的地址是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>lc <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<img alt=\"image-20210814211600366\" src=\"..\\..\\static\\image\\20210814211600.png\"/>\n<p><strong>可以发现局部变量前面区段的地址和全局变量差距特别大,这就很好的说明了<code>全局区</code>和<code>栈区</code>是两个不同区域</strong></p>\n<hr/>\n<h2><a id=\"2_const_226\"></a>2 const修饰局部变量</h2>\n<blockquote>\n<p><strong>我们用全局变量,全局const,局部变量,局部const进行对比</strong></p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> ga <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//g是global(全局)的意思</span>\n<span class=\"token keyword\">int</span> gb <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> gc <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> cga <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//c是const</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> cgb <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> cgc <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> ca <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> cb <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> cc <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"全局变量ga的地址是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>ga <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"全局变量gb的地址是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>gb <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"全局变量gc的地址是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>gc <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"const修饰的全局变量cga地址是(全局常量)\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>cga <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"const修饰的全局变量cgb地址是(全局常量)\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>cgb <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"const修饰的全局变量cgc地址是(全局常量)\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>cgc <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"局部变量a的地址是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"局部变量b的地址是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"局部变量c的地址是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"const修饰的局部变量ca的地址是(局部常量)\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>ca <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"const修饰的局部变量cb的地址是(局部常量)\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>cb <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"const修饰的局部变量cc的地址是(局部常量)\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>cc <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<img alt=\"image-20210814212849588\" src=\"..\\..\\static\\image\\20210814212849.png\"/>\n<p><strong>可以发现全局const常量和局部const常量他们的所属区是不一样的,局部const常量是所属于栈区.</strong></p>\n<hr/>\n<h2><a id=\"3__279\"></a>3 栈区注意事项</h2>\n<blockquote>\n<p><strong>栈区里面的变量不可返回地址,因为在func函数结束时候a的空间就被释放了,里面存的值就没有了,不信我们看下面:</strong></p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"*p的值是\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<img alt=\"image-20210814214301080\" src=\"..\\..\\static\\image\\20210814214301.png\"/>\n<p><strong>咦???,博主被打脸了哎,怎么还是可以访问到值呢?并且是正确的10</strong></p>\n<p><strong>真的是这样吗?我们再调用几次试试?</strong></p>\n<img alt=\"image-20210814214623302\" src=\"..\\..\\static\\image\\20210814214623.png\"/>\n<p><strong>发现是不是只有第一次调用才是正确的?其实之所以第一次调用对了,是因为编译器(VS2019)害怕你误用,特地给你保留了一次结果,哎~~,编译器为了我们这些憨憨可真是操碎了心.</strong></p>\n<hr/>\n<h1><a id=\"_317\"></a>堆区解析</h1>\n<blockquote>\n<p><strong>堆区的开辟释放由程序员自己执行,开辟一般用<code>new</code>,释放一般用<code>delete</code></strong></p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//看不懂这里的,下面有介绍new用法</span>\n    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"func的值是\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">*</span>p<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"func的值是\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">*</span>p<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"func的值是\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">*</span>p<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    delete p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<img alt=\"image-20210814215402212\" src=\"..\\..\\static\\image\\20210814215402.png\"/>\n<p><strong>我们发现堆区就完全不受影响,其值仍然是堆区的值10</strong></p>\n<hr/>\n<h1><a id=\"new_354\"></a>new的用法</h1>\n<h2><a id=\"1__358\"></a>1 开辟单个堆区元素</h2>\n<blockquote>\n<p><strong>语法:</strong></p>\n<ul><li><strong>开辟:<code>type* name = new type(content);</code>type是元素类型,content是元素内容,name是变量名</strong></li><li><strong>释放: <code>delete name</code></strong></li></ul>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">//开辟整型元素,存10进去</span>\n    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> p2 <span class=\"token operator\">=</span> new <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span><span class=\"token number\">20.12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//开辟单精度浮点,存20.12进去</span>\n    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p3 <span class=\"token operator\">=</span> new <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//开辟字符元素,存'w'进去</span>\n    \n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"整型元素的值是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p1 <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"浮点元素的值是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p2 <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"字符元素的值是\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p3 <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    delete p1<span class=\"token punctuation\">;</span>\n    delete p2<span class=\"token punctuation\">;</span>\n    delete p3<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<img alt=\"image-20210814221524148\" src=\"..\\..\\static\\image\\20210814221524.png\"/>\n<hr/>\n<h2><a id=\"2__391\"></a>2 开辟数组</h2>\n<blockquote>\n<p><strong>语法:</strong></p>\n<ul><li><strong><code>type* name = new type[size];</code> name是变量名,type是类型,size是数组空间数量</strong></li><li><strong>释放: <code>delete []name</code> 必须有一个[ ]哦~~~</strong></li></ul>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//开辟整型数组,10个元素</span>\n    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p2 <span class=\"token operator\">=</span> new <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//开辟字符数组,10个元素</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//整形数组赋值</span>\n        p1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//字符数组赋值</span>\n        p2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">65</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//打印</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> p1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> p2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n    delete <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>p1<span class=\"token punctuation\">;</span>\n    delete <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>p2<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<img alt=\"image-20210814222734005\" src=\"..\\..\\static\\image\\20210814222734.png\"/>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-08-14 22:29:51", "summary": "文章目录前言所划分的内存区块有代码区解析全局区解析全局变量的地址静态变量的地址常量字符常量及全局常量栈区解析普通局部变量修饰局部变量栈区注意事项堆区解析的用法开辟单个堆区元素开辟数组前言在执行程序程序"}