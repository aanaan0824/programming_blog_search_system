{"blogid": "126699428", "writerAge": "码龄5年", "writerBlogNum": "133", "writerCollect": "216", "writerComment": "21", "writerFan": "418", "writerGrade": "4级", "writerIntegral": "1466", "writerName": "小地瓜重新去华容道工作", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126699428.jpg", "writerRankTotal": "13145", "writerRankWeekly": "2415", "writerThumb": "41", "writerVisitNum": "116583", "blog_read_count": "100", "blog_time": "于 2022-09-05 11:38:38 发布", "blog_title": "【python】文件操作", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"1.%20open()%20%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:0px;\"><a href=\"#1.%20open%28%29%20%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6\">1. open() 打开文件</a></p>\n<p id=\"2.%20read()%2Fwrite()%C2%A0%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:0px;\"><a href=\"#2.%20read%28%29%2Fwrite%28%29%C2%A0%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6\">2. read()/write() 读写文件</a></p>\n<p id=\"3.%20close()%20%E5%85%B3%E9%97%AD%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:0px;\"><a href=\"#3.%20close%28%29%20%E5%85%B3%E9%97%AD%E6%96%87%E4%BB%B6\">3. close() 关闭文件</a></p>\n<p id=\"4.%20%E5%B8%B8%E7%94%A8%E7%9A%84file%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95-toc\" style=\"margin-left:0px;\"><a href=\"#4.%20%E5%B8%B8%E7%94%A8%E7%9A%84file%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95\">4. 常用的file对象方法</a></p>\n<p id=\"5.%20%E5%B8%B8%E7%94%A8%E6%96%87%E4%BB%B6%E7%9A%84%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F%EF%BC%88%E4%BA%86%E8%A7%A3%EF%BC%89-toc\" style=\"margin-left:0px;\"><a href=\"#5.%20%E5%B8%B8%E7%94%A8%E6%96%87%E4%BB%B6%E7%9A%84%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F%EF%BC%88%E4%BA%86%E8%A7%A3%EF%BC%89\">5. 常用文件的编码格式（了解）</a></p>\n<hr id=\"hr-toc\"/>\n<p>python中文件操作使用如下函数/方法：</p>\n<ul><li>open()函数负责打开文件，并返回文件对象；</li><li>read/write/close方法通过文件对象来调用从而对文件进行操作。</li></ul>\n<h1 id=\"1.%20open()%20%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6\">1. open() 打开文件</h1>\n<p>open()函数是python内置函数，在对文件操作之前需要先使用open()打开文件。如果文件无法被打开，会抛出异常OSError。</p>\n<blockquote>\n<p>文件被打开后一定要保证关闭文件。</p>\n</blockquote>\n<p>open()函数语法格式：</p>\n<pre><code class=\"language-python\">open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closedfd=True,opener=None) </code></pre>\n<p>参数说明：</p>\n<blockquote>\n<p>@ file——文件路径，相对路径或绝对路径，必需参数；</p>\n<p>@ mode——文件打开模式，可选参数；</p>\n<p>@ buffering——设置缓冲；</p>\n<p>@ encoding——一般使用utf-8；</p>\n<p>@ errors——报错级别；</p>\n<p>@ newline——区分换行符；</p>\n<p>@ closefd——传入的file参数类型；</p>\n<p>@ opener——设置自定义开启器，开启器的返回值必须下一个打开的文件描述符；</p>\n</blockquote>\n<p>其中mode文件打开模式的参数有如下，默认为文本模式打开文件。</p>\n<table align=\"center\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:650px;\"><tbody><tr><td>模式</td><td>说明</td></tr><tr><td>t</td><td>文本模式，默认</td></tr><tr><td>x</td><td>写模式，新建一个文件，如果该文件存在则会报错</td></tr><tr><td>b</td><td>二进制模式</td></tr><tr><td>+</td><td>打开一个文件进行更新，可读可写</td></tr><tr><td>U</td><td>普通换行模式，不推荐</td></tr><tr><td>r</td><td>以只读方式打开文件，文件指针将会放在文件开头，默认模式</td></tr><tr><td>rb</td><td>以二进制格式打开一个文件用于只读，文件指针将会放在开头，一般用于非文本文件如图片等的读取</td></tr><tr><td>r+</td><td>打卡一个文件用于读写，文件指针将会放在文件开头</td></tr><tr><td>rb+</td><td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头</td></tr><tr><td>w</td><td>打开一个文件只用于写入，如果该文件已经存在，则打开文件，从文件开头开始编辑，原有内容会被删除。如果文件不存在，创建新文件；</td></tr><tr><td>wb</td><td>以二进制格式打开文件只用于写入。如果文件已经存在则打开文件，并从头开始编辑，原有内容会被删除；如果文件不存在，创建新文件；</td></tr><tr><td>w+</td><td>打开一个文件用于读写如果文件已经存在则打开文件，并从头开始编辑，原有内容会被删除；如果文件不存在，创建新文件；</td></tr><tr><td>wb+</td><td>以二进制格式打开一个文件用于读写。如果文件已经存在则打开文件，并从头开始编辑，原有内容会被删除；如果文件不存在，创建新文件；</td></tr><tr><td>a</td><td>打开一个文件用于追加，如果文件已经存在，文件指针放在文件结尾，新内容会写在原有内容之后，如果文件不存在，创建新文件进行写入</td></tr><tr><td>a+</td><td>打开一个文件用于读写，如果该文件已经存在，文件指针将会放在文件的结尾。新的内容会被写入到已有内容之后，如果该文件不存在，创建新文件进行写入</td></tr><tr><td>ab</td><td>以二进制格式打开一个文件用于追加。如果文件已经存在，文件指针将会放在文件末尾，也就是说，新的内容将会被写入到已有内容之后，如果文件不存在，创建新文件进行写入</td></tr><tr><td>ab+</td><td>以二进制格式打开一个文件用于追加。如果该文件已经存在，文案金指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写</td></tr></tbody></table>\n<h1>2. read()/write() 读写文件</h1>\n<p>read()方法从一个打开的文件中读取一个字符串，write()方法可以将任何字符串写入到一个打开的文件中。</p>\n<blockquote>\n<p>python字符串可以是二进制文件，而不仅仅是文字。</p>\n<p>write()方法不会在字符串的结尾添加换行符('\\n')。</p>\n</blockquote>\n<p>read()/write()语法格式：</p>\n<pre><code class=\"language-python\">fileObject.write(string)\nfileObject.read([count])</code></pre>\n<blockquote>\n<p>参数string表示要写入到已打开文件的内容；返回写入的长度<br/> 参数count表示要从已打开的文件中读取的字节计数，如果没有传入count参数，表示会尽可能多地读取内容，可能直到文件末尾。</p>\n</blockquote>\n<h1 id=\"3.%20close()%20%E5%85%B3%E9%97%AD%E6%96%87%E4%BB%B6\">3. close() 关闭文件</h1>\n<p>close()方法刷新缓冲区里任何还没写入的信息，并关闭该文件。</p>\n<p>当一个文件对象的引用被重新指定给另一个文件时，python会关闭之前的文件。</p>\n<p>语法格式：</p>\n<pre><code class=\"language-python\">fileObject.close()</code></pre>\n<p>示例，实现类似拷贝的功能，把一个文件内容复制到另一个文件中。</p>\n<pre><code class=\"language-python\"># 打开要读取的文件\nfd = open('1.txt',mode='r')\n\n# 读取文件内容\ns = fd.read()\n\n# 关闭文件\nfd.close()\n\n# 打开要写入的文件\nfd = open('2.txt',mode='w+')\n\n# 写入文件\nfd.write(s)\n\n# 关闭文件\nfd.close()</code></pre>\n<h1 id=\"4.%20%E5%B8%B8%E7%94%A8%E7%9A%84file%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95\">4. 常用的file对象方法</h1>\n<table align=\"center\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:650px;\"><tbody><tr><td>方法名</td><td>描述</td></tr><tr><td>file.close()</td><td>关闭文件</td></tr><tr><td>file.flush()</td><td>刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件，而不是被动的等待输出缓冲区写入</td></tr><tr><td>file.fileno()</td><td>返回一个整型的文件描述符，底层操作可以使用该文件描述符</td></tr><tr><td>file.isatty()</td><td>如果文件连接到一个终端设备返回True，否则返回False。</td></tr><tr><td>file.next()</td><td>返回文件下一行</td></tr><tr><td>file.read([count])</td><td>从文件读取指定的字节数，如果未给定或为负则读取所有</td></tr><tr><td>file.readline([count])</td><td>读取整行，包括'\\n'字符</td></tr><tr><td>file.readlines([sizeint])</td><td>读取所有行并返回列表，若给定sizeint&gt;0，则设置一次读多少字节</td></tr><tr><td>file.seek(offset[, from])</td><td>设置文件当前位置,from=0表示文件开头作为移动字节的参考位置；from=1表示当前位置作为参考文职；from=2表示文件末尾作为参考位置</td></tr><tr><td>file.tell()</td><td>返回文件当前位置</td></tr><tr><td>file.truncate([size])</td><td>截取文件，截取的字节通过size指定，默认为当前文件位置</td></tr><tr><td>file.write(str)</td><td>将文件写入字符串，返回写入的字符长度</td></tr><tr><td>file.writelines(sequence)</td><td>向文件写入一个序列字符串列表，如果需要换行则需要自己加入每行的换行符</td></tr></tbody></table>\n<h1 id=\"5.%20%E5%B8%B8%E7%94%A8%E6%96%87%E4%BB%B6%E7%9A%84%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F%EF%BC%88%E4%BA%86%E8%A7%A3%EF%BC%89\">5. 常用文件的编码格式（了解）</h1>\n<p>文本文件存储的内容是基于字符编码的文案金，常见的编码有ASCII编码，UNICODE编码等</p>\n<ul><li>python2.x 默认使用ASCII编码格式；</li><li>python3.x 默认使用UTF-8编码格式；</li></ul>\n<blockquote>\n<p>ASCII编码：一个ASCII在内存中占用1个字节的空间，计算机中共有256个ASCII字符；</p>\n<p>UTF-8编码：UTF-8是UNICODE编码的一种编码格式；计算机中使用1~6个字节表示一个UTF-8字符，涵盖了地球上几乎所有地区的文字；大多数汉字使用3个字节表示。</p>\n</blockquote>\n<p>python2.x中使用中文需要在文件的第一行增加以下代码，表示以utf-8编码来处理python文件。</p>\n<pre><code class=\"language-python\"># *_* coding:utf-8 *_*</code></pre>\n<p>python2.x中，即使制定了文件使用utf-8的编码格式，但是在遍历字符串时，仍然会以字节为单位遍历字符串。</p>\n<p>如果要正确的遍历字符串，在定义字符串时，需要在字符串的引号前，增加一个小写字母u，高速解释器这是一个unicode字符串。</p>\n</div>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-05 11:38:38", "summary": "目录打开文件读写文件关闭文件常用的对象方法常用文件的编码格式了解中文件操作使用如下函数方法：函数负责打开文件，并返回文件对象；方法通过文件对象来调用从而对文件进行操作。打开文件函数是内置函数，在对文件"}