{"blogid": "126246290", "writerAge": "码龄163天", "writerBlogNum": "80", "writerCollect": "2730", "writerComment": "3078", "writerFan": "3552", "writerGrade": "6级", "writerIntegral": "7836", "writerName": "北极的三哈", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126246290.jpg", "writerRankTotal": "1807", "writerRankWeekly": "16", "writerThumb": "2685", "writerVisitNum": "648419", "blog_read_count": "19480", "blog_time": "已于 2022-08-10 00:27:45 修改", "blog_title": "Python组合数据类型——映射类型：字典", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/4f047c5263c3424b9353a21c7f6ccf8b.gif#pic_center\"/></p>\n<blockquote>\n<p>🤵‍♂️ 个人主页: <a href=\"https://blog.csdn.net/m0_68744965?spm=1000.2115.3001.5343\">@Flyme awei 个主页</a><br/> 👨‍💻 作者简介：<code>Python</code>领域新星创作者。<br/> 📒 系列专栏：《<a href=\"https://blog.csdn.net/m0_68744965/category_11957439.html?spm=1001.2014.3001.5482\">在线编程-Python篇</a>》<br/> 🌐 推荐一款<code>找工作神器</code>网站: 《<a href=\"https://www.nowcoder.com/link/pc_csdncpt_flyme_python\">牛客网</a>》 |<code>笔试题库</code>|<code>面试经验</code>|<br/> 🐋 希望大家多多支持😘一起进步呀！<br/> 📝 如果文章对你有帮助的话，欢迎评论💬点赞👍收藏📂加关注</p>\n</blockquote>\n<h1><a id=\"_10\"></a>前言</h1>\n<blockquote>\n<p>  今天是《<a href=\"https://marketing.csdn.net/p/bdabfb52c5d56532133df2adc1a728fd\">CSDN21天学习挑战赛</a>》的第9天<br/>   昨天学习了<a href=\"http://t.csdn.cn/uOwSm\">Python组合数据类型——序列类型：列表、元组</a>。<br/>   今天将学习Python组合数据类型——映射类型：字典。</p>\n</blockquote>\n<blockquote>\n<p>活动地址：<a href=\"https://marketing.csdn.net/p/bdabfb52c5d56532133df2adc1a728fd\">CSDN21天学习挑战赛</a></p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_10\">前言</a></li><li><a href=\"#1_19\">1、字典类型</a></li><li><ul><li><a href=\"#11_20\">1.1什么是字典</a></li><li><a href=\"#12_26\">1.2字典示意图</a></li><li><a href=\"#13_28\">1.3字典的原理</a></li><li><a href=\"#14_31\">1.4创建字典的方式</a></li><li><a href=\"#15_60\">1.5字典元素的获取</a></li></ul>\n</li><li><a href=\"#2_75\">2、字典类型的操作</a></li><li><ul><li><a href=\"#21_76\">2.1字典的操作函数</a></li><li><a href=\"#22_249\">2.2字典的操作方法</a></li><li><a href=\"#23_262\">2.3字典元素的增删改操作</a></li><li><a href=\"#24_305\">2.4字典视图的获取</a></li><li><a href=\"#25_330\">2.5字典元素的遍历</a></li></ul>\n</li><li><a href=\"#3_339\">3、字典的特点</a></li><li><a href=\"#4_346\">4、字典生成式</a></li><li><a href=\"#5_371\">5、总结</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"1_19\"></a>1、字典类型</h1>\n<h2><a id=\"11_20\"></a>1.1什么是字典</h2>\n<blockquote>\n<p><strong>字典：</strong><code>Python</code>内置的数据结构之一，与列表一样是一个<strong>可变序列</strong>，以<strong>键值对</strong>的方式存储数据，字典是一个<strong>无序的序列</strong>。<code>Python</code>语言中的字典使用大括号<code>{ }</code>建立，每个元素是一个键值对。</p>\n</blockquote>\n<blockquote>\n<p>“<code>键值对</code>”是组织数据的一种重要方式，广泛应用在当代大型信息系统中，如<code>Web</code>系统。键值对的基本思想是将“值”信息关联一个“键”信息，进而通过键信息找对应的值信息，这个过程叫映射。<code>Python</code>语言中通过字典类型实现映射。</p>\n</blockquote>\n<h2><a id=\"12_26\"></a>1.2字典示意图</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9aec2b513e8b40bd94193fe04fe6bc35.png\"/></p>\n<h2><a id=\"13_28\"></a>1.3字典的原理</h2>\n<blockquote>\n<p>字典的原理：<code>Python</code>中的字典是根据<code>key</code>查找<code>value</code>所在的位置</p>\n</blockquote>\n<h2><a id=\"14_31\"></a>1.4创建字典的方式</h2>\n<p>在 <code>python</code>中创建一个字典对象，常用的方式有两种。</p>\n<ol><li>第一种方式，使用花括号<code>{ }</code></li></ol>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">'''\n第一种方式，使用花括号{}，语法如下所示\n使用{}创建字典\nscores = {'张三': 100, '李四': 98, '王五': 45}\n'''</span>\nscores <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'李四'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'王五'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># {'张三': 29, '李四': 10, '王五': 40}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;class 'dict'&gt;</span>\n\n</code></pre>\n<ol start=\"2\"><li>第二种方式，使用内置函数<code>dict()</code>。</li></ol>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">'''第二种方式，使用内置函数dict()。dict即dictionary(字典)的缩写，语法如下所示。\n字典名 = dict(键1=值1, 键2=值2)\n'''</span>\ndic <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dic<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># {'name': '张三', 'age': 20}</span>\n\n</code></pre>\n<ol start=\"3\"><li>创建空字典</li></ol>\n<pre><code class=\"prism language-python\">d <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># {}</span>\n</code></pre>\n<h2><a id=\"15_60\"></a>1.5字典元素的获取</h2>\n<p>根据键<code>key</code>获取字典的值<code>value</code></p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 1.使用 [] 获取</span>\nscores <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'李四'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'王五'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span> <span class=\"token keyword\">in</span> scores<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">in</span> scores<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">[</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 29</span>\n \n<span class=\"token comment\"># 2.使用 get()方法</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 29</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'柽柳'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># None</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'麻子'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 99是在查找 麻子值的（value）不存在时的一个默认值</span>\n\n</code></pre>\n<h1><a id=\"2_75\"></a>2、字典类型的操作</h1>\n<h2><a id=\"21_76\"></a>2.1字典的操作函数</h2>\n<p><code>Python</code>内置数据结构：字典<code>dict()</code>类源代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">dict</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    dict() -&gt; new empty dictionary\n    dict(mapping) -&gt; new dictionary initialized from a mapping object's\n        (key, value) pairs\n    dict(iterable) -&gt; new dictionary initialized as if via:\n        d = {}\n        for k, v in iterable:\n            d[k] = v\n    dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs\n        in the keyword argument list.  For example:  dict(one=1, two=2)\n    \"\"\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown; restored from __doc__</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" D.clear() -&gt; None.  Remove all items from D. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown; restored from __doc__</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" D.copy() -&gt; a shallow copy of D \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    @<span class=\"token builtin\">staticmethod</span> <span class=\"token comment\"># known case</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">fromkeys</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Create a new dictionary with keys from iterable and values set to value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return the value for key if key is in the dictionary, else default. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">items</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown; restored from __doc__</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" D.items() -&gt; a set-like object providing a view on D's items \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown; restored from __doc__</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" D.keys() -&gt; a set-like object providing a view on D's keys \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> d<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown; restored from __doc__</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value.\n        If key is not found, d is returned if given, otherwise KeyError is raised\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">popitem</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Remove and return a (key, value) pair as a 2-tuple.\n        \n        Pairs are returned in LIFO (last-in, first-out) order.\n        Raises KeyError if the dict is empty.\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">setdefault</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Insert key with a value of default if key is not in the dictionary.\n        \n        Return the value for key if key is in the dictionary, else default.\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> E<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>F<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># known special case of dict.update</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        D.update([E, ]**F) -&gt; None.  Update D from dict/iterable E and F.\n        If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]\n        If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v\n        In either case, this is followed by: for k in F:  D[k] = F[k]\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">values</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown; restored from __doc__</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" D.values() -&gt; an object providing a view on D's values \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__contains__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" True if the dictionary has the specified key, else False. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__delitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Delete self[key]. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__eq__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return self==value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__getattribute__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return getattr(self, name). \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__getitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown; restored from __doc__</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" x.__getitem__(y) &lt;==&gt; x[y] \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__ge__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return self&gt;=value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__gt__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return self&gt;value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> seq<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># known special case of dict.__init__</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        dict() -&gt; new empty dictionary\n        dict(mapping) -&gt; new dictionary initialized from a mapping object's\n            (key, value) pairs\n        dict(iterable) -&gt; new dictionary initialized as if via:\n            d = {}\n            for k, v in iterable:\n                d[k] = v\n        dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs\n            in the keyword argument list.  For example:  dict(one=1, two=2)\n        # (copied from class doc)\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__iter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Implement iter(self). \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return len(self). \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__le__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return self&lt;=value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__lt__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return self&lt;value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    @<span class=\"token builtin\">staticmethod</span> <span class=\"token comment\"># known case of __new__</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__new__</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Create and return a new object.  See help(type) for accurate signature. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__ne__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return self!=value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__repr__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return repr(self). \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__reversed__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return a reverse iterator over the dict keys. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__setitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Set self[key] to value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__sizeof__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown; restored from __doc__</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" D.__sizeof__() -&gt; size of D in memory, in bytes \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    __hash__ <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n</code></pre>\n<p>字典类型的一些通用操作函数</p>\n<table><thead><tr><th>操作函数</th><th>描述</th></tr></thead><tbody><tr><td><code>dict()</code></td><td>生成一个字典</td></tr><tr><td><code>len(d)</code></td><td>字典<code>d</code>元素的个数（长度）</td></tr><tr><td><code>min(d)</code></td><td>字典<code>d</code>中键的最最小值</td></tr><tr><td><code>max(d)</code></td><td>字典<code>d</code>中键的最最大值</td></tr></tbody></table>\n<h2><a id=\"22_249\"></a>2.2字典的操作方法</h2>\n<p>字典类型有一些操作方法，使用的语法格式为：<br/> <code>&lt;字典对象名&gt;.&lt;方法名&gt;(&lt;方法参数&gt;)</code></p>\n<table><thead><tr><th>操作方法</th><th>描述</th></tr></thead><tbody><tr><td><code>d.keys()</code></td><td>返回字典<code>d</code>所有键的信息</td></tr><tr><td><code>d.values()</code></td><td>返回字典<code>d</code>所有值的信息</td></tr><tr><td><code>d.items()</code></td><td>返回字典<code>d</code>所有键值对</td></tr><tr><td><code>d.get(key, default)</code></td><td>键存在则返回相应值，否则返回默认值<code>default</code></td></tr><tr><td><code>d.pop(key, default)</code></td><td>键存在则返回相应值，同时删除键值对，否则返回默认值<code>default</code></td></tr><tr><td><code>d.popitem()</code></td><td>随机从字典中取出一个兼职对，以元组<code>(key, value)</code>的形式返回，同时将该键值对从字典中删除。</td></tr><tr><td><code>d.clear()</code></td><td>删除所有的键值对，清空字典</td></tr></tbody></table>\n<h2><a id=\"23_262\"></a>2.3字典元素的增删改操作</h2>\n<p><code>scores = {'张三': 29, '李四': 10, '王五': 40}</code></p>\n<ul><li>key的判断</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># key的判断</span>\nscores <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'李四'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'王五'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span> <span class=\"token keyword\">in</span> scores<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">in</span> scores<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n</code></pre>\n<ul><li>字典的删除</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 字典元素的删除</span>\n<span class=\"token keyword\">del</span> scores<span class=\"token punctuation\">[</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 删除指定的键值对</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># {'李四': 10, '王五': 40}</span>\n\n</code></pre>\n<ul><li>字典的清除</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 清空字典 clear（）方法</span>\nscores<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># {}</span>\n\n</code></pre>\n<ul><li>字典元素的新增</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 新增元素</span>\nscores<span class=\"token punctuation\">[</span><span class=\"token string\">'陈六'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># {'陈六': 20}</span>\n\n</code></pre>\n<ul><li>字典元素值的修改</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 修改value</span>\nscores<span class=\"token punctuation\">[</span><span class=\"token string\">'陈六'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># {'陈六': 100}</span>\n\n</code></pre>\n<h2><a id=\"24_305\"></a>2.4字典视图的获取</h2>\n<ul><li>获取所有的键， <code>&lt;字典对象名&gt;.keys()</code>方法 返回值为列表</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 获取所有的键 .keys()方法 返回值为列表</span>\nscores <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'李四'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'王五'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># dict_keys(['张三', '李四', '王五'])</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;class 'dict_keys'&gt;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['张三', '李四', '王五']</span>\n\n</code></pre>\n<ul><li>获取所有的值,<code>&lt;字典对象名&gt;.value()</code>方法，返回值为列表</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 获取所有的值 &lt;字典对象名&gt;.value()方法 返回值为列表</span>\ndict_values <span class=\"token operator\">=</span> scores<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dict_values<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># dict_values([29, 10, 40])</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>dict_values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;class 'dict_values'&gt;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>dict_values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [29, 10, 40]</span>\n\n</code></pre>\n<ul><li>获取所有的键值对，<code>&lt;字典对象名&gt;.items()</code>方法 返回值为元组</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#  获取所有的键值对  返回值为元组</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># dict_items([('张三', 29), ('李四', 10), ('王五', 40)])</span>\n</code></pre>\n<h2><a id=\"25_330\"></a>2.5字典元素的遍历</h2>\n<p>字典元素的遍历：使用<code>for-in</code>循环</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 字典元素的遍历</span>\nscores <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'李四'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'王五'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> scores<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> scores<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9b35baf9a0f74685949bdd4bdca1ee69.png\"/></p>\n<h1><a id=\"3_339\"></a>3、字典的特点</h1>\n<blockquote>\n<p>1.键 <code>key</code> 不可以重复，值<code>value</code>可以重复</p>\n</blockquote>\n<blockquote>\n<p>2.字典中元素是无序的</p>\n</blockquote>\n<blockquote>\n<p>3.字典会浪费大的内存，是一种使用空间换时间的数据结构，但是查询速度快。</p>\n</blockquote>\n<h1><a id=\"4_346\"></a>4、字典生成式</h1>\n<ul><li>内置函数<code>zip()</code></li></ul>\n<blockquote>\n<p>用于将可迭代对象作为参数，将对象中对应的元素打包成一个元组，然后返回由这些元组组成的列表</p>\n</blockquote>\n<ul><li>字典生成式:<br/> <code>{key: value for key, value in zip(items,prices)}</code></li></ul>\n<pre><code class=\"prism language-python\">items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Fruits'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Books'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Others'</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 键的列表</span>\nprices <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">,</span> <span class=\"token number\">85</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 值的列表</span>\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>items<span class=\"token punctuation\">:</span> prices <span class=\"token keyword\">for</span> items<span class=\"token punctuation\">,</span> prices <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">,</span> prices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>  <span class=\"token comment\"># 两个列表生成一个字典</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># {'Fruits': 96, 'Books': 78, 'Others': 85}</span>\n\n<span class=\"token comment\"># .upper()方法 键字母变大写</span>\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>items<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> prices <span class=\"token keyword\">for</span> items<span class=\"token punctuation\">,</span> prices <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">,</span> prices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>  <span class=\"token comment\"># 两个列表生成一个字典</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># {'Fruits': 96, 'Books': 78, 'Others': 85}</span>\n\n\nitems <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Fruits'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Books'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Others'</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 键的列表</span>\nprices <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">,</span> <span class=\"token number\">85</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 值的列表</span>\na <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">,</span> prices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># {'Fruits': 96, 'Books': 78, 'Others': 85}</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\478ded0979424a7ca33dd844012cfdbb.png\"/></p>\n<h1><a id=\"5_371\"></a>5、总结</h1>\n<p>字典类型的一些通用操作函数：</p>\n<table><thead><tr><th>操作函数</th><th>描述</th></tr></thead><tbody><tr><td><code>dict()</code></td><td>生成一个字典</td></tr><tr><td><code>len(d)</code></td><td>字典<code>d</code>元素的个数（长度）</td></tr><tr><td><code>min(d)</code></td><td>字典<code>d</code>中键的最最小值</td></tr><tr><td><code>max(d)</code></td><td>字典<code>d</code>中键的最最大值</td></tr></tbody></table>\n<p>字典类型有一些操作方法：</p>\n<table><thead><tr><th>操作方法</th><th>描述</th></tr></thead><tbody><tr><td><code>d.keys()</code></td><td>返回字典<code>d</code>所有键的信息</td></tr><tr><td><code>d.values()</code></td><td>返回字典<code>d</code>所有值的信息</td></tr><tr><td><code>d.items()</code></td><td>返回字典<code>d</code>所有键值对</td></tr><tr><td><code>d.get(key, default)</code></td><td>键存在则返回相应值，否则返回默认值<code>default</code></td></tr><tr><td><code>d.pop(key, default)</code></td><td>键存在则返回相应值，同时删除键值对，否则返回默认值<code>default</code></td></tr><tr><td><code>d.popitem()</code></td><td>随机从字典中取出一个兼职对，以元组<code>(key, value)</code>的形式返回，同时将该键值对从字典中删除。</td></tr><tr><td><code>d.clear()</code></td><td>删除所有的键值对，清空字典</td></tr></tbody></table>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-10 00:27:45", "summary": "在这里插入图片描述个人主页个主页作者简介：领域新星创作者。系列专栏：《在线编程篇》推荐一款找工作神器网站《牛客网》笔试题库面试经验希望大家多多支持一起进步呀！如果文章对你有帮助的话，欢迎评论点赞收藏加"}