{"blogid": "126364755", "writerAge": "码龄144天", "writerBlogNum": "51", "writerCollect": "440", "writerComment": "693", "writerFan": "1459", "writerGrade": "5级", "writerIntegral": "1945", "writerName": "吉士先生.", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126364755.jpg", "writerRankTotal": "9984", "writerRankWeekly": "51", "writerThumb": "621", "writerVisitNum": "15372", "blog_read_count": "307", "blog_time": "已于 2022-08-25 09:43:25 修改", "blog_title": "27.【C/C++ 最全vector数组的用法 （详解）】", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>vector动态数组</h3>\n<ul><li><a href=\"#vector_1\">（一）、什么是vector？</a></li><li><a href=\"#vector_4\">（二）、vector的作用是什么</a></li><li><a href=\"#_6\">（三）、经典用法:</a></li><li><a href=\"#1vector_7\">1.vector函数的定义:</a></li><li><ul><li><ul><li><ul><li><a href=\"#_8\">代码展示:</a></li><li><a href=\"#_23\">效果展示:</a></li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#2vector_26\">2.vector的初始化:</a></li><li><ul><li><ul><li><a href=\"#1vector_________27\">1.vector&lt;数据类型&gt; 函数名; 初始化为空</a></li><li><a href=\"#2vector_abab_29\">2.vector&lt;数据类型&gt; 函数名(a,b).定义a个空间，都初始化为b。</a></li><li><a href=\"#3vector_12_21_31\">3.vector&lt;数据类型&gt; 函数名1=函数名2. 把动态数组2复制给动态数组1。</a></li><li><a href=\"#4vector_12begin2end___21_33\">4.vector&lt;数据类型&gt; 函数名1(函数名2.begin(),函数名2.end()). 把动态数组2复制给动态数组1。</a></li><li><a href=\"#5vector_aasizeofasizeofa_35\">5.vector&lt;数据类型&gt; 函数名(a,a+sizeof(a)/sizeof(数据类型))，把普通数组a复制给动态数组。</a></li><li><a href=\"#_36\">==========================================</a></li><li><ul><li><a href=\"#_37\">代码展示:</a></li><li><a href=\"#_53\">效果展示:</a></li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#3vector_55\">3.vector的简单属性</a></li><li><ul><li><a href=\"#1_56\">1.【动态数组的访问下标】</a></li><li><a href=\"#2at_59\">2.【动态数组的访问at函数】</a></li><li><a href=\"#3_62\">3.【动态数组的长度】</a></li><li><a href=\"#4_65\">4.【获取动态数组第一个元素】</a></li><li><a href=\"#5_68\">5.【获取动态数组最后一个元素】</a></li><li><a href=\"#6_71\">6.【判断动态数组是否为空】</a></li><li><a href=\"#7_74\">7.【动态数组的交换】</a></li><li><a href=\"#8_77\">8.【动态数组元素的清空】</a></li><li><a href=\"#_79\">====================================</a></li><li><ul><li><ul><li><a href=\"#_80\">代码展示:</a></li><li><a href=\"#_106\">效果展示:</a></li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#4vector_109\">4.vector的插入与删除</a></li><li><ul><li><a href=\"#1_110\">1.【单尾部插入】</a></li><li><a href=\"#2_______113\">2.【多元插入】 从哪插 插什么</a></li><li><a href=\"#3_118\">3.【普通数组插入动态数组】</a></li><li><a href=\"#4_124\">4.【单尾部删除元素】</a></li><li><a href=\"#5_127\">5.【多元删除】</a></li><li><a href=\"#6vectorfor_131\">6.vector的遍历(for)</a></li><li><a href=\"#7_140\">7.【迭代遍历】</a></li><li><a href=\"#_148\">====================================</a></li><li><ul><li><ul><li><a href=\"#_149\">代码展示:</a></li><li><a href=\"#_190\">效果展示:</a></li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#_193\">(四)、实战项目</a></li><li><ul><li><ul><li><ul><li><a href=\"#_197\">代码展示:</a></li></ul>\n</li></ul>\n</li><li><a href=\"#1_198\">1.**第一个**经典列题:(课堂刷题的删除与插入)</a></li><li><ul><li><ul><li><a href=\"#_227\">效果展示:</a></li></ul>\n</li></ul>\n</li><li><a href=\"#2_231\">2.**第二个**经典列题：（进行两个整形数组合并的问题）</a></li><li><ul><li><ul><li><a href=\"#_235\">代码展示:</a></li><li><a href=\"#_271\">效果展示:</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"vector_1\"></a>（一）、什么是vector？</h1>\n<p>Vector类 是在 java 中可以实现自动增长的对象数组，<strong>vector在C++标准模板库中的部分内容，它是一个多功能的，能够操作多种数据结构和算法的模板类和函数库。</strong></p>\n<h1><a id=\"vector_4\"></a>（二）、vector的作用是什么</h1>\n<p>vector是C++标准模板库中的部分内容，中文偶尔译作“容器”，但并不准确。它是一个多功能的，能够操作多种数据结构和算法的模板类和函数库。vector之所以被认为是一个容器，是因为它能够像容器一样存放各种类型的对象，<strong>简单地说，vector是一个能够存放任意类型的动态数组，能够增加和压缩数据。</strong>[1]</p>\n<h1><a id=\"_6\"></a>（三）、经典用法:</h1>\n<h1><a id=\"1vector_7\"></a>1.vector函数的定义:</h1>\n<h4><a id=\"_8\"></a>代码展示:</h4>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">//正常定义      </span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> str_a<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//vector 定义</span>\n    <span class=\"token keyword\">char</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">&gt;</span> str_b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">&gt;</span> str_c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_23\"></a>效果展示:</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1bc49584a3984ac6a3baea9744b3914f.jpeg\"/></p>\n<h1><a id=\"2vector_26\"></a>2.vector的初始化:</h1>\n<h3><a id=\"1vector_________27\"></a>1.vector&lt;数据类型&gt; 函数名; 初始化为空</h3>\n<h3><a id=\"2vector_abab_29\"></a>2.vector&lt;数据类型&gt; 函数名(a,b).定义a个空间，都初始化为b。</h3>\n<h3><a id=\"3vector_12_21_31\"></a>3.vector&lt;数据类型&gt; 函数名1=函数名2. 把动态数组2复制给动态数组1。</h3>\n<h3><a id=\"4vector_12begin2end___21_33\"></a>4.vector&lt;数据类型&gt; 函数名1(函数名2.begin(),函数名2.end()). 把动态数组2复制给动态数组1。</h3>\n<h3><a id=\"5vector_aasizeofasizeofa_35\"></a>5.vector&lt;数据类型&gt; 函数名(a,a+sizeof(a)/sizeof(数据类型))，把普通数组a复制给动态数组。</h3>\n<h3><a id=\"_36\"></a>==========================================</h3>\n<h4><a id=\"_37\"></a>代码展示:</h4>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> str_a<span class=\"token punctuation\">;</span> <span class=\"token comment\">//初始化为空  </span>\n vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">str_a1</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义四个元素，每个元素的值为88；</span>\n vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> str_a2 <span class=\"token operator\">=</span> str_a1<span class=\"token punctuation\">;</span> <span class=\"token comment\">//把a1的值复制给a2;</span>\n vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">str_a3</span><span class=\"token punctuation\">(</span>str_a1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> str_a1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//把a1的值复制给a2;</span>\n vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">str_a4</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//复制正常数组的初始化</span>\n <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_53\"></a>效果展示:</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a827900f1050437b816a7d5b249d1b3b.jpeg\"/></p>\n<h1><a id=\"3vector_55\"></a>3.vector的简单属性</h1>\n<h2><a id=\"1_56\"></a>1.【动态数组的访问下标】</h2>\n<pre><code>函数名[n],   n就是访问第几个元素\n</code></pre>\n<h2><a id=\"2at_59\"></a>2.【动态数组的访问at函数】</h2>\n<pre><code>函数名.at(n),   n就是访问第几个元素\n</code></pre>\n<h2><a id=\"3_62\"></a>3.【动态数组的长度】</h2>\n<pre><code>函数名.size(),     获取长度\n</code></pre>\n<h2><a id=\"4_65\"></a>4.【获取动态数组第一个元素】</h2>\n<pre><code>函数名.front()\n</code></pre>\n<h2><a id=\"5_68\"></a>5.【获取动态数组最后一个元素】</h2>\n<pre><code>函数名.back()\n</code></pre>\n<h2><a id=\"6_71\"></a>6.【判断动态数组是否为空】</h2>\n<pre><code>函数名.empty()    ,假如是返回true.\n</code></pre>\n<h2><a id=\"7_74\"></a>7.【动态数组的交换】</h2>\n<pre><code>函数名1.swap(函数名2)    把俩函数的内容交换\n</code></pre>\n<h2><a id=\"8_77\"></a>8.【动态数组元素的清空】</h2>\n<pre><code>\t函数名.clear()\n</code></pre>\n<h2><a id=\"_79\"></a>====================================</h2>\n<h4><a id=\"_80\"></a>代码展示:</h4>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> str_a<span class=\"token punctuation\">;</span> <span class=\"token comment\">//初始化为空  </span>\n vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">str_a1</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义四个元素，每个元素的值为88；</span>\n vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> str_a2 <span class=\"token operator\">=</span> str_a1<span class=\"token punctuation\">;</span> <span class=\"token comment\">//把a1的值复制给a2;</span>\n vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">str_a3</span><span class=\"token punctuation\">(</span>str_a1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> str_a1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//把a1的值复制给a2;</span>\n vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">str_a4</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//复制正常数组的初始化</span>\n <span class=\"token keyword\">int</span> a5 <span class=\"token operator\">=</span> str_a4<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//vector 动态数组的访问，用下标</span>\n <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> str_a4<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 利用at函数，也就是下下标</span>\n cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a=\"</span> <span class=\"token operator\">&lt;&lt;</span> a5 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b=\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"str_a4的长度为:\"</span> <span class=\"token operator\">&lt;&lt;</span> str_a4<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取长度，</span>\n cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"str_a4的第一个元素为:\"</span> <span class=\"token operator\">&lt;&lt;</span> str_a4<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取第一个元素</span>\n cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"str_a4的第一个元素为:\"</span> <span class=\"token operator\">&lt;&lt;</span> str_a4<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取最后一个元素</span>\n <span class=\"token keyword\">bool</span> p <span class=\"token operator\">=</span> str_a4<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//判断是否为空</span>\n str_a4<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>str_a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">//str_a4.clear(); //对数组元素清空</span>\n <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_106\"></a>效果展示:</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3cfab7119e99468abfb031028e025072.jpeg\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\418d97d7bc3b4c9c916722b8ba59a450.jpeg\"/></p>\n<h1><a id=\"4vector_109\"></a>4.vector的插入与删除</h1>\n<h2><a id=\"1_110\"></a>1.【单尾部插入】</h2>\n<pre><code>函数名.push_back(a),    向尾部插入一个元素a,只能一个个插入，且只能在尾部。\n</code></pre>\n<h2><a id=\"2_______113\"></a>2.【多元插入】 从哪插 插什么</h2>\n<pre><code>函数名1.insert(函数名1.begin(),a),   向头部插入一个元素a.\n\n函数名1.insert(函数名1.end(),n,a),向尾部插入n个元素 a.\n</code></pre>\n<h2><a id=\"3_118\"></a>3.【普通数组插入动态数组】</h2>\n<pre><code>\t函数名1.insert(函数名1.begin(),普数组名，普数组名+sizeof(普数组名)\n\t/sizeof(函数类\t型))\n\n\t从哪开始  普通数组首位置，普通数组末位置\n</code></pre>\n<h2><a id=\"4_124\"></a>4.【单尾部删除元素】</h2>\n<pre><code>函数名.pop_back()     删除最后一个元素\n</code></pre>\n<h2><a id=\"5_127\"></a>5.【多元删除】</h2>\n<pre><code>\t函数名.(函数名.begin(),函数名.begin()+n)\n\n\t 从哪开始，删除几个.(只能是begin 和end不能换成数字)\n</code></pre>\n<h2><a id=\"6vectorfor_131\"></a>6.vector的遍历(for)</h2>\n<pre><code class=\"prism language-cpp\">  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> 函数名<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//遍历</span>\n <span class=\"token punctuation\">{<!-- --></span>\n  cout <span class=\"token operator\">&lt;&lt;</span> 函数名<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"7_140\"></a>7.【迭代遍历】</h2>\n<pre><code class=\"prism language-cpp\">vector<span class=\"token operator\">&lt;</span>函数类型<span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span>iterator itor<span class=\"token punctuation\">;</span>   \n <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>itor <span class=\"token operator\">=</span> 函数名<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> itor <span class=\"token operator\">!=</span> 函数名<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> itor<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>itor <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_148\"></a>====================================</h2>\n<h4><a id=\"_149\"></a>代码展示:</h4>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> str_a<span class=\"token punctuation\">;</span> <span class=\"token comment\">//初始化为空  </span>\n vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">str_a1</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义四个元素，每个元素的值为88；</span>\n vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">str_a4</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//复制正常数组的初始化</span>\n <span class=\"token keyword\">int</span> a5 <span class=\"token operator\">=</span> str_a4<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//vector 动态数组的访问，用下标</span>\n <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> str_a4<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 利用at函数，也就是下下标</span>\n cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a=\"</span> <span class=\"token operator\">&lt;&lt;</span> a5 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b=\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"str_a4的长度为:\"</span> <span class=\"token operator\">&lt;&lt;</span> str_a4<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取长度，</span>\n cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"str_a4的第一个元素为:\"</span> <span class=\"token operator\">&lt;&lt;</span> str_a4<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取第一个元素</span>\n cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"str_a4的第一个元素为:\"</span> <span class=\"token operator\">&lt;&lt;</span> str_a4<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取最后一个元素</span>\n <span class=\"token keyword\">bool</span> p <span class=\"token operator\">=</span> str_a4<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//判断是否为空</span>\n str_a4<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>str_a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n str_a4<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 只能向尾部插入元素. 一个一个插入</span>\n <span class=\"token comment\">//str_a.clear(); //对数组元素清空</span>\n str_a4<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>str_a4<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 从哪插入， 插入什么元素</span>\n str_a4<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>str_a4<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 从哪插入， 插入几个 插入什么元素</span>\n <span class=\"token keyword\">int</span> szint1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token number\">45</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n str_a4<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>str_a4<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> szint1<span class=\"token punctuation\">,</span> szint1 <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>szint1<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">//str_a4.pop_back(); //删除最后一个元素； 一个一个删除</span>\n <span class=\"token comment\">//str_a4.erase(str_a4.begin(), str_a4.begin()+2); // 从哪开始， 删除几个</span>\n <span class=\"token comment\">//str_a4.erase(str_a4.begin(), str_a4.end());  </span>\n <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str_a4<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//遍历</span>\n <span class=\"token punctuation\">{<!-- --></span>\n  cout <span class=\"token operator\">&lt;&lt;</span> str_a4<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span>iterator itor<span class=\"token punctuation\">;</span> <span class=\"token comment\">//迭代器遍历 </span>\n <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>itor <span class=\"token operator\">=</span> str_a4<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> itor <span class=\"token operator\">!=</span> str_a4<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> itor<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>itor <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_190\"></a>效果展示:</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\093abe2cb85b4baeb3091da5d59e423a.jpeg\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ae2db472427c4d0f8ef2fb974f8940a2.jpeg\"/></p>\n<h1><a id=\"_193\"></a>(四)、实战项目</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\995f291499424ab8b6ddea5934cdb75c.jpeg\"/></p>\n<h4><a id=\"_197\"></a>代码展示:</h4>\n<h2><a id=\"1_198\"></a>1.<strong>第一个</strong>经典列题:(课堂刷题的删除与插入)</h2>\n<p><strong>主要思路：我们要知道各个性质的关系，然后进行调用.</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">str_a</span><span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">13</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入第\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"个数为:\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  cin <span class=\"token operator\">&gt;&gt;</span> str_a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">13</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str_a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n   str_a<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>str_a<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> j<span class=\"token punctuation\">,</span> str_a<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">else</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n   cout <span class=\"token operator\">&lt;&lt;</span> str_a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_227\"></a>效果展示:</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1f3bccb42d6d4d0da723be9eb57e7d7e.jpeg\"/></p>\n<h2><a id=\"2_231\"></a>2.<strong>第二个</strong>经典列题：（进行两个整形数组合并的问题）</h2>\n<p><strong>主要思路</strong>：首先我们要分析问题得出，题目是要得到两个数组得合并，然后得知vector动态数组恰好有一个特点就是可以根据我们的需求进行变化，我们抓住这一点开始深入调查。创建两个动态数组，然后对数组1进行赋值，再把数组1的值复制给数组二，再创建临时元素，运用push_back()向尾部插入元素的性子，进行插入合并，最后通过for动态遍历.</p>\n<h4><a id=\"_235\"></a>代码展示:</h4>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span>    <span class=\"token comment\">//  vectoe动态数组的头文件</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请您输入第一个元素数组的个数:\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcin <span class=\"token operator\">&gt;&gt;</span> n<span class=\"token punctuation\">;</span>\n\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">str_int1</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str_int1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//对动态数组一进行动态输入</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入动态数组1第\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"个元素:\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tcin <span class=\"token operator\">&gt;&gt;</span> str_int1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入第二个数组的元素个数:\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcin <span class=\"token operator\">&gt;&gt;</span> m<span class=\"token punctuation\">;</span>\n\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">str_int2</span><span class=\"token punctuation\">(</span>str_int1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//把动态数组1复制给动态数组2</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入动态数组2第\"</span> <span class=\"token operator\">&lt;&lt;</span> j<span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"个元素:\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span>             \n\t\tcin <span class=\"token operator\">&gt;&gt;</span> temp<span class=\"token punctuation\">;</span>              <span class=\"token comment\">//动态数组2的元素</span>\n\t\tstr_int2<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//把动态数组2的元素插入数组2</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"两个整型数组合并后为:\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> m <span class=\"token operator\">+</span> n<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> str_int2<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_271\"></a>效果展示:</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\74405a7f4a3d4bd78de8e7993725fac4.jpeg\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-08-25 09:43:25", "summary": "动态数组一、什么是？二、的作用是什么三、经典用法函数的定义代码展示效果展示的初始化数据类型函数名初始化为空数据类型函数名定义个空间，都初始化为。数据类型函数名函数名把动态数组复制给动态数组。数据类型函"}