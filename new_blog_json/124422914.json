{"blogid": "124422914", "writerAge": "码龄2年", "writerBlogNum": "100", "writerCollect": "162", "writerComment": "56", "writerFan": "42", "writerGrade": "4级", "writerIntegral": "1140", "writerName": "Lovey_北禾", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124422914.jpg", "writerRankTotal": "32693", "writerRankWeekly": "64470", "writerThumb": "39", "writerVisitNum": "57452", "blog_read_count": "2439", "blog_time": "于 2022-04-26 11:44:32 发布", "blog_title": "VS2019-C++创建和调用DLL动态链接库（傻瓜式教程）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p><span style=\"color:#79c6cd;\"><strong>前言：查了好久好久网上的资料C++调用动态链接库，试了好多方法（直接创建DLL、空项目创建的）都多多少少有些问题，最后自己不断摸索着成功了，还是很开心的，接下来把最清晰的步骤分享给大家（C++新人，有什么说的不清楚的还请大佬们见谅）</strong></span></p>\n<h3><strong>第一步：创建C++空项目</strong></h3>\n<p><img alt=\"\" height=\"788\" src=\"..\\..\\static\\image\\52eca1e01f4b4e9bb4e74a800ce06714.png\" width=\"1125\"/></p>\n<p><img alt=\"\" height=\"788\" src=\"..\\..\\static\\image\\75422e861ff34ed58e6274e3c8e5623a.png\" width=\"1125\"/></p>\n<h3><strong>第二步：创建头文件(.h)以及源文件(.cpp)</strong></h3>\n<p> <img alt=\"\" height=\"846\" src=\"..\\..\\static\\image\\cebb6d7e56454be3a1f705c2dd09e253.png\" width=\"1200\"/></p>\n<h1><span style=\"color:#fe2c24;\">第三步：编写头文件（重点）</span></h1>\n<p> 图片显示部分是模板，名称可以自己起最重要的就是__declspec(dllexport)以及__declspec(dllimport)。一个是导出，一个是导入。<img alt=\"\" height=\"1059\" src=\"..\\..\\static\\image\\b7735f888ab949c68c6ff8e390b63f4d.png\" width=\"1200\"/></p>\n<p> 为像我一样懒人们提供代码粘贴</p>\n<pre><code class=\"language-cpp\">#pragma once\n\n#ifndef BHDLL_d\n#define BHDLL_d\n\n//宏定义导出\n#ifdef BHDLL__//如果没有定义DLLH 就定义 DLLH __declspec(dllexport)\n#define BHDLL __declspec(dllexport)//导出\n#else\n#define BHDLL __declspec(dllimport)//导入\n#endif // DLLH__//如果没有定义DLLH 就定义 DLLH \n\n//编写代码区域\n\n//导出函数\n\nBHDLL int add(int a, int b);\nBHDLL int sub(int a, int b);\n\n//导出类\n\nclass BHDLL dllH\n{\npublic:\n  int mul(int a, int b);\n  int div(int a, int b);\n};\n\n//以C语言方式导出函数：\nextern \"C\"\n{\n  BHDLL int Cadd(int a, int b);\n  BHDLL int Csub(int a, int b);\n}\n\n\n\n#endif</code></pre>\n<h3>第四步：源文件实现头文件里面的方法</h3>\n<p> 为像我一样懒人们提供代码粘贴</p>\n<pre><code class=\"language-cpp\">#include \"BH_dll.h\"\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint add(int a, int b)\n{\n  return a + b;\n}\nint sub(int a, int b)\n{\n  return a - b;\n}\n\nint dllH::mul(int a, int b)\n{\n  return a * b;\n}\nint dllH::div(int a, int b)\n{\n  return a / b;\n}\n\nint Cadd(int a, int b)\n{\n  return a + b;\n}\nint Csub(int a, int b)\n{\n  return a - b;\n}</code></pre>\n<h3>第五步：配置解决平台X86/X64都可以，但是这个导出的DLL，用户引用的时候尽量和导出时的DLL平台一致</h3>\n<p class=\"img-center\"><img alt=\"\" height=\"53\" src=\"..\\..\\static\\image\\fae1934360d84857b4f23cee351ba78e.png\" width=\"455\"/></p>\n<h3> 第六步：配置类型-属性</h3>\n<p><img alt=\"\" height=\"930\" src=\"..\\..\\static\\image\\98e8fe2643004682a86dc98ff5fbaaf3.png\" width=\"556\"/></p>\n<p> <img alt=\"\" height=\"684\" src=\"..\\..\\static\\image\\ff539dfd16d94786b17a8f73e5ad48e7.png\" width=\"984\"/></p>\n<p> 把配置类型变成动态库-应用-确定-生成解决方案。 </p>\n<p><img alt=\"\" height=\"453\" src=\"..\\..\\static\\image\\9adfd3a738c24347b5dc2423c8df33c3.png\" width=\"493\"/></p>\n<h3>  第七步：完成动态链接库创建</h3>\n<p>在项目文件中可以找到dll,lib,,h文件，我们要的就是这三个</p>\n<p><img alt=\"\" height=\"335\" src=\"..\\..\\static\\image\\a6b9e9255471432a94160b445e53e44c.png\" width=\"1017\"/></p>\n<p> <img alt=\"\" height=\"309\" src=\"..\\..\\static\\image\\3f9cd19f7d4f4cf79b0ddbdf24677334.png\" width=\"940\"/></p>\n<h3>   第八步：创建新项目引用动态链接库</h3>\n<p><img alt=\"\" height=\"788\" src=\"..\\..\\static\\image\\c70352cdc5ea4fa7bbdab103a53ee348.png\" width=\"1125\"/></p>\n<p><img alt=\"\" height=\"788\" src=\"..\\..\\static\\image\\0f0e138ff524423787fb9e41bbdb9a05.png\" width=\"1125\"/></p>\n<p>添加main函数</p>\n<p><img alt=\"\" height=\"902\" src=\"..\\..\\static\\image\\2c85b89149de4e708f966e53e99b9938.png\" width=\"1200\"/></p>\n<h1><span style=\"color:#fe2c24;\"><strong>第九步：引用DLL</strong></span></h1>\n<p> 在项目文件下创建两个文件夹，后续往里添加三个文件<img alt=\"\" height=\"843\" src=\"..\\..\\static\\image\\2926c6d2707e4012831e1d453ec67dc8.png\" width=\"1189\"/></p>\n<p> <span style=\"color:#fe2c24;\">在include文件中添加刚才BH_DLL文件生成的.h文件</span></p>\n<p><span style=\"color:#fe2c24;\">在lib文件中添加刚才BH_DLL文件生成的dll和lib文件</span></p>\n<p><span style=\"color:#fe2c24;\">在项目文件夹下再次添加刚才BH_DLL文件生成的dll文件</span></p>\n<p>如图所示</p>\n<p><img alt=\"\" height=\"446\" src=\"..\\..\\static\\image\\0ed56025cf0141c4a36f76f045f65b29.png\" width=\"1048\"/></p>\n<p><img alt=\"\" height=\"189\" src=\"..\\..\\static\\image\\3cf0b80747f5451cae3489359f6a6ce3.png\" width=\"896\"/></p>\n<p> <img alt=\"\" height=\"271\" src=\"..\\..\\static\\image\\ba97afc9f476455c9dcfa749bae083ff.png\" width=\"1000\"/></p>\n<p> 配置新建项目的目录</p>\n<h1><span style=\"color:#fe2c24;\">配置之前一定要检查平台，一定要和生成DLL的平台一致然后再配置接下来的文件</span></h1>\n<p class=\"img-center\"><img alt=\"\" height=\"59\" src=\"..\\..\\static\\image\\61a48575839244f1998a5024b38ffc9f.png\" width=\"344\"/></p>\n<p><img alt=\"\" height=\"988\" src=\"..\\..\\static\\image\\0af7a9d323c34e13b3da2ee134120334.png\" width=\"579\"/></p>\n<p> 包含目录包含include<img alt=\"\" height=\"356\" src=\"..\\..\\static\\image\\37a524bdd65c4ec0972d81a01a58460e.png\" width=\"977\"/></p>\n<p> <img alt=\"\" height=\"164\" src=\"..\\..\\static\\image\\3a366e38300642aab817dfb691cc077a.png\" width=\"942\"/></p>\n<p> 库目录包含lib</p>\n<p><img alt=\"\" height=\"310\" src=\"..\\..\\static\\image\\f5bf7ec00b464d698c0b737eecc55872.png\" width=\"959\"/><img alt=\"\" height=\"266\" src=\"..\\..\\static\\image\\418489a05cf4456698d1d7cf5ebc8f6e.png\" width=\"994\"/></p>\n<p> 链接器-输入-附加依赖项包含lib文件名称</p>\n<p><img alt=\"\" height=\"366\" src=\"..\\..\\static\\image\\d5bb5a53b74e4e08ad702878f73e1616.png\" width=\"989\"/></p>\n<p> <img alt=\"\" height=\"296\" src=\"..\\..\\static\\image\\435cb927f8fd4fcba5c0e4c600ae54a0.png\" width=\"892\"/></p>\n<p> <img alt=\"\" height=\"288\" src=\"..\\..\\static\\image\\ce853f1f9b454d8abf071b455b1b19ef.png\" width=\"996\"/></p>\n<p> 应用-确认。</p>\n<h2><span style=\"color:#4da8ee;\"><strong>至此配置全部完成，接下来在main函数中引用</strong></span></h2>\n<p><img alt=\"\" height=\"927\" src=\"..\\..\\static\\image\\59fb963b22ed47f6ba96f68bcd479504.png\" width=\"1200\"/></p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n\nusing namespace std;\n#include &lt;BH_dll.h&gt;\n\nint main()\n{\n  cout &lt;&lt; add(1, 0) &lt;&lt; endl;\n  cout &lt;&lt; sub(1, 0) &lt;&lt; endl;\n\n  dllH DH;\n  cout &lt;&lt; DH.div(4, 2) &lt;&lt; endl;\n  cout &lt;&lt; DH.mul(4, 2) &lt;&lt; endl;\n\n  cout &lt;&lt; Cadd(1, 0) &lt;&lt; endl;\n  cout &lt;&lt; Csub(1, 0) &lt;&lt; endl;\n  getchar();\n  return 0;\n}</code></pre>\n<p><img alt=\"\" height=\"639\" src=\"..\\..\\static\\image\\b8c95706f7fa472686374f91a7a88e72.png\" width=\"1200\"/></p>\n<p> 完成！</p>\n<p><span style=\"color:#ad720d;\">有什么说的不对的地方还请大佬们在评论区留言，我看到了会改正，谢谢各位。</span></p>\n<p><span style=\"color:#ad720d;\">接下来会学习Qt调用C++DLL，学会了还会更新一期，如果哪位大佬知道捷径的话麻烦放个传送门在评论区呗，谢谢啦。</span></p>\n<p></p>\n</div>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-04-26 11:44:32", "summary": "前言：查了好久好久网上的资料调用动态链接库，试了好多方法直接创建、空项目创建的都多多少少有些问题，最后自己不断摸索着成功了，还是很开心的，接下来把最清晰的步骤分享给大家新人，有什么说的不清楚的还请大佬"}