{"blogid": "125509344", "writerAge": "码龄1年", "writerBlogNum": "16", "writerCollect": "278", "writerComment": "439", "writerFan": "502", "writerGrade": "4级", "writerIntegral": "933", "writerName": "程序员爱摸鱼", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125509344.jpg", "writerRankTotal": "30275", "writerRankWeekly": "278408", "writerThumb": "265", "writerVisitNum": "10036", "blog_read_count": "5062", "blog_time": "已于 2022-06-28 21:04:42 修改", "blog_title": "【Spring Cloud】教你十分钟学会Gateway~", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1><a id=\"_0\"></a></h1>\n<blockquote>\n<ul><li><strong>💂 个人主页:</strong> <a href=\"https://blog.csdn.net/lcshen1234?spm=1011.2432.3001.5343\" title=\"程序员爱摸鱼\">程序员爱摸鱼</a></li><li><strong>🤟 版权:</strong> 本文由【<strong>程序员爱摸鱼</strong>】原创、在CSDN首发、需要转载请联系博主</li><li>💬 如果文章对你有帮助、<strong>欢迎关注+点赞+收藏(一键三连)哦</strong></li><li>💅 <strong>想寻找共同成长的小伙伴，可以互粉哦</strong></li></ul>\n</blockquote>\n<div>\n<h3 id=\"%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\">💬文章目录</h3>\n<p id=\"-toc\" style=\"margin-left:0px;\">💅<a href=\"#\">1.1 概述</a></p>\n<p id=\"%E7%9B%B8%E5%85%B3%E6%9C%AF%E8%AF%AD-toc\" style=\"margin-left:80px;\">💅<a href=\"#%E7%9B%B8%E5%85%B3%E6%9C%AF%E8%AF%AD\">相关术语</a></p>\n<p style=\"margin-left:80px;\"></p>\n<p id=\"1.2%20%E5%85%A5%E9%97%A8-toc\" style=\"margin-left:40px;\">💅<a href=\"#1.2%20%E5%85%A5%E9%97%A8\">1.2 入门</a></p>\n<p id=\"%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A01.2.1%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A01.2.1%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83\">        </a>💅<a href=\"#%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A01.2.1%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83\">1.2.1 搭建环境</a></p>\n<p style=\"margin-left:80px;\"></p>\n<p id=\"%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A01.2.2%20%E6%B5%8B%E8%AF%95-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A01.2.2%20%E6%B5%8B%E8%AF%95\">        </a>💅<a href=\"#%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A01.2.2%20%E6%B5%8B%E8%AF%95\">1.2.2 测试</a></p>\n<p style=\"margin-left:80px;\"></p>\n<p id=\"2.1%C2%A0routes%E8%B7%AF%E7%94%B1-toc\" style=\"margin-left:40px;\">💅<a href=\"#2.1%C2%A0routes%E8%B7%AF%E7%94%B1\">2.1 routes路由</a></p>\n<p id=\"%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A02.1.2%20%E8%B7%AF%E7%94%B1%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A02.1.2%20%E8%B7%AF%E7%94%B1%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99\">        </a>💅<a href=\"#%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A02.1.2%20%E8%B7%AF%E7%94%B1%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99\">2.1.2 路由匹配规则</a></p>\n<p style=\"margin-left:80px;\"></p>\n<p id=\"2.2.1%20predicates%20%E6%96%AD%E8%A8%80-toc\" style=\"margin-left:80px;\">💅<a href=\"#2.2.1%20predicates%20%E6%96%AD%E8%A8%80\">2.2.1 predicates 断言</a></p>\n<p style=\"margin-left:80px;\"></p>\n<p id=\"7.3.3%20Filter%20%E7%BD%91%E5%85%B3%E8%BF%87%E6%BB%A4%E5%99%A8-toc\" style=\"margin-left:80px;\">💅<a href=\"#7.3.3%20Filter%20%E7%BD%91%E5%85%B3%E8%BF%87%E6%BB%A4%E5%99%A8\">7.3.3 Filter 网关过滤器</a></p>\n<hr id=\"hr-toc\"/>\n<h2>1.1 概述</h2>\n</div>\n<blockquote>\n<p>        Spring Cloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor（响应式编程） 等技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。</p>\n<p></p>\n<p>        Spring Cloud Gateway 作为 Spring Cloud 生态系统中的网关，目标是替代 Zuul，在Spring Cloud 2.0以上版本中，没有对新版本的Zuul 2.0以上最新高性能版本进行集成，仍然还是使用的Zuul 2.0之前的非Reactor模式的老版本。而为了提升网关的性能，SpringCloud Gateway是基于WebFlux框架实现的，而WebFlux框架底层则使用了高性能的Reactor模式通信框架Netty。</p>\n<p></p>\n</blockquote>\n<hr/>\n<h2 id=\"%E7%9B%B8%E5%85%B3%E6%9C%AF%E8%AF%AD\">1.1.1 相关术语</h2>\n<p>Gateway 目标是替代 Zuul，所有基本特性差别不大，主要的区别，底层的通信框架。</p>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\"><tbody><tr><td style=\"text-align:center;\"><strong>术语</strong></td><td style=\"text-align:center;\"><strong>描述</strong></td></tr><tr><td style=\"text-align:center;\">Route(路由)</td><td style=\"text-align:center;\">网关配置的基本组成模块，和Zuul的路由配置模块类似。一个<strong>Route模块</strong>由一个 ID，一个目标 URI，一组断言和一组过滤器定义。如果断言为真，则路由匹配，目标URI会被访问。</td></tr><tr><td style=\"text-align:center;\">Predicate(断言)</td><td style=\"text-align:center;\">这是一个 Java 8 的 Predicate，可以使用它来匹配来自 HTTP 请求的任何内容，例如 headers 或参数。<strong>断言的</strong>输入类型是一个 ServerWebExchange。</td></tr><tr><td style=\"text-align:center;\">Filter(过滤器)</td><td style=\"text-align:center;\">和Zuul的过滤器在概念上类似，可以使用它拦截和修改请求，并且对上游的响应，进行二次处理。过滤器为org.springframework.cloud.gateway.filter.GatewayFilter类的实例。</td></tr></tbody></table>\n<h1 id=\"%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4\"><a id=\"_26\"></a></h1>\n<h2 id=\"1.2%20%E5%85%A5%E9%97%A8\">1.2 入门</h2>\n<h3 id=\"%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A01.2.1%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83\">        1.2.1 搭建环境</h3>\n<ul><li> <p>创建项目：test-gateway-2.1</p> </li><li>修改pom，添加坐标</li></ul>\n<pre><code> &lt;dependencies&gt;\n        &lt;!-- 网关 --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- nacos 服务发现 --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n    &lt;/dependencies&gt;</code></pre>\n<ul><li>配置 yml文件：application.yml</li></ul>\n<pre><code>#端口号\nserver:\n  port: 10010\nspring:\n  application:\n    name: test-gateway\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 127.0.0.1:8848   #nacos服务地址\n    gateway:\n      discovery:\n        locator:\n          enabled: true   #开启服务注册和发现的功能，自动创建router以服务名开头的请求路径转发到对应的服务</code></pre>\n<ul><li>编写启动类</li></ul>\n<pre><code class=\"language-java\">@SpringBootApplication\n@EnableDiscoveryClient\npublic class TestGatewayApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(TestGatewayApplication.class, args);\n    }\n\n}</code></pre>\n<h2 id=\"1.%E5%BC%95%E5%85%A5%E5%BA%93\"><a id=\"1_27\"></a></h2>\n<h3 id=\"%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A01.2.2%20%E6%B5%8B%E8%AF%95\">        1.2.2 测试</h3>\n<pre><code>http://localhost:10010/service-consumer/feign/echo/abc</code></pre>\n<h2 id=\"2.%E8%AF%BB%E5%85%A5%E6%95%B0%E6%8D%AE\"><a id=\"2_41\"></a></h2>\n<pre><code>http://localhost:10010/service-provider/echo/abc</code></pre>\n<h2 id=\"2.1%C2%A0routes%E8%B7%AF%E7%94%B1\">2.1 routes路由</h2>\n<h3 id=\"%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A02.1.2%20%E8%B7%AF%E7%94%B1%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99\">        2.1.2 路由匹配规则</h3>\n<ul><li>gateWay的主要功能之一是转发请求，转发规则的定义主要包含三个部分</li></ul>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\"><tbody><tr><td style=\"text-align:center;\"><strong>组成</strong></td><td style=\"text-align:center;\"><strong>描述</strong></td></tr><tr><td style=\"text-align:center;\">路由 Route</td><td style=\"text-align:center;\">路由是网关的基本单元， 由ID、URI、一组Predicate、一组Filter组成，根据Predicate进行匹配转发。</td></tr><tr><td style=\"text-align:center;\">断言 Predicate</td><td style=\"text-align:center;\">路由转发的判断条件，目前SpringCloud Gateway支持多种方式， 常见如：Path、Query、Method、Header等，写法必须遵循 key=vlue的形式</td></tr><tr><td style=\"text-align:center;\">过滤器 Filter</td><td style=\"text-align:center;\">过滤器是路由转发请求时所经过的过滤逻辑，可用于修改请求、响应内容</td></tr></tbody></table>\n<p></p>\n<ul><li>修改yml文件，添加 <pre><code>routes:\n  - id: consumer\t\t\t\t  #自定义\n    uri: lb://service-consumer    #访问路径\n    predicates:\t\t\t\t\t  #断言\n      - Path=/consumer/**\n    filters:\t\t\t\t\t  #过滤器\n      - StripPrefix=1 </code></pre> <h3 id=\"2.2.1%20predicates%20%E6%96%AD%E8%A8%80\">2.2.1 predicates 断言</h3> </li></ul>\n<p>        在 Spring Cloud Gateway 中 Spring 利用 Predicate 的特性实现了各种路由匹配规则，有通过 Header、请求参数等不同的条件，来进行作为条件匹配到对应的路由。</p>\n<p>简单来说， Predicate 就是一组匹配规则，方便请求过来时，匹配到对应的 Route 进行处理。</p>\n<p></p>\n<ul><li> <p>Spring Cloud GateWay 内置多种 Predicate ，如下：</p> </li></ul>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\"><tbody><tr><th>规则</th><th>实例</th></tr><tr><td>Path</td><td>- Path=/gate/,/rule/</td></tr><tr><td>Before</td><td>- Before=2017-01-20T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>After</td><td>- After=2017-01-20T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Between</td><td>- Between=2017-01-20T17:42:47.789-07:00[America/Denver],2017-01-21T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Cookie</td><td>- Cookie=chocolate, ch.p</td></tr><tr><td>Header</td><td>- Header=X-Request-Id, \\d+</td></tr><tr><td>Host</td><td>- Host=<a href=\"www.hd123.com\">www.hd123.com</a></td></tr><tr><td>Method</td><td>- Method=GET</td></tr><tr><td>Query</td><td>- Query=baz</td></tr><tr><td>RemoteAddr</td><td>- RemoteAddr=192.168.1.1/24</td></tr></tbody></table>\n<p></p>\n<ul><li>实例1：通过请求参数匹配</li></ul>\n<pre><code>spring:\n  cloud:\n    gateway:\n      routes:\n        - id: query\n          uri: http://www.czxy.com\n          predicates:\n            - Query=my,123\n#访问路径，有参数my将转发到www.czxy.com\nhttp://localhost:10010/?my=123</code></pre>\n<ul><li>实例2：通过请求路径匹配</li></ul>\n<pre><code>spring:\n  cloud:\n    gateway:\n      routes:\n        - id: path\n          uri: http://www.czxy.com\n          predicates:\n            - Path=/czxy/{flag}\n# \nhttp://localhost:10010/czxy/666</code></pre>\n<ul><li> <p>总结：</p>\n<ul><li> <p>各种 Predicates 同时存在于同一个路由时，请求必须同时满足所有的条件才被这个路由匹配。</p> </li><li> <p>一个请求满足多个路由的断言条件时，请求只会被首个成功匹配的路由转发</p> </li></ul></li></ul>\n<h3 id=\"7.3.3%20Filter%20%E7%BD%91%E5%85%B3%E8%BF%87%E6%BB%A4%E5%99%A8\">7.3.3 Filter 网关过滤器</h3>\n<ul><li> <p>路由过滤器允许以某种方式修改传入的HTTP请求或传出HTTP响应。</p> </li></ul>\n<table><thead><tr><th>过滤规则</th><th>实例</th><th>说明</th></tr></thead><tbody><tr><td>PrefixPath</td><td>- PrefixPath=/app</td><td>对所有的请求路径添加前缀app</td></tr><tr><td>RedirectTo</td><td>- RedirectTo=302, <a href=\"http://czxy.com\" title=\"首页 - 传智专修学院\">首页 - 传智专修学院</a></td><td>重定向，配置包含重定向的返回码和地址</td></tr><tr><td>RemoveRequestHeader</td><td>- RemoveRequestHeader=X-Request-Foo</td><td>去掉某个请求头信息</td></tr><tr><td>RemoveResponseHeade</td><td>- RemoveResponseHeader=X-Request-Foo</td><td>去掉某个响应头信息</td></tr><tr><td>RemoveRequestParameter</td><td>- RemoveRequestParameter=red</td><td>去掉某个请求参数信息</td></tr><tr><td>RewritePath</td><td>- RewritePath=/where(?&lt;segment&gt;/?.<em>), /test(?&lt;segment&gt;/?.</em>)</td><td>改写路径 /where/... 改成 /test/...</td></tr><tr><td>SetPath</td><td>- SetPath=/{segment}</td><td>设置请求路径，与RewritePath类似</td></tr><tr><td>SetRequestHeader</td><td>- SetRequestHeader=X-Request-Red, Blue</td><td>设置请求头信息</td></tr><tr><td>SetStatus</td><td>- SetStatus=401</td><td>设置响应状态码</td></tr><tr><td>StripPrefix</td><td>- StripPrefix=2</td><td>跳过指定路径</td></tr><tr><td>RequestSize</td><td>- name: RequestSize args: maxSize: 5000000</td><td>请求大小</td></tr></tbody></table>\n<p></p>\n<ul><li>实例1：跳过指定路径</li></ul>\n<pre><code>spring:\n  cloud:\n    gateway:\n      routes:\n        - id: consumer\n          uri: lb://service-consumer  \n          predicates:\n            - Path=/consumer/**       \n          filters:\n            - StripPrefix=1</code></pre>\n<p></p>\n<ul><li>实例2：添加前缀</li></ul>\n<pre><code>spring:\n  cloud:\n    gateway:\n      routes:\n        - id: PrefixPath\n          uri: lb://service-consumer\n          predicates:\n            - Path=/consumer/**\n          filters:\n            - StripPrefix=1\n            - PrefixPath=/feign</code></pre>\n<ul><li>实例3：改写路径</li></ul>\n<pre><code>spring:\n  cloud:\n    gateway:\n      routes:\n        - id: RewritePath\n          uri: lb://service-consumer\n          predicates:\n            - Path=/consumer/**\n          filters:\n            - RewritePath=/consumer(?&lt;segment&gt;/?.*), $\\{segment}</code></pre>\n<p><em><strong>到这里说明你已经学会了哦，努力学习！<span style=\"color:#fe2c24;\">学无止境！！！</span></strong></em></p>\n<p><img alt=\"\" height=\"102\" src=\"https://img-blog.csdnimg.cn/c5df065b7e5b452e925958c43c60a03e.gif\" width=\"102\"/>                                   <img alt=\"\" height=\"100\" src=\"https://img-blog.csdnimg.cn/c5df065b7e5b452e925958c43c60a03e.gif\" width=\"100\"/>                                     <img alt=\"\" height=\"99\" src=\"https://img-blog.csdnimg.cn/c5df065b7e5b452e925958c43c60a03e.gif\" width=\"99\"/></p>\n<hr/>\n<blockquote>\n<p id=\"%E6%80%BB%E7%BB%93\"><a id=\"_55\"></a><strong>想要了解更多吗？没时间解释了，快来点一点<span style=\"color:#fe2c24;\">！！！</span><br/><a class=\"link-info\" href=\"https://blog.csdn.net/lcshen1234?spm=1019.2139.3001.5343\" title=\"程序员爱摸鱼🐟\">程序员爱摸鱼🐟</a><br/> ————————————————<br/> 版权声明：本文为CSDN博主「程序员爱摸鱼」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br/> 原文链接：<a class=\"link-info\" href=\"https://blog.csdn.net/lcshen1234?spm=1019.2139.3001.5343\" title=\"程 序 员 爱 摸 鱼🐟\">程 序 员 爱 摸 鱼🐟</a></strong></p>\n</blockquote>\n</div>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-06-28 21:04:42", "summary": "个人主页程序员爱摸鱼程序员爱摸鱼版权本文由程序员爱摸鱼原创、在首发、需要转载请联系博主如果文章对你有帮助、欢迎关注点赞收藏一键三连哦想寻找共同成长的小伙伴，可以互粉哦文章目录概述相关术语入门搭建环境测"}