{"blogid": "126712852", "writerAge": "码龄1年", "writerBlogNum": "4", "writerCollect": "92", "writerComment": "145", "writerFan": "232", "writerGrade": "3级", "writerIntegral": "561", "writerName": "bit me", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126712852.jpg", "writerRankTotal": "53515", "writerRankWeekly": "1689", "writerThumb": "156", "writerVisitNum": "921", "blog_read_count": "209", "blog_time": "已于 2022-09-05 21:28:51 修改", "blog_title": "【JavaSE】JavaSE之运算符详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>JavaSE运算符详解</h3>\n<ul><li><a href=\"#_1\">一.什么是运算符</a></li><li><a href=\"#_3\">二.算术运算符</a></li><li><a href=\"#_31\">三.关系运算符</a></li><li><a href=\"#_37\">四.逻辑运算符(重点)</a></li><li><a href=\"#_64\">五.位运算符</a></li><li><a href=\"#_98\">六.移位运算(了解)</a></li><li><a href=\"#_120\">七.条件运算符</a></li><li><a href=\"#_128\">八.运算符的优先级</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>一.什么是运算符</h1>\n<p>计算机的最基本的用途之一就是执行数学运算，和数学一样，比如+ 和 &lt; 等就是运算符，即：对操作数进行操作时的符号，不同运算符操作的含义不同。作为一门计算机语言，Java提供了一套丰富的运算符来操纵变量。Java中运算符可分为以下：<strong>算术运算符(+ - * /)、关系运算符(&lt; &gt; ==)、逻辑运算符、位运算符、移位运算符以及条件运算符</strong>等。</p>\n<h1><a id=\"_3\"></a>二.算术运算符</h1>\n<ol><li>基本四则运算符：加减乘除模(<strong>+ - * / %</strong>)<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9c686d89cad74c5581022370b6850e0f.png\"/><br/> 在Java中，被除数不能为0。Java里面 把程序在运行(编译)的过程当中，产生的不正常的行为，叫做异常！！！(有很多种异常)<br/> 例如下面：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4a3cd7a0b0ac40c0843116861ded0e1d.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b5429297d554409a811efeac7b25ad7c.png\"/><br/> 此处展示了算术异常，被除数不能为0<br/> 注意：<br/> 1.都是二元运算符，使用时必须要有<strong>左右两个操作数</strong><br/> 2.int / int 结果还是int类型，而且会向下取整(如若得数是小数，想接收它，那么可以创建一个double类型的变量来接收它)<br/> 3.做除法和取模时，右操作数不能为0(也就是被<strong>除数不能为0</strong>)<br/> 4.% 不仅可以对整形取模，也可以对double类型取模，但是没有意义，一般都是对整形取模的<br/> 5.<strong>两侧操作数类型不一致时，向类型大的提升</strong></li><li>增量运算符 *<em>+= -= <em>= %=</em></em><br/> 该种类型运算符操作完成后，会将操纵的结果赋值给左操作数。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\19e2e274097a439ba6b524cf71c2d0a5.png\"/><br/> 注意：<br/> 1.只有<strong><strong>变量</strong></strong>才能使用该运算符，常量不能使用。<br/> 2.此操作符还有一重要特点，就是<strong><strong>在计算的过程中自动进行强制类型转换了</strong></strong>，在进行不同类型之间的计算时，可以<strong><strong>不需要我们转换</strong></strong>，但是换成一般的计算式就需要强制类型转换。<br/> 3.自增/自减运算符 ++ –<br/> <strong>++是给变量的值+1，–是给变量的值-1。</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4b48678ae1ae4b1d8ce0e4612f9a2159.png\"/><br/> 此处代码展示了后置++和前置++的区别，后置–和前置–也是一样，所以就不用列举那么多代码。<br/> 注意：<br/> 1.如果单独使用，【前置++】和【后置++】没有任何区别<br/> 2.如果混合使用，【前置++】先+1，然后使用变量+1之后的值，【后置++】先使用变量原来的值，表达式结束时给变量+1<br/> 3.只有变量才能使用自增/自减运算符，常量不能使用，因为常量不允许被修改</li></ol>\n<h1><a id=\"_31\"></a>三.关系运算符</h1>\n<p>关系运算符主要有六个: <strong>== != &lt; &gt; &lt;= &gt;=</strong> ，其计算结果是 true 或者 false 。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fdc41344423c489c92f66c4a2fd52089.png\"/><br/> 此处判断符号和数学没什么差别，判断结果只有两种( true 或者 false )<br/> 注意：<br/> 1.当需要多次判断时，不能连着写，比如：3 &lt; a &lt; 5，Java程序与数学中是有区别的</p>\n<h1><a id=\"_37\"></a>四.逻辑运算符(重点)</h1>\n<p>逻辑运算符主要有三个: <strong>&amp;&amp; || !</strong> ，运算结果都是 boolean类型。</p>\n<ol><li>逻辑与 ：&amp;&amp;（短路与）<br/> 语法规则：表达式1 &amp;&amp; 表达式2，左右表达式必须是boolean类型的结果。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b340b18066d348889264cd557f00fb31.png\"/><br/> <strong>值得注意的是两边都得是布尔表达式</strong>！！！当第一个布尔表达式是假的时候，后面的布尔表达式就不会执行了。且两个表达式都为真，结果才是真，<strong>只要有一个是假，结果就是假</strong>。<br/> 代码演示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f22a226370e347fc9f869710dcfa3187.png\"/></li><li>逻辑或： ||（短路或）<br/> 语法规则：表达式1 || 表达式2，<strong>左右表达式必须是boolean类型的</strong>结果。<br/> 只要布尔表达式<strong>有一个为真，那整个表达式就为真</strong>。布尔表达式1为真则不执行布尔表达式2，布尔表达式1为假则会继续执行布尔表达式2。<br/> 代码演示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\47a11c93acfc4b6b84e11a2e6be3ec96.png\"/></li><li>逻辑非 !<br/> 语法规则：! 布尔表达式（<strong>一定是布尔表达式</strong>）<br/> <strong>真变假，假变真</strong>。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\72c933b19205471e8f43d8aa5fdbf83c.png\"/><br/> 代码演示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\613c7cfb348b4745a255c7e198119fb9.png\"/></li><li>短路求值<br/> &amp;&amp; 和 || 遵守短路求值的规则.<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f348d9ae5a08482c8f296b28c64704cf.png\"/><br/> 我们都知道, 计算 10 / 0 会导致程序抛出异常. 但是上面的代码却能正常运行, 说明 10 / 0 并没有真正被求值.（此处展示了他们俩的短路求值规则）<br/> 注意:<br/> 1.对于 &amp;&amp; , 如果左侧表达式值为 false, 则表达式结果一定是 false, 无需计算右侧表达式.<br/> 2.对于 ||, 如果左侧表达式值为 true, 则表达式结果一定是 true, 无需计算右侧表达式.<br/> 3.&amp; 和 | 如果表达式结果为 boolean 时, 也表示逻辑运算. 但与 &amp;&amp; || 相比, 它们不支持短路求值（这两个表达式不是布尔表达式，那么他们代表的就是位运算）</li></ol>\n<h1><a id=\"_64\"></a>五.位运算符</h1>\n<p>Java 中数据存储的最小单位是字节，而数据操作的最小单位是比特位. 字节是最小的存储单位，每个字节是由8个二进制比特位组成的，多个字节组合在一起可以表示各种不同的数据。<br/> 此处介绍一下储存单位大小：<br/> <strong>bit byte kb mb gb tb pb</strong><br/> 在这些单位里面，只有比特位(bit)和字节(byte)之间的进制是8，其余俩俩之间进制都是1024，按照我给的排名储存单位从小到大。<br/> 位运算符主要有四个: <strong>&amp; | ~ ^</strong> ，除 ~ 是一元运算符外，其余都是二元运算符。<br/> 位操作表示 按二进制位运算. 计算机中都是使用二进制来表示数据的(01构成的序列), 按位运算就是在按照二进制位的每一位依次进行计算</p>\n<ol><li> <p>按位与 &amp;: 如果<strong>两个二进制位都是 1, 则结果为 1, 否则结果为 0</strong>.<br/> 展示例子：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0357c5ada05645978d6806347fa4585a.png\"/><br/> 进行按位运算, 需要先把 10 和 20 转成二进制, 分别为 1010 和 10100。计算过程如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b314f76f2b9946eaaf98a19210918530.png\"/></p> </li><li> <p>按位或 |: <strong>如果两个二进制位都是 0, 则结果为 0, 否则结果为 1</strong>.<br/> 展示例子：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9628921269aa4185947f7af20c775991.png\"/><br/> 进行按位运算, 需要先把 10 和 20 转成二进制, 分别为 1010 和 10100。计算过程如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\899089088a014e71ad05d1c5657eb960.png\"/><br/> 注意:<br/> 当 &amp; 和 | 的操作数为整数(int, short, long, byte) 的时候, 表示按位运算, 当操作数为 boolean 的时候, 表示逻辑运算.</p> </li><li> <p>按位异或 ^: <strong>如果两个数字的二进制位相同, 则结果为 0, 相异则结果为 1</strong>.<br/> 展示例子：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7bf0e80165d84b92bee6a3fcd00ad4f0.png\"/><br/> 0x1是十六进制表示1<em>16^0 = 1,0x2是十六进制表示2</em>16^0 = 2。所以根据按位异或的结果，相同为0，相异为1，算出来二进制最后两位都为一，所以等于三。</p> </li><li> <p>按位取反 ~: <strong>如果该位为 0 则转为 1, 如果该位为 1 则转为 0</strong>.<br/> 展示例子：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bcee6cbe967240f6944ab4753c10431f.png\"/><br/> 输出结果：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e0cacfbf141e4e6da04629ffa34f3dc6.png\"/><br/> 注意:<br/> 1.0x 前缀的数字为 十六进制 数字. 十六进制可以看成是二进制的简化表示方式. 一个十六进制数字对应 4 个二进制位.<br/> 2.0xf 表示 10 进制的 15, 也就是二进制的 1111<br/> 3.printf 能够格式化输出内容, %x 表示按照十六进制输出.<br/> 4.\\n 表示换行符</p> </li></ol>\n<h1><a id=\"_98\"></a>六.移位运算(了解)</h1>\n<p>移位运算符有三个: &lt;&lt; &gt;&gt; &gt;&gt;&gt; ，都是二元运算符，且都是按照二进制比特位来运算的。</p>\n<ol><li>左移 &lt;&lt;: 最左侧位不要了, 最右侧补 0.<br/> 展示例子：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\53bed975a95d449696af417ef532d3a2.png\"/><br/> 可以看出来左移相当于<strong>乘法</strong><br/> 注意：向左移位时，丢弃的是符号位，因此<strong>正数左移可能会变成负数</strong>。</li><li>右移 &gt;&gt;: 最右侧位不要了, 最左侧补符号位(正数补0, 负数补1)<br/> 展示例子：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6dbbc3a243ed4312b3eb02166ec5256f.png\"/><br/> 可以看出来右移相当于<strong>除法</strong> 右移<strong>补的是符号位</strong><br/> 注意：负数右移的话，结果是偏向小的整数结果，和除法此处有点略微不同。</li><li>无符号右移 &gt;&gt;&gt;: 最右侧位不要了, 最左侧补 0.<br/> 展示例子：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\661765bccf104bc09de3aa7c0afd1619.png\"/><br/> 可以看出来不管你是正数还是负数 统统补0<br/> 注意：<strong>没有无符号左移</strong>，最右边没有符号位，所以此处注意！！<br/> 总结：<br/> 1 左移 1 位, 相当于原数字 * 2. 左移 N 位, 相当于原数字 * 2 的N次方.<br/> 2.右移 1 位, 相当于原数字 / 2. 右移 N 位, 相当于原数字 / 2 的N次方.<br/> 3.由于计算机计算移位效率高于计算乘除, 当某个代码正好乘除 2 的N次方的时候可以用移位运算代替.<br/> 4.移动负数位或者移位位数过大都没有意义.</li></ol>\n<h1><a id=\"_120\"></a>七.条件运算符</h1>\n<p>条件运算符只有一个 : <strong>表达式1 ? 表达式2 : 表达式3</strong><br/> 如果表达式1为真，那么执行表达式2，否则执行表达式3。<br/> 执行结果：<strong>当 表达式1 的值为 true 时, 整个表达式的值为 表达式2 的值;当 表达式1 的值为 false 时, 整个表达式的值为 表达式3 的值</strong>。要么返回表达式2的结果，要么返回表达式3的结果，所以此处必须定义一个变量来接收它。<br/> 这是 Java 中唯一的一个 三目运算符, 是条件判断语句的简化写法<br/> 注意：</p>\n<ol><li>表达式2和表达式3的结果要是<strong>同类型的</strong>，除非能发生类型隐式类型转换</li><li>表达式不能单独存在，其产生的结果必须要被使用。(相当于定义一个变量去接收它)</li></ol>\n<h1><a id=\"_128\"></a>八.运算符的优先级</h1>\n<p>在一条表达式中，各个运算符可以混合起来进行运算，但是运算符的优先级不同，比如：* 和 / 的优先级要高于 + 和- ，有些情况下稍不注意，可能就会造成很大的麻烦<br/> 注意：<br/> 运算符之间是有优先级的. 具体的规则我们不必记忆. 在可能存在歧义的代码中加上括号即可<br/> 此处优先级我们不做多的了解，和一般数学计算差不多，能了解即可。</p>\n<p>JavaSE的运算符就到此为止了，有没有觉得很简单呢，期望大家能和我一起进步，打牢基础知识，向更高的山峰攀登吧！！！</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-09-05 21:28:51", "summary": "运算符详解一什么是运算符二算术运算符三关系运算符四逻辑运算符重点五位运算符六移位运算了解七条件运算符八运算符的优先级一什么是运算符计算机的最基本的用途之一就是执行数学运算，和数学一样，比如和等就是运算"}