{"blogid": "126670667", "writerAge": "码龄3年", "writerBlogNum": "36", "writerCollect": "40", "writerComment": "0", "writerFan": "11", "writerGrade": "3级", "writerIntegral": "444", "writerName": "wenxingxingxing", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126670667.jpg", "writerRankTotal": "36634", "writerRankWeekly": "16568", "writerThumb": "3", "writerVisitNum": "6101", "blog_read_count": "72", "blog_time": "已于 2022-09-03 17:40:34 修改", "blog_title": "tf_Course6循环神经网络", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>循环神经网络</h3>\n<ul><li><a href=\"#_Recurrent_Neural_Network_RNN_2\">一， 循环神经网络（Recurrent Neural Network， RNN）</a></li><li><ul><li><a href=\"#1_3\">1、卷积神经网络与循环神经网络简单对比</a></li><li><a href=\"#2__RNN_8\">2、 详解 RNN</a></li><li><ul><li><a href=\"#21__9\">2.1 循环核：</a></li><li><a href=\"#22__17\">2.2 循环核按时间步展开</a></li><li><a href=\"#23_20\">2.3循环计算层：向输出方向生长</a></li><li><a href=\"#24_RNN__25\">2.4 RNN 训练</a></li><li><a href=\"#25_Tensorflow2__29\">2.5 Tensorflow2 描述循环计算层</a></li><li><a href=\"#26__1pre1_57\">2.6 循环计算过程之 1pre1</a></li><li><a href=\"#27_4pre1_175\">2.7 循环过程之4pre1</a></li><li><a href=\"#28_Embedding__324\">2.8 Embedding 编码实现预测</a></li><li><a href=\"#29_RNN_367\">2.9 RNN实现股票预测</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<br/> 本节目标：学习循环神经网络，用RNN，LSTM，GRU实现连续数据的预测（以股票为例）\n<p></p>\n<h1><a id=\"_Recurrent_Neural_Network_RNN_2\"></a>一， 循环神经网络（Recurrent Neural Network， RNN）</h1>\n<h2><a id=\"1_3\"></a>1、卷积神经网络与循环神经网络简单对比</h2>\n<p>CNN：借助卷积核（kernel）提取特征后，送入后续网络（如全连接网络Dense）进行分类、目标检测等操作。CNN借助卷积核从空间维度提取信息，卷积核参数空间共享</p>\n<p>RNN：借助循环核（cell）提取特征后， 送入后续网络(如全连接网络 Dense)进行预测等操作。 RNN 借助循环核从时间维度提取信息，循环核参数时间共享。</p>\n<h2><a id=\"2__RNN_8\"></a>2、 详解 RNN</h2>\n<h3><a id=\"21__9\"></a>2.1 循环核：</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4a5801eaf3844e2cb9a0eadde16f8018.png\"/></p>\n<p>循环核具有记忆力，通过不同时刻的参数共享，实现了对时间序列的信息提<br/> 取。 每个循环核有多个记忆体，对应图 1.2.1 中的多个小圆柱。 记忆体内存储着每个时刻的状态信息ℎ<sub>𝑡</sub>，这里ℎ<sub>𝑡</sub> = tanh( x<sub>t</sub> * 𝑤<sub>𝑥ℎ</sub> + ℎ<sub>𝑡-1</sub>w<sub>ℎℎ</sub>+ 𝑏ℎ)。 其中，𝑤<sub>𝑥ℎ</sub>、 w<sub>ℎℎ</sub>为权重矩阵， 𝑏ℎ为偏置， 𝑥𝑡为当前时刻的输入特征， ℎ𝑡𝑡−1为记忆体上一时刻存储的状态信息， tanh 为激活函数。</p>\n<p>当前时刻循环核的输出特征𝑦<sub>𝑡 </sub>= softmax(ℎ<sub>𝑡</sub>w<sub>ℎ𝑦</sub>+ 𝑏𝑦)， 其中w<sub>ℎ𝑦</sub>为权重矩阵、𝑏<sub>𝑦</sub>为偏置、 softmax 为激活函数，其实就相当于一层全连接层。 <strong>我们可以设定记忆体的个数从而改变记忆容量，当记忆体个数被指定、 输入𝑥 <sub>𝑡</sub>输出𝑦<sub>t</sub>维度被指定，周围这些待训练参数的维度也就被限定了。</strong> 在前向传播时， 记忆体内存储的状态信息h𝑡𝑡在每个时刻都被刷新， 而三个参数矩阵𝑤𝑥ℎ、 wℎℎ、 𝑤ℎ𝑦和两个偏置项𝑏ℎ、𝑏𝑦自始至终都是固定不变的。 在反向传播时， 三个参数矩阵和两个偏置项由梯度下降法更新</p>\n<h3><a id=\"22__17\"></a>2.2 循环核按时间步展开</h3>\n<p>将循环核按时间步展开， 就是把循环核按照时间轴方向展开，可以得到如图1.2.2 的形式。 每个时刻记忆体状态信息ℎ<sub>𝑡</sub>被刷新，记忆体周围的参数矩阵和两个偏置项是固定不变的，我们训练优化的就是这些参数矩阵。训练完成后，使用效果最好的参数矩阵执行前向传播， 然后输出预测结果。 其实这和我们人类的预测是一致的：我们脑中的记忆体每个时刻都根据当前的输入而更新； 当前的预测推理是根据我们以往的知识积累用固化下来的“参数矩阵”进行的推理判断。可以看出， 循环神经网络就是借助循环核实现时间特征提取后把提取到的信息送入全连接网络， 从而实现连续数据的预测。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\04f0e640891e454fb5bc5ead1302082c.png\"/></p>\n<h3><a id=\"23_20\"></a>2.3循环计算层：向输出方向生长</h3>\n<p>在 RNN 中， 每个循环核构成一层循环计算层， 循环计算层的层数是向输出方向增长的。如图 1.2.3 所示，左图的网络有一个循环核，构成了一层循环计算层；中图的网络有两个循环核，构成了两层循环计算层；右图的网络有三个循环核，构成了三层循环计算层。其中，三个网络中每个循环核中记忆体的个数可以根据我们的需求任意指定。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\264701aea7c94e6192ffbda71a3e6a64.png\"/></p>\n<h3><a id=\"24_RNN__25\"></a>2.4 RNN 训练</h3>\n<p>得到 RNN 的前向传播结果之后，和其他神经网络类似， 我们会定义损失函数，使用反向传播梯度下降算法训练模型。 RNN 唯一的区别在于：由于它每个时刻的节点都可能有一个输出，所以 RNN 的总损失为所有时刻（或部分时刻）上的损失和。</p>\n<h3><a id=\"25_Tensorflow2__29\"></a>2.5 Tensorflow2 描述循环计算层</h3>\n<pre><code class=\"prism language-Python\">tf.keras.layers.SimpleRNN(神经元个数， \n\t\t\t\t\t\tactivation=激活函数， \n\t\t\t\t\t\treturn_sequences=是否每个时刻输出ℎ&lt;sub&gt;𝑡&lt;/sub&gt;到下一层\n)\n(1)神经元个数：即循环核中记忆体的个数\n\n(2) return_sequences： 在输出序列中，返回最后时间步的输出值ℎ𝑡𝑡还是返\n回全部时间步的输出。 False 返回最后时刻(图 1.2.5)， True 返回全部时刻(图\n1.2.4)。 当下一层依然是 RNN 层，通常为 True，反之如果后面是 Dense 层， 通常为 Fasle。\n</code></pre>\n<p>return_sequences=True 循环核每时刻会把推送ℎ<sub>𝑡</sub>到下一层<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\eb2e459cdf81481e8d517a6d74fe905c.png\"/></p>\n<p>return_sequences=False 循环核仅仅在最后一个时刻时刻会把推送ℎ<sub>𝑡</sub>到下一层<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\90980b8330ff41b89c4309f2e0f3a534.png\"/><br/> （3）输入维度：三维张量（输入样本数，循环核世界展开步数，每个时间步输入特征个数）<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7bf00dd9e76d48f2a204027715b587a7.png\"/><br/> 如图 1.2.6 所示，左图一共要送入 RNN 层两组数据， 每组数据经过一个时间步就会得到输出结果， 每个时间步送入三个数值，则输入循环层的数据维度就是[2, 1, 3]；右图输入只有一组数据， 分四个时间步送入循环层， 每个时间步送入两个数值 ，则输入循环层的数据维度就是 [1， 4， 2]。</p>\n<p>(4)输出维度： 当 return_sequenc=True， 三维张量(输入样本数, 循环核时间展开步数,本层的神经元个数)；当 return_sequenc=False，二维张量(输入样本数,本层的神经元个数)</p>\n<p>(5) activation： ‘激活函数’(不写默认使用 tanh）<br/> 例： SimpleRNN(3, return_sequences=True)， 定义了一个具有三个记忆体的<br/> 循环核， 这个循环核会在每个时间步输出ℎ<sub>𝑡</sub></p>\n<h3><a id=\"26__1pre1_57\"></a>2.6 循环计算过程之 1pre1</h3>\n<p>RNN 最典型的应用就是利用历史数据预测下一时刻将发生什么，即根据以前<br/> 见过的历史规律做预测。 举一个简单的字母预测例子体会一下循环网络的计算过<br/> 程： 输入一个字母预测下一个字母—输入 a 预测出 b、 输入 b 预测出 c、 输入 c<br/> 预测出 d、 输入 d 预测出 e、 输入 e 预测出 a。计算机不认识字母，只能处理数<br/> 字。所以需要我们对字母进行编码。这里假设使用独热编码（实际中可使用其他<br/> 编码方式）， 编码结果如图 1.2.7 所示<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\089c11b1ede44c24aa4e41833183352a.png\"/><br/> 假设使用一层 RNN 网络， 记忆体的个数选取 3，则字母预测的网络如图 1.2.8<br/> 所示。假设输入字母 b，即输入x<sub>𝑡</sub>为[0,1,0,0,0]，这时上一时刻的记忆体状态信息ℎ<sub>𝑡-1</sub> 为0，ℎ<sub>𝑡-1</sub> = tanh( x<sub>t</sub> * 𝑤<sub>𝑥ℎ</sub> + ℎ<sub>𝑡-1</sub>w<sub>ℎℎ</sub>+ 𝑏ℎ) = tanh([−2.3 0.8 1.1 ] + 0 + [ 0.5 0.3 − 0.2]) =<br/> tanh[−1.8 1.1 0.9 ] = [−0.9 0.8 0.7]，这个过程可以理解为脑中的记忆因为当前输入的事物而更新了。</p>\n<p>输出是把提取到的时间信息通过全连接进行识别预测的过程， 是整个网络的输<br/> 出层。不难知道𝑦<sub>𝑡 </sub>= softmax(ℎ<sub>𝑡</sub>w<sub>ℎ𝑦</sub>+ 𝑏𝑦)= softmax([−0.7 − 0.6 2.9 0.7 −0.8] + [ 0.0 0.1 0.4 − 0.7 0.1]) = softmax([−0.7 − 0.5 3.3 0.0 − 0.7]) = [0.02 0.02 𝟎𝟎. 𝟗𝟗𝟗𝟗 0.03 0.02 ] 。 可见模型认为有 91%的可能性输出字母 c ，<br/> 所以循环网络输出了预测结果 c。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d0b5aa297da74078bb0fa36d5d7f9184.png\"/><br/> (1)用独热编码的方式实现：<br/> 按照六步法八股套路进行编码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> tensorflow <span class=\"token keyword\">as</span> tf\n<span class=\"token keyword\">from</span> tensorflow<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers <span class=\"token keyword\">import</span> Dense<span class=\"token punctuation\">,</span> SimpleRNN\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token keyword\">import</span> os\n\ninput_word <span class=\"token operator\">=</span> <span class=\"token string\">\"abcde\"</span>\nw_to_id <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span> <span class=\"token comment\"># 单词映射到数值id的词典</span>\nid_to_onehot <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>  <span class=\"token comment\"># id编码为one-hot</span>\n\nx_train <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>id_to_onehot<span class=\"token punctuation\">[</span>w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id_to_onehot<span class=\"token punctuation\">[</span>w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id_to_onehot<span class=\"token punctuation\">[</span>w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n           id_to_onehot<span class=\"token punctuation\">[</span>w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id_to_onehot<span class=\"token punctuation\">[</span>w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\ny_train <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\nnp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\nnp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>shuffle<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">)</span>\nnp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\nnp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>shuffle<span class=\"token punctuation\">(</span>y_train<span class=\"token punctuation\">)</span>\ntf<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>set_seed<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 使x_train符合SimpleRNN输入要求：[送入样本数， 循环核时间展开步数， 每个时间步输入特征个数]。</span>\n<span class=\"token comment\"># 此处整个数据集送入，送入样本数为len(x_train)；</span>\n<span class=\"token comment\"># 输入1个字母出结果，循环核时间展开步数为1; 表示为独热码有5个输入特征，每个时间步输入特征个数为5</span>\n\nx_train <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ny_train <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>y_train<span class=\"token punctuation\">)</span>\n\nmodel <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    SimpleRNN<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    Dense<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'softmax'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\nmodel<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>optimizer <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>optimizers<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span><span class=\"token number\">0.01</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>losses<span class=\"token punctuation\">.</span>SparseCategoricalCrossentropy<span class=\"token punctuation\">(</span>from_logits<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            metrics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'sparse_categorical_accuracy'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span>\ncheckpoint_save_path <span class=\"token operator\">=</span> <span class=\"token string\">'./checkpoint/rnn_onehot_1pre1.ckpt'</span>\n<span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span>checkpoint_save_path <span class=\"token operator\">+</span> <span class=\"token string\">'.index'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-------------load the model-----------------'</span><span class=\"token punctuation\">)</span>\n    model<span class=\"token punctuation\">.</span>load_weights<span class=\"token punctuation\">(</span>checkpoint_save_path<span class=\"token punctuation\">)</span>\n\ncp_callback <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>callbacks<span class=\"token punctuation\">.</span>ModelCheckpoint<span class=\"token punctuation\">(</span>filepath <span class=\"token operator\">=</span> checkpoint_save_path<span class=\"token punctuation\">,</span>\n                                                save_weights_only<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n                                                save_best_only<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n                                                <span class=\"token comment\"># 由于fit没有给出测试集，不计算测试集准确率，根据loss，保存最优模型</span>\n                                                monitor <span class=\"token operator\">=</span> <span class=\"token string\">'loss'</span>\n<span class=\"token punctuation\">)</span>\n\nhistory <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> epochs<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> callbacks<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>cp_callback<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>summary<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># print(model.trainable_variables)</span>\n<span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./weights.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 参数提取</span>\n<span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> model<span class=\"token punctuation\">.</span>trainable_variables<span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">###############################################    show   ###############################################</span>\n\n<span class=\"token comment\"># 显示训练集和验证集的acc和loss曲线</span>\nacc <span class=\"token operator\">=</span> history<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">[</span><span class=\"token string\">'sparse_categorical_accuracy'</span><span class=\"token punctuation\">]</span>\nloss <span class=\"token operator\">=</span> history<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">[</span><span class=\"token string\">'loss'</span><span class=\"token punctuation\">]</span>\n\nplt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'Training Accuracy'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Training Accuracy'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nplt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>loss<span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'Training Loss'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Training Loss'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">############### predict #############</span>\npreNum <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input the number of test alphabet:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>preNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    alphabet1 <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input test alphabet: \"</span><span class=\"token punctuation\">)</span>\n    alphabet <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>id_to_onehot<span class=\"token punctuation\">[</span>w_to_id<span class=\"token punctuation\">[</span>alphabet1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\"># 使alphabet符合SimpleRNN输入要求：[送入样本数， 循环核时间展开步数， 每个时间步输入特征个数]。此处验证效果送入了1个样本，送入样本数为1；</span>\n    <span class=\"token comment\"># 输入1个字母出结果，所以循环核时间展开步数为1; 表示为独热码有5个输入特征，每个时间步输入特征个数为5</span>\n    alphabet <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>alphabet<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>alphabet<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    pred <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    pred <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">)</span>\n    tf<span class=\"token punctuation\">.</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>alphabet1 <span class=\"token operator\">+</span> <span class=\"token string\">'-&gt;'</span> <span class=\"token operator\">+</span> input_word<span class=\"token punctuation\">[</span>pred<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p>如代码所示，import相关模块生成训练用的输入特征x_train和标签y_train(输入特征a对应的标签是b、输入特征b对应的标签是c、依次类推)，打乱顺序后变形成RNN输入需要的维度。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\64b3263191e54049abc35ea61e1dbbe3.png\"/><br/> 如图1.2.10所示，构建模型:一个具有3个记忆体的循环层+一层全连接-&gt;Compile-&gt;fit-&gt;summary。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0cedae42bcf042b698e9c94442dc43bb.png\"/><br/> 为展示预测效果的应用程序，将其写到了这段代码的最后：首先输入要执行几次预测任务;随后等待输入一个字母，将这个字母转换为独热码形式后调整为RNN层希望的形状;然后通过predict得到预测结果，选出预测结果中最大的一个即为预测结果<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a2dc0ea85cd541ed99220962e116d387.png\"/></p>\n<h3><a id=\"27_4pre1_175\"></a>2.7 循环过程之4pre1</h3>\n<p>用RNN实现输入连续四个字母，预测下一个字母（One hot 编码）</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fd845de90729438691de83c3ef2e7b5f.png\"/><br/> 1pre1是输入一个字母预测下一个字母的例子，4pre1是连续输入多(这里取4)个字母预测下一个字母的例子。这里仍然使用三个记忆体，初始时刻记忆体内的记忆是0。接下来用一套训练好的参数矩阵感受循环计算的前向传播过程，在这个过程中的每个时刻参数矩阵是固定的，记忆体会在每个时刻被更新。下面以输入bcde预测a为例：</p>\n<p>在第一个时刻，b的独热码[0,1,0,0,0]输入，记忆体根据更新公式ℎ<sub>𝑡</sub> = tanh( 𝑥<sub>𝑡</sub> 𝑤<sub>𝑥ℎ</sub> + ℎ<sub>𝑡-1</sub>w<sub>ℎℎ</sub>+ 𝑏ℎ) = tanh([−1.5 0.2 0.3] + [0.0 0.0 0.0] + [0.2 0.0 −0.1])= tanh([−1.3 0.2 0.2 ]) = [−0.9 0.2 0.2]刷新。</p>\n<p>在第二个时刻，c的独热码[0,0,1,0,0]输入，记忆体根据更新公式ℎ<sub>𝑡</sub> = tanh( 𝑥<sub>𝑡</sub> 𝑤<sub>𝑥ℎ</sub> + ℎ<sub>𝑡-1</sub>w<sub>ℎℎ</sub>+ 𝑏ℎ) = tanh([−0.3 1.7 0.7] + [1.1 1.1 0.5] + [0.2 0.0 −0.1])= tanh([ 1.0 2.8 1.1]) = [0.8 1.0 0.8]刷新。</p>\n<p>在第三个时刻，d的独热码[0,0,0,1,0]输入，记忆体根据更新公式ℎ<sub>𝑡</sub> = tanh( 𝑥<sub>𝑡</sub> 𝑤<sub>𝑥ℎ</sub> + ℎ<sub>𝑡-1</sub>w<sub>ℎℎ</sub>+ 𝑏ℎ) = tanh([-0.1 0.1 -0.1] + [0.6 0.4 -2.2] + [0.2 0.0 -0.1])= tanh([ 0.7 0.5 -2.4 ] = [0.6 0.5 -1.0]刷新。</p>\n<p>在第四个时刻，e的独热码[0,0,0,0,1]输入，记忆体根据更新公式ℎ<sub>𝑡</sub> = tanh( 𝑥<sub>𝑡</sub> 𝑤<sub>𝑥ℎ</sub> + ℎ<sub>𝑡-1</sub>w<sub>ℎℎ</sub>+ 𝑏ℎ) = tanh([-1.2 -1.5 0.3] + [-1.3 -0.4 0.8] + [0.2 0.0 -0.1])= tanh([-2.3 -1.9 1.0] = [-1.0 -1.0 0.8]刷新。</p>\n<p>输出预测通过全连接完成，由下式求得最终输出：<br/> 𝑦<sub>𝑡 </sub>= softmax(ℎ<sub>𝑡</sub>w<sub>ℎ𝑦</sub>+ 𝑏𝑦)<br/> = softmax([3.3 1.2 0.9 0.3 −3.1]+ [−0.3 0.2 0.1 0.1 −0.3])<br/> = softmax ([3.0 1.4 1.0 0.4 −3.4])<br/> = [𝟎𝟎.𝟕𝟕𝟕 0.14 0.10 0.05 0.00 ]</p>\n<p>说明有71%的可能是字母a。观察输出结果，模型不仅成功预测出了下一个字母是a，还可以从神经网络输出的概率发现：因为输入序列的最后一个字母是e，所以模型理应也确实认为下一个字母还是e的可能性最小，可能性最大的是a，其次分别是b、c、d</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> tensorflow <span class=\"token keyword\">as</span> tf\n<span class=\"token keyword\">from</span> tensorflow<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers <span class=\"token keyword\">import</span> Dense<span class=\"token punctuation\">,</span> SimpleRNN\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token keyword\">import</span> os\n<span class=\"token comment\"># 由于fit没有给出测试集，不计算测试集准确率，根据loss，保存最优模型</span>\ninput_word <span class=\"token operator\">=</span> <span class=\"token string\">\"abcde\"</span>\nw_to_id <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span> <span class=\"token comment\"># 单词映射到数值id的词典</span>\nid_to_onehot <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>  <span class=\"token comment\"># id编码为one-hot</span>\n\nx_train <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span>id_to_onehot<span class=\"token punctuation\">[</span>w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id_to_onehot<span class=\"token punctuation\">[</span>w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id_to_onehot<span class=\"token punctuation\">[</span>w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id_to_onehot<span class=\"token punctuation\">[</span>w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>id_to_onehot<span class=\"token punctuation\">[</span>w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id_to_onehot<span class=\"token punctuation\">[</span>w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id_to_onehot<span class=\"token punctuation\">[</span>w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id_to_onehot<span class=\"token punctuation\">[</span>w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>id_to_onehot<span class=\"token punctuation\">[</span>w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id_to_onehot<span class=\"token punctuation\">[</span>w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id_to_onehot<span class=\"token punctuation\">[</span>w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id_to_onehot<span class=\"token punctuation\">[</span>w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>id_to_onehot<span class=\"token punctuation\">[</span>w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id_to_onehot<span class=\"token punctuation\">[</span>w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id_to_onehot<span class=\"token punctuation\">[</span>w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id_to_onehot<span class=\"token punctuation\">[</span>w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>id_to_onehot<span class=\"token punctuation\">[</span>w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id_to_onehot<span class=\"token punctuation\">[</span>w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id_to_onehot<span class=\"token punctuation\">[</span>w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id_to_onehot<span class=\"token punctuation\">[</span>w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\ny_train <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> w_to_id<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\nnp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\nnp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>shuffle<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">)</span>\nnp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\nnp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>shuffle<span class=\"token punctuation\">(</span>y_train<span class=\"token punctuation\">)</span>\ntf<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>set_seed<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 使x_train符合SimpleRNN输入要求：[送入样本数， 循环核时间展开步数， 每个时间步输入特征个数]。</span>\n<span class=\"token comment\"># 此处整个数据集送入，送入样本数为len(x_train)；</span>\n<span class=\"token comment\"># 输入1个字母出结果，循环核时间展开步数为1; 表示为独热码有5个输入特征，每个时间步输入特征个数为5</span>\n\nx_train <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ny_train <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>y_train<span class=\"token punctuation\">)</span>\n\nmodel <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    SimpleRNN<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    Dense<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'softmax'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nnp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\nnp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>shuffle<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">)</span>\nnp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\nnp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>shuffle<span class=\"token punctuation\">(</span>y_train<span class=\"token punctuation\">)</span>\ntf<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>set_seed<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 使x_train符合SimpleRNN输入要求：[送入样本数， 循环核时间展开步数， 每个时间步输入特征个数]。</span>\n<span class=\"token comment\"># 此处整个数据集送入，送入样本数为len(x_train)；</span>\n<span class=\"token comment\"># 输入1个字母出结果，循环核时间展开步数为1; 表示为独热码有5个输入特征，每个时间步输入特征个数为5</span>\n\nx_train <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ny_train <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>y_train<span class=\"token punctuation\">)</span>\n\nmodel <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    SimpleRNN<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    Dense<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'softmax'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>optimizer <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>optimizers<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span><span class=\"token number\">0.01</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>losses<span class=\"token punctuation\">.</span>SparseCategoricalCrossentropy<span class=\"token punctuation\">(</span>from_logits<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            metrics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'sparse_categorical_accuracy'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span>\ncheckpoint_save_path <span class=\"token operator\">=</span> <span class=\"token string\">'./checkpoint/rnn_onehot_1pre1.ckpt'</span>\n<span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span>checkpoint_save_path <span class=\"token operator\">+</span> <span class=\"token string\">'.index'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-------------load the model-----------------'</span><span class=\"token punctuation\">)</span>\n    model<span class=\"token punctuation\">.</span>load_weights<span class=\"token punctuation\">(</span>checkpoint_save_path<span class=\"token punctuation\">)</span>\n\n\ncp_callback <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>callbacks<span class=\"token punctuation\">.</span>ModelCheckpoint<span class=\"token punctuation\">(</span>filepath <span class=\"token operator\">=</span> checkpoint_save_path<span class=\"token punctuation\">,</span>\n                                                save_weights_only<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n                                                save_best_only<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n                                                <span class=\"token comment\"># 由于fit没有给出测试集，不计算测试集准确率，根据loss，保存最优模型</span>\n                                                monitor <span class=\"token operator\">=</span> <span class=\"token string\">'loss'</span>\n<span class=\"token punctuation\">)</span><span class=\"token comment\"># 由于fit没有给出测试集，不计算测试集准确率，根据loss，保存最优模</span>\n\n\nhistory <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> epochs<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> callbacks<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>cp_callback<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>summary<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># print(model.trainable_variables)</span>\n<span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./weights.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 参数提取</span>\n<span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> model<span class=\"token punctuation\">.</span>trainable_variables<span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">###############################################    show   ###############################################</span>\n\n<span class=\"token comment\"># 显示训练集和验证集的acc和loss曲线</span>\nacc <span class=\"token operator\">=</span> history<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">[</span><span class=\"token string\">'sparse_categorical_accuracy'</span><span class=\"token punctuation\">]</span>\nloss <span class=\"token operator\">=</span> history<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">[</span><span class=\"token string\">'loss'</span><span class=\"token punctuation\">]</span>\n\nplt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'Training Accuracy'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Training Accuracy'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nplt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>loss<span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'Training Loss'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Training Loss'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\npreNum <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input the number of test alphabet: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>preNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    alphabet1 <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input test alphabet: \"</span><span class=\"token punctuation\">)</span>\n    alphabet <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>id_to_onehot<span class=\"token punctuation\">[</span>w_to_id<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> a <span class=\"token keyword\">in</span> alphabet1<span class=\"token punctuation\">]</span>\n    <span class=\"token comment\"># 使alphabet符合SimpleRNN输入要求：[送入样本数， 循环核时间展开步数， 每个时间步输入特征个数]。此处验证效果送入了1个样本，送入样本数为1；</span>\n    <span class=\"token comment\"># 输入1个字母出结果，所以循环核时间展开步数为1; 表示为独热码有5个输入特征，每个时间步输入特征个数为5</span>\n    alphabet <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>alphabet<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>alphabet<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    pred <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    pred <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">)</span>\n    tf<span class=\"token punctuation\">.</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>alphabet1 <span class=\"token operator\">+</span> <span class=\"token string\">'-&gt;'</span> <span class=\"token operator\">+</span> input_word<span class=\"token punctuation\">[</span>pred<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1c945d1ccddd4662931aba1b096e543f.png\"/></p>\n<p>其中keypoint:</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\99d73c0beaca401d91da12fe8820c142.png\"/></p>\n<p>如图所示，浅蓝色框框住的区域为与p15_rnn_onehot_1pre1.py不同的地方,即x_train、y_train变成了四个字母预测一个字母的形式(输入连续的 abcd对应的标签是e、输入连续的bcde对应的标签是a、依此类推)。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4cf73d5105a1457da2259222c82b4b35.png\"/><br/> 如图1.2.19所示，与p15_rnn_onehot_1pre1.py不同，这里的循环核展开步数为4<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\24d98e048a5849598f5b1d8bba1dee8f.png\"/></p>\n<h3><a id=\"28_Embedding__324\"></a>2.8 Embedding 编码实现预测</h3>\n<ul><li>为什么使用Embedding?</li></ul>\n<p><strong>独热码：数据量大、过于稀疏、映射之间是独立的，没有表现出关联性<br/> Embedding：是一种单词编码方法，用低维度向量实现了编码，这种编码通过神经网络训练优化，能表达出单词间的关联性</strong></p>\n<ul><li>Tensorflow2中的词向量空间编码层：</li></ul>\n<p>tf.keras.layers.Embedding(词汇表大小， 编码维度)</p>\n<pre><code>词汇表大小：编码一共要表示多少个单词；\n\n编码维度：用几个数字表达一个单词；\n\n输入维度：二维张量[送入样本数，循环核时间展开步数]\n\n输出维度：三维张量[送入样本数，循环核时间展开步数，编码维度]\n\n例 ：tf.keras.layers.Embedding(100, 3)。对数字1-100进行编码，词汇表大小就是100 ；每个自然数用三个数字表示，编码维度就是3；\n 所以Embedding层的参数是100和3。比如数字[4] embedding为 [0.25, 0.1, 0.11]。\n</code></pre>\n<ul><li>Embedding实现1pre1:<br/> 如图1.2.14所示，浅蓝色框框住的区域为与独热编码不同的地方。不同是因为需要把输入特征变成Embedding层期待的形状：第一个维度是送入样本数、第二个维度是循环核时间展开步数。</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0d62fd6216a4464bbe477579dda02b13.png\"/></p>\n<p>如图1.2.15所示，在模型部分相比于独热编码形式多了一个Embedding层对输入数据进行编码，这一层会生成一个五行两列的可训练参数矩阵，实现编码可训练。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f01e88171f0448d4a4464f0432882775.png\"/><br/> 参数提取和acc/loss可视化和p15_rnn_onehot_1pre1.py代码完全一样。在结果预测时，如图1.2.16所示，只需要将读到的输入字母直接查找表示它的ID值，然后调整为Embedding层希望的形状输入网络进行预测即可。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a8220c9325f54560aebb0bfede9a7be8.png\"/></p>\n<ul><li>用Embedding编码的方式实现4pre1:</li></ul>\n<p>这次将词汇量扩充到26个(即字母从a到z)。如图1.2.22所示，首先建立一个映射表，把字母用数字表示为0到25；然后建立两个空列表，一个用于存放训练用的输入特征x_train，另一个用于存放训练用的标签y_train；接下来用for循环从数字列表中把连续4个数作为输入特征添加到x_train中，第5个数作为标签添加到y_train中，这就构建了训练用的输入特征x_train和标签y_train。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0272ec89eaf14c2e87b2f29997baeb82.png\"/></p>\n<p>如图1.2.23，把输入特征变成Embedding层期待的形状才能输入网络；在sequntial搭建网络时，相比于one_hot形式增加了一层Embedding层，先对输入数据进行编码，这里的26表示词汇量是26，这里的2表示每个单词用2个数值编码，这一层会生成一个26行2列的可训练参数矩阵，实现编码可训练。随后设定具有十个记忆体的循环层和一个全连接层（输出会是 26个字母之一，所以这里是26）；后边进行compile、fit、summary、参数提取和acc/loss可视化 和p21_rnn_onehot_4pre1.py代码完全一样。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e790ea50f1f8403fae174d02347556a4.png\"/><br/> 在验证环节，如图1.2.24所示，同样使用了for循环先输入要执行几次检测，随后等待连续输入四个字母，待输入结束后把它们转换为Embedding层希望的形状，然后输入网络进行预测，选出预测结果最大的一个。运行结果如图1.2.25所示。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\560899837525418cb29c3d56d5b00964.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bb895a0f48044aad9935e33f52804a16.png\"/></p>\n<h3><a id=\"29_RNN_367\"></a>2.9 RNN实现股票预测</h3>\n<p>(1)数据源<br/> SH600519.csv是用tushare模块下载的SH600519贵州茅台的日k线数据，本次例子中只用它的C列数据(如图1.2.26所示)：用连续60天的开盘价，预测第61天的开盘价。这个excel表格是使用源码p37_tushare.py(如图1.2.27)直接下载的真实数据，可以在这里写出我们需要的六位股票代码，下载需要的股票历史数据。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\965a35e20c2f40a6b005d93f1ef71262.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\074a21de90df4dc08b8083decf104186.png\"/><br/> (2)代码实现<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8980d94d80cb43f7a15788588badc404.png\"/><br/> 按照六步法： import相关模块读取贵州茅台日k线数据到变量maotai，把变量maotai中前2126天数据中的开盘价作为训练数据，把变量maotai中后300天数据中的开盘价作为测试数据；然后对开盘价进行归一化，使送入神经网络的数据分布在0到1之间；接下来建立空列表分别用于接收训练集输入特征、训练集标签、测试集输入特征、测试集标签；</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\21d0a19b8b4b4dcb88dd6a7e8bb14424.png\"/><br/> 继续构造数据。用for循环遍历整个训练数据，每连续60天数据作为输入特征x_train，第61天数据作为对应的标签y_train ，一共生成2066组训练数据，然后打乱训练数据的顺序并转变为array格式继而转变为RNN输入要求的维度；同理，利用for循环遍历整个测试数据，一共生成240组测试数据，测试集不需要打乱顺序，但需转变为array格式继而转变为RNN输入要求的维度。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2543a9cd01c2467eb7ef0ff02c1eabdc.png\"/><br/> 如图1.2.30所示，用sequntial搭建神经网络：第一层循环计算层记忆体设定80个，每个时间步推送h𝑡𝑡给下一层，使用0.2的Dropout；第二层循环计算层设定记忆体有100个，仅最后的时间步推送h𝑡𝑡给下一层，使用0.2的Dropout；<br/> 由于输出值是第61天的开盘价只有一个数，所以全连接Dense是1-&gt;compile配置训练方法使用adam优化器，使用均方误差损失函数。在股票预测代码中，只需观测loss，训练迭代打印的时候也只打印loss，所以这里就无需给metrics赋值-&gt;设置断点续训,fit执行训练过程-&gt;summary打印出网络结构和参数统计。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2ca435178ef44625bdee1341d1633d0c.png\"/><br/> 进行股票预测。用predict预测测试集数据，然后将预测值和真实值从归一化的数值变换到真实数值，最后用红色线画出真实值曲线 、用蓝色线画出预测值曲线</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0a3b50a9e8d94421a1354565e0d454ad.png\"/>为了评价模型优劣，给出了三个评判指标：均方误差、均方根误差和平均绝对误差，这些误差越小说明预测的数值与真实值越接近。</p>\n<p>图1.2.34为loss值曲线、图1.2.35为股票预测曲线、图1.2.36为三个评价指标值。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bb556a2ed8c842e2b63ba56a2d306993.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9954ede9121b4e5a8cb4d2bd3094c68b.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20a812ba99504d4c976070e9c4d36d15.png\"/></p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#!/usr/bin/python</span>\n<span class=\"token comment\"># -*- coding: UTF-8 -*-</span>\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> tensorflow <span class=\"token keyword\">as</span> tf\n<span class=\"token keyword\">from</span> tensorflow<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers <span class=\"token keyword\">import</span> Dropout<span class=\"token punctuation\">,</span> Dense<span class=\"token punctuation\">,</span> SimpleRNN\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>preprocessing <span class=\"token keyword\">import</span> MinMaxScaler\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>metrics <span class=\"token keyword\">import</span> mean_squared_error<span class=\"token punctuation\">,</span> mean_absolute_error\n<span class=\"token keyword\">import</span> math\n\n\nmaotai <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'./SH600519.csv'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 前(2426-300=2126)天的开盘价作为训练集,表格从0开始计数，2:3 是提取[2:3)列，前闭后开,故提取出C列开盘价</span>\ntraining_set <span class=\"token operator\">=</span> maotai<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">2426</span><span class=\"token operator\">-</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>values\n\n<span class=\"token comment\"># 后300天的开盘价作为测试集</span>\ntest_set <span class=\"token operator\">=</span> maotai<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token number\">2426</span> <span class=\"token operator\">-</span> <span class=\"token number\">300</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>values\n\n<span class=\"token comment\"># 归一化</span>\nsc <span class=\"token operator\">=</span> MinMaxScaler<span class=\"token punctuation\">(</span>feature_range<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 定义归一化：归一化到(0，1)之间</span>\n<span class=\"token comment\"># 求得训练集的最大值，最小值这些训练集固有的属性，并在训练集上进行归一化</span>\ntraining_set_scaled <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>training_set<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 利用训练集的属性对测试集进行归一化</span>\ntest_set <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">(</span>test_set<span class=\"token punctuation\">)</span>\n\nx_train<span class=\"token punctuation\">,</span> y_train <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nx_test<span class=\"token punctuation\">,</span> y_test <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 测试集：csv表格中前2426-300=2126天数据</span>\n<span class=\"token comment\"># 利用for循环，遍历整个训练集，提取训练集中连续60天的开盘价作为输入特征x_train，第61天的数据作为标签，for循环共构建2426-300-60=2066组数据。</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>training_set_scaled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    x_train<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>training_set_scaled<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">60</span><span class=\"token punctuation\">:</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    y_train<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>training_set_scaled<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 对训练集进行打乱</span>\nnp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\nnp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>shuffle<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">)</span>\nnp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\nnp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>shuffle<span class=\"token punctuation\">(</span>y_train<span class=\"token punctuation\">)</span>\ntf<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>set_seed<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 将训练集由list格式变为array格式</span>\nx_train<span class=\"token punctuation\">,</span> y_train <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>y_train<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 使x_train符合RNN输入要求：[送入样本数， 循环核时间展开步数， 每个时间步输入特征个数]。</span>\n<span class=\"token comment\"># 此处整个数据集送入，送入样本数为x_train.shape[0]即2066组数据；输入60个开盘价，预测出第61天的开盘价，循环核时间展开步数为60; </span>\n<span class=\"token comment\"># 每个时间步送入的特征是某一天的开盘价，只有1个数据，故每个时间步输入特征个数为1</span>\nx_train <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 测试集：csv表格中后300天数据</span>\n<span class=\"token comment\"># 利用for循环，遍历整个测试集，提取测试集中连续60天的开盘价作为输入特征x_train，第61天的数据作为标签，for循环共构建300-60=240组数据。</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>test_set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    x_test<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>test_set<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">60</span><span class=\"token punctuation\">:</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    y_test<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>test_set<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 测试集变array并reshape为符合RNN输入要求：[送入样本数， 循环核时间展开步数， 每个时间步输入特征个数]</span>\nx_test<span class=\"token punctuation\">,</span> y_test <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>x_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">)</span>\nx_test <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>x_test<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x_test<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\nmodel <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    SimpleRNN<span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span> return_sequences<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    SimpleRNN<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    Dense<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nmodel<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>optimizer<span class=\"token operator\">=</span>tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>optimizers<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span><span class=\"token number\">0.001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n              loss<span class=\"token operator\">=</span><span class=\"token string\">'mean_squared_error'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 损失函数用均方误差</span>\n<span class=\"token comment\"># 该应用只观测loss数值，不观测准确率，所以删去metrics选项，一会在每个epoch迭代显示时只显示loss值</span>\n\ncheckpoint_save_path <span class=\"token operator\">=</span> <span class=\"token string\">\"./checkpoint/rnn_stock.ckpt\"</span>\n\n<span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span>checkpoint_save_path <span class=\"token operator\">+</span> <span class=\"token string\">'.index'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-------------load the model-----------------'</span><span class=\"token punctuation\">)</span>\n    model<span class=\"token punctuation\">.</span>load_weights<span class=\"token punctuation\">(</span>checkpoint_save_path<span class=\"token punctuation\">)</span>\n\ncp_callback <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>callbacks<span class=\"token punctuation\">.</span>ModelCheckpoint<span class=\"token punctuation\">(</span>filepath<span class=\"token operator\">=</span>checkpoint_save_path<span class=\"token punctuation\">,</span>\n                                                 save_weights_only<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n                                                 save_best_only<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n                                                 monitor<span class=\"token operator\">=</span><span class=\"token string\">'val_loss'</span><span class=\"token punctuation\">)</span>\n\nhistory <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> epochs<span class=\"token operator\">=</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> validation_data<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>x_test<span class=\"token punctuation\">,</span> y_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> validation_freq<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                    callbacks<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>cp_callback<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nmodel<span class=\"token punctuation\">.</span>summary<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./weights.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 参数提取</span>\n<span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> model<span class=\"token punctuation\">.</span>trainable_variables<span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nloss <span class=\"token operator\">=</span> history<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">[</span><span class=\"token string\">'loss'</span><span class=\"token punctuation\">]</span>\nval_loss <span class=\"token operator\">=</span> history<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">[</span><span class=\"token string\">'val_loss'</span><span class=\"token punctuation\">]</span>\n\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>loss<span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'Training Loss'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>val_loss<span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'Validation Loss'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Training and Validation Loss'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">################## predict ######################</span>\n<span class=\"token comment\"># 测试集输入模型进行预测</span>\npredicted_stock_price <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>x_test<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 对预测数据还原---从（0，1）反归一化到原始范围</span>\npredicted_stock_price <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>inverse_transform<span class=\"token punctuation\">(</span>predicted_stock_price<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 对真实数据进行还原---从（0，1）反归一化到原始范围</span>\nreal_stock_price <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>inverse_transform<span class=\"token punctuation\">(</span>test_set<span class=\"token punctuation\">[</span><span class=\"token number\">60</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 画出真实数据和预测数据的对比曲线</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>real_stock_price<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'MaoTai Stock Price'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>predicted_stock_price<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'Predicted MaoTai Stock Price'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'MaoTai Stock Price Prediction'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Time'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">'MaoTai Stock Price'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">##########evaluate##############</span>\n<span class=\"token comment\"># calculate MSE 均方误差 ---&gt; E[(预测值-真实值)^2] (预测值减真实值求平方后求均值)</span>\nmse <span class=\"token operator\">=</span> mean_squared_error<span class=\"token punctuation\">(</span>predicted_stock_price<span class=\"token punctuation\">,</span> real_stock_price<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># calculate RMSE 均方根误差---&gt;sqrt[MSE]    (对均方误差开方)</span>\nrmse <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>mean_squared_error<span class=\"token punctuation\">(</span>predicted_stock_price<span class=\"token punctuation\">,</span> real_stock_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># calculate MAE 平均绝对误差-----&gt;E[|预测值-真实值|](预测值减真实值求绝对值后求均值）</span>\nmae <span class=\"token operator\">=</span> mean_absolute_error<span class=\"token punctuation\">(</span>predicted_stock_price<span class=\"token punctuation\">,</span> real_stock_price<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'均方误差: %.6f'</span> <span class=\"token operator\">%</span>mse<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'均方根误差: %.6f'</span> <span class=\"token operator\">%</span>rmse<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'平均绝对误差: %.6f'</span> <span class=\"token operator\">%</span>mae<span class=\"token punctuation\">)</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-03 17:40:34", "summary": "循环神经网络一，循环神经网络，、卷积神经网络与循环神经网络简单对比、详解循环核：循环核按时间步展开循环计算层：向输出方向生长训练描述循环计算层循环计算过程之循环过程之编码实现预测实现股票预测本节目标："}