{"blogid": "117753463", "writerAge": "码龄2年", "writerBlogNum": "241", "writerCollect": "5433", "writerComment": "275", "writerFan": "1944", "writerGrade": "5级", "writerIntegral": "4076", "writerName": "半生瓜のblog", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_117753463.jpg", "writerRankTotal": "3968", "writerRankWeekly": "7896", "writerThumb": "736", "writerVisitNum": "273889", "blog_read_count": "24270", "blog_time": "已于 2022-05-09 17:48:33 修改", "blog_title": "【C++】如果你准备学习C++,并且有C语言的基础，我希望你能简单的过一遍知识点。", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atelier-sulphurpool-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<hr/>\n<p>相关视频——<a href=\"https://www.bilibili.com/video/BV1et411b73Z?p=1\">黑马程序员匠心之作|C++教程从0到1入门编程,学习编程不再难_哔哩哔哩_bilibili</a>（1-83）</p>\n<p>我的小站——<a href=\"http://doraemon2.xyz/\">半生瓜のblog</a></p>\n<p><strong>我知道这个视频早已经被很多人学习并且记录笔记，但是我还是想再过一遍前面的基础知识点，所以我这个笔记会非常的简洁，适合有C语言基础的小伙伴进行简单的基础知识复习，好尽快投入到C++的学习中。</strong></p>\n<hr/>\n<p>在基础知识部分，好像只有头文件的引用和输入输出函数发生了变化。</p>\n<p>头文件下加入using namespace std;</p>\n<p>#include&lt;stdio.h&gt;——&gt;#include&lt; iostream&gt;</p>\n<p>printf——&gt;cout</p>\n<p>scanf——&gt;cin</p>\n<p>C++有字符串类型string,这是C语言所不具备的。</p>\n<hr/>\n<p><strong>下面就让我们开始吧！</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/2021061020292681.gif#pic_center\"/></p>\n<p></p>\n<div class=\"toc\">\n<h3>C++基础</h3>\n<ul><li><ul><li><a href=\"#Hello_C_29\">Hello C++</a></li><li><ul><li><a href=\"#_31\">第一个程序</a></li><li><a href=\"#_44\">注释</a></li><li><a href=\"#_56\">变量</a></li><li><a href=\"#_67\">常量</a></li><li><a href=\"#_97\">关键字</a></li><li><a href=\"#_108\">标识符命名规则</a></li></ul>\n</li><li><a href=\"#_118\">数据类型</a></li><li><ul><li><a href=\"#_122\">整型</a></li><li><a href=\"#sizeof_131\">sizeof关键字</a></li><li><a href=\"#_154\">实型(浮点型)</a></li><li><a href=\"#_169\">字符型</a></li><li><a href=\"#_182\">转义字符</a></li><li><a href=\"#_195\">字符串</a></li><li><a href=\"#bool_225\">布尔类型bool</a></li><li><a href=\"#__242\">数据 输入</a></li></ul>\n</li><li><a href=\"#_258\">运算符</a></li><li><ul><li><a href=\"#_265\">算数运算符</a></li><li><a href=\"#_285\">赋值运算符</a></li><li><a href=\"#_297\">比较运算符</a></li><li><a href=\"#_312\">逻辑运算符</a></li></ul>\n</li><li><a href=\"#_332\">程序流程结构</a></li><li><ul><li><a href=\"#_340\">选择结构</a></li><li><ul><li><a href=\"#if_342\">if语句</a></li><li><a href=\"#_396\">三目运算符</a></li><li><a href=\"#switch_422\">switch语句</a></li></ul>\n</li><li><a href=\"#_441\">循环结构</a></li><li><ul><li><a href=\"#while_443\">while循环语句</a></li><li><ul><li><a href=\"#_455\">猜数字练习</a></li></ul>\n</li><li><a href=\"#dowhile_492\">do-while循环语句</a></li><li><ul><li><a href=\"#_506\">水仙花数练习</a></li></ul>\n</li><li><a href=\"#for_535\">for循环语句</a></li><li><a href=\"#_560\">敲桌子练习</a></li><li><ul><li><a href=\"#777_562\">是7的倍数、各位有7、十位有7</a></li></ul>\n</li><li><a href=\"#_581\">嵌套循环</a></li><li><ul><li><a href=\"#1010_585\">打印10*10的正方形</a></li><li><a href=\"#_603\">乘法口诀表练习</a></li></ul>\n</li><li><a href=\"#_623\">跳转语句</a></li><li><a href=\"#break_625\">break语句</a></li><li><a href=\"#continue_635\">continue语句</a></li><li><a href=\"#goto_639\">goto语句</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_652\">数组</a></li><li><ul><li><a href=\"#_654\">概述</a></li><li><a href=\"#_662\">一维数组</a></li><li><ul><li><a href=\"#_664\">定义</a></li><li><a href=\"#_672\">数组名的用途</a></li><li><a href=\"#_678\">输出最重的一只小猪的体重</a></li><li><a href=\"#_699\">数组元素逆置</a></li><li><a href=\"#_726\">冒泡排序</a></li></ul>\n</li><li><a href=\"#_769\">二维数组</a></li><li><ul><li><a href=\"#_784\">数组名</a></li><li><a href=\"#_789\">考试成绩统计练习</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_818\">函数</a></li><li><ul><li><a href=\"#_820\">概述</a></li><li><a href=\"#_826\">函数的定义</a></li><li><a href=\"#_841\">函数的调用</a></li><li><a href=\"#_847\">值传递</a></li><li><a href=\"#_852\">函数的常见样式</a></li><li><a href=\"#_856\">函数的声明</a></li><li><a href=\"#_872\">函数的分文件编写</a></li></ul>\n</li><li><a href=\"#_878\">指针</a></li><li><ul><li><a href=\"#_880\">概念</a></li><li><a href=\"#_887\">指针变量的定义和使用</a></li><li><a href=\"#_891\">指针所占内存空间</a></li><li><a href=\"#_895\">空指针</a></li><li><a href=\"#_907\">野指针</a></li><li><a href=\"#const_911\">const修饰指针</a></li><li><a href=\"#_928\">指针和数组</a></li><li><a href=\"#_937\">指针和函数</a></li><li><a href=\"#_943\">指针、数组、函数</a></li></ul>\n</li><li><a href=\"#_978\">结构体</a></li><li><ul><li><a href=\"#_980\">概念</a></li><li><a href=\"#_984\">定义和使用</a></li><li><a href=\"#_1009\">结构体数组</a></li><li><a href=\"#_1021\">结构体指针</a></li><li><a href=\"#_1033\">结构体嵌套结构体</a></li><li><a href=\"#_1039\">结构体做函数参数</a></li><li><a href=\"#const_1050\">结构体中const使用场景</a></li><li><a href=\"#_1061\">结构体案例</a></li></ul>\n</li><li><a href=\"#_1166\">通讯录</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"Hello_C_29\"></a>Hello C++</h2>\n<h3><a id=\"_31\"></a>第一个程序</h3>\n<pre><code class=\"prism language-c++\">#include &lt;iostream&gt;\nusing namespace std;\nint main(void)\n{\n\tcout &lt;&lt; \"Hellow world\" &lt;&lt; endl;\n\tsystem(\"pause\");\n\treturn 0;\n}\n</code></pre>\n<h3><a id=\"_44\"></a>注释</h3>\n<p>方便自己和他人阅读,不会被程序执行。</p>\n<pre><code class=\"prism language-c++\">//单行\n</code></pre>\n<pre><code class=\"prism language-c++\">/*多行注释*/\n</code></pre>\n<h3><a id=\"_56\"></a>变量</h3>\n<p><strong>作用</strong>:给一段指定的内存空间起名，方便操作这段内存。</p>\n<p><strong>语法</strong>:数据类型 变量名 = 初始值；</p>\n<pre><code class=\"prism language-c++\">int a = 10;\ncout &lt;&lt; \"a = \"&lt;&lt; a &lt;&lt; endl;\n</code></pre>\n<h3><a id=\"_67\"></a>常量</h3>\n<p><strong>作用</strong>：用于记录程序中不可更改的数据。</p>\n<p>C++定义常量的两种方法</p>\n<p>1.#define宏定义</p>\n<pre><code class=\"prism language-c++\">#define 常量名 常量值\n</code></pre>\n<p>通常在文件上方定义,表示一个常量。</p>\n<p>2.const修饰的变量</p>\n<pre><code class=\"prism language-c++\">const 数据类型 常量名 = 常量值\n</code></pre>\n<p>通常在变量定义之前加关键字const,修饰该变量为常量，不可修改。</p>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"prism language-c++\">#define day 7//是不可修改的值，一旦修改就会报错\n\nconst int month = 30;\n</code></pre>\n<h3><a id=\"_97\"></a>关键字</h3>\n<p><strong>作用</strong>:关键字是C++中预先保留的单词（标识符）</p>\n<p>在定义变量或常量的时候不要使用关键字。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210610203035775.png\"/></p>\n<p>来源（菜鸟教程——<a href=\"https://www.runoob.com/w3cnote/cpp-keyword-intro.html\">C++ 的关键字（保留字）完整介绍 | 菜鸟教程 (runoob.com)</a>）</p>\n<h3><a id=\"_108\"></a>标识符命名规则</h3>\n<p><strong>作用</strong>：C++规定给标识符(变量、常量)命名时，有一套自己的规则</p>\n<ul><li>标识符不能是关键字</li><li>标识符只能由字母、数字、下划线组成</li><li>第一个字符必须为字母或者下划线</li><li>标识符中字母区分大小写</li><li>(建议：给标识符命名的时候，争取做到见名知意，方便自己和他人阅读。)</li></ul>\n<h2><a id=\"_118\"></a>数据类型</h2>\n<p>C++规定在创建一个变量或者常量的时候，必须要指定出相应的数据类型，否则无法给该变量分配内存空间。</p>\n<h3><a id=\"_122\"></a>整型</h3>\n<p><strong>作用</strong>：整型变量表示的是整型类型的数据。</p>\n<p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于占用的内存空间不同。</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2021061020305058.png\"/></p>\n<h3><a id=\"sizeof_131\"></a>sizeof关键字</h3>\n<p><strong>作用</strong>：统计数据类型所占空间的大小。</p>\n<p><strong>语法</strong>：</p>\n<pre><code class=\"prism language-c++\">sizeof(数据类型/变量);\n</code></pre>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"prism language-c++\">#include &lt;iostream&gt;\nusing namespace std;\nint main(void)\n{\n\tcout &lt;&lt; \"int类型所占空间的大小是：\" &lt;&lt;sizeof(int)&lt;&lt; endl;\n\tsystem(\"pause\");\n\treturn 0;\n}\n</code></pre>\n<h3><a id=\"_154\"></a>实型(浮点型)</h3>\n<p><strong>作用</strong>：用于表示小数。</p>\n<p>浮点型分为两种-单精度float-双精度double。</p>\n<p>两者的区别在于有效数字的表示范围不一样。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210610203143466.png\"/></p>\n<pre><code class=\"prism language-c++\">float f1 = 3.14f;//编译器会默认把一个小数当做双精度//默认情况下输出一个小数会显示出6位有效数字//例如：下面这个f1只输出到6float f1 = 3.1234567f;\n</code></pre>\n<h3><a id=\"_169\"></a>字符型</h3>\n<p><strong>作用</strong>：字符型变量用于显示单个字符。</p>\n<p>语法：</p>\n<pre><code class=\"prism language-c++\">char sb = 'a';\n/*注意：显示字符型变量时用单引号括起来，不是双引号。单引号内只能有一个字符，不可以是字符串。*/\n</code></pre>\n<ul><li>C和C++中字符型变量只占1个字节。</li><li>字符型变量并不是把所有的字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元中。</li></ul>\n<h3><a id=\"_182\"></a>转义字符</h3>\n<p><strong>作用</strong>：用于表示一些不能显示出来的ASCII字符。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210610203227197.png\"/></p>\n<p>(图片来源——w3cschoolw3cschool<a href=\"http://c.biancheng.net/view/1769.html\">C语言转义字符 (biancheng.net)</a>)</p>\n<pre><code class=\"prism language-c++\">cout &lt;&lt; “hello world\\n”&lt;&lt; endl;\n</code></pre>\n<h3><a id=\"_195\"></a>字符串</h3>\n<p><strong>作用</strong>:用于表示一串字符串。</p>\n<p><strong>两种风格：</strong></p>\n<p>1.C风格字符串</p>\n<p>要用双引号括起来</p>\n<pre><code class=\"prism language-c++\">char 变量名[] = \"字符串值\";\n</code></pre>\n<pre><code class=\"prism language-c++\">char str1[] = \"hello world\";\n</code></pre>\n<p>2.C++风格字符串</p>\n<p>需要加入头文件#include </p>\n<pre><code class=\"prism language-c++\">string 变量名 = \"字符串值\";\n</code></pre>\n<pre><code class=\"prism language-c++\">string st2 = \"hellow world\";\n</code></pre>\n<h3><a id=\"bool_225\"></a>布尔类型bool</h3>\n<p><strong>作用</strong>:布尔类型数据代表真或假的值。</p>\n<p>bool类型只有两个值：</p>\n<ul><li>true——真（1）</li><li>false——假（0）</li></ul>\n<p><strong>bool类型占1个字节大小</strong></p>\n<p>示例：</p>\n<pre><code class=\"prism language-c++\">bool flag = true;\n</code></pre>\n<h3><a id=\"__242\"></a>数据 输入</h3>\n<p><strong>作用</strong>：用于从键盘获取数据</p>\n<p><strong>关键字</strong>：cin</p>\n<p><strong>语法</strong>：</p>\n<pre><code class=\"prism language-c++\">cin &gt;&gt; 变量\n</code></pre>\n<pre><code class=\"prism language-c++\">int a = 0;cin &gt;&gt;a;\n</code></pre>\n<h2><a id=\"_258\"></a>运算符</h2>\n<p><strong>作用</strong>:用于代码的运算。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2021061020330493.png\"/></p>\n<h3><a id=\"_265\"></a>算数运算符</h3>\n<p><strong>作用</strong>：用于处理四则运算</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210610203319646.png\"/></p>\n<pre><code class=\"prism language-c++\">+ - * / % ++ -- \n两个整数相除结果还是整数\n两个小数相除结构还是小数\n两个数相除除数不可以为0\n</code></pre>\n<pre><code class=\"prism language-c++\">\t前置递增++a——先让变量+1然后再进行表达式运算    \n\t后置递增a++——先进行表达式运算然后变量再+1    \n\t递减同理\n</code></pre>\n<h3><a id=\"_285\"></a>赋值运算符</h3>\n<p>**作用：**用于将表达式的值赋给变量。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210610203358530.png\"/></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"prism language-c++\">int a = 1;a *=2;//意思就是就是a = a *2;\n</code></pre>\n<h3><a id=\"_297\"></a>比较运算符</h3>\n<p>**作用：**用于表达式的比较，并返回一个真值或假值。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210610203424243.png\"/></p>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"prism language-c++\">\tint a = 4;\n\tint b = 3;\t\n\tcout &lt;&lt; (a &lt; b)&lt;&lt;endl;//真返回1，假0\n</code></pre>\n<h3><a id=\"_312\"></a>逻辑运算符</h3>\n<p><strong>作用</strong>：用于根据表达式的值返回真值或假值。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210610203442205.png\"/></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"prism language-c++\">int a = 9;\nint b = 10;\nint c = 0;\ncout&lt;&lt; !a &lt;&lt;endl;//0\ncout&lt;&lt; !!a &lt;&lt;endl;//1\ncout&lt;&lt; (a &amp;&amp; b) &lt;&lt;endl;//1\ncout&lt;&lt; (a &amp;&amp; c) &lt;&lt;endl;//0\ncout&lt;&lt; (a || c) &lt;&lt;endl;//1\n</code></pre>\n<h2><a id=\"_332\"></a>程序流程结构</h2>\n<p>C/C++支持最基本的三大基本程序运算结构:<strong>顺序结构、选择结构、循环结构。</strong></p>\n<ul><li>顺序结构：程序按顺序执行，不发生跳转。</li><li>选择结构：依据条件是否满足,有选择的执行相应代码。</li><li>循环结构：依据条件是否满足，循环多次指定某段代码。</li></ul>\n<h3><a id=\"_340\"></a>选择结构</h3>\n<h4><a id=\"if_342\"></a>if语句</h4>\n<p><strong>作用</strong>：执行满足条件的语句。</p>\n<ul><li>单行格式if语句</li></ul>\n<pre><code class=\"prism language-c++\">if(条件){\t//条件满足执行的语句}\n</code></pre>\n<ul><li>多行格式if语句</li></ul>\n<pre><code class=\"prism language-c++\">if(条件)\n{   \n //条件满足执行的语句\n}\nelse\n{    \n\t//条件不满足执行的语句\n}\n</code></pre>\n<ul><li>多条件if语句</li></ul>\n<pre><code class=\"prism language-c++\">if(条件1)\n{\n    //条件1满足执行的语句\n}\nelse if(条件2)\n{\n    //条件2满足执行的语句\n}\n......\nelse\n{\n    //都不满足执行的语句\n}\n</code></pre>\n<ul><li>嵌套if语句</li></ul>\n<pre><code class=\"prism language-c++\">if()\n{\n    if()\n}\nelse\n{\n    \n}\n</code></pre>\n<h4><a id=\"_396\"></a>三目运算符</h4>\n<p>**作用：**通过三目运算符实现简单的判断</p>\n<p><strong>语法：</strong></p>\n<pre><code class=\"prism language-c++\">表达式1？表达式2：表达式3\n</code></pre>\n<p><strong>解释：</strong></p>\n<p>如果1为真，则结果为表达式2的值。</p>\n<p>如果1为假，则结果为表达式3的值。</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"prism language-c++\">int a = 9;\nint b = 10;\nint c = 0;\nc = a &gt; b ? a : b;\ncout &lt;&lt; c &lt;&lt; endl;//结果为10\n</code></pre>\n<h4><a id=\"switch_422\"></a>switch语句</h4>\n<p>**作用：**执行多条件分支语句</p>\n<p><strong>语法：</strong></p>\n<pre><code class=\"prism language-c++\">switch(表达式)\n{\n        case 结果1：\n            执行语句;\n            break;\n        ......\n        default：\n            执行语句;\n        \tbreak;\n}\n</code></pre>\n<h3><a id=\"_441\"></a>循环结构</h3>\n<h4><a id=\"while_443\"></a>while循环语句</h4>\n<p><strong>作用</strong>:满足循环条件，执行循环语句</p>\n<p><strong>语法</strong>:</p>\n<pre><code class=\"prism language-c++\">while(循环条件){    循环语句}\n</code></pre>\n<p>**解释：**只要满足循环条件的结果为真，就执行循环语句。</p>\n<h5><a id=\"_455\"></a>猜数字练习</h5>\n<pre><code class=\"prism language-c++\">#include &lt;iostream&gt;\n#include&lt;string&gt;\nusing namespace std;\nint main(void)\n{\n\tint num = rand() % 100;\n\tcout &lt;&lt; num &lt;&lt; endl;\n\tint puT = 0;\n\tcout &lt;&lt; \"请你猜一下这个数是多少\\n\" &lt;&lt; endl;\n\twhile ((cin &gt;&gt; puT))\n\t{\n\t\tif (puT &gt; num)\n\t\t{\n\t\t\tcout &lt;&lt; \"猜大了\\n\" &lt;&lt; endl;\n\t\t}\n\t\telse if (puT &lt;= num / 2)\n\t\t{\n\t\t\tcout &lt;&lt; \"太小了\\n\" &lt;&lt; endl;\n\t\t}\n\t\telse if (puT &gt;= num / 2 &amp;&amp; puT &lt; num)\n\t\t{\n\t\t\tcout &lt;&lt; \"再大一点\\n\" &lt;&lt; endl;\n\t\t}\n\t\telse if (num == puT)\n\t\t{\n\t\t\tcout &lt;&lt; \"猜对了\\n\" &lt;&lt; endl;\n\t\t\tbreak;\n\t\t}\n\t}\n\tsystem(\"pause\");\n\treturn 0;\n}\n</code></pre>\n<h4><a id=\"dowhile_492\"></a>do-while循环语句</h4>\n<p>**作用：**满足循环条件，执行循环语句。</p>\n<p><strong>语法</strong>:</p>\n<pre><code class=\"prism language-c++\">do{    \n\t循环语句\n}while(循环条件)\n</code></pre>\n<p><strong>注意</strong>:与while的区别在于do-while会先执行一次循环语句，再判断循环条件。</p>\n<h5><a id=\"_506\"></a>水仙花数练习</h5>\n<pre><code class=\"prism language-c++\">#include &lt;iostream&gt;\nusing namespace std;\nint main(void)\n{\n\tint ge = 0;\n\tint shi = 0;\n\tint bai = 0;\n\tint i = 100;\n\tdo\n\t{\n\t\tge = i % 10;\n\t\tshi = (i / 10) % 10;\n\t\tbai = i / 100;\n\t\tif (i == ge * ge * ge + shi * shi * shi + bai * bai * bai)\n\t\t{\n\t\t\tcout &lt;&lt; i &lt;&lt; endl;\n\t\t}\n\t\ti++;\n\t} while (i &lt; 1000);\n\tsystem(\"pause\");\n\treturn 0;\n}\n</code></pre>\n<h4><a id=\"for_535\"></a>for循环语句</h4>\n<p><strong>作用</strong>:满足循环条件，执行循环语句</p>\n<p><strong>语法</strong>:</p>\n<pre><code class=\"prism language-c++\">for(起始条件;条件表达式;末尾循环体){    循环语句}\n</code></pre>\n<p><strong>示例：</strong></p>\n<pre><code class=\"prism language-c++\">#include&lt;iostream&gt;\nusing namespace std;\nint main(void)\n{    \n    for(int i = 0;i &lt; 10;i++)   \n    {    \n        \n    }    \n    return 0;\n}\n</code></pre>\n<h4><a id=\"_560\"></a>敲桌子练习</h4>\n<h5><a id=\"777_562\"></a>是7的倍数、各位有7、十位有7</h5>\n<pre><code class=\"prism language-c++\">#include&lt;iostream&gt;\nusing namespace std;\nint main(void)\n{\t\n    for (int i = 1; i &lt; 100; i++)\t\n    {\t\t\n        int ge = i % 10;\t\t\n        int shi = (i /10)% 10;\t\t\n        if (i % 7 == 0 || ge == 7 || shi == 7)\t\t\n        {\t\t\t\n            cout &lt;&lt; i &lt;&lt; endl;\t\t\n        }\t\n    }\n}\n</code></pre>\n<h4><a id=\"_581\"></a>嵌套循环</h4>\n<p><strong>作用</strong>:在循环体中再嵌套一层循环，解决一些实际问题。</p>\n<h5><a id=\"1010_585\"></a>打印10*10的正方形</h5>\n<pre><code class=\"prism language-c++\">#include&lt;iostream&gt;\nusing namespace std;\nint main(void)\n{\n\tfor (int i = 0; i &lt; 10; i++)\n\t{\n\t\tfor (int i = 0; i &lt; 10; i++)\n\t\t{\n\t\t\tcout &lt;&lt; \"* \";\n\t\t}\n\t\tcout &lt;&lt; endl;\n\t}\n}\n</code></pre>\n<h5><a id=\"_603\"></a>乘法口诀表练习</h5>\n<pre><code class=\"prism language-c++\">#include&lt;iostream&gt;\nusing namespace std;\nint main(void)\n{\t\n    for (int i = 1; i &lt; 10; i++)\t\n    {\t\t\t\n        for (int j = 1; j &lt;= i; j++)\t\t\n        {\t\t\t\n            cout &lt;&lt; i &lt;&lt;\"*\"&lt;&lt; j&lt;&lt;\"=\"&lt;&lt; i* j&lt;&lt;\" \";\t\t\n        }\t\t\n        cout &lt;&lt; endl;\t\n    }\n    system(\"pause\");\n    return 0;\n}\n</code></pre>\n<h4><a id=\"_623\"></a>跳转语句</h4>\n<h4><a id=\"break_625\"></a>break语句</h4>\n<p><strong>作用</strong>:用于跳出选择结构或者循环结构。</p>\n<p>break使用的时机：</p>\n<ul><li>出现在switch语句中，作用是终止case并跳出swtich</li><li>出现在循环语句中，作用是跳出当前的循环语句</li><li>出现在嵌套语句中，跳出最近的内层循环语句</li></ul>\n<h4><a id=\"continue_635\"></a>continue语句</h4>\n<p>作用：在循环语句中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环。</p>\n<h4><a id=\"goto_639\"></a>goto语句</h4>\n<p><strong>作用</strong>:可以无条件跳转语句</p>\n<p><strong>语法</strong>:goto标记；</p>\n<p>**解释：**如果标记的名称存在，执行到goto语句的时候，会跳转到标记的位置。</p>\n<pre><code class=\"prism language-c++\">goto sb;......\nsb:......\n</code></pre>\n<h2><a id=\"_652\"></a>数组</h2>\n<h3><a id=\"_654\"></a>概述</h3>\n<p>所谓数组就是一个集合，里面存放了相同类型的数据元素</p>\n<p><strong>特点1</strong>：数组中的每个数据元素都是相同的数据类型。</p>\n<p><strong>特点2</strong>：数组是由连续的内存位置组成的。</p>\n<h3><a id=\"_662\"></a>一维数组</h3>\n<h4><a id=\"_664\"></a>定义</h4>\n<pre><code class=\"prism language-c++\">数据类型 数组名[数组长度];\n数据类型 数组名[数组长度] = {值1，值2......};\n数据类型 数组名[] = {值1，值2......};;\n</code></pre>\n<h4><a id=\"_672\"></a>数组名的用途</h4>\n<p>1.可以统计整个数组在内存中的长度</p>\n<p>2.可以获取数组在内存中的首地址</p>\n<h4><a id=\"_678\"></a>输出最重的一只小猪的体重</h4>\n<pre><code class=\"prism language-c++\">#include&lt;iostream&gt;\nusing namespace std;\nint main(void)\n{\t\n    int temp = 0;\t\n    int Weight[5] = { 300,250,200,400,450 };\t\n    for (int i = 0; i &lt; 5; i++)\t\n    {\t\t\n        if (Weight[i] &gt; temp)\t\t\n        {\t\t\t\n            temp = Weight[i];\t\t\n        }\t\n    }\t\n    cout &lt;&lt; \"最重的小猪是\" &lt;&lt; temp &lt;&lt; \"kg\";\t\n    return 0;\n}\n</code></pre>\n<h4><a id=\"_699\"></a>数组元素逆置</h4>\n<pre><code class=\"prism language-c++\">#include&lt;iostream&gt;\nusing namespace std;\nint main(void)\n{ \t\n    int temp = 0;\t\n    nt nums[5] = { 1,2,3,4,5};\t\n    int start = 0;\t\n    int end = sizeof(nums)/sizeof(nums[0]) -1 ;\t\n    while (start &lt; end)\t\n    {\t\t\n        temp = nums[start];\t\t\n        nums[start] = nums[end];\t\t\n        nums[end] = temp;\t\t\n        end--;\t\t\n        start++;\t\n    }\t\n    for (int i = 0; i &lt; 5; i++)\n    {\t\t\n        cout &lt;&lt; nums[i];\t\n    }\t\n    return 0;\n}\n</code></pre>\n<h4><a id=\"_726\"></a>冒泡排序</h4>\n<p><strong>作用</strong>:最常用的排序算法，对数组内元素进行排序</p>\n<ol><li>比较相邻两个元素，如果第一个比第二个大就交换他们的位置</li><li>每一对相邻元素做同样的工作，整型完毕后，找到第一个最大值。</li><li>重复以上的步骤，每次比较次数-1，知道不需要比较</li></ol>\n<p><strong>示例</strong>:</p>\n<pre><code class=\"prism language-c++\">//排列这个数组{7,5,2,4,9,8,6,7,1}\n#include&lt;iostream&gt;\nusing namespace std;\nint main(void)\n{ \n\t//排序的总轮数=元素个数-1\n\t//每轮对比的次数 = 元素个数- 排序轮数 \n\tint nums[9] = { 7,5,2,4,9,8,6,7,1 };\n\tfor (int i = 0; i &lt; 8 ; i++)\n\t{\n\t\t//内层循环对比\n\t\tfor (int j = 0; j &lt; 9 - i-1; j++)\n\t\t{\n\t\t\t//第一个数比第二个数大就交换他们两个的位置\n\t\t\tint temp = 0;\n\t\t\tif (nums[j] &gt; nums[j + 1])\n\t\t\t{\n\t\t\t\ttemp = nums[j+1];\n\t\t\t\tnums[j + 1] = nums[j];\n\t\t\t\tnums[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i &lt; 9; i++)\n\t{\n\t\tcout &lt;&lt; nums[i];\n\t}\n\treturn 0;\n}\n\n</code></pre>\n<h3><a id=\"_769\"></a>二维数组</h3>\n<p>二维数组就是在一维数组的基础上多加一个维度，就是在一维数组里面存储一维数组。</p>\n<p><strong>定义:</strong></p>\n<pre><code class=\"prism language-c++\">数据类型 数组名[行][列];\n数据类型 数组名[行][列] = {<!-- -->{数据1，数据2}，{数据3，数据4}};\n数据类型 数组名[行][列] = {数据1，数据2，数据3，数据4};\n数据类型 数组名[][列] = {数据1，数据2，数据3，数据4};\n</code></pre>\n<p><strong>建议</strong>:以上4种定义方式，利用第二种更加直观，提高代码的可读性。</p>\n<h4><a id=\"_784\"></a>数组名</h4>\n<ul><li>查看二维数组所占内存空间</li><li>获取二维数组首地址</li></ul>\n<h4><a id=\"_789\"></a>考试成绩统计练习</h4>\n<table><thead><tr><th></th><th>语文</th><th>数学</th><th>英语</th></tr></thead><tbody><tr><td>甲</td><td>50</td><td>40</td><td>60</td></tr><tr><td>乙</td><td>20</td><td>10</td><td>30</td></tr><tr><td>丙</td><td>70</td><td>80</td><td>90</td></tr></tbody></table>\n<p>分别输出三个人的总成绩</p>\n<pre><code class=\"prism language-c++\">#include&lt;iostream&gt;\nusing namespace std;\nint main(void)\n{\t\n    int score[3][3] = { {60,50,40},{10,20,30},{70,80,90} };\t\n    //嵌套循环解决\t\n    for (int i = 0; i &lt; 3; i++)\n    {\t\t\t\n        int temp = 0;\t\n        for (int j = 0; j &lt; 3; j++)\t\t\n        {\t\t\t\n            temp += score[i][j];\t\t\t\n        }\t\t\n        cout &lt;&lt; temp &lt;&lt; endl;\t\n    }\n}\n</code></pre>\n<h2><a id=\"_818\"></a>函数</h2>\n<h3><a id=\"_820\"></a>概述</h3>\n<p><strong>作用</strong>:将一段经常使用的代码封装起来，减少重复代码。</p>\n<p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p>\n<h3><a id=\"_826\"></a>函数的定义</h3>\n<p>函数的几个要素<br/> 返回值类型，函数名 ，参数，函数体语句，return表达式</p>\n<p><strong>语法：</strong></p>\n<pre><code class=\"prism language-c++\">返回值类型 函数名(参数列表)\n{    \n\t函数语句;    \n\treturn 表达式;\n}\n</code></pre>\n<h3><a id=\"_841\"></a>函数的调用</h3>\n<p><strong>功能</strong>：使用定义好的函数</p>\n<p><strong>语法</strong>:函数名(参数)</p>\n<h3><a id=\"_847\"></a>值传递</h3>\n<ul><li>就是函数调用时将参数值传给形参</li><li>值传递时，如果形参发生变化，并不会影响到实参</li></ul>\n<h3><a id=\"_852\"></a>函数的常见样式</h3>\n<p>无参无返、有参无返、无参有返、有参有返</p>\n<h3><a id=\"_856\"></a>函数的声明</h3>\n<p><strong>作用</strong>：告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p>\n<p>函数的声明可以有很多次，定义只能有一次。</p>\n<pre><code class=\"prism language-c++\">//声明\nint max(int a,int b);\n//定义\nint max(int a ,int b)\n{\n    return a+b;\n}\n</code></pre>\n<h3><a id=\"_872\"></a>函数的分文件编写</h3>\n<p><strong>作用</strong>:让代码结构更加清晰</p>\n<p>就是在.h的头文件里面放函数声明，函数的定义放到.c文件里</p>\n<h2><a id=\"_878\"></a>指针</h2>\n<h3><a id=\"_880\"></a>概念</h3>\n<p>指针的作用:可以通过指针间接访问内存。</p>\n<ul><li>内存编号是从0开始记录的，一般用16进制数字标识。</li><li>可以利用指针变量保存地址。</li></ul>\n<h3><a id=\"_887\"></a>指针变量的定义和使用</h3>\n<p><strong>指针变量定义语法</strong>：数据类型+变量名</p>\n<h3><a id=\"_891\"></a>指针所占内存空间</h3>\n<p>在32位操作系统下无论是什么类型的指针，都占4个字节的内存空间。</p>\n<h3><a id=\"_895\"></a>空指针</h3>\n<p><strong>空指针</strong>:指针变量指向内存中编号为0的空间</p>\n<p><strong>用途</strong>:初始化指针变量</p>\n<p><strong>注意</strong>:空指针指向的内存空间是不可以访问的</p>\n<pre><code class=\"prism language-c++\">int* p = NULL;\n</code></pre>\n<h3><a id=\"_907\"></a>野指针</h3>\n<p>指针变量指向非法的内存空间。</p>\n<h3><a id=\"const_911\"></a>const修饰指针</h3>\n<p>const修饰指针有3种情况</p>\n<ol><li>const修饰指针—常量指针</li><li>const修饰常量—指针常量</li><li>const既修饰指针，又修饰常量、</li></ol>\n<pre><code class=\"prism language-c++\">const修饰的是指针，指针指向可以改，指针指向的值不可以改\n    const int* p1 = &amp;a;\nconst修饰的是常量，指针指向不可以改，指针指向的值可以更改\n    int* const p2 = &amp;a;\nconst既修饰指针，又修饰常量，指针的指向和指针指向的值都不可以改变\n    const int* const p = &amp;a;\n</code></pre>\n<h3><a id=\"_928\"></a>指针和数组</h3>\n<p><strong>作用</strong>:利用指针访问数组元素</p>\n<pre><code class=\"prism language-c++\">int arr[] = {1,2,3,4};\nint* p = arr;\n</code></pre>\n<h3><a id=\"_937\"></a>指针和函数</h3>\n<p><strong>作用</strong>:利用指针作函数的参数，可以修改实参的值。</p>\n<p>——<strong>传(址)引用</strong></p>\n<h3><a id=\"_943\"></a>指针、数组、函数</h3>\n<p>封装一个函数，利用冒泡排序，实现对整型数组的升序排列</p>\n<pre><code class=\"prism language-c++\">#include&lt;iostream&gt;\nusing namespace std;\nvoid PopSort(int* a,int len)\n{\n\tfor (int i = 0; i &lt; len - 1; i++)\n\t{\n\t\tfor (int j = 0; j &lt; len-i - 1; j++)\n\t\t{\n\t\t\tint temp = 0;\n\t\t\tif (a[j] &gt; a[j + 1])\n\t\t\t{\n\t\t\t\ttemp = a[j];\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t\ta[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n}\nint main(void)\n{\t\n\tint arry[5] = { 6,2,4,8,5 };\n\tPopSort(arry, 5);\n\tfor (int i = 0; i &lt; 5; i++)\n\t{\n\t\tcout &lt;&lt; arry[i];\n\t}\n\treturn 0;\n}\n</code></pre>\n<h2><a id=\"_978\"></a>结构体</h2>\n<h3><a id=\"_980\"></a>概念</h3>\n<p>​ 结构体属于用户自定义的数据类型，允许用户存储不同的数据类型。</p>\n<h3><a id=\"_984\"></a>定义和使用</h3>\n<p><strong>语法</strong>：</p>\n<pre><code class=\"prism language-c++\">struct 结构体名称{    结构体成员列表};\n</code></pre>\n<p>通过结构体创建变量的方式有三种</p>\n<ul><li>struct 结构体名 变量名</li><li>struct 结构体名 变量名 = （成员1值，成员2值…)</li><li>定义结构体时顺便创建变量</li></ul>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"prism language-c++\">struct Student\n{  \n\tstring name;  \n\tint age;  \n\tint score;\n};\n</code></pre>\n<h3><a id=\"_1009\"></a>结构体数组</h3>\n<p><strong>作用</strong>:将自定义的结构头放入到数组中方便维护</p>\n<p><strong>语法</strong>:</p>\n<pre><code class=\"prism language-c++\">struct 结构体名 数组名[元素个数]=  {<!-- -->{}，{}...{}};\n</code></pre>\n<h3><a id=\"_1021\"></a>结构体指针</h3>\n<p><strong>作用</strong>：通过指针访问结构体中的成员</p>\n<p>利用操作符-&gt;可以通过结构体指针访问结构体属性</p>\n<pre><code class=\"prism language-c++\">struct Student s1;\nstruct Student* p = &amp;s1;\np-&gt;score = 10;\n</code></pre>\n<h3><a id=\"_1033\"></a>结构体嵌套结构体</h3>\n<p><strong>作用</strong>：结构体中的成员可以是另一个结构体</p>\n<p><strong>例如</strong>:每个老师辅导一个学员，一个老师的结构体中，记录一个学生的的结构体</p>\n<h3><a id=\"_1039\"></a>结构体做函数参数</h3>\n<p><strong>作用</strong>:将结构体作为参数向函数中传递</p>\n<p>传递方式有两种</p>\n<p>同上函数参数-指针</p>\n<ul><li>值传递-无法改变实参</li><li>地址传递-可以改变实参</li></ul>\n<h3><a id=\"const_1050\"></a>结构体中const使用场景</h3>\n<p><strong>作用</strong>：用const来防止误操作</p>\n<pre><code class=\"prism language-c++\">void ChangeInformation(const struct student* stu1)\n{\n    加了const就无法改变该结构体内的信息\n}\n</code></pre>\n<h3><a id=\"_1061\"></a>结构体案例</h3>\n<p>每个老师带三个学生</p>\n<pre><code class=\"prism language-c++\">#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;ctime&gt;\nusing namespace std;\nstruct Student\n{\n\tstring name;\n\tint age;\n\tint score;\n};\nstruct Teacher\n{\n\tstring name;\n\tstruct Student sArry[5];\n};\nvoid inPutInformation(struct Teacher tArry[], int len)\n{\n\tstring Name = \"ABCDE\";\n\tfor (int i = 0; i &lt; len; i++)\n\t{\n\t\ttArry[i].name = \"Teacher_\";\n\t\ttArry[i].name += Name[i];\n\t\tfor (int j = 0; j &lt; 5; j++)\n\t\t{\n\t\t\ttArry[i].sArry[j].name = \"Student_\";\n\t\t\ttArry[i].sArry[j].name += Name[j];\n\t\t\tint random = rand()% 60 +40;\n\t\t\ttArry[i].sArry[j].score = random;\n\t\t}\n\t}\n}\nvoid printInformation(struct Teacher tArry[],int len)\n{\n\tfor (int i = 0; i &lt; len; i++)\n\t{\n\t\tcout &lt;&lt; \"老师的姓名：\" &lt;&lt; tArry[i].name &lt;&lt; endl;\n\t\tfor (int j = 0; j &lt; 5; j++)\n\t\t{\n\t\t\tcout &lt;&lt; \"\\t学生的姓名：\" &lt;&lt; tArry[i].sArry[j].name &lt;&lt; \"考试分数：\" &lt;&lt; tArry[i].sArry[j].score &lt;&lt; endl;\n\t\t}\n\t}\n}\nint main(void)\n{\t\n\tsrand((unsigned int)time(NULL));\n\tstruct Teacher tArry[3];\n\tint len = sizeof(tArry) / sizeof(tArry[0]);\n\tinPutInformation(tArry,len);\n\tprintInformation(tArry,len);\n\tsystem(\"pause\");\n\treturn 0;\n}\n</code></pre>\n<p>创建5个人并按年龄排序</p>\n<pre><code class=\"prism language-c++\">#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;ctime&gt;\nusing namespace std;\nstruct Hero\n{\n\tstring name;\n\tint age;\n\tstring categories;\n};\nint main(void)\n{\t\n\tstruct Hero heroArry[5] =\n\t{\n\t\t{\"欣南\",20,\"火\"},\n\t\t{\"东杉\",24,\"木\"},\n\t\t{\"北淼\",23,\"水\"},\n\t\t{\"坤中\",18,\"土\"},\n\t\t{\"西昭\",22,\"金\"},\n\t};\n\tint len = sizeof(heroArry) / sizeof(heroArry[0]);\n\tfor (int i = 0; i &lt; len - 1; i++)\n\t{\n\t\tfor (int j = 0; j &lt; len - 1 - i; j++)\n\t\t{\n\t\t\tint temp = 0;\n\t\t\tif (heroArry[j].age &gt; heroArry[j + 1].age)\n\t\t\t{\n\t\t\t\ttemp = heroArry[j].age;\n\t\t\t\theroArry[j].age = heroArry[j + 1].age;\n\t\t\t\theroArry[j + 1].age = temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i &lt;len; i++)\n\t{\n\t\tcout &lt;&lt; heroArry[i].name &lt;&lt; heroArry[i].age &lt;&lt; heroArry[i].categories &lt;&lt; endl;\n\t}\n\tsystem(\"pause\");\n\treturn 0;\n}\n</code></pre>\n<h2><a id=\"_1166\"></a>通讯录</h2>\n<pre><code class=\"prism language-c++\">#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;cstdlib&gt;\n#define MAX 1000\nusing namespace std;\nstruct Person\n{\n\tstring name;\n\tint age;\n\tstring sex;\n\tstring phone;\n\tstring addr;\n};\nstruct addreassbooks\n{\n\tstruct Person personarry[MAX];\n\tint m_Size;\n};\nvoid mainMenu()\n{\n\tcout &lt;&lt; \"--------------------\" &lt;&lt; endl;\n\tcout&lt;&lt;\"1.增加联系人\" &lt;&lt; endl;\n\tcout&lt;&lt;\"2.显示联系人\" &lt;&lt; endl;\n\tcout&lt;&lt;\"3.删除联系人\" &lt;&lt; endl;\n\tcout&lt;&lt;\"4.查找联系人\" &lt;&lt; endl;\n\tcout&lt;&lt;\"5.修改联系人\" &lt;&lt; endl;\n\tcout&lt;&lt;\"6.清空联系人\" &lt;&lt; endl;\n\tcout&lt;&lt;\"0.退出通讯录\" &lt;&lt; endl;\n\tcout &lt;&lt; \"--------------------\" &lt;&lt; endl;\n}\nvoid addPerson(addreassbooks* abs)\n{\n\tif (abs-&gt;m_Size == MAX)\n\t{\t\n\t\tcout &lt;&lt; \"联系人已满，无法添加\" &lt;&lt; endl;\n\t\treturn;\n\t}\n\tstring name;\n\tcout &lt;&lt; \"请输入姓名\" &lt;&lt; endl;\n\tcin &gt;&gt; name;\n\tabs-&gt;personarry[abs-&gt;m_Size].name = name;\n\tstring sex;\n\tcout &lt;&lt; \"请输入性别\" &lt;&lt; endl;\n\tcin &gt;&gt; sex;\n\tabs-&gt;personarry[abs-&gt;m_Size].sex = sex;\n\tint age;\n\tcout &lt;&lt; \"请输入年龄\" &lt;&lt; endl;\n\tcin &gt;&gt; age;\n\tabs-&gt;personarry[abs-&gt;m_Size].age = age;\n\tstring phone;\n\tcout &lt;&lt; \"请输入电话\" &lt;&lt; endl;\n\tcin &gt;&gt; phone;\n\tabs-&gt;personarry[abs-&gt;m_Size].phone = phone;\n\tstring addr;\n\tcout &lt;&lt; \"请输入地址\" &lt;&lt; endl;\n\tcin &gt;&gt; addr;\n\tabs-&gt;personarry[abs-&gt;m_Size].addr = addr;\n\t//更新通讯录人数\n\tabs-&gt;m_Size++;\n\tcout &lt;&lt; \"添加成功\" &lt;&lt; endl;\n\tsystem(\"pause\");\n\tsystem(\"cls\");\n}\nvoid printPerson(addreassbooks* abs)\n{\n\tif (abs-&gt;m_Size == 0)\n\t{\n\t\tcout &lt;&lt; \"当前记录为空\" &lt;&lt; endl;\n\t}\n\telse\n\t{\n\t\tfor (int i = 0; i &lt; abs-&gt;m_Size; i++)\n\t\t{\n\t\t\tcout &lt;&lt; \"姓名\\t\" &lt;&lt; abs-&gt;personarry[i].name &lt;&lt; endl;\n\t\t\tcout &lt;&lt; \"性别\\t\" &lt;&lt; abs-&gt;personarry[i].sex &lt;&lt; endl;\n\t\t\tcout &lt;&lt; \"年龄\\t\" &lt;&lt; abs-&gt;personarry[i].age &lt;&lt; endl;\n\t\t\tcout &lt;&lt; \"电话\\t\" &lt;&lt; abs-&gt;personarry[i].phone &lt;&lt; endl;\n\t\t\tcout &lt;&lt; \"地址\\t\" &lt;&lt; abs-&gt;personarry[i].addr &lt;&lt; endl;\n\t\t\tcout &lt;&lt; \"\\n\";\n\t\t}\n\t}\n\tsystem(\"pause\");\n\tsystem(\"cls\");\n}\nint checkPerson(addreassbooks* abs, string name)\n{\n\tfor (int i = 0; i &lt; abs-&gt;m_Size; i++)\n\t{\n\t\tif (abs-&gt;personarry[i].name == name)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\nvoid deletePerson(addreassbooks* abs)\n{\t\n\tstring dname;\n\tcout &lt;&lt; \"请输入你要删除的人名\" &lt;&lt; endl;\n\tcin &gt;&gt; dname;\n\tint ret = checkPerson(abs, dname);\n\tif (ret == -1)\n\t{\n\t\tcout &lt;&lt; \"查无此人\" &lt;&lt; endl;\n\t}\n\telse\n\t{\n\t\tfor (int i = ret; i &lt; abs-&gt;m_Size; i++)\n\t\t{\n\t\t\tabs-&gt;personarry[i] = abs-&gt;personarry[i + 1];\n\t\t }\n\t\tabs-&gt;m_Size--;\n\t\tcout &lt;&lt; \"删除成功\" &lt;&lt; endl;\n\t}\n\tsystem(\"pause\");\n\tsystem(\"cls\");\n}\nvoid findPerson(addreassbooks* abs)\n{\n\tstring fname;\n\tcout &lt;&lt; \"请输入要查找的联系人姓名\" &lt;&lt; endl;\n\tcin &gt;&gt; fname;\n\tint result = checkPerson(abs, fname);\n\tif (result == -1)\n\t{\n\t\tcout &lt;&lt; \"查无此人\" &lt;&lt; endl;\n\t}\n\telse\n\t{\n\t\tcout &lt;&lt; \"姓名\\t\" &lt;&lt; abs-&gt;personarry[result].name &lt;&lt; endl;\n\t\tcout &lt;&lt; \"性别\\t\" &lt;&lt; abs-&gt;personarry[result].sex &lt;&lt; endl;\n\t\tcout &lt;&lt; \"年龄\\t\" &lt;&lt; abs-&gt;personarry[result].age &lt;&lt; endl;\n\t\tcout &lt;&lt; \"电话\\t\" &lt;&lt; abs-&gt;personarry[result].phone &lt;&lt; endl;\n\t\tcout &lt;&lt; \"地址\\t\" &lt;&lt; abs-&gt;personarry[result].addr &lt;&lt; endl;\n\t}\n\tsystem(\"pause\");\n\tsystem(\"cls\");\n}\nvoid modifyPerson(addreassbooks* abs)\n{\n\tstring mname;\n\tcout &lt;&lt; \"请输入要修改的联系人姓名\" &lt;&lt; endl;\n\tcin &gt;&gt; mname;\n\tint result = checkPerson(abs, mname);\n\tif (result == -1)\n\t{\n\t\tcout &lt;&lt; \"查无此人\" &lt;&lt; endl;\n\t}\n\telse\n\t{\n\t\tstring name;\n\t\tcout &lt;&lt; \"请输入姓名\" &lt;&lt; endl;\n\t\tcin &gt;&gt; name;\n\t\tabs-&gt;personarry[result].name = name;\n\t\tstring sex;\n\t\tcout &lt;&lt; \"请输入性别\" &lt;&lt; endl;\n\t\tcin &gt;&gt; sex;\n\t\tabs-&gt;personarry[result].sex = sex;\n\t\tint age;\n\t\tcout &lt;&lt; \"请输入年龄\" &lt;&lt; endl;\n\t\tcin &gt;&gt; age;\n\t\tabs-&gt;personarry[result].age = age;\n\t\tstring phone;\n\t\tcout &lt;&lt; \"请输入电话\" &lt;&lt; endl;\n\t\tcin &gt;&gt; phone;\n\t\tabs-&gt;personarry[result].phone = phone;\n\t\tstring addr;\n\t\tcout &lt;&lt; \"请输入地址\" &lt;&lt; endl;\n\t\tcin &gt;&gt; addr;\n\t\tabs-&gt;personarry[result].addr = addr;\t\n\t\tcout &lt;&lt; \"修改成功\" &lt;&lt; endl;\n\t}\n\tsystem(\"pause\");\n\tsystem(\"cls\");\n}\nvoid cleanPerson(addreassbooks*abs)//逻辑清空\n{\n\tabs-&gt;m_Size = 0;\n\tcout &lt;&lt; \"通讯录清空成功！\" &lt;&lt; endl;\n\tsystem(\"pause\");\n\tsystem(\"cls\");\n}\nint main(void)\n{\n\n\t//创建通讯录结构体变量\n\taddreassbooks abs;\n\t//初始化通讯录中当前人员的个数\n\tabs.m_Size = 0;\n\n\tint select = 0;\n\twhile (1)\n\t{\n\t\tmainMenu();\n\t\tcin &gt;&gt; select;\n\t\tswitch (select)\n\t\t{\n\t\tcase 1://添加联系人\n\t\t\taddPerson(&amp;abs);\n\t\t\tbreak;\n\t\tcase 2://显示联系人\n\t\t\tprintPerson(&amp;abs);\n\t\t\tbreak;\n\t\tcase 3://删除联系人\n\t\t\tdeletePerson(&amp;abs);\n\t\t\tbreak;\n\t\tcase 4://查找联系人\n\t\t\tfindPerson(&amp;abs);\n\t\t\tbreak;\n\t\tcase 5://修改联系人\n\t\t\tmodifyPerson(&amp;abs);\n\t\t\tbreak;\n\t\tcase 6://清空联系人\n\t\t\tcleanPerson(&amp;abs);\n\t\t\tbreak;\n\t\tcase 0://退出通讯录\n\t\t\tcout &lt;&lt; \"欢迎下次使用\" &lt;&lt; endl;\n\t\t\tsystem(\"pause\");\n\t\t\treturn 0;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n}\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-05-09 17:48:33", "summary": "相关视频黑马程序员匠心之作教程从到入门编程学习编程不再难哔哩哔哩我的小站半生瓜我知道这个视频早已经被很多人学习并且记录笔记，但是我还是想再过一遍前面的基础知识点，所以我这个笔记会非常的简洁，适合有语言"}