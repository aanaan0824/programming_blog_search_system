{"blogid": "125146447", "writerAge": "码龄5年", "writerBlogNum": "7", "writerCollect": "104", "writerComment": "24", "writerFan": "11", "writerGrade": "2级", "writerIntegral": "142", "writerName": "灰灰子衿", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125146447.jpg", "writerRankTotal": "92686", "writerRankWeekly": "971000", "writerThumb": "24", "writerVisitNum": "9176", "blog_read_count": "957", "blog_time": "已于 2022-06-06 16:38:01 修改", "blog_title": "autoware标定工具进行固态激光雷达与相机的联合标定并运用标定结果进行投影(C++)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><strong>本文主要介绍速腾聚创的RS-LIDAR-M1固态雷达激光与小觅相机左眼的联合标定过程，并介绍标定过程中的一些技巧与避雷，加快标定效率。最后给出运用标定结果进行投影的关键代码。</strong></p>\n<p><strong>一、安装autoware（为了标定完成后的可视化，可选，本文并未用到）</strong><br/> 参考<a href=\"https://blog.csdn.net/qq_41545537/article/details/109312868\">https://blog.csdn.net/qq_41545537/article/details/109312868</a></p>\n<p><strong>二、安装autoware相机和激光雷达联合标定工具</strong><br/> 参考<a href=\"https://blog.csdn.net/qq_43509129/article/details/109327157\">https://blog.csdn.net/qq_43509129/article/details/109327157</a></p>\n<p><strong>三、进行标定</strong><br/> <strong>1.播放数据</strong><br/> 播放事先采集好的标定数据包，命令如下：</p>\n<pre><code class=\"prism language-bash\">rosbag play your_calibration_data.bag /rslidar_points:<span class=\"token operator\">=</span>/points_raw --loop\n</code></pre>\n<p>其中，参数/rslidar_points:=/points_raw是将原本的固态激光雷达的topic由/rslidar_points改成/points_raw，因为标定工具里面订阅的topic固定是/points_raw。参数–loop是指循环播放bag包。</p>\n<p><strong>2.启动步骤二中的标定工具</strong><br/> ①　在标定工具所在工作空间打开终端，分别执行：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token builtin class-name\">source</span> devel/setup.bash\nrosrun calibration_camera_lidar calibration_toolkit\n</code></pre>\n<p>②　在弹出的界面上选择相机的图像话题，小觅的话题是/mynteye/left/image_color或者/mynteye/left/image_mono，根据自己的情况选择。<br/> ③　再在弹出的界面选择 Camera-&gt;Velodyne 后出现如下界面：<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\28ffbf9fb0064d3b9973f8f6a7203135.png\"/></p>\n<p><strong>3.标定过程</strong><br/> ①　Pattern Size处是标定板的尺寸，单位是m，根据实际情况填入。<br/> ②　Pattern Number处是标定板的格子数，根据实际情况填入。<strong>！！！注意：此处务必注意，按照你录制数据时拿标定板的姿态，前面填竖着的数量，后面填横着的数量（即 竖✖横 ），并且填的是格子交点的数量，比如有7个格子，则填6。（经过我的测试，填成 横✖竖 误差会很大）！！！填完之后重启标定工具才能生效。</strong><br/> ③　启动后正常情况下有图像和点云数据显示，右侧点云数据显示区由于视角问题看起来是一团黑色。<br/> ④　点击黑色区域，按下大键盘数字键“2”切换视角，可以看到有点云的俯视显示。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\65cbaadb6a1c457caaa97fec78c8725d.png\"/><br/> ⑤　按下按键“B”，把背景调成白色。<br/> ⑥　长按按键“E”，把点云调正，根据该款固态激光雷达只有120度水平视场的特点，当左右各有一半点云的时候为正。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ea9dc1d5f42241759a4c794e338e69fb.png\"/><br/> ⑦　长按按键“W”，把点云视角调整为正视。<br/> ⑧　长按减号键“-”，把点云放大，直到可以看到标定板为止。现在整体应该是如下效果：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1926015e5cd5467db894c7ba2bbab9ed.png\"/><br/> ⑨　再次按下数字键“1”，切换视角。由于固态激光雷达分辨率太高，可能无法分辨出周围场景，<strong>如果分辨不出标定板，则按按键“P”，增大点云的点尺寸，一次不行，多按几次</strong>。最后效果如下（按了4次“P”键）：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6d16e0d12fa44742a6afa4d2a33d2a9e.png\"/><br/> <strong>上面几步操作务必完成。</strong> 整个显示界面其实分为四个部分，右上部分是实时显示点云的widget，左上部分是实时显示图像的widget；右下是显示截取的点云帧的widget，左下是显示截取的图像帧的widget。<strong>在执行后续步骤之前把右上部分的实时点云显示调整至一个非常容易选取的位置，可以让后续截取的点云易于选取，否则每一个截取的点云帧都要重复上述步骤的调整过程，浪费大量时间。</strong></p>\n<p>⑩　此时点云视角已经调整好，把图像界面放大，把图像完整地显示出来，效果如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b01c2081353f4156ac892d9423b806ee.png\"/><br/> ⑪　此时开始捕捉标定帧。选取的准则是：当某一帧标定板在图像中和在点云中完整出现才算合格，如上图，图像中的标定板刚好显示完整，点云中的标定板显示完整，所以是合格的一帧。<br/> ⑫　对于合格的一帧，点击右上角的“Grab”按键，如果捕捉成功（即程序能检测到图像中的棋盘格），则会在界面下方显示，如下图所示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\51e5f6b3d1eb45f48d112966c7523848.png\"/><br/> ⑬　重复捕捉大概二三十帧，理论上来说：越多帧，标定效果越好。尽量多捕捉不同姿态的标定板帧。<br/> ⑭　捕捉完成后，开始手动选择点云。如上图，标定板在图像中被检测到，我们需要手动选择点云中的标定板，以此形成对应关系求解变换矩阵。<br/> ⑮　选择的时候可以把右下方的点云界面调大，选择的模型是一个圆面。同理，为了让点云更能被分辨，按之前提到的方法把背景成白色，把点调大，直至标定板清晰可见。<br/> ⑯　点击鼠标左键选择标定板，尽量使圆面处于标定板的正中间，选择过后如果不满意，点击鼠标右键取消选择，重新再选，效果如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bb7ed3a0e47541bd8c14dc5e6425a6ea.png\"/><br/> ⑰　对捕捉的每一帧都进行这样的选取，直至所有帧选择完毕。<br/> ⑱　点击右上角的“Calibrate”按钮。<br/> ⑲　计算完成后，再点击右上角“Project”按钮，应该出现如下效果：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2ee3717be1764ddb81eb21d2df9b0890.png\"/><br/> 左侧的红点是用标定后的参数将右侧手动选择的标定板点投影到图像上的结果。完美情况下，红点应该出现在标定板上我们手动选择的位置。但是实际上只要大致对上就ok。<br/> ⑳　如果每一帧图像都能基本对上，则说明标定效果还行；如果误差较大，则说明标定失败，需要重新标定。<br/> ㉑　如果标定结束，则点击左上角的“Save”按钮，将标定结果保存，取名后存至文件夹。<strong>然后对之后弹出的两个界面，都选择“No”。</strong><br/> ㉒　至此整个标定过程结束。</p>\n<p><strong>四、运用标定结果进行投影</strong><br/> 标定完成后会得到一个yml格式的文件，里面有标定得到的<strong>外参、相机内参、相机畸变系数、图像尺寸、重投影误差</strong>，示例如下：</p>\n<pre><code class=\"prism language-xml\">%YAML:1.0\n---\nCameraExtrinsicMat: !!opencv-matrix\n   rows: 4\n   cols: 4\n   dt: d\n   data: [ -5.8407131946527358e-03, -3.2811216518650155e-02,\n       9.9944450078028035e-01, 1.9907201492930962e-01,\n       -9.9986339451409767e-01, -1.5262476339699793e-02,\n       -6.3442199462111493e-03, 6.9461651636179914e-02,\n       1.5462159620299232e-02, -9.9934502594776853e-01,\n       -3.2717590579534050e-02, -1.5654594735971714e-01, 0., 0., 0., 1. ]\nCameraMat: !!opencv-matrix\n   rows: 3\n   cols: 3\n   dt: d\n   data: [ 1.0143281094389476e+03, 0., 6.3163571518821800e+02, 0.,\n       1.0096395620868118e+03, 3.2954732055473158e+02, 0., 0., 1. ]\nDistCoeff: !!opencv-matrix\n   rows: 1\n   cols: 5\n   dt: d\n   data: [ -6.3944068169403991e-03, -1.7957073252917993e-02,\n       -1.3865038466759662e-02, 1.5781011631053978e-03,\n       1.5292969053996039e-01 ]\nImageSize: [ 1280, 720 ]\nReprojectionError: 9.3588671201531770e-01\n</code></pre>\n<p>运用opencv里面的cv::projectPoints函数可以进行点云到图像之间的投影，下面是具体的代码。</p>\n<pre><code class=\"prism language-cpp\">\t    <span class=\"token comment\">// 下列代码段从标定结果文件中读取外参矩阵、内参矩阵、畸变矩阵，</span>\n\t    <span class=\"token comment\">// 其中外参矩阵中：前三行前三列是旋转矩阵、第四列是平移向量</span>\n\t    cv<span class=\"token double-colon punctuation\">::</span>Mat extrinsic_mat<span class=\"token punctuation\">,</span> camera_mat<span class=\"token punctuation\">,</span>dist_coeff<span class=\"token punctuation\">;</span> <span class=\"token comment\">//外参矩阵，内参矩阵，畸变矩阵</span>\n        cv<span class=\"token double-colon punctuation\">::</span>Mat rotate_mat<span class=\"token punctuation\">,</span>transform_vec<span class=\"token punctuation\">;</span> <span class=\"token comment\">//旋转矩阵，平移向量</span>\n\t    cv<span class=\"token double-colon punctuation\">::</span>FileStorage <span class=\"token function\">fs_read</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"your_calibration_file_path\"</span><span class=\"token punctuation\">,</span> cv<span class=\"token double-colon punctuation\">::</span>FileStorage<span class=\"token double-colon punctuation\">::</span>READ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//打开标定结果文件</span>\n\t    fs_read<span class=\"token punctuation\">[</span><span class=\"token string\">\"CameraExtrinsicMat\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> extrinsic_mat<span class=\"token punctuation\">;</span> <span class=\"token comment\">//从文件里读取4x4外参矩阵</span>\n\t    fs_read<span class=\"token punctuation\">[</span><span class=\"token string\">\"CameraMat\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> camera_mat<span class=\"token punctuation\">;</span> <span class=\"token comment\">//从文件里读取3x3相机内参矩阵</span>\n\t    fs_read<span class=\"token punctuation\">[</span><span class=\"token string\">\"DistCoeff\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> dist_coeff<span class=\"token punctuation\">;</span> <span class=\"token comment\">//从文件里读取5x1畸变矩阵</span>\n\t    fs_read<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//关闭文件</span>\n</code></pre>\n<pre><code class=\"prism language-cpp\">\t<span class=\"token comment\">// 下列代码段从外参矩阵中读取旋转矩阵、平移向量</span>\n\trotate_mat<span class=\"token operator\">=</span>cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> cv<span class=\"token double-colon punctuation\">::</span>DataType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将旋转矩阵赋值成3x3矩阵</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            rotate_mat<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">at</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span>extrinsic_mat<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">at</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取前三行前三列</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    transform_vec<span class=\"token operator\">=</span>cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> cv<span class=\"token double-colon punctuation\">::</span>DataType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将平移向量赋值成3x1矩阵</span>\n    transform_vec<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">at</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span>extrinsic_mat<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">at</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    transform_vec<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">at</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span>extrinsic_mat<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">at</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    transform_vec<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">at</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span>extrinsic_mat<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">at</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>上述代码中，rotate_mat实际是取的外参矩阵前三行前三列的<strong>转置</strong>，transform_vec也不是按照外参矩阵第四列的顺序赋值。具体原因参考<a href=\"https://blog.csdn.net/qq_22059843/article/details/103022451\">https://blog.csdn.net/qq_22059843/article/details/103022451</a></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// 该函数实现点云到图像的投影，将点云上的点投影到图像上并在图像上显示，并将能够投影到图像的点按图像对应像素的颜色对点进行染色</span>\n<span class=\"token comment\">// 输入参数分别为点云和图像</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">projection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> pcl<span class=\"token double-colon punctuation\">::</span>PointCloud<span class=\"token operator\">&lt;</span>pcl<span class=\"token double-colon punctuation\">::</span>PointXYZI<span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span>Ptr<span class=\"token operator\">&amp;</span>ccloud<span class=\"token punctuation\">,</span>cv<span class=\"token double-colon punctuation\">::</span>Mat<span class=\"token operator\">&amp;</span>img<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    vector<span class=\"token operator\">&lt;</span>cv<span class=\"token double-colon punctuation\">::</span>Point3f<span class=\"token operator\">&gt;</span> points3d<span class=\"token punctuation\">;</span> <span class=\"token comment\">//存储点云点的vcector，必须存储成cv::Point3f格式</span>\n    points3d<span class=\"token punctuation\">.</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span>ccloud<span class=\"token operator\">-&gt;</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//先给points3d分配足够大的内存空间，避免push_back时频繁复制转移</span>\n    cv<span class=\"token double-colon punctuation\">::</span>Point3f point<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>ccloud<span class=\"token operator\">-&gt;</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        point<span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span>ccloud<span class=\"token operator\">-&gt;</span>points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n        point<span class=\"token punctuation\">.</span>y<span class=\"token operator\">=</span>ccloud<span class=\"token operator\">-&gt;</span>points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n        point<span class=\"token punctuation\">.</span>z<span class=\"token operator\">=</span>ccloud<span class=\"token operator\">-&gt;</span>points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n        points3d<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//逐个插入</span>\n    <span class=\"token punctuation\">}</span>\n    vector<span class=\"token operator\">&lt;</span>cv<span class=\"token double-colon punctuation\">::</span>Point2f<span class=\"token operator\">&gt;</span> projectedPoints<span class=\"token punctuation\">;</span> <span class=\"token comment\">//该vector用来存储投影过后的二维点，三维点投影后变二维</span>\n    \n    <span class=\"token comment\">// 投影核心函数</span>\n    <span class=\"token comment\">// 第一个参数为原始3d点</span>\n    <span class=\"token comment\">// 第二个参数为旋转矩阵</span>\n    <span class=\"token comment\">// 第三个参数为平移向量</span>\n    <span class=\"token comment\">// 第四个参数为相机内参矩阵</span>\n    <span class=\"token comment\">// 第五个参数为投影结果</span>\n    cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">projectPoints</span><span class=\"token punctuation\">(</span>points3d<span class=\"token punctuation\">,</span>rotate_mat<span class=\"token punctuation\">,</span>transform_vec<span class=\"token punctuation\">,</span>camera_mat<span class=\"token punctuation\">,</span>dist_coeff<span class=\"token punctuation\">,</span>projectedPoints<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    pcl<span class=\"token double-colon punctuation\">::</span>PointXYZRGB point_rgb<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//遍历投影结果</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>projectedPoints<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cv<span class=\"token double-colon punctuation\">::</span>Point2f p <span class=\"token operator\">=</span> projectedPoints<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        point_rgb<span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span>ccloud<span class=\"token operator\">-&gt;</span>points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n        point_rgb<span class=\"token punctuation\">.</span>y<span class=\"token operator\">=</span>ccloud<span class=\"token operator\">-&gt;</span>points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n        point_rgb<span class=\"token punctuation\">.</span>z<span class=\"token operator\">=</span>ccloud<span class=\"token operator\">-&gt;</span>points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n        point_rgb<span class=\"token punctuation\">.</span>r<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        point_rgb<span class=\"token punctuation\">.</span>g<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        point_rgb<span class=\"token punctuation\">.</span>b<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// 由于图像尺寸为720x1280，所以投影后坐标不在图像范围内的点不进行染色（默认黑色）</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>y<span class=\"token operator\">&lt;</span><span class=\"token number\">720</span><span class=\"token operator\">&amp;&amp;</span>p<span class=\"token punctuation\">.</span>y<span class=\"token operator\">&gt;=</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>p<span class=\"token punctuation\">.</span>x<span class=\"token operator\">&lt;</span><span class=\"token number\">1280</span><span class=\"token operator\">&amp;&amp;</span>p<span class=\"token punctuation\">.</span>x<span class=\"token operator\">&gt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n        <span class=\"token punctuation\">{<!-- --></span>\n            point_rgb<span class=\"token punctuation\">.</span>r<span class=\"token operator\">=</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">at</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>cv<span class=\"token double-colon punctuation\">::</span>Vec3b<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//读取像素点的rgb值</span>\n            point_rgb<span class=\"token punctuation\">.</span>g<span class=\"token operator\">=</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">at</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>cv<span class=\"token double-colon punctuation\">::</span>Vec3b<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            point_rgb<span class=\"token punctuation\">.</span>b<span class=\"token operator\">=</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">at</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>cv<span class=\"token double-colon punctuation\">::</span>Vec3b<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        rgb_cloud<span class=\"token operator\">-&gt;</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>point_rgb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//对于投影后在图像中的点进行染色后加入点云rgb_cloud</span>\n    <span class=\"token punctuation\">}</span>\n    sensor_msgs<span class=\"token double-colon punctuation\">::</span>PointCloud2 ros_cloud<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 申明ros类型点云</span>\n    pcl<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">toROSMsg</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>rgb_cloud<span class=\"token punctuation\">,</span>ros_cloud<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// pcl点云转ros点云</span>\n    ros_cloud<span class=\"token punctuation\">.</span>header<span class=\"token punctuation\">.</span>frame_id<span class=\"token operator\">=</span><span class=\"token string\">\"rslidar\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//</span>\n    cloud_pub<span class=\"token punctuation\">.</span><span class=\"token function\">publish</span><span class=\"token punctuation\">(</span>ros_cloud<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//cloud_pub是在函数外定义的一个ros点云发布器，将染色后的点云发布</span>\n    \n    <span class=\"token comment\">//再次遍历投影结果</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>projectedPoints<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cv<span class=\"token double-colon punctuation\">::</span>Point2f p <span class=\"token operator\">=</span> projectedPoints<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 由于图像尺寸为720x1280，所以投影后坐标处于图像范围内的点才在图像中进行标示</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>y<span class=\"token operator\">&lt;</span><span class=\"token number\">720</span><span class=\"token operator\">&amp;&amp;</span>p<span class=\"token punctuation\">.</span>y<span class=\"token operator\">&gt;=</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>p<span class=\"token punctuation\">.</span>x<span class=\"token operator\">&lt;</span><span class=\"token number\">1280</span><span class=\"token operator\">&amp;&amp;</span>p<span class=\"token punctuation\">.</span>x<span class=\"token operator\">&gt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n        \t<span class=\"token comment\">//标示的方式是在对应位置画圆圈</span>\n            cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">circle</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Scalar</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    sensor_msgs<span class=\"token double-colon punctuation\">::</span>ImagePtr msg<span class=\"token operator\">=</span>cv_bridge<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CvImage</span><span class=\"token punctuation\">(</span>std_msgs<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bgr8\"</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toImageMsg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//利用cv_bridge将opencv图像转为ros图像</span>\n    image_pub<span class=\"token punctuation\">.</span><span class=\"token function\">publish</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//image_pub是在函数外定义的一个ros图像发布器，将标示后的图像发布</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>投影后的效果如下所示，其中，左边是图像，右边是染色后的点云（点云看起来像图像，因为点调大了）：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e1d58b4b18414ac1a288cc7e276e4c7b.png\"/><br/> 关于投影的大致数学细节，可以参考我之前的文章<a href=\"https://blog.csdn.net/qq_38222947/article/details/118220876\">https://blog.csdn.net/qq_38222947/article/details/118220876</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-06-06 16:38:01", "summary": "本文主要介绍速腾聚创的固态雷达激光与小觅相机左眼的联合标定过程，并介绍标定过程中的一些技巧与避雷，加快标定效率。最后给出运用标定结果进行投影的关键代码。一、安装为了标定完成后的可视化，可选，本文并未用"}