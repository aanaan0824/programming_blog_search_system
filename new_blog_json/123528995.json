{"blogid": "123528995", "writerAge": "码龄9年", "writerBlogNum": "61", "writerCollect": "1427", "writerComment": "226", "writerFan": "547", "writerGrade": "5级", "writerIntegral": "2353", "writerName": "醉逍遥neo", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123528995.jpg", "writerRankTotal": "8301", "writerRankWeekly": "30183", "writerThumb": "370", "writerVisitNum": "635051", "blog_read_count": "16252", "blog_time": "已于 2022-03-23 09:49:12 修改", "blog_title": "后台管理系统 - 页面布局设计", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>前端的中后台管理系统相比于其他普通项目，从开发设计的角度来说有几点比较特殊：</p>\n<ul><li>一个是权限设计，具体实现可参考：<a href=\"https://blog.csdn.net/u010059669/article/details/123112335\">传送门</a>。</li><li>一个是页面布局的设计，也是本文要说的。一个好的页面布局设计，无论是对于页面结构的稳定性，还是功能拓展的方便性，亦或是用户体验上，都有着重要的作用。</li></ul>\n<h2><a id=\"_4\"></a>一、市面参考</h2>\n<p>先来看看市面上的一些优秀的开源系统项目的页面布局。</p>\n<h3><a id=\"1vueelementadmin_7\"></a>1、vue-element-admin</h3>\n<p><a href=\"https://github.com/PanJiaChen/vue-element-admin/blob/master/README.zh-CN.md\">vue-element-admin</a> 是 vue 框架的一个优秀的后台管理系统开源项目，目前star数75k。</p>\n<p>vue-element-admin采用的是侧边菜单布局，侧边菜单 + 顶部导航 + 内容区域，这也是我个人最推崇的布局方式。</p>\n<img src=\"..\\..\\static\\image\\b382ceed324d453d88749ea847f17e08.png\" width=\"800\"/>\n<h3><a id=\"2ant_design_pro_14\"></a>2、ant design pro</h3>\n<p><a href=\"https://pro.ant.design/zh-CN/docs/getting-started\">ant design pro</a> 有提供三种布局。</p>\n<h4><a id=\"1_17\"></a>（1）顶部菜单布局</h4>\n<p>即：顶部导航菜单 + 内容区域。</p>\n<p>这种方式布局简单，但缺点很明显，菜单都挤在顶部导航区域，在菜单项越来越多时就放不下了，很难处理，可扩展性不强。</p>\n<img src=\"..\\..\\static\\image\\89fd65411e924a58aec3f0fd571bc943.png\" width=\"800\"/>\n<h4><a id=\"2_24\"></a>（2）侧边菜单布局</h4>\n<p>侧边菜单 + 顶部导航 + 内容区域。</p>\n<p>同vue-element-admin类似，主要区别就是antd pro的面包屑导航是另起一行单独放的，这样挤压了内容区域的空间，个人觉得还是放在顶部和右上角的快捷按钮放同一行最好。</p>\n<img src=\"..\\..\\static\\image\\6895942f2ae74936b4d51b0ff5388ffd.png\" width=\"800\"/>\n<h4><a id=\"3_31\"></a>（3）混合菜单布局</h4>\n<p>其实和侧边菜单布局大同小异，还是属于侧边菜单布局的范畴。</p>\n<p>只不过这样布局的话，面包屑导航就不适合和顶部放一行了，只能另起一行。</p>\n<img src=\"..\\..\\static\\image\\dd8751beb1e5456cbdade2c06bfdbd23.png\" width=\"800\"/>\n<h2><a id=\"_38\"></a>二、选型</h2>\n<p>参考市面上比较优秀的两款项目模板的布局后，个人还是觉得vue-element-admin的布局方式更胜一筹。</p>\n<p>文本就围绕这种布局结构来设计。</p>\n<ul><li>示例项目：<a href=\"https://github.com/neohan666/react-antd-mobx-admin\">react-antd-mobx-admin</a></li><li>技术栈：react 17 + antd 4 + react-router-dom 6 + ts</li><li>路由统一管理使用 <a href=\"https://github.com/neohan666/react-router-waiter\">react-router-waiter</a> 方案</li></ul>\n<p>效果图：</p>\n<img src=\"..\\..\\static\\image\\b2cc9a3847f54435a27050d724bbb3fc.png\" width=\"800\"/>\n<p>其实技术选型不那么重要，无论是react还是vue，element或是antd，思路一致，都只是实现代码的差异而已。</p>\n<p>对于侧边栏菜单和面包屑导航，element和antd都有相应的组件可以直接使用，其他的手写实现。</p>\n<h2><a id=\"css_54\"></a>三、css布局</h2>\n<p>良好的css布局代码才能保证页面布局的稳定性。</p>\n<p>而对于整体布局来说，flex是首选，稳定性更好，不兼容ie9。</p>\n<p>这里将整体布局封装成组件<code>PageLayout</code></p>\n<p>（1）首先，设置侧边栏右侧的盒子撑满屏幕剩余宽度。<br/> flex布局有个特性是：只对一个子元素设置<code>flex: 1</code>属性时，该子元素默认会撑满父容器的剩余空间。</p>\n<pre><code class=\"prism language-css\"><span class=\"token selector\">.c-PageLayout-index</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token selector\">;\n\n  .appMainWrap</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span> // 占据屏幕剩余宽度\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span> // 留出顶部导航栏区域，顶部导航栏使用悬浮置顶。\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.appMain</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span> // 内容区域可以在这里统一设置下边距\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>c-PageLayout-index 页面整体容器</li><li>appMainWrap 侧边栏右侧的（顶部导航区域 + 内容区域）容器</li><li>appMain 内容区域容器</li></ul>\n<p>（2）侧边菜单区域默认撑满高度，宽度可交给antd组件自适应，也可以自己设死。</p>\n<pre><code class=\"prism language-css\"><span class=\"token selector\">.c-PageLayout-sideBar</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>（3）顶部导航区域悬浮置顶。</p>\n<pre><code class=\"prism language-css\"><span class=\"token selector\">.c-PageLayout-headBar</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> space-between<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_107\"></a>四、侧边栏菜单</h2>\n<p>侧边栏的实现方式是难点，因为这里即涉及到如何和路由数据匹配，又涉及权限的筛选。</p>\n<p>侧边栏最好是和路由配置共用一套数据，方便扩展和维护，这里得益于 <a href=\"https://github.com/neohan666/react-router-waiter\">react-router-waiter</a> 已经封装好的路由管理方案（类vue-router），所以直接读取路由配置数据，动态生成菜单组件结构。</p>\n<img src=\"..\\..\\static\\image\\522a881ba3a946d3acb258d4c9b6c7c4.png\" width=\"200\"/>\n<p>路由配置数据：</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">import</span> PageLayout <span class=\"token keyword\">from</span> <span class=\"token string\">'@/components/PageLayout'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> HomeOutlined <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ant-design/icons'</span>\n\n<span class=\"token keyword\">const</span> routes<span class=\"token operator\">:</span> RoutesTypeNew <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n    element<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>PageLayout <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n        path<span class=\"token operator\">:</span> <span class=\"token string\">'index'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* webpackChunkName: \"index\" */</span> <span class=\"token string\">'@/views/index/index'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        meta<span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n          title<span class=\"token operator\">:</span> <span class=\"token string\">'首页'</span><span class=\"token punctuation\">,</span>\n          icon<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>HomeOutlined <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n          accessId<span class=\"token operator\">:</span> <span class=\"token string\">'10000'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n</code></pre>\n<ul><li>如有点击跳转外链的菜单场景，可以在routes里添加个自定义的配置对象，例如通过url属性指代外链地址。</li></ul>\n<p>动态生成菜单：</p>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 递归获取层级菜单</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getMenuList</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">const</span> getList<span class=\"token operator\">:</span> any <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>routeList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> prePath <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> menuList<span class=\"token operator\">:</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>Element<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    routeList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token operator\">:</span> RoutesItemTypeNew</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>path <span class=\"token operator\">===</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        menuList <span class=\"token operator\">=</span> menuList<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token function\">getList</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">const</span> currentPath <span class=\"token operator\">=</span> prePath <span class=\"token operator\">+</span> v<span class=\"token punctuation\">.</span>path\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n          menuList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>SubMenu key<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>currentPath<span class=\"token punctuation\">}</span> icon<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>v<span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>icon<span class=\"token punctuation\">}</span> title<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>v<span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n              <span class=\"token punctuation\">{<!-- --></span><span class=\"token function\">getList</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> currentPath <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>SubMenu<span class=\"token operator\">&gt;</span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n          menuList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>ItemMenu key<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>currentPath<span class=\"token punctuation\">}</span> icon<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>v<span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>icon<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n              <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>currentPath<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>v<span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ItemMenu<span class=\"token operator\">&gt;</span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> menuList\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">getList</span><span class=\"token punctuation\">(</span>routes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>如需要对权限路由做筛选，通过在路由配置数据meta里添加accessId字段作为路由权限id，然后在遍历routeList时，读取该accessId做权限判断。</li></ul>\n<h2><a id=\"_172\"></a>五、面包屑导航</h2>\n<p>要使用面包屑导航，需要对路由路径配置有一定的约束规则，即，配置path路径时不要随意使用斜杠<code>/</code>划分，只通过嵌套路径自动划分路径。</p>\n<p>这样才能对路由完整路径通过<code>/</code>分隔并匹配，来生成对应的面包屑导航数据。</p>\n<img src=\"..\\..\\static\\image\\f856d816aa6a4f13a8606417e3c80d97.png\" width=\"500\"/>\n<p>首先，写个方法，遍历路由，生成路由路径和路由meta字段的映射数据：</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getRouteMetaMap</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">const</span> getMap<span class=\"token operator\">:</span> any <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>routeList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> prePath <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n    routeList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token operator\">:</span> RoutesItemTypeNew</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">let</span> currentPath <span class=\"token operator\">=</span> prePath <span class=\"token operator\">+</span> v<span class=\"token punctuation\">.</span>path\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>path <span class=\"token operator\">===</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        currentPath <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        map <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token operator\">...</span>map<span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">[</span>currentPath<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> v<span class=\"token punctuation\">.</span>meta <span class=\"token operator\">||</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        map <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token operator\">...</span>map<span class=\"token punctuation\">,</span>\n          <span class=\"token operator\">...</span><span class=\"token function\">getMap</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> currentPath <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> map\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">getMap</span><span class=\"token punctuation\">(</span>routes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>映射数据示例：<pre><code class=\"prism language-js\"><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string\">\"/index\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token string\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"首页\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"accessId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"10000\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"/nest\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token string\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"多级菜单\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"/nest/nest1\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token string\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"二级菜单1\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"/nest/nest1/nest11\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token string\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"三级菜单11\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li></ul>\n<p>然后，获取当前路由完整路径（例如：<code>/nest/nest1/nest11</code>），再通过<code>/</code>分隔成多段子路由，和上述getRouteMetaMap方法取到的映射数据匹配，获取子路由的title标题组合成面包屑（多级菜单 / 二级菜单1 / 三级菜单11），展示出来。</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">const</span> routeMetaMap <span class=\"token operator\">=</span> <span class=\"token function\">getRouteMetaMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> pathSnippets <span class=\"token operator\">=</span> location<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span> <span class=\"token operator\">=&gt;</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> extraBreadcrumbItems <span class=\"token operator\">=</span> pathSnippets<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>pathSnippets<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Breadcrumb<span class=\"token punctuation\">.</span>Item key<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>url<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>routeMetaMap<span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Breadcrumb<span class=\"token punctuation\">.</span>Item<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<hr/>\n<p>本文示例项目源码：<a href=\"https://github.com/neohan666/react-antd-mobx-admin\">react-antd-mobx-admin</a></p>\n<hr/>\n<p>参考链接：<br/> <em>https://panjiachen.gitee.io/vue-element-admin/</em><br/> <em>https://preview.pro.ant.design/form/basic-form</em></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-23 09:49:12", "summary": "前端的中后台管理系统相比于其他普通项目，从开发设计的角度来说有几点比较特殊：一个是权限设计，具体实现可参考：传送门。一个是页面布局的设计，也是本文要说的。一个好的页面布局设计，无论是对于页面结构的稳定"}