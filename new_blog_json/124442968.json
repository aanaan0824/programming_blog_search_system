{"blogid": "124442968", "writerAge": "码龄6年", "writerBlogNum": "15", "writerCollect": "68", "writerComment": "9", "writerFan": "12", "writerGrade": "2级", "writerIntegral": "175", "writerName": "全能哆来梦", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124442968.jpg", "writerRankTotal": "75731", "writerRankWeekly": "165714", "writerThumb": "15", "writerVisitNum": "16247", "blog_read_count": "1750", "blog_time": "已于 2022-07-19 15:02:27 修改", "blog_title": "EFCore 从入门到精通-5（谈谈迁移)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><ul><li><ul><li><a href=\"#1_2\">1.初始准备</a></li><li><a href=\"#2_8\">2.数据库的迁移</a></li><li><ul><li><a href=\"#21__23\">2.1 添加迁移</a></li><li><a href=\"#22__49\">2.2 迁移删除以及回退</a></li><li><a href=\"#23_Sql_64\">2.3 通过Sql脚本迁移</a></li><li><a href=\"#24__90\">2.4 通过程序应用迁移</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h3><a id=\"1_2\"></a>1.初始准备</h3>\n<pre><code>    开发软件：VisualStudio2022，EFCore6.0\n\t.net Core版本：.Net6.0\n\t数据库：mysql8.0\n\t数据库管理软件：Navicat\n</code></pre>\n<h3><a id=\"2_8\"></a>2.数据库的迁移</h3>\n<p>在实际的项目，除此设计好ER关系模型后，我们基本上可以确定数据库的框架。但是随着项目的推进，我们往往需要修改实体关系，或者新增字段，或者删除某个字段，亦或者增加新的表等。<br/> 在EFCore中，我们可以采用 如下方式进行迁移</p>\n<pre><code class=\"prism language-bash\"> Add-Migration 迁移名称//VisualStudio中使用\n dotnet ef migrations <span class=\"token function\">add</span> 迁移名称 //.NETCore CLI里使用\n</code></pre>\n<p>执行上述命令后，在项目文件里会生成一个叫Migrations的文件夹。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6edc90b12d2142269386a06e80a57c62.png\"/>如果是第一次迁移，我们一般会在这个文件夹下，出现两个类，一个分步类，这个类主要做此次迁移的具体工作，一个是数据库快照类。<br/> 我们先看迁移类：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0bcd512b91e34123a7a41e87563d7c21.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ebff9cc97b58442b82d163379318152a.png\"/></p>\n<p>迁移类里主要有3个方法，其中一个分步类是Up和Down方法还有一个BuildTargetModel方法。</p>\n<h4><a id=\"21__23\"></a>2.1 添加迁移</h4>\n<p>增加迁移先进行的操作主要如下：<br/> 1.编译程序,<strong>（注意：当前程序内存在编译错误，就无法迁移）</strong>,<br/> 2.将新的模型与当前数据库快照进行对比，从而从而生成新迁移文件的Up和Down方法。</p>\n<p>增加迁移后必须通过Update-DataBase 才能成功应用到数据库中。</p>\n<p>我们来修改下项目中的Teacher 实体类，增加一个字段为Age，</p>\n<pre><code class=\"prism language-csharp\"> <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> TeacherId <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Title <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Age <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IList<span class=\"token punctuation\">&lt;</span>Course<span class=\"token punctuation\">&gt;</span></span> Courses <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Course<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>添加一个Add-Migration AddTeacherAge,然后Update-Database,通过Navicat打开数据库，打开Teacher表结构发现如下Teacher表多了字段Age：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0ccd456d2ada429cb3b09ed2163cbb25.png\"/><br/> 除此之外我们还可以去删除或者修改某个属性，比如我们删除学生的Age属性然后进行迁移。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\79d4c44562a347bc8b9bee8fa573babb.png\"/><br/> 如上图，在修改或者删除某个属性的时候，会有警告提示，我们的操作可能导致数据库数据丢失。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5e5d85a5e32b4d399796a6a46950f86c.png\"/></p>\n<h4><a id=\"22__49\"></a>2.2 迁移删除以及回退</h4>\n<p>在迁移的更改还未应用到数据库的时候可以删除迁移，但是如果已经使用Update-Database即将迁移更改应用到数据库就不能采用Remove-Migration 删除。如下图<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\36f2ab308203448db68f940c60011ce5.png\"/><br/> 但是我们可以采用Update-DataBase回退到前面一个应用，如下，我们使用 下面的命令回退到给Teacher 增加Age的应用这个时候数据库表Student应该是有Age属性，EFMigrationsHistory表的记录也会修改。</p>\n<blockquote>\n<p>Update-DataBase 20220427022734_AddAge</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\824f94c743aa4fd1a82aea57aa617928.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f5559848f87a41f089ace7b37e4ea1cf.png\"/></p>\n<p>我们再回退一次到最初的状态，添加AddRelations.<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3a09ecf1d8cf4b538165be65a9515762.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d8350b3f8c5b486dbff2c393250ffde1.png\"/></p>\n<h4><a id=\"23_Sql_64\"></a>2.3 通过Sql脚本迁移</h4>\n<p>在前面我们的例子中，添加迁移后，都是通过Update-DataBase直接将迁移更改应用到数据库的，这种方法在开发阶段很方便，但是如果项目已经上线，再通过此种办法就麻烦了。<br/> 其实我们还可以通过导出Sql脚本，来进行数据库的更改。我们再给Teacher这个类，加回Aage这个属性</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> TeacherId <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Title <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Age <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>然后执行Script-Migration，发现EFCore为我们生成了一个Sql脚本。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\49b6937fdba7407688acc901fe7e619b.png\"/><br/> 我们可以根据这个脚本，在某些情况下，可以根据我们实际生产使用的数据库的特定需求调整这些脚本。</p>\n<p>因为上面的脚本是涉及到整个数据库的，除此之外，我们还可以获得局部更改的脚本，<br/> 我们可以从用下面的命令进行调整。（先前前面的更改全部应用，即添加了AddAge和RemoveStudentAge）然后执行，</p>\n<pre><code class=\"prism language-bash\">Script-Migration AddRelations  AddAge\n</code></pre>\n<p>我们将会得到给Teacher表添加Age属性的Sql脚本代码。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f296b709d6864a17a436aae92214ea4c.png\"/></p>\n<h4><a id=\"24__90\"></a>2.4 通过程序应用迁移</h4>\n<p>在程序运行时，我们也可以进行迁移的应用（通常是在启动期间），从而不用每次通过控制台，使用Update-DataBase更改应用到数据库。但是 这种方法对于迁移的本地开发和测试很有效，但不适合管理生产数据库，原因如下：</p>\n<ul><li> <p>如果应用程序的多个实例正在运行，这两个应用程序可能会尝试同时应用迁移并失败（更糟糕的情况是导致数据损坏）。</p> </li><li> <p>同样，如果一个应用程序正在访问数据库，而另一个应用程序正在迁移它，这可能会导致严重的问题。</p> </li><li> <p>应用程序必须具有提升的访问权限才能修改数据库架构。 在生产环境中限制应用程序的数据库权限通常是一种很好的做法。</p> </li><li> <p>出现问题时，能够回滚已应用的迁移很重要。 其他策略可以轻松提供此功能，并且开箱即用。 程序会直接应用 SQL命令，不给开发人员检查或修改的机会。 这在生产环境中可能会很危险。</p> </li></ul>\n<p>如果为了图方便可以在开发阶段，使用程序应用迁移，但是当程序发布的时候，将此段代码注释掉。下面举个例子来说明，我们在Student类添加一个属性Hobby，</p>\n<pre><code class=\"prism language-csharp\"> <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> StudentId <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Sex <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Age <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Hobby <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">StudentAddress</span> Address <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IList<span class=\"token punctuation\">&lt;</span>Course<span class=\"token punctuation\">&gt;</span></span> Courses <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Course<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>然后添加一个迁移 Add-Migration AddHobby<br/> 修改启动代码如下：dbContext.Database.Migrate();</p>\n<pre><code class=\"prism language-csharp\">\n<span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">EFLearnDbContext</span> dbContext<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">EFLearnDbContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//添加自动引用迁移</span>\n    dbContext<span class=\"token punctuation\">.</span>Database<span class=\"token punctuation\">.</span><span class=\"token function\">Migrate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> 查询数据</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> students <span class=\"token operator\">=</span> dbContext<span class=\"token punctuation\">.</span>Students<span class=\"token punctuation\">.</span><span class=\"token function\">Include</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=&gt;</span> x<span class=\"token punctuation\">.</span>Address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Include</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=&gt;</span> x<span class=\"token punctuation\">.</span>Courses<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> st <span class=\"token keyword\">in</span> students<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"StudentId:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">st<span class=\"token punctuation\">.</span>StudentId</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">,Name:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">st<span class=\"token punctuation\">.</span>Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">,City:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">st<span class=\"token punctuation\">.</span>Address<span class=\"token punctuation\">.</span>City</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, Address:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">st<span class=\"token punctuation\">.</span>Address<span class=\"token punctuation\">.</span>Address</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">,Courses:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">.</span>Courses<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=&gt;</span> x<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n\n   \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>直接运行程序，打开数据库，发现如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6bd31ae5c1f94f4a84fa88db4e7220c9.png\"/><br/> 数据表多了Hobby字段。同时为了除此应用的时候代码能够自动创建数据库可以在EFLearnDbContext里添加，程序运行时保证数据库创建。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token function\">EFCoreLearnContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n           \n            Database<span class=\"token punctuation\">.</span><span class=\"token function\">EnsureCreated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">EFCoreLearnContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DbContextOptions<span class=\"token punctuation\">&lt;</span>EFCoreLearnContext<span class=\"token punctuation\">&gt;</span></span> options<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            \n            Database<span class=\"token punctuation\">.</span><span class=\"token function\">EnsureCreated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在正式发布的程序的时候注释掉就能保证数据库的和程序的稳定性。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">//dbContext.Database.Migrate();</span>\n</code></pre>\n<p><a href=\"https://blog.csdn.net/xieyunhappy/article/details/112122844\">EFCore 从入门到精通-4（映射关系与导航属性)</a><br/> <a href=\"https://blog.csdn.net/xieyunhappy/article/details/125847444\">EFCore 从入门到精通-6（详谈查询)</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 0, "time": "2022-07-19 15:02:27", "summary": "目录初始准备数据库的迁移添加迁移迁移删除以及回退通过脚本迁移通过程序应用迁移初始准备开发软件：，版本：数据库：数据库管理软件：数据库的迁移在实际的项目，除此设计好关系模型后，我们基本上可以确定数据库的"}