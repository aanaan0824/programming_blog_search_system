{"blogid": "126738531", "writerAge": "码龄1年", "writerBlogNum": "68", "writerCollect": "2157", "writerComment": "2105", "writerFan": "8565", "writerGrade": "6级", "writerIntegral": "6028", "writerName": "芒果再努力", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126738531.jpg", "writerRankTotal": "2484", "writerRankWeekly": "1883", "writerThumb": "2453", "writerVisitNum": "80121", "blog_read_count": "64", "blog_time": "于 2022-09-07 09:24:22 发布", "blog_title": "【高阶数据结构】LRU Cache", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#LRU_Cache_2\">什么是LRU Cache</a></li><li><a href=\"#LRU_Cache_20\">LRU Cache的实现</a></li><li><ul><li><a href=\"#LRUOJ_30\">LRU缓存OJ：</a></li><li><ul><li><a href=\"#_38\">结构设计分析</a></li><li><a href=\"#listsplice_79\">list的**splice函数**介绍:</a></li><li><a href=\"#get_150\">get函数的实现:</a></li><li><a href=\"#put_188\">put函数的实现:</a></li></ul>\n</li><li><a href=\"#_231\">整体代码:</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"LRU_Cache_2\"></a>什么是LRU Cache</h1>\n<p>LRU是Least Recently Used的缩写，意思是<strong>最近最少使用</strong>，它是一种Cache替换算法</p>\n<blockquote>\n<p>什么是Cache</p>\n</blockquote>\n<p>狭义的Cache指的是位于CPU和主存间的快速RAM， 通常它不像系统主存那样使用DRAM技术，而使用昂贵但较快速的SRAM技术,广义上的Cache指的是位于速度相差较大的两种硬件之间， 用于协调两者数据传输速度差异的结构。除了CPU与主存之间有Cache， 内存与硬盘之间也有Cache，乃至在硬盘与网络之间也有某种意义上的Cache── 称为Internet临时文件夹或网络内容缓存等</p>\n<img alt=\"image-20220720154534266\" src=\"..\\..\\static\\image\\202207201545377.png\"/>\n<hr/>\n<p><strong>Cache的容量有限，因此当Cache的容量用完后，而又有新的内容需要添加进来时， 就需要挑选并舍弃原有的部分内容，从而腾出空间来放新内容。LRU Cache 的替换原则就是将最近最少使用的内容替换掉</strong></p>\n<p>其实，LRU译成最久未使用会更形象， 因为该算法每次替换掉的就是一段时间内最久没有使用过的内容</p>\n<hr/>\n<h1><a id=\"LRU_Cache_20\"></a>LRU Cache的实现</h1>\n<p>实现LRU Cache的方法和思路很多,但是要<strong>保持高效实现O(1)的put和get，那么使用双向链表和哈希表的搭配是最高效和经典的</strong></p>\n<p>使用双向链表是因为<strong>双向链表可以实现任意位置O(1)的插入和删除</strong>，使用哈希表是因为<strong>哈希表的增删查改也是O(1)</strong></p>\n<p><img alt=\"image-20220720154953607\" src=\"..\\..\\static\\image\\a92f113c22a2b2f46442a9e532922788.png\"/></p>\n<hr/>\n<h2><a id=\"LRUOJ_30\"></a>LRU缓存OJ：</h2>\n<blockquote>\n<p>https://leetcode.cn/problems/lru-cache/</p>\n</blockquote>\n<p><img alt=\"image-20220720155303451\" src=\"..\\..\\static\\image\\e7d23055a8da843423e62ffc001dcf90.png\"/></p>\n<hr/>\n<h3><a id=\"_38\"></a>结构设计分析</h3>\n<p>实现结构1:</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tunordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> _hashMap<span class=\"token punctuation\">;</span> <span class=\"token comment\">//hash能做到查找get更新是O(1)</span>\n\t\n\tlist<span class=\"token operator\">&lt;</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span> _LRUList<span class=\"token punctuation\">;</span><span class=\"token comment\">//假设尾部数据就是最近少用的,最近使用的放在头部</span>\n\tsize_t _capacity<span class=\"token punctuation\">;</span><span class=\"token comment\">//标记容量,满了就弹出链表尾的元素+在哈希表删除该元素的键值对</span>\n</code></pre>\n<p>此时:</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p>get: 直接查map,时间复杂度是O(1)</p>\n<p>put: 如果是新增元素就是O(1),直接插入, 但是如果是修改更新: 就是O(N), 因为要在map查找完成后,在_LRUList中找到该元素key所在位置 ,只能遍历查找,时间复杂度是O(N) ,然后把该元素key放在头部O(1)</p>\n<hr/>\n<p><strong>破局点:找到key之后,就要找到key对应存储的数据在链表中的位置</strong></p>\n<p>所以: hashMap中可以存list的迭代器！ 我们实现过list,所以知道list的迭代器本质是节点的指针</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">typedef</span> list<span class=\"token operator\">&lt;</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token double-colon punctuation\">::</span>iterator LtIter<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tunordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>LtIter<span class=\"token operator\">&gt;</span> _hashMap<span class=\"token punctuation\">;</span> <span class=\"token comment\">//key:值  Value:list的迭代器,即key对应在list的位置</span>\n\tlist<span class=\"token operator\">&lt;</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span> _LRUList<span class=\"token punctuation\">;</span>\n\tsize_t _capacity<span class=\"token punctuation\">;</span><span class=\"token comment\">//标记容量,满了就弹出链表尾的元素+在哈希表删除该元素的键值对</span>\n</code></pre>\n<p>这个结构,相当于真正的数据在list里面！在map中查找key,就可以直接在链表中找到这个节点, 然后把这个节点转移到链表头部</p>\n<hr/>\n<h3><a id=\"listsplice_79\"></a>list的<strong>splice函数</strong>介绍:</h3>\n<p><strong>splice函数用于两个list容器之间的拼接(数据转移)，其有三种拼接方式：</strong></p>\n<ol><li><strong>将整个容器拼接到另一个容器的指定迭代器位置。</strong></li><li><strong>将容器当中的某一个数据拼接到另一个容器的指定迭代器位置。</strong></li><li><strong>将容器指定迭代器区间的数据拼接到另一个容器的指定迭代器位置。</strong></li></ol>\n<p><img alt=\"image-20220720155536305\" src=\"..\\..\\static\\image\\c25f09652513ddb54202c8f0963f9fcf.png\"/></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;list&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">lt1</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">lt2</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tlt1<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>lt1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lt2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将容器lt2拼接到容器lt1的开头</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> lt1<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//6 6 6 6 2 2 2 2 </span>\n\n\tlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">lt3</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">lt4</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tlt3<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>lt3<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lt4<span class=\"token punctuation\">,</span> lt4<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将容器lt4的第一个数据拼接到容器lt3的开头</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> lt3<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//6 2 2 2 2 </span>\n\n\tlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">lt5</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">lt6</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tlt5<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>lt5<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lt6<span class=\"token punctuation\">,</span> lt6<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lt6<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将容器lt6的指定迭代器区间内的数据拼接到容器lt5的开头</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> lt5<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//6 6 6 6 2 2 2 2</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>注意： 容器当中被拼接到另一个容器的数据在原容器当中就不存在了。（实际上就是将链表当中的指定结点拼接到了另一个容器当中）</strong></p>\n<p><strong>当然也可以把节点转移到自己身上</strong></p>\n<blockquote>\n<p>例如:</p>\n</blockquote>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;list&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> lt<span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tlt<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>lt<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lt<span class=\"token punctuation\">,</span> <span class=\"token operator\">--</span>lt<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//把尾部的数据放到头部</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> lt<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5 1 2  3  4</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<p>我们待会要用这个函数来把节点转移到链表的头部!</p>\n<h3><a id=\"get_150\"></a>get函数的实现:</h3>\n<p>1)在map中查找key是否存在 .如果不存在,返回-1</p>\n<p>2)如果存在,把该key放到list的头部 -&gt; 转移节点 ,然后返回key对应的值</p>\n<p>元素存在list里面, _hashMap中的键:key 值:list的迭代器(LtIter),</p>\n<hr/>\n<p>如果key对应的值存在,则取出迭代器, 这里就可以看出hashmap的value存的是list的iterator的好处：找到key 也就找到key存的值在list中的iterator，也就直接删除，再进行头插，实现O(1)的数据挪动</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//_hashMap中的key:key value：list的迭代器(LtIter)</span>\n\n    <span class=\"token keyword\">auto</span> ret <span class=\"token operator\">=</span> _hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//先查找是否在哈希表中</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">!=</span> _hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//更新当前元素到链表头部</span>\n        LtIter it<span class=\"token operator\">=</span> ret<span class=\"token operator\">-&gt;</span>second<span class=\"token punctuation\">;</span><span class=\"token comment\">//该元素在list中的位置</span>\n        _LRUList<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>_LRUList<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>_LRUList<span class=\"token punctuation\">,</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//把元素转移到链表头部,相当于头插,但是这这里不用更新迭代器,因为迭代器里面存的还是这个节点的指针</span>\n        \n        <span class=\"token comment\">//it:是链表的迭代器,调用operator-&gt;,返回数据的地址,list中的数据是pair,所以返回的是pair*</span>\n        <span class=\"token comment\">//pair&lt;int,int&gt;  我们要的是第二个成员的值  </span>\n        <span class=\"token comment\">//本来应该是it-&gt;-&gt;second 但是省略了一个箭头 </span>\n        <span class=\"token keyword\">return</span> it<span class=\"token operator\">-&gt;</span>second<span class=\"token punctuation\">;</span><span class=\"token comment\">//返回key对应的value </span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>    <span class=\"token comment\">//该元素不存在</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h3><a id=\"put_188\"></a>put函数的实现:</h3>\n<p>1)在map中查找key是否存在 .如果不存在,那就要新增</p>\n<ul><li> <p>1.判断是否满了,如果满了,需要先删除list中尾部的数据. 然后在哈希表中也要删除该元素</p> <p>2.然后把该该 {key-value}头插到链表中 , 在哈希表中新增键值对{key-该位置在链表的迭代器}</p> </li></ul>\n<p>注意点:判断容量的时候,最好不要使用求list的大小来判断, 因为C++中,这个方法可能不是O(1)</p>\n<p>2)如果已经存在了,那就修改数据, 然后把该key放到list的头部</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">auto</span> ret <span class=\"token operator\">=</span> _hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//新增</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> _hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//判断容量的时候,最好不要使用求list的大小来判断, 因为C++中,这个方法可能不是O(1)</span>\n        <span class=\"token comment\">//if(_capacity == _LRUList.size()) 不建议</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>_capacity <span class=\"token operator\">==</span> _hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//容量满了</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> back <span class=\"token operator\">=</span> _LRUList<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//取出链表尾部的数据</span>\n            <span class=\"token comment\">//在哈希表中删除该数据 + 在链表弹出该元素</span>\n            _hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>back<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//back.first是key</span>\n            _LRUList<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">//头插入当前元素 + 哈希表新增键值对{key-该元素在list的位置(链表头部)}</span>\n        _LRUList<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _hashMap<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _LRUList<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//修改节点的值 + 当前数据放到链表头部</span>\n        LtIter it <span class=\"token operator\">=</span> ret<span class=\"token operator\">-&gt;</span>second<span class=\"token punctuation\">;</span><span class=\"token comment\">//it是list的迭代器</span>\n        it<span class=\"token operator\">-&gt;</span>second <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span><span class=\"token comment\">//更新节点的值</span>\n        _LRUList<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>_LRUList<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>_LRUList<span class=\"token punctuation\">,</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//把当前节点转移到头部</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_231\"></a>整体代码:</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LRUCache</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">typedef</span> list<span class=\"token operator\">&lt;</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token double-colon punctuation\">::</span>iterator LtIter<span class=\"token punctuation\">;</span> <span class=\"token comment\">//list的迭代器重命名为LtIter</span>\n    <span class=\"token function\">LRUCache</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        _capacity <span class=\"token operator\">=</span> capacity<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//_hashMap中的key:key value：list的迭代器(LtIter)</span>\n        <span class=\"token keyword\">auto</span> ret <span class=\"token operator\">=</span> _hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//先查找是否在哈希表中</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">!=</span> _hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//更新当前元素到链表头部</span>\n            LtIter it<span class=\"token operator\">=</span> ret<span class=\"token operator\">-&gt;</span>second<span class=\"token punctuation\">;</span><span class=\"token comment\">//该元素在list中的位置</span>\n            _LRUList<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>_LRUList<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>_LRUList<span class=\"token punctuation\">,</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//把元素转移到链表头部</span>\n            \n            <span class=\"token comment\">//it:是链表的迭代器,it-&gt; 调用operator-&gt;,返回数据的地址,list中的数据是pair,所以返回的是pair*</span>\n            <span class=\"token comment\">//pair&lt;int,int&gt;  我们要的是第二个成员的值  </span>\n            <span class=\"token comment\">//本来应该是it-&gt;-&gt;second 但是省略了一个箭头 </span>\n            <span class=\"token keyword\">return</span> it<span class=\"token operator\">-&gt;</span>second<span class=\"token punctuation\">;</span><span class=\"token comment\">//返回key对应的value </span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>    <span class=\"token comment\">//该元素不存在</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">void</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">auto</span> ret <span class=\"token operator\">=</span> _hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//新增</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> _hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//判断容量的时候,最好不要使用求list的大小来判断, 因为C++中,这个方法可能不是O(1)</span>\n            <span class=\"token comment\">//if(_capacity == _LRUList.size()) 不建议</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>_capacity <span class=\"token operator\">==</span> _hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//容量满了</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> back <span class=\"token operator\">=</span> _LRUList<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//取出链表尾部的数据</span>\n                <span class=\"token comment\">//在哈希表中删除该数据 + 在链表弹出该元素</span>\n                _hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>back<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//back.first是key</span>\n                _LRUList<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">//头插入当前元素 + 哈希表新增键值对{key-该元素在list的位置(链表头部)}</span>\n            _LRUList<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            _hashMap<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _LRUList<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//修改节点的值 + 当前数据放到链表头部</span>\n            LtIter it <span class=\"token operator\">=</span> ret<span class=\"token operator\">-&gt;</span>second<span class=\"token punctuation\">;</span><span class=\"token comment\">//it是list的迭代器</span>\n            it<span class=\"token operator\">-&gt;</span>second <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span><span class=\"token comment\">//更新节点的值</span>\n            _LRUList<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>_LRUList<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>_LRUList<span class=\"token punctuation\">,</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//把当前节点转移到头部</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tunordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>LtIter<span class=\"token operator\">&gt;</span> _hashMap<span class=\"token punctuation\">;</span> <span class=\"token comment\">//key:值  Value:list的迭代器,即key对应在list的位置</span>\n\tlist<span class=\"token operator\">&lt;</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span> _LRUList<span class=\"token punctuation\">;</span>\n    size_t _capacity<span class=\"token punctuation\">;</span><span class=\"token comment\">//标记容量,满了就弹出链表尾的元素+在哈希表删除该元素的键值对</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache* obj = new LRUCache(capacity);\n * int param_1 = obj-&gt;get(key);\n * obj-&gt;put(key,value);\n */</span>\n</code></pre>\n<hr/>\n<p>其实这里有两种更新常用元素的方式:</p>\n<p>1.用内置的splice函数转移节点</p>\n<p>2.先保存节点信息,然后erase节点,然后push_front. 然后更新key对应的迭代器, 因为原迭代器指向我们删除的数据,迭代器失效了!!</p>\n<p><strong>使用unordered_map，让搜索效率达到O(1)<br/> 需要注意：这里最巧的设计就是将unordered_map的value type放成list&lt;pair&lt;int,int&gt;&gt;::iterator，因为这样，当get一个已有的值以后，就可以直接找到key在list中对应的iterator，然后将这个值移动到链表的头部保持LRU</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 如果key对应的值存在，就可以取出元素位置迭代器,这里就可以看出hashmap的value存的是list的 terator的好处：找到key</span>\n        <span class=\"token comment\">// 也就找到key存的值在list中的iterator，也就直接删除，再进行头插，实现O(1)的数据挪动</span>\n     <span class=\"token keyword\">auto</span> hashit <span class=\"token operator\">=</span> _hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hashit <span class=\"token operator\">!=</span> _hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">auto</span> listit <span class=\"token operator\">=</span> hashit<span class=\"token operator\">-&gt;</span>second<span class=\"token punctuation\">;</span><span class=\"token comment\">//list的迭代器</span>\n        pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> kv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>listit<span class=\"token punctuation\">;</span> <span class=\"token comment\">//调用operator* 返回节点数据的内容,list的数据是pair</span>\n\n        _list<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>listit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//通过迭代器删除该节点</span>\n        _list<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//然后头插</span>\n        _hashmap<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _list<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//更新迭代器的位置</span>\n        <span class=\"token keyword\">return</span> kv<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span><span class=\"token comment\">//返回key对应的value</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 1.如果没有数据则进行插入数据</span>\n    <span class=\"token comment\">// 2.如果有数据则进行数据更新</span>\n    <span class=\"token keyword\">auto</span> hashit <span class=\"token operator\">=</span> _hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hashit <span class=\"token operator\">==</span> _hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 插入数据时，如果数据已经达到上限，则删除链表头的数据和hashmap中的数据，两个删除操作都是O(1)</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>_list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;=</span> _capacity<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                _hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>_list<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//在哈希表中删除最后一个节点的信息,通过key删除. _list.back().first:最后一个节点的第一个成员就是key</span>\n                _list<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//尾删最后一个节点</span>\n            <span class=\"token punctuation\">}</span>\n\n        _list<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//头插</span>\n        _hashmap<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _list<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//新建键值对</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 更新数据  将数据挪动list前面</span>\n        <span class=\"token keyword\">auto</span> listit <span class=\"token operator\">=</span> hashit<span class=\"token operator\">-&gt;</span>second<span class=\"token punctuation\">;</span><span class=\"token comment\">//list的迭代器</span>\n        pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> kv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>listit<span class=\"token punctuation\">;</span><span class=\"token comment\">//调用operator* 返回节点数据的内容,list的数据是pair,先保留数据</span>\n        kv<span class=\"token punctuation\">.</span>second <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span><span class=\"token comment\">//更新值</span>\n\n        _list<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>listit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//通过迭代器删除该节点</span>\n        _list<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//头插</span>\n        _hashmap<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _list<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//更新迭代器的位置</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-07 09:24:22", "summary": "文章目录什么是的实现缓存：结构设计分析的函数介绍函数的实现函数的实现整体代码什么是是的缩写，意思是最近最少使用，它是一种替换算法什么是狭义的指的是位于和主存间的快速，通常它不像系统主存那样使用技术，而"}