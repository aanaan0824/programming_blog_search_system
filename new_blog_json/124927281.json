{"blogid": "124927281", "writerAge": "码龄3年", "writerBlogNum": "78", "writerCollect": "353", "writerComment": "105", "writerFan": "36", "writerGrade": "4级", "writerIntegral": "916", "writerName": "tianyvHon", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124927281.jpg", "writerRankTotal": "42386", "writerRankWeekly": "60361", "writerThumb": "107", "writerVisitNum": "93329", "blog_read_count": "1056", "blog_time": "于 2022-05-23 15:03:41 发布", "blog_title": "C++之函数参数默认值", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"centerC_0\"></a>\n<center>\n  C++之函数参数默认值\n </center></h1>\n<h2><a id=\"1_2\"></a>1.参数默认值的指定方式</h2>\n<p>在 <code>C++</code> 中，可以在函数声明时为参数提供一个默认值。这样在函数调用时，如果没有提供函数参数值，则使用默认值。</p>\n<p>e.g. 在函数声明时，指定参数默认值</p>\n<pre><code class=\"prism language-c++\">void Demo(int x = 0);\n\nint main(int argc, char* argv[])\n{\n    Demo();\t\t\t\t\t\t// 不用提供参数，会将 x = 0 的结果输出\n    return 0;\n}\n\nvoid Demo(int x)\n{\n    printf(\"x = %d\\r\\n\", x);\n}\n</code></pre>\n<p>e.g. 没有函数声明，直接在函数定义时指定参数默认值</p>\n<pre><code class=\"prism language-c++\">void Demo(int x = 5)\n{\n    printf(\"x = %d\\r\\n\", x);\n}\n\nint main(int argc, char* argv[])\n{\n    Demo();\n    return 0;\n}\n</code></pre>\n<blockquote>\n<p>注意：参数的默认值必须在函数声明中指定</p>\n</blockquote>\n<p>error e.g. 在函数的声明和定义中均指定默认值</p>\n<pre><code class=\"prism language-c++\">void Demo(int x = 0);\n\nint main(int argc, char* argv[])\n{\n    Demo();\n    return 0;\n}\n\nvoid Demo(int x = 10)\n{\n    printf(\"x = %d\\r\\n\", x);\n}\n</code></pre>\n<p>error e.g. 仅仅在函数的定义中指定默认值</p>\n<pre><code class=\"prism language-c++\">void Demo(int x);\n\nint main(int argc, char* argv[])\n{\n    Demo();\n    return 0;\n}\n\nvoid Demo(int x = 10)\n{\n    printf(\"x = %d\\r\\n\", x);\n}\n</code></pre>\n<h2><a id=\"2_74\"></a>2.参数默认值的指定规则</h2>\n<p>参数的默认值必须 <code>从右向左</code> 提供，即 <code>未指定默认值的参数不能出现在指定默认值参数的右边</code>，正确错误示例如下所示：</p>\n<pre><code class=\"prism language-c++\">// ok\nvoid Demo(int x, int y = 1; int z = 2);\n// error\nvoid Demo(int x = 0, int y, int z = 2);\n</code></pre>\n<p>为什么指定这个规则呢？</p>\n<p>在 <code>C++</code> 中调用函数时，对于没有指定默认值的参数，是可以不用对其传入参数的，而且不会报错。</p>\n<p>有一个如下代码所示的函数：</p>\n<pre><code class=\"prism language-c++\">void Demo(int x, int y = 1, int z = 2)\n{\n    printf(\"x = %d\\r\\n\", x);\n    printf(\"y = %d\\r\\n\", y);\n    printf(\"z = %d\\r\\n\", z);\n}\n</code></pre>\n<p>当调用这个函数时，可以执行下面的代码进行调用：</p>\n<pre><code class=\"prism language-c++\">int main(int argc, char* argv[])\n{\n    Demo(0);\n    return 0;\n}\n</code></pre>\n<p>上面所述的调用方式是没有错的，此时将 <code>0</code> 赋值给 <code>x</code>，参数 <code>y、z</code> 分别使用默认值。但是，如果函数是如下代码所示的：</p>\n<pre><code class=\"prism language-c++\">void Demo(int x = 0, int y, int z = 2)\n{\n    printf(\"x = %d\\r\\n\", x);\n    printf(\"y = %d\\r\\n\", y);\n    printf(\"z = %d\\r\\n\", z);\n}\n</code></pre>\n<p>当我们用上述同样的方式进行调用时：</p>\n<pre><code class=\"prism language-c++\">int main(int argc, char* argv[])\n{\n    Demo(0);\n    return 0;\n}\n</code></pre>\n<p>此时，代码是编译不过的，因为编译器默认把 <code>0</code> 赋值给 <code>x</code>，导致没有给参数 <code>y</code> 传入值而报错。到这里，应该就晓得制定这个规则的好处了，这样在调用函数的时候，只需要从左向右传入参数。如果未指定的默认值的参数出现在指定默认值参数的右边，那么就必须对指定默认值的参数传入参数。如下代码所示的调用方式均正确：</p>\n<pre><code class=\"prism language-c++\">int main(int argc, char* argv[])\n{\n    Demo(0);\n    Demo(0, 3);\n    Demo(0, 3, 4);\n    return 0;\n}\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-05-23 15:03:41", "summary": "之函数参数默认值参数默认值的指定方式在中，可以在函数声明时为参数提供一个默认值。这样在函数调用时，如果没有提供函数参数值，则使用默认值。在函数声明时，指定参数默认值不用提供参数，会将的结果输出没有函数"}