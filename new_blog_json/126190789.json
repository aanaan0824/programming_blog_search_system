{"blogid": "126190789", "writerAge": "码龄5年", "writerBlogNum": "405", "writerCollect": "1498", "writerComment": "643", "writerFan": "9202", "writerGrade": "6级", "writerIntegral": "6342", "writerName": "小钟要学习！！！", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126190789.jpg", "writerRankTotal": "2411", "writerRankWeekly": "214", "writerThumb": "908", "writerVisitNum": "170687", "blog_read_count": "401", "blog_time": "已于 2022-09-05 19:18:05 修改", "blog_title": "最新MySql8.27主从复制以及SpringBoot项目中的读写分离实战", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"MySql827SpringBoot_0\"></a>最新MySql8.27主从复制以及SpringBoot项目中的读写分离实战</h2>\n<h2><a id=\"1MySql_1\"></a>1、MySql主从复制</h2>\n<p>MySQL主从复制是一个异步的复制过程，底层是基于MySQL1数据库自带的<code>二进制日志功能</code>。就是一台或多台MySQL数据库（slave,即从库)从另一台ySQL数据库(master,即主库)进行日志的复制然后再解析日志并应用到自身，最终实现从库的数据和主库的数据保持一致。SQL主从复制是MySQL数据库自带功能，无需借助第三方工具。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\48f3c2fd65a44721a13594b6d28901dc.png\"/><br/> MySQL复制过程分成三步：<br/> 1、master将改变记录到二进制日志(binary log)<br/> 2、slave:将master的binary log拷贝到它的中继日志（relay log)<br/> 3、slave重做中继日志中的事件，将改变应用到自己的数据库中</p>\n<blockquote>\n<p>说明：下面的配置需要准备两台服务器并且都要安装有MySQL数据库，同时安装数据库的方式不同修改配置文件的位置也不同，需要更具自身电脑来查询</p>\n</blockquote>\n<h2><a id=\"2Master_11\"></a>2、配置-主库Master</h2>\n<p>修改MySql数据库的配置文件<code>/etc/my.cnf</code>，在配置日志文件中添加如下代码（不要第一行）</p>\n<pre><code class=\"prism language-cnf\">[mysqld]\nlog-bin=mysql-bin # [必须]启用二进制日志\nserver-id=100 # [必须]服务器唯一ID\n</code></pre>\n<p><code>修改后重启MySql服务</code></p>\n<p>登录MySQL执行下面的SQL语句</p>\n<pre><code class=\"prism language-csharp\">create user 'slave<span class=\"token char\">'@'</span><span class=\"token operator\">%</span>' IDENTIFIED WITH mysql_native_password BY '<span class=\"token number\">123456</span>'<span class=\"token punctuation\">;</span>\n\ngrant replication slave <span class=\"token keyword\">on</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> to 'slave<span class=\"token char\">'@'</span><span class=\"token operator\">%</span>'<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>注：上面SQL的作用是创建一个用户xiaoming,密码为Root@123456,并且给xiaoming用户授予REPLICATI0 N SLAVE<br/> 权限。常用于建立复制时所需要用到的用户权限，也就是slave必须被master授权具有该权限的用户，才能通过该用户复制。</p>\n<p>登录MySQL数据库，执行下面的SQL，记录下结果中的File和Position的值</p>\n<pre><code class=\"prism language-csharp\">show master status\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5c886e666ab54a1da73de7c1d4fe9c7f.png\"/></p>\n<p><code>注意：上面的SQL的作用是查看Master状态，执行完此SQL后不要再执行任何操作</code></p>\n<h2><a id=\"3Slave_41\"></a>3、配置-从库Slave</h2>\n<p>修改MySQL数据库中的配置文件<code>/etc/my.cnf</code></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">mysqld</span></span><span class=\"token punctuation\">]</span>\nserver<span class=\"token operator\">-</span>id<span class=\"token operator\">=</span><span class=\"token number\">101</span> # <span class=\"token punctuation\">[</span>必须<span class=\"token punctuation\">]</span>服务器唯一ID\n</code></pre>\n<p>重启MySQL服务</p>\n<pre><code class=\"prism language-sh\">systemctl restart mysql;\n</code></pre>\n<p>【重点】登录MySQL数据库，执行下面SQL语句（与配置主库最后查询的表格有关联）</p>\n<pre><code class=\"prism language-csharp\">change master <span class=\"token class-name\">to</span> master_host<span class=\"token operator\">=</span>'主库IP地址'<span class=\"token punctuation\">,</span>master_user<span class=\"token operator\">=</span>'slave'<span class=\"token punctuation\">,</span>master_password<span class=\"token operator\">=</span>'<span class=\"token number\">123456</span>'<span class=\"token punctuation\">,</span>master_log_file<span class=\"token operator\">=</span>'mysql<span class=\"token operator\">-</span>bin<span class=\"token punctuation\">.</span><span class=\"token number\">000001</span>'<span class=\"token punctuation\">,</span>master_log_pos<span class=\"token operator\">=</span><span class=\"token number\">653</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">stop</span> slave<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">start</span> slave<span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>注意：<br/> master_user：是在主库中创建的权限账户<br/> master_password：是创建账户的密码<br/> master_log_file：是创建主库最后执行的<code>show master status</code>SQL语句查询出来的【文件名称】<br/> master_log_pos：是文件的位置，与上一句查询同出一处</p>\n</blockquote>\n<p>登录MySQL数据库，执行下面的SQL查看从数据库的状态</p>\n<pre><code class=\"prism language-csharp\">show <span class=\"token class-name\">slave</span> status<span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2daad9a4aa1848a68c3ac9752d7b2543.png\"/></p>\n<h2><a id=\"3_77\"></a>3、主从复制测试</h2>\n<blockquote>\n<p>1、在主数据库下创建一个新的数据库，然后在从库中刷新，如果出现主库设置的数据库那么就是成功了</p>\n</blockquote>\n<h2><a id=\"4_82\"></a>4、读写分离案例</h2>\n<p>面对日益增加的系统访问量，数据库的吞吐量面临着巨大瓶颈。对于同一时刻有大量并发读操作和较少写操作类型的<br/> 应用系统来说，将数据库拆分为主库和从库，主库负责处理事务性的增删改操作，从库负责处理查询操作，能够有效<br/> 的避免由数据更新导致的行锁，使得整个系统的查询性能得到极大的改善。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\57874ffd029144c7a15b2bc8cb792e52.png\"/></p>\n<h3><a id=\"41ShardingJDBC_88\"></a>4.1、Sharding-JDBC框架介绍</h3>\n<p>Sharding-JDBC定位为轻量级Java框架，在Java的DBC层提供的额外服务。它使用客户端直连数据库，以jar包形式<br/> 提供服务，无需额外部署和依赖，可理解为增强版的DBC驱动，完全兼容JDBC和各种ORM框架。<br/> 使用Sharding-JDBC可以在程序中<code>轻松的实现数据库读写分离。</code></p>\n<ol><li>适用于任何基于JDBC的ORM框架，如：JPA,Hibernate,.Mybatis,Spring JDBC Template或直接使用DBC。</li><li>支持任何第三方的数据库连接池，如：DBCP,C3PO,BoneCP,Druid,HikariCP等。</li><li>支持任意实现DBC规范的数据库。目前支持MySQL,Oracle,SQLServer,PostgreSQL以及任何遵循SQL92标准<br/> 的数据库</li></ol>\n<h4><a id=\"springboot_98\"></a>springboot项目中只需要导入核心依赖即可</h4>\n<pre><code class=\"prism language-csharp\"><span class=\"token operator\">&lt;</span>dependency<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>groupId<span class=\"token operator\">&gt;</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shardingsphere<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>artifactId<span class=\"token operator\">&gt;</span>sharding<span class=\"token operator\">-</span>jdbc<span class=\"token operator\">-</span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>version<span class=\"token operator\">&gt;</span><span class=\"token number\">4.1</span><span class=\"token number\">.1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\t\n</code></pre>\n<blockquote>\n<p>案例要求需要完成上面的内容</p>\n</blockquote>\n<p><code>在主库中设置一个数据库以及一个user字段，并填写上几个简单字段方便后面代码的测试</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e94331682f3241d4ac2d84b52ec3cd16.png\"/></p>\n<blockquote>\n<p>主库主要是用来完成增、删、改操作<br/> 从库主要是用来完成查询操作</p>\n</blockquote>\n<p>案例目录结构<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e5b8934e578b46fb8961ca3dbed49711.png\"/></p>\n<blockquote>\n<p>基于MP快速开发，下面给出基本的控制器代码，在控制中进行二次开发</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zcl<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>conditions<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zcl<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zcl<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserService</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 项目名称：Sharding-JDBC\n * 描述：控制器\n *\n * @author zhong\n * @date 2022-08-06 20:36\n */</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserService</span> userService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * 新增用户\n     * @param user\n     * @return\n     */</span>\n    <span class=\"token annotation punctuation\">@PostMapping</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        userService<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 根据id删除\n     * @param id\n     */</span>\n    <span class=\"token annotation punctuation\">@DeleteMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/{id}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        userService<span class=\"token punctuation\">.</span><span class=\"token function\">removeById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 根据id修改用户\n     * @param user\n     * @return\n     */</span>\n    <span class=\"token annotation punctuation\">@PutMapping</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        userService<span class=\"token punctuation\">.</span><span class=\"token function\">updateById</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 根据id查询用户\n     * @param id\n     * @return\n     */</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/{id}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 条件查询\n     * @param user\n     * @return\n     */</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/list\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getId</span><span class=\"token punctuation\">,</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">,</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><mark>注意：一定需要在pom文件中引入核心的依赖包，否则无法完成下面application.yml配置的工作</mark></p>\n<pre><code class=\"prism language-yaml\"><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span>\n<span class=\"token key atrule\">mybatis-plus</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">configuration</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">log-impl</span><span class=\"token punctuation\">:</span> org.apache.ibatis.logging.stdout.StdOutImpl\n    <span class=\"token key atrule\">map-underscore-to-camel-case</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">global-config</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">db-config</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">id-type</span><span class=\"token punctuation\">:</span> ASSIGN_ID\n\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">shardingsphere</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">names</span><span class=\"token punctuation\">:</span> master<span class=\"token punctuation\">,</span>slave\n      <span class=\"token comment\"># 主数据源</span>\n      <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> com.alibaba.druid.pool.DruidDataSource\n        <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//192.168.26.131<span class=\"token punctuation\">:</span>3306/rw<span class=\"token punctuation\">?</span>serverTimezone=Asia/Shanghai<span class=\"token important\">&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span>\n        <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver\n        <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root\n        <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1234</span>\n      <span class=\"token comment\"># 从数据源</span>\n      <span class=\"token key atrule\">slave</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> com.alibaba.druid.pool.DruidDataSource\n        <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//192.168.26.131<span class=\"token punctuation\">:</span>13306/rw<span class=\"token punctuation\">?</span>serverTimezone=Asia/Shanghai<span class=\"token important\">&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span>\n        <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver\n        <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root\n        <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1234</span>\n    <span class=\"token key atrule\">masterslave</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># 读写分离设置【负载均衡策略】</span>\n      <span class=\"token key atrule\">load-balance-algorithm-type</span><span class=\"token punctuation\">:</span> round_robin\n      <span class=\"token comment\"># 最终的数据源名称</span>\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> dataSource\n      <span class=\"token comment\"># 主数据源名称【与上面对应】</span>\n      <span class=\"token key atrule\">master-data-source-name</span><span class=\"token punctuation\">:</span> master\n      <span class=\"token comment\"># 从数据源名称【与上面对应】</span>\n      <span class=\"token key atrule\">slave-data-source-names</span><span class=\"token punctuation\">:</span> slave\n    <span class=\"token key atrule\">props</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">sql</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">show</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 开启SQL显示，默认false</span>\n  <span class=\"token key atrule\">main</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">allow-bean-definition-overriding</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 允许bean覆盖</span>\n</code></pre>\n<p>在配置项中设置<mark>允许bean定义覆盖</mark>配置项<br/> <code>如果不进行设置就会出现启动项目报错，主要的原因是引两个jar包都会创建数据源对象，导致报错，开启bean配置覆盖就可以解决问题了</code></p>\n<blockquote>\n<p>如果启动报错：url连接不上的，请查看mysql数据库的版本以及连接mysql的具体信息，8.0以上的版本与老版本的连接路径上需要添加很多的参数</p>\n</blockquote>\n<p>启动控制台输出<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\90743540ffa641308201614f0d325009.png\"/></p>\n<h3><a id=\"_261\"></a>使用接口测试工具或插件来完成接口的调用测试是否使用哪一个数据源</h3>\n<blockquote>\n<p>我这里使用的是IDEA中的RestfulToolc插件<img alt=\"\" src=\"..\\..\\static\\image\\a38c245232a648a5a775f4103a075b7c.png\"/></p>\n</blockquote>\n<p>通过请求一个【查询】接口，然后断点查看一下，目前<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\56e2e83e46644ae493093a7671657be4.png\"/><br/> 放行查看具体的数据<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d4222b52b4334cf9a190b04d82eb2005.png\"/></p>\n<p>再次请求一个【添加或删除】完成主库操作<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c4ea243f96c5495e97cc632e051d1b1e.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-09-05 19:18:05", "summary": "最新主从复制以及项目中的读写分离实战、主从复制主从复制是一个异步的复制过程，底层是基于数据库自带的二进制日志功能。就是一台或多台数据库即从库从另一台数据库即主库进行日志的复制然后再解析日志并应用到自身"}