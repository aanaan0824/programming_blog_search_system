{"blogid": "117339795", "writerAge": "码龄2年", "writerBlogNum": "318", "writerCollect": "1765", "writerComment": "797", "writerFan": "4037", "writerGrade": "6级", "writerIntegral": "5141", "writerName": "行码棋", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_117339795.jpg", "writerRankTotal": "3250", "writerRankWeekly": "9976", "writerThumb": "806", "writerVisitNum": "139081", "blog_read_count": "3043", "blog_time": "已于 2022-06-18 22:15:23 修改", "blog_title": "【期末复习】c++知识点大回顾，八篇文章让你永不破防（一）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>c++期末复习知识点最全整理</strong></p>\n<p><strong>目录总览</strong></p>\n<p>💚 <a href=\"https://blog.csdn.net/qq_50285142/article/details/117339795?spm=1001.2014.3001.5501\" title=\"c++知识点复习最全整理（一）\">c++知识点复习最全整理（一）</a>🧡</p>\n<p>💚 <a href=\"https://blog.csdn.net/qq_50285142/article/details/117381481?spm=1001.2014.3001.5501\" title=\"c++知识点复习最全整理（二）\">c++知识点复习最全整理（二）</a>🧡</p>\n<p>💚 <a href=\"https://blog.csdn.net/qq_50285142/article/details/117453004?spm=1001.2014.3001.5501\" title=\"c++知识点复习最全整理（三）\">c++知识点复习最全整理（三）</a>🧡</p>\n<p>💚 <a href=\"https://blog.csdn.net/qq_50285142/article/details/117716767?spm=1001.2014.3001.5501\" title=\"c++知识点复习最全整理（四）\">c++知识点复习最全整理（四）</a>🧡</p>\n<p>💚 <a href=\"https://blog.csdn.net/qq_50285142/article/details/117885161?spm=1001.2014.3001.5501\" title=\"c++知识点复习最全整理（五）\">c++知识点复习最全整理（五）</a>🧡</p>\n<p>💚 <a href=\"https://blog.csdn.net/qq_50285142/article/details/118227246?spm=1001.2014.3001.5501\" title=\"c++知识点复习最全整理（六）\">c++知识点复习最全整理（六）</a>🧡</p>\n<p>💚 <a href=\"https://blog.csdn.net/qq_50285142/article/details/118249806?spm=1001.2014.3001.5501\" title=\"c++知识点复习最全整理（七）\">c++知识点复习最全整理（七）</a>🧡</p>\n<p>💚 <a href=\"https://blog.csdn.net/qq_50285142/article/details/118252885?spm=1001.2014.3001.5501\" title=\"c++知识点复习最全整理（八）\">c++知识点复习最全整理（八）</a>🧡</p>\n<p id=\"%E4%B8%80%E3%80%81%E7%AC%AC15%E7%AB%A0%20%E4%BB%8B%E7%BB%8D%E5%AF%B9%E8%B1%A1%E6%8A%80%E6%9C%AF-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%B8%80%E3%80%81%E7%AC%AC15%E7%AB%A0%20%E4%BB%8B%E7%BB%8D%E5%AF%B9%E8%B1%A1%E6%8A%80%E6%9C%AF\">一、 介绍对象技术</a></p>\n<p id=\"1.%E7%AE%80%E5%8D%95%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA-toc\" style=\"margin-left:80px;\"><a href=\"#1.%E7%AE%80%E5%8D%95%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA\">1.简单输入输出</a></p>\n<p id=\"2.c%2B%2B%E6%A0%87%E5%87%86%E5%BA%93-toc\" style=\"margin-left:80px;\"><a href=\"#2.c%2B%2B%E6%A0%87%E5%87%86%E5%BA%93\">2.c++标准库</a></p>\n<p id=\"3.%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:80px;\"><a href=\"#3.%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0\">3.内联函数</a></p>\n<p id=\"4.c%2B%2B%E5%85%B3%E9%94%AE%E5%AD%97-toc\" style=\"margin-left:80px;\"><a href=\"#4.c%2B%2B%E5%85%B3%E9%94%AE%E5%AD%97\">4.c++关键字</a></p>\n<p id=\"5.%E5%BC%95%E7%94%A8%E5%92%8C%E5%BC%95%E7%94%A8%E5%BD%A2%E5%8F%82-toc\" style=\"margin-left:80px;\"><a href=\"#5.%E5%BC%95%E7%94%A8%E5%92%8C%E5%BC%95%E7%94%A8%E5%BD%A2%E5%8F%82\">5.引用和引用形参</a></p>\n<p id=\"6.%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92-toc\" style=\"margin-left:80px;\"><a href=\"#6.%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92\">6.参数传递</a></p>\n<p id=\"7.%E4%B8%80%E5%85%83%E4%BD%9C%E7%94%A8%E5%9F%9F%E8%BF%90%E7%AE%97%E7%AC%A6%3A%3A-toc\" style=\"margin-left:80px;\"><a href=\"#7.%E4%B8%80%E5%85%83%E4%BD%9C%E7%94%A8%E5%9F%9F%E8%BF%90%E7%AE%97%E7%AC%A6%3A%3A\">7.一元作用域运算符::</a></p>\n<p id=\"8.%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD-toc\" style=\"margin-left:80px;\"><a href=\"#8.%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD\">8.函数重载</a></p>\n<p id=\"9.%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF-toc\" style=\"margin-left:80px;\"><a href=\"#9.%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF\">9.函数模板</a></p>\n<hr id=\"hr-toc\"/>\n<h2 id=\"%E4%B8%80%E3%80%81%E7%AC%AC15%E7%AB%A0%20%E4%BB%8B%E7%BB%8D%E5%AF%B9%E8%B1%A1%E6%8A%80%E6%9C%AF\">一、第15章 介绍对象技术</h2>\n<h3 id=\"1.%E7%AE%80%E5%8D%95%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA\">1.简单输入输出</h3>\n<pre><code class=\"language-cpp\">//求a和b两个数之和。\n// 求两数之和                     (本行是注释行)\n#include &lt;iostream&gt;          //预处理命令\nusing namespace std;         //使用命名空间std \nint main( )                        //主函数首部\n{                                     //函数体开始\n     int a,b,sum;                 //定义变量\n     cin&gt;&gt;a&gt;&gt;b;                //输入语句\n     sum = a + b;                   //赋值语句\n     cout&lt;&lt;″a + b =″&lt;&lt;sum&lt;&lt;endl;        //输出语句\n     return 0;    //如程序正常结束，向操作系统返回一个零值\n}                                    //函数结束</code></pre>\n<p><strong>注意：</strong> cin和cout都在命名空间std中，如果要直接使用，需要声明命名空间</p>\n<h3 id=\"2.c%2B%2B%E6%A0%87%E5%87%86%E5%BA%93\">2.c++标准库</h3>\n<p><strong>C++标准库头文件 ：省略了后缀.h</strong></p>\n<p>常用C++标准库头文件 : 标准输入输出函数的原型 : 数学库函数的原型 : 时间及日期函数原型以及类 : 测试字符属性函数原型 : 字符串处理函数的原型 : 文件操作函数原型 : 包含string类的定义</p>\n<p><strong>其实引用头文件还可以偷懒：</strong></p>\n<pre><code class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;//万能头文件  几乎包含所有的头文件</code></pre>\n<h3 id=\"3.%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0\">3.内联函数</h3>\n<p>在函数定义前面加关键字inline,相当于添加了函数的代码副本，再使用函数时，直接调用，减少了调用时间，相当于以空间换时间。 定义 ： 在定义函数前面添加inline</p>\n<pre><code class=\"language-cpp\">inline void display( int a )\n{\n}</code></pre>\n<ul><li> <p>inline 命令只是建议性的，不是强制性的。</p> </li><li> <p>当声明了inline的函数中有循环语句、switch语句或有递归定义，则函数不会进行代码置换。即此时inline 无效。</p> </li><li> <p>inline只用在函数代码很短的情形。</p> </li><li> <p>如果违背了上述注意事项中的任一项，编译程序就会无视关键字inline的存在，像处理一般函数一样处理，不生成扩展代码。</p> </li></ul>\n<p>因此，只有很简单而使用频率很高的函数才被说明为内联函数。</p>\n<p>内联函数会扩大目标代码，使用时要谨慎。</p>\n<h3 id=\"4.c%2B%2B%E5%85%B3%E9%94%AE%E5%AD%97\">4.c++关键字</h3>\n<p><img alt=\"\" height=\"548\" src=\"..\\..\\static\\image\\20210527224821773.png\" width=\"1200\"/></p>\n<p><img alt=\"\" height=\"543\" src=\"..\\..\\static\\image\\20210527224836622.png\" width=\"1200\"/></p>\n<p>在程序中要<strong>避免</strong>使用<strong><span style=\"color:#ff9900;\">与关键字相同</span></strong>的<strong>变量</strong>或<strong>函数</strong>。</p>\n<h3 id=\"5.%E5%BC%95%E7%94%A8%E5%92%8C%E5%BC%95%E7%94%A8%E5%BD%A2%E5%8F%82\">5.引用和引用形参</h3>\n<pre><code class=\"language-cpp\">int  &amp;b = a;     //声明b是a的引用（别名）</code></pre>\n<ul><li> <p>b并没有重新在内存中开辟单元，只是引用a的单元。</p> </li><li> <p>a与b在内存中<span style=\"color:#e6b223;\"><strong>占用同一地址</strong></span>，即<strong><span style=\"color:#a2e043;\">同一地址两个名字</span>。</strong></p> </li><li> <p>&amp;不是地址运算符，而是将b的类型声明为<span style=\"color:#fe2c24;\"><strong>int &amp;</strong></span></p> </li><li> <p>引用<span style=\"color:#38d8f0;\"><strong>必须在声明的同时进行初始化</strong></span></p> </li><li> <p>指针有自己的变量单元，可以被改变，引用一旦与某个变量联系起来，就将一直效忠于它，<strong>不得再作为其它变量的别名。</strong></p> </li><li> <p>指针是通过地址间接访问某个变量，而引用是通过<span style=\"color:#956fe7;\"><strong>别名直接访问某个变量</strong></span>。</p> </li></ul>\n<h3 id=\"6.%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92\">6.参数传递</h3>\n<p>可定义参数有默认值的函数，如果不传入参数，函数默认使用默认值，如果传入参数，函数使用传入的值。</p>\n<ul><li> <p><strong>默认参数必须写在一般参数的后面</strong></p> </li></ul>\n<pre><code class=\"language-cpp\">void sum(int a,int b=1){ }//正确\nvoid sum(int b=1,int a){ }//错误</code></pre>\n<h3 id=\"7.%E4%B8%80%E5%85%83%E4%BD%9C%E7%94%A8%E5%9F%9F%E8%BF%90%E7%AE%97%E7%AC%A6%3A%3A\">7.一元作用域运算符::</h3>\n<ul><li>作用：</li></ul>\n<p>局部作用域存在的变量和全局作用域存在的变量<span style=\"color:#fe2c24;\"><strong>同名</strong></span>时，<span style=\"color:#ffd900;\"><strong>想要访问全局作用域的变量</strong></span>，就需要这个符号了。</p>\n<p>下面代码示例：</p>\n<pre><code class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint n=55;\nint main()\n{\n    int n=5;\n    cout&lt;&lt;::n&lt;&lt;'\\n';\n    return 0; \n} </code></pre>\n<pre><code class=\"language-cpp\">//结果\n55</code></pre>\n<p>当局部作用域有与全局变量同名的变量，当访问这个变量时，<strong>默认</strong>会<strong>访问局部作用域的变量</strong>。</p>\n<p>如果要访问同同名的全局变量，需要加一元作用域运算符</p>\n<h3 id=\"8.%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD\">8.函数重载</h3>\n<p><strong>同名函数</strong>满足（必须是同名函数才能重载），<strong>const</strong>也可以作为重载函数的区分呀<s>（这个到后面的更新中会说明）</s></p>\n<p><span style=\"color:#a2e043;\"><strong>以下三个特点只要满足其中之一就是重载函数，但必须保持重载函数同名</strong></span></p>\n<ul><li> <p>形参个数不同</p> </li><li> <p>形参类型不同</p> </li><li> <p>形参顺序不同</p> </li></ul>\n<h3 id=\"9.%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF\">9.函数模板</h3>\n<p>函数处理的功能基本上一样时，但是参数的类型不一样，就会很苦恼，这时候函数模板就派上用场了。</p>\n<p>语法格式：</p>\n<pre><code class=\"language-cpp\">template &lt;class T&gt;//T代表一个待定的类型，会改变为传入的参数的类型\n返回值类型 函数名(参数列表)\n{\n函数体\n}</code></pre>\n<ul><li> <p>应用场景：</p> <p>除函数处理的<strong>数据类型</strong>不同外，<strong>其它均相同</strong></p> <p><span style=\"color:#fe2c24;\">函数体相同，参数个数相同</span>，可定义函数模板</p> </li></ul>\n<p>下面定义了求最大值的函数模板，可以参考一下。</p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\nusing  namespace  std;\ntemplate  &lt; typename T &gt;   // 模板声明：T是虚拟的类型\nT  max( T a, T  b, T c)            //定义通用的函数\n{ \n    T  x=a;\n    if (x&lt;b) x=b;\n    if (x&lt;c) x=c;\n    return x;\n}\nvoid main()\n{   \n    int     i1=2,    i2=3,    i3=5,    i;\n    double  d1=1.5,  d2=0.5,  d3=0.7,  d;\n    long    g1=123,  g2=234,  g3=345,  g;\n    i=max(i1, i2, i3);    //  T 就是 int\n    d=max(d1,d2, d3);     //  T 就是 double\n    g=max(g1,g2, g3);     //  T 就是 long\n    cout&lt;&lt;\"i=\"&lt;&lt;i&lt;&lt;endl;\n    cout&lt;&lt;\"d=\"&lt;&lt;d&lt;&lt;endl;\n    cout&lt;&lt;\"g=\"&lt;&lt;g&lt;&lt;endl;\n}\n​</code></pre>\n</div>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-06-18 22:15:23", "summary": "期末复习知识点最全整理目录总览知识点复习最全整理一知识点复习最全整理一知识点复习最全整理二知识点复习最全整理二知识点复习最全整理三知识点复习最全整理三知识点复习最全整理四知识点复习最全整理四知识点复习"}