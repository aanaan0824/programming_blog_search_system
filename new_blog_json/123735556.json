{"blogid": "123735556", "writerAge": "码龄4年", "writerBlogNum": "182", "writerCollect": "423", "writerComment": "89", "writerFan": "34", "writerGrade": "5级", "writerIntegral": "3483", "writerName": "Stephen·You", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123735556.jpg", "writerRankTotal": "6022", "writerRankWeekly": "167515", "writerThumb": "158", "writerVisitNum": "414589", "blog_read_count": "5955", "blog_time": "于 2022-04-13 17:53:52 发布", "blog_title": "List集合排序总结", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"main-toc-toc\" style=\"margin-left:0px;\"><a href=\"#main-toc\">问题现象</a></p>\n<p id=\"%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%EF%BC%9A-toc\" style=\"margin-left:0px;\"><a href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%EF%BC%9A\">解决方法：</a></p>\n<p id=\"1%E3%80%81Collections.sort(java%E5%AF%B9%E8%B1%A1)-toc\" style=\"margin-left:40px;\"><a href=\"#1%E3%80%81Collections.sort%28java%E5%AF%B9%E8%B1%A1%29\">1、Collections.sort(java对象)</a></p>\n<p style=\"margin-left:40px;\"><a href=\"#%C2%A02%E3%80%81Collections.sort%28java%E5%AF%B9%E8%B1%A1%E9%9B%86%E5%90%88%2C%20new%20Comparator%3C%3E%28%29%20%7B%7D%29%3B\"> 2、Collections.sort(java对象集合, new Comparator&lt;&gt;() {});</a></p>\n<p id=\"%E6%8B%93%E5%B1%95%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%8B%93%E5%B1%95%EF%BC%9A\">拓展：</a></p>\n<p id=\"3%E3%80%81list.stream().sorted()-toc\" style=\"margin-left:40px;\"><a href=\"#3%E3%80%81list.stream%28%29.sorted%28%29\">3、list.stream().sorted()</a></p>\n<p id=\"%E6%8B%93%E5%B1%95%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%8B%93%E5%B1%95%EF%BC%9A\">拓展：</a></p>\n<p id=\"%E6%80%BB%E7%BB%93%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%80%BB%E7%BB%93%EF%BC%9A\">总结：</a></p>\n<p id=\"4%E3%80%81List%3CJSONObject%3E%E6%8E%92%E5%BA%8F-toc\" style=\"margin-left:40px;\"><a href=\"#4%E3%80%81List%3CJSONObject%3E%E6%8E%92%E5%BA%8F\">4、List排序</a></p>\n<p id=\"4.1%E3%80%81List%3CJSONObject%3E%E7%9A%84%E5%8D%95%E6%9D%A1%E4%BB%B6%E5%8D%87%E5%BA%8F%EF%BC%88%E9%BB%98%E8%AE%A4%EF%BC%89%E6%8E%92%E5%BA%8F-toc\" style=\"margin-left:80px;\"><a href=\"#4.1%E3%80%81List%3CJSONObject%3E%E7%9A%84%E5%8D%95%E6%9D%A1%E4%BB%B6%E5%8D%87%E5%BA%8F%EF%BC%88%E9%BB%98%E8%AE%A4%EF%BC%89%E6%8E%92%E5%BA%8F\">4.1、List的单条件升序（默认）排序</a></p>\n<p id=\"4.2%E3%80%81List%3CJSONObject%3E%E7%9A%84%E5%8D%95%E6%9D%A1%E4%BB%B6%E9%99%8D%E5%BA%8F%E6%8E%92%E5%BA%8F-toc\" style=\"margin-left:80px;\"><a href=\"#4.2%E3%80%81List%3CJSONObject%3E%E7%9A%84%E5%8D%95%E6%9D%A1%E4%BB%B6%E9%99%8D%E5%BA%8F%E6%8E%92%E5%BA%8F\">4.2、List的单条件降序排序</a></p>\n<p id=\"%C2%A04.3%E3%80%81List%3CJSONObject%3E%E7%9A%84%E5%A4%9A%E6%9D%A1%E4%BB%B6%E6%8E%92%E5%BA%8F-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A04.3%E3%80%81List%3CJSONObject%3E%E7%9A%84%E5%A4%9A%E6%9D%A1%E4%BB%B6%E6%8E%92%E5%BA%8F\"> 4.3、List的多条件排序</a></p>\n<hr id=\"hr-toc\"/>\n<h1>问题现象</h1>\n<p>        今天在项目中相对List集合进行按需求的排序，因此打算总结一下各种情况下的List排序的代码写法？</p>\n<hr/>\n<h1 id=\"%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%EF%BC%9A\">解决方法：</h1>\n<p>自己总结了以下，list集合的排序主要有以下几种排序方式：</p>\n<h2 id=\"1%E3%80%81Collections.sort(java%E5%AF%B9%E8%B1%A1)\">1、Collections.sort(java对象)</h2>\n<p>        这种方式需要满足以下条件：<br/>         1.1、list集合中元素的数据类型是一个java对象；</p>\n<p>        1.2、该java对象必须实现Comparable类；</p>\n<p>        1.3、重写compareTo方法；</p>\n<p>        其中 compareTo 方法用于指示当前元素与其他元素的比较规则，<strong>一般都是以 a - b 的形式返回int类型，表示排序规则为从 a 到 b 排序</strong>，其逻辑理解就是：如果compareTo方法返回值小于0，则当前元素往前放，大于0，则往后放。</p>\n<p>Student实体类：</p>\n<pre><code class=\"language-java\">import lombok.AllArgsConstructor;\nimport lombok.Data;\n\n@Data\n@AllArgsConstructor\npublic class Student implements Comparable&lt;Student&gt; {\n\n\tprivate String name;\n\n\tprivate int age;\n\n\t@Override\n\tpublic int compareTo(Student stu) {\n\t\treturn getAge() - stu.getAge();\n\t}\n}</code></pre>\n<p>测试：</p>\n<pre><code class=\"language-java\">import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class TestUtil {\n\tpublic static void main(String[] args) {\n\t\tStudent stu1=new Student(\"小米\",1);\n\t\tStudent stu2=new Student(\"小王\",2);\n\t\tStudent stu3=new Student(\"小明\",3);\n\n\t\tList&lt;Student&gt; list=new ArrayList&lt;&gt;();\n\t\tlist.add(stu2);\n\t\tlist.add(stu1);\n\t\tlist.add(stu3);\n\n\t\tSystem.out.println(\"排序前：\");\n\t\tSystem.out.println(list);\n\n\t\tSystem.out.println(\"排序后：\");\n\t\tCollections.sort(list);\n\t\tSystem.out.println(list);\n\t}\n}</code></pre>\n<p>打印结果：</p>\n<p><img alt=\"\" height=\"109\" src=\"..\\..\\static\\image\\c6f03435cca94531ae184d2d4900bddb.png\" width=\"896\"/></p>\n<h2 id=\"%C2%A02%E3%80%81Collections.sort(java%E5%AF%B9%E8%B1%A1%E9%9B%86%E5%90%88%2C%20new%20Comparator%3C%3E()%20%7B%7D)%3B\"> 2、Collections.sort(java对象集合, new Comparator&lt;&gt;() {});</h2>\n<p>        这种方式与需要满足以下条件：<br/>         1.1、list集合中元素的数据类型是一个java对象；</p>\n<p>        1.2、重写compare方法；</p>\n<p><strong>Comparator 和 Comparable 的区别和理解：</strong></p>\n<p><strong>Comparator </strong>可以看成是外部比较器，因为它是先有list集合，然后再对list集合用比较器去排序；</p>\n<p><strong>Comparable </strong>可以看成是内部比较器，因为它是直接在java对象实现类添加了比较器，因此是先有比较器，然后再对list集合用比较器去排序；</p>\n<p>从上面两点，也可以推测出 <strong>Comparable 的排序算法的效率应该是比 Comparator 要高效的。</strong></p>\n<p>Comparator ：使用了匿名内部类来构建了一个Comparator比较器对象，从而实现排序，<strong>优点是：不需要在创建java对象时，实现 Comparable 接口，缺点是效率比 Comparable  要低一些。</strong></p>\n<p>Student实体类：</p>\n<pre><code class=\"language-java\">import lombok.AllArgsConstructor;\nimport lombok.Data;\n\n@Data\n@AllArgsConstructor\npublic class Student{\n\n\tprivate String name;\n\n\tprivate int age;\n\n}</code></pre>\n<p>测试：</p>\n<pre><code class=\"language-java\">import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class TestUtil {\n\tpublic static void main(String[] args) {\n\t\tStudent stu1 = new Student(\"小米\", 1);\n\t\tStudent stu2 = new Student(\"小王\", 2);\n\t\tStudent stu3 = new Student(\"小明\", 3);\n\n\t\tList&lt;Student&gt; list = new ArrayList&lt;&gt;();\n\t\tlist.add(stu2);\n\t\tlist.add(stu1);\n\t\tlist.add(stu3);\n\n\t\tSystem.out.println(\"排序前：\");\n\t\tSystem.out.println(list);\n\n\t\tSystem.out.println(\"排序后：\");\n\t\tCollections.sort(list, new Comparator&lt;Student&gt;() {\n\t\t\t@Override\n\t\t\tpublic int compare(Student stu1, Student stu2) {\n\t\t\t\treturn stu1.getAge() - stu2.getAge();\n\t\t\t}\n\t\t});\n\t\tSystem.out.println(list);\n\t}\n}</code></pre>\n<p>打印结果：</p>\n<p><img alt=\"\" height=\"103\" src=\"..\\..\\static\\image\\f589a7e80fa04148b779f2b68ff7deda.png\" width=\"901\"/></p>\n<hr/>\n<h2 id=\"%E6%8B%93%E5%B1%95%EF%BC%9A\">拓展：</h2>\n<p>        根据 <strong>JAVA8 的 lambda 表达式</strong>上面Compartor比较器的代码可以简写成以下代码：</p>\n<pre><code class=\"language-java\">\t\tCollections.sort(list, (stu11, stu21) -&gt; stu11.getAge() - stu21.getAge());\n</code></pre>\n<p>        再进一步简化成如下代码：</p>\n<pre><code class=\"language-java\">    Collections.sort(list, Comparator.comparingInt(Student::getAge));\n或\n    Collections.sort(list, Comparator.comparing(Student::getAge));</code></pre>\n<p>通过查询 comparing开头的方法，可以看见：</p>\n<p><img alt=\"\" height=\"130\" src=\"..\\..\\static\\image\\a8a06d9381e64efca55fcbd837db7fd5.png\" width=\"871\"/></p>\n<p>经过我的测试发现<strong>comparing</strong>兼容了下面三种基于整型数据的方法：</p>\n<p><img alt=\"\" height=\"81\" src=\"..\\..\\static\\image\\8d04925852d046ed8e80865d7010618d.png\" width=\"430\"/></p>\n<p>显然用comparing很省事，但是<strong>一般兼容性越高，效率也就越低，可以推测出comparing方法内部肯定是有一重判断了参数的数据类型的逻辑，这会降低代码执行效率；</strong>因此，如果是整型数据的话，建议使用上面三种与数据类型对应的方法，而如果是<strong>字符串的话，就使用comparing。</strong></p>\n<p>简化后：</p>\n<pre><code class=\"language-java\">import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class TestUtil {\n\tpublic static void main(String[] args) {\n\t\tStudent stu1 = new Student(\"小米\", 1);\n\t\tStudent stu2 = new Student(\"小王\", 2);\n\t\tStudent stu3 = new Student(\"小明\", 3);\n\n\t\tList&lt;Student&gt; list = new ArrayList&lt;&gt;();\n\t\tlist.add(stu2);\n\t\tlist.add(stu1);\n\t\tlist.add(stu3);\n\n\t\tSystem.out.println(\"排序前：\");\n\t\tSystem.out.println(list);\n\n\t\tSystem.out.println(\"排序后：\");\n\t\tCollections.sort(list, Comparator.comparingInt(Student::getAge));\n\t\tSystem.out.println(list);\n\t}\n}</code></pre>\n<p>打印结果：</p>\n<p><img alt=\"\" height=\"103\" src=\"..\\..\\static\\image\\f589a7e80fa04148b779f2b68ff7deda.png\" width=\"901\"/></p>\n<p>可以看出这是升序排序的，那么如何降序呢？</p>\n<p>由于降序=升序的倒序，所以可以使用倒序的方法【<strong>.reversed()</strong>】实现降序：</p>\n<pre><code class=\"language-java\">import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class TestUtil {\n\tpublic static void main(String[] args) {\n\t\tStudent stu1 = new Student(\"小米\", 1);\n\t\tStudent stu2 = new Student(\"小王\", 2);\n\t\tStudent stu3 = new Student(\"小明\", 3);\n\n\t\tList&lt;Student&gt; list = new ArrayList&lt;&gt;();\n\t\tlist.add(stu2);\n\t\tlist.add(stu1);\n\t\tlist.add(stu3);\n\n\t\tSystem.out.println(\"排序前：\");\n\t\tSystem.out.println(list);\n\n\t\tSystem.out.println(\"排序后：\");\n\t\tCollections.sort(list, Comparator.comparingInt(Student::getAge));\n\t\tSystem.out.println(list);\n        System.out.println(\"倒序后：\");\n\t\tCollections.sort(list, Comparator.comparingInt(Student::getAge).reversed());\n\t\tSystem.out.println(list);\n\t}\n}</code></pre>\n<p>打印结果：</p>\n<p><img alt=\"\" height=\"171\" src=\"..\\..\\static\\image\\d609ecec0dcc419890d16bfc4c2d0685.png\" width=\"914\"/></p>\n<p><strong>多条件排序：</strong></p>\n<p>Student实体类：</p>\n<pre><code class=\"language-java\">@Data\n@AllArgsConstructor\npublic class Student{\n\n\tprivate String name;\n\n\tprivate int age;\n\n\tprivate double grade;\n\n\tprivate int tall;\n\n}</code></pre>\n<p>测试：</p>\n<pre><code class=\"language-java\">import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class TestUtil {\n\tpublic static void main(String[] args) {\n\t\tStudent stu1 = new Student(\"小米\", 20, 95.0, 175);\n\t\tStudent stu2 = new Student(\"小王\", 20, 90.5, 175);\n\t\tStudent stu3 = new Student(\"小明\", 20, 90.0, 180);\n\n\t\tList&lt;Student&gt; list = new ArrayList&lt;&gt;();\n\t\tlist.add(stu2);\n\t\tlist.add(stu1);\n\t\tlist.add(stu3);\n\n\t\tSystem.out.println(\"排序前：\");\n\t\tSystem.out.println(list);\n\t\tSystem.out.println(\"排序后：\");\n\t\tCollections.sort(list, Comparator.comparingInt(Student::getTall));\n\t\tSystem.out.println(list);\n\t\tSystem.out.println(\"倒序后：\");\n\t\tCollections.sort(list, Comparator.comparingInt(Student::getTall).reversed());\n\t\tSystem.out.println(list);\n\n\t\tSystem.out.println(\"1.按年龄升序、分数升序、身高升序排序：\");\n\t\tCollections.sort(list, Comparator.comparingInt(Student::getAge).thenComparingDouble(Student::getGrade).thenComparingInt(Student::getTall));\n\t\tSystem.out.println(list);\n\t\tSystem.out.println(\"2.按年龄升序、分数升序、身高降序序排序：\");\n\t\tCollections.sort(list, Comparator.comparingInt(Student::getAge).thenComparingDouble(Student::getGrade).thenComparingInt(Student::getTall).reversed());\n\t\tSystem.out.println(list);\n\t\tSystem.out.println(\"3.按年龄升序、分数降序、身高升序排序：\");\n\t\tCollections.sort(list, Comparator.comparingInt(Student::getAge).thenComparingDouble(Student::getGrade).reversed().thenComparingInt(Student::getTall));\n\t\tSystem.out.println(list);\n\t\tSystem.out.println(\"4.按年龄升序、分数降序、身高降序序排序：\");\n\t\tCollections.sort(list, Comparator.comparingInt(Student::getAge).thenComparingDouble(Student::getGrade).reversed().thenComparingInt(Student::getTall).reversed());\n\t\tSystem.out.println(list);\n\t\tSystem.out.println(\"5.按年龄升序、身高升序、分数升序排序：\");\n\t\tCollections.sort(list, Comparator.comparingInt(Student::getAge).thenComparingInt(Student::getTall).thenComparingDouble(Student::getGrade));\n\t\tSystem.out.println(list);\n\t\tSystem.out.println(\"6.按年龄升序、身高升序、分数降序序排序：\");\n\t\tCollections.sort(list, Comparator.comparingInt(Student::getAge).thenComparingInt(Student::getTall).thenComparingDouble(Student::getGrade).reversed());\n\t\tSystem.out.println(list);\n\t\tSystem.out.println(\"7.按年龄升序、身高降序、分数升序排序：\");\n\t\tCollections.sort(list, Comparator.comparingInt(Student::getAge).thenComparingInt(Student::getTall).reversed().thenComparingDouble(Student::getGrade));\n\t\tSystem.out.println(list);\n\t\tSystem.out.println(\"8.按年龄升序、身高降序、分数降序序排序：\");\n\t\tCollections.sort(list, Comparator.comparing(Student::getAge).thenComparing(Student::getGrade).reversed().thenComparing(Student::getTall).reversed());\n\t\tSystem.out.println(list);\n\t}\n}</code></pre>\n<p>打印结果：</p>\n<p><img alt=\"\" height=\"525\" src=\"..\\..\\static\\image\\2e87938af1044ecd943e17a92a810b87.png\" width=\"1200\"/></p>\n<hr/>\n<h2 id=\"3%E3%80%81list.stream().sorted()\">3、list.stream().sorted()</h2>\n<p>JAVA8 之后，引入了<strong>stream流操作</strong>，可以极大提高集合的链式操作效率，关于stream流操作不太清楚的小伙伴，可以自行查阅资料，比较简单，这里就不再拓展了；</p>\n<p>这里要提的是<strong>stream流操作</strong>中的 <strong>sorted()方法可以用于排序，</strong>其逻辑原理和上面第二种 Comparator 的排序方式是一样的。</p>\n<p>这种方式与需要满足以下条件：<br/>         1.1、list集合中元素的数据类型是一个java对象；</p>\n<p>        1.2、引入stream流操作规范；</p>\n<p>优点：排序算法效率高。</p>\n<p> Student实体类：</p>\n<pre><code class=\"language-java\">import lombok.AllArgsConstructor;\nimport lombok.Data;\n\n@Data\n@AllArgsConstructor\npublic class Student{\n\n\tprivate String name;\n\n\tprivate int age;\n\n}</code></pre>\n<p>测试：</p>\n<pre><code class=\"language-java\">import java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class TestUtil {\n\tpublic static void main(String[] args) {\n\t\tStudent stu1 = new Student(\"小米\", 1);\n\t\tStudent stu2 = new Student(\"小王\", 2);\n\t\tStudent stu3 = new Student(\"小明\", 3);\n\n\t\tList&lt;Student&gt; list = new ArrayList&lt;&gt;();\n\t\tlist.add(stu2);\n\t\tlist.add(stu1);\n\t\tlist.add(stu3);\n\n\t\tSystem.out.println(\"排序前：\");\n\t\tSystem.out.println(list);\n\n\t\tSystem.out.println(\"排序后：\");\n\t\tlist = list.stream().sorted(Comparator.comparing(Student::getAge)).collect(Collectors.toList());\n\t\tSystem.out.println(list);\n\t}\n}</code></pre>\n<p>打印结果：</p>\n<p><img alt=\"\" height=\"103\" src=\"..\\..\\static\\image\\f589a7e80fa04148b779f2b68ff7deda.png\" width=\"901\"/></p>\n<p>同样的以使用倒序的方法【<strong>.reversed()</strong>】实现降序：</p>\n<pre><code class=\"language-java\">import java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class TestUtil {\n\tpublic static void main(String[] args) {\n\t\tStudent stu1 = new Student(\"小米\", 1);\n\t\tStudent stu2 = new Student(\"小王\", 2);\n\t\tStudent stu3 = new Student(\"小明\", 3);\n\n\t\tList&lt;Student&gt; list = new ArrayList&lt;&gt;();\n\t\tlist.add(stu2);\n\t\tlist.add(stu1);\n\t\tlist.add(stu3);\n\n\t\tSystem.out.println(\"排序前：\");\n\t\tSystem.out.println(list);\n\n\t\tSystem.out.println(\"排序后：\");\n\t\tlist = list.stream().sorted(Comparator.comparing(Student::getAge)).collect(Collectors.toList());\n\t\tSystem.out.println(list);\n\t\tSystem.out.println(\"倒序后：\");\n\t\tlist = list.stream().sorted(Comparator.comparing(Student::getAge).reversed()).collect(Collectors.toList());\n\t\tSystem.out.println(list);\n\t}\n}</code></pre>\n<p>打印结果：</p>\n<p><img alt=\"\" height=\"153\" src=\"..\\..\\static\\image\\95177d9472144dc4a78b3b0fc09c81b8.png\" width=\"911\"/></p>\n<hr/>\n<h2>拓展：</h2>\n<p>        很多使用不仅需要对单一字段进行排序，还需要多个字段排序，因此多条件排序很重要！</p>\n<p><strong>多条件排序：</strong></p>\n<p> Student实体类：</p>\n<pre><code class=\"language-java\">import lombok.AllArgsConstructor;\nimport lombok.Data;\n\n@Data\n@AllArgsConstructor\npublic class Student{\n\n\tprivate String name;\n\n\tprivate int age;\n\n\tprivate double grade;\n\n\tprivate int tall;\n\n}</code></pre>\n<p>测试：</p>\n<pre><code class=\"language-java\">import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class TestUtil {\n\tpublic static void main(String[] args) {\n\t\tStudent stu1 = new Student(\"小米\", 20, 95.0, 175);\n\t\tStudent stu2 = new Student(\"小王\", 20, 90.5, 175);\n\t\tStudent stu3 = new Student(\"小明\", 20, 90.0, 180);\n\n\t\tList&lt;Student&gt; list = new ArrayList&lt;&gt;();\n\t\tlist.add(stu2);\n\t\tlist.add(stu1);\n\t\tlist.add(stu3);\n\n\t\tSystem.out.println(\"排序前：\");\n\t\tSystem.out.println(list);\n\n\t\tSystem.out.println(\"1.按年龄升序、分数升序、身高升序排序：\");\n\t\tlist = list.stream().sorted(Comparator.comparingInt(Student::getAge).thenComparingDouble(Student::getGrade).thenComparingInt(Student::getTall)).collect(Collectors.toList());\n\t\tSystem.out.println(list);\n\t\tSystem.out.println(\"2.按年龄升序、分数升序、身高降序序排序：\");\n\t\tlist = list.stream().sorted(Comparator.comparingInt(Student::getAge).thenComparingDouble(Student::getGrade).thenComparingInt(Student::getTall).reversed()).collect(Collectors.toList());\n\t\tSystem.out.println(list);\n\t\tSystem.out.println(\"3.按年龄升序、分数降序、身高升序排序：\");\n\t\tlist = list.stream().sorted(Comparator.comparingInt(Student::getAge).thenComparingDouble(Student::getGrade).reversed().thenComparingInt(Student::getTall)).collect(Collectors.toList());\n\t\tSystem.out.println(list);\n\t\tSystem.out.println(\"4.按年龄升序、分数降序、身高降序序排序：\");\n\t\tlist = list.stream().sorted(Comparator.comparingInt(Student::getAge).thenComparingDouble(Student::getGrade).reversed().thenComparingInt(Student::getTall).reversed()).collect(Collectors.toList());\n\t\tSystem.out.println(list);\n\t\tSystem.out.println(\"5.按年龄升序、身高升序、分数升序排序：\");\n\t\tlist = list.stream().sorted(Comparator.comparingInt(Student::getAge).thenComparingInt(Student::getTall).thenComparingDouble(Student::getGrade)).collect(Collectors.toList());\n\t\tSystem.out.println(list);\n\t\tSystem.out.println(\"6.按年龄升序、身高升序、分数降序序排序：\");\n\t\tlist = list.stream().sorted(Comparator.comparingInt(Student::getAge).thenComparingInt(Student::getTall).thenComparingDouble(Student::getGrade).reversed()).collect(Collectors.toList());\n\t\tSystem.out.println(list);\n\t\tSystem.out.println(\"7.按年龄升序、身高降序、分数升序排序：\");\n\t\tlist = list.stream().sorted(Comparator.comparingInt(Student::getAge).thenComparingInt(Student::getTall).reversed().thenComparingDouble(Student::getGrade)).collect(Collectors.toList());\n\t\tSystem.out.println(list);\n\t\tSystem.out.println(\"8.按年龄升序、身高降序、分数降序序排序：\");\n\t\tlist = list.stream().sorted(Comparator.comparingInt(Student::getAge).thenComparingInt(Student::getTall).reversed().thenComparingDouble(Student::getGrade).reversed()).collect(Collectors.toList());\n\t\tSystem.out.println(list);\n\t}\n}</code></pre>\n<p>打印结果：</p>\n<p>​​​​​​​<img alt=\"\" height=\"478\" src=\"..\\..\\static\\image\\58676d2e776549ffbd2c10a181e456de.png\" width=\"1200\"/></p>\n<hr/>\n<h2 id=\"%E6%80%BB%E7%BB%93%EF%BC%9A\">总结：</h2>\n<p><strong>        推荐使用第三种排序方法，因为stream流操作排序效率最高</strong>。</p>\n<hr/>\n<h2 id=\"4%E3%80%81List%3CJSONObject%3E%E6%8E%92%E5%BA%8F\">4、List&lt;JSONObject&gt;排序</h2>\n<p>这个其实才是这篇文章的重点，很多时候为了方便，我们会用到JSONObject或者Map对象去接收数据库返回的结果集；</p>\n<p>        1、例如当数据库表过多的时候，我们并不想为每个表都创建一个java实体类去接收数据；</p>\n<p>        2、尤其是当我们想动态的查询出自己想要的数据，而结果中的字段名很可能并不是固定的；</p>\n<p>        3、当然还有很多其他的复杂情况。。。</p>\n<p>当我们使用的这一类不是由java实体类组成的List集合的时候，上面的那三种方法显然是未必适用的，于是为了应对这种情况下的排序需求，经过我的测试，总结出了下面3种情况和方法：</p>\n<h3 id=\"4.1%E3%80%81List%3CJSONObject%3E%E7%9A%84%E5%8D%95%E6%9D%A1%E4%BB%B6%E5%8D%87%E5%BA%8F%EF%BC%88%E9%BB%98%E8%AE%A4%EF%BC%89%E6%8E%92%E5%BA%8F\">4.1、List&lt;JSONObject&gt;的单条件升序（默认）排序</h3>\n<p>大多数情况下，我们需要排序的时候，都是单条件排序，所以这是最基本的排序方法，基本上和<strong>第三种排序方式（list.stream().sorted()）</strong>中的单条件排序的写法很类似，所以比较简单。</p>\n<p>测试：</p>\n<pre><code class=\"language-java\">public class TestDemoUtil {\n\tpublic static void main(String[] args) {\n\t\tList&lt;JSONObject&gt; list = new ArrayList&lt;&gt;();\n\t\tJSONObject jsonObject1 = new JSONObject();\n\t\tJSONObject jsonObject2 = new JSONObject();\n\t\tJSONObject jsonObject3 = new JSONObject();\n\n\t\tjsonObject1.put(\"name\", \"小米\");\n\t\tjsonObject1.put(\"age\", 20);\n\t\tjsonObject1.put(\"grade\", 95.0);\n\t\tjsonObject1.put(\"tail\", 175);\n\n\t\tjsonObject2.put(\"name\", \"小王\");\n\t\tjsonObject2.put(\"age\", 20);\n\t\tjsonObject2.put(\"grade\", 90.5);\n\t\tjsonObject2.put(\"tail\", 175);\n\n\t\tjsonObject3.put(\"name\", \"小明\");\n\t\tjsonObject3.put(\"age\", 20);\n\t\tjsonObject3.put(\"grade\", 90.0);\n\t\tjsonObject3.put(\"tail\", 180);\n\t\tlist.add(jsonObject1);\n\t\tlist.add(jsonObject2);\n\t\tlist.add(jsonObject3);\n\n\t\tSystem.out.println(\"排序前：\");\n\t\tSystem.out.println(list);\n\t\tSystem.out.println(\"按成绩升序排序后：\");\n\t\tlist = list.stream().sorted(Comparator.comparingDouble(o -&gt; o.getDoubleValue(\"grade\"))).collect(Collectors.toList());\n\t\tSystem.out.println(list);\n\t}\n}</code></pre>\n<p>打印结果：</p>\n<p><img alt=\"\" height=\"243\" src=\"..\\..\\static\\image\\19c5a474936a430abe971a452027720e.png\" width=\"1200\"/></p>\n<h3 id=\"4.2%E3%80%81List%3CJSONObject%3E%E7%9A%84%E5%8D%95%E6%9D%A1%E4%BB%B6%E9%99%8D%E5%BA%8F%E6%8E%92%E5%BA%8F\">4.2、List&lt;JSONObject&gt;的单条件降序排序</h3>\n<p>        需要注意的是，和上面提到的<strong>第三种排序方式（list.stream().sorted()）</strong>不同，在对集合进行降序排序的时候，无法直接在链式链式调用后面加上【<strong>.reversed()</strong>】来实现降序了；经过测试发现<strong>list.stream().sorted()对于JSONObject这一类非自定义的java对象无法完美是使用链式调用了</strong>，原因<strong>很可能是因为JSONObject这一类对象没有确定属性的getter/setter方法</strong>，所以下面这种写法会在编译的时候报错：</p>\n<pre><code class=\"language-java\">\t\tlist = list.stream().sorted(Comparator.comparingDouble(o -&gt; o.getDoubleValue(\"grade\")).reversed()).collect(Collectors.toList());\n</code></pre>\n<p>猜测原因应该是<strong>因为在链式调用中 getDoubleValue 会被识别为 JSONObject对象中 doubleValue属性对应的 getter方法，而该对象根本没有这个属性，所以就报错了，所以还是那句话链式调用的规则，并不适用于没有确定属性的这一类对象。</strong></p>\n<p>所以可以使用下面这种写法来解决降序的问题：</p>\n<p>测试：</p>\n<pre><code class=\"language-java\">public class TestDemoUtil {\n\tpublic static void main(String[] args) {\n\t\tList&lt;JSONObject&gt; list = new ArrayList&lt;&gt;();\n\t\tJSONObject jsonObject1 = new JSONObject();\n\t\tJSONObject jsonObject2 = new JSONObject();\n\t\tJSONObject jsonObject3 = new JSONObject();\n\n\t\tjsonObject1.put(\"name\", \"小米\");\n\t\tjsonObject1.put(\"age\", 20);\n\t\tjsonObject1.put(\"grade\", 95.0);\n\t\tjsonObject1.put(\"tail\", 175);\n\n\t\tjsonObject2.put(\"name\", \"小王\");\n\t\tjsonObject2.put(\"age\", 20);\n\t\tjsonObject2.put(\"grade\", 90.5);\n\t\tjsonObject2.put(\"tail\", 175);\n\n\t\tjsonObject3.put(\"name\", \"小明\");\n\t\tjsonObject3.put(\"age\", 20);\n\t\tjsonObject3.put(\"grade\", 90.0);\n\t\tjsonObject3.put(\"tail\", 180);\n\t\tlist.add(jsonObject1);\n\t\tlist.add(jsonObject2);\n\t\tlist.add(jsonObject3);\n\n\t\tSystem.out.println(\"排序前：\");\n\t\tSystem.out.println(list);\n\t\tSystem.out.println(\"按成绩升序排序后：\");\n\t\tlist = list.stream().sorted(Comparator.comparingDouble(o -&gt; o.getDoubleValue(\"grade\"))).collect(Collectors.toList());\n\t\tSystem.out.println(list);\n\t\tSystem.out.println(\"按成绩降序排序后：\");\n\t\tlist = list.stream().sorted((o1, o2) -&gt; o2.getDoubleValue(\"grade\") - o1.getDoubleValue(\"grade\") &gt; 0 ? 1 : -1).collect(Collectors.toList());\n\t\tSystem.out.println(list);\n\t}\n}</code></pre>\n<p>打印结果：</p>\n<p><img alt=\"\" height=\"259\" src=\"..\\..\\static\\image\\948c80f6f3034012834bd17633e2e359.png\" width=\"1200\"/></p>\n<h3 id=\"%C2%A04.3%E3%80%81List%3CJSONObject%3E%E7%9A%84%E5%A4%9A%E6%9D%A1%E4%BB%B6%E6%8E%92%E5%BA%8F\"> 4.3、List&lt;JSONObject&gt;的多条件排序</h3>\n<p>多条件排序是重点，虽然很多时候我们只需要单条件排序；但多条件排序的写法才是重点，因为这种写法是最基础的，也是兼容最强的。</p>\n<p>测试：</p>\n<pre><code class=\"language-java\">public class TestDemoUtil {\n\tpublic static void main(String[] args) {\n\t\tList&lt;JSONObject&gt; list = new ArrayList&lt;&gt;();\n\t\tJSONObject jsonObject1 = new JSONObject();\n\t\tJSONObject jsonObject2 = new JSONObject();\n\t\tJSONObject jsonObject3 = new JSONObject();\n\n\t\tjsonObject1.put(\"name\", \"小米\");\n\t\tjsonObject1.put(\"age\", 20);\n\t\tjsonObject1.put(\"grade\", 95.0);\n\t\tjsonObject1.put(\"tail\", 175);\n\n\t\tjsonObject2.put(\"name\", \"小王\");\n\t\tjsonObject2.put(\"age\", 20);\n\t\tjsonObject2.put(\"grade\", 90.5);\n\t\tjsonObject2.put(\"tail\", 175);\n\n\t\tjsonObject3.put(\"name\", \"小明\");\n\t\tjsonObject3.put(\"age\", 20);\n\t\tjsonObject3.put(\"grade\", 90.0);\n\t\tjsonObject3.put(\"tail\", 180);\n\t\tlist.add(jsonObject1);\n\t\tlist.add(jsonObject2);\n\t\tlist.add(jsonObject3);\n\n\t\tSystem.out.println(\"排序前：\");\n\t\tSystem.out.println(list);\n\t\tSystem.out.println(\"按成绩排序后：\");\n\t\tlist = list.stream().sorted(Comparator.comparingDouble(o -&gt; o.getDoubleValue(\"grade\"))).collect(Collectors.toList());\n\t\tSystem.out.println(list);\n\n\t\tSystem.out.println(\"1.按年龄升序、分数升序、身高升序排序：\");\n\t\tlist = list.stream().sorted((o1, o2) -&gt; {\n\t\t\tint value = o1.getIntValue(\"age\") - o2.getIntValue(\"age\");\n\t\t\tif ( value == 0 ) {\n\t\t\t\tdouble v = o1.getDoubleValue(\"grade\") - o2.getDoubleValue(\"grade\");\n\t\t\t\tif ( v == 0.0 ) {\n\t\t\t\t\treturn o1.getIntValue(\"tail\") - o2.getIntValue(\"tail\");\n\t\t\t\t}\n\t\t\t\treturn v &gt; 0.0 ? 1 : -1;\n\t\t\t}\n\t\t\treturn value;\n\t\t}).collect(Collectors.toList());\n\t\tSystem.out.println(list);\n\n\t\tSystem.out.println(\"2.按年龄升序、分数降序、身高升序排序：\");\n\t\tlist = list.stream().sorted((o1, o2) -&gt; {\n\t\t\tint value = o1.getIntValue(\"age\") - o2.getIntValue(\"age\");\n\t\t\tif ( value == 0 ) {\n\t\t\t\tdouble v = o2.getDoubleValue(\"grade\") - o1.getDoubleValue(\"grade\");\n\t\t\t\tif ( v == 0.0 ) {\n\t\t\t\t\treturn o1.getIntValue(\"tail\") - o2.getIntValue(\"tail\");\n\t\t\t\t}\n\t\t\t\treturn v &gt; 0.0 ? 1 : -1;\n\t\t\t}\n\t\t\treturn value;\n\t\t}).collect(Collectors.toList());\n\t\tSystem.out.println(list);\n\n\t\tSystem.out.println(\"3.按年龄升序、身高升序、分数降序排序：\");\n\t\tlist = list.stream().sorted((o1, o2) -&gt; {\n\t\t\tint value = o1.getIntValue(\"age\") - o2.getIntValue(\"age\");\n\t\t\tif ( value == 0 ) {\n\t\t\t\tvalue = o1.getIntValue(\"tail\") - o2.getIntValue(\"tail\");\n\t\t\t\tif ( value == 0 ) {\n\t\t\t\t\treturn o2.getDoubleValue(\"grade\") - o1.getDoubleValue(\"grade\") &gt; 0.0 ? 1 : -1;\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\treturn value;\n\t\t}).collect(Collectors.toList());\n\t\tSystem.out.println(list);\n\t}\n}</code></pre>\n<p>上面的代码可以通过提取公共方法，来提高代码复用率，由于和文章主题无关，这里就不进一步优化了。</p>\n<p>打印结果：</p>\n<p> </p>\n<p><img alt=\"\" height=\"286\" src=\"..\\..\\static\\image\\65875712ac51417380c5d313aba1fa76.png\" width=\"1200\"/></p>\n</div>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-04-13 17:53:52", "summary": "目录问题现象解决方法：、对象、对象集合拓展：、拓展：总结：、排序、的单条件升序默认排序、的单条件降序排序、的多条件排序问题现象今天在项目中相对集合进行按需求的排序，因此打算总结一下各种情况下的排序的代"}