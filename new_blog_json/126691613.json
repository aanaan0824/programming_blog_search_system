{"blogid": "126691613", "writerAge": "码龄1年", "writerBlogNum": "57", "writerCollect": "298", "writerComment": "242", "writerFan": "188", "writerGrade": "4级", "writerIntegral": "1226", "writerName": "世真", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126691613.jpg", "writerRankTotal": "15060", "writerRankWeekly": "3163", "writerThumb": "302", "writerVisitNum": "26763", "blog_read_count": "689", "blog_time": "于 2022-09-04 17:09:16 发布", "blog_title": "Python入门 —— 从零基础到调包侠", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#hello_world_1\">hello world</a></li><li><a href=\"#_14\">常量和表达式</a></li><li><a href=\"#_35\">变量</a></li><li><ul><li><a href=\"#_37\">使用</a></li><li><a href=\"#_68\">类型</a></li><li><ul><li><a href=\"#int_86\">int整型</a></li><li><a href=\"#float_90\">float浮点型</a></li><li><a href=\"#str_94\">str字符串</a></li><li><a href=\"#bool_151\">bool布尔型</a></li></ul>\n</li><li><a href=\"#_155\">动态类型特性</a></li></ul>\n</li><li><a href=\"#_186\">注释</a></li><li><ul><li><a href=\"#_188\">行注释</a></li><li><a href=\"#_196\">文档字符串</a></li></ul>\n</li><li><a href=\"#_216\">输入输出</a></li><li><ul><li><a href=\"#print__218\">print() 格式控制</a></li><li><a href=\"#input_259\">input()</a></li></ul>\n</li><li><a href=\"#_310\">运算符</a></li><li><ul><li><a href=\"#_312\">算术运算符</a></li><li><a href=\"#_339\">比较运算符</a></li><li><a href=\"#_382\">逻辑运算符</a></li><li><a href=\"#_392\">赋值运算符</a></li><li><a href=\"#_431\">其他</a></li></ul>\n</li><li><a href=\"#_441\">条件语句</a></li><li><ul><li><a href=\"#if_else_443\">if else缩进与代码块</a></li><li><a href=\"#_501\">练习</a></li><li><a href=\"#_515\">空语句</a></li></ul>\n</li><li><a href=\"#_537\">循环</a></li><li><ul><li><a href=\"#while__539\">while 循环</a></li><li><a href=\"#for__548\">for 循环</a></li></ul>\n</li><li><a href=\"#_595\">函数</a></li><li><ul><li><a href=\"#_597\">定义函数的格式</a></li><li><a href=\"#_618\">调用</a></li><li><a href=\"#_636\">返回值</a></li><li><a href=\"#_661\">作用域</a></li><li><a href=\"#_695\">关键字传参</a></li></ul>\n</li><li><a href=\"#_717\">列表和元祖</a></li><li><ul><li><a href=\"#_727\">创建列表</a></li><li><a href=\"#_768\">下标访问</a></li><li><a href=\"#_811\">切片操作</a></li><li><a href=\"#_865\">列表的遍历</a></li><li><a href=\"#_906\">列表的插入</a></li><li><a href=\"#_935\">列表的查找</a></li><li><a href=\"#_969\">列表的删除</a></li><li><a href=\"#_1002\">列表的拼接</a></li><li><a href=\"#_1050\">元祖操作</a></li></ul>\n</li><li><a href=\"#_1107\">字典</a></li><li><ul><li><a href=\"#_1111\">创建字典</a></li><li><a href=\"#_key_1144\">查找 key</a></li><li><a href=\"#_1181\">字典的新增修改删除</a></li><li><a href=\"#_1208\">字典的遍历</a></li><li><a href=\"#_key__1273\">合法的 key 类型</a></li></ul>\n</li><li><a href=\"#_1302\">文件操作</a></li><li><ul><li><a href=\"#_1304\">打开文件</a></li><li><a href=\"#_1337\">关闭文件</a></li><li><a href=\"#_1347\">写文件</a></li><li><a href=\"#_1361\">读文件</a></li><li><a href=\"#_1419\">上下文管理器</a></li></ul>\n</li><li><a href=\"#_1437\">库</a></li><li><ul><li><a href=\"#_1448\">标准库</a></li><li><a href=\"#_1454\">使用案例</a></li><li><ul><li><a href=\"#_1456\">日期计算</a></li><li><a href=\"#LeetCode__1493\">LeetCode 翻转单词顺序</a></li><li><a href=\"#LeetCode__1544\">LeetCode 旋转字符串</a></li><li><a href=\"#LeetCode__1583\">LeetCode 统计是给定字符串前缀的字符串数目</a></li><li><a href=\"#_1634\">文件搜索工具</a></li></ul>\n</li><li><a href=\"#_1675\">第三方库</a></li><li><ul><li><a href=\"#_pip_1679\">使用 pip</a></li></ul>\n</li><li><a href=\"#_1717\">使用案例</a></li><li><ul><li><a href=\"#_1719\">生成二维码</a></li><li><a href=\"#Excel__1750\">Excel 操作</a></li><li><a href=\"#_1792\">学生管理系统</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_1917\">结语</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"hello_world_1\"></a>hello world</h1>\n<p>使用 <code>print()</code> 这个内建函数可以直接打印内容，不需要像C/C++那样包含头文件，写 <code>main</code> 函数，也不需要在语句的末尾加 <code>;</code></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># hello world</span>\n</code></pre>\n<p>如果你在末尾加了 <code>;</code>，那也不算错。如果把多个语句写在同一行，语句之间必须加 <code>;</code>（不推荐）</p>\n<h1><a id=\"_14\"></a>常量和表达式</h1>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span> <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span> <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">//</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># 3</span>\n<span class=\"token comment\"># 0.33333333333333337</span>\n<span class=\"token comment\"># 0</span>\n</code></pre>\n<p>在 Python 中，2 / 3 是 0.66666，而不是0，它不像 C++ / Java 整数除以整数还是整数，舍弃小数部分。</p>\n<p>在 Python 中，舍弃小数可以用地板除法（取整除法） <code>//</code>， <code>2 // 3</code> 结果就为 0 。</p>\n<ul><li>形如 <code>1 + 5 - 3</code> 这样的称为<strong>表达式</strong>，这个表达式的运算结果，称为表达式的<strong>返回值</strong></li><li>1 2 3 这样的数字，称为 <strong>字面值常量</strong></li><li>+ - * / 称为运算符（操作符）</li></ul>\n<h1><a id=\"_35\"></a>变量</h1>\n<h2><a id=\"_37\"></a>使用</h2>\n<p>Python 定义变量时，不需要显式声明类型。而只是依靠初始化语句，根据初始化的值的类型来确定。</p>\n<p>如我们要计算方差</p>\n<p>计算方差的公式：<br/> <span class=\"katex--display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          σ\n         \n         \n          2\n         \n        \n        \n         =\n        \n        \n         \n          \n           ∑\n          \n          \n           (\n          \n          \n           X\n          \n          \n           −\n          \n          \n           μ\n          \n          \n           \n            )\n           \n           \n            2\n           \n          \n         \n         \n          N\n         \n        \n       \n       \n         \\sigma^2=\\frac{\\sum(X-\\mu)^2}{N} \n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.8641em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right: 0.0359em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.8641em;\"><span class=\"\" style=\"top: -3.113em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 2.1771em; vertical-align: -0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 1.4911em;\"><span class=\"\" style=\"top: -2.314em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right: 0.109em;\">N</span></span></span><span class=\"\" style=\"top: -3.23em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width: 0.04em;\"></span></span><span class=\"\" style=\"top: -3.677em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mop op-symbol small-op\" style=\"position: relative; top: 0em;\">∑</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right: 0.0785em;\">X</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.8141em;\"><span class=\"\" style=\"top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.686em;\"><span class=\"\"></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></span><br/> <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        \n         σ\n        \n        \n         2\n        \n       \n      \n      \n       \\sigma^2\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right: 0.0359em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.8141em;\"><span class=\"\" style=\"top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span> 为总体方差，<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        X\n       \n      \n      \n       X\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0785em;\">X</span></span></span></span></span> 为变量，<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        μ\n       \n      \n      \n       \\mu\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.625em; vertical-align: -0.1944em;\"></span><span class=\"mord mathnormal\">μ</span></span></span></span></span> 为总体均值，<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        N\n       \n      \n      \n       N\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.109em;\">N</span></span></span></span></span> 为总体例数。</p>\n<p>因为要用每个数据都去减平均值，所以平均值是需要多次使用的，可以定义一个变量保存起来：</p>\n<pre><code class=\"prism language-python\">avg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">12.6</span> <span class=\"token operator\">+</span> <span class=\"token number\">65.9</span> <span class=\"token operator\">+</span> <span class=\"token number\">45</span> <span class=\"token operator\">+</span> <span class=\"token number\">47.1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">4</span>\ntotal <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">12.6</span> <span class=\"token operator\">-</span> avg<span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">65.9</span> <span class=\"token operator\">-</span> avg<span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">45</span> <span class=\"token operator\">-</span> avg<span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">47.1</span> <span class=\"token operator\">-</span> avg<span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> <span class=\"token number\">2</span>\nresult <span class=\"token operator\">=</span> total <span class=\"token operator\">/</span> <span class=\"token number\">4</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><code>**</code> 表示乘方，<code>** 2</code> 就表示平方。</p>\n<hr/>\n<p><strong>小技巧</strong>：</p>\n<p>有时候我们要改一个变量的变量名，但是该变量已经在很多地方都使用到了，手动一个一个改很不方便</p>\n<p>在 PyCharm 中，我们可以将光标定位到要修改的变量名上面，按 <code>Shift+F6</code> ，在弹出的窗口中输入新的变量名，点击重构即可。</p>\n<h2><a id=\"_68\"></a>类型</h2>\n<p>我们可以使用 <code>type()</code> 来查看变量的类型</p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span>\nc <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># &lt;class 'int'&gt;</span>\n<span class=\"token comment\"># &lt;class 'float'&gt;</span>\n<span class=\"token comment\"># &lt;class 'str'&gt;</span>\n</code></pre>\n<h3><a id=\"int_86\"></a>int整型</h3>\n<p>在 Python 中，int 能够表示的数据范围是无穷大的（只要内存足够大），它可以根据要表示的数据的大小自动扩容，所以 Python 是天然支持高精度运算的。Python 也没有 short、long 这样的类型。</p>\n<h3><a id=\"float_90\"></a>float浮点型</h3>\n<p>Python 中的 float 就是双精度浮点数，没有 double 类型。</p>\n<h3><a id=\"str_94\"></a>str字符串</h3>\n<p>Python 中使用引号包含的一系列字符就是字符串，单引号和双引号都可以。</p>\n<p>这里两种双引号的作用和 C/C++ 可不一样。</p>\n<p>如果字符串本身包含引号，比如要把 <code>my name is \"cero\"</code> 再用一层引号引起来，表示成一串字符串：</p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token string\">\"my name is \"</span>cero<span class=\"token string\">\"\"</span>\n</code></pre>\n<p>直接使用 <code>\"\"</code> 会导致 Python 解释器将 <code>my name is </code> 认为是一段字符串，而cero就不认识。</p>\n<p>要把引号本身也当做字符串，一种方式是使用转义字符 <code>\\</code>：</p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token string\">\"my name is \\\"cero\\\"\"</span>\n</code></pre>\n<p>另一种方式，外围使用另一种引号：</p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token string\">'my name is \"cero\"'</span>\n</code></pre>\n<p>如果字符串内既有双引号，也有单引号，那么外围可以使用三引号<code>''''''</code>：</p>\n<pre><code class=\"prism language-python\">b <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">'''zhangsan say: \"hello 'lisi'\"'''</span>\n</code></pre>\n<hr/>\n<p>使用 <code>len()</code> 函数可以求字符串长度</p>\n<pre><code class=\"prism language-python\">b <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">'''zhangsan say: \"hello 'lisi'\"'''</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># 28</span>\n</code></pre>\n<p>Python 中的字符串也支持使用 <code>+</code> 来进行拼接：</p>\n<pre><code class=\"prism language-python\">a1 <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\na2 <span class=\"token operator\">=</span> <span class=\"token string\">' world'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a1 <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># hello world</span>\n</code></pre>\n<p><strong>注意</strong>：Python 中只有字符串类型，没有字符类型。如<code>'a'</code> 表示长度为1的字符串。也正因如此，Python 中<code>''</code> 和 <code>\"\"</code> 都能表示字符串，没有作区分。</p>\n<h3><a id=\"bool_151\"></a>bool布尔型</h3>\n<p>Python 中的真用 <code>True</code> 表示，假用 <code>False</code> 表示，注意首字母是大写的。</p>\n<h2><a id=\"_155\"></a>动态类型特性</h2>\n<p>Python 中一个变量的类型是可以在程序运行中发生变化的，这个特性叫做<strong>动态类型</strong></p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\na <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\na <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># &lt;class 'int'&gt;</span>\n<span class=\"token comment\"># &lt;class 'str'&gt;</span>\n<span class=\"token comment\"># &lt;class 'bool'&gt;</span>\n</code></pre>\n<p>像C/C++ Java就是静态类型的语言，程序运行过程中，一个变量的类型始终是不变的。</p>\n<p>一个语言是否具有动态类型特性，与它是否需要在变量定义时什么类型无关，Python 其实也可以在定义时声明类型：</p>\n<pre><code class=\"prism language-python\">a<span class=\"token punctuation\">:</span><span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\na<span class=\"token punctuation\">:</span><span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Python的类型声明只起到增加可读性的作用，实际的类型还是要看给它赋的值。</p>\n<h1><a id=\"_186\"></a>注释</h1>\n<h2><a id=\"_188\"></a>行注释</h2>\n<p>使用 <code>#</code> 开头</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 这是一行注释</span>\n</code></pre>\n<h2><a id=\"_196\"></a>文档字符串</h2>\n<p>使用三引号引起来的称为<strong>文档字符串</strong>，也是一种注释，</p>\n<p>使用单引号或双引号均可。</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">'''\n这是文档字符串\n这是文档字符串\n'''</span>\n\n<span class=\"token triple-quoted-string string\">\"\"\"\n这是文档字符串\n这是文档字符串\n\"\"\"</span>\n</code></pre>\n<p>PyCharm 中批量注释与取消注释的快捷键是 <code>Ctrl + /</code></p>\n<h1><a id=\"_216\"></a>输入输出</h1>\n<h2><a id=\"print__218\"></a>print() 格式控制</h2>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'a = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>a<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># a = 10</span>\n</code></pre>\n<p>这就类似于C语言中的 <code>printf(\"a = %d\\n\", a);</code></p>\n<p>Python 中这个语法，叫做<strong>格式化字符串（f-string）</strong></p>\n<p>在字符串前面加 <code>f</code>，就可以在后面的字符串中使用 <code>{}</code> 来嵌入变量或表达式。</p>\n<hr/>\n<p>print 也可以同时打印多个变量，中间用 <code>,</code> 分隔：</p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：10 20</span>\n</code></pre>\n<p>打印出的结果会被空格分隔。</p>\n<hr/>\n<p>print 打印默认会自动换行，如果你不想换行，可以增加一个关键字参数，将末尾设为 <code>''</code> 空字符串，关键字参数会在下面的函数传参讲到。</p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'a = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>a<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'a = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>a<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#结果：</span>\n<span class=\"token comment\"># a = 10a = 10</span>\n</code></pre>\n<h2><a id=\"input_259\"></a>input()</h2>\n<p>输入需要借助一个内建函数</p>\n<p>input 函数执行会先打印传入的字符串，然后等待用户输入，最后将输入的值返回给变量，<mark>这个值是str类型</mark>。</p>\n<pre><code class=\"prism language-python\">num <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入一个整数：'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'你输入的整数为 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>num<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># 请输入一个整数：10</span>\n<span class=\"token comment\"># 你输入的整数为 10</span>\n<span class=\"token comment\"># &lt;class 'str'&gt;</span>\n</code></pre>\n<p>如果你要拿它来加减乘除计算，那显然是不行的：</p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入第一个整数'</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入第二个整数'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'a + b = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># 请输入第一个整数10</span>\n<span class=\"token comment\"># 请输入第二个整数20</span>\n<span class=\"token comment\"># a + b = 1020</span>\n</code></pre>\n<p>它会变成字符串拼接。</p>\n<p>我们需要将 str 转换成 int 类型，可以用 <code>int()</code></p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入第一个整数'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入第二个整数'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'a + b = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># 请输入第一个整数10</span>\n<span class=\"token comment\"># 请输入第二个整数20</span>\n<span class=\"token comment\"># a + b = 30</span>\n</code></pre>\n<p>以此类推，</p>\n<p>如果想把整数转成字符串，使用 <code>str()</code></p>\n<p>如果想把字符串转成浮点数，使用 <code>float()</code></p>\n<h1><a id=\"_310\"></a>运算符</h1>\n<h2><a id=\"_312\"></a>算术运算符</h2>\n<p><code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>%</code> <code>**</code> <code>//</code></p>\n<p>这些在上述代码中已有体现。需要注意的点如下：</p>\n<p>乘方运算符 <code>**</code>，右操作数表示指数，它即可是正整数，也可以是小数（如0.5开平方），负数（如-1求倒数）。</p>\n<hr/>\n<p>地板除法 <code>//</code> 只保留整数部分，采用向下取整的方式：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">7</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># 3</span>\n<span class=\"token comment\"># -4</span>\n</code></pre>\n<p>因为是向下取整，所以不是简单的抹去小数部分，在数字相同，符号不同的情况下最后的算出的结果的绝对值可能是不同的。</p>\n<hr/>\n<p><code>+</code> 可以是字符串之间相加，也可以是整数和浮点数之间相加，也可以是整数和布尔值相加，布尔值在做算术运算时，True被看做1，False被看做0。</p>\n<h2><a id=\"_339\"></a>比较运算符</h2>\n<p><code>&gt;</code> <code>&lt;</code> <code>&gt;=</code> <code>&lt;=</code> <code>==</code> <code>!=</code></p>\n<p>这些的用法和 C++ 是一样的，包括字符串 str 也可以使用比较运算符。</p>\n<p>而C语言中对字符串使用比较运算符只是对指针的比较，要进行字符串比较需要借助 <code>strcmp()</code>。</p>\n<hr/>\n<p>注意：</p>\n<p>针对浮点数来说，使用 == 比较相等，存在一定风险。这一点对于所有语言都是一样的。</p>\n<p>因为浮点数在内存中的存储和表示是可能存在误差的，这样的误差在进行算术运算的时候就可能被放大，导致 <code>==</code> 的误判。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：False</span>\n</code></pre>\n<p>如果单独打印 0.1 + 0.2</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：0.30000000000000004</span>\n</code></pre>\n<p>可以发现，最后结果出现了误差。</p>\n<p>正确的比较浮点数相等：</p>\n<p>通过计算二者的差值判断是否在合理的误差范围内</p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">0.3</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">0.000001</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.000001</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：True</span>\n</code></pre>\n<p>另外，Python 支持连续比较，这里就可以不用逻辑与运算符了。</p>\n<h2><a id=\"_382\"></a>逻辑运算符</h2>\n<p><code>and</code> 逻辑与，<code>or</code> 逻辑或，<code>not</code> 逻辑取反</p>\n<p>用法和 C/C++ 中的 <code>&amp;&amp;</code> <code>||</code> <code>!</code> 一样</p>\n<p>Python 中也同样支持<strong>短路求值</strong>：</p>\n<p>对于 and 来说，如果左侧表达式为 False，那么右侧的表达式就不再求值了。对于 or 来说，如果左侧表达式为 True，那么右侧的表达式就不再求值了。</p>\n<h2><a id=\"_392\"></a>赋值运算符</h2>\n<p><code>=</code></p>\n<p>Python 中的赋值运算符也支持<strong>链式赋值</strong>：</p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n</code></pre>\n<p>还支持<strong>多元赋值</strong>：</p>\n<pre><code class=\"prism language-python\">a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span>\n</code></pre>\n<p>相当于把 10 赋值给 a，把 20 赋值给 b。中间用 <code>,</code> 隔开</p>\n<p>多元赋值有个很方便的运用场景：</p>\n<p>变量交换</p>\n<pre><code class=\"prism language-python\">a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span>\na<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">,</span> a\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：20 10</span>\n</code></pre>\n<p>由于这两个值是同时赋过去的，所以不需要中间变量 tmp 了。</p>\n<p><strong>复合赋值运算符</strong></p>\n<p>例如<code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>&amp;=</code>，使用和C/C++是一样的。</p>\n<p>注意左值的变量必须是事先定义过的。</p>\n<p>另外，Python 不支持 +±- 这样的自增操作。我们使用 a += 1 这样的操作已经很简便了。</p>\n<h2><a id=\"_431\"></a>其他</h2>\n<p>身份运算符：<code>is</code> <code>is not</code></p>\n<p>成员运算符：<code>in</code> <code>not in</code></p>\n<p>位运算符：按位与<code>&amp;</code> 按位或<code>|</code> 按位取反<code>~</code> 按位异或<code>^</code> 左移<code>&lt;&lt;</code> 右移<code>&gt;&gt;</code></p>\n<p>这些在后面介绍，此处不再赘述。</p>\n<h1><a id=\"_441\"></a>条件语句</h1>\n<h2><a id=\"if_else_443\"></a>if else缩进与代码块</h2>\n<p>使用 <code>if</code> <code>else</code> 关键字表示条件语句</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">if</span> expression<span class=\"token punctuation\">:</span>\n    do_something1\n    do_something2\nnext_something\n</code></pre>\n<p>注意格式：if 后跟条件+<code>:</code> 下面的缩进部分表示在该语句的控制范围内。</p>\n<p>多分支语句：</p>\n<p><code>if - else</code></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">if</span> expression<span class=\"token punctuation\">:</span>\n    do_something1\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    do_something2\n</code></pre>\n<p><code>if - elif - else</code></p>\n<p>注意 Python 中 else if 采用缩写 <code>elif</code></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">if</span> expression1<span class=\"token punctuation\">:</span>\n    do_something1\n<span class=\"token keyword\">elif</span> expression2<span class=\"token punctuation\">:</span>\n    do_something2\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    do_something3\n</code></pre>\n<p><strong>注意</strong>：Python 中，缩进表示代码块，在 <code>if else elif while for</code>等 需要跟上代码块的部分，都是需要使用缩进来表示的。</p>\n<p>Python 的这种风格是比较独特的，C/C++ Java 都是采用 <code>{}</code> 来表示代码块，对缩进没有硬性要求。Python 的这种方式一方面确实使代码更简洁了，另一方面也带了一点困扰：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">if</span> a <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> b <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> c <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> d <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> e <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">if</span> f <span class=\"token operator\">==</span> <span class=\"token number\">6</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword\">if</span> g <span class=\"token operator\">==</span> <span class=\"token number\">7</span><span class=\"token punctuation\">:</span>\n                            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>像上面这样，如果嵌套层数过多，语句对应哪一级代码块，并不容易观察。<s>需要借助游标卡尺</s></p>\n<p>还好我们的 PyCharm 会显示竖线来辅助我们阅读对应的缩进级数。</p>\n<h2><a id=\"_501\"></a>练习</h2>\n<p>判断奇偶数</p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入一个整数'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> a <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'奇数'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'偶数'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>在 Python 中，负数 % 2 的结果仍然是正数，比如-9 % 2 =&gt; 1。所以这样写是可以判断负数的，而在C/C++ Java中是不行的。</p>\n<h2><a id=\"_515\"></a>空语句</h2>\n<p>像 if 这种语句后面必须跟一个代码块</p>\n<p>如果我们要表示满足条件时啥都不做，C/C++ 中可以直接跟一个 <code>{}</code>，大括号中间什么都不写。</p>\n<p>Python 抛弃了大括号，所以这种方式显然是不行的</p>\n<p>这里就需要使用空语句 <code>pass</code> 占位，用它缩进来表示一个代码块，而它本身是不执行的。</p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'输入1啥都不做，输入其他数打印hello'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> a <span class=\"token operator\">==</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<hr/>\n<p>另外 Python 中没有 switch 语句。</p>\n<h1><a id=\"_537\"></a>循环</h1>\n<h2><a id=\"while__539\"></a>while 循环</h2>\n<p>格式：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">while</span> 条件<span class=\"token punctuation\">:</span>\n    循环体\n</code></pre>\n<h2><a id=\"for__548\"></a>for 循环</h2>\n<p>格式：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">for</span> 循环变量 <span class=\"token keyword\">in</span> 可迭代对象<span class=\"token punctuation\">:</span>\n    循环体\n</code></pre>\n<p>注意：</p>\n<ul><li>Python 的 for 和其他语言不同，没有初始化语句，循环条件判断语句，循环变量更新语句。它其实类似于C++11中的范围for</li><li>可迭代对象指内部包含多个元素，能一个一个把元素取出来的对象。</li></ul>\n<p>打印1到10：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>range 是一个内建函数，效果是得到一个可迭代对象，这个可迭代对象包含 [参数1, 参数2) 之间的整数。</p>\n<p>range 还提供了第三个参数，表示步长，默认步长是1。</p>\n<p>打印 2 4 6 8 10：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>打印 从10到1</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><code>continue</code> 立即结束当前循环进入下次循环</p>\n<p><code>break</code> 跳出循环</p>\n<p>这些在Python中也是一样的。</p>\n<p>Python 没有 do while 和 goto 语句，对于循环来说，只需要有上面两种就够了。</p>\n<h1><a id=\"_595\"></a>函数</h1>\n<h2><a id=\"_597\"></a>定义函数的格式</h2>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> 函数名<span class=\"token punctuation\">(</span>形参列表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    函数体\n</code></pre>\n<ul><li>在C/C++中，def关键字的位置应该是返回类型，而 Python不需要显式去写，它返回的类型，由最后 <code>return</code> 的值决定。如果你不想return一个值，那也可以不写return语句。</li><li>Python 的形参列表，当然也是可以给<strong>缺省值</strong>的，方法和C++一样，从右往左给</li><li>Python 是弱类型的语言，<strong>不支持函数重载</strong>，如果定义多个名称相同的函数，下一个函数总会覆盖上一个函数。</li></ul>\n<p>如要写一个函数计算给定范围内的整数的和：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">calcSum</span><span class=\"token punctuation\">(</span>beg<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">sum</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>beg<span class=\"token punctuation\">,</span> end <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">sum</span> <span class=\"token operator\">+=</span> i\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"_618\"></a>调用</h2>\n<pre><code class=\"prism language-python\">calcSum<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\ncalcSum<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\ncalcSum<span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># 5050</span>\n<span class=\"token comment\"># 500500</span>\n<span class=\"token comment\"># 35350</span>\n</code></pre>\n<p><strong>注意</strong>：</p>\n<p><mark>Python 规定，函数定义必须在函数调用之前</mark>。</p>\n<p>C/C++ Java 里的函数，要求形参和实参的类型匹配，而 Python 不要求，因为 Python 是动态类型的语言。可以传入任意的类型，这其实就是一种泛型编程，在 C++ 中只能通过模板来实现，而 Python 定义的函数是天然支持的</p>\n<h2><a id=\"_636\"></a>返回值</h2>\n<p>Python 一个重要的特性：</p>\n<p><mark>一个函数可以返回多个返回值</mark>，这一点还是非常香的</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    x <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    y <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">,</span> y\n</code></pre>\n<p>采用多元赋值接收返回值：</p>\n<pre><code class=\"prism language-python\">a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> getPoint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># x赋值给a，y赋值给b</span>\n</code></pre>\n<p>如果你只需要其中部分返回值，可以用 <code>_</code> 来占位：</p>\n<pre><code class=\"prism language-python\">_<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> getPoint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 忽略x，把y赋值给b</span>\n</code></pre>\n<h2><a id=\"_661\"></a>作用域</h2>\n<p>定义在函数内部的是局部变量，定义在函数外部的全局变量。遵守局部优先原则。</p>\n<p>需要注意的是，Python只有函数和类的代码块对变量的作用域有影响，其他像<code>if</code>,<code>else</code>,<code>while</code>,<code>for</code>这些关键字的代码块不会有影响。这一点和 C/C++ Java 是不一样的</p>\n<pre><code class=\"prism language-python\">x <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\t<span class=\"token comment\"># 全局变量</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'x = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>x<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\"># 访问全局变量</span>\n\ntest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\"># 函数调用</span>\n<span class=\"token comment\">#结果：x = 10</span>\n</code></pre>\n<p>由于 Python 创建变量和修改变量的语法是一样的，所以在函数内部修改全局变量会被解释器当成是创建一个新的局部变量。</p>\n<p>要想在函数内部修改全局变量，必须使用 <code>global</code>，以声明这是个全局变量，下面的赋值操作起修改作用。</p>\n<pre><code class=\"prism language-python\">x <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> x\t<span class=\"token comment\"># 声明x为全局变量</span>\n    x <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n\ntest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'x = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>x<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：x = 20</span>\n</code></pre>\n<p>关于函数栈帧，递归调用，和C/C++的思想是一样的，这里不多赘述。</p>\n<h2><a id=\"_695\"></a>关键字传参</h2>\n<p>实参按照形参的先后顺序来传参，这种传参风格，称为<strong>位置参数</strong>，这是各大编程语言中最普遍的传参方式。</p>\n<p>而 Python 还支持<strong>关键字传参</strong>：按照形参的名字来进行传参。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'x = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>x<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'y = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>y<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\ntest<span class=\"token punctuation\">(</span>y <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># x = 10</span>\n<span class=\"token comment\"># y = 20</span>\n</code></pre>\n<p>优点：可以非常明显的告诉程序员，你的参数要传给谁，另外可以无视形参和实参的顺序。</p>\n<p>注意：位置参数和关键字参数可以混用，混用时，要求位置参数在前，关键字参数在后。</p>\n<h1><a id=\"_717\"></a>列表和元祖</h1>\n<p>这部分就类似于其他编程语言中的数组。</p>\n<p>列表和元祖，大部分功能都是差不多的，但是有一个功能具有非常明显的区别：</p>\n<p>列表是可变的，创建好之后，随时能改</p>\n<p>元祖是不可变的，创建好了之后，改不了，要想改只能抛弃旧的，搞个新的。</p>\n<h2><a id=\"_727\"></a>创建列表</h2>\n<p>两种方式：</p>\n<ol><li> <p>直接使用字面值来创建</p> <p><code>[]</code> 就表示一个空的列表</p> </li><li> <p>使用内建函数 <code>list()</code> 来创建</p> </li></ol>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nb <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># &lt;class 'list'&gt;</span>\n<span class=\"token comment\"># &lt;class 'list'&gt;</span>\n</code></pre>\n<p>可以在创建列表时，在 <code>[]</code> 中指定列表的初始值。</p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># [1, 2, 3, 4]</span>\n</code></pre>\n<p>注意：</p>\n<ul><li>C/C++ Java 一个数组只能存放一个类型的变量，而 Python 里的列表存放的变量的类型无限制。</li></ul>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># [1, 'hello', True, [4, 5, 6]]</span>\n</code></pre>\n<h2><a id=\"_768\"></a>下标访问</h2>\n<p>下标访问依然是用 <code>[]</code>，使用方法和 C/C++ 一样</p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># 3</span>\n</code></pre>\n<p>使用下标来修改列表元素：</p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># [1, 2, 10, 4]</span>\n</code></pre>\n<p>和字符串类似，使用内建函数 <code>len()</code> 可以获得列表的元素个数：</p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># 4</span>\n</code></pre>\n<p>len 函数支持传入字符串，列表，元祖，字典，自定义的类…</p>\n<p>Python 中的下标还支持写成负数，比如 -1，其实就等价于 len(a) - 1，也可以理解成倒数第一个元素。</p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># 4</span>\n<span class=\"token comment\"># 4</span>\n</code></pre>\n<h2><a id=\"_811\"></a>切片操作</h2>\n<p>通过下标访问是一次取出里面的一个元素</p>\n<p>通过切片，则是一次取出一组连续的元素，相当于得到一个 <strong>子列表</strong></p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：[2, 3]</span>\n</code></pre>\n<p>切片操作中，<code>[]</code> 内有两个数字，由 <code>:</code> 分隔。第一个数字表示开始区间的下标，第二个数字表示结束区间的下标，区间为左闭右开。此处的下标也可以写成负数形式</p>\n<p>这两个边界是可以省略的：</p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：[2, 3, 4]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：[1, 2, 3]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：[1, 2, 3, 4]</span>\n</code></pre>\n<ul><li>省略后边界，则取出的是从开始区间直到列表最后。</li><li>同理，省略前边界，则取出列表开头到结束区间</li><li>前后边界都省略，则取出整个列表</li></ul>\n<p>切片操作，可以指定<strong>步长</strong>：</p>\n<p>增加一个 <code>:</code> 第三个数字表示的就是步长</p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：[1, 3, 5, 7, 9]</span>\n</code></pre>\n<p>步长也可以是负数，表示从后往前取</p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：[10, 8, 6, 4, 2]</span>\n</code></pre>\n<p>注意：</p>\n<ul><li> <p>切片操作是一个比较高效的操作，进行切片的时候，只是取出了原有列表中的一个部分，不涉及<strong>数据的拷贝</strong></p> </li><li> <p>如果给的边界值超出范围，最后的效果和省略边界是一样的</p> </li></ul>\n<h2><a id=\"_865\"></a>列表的遍历</h2>\n<ol><li>列表是可迭代对象，使用 for 循环可以完成基本的遍历</li></ol>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> e <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n</code></pre>\n<ol start=\"2\"><li>通过下标，使用 for 循环完成遍历</li></ol>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>使用第二种方式，可以对列表内的元素进行修改，而使用第一种方式就不行了：</p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">10</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 结果：[11, 12, 13, 14, 15]</span>\n</code></pre>\n<ol start=\"3\"><li>通过下标，使用 while 循环完成遍历</li></ol>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\ni <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n</code></pre>\n<p><strong>总结</strong>：如果不修改列表，则可以采用第一种方式，如果要修改列表，则要采用第二或第三种方式。</p>\n<h2><a id=\"_906\"></a>列表的插入</h2>\n<ol><li>使用 <code>append</code> 方法在列表末尾插入元素</li></ol>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\na<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\na<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：[1, 2, 3, 4, 5, 6, 'hello']</span>\n</code></pre>\n<p>注意 <code>append</code> 是需要搭配<strong>列表对象</strong>来一起使用的，而不是一个独立的函数。</p>\n<p>这种要搭配对象来使用的函数，也叫作<strong>方法</strong></p>\n<ol start=\"2\"><li>使用 <code>insert</code> 方法在列表的任意位置插入元素</li></ol>\n<p>第一个参数表示要插入的位置的下标，第二个参数就是要插入的元素</p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\na<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：[1, 'hello', 2, 3, 4, 5]</span>\n</code></pre>\n<p>注意：如果下标越界，则新的元素会被插入到列表的末尾。</p>\n<h2><a id=\"_935\"></a>列表的查找</h2>\n<ol><li>使用 <code>in</code> 来判定某个元素是否在列表中</li></ol>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># True</span>\n<span class=\"token comment\"># False</span>\n</code></pre>\n<p>和它对应的还有 <code>not in</code>，用来判断一个元素是否不存在于列表中</p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># False</span>\n<span class=\"token comment\"># True</span>\n</code></pre>\n<ol start=\"2\"><li>使用 <code>index</code> 方法得到一个元素在列表中的位置的下标</li></ol>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：2</span>\n</code></pre>\n<p>注意：传入的参数必须是列表中存在的元素，否则会抛异常。这一点和 C++ Java 不同，它们都可以返回 -1 表示不存在，Python 的负数下标本身就有意义。</p>\n<h2><a id=\"_969\"></a>列表的删除</h2>\n<ol><li>使用 <code>pop</code> 删除列表末尾的元素</li></ol>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\na<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：[1, 2, 3, 4]</span>\n</code></pre>\n<ol start=\"2\"><li>使用 <code>pop</code> 删除任意位置的元素，传一个下标过去。</li></ol>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\na<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：[1, 3, 4, 5]</span>\n</code></pre>\n<p>如果下标越界，则会报错。</p>\n<ol start=\"3\"><li>使用 <code>remove</code> 方法，按照值来进行删除</li></ol>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\na<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：[1, 2, 4, 5]</span>\n</code></pre>\n<p>如果是不存在的元素，则会报错。</p>\n<h2><a id=\"_1002\"></a>列表的拼接</h2>\n<ol><li>类似于字符串，列表也可以使用 <code>+</code> 进行拼接</li></ol>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\nb <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span>\nc <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：[1, 2, 3, 4, 5, 6, 7, 8]</span>\n</code></pre>\n<p>使用 <code>+</code> 拼接，只是针对当前列表的内容生成了一个更大的新的列表，原有列表的内容是不变的。</p>\n<ol start=\"2\"><li>使用 <code>extend</code> 进行拼接</li></ol>\n<p>这个操作是把后一个列表的内容拼接到前一个列表的里面，会修改原来的列表</p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\nb <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span>\na<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># [1, 2, 3, 4, 5, 6, 7, 8]</span>\n<span class=\"token comment\"># [5, 6, 7, 8]</span>\n</code></pre>\n<p>注意：<code>extend</code> 是没有返回值的。如果你拿一个变量接收，最后打印这个变量的结果是 <code>None</code> 表示什么也没有。</p>\n<ol start=\"3\"><li>使用 <code>+=</code> 进行拼接</li></ol>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\nb <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span>\na <span class=\"token operator\">+=</span> b\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># [1, 2, 3, 4, 5, 6, 7, 8]</span>\n<span class=\"token comment\"># [5, 6, 7, 8]</span>\n</code></pre>\n<p>它的结果和 <code>extend</code> 是一样的，但是这两者的底层实现差异是很大的。</p>\n<p>Python 中 <code>a += b</code> 等价于 <code>a = a + b</code>，<code>a + b</code> 会产生创建一个新的更大的列表，然后将这个列表赋值给 a，最后还要把 a 的旧值释放。而 <code>extend</code> 就是直接把 b 的内容拼接到了 a 的后面。所以用 <code>extend</code> 效率更高。</p>\n<h2><a id=\"_1050\"></a>元祖操作</h2>\n<p>元祖的操作基本是和列表一致的，只是不能进行修改操作。</p>\n<p>创建元祖同样有两种方法，使用字面值创建，符号是<code>()</code>，或者使用内建函数 <code>tuple()</code></p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># &lt;class 'tuple'&gt;</span>\n<span class=\"token comment\"># &lt;class 'tuple'&gt;</span>\n</code></pre>\n<p>创建元祖的时候指定初始值：</p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：(1, 2, 3, 4)</span>\n</code></pre>\n<p>其他只读性质的操作皆和列表一致：</p>\n<ul><li> <p>元祖中的元素也可以是任意类型的。</p> </li><li> <p>也可以通过 <code>[]</code> 下标来访问元祖中的元素，下标也可以是负数</p> </li><li> <p>切片操作也和列表一样。</p> </li><li> <p>也可以使用 for 循环等方式来遍历元素</p> </li><li> <p>也可以使用 <code>in</code> 来判断元素是否存在，使用 <code>index</code> 查找元素的下标。</p> </li><li> <p>可以使用 <code>+</code> 来拼接两个元祖</p> </li></ul>\n<p>不可通过下标修改元素</p>\n<p>其他插入删除操作均不可以。</p>\n<hr/>\n<p>当进行多元赋值的时候，其实本质上就是按照元祖的方式来进行的，</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    x <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    y <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">,</span> y\n\nx<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> getPoint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>getPoint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：&lt;class 'tuple'&gt;</span>\n</code></pre>\n<p>可以看到，函数的返回类型是元祖</p>\n<h1><a id=\"_1107\"></a>字典</h1>\n<p>这部分内容类似 C++STL 中的 unordered_map 容器，都是用来存键值对的</p>\n<h2><a id=\"_1111\"></a>创建字典</h2>\n<p>有两种方法，用<code>{}</code> 创建一个字典，或者使用内建函数 <code>dict()</code> 来创建字典。</p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\nb <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># &lt;class 'dict'&gt;</span>\n<span class=\"token comment\"># &lt;class 'dict'&gt;</span>\n</code></pre>\n<p>创建时初始化：</p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string\">'apple'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'banana'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：{'apple': 1, 'banana': 2}</span>\n</code></pre>\n<p>键值对之间使用 <code>,</code> 分隔，一个键值对用 <code>:</code> 分隔键和值，<code>:</code> 左边是键，<code>:</code> 右边是值。</p>\n<ul><li> <p>书写格式建议换行书写，增加代码美观性。</p> </li><li> <p>一个字典中的 key 和 value 的类型都不必一样。但是 key 的类型是有限制的。</p> </li><li> <p>字典中的 key 不能重复。</p> </li></ul>\n<h2><a id=\"_key_1144\"></a>查找 key</h2>\n<ol><li>使用 <code>in</code> 判断 key 是否在字典中。</li></ol>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string\">'apple'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'banana'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apple'</span> <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'orange'</span> <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># True</span>\n<span class=\"token comment\"># False</span>\n</code></pre>\n<p>注意此处的 <code>in</code> 只能判断 key 是否存在，与 value 无关。</p>\n<p><code>not in</code> 效果和 <code>in</code> 相反。</p>\n<ol start=\"2\"><li>使用 <code>[]</code> 来根据 key 获取 value</li></ol>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string\">'apple'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'banana'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：1</span>\n</code></pre>\n<p>如果在字典中没有相应的 key，程序会抛异常。</p>\n<p>对于字典来说，使用 in 或 [] 来获取 value 都是非常高效的操作，因为底层实现是哈希表。</p>\n<p>与列表不同，列表使用 in 是比较低效的，使用 [] 是比较高效的。因为底层实现是顺序表。</p>\n<h2><a id=\"_1181\"></a>字典的新增修改删除</h2>\n<ol><li>使用 <code>[]</code> 可以进行新增和修改，这一点和 C++ 是一样的。</li></ol>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string\">'apple'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'banana'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\na<span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\na<span class=\"token punctuation\">[</span><span class=\"token string\">'orange'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：{'apple': 3, 'banana': 2, 'orange': 0}</span>\n</code></pre>\n<ol start=\"3\"><li>使用 <code>pop</code> 方法，根据 key 删除键值对</li></ol>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string\">'apple'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'banana'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\na<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：{'banana': 2}</span>\n</code></pre>\n<h2><a id=\"_1208\"></a>字典的遍历</h2>\n<ol><li>字典是可迭代对象，可以直接使用 for 循环来遍历字典</li></ol>\n<p>这里的循环变量只能拿到字典中的 key</p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string\">'apple'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'banana'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'orange'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># apple 1</span>\n<span class=\"token comment\"># banana 2</span>\n<span class=\"token comment\"># orange 3</span>\n</code></pre>\n<p>Python 和 C++ Java 不一样，Python 做了特殊处理，能够保证遍历出来的顺序和插入的顺序是一致的。</p>\n<ol start=\"2\"><li><code>keys()</code> 获取字典中所有 key</li><li><code>values()</code> 获取字典中所有 value</li><li><code>items()</code> 获取字典中所有键值对</li></ol>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string\">'apple'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'banana'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'orange'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># dict_keys(['apple', 'banana', 'orange'])</span>\n<span class=\"token comment\"># dict_values([1, 2, 3])</span>\n<span class=\"token comment\"># dict_items([('apple', 1), ('banana', 2), ('orange', 3)])</span>\n</code></pre>\n<p>返回的结果看起来像是列表，又不完全是。其实它是一个自定义类型，使用的时候可以把它当做列表。</p>\n<ol start=\"5\"><li><code>items()</code> 配合 for 循环使用</li></ol>\n<p><code>items</code> 返回的列表里面是一个一个的元祖，可以利用多元赋值进行遍历</p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string\">'apple'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'banana'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'orange'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># apple 1</span>\n<span class=\"token comment\"># banana 2</span>\n<span class=\"token comment\"># orange 3</span>\n</code></pre>\n<p>2 和 3 两种方法当然也可以搭配 for 循环使用，这里不多举例。</p>\n<h2><a id=\"_key__1273\"></a>合法的 key 类型</h2>\n<p>使用 <code>hash()</code> 函数可以计算出一个对象的哈希值。</p>\n<p>像整型，浮点数，字符串，布尔值，元祖都是可哈希的</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.414</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># 0</span>\n<span class=\"token comment\"># 954619005814469121</span>\n<span class=\"token comment\"># 4737232595826697948</span>\n<span class=\"token comment\"># 1</span>\n<span class=\"token comment\"># 590899387183067792</span>\n</code></pre>\n<p>像列表，字典都是不可哈希的</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\"># 此处报错：TypeError: unhashable type: 'list'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\"># 此处报错：TypeError: unhashable type: 'dict'</span>\n</code></pre>\n<p>不可变的对象，一般就是可哈希的，可变的对象，一般就是不可哈希的。</p>\n<h1><a id=\"_1302\"></a>文件操作</h1>\n<h2><a id=\"_1304\"></a>打开文件</h2>\n<p>Python中打开文件的函数是 <code>open()</code></p>\n<pre><code class=\"prism language-python\"><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d:/Python环境/test.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>第一个参数为文件路径，第二个参数为打开方式：</p>\n<ul><li>r 表示 read，按照只读方式打开</li><li>w 表示 write，按照只写方式打开</li><li>a 表示 append，也是只写方式打开，把内容追加到文件内容末尾</li></ul>\n<p>Python还有更多选项，具体不多赘述，可以自行查看Python官方文档。</p>\n<hr/>\n<p>使用 f 接受返回值，f 就是文件对象：</p>\n<pre><code class=\"prism language-python\">f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d:/Python环境/test.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># &lt;_io.TextIOWrapper name='d:/Python环境/test.txt' mode='r' encoding='cp936'&gt;</span>\n<span class=\"token comment\"># &lt;class '_io.TextIOWrapper'&gt;</span>\n</code></pre>\n<p>可以直接打印文件对象的一些信息，文件对象的类型。</p>\n<p>如果文件不存在，那么按照只读方式打开会抛异常：文件未找到。</p>\n<h2><a id=\"_1337\"></a>关闭文件</h2>\n<p>文件在使用完一定要关闭</p>\n<p>使用 <code>close</code> 方法关闭文件</p>\n<pre><code class=\"prism language-python\">f<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"_1347\"></a>写文件</h2>\n<p>使用 <code>write</code> 方法写文件</p>\n<pre><code class=\"prism language-python\">f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d:/Python环境/test.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span>\nf<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span>\nf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>如果是以只读方式打开，写文件的时候会抛异常</p>\n<p>直接使用 w 方式打开，会把文件原有内容清空。使用 a 方式则不会。</p>\n<h2><a id=\"_1361\"></a>读文件</h2>\n<ol><li>使用 <code>read</code> 方法读文件，参数表示读取的字符数量</li></ol>\n<p>事先在文件中写下这两句话</p>\n<pre><code>人生苦短\n我用Python\n</code></pre>\n<pre><code class=\"prism language-python\">f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d:/Python环境/test.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span>\nresult <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\nf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#结果：浜虹</span>\n</code></pre>\n<p>很明显，结果有误</p>\n<p>这里要注意，读中文应该要保证文件内容的编码方式和代码中文件操作的编码方式相同。</p>\n<p>我们的记事本是采用 utf-8，这也是使用最广泛的编码格式，而代码中是按照 gbk 编码格式来解析，显然不匹配。</p>\n<p>在 open 后面加一个关键字参数 <code>encoding</code>，可以设置编码格式，改为 utf8 结果就正常了：</p>\n<pre><code class=\"prism language-python\">f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d:/Python环境/test.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\nresult <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\nf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#结果：人生</span>\n</code></pre>\n<ol start=\"2\"><li>for 循环 按行读取</li></ol>\n<pre><code class=\"prism language-python\">f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d:/Python环境/test.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> f<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\nf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#结果：</span>\n<span class=\"token comment\"># 人生苦短</span>\n<span class=\"token comment\"># 我用Python</span>\n</code></pre>\n<ol start=\"3\"><li>使用 <code>readlines</code> 方法直接把整个文件所有内容都读出来，按照行组织到一个列表里。</li></ol>\n<pre><code class=\"prism language-python\">f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d:/Python环境/test.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\nlines <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">)</span>\nf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：</span>\n<span class=\"token comment\"># ['人生苦短\\n', '我用Python']</span>\n</code></pre>\n<h2><a id=\"_1419\"></a>上下文管理器</h2>\n<p>在一个大型工程中，由于代码量比较大，各种语句的跳转等等，很容易让我们遗漏一些本该关闭的文件，导致资源泄露。</p>\n<p>Python 中的上下文管理器可以有效地帮我们缓解这个问题：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d:/Python环境/test.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 文件处理的逻辑</span>\n        <span class=\"token comment\"># 其他各种各样代码</span>\n        <span class=\"token keyword\">return</span>\n</code></pre>\n<p>像这样，通过with as将open的返回值赋给f，后跟一个代码块，代码块内不管写什么东西，只要最后 with 对应的代码块执行结束，就会自动关闭 f 文件，从而避免资源泄露。</p>\n<p>C++ 智能指针，Java try with Resources 也可以实现类似的操作。</p>\n<h1><a id=\"_1437\"></a>库</h1>\n<p><strong>库</strong>是别人已经写好的代码，可以让我们直接拿来用。</p>\n<p>按照库的来源，可以大致分为两类：</p>\n<ul><li>标准库：Python 自带，只要安装了 Python 可以使用</li><li>第三方库：其他人实现的库，需要额外安装使用</li></ul>\n<p>我们自己也可以实现第三方库，发布给别人使用。</p>\n<h2><a id=\"_1448\"></a>标准库</h2>\n<p>可以使用官方文档查阅：<a href=\"https://docs.python.org/zh-cn/3.10/library/index.html\">Python 标准库 — Python 3.10.6 文档</a></p>\n<p>安装 Python 的时候，文档也会附带安装，如果网络慢，可以查看本地文档。</p>\n<h2><a id=\"_1454\"></a>使用案例</h2>\n<h3><a id=\"_1456\"></a>日期计算</h3>\n<p><a href=\"https://docs.python.org/zh-cn/3.10/library/datetime.html\">datetime — 基本日期和时间类型 — Python 3.10.6 文档</a></p>\n<ol><li></li></ol>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> datetime\ndate1 <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">(</span><span class=\"token number\">2019</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\ndate2 <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">(</span><span class=\"token number\">2022</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>date2 <span class=\"token operator\">-</span> date1<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：1001 days, 0:00:00</span>\n</code></pre>\n<p>这可比我们 C++ 自己写日期类要简单多了。</p>\n<ol start=\"2\"><li>如果你觉得 <code>datetime.datetime()</code> 比较别扭，也可以这样：</li></ol>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime\ndate1 <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">(</span><span class=\"token number\">2019</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\ndate2 <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">(</span><span class=\"token number\">2022</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>date2 <span class=\"token operator\">-</span> date1<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：1001 days, 0:00:00</span>\n</code></pre>\n<p><code>from 模块 import 类型</code>，这样后面就不需要用 <code>模块名.</code> 的方式来引出类型。</p>\n<ol start=\"3\"><li>使用 <code>import as</code> 给模块取别名</li></ol>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> datetime <span class=\"token keyword\">as</span> dt\ndate1 <span class=\"token operator\">=</span> dt<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">(</span><span class=\"token number\">2019</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\ndate2 <span class=\"token operator\">=</span> dt<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">(</span><span class=\"token number\">2022</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>date2 <span class=\"token operator\">-</span> date1<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"LeetCode__1493\"></a>LeetCode 翻转单词顺序</h3>\n<p>原题链接：<a href=\"https://leetcode.cn/problems/fan-zhuan-dan-ci-shun-xu-lcof/\">剑指 Offer 58 - I. 翻转单词顺序 - 力扣（LeetCode）</a></p>\n<blockquote>\n<p>输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。例如输入字符串\"I am a student. “，则输出\"student. a am I”。</p>\n<p><strong>示例 1</strong>:</p>\n<pre><code>输入: \"the sky is blue\"\n输出: \"blue is sky the\"\n</code></pre>\n<p><strong>示例 2</strong>：</p>\n<pre><code>输入: \"  hello world!  \"\n输出: \"world! hello\"\n解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。\n</code></pre>\n<p><strong>示例 3</strong>：</p>\n<pre><code>输入: \"a good   example\"\n输出: \"example good a\"\n解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。\n</code></pre>\n<p><strong>说明</strong>：</p>\n<ul><li>无空格字符构成一个单词。</li><li>输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。</li><li>如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。</li></ul>\n</blockquote>\n<p>做这道题完全可以通过 Python 标准库里的函数 相关文档：<a href=\"https://docs.python.org/zh-cn/3.10/library/stdtypes.html#string-methods\">内置类型 — Python 3.10.6 文档</a></p>\n<p>用 <code>str.split(sep=None, maxsplit=- 1)</code> 切割字符串，返回一个列表，不传参默认以空格分隔，且连续的空格会被视为单个分隔符</p>\n<p>用 <code>reverse</code> 方法将获得的列表逆序</p>\n<p>用 <code>str.join(iterable)</code> 将列表转换为字符串，调用该方法的字符串 str 将作为元素之间的分隔符</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">reverseWords</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n        tokens <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        tokens<span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"LeetCode__1544\"></a>LeetCode 旋转字符串</h3>\n<p>原题链接：<a href=\"https://leetcode.cn/problems/rotate-string/\">796. 旋转字符串 - 力扣（LeetCode）</a></p>\n<blockquote>\n<p>给定两个字符串, <code>s</code> 和 <code>goal</code>。如果在若干次旋转操作之后，<code>s</code> 能变成 <code>goal</code> ，那么返回 <code>true</code> 。</p>\n<p><code>s</code> 的 <strong>旋转操作</strong> 就是将 <code>s</code> 最左边的字符移动到最右边。</p>\n<ul><li>例如, 若 <code>s = 'abcde'</code>，在旋转一次之后结果就是<code>'bcdea'</code> 。</li></ul>\n<p><strong>示例 1</strong>:</p>\n<pre><code>输入: s = \"abcde\", goal = \"cdeab\"\n输出: true\n</code></pre>\n<p><strong>示例 2</strong>:</p>\n<pre><code>输入: s = \"abcde\", goal = \"abced\"\n输出: false\n</code></pre>\n<p><strong>提示</strong>:</p>\n<ul><li><code>1 &lt;= s.length, goal.length &lt;= 100</code></li><li><code>s</code> 和 <code>goal</code> 由小写英文字母组成</li></ul>\n</blockquote>\n<p><strong>思路</strong>：将两个 <code>s</code> 字符串拼接，看 <code>goal</code> 是否是拼接后的大字符串的子串。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">rotateString</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> goal<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>goal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n        <span class=\"token keyword\">return</span> goal <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">+</span> s<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"LeetCode__1583\"></a>LeetCode 统计是给定字符串前缀的字符串数目</h3>\n<p>原题链接：<a href=\"https://leetcode.cn/problems/count-prefixes-of-a-given-string/\">2255. 统计是给定字符串前缀的字符串数目 - 力扣（LeetCode）</a></p>\n<blockquote>\n<p>给你一个字符串数组 <code>words</code> 和一个字符串 <code>s</code> ，其中 <code>words[i]</code> 和 <code>s</code> 只包含 <strong>小写英文字母</strong> 。</p>\n<p>请你返回 <code>words</code> 中是字符串 <code>s</code> <strong>前缀</strong> 的 <strong>字符串数目</strong> 。</p>\n<p>一个字符串的 <strong>前缀</strong> 是出现在字符串开头的子字符串。<strong>子字符串</strong> 是一个字符串中的连续一段字符序列。</p>\n<p><strong>示例 1</strong>：</p>\n<pre><code>输入：words = [\"a\",\"b\",\"c\",\"ab\",\"bc\",\"abc\"], s = \"abc\"\n输出：3\n解释：\nwords 中是 s = \"abc\" 前缀的字符串为：\n\"a\" ，\"ab\" 和 \"abc\" 。\n所以 words 中是字符串 s 前缀的字符串数目为 3 。\n</code></pre>\n<p><strong>示例 2</strong>：</p>\n<pre><code>输入：words = [\"a\",\"a\"], s = \"aa\"\n输出：2\n解释：\n两个字符串都是 s 的前缀。\n注意，相同的字符串可能在 words 中出现多次，它们应该被计数多次。\n</code></pre>\n<p><strong>提示</strong>：</p>\n<ul><li><code>1 &lt;= words.length &lt;= 1000</code></li><li><code>1 &lt;= words[i].length, s.length &lt;= 10</code></li><li><code>words[i]</code> 和 <code>s</code> <strong>只</strong> 包含小写英文字母。</li></ul>\n</blockquote>\n<p>python 中有现成的方法 <code>startswith</code></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">countPrefixes</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> word <span class=\"token keyword\">in</span> words<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> count\n</code></pre>\n<h3><a id=\"_1634\"></a>文件搜索工具</h3>\n<p>使用 for 循环，通过 <code>os.walk(top, topdown=True, onerror=None, followlinks=False)</code> 遍历文件。</p>\n<p>相关文档：<a href=\"https://docs.python.org/zh-cn/3.10/library/os.html\">os — 多种操作系统接口 — Python 3.10.6 文档</a></p>\n<p>生成目录树中的文件名，方式是按上-&gt;下或下-&gt;上顺序浏览目录树。对于以 <em>top</em> 为根的目录树中的每个目录（包括 <em>top</em> 本身），它都会生成一个三元组 <code>(dirpath, dirnames, filenames)</code>。</p>\n<p><code>dirpath</code> 表示遍历到当前位置对应的路径</p>\n<p><code>dirnames</code> 表示当前目录下，都有哪些目录，这是一个包含了多个目录名的列表。</p>\n<p><code>filenames</code> 当前目录下，都有哪些文件名，这是一个包含了多个文件名的列表。</p>\n<p>它能帮我们递归遍历一个路径下的所有文件，我们只需要用简单的 for 循环就可以使用了</p>\n<p><strong>具体代码</strong>：</p>\n<p>遍历所有文件名，找到有包含关键词的文件，将路径和文件名打印出来</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> os\n\ninputPath <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入要搜索的路径：'</span><span class=\"token punctuation\">)</span>\npattern <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入要搜索的关键词：'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> dirpath<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">,</span> filenames <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>walk<span class=\"token punctuation\">(</span>inputPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> f <span class=\"token keyword\">in</span> filenames<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> pattern <span class=\"token keyword\">in</span> f<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>dirpath<span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>f<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>结果</strong>：</p>\n<pre><code>请输入要搜索的路径：d:/Python环境\n请输入要搜索的关键词：test\nd:/Python环境/test.txt\nd:/Python环境\\abc\\def/test.txt\n</code></pre>\n<h2><a id=\"_1675\"></a>第三方库</h2>\n<p>通过查阅官方文档我们可以发现，Python 的标准库已经相当丰富了，但它终究是有限的。而程序员的智慧是无穷无尽的，更加庞大的第三方库，可以说是一个新的世界。</p>\n<h3><a id=\"_pip_1679\"></a>使用 pip</h3>\n<p>类似于手机的应用商店，Linux 的 yum，</p>\n<p>Python 官方也有这样一个网站 pypi，收集了各种第三方库，网站链接：<a href=\"https://pypi.org/\">PyPI · The Python Package Index</a></p>\n<p>pip 工具是 Python 内置的一个包管理器，可以直接从 pypi 上下载你想要的第三方库</p>\n<hr/>\n<p>pip 在安装 Python 时是一起安装好的</p>\n<p>具体使用步骤：</p>\n<p>点击 PyCharm 下方的终端（Terminal）</p>\n<p><img alt=\"pip使用\" src=\"..\\..\\static\\image\\c9609b341d0d5daa9db3300eb6228714.png\"/></p>\n<p>在其中输入 <code>pip</code> 会列出一堆帮助信息</p>\n<p>如果你输入 <code>pip</code> 提示找不到这个命令，那么可能你在安装 Python 时没有勾选 Add Python 3.10 to PATH 选项，需要手动把 pip 所在路径放到 PATH 环境变量中，或者卸载重装 Python，勾选上述选项。</p>\n<hr/>\n<p>使用以下命令，安装第三方库</p>\n<pre><code>pip install [库名]\n</code></pre>\n<p>安装成功后，便可使用 <code>import</code> 导入使用了。</p>\n<p><strong>注意</strong>：如果使用 pip 安装完后，在 PyCharm 中仍然提示找不到对应的模块，则检查 Setting -&gt; Project -&gt; Python Interpreter，看当前 Python 解释器设置是否正确（安装了多个版本的 Python，容易出现这种问题）</p>\n<p><img alt=\"配置问题\" src=\"..\\..\\static\\image\\729b5ea7c8645730521596e061671ac0.png\"/></p>\n<p>如图，设置正确后，可以在下面看到已经安装的软件包。</p>\n<h2><a id=\"_1717\"></a>使用案例</h2>\n<h3><a id=\"_1719\"></a>生成二维码</h3>\n<p>使用搜索引擎可以发现，Python 有一个库叫 qrcode，可以帮助我们实现生成二维码</p>\n<p>在 pypi 上搜索 qrcode，了解详情：<a href=\"https://pypi.org/project/qrcode/\">qrcode · PyPI</a></p>\n<p>从这个官方文档中找到安装指令：</p>\n<pre><code>pip install qrcode[pil]\n</code></pre>\n<p>粘贴到 PyCharm 终端。</p>\n<p>安装完成后即可进行使用，使用方式在官方文档中也有详细介绍。</p>\n<hr/>\n<p>这里用字符串简单写生成一个二维码。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> qrcode\t<span class=\"token comment\"># 导入模块</span>\n\nimg <span class=\"token operator\">=</span> qrcode<span class=\"token punctuation\">.</span>make<span class=\"token punctuation\">(</span><span class=\"token string\">'我真帅'</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\"># 传入一串字符串，img接受文件对象</span>\nimg<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string\">'qrcode.png'</span><span class=\"token punctuation\">)</span>\t\t  <span class=\"token comment\"># 将文件保存在当前目录，名为 qrcode.png</span>\n</code></pre>\n<p>运行，然后就可以找到生成的二维码：</p>\n<p><img alt=\"二维码\" src=\"..\\..\\static\\image\\4c3302d3c866580d5e8d03bd5322b0d0.png\"/></p>\n<h3><a id=\"Excel__1750\"></a>Excel 操作</h3>\n<p>读取 Excel 可以使用 xlrd 模块 相关文档：<a href=\"https://xlrd.readthedocs.io/en/latest/\">xlrd — xlrd 2.0.1 documentation</a></p>\n<p>修改 Excel 可以使用 xlwt 模块 相关文档：<a href=\"https://xlwt.readthedocs.io/en/latest/\">xlwt documentation — xlwt 1.3.0 documentation</a></p>\n<p>我们推荐安装旧版本的，因为新版本不支持 xlsx 后缀的 Excel文件</p>\n<pre><code>pip install xlrd==1.2.0\n</code></pre>\n<p>如有以下 Excel 文件，我们要求 211 班的平均分</p>\n<p><img alt=\"Excel操作\" src=\"..\\..\\static\\image\\371315feab2f0615679369853df96768.png\"/></p>\n<p>代码如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> xlrd\t<span class=\"token comment\">#导入模块</span>\n<span class=\"token comment\"># 打开文件</span>\nxlsx <span class=\"token operator\">=</span> xlrd<span class=\"token punctuation\">.</span>open_workbook<span class=\"token punctuation\">(</span><span class=\"token string\">'C:/Users/cero/Desktop/test.xlsx'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 打开第一个工作表，也就是 0，或者传入工作表名称 sheet1</span>\ntable <span class=\"token operator\">=</span> xlsx<span class=\"token punctuation\">.</span>sheet_by_index<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 获取表格行数</span>\nnrows <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span>nrows\ntotal <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\ncount <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> nrows<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\t<span class=\"token comment\"># 第一行是表头，我们从第二行开始遍历</span>\n    classId <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span>cell_value<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\"># 获取i行1列的数值，也就是班级号</span>\n    <span class=\"token keyword\">if</span> classId <span class=\"token operator\">==</span> <span class=\"token number\">211</span><span class=\"token punctuation\">:</span>\t\t\t\t\t<span class=\"token comment\"># 如果是211班，那么将i行2列的分数加入total，并计数</span>\n        total <span class=\"token operator\">+=</span> table<span class=\"token punctuation\">.</span>cell_value<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'平均分：</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>total <span class=\"token operator\">/</span> count<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\"># 计算平均分</span>\n</code></pre>\n<p>结果：</p>\n<pre><code>平均分：72.0\n</code></pre>\n<h3><a id=\"_1792\"></a>学生管理系统</h3>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> os<span class=\"token punctuation\">.</span>path\n<span class=\"token keyword\">import</span> sys\n\n\nstudents <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'record.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> students<span class=\"token punctuation\">:</span>\n            f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>s<span class=\"token punctuation\">[</span><span class=\"token string\">\"studentId\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\\t</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>s<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\\t</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>s<span class=\"token punctuation\">[</span><span class=\"token string\">\"gender\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\\t</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>s<span class=\"token punctuation\">[</span><span class=\"token string\">\"className\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\\n'</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'存储成功，共保存</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">条记录'</span></span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 如果文件不存在，则直接 return</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token string\">'record.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span>\n\n    <span class=\"token keyword\">global</span> students\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'record.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> f<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 去除末尾的换行符</span>\n            line <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 按制表符进行切分</span>\n            tokens <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'\\t'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'当前行格式存在问题，line=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>line<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">continue</span>\n            <span class=\"token comment\"># 使用字典聚合学生信息</span>\n            student <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token string\">'studentId'</span><span class=\"token punctuation\">:</span> tokens<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> tokens<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'gender'</span><span class=\"token punctuation\">:</span> tokens<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'className'</span><span class=\"token punctuation\">:</span> tokens<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">}</span>\n            students<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'载入成功，共加载</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">条信息'</span></span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1.新增学生'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2.显示学生'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3.查找学生'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'4.删除学生'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0.退出'</span><span class=\"token punctuation\">)</span>\n    choice <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请选择：'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> choice\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    studentId <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入学生学号：'</span><span class=\"token punctuation\">)</span>\n    name <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入学生姓名：'</span><span class=\"token punctuation\">)</span>\n    gender <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入学生性别：'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> gender <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'女'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'性别输入有误，新增失败'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    className <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入学生班级：'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 用字典将学生信息聚合起来</span>\n    student <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token string\">'studentId'</span><span class=\"token punctuation\">:</span> studentId<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'gender'</span><span class=\"token punctuation\">:</span> gender<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'className'</span><span class=\"token punctuation\">:</span> className\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\"># 放到全局的列表中</span>\n    <span class=\"token keyword\">global</span> students\n    students<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'增加成功！'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> students<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>s<span class=\"token punctuation\">[</span><span class=\"token string\">\"studentId\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\\t</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>s<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\\t</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>s<span class=\"token punctuation\">[</span><span class=\"token string\">\"gender\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\\t</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>s<span class=\"token punctuation\">[</span><span class=\"token string\">\"className\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'共显示</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">条数据'</span></span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入要查找的学生姓名：'</span><span class=\"token punctuation\">)</span>\n    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> students<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> name <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>s<span class=\"token punctuation\">[</span><span class=\"token string\">\"studentId\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\\t</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>s<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\\t</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>s<span class=\"token punctuation\">[</span><span class=\"token string\">\"gender\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\\t</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>s<span class=\"token punctuation\">[</span><span class=\"token string\">\"className\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n            count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'共显示</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>count<span class=\"token punctuation\">}</span></span><span class=\"token string\">条数据'</span></span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    studentId <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入要删除的学生学号：'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> students<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> studentId <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span><span class=\"token string\">'studentId'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'删除 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>s<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> 同学的信息'</span></span><span class=\"token punctuation\">)</span>\n            students<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'删除成功'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----------------------------'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'     欢迎来到学生管理系统      '</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----------------------------'</span><span class=\"token punctuation\">)</span>\n    load<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        choice <span class=\"token operator\">=</span> menu<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> choice <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            insert<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> choice <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n            show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> choice <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n            find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> choice <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span>\n            delete<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> choice <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'再见'</span><span class=\"token punctuation\">)</span>\n            sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'输入有误，请重新输入'</span><span class=\"token punctuation\">)</span>\n\n\nmain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"_1917\"></a>结语</h1>\n<p>以上就是 Python 入门的基础了，后续进阶内容，推荐书籍《Python Cookbook》。</p>\n<p>这本书介绍了各种Python经典应用场景以及解决方案。</p>\n<p>一些实用的程序库：</p>\n<p><a href=\"https://gitee.com/awesome-lib/awesome-python\">awesome-python: awesome-python 的中文版 (gitee.com)</a></p>\n<p>使用简短的 Python 代码来实现一些有趣的程序：</p>\n<p><a href=\"https://github.com/aosabook/500lines\">GitHub - aosabook/500lines: 500 Lines or Less</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 1, "csharp": 0, "python": 1, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-09-04 17:09:16", "summary": "文章目录常量和表达式变量使用类型整型浮点型字符串布尔型动态类型特性注释行注释文档字符串输入输出格式控制运算符算术运算符比较运算符逻辑运算符赋值运算符其他条件语句缩进与代码块练习空语句循环循环循环函数定"}