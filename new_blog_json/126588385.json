{"blogid": "126588385", "writerAge": "码龄3年", "writerBlogNum": "99", "writerCollect": "413", "writerComment": "26", "writerFan": "2506", "writerGrade": "4级", "writerIntegral": "1108", "writerName": "Licht小粉", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126588385.jpg", "writerRankTotal": "15881", "writerRankWeekly": "2819", "writerThumb": "98", "writerVisitNum": "138278", "blog_read_count": "237", "blog_time": "已于 2022-08-30 13:56:02 修改", "blog_title": "Shell 脚本编程——变量和运算符", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E5%8F%98%E9%87%8F%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%8F%98%E9%87%8F%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6\">变量和运算符</a></p>\n<p id=\"%E2%99%A1%E2%99%A1%E2%99%A11%C2%A0%C2%A0%E5%8F%98%E9%87%8F%E7%9A%84%E8%B5%8B%E5%80%BC%E5%92%8C%E4%BD%BF%E7%94%A8%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#%E2%99%A1%E2%99%A1%E2%99%A11%C2%A0%C2%A0%E5%8F%98%E9%87%8F%E7%9A%84%E8%B5%8B%E5%80%BC%E5%92%8C%E4%BD%BF%E7%94%A8%EF%BC%9A\">♡♡♡1  变量的赋值和使用：</a></p>\n<p id=\"%E2%99%A1%E2%99%A1%E2%99%A12%C2%A0%E5%8F%98%E9%87%8F%E6%9B%BF%E6%8D%A2%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#%E2%99%A1%E2%99%A1%E2%99%A12%C2%A0%E5%8F%98%E9%87%8F%E6%9B%BF%E6%8D%A2%EF%BC%9A\">♡♡♡2 变量替换：</a></p>\n<p id=\"%E2%99%A1%E2%99%A1%E2%99%A13%C2%A0bash%20%E5%BC%95%E5%8F%B7%E8%A7%84%E5%88%99-toc\" style=\"margin-left:40px;\"><a href=\"#%E2%99%A1%E2%99%A1%E2%99%A13%C2%A0bash%20%E5%BC%95%E5%8F%B7%E8%A7%84%E5%88%99\">♡♡♡3 bash 引号规则</a></p>\n<p id=\"%E2%99%A1%E2%99%A1%E2%99%A1%204%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC-toc\" style=\"margin-left:40px;\"><a href=\"#%E2%99%A1%E2%99%A1%E2%99%A1%204%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC\">♡♡♡4 运算符、表达式求值</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<p>首先创建我们的第一个脚本程序：</p>\n<p>创建</p>\n<p><img alt=\"\" height=\"224\" src=\"..\\..\\static\\image\\06aa9d9fa9a8435885eedc6bb828d3b5.png\" width=\"728\"/></p>\n<p></p>\n<p>修改执行权限 </p>\n<p><img alt=\"\" height=\"71\" src=\"..\\..\\static\\image\\1601a9072c5a4405a6d0ec9bac9b5a02.png\" width=\"646\"/></p>\n<p>运行 </p>\n<p><img alt=\"\" height=\"54\" src=\"..\\..\\static\\image\\68955f37f38f41b4abe8e82d27f85c24.png\" width=\"666\"/></p>\n<p> 至此，我们的第一个脚本程序就执行好了</p>\n<p><a class=\"link-info\" href=\"https://blog.csdn.net/ligare/article/details/124613940\" title=\"文件里面的代码解释可以看这里\">文件里面的代码解释可以看这里</a></p>\n<p></p>\n<h1 id=\"%E5%8F%98%E9%87%8F%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6\">变量和运算符</h1>\n<h2 id=\"%E2%99%A1%E2%99%A1%E2%99%A11%C2%A0%C2%A0%E5%8F%98%E9%87%8F%E7%9A%84%E8%B5%8B%E5%80%BC%E5%92%8C%E4%BD%BF%E7%94%A8%EF%BC%9A\"><strong><span style=\"color:#ed7976;\">♡♡♡1 </span></strong> 变量的赋值和使用：</h2>\n<p><strong><span style=\"color:#ed7976;\">♡♡</span></strong><span style=\"color:#fe2c24;\">在shell中使用变量不需要事先声明，直接使用等号赋值</span>。</p>\n<p><strong><span style=\"color:#ed7976;\">♡♡</span></strong><span style=\"color:#fe2c24;\">当需要存取变量时，就要使用一个字符来进行变量替换</span>。在bash中，美元符号“$”用于对一个变量进行解析。shell在碰到带有“$”的变量时会自动将其替换为这个变量的值。</p>\n<p>示例：</p>\n<pre><code class=\"language-bash\">#! /bin/bash\n\n#将一个字符串赋值给变量log\nlog=\"tuesday\"\n\necho \"the value is:\"\n\n#美元符号（$）用于变量替换\necho $log</code></pre>\n<p>执行效果：</p>\n<p><img alt=\"\" height=\"67\" src=\"..\\..\\static\\image\\d1a70d1062fd43ddbf416f49f1ac85e9.png\" width=\"355\"/></p>\n<p>注意：<span style=\"color:#1c7331;\">变量只在其所在的脚本中有效</span>。在上面这个脚本退出之后，变量log就失效了，此时在shell中试图查看log的值将什么也得不到 </p>\n<p><img alt=\"\" height=\"82\" src=\"..\\..\\static\\image\\989840cb58fe424eaa57b3ea841f1bbb.png\" width=\"608\"/></p>\n<p><a class=\"link-info\" href=\"http://c.biancheng.net/linux/echo.html\" title=\"echo干嘛用的可以看这里\">echo干嘛用的可以看这里</a></p>\n<p><span style=\"color:#fe2c24;\">但是使用source命令可以强行让一个脚本影响其</span><span style=\"color:#1c7331;\">父shell</span><span style=\"color:#fe2c24;\">环境</span>，比如 </p>\n<p><img alt=\"\" height=\"183\" src=\"..\\..\\static\\image\\60a033a2a6a445b79630d77288358cbc.png\" width=\"746\"/></p>\n<p><span style=\"color:#fe2c24;\">另一个与之相反的命令是export，export让脚本可以影响</span><span style=\"color:#1c7331;\">其子shell环境</span>，比如 </p>\n<p><img alt=\"\" height=\"164\" src=\"..\\..\\static\\image\\1fa6e0d8fc0042a5afb889be39943e0b.png\" width=\"582\"/></p>\n<p><span style=\"color:#1c7331;\">使用unset命令可以手动注销一个变量</span></p>\n<pre><code class=\"language-bash\">unset count</code></pre>\n<h2 id=\"%E2%99%A1%E2%99%A1%E2%99%A12%C2%A0%E5%8F%98%E9%87%8F%E6%9B%BF%E6%8D%A2%EF%BC%9A\"><strong><span style=\"color:#ed7976;\">♡♡♡2 </span></strong>变量替换：</h2>\n<p><strong><span style=\"color:#ed7976;\">♡♡</span></strong><span style=\"color:#1c7331;\">如果希望输出$符号，则要使用转义字符“\\”</span>，告诉shell忽略特殊字符的特殊含义。如下所示</p>\n<p><img alt=\"\" height=\"200\" src=\"..\\..\\static\\image\\633ed1289e49478e9a7bac5343f2c272.png\" width=\"421\"/></p>\n<p><img alt=\"\" height=\"67\" src=\"..\\..\\static\\image\\ad994d7872a848eabdee04c56d3bcfc3.png\" width=\"584\"/></p>\n<p><strong><span style=\"color:#ed7976;\">♡♡</span></strong><span style=\"color:#1c7331;\">shell提供了花括号{}来限定一个变量的开始和结束。通常在紧跟变量输出字母后缀时，就必须使用这个功能，</span>如下所示</p>\n<p><img alt=\"\" height=\"249\" src=\"..\\..\\static\\image\\b324111c360c45fe8627d6b4d952450a.png\" width=\"895\"/></p>\n<p></p>\n<h2 id=\"%E2%99%A1%E2%99%A1%E2%99%A13%C2%A0bash%20%E5%BC%95%E5%8F%B7%E8%A7%84%E5%88%99\"><strong><span style=\"color:#ed7976;\">♡♡♡3 </span></strong>bash 引号规则</h2>\n<p><strong><span style=\"color:#ed7976;\">♡♡</span></strong>双引号：</p>\n<p><span style=\"color:#1c7331;\">阻止shell</span>对大多数特殊字符（例如#）<span style=\"color:#1c7331;\">进行解释</span>。但“$”、“`”和“””仍然保持其特殊含义。</p>\n<p><strong><span style=\"color:#ed7976;\">♡♡</span></strong>单引号：</p>\n<p><span style=\"color:#1c7331;\">阻止shell对所有</span>字符进行解释。</p>\n<p><strong><span style=\"color:#ed7976;\">♡♡</span></strong>倒引号：</p>\n<p><span style=\"color:#1c7331;\">“`”</span>这个符号位于Esc键的下方。当用倒引号括起一个shell命令时，这个<span style=\"color:#1c7331;\">命令将会被执行</span>，执行后的输出结果将作为这个表达式的值。倒引号中的特殊字符一般都会被解释。</p>\n<p><img alt=\"\" height=\"300\" src=\"..\\..\\static\\image\\0ab585cf24754e3aad3c4e2e334e2186.png\" width=\"1078\"/></p>\n<p></p>\n<h2 id=\"%E2%99%A1%E2%99%A1%E2%99%A1%204%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC\"><strong><span style=\"color:#ed7976;\">♡♡♡4 </span></strong>运算符、表达式求值</h2>\n<p>和c++里大致一样,值得注意的是,在shell表示“相等”时，“==”和“=”在大部分情况下不存在差异，这和c/c++里有些不同。</p>\n<p>例子：</p>\n<p><img alt=\"\" height=\"118\" src=\"..\\..\\static\\image\\530bb8613196479baf9521ecf038ebe8.png\" width=\"485\"/></p>\n<p> 为什么结果不是3？</p>\n<p><span style=\"color:#1c7331;\">因为shell脚本语言是一种“弱类型”的语言</span>，它并不知道变量num中保存的是一个数值，因此在遇到num=$num+2时，shell只是单纯地把两者连在一起作为新的值赋给变量num</p>\n<p>但是<span style=\"color:#fe2c24;\">加上$[]的表达形式就可以告诉shell应该对其中的表达式求值</span></p>\n<p><img alt=\"\" height=\"143\" src=\"..\\..\\static\\image\\cb771af1176942a29f7df079b73f8e24.png\" width=\"532\"/></p>\n<p> 另一种表达形式也可以，如下：</p>\n<p><img alt=\"\" height=\"181\" src=\"..\\..\\static\\image\\f689020df91c4be78eb652d595f2d012.png\" width=\"538\"/></p>\n<p></p>\n</div>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-30 13:56:02", "summary": "目录变量和运算符变量的赋值和使用：变量替换：引号规则运算符、表达式求值首先创建我们的第一个脚本程序：创建修改执行权限运行至此，我们的第一个脚本程序就执行好了文件里面的代码解释可以看这里文件里面的代码解"}