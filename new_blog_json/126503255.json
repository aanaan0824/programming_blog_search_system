{"blogid": "126503255", "writerAge": "码龄2年", "writerBlogNum": "93", "writerCollect": "5029", "writerComment": "5452", "writerFan": "4922", "writerGrade": "7级", "writerIntegral": "13517", "writerName": "一名不会打字的程序员", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126503255.jpg", "writerRankTotal": "786", "writerRankWeekly": "73", "writerThumb": "5253", "writerVisitNum": "78798", "blog_read_count": "590", "blog_time": "已于 2022-08-30 19:27:51 修改", "blog_title": "JavaScript算法描述【排序与搜索】六大经典排序|搜索旋转排序数组|在排序数组中查找元素的第一个和最后一个位置、数组中的第K个|", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>🐧<strong>主页详情</strong>：<a href=\"https://blog.csdn.net/weixin_51568389?spm=1011.2435.3001.5343\">Choice~的个人主页</a><br/> 📢<strong>作者简介</strong>：🏅物联网领域创作者🏅 and 🏅阿里专家博主🏅 and 🏅华为云享专家🏅<br/> ✍️<strong>人生格言</strong>：最慢的步伐不是跬步，而是徘徊；最快的脚步不是冲刺，而是坚持。<br/> 🧑‍💻<strong>人生目标</strong>：成为一名合格的程序员，做未完成的梦：实现财富自由。<br/> 🚩<strong>技术方向</strong>：NULL<br/> 👻如果觉得博主的文章还不错的话，请三连支持一下博主哦<br/> 💬给大家介绍一个我一直在用的求职刷题收割offe👉<a href=\"https://www.nowcoder.com/link/pc_csdncpt_choice_js\">点击进入网站</a></p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#_10\">搜索旋转排序数组</a></li><li><ul><li><a href=\"#__38\">方法一 二分查询最大最小值</a></li><li><a href=\"#_40\">思路</a></li><li><a href=\"#_44\">详解</a></li><li><a href=\"#_53\">代码</a></li><li><a href=\"#__97\">方法二 二分查询中间数</a></li></ul>\n</li></ul>\n</li><li><a href=\"#K_157\">在排序数组中查找元素的第一个和最后一个位置、数组中的第K个最大元素和颜色分类</a></li><li><ul><li><a href=\"#_161\">在排序数组中查找元素的第一个和最后一个位置</a></li><li><ul><li><a href=\"#__181\">方法一 二分查找</a></li></ul>\n</li><li><a href=\"#K_246\">数组中的第K个最大元素</a></li><li><ul><li><a href=\"#_266\">方法一</a></li><li><a href=\"#_326\">方法二</a></li><li><a href=\"#_394\">方法三</a></li><li><a href=\"#_444\">题外话</a></li></ul>\n</li><li><a href=\"#_487\">颜色分类</a></li><li><ul><li><a href=\"#__504\">方法一 直接计算</a></li><li><a href=\"#__552\">方法二 双指针遍历</a></li><li><a href=\"#__597\">方法三 使用各种排序法</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"_10\"></a>搜索旋转排序数组</h2>\n<p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p>\n<p>( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。</p>\n<p>搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。</p>\n<p>你可以假设数组中不存在重复的元素。</p>\n<p>你的算法时间复杂度必须是 O(log n) 级别。</p>\n<p>示例 1:</p>\n<pre><code>输入: nums = [4,5,6,7,0,1,2], target = 0\n输出: 4\n</code></pre>\n<p>示例 2:</p>\n<pre><code>输入: nums = [4,5,6,7,0,1,2], target = 3\n输出: -1\n</code></pre>\n<h3><a id=\"__38\"></a>方法一 二分查询最大最小值</h3>\n<h3><a id=\"_40\"></a>思路</h3>\n<p>先算出 数组中最大最小值，利用 indexOf 计算之后要旋转位置，然后二分计算目标 target 位置</p>\n<h3><a id=\"_44\"></a>详解</h3>\n<ol><li>计算数组中的最大最小值</li><li>定义变量，数组长度等</li><li>目标值大于数组最后一位时，数组查询位置从 0 到数字中在最大位置</li><li>目标值小于等于数组最后一位时，数组查询位置从数组中最小值的位置开始，到数组的最后一位，3.4 两部为了定位数组查询区间</li><li>循环二分查询，计算定位数组的中间值，数组的值等于目标查询结束</li><li>不等于的情况，如果目标大于中间值，则定位数组最小值等于中间值+1，目标小于中间值，则定位数组中最大值等于中间值-1，继续循环查询即可，知道定位数组查询完毕，没有结果的话，返回 -1 代表不存在</li></ol>\n<h3><a id=\"_53\"></a>代码</h3>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">search</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">const</span> min <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> max <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> pos<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> lo<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> hi<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> mid<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">&gt;</span> nums<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    pos <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    lo <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    hi <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n    pos <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    lo <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span>\n    hi <span class=\"token operator\">=</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>lo <span class=\"token operator\">&lt;=</span> hi<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    mid <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>lo <span class=\"token operator\">+</span> hi<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> target<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      lo <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n      hi <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>复杂度分析：</strong></p>\n<ul><li> <p>时间复杂度：O(log(n))O(log(n))</p> <p>过程会最多遍历一遍数组</p> </li><li> <p>空间复杂度：O(1)O(1)</p> <p>只产生一次临时变量存储</p> </li></ul>\n<h3><a id=\"__97\"></a>方法二 二分查询中间数</h3>\n<p><strong>思路</strong></p>\n<p>根据数组的中间数和左右节点的大小对比，来确定升序部分的位置，然后用二分法查询目标节点在数组中的位置</p>\n<p><strong>详解</strong></p>\n<ol><li>计算数组长度，数组为0 直接返回-1</li><li>定义左右值分别为数组第一个和最后一个的下标</li><li>中间下标值为最大最小值的平均数</li><li>如果数组中间数等于目标直接返回下标</li><li>数组的中间值小于数组最后一个值，后半部分还处于升序，如果目标值在这部分数组中，则左下标等于中间值+1，代表目标值在后半部分数组，反着重新定义右下标为中间值-1，目标在前半数组</li><li>数组中间值大于数组最后一个值，代表前半部分数组处于升序，如果目标在前半数组中，右标更新为中间值-1，反之，左下标更新为中间值+1</li><li>二分查询到最后没找到目标值，则返回 -1 代表不存在</li></ol>\n<p><strong>代码</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">search</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> mid<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    mid <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target <span class=\"token operator\">&amp;&amp;</span> target <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        right <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> target <span class=\"token operator\">&amp;&amp;</span> target <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            right <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>复杂度分析</strong></p>\n<ul><li> <p>时间复杂度：O(log(n))O(log(n))</p> <p>过程会最多遍历一遍数组</p> </li><li> <p>空间复杂度：O(1)O(1)</p> <p>只产生一次临时变量存储</p> </li></ul>\n<h1><a id=\"K_157\"></a>在排序数组中查找元素的第一个和最后一个位置、数组中的第K个最大元素和颜色分类</h1>\n<h2><a id=\"_161\"></a>在排序数组中查找元素的第一个和最后一个位置</h2>\n<p>给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。</p>\n<p>你的算法时间复杂度必须是 O(log n) 级别。</p>\n<p>如果数组中不存在目标值，返回 [-1, -1]。</p>\n<p><strong>示例</strong></p>\n<pre><code>输入: nums = [5,7,7,8,8,10], target = 8\n输出: [3,4]\n\n输入: nums = [5,7,7,8,8,10], target = 6\n输出: [-1,-1]\n</code></pre>\n<h3><a id=\"__181\"></a>方法一 二分查找</h3>\n<p><strong>思路</strong></p>\n<p>由于数组已经时升序排列，可直接根据二分查找，往左定位第一个位置，往右定位最后一个位置 二分查找的实现上可以使用循环或者递归。</p>\n<p><strong>详解</strong></p>\n<ol><li>根据二分查找，找到左边第一个不小于目标值的位置</li><li>从上一步中的位置开始到最后，二分查找，确定右边最后一个符合条件值的位置</li><li>得到结果</li></ol>\n<pre><code>function getBinarySearchLowerBound (array, low, high, target) {\n  // 找到第一个不小于目标值的位置\n  while (low &lt; high) {\n    const mid = Math.floor((low + high) / 2);\n    if (array[mid] &lt; target) {\n      low = mid + 1;\n    } else {\n      high = mid;\n    }\n  }\n\n  // 如果相等，则匹配，否则不匹配\n  return array[low] === target ? low : -1;\n}\n\nfunction getBinarySearchUpperBound (array, low, high, target) {\n  // 找到第一个不大于目标值的位置\n  while (low &lt; high) {\n    const mid = Math.ceil((low + high) / 2);\n    if (array[mid] &gt; target) {\n      high = mid - 1;\n    } else {\n      low = mid;\n    }\n  }\n\n  // 如果相等，则匹配，否则不匹配\n  return array[high] === target ? high : -1;\n}\n\nconst searchRange = function (nums, target) {\n  const size = nums.length;\n  const low = getBinarySearchLowerBound(nums, 0, size - 1, target);\n  if (low === -1) {\n    return [-1, -1];\n  }\n  // 从左边数字的位置开始\n  const high = getBinarySearchUpperBound(nums, low &gt;= 0 ? low : 0, size - 1, target);\n  return [low, high];\n};\n</code></pre>\n<p><strong>复杂度分析</strong></p>\n<ul><li> <p>时间复杂度：O(log(n))O(log(n))</p> <p>过程中最差情况会遍历二遍数组</p> </li><li> <p>空间复杂度：O(1)O(1)</p> <p>产生三个临时变量存储</p> </li></ul>\n<h2><a id=\"K_246\"></a>数组中的第K个最大元素</h2>\n<p>在未排序的数组中找到第 <strong>k</strong> 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。</p>\n<p><strong>示例1：</strong></p>\n<pre><code>输入: [3,2,1,5,6,4] 和 k = 2\n输出: 5\n</code></pre>\n<p><strong>示例2：</strong></p>\n<pre><code>输入: [3,2,3,1,2,4,5,5,6] 和 k = 4\n输出: 4\n</code></pre>\n<p>说明：你可以假设 k 总是有效的，且 1 ≤ k ≤ 数组的长度。</p>\n<h3><a id=\"_266\"></a>方法一</h3>\n<p><strong>思路</strong></p>\n<p>首先通过快速排序的方法将数组升序排序，此时数组的头部为最小的元素，尾部为数组最大的元素。题目要求找到数组中的第 K 个最大的元素，即返回 length - k 个元素即可。</p>\n<p><strong>详解</strong></p>\n<ol><li>本方法采用快速排序法；</li><li>首先通过 <code>arr[Math.floor((start + end) / 2)]</code> 找到数组中间的元素作为主元；</li><li>然后使用双指针，分别从数组的头部和尾部遍历数组；</li><li>遍历过程中，把比主元小的数都放到主元的左边，比主元大的数都放到主元的右边，实现数组的升序排序；</li><li>返回第 length - k 个元素，即为数组中第 k 个最大的元素。</li></ol>\n<p>1</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">findKthLargest</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> k</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">findK</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">findK</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> k</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">===</span> end<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 主元</span>\n  <span class=\"token keyword\">const</span> pivot <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> end<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> pivot<span class=\"token punctuation\">)</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> pivot<span class=\"token punctuation\">)</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 二分查到k位置</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">&gt;=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">findK</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> k <span class=\"token operator\">-</span> i <span class=\"token operator\">+</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">findK</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 元素交换</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">swap</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>复杂度分析</strong></p>\n<ul><li>时间复杂度： O(n log n)O(nlogn)</li></ul>\n<p>上述解法中，采用了快速排序的方法，快排的时间复杂度 O(n log n)O(nlogn)。</p>\n<ul><li>空间复杂度： O(1)O(1)</li></ul>\n<p>上述解法中，申请了四个额外的临时存储空间，这将耗费 O(1)O(1) 的空间。</p>\n<h3><a id=\"_326\"></a>方法二</h3>\n<p><strong>思路</strong></p>\n<p>首先通过最小堆排序的方法将数组升序排序，排序完的数组如下图所示：</p>\n<p><img alt=\"image-20220807191400477\" src=\"..\\..\\static\\image\\e2651be04e49ad0ea4ef774e67042bea.png\"/></p>\n<p>此时数组的头部为最小的元素，尾部为数组最大的元素。题目要求找到数组中的第 K 个最大的元素，即返回 length - k 个元素即可。</p>\n<p><strong>详解</strong></p>\n<ol><li>本方法采用最小堆排序法；</li><li>首先建立最小堆，将每个叶子结点视为一个堆，再将每个叶子结点与其父节点一起构成一个包含更多结点的堆；</li><li>所以在构造堆的时候，首先需要找到最后一个结点的父节点，从这个节点开始构造最小堆，直到该节点前面的所有分支节点都处理完毕；</li><li>然后返回第 length - k 个，即为数组中第 k 个最大的元素。</li></ol>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">findKthLargest</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> k</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">const</span> size <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 建立堆</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 排序</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&gt;=</span> size <span class=\"token operator\">-</span> k<span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 得到本次的最大，将最大的与最后一个交换位子</span>\n    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>size <span class=\"token operator\">-</span> k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">heapify</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> length</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 左右两个子节点</span>\n  <span class=\"token keyword\">const</span> l <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> r <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> largest <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> length <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> arr<span class=\"token punctuation\">[</span>largest<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    largest <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">&lt;</span> length <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> arr<span class=\"token punctuation\">[</span>largest<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    largest <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>largest <span class=\"token operator\">!==</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> largest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 递归交换以下的是否也建好堆.</span>\n    <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> largest<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">swap</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>复杂度分析</strong></p>\n<ul><li>时间复杂度： O(n log n)O(nlogn)</li></ul>\n<p>上述解法中，采用了堆排序的方法，堆排序的时间复杂度 O(n log n)O(nlogn)。</p>\n<ul><li>空间复杂度： O(1)O(1)</li></ul>\n<p>上述解法中，申请了四个额外的临时存储空间，这将耗费 O(1)O(1) 的空间。</p>\n<h3><a id=\"_394\"></a>方法三</h3>\n<p><strong>思路</strong></p>\n<p>首先通过冒泡排序的方法将数组升序排序，此时数组的头部为最小的元素，尾部为数组最大的元素。题目要求找到数组中的第 K 个最大的元素，即返回 length - k 个元素即可。</p>\n<p><strong>详解</strong></p>\n<ol><li>本方法采用经典冒泡排序法；</li><li>比较相邻的元素，如果第一个比第二个大，就交换他们两个；</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对；</li><li>完成步骤 3 后，最后的元素会是最大的数，实现升序排序；</li><li>返回第 len-k 个元素，即为数组中第 k 个最大的元素。</li></ol>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">findKthLargest</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> k</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 冒泡排序</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token comment\">// 异或交换，详见题外话解析</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        nums<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">^=</span> nums<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        nums<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">-</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>复杂度分析</strong></p>\n<ul><li>时间复杂度： O(n^2)O(n2)</li></ul>\n<p>上述解法中，内外两层循环，时间复杂度 O(n^2)O(n2)。</p>\n<ul><li>空间复杂度： O(1)O(1)</li></ul>\n<p>上述解法中，最优的情况是开始时元素已经按顺序排好，空间复杂度为 0 ，最差的情况是开始时元素逆序排序，此时空间复杂度 O(n)O(n)，平均空间复杂度 O(1)O(1)。</p>\n<p>复杂度分析：</p>\n<ul><li>时间复杂度： O(n^2)O(n2)，内外两层循环，时间复杂度 O(n^2)O(n2)</li><li>空间复杂度： O(1)O(1)，最优的情况是开始时元素已经按顺序排好，空间复杂度为0，最差的情况是开始时元素逆序排序，此时空间复杂度 O(n)O(n)，平均空间复杂度 O(1)O(1)</li></ul>\n<h3><a id=\"_444\"></a>题外话</h3>\n<p>对于给定两个整数a,b，下面的异或运算可以实现a,b的交换，而无需借助第3个临时变量：</p>\n<pre><code>a = a ^ b;\nb = a ^ b;\na = a ^ b;\n</code></pre>\n<p>这个交换两个变量而无需借助第3个临时变量过程，其实现主要是基于异或运算的如下性质：</p>\n<ol><li>任意一个变量X与其自身进行异或运算，结果为0，即X ^ X=0</li><li>任意一个变量X与0进行异或运算，结果不变，即X ^ 0=X</li><li>异或运算具有可结合性，即a ^ b ^ c =（a ^ b）^ c= a ^（ b ^ c）</li><li>异或运算具有可交换性，即a ^ b = b ^ a</li></ol>\n<p>分析：</p>\n<p>第一步： a = a ^ b;</p>\n<p>完成后 a变量的结果为a ^ b</p>\n<p>第二步： b = a ^ b;</p>\n<p>此时赋值号右边的 a 保存的是 a ^ b 的值，那么将赋值号右边的 a 用 a ^ b 替换，</p>\n<p>得到（a ^ b） ^ b = a ^ (b ^ b)=a ^ 0=a,</p>\n<p>即经过第二步运算后 b 中的值为 a ，即 b=a ，将 a 换到了 b 里</p>\n<p>第三步： a = a ^ b;</p>\n<p>此时赋值号右边的 a 保存的仍然是 a ^ b 的值，不变，而赋值号右边的 b 已经是 a 了，</p>\n<p>将赋值号右边的 a,b 分别进行替换，</p>\n<p>即此时赋值号右边 a ^ b=（a ^ b）^ a=a ^ b^ a=a ^ a^ b=0^ b=b, 该值赋值给 a ,即 a=b</p>\n<p>即经过第三步运算后 a 中的值为 b ，即 a=b, 将 b 换到了 a 里</p>\n<p>这样经过如上的三步骤，完成了交换两个变量 a,b 而无需借助第 3 个临时变量过程。</p>\n<h2><a id=\"_487\"></a>颜色分类</h2>\n<p>给定一个包含红色、白色和蓝色，一共 <em>n</em> 个元素的数组，<a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\"><strong>原地</strong></a>对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p>\n<p>此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。</p>\n<p><strong>注意:</strong> 不能使用代码库中的排序函数来解决这道题。</p>\n<p><strong>示例</strong></p>\n<pre><code>输入: [2,0,2,1,1,0]\n输出: [0,0,1,1,2,2]\n</code></pre>\n<h3><a id=\"__504\"></a>方法一 直接计算</h3>\n<p><strong>思路</strong></p>\n<p>直接遍历整个数组，分别计算出红蓝白球的个数，然后按照红色、白色、蓝色顺序依次存入数组。</p>\n<p><strong>详解</strong></p>\n<ol><li>设定三个变量 red, white，blue 分别表示红球、白球和蓝球。</li><li>遍历数组，遇到 0 则使 red 自增1，遇到 1 则使 white 自增1，遇到 2 则使 blue 自增1。</li><li>根据红白蓝的个数，依次将 0，1，2 存入数组。</li></ol>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sortColors</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">let</span> red <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> blue <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> white <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      red<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      blue<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      white<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> red<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    nums<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> blue<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    nums<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> white<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    nums<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>复杂度分析</strong></p>\n<ul><li>时间复杂度： O(n)O(n)</li><li>空间复杂度： O(n)O(n)</li></ul>\n<h3><a id=\"__552\"></a>方法二 双指针遍历</h3>\n<p><strong>思路</strong></p>\n<p>设定三个指针 begin, end, i，用 i 遍历数组，遇到 0，1 时分别将值与 begin, end 指向的值交换。这种方法相对于方法一的好处是只使用了一个常数空间。</p>\n<p><strong>详解</strong></p>\n<ol><li>设定一头一尾两个指针 begin 和 end，然后用一个指针 <strong>i</strong> 从头开始遍历数组。</li><li>如果遇到 0，则将该数值与begin指向的值交换，并且使begin向后移一位。</li><li>如果遇到 2，则将该数值与end指向的值交换，并且使end向前移一位，并且此时不需自加 <strong>i</strong>。</li><li>如果遇到 1，则继续。</li><li>最终得到新数组。</li></ol>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sortColors</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">let</span> begin <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> end <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>begin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      nums<span class=\"token punctuation\">[</span>begin<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      begin<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n      end<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n      i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>复杂度分析</strong></p>\n<ul><li>时间复杂度：O(n)O(n)</li><li>空间复杂度：O(1)O(1)</li></ul>\n<h3><a id=\"__597\"></a>方法三 使用各种排序法</h3>\n<p><strong>思路</strong></p>\n<p>本题的实质是将数字从小到大排序，可以使用各种排序法（冒泡排序法，选择排序法，快速排序法等），这里举一个冒泡排序法的例子。</p>\n<p>1</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sortColors</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> nums<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">const</span> tem <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        nums<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tem<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>复杂度分析</strong></p>\n<ul><li> <p>时间复杂度：O(n^2)O(n2)</p> <p>遍历了两次含n个元素的空间</p> </li><li> <p>空间复杂度：O(1)O(1)</p> <p>排序过程没有用到新的空间存储数据</p> </li></ul>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-08-30 19:27:51", "summary": "主页详情：的个人主页作者简介：物联网领域创作者阿里专家博主华为云享专家人生格言：最慢的步伐不是跬步，而是徘徊；最快的脚步不是冲刺，而是坚持。人生目标：成为一名合格的程序员，做未完成的梦：实现财富自由。"}