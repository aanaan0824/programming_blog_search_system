{"blogid": "126205467", "writerAge": "码龄4年", "writerBlogNum": "139", "writerCollect": "1868", "writerComment": "2021", "writerFan": "4040", "writerGrade": "6级", "writerIntegral": "6447", "writerName": "不会压弯的小飞侠", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126205467.jpg", "writerRankTotal": "2406", "writerRankWeekly": "35", "writerThumb": "1697", "writerVisitNum": "159232", "blog_read_count": "1650", "blog_time": "已于 2022-08-22 22:28:32 修改", "blog_title": "Java-数组和方法(day6-7)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>活动地址：<a href=\"https://marketing.csdn.net/p/bdabfb52c5d56532133df2adc1a728fd\">CSDN21天学习挑战赛</a><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\415b0e2e91e94f73ba29ead555a82457.jpeg\"/><br/> 🍁<code>博客主页：</code>👉<a href=\"https://blog.csdn.net/qq_43514330?type=blog\">@不会压弯的小飞侠</a><br/> ✨<code>欢迎关注：</code>👉<code>点赞</code>👍<code>收藏</code>⭐<code>留言</code>✒<br/> ✨<code>系列专栏：</code>👉<a href=\"https://blog.csdn.net/qq_43514330/category_11945728.html?spm=1001.2014.3001.5482\">21天挑战回顾java</a><br/> ✨<code>知足上进，不负野心。</code><br/> 🔥<code>欢迎大佬指正，一起学习！一起加油！</code></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/f9e7290d231c413fbc3f595656951ea9.gif#pic_center\"/></p>\n<p>🔥<code>第一周学习内容：java基础知识</code></p>\n<p>🔥<code>第六-七天学习内容：</code></p>\n<ul><li><code>数组</code></li><li><code>方法</code></li></ul>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#_22\">🍁数组的定义</a></li><li><a href=\"#_60\">🍁数组的访问</a></li><li><a href=\"#_94\">🍁数组的遍历</a></li><li><a href=\"#_156\">🍁数组的初始化</a></li><li><a href=\"#_177\">🍁什么是方法？</a></li><li><a href=\"#_179\">🍁方法的好处</a></li><li><a href=\"#_182\">🍁方法的格式</a></li><li><a href=\"#_187\">🍁方法的定义</a></li><li><a href=\"#_188\">🍁怎样定义方法</a></li><li><a href=\"#_203\">🍁方法的调用</a></li><li><a href=\"#_204\">🍁调用方式</a></li><li><a href=\"#_223\">🍁方法的重载</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_22\"></a>🍁数组的定义</h1>\n<p>java中通常使用变量存放各种数据类型，在存放的过程中，如果需要的变量名太多，这时就可以用数组变量来存放。</p>\n<p>数组的定义格式有三种：</p>\n<p>格式一：</p>\n<blockquote>\n<p>数据类型 [ ] 数组名=new 数据类型 [数组长度]；</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//定义一个长度为5的int类型的数组。</span>\n</code></pre>\n<p>格式二：</p>\n<blockquote>\n<p>数据类型 [ ] 数组名=new 数据类型 [ ] {元素1，元素二，元素三…}；</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span>，<span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span>，<span class=\"token number\">5</span><span class=\"token punctuation\">}</span>；\n<span class=\"token comment\">//定义一个长度为5的int类型的数组。</span>\n</code></pre>\n<p>格式三：</p>\n<blockquote>\n<p>数据类型 [ ] 数组名={元素1，元素二，元素三…}；</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span>，<span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span>，<span class=\"token number\">5</span><span class=\"token punctuation\">}</span>；\n<span class=\"token comment\">//定义一个长度为5的int类型的数组。</span>\n</code></pre>\n<p>数据类型：数组成员类型。<br/> 数组名：自定义数组的变量名。<br/> [ ] :表示数组。<br/> new：创建数组的关键字，通过new开辟内存空间。<br/> 长度：数组长度，数组最多能存放的元素的个数。</p>\n<h1><a id=\"_60\"></a>🍁数组的访问</h1>\n<p>数组访问是通过数组名和下标实现的。</p>\n<p>操作数组元素格式：</p>\n<pre><code>   数组名 [下标]；//下标从0开始\n</code></pre>\n<p>例如 int 的长度为3，下标就是0-2.<br/> 表示为：int [0]，int [1]，int [2]</p>\n<p>1.下面通过一个例子来实现数组的访问</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">sz1</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果：5</p>\n<p>2.我们还可以将数组第二个元素的值改为20，然后再输出：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">sz1</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        arr <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>运行结果：20</p>\n<h1><a id=\"_94\"></a>🍁数组的遍历</h1>\n<p>数组的遍历就不过多解释了，下面通过一个案例详细说明。</p>\n<p>1.案例：定义一个长度为6的int整型数组，将前四个分别赋值为1,2,3,4并输出：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">sz1</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        arr <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        arr <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        arr <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        arr <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>注意：<code>数组中未手动赋值的有默认值，int类型的默认值是0；其他类型的下面再说。</code></strong></p>\n<p>2.用for循环来实现上述案例：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">sz1</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        arr <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        arr <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        arr <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        arr <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>3.接下来通过看看这个案例能发现什么？</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">sz1</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>注意：直接输出数组变量名，会得到数组的内存地址。</strong></p>\n<p>4.每个数组都有一个属性length，可以通过数组名.length来获取长度，即数组元素的个数。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">sz1</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_156\"></a>🍁数组的初始化</h1>\n<p>当使用关键字new生成数组时，数组中每个成员都会自动被初始化，初始值根据数据类型而定。<br/> 数值型初始值：0；<br/> 浮点型初始值：0.0；<br/> 字符型初始值：‘\\0’;<br/> 布尔型初始值: false;<br/> 类对象初始值：null；</p>\n<p>1.主动赋值对数组进行初始化：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>2.将数组的定义，初始化放到一条语句中：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h1><a id=\"_177\"></a>🍁什么是方法？</h1>\n<p>方法，也叫函数，完成特定功能的代码块，一个方法就是一个功能，一个动作或一个行为。</p>\n<h1><a id=\"_179\"></a>🍁方法的好处</h1>\n<p>提高代码的复用性，方便维护。</p>\n<h1><a id=\"_182\"></a>🍁方法的格式</h1>\n<p>修饰符 返回值类型 方法名（参数类型 参数名1，参数类型 参数名2）{<!-- --><br/> 方法体语句<br/> return 返回值；<br/> }</p>\n<h1><a id=\"_187\"></a>🍁方法的定义</h1>\n<h1><a id=\"_188\"></a>🍁怎样定义方法</h1>\n<p>1.确定方法名<br/> 2.确定返回值类型<br/> 3.确定参数列表</p>\n<p>例子：</p>\n<pre><code class=\"prism language-html\">public static int number(int a,int b){\n        \n    }\n</code></pre>\n<p>方法名：number<br/> 返回值类型：int<br/> 参数列表：int a,int b</p>\n<h1><a id=\"_203\"></a>🍁方法的调用</h1>\n<h1><a id=\"_204\"></a>🍁调用方式</h1>\n<p>1.通过方法名调用<br/> 2.根据将实参传给方法</p>\n<p>案例分析：</p>\n<pre><code class=\"prism language-html\">public class DemoOne {\n    public static void main(String[] args) {\n        int x=sum(10,12);\n        System.out.println(x);\n    }\n    public static int sum(int a,int b){\n        int c=a+b;\n        return c;\n    }\n}\n</code></pre>\n<p><strong>注意的是：<code>方法和方法之间是平级的关系。</code></strong></p>\n<h1><a id=\"_223\"></a>🍁方法的重载</h1>\n<p>java允许使用同一个名字去定义多个方法，前提是方法的参数列表，参数的数量，类型不完全相同。</p>\n<p>案例：</p>\n<pre><code class=\"prism language-html\">public class DemoTwo {\n    int sum(int a,int b){\n        return a+b;\n    }\n    int sum(int a,int b,int c){\n        return a+b+c;\n    }\n    public static void main(String[] args) {\n        DemoTwo dt=new DemoTwo();\n        System.out.println(dt.sum(10,12));\n        System.out.println(dt.sum(10,20,30));\n    }\n}\n\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-08-22 22:28:32", "summary": "活动地址：天学习挑战赛在这里插入图片描述博客主页：不会压弯的小飞侠欢迎关注：点赞收藏留言系列专栏：天挑战回顾知足上进，不负野心。欢迎大佬指正，一起学习！一起加油！在这里插入图片描述第一周学习内容：基础"}