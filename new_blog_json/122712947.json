{"blogid": "122712947", "writerAge": "码龄3年", "writerBlogNum": "139", "writerCollect": "493", "writerComment": "114", "writerFan": "753", "writerGrade": "5级", "writerIntegral": "1860", "writerName": "WYSCODER", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122712947.jpg", "writerRankTotal": "11331", "writerRankWeekly": "15971", "writerThumb": "334", "writerVisitNum": "98261", "blog_read_count": "7672", "blog_time": "已于 2022-01-27 18:06:44 修改", "blog_title": "Java迭代器详解，看这一篇就够了", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#Java__4\">🚩Java 迭代器详解</a></li><li><ul><li><a href=\"#_5\">📚迭代器的定义</a></li><li><a href=\"#Iterator_12\">📒认识Iterator</a></li><li><ul><li><a href=\"#_13\">✏️类结构图</a></li><li><a href=\"#Iterable_17\">✒️Iterable接口</a></li><li><a href=\"#Iterator_31\">🖍️Iterator接口</a></li><li><ul><li><a href=\"#Iterator_44\">📃Iterator接口的方法</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_54\">📙迭代器的使用</a></li><li><ul><li><a href=\"#_55\">🏷️使用迭代器遍历集合</a></li><li><a href=\"#Itertor_81\">🔖Itertor的执行原理</a></li><li><ul><li><a href=\"#_83\">⏳图示执行过程</a></li><li><a href=\"#_86\">⌛执行过程详解</a></li></ul>\n</li><li><a href=\"#_97\">🃏生成迭代器的快捷键</a></li></ul>\n</li><li><a href=\"#remove_100\">📕迭代器中的remove()</a></li><li><ul><li><a href=\"#remove_101\">⛄迭代器的remove()方法使用</a></li><li><a href=\"#revome_130\">☃️迭代器遍历中调用集合revome()方法触发异常</a></li></ul>\n</li><li><a href=\"#for_244\">📗增强for循环</a></li><li><ul><li><a href=\"#for_245\">📫认识增强for循环</a></li><li><a href=\"#_249\">📪基本语法</a></li><li><a href=\"#for_251\">📬增强for循环的使用</a></li><li><a href=\"#for_281\">📭增强for循环的快捷键</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n</blockquote>\n<h1><a id=\"Java__4\"></a>🚩Java 迭代器详解</h1>\n<h2><a id=\"_5\"></a>📚迭代器的定义</h2>\n<p><code>迭代器</code>是属于<strong>设计模式</strong>之一，<mark>迭代器模式</mark>提供了一种方法来顺序访问一个聚合对象中各个元素，而不保留该对象的内部表示。</p>\n<blockquote>\n<p>1）<code>Iterator对象</code>称为<strong>迭代器</strong>，主要用于遍历<code>Collection集合</code>中的元素。<br/> 2）所有实现了<code>Collection接口</code>的集合类都有一个<code>iterator()</code>方法，用以返回一个实现了<code>Iterator接口的对象</code>，即可以返回一个<code>迭代器</code>。<br/> 3）<code>Iterator</code>仅用于遍历集合，<code>Iterator</code>本身并不存放对象。</p>\n</blockquote>\n<h2><a id=\"Iterator_12\"></a>📒认识Iterator</h2>\n<h3><a id=\"_13\"></a>✏️类结构图</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\197950636cfe4918bf91772d803dd7fe.png\"/><br/> 通过观察类结构图的继承关系我们发现，集合的顶层接口<code>Collection</code>继承<code>Iterable</code>接口。</p>\n<h3><a id=\"Iterable_17\"></a>✒️Iterable接口</h3>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Iterable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">/**\n     * Returns an iterator over elements of type {@code T}.\n     *\n     * @return an Iterator.\n     */</span>\n    <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在<code>Iterable接口</code>中有一个<code>Iterator方法</code>，它返回一个<code>Itertator对象</code>。</p>\n<h3><a id=\"Iterator_31\"></a>🖍️Iterator接口</h3>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token class-name\">E</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnsupportedOperationException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"remove\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"Iterator_44\"></a>📃Iterator接口的方法</h4>\n<table><thead><tr><th>返回值类型</th><th>方法名</th><th>功能</th></tr></thead><tbody><tr><td>boolean</td><td>hasNext()</td><td>判断集合是否还有元素，如果返回 <strong>true</strong> 表示集合还有元素，返回 <strong>false</strong> 表示集合中没有元素；一般对集合的访问通过 <strong>while(hasNext())</strong> 判断是否还需要遍历。</td></tr><tr><td><font color=\"blue\">E </font></td><td>next()</td><td>获取集合中遍历的当前元素 ；一般先调用 <strong>hasNext()</strong> 方法判断是否存在元素，再调用 <strong>next()</strong> 获取元素，需要进行循环交替遍历集合中的元素。</td></tr><tr><td>void</td><td>remove</td><td>删除集合中的元素。</td></tr></tbody></table>\n<h2><a id=\"_54\"></a>📙迭代器的使用</h2>\n<h3><a id=\"_55\"></a>🏷️使用迭代器遍历集合</h3>\n<p>我们用<code>ArrayList集合</code>存放一些整型数据做示例，然后将其集合中的元素一一遍历打印输出。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Iterator</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">222</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">333</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> iterator <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>运行结果：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c32e7669546f4d61b09ea52c2e12f820.png\"/><br/> 观察运行结果我们发现，通过<code>迭代器</code>我们将<code>ArrayList集合</code>中的元素一一打印了出来。</p>\n<h3><a id=\"Itertor_81\"></a>🔖Itertor的执行原理</h3>\n<p>在上述的示例中，<mark>迭代器</mark>是如何实现对集合的遍历呢？</p>\n<h4><a id=\"_83\"></a>⏳图示执行过程</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/131907b56b9b4b848d641d4976aa4135.gif\"/></p>\n<h4><a id=\"_86\"></a>⌛执行过程详解</h4>\n<p>①首先得到一个集合的迭代器<code>Iterator iterator = list.iterator();</code><br/> ②进入<code>while循环</code>，调用<code>hasNext()</code>判断是否有下一个元素，返回true，<code>Iterator.next()</code>移动一个位置，将该位置的元素<strong>111</strong>返回。<br/> ③再次进入<code>while循环</code>，调用<code>hasNext()</code>判断是否有下一个元素，返回true，<code>Iterator.next()</code>移动一个位置，将该位置<strong>222</strong>的元素返回。<br/> ④再次进入<code>while循环</code>，调用<code>hasNext()</code>判断是否有下一个元素，返回true，<code>Iterator.next()</code>移动一个位置，将该位置<strong>333</strong>的元素返回。<br/> ⑤再次进入<code>while循环</code>，调用<code>hasNext()</code>判断是否有下一个元素，返回false，循环结束。</p>\n<hr/>\n<p>在 <mark>迭代器</mark>的遍历过程中先通过<code>hastNext()</code>方法判断是否有下一个元素，如果存在下一个元素再调用<code>next()</code>方法获取元素，在这里<code>next()</code>方法先往后移动一个元素位置，再返回该位置的元素。因此，在调用<code>next()</code>方法之前必须要调用<code>hastNext()</code>方法进行检测；如果没有调用并且没有下一个元素，直接调用<code>next()</code>方法会抛出 <code>NoSuchElementException异常</code>。</p>\n<h3><a id=\"_97\"></a>🃏生成迭代器的快捷键</h3>\n<p>一开始使用<mark>迭代器</mark>可能会觉得麻烦，但是如果用的<code>Idea编译器</code>是有快捷键的，输入<code>itit</code>再回车就会直接生成。<br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/00b4a901b8124966bac24b75b7e82916.gif\"/></p>\n<h2><a id=\"remove_100\"></a>📕迭代器中的remove()</h2>\n<h3><a id=\"remove_101\"></a>⛄迭代器的remove()方法使用</h3>\n<p>在<mark>Iterator接口</mark>中除了<code>hasNext()</code>和<code>next()</code>方法外，还有一个<code>remove()</code>方法，即<strong>删除集合中的元素</strong>。</p>\n<p><em>如删除上述示例集合中的元素111</em></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Iterator</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span>\n<span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">222</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">333</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除前:\"</span> <span class=\"token operator\">+</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> iterator <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Integer</span> value <span class=\"token operator\">=</span>  iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token number\">111</span><span class=\"token punctuation\">)</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除后\"</span> <span class=\"token operator\">+</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>运行结果：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\016d92a1cf8c4af5bf26922e967ca5fb.png\"/></p>\n<h3><a id=\"revome_130\"></a>☃️迭代器遍历中调用集合revome()方法触发异常</h3>\n<p>在Java集合中，以集合<code>ArrayList</code>为例，在使用中可能会遇到删除的需求场景，此时如果代码书写不当，极有可能会抛出<code>java.util.ConcurrentModificationException</code>异常信息。<br/> 在上述示例中用<code>Iterator</code>调用了迭代器<code>remove()</code>方法，如果在使用中不小心调用了集合中的<code>remove()</code>方法会发生什么？</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Iterator</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span>\n<span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">222</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">333</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除前:\"</span> <span class=\"token operator\">+</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> iterator <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Integer</span> value <span class=\"token operator\">=</span>  iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token number\">111</span><span class=\"token punctuation\">)</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除后\"</span> <span class=\"token operator\">+</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><strong>运行结果：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\48626437737e4eaba214cdbc4eec6b2c.png\"/><br/> 运行结果中抛出<code>java.util.ConcurrentModificationException</code>异常信息。这是因为触发了<mark>集合中并发修改的异常</mark> 接下来我们通过源码对抛出异常的原因进行剖析。</p>\n<pre><code class=\"prism language-java\">    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Itr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在<code>ArrayList</code>集合的<code>Iterator</code>方法中，是通过返回<code>Itr</code>对象来获得迭代器的。<code>Itr</code>是<code>ArrayList</code>的一个<mark>内部类</mark>，它实现了<code>Iterator</code>接口，<em>代码如下：</em></p>\n<pre><code class=\"prism language-java\">   <span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Itr</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> cursor<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// index of next element to return</span>\n        <span class=\"token keyword\">int</span> lastRet <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// index of last element returned; -1 if no such</span>\n        <span class=\"token keyword\">int</span> expectedModCount <span class=\"token operator\">=</span> modCount<span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Itr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> cursor <span class=\"token operator\">!=</span> size<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">checkForComodification</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> cursor<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;=</span> size<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NoSuchElementException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> elementData <span class=\"token operator\">=</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>elementData<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;=</span> elementData<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentModificationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            cursor <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">)</span> elementData<span class=\"token punctuation\">[</span>lastRet <span class=\"token operator\">=</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastRet <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">checkForComodification</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>lastRet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                cursor <span class=\"token operator\">=</span> lastRet<span class=\"token punctuation\">;</span>\n                lastRet <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                expectedModCount <span class=\"token operator\">=</span> modCount<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IndexOutOfBoundsException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentModificationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Itr类属性</strong></p>\n<table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>cursor</td><td>索引下标，表示下一个可以访问的元素的索引，默认值为 <strong>0</strong></td></tr><tr><td>lastRet</td><td>索引下标，表示上一个元素的索引，默认值为 <strong>-1</strong></td></tr><tr><td>expectedModCount</td><td>对集合修改的版本号，初始值为<strong>ModCount</strong></td></tr></tbody></table>\n<p>ModCount定义在AbstractList接口中，初始值为<strong>0</strong>，定义如下：</p>\n<pre><code class=\"prism language-java\"> <span class=\"token keyword\">protected</span> <span class=\"token keyword\">transient</span> <span class=\"token keyword\">int</span> modCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>ModCount是版本号，在对集合进行变更操作（增加、删除、修改等）的时候会对版本号进行 <strong>+1</strong> 操作。</p>\n<hr/>\n<p>结合上述代码进行抛出<code>java.util.ConcurrentModificationException</code>异常的解释。<br/> ①初始化ArrayList，添加三次元素，即三次调用<code>add()</code>方法，进行三次<code>modCount++;</code> 此时，<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        \n         \n          m\n         \n         \n          o\n         \n         \n          d\n         \n         \n          C\n         \n         \n          o\n         \n         \n          u\n         \n         \n          n\n         \n         \n          t\n         \n         \n          =\n         \n         \n          3\n         \n         \n          ，\n         \n         \n          s\n         \n         \n          i\n         \n         \n          z\n         \n         \n          e\n         \n         \n          =\n         \n         \n          3\n         \n         \n          ；\n         \n        \n       \n      \n      \n       \\color{red}{modCount = 3，size = 3；}\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"color: red;\"><span class=\"mord mathdefault\" style=\"color: red;\">m</span><span class=\"mord mathdefault\" style=\"color: red;\">o</span><span class=\"mord mathdefault\" style=\"color: red;\">d</span><span class=\"mord mathdefault\" style=\"margin-right: 0.07153em; color: red;\">C</span><span class=\"mord mathdefault\" style=\"color: red;\">o</span><span class=\"mord mathdefault\" style=\"color: red;\">u</span><span class=\"mord mathdefault\" style=\"color: red;\">n</span><span class=\"mord mathdefault\" style=\"color: red;\">t</span><span class=\"mspace\" style=\"color: red; margin-right: 0.277778em;\"></span><span class=\"mrel\" style=\"color: red;\">=</span><span class=\"mspace\" style=\"color: red; margin-right: 0.277778em;\"></span><span class=\"mord\" style=\"color: red;\">3</span><span class=\"mord cjk_fallback\" style=\"color: red;\">，</span><span class=\"mord mathdefault\" style=\"color: red;\">s</span><span class=\"mord mathdefault\" style=\"color: red;\">i</span><span class=\"mord mathdefault\" style=\"margin-right: 0.04398em; color: red;\">z</span><span class=\"mord mathdefault\" style=\"color: red;\">e</span><span class=\"mspace\" style=\"color: red; margin-right: 0.277778em;\"></span><span class=\"mrel\" style=\"color: red;\">=</span><span class=\"mspace\" style=\"color: red; margin-right: 0.277778em;\"></span><span class=\"mord\" style=\"color: red;\">3</span><span class=\"mord cjk_fallback\" style=\"color: red;\">；</span></span></span></span></span></span><br/> ②初始化Iterator迭代器进行循环，此时，<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        \n         \n          e\n         \n         \n          x\n         \n         \n          p\n         \n         \n          e\n         \n         \n          c\n         \n         \n          t\n         \n         \n          e\n         \n         \n          d\n         \n         \n          M\n         \n         \n          o\n         \n         \n          d\n         \n         \n          C\n         \n         \n          o\n         \n         \n          u\n         \n         \n          n\n         \n         \n          t\n         \n         \n          =\n         \n         \n          m\n         \n         \n          o\n         \n         \n          d\n         \n         \n          C\n         \n         \n          o\n         \n         \n          u\n         \n         \n          n\n         \n         \n          t\n         \n         \n          =\n         \n         \n          3\n         \n         \n          ，\n         \n        \n       \n      \n      \n       \\color{red}{expectedModCount = modCount=3，}\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.88888em; vertical-align: -0.19444em;\"></span><span class=\"mord\" style=\"color: red;\"><span class=\"mord mathdefault\" style=\"color: red;\">e</span><span class=\"mord mathdefault\" style=\"color: red;\">x</span><span class=\"mord mathdefault\" style=\"color: red;\">p</span><span class=\"mord mathdefault\" style=\"color: red;\">e</span><span class=\"mord mathdefault\" style=\"color: red;\">c</span><span class=\"mord mathdefault\" style=\"color: red;\">t</span><span class=\"mord mathdefault\" style=\"color: red;\">e</span><span class=\"mord mathdefault\" style=\"color: red;\">d</span><span class=\"mord mathdefault\" style=\"margin-right: 0.10903em; color: red;\">M</span><span class=\"mord mathdefault\" style=\"color: red;\">o</span><span class=\"mord mathdefault\" style=\"color: red;\">d</span><span class=\"mord mathdefault\" style=\"margin-right: 0.07153em; color: red;\">C</span><span class=\"mord mathdefault\" style=\"color: red;\">o</span><span class=\"mord mathdefault\" style=\"color: red;\">u</span><span class=\"mord mathdefault\" style=\"color: red;\">n</span><span class=\"mord mathdefault\" style=\"color: red;\">t</span><span class=\"mspace\" style=\"color: red; margin-right: 0.277778em;\"></span><span class=\"mrel\" style=\"color: red;\">=</span><span class=\"mspace\" style=\"color: red; margin-right: 0.277778em;\"></span><span class=\"mord mathdefault\" style=\"color: red;\">m</span><span class=\"mord mathdefault\" style=\"color: red;\">o</span><span class=\"mord mathdefault\" style=\"color: red;\">d</span><span class=\"mord mathdefault\" style=\"margin-right: 0.07153em; color: red;\">C</span><span class=\"mord mathdefault\" style=\"color: red;\">o</span><span class=\"mord mathdefault\" style=\"color: red;\">u</span><span class=\"mord mathdefault\" style=\"color: red;\">n</span><span class=\"mord mathdefault\" style=\"color: red;\">t</span><span class=\"mspace\" style=\"color: red; margin-right: 0.277778em;\"></span><span class=\"mrel\" style=\"color: red;\">=</span><span class=\"mspace\" style=\"color: red; margin-right: 0.277778em;\"></span><span class=\"mord\" style=\"color: red;\">3</span><span class=\"mord cjk_fallback\" style=\"color: red;\">，</span></span></span></span></span></span> <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        \n         \n          c\n         \n         \n          u\n         \n         \n          r\n         \n         \n          s\n         \n         \n          o\n         \n         \n          r\n         \n         \n          =\n         \n         \n          0\n         \n         \n          ，\n         \n         \n          l\n         \n         \n          a\n         \n         \n          s\n         \n         \n          t\n         \n         \n          R\n         \n         \n          e\n         \n         \n          t\n         \n         \n          =\n         \n         \n          −\n         \n         \n          1\n         \n        \n       \n      \n      \n       \\color{red}{cursor=0，lastRet = -1}\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.77777em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"color: red;\"><span class=\"mord mathdefault\" style=\"color: red;\">c</span><span class=\"mord mathdefault\" style=\"color: red;\">u</span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em; color: red;\">r</span><span class=\"mord mathdefault\" style=\"color: red;\">s</span><span class=\"mord mathdefault\" style=\"color: red;\">o</span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em; color: red;\">r</span><span class=\"mspace\" style=\"color: red; margin-right: 0.277778em;\"></span><span class=\"mrel\" style=\"color: red;\">=</span><span class=\"mspace\" style=\"color: red; margin-right: 0.277778em;\"></span><span class=\"mord\" style=\"color: red;\">0</span><span class=\"mord cjk_fallback\" style=\"color: red;\">，</span><span class=\"mord mathdefault\" style=\"margin-right: 0.01968em; color: red;\">l</span><span class=\"mord mathdefault\" style=\"color: red;\">a</span><span class=\"mord mathdefault\" style=\"color: red;\">s</span><span class=\"mord mathdefault\" style=\"color: red;\">t</span><span class=\"mord mathdefault\" style=\"margin-right: 0.00773em; color: red;\">R</span><span class=\"mord mathdefault\" style=\"color: red;\">e</span><span class=\"mord mathdefault\" style=\"color: red;\">t</span><span class=\"mspace\" style=\"color: red; margin-right: 0.277778em;\"></span><span class=\"mrel\" style=\"color: red;\">=</span><span class=\"mspace\" style=\"color: red; margin-right: 0.277778em;\"></span><span class=\"mord\" style=\"color: red;\">−</span><span class=\"mord\" style=\"color: red;\">1</span></span></span></span></span></span><br/> ③进行hasNext判断，<code>cursor != size;</code>成立，进入循环<br/> ④调用<code>next()</code>方法，首先进行<code>checkForComodification()</code>校验，<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        \n         \n          m\n         \n         \n          o\n         \n         \n          d\n         \n         \n          C\n         \n         \n          o\n         \n         \n          u\n         \n         \n          n\n         \n         \n          t\n         \n         \n          =\n         \n         \n          =\n         \n         \n          e\n         \n         \n          x\n         \n         \n          p\n         \n         \n          e\n         \n         \n          c\n         \n         \n          t\n         \n         \n          e\n         \n         \n          d\n         \n         \n          M\n         \n         \n          o\n         \n         \n          d\n         \n         \n          C\n         \n         \n          o\n         \n         \n          u\n         \n         \n          n\n         \n         \n          t\n         \n        \n       \n      \n      \n       \\color{red}{modCount == expectedModCount}\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.88888em; vertical-align: -0.19444em;\"></span><span class=\"mord\" style=\"color: red;\"><span class=\"mord mathdefault\" style=\"color: red;\">m</span><span class=\"mord mathdefault\" style=\"color: red;\">o</span><span class=\"mord mathdefault\" style=\"color: red;\">d</span><span class=\"mord mathdefault\" style=\"margin-right: 0.07153em; color: red;\">C</span><span class=\"mord mathdefault\" style=\"color: red;\">o</span><span class=\"mord mathdefault\" style=\"color: red;\">u</span><span class=\"mord mathdefault\" style=\"color: red;\">n</span><span class=\"mord mathdefault\" style=\"color: red;\">t</span><span class=\"mspace\" style=\"color: red; margin-right: 0.277778em;\"></span><span class=\"mrel\" style=\"color: red;\">=</span><span class=\"mrel\" style=\"color: red;\">=</span><span class=\"mspace\" style=\"color: red; margin-right: 0.277778em;\"></span><span class=\"mord mathdefault\" style=\"color: red;\">e</span><span class=\"mord mathdefault\" style=\"color: red;\">x</span><span class=\"mord mathdefault\" style=\"color: red;\">p</span><span class=\"mord mathdefault\" style=\"color: red;\">e</span><span class=\"mord mathdefault\" style=\"color: red;\">c</span><span class=\"mord mathdefault\" style=\"color: red;\">t</span><span class=\"mord mathdefault\" style=\"color: red;\">e</span><span class=\"mord mathdefault\" style=\"color: red;\">d</span><span class=\"mord mathdefault\" style=\"margin-right: 0.10903em; color: red;\">M</span><span class=\"mord mathdefault\" style=\"color: red;\">o</span><span class=\"mord mathdefault\" style=\"color: red;\">d</span><span class=\"mord mathdefault\" style=\"margin-right: 0.07153em; color: red;\">C</span><span class=\"mord mathdefault\" style=\"color: red;\">o</span><span class=\"mord mathdefault\" style=\"color: red;\">u</span><span class=\"mord mathdefault\" style=\"color: red;\">n</span><span class=\"mord mathdefault\" style=\"color: red;\">t</span></span></span></span></span></span>，校验通过，返回值，此时<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        \n         \n          l\n         \n         \n          a\n         \n         \n          s\n         \n         \n          t\n         \n         \n          R\n         \n         \n          e\n         \n         \n          t\n         \n         \n          =\n         \n         \n          0\n         \n         \n          ;\n         \n         \n          c\n         \n         \n          u\n         \n         \n          r\n         \n         \n          s\n         \n         \n          o\n         \n         \n          r\n         \n         \n          =\n         \n         \n          1\n         \n        \n       \n      \n      \n       \\color{red}{lastRet = 0;cursor = 1}\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.88888em; vertical-align: -0.19444em;\"></span><span class=\"mord\" style=\"color: red;\"><span class=\"mord mathdefault\" style=\"margin-right: 0.01968em; color: red;\">l</span><span class=\"mord mathdefault\" style=\"color: red;\">a</span><span class=\"mord mathdefault\" style=\"color: red;\">s</span><span class=\"mord mathdefault\" style=\"color: red;\">t</span><span class=\"mord mathdefault\" style=\"margin-right: 0.00773em; color: red;\">R</span><span class=\"mord mathdefault\" style=\"color: red;\">e</span><span class=\"mord mathdefault\" style=\"color: red;\">t</span><span class=\"mspace\" style=\"color: red; margin-right: 0.277778em;\"></span><span class=\"mrel\" style=\"color: red;\">=</span><span class=\"mspace\" style=\"color: red; margin-right: 0.277778em;\"></span><span class=\"mord\" style=\"color: red;\">0</span><span class=\"mpunct\" style=\"color: red;\">;</span><span class=\"mspace\" style=\"color: red; margin-right: 0.166667em;\"></span><span class=\"mord mathdefault\" style=\"color: red;\">c</span><span class=\"mord mathdefault\" style=\"color: red;\">u</span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em; color: red;\">r</span><span class=\"mord mathdefault\" style=\"color: red;\">s</span><span class=\"mord mathdefault\" style=\"color: red;\">o</span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em; color: red;\">r</span><span class=\"mspace\" style=\"color: red; margin-right: 0.277778em;\"></span><span class=\"mrel\" style=\"color: red;\">=</span><span class=\"mspace\" style=\"color: red; margin-right: 0.277778em;\"></span><span class=\"mord\" style=\"color: red;\">1</span></span></span></span></span></span></p>\n<pre><code class=\"prism language-java\"> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">checkForComodification</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>modCount <span class=\"token operator\">!=</span> expectedModCount<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentModificationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>⑤调用集合<code>remove()</code>方法，<code>modCount++；</code>，此时<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        \n         \n          m\n         \n         \n          o\n         \n         \n          d\n         \n         \n          C\n         \n         \n          o\n         \n         \n          u\n         \n         \n          n\n         \n         \n          t\n         \n         \n          =\n         \n         \n          4\n         \n         \n          ;\n         \n         \n          s\n         \n         \n          i\n         \n         \n          z\n         \n         \n          e\n         \n         \n          =\n         \n         \n          2\n         \n        \n       \n      \n      \n       \\color{red}{modCount = 4;size = 2}\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.88888em; vertical-align: -0.19444em;\"></span><span class=\"mord\" style=\"color: red;\"><span class=\"mord mathdefault\" style=\"color: red;\">m</span><span class=\"mord mathdefault\" style=\"color: red;\">o</span><span class=\"mord mathdefault\" style=\"color: red;\">d</span><span class=\"mord mathdefault\" style=\"margin-right: 0.07153em; color: red;\">C</span><span class=\"mord mathdefault\" style=\"color: red;\">o</span><span class=\"mord mathdefault\" style=\"color: red;\">u</span><span class=\"mord mathdefault\" style=\"color: red;\">n</span><span class=\"mord mathdefault\" style=\"color: red;\">t</span><span class=\"mspace\" style=\"color: red; margin-right: 0.277778em;\"></span><span class=\"mrel\" style=\"color: red;\">=</span><span class=\"mspace\" style=\"color: red; margin-right: 0.277778em;\"></span><span class=\"mord\" style=\"color: red;\">4</span><span class=\"mpunct\" style=\"color: red;\">;</span><span class=\"mspace\" style=\"color: red; margin-right: 0.166667em;\"></span><span class=\"mord mathdefault\" style=\"color: red;\">s</span><span class=\"mord mathdefault\" style=\"color: red;\">i</span><span class=\"mord mathdefault\" style=\"margin-right: 0.04398em; color: red;\">z</span><span class=\"mord mathdefault\" style=\"color: red;\">e</span><span class=\"mspace\" style=\"color: red; margin-right: 0.277778em;\"></span><span class=\"mrel\" style=\"color: red;\">=</span><span class=\"mspace\" style=\"color: red; margin-right: 0.277778em;\"></span><span class=\"mord\" style=\"color: red;\">2</span></span></span></span></span></span><br/> ⑥再次调用hasNext()方法判断，<code>cursor != size;</code>成立，进入循环<br/> ⑦调用<code>next()</code>方法进行校验，<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        \n         \n          m\n         \n         \n          o\n         \n         \n          d\n         \n         \n          C\n         \n         \n          o\n         \n         \n          u\n         \n         \n          n\n         \n         \n          t\n         \n         \n          !\n         \n         \n          =\n         \n         \n          e\n         \n         \n          x\n         \n         \n          p\n         \n         \n          e\n         \n         \n          c\n         \n         \n          t\n         \n         \n          e\n         \n         \n          d\n         \n         \n          M\n         \n         \n          o\n         \n         \n          d\n         \n         \n          C\n         \n         \n          o\n         \n         \n          u\n         \n         \n          n\n         \n         \n          t\n         \n        \n       \n      \n      \n       \\color{red}{modCount != expectedModCount}\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.88888em; vertical-align: -0.19444em;\"></span><span class=\"mord\" style=\"color: red;\"><span class=\"mord mathdefault\" style=\"color: red;\">m</span><span class=\"mord mathdefault\" style=\"color: red;\">o</span><span class=\"mord mathdefault\" style=\"color: red;\">d</span><span class=\"mord mathdefault\" style=\"margin-right: 0.07153em; color: red;\">C</span><span class=\"mord mathdefault\" style=\"color: red;\">o</span><span class=\"mord mathdefault\" style=\"color: red;\">u</span><span class=\"mord mathdefault\" style=\"color: red;\">n</span><span class=\"mord mathdefault\" style=\"color: red;\">t</span><span class=\"mclose\" style=\"color: red;\">!</span><span class=\"mspace\" style=\"color: red; margin-right: 0.277778em;\"></span><span class=\"mrel\" style=\"color: red;\">=</span><span class=\"mspace\" style=\"color: red; margin-right: 0.277778em;\"></span><span class=\"mord mathdefault\" style=\"color: red;\">e</span><span class=\"mord mathdefault\" style=\"color: red;\">x</span><span class=\"mord mathdefault\" style=\"color: red;\">p</span><span class=\"mord mathdefault\" style=\"color: red;\">e</span><span class=\"mord mathdefault\" style=\"color: red;\">c</span><span class=\"mord mathdefault\" style=\"color: red;\">t</span><span class=\"mord mathdefault\" style=\"color: red;\">e</span><span class=\"mord mathdefault\" style=\"color: red;\">d</span><span class=\"mord mathdefault\" style=\"margin-right: 0.10903em; color: red;\">M</span><span class=\"mord mathdefault\" style=\"color: red;\">o</span><span class=\"mord mathdefault\" style=\"color: red;\">d</span><span class=\"mord mathdefault\" style=\"margin-right: 0.07153em; color: red;\">C</span><span class=\"mord mathdefault\" style=\"color: red;\">o</span><span class=\"mord mathdefault\" style=\"color: red;\">u</span><span class=\"mord mathdefault\" style=\"color: red;\">n</span><span class=\"mord mathdefault\" style=\"color: red;\">t</span></span></span></span></span></span>，校验未通过，抛出<code>java.util.ConcurrentModificationException</code>异常</p>\n<p><strong>总结：</strong></p>\n<blockquote>\n<p>①在使用<mark>迭代器</mark>的<code>remove()</code>操作时，会将更新后的<code>modCount</code>给<code>expectedModCount</code>，两者会得到同步，但是在调用集合的<code>remove()</code>方法后，两个不会进行同步，进而导致在<code>checkForComodification()</code>校验时不通过，抛出<code>java.util.ConcurrentModificationException</code>异常。<br/> ②所以，在单线程下使用迭代器是没有问题的，但是在多线程下同时操作集合就不允许了，可以通过<strong>fail-fast</strong>快速失败机制，快速判断是否存在同时操作问题。因此，<mark>集合在多线程下使用是不安全的</mark>。</p>\n</blockquote>\n<h2><a id=\"for_244\"></a>📗增强for循环</h2>\n<h3><a id=\"for_245\"></a>📫认识增强for循环</h3>\n<blockquote>\n<p><code>增强for循环</code>可以代替<mark>Iterator迭代器</mark>，可以把它看做简化版的Iterator，和迭代器本质一样，其实它的底层实现就是Iterator迭代器，只能用于<mark>遍历集合或数组</mark>。</p>\n</blockquote>\n<h3><a id=\"_249\"></a>📪基本语法</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20e81fb7a8a94929a650bc0be76e01a1.png\"/></p>\n<h3><a id=\"for_251\"></a>📬增强for循环的使用</h3>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestDemo03</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">222</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">333</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"====增强for循环遍历集合====\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> i <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"====增强for循环遍历数组====\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><strong>运行结果：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\55305f2a77024481abc55ee23e6ac92c.png\"/></p>\n<h3><a id=\"for_281\"></a>📭增强for循环的快捷键</h3>\n<p>与迭代器一样，增强for循环也有快捷键，输入<code>I</code>回车即可快速生成。<br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/49c4d5a3050e4141abd623aac113bc73.gif\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-01-27 18:06:44", "summary": "文章目录迭代器详解迭代器的定义认识类结构图接口接口接口的方法迭代器的使用使用迭代器遍历集合的执行原理图示执行过程执行过程详解生成迭代器的快捷键迭代器中的迭代器的方法使用迭代器遍历中调用集合方法触发异常"}