{"blogid": "125947149", "writerAge": "码龄2年", "writerBlogNum": "57", "writerCollect": "1163", "writerComment": "2162", "writerFan": "3568", "writerGrade": "6级", "writerIntegral": "8383", "writerName": "哎呀是小张啊", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125947149.jpg", "writerRankTotal": "1745", "writerRankWeekly": "177", "writerThumb": "2508", "writerVisitNum": "89639", "blog_read_count": "1221", "blog_time": "于 2022-07-25 06:00:00 发布", "blog_title": "【MySQL系列】Java的JDBC编程", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>☕目录☕</strong></p>\n<p id=\"%E5%89%8D%E8%A8%80-toc\" style=\"margin-left:0px;\"><strong>      🍚</strong><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></p>\n<p id=\"%E4%B8%80%E3%80%81%E8%83%8C%E6%99%AF%E7%9F%A5%E8%AF%86%E5%BC%95%E5%85%A5-toc\" style=\"margin-left:0px;\"><strong>            🍜</strong><a href=\"#%E4%B8%80%E3%80%81%E8%83%8C%E6%99%AF%E7%9F%A5%E8%AF%86%E5%BC%95%E5%85%A5\">一、背景知识引入</a></p>\n<p id=\"%E4%BA%8C%E3%80%81%E5%AE%89%E8%A3%85MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E9%A9%B1%E5%8A%A8%E5%8C%85%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%AF%BC%E5%85%A5%E5%88%B0%E9%A1%B9%E7%9B%AE%E4%B8%AD-toc\" style=\"margin-left:0px;\"><strong>            🥡</strong><a href=\"#%E4%BA%8C%E3%80%81%E5%AE%89%E8%A3%85MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E9%A9%B1%E5%8A%A8%E5%8C%85%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%AF%BC%E5%85%A5%E5%88%B0%E9%A1%B9%E7%9B%AE%E4%B8%AD\">二、安装MySQL数据库驱动包，并且导入到项目中</a></p>\n<p id=\"%E4%B8%89%E3%80%81JDBC%E7%9A%84%E4%BD%BF%E7%94%A8-toc\" style=\"margin-left:0px;\"><strong>            🧇</strong><a href=\"#%E4%B8%89%E3%80%81JDBC%E7%9A%84%E4%BD%BF%E7%94%A8\">三、JDBC的使用</a></p>\n<p id=\"3.1%20JDBC%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:0px;\"><strong>                        🥩🥩</strong><a href=\"#3.1%20JDBC%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C\">3.1 JDBC插入数据操作</a></p>\n<p id=\"%C2%A03.2%20JDBC%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:0px;\"><strong>                        🍛🍛</strong><a href=\"#%C2%A03.2%20JDBC%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C\">3.2 JDBC修改数据操作</a></p>\n<p id=\"%C2%A03.3%20JDBC%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:0px;\"><strong>                        🍣🍣</strong><a href=\"#%C2%A03.3%20JDBC%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C\">3.3 JDBC删除数据操作</a></p>\n<p id=\"JDBC%E6%9F%A5%E6%89%BE%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:0px;\"><strong>                        🍔🍔</strong><a href=\"#JDBC%E6%9F%A5%E6%89%BE%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C\">3.4 JDBC查找数据操作</a></p>\n<p id=\"%E5%90%8E%E7%BB%AD-toc\" style=\"margin-left:0px;\"><strong>      🍱</strong><a href=\"#%E5%90%8E%E7%BB%AD\">后续</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h1 id=\"%E5%89%8D%E8%A8%80\">前言</h1>\n<p>在之前学习MySQL数据库的时候，也许有的同学在纠结于使用 命令行的方式，还是图形化界面的方式 来学习~~</p>\n<p>其实，在日常开发过程中，主流使用方式其实是<strong>通过代码的形式</strong>来操作数据库~~</p>\n<p>当然，无论是使用哪种方式，其核心知识都是 SQL~~</p>\n<p></p>\n<p><img alt=\"\" height=\"57\" src=\"..\\..\\static\\image\\5435ef7a18ab4225abb94dfd26683dc7.png\" width=\"1147\"/></p>\n<p> </p>\n<h1 id=\"%E4%B8%80%E3%80%81%E8%83%8C%E6%99%AF%E7%9F%A5%E8%AF%86%E5%BC%95%E5%85%A5\">一、背景知识引入</h1>\n<p>MySQL是一个 客户端/服务器 结构的程序~</p>\n<p>当然，不是所有的数据库都是这样的（SQLite就不是，Oracle、SQL Server是）~</p>\n<p></p>\n<p><img alt=\"\" height=\"1200\" src=\"..\\..\\static\\image\\901619718e2c47efb762c17f3d003161.png\" width=\"1200\"/></p>\n<blockquote>\n<p>像主流的数据库，为了方便程序员实现 客户端 程序，会提供一些 API接口，称为 \"数据库SDK\"，就可以借助这些 API接口，比较方便的访问数据库服务器~~</p>\n<p></p>\n<p>API，是计算机中一个相当广泛使用的术语，Application Programming Interface ，提供了一些 函数/方法/类，可以让程序员直接调用来完成一些功能~~ </p>\n<p></p>\n<p> SDK，也是一个相当广泛使用的术语，Software Development Kit，软件开发工具包，提供了一些工具~~</p>\n<p></p>\n<p>比如说，张三同学有了一个女朋友，那么此时女朋友可以给张三提供一些API，如 日常拉拉小手，日常抱一抱......</p>\n<p></p>\n<p>就类似于，数据库服务器给我们提供了一些API，比如说 可以调用这个函数 连接到数据库；调用这个函数 执行一些SQL操作；调用这个函数 来关闭连接；调用这个函数，来创建一个事务；...... </p>\n<p></p>\n</blockquote>\n<blockquote>\n<p>现在这里就引入了一个问题：</p>\n<p>API 是数据库提供的，而不同的数据库，提供的 API 风格（里面的类名、方法名、参数/返回值 等都不同）可能不一样，那怎么办？？？ </p>\n<p></p>\n<p>于是，Java 提出了一套 \"标准\"的接口体系（毕竟，也不会找数据库本身的）~~</p>\n<p>让这些数据库厂商，提供的API都往 Java 的这套接口体系中进行适配~~</p>\n<p>程序员只要去掌握 Java 的这一套 API 即可适应所有的主流数据库了~~</p>\n<p></p>\n<p>当然，其他大多数主流编程语言，也有类似的操作~~</p>\n<p>主流数据库，都会有多语言支持~~</p>\n<p></p>\n<p><strong>现在，咱们说的是 Java~~</strong></p>\n<p><strong>而Java所提供的这套API，就叫做 JDBC~~</strong></p>\n<p><strong> </strong></p>\n<p><strong>而各个数据库厂商，为了能够适配 JDBC，因此就需要写一些额外的程序 来完成这个工作，厂商提供的这套额外的程序，称为 \"JDBC驱动包\"~~</strong></p>\n<p></p>\n<p>当我们使用Java操作MySQL的时候，就需要去安装MySQL的驱动包；</p>\n<p>当我们使用Java操作各种数据库，就需要安装对应的 数据库所提供的驱动包，才能真正进行使用~~ </p>\n</blockquote>\n<p></p>\n<blockquote>\n<p>JDBC 本质上就是 Java对于各种数据库差异性的封装~</p>\n<p>目的就是为了简化程序员的学习使用成本~ </p>\n</blockquote>\n<p><img alt=\"\" height=\"57\" src=\"..\\..\\static\\image\\1123f886c7844dd8b65ddd41251d0da1.png\" width=\"1147\"/></p>\n<p> </p>\n<h1 id=\"%E4%BA%8C%E3%80%81%E5%AE%89%E8%A3%85MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E9%A9%B1%E5%8A%A8%E5%8C%85%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%AF%BC%E5%85%A5%E5%88%B0%E9%A1%B9%E7%9B%AE%E4%B8%AD\">二、安装MySQL数据库驱动包，并且导入到项目中</h1>\n<p>我们使用Java操作MySQL数据库的时候，肯定是要安装MySQL数据库驱动包的~~</p>\n<p>现在，这里就来分享一下 如何在 \"中央仓库\" 下面下载一下MySQL数据库驱动包~~</p>\n<p></p>\n<blockquote>\n<p>搜索 \"中央仓库\" 网址：<a href=\"https://mvnrepository.com/\" title=\"https://mvnrepository.com/\">https://mvnrepository.com/</a></p>\n<p>虽然这一步骤加载过程可能有点慢~~ </p>\n</blockquote>\n<p><img alt=\"\" height=\"987\" src=\"..\\..\\static\\image\\1c4c415ec4b2447ea1f25ade04bc5363.png\" width=\"1200\"/></p>\n<p><img alt=\"\" height=\"989\" src=\"..\\..\\static\\image\\64cd5a2086714e3a8f5ddb834c47cae9.png\" width=\"1200\"/></p>\n<p><img alt=\"\" height=\"988\" src=\"..\\..\\static\\image\\4c3d749d071249d796733e6c348c1a38.png\" width=\"1200\"/></p>\n<p> <img alt=\"\" height=\"987\" src=\"..\\..\\static\\image\\9f67963068cb4ec8b84cba32b4cf8ef1.png\" width=\"1200\"/></p>\n<p><img alt=\"\" height=\"986\" src=\"..\\..\\static\\image\\def941d885c342dc84bbaf461ee70bfe.png\" width=\"1200\"/></p>\n<blockquote>\n<p>下载好了以后，就会得到一个 .jar后缀的文件，叫做 jar 包 ~</p>\n<p>本质上就是一个类似于 rar 的压缩包~</p>\n<p>jar 包里面主要就是一些 .class文件~</p>\n<p></p>\n<p>像这样的压缩包，不需要我们手动解压缩，直接放到项目中即可~</p>\n<p>JVM 在运行的时候能自动的读取压缩包里面的内容~</p>\n<p></p>\n</blockquote>\n<p>接下来我们就需要把准备好的 jar 包，放入到项目里面去~~</p>\n<blockquote>\n<p><span style=\"color:#956fe7;\"><strong>第一步，我们需要创建一个目录，并且把 jar 包拷贝到目录里面去：</strong></span></p>\n<p><img alt=\"\" height=\"1034\" src=\"..\\..\\static\\image\\bc6d94376c25419284b615daec3e7176.png\" width=\"1200\"/> <img alt=\"\" height=\"1034\" src=\"..\\..\\static\\image\\d25ca16f46c248b093d091cc147fcbd0.png\" width=\"1200\"/></p>\n<p> <img alt=\"\" height=\"1080\" src=\"..\\..\\static\\image\\77505496ff7a4e63a6124fd045e70763.png\" width=\"1200\"/></p>\n<p><img alt=\"\" height=\"1034\" src=\"..\\..\\static\\image\\fb755093e21346e1a3129beea710d8d2.png\" width=\"1200\"/></p>\n<p></p>\n<p>第二步，设置这个目录，让这个目录能被项目识别：</p>\n<p><img alt=\"\" height=\"1034\" src=\"..\\..\\static\\image\\d499e020e66248d2b90a56639b9f96dc.png\" width=\"1200\"/></p>\n<p><img alt=\"\" height=\"1034\" src=\"..\\..\\static\\image\\3c2b2ef6e27f4673899a0af2baf20c95.png\" width=\"1200\"/></p>\n<p><img alt=\"\" height=\"1034\" src=\"..\\..\\static\\image\\396c04fc1f0647a4b16b34431490273b.png\" width=\"1200\"/>  </p>\n</blockquote>\n<p><img alt=\"\" height=\"57\" src=\"..\\..\\static\\image\\dd63f4c0534c44658f7b4987b30e31c8.png\" width=\"1147\"/></p>\n<p> </p>\n<h1 id=\"%E4%B8%89%E3%80%81JDBC%E7%9A%84%E4%BD%BF%E7%94%A8\">三、JDBC的使用</h1>\n<h1 id=\"3.1%20JDBC%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C\">3.1 JDBC插入数据操作</h1>\n<blockquote>\n<p>由于MySQL是一个服务器，要想和服务器之间进行通信，前提是需要<strong>和 服务器之间进行连接</strong>；</p>\n<p>要想和服务器之间建立连接，前提是<strong>需要知道服务器所在的位置</strong>~~</p>\n<p></p>\n<p><span style=\"color:#956fe7;\"><strong>第一个环节：</strong></span></p>\n<p><strong>在JDBC里面，使用 DataSource 这个类来描述数据库的位置：</strong></p>\n<pre><code>DataSource dataSource = new MysqlDataSource();\n\n--DataSource 是一个 interface,不能直接实例化~~\n--而 MysqlDataSource 则是实现了 DataSource接口~~\n\n--实际上，这个操作，就是 \"向上转型\"~~</code></pre>\n<p>需要注意的是，这个类来自于驱动包，如果驱动包导入正确，才能够顺利的提示出来：</p>\n<p><img alt=\"\" height=\"363\" src=\"..\\..\\static\\image\\b6a876b443d246d38d27df85c9064eb0.png\" width=\"1200\"/></p>\n<p></p>\n<hr/>\n<p>通过 DataSource 来确定服务器的位置~~</p>\n<p>位置如何描述？</p>\n<p>描述一个网络上的资源，常用手段 就是使用 URL（唯一资源定位符/网址）~~ </p>\n<pre><code>((MysqlDataSource)dataSource).setUrl(\"jdbc:mysql://127.0.0.1:3306/java?characterEncoding=utf8&amp;useSSL=false\");\n\n--((MysqlDataSource)dataSource).setUrl();\n--这是一个向下转型\n\n--其中，\n\n--jdbc:mysql 是协议名，即 这个网址是干啥用的(这个网址就是 jdbc 连 mysql用)\n\n--127.0.0.1 是IP地址(互联网上的主机的IP地址，是通过一串的数字的形式来描述的)\n\n--3306 是端口号(用于区别 当前主机上的哪个程序，MySQL服务器默认使用的端口号是 3306)\n\n--java 是数据库名,就是 create database 数据库名,访问的是MySQL数据库上面的哪一个数据库\n\n--characterEncoding=utf8&amp;useSSL=false 是一些相关参数,\n--characterEncoding=utf8 是设置客户端连接服务器使用的字符集\n--useSSL=false 固定设为false,表示不启用加密\n</code></pre>\n</blockquote>\n<blockquote>\n<p>像上述URL，大家不必去背！！！</p>\n<p>背，容易背错！！！</p>\n<p>写了一次之后，后续只要去复制粘贴即可！！！ </p>\n</blockquote>\n<blockquote>\n<p>同时，需要设置用户名以及密码：</p>\n<pre><code>//设置用户名 是固定的 root\n((MysqlDataSource)dataSource).setUser(\"root\");\n\n//设置密码 不是固定的,是自己的数据库密码\n((MysqlDataSource)dataSource).setPassword(\"111111\");</code></pre>\n<p> 以上操作，就可以准确的描述服务器的位置~~</p>\n</blockquote>\n<hr/>\n<p></p>\n<blockquote>\n<p>网络通信中，有两种风格：</p>\n<p>一种是 \"有连接\"，相当于 \"打电话\" （接通电话过后，才可进行聊天）</p>\n<p>一种是 \"无连接\"，相当于 \"发微信\" （编辑信息后，爱看不看，信息都已经发过去了）</p>\n<p></p>\n<p>数据库这里的通信方式，采取的是有连接的方式~</p>\n<p>优点：能够在通信之前，知道通信的链路是否通畅</p>\n<p>缺点：连接需要进行管理，尤其是不用的连接要及时释放（想像 打完电话要挂断，否则扣你话费）~~</p>\n</blockquote>\n<blockquote>\n<p><span style=\"color:#956fe7;\"><strong>第二个环节：</strong></span></p>\n<p><strong> 和数据库服务器建立连接：</strong></p>\n<pre><code>Connection connection = dataSource.getConnection();</code></pre>\n<p><img alt=\"\" height=\"205\" src=\"..\\..\\static\\image\\2f5b39d1fd174d49bfc7dcd9b8981181.png\" width=\"1200\"/></p>\n<p>啥时候会出现异常：和数据库服务连接失败~~</p>\n<p>Alt + Enter，出现 解决方案~~ </p>\n<p></p>\n<p><img alt=\"\" height=\"1034\" src=\"..\\..\\static\\image\\719f728917b94ad182ee371f04836113.png\" width=\"1200\"/></p>\n<p></p>\n<p>如果连接失败，失败的原因有很多，DataSource 这里填写的信息，有一点点的纰漏，就会导致连接失败~~</p>\n<p></p>\n<p><img alt=\"\" height=\"1034\" src=\"..\\..\\static\\image\\8e46d197ee9c473a82fb541320edc304.png\" width=\"1200\"/></p>\n</blockquote>\n<p></p>\n<blockquote>\n<p><span style=\"color:#956fe7;\"><strong>第三个环节：</strong></span><br/><strong>构造SQL语句（JDBC操作数据库，本质仍然是通过 SQL 来描述数据库操作）~~ </strong></p>\n<p></p>\n<p>例如，此时我们进行一个插入数据的操作：</p>\n<p>首先我们需要一个表：</p>\n<p><img alt=\"\" height=\"482\" src=\"..\\..\\static\\image\\7a82d89c9004460682b6d5d6f7fbf8b1.png\" width=\"757\"/></p>\n<p><img alt=\"\" height=\"277\" src=\"..\\..\\static\\image\\24c56ae2811d493d814118178a6eaf5e.png\" width=\"933\"/>  </p>\n</blockquote>\n<blockquote>\n<p><span style=\"color:#956fe7;\"><strong>第四个环节：</strong></span></p>\n<p><strong>执行SQL语句，</strong></p>\n<p>insert、update、delete都是通过executeUpdate来执行的，</p>\n<p>select则是通过exexuteQuery来执行的~~</p>\n<p> executeUpdate 的返回值是一个整数，表示这个操作影响到几行，</p>\n<p>就类似于：</p>\n<p><img alt=\"\" height=\"30\" src=\"..\\..\\static\\image\\7ae9320185a948ba906693748ce4e5e2.png\" width=\"196\"/></p>\n<p><img alt=\"\" height=\"188\" src=\"..\\..\\static\\image\\51570d8cebd54914a5b870edb328a628.png\" width=\"796\"/></p>\n</blockquote>\n<blockquote>\n<p><span style=\"color:#956fe7;\"><strong>第五个环节：</strong></span></p>\n<p><strong>断开连接，释放资源</strong></p>\n<p>释放顺序：后创建的先释放</p>\n<p><img alt=\"\" height=\"608\" src=\"..\\..\\static\\image\\b2782c0cf7e240c0bd062eb34466ad13.png\" width=\"1182\"/></p>\n<p><img alt=\"\" height=\"171\" src=\"..\\..\\static\\image\\4363cf4092c243158afc376e227e9e5e.png\" width=\"485\"/></p>\n<p></p>\n</blockquote>\n<blockquote>\n<p><span style=\"color:#956fe7;\"><strong>运行结果：</strong></span></p>\n<p></p>\n<p><img alt=\"\" height=\"1034\" src=\"..\\..\\static\\image\\93dc557e80204e439dcc07f1ca1c5cb2.png\" width=\"1200\"/></p>\n<p></p>\n<p>如果在创建表的时候，设置了主键约束，</p>\n<p>比如说，id设置成了主键，</p>\n<p>那么 如上述情况的话，运行第二次就会报错：id唯一 存在主键约束~~</p>\n<p></p>\n</blockquote>\n<p></p>\n<hr/>\n<p>可是，这样的话，插入的数据就会写死了~~</p>\n<p>而在实际操作过程中，这种写死的办法并不好~~</p>\n<p>我们还需要用其他的办法来进行操作~~</p>\n<p><img alt=\"\" height=\"655\" src=\"..\\..\\static\\image\\4f8bf821151947f482601f753fc88657.png\" width=\"1016\"/></p>\n<p>此时，自己可输入数据：<br/><img alt=\"\" height=\"400\" src=\"..\\..\\static\\image\\84e6a20eded94de399d17f2769fec089.png\" width=\"1013\"/> </p>\n<blockquote>\n<p>附：</p>\n<p>JDBC插入操作 源码：</p>\n<pre><code>import com.mysql.jdbc.jdbc2.optional.MysqlDataSource;\n\nimport javax.sql.DataSource;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.sql.SQLOutput;\nimport java.util.Scanner;\n\npublic class JDBCHello {\n    public static void main(String[] args) throws SQLException {\n        //1.使用 DataSource 来描述 MySQL服务器的位置\n        DataSource dataSource = new MysqlDataSource();\n        ((MysqlDataSource)dataSource).setUrl(\"jdbc:mysql://127.0.0.1:3306\" +\n                \"/java?characterEncoding=utf8&amp;useSSL=false\");\n        //设置用户名 是固定的 root\n        ((MysqlDataSource)dataSource).setUser(\"root\");\n        //设置密码 不是固定的,是自己的数据库密码\n        ((MysqlDataSource)dataSource).setPassword(\"111111\");\n\n        //2.和数据库服务器建立连接\n        Connection connection = dataSource.getConnection();\n        //System.out.println(connection);\n\n        //3.构造SQL语句\n        //例如，此时我们进行一个插入数据的操作\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请输入学号：\");\n        int num = scanner.nextInt();\n        System.out.println(\"请输入姓名：\");\n        String name = scanner.next();\n\n        String sql = \"insert into student values(?,?)\";\n        //使用？作为占位符，后续使用statement 对象针对？进行替换~\n        //直接用 String格式的SQL还不行,还需要搭配一个特殊的类 —— PreparedStatement\n        PreparedStatement statement = connection.prepareStatement(sql);\n\n        statement.setInt(1,num);//第一个问号，代替成num,此处的下标，从1开始计数的\n        statement.setString(2,name);\n        //通过上面两个参数的替换，把第1个参数替换为 num，第2个参数替换为 name\n        System.out.println(statement);\n\n        //4.执行 SQL语句\n        int n = statement.executeUpdate();\n        System.out.println(\"n = \" + n);\n\n        //5.断开连接,释放资源(后创建的先释放)\n        statement.close();\n        connection.close();\n    }\n}\n</code></pre>\n</blockquote>\n<p> </p>\n<hr/>\n<h1 id=\"%C2%A03.2%20JDBC%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C\">3.2 JDBC修改数据操作</h1>\n<blockquote>\n<p>实现数据库修改的操作，和插入操作非常类似~~</p>\n<p>只是这里的 SQL语句 是 update语句~~</p>\n<p> </p>\n<pre><code>import com.mysql.jdbc.jdbc2.optional.MysqlDataSource;\n\nimport javax.sql.DataSource;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.util.Scanner;\n\npublic class JDBCUpdate {\n    public static void main(String[] args) throws SQLException {\n        //实现数据库的修改操作，和插入非常相似\n        //只是这里构造的 SQL 语句是 update 语句\n\n        //1.构造数据源\n        DataSource dataSource = new MysqlDataSource();\n        ((MysqlDataSource)dataSource).setUrl(\"jdbc:mysql://127.0.0.1:3306\" +\n                \"/java?characterEncoding=utf8&amp;useSSL=false\");\n        ((MysqlDataSource)dataSource).setUser(\"root\");\n        ((MysqlDataSource)dataSource).setPassword(\"111111\");\n\n        //2.和数据库建立连接\n        Connection connection = dataSource.getConnection();\n\n        //3.用户输入，要修改的id和输入后的名字\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请输入要修改的同学学号：\");\n        int id = scanner.nextInt();\n        System.out.println(\"请输入要修改之后的同学姓名：\");\n        String  name = scanner.next();\n        //next 读到空白符(空格，制表符，换行符，回车符，垂直制表符......)\n        //nextLine 读到换行符\n\n        //4.构造SQL语句\n        String sql = \"update student set name = ? where id = ?\";\n        PreparedStatement statement = connection.prepareStatement(sql);\n        statement.setString(1,name);\n        statement.setInt(2,id);\n        System.out.println(statement);\n\n        //5.执行SQL\n        int n = statement.executeUpdate();\n        System.out.println(\"n = \"+ n);\n\n        //6.关闭连接、释放资源\n        statement.close();\n        connection.close();\n\n    }\n}\n</code></pre>\n<p></p>\n</blockquote>\n<p></p>\n<hr/>\n<h1 id=\"%C2%A03.3%20JDBC%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C\">3.3 JDBC删除数据操作</h1>\n<blockquote>\n<p>删除数据库中的数据，代码的写法和前面的增加/修改 是类似的~~</p>\n<p>只是这里的 SQL语句是 delete语句~</p>\n<p></p>\n<pre><code>import com.mysql.jdbc.jdbc2.optional.MysqlDataSource;\n\nimport javax.sql.DataSource;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.util.Scanner;\n\npublic class JDBCDelete {\n    public static void main(String[] args) throws SQLException {\n        //删除数据库中的数据，代码的写法和前面的增加/修改 是类似的\n\n        //1.构造数据源\n        DataSource dataSource = new MysqlDataSource();\n        ((MysqlDataSource)dataSource).setUrl(\"jdbc:mysql://127.0.0.1:3306\" +\n                \"/java?characterEncoding=utf8&amp;useSSL=false\");\n        ((MysqlDataSource)dataSource).setUser(\"root\");\n        ((MysqlDataSource)dataSource).setPassword(\"111111\");\n\n        //2.和数据库建立连接\n        Connection connection = dataSource.getConnection();\n\n        //3.输入删除的内容\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请输入要删除的同学id：\");\n        int id = scanner.nextInt();\n\n        //4.构造SQL语句\n        String sql = \"delete from student where id = ?\";\n        PreparedStatement statement = connection.prepareStatement(sql);\n        statement.setInt(1,id);\n        System.out.println(statement);\n\n        //5.执行SQL\n        int n = statement.executeUpdate();\n        System.out.println(\"n = \"+ n);\n\n        //6.关闭连接、释放资源\n        statement.close();\n        connection.close();\n\n    }\n}\n</code></pre>\n</blockquote>\n<p></p>\n<hr/>\n<h1 id=\"JDBC%E6%9F%A5%E6%89%BE%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C\">3.4 JDBC查找数据操作</h1>\n<blockquote>\n<p>查找数据库中的记录~~</p>\n<p>这个查找操作就和前面的操作不太一样了~~</p>\n<p>多了一个步骤 —— 要遍历结果集合~~</p>\n<p></p>\n<pre><code>import com.mysql.jdbc.jdbc2.optional.MysqlDataSource;\n\nimport javax.sql.DataSource;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\npublic class JDBCSelect {\n    public static void main(String[] args) throws SQLException {\n        //查找数据库中的记录~~\n        //查找操作需要遍历结果集合，这是前面的几个操作不曾有的~~\n        //因为客户端 后面拿到的是 \"临时表\"，必须遍历一遍取出里面所需的东西 再显示在黑框框上~~\n\n        //1.构造数据源\n        DataSource dataSource = new MysqlDataSource();\n        ((MysqlDataSource)dataSource).setUrl(\"jdbc:mysql://127.0.0.1:3306\" +\n                \"/java?characterEncoding=utf8&amp;useSSL=false\");\n        ((MysqlDataSource)dataSource).setUser(\"root\");\n        ((MysqlDataSource)dataSource).setPassword(\"111111\");\n\n        //2.和数据库建立连接\n        Connection connection = dataSource.getConnection();\n\n        //3.此处就不输入条件了，直接查找所有记录\n\n        //4.构造SQL\n        String sql = \"select * from student\";\n        PreparedStatement statement = connection.prepareStatement(sql);\n\n        //5.执行SQL\n        //此处要使用的是 executeQuery\n        //executeUpdate 只能返回一个int\n        //executeQuery 返回的是一个 ResultSet对象，可以把这个对象视为一个 \"临时表\"~~\n        ResultSet resultSet = statement.executeQuery();\n\n        //6.遍历 \"临时表\"\n        //resultSet 简单的当成一个类似于 \"迭代器\" 这样的东西来看待~~\n        //next 如果没有到达末尾，就是返回true，要继续循环\n        //next 如果到达了末尾，就返回false，结束循环\n        while (resultSet.next()){\n            //在这里就可以取这一行的数据了\n            //通过 ResultSet 里面的 getXXX方法，来获取到这里指定的列\n\n            //取id，id是整数，getInt\n            int id =resultSet.getInt(\"id\");\n\n            //取name，name是字符串，getString\n            String name = resultSet.getString(\"name\");\n            System.out.println(id + \":\" + name);\n        }\n\n\n        //7.关闭连接，释放资源\n        resultSet.close();\n        statement.close();\n        connection.close();\n\n    }\n    \n}\n</code></pre>\n<p></p>\n</blockquote>\n<blockquote>\n<p>关于JDBC整体的代码就是上述这样的~~</p>\n<p>不难~~</p>\n<p>但是比较繁琐~~</p>\n<p>务必 掌握这里的核心概念（DataSource、Connection、PreparedStatement、ResultSet......），并且需要掌握核心流程~~</p>\n<p> </p>\n</blockquote>\n<p></p>\n<p> </p>\n<p><img alt=\"\" height=\"57\" src=\"..\\..\\static\\image\\c8ffbf379b0243c4b60f90ae19d966d0.png\" width=\"1147\"/></p>\n<p> </p>\n<h1 id=\"%E5%90%8E%E7%BB%AD\">后续</h1>\n<p>实际在开发中，很少会直接使用JDBC~~</p>\n<p>JDBC 写起来比较麻烦，比较啰嗦~~</p>\n<p>后来衍生出了许多 \"框架\"，能够简化数据库操作~~</p>\n<p>比如说，后面会介绍的 MyBatis框架~~</p>\n<p></p>\n<p>好啦~~</p>\n<p>这就是MySQL数据库JDBC编程的内容啦~~</p>\n<p>如果这篇博客给你带来了收获~~</p>\n<p>可以留下一颗小小的赞吗~~</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\2f663d48f2c54aa882a8db90847b74a7.png\"/></p>\n<p> </p>\n</div>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-07-25 06:00:00", "summary": "目录前言一、背景知识引入二、安装数据库驱动包，并且导入到项目中三、的使用插入数据操作修改数据操作删除数据操作查找数据操作后续前言在之前学习数据库的时候，也许有的同学在纠结于使用命令行的方式，还是图形化"}