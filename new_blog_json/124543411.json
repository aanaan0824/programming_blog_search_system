{"blogid": "124543411", "writerAge": "码龄3年", "writerBlogNum": "30", "writerCollect": "23", "writerComment": "1", "writerFan": "2", "writerGrade": "2级", "writerIntegral": "312", "writerName": "小轩爱学习", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124543411.jpg", "writerRankTotal": "48811", "writerRankWeekly": "219691", "writerThumb": "7", "writerVisitNum": "15024", "blog_read_count": "3374", "blog_time": "于 2022-05-02 19:06:44 发布", "blog_title": "背包问题大全（动态规划）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>背包问题是动态规划非常重要的一类问题，它有很多变种，但题目万变不离其宗。我们需要抓住关键的解题思路，现将解题模板总结如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8c3ffb345c414b54a21f3b2254eb1dfb.png\"/></p>\n<h2><a id=\"_3\"></a>背包问题的定义</h2>\n<p>那么什么样的问题可以被称作为背包问题？换言之，我们拿到题目如何透过题目的不同包装形式看到里面背包问题的不变内核呢？<br/> 我对背包问题定义的理解：给定一个背包容量target，再给定一个数组nums(物品)，能否按一定方式选取nums中的元素得到target<br/> <strong>注意：</strong></p>\n<blockquote>\n<p>1、背包容量target和物品nums的类型可能是数，也可能是字符串<br/> 2、target可能题目已经给出(显式)，也可能是需要我们从题目的信息中挖掘出来(非显式)(常见的非显式target比如sum/2等)<br/> 3、选取方式有常见的一下几种：每个元素选一次/每个元素选多次/选元素进行排列组合 那么对应的背包问题就是下面我们要讲的背包分类</p>\n</blockquote>\n<h2><a id=\"_11\"></a>背包问题的分类</h2>\n<p>在我看来，背包问题可以总结为三类：01背包问题、完全背包问题以及分组背包问题。<br/> <strong>01背包问题</strong>：每个元素最多取1次。具体来讲：一共有 N 件物品，第 i（i 从 1 开始）件物品的重量为 w[i]，价值为 v[i]。在总重量不超过背包承载上限 W 的情况下，能够装入背包的最大价值是多少？</p>\n<p><strong>完全背包问题</strong>：每个元素可以取多次。具体来讲：完全背包与 01 背包不同就是每种物品可以有无限多个：一共有 N 种物品，每种物品有无限多个，第 i（i 从 1 开始）种物品的重量为 w[i]，价值为 v[i]。在总重量不超过背包承载上限 W 的情况下，能够装入背包的最大价值是多少？</p>\n<p><strong>分组背包问题</strong>：有多个背包，需要对每个背包放入物品，每个背包的处理情况与完全背包完全相同。</p>\n<p>在完全背包问题当中根据是否需要考虑排列组合问题（是否考虑物品顺序），可分为两种情况，我们可以通过内外循环的调换来处理排列组合问题，如果题目不是排列组合问题，则这两种方法都可以使用（推荐使用组合来解决）</p>\n<p>而每个背包问题要求的也是不同的，按照所求问题分类，又可以分为以下几种：<br/> 1、最值问题：要求最大值/最小值<br/> 2、存在问题：是否存在…………，满足…………<br/> 3、组合问题：求所有满足……的排列组合</p>\n<h2><a id=\"_26\"></a>解题模板</h2>\n<p>背包问题大体的解题模板是<strong>两层循环</strong>，分别遍历物品nums和背包容量target，然后写转移方程，根据背包的分类我们确定物品和容量遍历的先后顺序，根据问题的分类我们确定状态转移方程的写法。</p>\n<p>首先是背包分类的模板：<br/> 1、0/1背包：外循环nums,内循环target,target倒序且target&gt;=nums[i];<br/> 2、完全背包（组合）：外循环nums,内循环target,target正序且target&gt;=nums[i];<br/> 3、完全背包（排列）：外循环target,内循环nums,target正序且target&gt;=nums[i];<br/> 4、分组背包：这个比较特殊，需要多重循环：外循环nums,内部循环根据题目的要求构建多重背包循环</p>\n<h2><a id=\"LeetCode_36\"></a>LeetCode原题</h2>\n<p>我们通过一些例题来更好的理解背包问题</p>\n<h4><a id=\"01_39\"></a>01背包</h4>\n<p><a href=\"https://leetcode-cn.com/problems/partition-equal-subset-sum/\">416. 分割等和子集</a></p>\n<p>给你一个 只包含正整数 的 非空 数组 nums 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p>\n<p><strong>示例 1：</strong></p>\n<blockquote>\n<p>输入：nums = [1,5,11,5]<br/> 输出：true<br/> 解释：数组可以分割成 [1, 5, 5] 和 [11] 。</p>\n</blockquote>\n<p><strong>提示：</strong></p>\n<ul><li>1 &lt;= nums.length &lt;= 200</li><li>1 &lt;= nums[i] &lt;= 100</li></ul>\n<p><strong>思路</strong>：本题要求把数组分成两个等和的子集，相当于找到一个子集，其和为 sum / 2，这个 sum / 2 就是 target（target 间接给出）。<br/> 于是转化为是否可以用 nums 中的数组合和成 target，01 背包问题（组合），外层循环为选择池 num: nums，内层循环为 target。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canPartition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 01背包问题</span>\n        <span class=\"token keyword\">int</span> le <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span>\n            sum <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sum <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> le <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> target <span class=\"token operator\">=</span> sum<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>target <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// target等于0时为true</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> target<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">|=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>复杂度分析</strong>：</p>\n<ul><li>时间复杂度：O(target × n)，其中 n 是数组 nums 的长度。</li><li>空间复杂度：O(target)。</li></ul>\n<p><a href=\"https://leetcode-cn.com/problems/target-sum/\">494. 目标和</a></p>\n<p>给你一个整数数组 nums 和一个整数 target 。</p>\n<p>向数组中的每个整数前添加 ‘+’ 或 ‘-’ ，然后串联起所有整数，可以构造一个 表达式 ：</p>\n<p>例如，nums = [2, 1] ，可以在 2 之前添加 ‘+’ ，在 1 之前添加 ‘-’ ，然后串联起来得到表达式 “+2-1” 。<br/> 返回可以通过上述方法构造的、运算结果等于 target 的不同 表达式 的数目。</p>\n<p><strong>示例 1：</strong></p>\n<blockquote>\n<p>输入：nums = [1,1,1,1,1], target = 3<br/> 输出：5<br/> 解释：一共有 5 种方法让最终目标和为 3 。<br/> -1 + 1 + 1 + 1 + 1 = 3<br/> +1 - 1 + 1 + 1 + 1 = 3<br/> +1 + 1 - 1 + 1 + 1 = 3<br/> +1 + 1 + 1 - 1 + 1 = 3<br/> +1 + 1 + 1 + 1 - 1 = 3</p>\n</blockquote>\n<p><strong>提示：</strong></p>\n<ul><li>1 &lt;= nums.length &lt;= 20</li><li>0 &lt;= nums[i] &lt;= 1000</li><li>0 &lt;= sum(nums[i]) &lt;= 1000</li><li>-1000 &lt;= target &lt;= 1000</li></ul>\n<p><strong>思路</strong>：我们想要的 S = 正数和 - 负数和 = x - y<br/> 而已知 x 与 y 的和是数组总和：x + y = sum<br/> 可以求出 x = (S - sum) / 2 = target<br/> 也就是我们要从 nums 数组里选出几个数（组合问题），令其和为 target（target 间接给出）。<br/> <strong>注意</strong>：负数组的和为X，这里不能用正数组，因为target可能是负数</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">findTargetSumWays</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> le <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            sum <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 如果sum&lt;target,即都为正数也不能组成target，则直接返回0</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sum <span class=\"token operator\">&lt;</span> target <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">-</span> target<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token class-name\">X</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">-</span> target<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 负数组的和为X，这里不能用正数组，因为target可能是负数</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">X</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token class-name\">X</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 负数组选num（dp[i-num]）和不选num（dp[i]）的数量相加为dp[i]</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span><span class=\"token class-name\">X</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>复杂度分析</strong>：</p>\n<ul><li>时间复杂度：O(target × n)，其中 n 是数组 nums 的长度。</li><li>空间复杂度：O(target)。</li></ul>\n<h4><a id=\"_147\"></a>完全背包</h4>\n<p><a href=\"https://leetcode-cn.com/problems/word-break/\">139. 单词拆分</a></p>\n<p>给你一个字符串 s 和一个字符串列表 wordDict 作为字典。请你判断是否可以利用字典中出现的单词拼接出 s 。</p>\n<p><strong>注意</strong>：不要求字典中出现的单词全部都使用，并且字典中的单词可以重复使用。</p>\n<p><strong>示例 1</strong>：</p>\n<blockquote>\n<p>输入: s = “leetcode”, wordDict = [“leet”, “code”]<br/> 输出: true<br/> 解释: 返回 true 因为 “leetcode” 可以由 “leet” 和 “code” 拼接成。</p>\n</blockquote>\n<p><strong>示例 2</strong>：</p>\n<blockquote>\n<p>输入: s = “applepenapple”, wordDict = [“apple”, “pen”]<br/> 输出: true<br/> 解释: 返回true 因为 “applepenapple” 可以由 “apple” “pen” “apple” 拼接成。<br/> 注意：你可以重复使用字典中的单词。</p>\n</blockquote>\n<p><strong>提示</strong>：</p>\n<ul><li>1 &lt;= s.length &lt;= 300</li><li>1 &lt;= wordDict.length &lt;= 1000</li><li>1 &lt;= wordDict[i].length &lt;= 20</li><li>s 和 wordDict[i] 仅有小写英文字母组成</li><li>wordDict 中的所有字符串 互不相同</li></ul>\n<p><strong>思路</strong>：转化为是否可以用 wordDict 中的词组合成 s，完全背包问题（排列），外层循环为 target ，内层循环为选择池 wordDict。<br/> dp[i] 表示以 i 结尾的字符串是否可以被 wordDict 中组合而成。</p>\n<ul><li>外层遍历 s 中每一个与 word 同长度的字串s.substring(i - wordLen, i) ；</li><li>内层遍历 wordDict 每个 word。</li></ul>\n<p>判断 s.substring(i - wordLen, i).equals(word)：</p>\n<ul><li>若不相等，说明与该 word 不匹配，继续遍历；</li><li>若相等，说明从 i - wordLen 到 i的字符与 word 匹配。</li></ul>\n<p>dp[i] = dp[i] || dp[i - wordLen]；<br/> 对于边界条件，我们定义 dp[0] = true 表示空串且合法。<br/> 最后返回 dp[len];</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">wordBreak</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> wordDict<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 根据字符串s建dp数组</span>\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>len <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> word <span class=\"token operator\">:</span> wordDict<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">int</span> wordLen <span class=\"token operator\">=</span> word<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> wordLen <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> wordLen<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>      \n                    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">|=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> wordLen<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>                   \n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>复杂度分析:</strong><br/> 时间复杂度：O(target × n)，其中 n 是数组 nums 的长度。<br/> 空间复杂度：O(target)。</p>\n<p><a href=\"https://leetcode-cn.com/problems/perfect-squares/\">279. 完全平方数</a><br/> 给你一个整数 n ，返回 和为 n 的完全平方数的最少数量 。<br/> 完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。</p>\n<p><strong>示例 1:</strong></p>\n<blockquote>\n<p>输入：n = 12<br/> 输出：3<br/> 解释：12 = 4 + 4 + 4</p>\n</blockquote>\n<p><strong>示例 2:</strong></p>\n<blockquote>\n<p>输入：n = 13<br/> 输出：2<br/> 解释：13 = 4 + 9</p>\n</blockquote>\n<p><strong>提示：</strong></p>\n<ul><li>1 &lt;= n &lt;= 104</li></ul>\n<p><strong>思路</strong>：我们想要的 S = 若干个完全平方数的和<br/> 完全平方数最小为 1，最大为 sqrt(n)<br/> 也就是我们要从 nums = [1, 2, …, sqrt(n)] 数组里选出几个数，令其平方和为 target = n。<br/> 于是转化为是否可以用 nums 中的数组合和成 target，完全背包问题（最值问题），外层循环为选择池 nums，内层循环为 target。<br/> **注意：**本题是最值问题，所以不用考虑排列组合，内target外nums和内nums外target都可行。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numSquares</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">*</span> j <span class=\"token operator\">&lt;=</span> i<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> j <span class=\"token operator\">*</span> j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>复杂度分析：</strong></p>\n<ul><li>时间复杂度：O(n x sqrt{n})，在主步骤中，我们有一个嵌套循环，其中外部循环是 n 次迭代，而内部循环最多需要 sqrt{n} 迭代。</li><li>空间复杂度：O(n)，使用了一个一维数组 dp。</li></ul>\n<p><a href=\"https://leetcode-cn.com/problems/coin-change-2/\">518. 零钱兑换 II</a><br/> 给你一个整数数组 coins 表示不同面额的硬币，另给一个整数 amount 表示总金额。<br/> 请你计算并返回可以凑成总金额的硬币组合数。如果任何硬币组合都无法凑出总金额，返回 0 。<br/> 假设每一种面额的硬币有无限个。<br/> 题目数据保证结果符合 32 位带符号整数。</p>\n<p><strong>示例 1：</strong></p>\n<blockquote>\n<p>输入：amount = 5, coins = [1, 2, 5]<br/> 输出：4<br/> 解释：有四种方式可以凑成总金额：<br/> 5=5<br/> 5=2+2+1<br/> 5=2+1+1+1<br/> 5=1+1+1+1+1</p>\n</blockquote>\n<p><strong>示例 2：</strong></p>\n<blockquote>\n<p>输入：amount = 3, coins = [2]<br/> 输出：0<br/> 解释：只用面额 2 的硬币不能凑成总金额 3 。</p>\n</blockquote>\n<p><strong>提示：</strong></p>\n<ul><li>1 &lt;= coins.length &lt;= 300</li><li>1 &lt;= coins[i] &lt;= 5000</li><li>coins 中的所有值 互不相同</li><li>0 &lt;= amount &lt;= 5000</li></ul>\n<p><strong>思路</strong>：转化为是否可以用 coins 中的数组合和成 amount，完全背包问题（组合），外层循环为选择池 coins，内层循环为 amount。<br/> 对于元素之和等于 i - coin 的每一种组合，在最后添加 coin 之后即可得到一个元素之和等于 i 的组合，因此在计算 dp[i] 时，应该计算所有的 dp[i − coin] 之和。</p>\n<blockquote>\n<p>dp[i] = dp[i] + dp[i - coin]</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> coins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>amount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> coin<span class=\"token operator\">:</span> coins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> coin<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> amount<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            \tdp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> coin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>amount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>复杂度分析：</strong></p>\n<ul><li>时间复杂度：O(amount x n)，其中 n 为 coins 大小</li><li>空间复杂度：O(amount)</li></ul>\n<h4><a id=\"_306\"></a>多组背包</h4>\n<p><a href=\"https://leetcode-cn.com/problems/ones-and-zeroes/\">474. 一和零</a><br/> 给你一个二进制字符串数组 strs 和两个整数 m 和 n 。<br/> 请你找出并返回 strs 的最大子集的长度，该子集中 最多 有 m 个 0 和 n 个 1 。<br/> 如果 x 的所有元素也是 y 的元素，集合 x 是集合 y 的 子集 。</p>\n<p><strong>示例 1：</strong></p>\n<blockquote>\n<p>输入：strs = [“10”, “0001”, “111001”, “1”, “0”], m = 5, n = 3<br/> 输出：4<br/> 解释：最多有5 个 0 和 3 个 1 的最大子集是 {“10”,“0001”,“1”,“0”} ，因此答案是 4 。 其他满足题意但较小的子集包括{“0001”,“1”} 和 {“10”,“1”,“0”} 。{“111001”} 不满足题意，因为它含 4 个 1 ，大于 n 的值 3。</p>\n</blockquote>\n<p><strong>示例 2：</strong></p>\n<blockquote>\n<p>输入：strs = [“10”, “0”, “1”], m = 1, n = 1<br/> 输出：2<br/> 解释：最大的子集是 {“0”, “1”}，所以答案是 2 。</p>\n</blockquote>\n<p><strong>提示：</strong></p>\n<ul><li>1 &lt;= strs.length &lt;= 600</li><li>1 &lt;= strs[i].length &lt;= 100</li><li>strs[i] 仅由 ‘0’ 和 ‘1’ 组成</li><li>1 &lt;= m, n &lt;= 100</li></ul>\n<p><strong>思路：</strong><br/> 计算出strs中每个值的0和1个数<br/> 然后用dp来计算（01背包问题，只是这里是二维，即装两个背包）<br/> 使用空间优化</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">findMaxForm</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> strs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        \n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> strs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> zerosOnes <span class=\"token operator\">=</span> <span class=\"token function\">getZerosOnes</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> zeros <span class=\"token operator\">=</span> zerosOnes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ones <span class=\"token operator\">=</span> zerosOnes<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&gt;=</span> zeros<span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span> k <span class=\"token operator\">&gt;=</span> ones<span class=\"token punctuation\">;</span> k<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> zeros<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k <span class=\"token operator\">-</span> ones<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getZerosOnes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> zerosOnes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            zerosOnes<span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> zerosOnes<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>复杂度分析：</strong></p>\n<ul><li>时间复杂度：O(lmn+L)，遍历strs，其中求出zero和one，然后mn</li><li>空间复杂度：O(mn)，空间优化后为mn</li><li>l为strs的长度，L为strs中所有字符串总长度</li></ul>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-05-02 19:06:44", "summary": "背包问题是动态规划非常重要的一类问题，它有很多变种，但题目万变不离其宗。我们需要抓住关键的解题思路，现将解题模板总结如下：在这里插入图片描述背包问题的定义那么什么样的问题可以被称作为背包问题？换言之，"}