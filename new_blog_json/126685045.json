{"blogid": "126685045", "writerAge": "码龄4年", "writerBlogNum": "113", "writerCollect": "102", "writerComment": "16", "writerFan": "319", "writerGrade": "4级", "writerIntegral": "1292", "writerName": "滨边美波她男友", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126685045.jpg", "writerRankTotal": "15114", "writerRankWeekly": "4373", "writerThumb": "24", "writerVisitNum": "50733", "blog_read_count": "74", "blog_time": "于 2022-09-04 03:04:20 发布", "blog_title": "python 文件操作", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_6\">前言</a></li><li><a href=\"#_15\">一、文件的概念</a></li><li><ul><li><ul><li><a href=\"#11__17\">1.1 文件的概念和作用</a></li><li><a href=\"#12__28\">1.2 文件的存储方式</a></li><li><ul><li><a href=\"#_32\">文本文件和二进制文件</a></li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#_47\">二、文件的基本操作</a></li><li><ul><li><ul><li><a href=\"#21__49\">2.1 操作文件的套路</a></li><li><a href=\"#22__59\">2.2 操作文件的函数/方法</a></li><li><a href=\"#23_read____73\">2.3 read 方法 —— 读取文件</a></li><li><ul><li><a href=\"#_99\">文件指针（知道）</a></li></ul>\n</li><li><a href=\"#24__115\">2.4 打开文件的方式</a></li><li><a href=\"#25__152\">2.5 按行读取文件内容</a></li><li><ul><li><a href=\"#readline__157\">`readline` 方法</a></li></ul>\n</li><li><a href=\"#26____182\">2.6 文件读写案例 —— 复制文件</a></li><li><ul><li><a href=\"#_192\">小文件复制</a></li><li><a href=\"#_211\">大文件复制</a></li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#_239\">三、文件/目录的常用管理操作</a></li><li><ul><li><ul><li><a href=\"#_245\">文件操作</a></li><li><a href=\"#_252\">目录操作</a></li></ul>\n</li><li><a href=\"#_267\">四、文本文件的编码格式（科普）</a></li><li><ul><li><a href=\"#41_ASCII__UNICODE__274\">4.1 ASCII 编码和 UNICODE 编码</a></li><li><ul><li><a href=\"#ASCII__276\">`ASCII` 编码</a></li><li><a href=\"#UTF8__285\">`UTF-8` 编码格式</a></li></ul>\n</li><li><a href=\"#42_Ptyhon_2x__291\">4.2 Ptyhon 2.x 中如何使用中文</a></li><li><ul><li><a href=\"#unicode__310\">unicode 字符串</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_6\"></a>前言</h1>\n<ul><li>文件的概念</li><li>文件的基本操作</li><li>文件/文件夹的常用操作</li><li>文本文件的编码方式</li></ul>\n<hr/>\n<h1><a id=\"_15\"></a>一、文件的概念</h1>\n<h3><a id=\"11__17\"></a>1.1 文件的概念和作用</h3>\n<ul><li>计算机的 <strong>文件</strong>，就是存储在某种 <strong>长期储存设备</strong> 上的一段 <strong>数据</strong></li><li>长期存储设备包括：硬盘、U 盘、移动硬盘、光盘…</li></ul>\n<p><strong>文件的作用</strong></p>\n<p>将数据长期保存下来，在需要的时候使用</p>\n<h3><a id=\"12__28\"></a>1.2 文件的存储方式</h3>\n<ul><li>在计算机中，文件是以 <strong>二进制</strong> 的方式保存在磁盘上的</li></ul>\n<h4><a id=\"_32\"></a>文本文件和二进制文件</h4>\n<ul><li> <p>文本文件</p>\n<ul><li>可以使用 <strong>文本编辑软件</strong> 查看</li><li>本质上还是二进制文件</li><li>例如：python 的源程序</li></ul> </li><li> <p>二进制文件</p>\n<ul><li>保存的内容 不是给人直接阅读的，而是 <strong>提供给其他软件使用的</strong></li><li>例如：图片文件、音频文件、视频文件等等</li><li>二进制文件不能使用 <strong>文本编辑软件</strong> 查看</li></ul> </li></ul>\n<hr/>\n<h1><a id=\"_47\"></a>二、文件的基本操作</h1>\n<h3><a id=\"21__49\"></a>2.1 操作文件的套路</h3>\n<p>在 <strong>计算机</strong> 中要操作文件的套路非常固定，一共包含<strong>三个步骤</strong>：</p>\n<ol><li>打开文件</li><li>读、写文件 \n  <ul><li><strong>读</strong> 将文件内容读入内存</li><li><strong>写</strong> 将内存内容写入文件</li></ul> </li><li>关闭文件</li></ol>\n<h3><a id=\"22__59\"></a>2.2 操作文件的函数/方法</h3>\n<ul><li>在 <code>Python</code> 中要操作文件需要记住 1 个函数和 3 个方法</li></ul>\n<table><thead><tr><th>序号</th><th>函数/方法</th><th>说明</th></tr></thead><tbody><tr><td>01</td><td>open</td><td>打开文件，并且返回文件操作对象</td></tr><tr><td>02</td><td>read</td><td>将文件内容读取到内存</td></tr><tr><td>03</td><td>write</td><td>将指定内容写入文件</td></tr><tr><td>04</td><td>close</td><td>关闭文件</td></tr></tbody></table>\n<ul><li><code>open</code> 函数负责打开文件，并且返回文件对象</li><li><code>read</code>/<code>write</code>/<code>close</code> 三个方法都需要通过 <strong>文件对象</strong> 来调用</li></ul>\n<h3><a id=\"23_read____73\"></a>2.3 read 方法 —— 读取文件</h3>\n<ul><li><code>open</code> 函数的第一个参数是要打开的文件名（文件名区分大小写） \n  <ul><li>如果文件 <strong>存在</strong>，返回 <strong>文件操作对象</strong></li><li>如果文件 <strong>不存在</strong>，会 <strong>抛出异常</strong></li></ul> </li><li><code>read</code> 方法可以一次性 <strong>读入</strong> 并 <strong>返回</strong> 文件的 <strong>所有内容</strong></li><li><code>close</code> 方法负责 <strong>关闭文件</strong>\n<ul><li>如果 <strong>忘记关闭文件</strong>，<strong>会造成系统资源消耗，而且会影响到后续对文件的访问</strong></li></ul> </li><li><strong>注意</strong>：<code>read</code> 方法执行后，会把 <strong>文件指针</strong> 移动到 <strong>文件的末尾</strong></li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 1. 打开 - 文件名需要注意大小写</span>\n<span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"README\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2. 读取</span>\ntext <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3. 关闭</span>\n<span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>提示</strong></p>\n<ul><li>在开发中，通常会先编写 <strong>打开</strong> 和 <strong>关闭</strong> 的代码，再编写中间针对文件的 <strong>读/写</strong> 操作！</li></ul>\n<h4><a id=\"_99\"></a>文件指针（知道）</h4>\n<ul><li><strong>文件指针</strong> 标记 <strong>从哪个位置开始读取数据</strong></li><li><strong>第一次打开</strong> 文件时，通常 <strong>文件指针会指向文件的开始位置</strong></li><li>当执行了 <code>read</code> 方法后，<strong>文件指针</strong> 会移动到 <strong>读取内容的末尾</strong>\n<ul><li>默认情况下会移动到 <strong>文件末尾</strong></li></ul> </li></ul>\n<p><strong>思考</strong></p>\n<ul><li>如果执行了一次 <code>read</code> 方法，读取了所有内容，那么再次调用 <code>read</code> 方法，还能够获得到内容吗？</li></ul>\n<p><strong>答案</strong></p>\n<ul><li>不能</li><li>第一次读取之后，文件指针移动到了文件末尾，再次调用不会读取到任何的内容</li></ul>\n<h3><a id=\"24__115\"></a>2.4 打开文件的方式</h3>\n<ul><li><code>open</code> 函数默认以 <strong>只读方式</strong> 打开文件，并且返回文件对象</li></ul>\n<p>语法如下：</p>\n<pre><code class=\"prism language-python\">f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件名\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"访问方式\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<table><thead><tr><th align=\"center\">访问方式</th><th>说明</th></tr></thead><tbody><tr><td align=\"center\">r</td><td>以<strong>只读</strong>方式打开文件。文件的指针将会放在文件的开头，这是<strong>默认模式</strong>。如果文件不存在，抛出异常</td></tr><tr><td align=\"center\">w</td><td>以<strong>只写</strong>方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件</td></tr><tr><td align=\"center\">a</td><td>以<strong>追加</strong>方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入</td></tr><tr><td align=\"center\">r+</td><td>以<strong>读写</strong>方式打开文件。文件的指针将会放在文件的开头。如果文件不存在，抛出异常</td></tr><tr><td align=\"center\">w+</td><td>以<strong>读写</strong>方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件</td></tr><tr><td align=\"center\">a+</td><td>以<strong>读写</strong>方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入</td></tr></tbody></table>\n<p><strong>提示</strong></p>\n<ul><li>频繁的移动文件指针，<strong>会影响文件的读写效率</strong>，开发中更多的时候会以 <strong>只读</strong>、<strong>只写</strong> 的方式来操作文件</li></ul>\n<p><strong>写入文件示例</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 打开文件</span>\nf <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"README\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span>\n\nf<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello python！\\n\"</span><span class=\"token punctuation\">)</span>\nf<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"今天天气真好\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 关闭文件</span>\nf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h3><a id=\"25__152\"></a>2.5 按行读取文件内容</h3>\n<ul><li><code>read</code> 方法默认会把文件的 <strong>所有内容</strong> <strong>一次性读取到内存</strong></li><li>如果文件太大，对内存的占用会非常严重</li></ul>\n<h4><a id=\"readline__157\"></a><code>readline</code> 方法</h4>\n<ul><li><code>readline</code> 方法可以一次读取一行内容</li><li>方法执行后，会把 <strong>文件指针</strong> 移动到下一行，准备再次读取</li></ul>\n<p><strong>读取大文件的正确姿势</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 打开文件</span>\n<span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"README\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 读取一行内容</span>\n    text <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 判断是否读到内容</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> text<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">break</span>\n\n    <span class=\"token comment\"># 每读取一行的末尾已经有了一个 `\\n`</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 关闭文件</span>\n<span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"26____182\"></a>2.6 文件读写案例 —— 复制文件</h3>\n<p><strong>目标</strong></p>\n<p>用代码的方式，来实现文件复制过程</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9c45141d4d15418a93fec7548e040236.png\"/></p>\n<h4><a id=\"_192\"></a>小文件复制</h4>\n<ul><li>打开一个已有文件，读取完整内容，并写入到另外一个文件</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 1. 打开文件</span>\nfile_read <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"README\"</span><span class=\"token punctuation\">)</span>\nfile_write <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"README[复件]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2. 读取并写入文件</span>\ntext <span class=\"token operator\">=</span> file_read<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfile_write<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3. 关闭文件</span>\nfile_read<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfile_write<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h4><a id=\"_211\"></a>大文件复制</h4>\n<ul><li>打开一个已有文件，逐行读取内容，并顺序写入到另外一个文件</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 1. 打开文件</span>\nfile_read <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"README\"</span><span class=\"token punctuation\">)</span>\nfile_write <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"README[复件]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2. 读取并写入文件</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 每次读取一行</span>\n    text <span class=\"token operator\">=</span> file_read<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 判断是否读取到内容</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> text<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">break</span>\n\n    file_write<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3. 关闭文件</span>\nfile_read<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfile_write<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<hr/>\n<h1><a id=\"_239\"></a>三、文件/目录的常用管理操作</h1>\n<ul><li>在 <strong>终端</strong> / <strong>文件浏览器</strong>、 中可以执行常规的 <strong>文件</strong> / <strong>目录</strong> 管理操作，例如： \n  <ul><li>创建、重命名、删除、改变路径、查看目录内容、……</li></ul> </li><li>在 <code>Python</code> 中，如果希望通过程序实现上述功能，需要导入 <code>os</code> 模块</li></ul>\n<h3><a id=\"_245\"></a>文件操作</h3>\n<table><thead><tr><th>序号</th><th>方法名</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>01</td><td>rename</td><td>重命名文件</td><td><code>os.rename(源文件名, 目标文件名)</code></td></tr><tr><td>02</td><td>remove</td><td>删除文件</td><td><code>os.remove(文件名)</code></td></tr></tbody></table>\n<h3><a id=\"_252\"></a>目录操作</h3>\n<table><thead><tr><th>序号</th><th>方法名</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>01</td><td>listdir</td><td>目录列表</td><td><code>os.listdir(目录名)</code></td></tr><tr><td>02</td><td>mkdir</td><td>创建目录</td><td><code>os.mkdir(目录名)</code></td></tr><tr><td>03</td><td>rmdir</td><td>删除目录</td><td><code>os.rmdir(目录名)</code></td></tr><tr><td>04</td><td>getcwd</td><td>获取当前目录</td><td><code>os.getcwd()</code></td></tr><tr><td>05</td><td>chdir</td><td>修改工作目录</td><td><code>os.chdir(目标目录)</code></td></tr><tr><td>06</td><td>path.isdir</td><td>判断是否是文件</td><td><code>os.path.isdir(文件路径)</code></td></tr></tbody></table>\n<blockquote>\n<p>提示：文件或者目录操作都支持 <strong>相对路径</strong> 和 <strong>绝对路径</strong></p>\n</blockquote>\n<hr/>\n<h2><a id=\"_267\"></a>四、文本文件的编码格式（科普）</h2>\n<ul><li>文本文件存储的内容是基于 <strong>字符编码</strong> 的文件，常见的编码有 <code>ASCII</code> 编码，<code>UNICODE</code> 编码等</li></ul>\n<blockquote>\n<p>Python 2.x 默认使用 <code>ASCII</code> 编码格式<br/> Python 3.x 默认使用 <code>UTF-8</code> 编码格式</p>\n</blockquote>\n<h3><a id=\"41_ASCII__UNICODE__274\"></a>4.1 ASCII 编码和 UNICODE 编码</h3>\n<h4><a id=\"ASCII__276\"></a><code>ASCII</code> 编码</h4>\n<ul><li>计算机中只有 <code>256</code> 个 <code>ASCII</code> 字符</li><li>一个 <code>ASCII</code> 在内存中占用 <strong>1 个字节</strong> 的空间 \n  <ul><li><code>8</code> 个 <code>0/1</code> 的排列组合方式一共有 <code>256</code> 种，也就是 <code>2 ** 8</code></li></ul> </li></ul>\n<p><img alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-mrwYxoJi-1662231746524)(media/15019810951755/001_ASCII%E7%BC%96%E7%A0%81%E8%A1%A81.jpg)]\" src=\"..\\..\\static\\image\\7f19b3b48a5f4f8b98414e9c4445c84b.jpeg\"/></p>\n<h4><a id=\"UTF8__285\"></a><code>UTF-8</code> 编码格式</h4>\n<ul><li>计算机中使用 <strong>1~6 个字节</strong> 来表示一个 <code>UTF-8</code> 字符，涵盖了 <strong>地球上几乎所有地区的文字</strong></li><li>大多数汉字会使用 <strong>3 个字节</strong> 表示</li><li><code>UTF-8</code> 是 <code>UNICODE</code> 编码的一种编码格式</li></ul>\n<h3><a id=\"42_Ptyhon_2x__291\"></a>4.2 Ptyhon 2.x 中如何使用中文</h3>\n<blockquote>\n<p>Python 2.x 默认使用 <code>ASCII</code> 编码格式<br/> Python 3.x 默认使用 <code>UTF-8</code> 编码格式</p>\n</blockquote>\n<ul><li>在 Python 2.x 文件的 <strong>第一行</strong> 增加以下代码，解释器会以 <code>utf-8</code> 编码来处理 python 文件</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># *-* coding:utf8 *-*</span>\n</code></pre>\n<blockquote>\n<p>这方式是官方推荐使用的！</p>\n</blockquote>\n<ul><li>也可以使用</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># coding=utf8</span>\n</code></pre>\n<h4><a id=\"unicode__310\"></a>unicode 字符串</h4>\n<ul><li>在 <code>Python 2.x</code> 中，即使指定了文件使用 <code>UTF-8</code> 的编码格式，但是在遍历字符串时，仍然会 <strong>以字节为单位遍历</strong> 字符串</li><li>要能够 <strong>正确的遍历字符串</strong>，在定义字符串时，需要 <strong>在字符串的引号前</strong>，增加一个小写字母 <code>u</code>，告诉解释器这是一个 <code>unicode</code> 字符串（使用 <code>UTF-8</code> 编码格式的字符串）</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># *-* coding:utf8 *-*</span>\n\n<span class=\"token comment\"># 在字符串前，增加一个 `u` 表示这个字符串是一个 utf8 字符串</span>\nhello_str <span class=\"token operator\">=</span> <span class=\"token string\">u\"你好世界\"</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>hello_str<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> hello_str<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-04 03:04:20", "summary": "文章目录前言一、文件的概念文件的概念和作用文件的存储方式文本文件和二进制文件二、文件的基本操作操作文件的套路操作文件的函数方法方法读取文件文件指针知道打开文件的方式按行读取文件内容方法文件读写案例复制"}