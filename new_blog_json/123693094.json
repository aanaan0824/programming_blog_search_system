{"blogid": "123693094", "writerAge": "码龄4年", "writerBlogNum": "68", "writerCollect": "584", "writerComment": "20", "writerFan": "4421", "writerGrade": "3级", "writerIntegral": "654", "writerName": "~QwQ~", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123693094.jpg", "writerRankTotal": "25761", "writerRankWeekly": "1904", "writerThumb": "82", "writerVisitNum": "58815", "blog_read_count": "5107", "blog_time": "已于 2022-03-25 16:35:05 修改", "blog_title": "9. 广义表 - 广义表概念，存储结构，深度/长度，复制算法", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#9_____1\">9. 广义表 - 广义表概念，存储结构，深度/长度，复制算法</a></li><li><ul><li><a href=\"#91__2\">9.1 广义表的基础概念</a></li><li><a href=\"#92__20\">9.2 广义表的存储结构</a></li><li><a href=\"#93__60\">9.3 广义表的深度和长度</a></li><li><ul><li><a href=\"#931__61\">9.3.1 广义表的长度</a></li><li><a href=\"#932__71\">9.3.2 广义表的深度</a></li></ul>\n</li><li><a href=\"#94__74\">9.4 广义表的复制</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"9_____1\"></a>9. 广义表 - 广义表概念，存储结构，深度/长度，复制算法</h1>\n<h2><a id=\"91__2\"></a>9.1 广义表的基础概念</h2>\n<p><strong>1 ）什么是广义表</strong></p>\n<ul><li><code>广义表</code>，又称列表，也是一种线性存储结构，既可以存储不可再分的元素，也可以存储广义表，记作：<code>LS = (a1,a2,…,an)</code>，其中，LS 代表广义表的名称，an 表示广义表存储的数据，广义表中每个 ai 既可以代表单个元素，也可以代表另一个广义表。</li></ul>\n<p><strong>2 ）广义表的原子和子表</strong></p>\n<ul><li>广义表中存储的<code>单个元素称为 \"原子\"</code>，而<code>存储的广义表称为 \"子表\"</code>。<br/> 例如 ：广义表 LS = {1,{1,2,3}}，则此广义表的构成 ：广义表 LS 存储了一个原子 1 和子表 {1,2,3}。</li><li>广义表存储数据的一些常用形式： \n  <ul><li>A = ()：A 表示一个广义表，只不过表是空的。</li><li>B = (e)：广义表 B 中只有一个原子 e。</li><li>C = (a,(b,c,d)) ：广义表 C 中有两个元素，原子 a 和子表 (b,c,d)。</li><li>D = (A,B,C)：广义表 D 中存有 3 个子表，分别是A、B和C。这种表示方式等同于 D = ((),(e),(b,c,d)) 。</li><li>E = (a,E)：广义表 E 中有两个元素，原子 a 和它本身。这是一个递归广义表，等同于：E = (a,(a,(a,…)))。</li></ul> </li></ul>\n<p><strong>3 ） 广义表的表头和表尾</strong></p>\n<ul><li>当广义表不是空表时，称<code>第一个数据（原子或子表）为\"表头\"</code>，<code>剩下的数据构成的新广义表为\"表尾\"</code>。</li><li>除非广义表为空表，否则广义表一定具有表头和表尾，且广义表的表尾一定是一个广义表。</li></ul>\n<h2><a id=\"92__20\"></a>9.2 广义表的存储结构</h2>\n<p><strong>1）存储结构一</strong></p>\n<ul><li>存储结构一如下示意图所示：表示<code>原子的节点由两部分构成</code>，分别是 <code>tag 标记位和原子的值</code>，表示<code>子表的节点由三部分构成</code>，分别是 <code>tag 标记位、hp 指针和 tp 指针</code>。 \n  <ul><li>tag 标记位用于区分此节点是原子还是子表，通常原子的 tag 值为 0，子表的 tag 值为 1；</li><li>子表节点中的 hp 指针用于连接本子表中存储的原子或子表；</li><li>tp 指针用于连接广义表中下一个原子或子表。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\07176c0200e145458db242704ac435bd.png\"/></li></ul> </li><li>广义表中两种节点的表示代码定义如下：<br/> 定义中使用了 <code>union 共用体</code>，因为同一时间此节点不是原子节点就是子表节点，当表示原子节点时，就使用 atom 变量；反之则使用 ptr 结构体。</li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">GNode</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> tag<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 标志域, 0表示原子, 1表示子表</span>\n    <span class=\"token keyword\">union</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">char</span> atom<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//  原子结点的值域</span>\n        <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">struct</span> <span class=\"token class-name\">GNode</span> <span class=\"token operator\">*</span> hp<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>tp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>ptr<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 子表结点的指针域, hp指向表头, tp指向表尾</span>\n    <span class=\"token punctuation\">}</span>subNode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>GLNode<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>Glist<span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>例如，<code>广义表 {a,{b,c,d}}</code> 用该存储结构的存储示意图如下 ：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\62549ede3f9c48b49296af54d44ed40b.png\"/><br/> <strong>2）存储结构二</strong></li><li>另一种存储结构的<code>原子的节点也由三部分构成</code>，分别是 ： <code>tag 标记位、原子值和 tp 指针构成</code>；表示子表的节点由三部分构成，分别是 ： <code>tag 标记位、hp 指针和 tp 指针</code>，示意图如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\352835445da94cbda66a5685402f2da3.png\"/></li><li>代码定义如下：</li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">GNode</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> tag<span class=\"token punctuation\">;</span>                <span class=\"token comment\">// 标志域, 0表示原子, 1表示子表</span>\n    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> atom<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 原子结点的值域</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">GNode</span><span class=\"token operator\">*</span> hp<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 子表结点的指针域, hp指向表头</span>\n    <span class=\"token punctuation\">}</span>subNode<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">GNode</span><span class=\"token operator\">*</span> tp<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 这里的tp相当于链表的next指针, 用于指向下一个数据元素</span>\n<span class=\"token punctuation\">}</span>GLNode<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>Glist<span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>例如，<code>广义表 {a,{b,c,d}}</code> 用该存储结构的存储示意图如下 ：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5aeb531bbc38442a99e2b283dd2ddec1.png\"/></li></ul>\n<h2><a id=\"93__60\"></a>9.3 广义表的深度和长度</h2>\n<h3><a id=\"931__61\"></a>9.3.1 广义表的长度</h3>\n<ul><li>广义表的长度，指的是<code>广义表中所包含的数据元素的个数</code>。</li><li>计算元素个数时，广义表中存储的<code>每个原子算作一个数据</code>，同样<code>每个子表也只算作是一个数据</code>。 \n  <ul><li>LS = {a1,a2,…,an} 的长度为 n；</li><li>广义表 {a,{b,c,d}} 的长度为 2；</li><li>广义表 {<!-- -->{a,b,c}} 的长度为 1；</li><li>空表 {} 的长度为 0。</li></ul> </li><li>求广义表长度时，两种不同的存储方式求解也有所不同，如下示意图所示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ba02305aaa4248258010572a83091f87.png\"/><br/> 对于图 1a) 来说，只需计算最顶层（红色标注）含有的节点数量，即可求的广义表的长度。同理，对于图 1b) 来说，由于其最顶层（蓝色标注）表示的此广义表，而第二层（红色标注）表示的才是该广义表中包含的数据元素，因此可以通过计算第二层中包含的节点数量，才可求得广义表的长度。</li></ul>\n<h3><a id=\"932__71\"></a>9.3.2 广义表的深度</h3>\n<ul><li>广义表的深度，可以通过观察该表中所包含括号的层数间接得到，如下示例，该广义表的深度为2。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3eb89cf2f6eb484f87ade938ebfbf590.png\"/></li></ul>\n<h2><a id=\"94__74\"></a>9.4 广义表的复制</h2>\n<ul><li><code>广义表的复制思想</code> ： 任意一个非空广义表来说，都是由两部分组成：表头和表尾。反之，<code>只要确定的一个广义表的表头和表尾，那么这个广义表就可以唯一确定下来</code>。因此复制一个广义表，也是不断的复制表头和表尾的过程。如果表头或者表尾同样是一个广义表，依旧复制其表头和表尾。</li><li>复制广义表的过程，其实就是<code>不断的递归复制广义表中表头和表尾</code>的过程，递归的出口有两个： \n  <ul><li>如果当前遍历的数据元素为空表，则直接返回空表。</li><li>如果当前遍历的数据元素为该表的一个原子，那么直接复制，返回即可</li></ul> </li><li>实现代码：</li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">// 广义表的复制, C为复制目标广义表，*T为指向复制后的广义表</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">copyGlist</span><span class=\"token punctuation\">(</span>Glist C<span class=\"token punctuation\">,</span> Glist <span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 如果C为空表，那么复制表直接为空表 </span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>C<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token operator\">*</span>T<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token operator\">*</span>T<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Glist<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>GNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// C不是空表，给T申请内存空间</span>\n        <span class=\"token comment\">// 申请失败，程序停止</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span>tag<span class=\"token operator\">=</span>C<span class=\"token operator\">-&gt;</span>tag<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 复制表C的tag值</span>\n        <span class=\"token comment\">// 判断当前表元素是否为原子，如果是，直接复制</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>C<span class=\"token operator\">-&gt;</span>tag<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span>atom<span class=\"token operator\">=</span>C<span class=\"token operator\">-&gt;</span>atom<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">//运行到这，说明复制的是子表</span>\n            <span class=\"token function\">copyGlist</span><span class=\"token punctuation\">(</span>C<span class=\"token operator\">-&gt;</span>ptr<span class=\"token punctuation\">.</span>hp<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span>ptr<span class=\"token punctuation\">.</span>hp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//复制表头</span>\n            <span class=\"token function\">copyGlist</span><span class=\"token punctuation\">(</span>C<span class=\"token operator\">-&gt;</span>ptr<span class=\"token punctuation\">.</span>tp<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span>ptr<span class=\"token punctuation\">.</span>tp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//复制表尾</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<p><em><strong>感谢阅读 若有错误 敬请见谅！！！</strong></em></p>\n<hr/>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-25 16:35:05", "summary": "文章目录广义表广义表概念，存储结构，深度长度，复制算法广义表的基础概念广义表的存储结构广义表的深度和长度广义表的长度广义表的深度广义表的复制广义表广义表概念，存储结构，深度长度，复制算法广义表的基础概"}