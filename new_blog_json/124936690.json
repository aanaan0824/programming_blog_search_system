{"blogid": "124936690", "writerAge": "码龄4年", "writerBlogNum": "72", "writerCollect": "1224", "writerComment": "1252", "writerFan": "5548", "writerGrade": "5级", "writerIntegral": "3392", "writerName": "掂掂三生有幸", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124936690.jpg", "writerRankTotal": "5383", "writerRankWeekly": "158", "writerThumb": "1068", "writerVisitNum": "185136", "blog_read_count": "39615", "blog_time": "已于 2022-07-20 16:17:00 修改", "blog_title": "《JAVA生态圈技术总结》之 微服务架构蓝图总览", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录导航</h3>\n<ul><li><a href=\"#_7\">一、微服务定义</a></li><li><ul><li><a href=\"#11__8\">1.1 定义一</a></li><li><a href=\"#12__13\">1.2 定义二</a></li></ul>\n</li><li><a href=\"#_16\">二、微服务利弊</a></li><li><ul><li><a href=\"#21__17\">2.1 优点</a></li><li><a href=\"#22__21\">2.2 缺点</a></li></ul>\n</li><li><a href=\"#_26\">三、微服务的适用性</a></li><li><ul><li><a href=\"#31__29\">3.1 康威法则</a></li><li><a href=\"#32__34\">3.2 生产力</a></li><li><a href=\"#33__44\">3.3 架构演进</a></li></ul>\n</li><li><a href=\"#_54\">四、服务分层</a></li><li><a href=\"#_76\">五、服务注册发现</a></li><li><a href=\"#_86\">六、微服务网关</a></li><li><a href=\"#_108\">七、微服务配置中心</a></li><li><a href=\"#_122\">八、微服务通信</a></li><li><a href=\"#_126\">九、服务监控</a></li><li><ul><li><a href=\"#91__127\">9.1 监控体系</a></li><li><a href=\"#92__132\">9.2 监控架构</a></li></ul>\n</li><li><a href=\"#93__136\">9.3 全链路监控</a></li><li><a href=\"#_147\">十、断路器与流量控制</a></li><li><a href=\"#DevOps_160\">十一、DevOps（云原生架构系列）</a></li><li><a href=\"#_167\">十二、容器云</a></li></ul>\n</div>\n<p></p>\n<blockquote>\n<p>🍍每日推荐</p>\n<p>🍖文章开始之前我想首先介绍一下<a href=\"https://www.nowcoder.com/exam/oj?page=1&amp;tab=SQL%E7%AF%87&amp;topicId=199&amp;fromPut=pc_csdncpt_ddssyx_sql\">牛客</a>，以便没有使用过的小伙伴能够快速入手，<a href=\"https://www.nowcoder.com/exam/oj?page=1&amp;tab=SQL%E7%AF%87&amp;topicId=199&amp;fromPut=pc_csdncpt_ddssyx_sql\">牛客网</a>是国内最大的算法、面试、招聘网站，涵盖了多种大厂面试真题以及题解，里面大佬云集，各种题目的解决方案层出不穷，绝对能让你大开眼界，<font color=\"red\">而且<a href=\"https://www.nowcoder.com/exam/oj?page=1&amp;tab=SQL%E7%AF%87&amp;topicId=199&amp;fromPut=pc_csdncpt_ddssyx_sql\">牛客</a>是你在人生中不同的阶段都能对你有所帮助的编程软件（完全免费）</font>，如果感兴趣可以访问注册一下</p>\n<p>访问链接：<a href=\"https://www.nowcoder.com/exam/oj?page=1&amp;tab=SQL%E7%AF%87&amp;topicId=199&amp;fromPut=pc_csdncpt_ddssyx_sql\">牛客-国内最大的刷题网站</a></p>\n</blockquote>\n<h1><a id=\"_7\"></a>一、微服务定义</h1>\n<h2><a id=\"11__8\"></a>1.1 定义一</h2>\n<ul><li>微服务是一种架构风格，将单体应用划分成一组小的服务，尽量符合单一职责的原则，使得服务之间相互协作，实现业务功能；</li><li>每个服务都运行在独立的进程、虚拟机、容器、服务器中，服务之间采用轻量级的通信机制（HTTP/JSON）进行协作；</li><li>每个服务围绕各自的业务能力进行构建，并且能够通过自动化机制独立地部署，相互之间无部署依赖；</li><li>每个服务可以使用不同的技术栈进行开发；</li></ul>\n<h2><a id=\"12__13\"></a>1.2 定义二</h2>\n<p>微服务是一种基于有界上下文的，松散耦合的面向服务的架构。</p>\n<h1><a id=\"_16\"></a>二、微服务利弊</h1>\n<h2><a id=\"21__17\"></a>2.1 优点</h2>\n<ul><li>划分了业务模块，具有更强的业务边界；</li><li>每个微服务都是可以独立部署的，互不影响；</li><li>允许技术多样性；</li></ul>\n<h2><a id=\"22__21\"></a>2.2 缺点</h2>\n<ul><li>带来了分布式系统的复杂性；</li><li>带来了最终一致性的难题；</li><li>带来了运维的复杂性；</li><li>带来了测试复杂性；</li></ul>\n<h1><a id=\"_26\"></a>三、微服务的适用性</h1>\n<p>什么场景下适用微服务？什么阶段时适用微服务？</p>\n<h2><a id=\"31__29\"></a>3.1 康威法则</h2>\n<p>设计的微服务系统的组织，其产生的架构设计应等价于组织间的沟通结构。</p>\n<p>这句话的意思是说，原始组织之间的结构最好能映射到设计的微服务系统架构上。比如一个系统包含订单、商品、用户等功能，现实中分别由A、B、C三个小组进行开发维护，那么如果要拆分为微服务的架构，最好就能拆分为订单服务、商品服务、用户服务三个微服务，对应A、B、C三个现实的小组结构。</p>\n<h2><a id=\"32__34\"></a>3.2 生产力</h2>\n<p>微服务并不是适合任何阶段，最好的方式就是随着项目的扩大或者团队的扩大时，逐步演进到微服务。因为单体应用会随着规模的扩大而逐渐增加内耗，导致生产力降低。微服务的目标是在规模扩大时，使得生产力能维持在一个稳定的水准之上。</p>\n<p><em><strong>微服务与单体的生产力比较：</strong></em></p>\n<p><img alt=\"微服务与单体的生产力比较\" src=\"https://img-blog.csdnimg.cn/a1cd5ec72ad14c8dab7e03e4909c0dc8.webp#pic_center\"/></p>\n<p>微服务生产力超过单体的拐点，一般来说是指当团队人数规模达到百人时。当然，这也不是绝对的，需要团队负责人自己视情况进行评估。</p>\n<h2><a id=\"33__44\"></a>3.3 架构演进</h2>\n<p>如果在项目一开始就设计微服务的架构，一路上会遇到极大的困难与风险。比如业务模块边界的划分、无法预估的业务或者技术复杂性，这些都会耗费更多的人力和时间，甚至最终导致项目失败。</p>\n<p>建议的方式就是由单体演进，我们可以在单体阶段不断摸索和沉淀业务和技术上的问题，随着越来越清晰的认知，再加上日渐增加的复杂度，可以考虑逐步拆分部分服务出来，朝着微服务架构的方向演进。</p>\n<p><em><strong>架构演进：</strong></em><br/> <img alt=\"架构演进\" src=\"https://img-blog.csdnimg.cn/3d2cb4c8578b4cfebe8b9cc2a2705ab5.webp#pic_center\"/></p>\n<h1><a id=\"_54\"></a>四、服务分层</h1>\n<p>微服务架构中服务与服务各有不同，相互之间也应该按照层级的方式进行编排。有的与业务无关的服务天然属于底层基础服务，有的与业务有关联的服务则属于聚合了基础服务的聚合服务。</p>\n<p><em><strong>服务分层：</strong></em><br/> <img alt=\"服务分层\" src=\"https://img-blog.csdnimg.cn/c903e8579bd841fc8ba202bb3da7d66a.webp#pic_center\"/></p>\n<p>在常见的公司微服务总体架构中，一般的架构表现就如下所示：</p>\n<p><em><strong>微服务总体架构：</strong></em><br/> <img alt=\"微服务总体架构\" src=\"https://img-blog.csdnimg.cn/5e5bef36e07c4222bd618a481e69c196.webp\"/></p>\n<p>有了各个层级的服务之后，中台的概念和战略就显得很自然。</p>\n<p><em><strong>中台战略：</strong></em><br/> <img alt=\"中台战略\" src=\"https://img-blog.csdnimg.cn/c94fb7e471a74c1bbf7cb504edeb614e.webp#pic_center\"/></p>\n<h1><a id=\"_76\"></a>五、服务注册发现</h1>\n<p>服务注册与发现是微服务架构得以运转的核心功能，它不提供任何业务功能，仅仅用来进行服务的发现和注册，并对服务的健康状态进行监控和管理。其核心的工作原理：</p>\n<ul><li>注册中心负责维护所有服务的地址信息，包括服务名称、IP地址、端口等；</li><li>提供服务方将自己的信息注册到注册中心上，并维持一个心跳以此来表明自己一直可用；</li><li>调用服务方想要调用某个服务时，询问注册中心该服务的地址，然后以负载均衡的方式发起调用；</li></ul>\n<p>现在注册中心比较多，主流的有Eureka、Consul、Zookeeper、Nacos等。</p>\n<h1><a id=\"_86\"></a>六、微服务网关</h1>\n<p>网关是整个系统对外暴露的唯一入口，它封装了系统内的所有微服务，对外看来，别人只知道也只能通过网关才可以和系统进行交互。网关对所有请求进行非业务功能的处理，然后再将请求发送给内部指定的微服务进行业务上的处理。总的来说，网关最主要的功能如下：</p>\n<ul><li>反向路由；</li><li>安全认证；</li><li>限流熔断；</li><li>日志监控；</li></ul>\n<p>现在常见的网关有Kong、Zuul、Spring Cloud Gateway等；</p>\n<p><em><strong>微服务网关：</strong></em><br/> <img alt=\"微服务网关\" src=\"https://img-blog.csdnimg.cn/4919034c40b14ecf80f61a2333d5ac27.webp#pic_center\"/></p>\n<p>在实际应用中，一个微服务体系架构的系统可以有多个网关用来应对不同的使用场景，比如公司内网网关、外网网关、提供给第三方调用的网关等；</p>\n<p><em><strong>多网关的使用：</strong></em></p>\n<p><img alt=\"多网关的使用\" src=\"https://img-blog.csdnimg.cn/badf2e19337b4565bf41b73717362043.webp#pic_center\"/></p>\n<h1><a id=\"_108\"></a>七、微服务配置中心</h1>\n<p>微服务在启动和运行的过程中，经常会需要读取一些配置信息，这些配置信息拥有如下的特点：</p>\n<ul><li>独立于程序的只读内容；配置与程序应该分离，应用应该只会去读取配置，而不应该去修改配置；</li><li>伴随应用的整个生命周期；配置会被程序读取用来控制自己的行为逻辑；因此配置是可以被更改的；</li><li>拥有多种加载方式；可以通过硬编码、配置文件、环境变量、启动参数、数据库存储等方式被加载到应用内；</li><li>配置内容需要治理；不同的环境下，配置具有不同的内容，因此需要配置内容的治理；</li></ul>\n<p>如上这些特点和需求，催生了配置中心的出现。现在主流的配置中心有Spring Cloud Config、Nacos、Apollo等；</p>\n<p><em><strong>配置中心：</strong></em><br/> <img alt=\"配置中心\" src=\"https://img-blog.csdnimg.cn/af27e869a71b47cab86a50c28b81e1ac.webp#pic_center\"/></p>\n<h1><a id=\"_122\"></a>八、微服务通信</h1>\n<p><em><strong>RPC和REST：</strong></em><br/> <img alt=\"RPC和REST\" src=\"https://img-blog.csdnimg.cn/75cd932226ae43a5994c8c0fcfb03080.webp#pic_center\"/></p>\n<h1><a id=\"_126\"></a>九、服务监控</h1>\n<h2><a id=\"91__127\"></a>9.1 监控体系</h2>\n<p><em><strong>监控体系：</strong></em><br/> <img alt=\"监控体系\" src=\"https://img-blog.csdnimg.cn/e5f86e5abc3f496ca6ce596225379ce5.webp#pic_center\"/></p>\n<h2><a id=\"92__132\"></a>9.2 监控架构</h2>\n<p><em><strong>监控架构：</strong></em><br/> <img alt=\"监控架构\" src=\"https://img-blog.csdnimg.cn/9d694e32ca2e4036884d25f2fc6156c2.webp#pic_center\"/></p>\n<h1><a id=\"93__136\"></a>9.3 全链路监控</h1>\n<p>在微服务架构中，一次调用请求可能贯穿多个服务，这些服务可能是由不同的团队使用不同的技术开发而成的，如果出现调用失败需要排查问题时，如何能快速地复现调用现场，发现问题出在哪个服务哪个服务器上就成了全链路监控需要解决的问题。</p>\n<p>全链路监控的基本原理都是：</p>\n<ul><li>一次请求全过程中只有一个TraceID保持不变；</li><li>每贯穿一个服务，SpanID都不同，同时标注上一个SpanID；</li><li>按照时间序列将监控信息进行报错和展示；</li></ul>\n<p>全链路监控主流工具有CAT、Zipkin、Pinpoint、Skywalking等；</p>\n<h1><a id=\"_147\"></a>十、断路器与流量控制</h1>\n<p>在微服务架构体系中，服务之间的调用是很频繁的，一旦某些服务出现故障或者高延迟，会很可能造成级联故障，如果客户端还在不停重试，将会加剧问题的严重性，最终导致整个系统彻底崩溃。</p>\n<p>断路器的设计与实现有助于防止多服务之间的级联故障，允许我们构建具有容错性和高弹性的微服务架构系统，当某些服务不可用时，提供服务熔断和服务降级功能，保证系统的其它部分仍能正常运行。</p>\n<p>断路器的三个状态和含义如下：</p>\n<ul><li>关闭；此时所有调用都能访问到当前的服务。当调用次数或者故障数超过设定的阈值后，断路器变为打开状态；</li><li>打开；不再调用当前服务，而是返回预设的错误信息；</li><li>半开；打开一定时间后，断路器切换为半开状态，放一个请求调用当前服务，测试服务是否正常。如果正常，则变为关闭状态；如果还是异常，再次变为打开状态。</li></ul>\n<p>主流常见的断路器有Hystrix、Sentinel等；</p>\n<h1><a id=\"DevOps_160\"></a>十一、DevOps（云原生架构系列）</h1>\n<p><em><strong>DevOps：</strong></em><br/> <img alt=\"DevOps\" src=\"https://img-blog.csdnimg.cn/b93764dbde4a4bcc88908b898868e84d.webp\"/></p>\n<p><em><strong>蓝绿发布：</strong></em><br/> <img alt=\"蓝绿发布\" src=\"https://img-blog.csdnimg.cn/81b322543bcd441f8d5d70dd3ebb1539.webp#pic_center\"/></p>\n<h1><a id=\"_167\"></a>十二、容器云</h1>\n<p>如果使用了容器技术，那么容器编排、发布、治理就成了避不开的话题。主流的技术如下：</p>\n<ul><li>Docker、Docker Compose、Docker Swam 这里推荐我之前写过的文章<a href=\"https://editor.csdn.net/md/?articleId=124897057\">《云原生之 Docker篇 Docker Compose介绍及使用入门》</a>、<a href=\"https://blog.csdn.net/weixin_42469135/article/details/124870708\">《云原生之 Docker Swarm服务编排介绍及使用入门》</a></li><li>K8s 后续会逐渐推出</li><li>Mesos 后续会逐渐推出</li></ul>\n<blockquote>\n<p>🍍每日推荐</p>\n<p>🍖文章开始之前我想首先介绍一下<a href=\"https://www.nowcoder.com/exam/oj?page=1&amp;tab=SQL%E7%AF%87&amp;topicId=199&amp;fromPut=pc_csdncpt_ddssyx_sql\">牛客</a>，以便没有使用过的小伙伴能够快速入手，<a href=\"https://www.nowcoder.com/exam/oj?page=1&amp;tab=SQL%E7%AF%87&amp;topicId=199&amp;fromPut=pc_csdncpt_ddssyx_sql\">牛客网</a>是国内最大的算法、面试、招聘网站，涵盖了多种大厂面试真题以及题解，里面大佬云集，各种题目的解决方案层出不穷，绝对能让你大开眼界，<font color=\"red\">而且<a href=\"https://www.nowcoder.com/exam/oj?page=1&amp;tab=SQL%E7%AF%87&amp;topicId=199&amp;fromPut=pc_csdncpt_ddssyx_sql\">牛客</a>是你在人生中不同的阶段都能对你有所帮助的编程软件（完全免费）</font>，如果感兴趣可以访问注册一下</p>\n<p>访问链接：<a href=\"https://www.nowcoder.com/exam/oj?page=1&amp;tab=SQL%E7%AF%87&amp;topicId=199&amp;fromPut=pc_csdncpt_ddssyx_sql\">牛客-国内最大的刷题网站</a></p>\n</blockquote>\n<p>各大容器云厂商基本都是使用基于k8s的容器治理方案，k8s也已经成为该领域事实上的标准了。</p>\n<p>如上是自己在<strong>极客时间App</strong>上学习《微服务架构核心20讲》的笔记，该课程一天就能学完，没有实现微服务的细节，是高屋建瓴地讲解微服务架构的蓝图，带你鸟瞰整个微服务架构，推荐学习，<strong>这里引用老师说过的话</strong>。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-07-20 16:17:00", "summary": "目录导航一、微服务定义定义一定义二二、微服务利弊优点缺点三、微服务的适用性康威法则生产力架构演进四、服务分层五、服务注册发现六、微服务网关七、微服务配置中心八、微服务通信九、服务监控监控体系监控架构全"}