{"blogid": "118585030", "writerAge": "码龄3年", "writerBlogNum": "319", "writerCollect": "37815", "writerComment": "30434", "writerFan": "55974", "writerGrade": "9级", "writerIntegral": "94987", "writerName": "孤寒者", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_118585030.jpg", "writerRankTotal": "18", "writerRankWeekly": "96", "writerThumb": "20039", "writerVisitNum": "4649930", "blog_read_count": "125979", "blog_time": "已于 2022-08-02 15:13:20 修改", "blog_title": "一篇万字博文带你入坑爬虫这条不归路 【万字图文】", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>👻最近，很多粉丝私信我问——<font color=\"red\" size=\"5\">爬虫到底是什么？学习爬虫到底该从何下手？</font>👻</p>\n<p>😬其实，我想说的也是曾经的我身为小白的时候某些大牛对我说过的——很多时候我们都有一颗想要学习新知识的心，却总是畏惧于对想要学习内容的无知，这也是多数人失败甚至后悔终身的：因为他们从来没有开始过！😬</p>\n<p>😜借一位几年前带我入坑的前辈的话——<font color=\"Blue\" size=\"4\">坑就在你面前，别总是犹豫徘徊，大胆一点：向前一步，入了这个坑，莽着头就是往前冲，别多想，别回头，终有一天——&gt;你也会成为别人的前辈！</font>😜</p>\n<ul><li>这篇文章曝光很大，很多小伙伴因为这篇文章成功入坑爬虫，但是！我发现一个很严重的问题，有些人基础都没咋学，就来直接搞爬虫，很多问我很基础很基础的问题！所以，我希望大家python基础一定要好好过一遍，费不了多少时间，我的python基础专栏也是下功夫最大，结合了我四五年项目经验而成，希望大家认真学习，有问题可以群里交流或者私信我。<br/> <a href=\"https://blog.csdn.net/qq_44907926/category_11476279\">【Python全栈基础教程】</a><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9b417217b9d4436cb51c2795ed61328f.png\"/></li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210715195052480.jpg\"/></p>\n<hr/>\n<p>       👇<br/> 👉<a href=\"#jump99\"><font color=\"ff1f00\" size=\"5\"><b><u>🚔直接跳到末尾🚔</u></b></font></a>👈 ——&gt;领取专属粉丝福利💖<br/>        ☝️</p>\n<hr/>\n<center>\n<font color=\"red\">今日份鸡汤已成功送达，目的地：your heart！💗💗💗</font>\n</center>\n<p> </p>\n<p>回归正题~~~<br/> 博主写本文的初衷也是想借助本文达到的一个效果：</p>\n<table><tbody><tr><td bgcolor=\"yellow\">带领那些想要学习爬虫却一直迟迟不敢下手，或者说那些对爬虫有兴趣想要好好学一学这门技术的童鞋们——正式入坑！！！</td></tr></tbody></table>\n<p></p>\n<hr/>\n<p>💩🐷首先，我来回答第一个问题——什么是爬虫？🐷💩</p>\n<p>👉其实你百度也可以百度到一大篇官方化的定义，但是那些对新人不友好，爬虫！总结一句话：就是 <strong>模拟浏览器发送请求，获取响应！</strong> 👈</p>\n<p>🎈至于第二个问题：学习爬虫到底该从何下手？等你们认认真真看完本篇博文之后再考虑这个问题你们还需不需要我来解答。🎈</p>\n<p></p>\n<div class=\"toc\">\n<h3>开往爬虫 之 爬虫必备知识合集！</h3>\n<ul><li><a href=\"#1_48\">1.爬虫的概念</a></li><li><ul><li><a href=\"#1_50\">（1）爬虫的概念（专业化定义）：</a></li><li><a href=\"#2_59\">（2）爬虫的应用：</a></li><li><a href=\"#3_90\">（3）爬虫的分类：</a></li><li><a href=\"#4_121\">（4）爬虫的一般开发流程：</a></li><li><a href=\"#5_136\">（5）爬虫开发的重难点：</a></li></ul>\n</li><li><a href=\"#2HTTPHTTPS_155\">2.HTTP和HTTPS</a></li><li><ul><li><a href=\"#1HTTP_176\">（1）HTTP协议</a></li><li><a href=\"#2HTTP_199\">（2）HTTP请求流程：</a></li><li><ul><li><ul><li><a href=\"#http_204\">浏览器发送http请求的过程：</a></li></ul>\n</li></ul>\n</li><li><a href=\"#3URL_231\">（3）URL（浏览器搜索框里的内容！）</a></li><li><a href=\"#4HTTP_241\">（4）HTTP请求格式</a></li><li><ul><li><a href=\"#1_249\">1.请求方法：</a></li><li><ul><li><ul><li><a href=\"#1_250\">（1）分类</a></li><li><a href=\"#2_255\">（2）分类讲解</a></li><li><a href=\"#3_269\">（3）所有请求方法：</a></li></ul>\n</li></ul>\n</li><li><a href=\"#2_271\">2.请求头：</a></li><li><a href=\"#3HTTP_280\">3.HTTP请求正文（请求数据）</a></li></ul>\n</li><li><a href=\"#5HTTP_304\">（5）HTTP响应格式</a></li><li><ul><li><a href=\"#1HTTP404_309\">1.HTTP响应状态码：（这里面就有熟悉的404哦！）</a></li><li><a href=\"#2HTTP_316\">2.HTTP响应报头：</a></li><li><a href=\"#3HTTP_318\">3.HTTP响应正文：</a></li></ul>\n</li><li><a href=\"#6_323\">（6）总结：</a></li><li><ul><li><a href=\"#1HTTP_324\">1.HTTP流程总结：</a></li><li><a href=\"#2HTTP_327\">2.HTTP协议的特点：</a></li><li><a href=\"#3HTTPS_350\">3.HTTPS协议：</a></li></ul>\n</li></ul>\n</li><li><a href=\"#3http___364\">3.解决http无状态 之 会话技术</a></li><li><ul><li><a href=\"#1Cookie_368\">（1）Cookie</a></li><li><a href=\"#2Session_386\">（2）Session</a></li><li><a href=\"#3cookiesession_401\">（3）cookie和session的区别：</a></li><li><a href=\"#4_408\">（4）来个图理解理解那么枯燥的文字：</a></li><li><a href=\"#5Cookies_420\">（5）实操一波看看Cookies的属性结构：</a></li></ul>\n</li><li><a href=\"#4socket_442\">4.爬虫实战：利用socket下载一张图片</a></li><li><ul><li><a href=\"#1socket_443\">（1）socket学习</a></li><li><ul><li><a href=\"#socket_457\">①使用socket简单建造一个服务端：</a></li><li><a href=\"#socket_501\">②使用socket简单建造一个客户端：（爬取百度首页整个界面）</a></li></ul>\n</li><li><a href=\"#2socketMM_532\">（2）实战：使用socket来爬取一张漂亮MM的图片：</a></li><li><ul><li><ul><li><ul><li><a href=\"#1_534\">1.首先，分析网页：</a></li><li><a href=\"#2_542\">2.上代码：</a></li><li><a href=\"#3_596\">3.实现效果：</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#5In_the_end_604\">5.In the end!</a></li></ul>\n</div>\n<p></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210715195103556.jpg\"/></p>\n<h1><a id=\"1_48\"></a>1.爬虫的概念</h1>\n<h2><a id=\"1_50\"></a>（1）爬虫的概念（专业化定义）：</h2>\n<ul><li> <p>上来就直接给书面化定义肯定有点唐突，所以先来形象的解释下爬虫到底是个啥？<br/>  如果我们把互联网比作一张大的蜘蛛网，那一台计算机上的数据便是蜘蛛网上的一个猎物，而爬虫程序就是一只小蜘蛛，沿着蜘蛛网抓取自己想要的猎物/数据。这样一讲，是不是就很通俗易懂、记忆深刻了~</p> </li><li> <p>下面就给出书面化的定义，多揣摩揣摩哦：<br/>  网络爬虫也叫网络蜘蛛，它特指一类<strong>自动批量</strong>下载网络资源的程序，这是一个比较口语化的定义。<br/>  更加专业和全面对的定义是：<strong>网络爬虫是<em>伪装</em>成客户端与服务端进行数据交互的程序。</strong></p> </li></ul>\n<h2><a id=\"2_59\"></a>（2）爬虫的应用：</h2>\n<ol><li> <p>数据采集<br/>   大数据时代来临，数据就是核心，数据就是生产力，越来越多的企业开始注重收集用户数据，而爬虫技术是收集数据的一种重要手段。</p> <pre><code class=\"prism language-powershell\">比如：抓取微博评论（机器学习舆情监控）\n     抓取招聘网站的招聘信息（数据分析，挖掘）\n     百度新闻网站\n</code></pre> </li><li> <p>搜索引擎<br/>  百度，谷歌等搜索引擎都是基于爬虫技术。（PS：爬虫界大佬！）</p> <pre><code class=\"prism language-powershell\">知识补给站：\n\t知名的某头条就是靠爬虫发家致富的哦！！！\n</code></pre> </li><li> <p>模拟操作<br/>  爬虫也被广泛用于模拟用户操作，测试机器人，灌水机器人等。</p> </li><li> <p>软件测试<br/>  爬虫之自动化测试<br/>  虫师</p> </li><li> <p>网络安全<br/>  短信轰炸<br/>  web漏洞扫描</p> </li></ol>\n<h2><a id=\"3_90\"></a>（3）爬虫的分类：</h2>\n<p>🎈 <em>根据不同的标准，爬虫分类也有所不同，常见的三大分类标准及其分类如下：</em> 🎈</p>\n<p>第一个：根据<strong>爬取的数量</strong>不同进行分类：<br/>  ①<font color=\"red\">通用爬虫</font>：通常指搜索引擎的爬虫。<br/>    <font color=\"Blue\">通用爬虫是搜索引擎抓取系统 （baidu,goole,yahoo等）的重要组成部分 。主要目的是将互联网的网页下载到本地 ，形成一个互联网内容的镜像备份。</font>（但是有一个很大的问题就是它们具有很大的局限性：大部分内容没有用——不同的搜索目的，返回的内容相同！）</p>\n<p> ②<font color=\"red\">聚焦爬虫</font>：针对特定网站的爬虫。<br/>    <font color=\"Blue\">是面向特定主题需求的一种网络爬虫程序 ，它与通用搜索引擎爬虫的区别在于 ：<br/> 聚焦爬虫在实施页面抓取时会对内容进行处理筛选，尽量保证只抓取与需求相关的网页信息！</font></p>\n<hr/>\n<p>第二个：根据<strong>是否获取数据为目的</strong>进行分类：<br/>  ①<font color=\"red\">功能性爬虫</font>:<br/>   比如，投票，点赞…<br/>  ②<font color=\"red\">数据增量爬虫</font>：<br/>   比如招聘信息…</p>\n<hr/>\n<p>第三个：根据<strong>url地址和对应的页面内容是否改变</strong>，数据增量爬虫又可分为：<br/>  ①基于url地址变化，内容也随之变化的数据增量爬虫；<br/>  ②url地址不变，内容变化的数据增量爬虫。</p>\n<h2><a id=\"4_121\"></a>（4）爬虫的一般开发流程：</h2>\n<p>①最简单的单一页面数据的爬取：<br/>   <font color=\"red\">url——&gt;发送请求，获取响应——&gt;提取数据——&gt;保存数据</font><br/> ②多页面数据的爬取：<br/>   <font color=\"red\">发送请求，获取响应——&gt;提取url地址，继续请求</font></p>\n<p><img alt=\"聚焦爬虫开发流程\" src=\"..\\..\\static\\image\\20210709001526896.png\"/></p>\n<p><img alt=\"搜索引擎流程\" src=\"..\\..\\static\\image\\20210709001548902.png\"/></p>\n<p><img alt=\"一般爬虫开发流程\" src=\"..\\..\\static\\image\\20210709001610901.png\"/></p>\n<h2><a id=\"5_136\"></a>（5）爬虫开发的重难点：</h2>\n<p><strong>爬虫难点主要分为两个方向：</strong></p>\n<ol><li><font color=\"#008000\">数据的获取</font>（PS：自己人何苦为难自己人嘞！）<br/>   网络公共资源都是为用户准备的，为了避免被爬虫采集，服务端会设置非常多的图灵测试，阻止爬虫的恶意爬取，也即是<a href=\"https://blog.csdn.net/qq_44907926/article/details/118487385\">反爬措施</a>。爬虫开发工程师在开发爬虫时，需要解决这些反爬措施。我们在开发爬虫的过程中，有很大一部分的工作就是处理这些反爬措施。</li><li><font color=\"#008000\"> 采集的速度 </font><br/>    大数据时代，需要巨大的数据量，动辄千万条的级别，甚至上亿条。如果采集速度跟不上，耗时过长，那么就达不到商业要求。一般我们会采取并发以及分布式来解决速度上的问题。这也是爬虫开发过程中的另外一个重心。</li></ol>\n<table><tbody><tr><td bgcolor=\"gree\">知识点补给站： robots协议：网站通过robots协议，告诉我们搜索引擎哪些页面可以抓取，哪些页面不能抓取， 但它仅仅是道德层面上的约束。</td></tr></tbody></table>\n<ul><li>曾经有人问过一些爬虫界大佬一个问题：爬虫能抓怎样的数据？</li><li>“可见即可爬”，大佬轻蔑一笑说道。</li><li>（大佬就是大佬，牛皮！）</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/20210709011440677.gif\"/></p>\n<h1><a id=\"2HTTPHTTPS_155\"></a>2.HTTP和HTTPS</h1>\n<pre><code class=\"prism language-powershell\">知识点补给站：\n大多数商业应用采用的架构：\n\t1<span class=\"token punctuation\">.</span>c/s 即 client（客户端） server（服务端）  \n\t\n\t2<span class=\"token punctuation\">.</span>b/s 即 browser（浏览器） server（服务端）  \n\t\n\t3<span class=\"token punctuation\">.</span>m/s 即 moblie（移动端） server（服务端）  \n\n以上统称为客户端与服务端！！！\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20200408162558852.png\"/><br/> <em>网络爬虫是伪装成客户端与服务端进行数据交互的程序。那么，客户端和服务端该怎样进行数据交互呢?就像我们中国人用中文交流，说的中国的语法，我们可以正常沟通。客户端与服务端如果不统一一下，那不就乱套了，所以在网络传输方面产生了众多协议，HTTP就是其中一种。</em></p>\n<h2><a id=\"1HTTP_176\"></a>（1）HTTP协议</h2>\n<p>  目前互连网上90%的网络传输都是基于http协议（补充：http协议是一个应用层协议）。（注意：<font color=\"red\">爬取想要的数据前，一定要明确其使用的是什么协议！</font>虽然90%都是基于http协议，但是仍有10%采用的是其他的协议，比如：<font face=\"黑体\" size=\"5\">弹幕可能采取的是websocket协议！</font>这样的话，我们采取传统的爬虫就无法爬取到了。）</p>\n<table><tbody><tr><td bgcolor=\"yellow\">HTTP是Hyper Text Transfer Protocol（超文本传输协议）的缩写，是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。</td></tr></tbody></table>\n<p>  HTTP是基于TCP/IP通信协议来传递数据的（HTML 文件, 图片文件, 查询结果等）。<br/> <em>注意：TCP/IP有个面向连接的特性！（意义：保证数据的完整性）</em><br/>   让咱们生动的了解一下TCP/IP通信协议中的三次握手四次挥手：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20200408164041435.png\"/></p>\n<ul><li>三次握手建立连接：<br/> 🔑客户端说：嘿，服务端girl！我想和你建立连接。（打招呼）<br/> 🔒服务端说：好的呢，我听你的。<br/> 🔑客户端说：真好，那咱们开始数据交互吧（羞羞）。<br/> .<br/> .(干羞羞的事ing，进行数据交互）<br/> .</li><li>四次挥手断开连接：<br/> 🔑客户端说：我已经和你交互完数据了，咱断开连接吧！（打招呼）<br/> 🔒服务端说：你确定断开连接嘛？（不舍）<br/> 🔒服务端又说：那你断开连接吧！<br/> 🔑客户端说：好的，那我断开连接了！</li></ul>\n<h2><a id=\"2HTTP_199\"></a>（2）HTTP请求流程：</h2>\n<p>  <font color=\"red\">我们日常用浏览器搜索东西，输入的是URL，浏览器会将其自动转换为HTTP协议。</font></p>\n<p>  一次http请求的基本流程是，有客户端向服务端发起一次<strong>请求(request)</strong>, 而服务器在接收到以后返回给客户端一个<strong>响应（response）</strong>。<strong>所以一次完整的http请求包含请求和响应两部分。</strong></p>\n<h4><a id=\"http_204\"></a>浏览器发送http请求的过程：</h4>\n<pre><code class=\"prism language-powershell\">1<span class=\"token punctuation\">.</span>域名解析 <span class=\"token operator\">--</span>&gt; \n\n2<span class=\"token punctuation\">.</span>发起TCP的3次握手 <span class=\"token operator\">--</span>&gt; \n\n3<span class=\"token punctuation\">.</span>建立TCP连接后发起http请求 <span class=\"token operator\">--</span>&gt; \n\n4<span class=\"token punctuation\">.</span>服务器响应http请求，浏览器得到html代码 <span class=\"token operator\">--</span>&gt; \n\n5<span class=\"token punctuation\">.</span>浏览器解析html代码，并请求html代码中的资源（如js、css、图片等） <span class=\"token operator\">--</span>&gt; \n\n6<span class=\"token punctuation\">.</span>浏览器对页面进行渲染呈现给用户<span class=\"token punctuation\">.</span>\n\n\n知识点补给站：\n\t在网页的右键检查里Network-&gt;Name-&gt;Request Headers  view parsed下\n\t的Connection:keep-alive保持常连接，就不用频繁的三次握手和四次挥手！\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20200408165114769.png\"/></p>\n<blockquote>\n<p>浏览器获取的内容（elements的内容）包含：url地址对应的响应+js+css+pictures<br/> 爬虫会获取：url地址对应的响应<br/> 爬虫获取的内容和elements的内容不一样，进行数据提取的时候，需要根据url地址对应的响应为准！</p>\n</blockquote>\n<h2><a id=\"3URL_231\"></a>（3）URL（浏览器搜索框里的内容！）</h2>\n<p> <strong>发送http请求时，通过url对网络资源进行定位。</strong></p>\n<p> <font color=\"blue\">URL（Uniform Resource Locator），中文叫统一资源定位符。是用来标识某一处资源的地址。也即是我们常说的网址。以下面这个URL为例，介绍下普通URL的各部分组成：<br/> 协议+域名(端口默认80)+路径+参数</font></p>\n<p><strong>注意：<br/>  1.http协议的端口号默认为80可以不写；https协议的端口号默认为443可以不写（注意：域名可以确定是哪一台电脑；而端口号是为了确定是那台电脑的哪一个应用！）<br/>  2.域名通常是IP地址的映射，端口号通常是默认的就不写。我们平常搜索时，比如进入百度：https://www.baidu.com/，这里的https协议的默认端口号为443，就没写哦！</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20200408165827973.png\"/></p>\n<h2><a id=\"4HTTP_241\"></a>（4）HTTP请求格式</h2>\n<p>  <font color=\"red\">客户端（也就是我们用户）发送一个HTTP请求到服务器的请求消息包括以下部分：请求行，请求头，空行和请求数据。</font></p>\n<p>  <strong>一般格式：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20200408173240505.png\"/><br/> <em>注意：上图中请求行的URL是指（2）URL中的路径！</em><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20200408173751777.png\"/></p>\n<h3><a id=\"1_249\"></a>1.请求方法：</h3>\n<h5><a id=\"1_250\"></a>（1）分类</h5>\n<p> 根据http标准，http请求可以使用多种请求方法。</p>\n<p> 五种请求方法：OPTIONS，<strong>PUT，DELETE</strong>，TRACE和CONNECT方法。</p>\n<h5><a id=\"2_255\"></a>（2）分类讲解</h5>\n<p><font color=\"red\">常用方法 是 GET和POST。</font></p>\n<ul><li> <p><code>GET</code><br/> 1.主要是负责从服务器获取数据<br/> 2.URL中添加请求参数,显示在地址栏<br/> 3.请求字符串限制 1024个字节<br/> 比<code>POST</code>更加高效和方便。</p> </li><li> <p><code>POST</code><br/> 1.主要负责向服务器提交数据<br/> 2.没有大小限制（但一般是2M）<br/> 比’GET’传递数据量大,安全性高。</p> </li></ul>\n<h5><a id=\"3_269\"></a>（3）所有请求方法：</h5>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20200408174232772.png\"/></p>\n<h3><a id=\"2_271\"></a>2.请求头：</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210709005148766.png\"/><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210709005216556.png\"/><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210709005230926.png\"/></p>\n<h3><a id=\"3HTTP_280\"></a>3.HTTP请求正文（请求数据）</h3>\n<p> 请求正文通常是使用POST请求中表单数据，而对于GET请求，请求体则为空。</p>\n<blockquote>\n<p>需要注意的是：<br/> 在爬虫中，如果要构造POST请求，需要使用正确的Content-Type，并了解各种请求库的各个参数设置时使用的是哪种Content-Type，不然可能会导致POST提交后无法正常响应。</p>\n</blockquote>\n<center>\n Content-Type和POST提交数据方式的关系\n</center>\n<table><thead><tr><th>Content-Type</th><th>提交数据的方式</th></tr></thead><tbody><tr><td>application/x-www-form-urlencoded</td><td>表单数据</td></tr><tr><td>multipart/form-data</td><td>表单文件上传</td></tr><tr><td>application/json</td><td>序列化JSON数据</td></tr><tr><td>text/xml</td><td>XML数据</td></tr></tbody></table>\n<p> 请求正文跟上面的消息报头由一个空行隔开。</p>\n<table><tbody><tr><td bgcolor=\"yellow\">来个承上启下！既然现在请求格式已经OK了，也就是说我们可以让服务端听懂我们说的话了；下面要做的就是让我们能听懂服务端给我们说的话了。</td></tr></tbody></table>\n<h2><a id=\"5HTTP_304\"></a>（5）HTTP响应格式</h2>\n<p> <font color=\"red\">HTTP响应也由四个部分组成，分别是：状态行（响应行）、消息报头、空行和响应正文。<br/> </font><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20200408180236767.png\"/> <strong>一般格式：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20200408180345475.png\"/></p>\n<h3><a id=\"1HTTP404_309\"></a>1.HTTP响应状态码：（这里面就有熟悉的404哦！）</h3>\n<p> 当客户端向服务端发起一次请求后，服务端在返回的响应头中会包含一个HTTP状态码（我们在进行爬虫实战的时候可以通过判断此状态码得知目前的爬虫代码是否OK！）。</p>\n<p> HTTP的状态码是由<strong>三位数字</strong>来表示的，由第一位数字来表示状态码的类型，一般来说有五种类型：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20200408181026575.png\"/>注意：重定向就相当于一个中介转接。（<a href=\"https://blog.csdn.net/qq_44907926/article/details/119205373\">所有HTTP响应状态码详解点我查看！</a>）</p>\n<h3><a id=\"2HTTP_316\"></a>2.HTTP响应报头：</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210709005616979.png\"/></p>\n<h3><a id=\"3HTTP_318\"></a>3.HTTP响应正文：</h3>\n<blockquote>\n<p>这肯定是最重要的啦！响应的正文数据都在响应体中。我们日后做爬虫，要解析的内容就是响应体哦~</p>\n</blockquote>\n<hr/>\n<h2><a id=\"6_323\"></a>（6）总结：</h2>\n<h3><a id=\"1HTTP_324\"></a>1.HTTP流程总结：</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20200408181606252.png\"/></p>\n<h3><a id=\"2HTTP_327\"></a>2.HTTP协议的特点：</h3>\n<p><strong>HTTP三点注意事项：</strong></p>\n<ul><li> <p><font color=\"red\">HTTP是无连接的</font>：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</p> </li><li> <p><font color=\"red\">HTTP是媒体独立的</font>：这意味着，只要客户端和服务器知道如何处理的数据内容，任何类型的数据都可以通过HTTP发送。</p> </li><li> <p><font color=\"red\">HTTP是无状态的</font>：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</p> </li></ul>\n<pre><code class=\"prism language-powershell\">无状态HTTP官方详解：\n\tHTTP的无状态是指HTTP协议对事务处理是没有记忆能力的，也就是说服务器不知道客户端是什么状态。当我\n们向服务器发送请求后，服务器解析此请求，然后返回对应的响应，服务器负责完成这个过程，而且这个过程是完全\n独立的，服务器不会记录前后状态的变化，也就是缺少状态记录。这意味着如果后续需要处理前面的信息，则必须重\n传，这导致需要额外传递一些前面的重复请求，才能获取后续响应，然而这种效果显然不是我们想要的。为了保持前\n后状态，我们肯定不能将前面的请求全部重传一次，这太浪费资源了，对于这种需要用户登录的页面来说，更是棘手。\n\t这时两个用于保持HTTP连接状态的技术就出现了，它们分别是会话和Cookies。下面会介绍到哦！\n</code></pre>\n<table><tbody><tr><td bgcolor=\"yellow\">注意： 无状态的意思是，比如你再一个网页中输入了账号密码登录了QQ空间，但是由于HTTP是无状态的，所以你再在QQ空间里登录QQ邮箱需要再输入一次账号和密码，登录的状态是没有被记忆的。但是可以利用会话技术解决。</td></tr></tbody></table>\n<h3><a id=\"3HTTPS_350\"></a>3.HTTPS协议：</h3>\n<p> <strong>加强版的HTTP，公鸡中的战斗机一枚！！！</strong><br/>  <font color=\"red\">HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer 或 Hypertext Transfer Protocol Secure，超文本传输安全协议），是以安全为目标的HTTP通道，简单讲是HTTP的安全版！</font></p>\n<p> http协议是基于tcp/ip协议的，而https是在http协议的基础之上，再加了一层<strong>SSL/TLS协议</strong>，数据在传输过程中是加密的。</p>\n<p> 注意：HTTPS协议的默认端口是443。</p>\n<pre><code class=\"prism language-powershell\">http因为是明文传输，而https是密文传输，所以HTTPS比http更安全，\n但是性能低，因为解密需要消耗时间！\n</code></pre>\n<h1><a id=\"3http___364\"></a>3.解决http无状态 之 会话技术</h1>\n<p> <strong>http是无状态的，那服务端怎么区分同一个用户的连续请求呢，这就用到了会话技术：cookie和session。</strong></p>\n<p> 会话在服务端，也就是网站的服务器，用来保存用户的会话信息；Cookies在客户端，也可以理解为浏览器端。有了Cookies，浏览器在下次访问网页时就会自动附带上它发送给服务器，服务器通过识别Cookies并鉴定出是哪个用户，然后再判断用户是否是登录状态，然后返回对应的响应。</p>\n<h2><a id=\"1Cookie_368\"></a>（1）Cookie</h2>\n<p><strong>Cookie有时也用其复数形式 Cookies。</strong><br/>   <font color=\"red\">指某些网站为了辨别用户身份、进行 session 跟踪而储存在<strong>用户本地终端上</strong>的数据（通常经过加密）。最新的规范是 RFC6265 。</font></p>\n<p><strong>Cookie可以理解为一个凭证</strong></p>\n<ul><li>1.实际是由服务器发给客户端的特殊信息，</li><li>2.这些信息以文本文件的方式存放在客户端，</li><li>3.客户端每次向服务器发送请求的时候都会带上这些特殊的信息。</li><li>4.服务器在接收到Cookie以后，会验证Cookie的信息，以此来辨别用户的身份。</li></ul>\n<p><strong>爬虫中为什么要使用cookie?</strong></p>\n<ol><li>带上cookie的好处：<br/> ①能够访问登录页面。<br/> ②正常的浏览器在请求服务器的时候肯定会带上cookie（第一次请求除外），所以对方服务器有可能会通过是否携带cookie来判断我们是否是一个爬虫，对应的能够起到一定的反爬作用。</li><li>带上cookie的坏处：<br/> ①一套cookie往往对应的是一个用户的信息，请求太频繁有更大的可能性被对方识别为爬虫。<br/> ②一般使用多账号解决。</li></ol>\n<h2><a id=\"2Session_386\"></a>（2）Session</h2>\n<p> <strong>Session，中文经常翻译为会话，</strong> 其本来的含义是指有始有终的一系列动作/消息，比如打电话时从拿起电话拨号到挂断电话这中间的一系列过程可以称之为一个session。这个词在各个领域都有在使用。</p>\n<p> 而我们web&amp;爬虫领域，一般使用的是其本义，<strong>一个浏览器窗口从打开到关闭这个期间。</strong></p>\n<p>  <strong>Session的目的则是，在一个客户从打开浏览器到关闭浏览器这个期间内，发起的所有请求都可以被识别为同一个用户。</strong> <font color=\"red\">而实现的方式则是，在一个客户打开浏览器开始访问网站的时候，会生成一个cookie，SessionID（注意：SessionID包含于cookie中），这个ID每次的访问都会带上，而服务器会识别这个SessionID并且将与这个SessionID有关的数据保存在服务器上。由此来实现客户端的状态识别。</font><strong>因此session是基于cookie的！</strong></p>\n<p> Session与Cookie相反，<strong>Session是存储在服务器上的数据</strong>，只由客户端传上来的SessionId来进行判定，<strong>所以相对于Cookie，Session的安全性更高。</strong></p>\n<p> <font color=\"#008000\">一般SessionID会在浏览器被关闭时丢弃，或者服务器会验证Session的活跃程度，例如30分钟某一个SessionID都没有活跃，那么也会被识别为失效。</font></p>\n<p> session的作用——用来实现客户端和服务的的会话保持！<br/>    会话（状态）保持：①保存cookie；② 实现和服务端的长连接。</p>\n<h2><a id=\"3cookiesession_401\"></a>（3）cookie和session的区别：</h2>\n<ol><li>cookie数据存放在客户的浏览器上，session数据放在服务器上；</li><li>cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗；</li><li>session会在一定时间内保存在服务器上，当访问增多，会比较占用服务器的性能；</li><li>单个cookie保存的数据不能超过4k，很多浏览器都限制一个站点最多保存20个cookie。</li></ol>\n<h2><a id=\"4_408\"></a>（4）来个图理解理解那么枯燥的文字：</h2>\n<p><strong>用户首次登录时：</strong><br/>  会在服务器生成一个session表，里面的key是hash生成的数据，value是一系列信息。<br/> 同时在客户端本地生成一个文本文件cookie，这里面包含sessionid，而这个sessionid的值为服务器中的hash形式的key。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f9b02cb4b2414ba098be89a712bfde95.png\"/></p>\n<p><strong>用户再次登录时：</strong><br/>  会自动携带sessionid及其值，这个值与服务器里的hash形式的key比较，判断用户是否曾登录成功，如果成功，则获取用户登录的数据，然后返回给用户请求的界面。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20121bb7078343a4a82c727fa01c7641.png\"/></p>\n<h2><a id=\"5Cookies_420\"></a>（5）实操一波看看Cookies的属性结构：</h2>\n<p><strong>（以QQ空间为例！）</strong></p>\n<p>  <font color=\"red\">F12打开浏览器开发者工具，然后按如图步骤即为Cookies：（可以看到有很多条目，其中每个条目可以称为Cookie。）</font><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20466c1663414aacb0a5c75c76b71d1d.png\"/></p>\n<table><thead><tr><th>属性名</th><th>属性值讲解</th></tr></thead><tbody><tr><td>Name</td><td>该Cookie的名称。一旦创建，无法修改！</td></tr><tr><td>Value</td><td>该Cookie的值。如果值为Unicode字符，需要为字符编码；如果值为二进制数据，则需要使用BASE64编码。</td></tr><tr><td>Domain</td><td>可以访问该Cookie的域名。</td></tr><tr><td>Max Age</td><td>该Cookie失效的时间，单位为S，通常和Expires一起使用，通过它可以计算出其有效时间。Max Age如果为正数，则该Cookie在Max Age秒后失效；如果为负数，则关闭浏览器时失效，浏览器也不会以任何形式保存该Cookie。</td></tr><tr><td>Path</td><td>该Cookie的使用路径。如果设置为/path/,则只有路径为/path/的页面可以访问该Cookie；如果设置为/，则本域名下的所有页面都可以访问该Cookie。</td></tr><tr><td>Size</td><td>此Cookie的大小。</td></tr><tr><td>HTTP字段</td><td>Cookie的httponly属性。若此属性为true，则只有在HTTP头中会带有此Cookie 的信息，而不能通过document.cookie来访问此Cookie。</td></tr><tr><td>Secure</td><td>该Cookie是否仅被使用安全协议传输。安全协议有HTTPS和SSL等，在网络上传输数据之前先将数据加密。默认为false。</td></tr></tbody></table>\n<h1><a id=\"4socket_442\"></a>4.爬虫实战：利用socket下载一张图片</h1>\n<h2><a id=\"1socket_443\"></a>（1）socket学习</h2>\n<p><strong>socket国外翻译为插座；同时，由于其具备了“套接”和“字”的概念，所以又称为套接字。</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20200409180244497.png\"/></p>\n<pre><code class=\"prism language-powershell\">知识补给站：（混个眼熟就行了！）\nSocket是一种进程间通信机制，提供一种供应用程序\n访问通信协议的操作系统调用，使得网络读写数据\n和读写本地文件一样容易<span class=\"token punctuation\">;</span>Socket是一序列的“指令” <span class=\"token punctuation\">;</span>\n已经具备了“套接”（建立网络通讯或进程间通讯）和“字”（可交互的有序指令串）的概念。\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2020040819035763.png\"/></p>\n<h3><a id=\"socket_457\"></a>①使用socket简单建造一个服务端：</h3>\n<ul><li>（<a href=\"https://blog.csdn.net/qq_44907926/article/details/113184868\">点我观看另一篇进阶版搭建的TCP服务器端文章</a>）</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> socket\n<span class=\"token comment\"># 服务器对象</span>\nserver <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''\n等同于：server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsocket.AF_INET：使用IPV4；\nsocket.SOCK_STREAM：创建一个socket套接字。\n'''</span>\n\n<span class=\"token comment\"># 1.绑定服务器</span>\nserver<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0.0.0.0\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">8800</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">#0.0.0.0是允许所有人来访问；8800是端口号</span>\n\n<span class=\"token comment\"># 2.监听</span>\nserver<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 3.等待连接</span>\n    <span class=\"token comment\"># accept是一个阻塞的方法（你不来我就不动！），等待连接，每建立一个连接就会创建一个单独的通道。</span>\n    <span class=\"token comment\"># conn:通道参数；addr：通道地址。</span>\n    conn<span class=\"token punctuation\">,</span>addr<span class=\"token operator\">=</span>server<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 4.接收数据</span>\n    data<span class=\"token operator\">=</span>conn<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n    response<span class=\"token operator\">=</span><span class=\"token string\">\"HTTP/1.1 200 OK\\r\\nContent-Type: text/html;charset=utf-8;\\r\\n\\r\\n&lt;h1 style='color:black'&gt;我很帅！&lt;h1&gt;\"</span>\n\n    <span class=\"token comment\"># 5.发送数据</span>\n    conn<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已经响应\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 6.关闭</span>\nserver<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>在本地浏览器中输入：127.0.0.1:8800即可访问到此服务端：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20200501120209502.png\"/></p>\n<h3><a id=\"socket_501\"></a>②使用socket简单建造一个客户端：（爬取百度首页整个界面）</h3>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> socket\n\n<span class=\"token comment\"># 建立服务器对象      通过打印这个client服务器对象可知：默认使用的是IPV4，协议是TCP。</span>\nclient<span class=\"token operator\">=</span>socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 1.建立连接</span>\nclient<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"www.baidu.com\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 构造请求报文</span>\ndata<span class=\"token operator\">=</span><span class=\"token string\">b\"GET / HTTP/1.1\\r\\nHost: www.baidu.com\\r\\n\\r\\n\"</span>\n\n<span class=\"token comment\"># 2.发送请求</span>\nclient<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\nres<span class=\"token operator\">=</span><span class=\"token string\">b\"\"</span>\n\n<span class=\"token comment\"># 3.接收数据</span>\ntemp<span class=\"token operator\">=</span>client<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span> temp<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token operator\">*</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n    res <span class=\"token operator\">+=</span> temp\n    temp <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 4.断开连接</span>\nclient<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"2socketMM_532\"></a>（2）实战：使用socket来爬取一张漂亮MM的图片：</h2>\n<p><strong>据说搜狗是没有设置反爬的，刚入门的话就挑软柿子捏，所以我们就来爬爬它。</strong></p>\n<h5><a id=\"1_534\"></a>1.首先，分析网页：</h5>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\ea525be1b42f41b9bd3b81ed910b267a.png\"/></p>\n<p> <strong>而我们要爬取的图片的URL就在头信息里的Request URL中。CV大法即可！</strong></p>\n<h5><a id=\"2_542\"></a>2.上代码：</h5>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#搜狗图片 下载一张</span>\n<span class=\"token keyword\">import</span> socket\n<span class=\"token keyword\">import</span> re\n<span class=\"token comment\">#搜狗图片</span>\nimg_url<span class=\"token operator\">=</span><span class=\"token string\">\"https://i02piccdn.sogoucdn.com/a3ffebbb779e0baf\"</span>\n\n<span class=\"token triple-quoted-string string\">'''  拓展：如何使用HTTPS请求\n#HTTPS请求\nimport ssl\nclient = ssl.wrap_socket(socket.socket())   #ssl.wrap_socket 一个装饰器\nclient.connect(('i02piccdn.sogoucdn.com',443))\n'''</span>\n\nclient <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 创建连接              注意上面我们爬的是https协议的url，但是我们使用http也行的原因是自动进行了重定向</span>\nclient<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i02piccdn.sogoucdn.com\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">#连接服务器，ip地址的映射可以定位到它的服务器</span>\n\n<span class=\"token comment\"># 构造请求报文</span>\ndata <span class=\"token operator\">=</span> <span class=\"token string\">\"GET /a3ffebbb779e0baf HTTP/1.1\\r\\nHost:i02piccdn.sogoucdn.com\\r\\n\\r\\n\"</span>\n\n<span class=\"token comment\"># 发送数据</span>\nclient<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">#报文要以字节码的形式</span>\n\n<span class=\"token comment\"># 接收数据</span>\nfirst_data <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first_data\"</span><span class=\"token punctuation\">,</span>first_data<span class=\"token punctuation\">)</span>\n\nlength <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">b\"Content-Length: (.*?)\\r\\n\"</span><span class=\"token punctuation\">,</span>first_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#在列表里，所以加0; 响应的也是字节码形式，所以加b</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span>   <span class=\"token comment\">#内容长度</span>\n\n<span class=\"token comment\"># 写这句的原因是在双\\r\\n后面可能有数据，也可能没有，如果有就直接拿到了</span>\n<span class=\"token comment\"># .*是匹配除了\\r\\n换行符之外的，后面加个re.S,则也可以匹配\\r\\n换行符，变成无敌的了！</span>\nimage_data <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">b\"From Inner Cluster \\r\\n\\r\\n(.*?)\"</span><span class=\"token punctuation\">,</span>first_data<span class=\"token punctuation\">,</span>re<span class=\"token punctuation\">.</span>S<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> image_data<span class=\"token punctuation\">:</span>\n    image_data <span class=\"token operator\">=</span> image_data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    image_data <span class=\"token operator\">=</span> <span class=\"token string\">b\"\"</span>\n\n<span class=\"token comment\"># 拼接拿到相应长度的数据</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    temp <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n    image_data <span class=\"token operator\">+=</span> temp\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>image_data<span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;=</span>length<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">break</span>\n<span class=\"token comment\"># 4.断开连接</span>\nclient<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 写入文件</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"girl.jpg\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>image_data<span class=\"token punctuation\">)</span>\n</code></pre>\n<h5><a id=\"3_596\"></a>3.实现效果：</h5>\n<p>这个图违规了，懂的都懂，代码就在这放着，大家自己试试哦~<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210709010520426.png\"/><br/> <code>控制台输出为： first_data b'HTTP/1.1 200 OK\\r\\nServer: nginx\\r\\nDate: Thu, 08 Jul 2021 17:04:43 GMT\\r\\nExpires: Fri, 08 Jul 2022 17:04:43 GMT\\r\\nX-NWS-UUID-VERIFY: 1266ff4f6f6197f273f603ca87522cc9\\r\\nExpiration-Time: Sun, 26 Dec 2021 13:11:13 GMT\\r\\nX-Daa-Tunnel: hop_count=3\\r\\nAccept-Ranges: bytes\\r\\nX-Cache-Lookup: Cache Miss\\r\\nLast-Modified: Sun, 27 Jun 2021 01:11:13 GMT\\r\\nCache-Control: max-age=31536000\\r\\nContent-Length: 19594\\r\\nX-NWS-LOG-UUID: 14051802991302897940\\r\\nConnection: keep-alive\\r\\nX-Cache-Lookup: Hit From Inner Cluster\\r\\n\\r\\n' 19594</code></p>\n<h1><a id=\"5In_the_end_604\"></a>5.In the end!</h1>\n<table><tbody><tr><td bgcolor=\"yellow\">从现在做起，坚持下去，一天进步一小点，不久的将来，你会感谢曾经努力的你！</td></tr></tbody></table>\n<p> <strong>本博主会持续更新爬虫基础分栏及爬虫实战分栏，认真仔细看完本文的小伙伴们，可以点赞收藏并评论出你们的读后感。并可关注本博主，在今后的日子里阅读更多爬虫文！</strong></p>\n<p><span id=\"jump99\"></span></p>\n<center>\n  👇🏻可通过点击下面——&gt;关注本人运营\n <strong>公众号</strong>👇🏻\n</center>\n<p></p>\n<center>\n<font size=\"1\">【可以公众号里私聊并标明来自CSDN，会拉你进入技术交流群（群内涉及各个领域大佬级人物，任何问题都可讨论~）---&gt;互相学习&amp;&amp;共同进步（非诚勿扰）】</font>\n</center>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-02 15:13:20", "summary": "最近，很多粉丝私信我问爬虫到底是什么？学习爬虫到底该从何下手？其实，我想说的也是曾经的我身为小白的时候某些大牛对我说过的很多时候我们都有一颗想要学习新知识的心，却总是畏惧于对想要学习内容的无知，这也是"}