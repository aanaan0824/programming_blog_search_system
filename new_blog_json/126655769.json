{"blogid": "126655769", "writerAge": "码龄4年", "writerBlogNum": "54", "writerCollect": "621", "writerComment": "60", "writerFan": "137", "writerGrade": "5级", "writerIntegral": "1685", "writerName": "Hzy_520", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126655769.jpg", "writerRankTotal": "11423", "writerRankWeekly": "5144", "writerThumb": "136", "writerVisitNum": "122401", "blog_read_count": "290", "blog_time": "已于 2022-09-02 15:07:37 修改", "blog_title": "STM32控制舵机精准角度", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<blockquote>\n<p><strong>一、舵机原理</strong></p>\n<p><strong>二、程序介绍</strong></p>\n<p><strong>三、精准角度控制原理</strong></p>\n</blockquote>\n<h3></h3>\n<p>        网上很多教程，都只是控制舵机0°，45°，90°等特定的角度，比如1°，很多程序都做不到，即使有也少得可怜，更不会详解介绍是怎么实现精准控制每一度的，因此，这篇文章的意义就在这里。</p>\n<hr/>\n<h3><strong>一、舵机原理</strong>       </h3>\n<p> 我们以SG90、MG90等舵机为例，舵机有三个PIN，分别是VCC,GND,PWM，PWM引脚需要一个20ms周期信号，通过不同的占空比来控制不同角度，具体参数如下：</p>\n<p style=\"margin-left:0px;text-align:center;\"><span style=\"color:#333333;\">   0.5ms--------------0</span><span style=\"color:#333333;\">度；</span></p>\n<p style=\"margin-left:0px;text-align:center;\"><span style=\"color:#333333;\">   1.0ms------------45</span><span style=\"color:#333333;\">度；</span></p>\n<p style=\"margin-left:0px;text-align:center;\"><span style=\"color:#333333;\">   1.5ms------------90</span><span style=\"color:#333333;\">度；</span></p>\n<p style=\"margin-left:0px;text-align:center;\"><span style=\"color:#333333;\">   2.0ms-----------135</span><span style=\"color:#333333;\">度；</span></p>\n<p style=\"margin-left:0px;text-align:center;\"><span style=\"color:#333333;\">   2.5ms-----------180</span><span style=\"color:#333333;\">度；</span></p>\n<p style=\"margin-left:0;text-align:left;\">        动态原理如下，源自网上。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/c479bbc3543e416489bbfa66491f2e5d.gif\"/></p>\n<p></p>\n<h3><strong>二、程序介绍</strong></h3>\n<p><strong>        产生PMW的方法很多，典型的就是用单片机，这里以STM32F1举例</strong></p>\n<p>PWM配置：这个配置没有什么特别，大同小异，直接使用经典的配置就可以，重点在后面的主函数。</p>\n<pre><code>void TIM3_PWM_Init(u16 arr,u16 psc)\n{  \n\tGPIO_InitTypeDef GPIO_InitStructure;\n\tTIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;\n\tTIM_OCInitTypeDef  TIM_OCInitStructure;\n\t\n\tRCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);\t\n \tRCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB  | RCC_APB2Periph_AFIO, ENABLE);  \n\t\n\tGPIO_PinRemapConfig(GPIO_PartialRemap_TIM3, ENABLE);   \n \n \n\tGPIO_InitStructure.GPIO_Pin = GPIO_Pin_5; \n\tGPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  \n\tGPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\n\tGPIO_Init(GPIOB, &amp;GPIO_InitStructure);\n \n\n\tTIM_TimeBaseStructure.TIM_Period = arr; \n\tTIM_TimeBaseStructure.TIM_Prescaler =psc; \n\tTIM_TimeBaseStructure.TIM_ClockDivision = 0; \n\tTIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  \n\tTIM_TimeBaseInit(TIM3, &amp;TIM_TimeBaseStructure); \n\t\n\n\tTIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2; \n \tTIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;\n\tTIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High; \n\tTIM_OC2Init(TIM3, &amp;TIM_OCInitStructure);  \n\n\tTIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Enable);  \n \n\tTIM_Cmd(TIM3, ENABLE);  \n\t\n}\n\n</code></pre>\n<p>主函数：</p>\n<pre><code>void Servo_Control(float angle)\n{\n\tfloat temp;\n\tu16 led0pwmval=0;\n//\ttemp = 195- 0.11*(float)angle;\n//\tTIM_SetCompare2(TIM3, (float)temp);\n\t pwmval = (int)(2000*(1-((0.5+angle/90.0)/20.0))) -5;\n\tTIM_SetCompare2(TIM3, pwmval);//\n}\n\n\nint main(void)\n {\t\n\t float i;\n\tServo_Control(0);\n\tdelay_init();\t    \n\tNVIC_PriorityGroupConfig(NVIC_PriorityGroup_2); \t \n \tLED_Init();\t\t\n \t//TIM3_PWM_Init(199,7199);\t //(199+1)*(7199+1)/72*10^6  0.02S  20MS\n\tTIM3_PWM_Init(1999,719);\n\n   \twhile(1)\n\t{\t\t\n\t\t\tServo_Control(0);\n\n\t\t/*\n\t for(i=0;i&lt;=179;i++)\n\t\t\t{\n\t\t\t\tServo_Control(i);\n\t\t\t\t\tdelay_ms(2);\n\t\t\t}\n\t\t\tdelay_ms(2);\n\t\t for(i=180;i&gt;=1;i--)\t\t\t\t\t\n\t\t\t\t{\t\t\n\t\t\t\t\tServo_Control(i);\n\t\t\t\t  delay_ms(2);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t}  \n\t\t\t\tdelay_ms(2);\n\t\t*/\t\t\n\t}\n} </code></pre>\n<p>这里分为两部分：</p>\n<pre><code> \t//TIM3_PWM_Init(199,7199);\t //(199+1)*(7199+1)/72*10^6  0.02S  20MS\n\tTIM3_PWM_Init(1999,719);</code></pre>\n<p>        首先两个定时器都能产生20ms周期的脉冲，但是网上很多网友使用的都是第一种方式：TIM3_PWM_Init(199,7199)，这个的弊端是，由于计数的数量太少了，才199，导致在控制舵机角度的时候，即使我最小修改一个单位的数值，表现出来的变化脉冲宽度都比较大，导致舵机旋转了大于一个度数，换句话说，这个代码调节的精度太差。</p>\n<p>        因此，我们需要想办法让计数器计数得尽量多，在我们修改前期的数值时，后面的脉宽变化很小很小，小于舵机旋转1°所需的变化脉宽，我们就成功了。</p>\n<p>因此，我们使用：TIM3_PWM_Init(1999,719);</p>\n<p></p>\n<h3><strong>三、精准角度控制原理</strong></h3>\n<p></p>\n<p><strong>        精准角度控制，主要在下面这两行代码</strong></p>\n<pre><code>\t\n    pwmval = (int)(2000*(1-((0.5+angle/90.0)/20.0))) -5;\n\tTIM_SetCompare2(TIM3, pwmval);</code></pre>\n<p>        假设我们需要舵机旋转45°，则占空比为1ms/20ms=5%，则TIM_SetCompare2TIMx 捕获比较 1 寄存器值就是2000-2000*5%=1900；</p>\n<p>那这个数值跟角度有什么关系呢，就来到了这个代码：  </p>\n<p style=\"text-align:center;\"><strong>pwmval = (int)(2000*(1-((0.5+angle/90.0)/20.0))) -5;</strong></p>\n<p>        占空比从0.5开始为0°，因此需要以0.5开始相加，我们假设把45°为angle带进去，则最里面的括号为1，正好对标舵机45°时候的1ms。</p>\n<p>        那为什么我后面要减5呢，这个是我舵机的误差，因为在我设定为0°的时候，我发现舵机的角度并不是完完全全的水平，因此这个相当于一个校准系数，根据实际情况而定，如果舵机质量很好，没有误差，那不需要-5，就是这个意思。</p>\n<p>我这里还写了一个for循环，供大家参考，作用是使得舵机以1°的步进正反旋转。</p>\n<pre><code>for(i=0;i&lt;=179;i++)\n\t\t\t{\n\t\t\t\tServo_Control(i);\n\t\t\t\t\tdelay_ms(2);\n\t\t\t}\n\t\tdelay_ms(2);\nfor(i=180;i&gt;=1;i--)\t\t\t\t\t\n\t\t\t\t{\t\t\n\t\t\t\t\tServo_Control(i);\n\t\t\t\t  delay_ms(2);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t}  \n\t\tdelay_ms(2);</code></pre>\n<p><strong>你的点赞或收藏是我创作的动力~~</strong></p>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-02 15:07:37", "summary": "一、舵机原理二、程序介绍三、精准角度控制原理网上很多教程，都只是控制舵机，，等特定的角度，比如，很多程序都做不到，即使有也少得可怜，更不会详解介绍是怎么实现精准控制每一度的，因此，这篇文章的意义就在这"}