{"blogid": "126230426", "writerAge": "码龄2年", "writerBlogNum": "48", "writerCollect": "669", "writerComment": "1135", "writerFan": "1942", "writerGrade": "5级", "writerIntegral": "2353", "writerName": "广龙宇", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126230426.jpg", "writerRankTotal": "8128", "writerRankWeekly": "115", "writerThumb": "618", "writerVisitNum": "1805817", "blog_read_count": "11352", "blog_time": "于 2022-08-11 07:37:48 发布", "blog_title": "【一起学Rust | 进阶篇 | Fang库】后台任务处理库——Fang", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\c25d1bdfde5f45a78978e3c27a3cac87.png\"/></p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_7\">前言</a></li><li><a href=\"#Fang_13\">一、Fang安装</a></li><li><ul><li><a href=\"#1__14\">1. 添加依赖</a></li><li><ul><li><a href=\"#Blocking_17\">仅使用Blocking</a></li><li><a href=\"#Asynk_23\">仅使用Asynk</a></li><li><a href=\"#BlockingAsynk_29\">同时使用Blocking和Asynk</a></li></ul>\n</li><li><a href=\"#2__34\">2. 创建数据库</a></li></ul>\n</li><li><a href=\"#_74\">二、使用</a></li><li><ul><li><a href=\"#1_75\">1.定义一个任务</a></li><li><ul><li><a href=\"#Blocking_77\">Blocking任务</a></li><li><a href=\"#Asynk_103\">Asynk任务</a></li></ul>\n</li><li><a href=\"#2_133\">2.任务队列</a></li><li><ul><li><a href=\"#Blocking_134\">Blocking任务</a></li><li><a href=\"#Asynk_159\">Asynk任务</a></li></ul>\n</li><li><a href=\"#3_Worker_191\">3. 启动Worker</a></li><li><ul><li><a href=\"#Blocking_192\">Blocking任务</a></li><li><a href=\"#Asynk_211\">Asynk任务</a></li></ul>\n</li><li><a href=\"#4__228\">4. 配置</a></li><li><ul><li><a href=\"#Blocking_229\">Blocking任务</a></li><li><a href=\"#Asynk_254\">Asynk任务</a></li></ul>\n</li><li><a href=\"#5_Worker_257\">5. 配置Worker类型</a></li><li><ul><li><a href=\"#Blocking_259\">Blocking任务</a></li><li><a href=\"#Asynk_288\">Asynk任务</a></li></ul>\n</li><li><a href=\"#6__291\">6. 配置保留模式</a></li><li><ul><li><a href=\"#Blocking_302\">Blocking任务</a></li><li><a href=\"#Asynk_312\">Asynk任务</a></li></ul>\n</li><li><a href=\"#7__315\">7. 配置睡眠值</a></li><li><ul><li><a href=\"#Blocking_316\">Blocking任务</a></li><li><a href=\"#Asynk_342\">Asynk任务</a></li></ul>\n</li><li><a href=\"#8__345\">8. 定时任务</a></li><li><ul><li><a href=\"#Blocking_348\">Blocking任务</a></li><li><a href=\"#Asynk_373\">Asynk任务</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_408\">总结</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_7\"></a>前言</h1>\n<p>Fang是一个Rust的后台任务处理库，采用Postgres DB作为任务队列。同时支持Asynk和Blocking任务。<code>Asynk任务</code>采用的是<code>tokio</code>的特性，Worker工作在<code>tokio</code>下。<code>Blocking任务</code>使用的是<code>std::thread</code>，Worker工作在一个单独的线程。</p>\n<hr/>\n<h1><a id=\"Fang_13\"></a>一、Fang安装</h1>\n<h2><a id=\"1__14\"></a>1. 添加依赖</h2>\n<p>添加Fang到你的<code>Cargo.toml</code>文件中</p>\n<blockquote>\n<p><code>注意</code> Fang仅支持rust 1.62+版本</p>\n</blockquote>\n<h3><a id=\"Blocking_17\"></a>仅使用Blocking</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token punctuation\">[</span>dependencies<span class=\"token punctuation\">]</span>\nfang <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> version <span class=\"token operator\">=</span> <span class=\"token string\">\"0.7\"</span> <span class=\"token punctuation\">,</span> features <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"blocking\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">-</span>features <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"Asynk_23\"></a>仅使用Asynk</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token punctuation\">[</span>dependencies<span class=\"token punctuation\">]</span>\nfang <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> version <span class=\"token operator\">=</span> <span class=\"token string\">\"0.7\"</span> <span class=\"token punctuation\">,</span> features <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"asynk\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">-</span>features <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"BlockingAsynk_29\"></a>同时使用Blocking和Asynk</h3>\n<pre><code class=\"prism language-rust\">fang <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> version <span class=\"token operator\">=</span> <span class=\"token string\">\"0.7\"</span> <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"2__34\"></a>2. 创建数据库</h2>\n<blockquote>\n<p>这里需要使用<code>Diesel CLI</code>来完成数据库的迁移，将在后面的文章中介绍</p>\n</blockquote>\n<p>在你的Postgres DB中创建<code>fang_tasks</code>表，然后运行以下脚本</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">CREATE</span> EXTENSION <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token string\">\"uuid-ossp\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TYPE</span> fang_task_state <span class=\"token keyword\">AS</span> <span class=\"token keyword\">ENUM</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'new'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'in_progress'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'failed'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'finished'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> fang_tasks <span class=\"token punctuation\">(</span>\n     id uuid <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token keyword\">DEFAULT</span> uuid_generate_v4<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n     metadata jsonb <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n     error_message <span class=\"token keyword\">TEXT</span><span class=\"token punctuation\">,</span>\n     state fang_task_state <span class=\"token keyword\">default</span> <span class=\"token string\">'new'</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n     task_type <span class=\"token keyword\">VARCHAR</span> <span class=\"token keyword\">default</span> <span class=\"token string\">'common'</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n     created_at <span class=\"token keyword\">TIMESTAMP</span> <span class=\"token keyword\">WITH</span> <span class=\"token keyword\">TIME</span> ZONE <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token function\">NOW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n     updated_at <span class=\"token keyword\">TIMESTAMP</span> <span class=\"token keyword\">WITH</span> <span class=\"token keyword\">TIME</span> ZONE <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token function\">NOW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">INDEX</span> fang_tasks_state_index <span class=\"token keyword\">ON</span> fang_tasks<span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">INDEX</span> fang_tasks_type_index <span class=\"token keyword\">ON</span> fang_tasks<span class=\"token punctuation\">(</span>task_type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">INDEX</span> fang_tasks_created_at_index <span class=\"token keyword\">ON</span> fang_tasks<span class=\"token punctuation\">(</span>created_at<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">INDEX</span> fang_tasks_metadata_index <span class=\"token keyword\">ON</span> fang_tasks<span class=\"token punctuation\">(</span>metadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> fang_periodic_tasks <span class=\"token punctuation\">(</span>\n  id uuid <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token keyword\">DEFAULT</span> uuid_generate_v4<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  metadata jsonb <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  period_in_seconds <span class=\"token keyword\">INTEGER</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  scheduled_at <span class=\"token keyword\">TIMESTAMP</span> <span class=\"token keyword\">WITH</span> <span class=\"token keyword\">TIME</span> ZONE<span class=\"token punctuation\">,</span>\n  created_at <span class=\"token keyword\">TIMESTAMP</span> <span class=\"token keyword\">WITH</span> <span class=\"token keyword\">TIME</span> ZONE <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token function\">NOW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  updated_at <span class=\"token keyword\">TIMESTAMP</span> <span class=\"token keyword\">WITH</span> <span class=\"token keyword\">TIME</span> ZONE <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token function\">NOW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">INDEX</span> fang_periodic_tasks_scheduled_at_index <span class=\"token keyword\">ON</span> fang_periodic_tasks<span class=\"token punctuation\">(</span>scheduled_at<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">INDEX</span> fang_periodic_tasks_metadata_index <span class=\"token keyword\">ON</span> fang_periodic_tasks<span class=\"token punctuation\">(</span>metadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>这些文件可以在源码目录<code>migrations</code>中找到，github搜Fang，然后进入下载源码。</p>\n</blockquote>\n<h1><a id=\"_74\"></a>二、使用</h1>\n<h2><a id=\"1_75\"></a>1.定义一个任务</h2>\n<h3><a id=\"Blocking_77\"></a>Blocking任务</h3>\n<p>每个要被Fang执行的任务都必须实现<code>fang::Runnable</code>特质，特质实现<code>#[typetag::serde]</code>使之具有反序列化任务的属性。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">fang<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">fang<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">fang<span class=\"token punctuation\">::</span></span>typetag<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">fang<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">PgConnection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">fang<span class=\"token punctuation\">::</span>serde<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">Deserialize</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Serialize</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[derive(Serialize, Deserialize)]</span>\n<span class=\"token attribute attr-name\">#[serde(crate = <span class=\"token string\">\"fang::serde\"</span>)]</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">MyTask</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">pub</span> number<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u16</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute attr-name\">#[typetag::serde]</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Runnable</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">MyTask</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">run</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> _connection<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">PgConnection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Error</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the number is {}\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>run函数的第二个参数是PgConnection，你可以重复使用它来操作任务队列，例如在当前作业执行期间添加一个新任务，或者，如果你要复用，可以在自己的查询中重新使用它。如果你不需要它，就忽略它。</p>\n<h3><a id=\"Asynk_103\"></a>Asynk任务</h3>\n<p>每个要被Fang执行的任务都必须实现<code>fang::AsyncRunnable</code>特质</p>\n<blockquote>\n<p><code>注意</code> 不要实现两个同名的AsyncRunnable，这会导致typetag失败</p>\n</blockquote>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">fang<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">AsyncRunnable</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">fang<span class=\"token punctuation\">::</span>asynk<span class=\"token punctuation\">::</span>async_queue<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">AsyncQueueable</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">fang<span class=\"token punctuation\">::</span>serde<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">Deserialize</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Serialize</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">fang<span class=\"token punctuation\">::</span></span>async_trait<span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[derive(Serialize, Deserialize)]</span>\n<span class=\"token attribute attr-name\">#[serde(crate = <span class=\"token string\">\"fang::serde\"</span>)]</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">AsyncTask</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">pub</span> number<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u16</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute attr-name\">#[typetag::serde]</span>\n<span class=\"token attribute attr-name\">#[async_trait]</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">AsyncRunnable</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">AsyncTask</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">run</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> _queueable<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">dyn</span> <span class=\"token class-name\">AsyncQueueable</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Error</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// this func is optional to impl</span>\n    <span class=\"token comment\">// Default task-type it is common</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">task_type</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token string\">\"my-task-type\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"2_133\"></a>2.任务队列</h2>\n<h3><a id=\"Blocking_134\"></a>Blocking任务</h3>\n<p>需要使用<code>Queue::enqueue_task</code>来入队列</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">fang<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Queue</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">...</span>\n\n<span class=\"token class-name\">Queue</span><span class=\"token punctuation\">::</span><span class=\"token function\">enqueue_task</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token class-name\">MyTask</span> <span class=\"token punctuation\">{<!-- --></span> number<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>上面的示例在每次调用时都会创建一个新的 postgres 连接</p>\n<p>重用相同的 postgres 连接来将多个任务排入队列</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> queue <span class=\"token operator\">=</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> id <span class=\"token keyword\">in</span> <span class=\"token operator\">&amp;</span>unsynced_feed_ids <span class=\"token punctuation\">{<!-- --></span>\n    queue<span class=\"token punctuation\">.</span><span class=\"token function\">push_task</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token class-name\">SyncFeedMyTask</span> <span class=\"token punctuation\">{<!-- --></span> feed_id<span class=\"token punctuation\">:</span> <span class=\"token operator\">*</span>id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>或者使用PgConnection结构体</p>\n<pre><code class=\"prism language-rust\"><span class=\"token class-name\">Queue</span><span class=\"token punctuation\">::</span><span class=\"token function\">push_task_query</span><span class=\"token punctuation\">(</span>pg_connection<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>new_task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"Asynk_159\"></a>Asynk任务</h3>\n<p>使用<code>AsyncQueueable::insert_task</code>来入队，可以根据你自己后端来进行操作，默认为<code>Postgres</code></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">fang<span class=\"token punctuation\">::</span>asynk<span class=\"token punctuation\">::</span>async_queue<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">AsyncQueue</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">fang<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">NoTls</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">fang<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">AsyncRunnable</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 创建异步队列</span>\n<span class=\"token keyword\">let</span> max_pool_size<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> queue <span class=\"token operator\">=</span> <span class=\"token class-name\">AsyncQueue</span><span class=\"token punctuation\">::</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// Postgres 数据库 url</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">uri</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"postgres://postgres:postgres@localhost/fang\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 允许的最大连接数控i昂</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">max_pool_size</span><span class=\"token punctuation\">(</span>max_pool_size<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 如果希望任务中的唯一性，则为false</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">duplicated_tasks</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 要进行操作之前，总是要先连接</span>\nqueue<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NoTls</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>举个简单例子我们用的是NoTls，如果你有特殊需求，如果出于某种原因你想加密 postgres 流量。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> task <span class=\"token operator\">=</span> <span class=\"token class-name\">AsyncTask</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">8</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> task_returned <span class=\"token operator\">=</span> queue\n  <span class=\"token punctuation\">.</span><span class=\"token function\">insert_task</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>task <span class=\"token keyword\">as</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">AsyncRunnable</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"3_Worker_191\"></a>3. 启动Worker</h2>\n<h3><a id=\"Blocking_192\"></a>Blocking任务</h3>\n<p>每个Worker都在一个单独的线程中运行。如果panic，会重新启动。<br/> 使用<code>WorkerPool</code>来启动Worker，<code>WorkerPool::new</code>接收一个整型参数，Worker的数量</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">fang<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">WorkerPool</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">WorkerPool</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>使用<code>shutdown</code>停止线程</p>\n<pre><code class=\"prism language-rust\">\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">fang<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">WorkerPool</span><span class=\"token punctuation\">;</span>\n\nworker_pool <span class=\"token operator\">=</span> <span class=\"token class-name\">WorkerPool</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>unwrap<span class=\"token punctuation\">;</span>\n\nworker_pool<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"Asynk_211\"></a>Asynk任务</h3>\n<p>每个Worker都在一个单独的 tokio 任务中运行。如果panic，会重新启动。<br/> 使用<code>AsyncWorkerPool</code>来启动Worker</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">fang<span class=\"token punctuation\">::</span>asynk<span class=\"token punctuation\">::</span>async_worker_pool<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">AsyncWorkerPool</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 必须创建一个队列</span>\n<span class=\"token comment\">// 插入一些任务</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> pool<span class=\"token punctuation\">:</span> <span class=\"token class-name\">AsyncWorkerPool</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">AsyncQueue</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">NoTls</span><span class=\"token operator\">&gt;&gt;</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">AsyncWorkerPool</span><span class=\"token punctuation\">::</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">number_of_workers</span><span class=\"token punctuation\">(</span>max_pool_size<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">queue</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\npool<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"4__228\"></a>4. 配置</h2>\n<h3><a id=\"Blocking_229\"></a>Blocking任务</h3>\n<p>在创建Blocking任务任务的时候，默认只能传入Worker数量参数，如果想要进行自定义配置，需要使用<code>WorkerPool.new_with_params</code>来创建，它接受两个参数——工人数量和WorkerParams结构体。</p>\n<p><code>WorkerParams</code>的定义是这样的</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">WorkerParams</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">pub</span> retention_mode<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">RetentionMode</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> sleep_params<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">SleepParams</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> task_type<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">RetentionMode</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">KeepAll</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">RemoveAll</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">RemoveFinished</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">SleepParams</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">pub</span> sleep_period<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u64</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> max_sleep_period<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u64</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> min_sleep_period<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u64</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> sleep_step<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u64</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"Asynk_254\"></a>Asynk任务</h3>\n<p>使用<code>AsyncWorkerPool</code>的builder方法即可。需要链式调用，创建一个<code>AsyncWorkerPool</code>，然后调用.queue(…)，.sleep_params(…)(可选)，.retention_mode(…)(可选)，.number_of_workers(…)配置，最后调用.build()构建对象。</p>\n<h2><a id=\"5_Worker_257\"></a>5. 配置Worker类型</h2>\n<p>可以指定Worker类型，来指定指定类型Worker执行指定类型的任务</p>\n<h3><a id=\"Blocking_259\"></a>Blocking任务</h3>\n<p>在<code>Runnable</code>特质中添加方法</p>\n<pre><code class=\"prism language-rust\"><span class=\"token punctuation\">...</span>\n\n<span class=\"token attribute attr-name\">#[typetag::serde]</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Runnable</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">MyTask</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">run</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Error</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the number is {}\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">task_type</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>设置<code>task_type</code></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> worker_params <span class=\"token operator\">=</span> <span class=\"token class-name\">WorkerParams</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nworker_params<span class=\"token punctuation\">.</span><span class=\"token function\">set_task_type</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">WorkerPool</span><span class=\"token punctuation\">::</span><span class=\"token function\">new_with_params</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> worker_params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>没有设置<code>task_type</code>的Worker可以执行任何任务</p>\n<h3><a id=\"Asynk_288\"></a>Asynk任务</h3>\n<p>功能与<code>Blocking任务</code>相同。使用<code>AsyncWorker</code>的builer来设置</p>\n<h2><a id=\"6__291\"></a>6. 配置保留模式</h2>\n<p>默认情况下，所有成功完成的任务都会从数据库中删除，失败的任务不会。可以使用三种保留模式：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">RetentionMode</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">KeepAll</span><span class=\"token punctuation\">,</span>        \\\\ 不删除任务\n    <span class=\"token class-name\">RemoveAll</span><span class=\"token punctuation\">,</span>      \\\\ 删除所有任务\n    <span class=\"token class-name\">RemoveFinished</span><span class=\"token punctuation\">,</span> \\\\ 默认值，完成就删除\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"Blocking_302\"></a>Blocking任务</h3>\n<p>使用<code>set_retention_mode</code>设置保留模式</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> worker_params <span class=\"token operator\">=</span> <span class=\"token class-name\">WorkerParams</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nworker_params<span class=\"token punctuation\">.</span><span class=\"token function\">set_retention_mode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionMode</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">RemoveAll</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">WorkerPool</span><span class=\"token punctuation\">::</span><span class=\"token function\">new_with_params</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> worker_params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"Asynk_312\"></a>Asynk任务</h3>\n<p>使用<code>AsyncWorker</code>的builder。</p>\n<h2><a id=\"7__315\"></a>7. 配置睡眠值</h2>\n<h3><a id=\"Blocking_316\"></a>Blocking任务</h3>\n<p>使用 <code>useSleepParams</code>来配置睡眠值：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">SleepParams</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">pub</span> sleep_period<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u64</span><span class=\"token punctuation\">,</span>     \\\\ 默认值 <span class=\"token number\">5</span>\n    <span class=\"token keyword\">pub</span> max_sleep_period<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u64</span><span class=\"token punctuation\">,</span> \\\\ 默认值 <span class=\"token number\">15</span>\n    <span class=\"token keyword\">pub</span> min_sleep_period<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u64</span><span class=\"token punctuation\">,</span> \\\\ 默认值 <span class=\"token number\">5</span>\n    <span class=\"token keyword\">pub</span> sleep_step<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u64</span><span class=\"token punctuation\">,</span>       \\\\ 默认值 <span class=\"token number\">5</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>如果数据库中没有任务，则Worker会休眠sleep_period，并且每次该值都会增加sleep_step，直到达到max_sleep_period. min_sleep_period是sleep_period的初始值。所有值都以秒为单位。</p>\n</blockquote>\n<p>使用<code>set_sleep_params</code>来设置</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> sleep_params <span class=\"token operator\">=</span> <span class=\"token class-name\">SleepParams</span> <span class=\"token punctuation\">{<!-- --></span>\n    sleep_period<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    max_sleep_period<span class=\"token punctuation\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n    min_sleep_period<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    sleep_step<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> worker_params <span class=\"token operator\">=</span> <span class=\"token class-name\">WorkerParams</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nworker_params<span class=\"token punctuation\">.</span><span class=\"token function\">set_sleep_params</span><span class=\"token punctuation\">(</span>sleep_params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">WorkerPool</span><span class=\"token punctuation\">::</span><span class=\"token function\">new_with_params</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> worker_params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"Asynk_342\"></a>Asynk任务</h3>\n<p>使用<code>AsyncWorker</code>的builder。</p>\n<h2><a id=\"8__345\"></a>8. 定时任务</h2>\n<blockquote>\n<p>如果你从头到尾看的本文，那么什么也不需要做，否则你需要创建<code>fang_periodic_tasks</code>表，就在本文安装那个部分。</p>\n</blockquote>\n<h3><a id=\"Blocking_348\"></a>Blocking任务</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">fang<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Scheduler</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">fang<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Queue</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> queue <span class=\"token operator\">=</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nqueue\n     <span class=\"token punctuation\">.</span><span class=\"token function\">push_periodic_task</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token class-name\">SyncMyTask</span><span class=\"token punctuation\">::</span><span class=\"token function\">default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">120</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nqueue\n     <span class=\"token punctuation\">.</span><span class=\"token function\">push_periodic_task</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token class-name\">DeliverMyTask</span><span class=\"token punctuation\">::</span><span class=\"token function\">default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Scheduler</span><span class=\"token punctuation\">::</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>在上面的示例中，push_periodic_task用于将指定的任务保存到表fang_periodic_tasks中，该表将fang_tasks每隔指定的秒数排队（保存到表中）。</p>\n<p>Scheduler::start(10, 5)启动调度程序。它接受两个参数：</p>\n<ul><li>数据库检查周期（以秒为单位）</li><li>可接受的错误限制（以秒为单位）</li></ul>\n<h3><a id=\"Asynk_373\"></a>Asynk任务</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">fang<span class=\"token punctuation\">::</span>asynk<span class=\"token punctuation\">::</span>async_scheduler<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Scheduler</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">fang<span class=\"token punctuation\">::</span>asynk<span class=\"token punctuation\">::</span>async_queue<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">AsyncQueueable</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">fang<span class=\"token punctuation\">::</span>asynk<span class=\"token punctuation\">::</span>async_queue<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">AsyncQueue</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 在此之前构建一个Async队列</span>\n\n<span class=\"token keyword\">let</span> schedule_in_future <span class=\"token operator\">=</span> <span class=\"token class-name\">Utc</span><span class=\"token punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">OtherDuration</span><span class=\"token punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> _periodic_task <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">insert_periodic_task</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&amp;</span><span class=\"token class-name\">AsyncTask</span> <span class=\"token punctuation\">{<!-- --></span> number<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    schedule_in_future<span class=\"token punctuation\">,</span>\n    <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> check_period<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u64</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> error_margin_seconds<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u64</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> scheduler <span class=\"token operator\">=</span> <span class=\"token class-name\">Scheduler</span><span class=\"token punctuation\">::</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">check_period</span><span class=\"token punctuation\">(</span>check_period<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">error_margin_seconds</span><span class=\"token punctuation\">(</span>error_margin_seconds<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">queue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> queue <span class=\"token keyword\">as</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">dyn</span> <span class=\"token class-name\">AsyncQueueable</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 在其他线程或循环之前添加更多任务</span>\n\n<span class=\"token comment\">// 调度程序循环</span>\nscheduler<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<hr/>\n<h1><a id=\"_408\"></a>总结</h1>\n<p>以上就是本文的所有内容，介绍了Rust中借助<code>Fang库</code>来实现后台任务，进行后台任务的处理，还有定时任务，配置等。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 0, "time": "2022-08-11 07:37:48", "summary": "文章目录前言一、安装添加依赖仅使用仅使用同时使用和创建数据库二、使用定义一个任务任务任务任务队列任务任务启动任务任务配置任务任务配置类型任务任务配置保留模式任务任务配置睡眠值任务任务定时任务任务任务总"}