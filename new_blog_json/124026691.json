{"blogid": "124026691", "writerAge": "码龄1年", "writerBlogNum": "49", "writerCollect": "52", "writerComment": "11", "writerFan": "10", "writerGrade": "3级", "writerIntegral": "619", "writerName": "H3018-R", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124026691.jpg", "writerRankTotal": "37083", "writerRankWeekly": "279066", "writerThumb": "112", "writerVisitNum": "45888", "blog_read_count": "2401", "blog_time": "于 2022-04-07 22:30:04 发布", "blog_title": "文件上传漏洞常用绕过方式", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86-toc\" style=\"margin-left:0px;\"><a href=\"#%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86\">文件上传漏洞原理</a></p>\n<p id=\"%E5%B8%B8%E7%94%A8%E9%98%B2%E5%BE%A1%E6%96%B9%E5%BC%8F%E5%92%8C%E5%B8%B8%E7%94%A8%E9%98%B2%E5%BE%A1%E6%96%B9%E5%BC%8F%E7%9A%84%E7%BB%95%E8%BF%87-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%B8%B8%E7%94%A8%E9%98%B2%E5%BE%A1%E6%96%B9%E5%BC%8F%E5%92%8C%E5%B8%B8%E7%94%A8%E9%98%B2%E5%BE%A1%E6%96%B9%E5%BC%8F%E7%9A%84%E7%BB%95%E8%BF%87\">常用防御方式和常用防御方式的绕过</a></p>\n<p id=\"%E4%B8%80%E3%80%81%E5%89%8D%E7%AB%AFJS%E6%A3%80%E6%B5%8B-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%B8%80%E3%80%81%E5%89%8D%E7%AB%AFJS%E6%A3%80%E6%B5%8B\">一、前端JS检测</a></p>\n<p id=\"%E4%BA%8C%E3%80%81MIME%E6%A3%80%E6%B5%8B-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BA%8C%E3%80%81MIME%E6%A3%80%E6%B5%8B\">二、MIME检测</a></p>\n<p id=\"%E4%B8%89%E3%80%81%E7%99%BD%E5%90%8D%E5%8D%95%E6%A3%80%E6%B5%8B-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%B8%89%E3%80%81%E7%99%BD%E5%90%8D%E5%8D%95%E6%A3%80%E6%B5%8B\">三、白名单检测</a></p>\n<p id=\"%2500%E6%88%AA%E6%96%AD-toc\" style=\"margin-left:80px;\"><a href=\"#%2500%E6%88%AA%E6%96%AD\">%00截断</a></p>\n<p id=\"0x00%E6%88%AA%E6%96%AD-toc\" style=\"margin-left:80px;\"><a href=\"#0x00%E6%88%AA%E6%96%AD\">0x00截断</a></p>\n<p id=\"%C2%A0%E5%9B%9B%E3%80%81%E9%BB%91%E5%90%8D%E5%8D%95%E7%BB%95%E8%BF%87-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E5%9B%9B%E3%80%81%E9%BB%91%E5%90%8D%E5%8D%95%E7%BB%95%E8%BF%87\"> 四、黑名单绕过</a></p>\n<p id=\"%E6%96%87%E4%BB%B6%E6%8B%93%E5%B1%95%E5%90%8D%E7%BB%95%E8%BF%87-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%96%87%E4%BB%B6%E6%8B%93%E5%B1%95%E5%90%8D%E7%BB%95%E8%BF%87\">文件拓展名绕过</a></p>\n<p id=\".htaccess%E6%96%87%E4%BB%B6%E7%BB%95%E8%BF%87%C2%A0-toc\" style=\"margin-left:80px;\"><a href=\"#.htaccess%E6%96%87%E4%BB%B6%E7%BB%95%E8%BF%87%C2%A0\">.htaccess文件绕过 </a></p>\n<p id=\"%C2%A0.user.ini.%E7%BB%95%E8%BF%87-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0.user.ini.%E7%BB%95%E8%BF%87\"> .user.ini.绕过</a></p>\n<p id=\"apache%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E%C2%A0-toc\" style=\"margin-left:80px;\"><a href=\"#apache%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E%C2%A0\">apache解析漏洞 </a></p>\n<p id=\"%C2%A0IIS%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0IIS%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E\"> IIS解析漏洞</a></p>\n<p id=\"Nginx%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E%C2%A0-toc\" style=\"margin-left:80px;\"><a href=\"#Nginx%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E%C2%A0\">Nginx解析漏洞 </a></p>\n<p id=\"widows%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99%E7%9A%84%E7%89%B9%E6%AE%8A%E5%88%A9%E7%94%A8%C2%A0-toc\" style=\"margin-left:80px;\"><a href=\"#widows%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99%E7%9A%84%E7%89%B9%E6%AE%8A%E5%88%A9%E7%94%A8%C2%A0\">widows系统文件命名规则的特殊利用 </a></p>\n<p id=\"%C2%A0%E4%BA%94%E3%80%81%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%A3%80%E6%B5%8B-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E4%BA%94%E3%80%81%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%A3%80%E6%B5%8B\"> 五、文件内容检测</a></p>\n<p id=\"%E2%91%A0%E6%96%87%E4%BB%B6%E5%A4%B4%E6%A3%80%E6%B5%8B-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%91%A0%E6%96%87%E4%BB%B6%E5%A4%B4%E6%A3%80%E6%B5%8B\">①文件头检测</a></p>\n<p id=\"%E2%91%A1shell%E6%A3%80%E6%B5%8B-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%91%A1shell%E6%A3%80%E6%B5%8B\">②shell检测</a></p>\n<p id=\"%E5%85%AD%E3%80%81%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%85%AD%E3%80%81%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89\">六、条件竞争</a></p>\n<p id=\"%E9%9D%B6%E5%9C%BA%E5%AE%9E%E6%88%98-toc\" style=\"margin-left:0px;\"><a href=\"#%E9%9D%B6%E5%9C%BA%E5%AE%9E%E6%88%98\">靶场实战</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<p>  </p>\n<h1 id=\"%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86\">文件上传漏洞原理</h1>\n<p>由于网站在对文件的上传功能中没有严格校验上传文件后缀和文件类型，导致上传的文件可以被解析成可执行的脚本文件（php、jsp、<a href=\"https://so.csdn.net/so/search?q=xml&amp;spm=1001.2101.3001.7020\" title=\"xml\">xml</a>、cer等文件），以来达到攻击者的攻击目的</p>\n<h1 id=\"%E5%B8%B8%E7%94%A8%E9%98%B2%E5%BE%A1%E6%96%B9%E5%BC%8F%E5%92%8C%E5%B8%B8%E7%94%A8%E9%98%B2%E5%BE%A1%E6%96%B9%E5%BC%8F%E7%9A%84%E7%BB%95%E8%BF%87\">常用防御方式和常用防御方式的绕过</h1>\n<h2 id=\"%E4%B8%80%E3%80%81%E5%89%8D%E7%AB%AFJS%E6%A3%80%E6%B5%8B\">一、前端JS检测</h2>\n<blockquote>\n<p>客户端前端在JavaScript代码中加入了对扩展名的黑白名单检查，我们可以直接禁用javasrcipt</p>\n</blockquote>\n<h2 id=\"%E4%BA%8C%E3%80%81MIME%E6%A3%80%E6%B5%8B\">二、MIME检测</h2>\n<blockquote>\n<p>MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种<a href=\"https://baike.baidu.com/item/%E6%89%A9%E5%B1%95%E5%90%8D/103577\" title=\"扩展名\">扩展名</a>的<a href=\"https://baike.baidu.com/item/%E6%96%87%E4%BB%B6/6270998\" title=\"文件\">文件</a>用一种<a href=\"https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/5985445\" title=\"应用程序\">应用程序</a>来打开的方式类型，当该扩展名文件被访问的时候，<a href=\"https://baike.baidu.com/item/%E6%B5%8F%E8%A7%88%E5%99%A8/213911\" title=\"浏览器\">浏览器</a>会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。</p>\n</blockquote>\n<p>常见图片MIME类型: <code>image/gif</code>, <code>image/png</code>, <code>image/jpeg</code>, <code>image/bmp</code>, <code>image/webp</code>, <code>image/x-icon</code>, <code>image/vnd.microsoft.icon</code></p>\n<p>服务端代码是通过Content-Type的值来判断文件的类型，这样我们可以直接对文件的Content-Type进行修改来绕过此防御方式。</p>\n<p>以PIKACHU平台漏洞为例：</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\ce0979f22c3e410e8bcd400cb3a1a41f.png\"/></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\eeed4e6f8e464bda8478450da9fd77d3.png\"/> </p>\n<p> </p>\n<p> 利用BP直接修改Content-Type值来绕过</p>\n<h2 id=\"%E4%B8%89%E3%80%81%E7%99%BD%E5%90%8D%E5%8D%95%E6%A3%80%E6%B5%8B\">三、白名单检测</h2>\n<blockquote>\n<p>要求只能是特定扩展名的文件才能上传</p>\n</blockquote>\n<h3 id=\"%2500%E6%88%AA%E6%96%AD\">%00截断</h3>\n<blockquote>\n<p>在url中%00表示ascll码的0 ，而ascii码的0，表示<a href=\"https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&amp;spm=1001.2101.3001.7020\" title=\"字符串\">字符串</a>结束，所以当url中出现%00时就会认为读取已结束</p>\n</blockquote>\n<p>注：需满足 php 版本&lt;5.3.4 才有可能存在此漏洞</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\ed028a7b8c7a415ab39f262051de4b34.png\"/></p>\n<p><code>simple.php%00.jpg--&gt;simple.php</code></p>\n<p><code>文件存储时的后缀名为.php是可以被解析成php文件的，从而实现绕过</code></p>\n<h3 id=\"0x00%E6%88%AA%E6%96%AD\">0x00截断</h3>\n<blockquote>\n<p>原理同%00截断原理相同</p>\n</blockquote>\n<p style=\"text-align:center;\">我们在BP中修改时，需要使用Hex模块，添加00<img alt=\"\" src=\"..\\..\\static\\image\\9535bf36cad64fc48031715102cb4fbe.png\"/></p>\n<p> 我这里添加个+号是方便识别的</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\bf3ba3c978b64f719b0b7062d3db62a2.png\"/></p>\n<p>将这个\"2b\"改为00并发送就可以成功绕过了</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\9e76410dd04540f096791bde591330b5.png\"/> </p>\n<p> </p>\n<h2 id=\"%C2%A0%E5%9B%9B%E3%80%81%E9%BB%91%E5%90%8D%E5%8D%95%E7%BB%95%E8%BF%87\"> 四、黑名单绕过</h2>\n<blockquote>\n<p>使用扩展名黑名单来限制上传文件类型</p>\n</blockquote>\n<h3 id=\"%E6%96%87%E4%BB%B6%E6%8B%93%E5%B1%95%E5%90%8D%E7%BB%95%E8%BF%87\">文件拓展名绕过</h3>\n<blockquote>\n<pre>Php除了可以解析php后缀 还可以解析php2，php3，php4 ，phtml\nAsp可解析 asa，cer,cdx\nAspx可解析 ashx，asmx，ascx\nJsp可解析jspx、jspf</pre>\n</blockquote>\n<p style=\"text-align:center;\"> <img alt=\"\" src=\"..\\..\\static\\image\\1f3c1d030a9c47bf86753096d8f12161.png\"/></p>\n<h3 id=\".htaccess%E6%96%87%E4%BB%B6%E7%BB%95%E8%BF%87%C2%A0\">.htaccess文件绕过 </h3>\n<blockquote>\n<p>概述来说，htaccess文件是<a href=\"https://baike.baidu.com/item/Apache\" title=\"Apache\">Apache</a>服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页<a href=\"https://baike.baidu.com/item/301%E9%87%8D%E5%AE%9A%E5%90%91\" title=\"301重定向\">301重定向</a>、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</p>\n</blockquote>\n<pre><code>AddType application/x-httpd-php .png(这里是你指定的文件后缀名)</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\bcdcfa407f1f420ba13bb1ad3c56b479.png\"/> </p>\n<h3 id=\"%C2%A0.user.ini.%E7%BB%95%E8%BF%87\"> .user.ini.绕过</h3>\n<blockquote>\n<p><code>.user.ini</code>文件里的意思是：所有的php文件都自动包含指定的文件</p>\n</blockquote>\n<pre><code>auto_prepend_file=test.jpg</code></pre>\n<p> 这个绕过方式前提是上传目录下要有可执行的php文件</p>\n<h3 id=\"apache%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E%C2%A0\">apache解析漏洞 </h3>\n<blockquote>\n<p>Apache按从右到左的顺序识别文件后缀，直至找到后缀能匹配配置文件中的设置。遇到不能识别的后缀名便跳过。</p>\n</blockquote>\n<p> shell.php.xxx将会被解析成php文件，可用来绕过黑名单过滤</p>\n<h3 id=\"%C2%A0IIS%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E\"> IIS解析漏洞</h3>\n<blockquote>\n<p><code>*.asa</code>、<code>*.asp</code>格式的文件夹时其目录下的文件都会当做asp文件解析。</p>\n<p>当文件名为<code>*.asp;1.jpg</code>时，IIS会以asp文件来解析，也就是说;起到了截断作用。</p>\n</blockquote>\n<h3 id=\"Nginx%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E%C2%A0\">Nginx解析漏洞 </h3>\n<blockquote>\n<p>在Nginx的服务器环境下，假如成功上传一张名为test.jpg的文件到网站，如果我们访问<code>/test.jpg/test.php</code>这个虚构的目录时服务器会直接将test.jpg作为php文件进行解析。</p>\n</blockquote>\n<h3 id=\"widows%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99%E7%9A%84%E7%89%B9%E6%AE%8A%E5%88%A9%E7%94%A8%C2%A0\">widows系统文件命名规则的特殊利用 </h3>\n<blockquote>\n<p>shell.php. ———-文件名后加点‘.’</p>\n<p>shell.php ———-文件名后加括号空格</p>\n<p>shell.php::$DATA ———-文件名后加::$DATA</p>\n</blockquote>\n<h2 id=\"%C2%A0%E4%BA%94%E3%80%81%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%A3%80%E6%B5%8B\"> 五、文件内容检测</h2>\n<h3 id=\"%E2%91%A0%E6%96%87%E4%BB%B6%E5%A4%B4%E6%A3%80%E6%B5%8B\">①文件头检测</h3>\n<p>我们可以制作图片马来绕过</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\d8ea2e1a35794a57956a7da40a2758d4.png\"/></p>\n<p> 或者在文件头部添加文件幻数</p>\n<pre><code>JPEG (jpg)，文件头：FFD8FF\nPNG (png)，文件头：89504E47\nGIF (gif)，文件头：47494638\nTIFF (tif)，文件头：49492A00\nWindows Bitmap (bmp)，文件头：424D\nCAD (dwg)，文件头：41433130\nAdobe Photoshop (psd)，文件头：38425053\nRich Text Format (rtf)，文件头：7B5C727466\nXML (xml)，文件头：3C3F786D6C\nHTML (html)，文件头：68746D6C3E\nEmail [thorough only] (eml)，文件头：44656C69766572792D646174653A\nOutlook Express (dbx)，文件头：CFAD12FEC5FD746F\nOutlook (pst)，文件头：2142444E\nMS Word/Excel (xls.or.doc)，文件头：D0CF11E0\nMS Access (mdb)，文件头：5374616E64617264204A\nWordPerfect (wpd)，文件头：FF575043\nAdobe Acrobat (pdf)，文件头：255044462D312E\nQuicken (qdf)，文件头：AC9EBD8F\nWindows Password (pwl)，文件头：E3828596\nZIP Archive (zip)，文件头：504B0304\nRAR Archive (rar)，文件头：52617221\nWave (wav)，文件头：57415645\nAVI (avi)，文件头：41564920\nReal Audio (ram)，文件头：2E7261FD\nReal Media (rm)，文件头：2E524D46\nMPEG (mpg)，文件头：000001BA\nMPEG (mpg)，文件头：000001B3\nQuicktime (mov)，文件头：6D6F6F76\nWindows Media (asf)，文件头：3026B2758E66CF11\nMIDI (mid)，文件头：4D546864\n</code></pre>\n<h3 id=\"%E2%91%A1shell%E6%A3%80%E6%B5%8B\">②shell检测</h3>\n<p>之前做过一道CTF题禁止了文件内容中出现&lt;?</p>\n<pre><code>&lt;script language=\"php\"&gt;eval($_POST['pass']);&lt;/script&gt;\n</code></pre>\n<p>可以用此来绕过</p>\n<h2 id=\"%E5%85%AD%E3%80%81%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89\">六、条件竞争</h2>\n<blockquote>\n<p>条件竞争漏洞（Race condition）官方概念是——竞争条件发生在多个线程同时访问同一个共享代码、变量、文件等没有进行锁操作或者同步操作的场景中。服务器对上传文件的操作大多数都是单线程处理，当我们执行多个线程时可以绕过一些服务器端的防御。</p>\n</blockquote>\n<p> 如：利用条件竞争绕过文件删除等等</p>\n<h1 id=\"%E9%9D%B6%E5%9C%BA%E5%AE%9E%E6%88%98\">靶场实战</h1>\n<p><a class=\"link-info\" href=\"https://blog.csdn.net/qq_62078839/article/details/123934409?spm=1001.2014.3001.5502\" title=\"PIKACHU\">PIKACHU</a></p>\n<p><a class=\"link-info\" href=\"https://blog.csdn.net/qq_62078839/article/details/123937573?spm=1001.2014.3001.5502\" title=\"DVWA\">DVWA</a></p>\n<p><a class=\"link-info\" href=\"https://blog.csdn.net/qq_62078839/article/details/123969653?spm=1001.2014.3001.5502\" title=\"upload-labs上(1-12)\">upload-labs上(1-12)</a></p>\n<p><a class=\"link-info\" href=\"https://blog.csdn.net/qq_62078839/article/details/123971097?spm=1001.2014.3001.5502\" title=\"upload-labs下(13-21)\">upload-labs下(13-21)</a></p>\n</div>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 1, "time": "2022-04-07 22:30:04", "summary": "目录文件上传漏洞原理常用防御方式和常用防御方式的绕过一、前端检测二、检测三、白名单检测截断截断四、黑名单绕过文件拓展名绕过文件绕过绕过解析漏洞解析漏洞解析漏洞系统文件命名规则的特殊利用五、文件内容检测"}