{"blogid": "126728009", "writerAge": "码龄4年", "writerBlogNum": "453", "writerCollect": "6832", "writerComment": "278", "writerFan": "8175", "writerGrade": "8级", "writerIntegral": "38319", "writerName": "cui_yonghua", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126728009.jpg", "writerRankTotal": "131", "writerRankWeekly": "654", "writerThumb": "1351", "writerVisitNum": "4533944", "blog_read_count": "212", "blog_time": "于 2022-09-06 20:10:06 发布", "blog_title": "C++经典41问（2个小时快速掌握C++）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h3><a id=\"1_C_1\"></a>1. 简单介绍一下C++</h3>\n<p>C++ 是一种静态类型的、编译式的、通用的、大小写敏感的、不规则的编程语言，支持面向过程编程、面向对象编程和泛型编程。</p>\n<p>C++ 被认为是一种中级语言，它综合了高级语言和低级语言的特点。</p>\n<p>C++ 是由 Bjarne Stroustrup（C++之父） 于 1979 年在新泽西州美利山贝尔实验室开始设计开发的。C++ 进一步扩充和完善了 C 语言，最初命名为带类的C，后来在 1983 年更名为 C++。</p>\n<p>C++ 是 C 的一个超集，事实上，任何合法的 C 程序都是合法的 C++ 程序。</p>\n<blockquote>\n<p>注意：使用静态类型的编程语言是在编译时执行类型检查，而不是在运行时执行类型检查。</p>\n</blockquote>\n<h3><a id=\"2_C_12\"></a>2. C++支持面向对象设计吗？</h3>\n<p>C++ 完全支持面向对象的程序设计，包括面向对象开发的四大特性：封装<br/> 、抽象、继承、多态</p>\n<h3><a id=\"3_C_16\"></a>3. C++由哪些部分组成？</h3>\n<p>标准的 C++ 由三个重要部分组成：</p>\n<ul><li><code>核心语言</code>，提供了所有构件块，包括变量、数据类型和常量，等等。</li><li><code>C++ 标准库</code>，提供了大量的函数，用于操作文件、字符串等。</li><li><code>标准模板库（STL）</code>，提供了大量的方法，用于操作数据结构等。</li></ul>\n<h3><a id=\"4_ANSI__23\"></a>4. 什么是ANSI 标准？</h3>\n<p>ANSI 标准是为了确保 C++ 的便携性 —— 您所编写的代码在 Mac、UNIX、Windows、Alpha 计算机上都能通过编译。</p>\n<p>由于 ANSI 标准已稳定使用了很长的时间，所有主要的 C++ 编译器的制造商都支持 ANSI 标准。</p>\n<h3><a id=\"5__C_28\"></a>5. 你是如何理解和学习 C++的？</h3>\n<p>学习 C++，关键是要理解概念，而不应过于深究语言的技术细节。</p>\n<p>学习程序设计语言的目的是为了成为一个更好的程序员，也就是说，是为了能更有效率地设计和实现新系统，以及维护旧系统。</p>\n<p>C++ 支持多种编程风格。您可以使用 Fortran、C、Smalltalk 等任意一种语言的编程风格来编写代码。每种风格都能有效地保证运行时间效率和空间效率。</p>\n<h3><a id=\"6_C_35\"></a>6. C++主要用来做什么？</h3>\n<p>基本上每个应用程序领域的程序员都有使用 C++。</p>\n<ul><li>C++ 通常用于编写设备驱动程序和其他要求实时性的直接操作硬件的软件。</li><li>C++ 广泛用于教学和研究。</li><li>任何一个使用苹果电脑或 Windows PC 机的用户都在间接地使用 C++，因为这些系统的主要用户接口是使用 C++ 编写的。</li></ul>\n<h3><a id=\"7_C_41\"></a>7. 什么是源文件，C++源文件的拓展名有哪些？</h3>\n<p>通过编辑器创建的文件通常称为源文件，源文件包含程序源代码。C++ 程序的源文件通常使用扩展名 .cpp、.cp 或 .c。</p>\n<h3><a id=\"8_C_44\"></a>8 什么是编译器，C++常用的编译器是什么？</h3>\n<p>写在源文件中的源代码是人类可读的源。它需要\"编译\"，转为机器语言，这样 CPU 可以按给定指令执行程序。<code>C++ 编译器用于把源代码编译成最终的可执行程序。</code></p>\n<p>最常用的免费可用的编译器是 <strong>GNU 的 C/C++ 编译器</strong>，主要是因为 GNU 的 gcc 编译器适合于 C 和 C++ 编程语言。</p>\n<blockquote>\n<p>检查系统上是否安装了 GCC：<code>g++ -v</code><br/> 注，编译器的安装可参考：<br/> UNIX/Linux 上的安装：<a href=\"http://gcc.gnu.org/install/\">http://gcc.gnu.org/install/</a><br/> Mac OS X 上的安装：<a href=\"https://developer.apple.com/technologies/tools/\">https://developer.apple.com/technologies/tools/ </a><br/> Windows 上的安装：<a href=\"https://www.mingw.org\">https://www.mingw.org</a></p>\n</blockquote>\n<h3><a id=\"9__55\"></a>9. 什么是类、对象，方法、即时变量?</h3>\n<ul><li><strong>对象</strong> - 对象具有状态和行为。例如：一只狗的状态 - 颜色、名称、品种，行为 - 摇动、叫唤、吃。对象是类的实例。</li><li><strong>类</strong> - 类可以定义为描述对象行为/状态的模板/蓝图。</li><li><strong>方法</strong> - 从基本上说，一个方法表示一种行为。一个类可以包含多个方法。可以在方法中写入逻辑、操作数据以及执行所有的动作。</li><li><strong>即时变量</strong> - 每个对象都有其独特的即时变量。对象的状态是由这些即时变量的值创建的。</li></ul>\n<h3><a id=\"10____C__61\"></a>10. 编译 &amp; 执行 C++ 程序有哪些步骤？</h3>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span> \n</code></pre>\n<p>简单的步骤：<br/> 1、打开一个文本编辑器，添加上述代码。<br/> 2、保存文件为 hello.cpp。<br/> 3、打开命令提示符，进入到保存文件所在的目录。<br/> 4、键入 <code>g++ hello.cpp </code>，输入回车，编译代码。如果代码中没有错误，命令。<br/> 5、提示符会跳到下一行，并生成 a.out 可执行文件。<br/> 6、现在，键入 <code>./a.out</code> 来运行程序。就可以看到终端屏幕上显示 ’ Hello World '。<br/> 执行如下：</p>\n<pre><code class=\"prism language-cpp\">$ g<span class=\"token operator\">++</span> hello<span class=\"token punctuation\">.</span>cpp\n$ <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>a<span class=\"token punctuation\">.</span>out\nHello World\n</code></pre>\n<h3><a id=\"11_C____89\"></a>11. 怎么理解C++ 中的分号 和 块</h3>\n<p>在 C++ 中：</p>\n<ul><li><strong>分号</strong>是语句结束符。也就是说，每个语句必须以分号结束。它表明一个逻辑实体的结束。</li><li><strong>块</strong>是一组使用大括号括起来的按逻辑连接的语句。</li></ul>\n<h3><a id=\"12_C_94\"></a>12. 什么是标识符，C++是怎么规定标识符的？</h3>\n<p><strong><code>标识符</code></strong> 是用来标识变量、函数、类、模块，或任何其他用户自定义项目的名称。一个标识符以字母 A-Z 或 a-z 或下划线 _ 开始，后跟零个或多个字母、下划线和数字（0-9）。</p>\n<p>C++ 标识符内<code>不允许出现标点字符</code>，比如 @、$ 和 %。C++ 是区分大小写的编程语言。因此，在 C++ 中，Manpower 和 manpower 是两个不同的标识符。</p>\n<h3><a id=\"13__C__99\"></a>13. 基本的 C++ 数据类型有哪些？</h3>\n<p>C++ 为程序员提供了种类丰富的内置数据类型和用户自定义的数据类型。七种基本的 C++ 数据类型：</p>\n<ol><li><code>布尔型 bool</code>：存储值 true 或 false。</li><li><code>字符型 char</code>：通常是一个八位字节（一个字节）。这是一个整数类型。</li><li><code>整型 int</code>：对机器而言，整数的最自然的大小。</li><li><code>浮点型 float</code>：单精度浮点值。</li><li><code>双浮点型 double</code>：双精度浮点值。</li><li><code>无类型 void</code>：表示类型的缺失。</li><li><code>宽字符型 wchar_t</code>：宽字符类型。</li></ol>\n<p>一些基本类型可以使用一个或多个类型修饰符进行修饰：<code>signed</code>、<code>unsigned</code>、<code>short</code>、<code>long</code></p>\n<p>注：变量的大小会根据编译器和所使用的电脑而有所不同。下面实例会输出电脑上各种数据类型的大小。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// // endl是将在每一行后插入一个换行符，sizeof() 函数来获取各种数据类型的大小</span>\n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Size of char : \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> \n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Size of int : \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Size of short int : \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Size of long int : \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Size of float : \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Size of double : \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Size of wchar_t : \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">wchar_t</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>C++ 也允许定义各种其他类型的变量，比如枚举、指针、数组、引用、数据结构、类等等</p>\n<h3><a id=\"14_typedef__132\"></a>14. 什么是typedef 声明？</h3>\n<p>您可以使用 typedef 为一个已有的类型取一个新的名字。下面是使用 typedef 定义一个新类型的语法：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">typedef</span> type newname<span class=\"token punctuation\">;</span> \n</code></pre>\n<p>例如，下面的语句会告诉编译器，feet 是 int 的另一个名称：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> feet<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>现在，下面的声明是完全合法的，它创建了一个整型变量 distance：</p>\n<pre><code class=\"prism language-cpp\">feet distance<span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"15__148\"></a>15. 什么是枚举类型？举例说明</h3>\n<p>枚举类型声明一个可选的类型名称和一组标识符，用来作为该类型的值。其带有零个或多个标识符可以被用来作为该类型的值。每个枚举数是一个枚举类型的常数。</p>\n<p>创建枚举，需要使用关键字 enum。枚举类型的一般形式为：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">enum</span> <span class=\"token keyword\">enum</span><span class=\"token operator\">-</span>name <span class=\"token punctuation\">{<!-- --></span> list of names <span class=\"token punctuation\">}</span> var<span class=\"token operator\">-</span>list<span class=\"token punctuation\">;</span> \n</code></pre>\n<p>enum-name 是枚举类型的名称。名称列表 { list of names } 是用逗号分隔的。</p>\n<p>例如，下面的代码定义了一个颜色枚举，变量 c 的类型为 color。最后，c 被赋值为 “blue”。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">color</span> <span class=\"token punctuation\">{<!-- --></span> red<span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">,</span> blue <span class=\"token punctuation\">}</span> c<span class=\"token punctuation\">;</span>\nc <span class=\"token operator\">=</span> blue<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>默认情况下，第一个名称的值为 0，第二个名称的值为 1，第三个名称的值为 2，以此类推。但是，您也可以给名称赋予一个特殊的值，只需要添加一个初始值即可。例如，在下面的枚举中，green 的值为 5。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">color</span> <span class=\"token punctuation\">{<!-- --></span> red<span class=\"token punctuation\">,</span> green<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> blue <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>在这里，blue 的值为 6，因为默认情况下，每个名称都会比它前面一个名称大 1。</p>\n<h3><a id=\"16_C__169\"></a>16. 怎么理解C++ 中的变量定义和变量声明</h3>\n<p><code>变量定义：</code>就是告诉编译器在何处创建变量的存储，以及如何创建变量的存储。变量定义指定一个数据类型，并包含了该类型的一个或多个变量的列表。下面列举几个实例：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> f <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// d 和 f 的声明 </span>\n<span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> f <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 定义并初始化 d 和 f</span>\nbyte z <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// 定义并初始化 z</span>\n<span class=\"token keyword\">char</span> x <span class=\"token operator\">=</span> <span class=\"token char\">'x'</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// 变量 x 的值为 'x'</span>\n</code></pre>\n<p><code>变量声明：</code><strong>向编译器保证变量以给定的类型和名称存在，这样编译器在不需要知道变量完整细节的情况下也能继续进一步的编译。变量声明只在编译时有它的意义，在程序连接时编译器需要实际的变量声明。</strong><code>可以使用 extern 关键字在任何地方声明一个变量。</code></p>\n<p>虽然您可以在 C++ 程序中多次声明一个变量，但变量只能在某个文件、函数或代码块中被定义一次。下面的实例，其中，变量在头部就已经被声明，但它们是在主函数内被定义和初始化的：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 变量声明</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">;</span>\n  \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 变量定义</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">;</span>\n \n    <span class=\"token comment\">// 实际初始化</span>\n    a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n \n    cout <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl <span class=\"token punctuation\">;</span>\n    f <span class=\"token operator\">=</span> <span class=\"token number\">70.0</span><span class=\"token operator\">/</span><span class=\"token number\">3.0</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> f <span class=\"token operator\">&lt;&lt;</span> endl <span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n</code></pre>\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token number\">30</span>\n<span class=\"token number\">23.3333</span>\n</code></pre>\n<h3><a id=\"17_C_LvaluesRvalues_216\"></a>17. 怎么理解C++ 中的左值（Lvalues）和右值（Rvalues）</h3>\n<p>C++ 中有两种类型的表达式：</p>\n<ul><li><code>左值（lvalue）</code>：指向内存位置的表达式被称为左值（lvalue）表达式。左值可以出现在赋值号的左边或右边。</li><li><code>右值（rvalue）</code>：术语右值（rvalue）指的是存储在内存中某些地址的数值。右值是不能对其进行赋值的表达式，也就是说，右值可以出现在赋值号的右边，但不能出现在赋值号的左边。</li></ul>\n<p>变量是左值，因此可以出现在赋值号的左边。数值型的字面值是右值，因此不能被赋值，不能出现在赋值号的左边。如：<br/> 一个有效的语句：<code>int g = 20;</code><br/> 一个无效的语句：<code>10 = 20;</code>，会生成编译时错误。</p>\n<h3><a id=\"18__225\"></a>18. 什么是作用作用域？哪些地方可以声明变量？</h3>\n<p>作用域是程序的一个区域，一般来说有三个地方可以声明变量：</p>\n<ul><li>在函数或一个代码块内部声明的变量，称为<code>局部变量</code>。</li><li>在函数参数的定义中声明的变量，称为<code>形式参数</code>。</li><li>在所有函数外部声明的变量，称为<code>全局变量</code>。</li></ul>\n<h3><a id=\"19__231\"></a>19. 什么是常量？</h3>\n<ol><li><code>常量是固定值</code>，在程序执行期间不会改变。这些固定的值，又叫做字面量。</li><li><code>常量可以是任何的基本数据类型</code>，可分为整型数字、浮点数字、字符、字符串和布尔值。</li><li><code>常量就像是常规的变量</code>，只不过常量的值在定义后不能进行修改。</li></ol>\n<h3><a id=\"20__236\"></a>20. 整数常量可以是哪些形式?</h3>\n<p>整数常量 <code>可以是十进制、八进制或十六进制的常量</code>。前缀指定基数：0x 或 0X 表示十六进制，0 表示八进制，不带前缀则默认表示十进制。</p>\n<p>整数常量 <code>也可以带一个后缀，后缀是 U 和 L 的组合</code>，U 表示无符号整数（unsigned），L 表示长整数（long）。后缀可以是大写，也可以是小写，U 和 L 的顺序任意。</p>\n<p>下面列举几个整数常量的实例：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token number\">212</span>         <span class=\"token comment\">// 合法的</span>\n<span class=\"token number\">215u</span>        <span class=\"token comment\">// 合法的</span>\n<span class=\"token number\">0xFeeL</span>      <span class=\"token comment\">// 合法的</span>\n<span class=\"token number\">078</span>         <span class=\"token comment\">// 非法的：8 不是八进制的数字</span>\n<span class=\"token number\">032UU</span>       <span class=\"token comment\">// 非法的：不能重复后缀</span>\n</code></pre>\n<p>以下是各种类型的整数常量的实例：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token number\">85</span>         <span class=\"token comment\">// 十进制</span>\n<span class=\"token number\">0213</span>       <span class=\"token comment\">// 八进制 </span>\n<span class=\"token number\">0x4b</span>       <span class=\"token comment\">// 十六进制 </span>\n<span class=\"token number\">30</span>         <span class=\"token comment\">// 整数 </span>\n<span class=\"token number\">30u</span>        <span class=\"token comment\">// 无符号整数 </span>\n<span class=\"token number\">30l</span>        <span class=\"token comment\">// 长整数 </span>\n<span class=\"token number\">30ul</span>       <span class=\"token comment\">// 无符号长整数</span>\n</code></pre>\n<h3><a id=\"21_C_261\"></a>21. C++的修饰符类型有哪些？</h3>\n<p>数据类型修饰符有：<code>signed、unsigned、long、short</code></p>\n<ul><li>修饰符 signed、unsigned、long 和 short 可应用于整型，</li><li>signed 和 unsigned 可应用于字符型，</li><li>long 可应用于双精度型。</li></ul>\n<h3><a id=\"22__267\"></a>22. 类型限定符有哪些？</h3>\n<p>类型限定符提供了变量的额外信息。</p>\n<ul><li><code>const</code> const 类型的对象在程序执行期间不能被修改改变。</li><li><code>volatile</code> 修饰符 volatile 告诉编译器，变量的值可能以程序未明确指定的方式被改变。</li><li><code>restrict</code> 由 restrict 修饰的指针是唯一一种访问它所指向的对象的方式。只有 C99 增加了新的类型限定符 restrict。</li></ul>\n<h3><a id=\"23_C__273\"></a>23. C++ 程序中可用的存储类有哪些？</h3>\n<p>存储类定义 C++ 程序中变量/函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前。下面列出 C++ 程序中可用的存储类：<br/> <code>auto</code>：auto 存储类是所有局部变量默认的存储类。<br/> <code>register</code>：register 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。<br/> <code>static</code>：static 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。</p>\n<blockquote>\n<p>使用 static 修饰局部变量时，可以在函数调用之间保持局部变量的值。<br/> 使用 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。</p>\n</blockquote>\n<p><code>extern</code>：extern 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。extern 修饰符通常用于当有两个或多个文件共享相同的全局变量或函数的时候<br/> <code>mutable</code>：它允许对象的成员替代常量。也就是说，mutable 成员可以通过 const 成员函数修改。</p>\n<h3><a id=\"24_C_284\"></a>24. C++的类型的运算符有哪些？</h3>\n<p>C++ 内置了丰富的运算符，并提供了以下类型的运算符：</p>\n<ul><li>算术运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>位运算符</li><li>赋值运算符</li><li>杂项运算符</li></ul>\n<h3><a id=\"25__293\"></a>25. 怎么理解函数声明和函数定义</h3>\n<p><strong>函数声明</strong>告诉编译器函数的名称、返回类型和参数。<strong>函数定义</strong>提供了函数的实际主体。</p>\n<p>C++ 标准库提供了大量的程序可以调用的内置函数。例如，函数 <code>strcat()</code> 用来连接两个字符串，函数 <code>memcpy()</code> 用来复制内存到另一个位置。</p>\n<p>函数还有很多叫法，比如方法、子例程或程序，等等。</p>\n<h3><a id=\"26__300\"></a>26. 传值调用、指针调用和引用调用的区别？</h3>\n<p><code>传值调用</code> 该方法把参数的实际值复制给函数的形式参数。在这种情况下，<strong>修改函数内的形式参数对实际参数没有影响。</strong><br/> <code>指针调用</code> 该方法把参数的地址复制给形式参数。在函数内，该地址用于访问调用中要用到的实际参数。这意味着，<strong>修改形式参数会影响实际参数</strong>。<br/> <code>引用调用</code> 该方法把参数的引用复制给形式参数。在函数内，该引用用于访问调用中要用到的实际参数。这意味着，<strong>修改形式参数会影响实际参数</strong>。</p>\n<p>默认情况下，C++ 使用传值调用来传递参数。</p>\n<h3><a id=\"27_C__308\"></a>27. C++ 中有用的内置的数学函数有哪些？</h3>\n<p>C++ 内置了丰富的数学函数，可对各种数字进行运算。需要引用数学头文件 。如：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token comment\">// 数字定义</span>\n   <span class=\"token keyword\">short</span>  s <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">int</span>    i <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">long</span>   l <span class=\"token operator\">=</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">float</span>  f <span class=\"token operator\">=</span> <span class=\"token number\">230.47</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token number\">200.374</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// 数学运算</span>\n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"sin(d) :\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"abs(i)  :\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"floor(d) :\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"sqrt(f) :\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"pow( d, 2) :\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n \n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token operator\">-</span><span class=\"token number\">0.634939</span>\n<span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>  <span class=\"token operator\">:</span><span class=\"token number\">1000</span>\n<span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token number\">200</span>\n<span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token number\">15.1812</span>\n<span class=\"token function\">pow</span><span class=\"token punctuation\">(</span> d<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token number\">40149.7</span>\n</code></pre>\n<h3><a id=\"28_C_344\"></a>28. C++随机数需要用到哪些函数？</h3>\n<p>关于随机数生成器，有两个相关的函数。一个是 rand()，该函数只返回一个伪随机数。生成随机数之前必须先调用 srand() 函数。</p>\n<p>下面是一个关于生成随机数的简单实例。实例中使用了 time() 函数来获取系统时间的秒数，通过调用 rand() 函数来生成随机数：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctime&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdlib&gt;</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 设置种子</span>\n    <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span><span class=\"token punctuation\">)</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* 生成 5 个随机数 */</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 生成实际的随机数</span>\n        j<span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"随机数： \"</span> <span class=\"token operator\">&lt;&lt;</span> j <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n</code></pre>\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\n<pre><code class=\"prism language-cpp\">随机数： <span class=\"token number\">68430273</span>\n随机数： <span class=\"token number\">1203847166</span>\n随机数： <span class=\"token number\">1615880575</span>\n随机数： <span class=\"token number\">1026624063</span>\n随机数： <span class=\"token number\">1587006843</span>\n</code></pre>\n<h3><a id=\"29__381\"></a>29. 数组初始化及访问</h3>\n<p>C++ 支持数组数据结构，它可以存储一个固定大小的相同类型元素的顺序集合。数组是用来存储一系列数据，但它往往被认为是一系列相同类型的变量。</p>\n<p>案例：声明数组、数组赋值、访问数组：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n \n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iomanip&gt;</span></span>\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>setw<span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">[</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// n 是一个包含 10 个整数的数组</span>\n    <span class=\"token comment\">// 初始化数组元素          </span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        n<span class=\"token punctuation\">[</span> i <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置元素 i 为 i + 100</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Element\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span> <span class=\"token number\">13</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Value\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 输出数组中每个元素的值                     </span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span> <span class=\"token number\">7</span> <span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span> j <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span> <span class=\"token number\">13</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> n<span class=\"token punctuation\">[</span> j <span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上面的程序使用了 setw() 函数来格式化输出。当上面的代码被编译和执行时，它会产生下列结果：</p>\n<pre><code class=\"prism language-cpp\">Element        Value\n      <span class=\"token number\">0</span>          <span class=\"token number\">100</span>\n      <span class=\"token number\">1</span>          <span class=\"token number\">101</span>\n      <span class=\"token number\">2</span>          <span class=\"token number\">102</span>\n      <span class=\"token number\">3</span>          <span class=\"token number\">103</span>\n      <span class=\"token number\">4</span>          <span class=\"token number\">104</span>\n      <span class=\"token number\">5</span>          <span class=\"token number\">105</span>\n      <span class=\"token number\">6</span>          <span class=\"token number\">106</span>\n      <span class=\"token number\">7</span>          <span class=\"token number\">107</span>\n      <span class=\"token number\">8</span>          <span class=\"token number\">108</span>\n      <span class=\"token number\">9</span>          <span class=\"token number\">109</span>\n</code></pre>\n<h3><a id=\"30_C_423\"></a>30. C++字符串表示形式有哪些？</h3>\n<p>C++ 提供了以下两种类型的字符串表示形式：</p>\n<ul><li>C 风格字符串</li><li>C++ 引入的 string 类类型</li></ul>\n<h3><a id=\"31_C__String__428\"></a>31. C++ 中的 String 类类型有哪些方法</h3>\n<p>C++ 标准库提供了 string 类类型，可以复制，连接，查看字符串长度等。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    string str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span>\n    string str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"World\"</span><span class=\"token punctuation\">;</span>\n    string str3<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span>  len <span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 复制 str1 到 str3</span>\n    str3 <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"str3 : \"</span> <span class=\"token operator\">&lt;&lt;</span> str3 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> \n\n    <span class=\"token comment\">// 连接 str1 和 str2</span>\n    str3 <span class=\"token operator\">=</span> str1 <span class=\"token operator\">+</span> str2<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"str1 + str2 : \"</span> <span class=\"token operator\">&lt;&lt;</span> str3 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 连接后，str3 的总长度</span>\n    len <span class=\"token operator\">=</span> str3<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"str3.size() :  \"</span> <span class=\"token operator\">&lt;&lt;</span> len <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n</code></pre>\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\n<pre><code class=\"prism language-cpp\">str3 <span class=\"token operator\">:</span> Hello\nstr1 <span class=\"token operator\">+</span> str2 <span class=\"token operator\">:</span> HelloWorld\nstr3<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>  <span class=\"token number\">10</span>\n</code></pre>\n<h3><a id=\"32__465\"></a>32. 什么是指针？</h3>\n<p>指针是一个变量，其值为另一个变量的地址，即，内存位置的直接地址。就像其他变量或常量一样，您必须在使用指针存储其他变量地址之前，对其进行声明。指针变量声明的一般形式为：<code>type *var-name;</code></p>\n<p>在这里，type 是指针的基类型，它必须是一个有效的 C++ 数据类型，var-name 是指针变量的名称。用来声明指针的星号 * 与乘法中使用的星号是相同的。但是，在这个语句中，星号是用来指定一个变量是指针。以下是有效的指针声明：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span>    <span class=\"token operator\">*</span>ip<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* 一个整型的指针 */</span>\n<span class=\"token keyword\">double</span> <span class=\"token operator\">*</span>dp<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* 一个 double 型的指针 */</span>\n<span class=\"token keyword\">float</span>  <span class=\"token operator\">*</span>fp<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* 一个浮点型的指针 */</span>\n<span class=\"token keyword\">char</span>   <span class=\"token operator\">*</span>ch<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* 一个字符型的指针 */</span>\n</code></pre>\n<p>所有指针的值的实际数据类型，不管是整型、浮点型、字符型，还是其他的数据类型，都是一样的，都是一个代表内存地址的长的十六进制数。不同数据类型的指针之间唯一的不同是，指针所指向的变量或常量的数据类型不同。</p>\n<h3><a id=\"33_C__478\"></a>33. C++ 中使用指针需要进行的操作</h3>\n<p><strong>使用指针时会频繁进行以下几个操作</strong>：<code>定义一个指针变量、把变量地址赋值给指针、访问指针变量中可用地址的值。</code>这些是通过使用一元运算符 * 来返回位于操作数所指定地址的变量的值。下面的实例涉及到了这些操作：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span>  var <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 实际变量的声明</span>\n    <span class=\"token keyword\">int</span>  <span class=\"token operator\">*</span>ip<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 指针变量的声明</span>\n\n    ip <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>var<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 在指针变量中存储 var 的地址</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Value of var variable: \"</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> var <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 输出在指针变量中存储的地址</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Address stored in ip variable: \"</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> ip <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 访问指针中地址的值</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Value of *ip variable: \"</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>ip <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\n<pre><code class=\"prism language-cpp\">Value of var variable<span class=\"token operator\">:</span> <span class=\"token number\">20</span>\nAddress stored in ip variable<span class=\"token operator\">:</span> <span class=\"token number\">0xbfc601ac</span>\nValue of <span class=\"token operator\">*</span>ip variable<span class=\"token operator\">:</span> <span class=\"token number\">20</span>\n</code></pre>\n<h3><a id=\"34_C__512\"></a>34. C++ 引用是什么？</h3>\n<p>引用变量是一个别名，也就是说，它是某个已存在变量的另一个名字。一旦把引用初始化为某个变量，就可以使用该引用名称或变量名称来指向变量。</p>\n<h3><a id=\"35_C____515\"></a>35. C++ 引用 和 指针的区别？</h3>\n<p>引用很容易与指针混淆，它们之间有三个主要的不同：</p>\n<ul><li><code>不存在空引用</code>。引用必须连接到一块合法的内存。</li><li><code>一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向到另一个对象。</code></li><li><code>引用必须在创建时被初始化。指针可以在任何时间被初始化</code>。</li></ul>\n<h3><a id=\"36_C__521\"></a>36. C++ 中怎么创建引用？</h3>\n<p><strong>可以通过原始变量名称或引用来访问变量的内容</strong>。例如：<br/> 在这些声明中，&amp; 读作引用。因此，<br/> 第一个声明可以读作 “<code>r 是一个初始化为 i 的整型引用</code>”，<br/> 第二个声明可以读作 “<code>s 是一个初始化为 d 的 double 型引用</code>”。引用通常用于函数参数列表和函数返回值。下面的实例使用了 int 和 double 引用：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 声明简单的变量</span>\n    <span class=\"token keyword\">int</span>    i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> d<span class=\"token punctuation\">;</span> \n    <span class=\"token comment\">// 声明引用变量</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span>    r <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span> s <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span>\n \n    i <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Value of i : \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Value of i reference : \"</span> <span class=\"token operator\">&lt;&lt;</span> r  <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n \n    d <span class=\"token operator\">=</span> <span class=\"token number\">11.7</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Value of d : \"</span> <span class=\"token operator\">&lt;&lt;</span> d <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Value of d reference : \"</span> <span class=\"token operator\">&lt;&lt;</span> s  <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n   \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\n<pre><code class=\"prism language-cpp\">Value of i <span class=\"token operator\">:</span> <span class=\"token number\">5</span>\nValue of i reference <span class=\"token operator\">:</span> <span class=\"token number\">5</span>\nValue of d <span class=\"token operator\">:</span> <span class=\"token number\">11.7</span>\nValue of d reference <span class=\"token operator\">:</span> <span class=\"token number\">11.7</span>\n</code></pre>\n<h3><a id=\"37_C_____559\"></a>37. C++ 日期 &amp; 时间 处理</h3>\n<p>C++ 标准库没有提供所谓的日期类型。C++ 继承了 C 语言用于日期和时间操作的结构和函数。为了使用日期和时间相关的函数和结构，需要在 C++ 程序中引用 头文件。</p>\n<p>有四个与时间相关的类型：clock_t、time_t、size_t 和 tm。类型 clock_t、size_t 和 time_t 能够把系统时间和日期表示为某种整数。</p>\n<p>结构类型 tm 把日期和时间以 C 结构的形式保存，tm 结构的定义如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> tm_sec<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 秒，正常范围从 0 到 59，但允许至 61</span>\n    <span class=\"token keyword\">int</span> tm_min<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 分，范围从 0 到 59</span>\n    <span class=\"token keyword\">int</span> tm_hour<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 小时，范围从 0 到 23</span>\n    <span class=\"token keyword\">int</span> tm_mday<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 一月中的第几天，范围从 1 到 31</span>\n    <span class=\"token keyword\">int</span> tm_mon<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 月，范围从 0 到 11</span>\n    <span class=\"token keyword\">int</span> tm_year<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 自 1900 年起的年数</span>\n    <span class=\"token keyword\">int</span> tm_wday<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 一周中的第几天，范围从 0 到 6，从星期日算起</span>\n    <span class=\"token keyword\">int</span> tm_yday<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 一年中的第几天，范围从 0 到 365，从 1 月 1 日算起</span>\n    <span class=\"token keyword\">int</span> tm_isdst<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 夏令时</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>tm 结构在 C/C++ 中处理日期和时间相关的操作时，显得尤为重要。tm 结构以 C 结构的形式保存日期和时间。大多数与时间相关的函数都使用了 tm 结构。下面的实例使用了 tm 结构和各种与日期和时间相关的函数。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctime&gt;</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 基于当前系统的当前日期/时间</span>\n    time_t now <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"1970年1月1日到目前经过的秒数:\"</span> <span class=\"token operator\">&lt;&lt;</span> now <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    tm <span class=\"token operator\">*</span>ltm <span class=\"token operator\">=</span> <span class=\"token function\">localtime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 输出 tm 结构的各个组成部分</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"年: \"</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1900</span> <span class=\"token operator\">+</span> ltm<span class=\"token operator\">-&gt;</span>tm_year <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"月: \"</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> ltm<span class=\"token operator\">-&gt;</span>tm_mon<span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"日: \"</span><span class=\"token operator\">&lt;&lt;</span>  ltm<span class=\"token operator\">-&gt;</span>tm_mday <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"时间: \"</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> ltm<span class=\"token operator\">-&gt;</span>tm_hour <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> ltm<span class=\"token operator\">-&gt;</span>tm_min <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> ltm<span class=\"token operator\">-&gt;</span>tm_sec <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n</code></pre>\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token number\">1970</span>年<span class=\"token number\">1</span>月<span class=\"token number\">1</span>日到目前经过的秒数<span class=\"token operator\">:</span><span class=\"token number\">1524456057</span>\n年<span class=\"token operator\">:</span> <span class=\"token number\">2018</span>\n月<span class=\"token operator\">:</span> <span class=\"token number\">4</span>\n日<span class=\"token operator\">:</span> <span class=\"token number\">23</span>\n时间<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">58</span>\n</code></pre>\n<h3><a id=\"38__IO__612\"></a>38. 常见的 I/O 操作有哪些？</h3>\n<p>C++ 标准库提供了一组丰富的输入/输出功能：<br/> <code>输入操作</code>：C++ 的 I/O 发生在流中，流是字节序列。如果字节流是从设备（如键盘、磁盘驱动器、网络连接等）流向内存。<br/> <code>输出操作</code>：如果字节流是从内存流向设备（如显示屏、打印机、磁盘驱动器、网络连接等）。</p>\n<h3><a id=\"39_IO__617\"></a>39. I/O 库头文件</h3>\n<p>下列的头文件在 C++ 编程中很重要。</p>\n<p>头文件 函数和描述</p>\n<p><code>&lt;iostream&gt;</code>：该文件定义了 cin、cout、cerr 和 clog 对象，分别对应于标准输入流、标准输出流、非缓冲标准错误流和缓冲标准错误流。<br/> <code>&lt;iomanip&gt;</code>： 该文件通过所谓的参数化的流操纵器（比如 setw 和 setprecision），来声明对执行标准化 I/O 有用的服务。<br/> <code>&lt;fstream&gt;</code>： 该文件为用户控制的文件处理声明服务。</p>\n<h3><a id=\"40__626\"></a>40. 如何访问结构成员？</h3>\n<p>为了访问结构的成员，我们使用成员访问运算符（.）。成员访问运算符是结构变量名称和我们要访问的结构成员之间的一个句号。可以使用 struct 关键字来定义结构类型的变量。下面的实例演示了结构的用法：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring&gt;</span></span>\n \n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Books</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> author<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> subject<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> book_id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Books</span> Book1<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 声明 Book1，类型为 Book</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Books</span> Book2<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 声明 Book2，类型为 Book</span>\n \n    <span class=\"token comment\">// Book1 详述</span>\n    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> Book1<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Learn C++ Programming\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> Book1<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Chand Miyan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> Book1<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">,</span> <span class=\"token string\">\"C++ Programming\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Book1<span class=\"token punctuation\">.</span>book_id <span class=\"token operator\">=</span> <span class=\"token number\">6495407</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Book2 详述</span>\n    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> Book2<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Telecom Billing\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> Book2<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Yakit Singha\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> Book2<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Telecom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Book2<span class=\"token punctuation\">.</span>book_id <span class=\"token operator\">=</span> <span class=\"token number\">6495700</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token comment\">// 输出 Book1 信息</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Book 1 title : \"</span> <span class=\"token operator\">&lt;&lt;</span> Book1<span class=\"token punctuation\">.</span>title <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Book 1 author : \"</span> <span class=\"token operator\">&lt;&lt;</span> Book1<span class=\"token punctuation\">.</span>author <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Book 1 subject : \"</span> <span class=\"token operator\">&lt;&lt;</span> Book1<span class=\"token punctuation\">.</span>subject <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Book 1 id : \"</span> <span class=\"token operator\">&lt;&lt;</span> Book1<span class=\"token punctuation\">.</span>book_id <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 输出 Book2 信息</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Book 2 title : \"</span> <span class=\"token operator\">&lt;&lt;</span> Book2<span class=\"token punctuation\">.</span>title <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Book 2 author : \"</span> <span class=\"token operator\">&lt;&lt;</span> Book2<span class=\"token punctuation\">.</span>author <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Book 2 subject : \"</span> <span class=\"token operator\">&lt;&lt;</span> Book2<span class=\"token punctuation\">.</span>subject <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Book 2 id : \"</span> <span class=\"token operator\">&lt;&lt;</span> Book2<span class=\"token punctuation\">.</span>book_id <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\n<pre><code class=\"prism language-cpp\">Book <span class=\"token number\">1</span> title <span class=\"token operator\">:</span> Learn C<span class=\"token operator\">++</span> Programming\nBook <span class=\"token number\">1</span> author <span class=\"token operator\">:</span> Chand Miyan\nBook <span class=\"token number\">1</span> subject <span class=\"token operator\">:</span> C<span class=\"token operator\">++</span> Programming\nBook <span class=\"token number\">1</span> id <span class=\"token operator\">:</span> <span class=\"token number\">6495407</span>\nBook <span class=\"token number\">2</span> title <span class=\"token operator\">:</span> Telecom Billing\nBook <span class=\"token number\">2</span> author <span class=\"token operator\">:</span> Yakit Singha\nBook <span class=\"token number\">2</span> subject <span class=\"token operator\">:</span> Telecom\nBook <span class=\"token number\">2</span> id <span class=\"token operator\">:</span> <span class=\"token number\">6495700</span>\n</code></pre>\n<h3><a id=\"41__685\"></a>41. 指向结构的指针</h3>\n<p>您可以定义指向结构的指针，方式与定义指向其他类型变量的指针相似，如下所示：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Books</span> <span class=\"token operator\">*</span>struct_pointer<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>现在，您可以在上述定义的指针变量中存储结构变量的地址。为了查找结构变量的地址，请把 &amp; 运算符放在结构名称的前面，如下所示：</p>\n<pre><code class=\"prism language-cpp\">struct_pointer <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Book1<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>为了使用指向该结构的指针访问结构的成员，您必须使用 -&gt; 运算符，如下所示：</p>\n<pre><code class=\"prism language-cpp\">struct_pointer<span class=\"token operator\">-&gt;</span>title<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>让我们使用结构指针来重写上面的实例，这将有助于您理解结构指针的概念：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring&gt;</span></span>\n \n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">printBook</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Books</span> <span class=\"token operator\">*</span>book <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Books</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">char</span>  title<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">char</span>  author<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">char</span>  subject<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">int</span>   book_id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Books</span> Book1<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 声明 Book1，类型为 Book</span>\n   <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Books</span> Book2<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 声明 Book2，类型为 Book */</span>\n \n   <span class=\"token comment\">// Book1 详述</span>\n   <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> Book1<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Learn C++ Programming\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> Book1<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Chand Miyan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n   <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> Book1<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">,</span> <span class=\"token string\">\"C++ Programming\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   Book1<span class=\"token punctuation\">.</span>book_id <span class=\"token operator\">=</span> <span class=\"token number\">6495407</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// Book2 详述</span>\n   <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> Book2<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Telecom Billing\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> Book2<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Yakit Singha\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> Book2<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Telecom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   Book2<span class=\"token punctuation\">.</span>book_id <span class=\"token operator\">=</span> <span class=\"token number\">6495700</span><span class=\"token punctuation\">;</span>\n \n   <span class=\"token comment\">// 通过传 Book1 的地址来输出 Book1 信息</span>\n   <span class=\"token function\">printBook</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>Book1 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// 通过传 Book2 的地址来输出 Book2 信息</span>\n   <span class=\"token function\">printBook</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>Book2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 该函数以结构指针作为参数</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">printBook</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Books</span> <span class=\"token operator\">*</span>book <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Book title : \"</span> <span class=\"token operator\">&lt;&lt;</span> book<span class=\"token operator\">-&gt;</span>title <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Book author : \"</span> <span class=\"token operator\">&lt;&lt;</span> book<span class=\"token operator\">-&gt;</span>author <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Book subject : \"</span> <span class=\"token operator\">&lt;&lt;</span> book<span class=\"token operator\">-&gt;</span>subject <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Book id : \"</span> <span class=\"token operator\">&lt;&lt;</span> book<span class=\"token operator\">-&gt;</span>book_id <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n</code></pre>\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\n<pre><code class=\"prism language-cpp\">Book title <span class=\"token operator\">:</span> Learn C<span class=\"token operator\">++</span> Programming\nBook author <span class=\"token operator\">:</span> Chand Miyan\nBook subject <span class=\"token operator\">:</span> C<span class=\"token operator\">++</span> Programming\nBook id <span class=\"token operator\">:</span> <span class=\"token number\">6495407</span>\nBook title <span class=\"token operator\">:</span> Telecom Billing\nBook author <span class=\"token operator\">:</span> Yakit Singha\nBook subject <span class=\"token operator\">:</span> Telecom\nBook id <span class=\"token operator\">:</span> <span class=\"token number\">6495700</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-06 20:10:06", "summary": "简单介绍一下是一种静态类型的、编译式的、通用的、大小写敏感的、不规则的编程语言，支持面向过程编程、面向对象编程和泛型编程。被认为是一种中级语言，它综合了高级语言和低级语言的特点。是由之父于年在新泽西州"}