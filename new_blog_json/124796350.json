{"blogid": "124796350", "writerAge": "码龄2年", "writerBlogNum": "2", "writerCollect": "2", "writerComment": "0", "writerFan": "2", "writerGrade": "1级", "writerIntegral": "22", "writerName": "醉酩清秋", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124796350.jpg", "writerRankTotal": "203658", "writerRankWeekly": "370202", "writerThumb": "1", "writerVisitNum": "1557", "blog_read_count": "653", "blog_time": "已于 2022-05-17 10:33:07 修改", "blog_title": "WPF Prism的简单使用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"h2_ideasyusea_0\"></a></h2>\n<h2 id=\"easyuse\">简单使用</h2>\n<ol><li>新建 WPF 项目，我是基于 .net 5.0-windows 创建的。</li><li>引入 Prism.DryIoc(8.1.97) 的 Nuget 包。</li><li>App.xaml 中引入命名空间。</li></ol>\n<pre><code class=\"prism language-c\">xmlns<span class=\"token operator\">:</span>prism<span class=\"token operator\">=</span><span class=\"token string\">\"http://prismlibrary.com/\"</span>\n</code></pre>\n<ol start=\"4\"><li>将 App.xaml 中 <strong>Application</strong> 标签更改成 <strong>prism:PrismApplication</strong> 并去除 <strong>StartUri</strong> 属性，将 App.xaml.cs 中 <strong>Application</strong> 更改成 <strong>PrismApplication</strong>。</li><li>实现 <strong>PrismApplication</strong>（实际上是 <strong>PrismApplicationBase</strong>） 中的抽象方法。</li></ol>\n<pre><code class=\"prism language-c\">protected override Window <span class=\"token function\">CreateShell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Creates the shell or main window of the application</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> new <span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nprotected override <span class=\"token keyword\">void</span> <span class=\"token function\">RegisterTypes</span><span class=\"token punctuation\">(</span>IContainerRegistry containerRegistry<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Used to register types with the container that will be used by your application.</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"6\"><li>运行成功（如遇到问题可一起交流）。</li></ol>\n<h2><a id=\"_23\"></a>更进一步</h2>\n<p>以下将以 <a href=\"https://github.com/PrismLibrary/Prism-Samples-Wpf\">prism-samples-wpf</a> 里的项目为说明对象。</p>\n<h6><a id=\"01BootStrapperShellBootStrapperShell_26\"></a>01-BootStrapperShell/BootStrapperShell</h6>\n<blockquote>\n<p>此项目中并没有在 <strong>App.xaml</strong> 和 <strong>App.xaml.cs</strong> 中引入 <strong>PrismApplication</strong> ，而是通过新建继承自 <strong>PrismBootstrapper</strong> 的 <strong>BootStrapper</strong> 类型，在该类型中实现了 <strong>PrismBootStrapperBase</strong> 中的两个方法。</p>\n<pre><code class=\"prism language-c\">protected override Window <span class=\"token function\">CreateShell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Creates the shell or main window of the application.</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> Container<span class=\"token punctuation\">.</span>Resolve<span class=\"token operator\">&lt;</span>MainWindow<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nprotected override <span class=\"token keyword\">void</span> <span class=\"token function\">RegisterTypes</span><span class=\"token punctuation\">(</span>IContainerRegistry containerRegistry<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Used to register types with the container that will be used by your application.</span>\n<span class=\"token punctuation\">{<!-- --></span>    \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>同 <strong><a href=\"#easyuse\">简单使用</a></strong> 里 <strong>App.xaml.cs</strong> 实现的两个方法名称与参数都一样，实际上我猜测作用也可能是一样的。<br/> 值得注意的是，在BootStrapper类型中CreateShell方法通过 <strong>Container.Resolve &lt; MainWindow &gt;()</strong> 返回主窗口， 暂且定义此方法的作用是通过类型返回实例。</p>\n</blockquote>\n<h6><a id=\"h6_idregions0202RegionsRegionsh6_41\"></a></h6>\n<h6 id=\"regions02\">02-Regions/Regions</h6>\n<blockquote>\n<p>此项目以及后续项目都是采用如 <strong><a href=\"#easyuse\">简单使用</a></strong> 中的写法，在 <strong>Views/MainWindow.xaml</strong> 中采用了如下写法：</p>\n<pre><code class=\"prism language-c\"><span class=\"token operator\">&lt;</span>ContentControl prism<span class=\"token operator\">:</span>RegionManager<span class=\"token punctuation\">.</span>RegionName<span class=\"token operator\">=</span><span class=\"token string\">\"ContentRegion\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>运行后发现 <strong>prism:RegionManager.RegionName=“ContentRegion”</strong> 没有起到什么作用。<br/> <strong>Prism</strong> 中的 <strong>Region</strong> 的思想，就是通过 <strong>RegionManager.RegionName</strong> 找到对应的 <strong>Region</strong> ，并将UI元素放置在这块 <strong>Region</strong> 中。</p>\n<pre><code class=\"prism language-c\"><span class=\"token operator\">&lt;</span>StackPanel<span class=\"token operator\">&gt;</span>\n     <span class=\"token operator\">&lt;</span>ContentControl prism<span class=\"token operator\">:</span>RegionManager<span class=\"token punctuation\">.</span>RegionName<span class=\"token operator\">=</span><span class=\"token string\">\"ContentRegion\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n     <span class=\"token operator\">&lt;</span>Button Content<span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span> Click<span class=\"token operator\">=</span><span class=\"token string\">\"Button_Click\"</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>StackPanel<span class=\"token operator\">&gt;</span>\n \nusing Prism<span class=\"token punctuation\">.</span>Regions<span class=\"token punctuation\">;</span>\nusing System<span class=\"token punctuation\">.</span>Windows<span class=\"token punctuation\">;</span>\nusing System<span class=\"token punctuation\">.</span>Windows<span class=\"token punctuation\">.</span>Controls<span class=\"token punctuation\">;</span>\nnamespace Regions<span class=\"token punctuation\">.</span>Views\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">/// &lt;summary&gt;</span>\n    <span class=\"token comment\">/// Interaction logic for MainWindow.xaml</span>\n    <span class=\"token comment\">/// &lt;/summary&gt;</span>\n    public partial class MainWindow <span class=\"token operator\">:</span> Window\n    <span class=\"token punctuation\">{<!-- --></span>\n        private IRegionManager _regionManager<span class=\"token punctuation\">;</span>\n        public <span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span>IRegionManager regionManager<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">InitializeComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            _regionManager <span class=\"token operator\">=</span> regionManager<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        private <span class=\"token keyword\">void</span> <span class=\"token function\">Button_Click</span><span class=\"token punctuation\">(</span>object sender<span class=\"token punctuation\">,</span> RoutedEventArgs e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            Button button <span class=\"token operator\">=</span> new <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            button<span class=\"token punctuation\">.</span>Content <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n            _regionManager<span class=\"token punctuation\">.</span>Regions<span class=\"token punctuation\">[</span><span class=\"token string\">\"ContentRegion\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我在这个项目中新增或修改了一些代码，如上所示，通过 <strong>MainWindow</strong> 的构造方法注入（这个之后的文章再去说明） <strong>IRegionManager</strong> 对象并传引用给_regionManager，调用 <strong>_regionManager.Regions[“ContentRegion”]</strong> 获取设置了 <strong>prism:RegionManager.RegionName=“ContentRegion”</strong> 的Region，通过 <strong>Add</strong> 方法将UI元素（我这里是button）放入该区域（我理解为设置该区域所在的UI元素的孩子节点）。</p>\n</blockquote>\n<h6><a id=\"03CustomRegionsRegions_81\"></a>03-CustomRegions/Regions</h6>\n<blockquote>\n<p>相比较上一个项目，这个项目教我们怎么使用 <strong>StackPanel</strong> 作为 <strong>Region</strong>。</p>\n<pre><code class=\"prism language-c\"><span class=\"token operator\">&lt;</span>StackPanel prism<span class=\"token operator\">:</span>RegionManager<span class=\"token punctuation\">.</span>RegionName<span class=\"token operator\">=</span><span class=\"token string\">\"ContentRegion\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<ol><li>首先继承 <strong>RegionAdapterBase&lt; StackPanel &gt;</strong> 。</li><li>实现方法。</li></ol>\n<pre><code class=\"prism language-c\">using Prism<span class=\"token punctuation\">.</span>Regions<span class=\"token punctuation\">;</span>\nusing System<span class=\"token punctuation\">.</span>Windows<span class=\"token punctuation\">;</span>\nusing System<span class=\"token punctuation\">.</span>Windows<span class=\"token punctuation\">.</span>Controls<span class=\"token punctuation\">;</span>\n\nnamespace Regions\n<span class=\"token punctuation\">{<!-- --></span>\n    public class StackPanelRegionAdapter <span class=\"token operator\">:</span> RegionAdapterBase<span class=\"token operator\">&lt;</span>StackPanel<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n       public <span class=\"token function\">StackPanelRegionAdapter</span><span class=\"token punctuation\">(</span>IRegionBehaviorFactory regionBehaviorFactory<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">:</span> <span class=\"token function\">base</span><span class=\"token punctuation\">(</span>regionBehaviorFactory<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token punctuation\">}</span>\n\n        protected override <span class=\"token keyword\">void</span> <span class=\"token function\">Adapt</span><span class=\"token punctuation\">(</span>IRegion region<span class=\"token punctuation\">,</span> StackPanel regionTarget<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Template method to adapt the object to an Prism.Regions.IRegion.</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n        \t<span class=\"token comment\">// 赋值region.Views的CollectionChanged事件</span>\n        \t<span class=\"token comment\">// region.Views就是显示的UI元素</span>\n            region<span class=\"token punctuation\">.</span>Views<span class=\"token punctuation\">.</span>CollectionChanged <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>Action <span class=\"token operator\">==</span> System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Specialized<span class=\"token punctuation\">.</span>NotifyCollectionChangedAction<span class=\"token punctuation\">.</span>Add<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token function\">foreach</span> <span class=\"token punctuation\">(</span>FrameworkElement element in e<span class=\"token punctuation\">.</span>NewItems<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{<!-- --></span>\n                        regionTarget<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token comment\">//handle remove</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        protected override IRegion <span class=\"token function\">CreateRegion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Template method to create a new instance of Prism.Regions.IRegion that will be used to adapt the object.</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> new <span class=\"token function\">AllActiveRegion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// return a region that keeps all the views in it as active. Deactivation of views is not allowed.</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>然后在 <strong>App.xaml.cs</strong> 中重写方法。</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//     Configures the default region adapter mappings to use in the application, in</span>\n<span class=\"token comment\">//     order to adapt UI controls defined in XAML to use a region and register it automatically.</span>\n<span class=\"token comment\">//     May be overwritten in a derived class to add specific mappings required by the</span>\n<span class=\"token comment\">//     application.</span>\nprotected override <span class=\"token keyword\">void</span> <span class=\"token function\">ConfigureRegionAdapterMappings</span><span class=\"token punctuation\">(</span>RegionAdapterMappings regionAdapterMappings<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tbase<span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureRegionAdapterMappings</span><span class=\"token punctuation\">(</span>regionAdapterMappings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tregionAdapterMappings<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterMapping</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>StackPanel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Container<span class=\"token punctuation\">.</span>Resolve<span class=\"token operator\">&lt;</span>StackPanelRegionAdapter<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>最后就可以参考 <strong><a href=\"#regions02\">02-Regions/Regions</a></strong> 中 <strong>Add</strong> 一些UI元素试试看效果了。</p>\n</blockquote>\n<h6><a id=\"04ViewDiscoveryViewDiscovery_141\"></a>04-ViewDiscovery/ViewDiscovery</h6>\n<blockquote>\n<pre><code class=\"prism language-c\">public <span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span>IRegionManager regionManager<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">InitializeComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//view discovery</span>\n\tregionManager<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterViewWithRegion</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ContentRegion\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>ViewA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>通过 <strong>regionManager.RegisterViewWithRegion方法</strong> 根据类型实例化设置 <strong>ContentRegion</strong> 内内容。</p>\n</blockquote>\n<h6><a id=\"05ViewInjectionViewInjection_151\"></a>05-ViewInjection/ViewInjection</h6>\n<blockquote>\n<p>此项目内容与<a href=\"#regions02\">02-Regions/Regions</a>差不太多，在此就不过多赘述了。</p>\n</blockquote>\n<h6><a id=\"06ViewActivationDeactivationActivationDeactivation_153\"></a>06-ViewActivationDeactivation/ActivationDeactivation</h6>\n<blockquote>\n<p>此项目引入了 <strong>IRegionManager</strong> 对象的两个方法 <strong>Activate</strong> 和 <strong>Deactive</strong> ，就是 <strong>显示某UI元素</strong> 和 <strong>不显示某UI元素</strong>。</p>\n<pre><code class=\"prism language-c\">     private <span class=\"token keyword\">void</span> <span class=\"token function\">MainWindow_Loaded</span><span class=\"token punctuation\">(</span>object sender<span class=\"token punctuation\">,</span> RoutedEventArgs e<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">{<!-- --></span>\n          _viewA <span class=\"token operator\">=</span> _container<span class=\"token punctuation\">.</span>Resolve<span class=\"token operator\">&lt;</span>ViewA<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           _viewB <span class=\"token operator\">=</span> _container<span class=\"token punctuation\">.</span>Resolve<span class=\"token operator\">&lt;</span>ViewB<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n           _region <span class=\"token operator\">=</span> _regionManager<span class=\"token punctuation\">.</span>Regions<span class=\"token punctuation\">[</span><span class=\"token string\">\"ContentRegion\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n           _region<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>_viewA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           _region<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>_viewB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n\n       private <span class=\"token keyword\">void</span> <span class=\"token function\">Button_Click</span><span class=\"token punctuation\">(</span>object sender<span class=\"token punctuation\">,</span> RoutedEventArgs e<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token comment\">//activate view a</span>\n           _region<span class=\"token punctuation\">.</span><span class=\"token function\">Activate</span><span class=\"token punctuation\">(</span>_viewA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n\n       private <span class=\"token keyword\">void</span> <span class=\"token function\">Button_Click_1</span><span class=\"token punctuation\">(</span>object sender<span class=\"token punctuation\">,</span> RoutedEventArgs e<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token comment\">//deactivate view a</span>\n           _region<span class=\"token punctuation\">.</span><span class=\"token function\">Deactivate</span><span class=\"token punctuation\">(</span>_viewA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n\n       private <span class=\"token keyword\">void</span> <span class=\"token function\">Button_Click_2</span><span class=\"token punctuation\">(</span>object sender<span class=\"token punctuation\">,</span> RoutedEventArgs e<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token comment\">//activate view b</span>\n           _region<span class=\"token punctuation\">.</span><span class=\"token function\">Activate</span><span class=\"token punctuation\">(</span>_viewB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n\n       private <span class=\"token keyword\">void</span> <span class=\"token function\">Button_Click_3</span><span class=\"token punctuation\">(</span>object sender<span class=\"token punctuation\">,</span> RoutedEventArgs e<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token comment\">//deactivate view b</span>\n           _region<span class=\"token punctuation\">.</span><span class=\"token function\">Deactivate</span><span class=\"token punctuation\">(</span>_viewB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<p>(如果有不理解的或者我说明不够完善的地方，请指出来，一起进步跟努力…)</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-05-17 10:33:07", "summary": "简单使用新建项目，我是基于创建的。引入的包。中引入命名空间。将中标签更改成并去除属性，将中更改成。实现实际上是中的抽象方法。运行成功如遇到问题可一起交流。更进一步以下将以里的项目为说明对象。此项目中并"}