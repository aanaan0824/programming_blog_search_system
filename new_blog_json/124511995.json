{"blogid": "124511995", "writerAge": "码龄2年", "writerBlogNum": "160", "writerCollect": "30", "writerComment": "6", "writerFan": "11", "writerGrade": "5级", "writerIntegral": "1643", "writerName": "Selvaggia", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124511995.jpg", "writerRankTotal": "16703", "writerRankWeekly": "76042", "writerThumb": "13", "writerVisitNum": "55738", "blog_read_count": "2891", "blog_time": "已于 2022-05-01 08:50:13 修改", "blog_title": "“terminate called after throwing an instance of ‘std::out_of_range‘“", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>单词接龙（组成一个序列连接起来）</h3>\n<ul><li><ul><li><a href=\"#_2\">题目</a></li><li><a href=\"#_4\">爆搜可枚举序列⭐⭐⭐</a></li><li><a href=\"#_8\">按顺序连接若干单词(删去重叠部分）</a></li><li><a href=\"#error_81\">一个访问越界error</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"_2\"></a>题目</h2>\n<p><a href=\"http://noi.openjudge.cn/ch0205/8783/\">8783:单词接龙</a></p>\n<h2><a id=\"_4\"></a>爆搜可枚举序列⭐⭐⭐</h2>\n<p>无论是 还原文件还是单词接龙，在想要求某个组合时，因为不明白 文件碎片/单词 的排列顺序，需要深搜枚举序列<br/> 尤其这题，每个单词可用两遍，更是直指搜索<br/> 因为爆搜可以抉择每个单词用几遍</p>\n<h2><a id=\"_8\"></a>按顺序连接若干单词(删去重叠部分）</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h&gt;</span> </span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span> </span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;math.h&gt;</span> </span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N<span class=\"token operator\">=</span><span class=\"token number\">55</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> next<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">getnext</span><span class=\"token punctuation\">(</span>string p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tnext<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>p<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\tnext<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> j<span class=\"token operator\">=</span>next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">kmp</span><span class=\"token punctuation\">(</span>string t<span class=\"token punctuation\">,</span>string p<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> lt<span class=\"token operator\">=</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> lp<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>st<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>lt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>t<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>p<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> j<span class=\"token operator\">=</span>next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//\t\tif(j==lp){//算是abcdefg  efg,所以返回得j是lp </span>\n<span class=\"token comment\">//\t\tcout&lt;&lt;i-lp+1&lt;&lt;endl;</span>\n<span class=\"token comment\">//\t\tj=next[j];//回溯到p【0】</span>\n<span class=\"token comment\">//\t\t}\t</span>\n<span class=\"token comment\">//否则，abcdefg fghijk ,返回得j是2(g对应得下标+1) </span>\n\t\n<span class=\"token punctuation\">}</span>\t\n<span class=\"token keyword\">return</span> j<span class=\"token punctuation\">;</span> \n\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token comment\">//\tios::sync_with_stdio(false);</span>\n<span class=\"token comment\">//\tcin.tie(0);</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">&gt;&gt;</span>n<span class=\"token punctuation\">;</span>\n\tstring str<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\tstring t<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">&gt;&gt;</span>t<span class=\"token punctuation\">;</span>\t\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tcin<span class=\"token operator\">&gt;&gt;</span>str<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">getnext</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//\t\tint st=max(0,(t.size())-len);</span>\n\t\t<span class=\"token keyword\">int</span> st<span class=\"token operator\">=</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>len<span class=\"token punctuation\">;</span>\n\t\tst<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> pos<span class=\"token operator\">=</span><span class=\"token function\">kmp</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">,</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span>pos<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t\tt<span class=\"token operator\">+=</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span>len<span class=\"token operator\">-</span>pos<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span>t<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> \n\tcout<span class=\"token operator\">&lt;&lt;</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>笑死，看到题目不知道干了啥<br/> 自己臆想了一个题目属于是<br/> 最难理解得是kmp中返回得j，<mark>j指向得是模式串与主串中不匹配得第一个字符</mark><br/> 如若一个都不匹配，最后返回得就是下标0(从-1加过来得）<br/> 写的时候，return t 放在了 while(i&lt;lt) 循环里面，直接返回-1，导致，string的substr函数，str.substr(pos,len)导致报下面访问越界的错误</p>\n<h2><a id=\"error_81\"></a>一个访问越界error</h2>\n<p>C++如果遇到：</p>\n<ul><li> <p>1.“terminate called after throwing an instance of ‘std::out_of_range’”</p> </li><li> <p>2.“Abort message: 'terminating with uncaught exception of type std::out_of_range”</p> </li></ul>\n<p>这样的错误，极有可能是<strong>访问越界</strong>的问题。</p>\n<p>导致越界的原因：</p>\n<p>通常情况是在使用c++的容器的时候出现的问题，如在使用vector、map、还有<mark>string(差点忘记string也是个容器呀</mark>）等的时候出现的</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-05-01 08:50:13", "summary": "单词接龙组成一个序列连接起来题目爆搜可枚举序列按顺序连接若干单词删去重叠部分一个访问越界题目单词接龙爆搜可枚举序列无论是还原文件还是单词接龙，在想要求某个组合时，因为不明白文件碎片单词的排列顺序，需要"}