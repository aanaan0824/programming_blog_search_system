{"blogid": "124814426", "writerAge": "码龄4年", "writerBlogNum": "961", "writerCollect": "1239", "writerComment": "131", "writerFan": "9193", "writerGrade": "7级", "writerIntegral": "11510", "writerName": "黄昏和星空", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124814426.jpg", "writerRankTotal": "1465", "writerRankWeekly": "442", "writerThumb": "803", "writerVisitNum": "816554", "blog_read_count": "2180", "blog_time": "已于 2022-06-01 11:28:10 修改", "blog_title": "C#窗体设计SaveFileDialog的用法", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>本文讲解C#窗体设计SaveFileDialog的用法。</p>\n<ol><li>操作流程<br/> 1.1. SaveFileDialog概念<br/> 1.1.1. 基本属性<br/> Windows 窗体 SaveFileDialog 组件是一个预先配置的对话框。 它与 Windows 使用的标准“保存文件”对话框相同。 该组件继承自 CommonDialog 类。SaveFileDialog用于保存文件，其属性如下所示<br/> 使用该控件作为一个简单的解决方案，使用户能够保存文件，而不用配置您自己的对话框。 利用标准的 Windows 对话框，创建基本功能可立即为用户所熟悉的应用程序。 但是应注意，使用 SaveFileDialog 组件时，必须编写您自己的文件保存逻辑。<br/> 可使用 ShowDialog 方法在运行时显示对话框。 使用 OpenFile 方法可在读/写模式下打开文件。<br/> 将 SaveFileDialog 组件添加到窗体后，它出现在 Windows 窗体设计器底部的栏中。</li></ol>\n<p>1.2. 实际C#程序编写<br/> 1.2.1. 添加控件<br/> 本文测试，对修改后的TwinCAT项目进行保存配置，需要用到SaveFileDialog。首先添加控件，如下所示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2b376f2fa9094c85925d132305851bd7.png\"/></p>\n<p>再添加完SaveFileDialog后，就可以再C#程序中设置报错的逻辑了。<br/> 1.2.2. saveFileDialog1.InitialDirectory<br/> 该方法时初始化保存路径，设置保存路径为项目打开的路径，代码如下所示<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0a5470f542374b4f982127f8992f6a39.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e2818316fda841209bfbcba188c30817.png\"/></p>\n<p>1.2.3. saveFileDialog1.Title<br/> 该方法为保存文件配置的对话框标题名成，程序赋值如下所示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2fa89f317a244b7a8548406c095c817a.png\"/></p>\n<p>1.2.4. saveFileDialog1.FileName<br/> 该方法时获取保存文件的名称，保存的名称是和项目打开的名称一样，因此程序书写如下所示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c927fe8e63624d54983dad14acd31603.png\"/></p>\n<p>1.2.5. aveFileDialog1.Filter<br/> 该方法时文件保存的类型过滤器，即选择需要保存的名称后，需要指定保存文件的类型，该类型和打开项目的类型一致，程序如下所示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4405fc4e5b124b2a84d33558fc77ffcd.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9dded91ec60e490fa901d676cc56d20b.png\"/></p>\n<p>1.2.6. saveFileDialog1.FilterIndex<br/> 该值时选择过滤的索引号，因为程序中只有1个过来字符串，因此等于2还是原来的索引过滤，程序如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b624bf6b11784497a3cc939463b35087.png\"/></p>\n<p>1.2.7. saveFileDialog1.RestoreDirectory<br/> 这个属性的作用不是记住上次的路径，而是：在关闭SaveFileDialog的时候，是否恢复程序的默认路径。<br/> 比如程序启动的时候默认的路径位置是C:\\，而当你用SaveFileDialog把一个文件保存到E:\\的时候，程序的默认路径会变成E:\\，如果这个值是false，那么当你关掉SaveFileDialog的时候，程序的默认路径会一直是E:\\。如果你设置为true的话，关掉SaveFileDialog之后，默认路径会自动切换回C:\\。<br/> 注，这里说的默认路径就是用Directory.GetCurrentDirectory()获取到的那个路径。<br/> 1.2.8. saveFileDialog1.FileName<br/> 该方法返回需要保存的文件名称、类型、路径的完整结果，供其它实例化对象进行调用，从而进行文件的保存，如下所示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\82b3513fd019401e91ee80c968f1add3.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6c022e399098428b9b84fa165dd2af56.png\"/></p>\n<p>至此，saveFileDialog的使用测试完成。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-06-01 11:28:10", "summary": "本文讲解窗体设计的用法。操作流程概念基本属性窗体组件是一个预先配置的对话框。它与使用的标准保存文件对话框相同。该组件继承自类。用于保存文件，其属性如下所示使用该控件作为一个简单的解决方案，使用户能够保"}