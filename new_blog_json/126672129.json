{"blogid": "126672129", "writerAge": "码龄1年", "writerBlogNum": "25", "writerCollect": "1597", "writerComment": "702", "writerFan": "6599", "writerGrade": "5级", "writerIntegral": "3035", "writerName": "万羽西", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126672129.jpg", "writerRankTotal": "5719", "writerRankWeekly": "726", "writerThumb": "2078", "writerVisitNum": "51902", "blog_read_count": "86", "blog_time": "于 2022-09-06 01:24:09 发布", "blog_title": "详谈 Java 中的重写与重载", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night-eighties\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>重写与重载</h3>\n<ul><li><a href=\"#_2\">前言</a></li><li><a href=\"#_14\">方法重写</a></li><li><ul><li><a href=\"#1__19\">1. 基本用法</a></li><li><a href=\"#2__47\">2. 使用场景</a></li><li><a href=\"#3__64\">3. 注意事项</a></li></ul>\n</li><li><a href=\"#_84\">方法重载</a></li><li><ul><li><a href=\"#1__89\">1. 基本使用</a></li><li><a href=\"#2__118\">2. 使用场景</a></li><li><a href=\"#3__124\">3. 注意事项</a></li></ul>\n</li><li><a href=\"#_147\">重写与重载的区别</a></li><li><a href=\"#_167\">总结</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_2\"></a>前言</h1>\n<p>在校招面试过程中，总是会遇到一些很基础的问题，比如本文要讲的重写与重载，如果不加以总结，总是容易答得毫无章法，答得混乱，今天博主就来整理一下 Java 中的重写与重载他们之间的区别。</p>\n<p>首先，重写与重载他到底有什么关系呢？他们都属于 Java 多态中的不同体现，只不过重写是运行时的多态体现，而重载是编译时的多态体现。<br/> 除此之外，这二者之前的联系仿佛就像是刘德华与马德华，除了名字长得像以外可以说是毫无关系~</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d5e3e58d5b884076b9bcb3c7033dd4c6.png\"/><br/> 接下来我们来分别详细谈谈重写与重载之间的区别。</p>\n<hr/>\n<h1><a id=\"_14\"></a>方法重写</h1>\n<p>方法重写是一种语言特性，它是 Java 语言中多态的一种具体体现，它允许子类继承父类，并且重写父类中的方法，并且重写方法的方法名必须与父类中被重写的方法名一致，且参数列表也需保持一致，这就构成了重写。</p>\n<h2><a id=\"1__19\"></a>1. 基本用法</h2>\n<p>基本使用代码如下：</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * 父类中有一个 method 方法\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Father: \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 子类中重写了父类的 method 方法\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 子类中重新定义了打印的行为，不再是 Father:XXX，而是 Son:XXX</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Son: \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>由上述示例可以看出，子类 Son 继承了父类 Father 并重写了 method 方法，其中方法名和参数列表必须要保持一致。</p>\n<h2><a id=\"2__47\"></a>2. 使用场景</h2>\n<p>在我们平时编写代码中，常常会使用到方法重写。</p>\n<p>比如重写 Object 类中的 equals() 方法</p>\n<blockquote>\n<p>所有类都继承自 Object 类</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c54ad9ad292b49c2bc6696e8398ff9f0.png\"/><br/> 可以看到，源码中 Object 类下的 equals() 方法比较的是两个对象的引用的地址是否相同，而对于比较字符串类型来说，每一次新建的对象他引用的地址都应该是不相同的，哪怕字符串中的内容一样。<br/> 由此一来，依靠 Object 类下的 equals() 方法就无法判定两个字符串中的内容是否相同了，因为无论是否相同，都会返回 FALSE。</p>\n<p>所以为了实现比较字符串中内容是否相同，String 类中就重写了该方法，使其具备比较两个字符串中内容是否相同的功能，源码如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7da4f15b0cec4f199a11dd0e37ff4768.png\"/><br/> 由上图我们可以看到，String 类中的 equals() 方法比较的是两个字符串中的元素是否相同，而不是比较两个对象的引用地址了，这就是重写的价值。</p>\n<h2><a id=\"3__64\"></a>3. 注意事项</h2>\n<p>使用方法重写时，要注意以下几个注意事项：</p>\n<ol><li>子类访问权限修饰符不能变小。<br/> 也就是说，子类要继承并重写父类中的方法，那么子类的重写方法的访问权限修饰符就必须大于等于父类中该方法的访问权限修饰符。</li><li>子类返回类型只能变小。<br/> 意思是，子类的重写方法的返回值只能小于父类该方法的返回值，比如父类方法中的返回值是 Number，那么子类中方法的返回值也就只能是 Number 或 Number 的子类 Integer…，而不能是 Number 的父类 Object。</li><li>子类的抛出异常只能变小。<br/> 同上</li><li>子类的方法名必须和父类方法名保持一致。</li><li>子类方法的参数列表必须和父类方法的参数保持一致。</li></ol>\n<p>以上 5 点如果不遵循，则会在编译阶段就报错。</p>\n<hr/>\n<h1><a id=\"_84\"></a>方法重载</h1>\n<p>方法重载同样也是一种语言特性，它是 Java 多态在编译阶段的具体体现，它允许在同一个类中，定义多个同名的方法，但他们的参数列表必须不同，可以是个数不同，也可以是类型不同，这样，就构成了方法重载。</p>\n<h2><a id=\"1__89\"></a>1. 基本使用</h2>\n<p>以下代码就实现了方法重载。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上述代码中，方法名全都相同，但参数列表不同，这就是方法重载。</p>\n<h2><a id=\"2__118\"></a>2. 使用场景</h2>\n<p>我们在日常编写代码中其实也是会经常使用到方法重载的，比如有一个场景，在 String 类中的 valueOf() 方法，他的参数类型就提供了多种，具体如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\61268279b44b479d8cfcd64ceb2bfcdc.png\"/><br/> String 类中内置了多个不同参数类型的 valueOf() 方法，以供我们将不同的数据类型转换成字符串的格式。</p>\n<h2><a id=\"3__124\"></a>3. 注意事项</h2>\n<p>在方法重载中，有一些匹配机制，这些机制规定了方法重载去匹配不同方法的优先级顺序。</p>\n<ol><li>第一优先级：<br/> 首先优先去寻找参数类型完全相同的重载方法，比如我传递的参数是一个 String 类型的字符串，则会优先匹配只有一个 String 类型参数的重载方法。</li><li>第二优先级：<br/> 如果没有个数和类型完全相同的重载方法，但是我传递的参数类型是基本数据类型，则可以<strong>优先寻找更大的基本类型</strong>，注意，是现寻找更大的基本类型，比如<strong>传递的是 int 类型的参数，则寻找的应该是 long 类型参数，而非 Integer</strong>。</li><li>第三优先级：<br/> 第三优先级才是自动装箱/拆箱机制，如果一个基本数据类型的参数找不到一模一样的参数列表方法，也找不到更大的基本数据类型供它匹配，则会寻找它的包装类，如传递参数为 int 类型，则寻找匹配 Integer 类型的参数列表。</li><li>第四优先级：<br/> 其实第四优先级有点奇怪，如果以上三种都在当前类中找不到的话，会去继承的父类中寻找匹配的方法，但这样就不是在同一类中，违背了定义，理应不能够算是重载，但这样确实可行。</li><li>第五优先级：<br/> 最后一个优先级是可变参数匹配，也就是非定长的参数列表，但是需要注意，可变参数列表的使用有规定，同一数据类型的可变参数只能同时存在一个，并且他必须是参数列表的最后一个参数。</li></ol>\n<p>以上就是方法重载的五个优先级，在使用方法重载时，会按照上述顺序进行匹配，符合规则的方法则会被优先调用。</p>\n<p><mark>ps：方法重载是指方法的参数列表的个数或类型不同，与返回值没有任何关系，返回值相等与否都无法决定是否构成重载</mark></p>\n<hr/>\n<h1><a id=\"_147\"></a>重写与重载的区别</h1>\n<p>其实这俩东西根本不能放在一起比，奈何长得像，所以经常也会有面试官爱问，所以在这里也总结一下他们的不同点：</p>\n<pre><code>区别               方法重写                               方法重载  \n\n方法间的关系         描述的是父类与子类的方法关系              描述的是同一个类中多个同名方法间的方法关系  \nOverride           关键字需要使用 @Override 修饰           不需要\n参数类型和参数个数    不能修改                               必须修改\n返回类型            只能变小或相同，不能变大                  可修改\n抛出异常            只能变小或删除，不能抛出新的或更大的异常    可修改\n权限控制符          只能变大或相同，不能变小                  可修改\n\n\n</code></pre>\n<hr/>\n<h1><a id=\"_167\"></a>总结</h1>\n<p>最后，我们来总结一下本文内容。</p>\n<p>方法重写和方法重载都是 Java 中多态特性的不同体现，方法重写体现在运行时的多态，而方法重载体现的则是编译时的多态，方法重写描述的是子类和父类之间的方法关系，而方法重载描述的是同一个类中多个同名方法之间的关系，除此之外，重写和重载之间的区别还体现在访问权限修饰符，Override 的使用，返回类型，参数列表，异常抛出这几个方面上。</p>\n<p>本文到这就结束了，希望本文能够帮到大家，最后祝大家秋招顺利~</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-09-06 01:24:09", "summary": "重写与重载前言方法重写基本用法使用场景注意事项方法重载基本使用使用场景注意事项重写与重载的区别总结前言在校招面试过程中，总是会遇到一些很基础的问题，比如本文要讲的重写与重载，如果不加以总结，总是容易答"}