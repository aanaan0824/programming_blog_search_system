{"blogid": "124542611", "writerAge": "码龄1年", "writerBlogNum": "3", "writerCollect": "28", "writerComment": "6", "writerFan": "6", "writerGrade": "1级", "writerIntegral": "53", "writerName": "一念之间，", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124542611.jpg", "writerRankTotal": "162963", "writerRankWeekly": "399147", "writerThumb": "17", "writerVisitNum": "5282", "blog_read_count": "4898", "blog_time": "已于 2022-07-14 16:35:43 修改", "blog_title": "C++多态全方面详解。", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E4%B8%80%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%A4%9A%E6%80%81-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%A4%9A%E6%80%81\">一、什么是多态</a></p>\n<p id=\"%E4%BA%8C%E3%80%81%E9%9D%99%E6%80%81%E8%BF%9E%E7%BC%96-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81%E9%9D%99%E6%80%81%E8%BF%9E%E7%BC%96\">二、静态连编</a></p>\n<p id=\"%E4%B8%89%E3%80%81%E5%8A%A8%E6%80%81%E8%BF%9E%E7%BC%96-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%89%E3%80%81%E5%8A%A8%E6%80%81%E8%BF%9E%E7%BC%96\">三、动态连编</a></p>\n<p id=\"%E5%9B%9B%E3%80%81%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%9B%9B%E3%80%81%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B\">四、代码示例</a></p>\n<p id=\"%E4%BA%94%E3%80%81%E5%A4%9A%E6%80%81%E7%9A%84%E5%85%B7%E4%BD%93%E4%BD%9C%E7%94%A8-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%94%E3%80%81%E5%A4%9A%E6%80%81%E7%9A%84%E5%85%B7%E4%BD%93%E4%BD%9C%E7%94%A8\">五、多态的具体作用</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<hr/>\n<p></p>\n<h1 id=\"%E4%B8%80%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%A4%9A%E6%80%81\">一、什么是多态</h1>\n<p><strong>顾名思义多态就是多种形态的意思。</strong></p>\n<p><strong>例如：去游乐场玩，儿童买票是半价，成年人买票是全价，老年人买票打七折。 对比类的话，这个买票就是一个类的一个方法（函数）。儿童，成年人，老年人即是对象，这些对象调用同一个买票函数得出来的不同的票价，这就是多态。</strong></p>\n<p><strong>我们教材里面对多态性的描述是：不同对象收到相同的的消息时（即调用相同的函数），产生不同的动作。直观的说，<span style=\"color:#fe2c24;\">多态性是指用一个名字定义不同的函数（这里只要函数名相同就行），这些函数执行不同但又类似的操作，从而可以使用相同的方式来调用这些具有不同功能的同名函数。</span></strong></p>\n<hr/>\n<p><strong>在C++中，多态的实现和连编这一概念有关。所谓连编就是把函数名与函数体的程序代码连接在一起的过程。连编又分为静态连编和动态连编。（这里可以先看后面静态连编和动态连编的介绍）。</strong></p>\n<p><strong>从实现的角度来说，多态可划分成两类：编译时的多态和运行时的多态。</strong></p>\n<p><strong>编译时的多态是通过函数重载和运算符重载（重载采用的是静态连编）实现。（注意：<span style=\"color:#fe2c24;\">函数重载实现的多态是一个类的行为的多态，要在同一个类内才能体现出来的多态，是面向方法的多态</span>）。</strong></p>\n<p><strong>运行时多态主要是通过虚函数(虚函数采用的是动态连编)来实现的。（注意：<span style=\"color:#fe2c24;\">虚函数可以实现继承的多态也可以实现非继承的多态，是面向对象的多态）。</span></strong></p>\n<h1 id=\"%E4%BA%8C%E3%80%81%E9%9D%99%E6%80%81%E8%BF%9E%E7%BC%96\">二、静态连编</h1>\n<p><strong>静态连编时，系统用实参与形参进行匹配，对于同名的重载函数变根据参数上的差异进行区分，然后进行连编，从而实现编译时的多态。（注意：</strong><strong>函数的选择是基于指向对象的指针类型或者引用类型）</strong></p>\n<h1 id=\"%E4%B8%89%E3%80%81%E5%8A%A8%E6%80%81%E8%BF%9E%E7%BC%96\"><strong>三、动态连编</strong></h1>\n<p><strong>动态连编是运行阶段完成的连编。即当程序调用到某一函数的时候，系统会根据当前的对象类型去寻找和连接其程序的代码，对面向对象的程序而言，就是当对象收到某一消息的时候，才去寻找和连接相应的方法。（函数的选择是基于对象的类型）。</strong></p>\n<h1 id=\"%E5%9B%9B%E3%80%81%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B\"><strong>四、代码示例</strong></h1>\n<p><strong>1.当没用使用虚函数时</strong></p>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\nclass A{\n    public:\n        void show()\n        {\n            cout&lt;&lt;\"我是A\"&lt;&lt;endl;\n        }\n};\n\nclass B:public A{\n    public:\n    void show()\n    {\n        cout&lt;&lt;\"我是B\"&lt;&lt;endl;\n    }\n};\n\nint main()\n{\n    A a,*pc;\n    B b;\n\n    pc=&amp;a;\n    pc-&gt;show();\n\n    pc=&amp;b;   //赋值兼容规则\n    pc-&gt;show();\n}\n\n运行结果：\n    我是A\n    我是A</code></pre>\n<p></p>\n<p> <strong>这里有同学就会问了：pc指针后面不是指向了b对象吗？不应该是调用b对象的show函数吗？最后一句不应该是输出“我是B”吗？</strong></p>\n<p><strong>都是输出“我是A”的原因是这些函数采用的都是静态连编，而静态连编选择函数是基于指向对象的指针类型，这里pc的类型是A，所以一直都是调用a对象的show函数。</strong></p>\n<p><strong>那么怎么改才能实现不同的输出呢? 答案就是使用虚函数。</strong></p>\n<p><strong>2.使用虚函数</strong></p>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\nclass A{\n    public:\n      virtual void show()\n        {\n            cout&lt;&lt;\"我是A\"&lt;&lt;endl;\n        }\n};\n\nclass B:public A{\n    public:\n    void show()\n    {\n        cout&lt;&lt;\"我是B\"&lt;&lt;endl;\n    }\n};\n\nint main()\n{\n    A a,*pc;\n    B b;\n\n    pc=&amp;a;\n    pc-&gt;show();\n\n    pc=&amp;b;   //赋值兼容规则\n    pc-&gt;show();\n}\n\n运行结果：\n    我是A\n    我是B</code></pre>\n<p><strong>只需要在父类的show函数前面加一个virtual关键字就行了，加了之后show函数就会采用动态编译，只有到调用到它的时候，才去根据调用它的对象类型去匹配相应的函数体。</strong></p>\n<p><strong>在以继承方式实现运行时多态的时候，子类的同名函数必须修改其函数体并且在函数的前面最好加上一个virtual关键字，因为通过继承的方式实现多态的时候，系统通过会根据一些规则自动识别出子类的虚函数。（<span style=\"color:#fe2c24;\">ps：不通过继承关系也可以实现运行时多态，这时两个不同类的函数名都需要加上virtual才行，而且定义的指针指向其他对象时，要进行强制转换，下面举个例子给大家看一下。</span>）</strong></p>\n<pre><code>#include&lt;iostream&gt;\n#include&lt;string.h&gt;\nusing namespace std;\nclass person{\n\tpublic:\n\tvirtual\t int test()\n\t{\n\t\tstring h=\"人\";\n\t\tcout&lt;&lt;h&lt;&lt;endl; \n\t } \n\t\tint a;\n};\n\nclass dog\n{\n\tpublic:\n\tvirtual int test()\n\t{\n\t\tstring h=\"狗\";\n\t\tcout&lt;&lt;h&lt;&lt;endl; \n\t } \n};\n\n\nint main()\n{\n \tperson p,*pr;\n \tpr=&amp;p;\n \tpr-&gt;test();\n \tdog d;\n \tpr=(person*)&amp;d; //两个完全不想关的类之间不能通过赋值兼容规则赋值了，要强制转换。\n \tpr-&gt;test();\n \t\n}\n运行结果：\n人\n狗</code></pre>\n<p>。</p>\n<h1 id=\"%E4%BA%94%E3%80%81%E5%A4%9A%E6%80%81%E7%9A%84%E5%85%B7%E4%BD%93%E4%BD%9C%E7%94%A8\">五、多态的具体作用</h1>\n<p><strong><span style=\"color:#0d0016;\">        在面向对象的程序设计中，使用多态能够</span><span style=\"color:#fe2c24;\">增强程序的可扩充性</span><span style=\"color:#0d0016;\">，即程序需要修改或增加功能时，只需改动或增加较少的代码。此外，使用多态也能起到</span><span style=\"color:#fe2c24;\">精简代码</span><span style=\"color:#0d0016;\">的作用。</span></strong></p>\n<p><strong><span style=\"color:#0d0016;\">下面给大家列举一个设计游戏时用到多态的简单例子：</span></strong></p>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\n//将每个英雄的共同特征抽象出来形成一个抽象类 \nclass hero{\n\tpublic:\n\tvirtual void blood()=0; \n};\n\n\n//A英雄继承了抽象类实现了抽象类里面的方法 \nclass A:public hero{\n    public:\n       void blood()\n        {\n            cout&lt;&lt;\"A的血量减一\"&lt;&lt;endl;\n        }\n}; \n \n//A英雄继承了抽象类实现了抽象类里面的方法 \nclass B:public hero{\n    public:\t\n    void blood()\n    {\n        cout&lt;&lt;\"B的血量减一\"&lt;&lt;endl;\n    }\n};\n\n//tower相当于防御塔类，英雄进塔会遭到攻击 \nclass tower{\n\tpublic:\n\t\t/*当通过继承实现多态的时候，函数的参数类型只需要定义为父类的指针类型 。\n\t\t当攻击具体英雄的时候只需要传入具体对象的指针，然后就可以调用不同对象的掉血函数了\n\t\t后面无论增加多少个新的英雄，这个函数都不用变。*/ \n\t\tvoid beat(hero *p)\n\t\t{\n\t\t\tp-&gt;blood();\n\t\t}\n\t\t\n\t/* 如果不通过继承实现多态的话，后期每增加一个英雄，防御都要增加一个对应的掉血函数。 \n\t void beat(A *p)\n\t\t{\n\t\t\tp-&gt;blood();\n\t\t}\n\t\t\n\t  void beat(B *p)\n\t  \t{\n\t\t\tp-&gt;blood();\n\t\t}\n\t*/\n};\n \nint main()\n{\n    A a,*pc;\n    B b;\n \ttower t;\n\tt.beat(&amp;a);//防御塔攻击a  \n\tt.beat(&amp;b);//防御塔攻击b \n}\n\n运行结果：\n    A的血量减一\n    B的血量减一</code></pre>\n<p></p>\n</div>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-07-14 16:35:43", "summary": "目录一、什么是多态二、静态连编三、动态连编四、代码示例五、多态的具体作用一、什么是多态顾名思义多态就是多种形态的意思。例如：去游乐场玩，儿童买票是半价，成年人买票是全价，老年人买票打七折。对比类的话，"}