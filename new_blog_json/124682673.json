{"blogid": "124682673", "writerAge": "码龄1年", "writerBlogNum": "31", "writerCollect": "1135", "writerComment": "1392", "writerFan": "2532", "writerGrade": "6级", "writerIntegral": "4874", "writerName": "蒋灵瑜的笔记本", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124682673.jpg", "writerRankTotal": "3399", "writerRankWeekly": "163", "writerThumb": "1592", "writerVisitNum": "27605", "blog_read_count": "1904", "blog_time": "已于 2022-09-04 17:51:16 修改", "blog_title": "【C语言】超详细的移位、位操作符详解（含力扣实战）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p class=\"img-center\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/3e73f7833329995ff6b8c57a4e065325.gif\"/></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/59f4e0e3fb874b89b322466006bf65bf.gif\"/></p>\n<hr/>\n<p id=\"uc2a5a5c0\" style=\"text-align:center;\">💬推荐一款模拟面试、刷题神器 、从基础到大厂面试题：👉<a href=\"https://www.nowcoder.com/link/pc_csdncpt_jlydbjb_c\" title=\"点击跳转刷题网站进行注册学习\">点击跳转刷题网站进行注册学习</a></p>\n<hr/>\n<p id=\"main-toc\"><span style=\"color:#956fe7;\">目录</span></p>\n<p id=\"-toc\" style=\"margin-left:0px;\"></p>\n<p id=\"%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B1%E3%80%81%E6%95%B4%E6%95%B0%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA-toc\" style=\"margin-left:0px;\"><a href=\"#%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B1%E3%80%81%E6%95%B4%E6%95%B0%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA\">​1、整数的二进制表示</a></p>\n<p id=\"%E2%80%8B2%E3%80%81%E7%A7%BB%E4%BD%8D%E6%93%8D%E4%BD%9C%E7%AC%A6-toc\" style=\"margin-left:0px;\"><a href=\"#%E2%80%8B2%E3%80%81%E7%A7%BB%E4%BD%8D%E6%93%8D%E4%BD%9C%E7%AC%A6\">​2、移位操作符</a></p>\n<p id=\"%E2%80%8B2.1%E5%B7%A6%E7%A7%BB%E6%93%8D%E4%BD%9C%E7%AC%A6%EF%BC%88%E4%BD%8E%E4%BD%8D%E8%A1%A50%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#%E2%80%8B2.1%E5%B7%A6%E7%A7%BB%E6%93%8D%E4%BD%9C%E7%AC%A6%EF%BC%88%E4%BD%8E%E4%BD%8D%E8%A1%A50%EF%BC%89\">​2.1左移操作符（低位补0）</a></p>\n<p id=\"%E2%80%8B%E4%B8%BE%E4%BE%8B-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%80%8B%E4%B8%BE%E4%BE%8B\">​举例</a></p>\n<p id=\"YQS2M-toc\" style=\"margin-left:80px;\"><a href=\"#YQS2M\">​原理分析</a></p>\n<p id=\"%C2%A0%E2%80%8B2.2%E5%8F%B3%E7%A7%BB%E6%93%8D%E4%BD%9C%E7%AC%A6-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E2%80%8B2.2%E5%8F%B3%E7%A7%BB%E6%93%8D%E4%BD%9C%E7%AC%A6\"> ​2.2右移操作符</a></p>\n<p id=\"%E2%80%8B%E7%AE%97%E6%9C%AF%E5%8F%B3%E7%A7%BB%EF%BC%88%E9%AB%98%E4%BD%8D%E8%A1%A5%E5%8E%9F%E7%AC%A6%E5%8F%B7%E4%BD%8D%EF%BC%89-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%80%8B%E7%AE%97%E6%9C%AF%E5%8F%B3%E7%A7%BB%EF%BC%88%E9%AB%98%E4%BD%8D%E8%A1%A5%E5%8E%9F%E7%AC%A6%E5%8F%B7%E4%BD%8D%EF%BC%89\">​算术右移（高位补原符号位）</a></p>\n<p id=\"EQnnm-toc\" style=\"margin-left:80px;\"><a href=\"#EQnnm\">​逻辑右移（高位补0）</a></p>\n<p id=\"%E2%80%8B%C2%A03%E3%80%81%E4%BD%8D%E6%93%8D%E4%BD%9C%E7%AC%A6-toc\" style=\"margin-left:0px;\"><a href=\"#%E2%80%8B%C2%A03%E3%80%81%E4%BD%8D%E6%93%8D%E4%BD%9C%E7%AC%A6\">​ 3、位操作符</a></p>\n<p id=\"ZVB4E-toc\" style=\"margin-left:40px;\"><a href=\"#ZVB4E\">​3.1按位与&amp;</a></p>\n<p id=\"%E2%80%8B%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%80%8B%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90\">​原理分析</a></p>\n<p id=\"%E2%80%8B3.2%E6%8C%89%E4%BD%8D%E6%88%96%7C-toc\" style=\"margin-left:40px;\"><a href=\"#%E2%80%8B3.2%E6%8C%89%E4%BD%8D%E6%88%96%7C\">​3.2按位或|</a></p>\n<p id=\"q0Mi5-toc\" style=\"margin-left:80px;\"><a href=\"#q0Mi5\">​原理分析</a></p>\n<p id=\"MYjI6-toc\" style=\"margin-left:40px;\"><a href=\"#MYjI6\">​3.3按位异或^</a></p>\n<p id=\"t1n94-toc\" style=\"margin-left:80px;\"><a href=\"#t1n94\">​原理分析</a></p>\n<p id=\"%E2%80%8B4%E3%80%81%E5%AE%9E%E6%88%98%E5%BA%94%E7%94%A8-toc\" style=\"margin-left:0px;\"><a href=\"#%E2%80%8B4%E3%80%81%E5%AE%9E%E6%88%98%E5%BA%94%E7%94%A8\">​4、实战应用</a></p>\n<p id=\"i7R9Z-toc\" style=\"margin-left:40px;\"><a href=\"#i7R9Z\">​4.1交换两个变量（不创建临时变量）</a></p>\n<p id=\"PNiE5-toc\" style=\"margin-left:80px;\"><a href=\"#PNiE5\">​原理分析：</a></p>\n<p id=\"bmi1A-toc\" style=\"margin-left:40px;\"><a href=\"#bmi1A\">​4.2消失的数字</a></p>\n<p id=\"%E2%80%8B%EF%BC%881%EF%BC%89%E6%80%9D%E8%B7%AF%E4%B8%80%EF%BC%9A%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%EF%BC%8C%E5%85%88%E6%8E%92%E5%BA%8F%E5%90%8E%E9%81%8D%E5%8E%86%EF%BC%88%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6O(n%C2%B2)%2C%E4%B8%8D%E7%AC%A6%E5%90%88%E9%A2%98%E6%84%8F%EF%BC%89-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%80%8B%EF%BC%881%EF%BC%89%E6%80%9D%E8%B7%AF%E4%B8%80%EF%BC%9A%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%EF%BC%8C%E5%85%88%E6%8E%92%E5%BA%8F%E5%90%8E%E9%81%8D%E5%8E%86%EF%BC%88%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6O%28n%C2%B2%29%2C%E4%B8%8D%E7%AC%A6%E5%90%88%E9%A2%98%E6%84%8F%EF%BC%89\">​（1）思路一：冒泡排序，先排序后遍历（时间复杂度O(n²),不符合题意）</a></p>\n<p id=\"ZEuRa-toc\" style=\"margin-left:80px;\"><a href=\"#ZEuRa\">​（2）思路二：（0-n的等差数列和）-（数组nums的和）</a></p>\n<p id=\"cc5Yb-toc\" style=\"margin-left:80px;\"><a href=\"#cc5Yb\">​（3）思路三——异或</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h1 id=\"%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B1%E3%80%81%E6%95%B4%E6%95%B0%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA\"><img alt=\"\" height=\"48\" src=\"https://img-blog.csdnimg.cn/img_convert/887993aad4c11793133d11a19777d5a5.gif\" width=\"48\"/><span style=\"color:#956fe7;\">1、整数的二进制表示</span></h1>\n<p><img alt=\"\" height=\"20\" src=\"https://img-blog.csdnimg.cn/img_convert/51fc6f6f67b819ace76773f0ba1c50a1.gif\" width=\"20\"/>正数的原码、反码、补码相同，整数在内存中存储的是补码（所以需要用补码对移位、位操作符进行分析）。</p>\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/b6726bb217d4ad00d268591abc388017.gif\"/>负数的原反补不同，以-1为例：</p>\n<p id=\"u272afb23\"><span style=\"background-color:#fbd4d0;\">原码</span>：10000000000000000000000000000001（原码就是原码）</p>\n<p id=\"u70c03167\"><span style=\"background-color:#fbd4d0;\">反码</span>：11111111111111111111111111111110（符号位不变，其他位按位取反）</p>\n<p id=\"u3797bb87\"><span style=\"background-color:#fbd4d0;\">补码</span>：11111111111111111111111111111111（补码=反码+1）</p>\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/66d8780e7a0839331d39e9e385f083cf.gif\"/>负数的补码也可以用该负数的绝对值-1，按位取反，即可得到该负数的补码。</p>\n<h1 id=\"%E2%80%8B2%E3%80%81%E7%A7%BB%E4%BD%8D%E6%93%8D%E4%BD%9C%E7%AC%A6\"><img alt=\"\" height=\"48\" src=\"https://img-blog.csdnimg.cn/img_convert/887993aad4c11793133d11a19777d5a5.gif\" width=\"48\"/><span style=\"color:#956fe7;\">2、移位操作符</span></h1>\n<pre><code class=\"language-cpp\">&lt;&lt; 左移操作符\n&gt;&gt; 右移操作符\n移动的是二进制位，只能对整数进行整数位的移动</code></pre>\n<p></p>\n<h2 id=\"%E2%80%8B2.1%E5%B7%A6%E7%A7%BB%E6%93%8D%E4%BD%9C%E7%AC%A6%EF%BC%88%E4%BD%8E%E4%BD%8D%E8%A1%A50%EF%BC%89\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/c24bb114676c359e5119d5688994d158.gif\"/><span style=\"color:#6eaad7;\">2.1左移操作符（低位补0）</span></h2>\n<h3 id=\"%E2%80%8B%E4%B8%BE%E4%BE%8B\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/278e842accfe529d4e0ec562822052b1.gif\"/><span style=\"color:#faa572;\">举例</span></h3>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\53eebd4382c62346f5e30474eabf13f1.png\"/></p>\n<p> 3的二进制位左移1位，输出结果为3。</p>\n<h3 id=\"YQS2M\"><span style=\"color:#faa572;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/278e842accfe529d4e0ec562822052b1.gif\"/>原理分析</span></h3>\n<p id=\"u2471aae5\">左移操作符，移动后，高位删除，低位补0；</p>\n<p id=\"u0ad042f5\">每左移一位，原始数据乘2。</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\93fe8457600ba55683760d8c21612ac0.png\"/></p>\n<h2 id=\"%C2%A0%E2%80%8B2.2%E5%8F%B3%E7%A7%BB%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span style=\"color:#6eaad7;\"> <img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/c24bb114676c359e5119d5688994d158.gif\"/>2.2右移操作符</span></h2>\n<h3 id=\"%E2%80%8B%E7%AE%97%E6%9C%AF%E5%8F%B3%E7%A7%BB%EF%BC%88%E9%AB%98%E4%BD%8D%E8%A1%A5%E5%8E%9F%E7%AC%A6%E5%8F%B7%E4%BD%8D%EF%BC%89\"><span style=\"color:#faa572;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/278e842accfe529d4e0ec562822052b1.gif\"/>算术右移（高位补原符号位）</span></h3>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\f6f835e8b172e622235aba3724a65378.png\"/></p>\n<p id=\"u736c8f4d\">目前主流编译器都是采用算术右移，以VS为例，-1的二进制位向右移动一位，结果为-1。</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\f04a23cccee8999b46963a24a0786d70.png\"/></p>\n<h3 id=\"EQnnm\"><span style=\"color:#faa572;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/278e842accfe529d4e0ec562822052b1.gif\"/>逻辑右移（高位补0）</span></h3>\n<p id=\"u39574a09\">由于主流编译器不采用逻辑右移，其原理同上不作介绍。</p>\n<h1 id=\"%E2%80%8B%C2%A03%E3%80%81%E4%BD%8D%E6%93%8D%E4%BD%9C%E7%AC%A6\"><img alt=\"\" height=\"48\" src=\"https://img-blog.csdnimg.cn/img_convert/887993aad4c11793133d11a19777d5a5.gif\" width=\"48\"/><span style=\"color:#956fe7;\"> 3、位操作符</span></h1>\n<h2 id=\"ZVB4E\"><span style=\"color:#6eaad7;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/f464fc5d932790d751eb70be61d0b3fd.gif\"/>3.1按位与&amp;</span></h2>\n<pre><code class=\"language-cpp\">int main()\n{\n    int a = -2;\n    int b = 3;\n    int c = a&amp;b;\n    printf(\"%d\\n\", c);//打印2\n    return 0;\n}</code></pre>\n<h3 id=\"%E2%80%8B%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90\"><span style=\"color:#faa572;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/482890417407b99490036026b04d1330.gif\"/>原理分析</span></h3>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\8b23c0ad0530418011e1b1395d89e402.png\"/></p>\n<p id=\"u8bb43e07\">按位与指按二进制位，若两个数字的同一个二进制位均为1，则该位为1；反之，为0。</p>\n<h2 id=\"%E2%80%8B3.2%E6%8C%89%E4%BD%8D%E6%88%96%7C\"><span style=\"color:#6eaad7;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/c32f13cd469d91b8a2e4b14e3d2c0a81.gif\"/>3.2按位或|</span></h2>\n<pre><code class=\"language-cpp\">int main()\n{\n    int a = -2;\n    int b = 3;\n    int c = a|b;\n    printf(\"%d\\n\", c);//打印-1\n    return 0;\n}</code></pre>\n<h3 id=\"q0Mi5\"><span style=\"color:#faa572;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/569cfad8e1ea532fef2e1e45e8e241ba.gif\"/>原理分析</span></h3>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\d5bd84566cd27ffcd50bf68e26503d5d.png\"/></p>\n<p id=\"u9d8e49eb\">按位或指按二进制位，若两个数字的同一个二进制位有1，则该位为1；反之，为0。</p>\n<h2 id=\"MYjI6\"><span style=\"color:#6eaad7;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/2fd30d5444c20024148063c3c75c8bb3.gif\"/>3.3按位异或^</span></h2>\n<pre><code class=\"language-cpp\">int main()\n{\n    int a = -2;\n    int b = 3;\n    int c = a^b;\n    printf(\"%d\\n\", c);//输出-3\n    return 0;\n}</code></pre>\n<h3 id=\"t1n94\"><span style=\"color:#faa572;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/9e4410d35227ab2c5bdf41e81deb0f30.gif\"/>原理分析</span></h3>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\5455581f2141039d884bb2dd6cb5f38f.png\"/></p>\n<p id=\"u91230ffa\">按位异或指按二进制位，两个二进制位相同为0相异为1。</p>\n<h1 id=\"%E2%80%8B4%E3%80%81%E5%AE%9E%E6%88%98%E5%BA%94%E7%94%A8\"><span style=\"color:#956fe7;\"><img alt=\"\" height=\"48\" src=\"https://img-blog.csdnimg.cn/img_convert/ba9a3604e6decf17525c54f697b2c0f3.gif\" width=\"48\"/>4、实战应用</span></h1>\n<h2 id=\"i7R9Z\"><span style=\"color:#6eaad7;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/35cb4a89043f65aa6c0740d7f1069071.gif\"/>4.1交换两个变量（不创建临时变量）</span></h2>\n<p id=\"u92fd95d1\">不允许创建临时变量，交换两个整数的内容。</p>\n<p id=\"u5d791257\">这是某互联网大厂的一道笔试真题。咱们很容易想到通过创建临时变量的方式来解决这道题，但是题目限制创建临时变量。那么可以通过异或的方式进行解决！</p>\n<pre><code class=\"language-cpp\">#include &lt;stdio.h&gt;\nint main()\n{\n    int a = -2;\n    int b = 3;\n    a = a ^ b;\n    b = a ^ b;\n    a = a ^ b;\n    printf(\"%d %d\\n\", a, b);\n    return 0;\n}</code></pre>\n<h3 id=\"PNiE5\"><span style=\"color:#faa572;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/54774f1eacfee062defd1f37f3f5b5bd.gif\"/>原理分析：</span></h3>\n<p id=\"u70deaf3a\">1、自身和自身异或得0；</p>\n<p id=\"u9c0f2ccc\">2、任何数和0异或得本身；</p>\n<p id=\"u39fca709\">第六行a(新)= a ^ b，指把a^b的值赋值a</p>\n<p id=\"ufe898ed5\">第七行b(新)=a(新) ^ b=a ^ b^ b=a；（代入第六行的数据）</p>\n<p id=\"ue30e621f\">第八行a = a (新)^ b(新)=a ^ b^a=b; （代入上两行的数据）</p>\n<p id=\"u871fa34b\">实现a和b的交换！</p>\n<h2 id=\"bmi1A\"><span style=\"color:#6eaad7;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/e634fc2228e9f380d074e3fb23abce74.gif\"/>4.2消失的数字</span></h2>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\64e725d5b39456f10d8c1c153c61cbfe.png\"/></p>\n<h3 id=\"%E2%80%8B%EF%BC%881%EF%BC%89%E6%80%9D%E8%B7%AF%E4%B8%80%EF%BC%9A%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%EF%BC%8C%E5%85%88%E6%8E%92%E5%BA%8F%E5%90%8E%E9%81%8D%E5%8E%86%EF%BC%88%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6O(n%C2%B2)%2C%E4%B8%8D%E7%AC%A6%E5%90%88%E9%A2%98%E6%84%8F%EF%BC%89\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/60de8ad5e32bad6c31ad9c18900164cb.gif\"/><span style=\"color:#faa572;\">（1）思路一：冒泡排序，先排序后遍历（时间复杂度O(n²),不符合题意）</span></h3>\n<pre><code class=\"language-cpp\">int missingNumber(int* nums, int numsSize){\n    for(int i=0;i&lt;numsSize-1;i++)\n    {\n        for(int j=0;j&lt;numsSize-1-i;j++)\n        {\n            if(nums[j]&gt;nums[j+1])\n            {\n                int tmp=nums[j];\n                nums[j]=nums[j+1];\n                nums[j+1]=tmp;\n            }\n        } \n    }\n    if(nums[0]!=0)\n        return 0;\n    if(numsSize!=1)\n    {\n        for(int i=0;i&lt;numsSize-1;i++)\n        {\n            if(nums[i+1]-nums[i]==2)\n            {\n                return nums[i]+1;              \n            }      \n        }\n        return nums[numsSize-1]+1;\n    }\n    if(nums[0]==0)\n        return 1;\n    return nums[0]-1;\n}</code></pre>\n<p id=\"uf658c5ca\">虽然力扣题目要求了时间复杂度，但是力扣后台是不会测试复杂度的。只要代码能通过就行。</p>\n<p id=\"u06625cc8\">主要思想：对数组先进行冒泡排序，排序后让数组后一个元素减去前一个元素，若结果等于2，则nums[i]+1则为结果，注意此处需要举出特例。</p>\n<h3 id=\"ZEuRa\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/e688015333e631ceec25ca3bf063415e.gif\"/><span style=\"color:#faa572;\">（2）思路二：（0-n的等差数列和）-（数组nums的和）</span></h3>\n<pre><code class=\"language-cpp\">int missingNumber(int* nums, int numsSize){\n    int sum1=(0+numsSize+1)*numsSize/2;//sum1为0-n的等差数列求和，首项为0，末项为numsSize+1\n    int sum2=0;//sum2为缺失数组的和\n    for(int i=0;i&lt;numsSize;i++)\n    {\n        sum2+=nums[i];\n    }\n    return sum1-sum2;//相减即为结果,时间复杂度O(n)\n}</code></pre>\n<h3 id=\"cc5Yb\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/6e79e18b3311921e799f464eae06f7b7.gif\"/><span style=\"color:#faa572;\">（3）思路三——异或</span></h3>\n<p id=\"uf7aa0e72\">异或原理：二进制位相同为0，相异为1，两个相同的数字异或，结果为0；故可通过异或的方式找出缺失的数字。原理图与代码如下：</p>\n<pre><code class=\"language-cpp\">int missingNumber(int* nums, int numsSize){\n    int ret=0;//缺失的数字\n    for(int i=0;i&lt;numsSize;i++)//数组nums的元素逐个异或\n    {\n        ret^=nums[i];\n    }\n    for(int i=0;i&lt;numsSize+1;i++)//ret再次与完整的数组异或\n    {\n        ret^=i;\n    }\n    return ret;//时间复杂度O(n)\n}</code></pre>\n<hr/>\n<p></p>\n<p id=\"u16cc2469\"><span style=\"color:#fe2c24;\">关注！点赞！评论！收藏！关注！点赞！评论！收藏！关注！点赞！评论！收藏！关注！点赞！评论！收藏！关注！点赞！评论！收藏！</span></p>\n<p class=\"img-center\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/ceb67a684bc589b365f2994288add385.gif\"/></p>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-04 17:51:16", "summary": "推荐一款模拟面试、刷题神器、从基础到大厂面试题：点击跳转刷题网站进行注册学习点击跳转刷题网站进行注册学习目录、整数的二进制表示、移位操作符左移操作符低位补举例原理分析右移操作符算术右移高位补原符号位逻"}