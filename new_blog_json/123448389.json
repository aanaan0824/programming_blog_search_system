{"blogid": "123448389", "writerAge": "码龄14年", "writerBlogNum": "205", "writerCollect": "506", "writerComment": "90", "writerFan": "53", "writerGrade": "6级", "writerIntegral": "4687", "writerName": "丰色木夕", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123448389.jpg", "writerRankTotal": "6335", "writerRankWeekly": "36412", "writerThumb": "194", "writerVisitNum": "357925", "blog_read_count": "7036", "blog_time": "于 2022-03-12 19:39:02 发布", "blog_title": "Visual Studio 桌面开发（C++与C#）的基础概念", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h3><a id=\"Visual_Studio_CC_0\"></a>Visual Studio 桌面开发（C++与C#）的基础概念</h3>\n<p>鼎鼎大名的Visual Studio几乎是所有程序猿都有所了解，而对于许多只对C++或C#了解皮毛的小伙伴缺不太容易区分C++与C#桌面开发的基础技术</p>\n<p>WPF、UPF、Winform、MFC、Qt、XAML 这些都是啥啊?</p>\n<p>首先我们看一下我们在安装Visual Studio时，就会让我们选择需要安装的组件，如下所示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8d317d7232d1429da118816c9c9891c1.png\"/></p>\n<p><code>web和云</code> 开发我们跳过，显然不是我们要的，至于<code>桌面开发和移动应用</code>，下面有四个选项，到底怎么选择安装呢？</p>\n<h5><a id=\"NET__11\"></a>.NET 桌面开发</h5>\n<p>.NET框架适用于 <code>C#</code> <code>VB.NET</code> <code>F#</code> 等，这些都是基于Framework框架的语言，也就是他们底层几乎是一样的，WPF与WinForm则是对应.NET框架的桌面开发技术。</p>\n<p>WinForm是传统的桌面开发框架，就是控件托拉拽，这种方式用于简单的桌面应用非常方便，开发效率非常高。开发者不需要管太多的UI设计，可用于业务前期快速发展时期，这个阶段更加关注业务逻辑</p>\n<p>随着业务增长，需求的提高，WinForm的开发模式无法满足需求，基于拖拽组件的下的开发模式，显然过于沉重，业务逻辑与UI高度耦合。而WPF则非常完美的解决了该问题，WPF可实现前后端分离，让UI交互视觉设计与后端业务逻辑开发分离，提高程序质量与开发效率。</p>\n<p>而<code>XAML</code>则是<code>WPF</code>开发的前端，它是运用XML语言的方式声明式的定义前端UI，实现前后端分离</p>\n<h5><a id=\"C_20\"></a>使用C++的桌面开发</h5>\n<p>C++ 的桌面开发同样也有类似的组件，<code>MFC</code>是传统的桌面窗体相关组件库,MFC(Microsoft Foundation Classes)是微软基础类库面向Windows系统开发则使用MFC组件，而Qt则是夸平台的，可在Windows、Linux、Unix。QT做的GUI开发要比MFC要好，并且QT界面库支持CSS，界面设计更方便更美观</p>\n<h5><a id=\"Windows_23\"></a>通用的Windows平台开发</h5>\n<p>UWP即Windows 10中的Universal Windows Platform简称。即Windows通用应用平台，在Windows 10 Mobile/Surface（Windows平板电脑）/PC/Xbox/HoloLens等平台上运行，uwp不同于传统pc上的exe应用，也跟只适用于手机端的app有本质区别。它并不是为某一个终端而设计，而是可以在所有Windows10设备上运行。</p>\n<p>uwp就是通用应用的意思，可以在电脑端，手机端，或其他设备通用。不用分别为不同的平台设计不同的软件，既一个软件就可以通吃。<br/> 这估计现在是win10系统的一个软件发展趋势了。</p>\n<h5><a id=\"NET_29\"></a>使用.NET的移动开发</h5>\n<p>这个是移动开发，这里就不介绍了</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 1, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-12 19:39:02", "summary": "桌面开发与的基础概念鼎鼎大名的几乎是所有程序猿都有所了解，而对于许多只对或了解皮毛的小伙伴缺不太容易区分与桌面开发的基础技术、、、、、这些都是啥啊首先我们看一下我们在安装时，就会让我们选择需要安装的组"}