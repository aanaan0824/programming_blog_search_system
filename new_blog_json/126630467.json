{"blogid": "126630467", "writerAge": "码龄1年", "writerBlogNum": "145", "writerCollect": "1558", "writerComment": "718", "writerFan": "3401", "writerGrade": "5级", "writerIntegral": "2793", "writerName": "测试架构师北凡", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126630467.jpg", "writerRankTotal": "6092", "writerRankWeekly": "1162", "writerThumb": "734", "writerVisitNum": "141028", "blog_read_count": "170", "blog_time": "于 2022-08-31 19:39:45 发布", "blog_title": "把这些接口测试面试题拿下，金九银十offer还不是手到擒来？", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<div>\n<h1 style=\"margin-left:100.85pt;text-align:left;\">【文章末尾给大家留下了大量的福利】</h1>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"403\" src=\"..\\..\\static\\image\\410118815f444682a966be54db36b9a1.png\" width=\"691\"/></p>\n<p> </p>\n<p> 前言：</p>\n<p>本文是根据软件测试面试葵花宝典面试题全套的其中一部分，全套宝典已经给你们准备好了，全部放在文章末尾了。</p>\n<ol><li style=\"text-align:left;\">什么时候要做接口测试？</li></ol>\n<p style=\"margin-left:0;text-align:left;\">公司有接口测试需求，接收到接口测试任务。</p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\">为什么要做接口测试？ \n   <ol><li style=\"text-align:left;\">开发代码初期，<em>UI</em><em> </em>和 <em>web</em><em> </em>页面设计还没到位，提前介入测试更早发现问题，否则底层的一个 <em>bug</em><em> </em>可能会引起外部多个 <em>bug</em></li><li style=\"text-align:left;\">处于接口安全层面考虑，前端进行限制容易绕过，需要同样测试后端的限制；另外     测试接口验证数据的加密传输，例如用户密码</li></ol></li></ol>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\">接口测试原理？（<em>jmeter</em><em> </em>等工具<em>/</em>写代码）</li></ol>\n<p style=\"margin-left:0;text-align:left;\">模拟客户端向服务器发送请求，服务器接收请求后对相应的请求做处理并向客户端返回相应结果，客户端接收结果的一个过程。</p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\">后端接口测试一遍，前端也测试一遍，是不是重复测试了？没有前端界面， 已经测试后端接口了，前端出来，还要做测试么？</li></ol>\n<p style=\"margin-left:0;text-align:left;\">前后端对接 <em>OK</em>（跑正常功能）、前端基本校验</p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\">接口测试属于测试执行那一阶段？</li></ol>\n<p style=\"margin-left:0;text-align:left;\">集成测试</p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\">什么时候会用到使用 <em>Fiddler</em>？ \n   <ol><li style=\"text-align:left;\">做安全测试，检测敏感信息是否加密，拦截篡改数据；</li><li style=\"text-align:left;\">当测试时发现缺陷，用 <em>fiddler</em><em> </em>抓包，定位该问题是前端还是后台的问题；</li><li style=\"text-align:left;\">模拟弱网环境；</li><li style=\"text-align:left;\">统计单个功能的响应时间。</li></ol></li></ol>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\">用 <em>fiddler</em><em> </em>如何定位是前端还是后台的问题？</li></ol>\n<p style=\"margin-left:0;text-align:left;\">如果接口响应的数据不正确，那就很可能是后端的问题，如果请求参数不正确或者接口响应数据正确但是页面上显示不对，就是前端的问题</p>\n</div>\n<p></p>\n<div>\n<ol><li style=\"text-align:left;\"><em>Fiddler</em><em> </em>怎么拦截篡改数据？ \n   <ol><li style=\"text-align:left;\">就拿充值来说吧，点击充值之前，先启动 <em>Fiddler</em>，按 <em>F11</em><em> </em>打断点，将请求拦截下来，</li><li style=\"text-align:left;\">然后在 <em>fiddler</em><em> </em>中，对拦截下来的请求，修改其中的数据，比如将充值的金额进行修改</li><li style=\"text-align:left;\">修改完成后，关闭拦截，继续请求的发送即可。</li></ol></li></ol>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\"><em>Fiddler</em><em> </em>怎么模拟弱网测试？ \n   <ol><li style=\"text-align:left;\">点击规则<em>--&gt;</em>自定义规则，打开 <em>fiddler</em><em> </em>的脚本编辑器，找到 <em>simulateModem</em></li><li style=\"text-align:left;\">设置上传和下载的延时速度</li><li style=\"text-align:left;\">点击规则<em>--&gt;</em>性能，选模拟带宽</li></ol></li></ol>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\"><em>fiddler</em><em> </em>如何模拟 <em>2g/3G</em><em> </em>的网络？ \n   <ol><li style=\"text-align:left;\"><em>2G</em><em> </em>一般上行<em>/</em>下行速率约为：<em>2.7</em>、<em>9.6kbs</em>，模拟设置为：<em>uploaded</em><em> </em>约 <em>2962</em><em> </em><em>ms</em>， <em>d</em><em>o</em><em>w</em><em>n</em><em>l</em><em>o</em><em>a</em><em>d</em><em>e</em><em>d</em><em>  </em>约  <em>8</em><em>3</em><em>3</em><em> </em><em>m</em><em>s</em><em>;</em>（弱网一般指 <em>2</em><em>G</em><em> </em>网络）</li><li style=\"text-align:left;\"><em>3G</em><em> </em>一般上行<em>/</em>下行速率约为：<em>384</em>、<em>2560kbs</em>，设置为：<em>uploaded</em><em> </em>约 <em>2.6</em><em> </em><em>ms</em>， <em>d</em><em>o</em><em>w</em><em>n</em><em>l</em><em>o</em><em>a</em><em>d</em><em>e</em><em>d</em><em>  </em>约  <em>0</em><em>.</em><em>3</em><em>9</em><em> </em><em>m</em><em>s</em><em>;</em></li></ol></li></ol>\n<p><strong>模拟网速：</strong></p>\n<p>1、启动Fiddler，打开菜单栏Rules---Performances---Simulate Modem Speeds这里打开了模拟调节速度</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\e021121643a03c4a9342b91159884ece.png\"/></p>\n<p>2、启动fiddler找到Rules---Customize Rules点击打开</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\2fc384bc9c257bfba1bf0e02caff46f8.png\"/></p>\n<pre>弹出来了Fiddler Script页面，找到以下代码进行修改\n\n if (m_SimulateModem) {\n\n     // Delay sends by 300ms per KB uploaded.\n\n     oSession[\"request-trickle-delay\"] = \"300\"; 　 　# 每上传lKB 数据，延时0 3 秒\n\n     // Delay receives by 150ms per KB downloaded.\n\n     oSession[\"response-trickle-delay\"] = \"150\"; 　　# 每下载lKB 数据，延时0.15 秒</pre>\n<p>3、计算2G和3G上下行速率</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\248f65768f67fbdcc0882eeafafb7b43.png\"/></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\14173fafe4fae7bd414e14717a840714.png\"/></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\02da05c096590330ede93017735e9691.png\"/></p>\n<p><strong>时间单位对应为毫秒，为每上传、下载 1KB 所需耗时</strong></p>\n<p><strong>1KB=8kb</strong></p>\n<p></p>\n<p><strong>2G网络:</strong></p>\n<pre>上行：2.7K\n\n下行：9.6K\n\n上行：[1/(2.7/8)]X1000=2962ms\n\n下行：[1/(9.6/8)]X1000=833ms</pre>\n<p><strong>3G网络:</strong></p>\n<pre>电信：上行：1.8M    1.8x1024\n\n     下行：3.1M    3.1x1024\n\n上行：{1/[(1.8x1024)/8]}x1000=4.34ms\n\n下行：{1/[(3.1x1024)/8]}x1000=2.52ms</pre>\n<pre>移动：上行：384k\n\n     下行：2.8M\n\n上行：[1/(384/8)]x1000=20.8ms\n\n下行：{1/[(2.8x1024)/8]}x1000=2.79ms</pre>\n<pre>联通：上行：5.76M\n\n     下行：7.2M\n\n上行：{1/[(5.76x1024)/8]}x1000=1.35ms\n\n下行：{1/[(7.2x1024)/8]}x1000=1ms</pre>\n<p><strong>4、相应的修改下图中对应的数值就可以模拟2G和3G进行弱网测试了</strong></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\8d0f4031ec591669e98c8ef974265669.png\"/></p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\"><em>Fiddler</em><em> </em>怎么抓 <em>HTTPS</em><em> </em>的包<em>?</em>\n<ol><li style=\"text-align:left;\">安装安全证书；</li><li style=\"text-align:left;\">点击 <em>fiddler</em><em> </em>的 <em>Tools--&gt;options--&gt;https</em></li><li style=\"text-align:left;\">勾选上所有选项，更换证书，重启 <em>fiddler</em></li></ol></li></ol>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\"><em>Fiddler</em><em> </em>怎么抓手机 <em>app</em><em> </em>的包？ \n   <ol><li style=\"text-align:left;\">手机与 <em>fiddler</em><em> </em>所的电脑连接到同一网络；</li><li style=\"text-align:left;\">在 <em>fiddler</em><em> </em>设置监听端口，并允许远程终端连接；</li><li style=\"text-align:left;\">在手机上填写代理服务器的地址和端口。</li></ol></li></ol>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\"><em>fiddle</em><em> </em>抓包后怎么分析的？ \n   <ol><li style=\"text-align:left;\">比方说怎么判断前后端 <em>bug</em></li><li style=\"text-align:left;\"><em>fiddler</em><em>  </em>在没有设置过滤器的时候，没有抓到任何请求信息（可能是前端页面元素没有绑定事件，或者绑定事件的元素弄错了，或者前端发生 <em>js</em><em> </em>错误等）</li><li style=\"text-align:left;\">若抓取到的请求的返回 <em>http</em><em> </em><em>code</em><em> </em>为 <em>500</em>，说明服务器发生了内部错误</li><li style=\"text-align:left;\">若抓取到的请求的返回 <em>http</em><em> </em><em>code</em><em> </em>为 <em>404</em>，说明可能是服务器根本没有这个地址的服务，也有可能是因为前台 <em>js</em><em> </em>提交请求的时候弄错了提交地址</li></ol></li></ol>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:justify;\">你们是怎么进行接口测试的？</li></ol>\n<p style=\"margin-left:0;text-align:justify;\">先对开发提供的接口文档做好需求分析，进行用例编写及评审，然后我们选择 <em>jemter </em>做接口测试，我的习惯是把主要的接口串在一起做一个自动化批量测试，确保接口功能是正       常的，然后进行详细的测试。比如测试一个接口，添加线程组添加 <em>http </em>请求，填写接口信息；如果接口与接口之间有依赖就需要添加 <em>cookie </em>管理器，<em>jdbc requests</em>，正则表达式等元件，然后添加结果树和断言，关注响应结果是否跟预期一致，同步关注数据库字段，如果</p>\n</div>\n<p></p>\n<div>\n<p style=\"margin-left:0;text-align:left;\">报错查看日志定位，大致就是这样</p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\">常见状态码</li></ol>\n<p style=\"margin-left:0;text-align:left;\">在 <em>HTTP </em>请求的返回数据包中，响应状态码分为以下 <em>5 </em>种。</p>\n<ul><li style=\"text-align:left;\"><em>1xx</em>：消息。一般是告诉客户端，请求已经收到了，正在处理，别急<em>……</em></li><li style=\"text-align:left;\"><em>2xx</em>：处理成功。一般表示请求收悉、我明白你要的、请求已受理、已经处理完成等信息。</li><li style=\"text-align:left;\"><em>3xx</em>：重定向到其他地方。它让客户端再发起一个请求，以完成整个处理过程。</li><li style=\"text-align:left;\"><em>4xx</em>：处理发生错误，错误来自客户端。例如，客户端请求的是一个不存在的资源、客户端未被授权、禁止访问等。</li><li style=\"text-align:left;\"><em>5xx</em>：处理发生错误，错误来自服务器端。例如，服务器端抛出异常、路由出错、<em>HTTP</em></li></ul>\n<p style=\"margin-left:0;text-align:left;\">版本不支持等。</p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\"><em>http</em><em> </em>中四种发送请求方式</li></ol>\n<p style=\"margin-left:0;text-align:left;\"><em>HTTP </em>中有四种发送请求的方式：<em>GET</em>、<em>POST</em>、<em>PUT </em>和 <em>DELETE</em>。</p>\n<ol><li style=\"text-align:left;\"><em>GET</em>：向特定的资源发出请求。</li><li style=\"text-align:justify;\"><em>POST</em>：向指定资源提交<em>“</em>数据进行处理<em>”</em>请求（例如，提交表单或者上传文件），数据     被包含在请求体中。<em>POST</em><em> </em>请求可能导致新的资源的创建，以及（也可能是<em>“</em>或<em>”</em>）已有资源的修改。</li><li style=\"text-align:left;\"><em>PUT</em>：向指定资源位置上传其最新内容。</li><li style=\"text-align:left;\"><em>DELETE</em>：请求服务器执行删除操作。</li></ol>\n<p style=\"margin-left:0;text-align:left;\">在实际应用中常用的是 <em>GET </em>和 <em>POST</em>。其他的请求方式都可以通过这两种方式间接地实现。</p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\"><em>get</em><em> </em>方式和 <em>post</em><em> </em>方式的区别</li></ol>\n<p style=\"margin-left:0;text-align:justify;\"><em>HTTP </em>发送请求最主要的两个方式是 <em>GET </em>和 <em>POST</em>，这两者有哪些区别呢？</p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<p style=\"margin-left:0;text-align:left;\">区别一：对请求参数的处理方式不同（直观的区别）</p>\n<ol><li style=\"text-align:justify;\"><em>GET</em><em> </em>请求：请求的数据会附加在 <em>URL</em><em> </em>之后，以<em>“?”</em>分隔 <em>URL</em><em> </em>和传输数据，如有多个参数则用<em>“&amp;”</em>连接。<em>URL</em><em> </em>采用的是 <em>ASCII</em><em> </em>编码格式，而不是 <em>Unicode</em><em> </em>编码格式，即所有的非 <em>ASCII </em>字符都要在编码之后再传输。</li></ol>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:justify;\"><em>POST</em><em> </em>请求：<em>POST</em><em> </em>请求会把请求的数据放置在 <em>HTTP</em><em> </em>请求包的 <em>Body</em><em> </em>数据中，数据包的形式可以是<em>“</em>参数名 <em>1=</em>参数值 <em>1&amp;</em>参数名 <em>2=</em>参数值 <em>2”</em>，也可以是 <em>JSON</em><em> </em>格式（键值对）。当然，<em>JSON</em><em> </em>格式是一种通用的方式。</li></ol>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<p style=\"margin-left:0;text-align:left;\"><em>B</em><em>o</em><em>d</em><em>y</em><em> </em>数据：<em>{<!-- --></em><em>\"</em><em>t</em><em>i</em><em>m</em><em>e</em><em>\"</em><em>:</em><em>\"</em><em>14</em><em>9</em><em>9</em><em>9</em><em>33</em><em>8</em><em>2</em><em>5</em><em>\"</em><em>,</em><em>\"</em><em>s</em><em>i</em><em>g</em><em>n</em><em>\"</em><em>:</em><em>\"</em><em>d</em><em>e</em><em>b</em><em>6</em><em>97</em><em>c</em><em>7</em><em>f</em><em>f</em><em>f</em><em>cc</em><em>a</em><em>8</em><em>2</em><em>8</em><em>a</em><em>7</em><em>a</em><em>0</em><em>3</em><em>a</em><em>21</em><em>8</em><em>b</em><em>2</em><em>c</em><em>d</em><em>a</em><em>5</em><em>\"</em><em>}</em></p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<p style=\"margin-left:0;text-align:left;\">区别二：传输数据的大小不同</p>\n<p style=\"margin-left:0;text-align:left;\"><em>HTTP </em>没有对传输数据的大小进行限制，也没有对 <em>URL </em>的长度进行限制。而在实际的程序开发中，存在以下限制。</p>\n<ul><li style=\"text-align:left;\"><em>G</em><em>E</em><em>T</em>：特定浏览器和服务器对 <em>U</em><em>R</em><em>L</em><em> </em>的长度有限制。例如，<em>I</em><em>E</em><em> </em>对 <em>U</em><em>R</em><em>L</em><em> </em>长度的限制是 <em>20</em><em>8</em><em>3</em><em>B</em><em>y</em><em>t</em><em>e</em></li></ul>\n<p style=\"margin-left:0;text-align:justify;\">（<em>2×1024Byte+35Byte</em>）。其他浏览器（如 <em>Netscape</em>、<em>FireFox </em>等）在理论上没有长度的限制，其限制取决于操作系统的支持。因此，在采用 <em>GET </em>方式提交数据时，传输数据会受到<em>URL </em>长度的限制。</p>\n<ul><li style=\"text-align:left;\"><em>POST</em>：由于不是通过 <em>URL</em><em> </em>传值，在理论上数据的大小不受限制。但实际上，各个 <em>Web</em></li></ul>\n</div>\n<p></p>\n<div>\n<p style=\"margin-left:0;text-align:left;\">服务器会对采用 <em>POST </em>方式提交的数据的大小进行限制，例如，<em>Apache</em>、<em>IIS6 </em>都有各自的配置。</p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<p style=\"margin-left:0;text-align:left;\">区别三：安全性不同</p>\n<p style=\"margin-left:0;text-align:left;\"><em>POST </em>方式的安全性比 <em>GET </em>方式的安全性高。使用 <em>GET </em>方式时，在地址栏里可以直接看到请求数据，采用这种方式可能受到 <em>Cross-site request forgery </em>攻击。</p>\n<p style=\"margin-left:0;text-align:left;\"><em>POST </em>方式需要抓包才能获取到数据，变相地提高了安全性。</p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\">接口测试怎么测试的。</li></ol>\n<ol><li style=\"text-align:left;\">当我们拿到接口文档后，会先进行熟悉需求文档，了解每个接口的功能、服务器地址、      端口、请求方式、请求参数、参数的约束条件有哪些还有一些响应的字段和响应的状态码</li><li style=\"text-align:left;\">之后就会开始编写测用例的，跟功能测试一样，考虑到正常异常的请求参数，还要考虑      到与之对应响应报文是否正确</li><li style=\"text-align:left;\">最后就开始使用 <em>Jmeter</em><em> </em>执行用例了，先建立一个线程组，再添加 <em>http</em><em> </em>请求，填写好请求地址，端口，和请求参数，设置参数化，添加断言等，最后添加查看结果树再运行。运行完后，检查接口是否通过，如果不通过，先定位下原因，如果是请求的参数有问题，     修改后再进行测试，如果是接口本身存在 <em>bug</em>，就把服务器上的日志取下来，提单给开发修改，一直到接口没问题了，就放到我们搭建好的 <em>Jmeter+Jenkins</em><em> </em>框架上做持续集成测试。</li><li style=\"text-align:left;\">这就是我们接口测试的大概流程。</li></ol>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:justify;\">举例说一下你的接口测试是怎么做的？</li></ol>\n<p style=\"margin-left:0;text-align:justify;\">我以充值这个接口说下吧：充值这个接口用的是 <em>http</em><em> </em>协议，使用 <em>post</em><em> </em>请求方式，发送给服务器的参数有手机号，充值额度，这些参数都是必传的参数。我们是使用 <em>Jmeter</em><em> </em>来做接口测试的，首先，要新建一个线程组，在线程组下面添加一个 <em>http</em><em> </em>的请求，然后填写好服务器地址，接口路径，请求方式，请求参数。由于充值的接口依赖于登录，所以我们会先调用登录接口，从中获取 <em>cookies</em><em> </em>值，在充值接口中使用<em>${<!-- --></em>参数名<em>}</em>的方式引用，接下来还要对其他参数进行参数化，构造各种正常和异常的数据，我们先在本地创建一个 <em>txt</em><em> </em>文档， 把参数填写到文档里面，在 <em>Jmeter</em><em> </em>中添加一个 <em>csv</em><em> </em>文件设置，填写好 <em>txt</em><em> </em>文档的路径，然后在请求参数中使用正则提取器把 <em>cookies</em><em> </em>值关联出来，然后在充值接口中使用<em>${<!-- --></em>参数名<em>} </em>的方式引用；接下来添加断言，检查服务器返回的结果和预期结果是不是一致的。最后，添加查看结果树查看测试结果。</p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\"><em>JMeter</em><em> </em>测试环境怎么搭建</li></ol>\n<ol><li style=\"text-align:justify;\">因为 <em>JMeter</em><em> </em>是 <em>JAVA</em><em> </em>程序开发的，所以要先安装 <em>JDK</em>；</li><li style=\"text-align:left;\">配置 <em>JAVA</em><em> </em>环境变量，包括：<em>JAVA_HOME</em>，<em>PATH</em>，<em>CLASSPATH</em>；</li><li style=\"text-align:left;\">双击 <em>jmeter</em><em> </em>的 <em>bin</em><em> </em>目录里面的 <em>jmeter.bat</em><em> </em>文件，就可以启动 <em>Jmeter</em>。</li></ol>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\">什么时候会用到使用 <em>Fiddler</em></li></ol>\n<ol><li style=\"text-align:left;\">做安全测试，检测敏感信息是否加密，拦截篡改数据；</li><li style=\"text-align:left;\">当测试时发现缺陷，用 <em>fiddler</em><em> </em>抓包，定位该问题是前端还是后台的问题；</li><li style=\"text-align:left;\">模拟弱网环境；</li><li style=\"text-align:left;\">统计单个功能的响应时间。</li></ol>\n</div>\n<p></p>\n<div>\n<ol><li style=\"text-align:left;\"><em>Fiddler</em><em> </em>的抓包原理</li></ol>\n<p style=\"margin-left:0;text-align:justify;\">在客户端和服务器之间建立一个代理，通过监听端口<em>(</em>默认是 <em>8888)</em>，监听本机发出的请求和服务器返回的响应结果。</p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\">用 <em>jmeter</em><em> </em>做接口可以通过，但在手机上用到这接口时用不了，什么原因：</li></ol>\n<p style=\"margin-left:0;text-align:left;\">抓包，查看从手机发出去的数据有没有问题。</p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\">接口测试的关注点<em>(</em>怎么验证接口是通过的<em>)</em></li></ol>\n<ol><li style=\"text-align:left;\">发送给服务器的请求数据是否正确；</li><li style=\"text-align:left;\">服务器返回给客户端的信息是否和预期结果一致；</li><li style=\"text-align:left;\">进入数据库，检查接口是否实现的相应的功能；</li><li style=\"text-align:left;\">接口的响应时间是否符合需求。</li></ol>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\">在进行接口的自动化测试，如果遇到 <em>token</em><em> </em>校验，你是怎么处理的？</li></ol>\n<ol><li style=\"text-align:left;\">先进行登录</li><li style=\"text-align:left;\">登录成功后</li><li style=\"text-align:left;\">获取 <em>token</em></li><li style=\"text-align:left;\">把获取的 <em>token</em><em> </em>当作下一个接口的请求参数</li></ol>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\">有一个接口 <em>A</em>，发送给服务器的数据需要从接口 <em>B</em><em> </em>中获取，怎样对 <em>A</em><em> </em>接口进行测试？</li></ol>\n<ol><li style=\"text-align:left;\">在 <em>A</em><em> </em>接口前面添加接口 <em>B</em>，在 <em>B</em><em> </em>接口中添加正则提取器，把 <em>A</em><em> </em>接口需要用到的数据关联出来，保存到参数中；</li><li style=\"text-align:left;\">在 <em>A</em><em> </em>接口中使用<em>${<!-- --></em>参数名<em>}</em>的方式进行引用。</li></ol>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\"><em>Jmeter</em><em> </em>的断言怎么做？</li></ol>\n<p style=\"margin-left:0;text-align:justify;\">选中需要断言的请求，右键，选择响应断言，在响应断言输入框中添加要断言的值；如果这个接口有多个请求数据，针对每个请求数据服务器返回数据都不一样的，这时候，我们       就要把断言的值进行参数化，步骤是：现在本地添加一个 <em>txt </em>文档，把参数化的值写入文档里面，然后再在 <em>jmeter </em>选中需要断言的请求，右键，添加 <em>CSV </em>文件设置，把刚才编辑好的<em>txt</em><em> </em>文档添加进来，在响应断言输入框中使用<em>${<!-- --></em>字段名<em>}</em>的方式来引用参数的值。</p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\">接口自动化做了多久呢</li></ol>\n<p style=\"margin-left:0;text-align:left;\">每个版本都会做接口测试，开发写好接口，我们拿到接口文档之后，我们就开始做着。</p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\"><em>jenkins</em><em> </em>怎么做接口自动化？</li></ol>\n<p style=\"margin-left:0;text-align:left;\">设置定时任务去跑脚本</p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\">接口返回的数据格式有哪些？</li></ol>\n<p style=\"margin-left:0;text-align:left;\"><em>JSON </em>格式 和 文本格式，常用的是 <em>JSON </em>格式</p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\">什么样的接口，是个好的接口</li></ol>\n<p style=\"margin-left:0;text-align:left;\">功能准确无误，响应速度快，支持多用户并发操作，安全性好</p>\n</div>\n<p></p>\n<div>\n<ol><li style=\"text-align:justify;\">接口出错了怎么办？</li></ol>\n<p style=\"margin-left:0;text-align:justify;\">首先，我会先检查一下请求参数啊，还有其他的填入的数据是否有问题，如果这些都没问题，我会 <em>ping </em>一下网络，看网络通不通，如果网络也没问题的话，我会去看看系统服务器有没有启动，如果服务器也没问题的话，那可能就要发给开发定位一下了。</p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:justify;\">你一个项目做过哪些接口？</li></ol>\n<p style=\"margin-left:0;text-align:justify;\">每个版本都会新增一些功能，对应的接口也要进行测试，一个项目的所有接口都要进行测试，比如，充值，提现，登陆，修改信息等等，开发写好一个接口后，给到我们接口文档       我们就会去测试。</p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:justify;\">接口测试用例怎么写？</li></ol>\n<p style=\"margin-left:0;text-align:justify;\">我们每个版本都会有四五个接口需求，有的是新增的接口，有的是原来的接口做了一些调整，我们会查看这些接口有哪些参数，每个参数有什么约束条件，加密方式是什么，正常和异常的响应信息有哪些，然后编写测试用例来覆盖这些需求，一个版本下来大概有五六十       条接口测试用例。</p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:justify;\">接口有哪些参数？</li></ol>\n<p style=\"margin-left:0;text-align:justify;\">充值接口，会有手机号，充值额度；投标接口，会有用户名 <em>id</em>，密码，标 <em>id</em>，投标金额这些参数；我们项目的接口有五六十个，每个接口实现的功能不一样，参数是不一样的。</p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\">接口的状态码有哪些</li></ol>\n<p style=\"margin-left:0;text-align:left;\">接口不一样，返回的状态码也不一样，我们接口的状态码是由开发统一定义的，比如， 我们 <em>xxx </em>这个项目，修改昵称这个接口，成功修改的状态码是 <em>0,30001 </em>表示 <em>token </em>无效， <em>30002 </em>表示用户不存在，还有 <em>30003 </em>等一些其他的状态码，具体意思记不太清楚了。</p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\">接口是一个一个做，还是系统做？</li></ol>\n<p style=\"margin-left:0;text-align:left;\">我们是将这个系统的所有接口，都放在 <em>Jmeter </em>的一个线程组下一起执行。</p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\"><span style=\"color:#ff0000;\">接口测试遇到过什么问题，当时是怎么操作然后出现的问题，后来又是怎么</span><span style=\"color:#ff0000;\">分析处理的？</span></li></ol>\n<p style=\"margin-left:0;text-align:left;\">就比如我们公司的片 <em>p2p </em>项目，生成回款计划这个接口，当标 <em>id </em>的值为，接口报错了原因是开发没有设定当库存量为空时，自动给一个 <em>0 </em>的默认值，导致后台接收不到数据。</p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\">你支付功能，付款的接口是怎么测试的呢？</li></ol>\n<p style=\"margin-left:0;text-align:left;\">付款的接口一般是由开发直接调试的，像支付宝、微信这些第三方支付，开发会直接调试好。</p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\">能说一下第三方支付接口的流程吗</li></ol>\n<p style=\"margin-left:0;text-align:left;\">付款的接口一般是由开发直接调试的，像支付宝、微信这些第三方支付，开发会直接调试好。</p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\">为什么要做接口测试 <em>/</em><em> </em>接口测试的目的</li></ol>\n<ol><li style=\"text-align:left;\">尽早介入测试，早发现 <em>bug</em>，降低修复成本</li></ol>\n</div>\n<p></p>\n<ol><li style=\"text-align:left;\"><em>UI</em><em> </em>界面测试无法发现底层问题</li></ol>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\">接口的加密如何处理</li></ol>\n<p style=\"margin-left:0;text-align:left;\">一般来说的话加密都是开发那边会给到加密的文档或者脚本给到我们，我们将参数进行加密后，然后再在 <em>Jmeter </em>中填写</p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<ol><li style=\"text-align:left;\"><em>Jmeter</em><em> </em>的脚本怎么在 <em>Jenkins</em><em> </em>上运行的<em>.(run_Jmeter.py)</em></li></ol>\n<p style=\"margin-left:0;text-align:left;\">当时我们老大写了一个 <em>run_jmeter </em>的 <em>Python </em>脚本用来执行，我们需要在里面设置好一些路径，比如 <em>Jmeter </em>的路径，<em>Jmeter </em>的脚本和测试报告的路径。</p>\n<h1 id=\"%C2%A0%E9%87%8D%E7%82%B9%EF%BC%9A%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E5%AD%A6%E4%B9%A0%E5%BD%93%E7%84%B6%E7%A6%BB%E4%B8%8D%E5%BC%80%E8%B5%84%E6%96%99%EF%BC%8C%E8%BF%99%E9%87%8C%E5%BD%93%E7%84%B6%E4%B9%9F%E7%BB%99%E4%BD%A0%E4%BB%AC%E5%87%86%E5%A4%87%E4%BA%86600G%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99\"> 重点：学习资料学习当然离不开资料，这里当然也给你们准备了600G的学习资料</h1>\n<p>需要的先<strong>关注</strong>再私我关键字【<strong>000</strong>】免费获取哦 注意关键字是：<strong>000</strong></p>\n<p><strong>疑惑：为什么要先关注呢？   回：因为没关注的话私信回了你看不到</strong></p>\n<h2></h2>\n<h1 id=\"%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98\">项目实战</h1>\n<p>app项目，银行项目，医药项目，电商，金融</p>\n<p></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\f30a18105d6c9c9805d5ff02b7d2fed5.png\"/>​</p>\n<p></p>\n<h1 id=\"%E5%A4%A7%E5%9E%8B%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE\">大型电商项目</h1>\n<p></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\315f0db02b4fa7553e993666eca815b1.png\"/>​</p>\n<p></p>\n<h1 id=\"%E5%85%A8%E5%A5%97%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%95%99%E5%AD%A6%E8%A7%86%E9%A2%91\">全套软件测试自动化测试教学视频</h1>\n<p></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\c131ee2c00fb05ac3cdf0fc5bd81013a.png\"/>​</p>\n<h1 id=\"300G%E6%95%99%E7%A8%8B%E8%B5%84%E6%96%99%E4%B8%8B%E8%BD%BD%E3%80%90%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%2BPPT%2B%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%E3%80%91\">300G教程资料下载【视频教程+PPT+项目源码】</h1>\n<p></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\89c718269246d8efc83816a5483d659e.png\"/>​</p>\n<p>​</p>\n<h1 id=\"%E5%85%A8%E5%A5%97%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A4%A7%E5%8E%82%E9%9D%A2%E7%BB%8F\">全套软件测试自动化测试大厂面经</h1>\n<p></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\e9796f5b54242bbb00628d0a71b33df9.png\"/>​</p>\n<p>​</p>\n<h1 id=\"python%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%2B%2B%E5%85%A8%E5%A5%97%E6%A8%A1%E6%9D%BF%2B%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95\">python自动化测试++全套模板+性能测试</h1>\n<p></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\4fe130789353a7a349500ad4ddd1d69b.png\"/>​</p>\n<p>​</p>\n<p></p>\n<p></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\83e1e04288b188b44c1dc0d180a05a0f.png\"/>​</p>\n<p>​</p>\n<p>听说关注我并三连的铁汁都已经升职加薪暴富了哦！！！！</p>\n</div>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-08-31 19:39:45", "summary": "文章末尾给大家留下了大量的福利前言：本文是根据软件测试面试葵花宝典面试题全套的其中一部分，全套宝典已经给你们准备好了，全部放在文章末尾了。什么时候要做接口测试？公司有接口测试需求，接收到接口测试任务。"}