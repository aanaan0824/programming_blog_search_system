{"blogid": "126430054", "writerAge": "码龄1年", "writerBlogNum": "40", "writerCollect": "1531", "writerComment": "2902", "writerFan": "1308", "writerGrade": "6级", "writerIntegral": "5585", "writerName": "命由己造～", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126430054.jpg", "writerRankTotal": "2939", "writerRankWeekly": "117", "writerThumb": "1883", "writerVisitNum": "49257", "blog_read_count": "2000", "blog_time": "于 2022-08-22 19:59:30 发布", "blog_title": "【牛客网面试必刷TOP101】二分查找/排序", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>二分查找/排序</h3>\n<ul><li><a href=\"#_1\">一、前言</a></li><li><a href=\"#_5\">二、学习刷题网站</a></li><li><a href=\"#_11\">三、刷题</a></li><li><ul><li><a href=\"#1I_17\">&lt;1&gt;二分查找-I</a></li><li><a href=\"#2_67\">&lt;2&gt;数组中的逆序对</a></li><li><ul><li><a href=\"#_91\">归并排序</a></li></ul>\n</li><li><a href=\"#3_152\">&lt;3&gt;比较版本号</a></li></ul>\n</li><li><a href=\"#_235\">三、小结</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>一、前言</h1>\n<blockquote>\n<p>二分查找和排序是数据结构中重要的一个章节，他的重要性也不言而喻，在未来不管是笔试还是面试都会遇到这类的题目，所以接下来我就会把一些常考的题目全部整理出来供大家学习指正。</p>\n</blockquote>\n<hr/>\n<h1><a id=\"_5\"></a>二、学习刷题网站</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1ecef81fd2bc4d0ba8974a820dfab05b.png\"/></p>\n<p><mark><font color=\"#dd0000\">点击下面链接即可进行刷题学习</font></mark><br/> <a href=\"https://www.nowcoder.com/link/pc_csdncpt_myjz_jzsf\">开始刷题</a></p>\n<h1><a id=\"_11\"></a>三、刷题</h1>\n<blockquote>\n<p>先说明一下一些题目取自<strong>牛客网面试必刷TOP101</strong><br/> 里面的一些题目在我以前的文章详细写到过，如果没有用新的方法就不会再做讲解<br/> <a href=\"https://blog.csdn.net/qq_66314292/article/details/126110317?spm=1001.2014.3001.5501\">【剑指Offer】二分法例题</a></p>\n</blockquote>\n<h2><a id=\"1I_17\"></a>&lt;1&gt;二分查找-I</h2>\n<p><a href=\"https://www.nowcoder.com/practice/d3df40bd23594118b57554129cadf47b?tpId=295&amp;tqId=1499549&amp;ru=/exam/oj&amp;qru=/ta/format-top101/question-ranking&amp;sourceUrl=/exam/oj\">题目链接</a><br/> <strong>描述</strong></p>\n<blockquote>\n<p>请实现无重复数字的升序数组的二分查找<br/> 给定一个 元素升序的、无重复数字的整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标（下标从 0 开始），否则返回 -1</p>\n</blockquote>\n<blockquote>\n<p>数据范围：0 ≤ len(nums) ≤ 2×10^5， 数组中任意值满足 ∣val∣≤10^9<br/> 进阶：时间复杂度O(logn) ，空间复杂度 O(1)</p>\n</blockquote>\n<p><strong>示例1</strong></p>\n<blockquote>\n<p>输入：[-1,0,3,4,6,10,13,14],13<br/> 返回值：6<br/> 说明：13 出现在nums中并且下标为 6</p>\n</blockquote>\n<p><strong>示例2</strong></p>\n<blockquote>\n<p>输入：[],3<br/> 返回值：-1<br/> 说明：nums为空，返回-1</p>\n</blockquote>\n<p><strong>示例3</strong></p>\n<blockquote>\n<p>输入：[-1,0,3,4,6,10,13,14],2<br/> 返回值：-1<br/> 说明：2 不存在nums中因此返回 -1</p>\n</blockquote>\n<p><strong>思路分析：</strong><br/> 这道题很显然要用二分查找，每次都取中间的数据跟目标数据比较，以此来缩小区间，<font color=\"#dd0000\">要注意left和right相等时也要比较。</font></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numsLen<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> numsLen <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> target<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            right <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h2><a id=\"2_67\"></a>&lt;2&gt;数组中的逆序对</h2>\n<p><a href=\"https://www.nowcoder.com/practice/96bd6684e04a44eb80e6a68efc0ec6c5?tpId=295&amp;tqId=23260&amp;ru=/exam/oj&amp;qru=/ta/format-top101/question-ranking&amp;sourceUrl=/exam/oj\">题目链接</a></p>\n<p><strong>描述</strong></p>\n<blockquote>\n<p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数P。并将P对1000000007取模的结果输出。 即输出P mod 1000000007</p>\n</blockquote>\n<blockquote>\n<p>数据范围： 对于50% 的数据,size ≤ 10^4<br/> 对于100% 的数据, size ≤ 10^5<br/> 数组中所有数字的值满足 0 ≤ val ≤ 1000000</p>\n</blockquote>\n<blockquote>\n<p>要求：空间复杂度O(n)，时间复杂度O(nlogn)<br/> 输入描述：<br/> 题目保证输入的数组中没有的相同的数字</p>\n</blockquote>\n<p><strong>示例1</strong></p>\n<blockquote>\n<p>输入：[1,2,3,4,5,6,7,0]<br/> 返回值：7</p>\n</blockquote>\n<p><strong>示例2</strong></p>\n<blockquote>\n<p>输入：[1,2,3]<br/> 返回值：0</p>\n</blockquote>\n<p><strong>思路分析：</strong><br/> 首先因为复杂度的要求暴力求解行不通。那么我们就可以用归并法：</p>\n<h3><a id=\"_91\"></a>归并排序</h3>\n<p>归并排序的方法就不过多介绍，在我以前的文章里有详细介绍：<a href=\"https://blog.csdn.net/qq_66314292/article/details/125248297?spm=1001.2014.3001.5501\">八大排序，你都掌握了吗？</a><br/> 首先看一个问题：假设有两个区间<code>[4, 5]</code> 和 <code>[2, 3]</code>他的逆序对数为(4, 2), (4, 3), (5, 2), (5, 3)，如果不是有序的呢？<br/> <code>[5，4]</code> 和 <code>[3，2]</code>（同一区间已经计算过）结果还是4个，那么拍成有序有必要吗？<br/> <font color=\"#0000dd\"><strong>答案是有必要</strong></font><br/></p>\n<blockquote>\n<p>可以看这样一个场景：<br/> 两个区间<code>[4, 5]</code> 和 <code>[2, 3]</code>我们知道4 &gt; 2，那么显然4 后面的数字都大于2，就可以方便我们计数。</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> tmp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span><span class=\"token operator\">*</span> k<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">&gt;=</span> right<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> begin1 <span class=\"token operator\">=</span> left<span class=\"token punctuation\">,</span> end1 <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> begin2 <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end2 <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//放入tmp数组</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>begin1 <span class=\"token operator\">&lt;=</span> end1 <span class=\"token operator\">&amp;&amp;</span> begin2 <span class=\"token operator\">&lt;=</span> end2<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>begin1<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> data<span class=\"token punctuation\">[</span>begin2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            tmp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>begin1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            begin1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            tmp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>begin2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>k<span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>end1 <span class=\"token operator\">-</span> begin1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            begin2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>begin1 <span class=\"token operator\">&lt;=</span> end1<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        tmp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>begin1<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//(*k) += len;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>begin2 <span class=\"token operator\">&lt;=</span> end2<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        tmp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>begin2<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//把tmp拷贝回去</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">InversePairs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> dataLen <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> dataLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> dataLen <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> k <span class=\"token operator\">%</span> <span class=\"token number\">1000000007</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h2><a id=\"3_152\"></a>&lt;3&gt;比较版本号</h2>\n<p><a href=\"https://www.nowcoder.com/practice/2b317e02f14247a49ffdbdba315459e7?tpId=295&amp;tqId=1024572&amp;ru=/exam/oj&amp;qru=/ta/format-top101/question-ranking&amp;sourceUrl=/exam/oj\">题目链接</a><br/> <strong>描述</strong></p>\n<blockquote>\n<p>牛客项目发布项目版本时会有版本号，比如1.02.11，2.14.4等等<br/> 现在给你2个版本号version1和version2，请你比较他们的大小<br/> 版本号是由修订号组成，修订号与修订号之间由一个\".\"连接。1个修订号可能有多位数字组成，修订号可能包含前导0，且是合法的。例如，1.02.11，0.1，0.2都是合法的版本号<br/> 每个版本号至少包含1个修订号。<br/> 修订号从左到右编号，下标从0开始，最左边的修订号下标为0，下一个修订号下标为1，以此类推。</p>\n</blockquote>\n<p><strong>比较规则：</strong></p>\n<blockquote>\n<p>一. 比较版本号时，请按从左到右的顺序依次比较它们的修订号。比较修订号时，只需比较忽略任何前导零后的整数值。比如\"0.1\"和\"0.01\"的版本号是相等的<br/> 二. 如果版本号没有指定某个下标处的修订号，则该修订号视为0。例如，“1.1\"的版本号小于\"1.1.1”。因为\"1.1\"的版本号相当于\"1.1.0\"，第3位修订号的下标为0，小于1<br/> 三. version1 &gt; version2 返回1，如果 version1 &lt; version2 返回-1，不然返回0.</p>\n</blockquote>\n<p><strong>数据范围：</strong></p>\n<blockquote>\n<p>1 &lt;= version1.length, version2.length &lt;= 10001&lt;=version1.length,version2.length&lt;=1000<br/> version1 和 version2 的修订号不会超过int的表达范围，即不超过 32 位整数 的范围<br/> 进阶： 时间复杂度 O(n)</p>\n</blockquote>\n<p><strong>示例1</strong></p>\n<blockquote>\n<p>输入：“1.1”,“2.1”<br/> 返回值：-1<br/> 说明：version1 中下标为 0 的修订号是 “1”，version2 中下标为 0 的修订号是 “2” 。1 &lt; 2，所以 version1 &lt; version2，返回-1</p>\n</blockquote>\n<p><strong>示例2</strong></p>\n<blockquote>\n<p>输入：“1.1”,“1.01”<br/> 返回值：0<br/> 说明：version2忽略前导0，为\"1.1\"，和version相同，返回0</p>\n</blockquote>\n<p><strong>示例3</strong></p>\n<blockquote>\n<p>输入：“1.1”,“1.1.1”<br/> 返回值：-1<br/> 说明：“1.1\"的版本号小于\"1.1.1”。因为\"1.1\"的版本号相当于\"1.1.0\"，第3位修订号的下标为0，小于1，所以version1 &lt; version2，返回-1</p>\n</blockquote>\n<p><strong>示例4</strong></p>\n<blockquote>\n<p>输入：“2.0.1”,“2”<br/> 返回值：1<br/> 说明：version1的下标2&gt;version2的下标2，返回1</p>\n</blockquote>\n<p><strong>示例5</strong></p>\n<blockquote>\n<p>输入：“0.226”,“0.36”<br/> 返回值：1<br/> 说明：226&gt;36，version1的下标2&gt;version2的下标2，返回1</p>\n</blockquote>\n<p><strong>思路分析：</strong><br/> 这道题最令人头疼的是前置0，那么我们就可以把每个<code>.</code>之前的字符串转换为数字，然后比较，就可以消除前置0的影响。</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> version1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> version2 <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> sz1 <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>version1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sz2 <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>version2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> sz1 <span class=\"token operator\">||</span> j <span class=\"token operator\">&lt;</span> sz2<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//统计.之前的数字</span>\n        <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> sz1 <span class=\"token operator\">&amp;&amp;</span> version1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            num1 <span class=\"token operator\">=</span> num1 <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>version1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//跳过.</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> sz2 <span class=\"token operator\">&amp;&amp;</span> version2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            num2 <span class=\"token operator\">=</span> num2 <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>version2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//跳过.</span>\n        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//比较大小</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&lt;</span> num2<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&gt;</span> num2<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h1><a id=\"_235\"></a>三、小结</h1>\n<blockquote>\n<p>二分查找是在面试中考的非常多的知识点，一定要掌握方法，排序的八种方法也要烂熟于心。</p>\n</blockquote>\n<p><font color=\"#660066\">点击链接<a href=\"https://www.nowcoder.com/link/pc_csdncpt_myjz_jzsf\">一起刷题吧</a></font></p>\n<hr/>\n<hr/>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-22 19:59:30", "summary": "二分查找排序一、前言二、学习刷题网站三、刷题二分查找数组中的逆序对归并排序比较版本号三、小结一、前言二分查找和排序是数据结构中重要的一个章节，他的重要性也不言而喻，在未来不管是笔试还是面试都会遇到这类"}