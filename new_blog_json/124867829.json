{"blogid": "124867829", "writerAge": "码龄8年", "writerBlogNum": "1", "writerCollect": "6", "writerComment": "1", "writerFan": "0", "writerGrade": "1级", "writerIntegral": "12", "writerName": "qq_25298175", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124867829.jpg", "writerRankTotal": "231325", "writerRankWeekly": "1283780", "writerThumb": "0", "writerVisitNum": "1140", "blog_read_count": "1138", "blog_time": "于 2022-05-19 17:31:21 发布", "blog_title": ".netCore WebAPI入门到实战(一)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h2></h2>\n<p></p>\n<h2 id=\"zGbP2\">前言</h2>\n<p id=\"u63135484\">本次开发环境为vs2022 + sql2019，该篇文章旨在记录学习.netCore过程中踩到的一些坑，项目会基于.netCore WebAPI一步一步实现数据库的增删查改操作，并记录服务器部署过程中踩到的一些坑，如最常见的跨域问题和不同网络下访问的问题；</p>\n<h2 id=\"XPzX9\">一、WebAPI实现</h2>\n<p id=\"uf91e972e\">1、新建项目，选择ASP.NET Core Web API,点击下一步</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\432401ef870c63f6132d8e42c168757d.png\"/></p>\n<p id=\"ud5b19d82\"><br/> 2、框架选择.NET6.0(一定要用这个版本，网上有很多教程都是基于3.0或5.0的教程，如果选错了，后面配置的复杂度会比较高，建议选6.0),不要勾选启用Docker</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\34db934dd54a62bebf608db094961832.png\"/></p>\n<p id=\"u08546d68\">3、创建完成后，按 Ctrl+F5 运行应用。 Visual Studio 启动浏览器并导航到 https://localhost:&lt;port&gt;/api/values，其中 &lt;port&gt; 是随机选择的端口号。</p>\n<p id=\"uf0c7f02c\">如果出现询问是否应信任 IIS Express 证书的对话框，则选择“是”。 在接下来出现的“安全警告”对话框中，选择“是”。</p>\n<p id=\"u6d5c635d\">代码运行起来后就会在浏览器打开如下所示界面，点击页面上的GET方法，可以在该界面对系统默认生产的方法进行测试</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\b4d0e421721b5826d424fa8cd8f88c18.png\"/></p>\n<p id=\"u4a3d60c0\">4、安装项目依赖；使用NuGet添加EF环境：</p>\n<p id=\"ua9a8eca2\">Microsoft.EntityFrameworkCore.SqlServer</p>\n<p id=\"u3be2f371\">Microsoft.EntityFrameworkCore.Tools</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\b90e1314b0401c2cb29a304d9ba06ddb.png\"/></p>\n<p id=\"u5d4041e7\"></p>\n<p id=\"u5d04db97\">5、添加模型类；在“解决方案资源管理器”中，右键单击项目。 选择“添加” &gt; “新建文件夹”。 将文件夹命名为“Models”。</p>\n<p id=\"u5be73776\">右键单击“Models”文件夹，然后选择“添加” &gt; “类”。 将类命名为 merchants，然后选择“添加”。</p>\n<p id=\"ub60e3325\">将模板代码替换为以下代码</p>\n<pre id=\"Bb92f\">namespace Renners.Models\n{\npublic class merchants\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public int Start { get; set; }\n    \n    public string Desc { get; set; }\n    \n}\n}\n</pre>\n<p id=\"ubf976a9e\">6、添加数据库上下文；右键单击“Models”文件夹，然后选择“添加” &gt; “类”。 将类命名为 merchantsContext，然后单击“添加”。</p>\n<p id=\"ud95b41b2\">将模板代码替换为以下代码</p>\n<pre id=\"wAnPt\">using Microsoft.EntityFrameworkCore;\n\nnamespace Renners.Models\n{\n    public class merchantsContext:DbContext\n    {\n        public DbSet&lt;merchants&gt; merchantss { get; set; }\n\n        public merchantsContext(DbContextOptions&lt;merchantsContext&gt; options) : base(options)\n        {\n\n        }\n\n\n    }\n}</pre>\n<p id=\"u4f3136bf\">7、添加EF连接字符串配置；打开appsettings.json文件，在该文件中配置数据库链接字符串</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\9a81abec01fc27674f81fc2729b1ef2b.png\"/></p>\n<p id=\"u966809b7\">8、在进行接下来的操作之前，请先确保数据库是可链接状态；如果也遇到我以下情况，解决方案点击这里：</p>\n<p id=\"ub61b15b2\"><a href=\"https://www.cnblogs.com/dzhf/p/7883577.html\" title=\"数据库无法链接\">数据库无法链接</a></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\669f1c8a99bdd4dff6760298436b5ff1.png\"/></p>\n<p id=\"ubd0eb190\">9、打开VS\"工具\"--\"NuGet包安装器\"--\"程序包管理器控制台\"，输入下面连接EF初始化命令和更新命令：</p>\n<p id=\"u7a92850d\">初始化：add-migration init 更新：update-database</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\b2636b9f06d3520ce50c2998704c5998.png\"/></p>\n<p id=\"ub6a84f29\">10、添加Dbcontext服务；打开Program类，将添加以下代码Context则为之前在modles中定义的context；添加后系统会报错，是因为没有引入对于的引用，根据代码提示智能添加引用即可</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\28492b054c1f7d3cf78e014804bad2db.png\"/></p>\n<pre id=\"jKcmT\">//添加Dbcontext服务\nbuilder.Services.AddDbContext&lt;MyDbContext&gt;(options =&gt;\n{\n    var constr = new ConfigurationBuilder()\n                 .SetBasePath(Directory.GetCurrentDirectory())\n                 .AddJsonFile(\"appsettings.json\", optional: true, reloadOnChange: true)\n                 .Build()\n                 .GetConnectionString(\"Default\");\n    options.UseSqlServer(constr);\n});\n</pre>\n<p id=\"ue03d96a3\">11、添加控制器；右键单击 Controllers 文件夹。选择 <strong>添加</strong> &gt; <strong>新建项</strong>。在“添加新项”对话框中，选择“API 控制器类”模板。将类命名为 merchantsController，然后选择“添加”。</p>\n<p id=\"uacd92e76\">12、在控制器中注入DbContext；</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\2577cd5d0144d4c70158733178466070.png\"/></p>\n<pre id=\"ifwW0\">    private readonly merchantsContext _merchantsContext;\n        public merchantsController(merchantsContext merchantsContext) {\n            _merchantsContext = merchantsContext;\n        }</pre>\n<p id=\"u17fc3da5\">13、如果表类有修改，使用add-migration init 和update-database可以直接更新对应数据库，本例中在merchants表中会添加Userid字段：（此条不演示，直接执行add-migration init 和update-database命令），打开数据库，则可以看见merchants表已经创建了</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\a59bc71596ed1ced5bdb375d5ea05149.png\"/></p>\n<p id=\"u13eee4dc\">15、添加 Get 方法；若要提供检索商家的 API，请将以下方法添加到 merchantsController 类中：</p>\n<pre id=\"oM3uZ\">      // GET: api/Todo\n        [HttpGet]\n        public async Task&lt;ActionResult&lt;IEnumerable&lt;merchants&gt;&gt;&gt; GetTodoItems()\n        { return await _merchantsContext.merchantss.ToListAsync(); }\n\n        // GET: api/Todo/5\n        [HttpGet(\"{id}\")]\n        public async Task&lt;ActionResult&lt;merchants&gt;&gt; GetTodoItem(long id)\n        {\n            var todoItem = await _merchantsContext.merchantss.FindAsync(id);\n            if (todoItem == null) { return NotFound(); }\n            return todoItem;\n        }</pre>\n<p id=\"u71a0dec4\">这些方法实现两个 GET 终结点：</p>\n<ul><li id=\"u57940e86\">GET /api/todo</li><li id=\"u0f1727af\">GET /api/todo/{id}</li></ul>\n<p id=\"u9c17c9de\">通过从浏览器调用两个终结点来测试应用。 例如:</p>\n<ul><li id=\"ud265705d\">https://localhost:&lt;port&gt;/api/todo</li><li id=\"u215866cb\">https://localhost:&lt;port&gt;/api/todo/1</li></ul>\n<p id=\"uc3985f21\">以下 HTTP 响应通过调用 GetTodoItems 来生成：</p>\n<p id=\"udd24fab1\">此处我事先在数据库中插入了一条测试数据，所以通过接口会返回如下图所示json</p>\n<p id=\"u92ca26f3\">数据库操作为</p>\n<p id=\"u405f8dd9\">insert into merchantss (Name,Start,Dsc)</p>\n<p id=\"u953970d6\">values</p>\n<p id=\"u1c0480ff\">('测试5',1,'ddd')</p>\n<pre id=\"LSbYN\">[\n  {\n    \"id\": 2,\n    \"name\": \"测试5\",\n    \"start\": 1,\n    \"dsc\": \"ddd\"\n  }\n]</pre>\n<p id=\"u2f58ed86\">返回值；merchants和 merchant方法的返回类型是 <a href=\"https://docs.microsoft.com/zh-cn/aspnet/core/web-api/action-return-types?view=aspnetcore-2.2#actionresultt-type\" title=\"ActionResult&lt;T&gt; 类型\">ActionResult&lt;T&gt; 类型</a>。 ASP.NET Core 自动将对象序列化为 <a href=\"https://www.json.org/\" title=\"JSON\">JSON</a>，并将 JSON 写入响应消息的正文中。 在假设没有未经处理的异常的情况下，此返回类型的响应代码为 200。 未经处理的异常将转换为 5xx 错误。</p>\n<p id=\"ua1e2b846\">ActionResult 返回类型可以表示大范围的 HTTP 状态代码。 例如，GetTodoItem 可以返回两个不同的状态值：</p>\n<ul><li id=\"u7b705dcb\">如果没有任何项与请求的 ID 匹配，则该方法将返回 404 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.controllerbase.notfound\" title=\"NotFound\">NotFound</a> 错误代码。</li><li id=\"uc026d0f7\">否则，此方法将返回具有 JSON 响应正文的 200。 返回 item 则产生 HTTP 200 响应。</li></ul>\n<p id=\"uaf1de28a\"></p>\n<p id=\"u2b556306\">16、测试 merchants方法</p>\n<p id=\"u9a0b9075\">本教程使用 Postman 测试 Web API。</p>\n<ul><li id=\"u03b7e8f1\">安装 <a href=\"https://www.getpostman.com/apps\" title=\"Postman\">Postman</a></li><li id=\"u8d4db658\">启动 Web 应用。</li><li id=\"ub3ef936b\">启动 Postman。</li><li id=\"uc09b36dd\">禁用 SSL 证书验证在“文件”&gt;“设置”（“常规”*选项卡）中，禁用“SSL 证书验证”。 警告在测试控制器之后重新启用 SSL 证书验证。</li><li id=\"u5a1de2ef\">创建新请求。将 HTTP 方法设置为“GET”。将请求 URL 设置为 https://localhost:&lt;port&gt;/api/merchants。 例如 https://localhost:5001/api/merchants。</li><li id=\"u163b3ec0\">在 Postman 中设置“两窗格视图”。</li><li id=\"u55b08d29\">选择“发送”。</li></ul>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\085cb19d665cd8f964339ad60064865a.png\"/></p>\n<p id=\"ua8945916\">17、以此添加创建方法，修改方法，删除方法；注意：每个方法对于的请求方法不同</p>\n<p id=\"uda057c51\">POST对应添加</p>\n<p id=\"u1de53c54\">PUT对应修改</p>\n<p id=\"uec435ee8\">Delete对应删除</p>\n<pre id=\"REqsv\">    //添加方法\n        // POST: api/Todo\n        [HttpPost]\n        public async Task&lt;ActionResult&lt;merchants&gt;&gt; PostTodoItem(merchants item)\n        {\n            _merchantsContext.merchantss.Add(item);\n            await _merchantsContext.SaveChangesAsync();\n\n            return CreatedAtAction(nameof(GetTodoItem), new { id = item.Id }, item);\n        }</pre>\n<pre id=\"T39Es\">        //修改，接口调用之前需要调用get以确保进行put调用之前数据库中有一个项，接口中需要带有需更改的id\n        //如果要更新id为5的数据时i，接口不能直接调用https://localhost:7239/api/Todo，需要加上参数5\n        //正确的接口调用为https://localhost:7239/api/Todo/5\n        // PUT: api/Todo/5\n        [HttpPut(\"{id}\")]\n        public async Task&lt;IActionResult&gt; PutTodoItem(long id, TodoItem item)\n        {\n            if (id != item.Id)\n            {\n                return BadRequest();\n            }\n\n            _context.Entry(item).State = EntityState.Modified;\n            await _context.SaveChangesAsync();\n\n            return NoContent();\n        }\n\n\n        //删除\n        // DELETE: api/Todo/5\n        [HttpDelete(\"{id}\")]\n        public async Task&lt;IActionResult&gt; DeleteTodoItem(long id)\n        {\n            var todoItem = await _context.TodoItems.FindAsync(id);\n\n            if (todoItem == null)\n            {\n                return NotFound();\n            }\n\n            _context.TodoItems.Remove(todoItem);\n            await _context.SaveChangesAsync();\n\n            return NoContent();\n        }</pre>\n<p id=\"uaab8f1a9\">本示例使用内存数据库，每次启动应用时都必须对其进行初始化。 在进行 PUT 调用之前，数据库中必须有一个项。 调用 GET 以确保在进行 PUT 调用之前数据库中有一个项。</p>\n<h2 id=\"hN9ab\">二、WebAPI部署</h2>\n<p id=\"u01efb98a\">1、右键项目点击“发布”</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\818266974b029e239d1bf0408f0adeb3.png\"/></p>\n<p id=\"ub151a058\">2、选择目标为“文件夹”</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\82b576beb6cba0011c2b4c9b7f907118.png\"/></p>\n<p id=\"u8dac7cbf\">3、点击“发布”按钮</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\c2d58c81b6631aaac9d4e1b4c75c35b1.png\"/></p>\n<p id=\"u729eff14\">4、检查IIS是否支持webApi环境，看环境中是否包含AspNetCoreModuleV2</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\2878abf535f9417f77d7759944222a05.png\"/></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\75e3d6ee4e16e4da2953bb41e86a4f5c.png\"/></p>\n<p id=\"ud5755515\">5、如果没有，则需自主下载并安装Hosting Bundle；下载地址：<a href=\"https://dotnet.microsoft.com/zh-cn/download/dotnet\" title=\".NET 下载(Linux、macOS 和 Windows)\">.NET 下载(Linux、macOS 和 Windows)</a></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\4ad512e33d29915b6a3c5620c4b1e7ae.png\"/></p>\n<p id=\"u8ab1058c\">6、在IIS点击新建网站，网站文件所在位置选择第2步选存放的文件夹即可（此处演示为部署与本机，部署在服务器上时，只需要将之前发布的文件拷贝到服务器，重复以上操作即可）</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\303c49458f10f75172cc073f101149e2.png\"/></p>\n<h2 id=\"SJSVv\">三、API跨域问题解决方法</h2>\n<p id=\"uc8d4bd9b\">在开发过程中，经常会出现后端程序访问自己的接口没什么问题，但是给到前端的时候就不能使用的情况，这种情况一般是因为跨域导致的，查阅了网上很多解决方案，都没有正在解决webapi的跨域问题，后来查阅文档后发现，只需要在Program类中，添加如下所示代码，即可解决跨域问题</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\53f9f1ea365c81362f588e18ff488e0f.png\"/></p>\n<p id=\"ue7acf03d\">代码示例</p>\n<pre id=\"t0q5C\">//处理跨域问题\nbuilder.Services.AddCors(cor =&gt;\n{\n    cor.AddPolicy(\"Cors\", policy =&gt;\n    {\n        policy\n        .AllowAnyOrigin()\n        .AllowAnyHeader()\n        .AllowAnyMethod();\n    });\n});</pre>\n<p id=\"uf8ab6142\">添加完以上代码后，重新生成解决方法，再次发布后，跨域问题就解决了</p>\n<h2 id=\"vGaGR\">四、防火墙拦截</h2>\n<p id=\"u5f676fb0\">当我们部署好相关代码后，会发现本机已经可以通过ip+接口地址的方式进行访问了，但其他人的电脑无法访问，无论是局域网还是互联网都无法访问你的api，此时你就需要看一下你的服务器端口是不是被占用或者未开启，若你部署服务器的端口为7788，应把防火墙可入网规则也设置为相同的端口，具体如下：</p>\n<p id=\"ue9c6af4c\">1、打开防护墙，找到“高级设置”</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\0618c41b9bac1380752e9a039a1dd607.png\"/></p>\n<p id=\"ud1be2468\">2、选择入站规则，点击“新建规则”</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\16482af70ae35e68a875f1ce4ce0b62d.png\"/></p>\n<p id=\"u130aa20c\">3、选择“端口”</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\05f9958c98d65e1e3f84db4e7f7314b6.png\"/></p>\n<p id=\"u5cb61929\">4、在特定本地端口输入与IIS服务之前的端口号即可</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\70680b874a9a73e6e0d9c47d3cc555bf.png\"/></p>\n<p id=\"u094ceda8\">5、再次把你的接口链接分享给你的小伙伴吧，此时就会发现，接口已经可以正常访问了</p>\n<p>源代码下载地址：<a class=\"has-card\" href=\"https://download.csdn.net/download/qq_26727185/10297587?spm=1003.2449.3001.7924\" title=\"EFCore+WebAPi增删改查_efcore增删改查-C#代码类资源-CSDN下载\"><span class=\"link-card-box\"><span class=\"link-title\">EFCore+WebAPi增删改查_efcore增删改查-C#代码类资源-CSDN下载</span><span class=\"link-desc\">由EFCore配合WebApi搭建的简单框架，通过Ajax实现增删改查，显示部分用了AngularJefcore增删改查更多下载资源、学习资料请访问CSDN下载频道.</span><span class=\"link-link\"><img alt=\"\" class=\"link-link-icon\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\"/>https://download.csdn.net/download/qq_26727185/10297587?spm=1003.2449.3001.7924</span></span></a></p>\n</div>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 0, "time": "2022-05-19 17:31:21", "summary": "前言本次开发环境为，该篇文章旨在记录学习过程中踩到的一些坑，项目会基于一步一步实现数据库的增删查改操作，并记录服务器部署过程中踩到的一些坑，如最常见的跨域问题和不同网络下访问的问题；一、实现、新建项目"}