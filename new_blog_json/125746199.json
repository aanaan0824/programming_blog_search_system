{"blogid": "125746199", "writerAge": "码龄1年", "writerBlogNum": "61", "writerCollect": "1640", "writerComment": "1513", "writerFan": "2368", "writerGrade": "5级", "writerIntegral": "4097", "writerName": "栋zzzz", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125746199.jpg", "writerRankTotal": "5797", "writerRankWeekly": "19484", "writerThumb": "1446", "writerVisitNum": "69959", "blog_read_count": "2363", "blog_time": "于 2022-07-13 00:23:57 发布", "blog_title": "Spring更简单的使用方法", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>前面介绍了一些最基本的存储和读取Bean对象的方法,但是在Spring中已经基本不这样使用了,因此这一篇博客就来介绍一下更简单的存储和读取Bean对象的方法而想要更简单的存储和读取最核心的就是使用注解,下面一起来看看吧!</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9872b157a43d46aa9257828c704625b0.png\" width=\"400\"/></p>\n<hr/>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#_Bean_6\">🍌 一.存储Bean对象</a></li><li><ul><li><a href=\"#_1_7\">🍓 1.配置扫描路径</a></li><li><a href=\"#_2_21\">🍓 2.使用五大类注解实现</a></li><li><ul><li><a href=\"#_21Controller_22\">🍉 2.1.@Controller【控制器】</a></li><li><a href=\"#_22Service_49\">🍉 2.2.@Service【服务】</a></li><li><a href=\"#_23Repository_74\">🍉 2.3.@Repository【仓库】</a></li><li><a href=\"#_24Configuration_99\">🍉 2.4.@Configuration【配置】</a></li><li><a href=\"#_25Component_127\">🍉 2.5.@Component【组件】</a></li></ul>\n</li><li><a href=\"#_3_149\">🍓 3.为什么需要五大类注解</a></li><li><a href=\"#_4Bean_170\">🍓 4.使用方法注解@Bean来实现</a></li></ul>\n</li><li><a href=\"#_Bean_231\">🍌 二.获取Bean对象</a></li><li><ul><li><a href=\"#_1_235\">🍓 1.属性注入（字段注入）</a></li><li><a href=\"#_2_267\">🍓 2.构造方法注入</a></li><li><a href=\"#_3Setter_301\">🍓 3.Setter注入</a></li><li><a href=\"#_4_Resource_339\">🍓 4.另⼀种注入关键字 @Resource</a></li><li><a href=\"#_5Bean_345\">🍓 5.@Bean将一个类型的参数注入多次</a></li><li><ul><li><a href=\"#_51bean_387\">🍉 5.1.精确的描述bean的名称（将注入的名字写对）</a></li><li><a href=\"#_52Resource_393\">🍉 5.2.使用@Resource注解</a></li><li><a href=\"#_53Autowired_398\">🍉 5.3.使用@Autowired注解</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_Bean_6\"></a>🍌 一.存储Bean对象</h1>\n<h2><a id=\"_1_7\"></a>🍓 1.配置扫描路径</h2>\n<p>想要将bean对象成功的存储到 Spring 中，此处需要<mark>配置</mark>⼀下存储对象的<mark>扫描包路径</mark>,在在Spring的配置文件 spring-config.xml中添加如下内容:</p>\n<pre><code class=\"prism language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span>\n       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span>\n       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/context<span class=\"token punctuation\">\"</span></span>\n       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token comment\">&lt;!--    注册扫描的包（所有存放bean的路径下）--&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">content:</span>component-scan</span> <span class=\"token attr-name\">base-package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>beans<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">content:</span>component-scan</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>这里需要修改的就是base-package的路径,这里需要将自己设置的存放bean对象的包改进去,然后Spring就会从这个包里面去扫描,如果没有设置的话,就是不会扫描的!</p>\n<h2><a id=\"_2_21\"></a>🍓 2.使用五大类注解实现</h2>\n<h3><a id=\"_21Controller_22\"></a>🍉 2.1.@Controller【控制器】</h3>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好，controller\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>此时就已经将此对象存储到Spring中了,然后再通过之前的取对象就看有进行读取使用了</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//先得到上下文对象</span>\n        <span class=\"token class-name\">ApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spring-config.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//得到bean,</span>\n        <span class=\"token class-name\">UserController</span> controller <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userController\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">UserController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//使用bean</span>\n        controller<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>此时这里就有个问题id到底是什么呢？很显然这里就需要使用到类名的小驼峰模式了!这样就能够访问到对象里面的方法了<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\609c0fdfe4ac48169339bbab83169dd5.png\"/></p>\n<h3><a id=\"_22Service_49\"></a>🍉 2.2.@Service【服务】</h3>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好，service\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>此时就已经将此对象存储到Spring中了,然后再通过之前的取对象就看有进行读取使用了</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//先得到上下文对象</span>\n        <span class=\"token class-name\">ApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spring-config.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//得到bean</span>\n        <span class=\"token class-name\">UserService</span> service<span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userService\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">UserService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//使用bean</span>\n        <span class=\"token class-name\">Service</span><span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\754afd96b09f4542b69d45cf2cb4ce2f.png\"/></p>\n<h3><a id=\"_23Repository_74\"></a>🍉 2.3.@Repository【仓库】</h3>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Repository</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好，repository\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>此时就已经将此对象存储到Spring中了,然后再通过之前的取对象就看有进行读取使用了</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//先得到上下文对象</span>\n        <span class=\"token class-name\">ApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spring-config.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//得到bean</span>\n        <span class=\"token class-name\">UserRepository</span> repository <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userRepository\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">UserRepository</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//使用bean</span>\n        repository<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fd5eadf068114cb6a490e69670c62caa.png\"/></p>\n<h3><a id=\"_24Configuration_99\"></a>🍉 2.4.@Configuration【配置】</h3>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserConfig</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好，config\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>这里一定不能使用Configurable，而是Configuration注解,这是配置层<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b8a52f1128694353af57a62531389cd5.png\"/></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//先得到上下文对象</span>\n        <span class=\"token class-name\">ApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spring-config.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//得到bean</span>\n        <span class=\"token class-name\">UserRepository</span> repository <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userRepository\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">UserRepository</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//使用bean</span>\n        repository<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\48f7b010b4c14619ae10b1722285b65f.png\"/></p>\n<h3><a id=\"_25Component_127\"></a>🍉 2.5.@Component【组件】</h3>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserComponent</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好，component\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//先得到上下文对象</span>\n        <span class=\"token class-name\">ApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spring-config.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//得到bean</span>\n        <span class=\"token class-name\">UserComponent</span> component <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userComponent\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">UserComponent</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        component<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a31d5aa9e3ad4af7a0db336017550ee8.png\"/></p>\n<h2><a id=\"_3_149\"></a>🍓 3.为什么需要五大类注解</h2>\n<p>上面五大类注解用法基本用法都是类似的，但是<font color=\"#cd0e1b\">为什么要用到五类注解</font>呢？他们之间又有什么关系呢？下面一起来看看吧！<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9f713c0f28e44c54ae874a4fb3e6cde0.png\"/><br/> 这个是程序的分工层次，这其实就对应到了上面的注解，其实每个注解都对应了不同的应用场景，而之所以非诚这么多类注解，就是让程序员看到注解之后，就能直接了当的了解类的用途，这也就提升了代码的可读性，让程序员可以直观的判断当前类的用途；</p>\n<p>五大注解之间的<mark>关系</mark>：<br/> 简单的看一下五大注解的源码，就可以发现<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1eb718df6be14f9cab35d395aa53395a.png\"/><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\93f62fe175584ef9b24c9739fac63d5f.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\813d7ac389d448c59a450c0e6c49de99.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a191f70bba0f4deabbd940f59346fa63.png\"/><br/> @Controller，@Service，@Repository，@Configuration都是基于@Component实现的，@Component是四个注解的父类！</p>\n<blockquote>\n<p>这里再来考虑一下为什么bean name是<mark>小驼峰</mark>的模式？<br/> 查看源码可以发现<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\04715690c569401bb23b49653210a474.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e4981db0ab1b459497a3fb18e598c7c5.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\26376d33a8eb498ead790fac13deeba5.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a41ddcc4f4f14bbe9b05501825daadd5.png\"/><br/> 可以发现当类名的第一个和第二个字符都是大写的时候是直接返回的，而当第二个字符不是大写的时候，就会使用小驼峰的形式进行返回，因此这里一般使用的就是小驼峰的形式！</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\79f5e5a5e5984b95b260430166356bf0.png\" width=\"266\"/></p>\n<h2><a id=\"_4Bean_170\"></a>🍓 4.使用方法注解@Bean来实现</h2>\n<p>使用方法注解就不能再把注解加到类上了，因此只能加到方法上才可以，而@Bean是不能单独使用的，需要搭配一个类注解才可以使用（五个注解任何一个都可以）！</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserBeans</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//这里使用bean注解，bean注解只能放在方法上面</span>\n    <span class=\"token annotation punctuation\">@Bean</span> \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">user1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//先得到上下文对象</span>\n        <span class=\"token class-name\">ApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spring-config.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//得到bean</span>\n        <span class=\"token comment\">//这里的id就是方法名</span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8ecd2030e5e548458b0a27fea4020788.png\"/><br/> 这样就获得到这个bean对象了，而这里的bean name就不是类名的小驼峰形式了，而是加@Bean注解的<mark>方法名称</mark>！<br/> 而这里直接使用方法名就会比较奇怪，也不符合规范，因此能不能给bean name进行修改呢？当然是可以的，这里就可以通过设置 name 属性给 Bean 对象进⾏<mark>重命名</mark>操作！</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserBeans</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">user1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这里是设置了一个名称，通过这个name再获取对象：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//先得到上下文对象</span>\n        <span class=\"token class-name\">ApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spring-config.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//得到bean</span>\n        <span class=\"token comment\">//这里的id就是方法名</span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d393bf3cf7604af3bce9d2cd6a244cbe.png\"/><br/> 发现也是可以的，因此名字就算修改成功了，而且这里还可以给一个bean对象设置多个名字，只需要将其他名字也放到大括号内就行了，而@Bean命名规则，当没有设置name属性的时候，bean name默认的名称就是方法名，当设置了name属性后，就只能通过设置好的bean name来获取bean了，再使用方法名就会报错了！</p>\n<hr/>\n<h1><a id=\"_Bean_231\"></a>🍌 二.获取Bean对象</h1>\n<p>获取bean对象也称为对象装配，就是把对象取出来放到某个类中，而这有时候也称为对象注入，而吧对象从容器中读取出来有三种方法，下面一起来看看吧！<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1166d8053fac4384ba9045ede222d76e.png\" width=\"260\"/></p>\n<h2><a id=\"_1_235\"></a>🍓 1.属性注入（字段注入）</h2>\n<p>直接使用@Autowired在属性上就可以进行注入了</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Repository</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好，repository\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//属性注入，使用Autowired</span>\n    <span class=\"token annotation punctuation\">@Autowired</span> <span class=\"token comment\">// 前提条件是UserRepository对象已经存储到Spring中了</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserRepository</span> userRepository<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>此时就已经将对象注入进来了，下面可以看一下是否成功了</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//先得到上下文对象</span>\n        <span class=\"token class-name\">ApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spring-config.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">UserController</span> controller <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userController\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">UserController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        controller<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\782d923e4ad04567a53f7dd6e97d571e.png\"/><br/> 这就发现是符合预期结果的</p>\n<h2><a id=\"_2_267\"></a>🍓 2.构造方法注入</h2>\n<p>在构造方法上面添加@Autowired注解也就看有进行注入了</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Repository</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好，repository\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserService</span> userService<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>  <span class=\"token comment\">//构造方法注入，要遵守单一原则，多个参数是会注入失败的</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserController</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserService</span> userService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userService <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        userService<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>此时就已经将对象注入进来了，下面可以看一下是否成功了</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//先得到上下文对象</span>\n        <span class=\"token class-name\">ApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spring-config.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">UserController</span> controller <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userController\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">UserController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        controller<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6c4af182090b43f09bf3b0173586fd5c.png\"/><br/> 而当构造方法传入的参数较多时，就无法正确进行注入了，就会出现错误，因此在使用构造方法注入的时候，就需要遵循单一原则！而当一个类中只有一个构造方法的时候是可以省略@Autowired</p>\n<h2><a id=\"_3Setter_301\"></a>🍓 3.Setter注入</h2>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Repository</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好，repository\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserService</span> userService<span class=\"token punctuation\">;</span>\n     <span class=\"token annotation punctuation\">@Autowired</span>\n     <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setUserService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserService</span> userService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userService <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        userService<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>此时就已经将对象注入进来了，下面可以看一下是否成功了</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//先得到上下文对象</span>\n        <span class=\"token class-name\">ApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spring-config.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">UserController</span> controller <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userController\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">UserController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        controller<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5cef3e390f9c49e8b266b2ec7f3a7c05.png\"/></p>\n<p>那么这<font color=\"#0e5dcd\">三种注入方法的区别</font>是什么？</p>\n<ul><li>属性注入特点是写法非常简单的，但是通用性不好，只能运行在IoC容器下，如果在非IoC容器下，是很有可能空指针异常的；</li><li>早期Spring版本推荐的写法是Setter写法，但是Setter注入通用性没有构造方法注入通过，因为在其他语言中setter方法有可能是无法使用的；</li><li>是在3.4版本之后构造方法成为了官方推荐的版本，构造方法的通用性更好，能确保在使用注入对象之前，此注入对象一定是初始化了，而之前不推荐的原因是因为多个参数的话，是无法进行注入的！<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\acf5056fc4084aa0a1e2c83df46b2b04.png\"/></li></ul>\n<h2><a id=\"_4_Resource_339\"></a>🍓 4.另⼀种注入关键字 @Resource</h2>\n<p>而进行注入的关键字也不只有@Autowired一个关键字，这个是有Spring提供的，而JDK也提供了一种注入关键字@Resource，和@Autowired用法是差不多的，但是也是有一定<mark>区别</mark>的：</p>\n<ul><li>出身不同：@Autowired 来⾃于 Spring框架的注解，⽽ @Resource 是来⾃于 JDK 的注解；</li><li>用法不同：@Autowired 支持属性注入，构造方法注入，Setter注入，而@Resource是不支持构造方法注入的；</li><li>支持的参数不同：@Resource支持更多的参数设置，比如name、type设置，而@Autowired只支持required参数设置；</li></ul>\n<h2><a id=\"_5Bean_345\"></a>🍓 5.@Bean将一个类型的参数注入多次</h2>\n<p>在使用@Bean将一个类型的参数注入多次的时候是会出现问题的</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserBeans</span> <span class=\"token punctuation\">{<!-- --></span>\n    \n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">getUser1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"user2\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">getUser2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user:\"</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//先得到上下文对象</span>\n        <span class=\"token class-name\">ApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spring-config.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">UserController</span> controller <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userController\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">UserController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        controller<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\897a7db987ea4611b2f435459b74426d.png\"/></p>\n<p>这里是会先根据名称去找，然后会使用类去找，发现有两个就出现错误了，因此<mark>解决方法</mark>有以下三种：</p>\n<h3><a id=\"_51bean_387\"></a>🍉 5.1.精确的描述bean的名称（将注入的名字写对）</h3>\n<p>可以将注入的bean的名字修改成自己设定的name值就可以了<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c198e27e89af412eab6b32058b975fee.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dcc34157520b46b4b10ac2aaf9b4c7ad.png\"/><br/> 但是这个也有缺陷，如果这个名称已经被使用过了， 其他地方就不能再使用了，因此就需要其他解决方法！</p>\n<h3><a id=\"_52Resource_393\"></a>🍉 5.2.使用@Resource注解</h3>\n<p>上面我说了使用@Resource可以有多个参数的支持，而这里就可以将bean的name放到name属性里面，然后就可以重命名注入的bean对象名字了<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f8a9560ec2bc49a79d393e7337dee751.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\90d5f3c467664655b19fe163997cf663.png\"/><br/> 但是如果不使用@Resource注解的话，当然使用@Autowired也是可以解决的！</p>\n<h3><a id=\"_53Autowired_398\"></a>🍉 5.3.使用@Autowired注解</h3>\n<p>而使用@Autowired是没有name属性的，是无法像@Resource一样直接设置参数的，而这里就需要假如另一个注解@Qualifier，通过这个注解来进行限定，限定为存储的bean对象的名字，也是可以解决的<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\67df70b18c5d4fe9bbecaf1dc885e310.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\92e0c258338d4fdba7befe390e207b36.png\"/><br/> 而@Qualifier里面的参数value是可以省略的，因为@Qualifier里面只有一个参数，但是建议写上这个，不要省略！</p>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c541bfaf833243548629935c9036d83f.png\" width=\"400\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-07-13 00:23:57", "summary": "前面介绍了一些最基本的存储和读取对象的方法但是在中已经基本不这样使用了因此这一篇博客就来介绍一下更简单的存储和读取对象的方法而想要更简单的存储和读取最核心的就是使用注解下面一起来看看吧在这里插入图片描"}