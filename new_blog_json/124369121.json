{"blogid": "124369121", "writerAge": "码龄3年", "writerBlogNum": "142", "writerCollect": "6895", "writerComment": "6780", "writerFan": "61499", "writerGrade": "7级", "writerIntegral": "14075", "writerName": "几何心凉", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124369121.jpg", "writerRankTotal": "681", "writerRankWeekly": "189", "writerThumb": "6461", "writerVisitNum": "329182", "blog_read_count": "14853", "blog_time": "已于 2022-06-07 19:25:49 修改", "blog_title": "掌握Mock摆脱后端同学的束缚", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#_3\">前言</a></li><li><a href=\"#Mock_8\">Mock概述</a></li><li><a href=\"#mockjs_16\">mock.js安装</a></li><li><a href=\"#Mock_40\">Mock规范</a></li><li><a href=\"#Mock_113\">Mock的使用</a></li><li><a href=\"#_218\">总结</a></li></ul>\n</li></ul>\n</div>\n<br/>\n<img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/9633f3bb7c3643d0a6989e51c0470ac6.gif#pic_center\"/>\n<p></p>\n<h2><a id=\"_3\"></a>前言</h2>\n<p>当下采用<code>前后端分离模式</code>开发Web应用已经成为气候，在开发阶段有一个不成文的规定则是 <code>项目开发后端先行</code> 但是作为前端开发工程师的我们，难道在搭建完页面后只能等待后端的接口么？这样的话我们则完全被后端开发限制住了。</p>\n<p>但其实我们只需要同后端同学商议决定好接口返回的数据格式我们就可以并行开发。很多同学则在开发中则会使用定义变量写好数据模拟接口返回的数据进行前端渲染工作；完全是可以的，但是有没有<code>更加专业</code>的手段或者技术呢？<br/> 当然有，那就是我们的 <code>Mock</code> 下面让我们来看一下前端人最后的倔强吧！</p>\n<h2><a id=\"Mock_8\"></a>Mock概述</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1c7a5964bfcd4c0db7b1e41ddfbf8fae.png\"/><br/> <code>mock：模仿的;虚假的;不诚实的</code>，这是mock作为单词的翻译，当然他的用途也是如同他的翻译一样就是模拟<code>接口、数据</code>其实mock的出现就是前后端分离后为前端不受制于后端同学的束缚而出现的，在实际开发中后端同学有自己的开发节奏，不能如我们前端所想几分钟出一个接口，可能我们索要接口的时候后端同学还在构思如何建表？</p>\n<p>而mock则避免了我们对后端同学催促的尴尬，他就可以完成模拟接口，让前后端并行开发，提高我们的开发效率，不被后端拖节奏。</p>\n<p>mock即mock.js，他的流程就是 <code>前端发送请求到后端 =》mock.js拦截请求=》并返回模拟数据给前端</code>。至于数据我们事先只需要与后端同学定义好格式即可，mock.js会通过法则为我们生成比较贴近真实数据的模拟数据。看到这里你是不是对mock属实有点心动了呢？下面就让我们来看一下mock.js运用到项目中。</p>\n<h2><a id=\"mockjs_16\"></a>mock.js安装</h2>\n<p>我们可以看到官网上提供了很多关于不同前端项目的安装（有兴趣的同学可以看一下，<code>如果你和博主一样想在Vue项目中去使用的话那么就跳过下面这张图片我们看下面步骤</code>）<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\92e563fbe17147deb3377fba81627546.png\"/><br/> <strong>下面就以Vue为例子来为大家演示</strong></p>\n<p>1、创建vue项目<br/> 我们利用vue脚手架创建一个项目，不会访问这篇文章<a href=\"https://blog.csdn.net/JHXL_/article/details/107631123\">https://blog.csdn.net/JHXL_/article/details/107631123</a><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\02259bc6a0b24ca886ff98fccd70eedb.png\"/><br/> 2、项目中安装mock.js和axios</p>\n<p>因为我们的mock是拦截请求，所以我们需要安装axios进行请求，当然使用原生的ajax也是可以的！</p>\n<pre><code class=\"prism language-php\">npm i mockjs <span class=\"token operator\">-</span><span class=\"token constant\">D</span>\nnpm i axios\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7b2d52012005485894a3dfeec8f80ff7.png\"/><br/> 3、安装成功后我们运行项目</p>\n<pre><code class=\"prism language-php\">npm run serve\n</code></pre>\n<h2><a id=\"Mock_40\"></a>Mock规范</h2>\n<p>说明：本小节依照官网，所以很多规范大家看不透彻没有关系，<code>我们可以跳过此小节先看下节的mock的使用</code></p>\n<p>Mock.js 的语法规范包括两部分：</p>\n<ol><li> <p>数据模板定义规范（Data Template Definition，DTD）<br/> 数据模板中的每个属性由 3 部分构成：属性名、生成规则、属性值：</p> <pre><code class=\"prism language-php\"><span class=\"token comment\">// 属性名   name</span>\n<span class=\"token comment\">// 生成规则 rule</span>\n<span class=\"token comment\">// 属性值   value</span>\n<span class=\"token string single-quoted-string\">'name|rule'</span><span class=\"token punctuation\">:</span> value\n</code></pre>\n<blockquote>\n<p>注意：<br/> 属性名 和 生成规则 之间用竖线 | 分隔。<br/> 生成规则 是可选的。<br/> 生成规则 有 7 种格式：<br/> ‘name|min-max’: value<br/> ‘name|count’: value<br/> ‘name|min-max.dmin-dmax’: value<br/> ‘name|min-max.dcount’: value<br/> ‘name|count.dmin-dmax’: value<br/> ‘name|count.dcount’: value<br/> ‘name|+step’: value<br/> 生成规则 的 含义 需要依赖 属性值的类型 才能确定。<br/> 属性值 中可以含有 @占位符。<br/> 属性值 还指定了最终值的初始值和类型。</p>\n</blockquote> </li><li> <p>数据占位符定义规范（Data Placeholder Definition，DPD）<br/> 占位符 只是在属性值字符串中占个位置，并不出现在最终的属性值中。<br/> 占位符 的格式为：</p> <pre><code class=\"prism language-php\">@占位符\n@占位符<span class=\"token punctuation\">(</span>参数 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> 参数<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<blockquote>\n<p>注意：<br/> 用 @ 来标识其后的字符串是 占位符。<br/> 占位符 引用的是 Mock.Random 中的方法。<br/> 通过 Mock.Random.extend() 来扩展自定义占位符。<br/> 占位符 也可以引用 数据模板 中的属性。<br/> 占位符 会优先引用 数据模板 中的属性。<br/> 占位符 支持 相对路径 和 绝对路径。</p>\n</blockquote> <pre><code class=\"prism language-php\">Mock<span class=\"token operator\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n        first<span class=\"token punctuation\">:</span> <span class=\"token string single-quoted-string\">'@FIRST'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token argument-name\">middle</span><span class=\"token punctuation\">:</span> <span class=\"token string single-quoted-string\">'@FIRST'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token argument-name\">last</span><span class=\"token punctuation\">:</span> <span class=\"token string single-quoted-string\">'@LAST'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token argument-name\">full</span><span class=\"token punctuation\">:</span> <span class=\"token string single-quoted-string\">'@first @middle @last'</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// =&gt;</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string double-quoted-string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token string double-quoted-string\">\"first\"</span><span class=\"token punctuation\">:</span> <span class=\"token string double-quoted-string\">\"Charles\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string double-quoted-string\">\"middle\"</span><span class=\"token punctuation\">:</span> <span class=\"token string double-quoted-string\">\"Brenda\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string double-quoted-string\">\"last\"</span><span class=\"token punctuation\">:</span> <span class=\"token string double-quoted-string\">\"Lopez\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string double-quoted-string\">\"full\"</span><span class=\"token punctuation\">:</span> <span class=\"token string double-quoted-string\">\"Charles Brenda Lopez\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li></ol>\n<p>上面这些呢只是简单的介绍了一下mock的规范，但其实他是有很多法则的我们可以到官方来去看看，掌握这些法则后我们能够模拟的数据就会更加真实更加繁琐的数据都可以轻松生成！<br/> <a href=\"https://github.com/nuysoft/Mock/wiki/Syntax-Specification\">https://github.com/nuysoft/Mock/wiki/Syntax-Specification</a></p>\n<h2><a id=\"Mock_113\"></a>Mock的使用</h2>\n<p><strong>1、创建mock文件</strong></p>\n<ul><li>在src文件夹下面创建mock文件夹</li><li>在mock文件夹中创建json文件夹</li><li>在mock文件夹中创建index.js文件</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b347849d3c9641419c77a1304d44c172.png\"/><br/> <strong>2、在mock下面的index.js中引入mock并创建mock响应内容</strong></p>\n<pre><code class=\"prism language-php\"><span class=\"token comment\">// 引入 mock.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">Mock</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'mockjs'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//Mock.mock  接口，请求方式，返回数据（数据就是json文件夹中的文件自行添加）</span>\nMock<span class=\"token operator\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/user/list'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'get'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'./json/userList'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>说明：</strong><code>Mock.mock()</code><br/> 此方法就是匹配我们的请求进行拦截然后返回模拟数据，有如下几种形式</p>\n<pre><code class=\"prism language-php\">Mock<span class=\"token operator\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span> rurl<span class=\"token punctuation\">,</span> template <span class=\"token punctuation\">)</span>\n</code></pre>\n<p>记录数据模板。当拦截到匹配 rurl 的 Ajax 请求时，将根据数据模板 template 生成模拟数据，并作为响应数据返回。</p>\n<pre><code class=\"prism language-php\">Mock<span class=\"token operator\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span> rurl<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> options <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n</code></pre>\n<p>记录用于生成响应数据的函数。当拦截到匹配 rurl 的 Ajax 请求时，函数 <code>function(options)</code> 将被执行，并把执行结果作为响应数据返回。</p>\n<pre><code class=\"prism language-php\">Mock<span class=\"token operator\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span> rurl<span class=\"token punctuation\">,</span> rtype<span class=\"token punctuation\">,</span> template <span class=\"token punctuation\">)</span>\n</code></pre>\n<p>记录数据模板。当拦截到匹配 rurl 和 rtype 的 Ajax 请求时，将根据数据模板 template 生成模拟数据，并作为响应数据返回。</p>\n<pre><code class=\"prism language-php\">Mock<span class=\"token operator\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span> rurl<span class=\"token punctuation\">,</span> rtype<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> options <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n</code></pre>\n<p>记录用于生成响应数据的函数。当拦截到匹配 rurl 和 rtype 的 Ajax 请求时，函数 function(options) 将被执行，并把执行结果作为响应数据返回。</p>\n<p>当然我们的Mock还有好几种方法，更多方法可以去官网了解一下哦！<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c4fc6fc979484144a44e1724b3ffa2c2.png\"/></p>\n<p><strong>3、我们在mock文件夹下面的json文件夹下创建我们引用的userList.json</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\85b88c060126450fb5f04551abff0120.png\"/></p>\n<pre><code class=\"prism language-php\"><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string double-quoted-string\">\"status\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string double-quoted-string\">\"data|10\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token string double-quoted-string\">\"id|+1\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1001</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string double-quoted-string\">\"company\"</span><span class=\"token punctuation\">:</span> <span class=\"token string double-quoted-string\">\"10001\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string double-quoted-string\">\"username\"</span><span class=\"token punctuation\">:</span> <span class=\"token string double-quoted-string\">\"ceshi1\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string double-quoted-string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">25</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string double-quoted-string\">\"msg\"</span><span class=\"token punctuation\">:</span> <span class=\"token string double-quoted-string\">\"\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>4、接着我们就去我们的页面中测试请求</strong><br/> 找到我们页面，因为我们是新建的项目 所以我们删除页面中的东西 换成清爽的内容<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fa61e879aead49618b0e413a69679fe5.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0905d947e9fd4848b841a126a82bb1be.png\"/><br/> 然后我们引入axios并注册事件就可以发送请求了</p>\n<pre><code class=\"prism language-php\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>div @click<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"btnClick\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"btn\"</span><span class=\"token operator\">&gt;</span>\n          这是测试\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\nimport axios from <span class=\"token string double-quoted-string\">\"axios\"</span><span class=\"token punctuation\">;</span>\n\nexport <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token argument-name\">methods</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    async <span class=\"token function\">btnClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">const</span> <span class=\"token constant\">res</span> <span class=\"token operator\">=</span> await axios<span class=\"token operator\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/user/list\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token operator\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token operator\">.</span>data<span class=\"token operator\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n\n<span class=\"token operator\">&lt;</span>style<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>然后我们点击发现还是请求了接口这是为什么呢？原来是我们前面少了一个步骤，那就是我们需要在main中去引用我们的mock<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6a3c3222810341c5b5d3c622ddd55ee5.png\"/><br/> 再次尝试成功<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\497963fb0e7a4c218b6cbfcacab98884.png\"/></p>\n<h2><a id=\"_218\"></a>总结</h2>\n<p>通过上面的使用可以看到，我们前端发送的请求只要被我们的 Mock.mock 方法中的url匹配上就会被mock拦截，我们可以自行验证当我们使用mock并匹配上url后我们的network中是没有请求了，mock会根据我们定义的此条url的法则去返回对应的数据，在实际开发中其实前端很多后期工作都是在调试通接口后根据返回的数据进行的，通过mock我们前端就不会过多的依赖后端接口，只要知道后端返回数据的格式我们自己就可以通过mock.js自己生成数据进行模拟接口，从而在接口调通前我们也可以自己进行数据渲染和调试工作；</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 1, "time": "2022-06-07 19:25:49", "summary": "文章目录前言概述安装规范的使用总结在这里插入图片描述前言当下采用前后端分离模式开发应用已经成为气候，在开发阶段有一个不成文的规定则是项目开发后端先行但是作为前端开发工程师的我们，难道在搭建完页面后只能"}