{"blogid": "124446017", "writerAge": "码龄4年", "writerBlogNum": "164", "writerCollect": "4596", "writerComment": "2529", "writerFan": "25616", "writerGrade": "6级", "writerIntegral": "8079", "writerName": "fanstuck", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124446017.jpg", "writerRankTotal": "1632", "writerRankWeekly": "25", "writerThumb": "2607", "writerVisitNum": "326917", "blog_read_count": "11244", "blog_time": "已于 2022-05-18 10:23:04 修改", "blog_title": "Pandas中read_excel函数参数使用详解+实例代码", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E5%89%8D%E8%A8%80-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></p>\n<p id=\"%E4%B8%80%E3%80%81%E6%95%B0%E6%8D%AE%E5%B1%95%E7%A4%BA-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81%E6%95%B0%E6%8D%AE%E5%B1%95%E7%A4%BA\">一、数据展示</a></p>\n<p id=\"1.io-toc\" style=\"margin-left:40px;\"><a href=\"#1.io\">1.io</a></p>\n<p id=\"2.sheet_name-toc\" style=\"margin-left:40px;\"><a href=\"#2.sheet_name\">2.sheet_name</a></p>\n<p id=\"3.header-toc\" style=\"margin-left:40px;\"><a href=\"#3.header\">3.header</a></p>\n<p id=\"4.names-toc\" style=\"margin-left:40px;\"><a href=\"#4.names\">4.names</a></p>\n<p id=\"5.index_col-toc\" style=\"margin-left:40px;\"><a href=\"#5.index_col\">5.index_col</a></p>\n<p id=\"6.usecols-toc\" style=\"margin-left:40px;\"><a href=\"#6.usecols\">6.usecols</a></p>\n<p id=\"%C2%A07.squeeze-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A07.squeeze\"> 7.squeeze</a></p>\n<p id=\"8.dtype-toc\" style=\"margin-left:40px;\"><a href=\"#8.dtype\">8.dtype</a></p>\n<p id=\"9.engine-toc\" style=\"margin-left:40px;\"><a href=\"#9.engine\">9.engine</a></p>\n<p id=\"10.converters-toc\" style=\"margin-left:40px;\"><a href=\"#10.converters\">10.converters</a></p>\n<p id=\"11.true_values%2Cfalse_values-toc\" style=\"margin-left:40px;\"><a href=\"#11.true_values%2Cfalse_values\">11.true_values,false_values</a></p>\n<p id=\"12.skiprows-toc\" style=\"margin-left:40px;\"><a href=\"#12.skiprows\">12.skiprows</a></p>\n<p id=\"13.nrow-toc\" style=\"margin-left:40px;\"><a href=\"#13.nrow\">13.nrow</a></p>\n<p id=\"14.na_values-toc\" style=\"margin-left:40px;\"><a href=\"#14.na_values\">14.na_values</a></p>\n<p id=\"15.keep_default_na-toc\" style=\"margin-left:40px;\"><a href=\"#15.keep_default_na\">15.keep_default_na</a></p>\n<p id=\"16.na_filter-toc\" style=\"margin-left:40px;\"><a href=\"#16.na_filter\">16.na_filter</a></p>\n<p id=\"17.verbose-toc\" style=\"margin-left:40px;\"><a href=\"#17.verbose\">17.verbose</a></p>\n<p id=\"18.parse_dates-toc\" style=\"margin-left:40px;\"><a href=\"#18.parse_dates\">18.parse_dates</a></p>\n<p id=\"19.data_parser-toc\" style=\"margin-left:40px;\"><a href=\"#19.data_parser\">19.data_parser</a></p>\n<p id=\"20.mangle_dupe_cols-toc\" style=\"margin-left:40px;\"><a href=\"#20.mangle_dupe_cols\">20.mangle_dupe_cols</a></p>\n<p id=\"%E5%8F%82%E9%98%85%EF%BC%9A-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%8F%82%E9%98%85%EF%BC%9A\">参阅：</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<hr/>\n<h1 id=\"%E5%89%8D%E8%A8%80\"><a id=\"_7\"></a>前言</h1>\n<p>使用<a href=\"https://so.csdn.net/so/search?q=Pandas&amp;spm=1001.2101.3001.7020\" title=\"Pandas\">Pandas</a>进行数据预处理时需要了解Pandas的基础数据结构Series和DataFrame。若是还不清楚的可以再去看看我之前的三篇博客详细介绍这两种数据结构的处理方法：</p>\n<p><a href=\"https://jxnuxwt.blog.csdn.net/article/details/124005945?spm=1001.2014.3001.5502\" title=\"一文速学-数据分析之Pandas数据结构和基本操作代码\">一文速学-数据分析之Pandas数据结构和基本操作代码</a></p>\n<p><a href=\"https://jxnuxwt.blog.csdn.net/article/details/124067375?spm=1001.2014.3001.5502\" title=\"DataFrame行列表查询操作详解+代码实战\">DataFrame行列表查询操作详解+代码实战</a></p>\n<p><a href=\"https://jxnuxwt.blog.csdn.net/article/details/124069767?spm=1001.2014.3001.5502\" title=\"DataFrame多表合并拼接函数concat、merge参数详解+代码操作展示\">DataFrame多表合并拼接函数concat、merge参数详解+代码操作展示</a></p>\n<p>以上三篇均为基础知识，没有比较难的实战，比较容易学会。</p>\n<p>首先说明一点，关于包含在异常值里面的空值和重复值均有两篇博客专门详细介绍了处理他们的方法：</p>\n<p><a href=\"https://blog.csdn.net/master_hunter/article/details/124317153?spm=1001.2014.3001.5501\" title=\"一文速学-Pandas处理重复值操作各类方法详解+代码展示\">一文速学-Pandas处理重复值操作各类方法详解+代码展示</a></p>\n<p><a href=\"https://jxnuxwt.blog.csdn.net/article/details/124303843?spm=1001.2014.3001.5502\" title=\"一文速学-Pandas处理缺失值操作各类方法详解\">一文速学-Pandas处理缺失值操作各类方法详解</a></p>\n<p>该篇博客主要详解读取Excel表函数read的各种参数的用法</p>\n<p>此篇博客基于Jupyter之上进行演示，本篇博客的愿景是希望我或者读者通过阅读这篇博客能够学会方法并能实际运用，而且能够记录到你的思想之中。希望读者看完能够提出错误或者看法，博主会长期维护博客做及时更新。纯分享，希望大家喜欢。</p>\n<hr/>\n<h1 id=\"%E4%B8%80%E3%80%81%E6%95%B0%E6%8D%AE%E5%B1%95%E7%A4%BA\">一、数据展示</h1>\n<p>为方便演示函数效果这里创建一个excel文件，其中创建了两个表格：<br/> sheet1：</p>\n<p><img alt=\"\" height=\"154\" src=\"..\\..\\static\\image\\5110859a94f34e29acb6cf7e2777893f.png\" width=\"330\"/></p>\n<p> sheet2：</p>\n<p><img alt=\"\" height=\"140\" src=\"..\\..\\static\\image\\924e8db776274261bd9d32ad14707bc1.png\" width=\"337\"/></p>\n<p><strong>二、read_excel默认参数</strong></p>\n<pre><code class=\"language-python\">def read_excel(io,\n               sheet_name=0,\n               header=0,\n               names=None,\n               index_col=None,\n               parse_cols=None,\n               usecols=None,\n               squeeze=False,\n               dtype=None,\n               engine=None,\n               converters=None,\n               true_values=None,\n               false_values=None,\n               skiprows=None,\n               nrows=None,\n               na_values=None,\n               keep_default_na=True,\n               na_filter=True,\n               verbose=False,\n               parse_dates=False,\n               date_parser=None,\n               thousands=None,\n               comment=None,\n               skip_footer=0,\n               skipfooter=0,\n               convert_float=True,\n               mangle_dupe_cols=True,\n               **kwds)\n</code></pre>\n<h2 id=\"1.io\">1.io</h2>\n<p>io为文件类对象，一般作为读取文件的路径：</p>\n<pre><code class=\"language-python\">excel=pd.read_excel(r\"D:\\Python\\pythonlearn\\test1.xlsx\")</code></pre>\n<p> <img alt=\"\" height=\"247\" src=\"..\\..\\static\\image\\35c59538e6ec4065b1c57d5858d83bb2.png\" width=\"357\"/></p>\n<h2 id=\"2.sheet_name\">2.sheet_name</h2>\n<p>该参数为指定读取excel的表格名<img alt=\"\" height=\"55\" src=\"..\\..\\static\\image\\7862df88c2e341ee8b2c753552abc423.png\" width=\"293\"/></p>\n<p>Sheet_name参数莫仍从零开始，也就是想读第二张表则将参数改为1即可：</p>\n<pre><code class=\"language-python\">excel=pd.read_excel(r\"D:\\Python\\pythonlearn\\test1.xlsx\",sheet_name=1)</code></pre>\n<p> <img alt=\"\" height=\"240\" src=\"..\\..\\static\\image\\e9f384e5bc284af69e0658dd0e5e1974.png\" width=\"289\"/></p>\n<p>也可以设定值为列表，则一次返回一个字典：</p>\n<pre><code class=\"language-python\">excel=pd.read_excel(r\"D:\\Python\\pythonlearn\\test1.xlsx\",header=1)</code></pre>\n<p> <img alt=\"\" height=\"193\" src=\"..\\..\\static\\image\\605c2e3c5d5c45e8b349531e52a46e43.png\" width=\"224\"/></p>\n<p></p>\n<h2 id=\"3.header\">3.header</h2>\n<p>该参数为指定列表中从第几行作为列索引：</p>\n<pre><code class=\"language-python\">excel=pd.read_excel(r\"D:\\Python\\pythonlearn\\test1.xlsx\",header=1)</code></pre>\n<p> <img alt=\"\" height=\"190\" src=\"..\\..\\static\\image\\15267347f65d4c95a1179cf6374d3e85.png\" width=\"236\"/></p>\n<p>如果设定为1则以第二行的数据作为列索引的值。</p>\n<h2 id=\"4.names\">4.names</h2>\n<p>此参数接收一个数组，将列名重定义赋值:</p>\n<pre><code class=\"language-python\">excel=pd.read_excel(r\"D:\\Python\\pythonlearn\\test1.xlsx\",names=['value','old','1','2'])</code></pre>\n<p> <img alt=\"\" height=\"230\" src=\"..\\..\\static\\image\\61e19ec41e964a81a29f8adb82f58e4b.png\" width=\"227\"/></p>\n<h2 id=\"5.index_col\">5.index_col</h2>\n<p>此参数为指定从第几列开始索引：<br/>  </p>\n<pre><code class=\"language-python\">excel=pd.read_excel(r\"D:\\Python\\pythonlearn\\test1.xlsx\",index_col=1)</code></pre>\n<p> <img alt=\"\" height=\"277\" src=\"..\\..\\static\\image\\01392e2dac914e6ab3fe8ef256805774.png\" width=\"338\"/></p>\n<h2 id=\"6.usecols\">6.usecols</h2>\n<p>该参数为返回指定的列，usecols=[A,C]表示只选取A列和C列。usecols=[A,C:E]表示选择A列，C列、D列和E列；：</p>\n<pre><code class=\"language-python\">excel=pd.read_excel(r\"D:\\Python\\pythonlearn\\test1.xlsx\",usecols=\"A,C\")</code></pre>\n<p> <img alt=\"\" height=\"224\" src=\"..\\..\\static\\image\\f899358587604239a9294c728d9303b1.png\" width=\"196\"/></p>\n<pre><code class=\"language-python\">excel=pd.read_excel(r\"D:\\Python\\pythonlearn\\test1.xlsx\",usecols=\"A,C:D\")</code></pre>\n<p> <img alt=\"\" height=\"228\" src=\"..\\..\\static\\image\\7f53c6a9a83c4bc692e1edf40a46835e.png\" width=\"288\"/></p>\n<p>也可以传入列表:</p>\n<pre><code class=\"language-python\">excel=pd.read_excel(r\"D:\\Python\\pythonlearn\\test1.xlsx\",usecols=[0,2])</code></pre>\n<p> <img alt=\"\" height=\"208\" src=\"..\\..\\static\\image\\c4753fe3c1da4b6e83edec9a4406251f.png\" width=\"165\"/></p>\n<pre><code class=\"language-python\">excel=pd.read_excel(r\"D:\\Python\\pythonlearn\\test1.xlsx\",usecols=['ID','vaule'])</code></pre>\n<p> <img alt=\"\" height=\"247\" src=\"..\\..\\static\\image\\844a1a65fad145ddac3156fad6757afd.png\" width=\"170\"/></p>\n<h2 id=\"%C2%A07.squeeze\"> 7.squeeze</h2>\n<p>若处理excel仅仅只有一列时，此时设定为True将转换为Series：</p>\n<pre><code class=\"language-python\">excel=pd.read_excel(r\"D:\\Python\\pythonlearn\\test1.xlsx\",usecols=['ID'],squeeze=True)</code></pre>\n<p> <img alt=\"\" height=\"154\" src=\"..\\..\\static\\image\\8dbeed3e4f3841b7855ea471fec5cee2.png\" width=\"257\"/></p>\n<h2 id=\"8.dtype\">8.dtype</h2>\n<p>指定读取列的数据类型,可接收字典：</p>\n<pre><code class=\"language-python\">excel=pd.read_excel(r\"D:\\Python\\pythonlearn\\test1.xlsx\",dtype={\"ID\":str,\"vaule\":np.float64})</code></pre>\n<p> <img alt=\"\" height=\"130\" src=\"..\\..\\static\\image\\6d364353f97241a59f257f17db23b5ce.png\" width=\"267\"/></p>\n<p>若指定了“converters”参数，则dtype函数失效。</p>\n<h2 id=\"9.engine\">9.engine</h2>\n<p>该参数为指定Excel处理引擎，一般Excel处理引擎为xlrd，openpyxl，odf：</p>\n<pre><code class=\"language-python\">excel=pd.read_excel(r\"D:\\Python\\pythonlearn\\test1.xlsx\",engine='xlrd')</code></pre>\n<h2 id=\"10.converters\">10.converters</h2>\n<p>指定列数据类型转换函数，包括了dtype的功能，也可以对某一列使用Lambda函数，进行某种运算：</p>\n<pre><code class=\"language-python\">excel=pd.read_excel(r\"D:\\Python\\pythonlearn\\test1.xlsx\",converters={\"ID\":str,\"vaule\":np.float64})</code></pre>\n<p><img alt=\"\" height=\"131\" src=\"..\\..\\static\\image\\3b757078f84f4be383ca4595dcd6c16d.png\" width=\"255\"/></p>\n<pre><code class=\"language-python\">excel=pd.read_excel(r\"D:\\Python\\pythonlearn\\test1.xlsx\",dtype={\"ID\":str},converters={\"name\":lambda x:\"沪\"+x,\"vaule\":lambda x: x+1})</code></pre>\n<p> <img alt=\"\" height=\"243\" src=\"..\\..\\static\\image\\4facea23c68146bbb73c58d3f81bbd97.png\" width=\"373\"/></p>\n<p><img alt=\"\" height=\"134\" src=\"..\\..\\static\\image\\424b51ef34514fa19810eeeeaed9adfa.png\" width=\"256\"/></p>\n<h2 id=\"11.true_values%2Cfalse_values\">11.true_values,false_values</h2>\n<p>传输一个列表判断为true或是false：</p>\n<pre><code class=\"language-python\">excel=pd.read_excel(r\"D:\\Python\\pythonlearn\\test1.xlsx\",sheet_name=1,true_values=['female'],false_values=['male'])</code></pre>\n<p><img alt=\"\" height=\"224\" src=\"..\\..\\static\\image\\f903be3ed9204f379377a1485bfc6ad0.png\" width=\"284\"/></p>\n<h2 id=\"12.skiprows\">12.skiprows</h2>\n<p>此参数为跳过行操作：</p>\n<pre><code class=\"language-python\">excel=pd.read_excel(r\"D:\\Python\\pythonlearn\\test1.xlsx\",skiprows=[1,3])</code></pre>\n<p><img alt=\"\" height=\"148\" src=\"..\\..\\static\\image\\a82dd638d68c4ce3a05111a0aca5c1b4.png\" width=\"350\"/></p>\n<p>仅取偶数行：</p>\n<pre><code class=\"language-python\">excel=pd.read_excel(r\"D:\\Python\\pythonlearn\\test1.xlsx\",skiprows=lambda x:x%2==0)</code></pre>\n<hr/>\n<p> <img alt=\"\" height=\"125\" src=\"..\\..\\static\\image\\f10ea6538e4c49ada150c27fdc2833c8.png\" width=\"251\"/></p>\n<h2 id=\"13.nrow\">13.nrow</h2>\n<p>指定需要读取前多少行，通常用于较大的数据文件中。</p>\n<p>excel=pd.read_excel(r\"D:\\Python\\pythonlearn\\test1.xlsx\",nrows=3)</p>\n<p><img alt=\"\" height=\"159\" src=\"..\\..\\static\\image\\a691a12f924e42c19799085c4999f297.png\" width=\"371\"/></p>\n<h2 id=\"14.na_values\">14.na_values</h2>\n<p>将指定的值或者传入中的列表中的值设置为NaN：</p>\n<pre><code class=\"language-python\">excel=pd.read_excel(r\"D:\\Python\\pythonlearn\\test1.xlsx\",sheet_name=1,na_values='male')</code></pre>\n<p> <img alt=\"\" height=\"212\" src=\"..\\..\\static\\image\\047f48524ee449c9aff1d5890039d72b.png\" width=\"276\"/></p>\n<h2 id=\"15.keep_default_na\">15.keep_default_na</h2>\n<p>作用：处理数据是否包含默认的NaN值</p>\n<p>依赖于na_values参数是否被传递，默认为True，即自动识别空值导入。</p>\n<h2 id=\"16.na_filter\">16.na_filter</h2>\n<p>作用：检测缺少的值标记。当数据中没有任何NA值时，na_filter设置为False可以提高处理速度，特别是处理大文件时。</p>\n<h2 id=\"17.verbose\">17.verbose</h2>\n<p>作用：指示放置在非数字列中NA值的数目</p>\n<h2 id=\"18.parse_dates\">18.parse_dates</h2>\n<p>作用：处理日期类数据</p>\n<p>这个参数蛮有意思，这里我重新创建个表：</p>\n<p><img alt=\"\" height=\"91\" src=\"..\\..\\static\\image\\902405a3a92445c18a768edb7742572d.png\" width=\"242\"/></p>\n<pre><code class=\"language-python\">excel=pd.read_excel(r\"D:\\Python\\pythonlearn\\test1.xlsx\",sheet_name=2,parse_dates={\"日期\":[0,1,2]})</code></pre>\n<p> <img alt=\"\" height=\"153\" src=\"..\\..\\static\\image\\946584e7431641d18328c3959dd35b8d.png\" width=\"176\"/></p>\n<h2 id=\"19.data_parser\">19.data_parser</h2>\n<p>作用：设置处理日期数据的函数,<strong>利用lambda函数，将某个字符串列，解析为日期格式；</strong></p>\n<pre><code class=\"language-python\">excel=pd.read_excel(r\"D:\\Python\\pythonlearn\\test1.xlsx\",sheet_name=3,parse_dates=[0],date_parser=lambda x:pd.to_datetime(x,format='%Y年%m月%d日'))</code></pre>\n<p><img alt=\"\" height=\"88\" src=\"..\\..\\static\\image\\b475b067d07742009be058c09898db3c.png\" width=\"238\"/></p>\n<h2 id=\"20.mangle_dupe_cols\">20.mangle_dupe_cols</h2>\n<p>可以使用此是参数处理重复的列：</p>\n<p>这里改动一下sheet2：</p>\n<p><img alt=\"\" height=\"140\" src=\"..\\..\\static\\image\\2e748e90ce9248d889ba443c7ada0c47.png\" width=\"328\"/></p>\n<pre><code class=\"language-python\">excel=pd.read_excel(r\"D:\\Python\\pythonlearn\\test1.xlsx\",sheet_name=4,mangle_dupe_cols=False)</code></pre>\n<p> 结果：</p>\n<pre>ValueError: Setting mangle_dupe_cols=False is not supported yet</pre>\n<p> 现在还不支持这个函数貌似</p>\n<hr/>\n<p></p>\n<h1 id=\"%E5%8F%82%E9%98%85%EF%BC%9A\">参阅：</h1>\n<p><a class=\"link-info\" href=\"https://blog.csdn.net/SeizeeveryDay/article/details/108114425?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165102788016782388049205%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165102788016782388049205&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-108114425-null-null-2~all~sobaiduend~default-1-108114425.142%5Ev9%5Epc_search_result_control_group,157%5Ev4%5Econtrol&amp;utm_term=pandas+read_excel%E5%8F%82%E6%95%B0&amp;spm=1018.2226.3001.4187\" title=\"一个参数一张Excel表，玩转Pandas的read_excel()表格读取\">一个参数一张Excel表，玩转Pandas的read_excel()表格读取</a></p>\n<p><a class=\"link-info\" href=\"https://blog.csdn.net/leenuxcore/article/details/106407522?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165102788016782388049205%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165102788016782388049205&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-106407522-null-null-2~all~baidu_landing_v2~default-3-106407522.142%5Ev9%5Epc_search_result_control_group,157%5Ev4%5Econtrol&amp;utm_term=pandas+read_excel%E5%8F%82%E6%95%B0&amp;spm=1018.2226.3001.4187\" title=\"Pandas read_excel()参数详解\">Pandas read_excel()参数详解</a></p>\n<p><a class=\"link-info\" href=\"https://blog.csdn.net/weixin_39759441/article/details/110203991?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165106508616780357298122%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165106508616780357298122&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-110203991.142%5Ev9%5Epc_search_result_control_group,157%5Ev4%5Econtrol&amp;utm_term=read_excel+true_values&amp;spm=1018.2226.3001.4187\" title=\"easy excel date 类型解析报错_最新Pandas.read_excel()全参数详解（案例实操，如何利用python导入excel）...\">easy excel date 类型解析报错_最新Pandas.read_excel()全参数详解（案例实操，如何利用python导入excel）...</a></p>\n</div>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-05-18 10:23:04", "summary": "目录前言一、数据展示参阅：前言使用进行数据预处理时需要了解的基础数据结构和。若是还不清楚的可以再去看看我之前的三篇博客详细介绍这两种数据结构的处理方法：一文速学数据分析之数据结构和基本操作代码一文速学"}