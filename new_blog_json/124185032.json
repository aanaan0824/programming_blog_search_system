{"blogid": "124185032", "writerAge": "码龄1年", "writerBlogNum": "130", "writerCollect": "137", "writerComment": "37", "writerFan": "317", "writerGrade": "4级", "writerIntegral": "1449", "writerName": "quan9i", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124185032.jpg", "writerRankTotal": "16054", "writerRankWeekly": "82807", "writerThumb": "79", "writerVisitNum": "63779", "blog_read_count": "2211", "blog_time": "已于 2022-04-16 14:11:30 修改", "blog_title": "php preg_replace /e 模式 漏洞分析", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atelier-sulphurpool-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_1\">前言</a></li><li><a href=\"#_4\">案例</a></li><li><ul><li><a href=\"#0X01_5\">0X01</a></li><li><a href=\"#0X02_62\">0X02</a></li><li><a href=\"#0X03_87\">0X03</a></li></ul>\n</li><li><a href=\"#_109\">总结</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>前言</h1>\n<p>文章同步于我的个人博客<a href=\"https://quan9i.top/php%20bug\">https://quan9i.top</a>，欢迎大家访问<br/> 在做一道可以进行rce的相关题时，发现很多之前不知道的知识，并且感到这个漏洞很有意思，进行了简单分析，总结如下，希望能对师傅们有帮助</p>\n<h1><a id=\"_4\"></a>案例</h1>\n<h2><a id=\"0X01_5\"></a>0X01</h2>\n<p>首先我们来看这代码进行分析</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">preg_replace</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/s*(.*)s*/ies\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"\\\\1\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"h\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span> \n</code></pre>\n<p>想读懂这段代码，首先你需要了解一下<code>preg_replace</code>函数</p>\n<pre><code class=\"prism language-php\">preg_replace — 执行一个正则表达式的搜索和替换\n<span class=\"token keyword type-declaration\">mixed</span> <span class=\"token function\">preg_replace</span><span class=\"token punctuation\">(</span> <span class=\"token keyword type-hint\">mixed</span> <span class=\"token variable\">$pattern</span><span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint\">mixed</span> <span class=\"token variable\">$replacement</span><span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint\">mixed</span> <span class=\"token variable\">$subject</span><span class=\"token punctuation\">)</span>\n搜索subject中匹配pattern的部分，以replacement进行替换。 \n\n</code></pre>\n<p>以及一部分修正符的含义</p>\n<pre><code class=\"prism language-c\"><span class=\"token number\">1</span>、<span class=\"token operator\">/</span>g 表示该表达式将用来在输入字符串中查找所有可能的匹配，返回的结果可以是多个。如果不加<span class=\"token operator\">/</span>g最多只会匹配一个\n<span class=\"token number\">2</span>、<span class=\"token operator\">/</span>i 表示匹配的时候不区分大小写，这个跟其它语言的正则用法相同\n<span class=\"token number\">3</span>、<span class=\"token operator\">/</span>m 表示多行匹配。什么是多行匹配呢？就是匹配换行符两端的潜在匹配。影响正则中的<span class=\"token operator\">^</span>$符号\n<span class=\"token number\">4</span>、<span class=\"token operator\">/</span>s 与<span class=\"token operator\">/</span>m相对，单行模式匹配。\n<span class=\"token number\">5</span>、<span class=\"token operator\">/</span>e 可执行模式，此为PHP专有参数，例如preg_replace函数。\n<span class=\"token number\">6</span>、<span class=\"token operator\">/</span>x 忽略空白模式。\n</code></pre>\n<p>还有<code>\\\\1</code>这个东西</p>\n<pre><code>反向引用\n\n对一个正则表达式模式或部分模式 两边添加圆括号 将导致相关 匹配存储到一个临时缓冲区 中\n，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，\n最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 '\\n' 访问，其中 n 为一个标识特定缓冲区的\n一位或两位十进制数。\n</code></pre>\n<p>那么我们可以看出其大致含义就是匹配出的任意内容，都用()包含起来，作为子字符串，存在缓冲区，\\1是访问括号内的内容，此时我们上面那个代码，我们就可以构造如下payload进行rce</p>\n<pre><code class=\"prism language-php\"><span class=\"token operator\">?</span>h<span class=\"token operator\">=</span><span class=\"token variable\">$</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token function\">phpinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\061483e51c5748328f1777221f1b9e28.png\"/><br/> 对于payload中<code>${}</code>的解释，它这里其实是一个可变变量<br/> <a href=\"https://www.php.net/manual/zh/language.variables.variable.php\">https://www.php.net/manual/zh/language.variables.variable.php</a><br/> 我们输入了<code>${phpinfo()}</code>，那么它呢因为被括号包裹了，就会存进缓冲区，此时他是符合那个过滤函数的，所以要更替为第二个语句，而这里用到了<code>/e</code>，就相当于将第二个语句给执行了，就相当于<code>eval(xx)，第二个语句</code>也就是<code>//1</code>，而<code>//1</code>的含义是<code>${phpinfo()}</code>,他这个时候总的语句呢就是<code>eval(${phpinfo()})</code>,这玩意就相当于变量里面套变量，所以我们需要先执行里面的，也就是<code>${phpinfo()</code>} 中的 <code>phpinfo()</code> 会被当做变量先执行，执行后，即变成 <code>${1}</code> (phpinfo()成功执行返回true)，此时我们呢再执行这个<code>eval${1}</code>,这玩意能正常执行出来，由于我们没有给1赋值，他会给个警告，但是没问题，不影响我们的语句，所以这个时候我们的rce就实现了<br/> 对于上述过程，你可以直接用如下代码测试</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token function\">phpinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span> \n</code></pre>\n<p>执行结果<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fd1b0d57b3094c749692cd292c37d0b7.png\"/></p>\n<h2><a id=\"0X02_62\"></a>0X02</h2>\n<p>代码如下</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$data</span><span class=\"token operator\">=</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">preg_replace</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/&lt;data&gt;(.*)&lt;\\/data&gt;/e'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'$ret=\"\\\\1\";'</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>再看这个，这个的话，我们先按之前那样，输入payload为如下</p>\n<pre><code class=\"prism language-php\"><span class=\"token operator\">?</span>data<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>data<span class=\"token operator\">&gt;</span><span class=\"token variable\">$</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token function\">phpinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>data<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>执行结果为<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\183031525d054129947f0599f6873f87.png\"/></p>\n<p>分析原因，此时括号内的内容是<code>${phpinfo()}</code>，传到了缓冲区，执行后面语句时会调用，那么后面语句此时就相当于<code>$ret=${phpinfo()}</code>，肯定会先执行<code>phpinfo()</code>，然后呢返回了1，此时语句是<code>$ret=1</code>，加上我们的/e是执行语句的，所以这里执行的就等同于<code>eval($ret=1)</code>；我们本地测试一下输出结果<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\91b26bd8641a46588fe38b4889c35c54.png\"/><br/> 所以，这就是执行报错的原因所在，有没有解决办法呢，当然有，再加个<code>{}</code>，此时执行结果如下<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\aecb79589efe4ff2a3c5bbb47b439464.png\"/></p>\n<p>这是为啥呢，我们不妨再来分析一下，此时存入缓冲区的是<code>{${phpinfo()}}</code>，此时由于<code>\\\\1</code>是反向引用，再加上/e，实际的执行语句就是<code>eval($ret={${phpinfo()}})</code>执行过里面之后，得到的就是<code>eval($ret={1})</code>,而里面会当做变量来执行，也就是<code>eval($ret=${1})</code>，此时就执行出来了。</p>\n<h2><a id=\"0X03_87\"></a>0X03</h2>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">preg_replace</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/s*(.*)s*/ies\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"test(\\\\1)\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"h\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/** \n*eval(\"\\${phpinfo()}\");\n*eval(\"test(\\\"{\\${phpinfo()}}\\\");\");\n*${phpinfo()}\n*/</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>这个的话payload如下</p>\n<pre><code class=\"prism language-php\"><span class=\"token operator\">?</span>h<span class=\"token operator\">=</span><span class=\"token variable\">$</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token function\">phpinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p>此时执行的就是<code>eval(test(${phpinfo()})</code>，，而后为<code>eval(test(1))</code>，里面那个是空的，所以执行结果为空，没有错误，可以正常执行</p>\n<h1><a id=\"_109\"></a>总结</h1>\n<p>这个漏洞可被利用性很大，但是在php5.5版本上<code>/e</code>就被弃用，因此这里只当学习一下思路和知识即可，本人只是小白，分析过程极有可能出现错误，还请各位师傅多多指正。<br/> 参考文章<br/> <a href=\"https://xz.aliyun.com/t/2557#toc-4\">https://xz.aliyun.com/t/2557#toc-4</a><br/> <a href=\"https://www.cnblogs.com/sipc-love/p/14289984.html\">https://www.cnblogs.com/sipc-love/p/14289984.html</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 1, "time": "2022-04-16 14:11:30", "summary": "文章目录前言案例总结前言文章同步于我的个人博客，欢迎大家访问在做一道可以进行的相关题时，发现很多之前不知道的知识，并且感到这个漏洞很有意思，进行了简单分析，总结如下，希望能对师傅们有帮助案例首先我们来"}