{"blogid": "126733315", "writerAge": "码龄5年", "writerBlogNum": "115", "writerCollect": "2071", "writerComment": "1464", "writerFan": "52343", "writerGrade": "6级", "writerIntegral": "4724", "writerName": "MangoPapa", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126733315.jpg", "writerRankTotal": "3247", "writerRankWeekly": "276", "writerThumb": "1473", "writerVisitNum": "640452", "blog_read_count": "268", "blog_time": "于 2022-09-07 06:22:11 发布", "blog_title": "【UCIe】UCIe 物理层介绍（逻辑物理篇）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<br/>\n<p><span id=\"head\"> </span></p>\n<hr/>\n<p>🔥<strong><a href=\"#ucie_protocol\">点击查看精选 UCIe 系列文章</a></strong>🔥<br/> 🔥<strong><a href=\"https://bbs.csdn.net/forums/ic_lover\">点击进入【芯片设计验证】社区，查看更多精彩内容</a></strong>🔥</p>\n<hr/>\n<blockquote>\n<p>📢 <strong>声明</strong>：</p>\n<ul><li>🥭 <strong>作者主页：【<a href=\"https://blog.csdn.net/weixin_40357487\">MangoPapa的CSDN主页</a>】。</strong></li><li>⚠️ <strong>本文首发于CSDN，转载或引用请注明出处【<a href=\"https://mangopapa.blog.csdn.net/article/details/126733315\">https://mangopapa.blog.csdn.net/article/details/126733315</a>】。</strong></li><li>⚠️ <strong>本文目的为 <font color=\"red\">个人学习记录</font> 及 <font color=\"gree\">知识分享</font>。因个人能力受限，存在协议解读不正确的可能。若您参考本文进行产品设计或进行其他事项并造成了不良后果，本人不承担相关法律责任。</strong></li><li>⚠️ <strong>若本文所采用图片或相关引用侵犯了您的合法权益，请联系我进行删除。</strong></li><li>😄 <strong>欢迎大家指出文章错误，欢迎同行与我交流 ~</strong></li><li>📧 <strong>邮箱：<font color=\"blue\">mangopapa@yeah.net</font></strong></li></ul>\n</blockquote>\n<hr/>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#1__27\">1. 物理层概览</a></li><li><a href=\"#2__34\">2. 逻辑物理层</a></li><li><ul><li><a href=\"#21__40\">2.1 链路状态管理</a></li><li><ul><li><a href=\"#211__42\">2.1.1 链路初始化与训练</a></li><li><ul><li><a href=\"#2111Sideband__48\">2.1.1.1Sideband 初始化</a></li><li><a href=\"#2112_Mainband__53\">2.1.1.2 Mainband 初始化</a></li><li><a href=\"#2113_Mainband__60\">2.1.1.3 Mainband 训练</a></li><li><a href=\"#2114__65\">2.1.1.4 链路初始化</a></li></ul>\n</li><li><a href=\"#212__70\">2.1.2 功耗状态管理</a></li><li><ul><li><a href=\"#2121__71\">2.1.2.1 低功耗状态管理</a></li><li><a href=\"#2122__76\">2.1.2.2 动态时钟管理</a></li></ul>\n</li></ul>\n</li><li><a href=\"#22__87\">2.2 数据传输</a></li><li><ul><li><a href=\"#221_Mainband__88\">2.2.1 Mainband 数据映射与传输</a></li><li><a href=\"#222_Sideband__109\">2.2.2 Sideband 数据封装与传输</a></li></ul>\n</li><li><a href=\"#23__131\">2.3 链路鲁棒性</a></li><li><ul><li><a href=\"#231__132\">2.3.1 链路训练及测试</a></li><li><a href=\"#232_Lane__145\">2.3.2 Lane 序重排</a></li><li><a href=\"#233__Lane__154\">2.3.3 坏 Lane 替换</a></li><li><a href=\"#234__159\">2.3.4 链路减宽</a></li></ul>\n</li></ul>\n</li><li><a href=\"#3__165\">3. 电气物理层</a></li><li><a href=\"#4__174\">4. 参考</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"1__27\"></a>1. 物理层概览</h1>\n<hr/>\n<p><a href=\"https://mangopapa.blog.csdn.net/article/details/126733315\">【UCIe】UCIe 物理层介绍（概览）</a> 【ONGOING】</p>\n<br/>\n<hr/>\n<h1><a id=\"2__34\"></a>2. 逻辑物理层</h1>\n<hr/>\n<p>  UCIe 逻辑物理层主要负责数字部分，其主要承担 Mainband 数据链路建立之前的 <strong>链路状态协商、物理链路降宽/调序/修复工作及链路训练成功后 Flit 到各条 Lane 的数据分配、时钟校正及低功耗状态管理</strong> 方面的工作。</p>\n<br/>\n<h2><a id=\"21__40\"></a>2.1 链路状态管理</h2>\n<h3><a id=\"211__42\"></a>2.1.1 链路初始化与训练</h3>\n<p>  链路初始化及链路训练自不必多说，这个是所有带 PHY 的高速接口都会涉及到的部分，UCIe 也不例外。在 UCIe Mainband 发送数据之前，其需要先进行链路初始化及链路训练，通过 UCIe 链路两侧的 UCIe Die 互相协商，使 UCIe Module 工作在一个较为稳定的状态。这里的链路初始化包括 Sideband 初始化、Mainband 初始化及链路初始化，链路训练则是针对 Mainband 而言的。对于有多个 UCIe Module 的 UCIe 而言，其各个 Module 之间独立进行初始化及训练。</p>\n<br/>\n<h4><a id=\"2111Sideband__48\"></a>2.1.1.1Sideband 初始化</h4>\n<p>  Sideband 初始化是退出 RESET 后的第一个状态，在此期间彼此探测对方的 Sideband 信号、进行 Sideband 坏 Lane 修复。双方在 Data Lane 上收发特定的 Clock Pattern 来唤醒彼此，并进一步交换 {SBINIT} 相关 Message 完成 Sideband 初始化。</p>\n<br/>\n<h4><a id=\"2112_Mainband__53\"></a>2.1.1.2 Mainband 初始化</h4>\n<p>  Sideband 初始化完成之后紧接着进行 Mainband 初始化。Mainband 初始化期间通过 Sideband 交换各自的参数来协商 PHY 的参数，比如支持的最高速率、电压摆幅、时钟模式、时钟相位、Module ID 等等。Lane 序调整、坏 Lane 替换也是在该过程中进行的。</p>\n<p>  跟 PCIe 类似，UCIe Mainband 初次初始化也是以最低速（4GT/s）为目标进行的。</p>\n<br/>\n<h4><a id=\"2113_Mainband__60\"></a>2.1.1.3 Mainband 训练</h4>\n<p>  上文提到，Mainband 初始化后 Mainband 工作在了 4GT/s，类似于 PCIe 已经达到了 Gen1 速率。为了达到链路支持的最高速率，UCIe 在 Mainband 训练状态进行更精细化的时钟校正，使得链路工作在最高速率下。</p>\n<br/>\n<h4><a id=\"2114__65\"></a>2.1.1.4 链路初始化</h4>\n<p>  链路初始化是 RDI Active 前的最后一个状态。在此期间，UCIe Adapter 及 Physical Layer 之间进行握手，两端 的 Physical Layer 交换 Sideband Message，使 RDI 进入 Active 状态，完成 RDI Bring Up。</p>\n<br/>\n<h3><a id=\"212__70\"></a>2.1.2 功耗状态管理</h3>\n<h4><a id=\"2121__71\"></a>2.1.2.1 低功耗状态管理</h4>\n<p>  UCIe 逻辑物理层是 UCIe 功耗状态管理上的重要一环。逻辑物理层接收 RDI 接口上 D2D Adapter 发来的 lp_state_req=L1/L2 的请求，然后通过 Sideband Message 与对方握手进入 Low Power 低功耗状态。同理，逻辑物理层从 RDI 接口接收 Adapter 发来的 lp_state=Active 的请求，通过 Sideband 与对方握手之后 RDI 进入 Active 状态。在退出低功耗状态之前，RDI 接口上除了 lp_state_req/pl_state_sts 这对 RDI LSM 状态的请求及报告，还伴随 pl_clk_req/lp_clk_ack 或 lp_wake_req/pl_wake_ack 这对握手信号，用以唤醒 RDI 接口另一侧组件的 Clock。</p>\n<br/>\n<h4><a id=\"2122__76\"></a>2.1.2.2 动态时钟管理</h4>\n<p>  除了以上状态机层面的功耗管理，逻辑物理层还提供了另一种 <strong>动态关闭前向时钟的方式来降低功耗</strong>：若 Valid 信号连续 16UI（8 Cycle）拉低，则关闭其 Clock（图 1）。当然也可以配置 UCIe 为 Free Running Mode，这样 Clock 就不会被关闭了。</p>\n<br/>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8821d92d31e04bf8b7f3a985ab05500e.png\"/></p>\n<center>\n<font color=\"blue\" size=\"2\">▲图 1：UCIe Dynamic Clock Gating </font>\n</center>\n<br/>\n<h2><a id=\"22__87\"></a>2.2 数据传输</h2>\n<h3><a id=\"221_Mainband__88\"></a>2.2.1 Mainband 数据映射与传输</h3>\n<p>  逻辑物理层负责 Mainband 上的数据收发工作。Flit Data 发送时，逻辑物理层从 RDI 接口接收 Flit Data，根据物理层条件将 Flit Data 按 Byte 粒度映射到不同的 Lane 上。Flit Data 接收时，逻辑物理层整合电气物理层各条 Lane 接收到的数据，封装成 Flit Data 经 RDI 接口传递给 Adapter。以工作在 Standard 256B Flit Mode 下的 UCIe X16 Standard Package 为例，256B 数据与 16 条 Lane 的映射关系如图 2 所示，从 B0~B255 依次循环映射到 Lane0~15 。</p>\n<br/>\n<p><img alt=\"在这里插入图片描述\" height=\"300\" src=\"..\\..\\static\\image\\4a5cc9468fbf4e8db5876032b63feeee.png\" width=\"700\"/></p>\n<center>\n<font color=\"blue\" size=\"2\">▲图 2：Standard 256B Flit 到 X16 Standard Package 的映射 </font>\n</center>\n<br/>\n<p>  Flit Byte 在 Lane 上传输时，从 Bit0 到 Bit7 以 DDR 双倍数据速率依次传输或接收。即每个发送时钟周期发送 2bit 数据（上升沿发送 1bit，下下降沿发送 1bit），每发送 1bit 为 1 UI，共占用 8 UI。8 UI 中的前 4 UI，Vliad 为高，后 4 UI Valid 拉低，如图 3 所示。这里的 Valid 信号为什么要这么搞呢？这是为 Raw Mode 或支持多种 Flit Mode 的 UCIe 模块特意设计的。这种 Valid 拉高-&gt;拉低的形式，可以将多个分属于不同 Mode 的相邻 Byte 分离开来。</p>\n<br/>\n<p><img alt=\"在这里插入图片描述\" height=\"180\" src=\"..\\..\\static\\image\\61d37d7c65e946ec90c19156166c6abe.png\" width=\"300\"/></p>\n<center>\n<font color=\"blue\" size=\"2\">▲图 3：Flit Byte 传输 </font>\n</center>\n<br/>\n<h3><a id=\"222_Sideband__109\"></a>2.2.2 Sideband 数据封装与传输</h3>\n<p>  为了简化数据链路的建立、提升 Mainband 的带宽利用率、简化 Mainband 设计复杂度，UCIe 提供了一种 Sideband 的方式作为 Back Channel 来处理一些 <strong>链路管理、参数交换、寄存器访问</strong> 等非业务相关事宜。UCIe 逻辑物理层负责 Sideband Packet 的封装/解析与传输。</p>\n<p>  Sideband Packet 源头大致可分为两类：</p>\n<ol><li>一种 <strong>来源于 Adapter 或 Protocol Layer</strong>，逻辑物理层充当中间人的角色。比如 CfgWr/CfgRd 及 MemWr/MemRd 类型的寄存器访问请求及其对应的 Completion，比如参数交换或 Vendor 自定义的 Message。</li><li>还有一种 <strong>来源于逻辑物理层自身</strong>，逻辑物理层为 Sideband 请求或响应的动作发起者或接收者。比如链路初始化、链路训练、链路低功耗状态管理类的 Message，这些 Message 是物理逻辑层根据自身状态或接收到的 D2D Adapter/Electrical Physical Layer握手信号，在自身内部生成的，而非直接或间接来自于 Local 或 Remote 的 Adapter。</li></ol>\n<p>  RDI 接口上有一组跟 Sideband 相关的信号（pl_cfg* 与 lp_cfg*），逻辑物理层从 RDI 接口接收到 Sideband 相关信息后，封装成帧转换为串行数据流通过 PHY 传输到对端。同理，对端 PHY 发来的串行 Sideband 数据在逻辑物理层解包，通过 RDI 口上的 Sideband 信号发送到 Adapter。</p>\n<p>  每一笔 Sideband Message 都由 64bit Header + 32 或 64bit Data 组成，若 Data 为 32bit，需要高位补 0 到 64bit。发送串行数据时，每 64bit 为 1 个 Packet，相邻 Packet 之间插入 32bit 0 以分隔不同的 Packet。每个 Clock Cycle 发送 1bit Sideband 数据，下降沿采样。如图 4 所示。</p>\n<br/>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6d6ceab773704fab8a02f6cbc37d1256.png\"/></p>\n<center>\n<font color=\"blue\" size=\"2\">▲图 4：UCIe Sideband Message 格式及其背靠背传输 </font>\n</center>\n<br/>\n<hr/>\n<h2><a id=\"23__131\"></a>2.3 链路鲁棒性</h2>\n<h3><a id=\"231__132\"></a>2.3.1 链路训练及测试</h3>\n<p>  链路训练的测试期间，逻辑物理层负责生成 Scrambling 及 Training Pattern，并负责检测接收到的 Pattern。</p>\n<p>  链路训练期间，发送端生成并发送测试 Pattern，接收端接收到测试 Pattern 后与其本地参考 Pattern 进行比较，两者若出现不同，则比较失败，表明链路存在问题。为保证准确发现链路问题，链路收发端采用相同的 LFSR，收发端同步启动 Pattern Generator 并同步推进，每个 UI 都要进行比较。UCIe 链路训练及测试电路示意图如下。</p>\n<br/>\n<p><img alt=\"在这里插入图片描述\" height=\"235\" src=\"..\\..\\static\\image\\d1dc0eaeaa08486d9aa2ad262e901e2b.png\" width=\"600\"/></p>\n<center>\n<font color=\"blue\" size=\"2\">▲图 5：UCIe 链路训练及测试电路示意图 </font>\n</center>\n<br/>\n<h3><a id=\"232_Lane__145\"></a>2.3.2 Lane 序重排</h3>\n<p>  UCIe Module 必须支持 Lane Reversal。Lane Reversal 是针对 Mainband Data Lane 而言的，Data Lane 及对对应的 Redundant Lane 必须支持 Reversal，Track、Valid、Clock 及 Sideband 不支持 Lane Reversal。</p>\n<p>  若链路初始化期间发现 UCIe 链路两端的 Lane 序不匹配，比如 Module 0 的 Lane 0~(N-1) 接到了 Module 1 的 Lane (N-1)~0 上，此时就需要做 Lane Reverse。考虑到两侧只需要有一侧进行 Reverse，UCIe 协议规定 <strong>只能在 Tx 端实现 Lane Reversal</strong>。</p>\n<p>  UCIe Module 是如何判断是否需要进行 Lane Reverse 的呢？某个 Module 内的 Logical Data Lane 及 Redundant Lane 在该 Module 内有一个唯一的 8bit 宽的 Lane ID，TD_L[N] 与 RD_L[N] 共用一个 Lane ID。 正常情况下 Logical Lane 及 Physical Lane 的 ID 是相同的，在需要逆序或 Lane Repair 的时候，对映射关系进行调整。</p>\n<br/>\n<h3><a id=\"233__Lane__154\"></a>2.3.3 坏 Lane 替换</h3>\n<p>  高等封装的 UCIe Module 具备一些 Redundant Lane，在常规 Lane 出现问题时，可以启用 Redundant Lane 对坏 Lane 进行替换，即 Redundancy Remapping。支持 Redundant Lane Remapping 的 Lane 类型有 Data、Clock、Track 及 Valid Lane。其中，<strong>一组 Data Lane 配有两根 Redundant Lane， Clock 与 Track 共用 Redundant Lane，Valid Lane 专用一根 Redundant Lane</strong>。无论是 Lane Reversal 还是 Lane Remapping，其 <mark><font color=\"red\"><strong>本质都是从 Logical Lane 到 Physical Lane 的重映射</strong></font></mark>。</p>\n<br/>\n<h3><a id=\"234__159\"></a>2.3.4 链路减宽</h3>\n<p>  如上文所述，UCIe Advanced Package 才支持 Lane Repair，且能够修复的坏 Lane 数目有限。那么，坏 Lane 太多不够 Remap 了咋办？ 标准封装出现了坏 Lane 咋办？有一个办法：链路减宽。对于标准 X16 封装，当出现坏 Lane 时，可以将 X16 减宽为 X8（Lane0~7 或 Lane 8~15）。协议中并未表明可以减宽为 X4、X2、X1。</p>\n<br/>\n<hr/>\n<h1><a id=\"3__165\"></a>3. 电气物理层</h1>\n<hr/>\n<p><a href=\"https://mangopapa.blog.csdn.net/article/details/126733315\">【UCIe】UCIe 物理层介绍（电气物理篇）</a> 【ONGOING】</p>\n<br/>\n<hr/>\n<h1><a id=\"4__174\"></a>4. 参考</h1>\n<hr/>\n<ol><li>UCIe Spec r1.0, Chapter 1</li><li><a href=\"https://www.163.com/dy/article/HA0DDTGS0552IBJ1.html\">深度解读 Chiplet 互连标准 “UCIe” </a></li><li><a href=\"https://zhuanlan.zhihu.com/p/484176847\">谈谈 UCIe 的 Sideband </a></li><li><a href=\"https://zhuanlan.zhihu.com/p/559148824\">UCIe 协议详解 (Sideband) </a></li></ol>\n<br/>\n<hr/>\n<p><span id=\"ucie_protocol\"></span></p>\n<table><tbody><tr><td bgcolor=\"blue\">\n<center>\n<font color=\"white\" size=\"5\"> — END —</font>\n</center></td></tr></tbody></table>\n<p></p>\n<hr/>\n<blockquote>\n<p><span id=\"ucie_protocol\">🔥 <font color=\"red\" size=\"4\"><strong>精选往期 UCIe 协议系列文章，请查看【 <a href=\"https://blog.csdn.net/weixin_40357487/category_11962658.html\">Chiplet 专栏</a>】</strong></font>🔥</span> <br/></p>\n</blockquote>\n<p>⬆️<strong><a href=\"#head\"> 返回顶部</a></strong> ⬆️</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-07 06:22:11", "summary": "点击查看精选系列文章点击进入芯片设计验证社区，查看更多精彩内容声明：作者主页：的主页。本文首发于，转载或引用请注明出处。本文目的为个人学习记录及知识分享。因个人能力受限，存在协议解读不正确的可能。若您"}