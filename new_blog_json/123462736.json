{"blogid": "123462736", "writerAge": "码龄3年", "writerBlogNum": "36", "writerCollect": "108", "writerComment": "8", "writerFan": "39", "writerGrade": "3级", "writerIntegral": "585", "writerName": "淹死的鱼u", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123462736.jpg", "writerRankTotal": "37213", "writerRankWeekly": "363522", "writerThumb": "106", "writerVisitNum": "83549", "blog_read_count": "15070", "blog_time": "已于 2022-03-13 17:31:26 修改", "blog_title": "Vue3中Vuex的使用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-kimbie-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><strong>Vuex是做什么的？</strong></p>\n<p>Vue官方：状态管理工具</p>\n<p><strong>状态管理是什么?</strong></p>\n<p>需要在多个组件中共享的状态、且是响应式的、一个变，全都改变。</p>\n<p>例如一些全局要用的的状态信息：用户登录状态、用户名称、地理位置信息、购物车中商品、等等</p>\n<p>这时候我们就需要这么一个工具来进行全局的状态管理，Vuex就是这样的一个工具。</p>\n<p><strong>单页面的状态管理</strong></p>\n<p>View–&gt;Actions—&gt;State</p>\n<img src=\"..\\..\\static\\image\\flow.png\"/>\n<p>视图层(view)触发操作(action)更改状态(state)响应回视图层(view)</p>\n<h4><a id=\"vuexVue32_20\"></a>vuex（Vue3.2版本）</h4>\n<p>store/index.js 创建store对象并导出store</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> createStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n  state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  actions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  modules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p>main.js 引入并使用</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">import</span> store <span class=\"token keyword\">from</span> <span class=\"token string\">'./store'</span>\n<span class=\"token operator\">...</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span>\n</code></pre>\n<h4><a id=\"_49\"></a>多页状态管理</h4>\n<img src=\"..\\..\\static\\image\\vuex.png\"/>\n<h3><a id=\"vuex_store_53\"></a>vuex store对象属性介绍</h3>\n<h4><a id=\"Vue3_store__55\"></a>Vue3中获取 store 实例对象的方法</h4>\n<p>vue2 中可以通过 <code>this.$store.xxx</code> 的方式拿到 store 的实例对象。</p>\n<p>vue3 中的 setup 在 beforecreate 和 created 前执行，此时 vue对象还未被创建，没有了之前的this，所以此处我们需要用到另一种方法来获取到 store 对象。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> useStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span> <span class=\"token comment\">// 引入useStore 方法</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">useStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 该方法用于返回store 实例</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// store 实例对象</span>\n</code></pre>\n<h4><a id=\"1_state_67\"></a>1. <code>state</code></h4>\n<p>存放数据的地方</p>\n<pre><code class=\"prism language-javascript\">state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n  count<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  num<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<p>使用：使用方法大致与vue2.x中的版本相同，通过 <code>$store.state.属性名</code> 来获取state中的属性。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">//template中</span>\n<span class=\"token operator\">&lt;</span>span<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span>$store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>span<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span>$store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">&gt;</span>\n</code></pre>\n<blockquote>\n<p>可以在 <code>state</code> 中直接进行数据变化的操作，但Vue不建议这么做。因为对于vue开发工具 devtools 来说，直接在state中进行数据改变，devtools是跟踪不到的。vuex中希望<strong>通过 <code>action</code>（进行异步操作</strong>）或是 <code>mutations</code>（同步操作）来进行数据改变的操作，这样在 devtools 中才能直接观察出数据的变化以及记录，方便开发者调试。</p>\n</blockquote>\n<br/>\n<p><strong>另外，在vue3 中对state 中对象新增属性或删除时，不再需要通过 <code>vue.set()</code> , 或是 <code>vue.delete()</code> 来进行对象的响应式处理了，直接新增的对象属性已经具有响应式。</strong></p>\n<h4><a id=\"2_mutations_92\"></a>2. <code>mutations</code></h4>\n<p>vuex的store状态更新的唯一方式：提交 mutation</p>\n<p>同步操作可以直接在mutatuions中直接进行</p>\n<p>mutions 主要包含2部分:</p>\n<ol><li><strong>字符串的事件类型 (type)</strong></li><li>一个**回调函数（handler）**该回调函数的第一个参数是 state</li></ol>\n<pre><code class=\"prism language-javascript\">mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 传入 state</span>\n  <span class=\"token function\">increment</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>template 中通过 <code>$store.commit('方法名')</code> 触发</p>\n<p>在 <strong>vue3.x</strong> 中需要拿到** store 实例<strong>的话，需要调用</strong> <code>useStore</code> **这样一个函数，在 vuex 中导入</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 导入 useStore 函数</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> useStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">useStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'increment'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>mution 的参数与传参方法</strong></p>\n<p>mution 接收参数直接写在定义的方法里边即可接受传递的参数</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// ...state定义count</span>\nmutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">sum</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> num\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>通过 commit 的payload 进行参数传递</p>\n<p>使用 <code>store.commit('mution中函数名', '需要传递的参数' )</code> 在commit里添加参数的方式进行传递</p>\n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>{<!-- -->{this.$store.state.count}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>add(10)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>++<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script language-javascript\">\n<span class=\"token comment\">// 获取store实例，获取方式看上边获取store实例方法</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sum'</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p><strong>mution 的提交风格</strong></p>\n<p>前面提到了 mution 主要包含 type 和 回调函数 两部分, 和通过commit payload的方式进行参数传递（提交）,下面我们可以</p>\n<p>用这种方式进行 mution 的提交</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">'sum'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 类型就是mution中定义的方法名称</span>\n    num\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">...</span>\nmutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">sum</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> payload<span class=\"token punctuation\">.</span>num\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"3_actions_174\"></a>3. <code>actions</code></h4>\n<p>异步操作在action中进行，再传递到mutation</p>\n<p>action基本使用如下：</p>\n<p>action 中定义的方法默认参数为** <code>context</code> 上下文**， 可以理解为 store 对象</p>\n<p><strong>通过 context 上下文对象，拿到store，通过 <code>commit</code> 触发 mution 中的方法</strong>，以此来完成异步操作</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">...</span>\nmutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">sum</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> num\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\nactions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// context 上下文对象，可以理解为store</span>\n  <span class=\"token function\">sum_actions</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n      context<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sum'</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 通过context去触发mutions中的sum</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<p><strong>在template 中通过<code>dispatch</code> 调用action 中定义的sum_action 方法</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// ...template</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sum_actions'</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span>\n</code></pre>\n<br/>\n<p><strong>通过 promise 实现异步操作完成，通知组件异步执行成功或是失败。</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addAction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sum_actions'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n    num\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>sun_action方法返回一个promise，当累加的值大于30时不再累加，抛出错误。</p>\n<pre><code class=\"prism language-javascript\"> actions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">sum_actions</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token comment\">// 通过 context 上下文对象拿到 count</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">&lt;</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            context<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sum'</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'异步操作执行成功'</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'异步操作执行错误'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<h4><a id=\"4_getters_245\"></a>4. <code>getters</code></h4>\n<p>类似于组件的计算属性</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> createStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n  state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    students<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{<!-- --></span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'mjy'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token string\">'18'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'cjy'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token string\">'22'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'ajy'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token string\">'21'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  getters<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">more20stu</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=&gt;</span> item<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&gt;=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p>使用 通过<code>$store.getters.方法名</code> 进行调用</p>\n<pre><code class=\"prism language-html\">//...template\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>{<!-- -->{$store.getters.more20stu}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span> // 展示出小于20岁的学生\n</code></pre>\n<p>getters 的入参, getters 可以接收两个参数，一个是 <code>state</code>, 一个是自身的 <code>getters</code> ，并对自身存在的方法进行调用。</p>\n<pre><code class=\"prism language-javascript\">getters<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">more20stu</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> getters<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> getters<span class=\"token punctuation\">.</span>more20stu<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>getters 的参数与传参方法</strong></p>\n<p>上面是getters固定的两个参数，如果你想给getters传递参数，让其筛选大于 age 的人，可以这么做</p>\n<p>返回一个 function 该 function 接受 Age，并处理</p>\n<pre><code class=\"prism language-javascript\">getters<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">more20stu</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> getters<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> getters<span class=\"token punctuation\">.</span>more20stu<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">moreAgestu</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=&gt;</span>\n          item<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&gt;=</span> Age\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 该写法与上边写法相同但更简洁，用到了ES6中的箭头函数，如想了解es6箭头函数的写法</span>\n  <span class=\"token comment\">// 可以看这篇文章 https://blog.csdn.net/qq_45934504/article/details/123405813?spm=1001.2014.3001.5501</span>\n  moreAgestu_Es6<span class=\"token punctuation\">:</span> state <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> Age <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=&gt;</span> item<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&gt;=</span> Age<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>使用</p>\n<pre><code class=\"prism language-html\">//...template\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>{<!-- -->{$store.getters.more20stu}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span> // 展示出小于20岁的学生\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>{<!-- -->{$store.getters.moreAgestu(18)}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span> // 通过参数传递, 展示出年龄小于18的学生\n</code></pre>\n<h4><a id=\"5_modules_312\"></a>5. <code>modules</code></h4>\n<p>当应用变得复杂时，state中管理的变量变多，store对象就有可能变得相当臃肿。</p>\n<p>为了解决这个问题，vuex允许我们将store分割成模块化（modules），而每个模块拥有着自己的state、mutation、action、getters等</p>\n<p>在store文件中新建modules文件夹</p>\n<p>在modules中可以创建单一的模块，一个模块处理一个模块的功能</p>\n<p><code>store/modules/user.js</code> 处理用户相关功能</p>\n<p><code>store/modules/pay.js</code> 处理支付相关功能</p>\n<p><code>store/modules/cat.js</code> 处理购物车相关功能</p>\n<pre><code>// user.js模块\n// 导出\nexport default {\n  namespaced: true, // 为每个模块添加一个前缀名，保证模块命明不冲突 \n  state: () =&gt; {},\n  mutations: {},\n  actions: {}\n}\n\n</code></pre>\n<p>最终通过 <code>store/index.js</code> 中进行引入</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// store/index.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> createStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span>\n<span class=\"token keyword\">import</span> user <span class=\"token keyword\">from</span> <span class=\"token string\">'./modules/user.js'</span>\n<span class=\"token keyword\">import</span> user <span class=\"token keyword\">from</span> <span class=\"token string\">'./modules/pay.js'</span>\n<span class=\"token keyword\">import</span> user <span class=\"token keyword\">from</span> <span class=\"token string\">'./modules/cat.js'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n  modules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    user<span class=\"token punctuation\">,</span>\n    pay<span class=\"token punctuation\">,</span>\n    cat\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p>在template中模块中的写法和无模块的写法大同小异，带上模块的名称即可</p>\n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>{<!-- -->{$store.state.user.count}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<pre><code class=\"prism language-javascript\">store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user/sum'</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 参数带上模块名称</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user/sum_actions'</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">)</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-03-13 17:31:26", "summary": "是做什么的？官方：状态管理工具状态管理是什么需要在多个组件中共享的状态、且是响应式的、一个变，全都改变。例如一些全局要用的的状态信息：用户登录状态、用户名称、地理位置信息、购物车中商品、等等这时候我们"}