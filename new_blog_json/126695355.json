{"blogid": "126695355", "writerAge": "码龄1年", "writerBlogNum": "21", "writerCollect": "310", "writerComment": "381", "writerFan": "506", "writerGrade": "4级", "writerIntegral": "945", "writerName": "夜猫徐", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126695355.jpg", "writerRankTotal": "19744", "writerRankWeekly": "171", "writerThumb": "278", "writerVisitNum": "7289", "blog_read_count": "430", "blog_time": "已于 2022-09-04 22:08:34 修改", "blog_title": "猿创征文 |【C++】面向对象之微观部分——类的组成(上)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_1\">一、面向对象之类的抽象与封装</a></li><li><ul><li><a href=\"#11__2\">1.1 类与对象的定义</a></li><li><ul><li><a href=\"#111__8\">1.1.1 对象的定义</a></li><li><a href=\"#112__14\">1.1.2 类的定义</a></li></ul>\n</li><li><a href=\"#12_C_22\">1.2 在C++中怎么表示一个类</a></li><li><ul><li><a href=\"#121__23\">1.2.1 类的表示与封装性</a></li><li><a href=\"#122_C_80\">1.2.2 C++中类和结构体有什么区别</a></li><li><a href=\"#123__87\">1.2.3 类外访问类中私有属性或方法</a></li><li><a href=\"#124__153\">1.2.4 类与对象的内存大小</a></li></ul>\n</li><li><a href=\"#13__223\">1.3 封装一个矩形类</a></li></ul>\n</li><li><a href=\"#Cthis_270\">二、C++中的this指针</a></li><li><ul><li><a href=\"#21_this_274\">2.1 this指针的由来</a></li><li><a href=\"#22_thisC_307\">2.2 this指针在C++程序底层的一些的逻辑</a></li><li><a href=\"#23_this_312\">2.3 this指针的用法</a></li><li><ul><li><a href=\"#231_this_314\">2.3.1 this指针的用法一</a></li><li><a href=\"#232_this_350\">2.3.2 this指针的用法二</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_399\">三、类中的构造与析构</a></li><li><ul><li><a href=\"#31__400\">3.1 构造函数</a></li><li><ul><li><a href=\"#311_C_401\">3.1.1 C++中类的构造函数及意义</a></li><li><a href=\"#312_C_420\">3.1.2 C++中类的构造函数的定义形式及调用时机</a></li><li><a href=\"#313__489\">3.1.3 编译器自动调用构造的形式</a></li></ul>\n</li><li><a href=\"#32__536\">3.2 析构函数</a></li><li><ul><li><a href=\"#321_C_537\">3.2.1 C++中类的析构函数及意义</a></li><li><a href=\"#322_C_558\">3.2.2 C++中类的析构函数的定义形式及调用时机</a></li></ul>\n</li><li><a href=\"#33__618\">3.3 构造函数和析构函数调用的顺序</a></li></ul>\n</li><li><a href=\"#_657\">四、类中特殊属性的初始化</a></li><li><ul><li><a href=\"#41_const_663\">4.1 类中const修饰的成员变量及没有默认构造的类类型成员对象的初始化</a></li><li><a href=\"#42_static_736\">4.2 类中static修饰的类中的属性的初始化</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>一、面向对象之类的抽象与封装</h1>\n<h2><a id=\"11__2\"></a>1.1 类与对象的定义</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2b4032da041a47e98f7dfbf313cab3c2.png\"/><br/> 了解了类，类对象就不难理解。<br/> <strong>举例：在现实世界中我们自己就是人类的对象。<br/> 换到计算机的角度：对象就是类在实际的内存空间中定义的变量。</strong></p>\n<h3><a id=\"111__8\"></a>1.1.1 对象的定义</h3>\n<p><em><strong>现实中任何事物都可以称之为对象，有自己的独特的特点。</strong></em></p>\n<p><strong>面向对象的思想：</strong> 就是把一切事物都看成对象，而对象一般都是由<mark>属性</mark>和<mark>方法</mark>组成。<br/> <strong>属性属于对象静态的一面，用来形容对象的一些特征。</strong> 例如：张三的身高、体重、性别。身高、体重和性别就是对象的属性。<br/> <strong>方法属于对象动态的一面。</strong> 例如：张三会跑，会说话。跑，说话这些行为就是对象的方法。</p>\n<h3><a id=\"112__14\"></a>1.1.2 类的定义</h3>\n<p><strong>具有同种属性与行为的对象可以抽象为一个类。</strong><br/> 例如：“人”就是一个类，其中的人名叫小明，小红等不同的人都是类在现实世界中“人”的对象。</p>\n<p>类相当于一个模板或蓝图，他定义了它所包含的<strong>全体对象的共同的属性与行为</strong>，对象是类的实例化。<br/> 例如：我们在叫小明的时候，不会喊“人”而是说的是“小明”。</p>\n<p><mark>总结：类即为一些具有共有属性与行为的抽象。对象就是类的实例。</mark></p>\n<h2><a id=\"12_C_22\"></a>1.2 在C++中怎么表示一个类</h2>\n<h3><a id=\"121__23\"></a>1.2.1 类的表示与封装性</h3>\n<p>使用<code>class</code>来表示一个类</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token operator\">+</span> 类名\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span><span class=\"token comment\">//私有的</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><span class=\"token comment\">//公有的</span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span><span class=\"token comment\">//受保护</span>\n    <span class=\"token comment\">//1.属性</span>\n    <span class=\"token comment\">//2.行为</span>\n    \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>类的封装性 = 属性+ 行为 + 访问权限</strong><br/> <strong>访问权限</strong>：用来修饰类中属性或函数的访问级别的。<br/> <code>public</code> ：公有的，类中或类外对象均可直接访问。<br/> <code>private</code>：私有的，只有类中可以访问，类外或子类之中均不可以访问。<br/> <code>protected</code>：受保护的，只有类中或子类的类中可以访问，类外是不可以访问的。</p>\n<p>一般情况下：我们会把类中的属性设为私有的，类中方法设定为公有的。</p>\n<p>例如封装一个人的类代码示例：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    string name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n    \t<span class=\"token comment\">//cout &lt;&lt; name &lt;&lt; endl;//这就叫类中可以直接访问。</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"正在学习C++\"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    person p<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//栈上定义对象</span>\n    p<span class=\"token punctuation\">.</span><span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    person <span class=\"token operator\">*</span>p1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> person<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//堆上定义对象</span>\n    p1<span class=\"token operator\">-&gt;</span><span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//(new Person)-&gt;work();不要使用这种方式，这种没有办法释放资源。</span>\n    <span class=\"token keyword\">delete</span> p1<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>结果展示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f7884c62387c42aea39f89bb126bd360.png\"/></p>\n<h3><a id=\"122_C_80\"></a>1.2.2 C++中类和结构体有什么区别</h3>\n<p>类是由结构体演化而来的。<br/> <code>class</code>在C++中表示这个类是<strong>默认的私有权限</strong>，而<code>struct</code>表示的类<strong>默认的是公有权限</strong>。</p>\n<p><strong>既然类和结构体区别不大，什么时候使用结构体，什么时候使用类？</strong><br/> 作为数据节点时，如链表的节点、树的节点时，一般多用<code>struct</code>。<br/> 一般封装逻辑性较多时，都是用<code>class</code>。</p>\n<h3><a id=\"123__87\"></a>1.2.3 类外访问类中私有属性或方法</h3>\n<p>在类外我们不能访问类中的私有属性，所以我们可以在类中手动提供公有的<code>set()</code>与<code>get()</code>方法。<br/> 代码示例：<br/> <strong>在代码中我使用了<code>this</code>指针，如有疑问，请先看第二个知识点进行了解。</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    string name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"正在学习C++\"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"姓名：\"</span> <span class=\"token operator\">&lt;&lt;</span> name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 年龄:\"</span> <span class=\"token operator\">&lt;&lt;</span> age <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//姓名属性的set与get方式</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setname</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    string <span class=\"token function\">getname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//年龄属性的set与get方式</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>age<span class=\"token operator\">=</span>age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    person p<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//栈上定义对象</span>\n    p<span class=\"token punctuation\">.</span><span class=\"token function\">setname</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yemaoxu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    p<span class=\"token punctuation\">.</span><span class=\"token function\">setage</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    p<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    p<span class=\"token punctuation\">.</span><span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//cout &lt;&lt; p.age &lt;&lt;endl;私有不可在类外访问，要用get方法</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-----------------------\"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    person <span class=\"token operator\">*</span>p1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> person<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//堆上定义对象</span>\n    p1<span class=\"token operator\">-&gt;</span><span class=\"token function\">setname</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xiaoming\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    p1<span class=\"token operator\">-&gt;</span><span class=\"token function\">setage</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    p1<span class=\"token operator\">-&gt;</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    p1<span class=\"token operator\">-&gt;</span><span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> p1<span class=\"token operator\">-&gt;</span><span class=\"token function\">getname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//(new Person)-&gt;work();不要使用这种方式，这种没有办法释放资源。</span>\n    <span class=\"token keyword\">delete</span> p1<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>结果展示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c536566ef8054ceba28bf4d6b624a82f.png\"/></p>\n<h3><a id=\"124__153\"></a>1.2.4 类与对象的内存大小</h3>\n<p>代码展示：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"正在学习C++\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">//int a;</span>\n    <span class=\"token comment\">//double b;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"正在学习C++\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">//int a;</span>\n    <span class=\"token comment\">//double b;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">/*void show()\n    {\n        cout &lt;&lt; \"正在学习C++\" &lt;&lt; endl;\n    }*/</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">double</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"正在学习C++\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    A a<span class=\"token punctuation\">;</span>\n    B b<span class=\"token punctuation\">;</span>\n    C c<span class=\"token punctuation\">;</span>\n    D d<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>结果展示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\58b7b1f5ae0c42f797931753a388bad8.png\"/></p>\n<p><mark>总结：</mark></p>\n<ol><li>如果一个类是一个空类，当他去定义对象编译器为了在内存对此对象有一个内存表示，所以会在这个类中安插一个<code>unsigned char</code>的类型的数据。这样的话，即使是一个空类，那么在内存的空间中也有一个表示。</li><li>类对象的空间大小与非静态的属性有关。</li><li>C++中<code>class</code>定义的类，也遵从C中结构体的内存对齐原则。</li></ol>\n<h2><a id=\"13__223\"></a>1.3 封装一个矩形类</h2>\n<p>封装一个矩形类，定义矩形的属性（宽，高）及行为（求面积）。<br/> 代码示例：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Rect</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">//抽象出矩形的属性:</span>\n    <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//求面积的行为</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> width<span class=\"token operator\">*</span>height<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//通过外部参数，为类中的属性进行赋值。</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> height<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>width<span class=\"token operator\">=</span>width<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>height<span class=\"token operator\">=</span>height<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//定义一个函数，来比较两个矩形大小，返回最大的那个矩形。</span>\nRect<span class=\"token operator\">&amp;</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>Rect<span class=\"token operator\">&amp;</span> r1<span class=\"token punctuation\">,</span>Rect<span class=\"token operator\">&amp;</span> r2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> r1<span class=\"token punctuation\">.</span><span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span>r2<span class=\"token punctuation\">.</span><span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> r1 <span class=\"token operator\">:</span> r2<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//在C中函数的返回值默认都是一个右值。</span>\n    <span class=\"token comment\">//在C++中如果返回值为一个引用的话，那么此函数的返回值将是一个左值。</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Rect r1<span class=\"token punctuation\">,</span>r2<span class=\"token punctuation\">;</span>\n    r1<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    r2<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> r1<span class=\"token punctuation\">.</span><span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> r2<span class=\"token punctuation\">.</span><span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-------------\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//获取比较后大的那个矩形，并打印出此矩形的面积：</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">,</span>r2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>结果展示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9740d500b89d4b25b594daf3f2dc45c1.png\"/></p>\n<h1><a id=\"Cthis_270\"></a>二、C++中的this指针</h1>\n<p>this指针是类中成员函数的一个隐藏形参，哪个类对象调用成员函数，this指针就指向谁。</p>\n<p>this的类型：<code>类名 * const this;</code></p>\n<h2><a id=\"21_this_274\"></a>2.1 this指针的由来</h2>\n<p>C中实现this指针：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>myfun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>stu<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//C++中this的原型就是这个，this就是一个指向本对象的的常指针。</span>\n<span class=\"token comment\">//C++中的成员函数都是带有this的全局函函数。只有生成对象时才可以调用。</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>stu <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> this<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s,%d\\n\"</span><span class=\"token punctuation\">,</span>this<span class=\"token operator\">-&gt;</span>name<span class=\"token punctuation\">,</span>this<span class=\"token operator\">-&gt;</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    stu s<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"yemaoxu\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span>show<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//this指针的产生，随着对象产生而产生。</span>\n    <span class=\"token comment\">//在C++中this指针隐藏在类成员函数中形参列表中的第一位（最左侧）</span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">myfun</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>结果展示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\998369fb7d8943a5ab2edbbc4441147a.png\"/><br/> <mark>总结：</mark></p>\n<ol><li>this指针，就是一个指向本对象的指针，而且是一个const修饰的常指针。</li><li>this指针的产生，随着对象产生而产生。</li><li>在C++中this指针隐藏在类成员函数中形参列表中的第一位（最左侧）。</li><li>如果不加this，默认都是通过this指针来访问成员的。</li></ol>\n<h2><a id=\"22_thisC_307\"></a>2.2 this指针在C++程序底层的一些的逻辑</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cc7e57d771534a17a0bf0c36ff2f8dc4.png\"/><br/> 成员函数参数的入栈过程中，this指针是最后一个，并且直接放在了exc寄存器上。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b022a3ea38f14af79241d205ac683a09.png\"/><br/> this就是指向本对象的指针，隐藏在成员函数的最左侧，即第一位。</p>\n<h2><a id=\"23_this_312\"></a>2.3 this指针的用法</h2>\n<p>this指针就是编译器提供给我们程序员使用的，他的用法有以下两种</p>\n<h3><a id=\"231_this_314\"></a>2.3.1 this指针的用法一</h3>\n<p>当函数的形参变量名与类中属性变量相同冲突时，一定要使用this加以区别，也可以通过构造函数的<strong>初始化表</strong>解决。<br/> <strong>初始化列表在第四个知识点进行讲解，感兴趣可以了解一下。</strong></p>\n<p>代码示例：<br/> <strong>在代码中用到了，构造知识点，感兴趣可以去第三个知识点进行了解。</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Stu</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    string name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Stu</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token comment\">//构造知识</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>age<span class=\"token operator\">=</span>age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"姓名：\"</span> <span class=\"token operator\">&lt;&lt;</span> name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 年龄：\"</span> <span class=\"token operator\">&lt;&lt;</span> age <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Stu <span class=\"token function\">stu</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yemaoxu\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    stu<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>结果展示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7bdbfe2125214dbb9887bd11f111fe62.png\"/></p>\n<h3><a id=\"232_this_350\"></a>2.3.2 this指针的用法二</h3>\n<p>返回本对象。一般情况是当本对象类中的属性被修改时会这么用。</p>\n<p>代码示例：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Stu</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    string name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Stu</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token comment\">//构造知识</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>age<span class=\"token operator\">=</span>age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    Stu<span class=\"token operator\">&amp;</span> <span class=\"token function\">setname</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"姓名：\"</span> <span class=\"token operator\">&lt;&lt;</span> name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 年龄：\"</span> <span class=\"token operator\">&lt;&lt;</span> age <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Stu <span class=\"token function\">stu</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yemaoxu\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    stu<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-----------\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    stu<span class=\"token punctuation\">.</span><span class=\"token function\">setname</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xiaoming\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>结果展示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\db37007f124d424abb48f02c6e3db492.png\"/></p>\n<p><mark>上面两个例子中为什么成员函数<code>show</code>可以直接访问类中的属性呢？</mark><br/> 因为在C++的任何一个非静态成员中都隐藏了一根指向本对象的指针，这个指针就是this，由于this指针的存在，所以类中的非静态成员函数才可以访问类中的成员属性。</p>\n<p><mark>注意：</mark><br/> <em>不能在成员函数的形参中使用this指针；<br/> 不能在构造函数的初始化表中使用this指针；<br/> 可以在成员函数的函数体中使用this指针；</em></p>\n<h1><a id=\"_399\"></a>三、类中的构造与析构</h1>\n<h2><a id=\"31__400\"></a>3.1 构造函数</h2>\n<h3><a id=\"311_C_401\"></a>3.1.1 C++中类的构造函数及意义</h3>\n<ol><li>功能：<br/> 在类实例化对象的过程中，给成员申请资源。如分配内存，打开文件等，完成对成员的初始化。</li><li>格式：<br/> 构造函数与类同名<br/> 构造函数没有返回值<br/> 构造函数一般是public权限的</li></ol>\n<p>C++中定义构造函数的语法形式：</p>\n<pre><code class=\"prism language-cpp\">类名<span class=\"token punctuation\">(</span>形参列表<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//构造函数的函数体。</span>\n    <span class=\"token comment\">//这个函数体就应该是对类中属性进行初始化的逻辑。</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><mark>构造的的意义</mark>就是用来初始化类中的属性的。</p>\n<h3><a id=\"312_C_420\"></a>3.1.2 C++中类的构造函数的定义形式及调用时机</h3>\n<p><strong>构造函数的调用时机：</strong></p>\n<pre><code class=\"prism language-cpp\">栈区：\n类名  对象名<span class=\"token punctuation\">(</span>构造函数的实参表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//调用构造函数</span>\n堆区：\n类名  <span class=\"token operator\">*</span>指针名<span class=\"token punctuation\">;</span>\n指针名 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>  类名<span class=\"token punctuation\">(</span>构造函数的实参表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//调用构造函数</span>\n</code></pre>\n<p>使用new去定义对象，首先开辟空间，然后调用类中构造函数。</p>\n<p>当去定义对象时，编译器就会根据对象后括号的实参类型，自动去调用与之相匹配的构造函数。如果在类中编译器找不到与之匹配的构造函数，将直接报错。<br/> 代码示例：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Stu</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    string name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Stu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Stu的无参构造\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//构造函数也是函数，他也遵从函数重载原则。</span>\n    <span class=\"token function\">Stu</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>age<span class=\"token operator\">=</span>age<span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Stu的有参构造\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"姓名：\"</span> <span class=\"token operator\">&lt;&lt;</span> name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 年龄：\"</span> <span class=\"token operator\">&lt;&lt;</span> age <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//在栈上定义对象：</span>\n    Stu stu<span class=\"token punctuation\">;</span><span class=\"token comment\">//编译器会自动调用无参的空构造。</span>\n    stu<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Stu <span class=\"token function\">stu1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yemaoxu\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//编译器自动调与之参数类型相匹配的有参构造函数。</span>\n    stu1<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-----------\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//在堆上定义对象</span>\n    Stu <span class=\"token operator\">*</span>pstu<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> Stu<span class=\"token punctuation\">;</span>\n    pstu<span class=\"token operator\">-&gt;</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Stu <span class=\"token operator\">*</span>pstu1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">Stu</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xiaoming\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    pstu1<span class=\"token operator\">-&gt;</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> pstu<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> pstu1<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>结果展示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\947526b024824331bbf0abeebd4f2f36.png\"/><br/> <mark>总结：</mark></p>\n<ol><li>如果类中没有提供任何构造，此种无参空构造就是编译器默认生成的，形参列表为void。如果有写任何一种构造，编译器将不再提供默认版本。所以，如果想要使用无参数的构造函数，也需要进行手动定义。</li><li>这种无参空构造也称之类中默认构造。</li><li>构造函数与普通函数还是不一样的，他没有返回值，连void都没有。</li><li>构造函数不是给你程序员调用，他是给编译器调用，用来在开辟空间同时，对类中属性的进行初始化。</li></ol>\n<h3><a id=\"313__489\"></a>3.1.3 编译器自动调用构造的形式</h3>\n<p><strong>显式调用与隐式调用</strong><br/> 像我们上面举例的方法调用方法就是显式调用。</p>\n<p>隐式调用代码示例：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">//C++11提供的关键字explicit用于修饰构造函数，以限制编译器自动进行隐式调用。</span>\n    <span class=\"token keyword\">explicit</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>a<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//cout &lt;&lt; \"隐式调用了A的有参构造\" &lt;&lt; endl;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"显式调用了A的有参构造\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>a<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>b<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>c<span class=\"token operator\">=</span>c<span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"另一种方式隐式调用了A的有参构造\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    A <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//显式调用</span>\n    <span class=\"token comment\">//A a1=10;//隐式调用</span>\n    A a2<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//隐式调用</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>结果显示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\120780120852457e90d59f98e18eb50d.png\"/><br/> <mark>注：</mark> 当有<code>explicit</code>在构造函数前进行修饰时，编译器就不再使隐式调用的方式来调用构造函数了。这样可以提高代码可读性。</p>\n<p><mark>构造函数的自动调用的时机总结：</mark></p>\n<ol><li>构建对象时，编译器要据给定参数的不同自动调用类中的不同参数的构造函数。</li><li>构造函数也是函数，只不过这个函数是给编译器用的，如果有多个形参不同的构造，构造函数之间也会发生重载。</li></ol>\n<h2><a id=\"32__536\"></a>3.2 析构函数</h2>\n<h3><a id=\"321_C_537\"></a>3.2.1 C++中类的析构函数及意义</h3>\n<ol><li>作用：<br/> 在对象消亡的时候，用来做释放空间等善后工作的。</li><li>格式：<br/> <code>~类名(void){}</code><br/> 析构函数是没有参数的，所以<mark>不能重载</mark>。</li><li>默认析构函数：<br/> 如果类中没有显性定义析构函数，编译器会默认提供一个函数体为空的<br/> 析构函数，用来消亡对象使用，如果显性定义了，默认的版本就不再提供了。</li></ol>\n<p>析构函数的语法形式：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token operator\">~</span>类名<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//析构函数的函数体。</span>\n    <span class=\"token comment\">//函数体就应该书写：当类中有属性指针指向堆区资源的情况，回收资源的逻辑。</span>\n    <span class=\"token comment\">//因为在销毁对象时，首先编译器会调用类中的析构函数。</span>\n    <span class=\"token comment\">//调用析构函数的意义就是希望你这个程序员来把有以上情况出现时进行回收资源。</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"322_C_558\"></a>3.2.2 C++中类的析构函数的定义形式及调用时机</h3>\n<p><strong>析构函数的调用时机：</strong><br/> 当对象被销毁时，编译器自动调用类中的析构函数。<br/> <strong>被销毁分两种：</strong><br/> 一种就是栈对象，出栈时自动被销毁，此时也将自动调用类中的析构函数。(能不能完成资源清理，那就看你程序员有没有写回收的逻辑)。</p>\n<p>另一种就是堆上的对象：手动<code>delete</code>销毁，此时也调用类中的析构函数。(能不能完成资源清理，那就看你程序员有没有写回收的逻辑)。<br/> 因此，也有人说析构函数也叫清理函数。</p>\n<p>析构函数，它与构造函数还不太一样。既可以是编译器自动调用，也可以你这个程序员也可调用。<br/> 代码示例：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Stu</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    string name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">//Stu有参的构造</span>\n    <span class=\"token function\">Stu</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>age<span class=\"token operator\">=</span>age<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//如果类中有属性指针指向堆区，那么当对象被销毁时，就必须把这个指针指向堆区的资源先回收。</span>\n        <span class=\"token comment\">//不然的话就内存泄漏了。</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Stu的有参构造\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">Stu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Stu的析构\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>p<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//就应该清理类中有属性指针指向堆区的这种情况，在析构函数中书写回收类中属性指针指向的堆区资源的逻辑。</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//在栈上定义对象：</span>\n    Stu <span class=\"token function\">stu</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yemaoxu\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//在堆上定义对象</span>\n    Stu <span class=\"token operator\">*</span>pstu<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">Stu</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xiaoming\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//析构函数不仅可以编译器自动调用，也可以由你程序员在适当时机进行调用。</span>\n    <span class=\"token comment\">//delete关键字的底层实现其实就是以下的两步完成了。先析构（清理对象的空间），再free(完成对象的销毁)。</span>\n    pstu<span class=\"token operator\">-&gt;</span><span class=\"token operator\">~</span><span class=\"token function\">Stu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> pstu<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>结果展示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8dd2a6e0e317409481f86d658aed0837.png\"/><br/> <mark>总结：</mark></p>\n<ol><li>如果类中有属性指针指向堆区，那么当对象被销毁时，就必须把这个指针指向堆区的资源先回收。不然的话就内存泄漏了。</li><li>应该清理类中有属性指针指向堆区的这种情况，在析构函数中书写回收类中属性指针指向的堆区资源的逻辑。</li><li>析构函数不仅可以编译器自动调用，也可以由你程序员在适当时机进行调用。</li><li><code>delete</code>关键字的底层实现其实就是以下的两步完成了。先析构(清理对象的空间)，再<code>free</code>(完成对象的销毁)。</li></ol>\n<h2><a id=\"33__618\"></a>3.3 构造函数和析构函数调用的顺序</h2>\n<ol><li>对于堆空间的对象，他们什么时候被消亡取决于什么时候delete，先delete哪个，哪个就先消亡，所以，我们不考虑他的顺序。</li><li>对于栈空间的对象：<br/> 构造函数调用顺序：顺序调用<br/> 析构函数调用顺序：逆序调用<br/> 即先构造的后析构。</li></ol>\n<p>代码示例：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n        string name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>string _name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> _age<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">age</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>_age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"  \"</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  构造函数\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">~</span><span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            cout <span class=\"token operator\">&lt;&lt;</span><span class=\"token keyword\">this</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"  \"</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  析构函数\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">delete</span> age<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Student <span class=\"token function\">s1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小明\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Student <span class=\"token function\">s2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小红\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Student <span class=\"token function\">s3</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>结果展示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3d57db01bbe94d578dba5c6d88bac98f.png\"/></p>\n<h1><a id=\"_657\"></a>四、类中特殊属性的初始化</h1>\n<p>类的属性除了一些常用的普通变量(对象)之外，还有一些被修饰符修饰的变量(对象);</p>\n<p>两种：<br/> <strong>1.const修饰的成员对象、类类型对象（没有默认构造函数的对象）<br/> 2.static修饰的成员对象。</strong></p>\n<h2><a id=\"41_const_663\"></a>4.1 类中const修饰的成员变量及没有默认构造的类类型成员对象的初始化</h2>\n<p><strong>在C++中const修饰的变量，必须初始化。</strong><br/> 所以const修饰的变量，当开辟空间的同时就必须进行初始。</p>\n<p>类中有子类的类类型(但这个类对象没有默认构造函数供其生成对象)，也必须在开辟空间的同时，指定一个构造进行初始化。</p>\n<p>如何解决这些问题呢？<br/> 构造函数的特殊语法：<strong>初始化列表</strong></p>\n<p>代码示例：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"A的有参构造\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"A的析构\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">stu</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    string name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">;</span>\n    A a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">stu</span><span class=\"token punctuation\">(</span>string _name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> _age<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> _id<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> _b<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">age</span><span class=\"token punctuation\">(</span>_age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span>_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span>_b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"stu中的有参构造\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"姓名：\"</span> <span class=\"token operator\">&lt;&lt;</span> name <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" 年龄：\"</span> <span class=\"token operator\">&lt;&lt;</span> age <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 学号：\"</span> <span class=\"token operator\">&lt;&lt;</span> id <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 引用数\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">stu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"stu的析构\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> num<span class=\"token operator\">=</span><span class=\"token number\">521</span><span class=\"token punctuation\">;</span>\n    stu <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yemaoxu\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">1001</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>结果展示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6ddbab66039e4d299a180f09c84d9fd0.png\"/><br/> <mark>总结：</mark></p>\n<ol><li>初始化列表的调用时机：<br/> 1.初始化列表，在构造函数的调用之前。<br/> 2.初始化列表，也其实是在new的同时被调用的。</li><li>如果要全部使用初始化列表来完成对类中属性的初始化，建议大家保持与类中的属性的声明顺序相同。</li><li><code>a(1)</code>就是用来告诉编译器指定调用A类中的那一个构造来完成类中a对象初始化的。</li><li><mark>必须使用初始化表的场景：</mark><br/> 1.构造函数的形参名和成员变量名冲突，也可以使用this指针解决；<br/> 2.当类中有引用成员时；<br/> 3.类中有const修饰的成员变量时；<br/> 4.当类中有成员子对象时(有其他类的对象最为本类的成员时)；</li></ol>\n<h2><a id=\"42_static_736\"></a>4.2 类中static修饰的类中的属性的初始化</h2>\n<p>当一个进程被加载时，系统会为这个进程分配一块4G的虚拟地址空间。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6103fa8fc538414fab5e262be4818d57.png\"/><br/> <strong>类中的静态属性，是所有对象所共享的一份属性。</strong><br/> 是因为静态数据只能被加载一次。静态区的部分是属于整个进程的。</p>\n<p><strong>它只有一份数据。</strong><br/> 因为静态数据，在程序加载时就已经被确定下来了。</p>\n<p><strong>类中的静态属性，在语法层面上，他是属性整个类，而不是某个对象。他为整个类服务，而非某一个对象。如果是<code>public</code>修饰的话，那么也可以直接使用域名访问符<code>::</code>的形式直接访问，而无需依赖某个对象调用。</strong> 所以类中的静态属性是不依赖于对象，他是属于整个类的。</p>\n<p><strong>当类中如果有需要定义一个为整个类而服务属性时，就可以把它升级静态属性。</strong><br/> 这样的话这个属性就不再依赖于某个对象。</p>\n<p><strong>由于静态成员变量定义在静态区定义内存，而对象是存在于动态区之中，所以静态成员变量并不占用类对象的内存空间。</strong> 这个我在前面的代码中<code>sizeof</code>打印演示过。</p>\n<p><strong>静态区变量只能被初始化一次。</strong></p>\n<p>代码示例：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">stu</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    string name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">stu</span><span class=\"token punctuation\">(</span>string _name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> _age<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> _id<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">age</span><span class=\"token punctuation\">(</span>_age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span>_id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"stu中的有参构造\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"姓名：\"</span> <span class=\"token operator\">&lt;&lt;</span> name <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" 年龄：\"</span> <span class=\"token operator\">&lt;&lt;</span> age <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 学号：\"</span> <span class=\"token operator\">&lt;&lt;</span> id <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"学生人数：\"</span> <span class=\"token operator\">&lt;&lt;</span> count <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">stu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"stu的析构\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> stu<span class=\"token double-colon punctuation\">::</span>count<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    stu <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yemaoxu\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">1001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"学生人数：\"</span> <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span>count <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    stu <span class=\"token function\">s1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xiaoming\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">1002</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"学生人数：\"</span> <span class=\"token operator\">&lt;&lt;</span> s1<span class=\"token punctuation\">.</span>count <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-----------------\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">.</span>count <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>s1<span class=\"token punctuation\">.</span>count <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>结果展示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d8f2d75582484854b60896fbe842f7c6.png\"/><br/> <mark>总结：</mark></p>\n<ol><li>当类中有<code>static</code>修饰的成员变量时<br/> <strong>它是隐藏在类中作用域的一个静态变量，此变量必须在类外完成初始化才能在静态区中分配空间。</strong> 如果，对类中的静态属性没有在类外进行初始化，那么它将只是一个声明而已，没有空间的，即没有定义。</li><li>类中静态属性在类外进行初始化的方式：<br/> <code>int Stu::count;</code><br/> count会放在静态区.bss段。如果给它附一个初值它就会放.data段。</li></ol>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-04 22:08:34", "summary": "文章目录一、面向对象之类的抽象与封装类与对象的定义对象的定义类的定义在中怎么表示一个类类的表示与封装性中类和结构体有什么区别类外访问类中私有属性或方法类与对象的内存大小封装一个矩形类二、中的指针指针的"}