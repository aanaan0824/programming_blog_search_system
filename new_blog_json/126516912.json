{"blogid": "126516912", "writerAge": "码龄3年", "writerBlogNum": "179", "writerCollect": "1663", "writerComment": "1591", "writerFan": "2498", "writerGrade": "6级", "writerIntegral": "4727", "writerName": "前端杂货铺", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126516912.jpg", "writerRankTotal": "3710", "writerRankWeekly": "50", "writerThumb": "1078", "writerVisitNum": "94454", "blog_read_count": "793", "blog_time": "已于 2022-08-31 16:52:04 修改", "blog_title": "web前端面试高频考点——Vue原理（理解MVVM模型、深度/监听data变化、监听数组变化、深入了解虚拟DOM）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"_0\"></a>系列文章目录</h1>\n<table><thead><tr><th>内容</th><th>参考链接</th></tr></thead><tbody><tr><td>Vue基本使用</td><td><a href=\"https://blog.csdn.net/qq_45902692/article/details/126415651?spm=1001.2014.3001.5501\">Vue的基本使用（一文掌握Vue最基础的知识点）</a></td></tr><tr><td>Vue通信和高级特性</td><td><a href=\"https://blog.csdn.net/qq_45902692/article/details/126453192?spm=1001.2014.3001.5501\">Vue组件间的通信及高级特性（多种组件间的通信、自定义v-model、nextTick、插槽）</a></td></tr><tr><td>Vue高级特性</td><td><a href=\"https://blog.csdn.net/qq_45902692/article/details/126478821?spm=1001.2014.3001.5501\">Vue的高级特性（动态组件、异步加载、keep-alive、mixin、Vuex、Vue-Router）</a></td></tr><tr><td>Vue原理1</td><td><a href=\"https://blog.csdn.net/qq_45902692/article/details/126516912?spm=1001.2014.3001.5501\">Vue原理（理解MVVM模型、深度/监听data变化、监听数组变化、深入了解虚拟DOM）</a></td></tr><tr><td>Vue原理2</td><td><a href=\"https://blog.csdn.net/qq_45902692/article/details/126565768?spm=1001.2014.3001.5501\">Vue原理（diff算法、模板编译、组件渲染和更新、JS实现路由）</a></td></tr><tr><td>Vue面试题</td><td><a href=\"https://blog.csdn.net/qq_45902692/article/details/126588149?spm=1001.2014.3001.5502\">web前端面试高频考点——Vue面试题</a></td></tr></tbody></table>\n<hr/>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_0\">系列文章目录</a></li><li><ul><li><a href=\"#Vue_16\">一、Vue原理</a></li><li><ul><li><a href=\"#1MVVM_17\">1、理解MVVM模型</a></li><li><a href=\"#2_data__API_32\">2、监听 data 变化的核心 API</a></li><li><a href=\"#3vue_data__59\">3、vue如何深度监听 data 变化</a></li><li><a href=\"#4vue_131\">4、vue如何监听数组变化</a></li><li><a href=\"#5_DOM_217\">5、虚拟 DOM</a></li><li><ul><li><a href=\"#1VDOM_225\">（1）解决方案：VDOM</a></li><li><a href=\"#2_JS__DOM__231\">（2）用 JS 模拟 DOM 结构</a></li><li><a href=\"#3_snabbdom__vdom_270\">（3）通过 snabbdom 学习 vdom</a></li><li><a href=\"#4vdom__328\">（4）vdom 总结</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<hr/>\n<h2><a id=\"Vue_16\"></a>一、Vue原理</h2>\n<h3><a id=\"1MVVM_17\"></a>1、理解MVVM模型</h3>\n<p><strong>组件化</strong></p>\n<ul><li>组件化就是将一个页面拆分成一个个小的功能模块</li><li>每个功能模块完全属于自己这部分独立的功能</li><li>使得整个页面的管理和维护变得非常容易。</li><li>asp jsp php 已经有组件化了</li><li>nodejs 中也有类似的组件化</li></ul>\n<p><strong>数据驱动视图</strong></p>\n<ul><li>传统组件，只是静态渲染，更新还要依赖于操作 DOM</li><li>数据驱动视图 - Vue MVVM</li><li>数据驱动视图 - React setState</li></ul>\n<p><strong>MVVM 模型</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e9d7d18c23eb4f11af02f2d11bb0cdfd.png\"/></p>\n<h3><a id=\"2_data__API_32\"></a>2、监听 data 变化的核心 API</h3>\n<ul><li>组件 data 的数据一旦变化，立刻触发视图的更新</li><li>实现数据驱动视图的第一步</li><li>核心 API - Object.defineProperty</li><li>由于 Object.defineProperty 有一些缺点，Vue3.0 使用 Proxy</li><li>但 Proxy 兼容性不好，且无法 polyfill</li></ul>\n<p><strong>Object.defineProperty() 基本用法</strong></p>\n<p>示例：基本用法</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'zhangsan'</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newVal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'set'</span><span class=\"token punctuation\">)</span>\n        name <span class=\"token operator\">=</span> newVal\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// get zhangsan</span>\ndata<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'lisi'</span> <span class=\"token comment\">// set</span>\n</code></pre>\n<h3><a id=\"3vue_data__59\"></a>3、vue如何深度监听 data 变化</h3>\n<p><strong>Object.defineProperty 缺点</strong></p>\n<ul><li>深度监听，需要递归到底，一次性计算量大</li><li>无法监听新增属性/删除属性（Vue.set、Vue.delete）</li></ul>\n<p>示例：视图更新三次，新增和删除属性监听不到</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 触发更新视图</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">updateView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'视图更新'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 重新定义属性，监听起来</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">defineReactive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 深度监听</span>\n    <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 核心 API</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> value\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>newValue <span class=\"token operator\">!==</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">// 深度监听</span>\n                <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\n                <span class=\"token comment\">// 设置新值</span>\n                <span class=\"token comment\">// 注意，value 一直在闭包中，此处设置完之后，再 get 时也是会获取最新的值</span>\n                value <span class=\"token operator\">=</span> newValue\n\n                <span class=\"token comment\">// 触发更新视图</span>\n                <span class=\"token function\">updateView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 监听对象属性</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> target <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">||</span> target <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 不是对象或数组</span>\n        <span class=\"token keyword\">return</span> target\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 重新定义各个属性（for in 也可以遍历数组）</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">defineReactive</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 准备数据</span>\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'zhangsan'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">info</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span> <span class=\"token string\">'北京'</span> <span class=\"token comment\">// 需要深度监听</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 监听数据</span>\n<span class=\"token function\">observer</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 测试</span>\ndata<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'lisi'</span>\ndata<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">21</span>\n<span class=\"token comment\">// console.log('age', data.age)</span>\ndata<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token string\">'100'</span> <span class=\"token comment\">// 新增属性，监听不到 —— 所以有 Vue.set</span>\n<span class=\"token keyword\">delete</span> data<span class=\"token punctuation\">.</span>name <span class=\"token comment\">// 删除属性，监听不到 —— 所以有 Vue.delete</span>\ndata<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> <span class=\"token string\">'上海'</span> <span class=\"token comment\">// 深度监听</span>\n<span class=\"token comment\">// data.nums.push(4) // 监听数组</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d138c8969ead456691530a94a643a0ab.png\"/></p>\n<h3><a id=\"4vue_131\"></a>4、vue如何监听数组变化</h3>\n<p><strong>Object.defineProperty 缺点</strong></p>\n<ul><li>深度监听，需要递归到底，一次性计算量大</li><li>无法监听新增属性/删除属性（Vue.set、Vue.delete）</li><li>无法原生监听数组，需要特殊处理</li></ul>\n<p>示例：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 触发更新视图</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">updateView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'视图更新'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 重新定义数组原型</span>\n<span class=\"token keyword\">const</span> oldArrayProperty <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype\n\n<span class=\"token comment\">// 创建新对象，原型指向 oldArrayProperty，再扩展新的方法不会影响原型</span>\n<span class=\"token keyword\">const</span> arrProto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>oldArrayProperty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'push'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pop'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'shift'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'unshift'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'splice'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">methodName</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    arrProto<span class=\"token punctuation\">[</span>methodName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">updateView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 触发视图更新</span>\n        oldArrayProperty<span class=\"token punctuation\">[</span>methodName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 相当于 Array.prototype.push.call(this, ...arguments)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 重新定义属性，监听起来</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">defineReactive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 深度监听</span>\n    <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 核心 API</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> value\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>newValue <span class=\"token operator\">!==</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">// 深度监听</span>\n                <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\n                <span class=\"token comment\">// 设置新值</span>\n                <span class=\"token comment\">// 注意，value 一直在闭包中，此处设置完之后，再 get 时也是会获取最新的值</span>\n                value <span class=\"token operator\">=</span> newValue\n\n                <span class=\"token comment\">// 触发更新视图</span>\n                <span class=\"token function\">updateView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 监听对象属性</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> target <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">||</span> target <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 不是对象或数组</span>\n        <span class=\"token keyword\">return</span> target\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 如果是数组，就把 arrProto 赋值给数组的原型</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        target<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> arrProto\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 重新定义各个属性（for in 也可以遍历数组）</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">defineReactive</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 准备数据</span>\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'zhangsan'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">info</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span> <span class=\"token string\">'北京'</span> <span class=\"token comment\">// 需要深度监听</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">nums</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 监听数据</span>\n<span class=\"token function\">observer</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 测试 - 监听数组</span>\ndata<span class=\"token punctuation\">.</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 监听数组</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\15b6d6bf10a446c886690ab20663a136.png\"/></p>\n<h3><a id=\"5_DOM_217\"></a>5、虚拟 DOM</h3>\n<ul><li>vdom 是实现 vue 和 react 的重要基石</li><li>diff 算法是 vdom 中最核心、最关键的部分</li><li>DOM 操作非常耗费性能</li><li>以前用 jQuery，可以自行控制 DOM 操作的时机，手动调整</li><li>Vue 和 React 是数据驱动视图，使用 VDOM</li></ul>\n<h4><a id=\"1VDOM_225\"></a>（1）解决方案：VDOM</h4>\n<ul><li>有了一定复杂度，想减少计算次数比较难</li><li>能不能把计算，更多的转移为 JS 计算？因为 JS 执行速度很快</li><li>vdom - 用 JS 模拟 DOM 结构，计算出最小的变更，操作 DOM</li></ul>\n<h4><a id=\"2_JS__DOM__231\"></a>（2）用 JS 模拟 DOM 结构</h4>\n<p>示例：JS 模拟 DOM 结构</p>\n<p>HTML 代码</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"div1\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span>vdom<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>ul style<span class=\"token operator\">=</span><span class=\"token string\">\"font-size: 20px\"</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">&gt;</span>a<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>JS 代码</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">'container'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'div1'</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> <span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token string\">'vdom'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> <span class=\"token string\">'ul'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token literal-property property\">style</span><span class=\"token operator\">:</span> <span class=\"token string\">'font-size: 20px'</span><span class=\"token punctuation\">}</span>\n            <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token string\">'a'</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"3_snabbdom__vdom_270\"></a>（3）通过 snabbdom 学习 vdom</h4>\n<ul><li>简洁强大的 vdom 库，易学易用</li><li>Vue参考它实现的 vdom 和 diff</li><li><a href=\"https://github.com/snabbdom/snabbdom\">snabbdom参考连接</a></li></ul>\n<p>示例：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>button id<span class=\"token operator\">=</span><span class=\"token string\">\"btn-change\"</span><span class=\"token operator\">&gt;</span>change<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n\n<span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"https://cdn.bootcss.com/snabbdom/0.7.3/snabbdom.js\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"https://cdn.bootcss.com/snabbdom/0.7.3/snabbdom-class.js\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"https://cdn.bootcss.com/snabbdom/0.7.3/snabbdom-props.js\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"https://cdn.bootcss.com/snabbdom/0.7.3/snabbdom-style.js\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"https://cdn.bootcss.com/snabbdom/0.7.3/snabbdom-eventlisteners.js\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n\n\n<span class=\"token keyword\">const</span> snabbdom <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>snabbdom\n\n<span class=\"token comment\">// 定义 patch</span>\n<span class=\"token keyword\">const</span> patch <span class=\"token operator\">=</span> snabbdom<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    snabbdom_class<span class=\"token punctuation\">,</span>\n    snabbdom_props<span class=\"token punctuation\">,</span>\n    snabbdom_style<span class=\"token punctuation\">,</span>\n    snabbdom_eventlisteners\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 定义 h</span>\n<span class=\"token keyword\">const</span> h <span class=\"token operator\">=</span> snabbdom<span class=\"token punctuation\">.</span>h\n\n<span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'container'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 生成 vnode</span>\n<span class=\"token keyword\">const</span> vnode <span class=\"token operator\">=</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul#list'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li.item'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Item 1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li.item'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Item 2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">patch</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">)</span>\n\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'btn-change'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 生成 newVnode</span>\n    <span class=\"token keyword\">const</span> newVnode <span class=\"token operator\">=</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul#list'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li.item'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Item 1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li.item'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Item B'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li.item'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Item 3'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">patch</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">,</span> newVnode<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// vnode = newVnode // patch 之后，应该用新的覆盖现有的 vnode ，否则每次 change 都是新旧对比</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><mark>改变前：</mark></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\549e05db6d264f63add687bccd832b65.png\"/><br/> <mark>改变后：</mark><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e2ea7f9dfafd426e9bff7c56ac59ec1d.png\"/></p>\n<h4><a id=\"4vdom__328\"></a>（4）vdom 总结</h4>\n<ul><li>用 JS 模拟 DOM 结构（vnode）</li><li>新旧 vnode 对比，得出最小的更新范围，最后更新 DOM</li><li>数据驱动视图的模式下，有效控制 DOM 操作</li></ul>\n<p><code>不积跬步无以至千里 不积小流无以成江海</code></p>\n<p><mark>点个关注不迷路，持续更新中…</mark></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 1, "time": "2022-08-31 16:52:04", "summary": "系列文章目录内容参考链接基本使用的基本使用一文掌握最基础的知识点通信和高级特性组件间的通信及高级特性多种组件间的通信、自定义、、插槽高级特性的高级特性动态组件、异步加载、、、、原理原理理解模型、深度监"}