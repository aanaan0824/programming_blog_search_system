{"blogid": "126681794", "writerAge": "码龄2年", "writerBlogNum": "83", "writerCollect": "99", "writerComment": "28", "writerFan": "25", "writerGrade": "4级", "writerIntegral": "1181", "writerName": "666QAQ", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126681794.jpg", "writerRankTotal": "16978", "writerRankWeekly": "95944", "writerThumb": "44", "writerVisitNum": "53710", "blog_read_count": "188", "blog_time": "于 2022-09-03 20:02:04 发布", "blog_title": "《linux程序设计》第二章笔记", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h4><a id=\"_0\"></a>点(.)命令</h4>\n<p>下面的例子在命令行中使用点命令，但你完全可以把它用在一个脚本程序中。</p>\n<p>假设你有两个包含环境设置的文件，它们分别针对两个不同的开发环境。为了设置老的、经典命令的环境，你可以使用文件classic_set,它的内容如下：</p>\n<pre><code class=\"prism language-shell\"><span class=\"token shebang important\">#!/bin/sh</span>\n\n<span class=\"token assign-left variable\">version</span><span class=\"token operator\">=</span>classic\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/usr/local/old_bin/usr/bin:/bin:.\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PS1</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"classic&gt; \"</span>\n</code></pre>\n<p>对于新命令,使用文件latest_set:</p>\n<pre><code class=\"prism language-shell\"><span class=\"token shebang important\">#!/bin/sh</span>\n<span class=\"token assign-left variable\">version</span><span class=\"token operator\">=</span>latest\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/usr/local/new_bin:/usr/bin:/bin.\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PS1</span></span><span class=\"token operator\">=</span><span class=\"token string\">\" latest version&gt; \"</span>\n</code></pre>\n<p>可以通过将这些脚本程序和点灵敏结合来设置环境，就像下面的实例那样：</p>\n<pre><code class=\"prism language-shell\">$. ./classic_set\nclassic<span class=\"token operator\">&gt;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$version</span>\nclassic\nclassic<span class=\"token operator\">&gt;</span> <span class=\"token builtin class-name\">.</span> /latest_set\nlatest version<span class=\"token operator\">&gt;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$version</span>\nlatest\nlatest version<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><strong>这个脚本程序使用点命令执行，所以每个脚本程序都是在当前shell中执行。这使得脚本程序可以改变当前shell中的环境设置，即使脚本程序执行结束后，这些改变仍然有效。</strong></p>\n<h4><a id=\"eval_34\"></a>eval命令</h4>\n<p>eval命令允许你对参数进行求值。它是shell的内置命令，通常不会以单独命令的形式存在，使用X/Open规范中的一个小例子来演示它的用法：</p>\n<pre><code class=\"prism language-shell\"><span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span><span class=\"token number\">10</span>\n<span class=\"token assign-left variable\">x</span><span class=\"token operator\">=</span>foo\n<span class=\"token assign-left variable\">y</span><span class=\"token operator\">=</span><span class=\"token string\">'$'</span><span class=\"token variable\">$x</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$y</span>\n</code></pre>\n<p>输出$foo。<br/> 而</p>\n<pre><code class=\"prism language-shell\"><span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span><span class=\"token number\">10</span>\n<span class=\"token assign-left variable\">x</span><span class=\"token operator\">=</span>foo\n<span class=\"token builtin class-name\">eval</span> <span class=\"token assign-left variable\">y</span><span class=\"token operator\">=</span><span class=\"token string\">'$'</span><span class=\"token variable\">$x</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$y</span>\n</code></pre>\n<p>输出10，因此eval有点像一个额外的$，它给出一个变量的值的值。</p>\n<p>eval命令十分有用，它允许代码被随时生成和运行。虽然它的确增加了脚本调试的复杂度，但它可以让你完成使用其他方法难以或者根本无法完成的事情。</p>\n<h4><a id=\"exec_54\"></a>exec命令</h4>\n<p>exec命令有两种不同的用法。它的典型用法是将当前shell替换为一个不同的程序。</p>\n<p>例如：</p>\n<pre><code class=\"prism language-shell\"><span class=\"token builtin class-name\">exec</span> wall <span class=\"token string\">\"Hello\"</span>\n</code></pre>\n<p>脚本中这个命令会用wall命令替换当前的shelll。脚本程序中exec命令后面的代码都不会执行，因为执行这个脚本的shell已经不存在了。</p>\n<p>exec的第二种用法是修改当前文件描述符：</p>\n<pre><code class=\"prism language-shell\"><span class=\"token builtin class-name\">exec</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">3</span>&lt;</span> afile\n</code></pre>\n<p>这使得文件描述符3被打开以便从文件afile中读取数据。这种用法非常少见。</p>\n<h4><a id=\"trap_72\"></a>trap命令</h4>\n<p>此处略。</p>\n<h4><a id=\"dialog_76\"></a>dialog工具</h4>\n<p>严格来说dialog并不是shell的一部分，但是在通常情况下，它仅仅在shell程序设计中有用。</p>\n<p>如果你知道你的脚本程序只需要运行在linux控制台上，就可以使用dialog工具命令。</p>\n<p>这个命令使用文本模式的图形和色彩，提供了友好的面向图形的解决方案。</p>\n<blockquote>\n<p>一些linux发行版中默认没有dialog工具，例如ubuntu，可能必须添加公开维护的套件库来找到一个现成的版本。在其他linux发行版中，可能会找到一个已安装的替代工机具gdialog。它和dialog工具非常相似，但它依赖GNOME用户接口来显示其对话框。然而，你得到的回报是你获得了一个真正的图形化界面。一般来说，你可以将任何使用dialog工具的程序中对dialog工具的调用替换为对gdialog工具的调用，从而获得程序的一个图形化版本。</p>\n</blockquote>\n<p>简单示例：</p>\n<pre><code class=\"prism language-shell\">dialog --msgbox <span class=\"token string\">\"Hello world\"</span> <span class=\"token number\">9</span> <span class=\"token number\">18</span>\n</code></pre>\n<p>执行后会在屏幕显示一个图形化的消息框。</p>\n<p>下面对dialog的各种可能性进行详细的介绍：</p>\n<table><thead><tr><th>类型</th><th>用于创建类型的选项</th><th>含义</th></tr></thead><tbody><tr><td>复选框</td><td>–checklist</td><td>允许用户显示一个选项列表，每个选项都可以被单独选择</td></tr><tr><td>信息框</td><td>–infobox</td><td>在显示消息后，对话框将立刻返回，但不清除屏幕</td></tr><tr><td>输入框</td><td>–inputbox</td><td>允许用户输入文本</td></tr><tr><td>菜单框</td><td>–menu</td><td>允许用户选择列表中的一项</td></tr><tr><td>消息框</td><td>–msgbox</td><td>向用户显示一条消息，同时显示一个OK按钮，用户可以通过选择按钮继续操作</td></tr><tr><td>单选框</td><td>–radiolist</td><td>允许用户选择列表中的一个选项</td></tr><tr><td>文本框</td><td>–textbox</td><td>允许用户在带有滚动条的文本框中显示一个文件的内容</td></tr><tr><td>是/否框</td><td>–yesno</td><td>允许用户提问，用户可以选择yes或no</td></tr></tbody></table>\n<p>如果想获得任何类型的允许文本输入或进行选择的对话框的输出，你必须捕获标准错误流。通常是把它指向某个临时文件以便后续处理。</p>\n<p>要想获得Yes/No对话框的输出结果，只需查看它的退出码，返回0表示成功，1表示失败。</p>\n<p>所有的对话框类型都有各种各样的用于控制的参数（见下表），比如控制显示的对话框的大小和形状。我们首先列出每种类型所需的参数，然后在命令行上演示其中一部分参数的用法。最后，你将看到一个简单的将几种对话框结合起来的程序。</p>\n<table><thead><tr><th>对话框类型</th><th>参数</th></tr></thead><tbody><tr><td>–checklist</td><td>text height width list-height [tag text status]…</td></tr><tr><td>–infobox</td><td>text height width</td></tr><tr><td>–inputbox</td><td>text height width [initial string]</td></tr><tr><td>–menu</td><td>text height width menu-height [tag item] …</td></tr><tr><td>–msgbox</td><td>text height width</td></tr><tr><td>–radiolist</td><td>text height width list-height [tag text status]…</td></tr><tr><td>–textbox</td><td>filename height width</td></tr><tr><td>–yesno</td><td>text height width</td></tr></tbody></table>\n<p>除此之外，所有的对话框类型都有几个相同的参数选项。在此只介绍两个，–title和–clear。前者用于指定对话框的标题，后者用来完成清屏操作。</p>\n<h5><a id=\"_123\"></a>示例</h5>\n<pre><code class=\"prism language-shell\">dialog --title <span class=\"token string\">\"Check me\"</span> --checklist <span class=\"token string\">\"Pick Numbers\"</span> <span class=\"token number\">15</span> <span class=\"token number\">25</span> <span class=\"token number\">3</span> <span class=\"token number\">1</span> <span class=\"token string\">\"one\"</span> <span class=\"token string\">\"off\"</span> <span class=\"token number\">2</span> <span class=\"token string\">\"two\"</span> <span class=\"token string\">\"on\"</span> <span class=\"token number\">3</span> <span class=\"token string\">\"three\"</span> <span class=\"token string\">\"off\"</span>\n</code></pre>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-5c3gkQeU-1662206492329)(vx_images/71555790826696.png)]</p>\n<p>为了能够将这些放在一个程序中，你需要能够访问用户输入的结果。这一点很容易实现，对于文本输入，只需要重定向标准错误流或检查环境变量$?的内容，$?的值实际上就是前一个命令的退出状态。</p>\n<h5><a id=\"2_134\"></a>示例2</h5>\n<ol><li> <p>首先，这个程序通过一个简单的对话框来告诉用户发生的事情。你不需要获得返回值或任何用户的输入，所以这看起来非常简单和友好。</p> <pre><code class=\"prism language-shell\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token comment\"># ASK some questions and collect the answer</span>\ndialog --title <span class=\"token string\">\"Questionnaire\"</span> --msgbox <span class=\"token string\">\"Welcome to my simple survey\"</span> <span class=\"token number\">9</span> <span class=\"token number\">18</span>\n</code></pre> </li><li> <p>然后用一个简单的yes/no对话框来询问用户是否要继续操作。我们用环境变量$?来检查用户是否选择了yes（返回码是0）。如果用户不想继续操作，就使用一个简单的信息框显示信息，信息框在退出之前不需要用户的输入。</p> <pre><code class=\"prism language-shell\">dialog --title <span class=\"token string\">\"Confirm\"</span> --yesno <span class=\"token string\">\"Are you willing to take part?\"</span> <span class=\"token number\">9</span> <span class=\"token number\">18</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$?</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">then</span>\n    dialog --infobox <span class=\"token string\">\"Thank you anyway\"</span> <span class=\"token number\">5</span> <span class=\"token number\">20</span>\n    <span class=\"token function\">sleep</span> <span class=\"token number\">2</span>\n    dialog --clear\n    <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">fi</span>\n</code></pre> </li><li> <p>我们使用一个输入框来询问用户的姓名。重定向标准错误流2到临时文件_1.txt，然后再将它放到变量Q_NAME中：</p> <pre><code class=\"prism language-shell\">dialog --title <span class=\"token string\">\"Questionnaire\"</span> --inputbox <span class=\"token string\">\"Please enter your name\"</span> <span class=\"token number\">9</span> <span class=\"token number\">30</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span>_1.txt\n\n<span class=\"token assign-left variable\">Q_NAME</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> _1.txt<span class=\"token variable\">)</span></span>\n</code></pre> </li><li> <p>现在显示一个菜单，它有4个不同的选项。你再次重定向标准错误流并且将它装载到一个变量中：</p> <pre><code class=\"prism language-shell\">dialog --menu <span class=\"token string\">\"<span class=\"token variable\">$Q_NAME</span>, what music do you like best?\"</span> <span class=\"token number\">15</span> <span class=\"token number\">30</span> <span class=\"token number\">4</span> <span class=\"token number\">1</span> <span class=\"token string\">\"Classical\"</span> <span class=\"token number\">2</span> <span class=\"token string\">\"Jazz\"</span> <span class=\"token number\">3</span> <span class=\"token string\">\"Country\"</span> <span class=\"token number\">4</span> <span class=\"token string\">\"Other\"</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span>_1.txt\n<span class=\"token assign-left variable\">Q_MUSIC</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> _1.txt<span class=\"token variable\">)</span></span>\n</code></pre> </li><li> <p>用户选择的菜单项编号将被保存到临时文件_1.txt中，同时这个结果被放入变量Q_MUSIC中，以便你对结果进行测试。</p> <pre><code class=\"prism language-shell\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$Q_MUSIC</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">then</span>\n    dialog --title <span class=\"token string\">\"Likes Classical\"</span> --msgbox <span class=\"token string\">\"Good choice!\"</span> <span class=\"token number\">12</span> <span class=\"token number\">25</span>\n<span class=\"token keyword\">else</span>\n    dialog --title <span class=\"token string\">\"Doesn't like Classical\"</span> --msgbox <span class=\"token string\">\"Shame\"</span> <span class=\"token number\">12</span> <span class=\"token number\">25</span>\n<span class=\"token keyword\">fi</span>\n</code></pre> </li><li> <p>最后，清除对话框并退出程序</p> <pre><code class=\"prism language-shell\">dialog --clear\n<span class=\"token builtin class-name\">exit</span> <span class=\"token number\">0</span>\n</code></pre> </li></ol>\n<p>这里给出上面示例的完整代码，你可以选择dialog或者gdialog：</p>\n<pre><code class=\"prism language-shell\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token assign-left variable\">gui</span><span class=\"token operator\">=</span>dialog\n<span class=\"token comment\">#gui=gdialog</span>\n\n<span class=\"token comment\">#1.告诉用户发生的事情</span>\n<span class=\"token variable\">$gui</span> --title <span class=\"token string\">\"Questionnaire\"</span> --msgbox <span class=\"token string\">\"Welcome to my simple survey\"</span> <span class=\"token number\">9</span> <span class=\"token number\">18</span>\n\n<span class=\"token comment\">#2.询问是否继续操作</span>\n<span class=\"token variable\">$gui</span> --title <span class=\"token string\">\"Confirm\"</span> --yesno <span class=\"token string\">\"Are you willing to take part?\"</span> <span class=\"token number\">9</span> <span class=\"token number\">18</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$?</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">then</span>\n   <span class=\"token variable\">$gui</span> --infobox <span class=\"token string\">\"Thank you anyway\"</span> <span class=\"token number\">5</span> <span class=\"token number\">20</span>\n   <span class=\"token function\">sleep</span> <span class=\"token number\">2</span>\n   <span class=\"token variable\">$gui</span> --clear\n   <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\">#3.询问用户姓名</span>\n<span class=\"token variable\">$gui</span> --title <span class=\"token string\">\"Questionnaire\"</span> --inputbox <span class=\"token string\">\"Please enter your name\"</span> <span class=\"token number\">9</span> <span class=\"token number\">30</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span>_1.txt\n<span class=\"token assign-left variable\">Q_NAME</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> _1.txt<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\">#4.让用户选择最爱的音乐</span>\n<span class=\"token variable\">$gui</span> --menu <span class=\"token string\">\"<span class=\"token variable\">$Q_NAME</span>, what music do you like best?\"</span> <span class=\"token number\">15</span> <span class=\"token number\">30</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token number\">1</span> <span class=\"token string\">\"Classical\"</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token number\">2</span> <span class=\"token string\">\"Jazz\"</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token number\">3</span> <span class=\"token string\">\"Country\"</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token number\">4</span> <span class=\"token string\">\"Other\"</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span>_1.txt\n\n<span class=\"token assign-left variable\">Q_MUSIC</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> _1.txt<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\">#5.对选择的结果测试</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$Q_MUSIC</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">then</span>\n   <span class=\"token variable\">$gui</span> --title <span class=\"token string\">\"Likes Classical\"</span> --msgbox <span class=\"token string\">\"Good choice!\"</span> <span class=\"token number\">12</span> <span class=\"token number\">25</span>\n<span class=\"token keyword\">else</span>\n   <span class=\"token variable\">$gui</span> --title <span class=\"token string\">\"Doesn't like Classical\"</span> --msgbox <span class=\"token string\">\"Shame\"</span> <span class=\"token number\">12</span> <span class=\"token number\">25</span>\n<span class=\"token keyword\">fi</span>\n<span class=\"token variable\">$gui</span> --clear\n<span class=\"token function\">rm</span> -rf _1.txt\n<span class=\"token builtin class-name\">exit</span> <span class=\"token number\">0</span>\n</code></pre>\n<h4><a id=\"shell_222\"></a>shell实战综合应用</h4>\n<h5><a id=\"_224\"></a>需求</h5>\n<p>有许多CD唱片，你将设计和实现一个管理CD唱片的程序。</p>\n<h5><a id=\"_228\"></a>设计</h5>\n<p>由于所有需要存储的数据全部都是文本，而且假设唱片不是很多，因此没有必要使用一个复杂的数据库，使用一些简单的文本文件即可。将资料保存在文本文件中比较简单，而且如果你的需求发生了变化，操纵文本文件总是要比操纵其他类型的文件更加容易。</p>\n<p>如果对曲目数量没有限制，就有以下3中选择。</p>\n<ul><li>只使用一个文件，用一行来保存“标题”信息，再用n行来保存该CD唱片上的曲目信息。</li><li>将每张CD唱片的所有信息都放置在一行上，允许该行一直延续知道没有曲目信息需要保存为止。</li><li>把标题信息和曲目分开，用不同的文件来分别保存它们。</li></ul>\n<p>只有第三种做法能够让你灵活地修改文件的格式，如果今后你想要把数据库转换为关系数据库格式的话，你就需要修改文件格式，因此选择第三种方法。</p>\n<p>下一个决策时要在文件里放入哪些信息、</p>\n<p>我们决定对每张CD保存以下信息:</p>\n<ul><li>CD唱片里的目录编号</li><li>标题</li><li>曲目类型</li><li>作曲家</li></ul>\n<p>对曲目，只保存两条信息：</p>\n<ul><li>曲目编号</li><li>曲名</li></ul>\n<p>为了把这两个文件结合起来，必须把曲目信息和CD唱片上的其他信息关联起来。为此，你需要使用CD唱片的目录编号。因为它对每张CD唱片都是唯一的，所以它在标题文件中只出现一次，在曲目文件中对每首曲目只出现一次。</p>\n<p>让我们来看一个示例标题文件：</p>\n<table><thead><tr><th>目录编号</th><th>标题</th><th>曲目类型</th><th>作曲家</th></tr></thead><tbody><tr><td>CD123</td><td>Cool sax</td><td>爵士</td><td>Bix</td></tr><tr><td>CD214</td><td>Classic violin</td><td>古典</td><td>Bach</td></tr><tr><td>CD345</td><td>Hits99</td><td>流行</td><td>Various</td></tr></tbody></table>\n<p>它对应的曲目文件：</p>\n<table><thead><tr><th>目录编号</th><th>曲目编号</th><th>曲名</th></tr></thead><tbody><tr><td>CD123</td><td>1</td><td>Some jazz</td></tr><tr><td>CD123</td><td>2</td><td>More jazz</td></tr><tr><td>CD234</td><td>1</td><td>Sonata in D minor</td></tr><tr><td>CD345</td><td>1</td><td>Dizzy</td></tr></tbody></table>\n<p>这两个文件通过目录编号结合在一起。标题文件中的一个数据项一般都对应曲目文件中的多行数据。<br/> 你需要决定的最后一件事情是如何分隔数据项。在关系数据库里，长度固定的数据字段比较常见，但他并非总是最方便的。另一种常见的方法是使用逗号，这个例子就选择了这个方法（即用逗号分隔变量，或CSV文件）。</p>\n<p>这里先列出下面“实验”部分要用到的函数：</p>\n<pre><code class=\"prism language-shell\">get_return<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nget_confirm<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nset_menu_choice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ninsert_title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ninsert_track<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nadd_record_tracks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nadd_records<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfind_cd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nupdate_cd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncount_cds<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nremove_records<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nlist_tracks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ol><li> <p>首先要设置好脚本要使用的一些全局变量，包括标题文件、曲目文件和一个临时文件。我们还设置Ctrl+C组合键中断处理，以确保在用户在中断脚本程序时删除临时文件：</p> <pre><code class=\"prism language-shell\"><span class=\"token assign-left variable\">menu_choice</span><span class=\"token operator\">=</span><span class=\"token string\">\"\"</span>\n<span class=\"token assign-left variable\">current_cd</span><span class=\"token operator\">=</span><span class=\"token string\">\"\"</span>\n<span class=\"token assign-left variable\">title_file</span><span class=\"token operator\">=</span><span class=\"token string\">\"title.cdb\"</span>\n<span class=\"token assign-left variable\">tracks_file</span><span class=\"token operator\">=</span><span class=\"token string\">\"tracks.cdb\"</span>\n<span class=\"token assign-left variable\">temp_file</span><span class=\"token operator\">=</span>/tmp/cdb.<span class=\"token variable\">$$</span>\n<span class=\"token builtin class-name\">trap</span> <span class=\"token string\">'rm -f $temp_file'</span> EXIT\n</code></pre> </li><li> <p>现在开始定义函数。因为脚本程序是从文件的第一行开始执行，所以这样做可以确保在调用任何一个函数之前都能够找到它的定义。为了避免在几个地方反复编写同样代码，最开始的两个函数是简单的工具型函数。</p> </li></ol>\n<pre><code class=\"prism language-shell\"><span class=\"token function-name function\">get_return</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token builtin class-name\">echo</span> -e <span class=\"token string\">\"Press return <span class=\"token entity\" title=\"\\c\">\\c</span>\"</span>\n\t<span class=\"token builtin class-name\">read</span> x\n\t<span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function-name function\">get_confirm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token builtin class-name\">echo</span> -e <span class=\"token string\">\"Are you sure?\"</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token keyword\">do</span>\n\t\t<span class=\"token builtin class-name\">read</span> x\n\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"<span class=\"token variable\">$x</span>\"</span> <span class=\"token keyword\">in</span>\n\t\t\ty <span class=\"token operator\">|</span> <span class=\"token function\">yes</span> <span class=\"token operator\">|</span> Y <span class=\"token operator\">|</span> Yes <span class=\"token operator\">|</span> YES<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n\t\t\tn <span class=\"token operator\">|</span> no \t<span class=\"token operator\">|</span> N <span class=\"token operator\">|</span> No  <span class=\"token operator\">|</span> no<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token builtin class-name\">echo</span> \n\t\t\t\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Cancelled\"</span>\n\t\t\t\t<span class=\"token builtin class-name\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n\t\t\t*<span class=\"token punctuation\">)</span>\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Please enter yes or no\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">esac</span>\n\t<span class=\"token keyword\">done</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"3\"><li> <p>接下来是主菜单函数set_menu_choice。菜单的内容是动态变化的，当用户选择了某张CD唱片后，主菜单会多出几个选项。<br/> 注意：echo -e命令可能不能移植到某些shell’中。</p> <pre><code class=\"prism language-shell\"><span class=\"token function-name function\">set_menu_choice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">clear</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Options :-\"</span>\n    <span class=\"token builtin class-name\">echo</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"\ta) Add new CD\"</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"\tf) Find cd\"</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"\tc) Count the CDs and tracks in the catalog\"</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$cdcatnum</span>\"</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">then</span>\n\t    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"\tl) List tracks on <span class=\"token variable\">$cdtitle</span>\"</span>\n\t    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"\tr) Remove <span class=\"token variable\">$cdtitle</span>\"</span>\n\t    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"\tu) Update track information for <span class=\"token variable\">$cdtitle</span>\"</span>\n    <span class=\"token keyword\">fi</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"\tq) Quit\"</span>\n    <span class=\"token builtin class-name\">echo</span>\n    <span class=\"token builtin class-name\">echo</span> -e <span class=\"token string\">\"Please enter choice then press return <span class=\"token entity\" title=\"\\c\">\\c</span>\"</span>\n    <span class=\"token builtin class-name\">read</span> menu_choice\n    <span class=\"token builtin class-name\">return</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>接下来是两个很短小的函数insert_title和insert_track，它们用于向数据库文件里添加数据，虽然有的人不喜欢这种长度只有一行的函数，但它们有助于让其他函数的含义更加清晰易懂。<br/> 紧跟着是一个比较大的函数add_record_trakcs，他会用到上述两个短小的函数。这两个函数使用模式匹配来确保用户未输入逗号（因为我们把逗号用作数据字段之间的分隔符），使用算术操作在用户输入曲目时递增当前曲目的编号：</p> </li><li> <p>add_records函数用于输入新CD唱片的标题信息:</p> </li></ol>\n<pre><code class=\"prism language-shell\"><span class=\"token function-name function\">add_records</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">#Prompt for the initial information</span>\n\t<span class=\"token builtin class-name\">echo</span> -e <span class=\"token string\">\"Enter catalog name <span class=\"token entity\" title=\"\\c\">\\c</span>\"</span>\n\t<span class=\"token builtin class-name\">read</span> tmp\n\t<span class=\"token assign-left variable\">cdcatnum</span><span class=\"token operator\">=</span><span class=\"token variable\">${tmp<span class=\"token operator\">%%</span><span class=\"token operator\">,</span>*}</span>\n\n\t<span class=\"token builtin class-name\">echo</span> -e <span class=\"token string\">\"Enter title <span class=\"token entity\" title=\"\\c\">\\c</span>\"</span>\n\t<span class=\"token builtin class-name\">read</span> tmp\n\t<span class=\"token assign-left variable\">cdtitle</span><span class=\"token operator\">=</span><span class=\"token variable\">${tmp<span class=\"token operator\">%%</span><span class=\"token operator\">,</span>*}</span>\n\n\t<span class=\"token builtin class-name\">echo</span> -e <span class=\"token string\">\"Enter type <span class=\"token entity\" title=\"\\c\">\\c</span>\"</span>\n\t<span class=\"token builtin class-name\">read</span> tmp\n\t<span class=\"token assign-left variable\">cdtype</span><span class=\"token operator\">=</span><span class=\"token variable\">${tmp<span class=\"token operator\">%%</span><span class=\"token operator\">,</span>*}</span>\n\n\t<span class=\"token builtin class-name\">echo</span> -e <span class=\"token string\">\"Enter artist/composer<span class=\"token entity\" title=\"\\c\">\\c</span>\"</span>\n\t<span class=\"token builtin class-name\">read</span> tmp\n\t<span class=\"token assign-left variable\">cdac</span><span class=\"token operator\">=</span><span class=\"token variable\">${tmp<span class=\"token operator\">%%</span><span class=\"token operator\">,</span>*}</span>\n\n\t<span class=\"token comment\">#Check that they want to enter the information</span>\n\n\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"About to add new entry\"</span>\n\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$cdcatnum</span> then append it to the title file\"</span>\n\n\t<span class=\"token comment\">#if confirmed then append it to the titles file</span>\n\t<span class=\"token keyword\">if</span> get_confirm<span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n\t\tinsert_title <span class=\"token variable\">$cdcatnum</span>, <span class=\"token variable\">$cdtitle</span>, <span class=\"token variable\">$cdtype</span>, <span class=\"token variable\">$cdac</span>\n\t\tadd_record_tracks\n\t<span class=\"token keyword\">else</span>\n\t\tremove_records\n\t<span class=\"token keyword\">fi</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"6\"><li>find_cd函数的作用是使用grep命令在唱片标题文件中查找CD唱片的有关资料。你需要知道查询字符串在标题文件里出现的次数，但grep命令的返回值只会告诉我们匹配了0次或者多次。我们将grep命令的输出保存到一个临时文件中，文件中的每行对应一次匹配，然后再统计该文件的行数。</li></ol>\n<ul><li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> 待办</li></ul>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-03 20:02:04", "summary": "点命令下面的例子在命令行中使用点命令，但你完全可以把它用在一个脚本程序中。假设你有两个包含环境设置的文件，它们分别针对两个不同的开发环境。为了设置老的、经典命令的环境，你可以使用文件它的内容如下：对于"}