{"blogid": "118748912", "writerAge": "码龄3年", "writerBlogNum": "32", "writerCollect": "158", "writerComment": "12", "writerFan": "12", "writerGrade": "3级", "writerIntegral": "422", "writerName": "努力的胡十一", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_118748912.jpg", "writerRankTotal": "55312", "writerRankWeekly": "367433", "writerThumb": "76", "writerVisitNum": "52309", "blog_read_count": "34903", "blog_time": "于 2021-07-15 06:08:40 发布", "blog_title": "@Configuration详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"Configuration_0\"></a>@Configuration详解，功能：将想要的组件添加到容器中</h1>\n<h2><a id=\"_2\"></a>首先，需要准备三个文件：</h2>\n<p>ps:完整代码片在文章最后，建议看完教程。<br/> 1.主程序类：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210715055232209.png\"/><br/> 2.宠物类<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210715055238782.png\"/></p>\n<p>3.用户类<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210715055245371.png\"/></p>\n<p>对比以前原生spring添加组件的区别<br/> 如果是以前的原生spring，想要将组件添加到容器中<br/> 1.需要在resources目录下创建一个xml配置文件<br/> 2.创建bean标签<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2021071505525410.png\"/></p>\n<p>现在的Spring Boot已经不需要向以前一样了，有一个注解@Configuration（翻译：配置）可以供使用<br/> 1.创建一个类。<br/> 2.使用注解@Configuration，告诉Spring Boot这是一个配置类。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210715055305304.png\"/></p>\n<p>这个时候在类里边不能写bean标签了需要使用@bean注解，想要构建出user和pet对象需要自己将它创造出来。<br/> @bean：给容器中添加组件，以方法名作为组件的id。返回类型为组件类型，返回的值，就是组件在容器中的实例<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2021071505531170.png\"/></p>\n<p>怎么验证创建这俩组件成功了呢？<br/> 首先来到主程序<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210715055318166.png\"/></p>\n<p>运行主程序就能查到刚刚创建好的组件：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210715055326513.png\"/></p>\n<p>当然，如果不喜欢这个原本的名字是可以换的<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210715055416715.png\"/></p>\n<p>给容器中注册的组件默认是单实例的。<br/> 就是说无论我们从容器中获取多少次，它们都是一样的<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210715055424167.png\"/></p>\n<p>可以看到，返回的都是true，也就说明都是相等的 。<br/> 所以：配置类里面使用@Bean标注在方法上给容器注册组件，默认是单实例的。<br/> 同时还有一点，被@Configuration标注的类本身也是一个组件<br/> 可以从容器中取这个类来验证一下。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210715055436781.png\"/></p>\n<p>同时，在Spring Boot 5.2之后的@Configuration注解多了一个属性proxyBeanMethods，默认为true（翻译：代理bean的方法）<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210715055444621.png\"/></p>\n<p>顾名思义，既然默认为true了，也就是默认代理。<br/> 代理就会保持组件的单实例。<br/> 也就是说，虽然写的Myconfig是在容器中注册组件用的，但是在注册组件之前会在容器中查找有没有该组件。如果有，则取该组件用于保证单实例，如果没有再注册一个新的组件。<br/> 这里可以调用两次注册组件的方法来确认是否使用了代理：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210715055453772.png\"/></p>\n<p>虽然是调用了两次，可它们两个是相等的，也就是说使用了代理，取的都是同一个值。<br/> 如果将@Configuration(proxyBeanMethods = true)改为false<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210715055459890.png\"/></p>\n<p>再次运行就会发现这次取的不是代理对象，也就是每一个方法都新注册了一个组件，所以两个不相等。<br/> 因为改为false后久不会再保存代理对象了。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210715055513731.png\"/></p>\n<p>proxyBeanMethods：代理bean的方法<br/> 有两种模式：<br/> 1.Full:(proxyBeanMethods = true) //全模式<br/> 使用代理模式，保证组件的单实例，启动不如false快，但是重复利用率高，适用于会重复使用组件的场景。<br/> 2.lite:(proxyBeanMethods = false) //轻量级<br/> 不是用代理模式，不用保证组件的单实例，启动最快。单每次调用组件都会重新创建一个新的组件，组件可重复使用率低。适用于需要组件但不会重复使用的场景<br/> 总结：用于解决组件依赖<br/> 可有验证方法：<br/> 1.在User类加入Pet类，同时增加get和set方法<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210715055525892.png\"/></p>\n<p>2.在Myconfig类使用user01调用pet01<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210715055536161.png\"/></p>\n<p>3.在主程序中获取user01和pet01组件，并将user01组件中的Pet类和组件pet01组件进行对比。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210715055542821.png\"/></p>\n<p>4.对比结果：<br/> 当proxyBeanMethods = true时，两者是相等的，代表使用了代理模式没用重新创建pet01组件<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210715055607877.png\"/></p>\n<p>当proxyBeanMethods = false时,两者对比不相等，表示重新创建了组件<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210715055619753.png\"/></p>\n<p>最终程序代码片：<br/> 1.主程序类：</p>\n<pre><code class=\"prism language-java\">\n<span class=\"token comment\">/**\n * 这是一个主程序类\n * @SpringBootApplication：表明这是一个SpringBoot应用\n */</span>\n<span class=\"token annotation punctuation\">@SpringBootApplication</span><span class=\"token punctuation\">(</span>scanBasePackages<span class=\"token operator\">=</span><span class=\"token string\">\"com.shiyi\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainApplication</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//1、返回我们ioc容器</span>\n        <span class=\"token class-name\">ConfigurableApplicationContext</span> run <span class=\"token operator\">=</span>\n                <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MainApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//2、查看容器里面的组件</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> names <span class=\"token operator\">=</span> run<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinitionNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name <span class=\"token operator\">:</span> names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//打印出所有的组件名称</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">//3、从容器中获取组件</span>\n<span class=\"token comment\">//        Pet pet01 = run.getBean(\"德玛西亚~\",Pet.class);</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//        Pet pet02 = run.getBean(\"德玛西亚~\",Pet.class);</span>\n\n<span class=\"token comment\">//        System.out.println(\"是否相等\"+(pet01 == pet02));</span>\n<span class=\"token comment\">//        System.out.println(\"是否相同\"+pet01.equals(pet02));</span>\n\n        <span class=\"token class-name\">Myconfig</span> bean <span class=\"token operator\">=</span> run<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Myconfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"配置类---\"</span><span class=\"token operator\">+</span>bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//进度08：15</span>\n\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> bean<span class=\"token punctuation\">.</span><span class=\"token function\">user01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">User</span> user1 <span class=\"token operator\">=</span> bean<span class=\"token punctuation\">.</span><span class=\"token function\">user01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"验证是否使用代理:\"</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">==</span> user1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">User</span> user01 <span class=\"token operator\">=</span> run<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user01\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Pet</span> pet011 <span class=\"token operator\">=</span> run<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pet01\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Pet</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户的宠物：\"</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>user01<span class=\"token punctuation\">.</span><span class=\"token function\">getPet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> pet011<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>2.配置类</p>\n<pre><code class=\"prism language-java\">\n<span class=\"token comment\">/**\n * 1、配置类里面使用@Bean标注在方法上给容器注册组件，默认也是单实例的\n * 2、配置类本身也是组件\n * 3、proxyBeanMethods：代理bean的方法\n *      Full:(proxyBeanMethods = true)  //全模式\n *      lite:(proxyBeanMethods = false) //轻量级\n *      用于解决组件依赖\n */</span>\n<span class=\"token annotation punctuation\">@Configuration</span><span class=\"token punctuation\">(</span>proxyBeanMethods <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//告诉springboot这是一个配置类 == 配置文件</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Myconfig</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token comment\">//给容器中添加组件，以方法名作为组件的id。</span>\n    <span class=\"token comment\">// 返回类型为组件类型，返回的值，就是组件在容器中的实例</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">user01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">User</span> wangcai <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wangcai\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//user组件依赖了pet组件</span>\n        wangcai<span class=\"token punctuation\">.</span><span class=\"token function\">setPet</span><span class=\"token punctuation\">(</span><span class=\"token function\">pet01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> wangcai<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Pet</span> <span class=\"token function\">pet01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"旺财\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>3.User类</p>\n<pre><code class=\"prism language-java\">\n<span class=\"token comment\">/**\n * 用户\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Pet</span> pet<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Pet</span> <span class=\"token function\">getPet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> pet<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setPet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Pet</span> pet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pet <span class=\"token operator\">=</span> pet<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"User{\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'\\''</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\", age=\"</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span>\n                <span class=\"token string\">'}'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>4.Pet类</p>\n<pre><code class=\"prism language-java\">\n<span class=\"token comment\">/**\n * 宠物\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Pet</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Pet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Pet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Pet{\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'\\''</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">'}'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2021-07-15 06:08:40", "summary": "详解，功能：将想要的组件添加到容器中首先，需要准备三个文件：完整代码片在文章最后，建议看完教程。主程序类：在这里插入图片描述宠物类在这里插入图片描述用户类在这里插入图片描述对比以前原生添加组件的区别如"}