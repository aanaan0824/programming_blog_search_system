{"blogid": "123881984", "writerAge": "码龄2年", "writerBlogNum": "29", "writerCollect": "39", "writerComment": "1", "writerFan": "9", "writerGrade": "2级", "writerIntegral": "309", "writerName": "努力学编程呀(๑•ี_เ•ี๑)", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123881984.jpg", "writerRankTotal": "72525", "writerRankWeekly": "120257", "writerThumb": "15", "writerVisitNum": "22312", "blog_read_count": "5013", "blog_time": "于 2022-03-31 20:31:06 发布", "blog_title": "axios 拦截器", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"_0\"></a>学习目标：</h1>\n<p><code>axios 拦截器</code></p>\n<h1><a id=\"_6\"></a>学习内容：</h1>\n<p><code>axios 拦截器</code></p>\n<hr/>\n<h1><a id=\"_14\"></a>学习笔记：</h1>\n<p><code>axios 拦截器</code></p>\n<p><strong>一、什么是axios拦截器、为什么要使用axios拦截器？</strong></p>\n<p>在vue项目中，我们通常使用axios与后台进行数据交互，axios是一款基于promise封装的库，可以运行在浏览器端和node环境中。</p>\n<p><strong>axios特性：</strong><br/> 1、拦截请求和响应<br/> 2、取消请求<br/> 3、转换json<br/> 4、客户端防御XSRF等。</p>\n<p><strong>使用拦截器的原因：</strong></p>\n<p>若出现请求数多的情况下，我们将会用到 axios 的一个API：拦截器。<br/> 页面发送http请求，很多情况我们要对请求和其响应进行特定的处理，<br/> 如果每个请求都附带后端返回的token，我们需要在拿到response之前loading动画的展示等。</p>\n<p><strong>拦截器的分类：</strong></p>\n<p>拦截器分为 <strong>请求（request）拦截器</strong>和 <strong>响应（response）拦截器</strong>。</p>\n<p><strong>拦截器的使用：</strong><br/> 在请求或响应被 then 或 catch 处理前拦截它们。</p>\n<p><strong>（1）、请求拦截器</strong></p>\n<pre><code>// 添加请求拦截器\naxios.interceptors.request.use(\n    function (config) {\n        do......\n        // 在发送请求之前进行操作\n        return config;\n    },\n    function (error) {\n        do......\n        // 对请求错误进行操作\n        return Promise.reject(error);\n    }\n);\n</code></pre>\n<p>举例：</p>\n<pre><code>// http request 拦截器\naxios.interceptors.request.use(\n    config =&gt; {\n        if (store.state.token) { \n         // 判断是否存在 token, 如果存在的话, 则每个 http header 都加上 token\n            config.headers.Authorization = `token ${store.state.token}`;\n        }\n        return config;\n    },\n    err =&gt; {\n        return Promise.reject(err);\n    });\n</code></pre>\n<p><strong>（2）、响应拦截器</strong></p>\n<pre><code>// 添加响应拦截器\naxios.interceptors.response.use(\n    function (response) {\n        // 对响应数据进行操作\n        return response;\n    },\n    function (error) {\n        // 对响应错误进行操作\n        return Promise.reject(error);\n    }\n);\n</code></pre>\n<p>举例：</p>\n<pre><code>// http response 拦截器\naxios.interceptors.response.use(\n    response =&gt; {\n        return response;\n    },\n    error =&gt; {\n        if (error.response) {\n            switch (error.response.status) {\n                case 401:\n                    // 返回 401 清除 token 信息并跳转到登录页面\n                    store.commit(types.LOGOUT);\n                    router.replace({\n                        path: 'login',\n                        query: {redirect: router.currentRoute.fullPath}\n                    })\n            }\n        }\n        return Promise.reject(error.response.data)  \n         // 返回接口返回的错误信息\n    });\n</code></pre>\n<p><strong>说明：</strong><br/> <em>如果我们使用中需要统一处理所有 http 请求和响应, 就需要使用 axios 拦截器。<br/> 通过配置 http response inteceptor, 如果后端接口返回 401 Unauthorized(说明该用户未授权), 用户需重新登录。</em></p>\n<p><strong>移除拦截器：</strong></p>\n<pre><code>const myInterceptor = axios.interceptors.request.use(function () {\n do ...... \n//具体的操作\n});\naxios.interceptors.request.eject(myInterceptor);\n\n\n为自定义 axios 实例添加拦截器：\n\nconst instance = axios.create();\ninstance.interceptors.request.use(function () { \n    do ...... \n   //具体的操作\n});\n</code></pre>\n<p><strong>如何在项目中调用 axios 拦截器</strong></p>\n<p><strong>1、将axios封装好<br/> 2、在项目中直接调用即可<br/> （注：接口统一写在api文件夹中，为了我们后期使用及维护方便，书写是我们最好将不同模块或组件的请求分开写到不同的文件里）。（如果你的业务非常复杂，建议把</strong></p>\n<p>举例：</p>\n<pre><code>//   示例 js 文件  -----   api_exm.js\n\nimport request from '@/utils/request'\n\nexport function userSearch(name) {\n  return request({\n    url: '/sys/user',\n    method: 'get',\n    params: { name }\n  })\n}\n</code></pre>\n<p>然后在具体的组件中进行调用即可</p>\n<pre><code>import { userSearch} from '@/api/api_exm'     //现在文件中导入需要使用的 js 文件\nexport default {\n  data() {\n    return {\n        name: '测试aaa'\n    }\n  },\n  methods:{\n      getUserInfo () {    //在方法中直接调用封装好的 axios 拦截器\n          userSearch(this.name).then(res =&gt; {\n           do......\n              //可对 res.data 进行操作、处理或者渲染\n          })\n      }\n  },\n  mounted() {\n      this.getUserInfo ();\n  }\n}\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-31 20:31:06", "summary": "学习目标：拦截器学习内容：拦截器学习笔记：拦截器一、什么是拦截器、为什么要使用拦截器？在项目中，我们通常使用与后台进行数据交互，是一款基于封装的库，可以运行在浏览器端和环境中。特性：、拦截请求和响应、"}