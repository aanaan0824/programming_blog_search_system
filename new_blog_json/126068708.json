{"blogid": "126068708", "writerAge": "码龄2年", "writerBlogNum": "112", "writerCollect": "2414", "writerComment": "2963", "writerFan": "8286", "writerGrade": "6级", "writerIntegral": "6466", "writerName": "卡卡西最近怎么样", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126068708.jpg", "writerRankTotal": "2334", "writerRankWeekly": "170", "writerThumb": "3141", "writerVisitNum": "123375", "blog_read_count": "1078", "blog_time": "已于 2022-08-05 16:54:44 修改", "blog_title": "【JavaScript 进阶教程】数组新增遍历方法的说明与使用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h3 id=\"%E2%80%8B%E7%BC%96%E8%BE%91\"><img alt=\"\" height=\"289\" src=\"..\\..\\static\\image\\95ce72d70b31417b9a02eb7128627b79.png\" width=\"1200\"/></h3>\n<blockquote>\n<p><span style=\"color:#ed7976;\"><strong>文章已收录专栏：</strong></span><a class=\"link-info\" href=\"https://mp.csdn.net/mp_blog/manage/column/columnManage/11850300\" title=\"JavaScript 进阶教程\">JavaScript 进阶教程</a></p>\n<p><span style=\"color:#ed7976;\"><strong>作者：</strong></span><a class=\"link-info\" href=\"https://blog.csdn.net/weixin_52212950?spm=1011.2421.3001.5343\" title=\"卡卡西最近怎么样\">卡卡西最近怎么样</a></p>\n</blockquote>\n<blockquote>\n<p><strong><span style=\"color:#0d0016;\">文章导读：</span></strong></p>\n<p><span style=\"color:#333333;\">      欢迎来到 JavaScript 进阶的学习，ES5 对 JS 的数组，字符串等内置对象的方法均有扩充。这篇文章我们要掌握的是新增的几个 Array 内置对象的常用迭代（遍历）方法，分别是 forEach()，filter()，some()，every()等，这些新方法可以让我们更方便地操作数组。</span></p>\n<p><img alt=\"\" height=\"640\" src=\"..\\..\\static\\image\\09479e561d70470e82336ebb4aa7f8e9.jpeg\" width=\"1028\"/></p>\n</blockquote>\n<h2 id=\"main-toc\"><strong>文章目录：</strong></h2>\n<p id=\"%E4%B8%80%EF%BC%9A%E7%B1%BB%E7%9A%84%E6%9C%AC%E8%B4%A8%E6%98%AF%E4%BB%80%E4%B9%88-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%EF%BC%9A%E7%B1%BB%E7%9A%84%E6%9C%AC%E8%B4%A8%E6%98%AF%E4%BB%80%E4%B9%88\">一：类的本质是什么</a></p>\n<p id=\"%C2%A0%E4%BA%8C%EF%BC%9AforEach()%20%E6%96%B9%E6%B3%95%C2%A0-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0%E4%BA%8C%EF%BC%9AforEach%28%29%20%E6%96%B9%E6%B3%95%C2%A0\"> 二：forEach() 方法 </a></p>\n<p id=\"forEach()%20%E7%9A%84%E6%A0%BC%E5%BC%8F%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#forEach%28%29%20%E7%9A%84%E6%A0%BC%E5%BC%8F%EF%BC%9A\">forEach() 的格式</a></p>\n<p id=\"forEach()%C2%A0%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#forEach%28%29%C2%A0%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8%EF%BC%9A\">forEach() 方法使用</a></p>\n<p id=\"%C2%A0%E4%B8%89%EF%BC%9Afilter()%20%E6%96%B9%E6%B3%95%C2%A0-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0%E4%B8%89%EF%BC%9Afilter%28%29%20%E6%96%B9%E6%B3%95%C2%A0\"> 三：filter() 方法 </a></p>\n<p id=\"filter()%20%E7%9A%84%E6%A0%BC%E5%BC%8F%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#filter%28%29%20%E7%9A%84%E6%A0%BC%E5%BC%8F%EF%BC%9A\">filter() 的格式</a></p>\n<p id=\"filter()%20%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#filter%28%29%20%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8%EF%BC%9A\">filter() 方法使用</a></p>\n<p id=\"%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E5%A6%82%E4%B8%8B%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E5%A6%82%E4%B8%8B%EF%BC%9A\">执行过程</a></p>\n<p id=\"%C2%A0%E5%9B%9B%EF%BC%9Asome()%20%E6%96%B9%E6%B3%95%C2%A0-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0%E5%9B%9B%EF%BC%9Asome%28%29%20%E6%96%B9%E6%B3%95%C2%A0\"> 四：some() 方法 </a></p>\n<p id=\"some()%20%E7%9A%84%E6%A0%BC%E5%BC%8F%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#some%28%29%20%E7%9A%84%E6%A0%BC%E5%BC%8F%EF%BC%9A\">some() 的格式</a></p>\n<p id=\"some()%20%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#some%28%29%20%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8%EF%BC%9A\">some() 方法使用</a></p>\n<p id=\"%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E5%A6%82%E4%B8%8B%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E5%A6%82%E4%B8%8B%EF%BC%9A\">执行过程</a></p>\n<p id=\"%C2%A0%E4%BA%94%EF%BC%9Aevery()%20%E6%96%B9%E6%B3%95%C2%A0-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0%E4%BA%94%EF%BC%9Aevery%28%29%20%E6%96%B9%E6%B3%95%C2%A0\"> 五：every() 方法 </a></p>\n<p id=\"every()%20%E7%9A%84%E6%A0%BC%E5%BC%8F%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#every%28%29%20%E7%9A%84%E6%A0%BC%E5%BC%8F%EF%BC%9A\">every() 的格式</a></p>\n<p id=\"every()%20%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#every%28%29%20%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8%EF%BC%9A\">every() 方法使用：</a></p>\n<p id=\"%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E5%A6%82%E4%B8%8B%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E5%A6%82%E4%B8%8B%EF%BC%9A\">执行过程</a></p>\n<hr/>\n<h1 id=\"%E4%B8%80%EF%BC%9A%E7%B1%BB%E7%9A%84%E6%9C%AC%E8%B4%A8%E6%98%AF%E4%BB%80%E4%B9%88\"><span style=\"color:#4da8ee;\">一：类的本质是什么</span></h1>\n<blockquote>\n<p><span style=\"color:#333333;\">       类的本质是什么？首先我们来看一下下面这个代码的输出结果：</span></p>\n<pre><code class=\"language-javascript\">     &lt;script&gt;\n        class Animal{}\n        console.log(typeof Animal);\n     &lt;/script&gt;</code></pre>\n<p><img alt=\"\" height=\"94\" src=\"..\\..\\static\\image\\b9e5110766ce4ed18ed6aa20955ee826.png\" width=\"658\"/></p>\n<p><span style=\"color:#333333;\">     </span></p>\n<p><span style=\"color:#333333;\">我们惊讶的发现，类的本质竟然是</span><span style=\"color:#be191c;\"><strong>函数</strong></span><span style=\"color:#333333;\">，或者我们可以这样理解，类就是构造函数的高端写法罢了，那它既然是个函数，是不是也拥有构造函数的一系列特性呢？例如有没有原型对象？类创建的实例化对象有没有__proto__属性呢？</span><span style=\"color:#be191c;\"><strong>我们来证实一下：</strong></span></p>\n<pre><code class=\"language-javascript\">     &lt;script&gt;\n        class Animal{\n            constructor(name,age){\n              this.name=name;\n              this.age=age;\n            }\n            eat(){\n               console.log('我在吃食物');\n            }\n        }\n        var dog=new Animal('旺财',5)\n        console.log(Animal.prototype);\n        console.log('--------------------------------------');\n        console.log(dog.__proto__);\n        console.log('--------------------------------------');\n        console.log(Animal.prototype===dog.__proto__);\n     &lt;/script&gt;</code></pre>\n<p><img alt=\"\" height=\"383\" src=\"..\\..\\static\\image\\8073f65b05a54266bca3eeab87a0ffcc.png\" width=\"1115\"/></p>\n<p>    </p>\n<p><span style=\"color:#333333;\">这个输出结果和我们了解到的构造函数的属性完全一样，已经可以证明，ES5中构造函数有的属性，ES6的类中也有，可以说，类就是构造函数的</span><span style=\"color:#be191c;\"><strong>语法糖</strong></span></p>\n<p><span style=\"color:#be191c;\"><strong>  </strong></span></p>\n<p><span style=\"color:#be191c;\"><strong>【语法糖】</strong>语法糖就是一种实现功能相同，但是更便捷的写法，我们学过的自增（i++）就是一种语法糖，它是i=i+1的语法糖</span></p>\n<hr/>\n<p><span style=\"color:#333333;\"><strong>类的本质总结：</strong></span></p>\n<ul><li><span style=\"color:#1c7331;\">类的本质是函数</span></li><li><span style=\"color:#1c7331;\">类内的方法都在类的原型对象prototype属性中</span></li><li><span style=\"color:#1c7331;\">类的实例化对象也有个__proto__属性指向类的实例化对象</span></li><li><span style=\"color:#1c7331;\">类就是构造函数的语法糖</span></li></ul>\n</blockquote>\n<hr/>\n<h1 id=\"%C2%A0%E4%BA%8C%EF%BC%9AforEach()%20%E6%96%B9%E6%B3%95%C2%A0\"> <span style=\"color:#4da8ee;\">二：forEach() 方法 </span></h1>\n<blockquote>\n<p><span style=\"color:#333333;\">forEach()可用于数组的遍历，其参数是一个<strong>回调函数</strong></span></p>\n<hr/>\n<h3 id=\"forEach()%20%E7%9A%84%E6%A0%BC%E5%BC%8F%EF%BC%9A\"><span style=\"color:#be191c;\">forEach() 的<strong>格式：</strong></span></h3>\n<p><span style=\"color:#1c7331;\"><strong>array.forEach( function( </strong></span><span style=\"color:#ed7976;\"><strong>currentValue </strong></span><span style=\"color:#1c7331;\"><strong>, </strong></span><span style=\"color:#ed7976;\"><strong>index </strong></span><span style=\"color:#1c7331;\"><strong>, </strong></span><span style=\"color:#ed7976;\"><strong>arr </strong></span><span style=\"color:#1c7331;\"><strong>){ ...... } )</strong></span></p>\n<table align=\"center\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:580px;\"><tbody><tr><td style=\"text-align:center;width:83px;\"><span style=\"color:#333333;\"><strong>参数</strong></span></td><td style=\"text-align:center;width:178px;\"><span style=\"color:#ed7976;\"><strong>currentValue</strong></span></td><td style=\"text-align:center;width:135px;\"><span style=\"color:#ed7976;\"><strong>index</strong></span></td><td style=\"text-align:center;width:183px;\"><span style=\"color:#ed7976;\"><strong>arr</strong></span></td></tr><tr><td style=\"text-align:center;width:83px;\"><span style=\"color:#333333;\"><strong>参数含义</strong></span></td><td style=\"text-align:center;width:178px;\">数组当前的值，写成 value 即可</td><td style=\"text-align:center;width:135px;\">数组当前值的索引</td><td style=\"text-align:center;width:183px;\">数组本身</td></tr></tbody></table>\n<hr/>\n<h3 id=\"forEach()%C2%A0%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8%EF%BC%9A\"><span style=\"color:#be191c;\">forEach() <strong>方法使用：</strong></span></h3>\n<pre><code class=\"language-javascript\">     &lt;script&gt;\n          var arr1=[1,2,3,4,5,6]\n          arr1.forEach(function(value,index,arr){\n            console.log('当前值为：'+ value);\n            console.log('当前值的索引为'+ index);\n            console.log('数组本身为'+ arr);\n            console.log('------------------------------------');\n          })\n     &lt;/script&gt;</code></pre>\n<p><img alt=\"\" height=\"643\" src=\"..\\..\\static\\image\\05ced4c548ea4c2684824f0e76370181.png\" width=\"1200\"/></p>\n<hr/>\n<p>这就达到了遍历数组的作用，并且可以轻松拿到当前索引</p>\n<p><span style=\"color:#be191c;\"><strong>注意：参数不需要的话也不可省略（或者从后往前省略，因为顺序是固定的，第一位的就是当前值，第二位的就是当前值的索引）</strong></span></p>\n<p><img alt=\"\" height=\"282\" src=\"..\\..\\static\\image\\6bcc1668b0b44da5adf931b2c29fd7e2.jpeg\" width=\"661\"/></p>\n</blockquote>\n<hr/>\n<h1 id=\"%C2%A0%E4%B8%89%EF%BC%9Afilter()%20%E6%96%B9%E6%B3%95%C2%A0\"><span style=\"color:#4da8ee;\"> 三：filter() 方法 </span></h1>\n<blockquote>\n<p><span style=\"color:#333333;\">filter() 用于数组元素的筛选，返回符合条件的数组元素，返回的是一个新的数组，需要一个新定义的空数组去接收，其参数也是一个<strong>回调函数</strong></span></p>\n<hr/>\n<h3 id=\"filter()%20%E7%9A%84%E6%A0%BC%E5%BC%8F%EF%BC%9A\"><span style=\"color:#be191c;\"><strong>filter() 的格式：</strong></span></h3>\n<p><span style=\"color:#1c7331;\"><strong>var newarray=array.filter( function( </strong></span><span style=\"color:#ed7976;\"><strong>currentValue </strong></span><span style=\"color:#1c7331;\"><strong>, </strong></span><span style=\"color:#ed7976;\"><strong>index </strong></span><span style=\"color:#1c7331;\"><strong>, </strong></span><span style=\"color:#ed7976;\"><strong>arr </strong></span><span style=\"color:#1c7331;\"><strong>){ ...... } )</strong></span></p>\n<table align=\"center\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:580px;\"><tbody><tr><td style=\"text-align:center;width:83px;\"><span style=\"color:#333333;\"><strong>参数</strong></span></td><td style=\"text-align:center;width:178px;\"><span style=\"color:#ed7976;\"><strong>currentValue</strong></span></td><td style=\"text-align:center;width:135px;\"><span style=\"color:#ed7976;\"><strong>index</strong></span></td><td style=\"text-align:center;width:183px;\"><span style=\"color:#ed7976;\"><strong>arr</strong></span></td></tr><tr><td style=\"text-align:center;width:83px;\"><span style=\"color:#333333;\"><strong>参数含义</strong></span></td><td style=\"text-align:center;width:178px;\">数组当前的值，写成 value 即可</td><td style=\"text-align:center;width:135px;\">数组当前值的索引</td><td style=\"text-align:center;width:183px;\">数组本身</td></tr></tbody></table>\n<hr/>\n<h3 id=\"filter()%20%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8%EF%BC%9A\"><span style=\"color:#be191c;\"><strong>filter() 方法使用：</strong></span></h3>\n<pre><code class=\"language-javascript\">     &lt;script&gt;\n          var arr1=[1,2,3,4,5,6]\n          var newarr=arr1.filter(function(value,index,arr){\n            return value%2==0;\n          })\n          console.log(newarr);\n     &lt;/script&gt;</code></pre>\n<p><img alt=\"\" height=\"133\" src=\"..\\..\\static\\image\\94d0b0cefa0242748f756386a6f01d2b.png\" width=\"927\"/></p>\n<hr/>\n<h3 id=\"%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E5%A6%82%E4%B8%8B%EF%BC%9A\"><span style=\"color:#333333;\"><strong>执行过程如下：</strong></span></h3>\n<ul><li><span style=\"color:#1c7331;\">首先拿来数组第一个元素，不符合条件，继续下一个元素</span></li><li><span style=\"color:#1c7331;\">再拿来第二个元素，符合条件，放进新数组 newarr</span></li><li><span style=\"color:#1c7331;\">再拿来第三个，不符合条件，继续下一个元素</span></li><li><span style=\"color:#1c7331;\">再拿来第四个，符合条件，继续放进 newarr......以此类推</span></li></ul>\n<hr/>\n<p><span style=\"color:#be191c;\"><strong>注意：需要一个新定义的数组去接收筛选过的数组，参数不需要的话也不可省略（或者从后往前省略，因为顺序是固定的，第一位的就是当前值，第二位的就是当前值的索引）</strong></span></p>\n</blockquote>\n<hr/>\n<h1 id=\"%C2%A0%E5%9B%9B%EF%BC%9Asome()%20%E6%96%B9%E6%B3%95%C2%A0\"><span style=\"color:#4da8ee;\"> 四：some() 方法 </span></h1>\n<blockquote>\n<p><span style=\"color:#333333;\">some() 用于判断数组中是否有满足要求的元素，返回结果是一个布尔值，存在则返回 true，不存在则返回 false，需要参数去接收返回的布尔值</span></p>\n<hr/>\n<h3 id=\"some()%20%E7%9A%84%E6%A0%BC%E5%BC%8F%EF%BC%9A\"><span style=\"color:#be191c;\"><strong>some() 的格式：</strong></span></h3>\n<p><span style=\"color:#1c7331;\"><strong>var flag=array.some( function( </strong></span><span style=\"color:#ed7976;\"><strong>currentValue </strong></span><span style=\"color:#1c7331;\"><strong>, </strong></span><span style=\"color:#ed7976;\"><strong>index </strong></span><span style=\"color:#1c7331;\"><strong>, </strong></span><span style=\"color:#ed7976;\"><strong>arr </strong></span><span style=\"color:#1c7331;\"><strong>){ ...... } )</strong></span></p>\n<table align=\"center\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:580px;\"><tbody><tr><td style=\"text-align:center;width:83px;\"><span style=\"color:#333333;\"><strong>参数</strong></span></td><td style=\"text-align:center;width:178px;\"><span style=\"color:#ed7976;\"><strong>currentValue</strong></span></td><td style=\"text-align:center;width:135px;\"><span style=\"color:#ed7976;\"><strong>index</strong></span></td><td style=\"text-align:center;width:183px;\"><span style=\"color:#ed7976;\"><strong>arr</strong></span></td></tr><tr><td style=\"text-align:center;width:83px;\"><span style=\"color:#333333;\"><strong>参数含义</strong></span></td><td style=\"text-align:center;width:178px;\">数组当前的值，写成 value 即可</td><td style=\"text-align:center;width:135px;\">数组当前值的索引</td><td style=\"text-align:center;width:183px;\">数组本身</td></tr></tbody></table>\n<hr/>\n<h3 id=\"some()%20%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8%EF%BC%9A\"><span style=\"color:#be191c;\"><strong>some() 方法使用：</strong></span></h3>\n<p><strong>返回 true 的情况：</strong></p>\n<pre><code class=\"language-javascript\">     &lt;script&gt;\n          var arr1=[1,2,3,4,5,6]\n          var flag=arr1.some(function(value,index,arr){\n            return value==6;\n          })\n          console.log(flag);\n     &lt;/script&gt;</code></pre>\n<p></p>\n<img alt=\"\" height=\"114\" src=\"..\\..\\static\\image\\844fac465bb14831bc5d29dbc83bea1a.png\" width=\"784\"/>\n<strong>返回 false 的情况：</strong>\n<pre><code class=\"language-javascript\">     &lt;script&gt;\n          var arr1=[1,2,3,4,5,6]\n          var flag=arr1.some(function(value,index,arr){\n            return value==7;\n          })\n          console.log(flag);\n     &lt;/script&gt;</code></pre>\n<img alt=\"\" height=\"126\" src=\"..\\..\\static\\image\\7b3058e7e9cd4991b116a3cc954097eb.png\" width=\"722\"/>\n<hr/>\n<h3><span style=\"color:#be191c;\">执行过程如下：</span></h3>\n<p><span style=\"color:#333333;\"><strong>第一个返回true执行过程：</strong></span></p>\n<ul><li><span style=\"color:#1c7331;\">首先拿来数组第一个元素判断，不符合条件，继续下一个元素</span></li><li><span style=\"color:#1c7331;\">下一个元素也不符合条件，再继续下一个元素</span></li><li><span style=\"color:#1c7331;\">下一个元素符合条件，返回 true，不在继续往下执行判断</span></li></ul>\n<hr/>\n<p><span style=\"color:#333333;\"><strong>第二个返回false执行过程：</strong></span></p>\n<p></p>\n<ul><li><span style=\"color:#1c7331;\">首先拿来数组第一个元素判断，不符合条件，继续下一个元素</span></li><li><span style=\"color:#1c7331;\">下一个元素也不符合条件，再继续下一个元素</span></li><li><span style=\"color:#1c7331;\">下一个元素也不符合条件，再继续下一个元素</span></li><li><span style=\"color:#1c7331;\">......以此类推，知道最后一个也不符合条件，返回 false</span></li></ul>\n<hr/>\n<p><span style=\"color:#be191c;\"><strong>注意：需要定义一个参数去接受布尔值。并且在判断过程中一旦有一个符合条件，就不再往下判断了，直接返回 true，但是全不满足才返回 false。参数不需要的话也不可省略（或者从后往前省略，因为顺序是固定的，第一位的就是当前值，第二位的就是当前值的索引）</strong></span></p>\n<p><img alt=\"\" height=\"503\" src=\"..\\..\\static\\image\\2e60bd562c624618a81a89358c83438e.jpeg\" width=\"1200\"/></p>\n</blockquote>\n<hr/>\n<h1 id=\"%C2%A0%E4%BA%94%EF%BC%9Aevery()%20%E6%96%B9%E6%B3%95%C2%A0\"><span style=\"color:#4da8ee;\"> 五：every() 方法 </span></h1>\n<blockquote>\n<p><span style=\"color:#333333;\">every() 用于判断数组中元素是否全部满足要求，返回结果是一个布尔值，全部满足则返回 true，有一个不满足则返回 false，需要参数去接收返回的布尔值</span></p>\n<hr/>\n<h3 id=\"every()%20%E7%9A%84%E6%A0%BC%E5%BC%8F%EF%BC%9A\"><span style=\"color:#be191c;\"><strong>every() 的格式：</strong></span></h3>\n<p><span style=\"color:#1c7331;\"><strong>var flag=array.every( function( </strong></span><span style=\"color:#ed7976;\"><strong>currentValue </strong></span><span style=\"color:#1c7331;\"><strong>, </strong></span><span style=\"color:#ed7976;\"><strong>index </strong></span><span style=\"color:#1c7331;\"><strong>, </strong></span><span style=\"color:#ed7976;\"><strong>arr </strong></span><span style=\"color:#1c7331;\"><strong>){ ...... } )</strong></span></p>\n<table align=\"center\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:580px;\"><tbody><tr><td style=\"text-align:center;width:83px;\"><span style=\"color:#333333;\"><strong>参数</strong></span></td><td style=\"text-align:center;width:178px;\"><span style=\"color:#ed7976;\"><strong>currentValue</strong></span></td><td style=\"text-align:center;width:135px;\"><span style=\"color:#ed7976;\"><strong>index</strong></span></td><td style=\"text-align:center;width:183px;\"><span style=\"color:#ed7976;\"><strong>arr</strong></span></td></tr><tr><td style=\"text-align:center;width:83px;\"><span style=\"color:#333333;\"><strong>参数含义</strong></span></td><td style=\"text-align:center;width:178px;\">数组当前的值，写成 value 即可</td><td style=\"text-align:center;width:135px;\">数组当前值的索引</td><td style=\"text-align:center;width:183px;\">数组本身</td></tr></tbody></table>\n<hr/>\n<h3 id=\"every()%20%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8%EF%BC%9A\"><span style=\"color:#be191c;\"><strong>every() 方法使用：</strong></span></h3>\n<p><strong>返回 true 的情况：</strong></p>\n<pre><code class=\"language-javascript\">     &lt;script&gt;\n          var arr1=[1,2,3,4,5,6]\n          var flag=arr1.every(function(value,index,arr){\n            return value&gt;0;\n          })\n          console.log(flag);\n     &lt;/script&gt;</code></pre>\n<p></p>\n<img alt=\"\" height=\"114\" src=\"..\\..\\static\\image\\844fac465bb14831bc5d29dbc83bea1a.png\" width=\"784\"/>\n<strong>返回 false 的情况：</strong>\n<pre><code class=\"language-javascript\">     &lt;script&gt;\n          var arr1=[1,2,-3,4,5,6]\n          var flag=arr1.every(function(value,index,arr){\n            return value&gt;0;\n          })\n          console.log(flag);\n     &lt;/script&gt;</code></pre>\n<img alt=\"\" height=\"126\" src=\"..\\..\\static\\image\\7b3058e7e9cd4991b116a3cc954097eb.png\" width=\"722\"/>\n<hr/>\n<h3><span style=\"color:#be191c;\">执行过程如下：</span></h3>\n<p><span style=\"color:#333333;\"><strong>第一个返回true执行过程：</strong></span></p>\n<ul><li><span style=\"color:#1c7331;\">首先拿来数组第一个元素判断，符合条件，继续下一个元素</span></li><li><span style=\"color:#1c7331;\">下一个元素也符合条件，再继续下一个元素</span></li><li><span style=\"color:#1c7331;\">下一个元素也符合条件，再继续......以此类推，直到最后一个元素也满足条件，则返回 true</span></li></ul>\n<hr/>\n<p><span style=\"color:#333333;\"><strong>第二个返回false执行过程：</strong></span></p>\n<ul><li><span style=\"color:#1c7331;\">首先拿来数组第一个元素判断，符合条件，继续下一个元素</span></li><li><span style=\"color:#1c7331;\">下一个元素也符合条件，再继续下一个元素</span></li><li><span style=\"color:#1c7331;\">下一个元素不符合条件了，返回 false，不再往下继续判断</span></li></ul>\n<hr/>\n<p><span style=\"color:#be191c;\"><strong>注意：需要定义一个参数去接受布尔值。并且在判断过程中一旦有一个不符合条件，就不再往下判断了，直接返回 false，但是全满足条件才返回 true。参数不需要的话也不可省略（或者从后往前省略，因为顺序是固定的，第一位的就是当前值，第二位的就是当前值的索引）</strong></span></p>\n</blockquote>\n<blockquote>\n<h3 id=\"%C2%A0%E5%88%9B%E4%BD%9C%E4%B8%8D%E6%98%93%EF%BC%8C%E7%BB%99%E4%B8%AA%E6%94%AF%E6%8C%81%E5%90%A7%EF%BC%81%EF%BC%81%EF%BC%81\"><span style=\"color:#fe2c24;\"> 创作不易，给个支持吧！！！</span></h3>\n<p><img alt=\"\" height=\"640\" src=\"..\\..\\static\\image\\09479e561d70470e82336ebb4aa7f8e9.jpeg\" width=\"1028\"/></p>\n</blockquote>\n<p></p>\n</div>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-08-05 16:54:44", "summary": "文章已收录专栏：进阶教程进阶教程作者：卡卡西最近怎么样卡卡西最近怎么样文章导读：欢迎来到进阶的学习，对的数组，字符串等内置对象的方法均有扩充。这篇文章我们要掌握的是新增的几个内置对象的常用迭代遍历方法"}