{"blogid": "120035438", "writerAge": "码龄5年", "writerBlogNum": "220", "writerCollect": "39144", "writerComment": "9342", "writerFan": "160305", "writerGrade": "10级", "writerIntegral": "147635", "writerName": "不吃西红柿丶", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_120035438.jpg", "writerRankTotal": "7", "writerRankWeekly": "228", "writerThumb": "18686", "writerVisitNum": "3164094", "blog_read_count": "136488", "blog_time": "于 2021-10-24 11:37:14 发布", "blog_title": "❤️爆肝3万字，最硬核丨Mysql 知识体系、命令全集 【建议收藏 】❤️", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p><strong>🍅 作者主页：<a href=\"https://notomato.blog.csdn.net/\" title=\"不吃西红柿\">不吃西红柿</a> </strong></p>\n<p> </p>\n<p><strong>🍅 简介：</strong>CSDN博客专家🏆、信息技术智库公号作者✌  简历模板、PPT模板、学习资料、面试题库、技术互助【<strong>关注我，都给你】</strong></p>\n<p><strong>🍅 </strong>欢迎<strong>点赞 👍 收藏 ⭐留言 </strong>📝   </p>\n<p><strong>🍅 耗时1年整理，硬核文章目录：<a href=\"https://blog.csdn.net/weixin_39032019/category_11048805.html\" title=\"https://t.1yb.co/zHJ\">https://t.1yb.co/zHJ</a></strong></p>\n<hr/>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"1.MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D-toc\" style=\"margin-left:0px;\"><a href=\"#1.MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D\" title=\"1.MySQL数据库的介绍\">1.MySQL数据库的介绍</a></p>\n<p id=\"%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E5%BA%93-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E5%BA%93\" title=\"什么是数据库\">什么是数据库</a></p>\n<p id=\"%E4%BD%9C%E7%94%A8-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BD%9C%E7%94%A8\" title=\"作用\">作用</a></p>\n<p id=\"%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93\" title=\"常见的数据库\">常见的数据库</a></p>\n<p id=\"%E8%AE%A4%E8%AF%86mysql%E6%95%B0%E6%8D%AE%E5%BA%93-toc\" style=\"margin-left:40px;\"><a href=\"#%E8%AE%A4%E8%AF%86mysql%E6%95%B0%E6%8D%AE%E5%BA%93\" title=\"认识mysql数据库\">认识mysql数据库</a></p>\n<p id=\"2.%E5%AE%89%E8%A3%85MySQL-toc\" style=\"margin-left:0px;\"><a href=\"#2.%E5%AE%89%E8%A3%85MySQL\" title=\"2.安装MySQL\">2.安装MySQL</a></p>\n<p id=\"Mac%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%AE%89%E8%A3%85MySQL-toc\" style=\"margin-left:40px;\"><a href=\"#Mac%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%AE%89%E8%A3%85MySQL\" title=\"Mac系统中安装MySQL\">Mac系统中安装MySQL</a></p>\n<p style=\"margin-left:40px;\"><a href=\"#%E4%BD%BF%E2%BD%A4%E7%94%A8Mac%E4%B8%AD%E7%9A%84Homebrew%E8%BF%9B%E2%BE%8F%E8%A1%8C%E8%A1%8Cmysql%E7%9A%84%E5%AE%89%E8%A3%85\" title=\"使⽤用Mac中的Homebrew进⾏行行mysql的安装\">使⽤用Mac中的Homebrew进⾏行行mysql的安装</a></p>\n<p id=\"Windows%E5%AE%89%E8%A3%85MySQL5.7.17-toc\" style=\"margin-left:40px;\"><a href=\"#Windows%E5%AE%89%E8%A3%85MySQL5.7.17\" title=\"Windows安装MySQL5.7.17\">Windows安装MySQL5.7.17</a></p>\n<p id=\"%C2%A03.%E8%AE%A4%E8%AF%86%E5%92%8C%E6%93%8D%E4%BD%9C%E4%B8%80%E4%B8%8Bmysql%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A03.%E8%AE%A4%E8%AF%86%E5%92%8C%E6%93%8D%E4%BD%9C%E4%B8%80%E4%B8%8Bmysql%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4\" title=\" 3.认识和操作一下mysql的基本命令\"> 3.认识和操作一下mysql的基本命令</a></p>\n<p id=\"%E7%99%BB%E5%BD%95mysql%2C%E5%9C%A8%E7%BB%88%E7%AB%AF%E8%BE%93%E5%85%A5%E4%BB%A5%E4%B8%8B%E5%91%BD%E4%BB%A4%EF%BC%8C%E8%BF%9B%E8%A1%8C%E7%99%BB%E5%BD%95-toc\" style=\"margin-left:40px;\"><a href=\"#%E7%99%BB%E5%BD%95mysql%2C%E5%9C%A8%E7%BB%88%E7%AB%AF%E8%BE%93%E5%85%A5%E4%BB%A5%E4%B8%8B%E5%91%BD%E4%BB%A4%EF%BC%8C%E8%BF%9B%E8%A1%8C%E7%99%BB%E5%BD%95\" title=\"登录mysql,在终端输入以下命令，进行登录\">登录mysql,在终端输入以下命令，进行登录</a></p>\n<p id=\"%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8Dmysql%E4%B8%AD%E6%89%80%E6%9C%89%E7%9A%84%E5%BA%93-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8Dmysql%E4%B8%AD%E6%89%80%E6%9C%89%E7%9A%84%E5%BA%93\" title=\"查看当前mysql中所有的库\">查看当前mysql中所有的库</a></p>\n<p id=\"%E9%80%89%E6%8B%A9%E9%9C%80%E8%A6%81%E6%93%8D%E4%BD%9C%E7%9A%84%E5%BA%93%EF%BC%8C%E6%89%93%E5%BC%80%E5%BA%93-toc\" style=\"margin-left:40px;\"><a href=\"#%E9%80%89%E6%8B%A9%E9%9C%80%E8%A6%81%E6%93%8D%E4%BD%9C%E7%9A%84%E5%BA%93%EF%BC%8C%E6%89%93%E5%BC%80%E5%BA%93\" title=\"选择需要操作的库，打开库\">选择需要操作的库，打开库</a></p>\n<p id=\"%E6%9F%A5%E7%9C%8B%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%9F%A5%E7%9C%8B%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE\" title=\"查看表中的数据\">查看表中的数据</a></p>\n<p id=\"%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%85%B3%E7%B3%BB-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%85%B3%E7%B3%BB\" title=\"库和表的概念与关系\">库和表的概念与关系</a></p>\n<p id=\"%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%BA%93%3F-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%BA%93%3F\" title=\"如何创建自己的库?\">如何创建自己的库?</a></p>\n<p id=\"%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E5%BA%93-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E5%BA%93\" title=\"查看所有库\">查看所有库</a></p>\n<p id=\"%E5%88%9B%E5%BB%BA%E8%A1%A8%E7%9A%84%E8%AF%AD%E6%B3%95-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%88%9B%E5%BB%BA%E8%A1%A8%E7%9A%84%E8%AF%AD%E6%B3%95\" title=\"创建表的语法\">创建表的语法</a></p>\n<p id=\"%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE\" title=\"添加数据\">添加数据</a></p>\n<p id=\"4.MySQL%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:0px;\"><a href=\"#4.MySQL%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C\" title=\"4.MySQL基础操作\">4.MySQL基础操作</a></p>\n<p id=\"%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%3A-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%3A\" title=\"使用方法:\">使用方法:</a></p>\n<p id=\"SQL%20(%20Structure%20query%20language%20)%20%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80-toc\" style=\"margin-left:80px;\"><a href=\"#SQL%20%28%20Structure%20query%20language%20%29%20%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80\" title=\"SQL ( Structure query language ) 结构化查询语言\">SQL ( Structure query language ) 结构化查询语言</a></p>\n<p id=\"SQL%E8%AF%AD%E5%8F%A5%E4%B8%AD%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE-toc\" style=\"margin-left:80px;\"><a href=\"#SQL%E8%AF%AD%E5%8F%A5%E4%B8%AD%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE\" title=\"SQL语句中的快捷键\">SQL语句中的快捷键</a></p>\n<p id=\"1.%E9%80%9A%E8%BF%87%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BF%9E%E6%8E%A5MySQL-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E9%80%9A%E8%BF%87%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BF%9E%E6%8E%A5MySQL\" title=\"1.通过命令行连接MySQL\">1.通过命令行连接MySQL</a></p>\n<p id=\"2.%20%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:40px;\"><a href=\"#2.%20%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C\" title=\"2. 数据库操作\">2. 数据库操作</a></p>\n<p id=\"3.%20%E6%95%B0%E6%8D%AE%E8%A1%A8%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:40px;\"><a href=\"#3.%20%E6%95%B0%E6%8D%AE%E8%A1%A8%E6%93%8D%E4%BD%9C\" title=\"3. 数据表操作\">3. 数据表操作</a></p>\n<p id=\"4.%20%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%20%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5-toc\" style=\"margin-left:40px;\"><a href=\"#4.%20%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%20%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5\" title=\"4. 数据操作 增删改查\">4. 数据操作 增删改查</a></p>\n<p id=\"%E5%9B%9B.%20%E9%80%80%E5%87%BAMySQL-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%9B%9B.%20%E9%80%80%E5%87%BAMySQL\" title=\"退出MySQL\">退出MySQL</a></p>\n<p id=\"5.MySQL%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-toc\" style=\"margin-left:0px;\"><a href=\"#5.MySQL%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\" title=\"5.MySQL的数据类型\">5.MySQL的数据类型</a></p>\n<p id=\"%E4%B8%80.MySQL%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%B8%80.MySQL%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\" title=\"一.MySQL的数据类型\">一.MySQL的数据类型</a></p>\n<p id=\"1%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-toc\" style=\"margin-left:80px;\"><a href=\"#1%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\" title=\"1、字符串数据类型\">1、字符串数据类型</a></p>\n<p id=\"2%E3%80%81%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B\" title=\"        \">        </a> <a href=\"#2%E3%80%81%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B\" title=\"2、数值类型\">2、数值类型</a></p>\n<p id=\"3%E3%80%81%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E7%B1%BB%E5%9E%8B-toc\" style=\"margin-left:80px;\"><a href=\"#3%E3%80%81%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E7%B1%BB%E5%9E%8B\" title=\"3、日期和时间类型\">3、日期和时间类型</a></p>\n<p id=\"4%E3%80%81%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-toc\" style=\"margin-left:80px;\"><a href=\"#4%E3%80%81%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\" title=\"4、二进制数据类型\">4、二进制数据类型</a></p>\n<p id=\"%E4%BA%8C%E3%80%81%E8%A1%A8%E7%9A%84%E5%AD%97%E6%AE%B5%E7%BA%A6%E6%9D%9F-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BA%8C%E3%80%81%E8%A1%A8%E7%9A%84%E5%AD%97%E6%AE%B5%E7%BA%A6%E6%9D%9F\" title=\"二、表的字段约束\">二、表的字段约束</a></p>\n<p id=\"%E4%B8%89%E3%80%81MySQL%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%B8%89%E3%80%81MySQL%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6\" title=\"三、MySQL的运算符\">三、MySQL的运算符</a></p>\n<p id=\"%E5%9B%9B%E3%80%81%E4%B8%BB%E9%94%AE-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%9B%9B%E3%80%81%E4%B8%BB%E9%94%AE\" title=\"四、主键\">四、主键</a></p>\n<p id=\"6.MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E6%95%B0%E6%8D%AE%E8%A1%A8%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:0px;\"><a href=\"#6.MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E6%95%B0%E6%8D%AE%E8%A1%A8%E6%93%8D%E4%BD%9C\" title=\"6.MySQL数据库与数据表操作\">6.MySQL数据库与数据表操作</a></p>\n<p id=\"%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%93%8D%E4%BD%9C\" title=\"数据库的操作\">数据库的操作</a></p>\n<p id=\"1.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%88%9B%E5%BB%BA-toc\" style=\"margin-left:80px;\"><a href=\"#1.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%88%9B%E5%BB%BA\" title=\"1.数据库的创建\">1.数据库的创建</a></p>\n<p id=\"2.%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E5%BA%93-toc\" style=\"margin-left:80px;\"><a href=\"#2.%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E5%BA%93\" title=\"2.查看所有库\">2.查看所有库</a></p>\n<p id=\"3.%E6%89%93%E5%BC%80%E5%BA%93%2F%E8%BF%9B%E5%85%A5%E5%BA%93%2F%E9%80%89%E6%8B%A9%E5%BA%93-toc\" style=\"margin-left:80px;\"><a href=\"#3.%E6%89%93%E5%BC%80%E5%BA%93%2F%E8%BF%9B%E5%85%A5%E5%BA%93%2F%E9%80%89%E6%8B%A9%E5%BA%93\" title=\"3.打开库/进入库/选择库\">3.打开库/进入库/选择库</a></p>\n<p id=\"4.%E5%88%A0%E9%99%A4%E5%BA%93-toc\" style=\"margin-left:80px;\"><a href=\"#4.%E5%88%A0%E9%99%A4%E5%BA%93\" title=\"4.删除库\">4.删除库</a></p>\n<p id=\"%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%9A%84%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%9A%84%E6%93%8D%E4%BD%9C\" title=\"数据表的操作\">数据表的操作</a></p>\n<p id=\"1.%E5%88%9B%E5%BB%BA%E8%A1%A8-toc\" style=\"margin-left:80px;\"><a href=\"#1.%E5%88%9B%E5%BB%BA%E8%A1%A8\" title=\"1.创建表\">1.创建表</a></p>\n<p id=\"2.%E4%BF%AE%E6%94%B9%E8%A1%A8%E7%BB%93%E6%9E%84-toc\" style=\"margin-left:80px;\"><a href=\"#2.%E4%BF%AE%E6%94%B9%E8%A1%A8%E7%BB%93%E6%9E%84\" title=\"2.修改表结构\">2.修改表结构</a></p>\n<p id=\"3.%E4%BF%AE%E6%94%B9%E8%A1%A8%E5%90%8D-toc\" style=\"margin-left:80px;\"><a href=\"#3.%E4%BF%AE%E6%94%B9%E8%A1%A8%E5%90%8D\" title=\"3.修改表名\">3.修改表名</a></p>\n<p id=\"4.%E6%9B%B4%E6%94%B9%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%87%AA%E5%A2%9E%E7%9A%84%E5%80%BC-toc\" style=\"margin-left:80px;\"><a href=\"#4.%E6%9B%B4%E6%94%B9%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%87%AA%E5%A2%9E%E7%9A%84%E5%80%BC\" title=\"4.更改表中的自增的值\">4.更改表中的自增的值</a></p>\n<p id=\"5.%E4%BF%AE%E6%94%B9%E8%A1%A8%E5%BC%95%E6%93%8E-toc\" style=\"margin-left:80px;\"><a href=\"#5.%E4%BF%AE%E6%94%B9%E8%A1%A8%E5%BC%95%E6%93%8E\" title=\"5.修改表引擎\">5.修改表引擎</a></p>\n<p id=\"6.%E5%88%A0%E9%99%A4%E8%A1%A8-toc\" style=\"margin-left:80px;\"><a href=\"#6.%E5%88%A0%E9%99%A4%E8%A1%A8\" title=\"6.删除表\">6.删除表</a></p>\n<p id=\"%C2%A07.Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E5%BC%95%E6%93%8E%E4%B8%8E%E5%AD%97%E7%AC%A6%E9%9B%86-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A07.Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E5%BC%95%E6%93%8E%E4%B8%8E%E5%AD%97%E7%AC%A6%E9%9B%86\" title=\" 7.Mysql数据库表引擎与字符集\"> 7.Mysql数据库表引擎与字符集</a></p>\n<p id=\"1.%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A4%84%E7%90%86%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AF%B7%E6%B1%82-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A4%84%E7%90%86%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AF%B7%E6%B1%82\" title=\"1.服务器处理客户端请求\">1.服务器处理客户端请求</a></p>\n<p id=\"2.%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E\" title=\"2.存储引擎\">2.存储引擎</a></p>\n<p id=\"3.MyISAM%E5%92%8CInnoDB%E8%A1%A8%E5%BC%95%E6%93%8E%E7%9A%84%E5%8C%BA%E5%88%AB-toc\" style=\"margin-left:40px;\"><a href=\"#3.MyISAM%E5%92%8CInnoDB%E8%A1%A8%E5%BC%95%E6%93%8E%E7%9A%84%E5%8C%BA%E5%88%AB\" title=\"3.MyISAM和InnoDB表引擎的区别\">3.MyISAM和InnoDB表引擎的区别</a></p>\n<p id=\"1)%C2%A0%E4%BA%8B%E5%8A%A1%E6%94%AF%E6%8C%81-toc\" style=\"margin-left:80px;\"><a href=\"#1%29%C2%A0%E4%BA%8B%E5%8A%A1%E6%94%AF%E6%8C%81\" title=\"1) 事务支持\">1) 事务支持</a></p>\n<p id=\"2)%C2%A0%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84-toc\" style=\"margin-left:80px;\"><a href=\"#2%29%C2%A0%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84\" title=\"2) 存储结构\">2) 存储结构</a></p>\n<p id=\"3)%C2%A0%E8%A1%A8%E9%94%81%E5%B7%AE%E5%BC%82-toc\" style=\"margin-left:80px;\"><a href=\"#3%29%C2%A0%E8%A1%A8%E9%94%81%E5%B7%AE%E5%BC%82\" title=\"3) 表锁差异\">3) 表锁差异</a></p>\n<p id=\"4)%C2%A0%E8%A1%A8%E4%B8%BB%E9%94%AE-toc\" style=\"margin-left:80px;\"><a href=\"#4%29%C2%A0%E8%A1%A8%E4%B8%BB%E9%94%AE\" title=\"4) 表主键\">4) 表主键</a></p>\n<p id=\"5)%C2%A0%E8%A1%A8%E7%9A%84%E5%85%B7%E4%BD%93%E8%A1%8C%E6%95%B0-toc\" style=\"margin-left:80px;\"><a href=\"#5%29%C2%A0%E8%A1%A8%E7%9A%84%E5%85%B7%E4%BD%93%E8%A1%8C%E6%95%B0\" title=\"5) 表的具体行数\">5) 表的具体行数</a></p>\n<p id=\"6)%20CURD%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:80px;\"><a href=\"#6%29%20CURD%E6%93%8D%E4%BD%9C\" title=\"6) CURD操作\">6) CURD操作</a></p>\n<p id=\"7)%C2%A0%E5%A4%96%E9%94%AE-toc\" style=\"margin-left:80px;\"><a href=\"#7%29%C2%A0%E5%A4%96%E9%94%AE\" title=\"7) 外键\">7) 外键</a></p>\n<p id=\"8)%C2%A0%E6%9F%A5%E8%AF%A2%E6%95%88%E7%8E%87-toc\" style=\"margin-left:80px;\"><a href=\"#8%29%C2%A0%E6%9F%A5%E8%AF%A2%E6%95%88%E7%8E%87\" title=\"8) 查询效率\">8) 查询效率</a></p>\n<p id=\"9%EF%BC%89MyISAM%E5%92%8CInnoDB%E4%B8%A4%E8%80%85%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-toc\" style=\"margin-left:80px;\"><a href=\"#9%EF%BC%89MyISAM%E5%92%8CInnoDB%E4%B8%A4%E8%80%85%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\" title=\"9）MyISAM和InnoDB两者的应用场景\">9）MyISAM和InnoDB两者的应用场景</a></p>\n<p id=\"4.%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8C%E4%B9%B1%E7%A0%81-toc\" style=\"margin-left:40px;\"><a href=\"#4.%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8C%E4%B9%B1%E7%A0%81\" title=\"4.了解一下字符集和乱码\">4.了解一下字符集和乱码</a></p>\n<p id=\"%E5%AD%97%E7%AC%A6%E9%9B%86%E7%AE%80%E4%BB%8B-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%AD%97%E7%AC%A6%E9%9B%86%E7%AE%80%E4%BB%8B\" title=\"字符集简介\">字符集简介</a></p>\n<p id=\"5.MySQL%E4%B8%AD%E7%9A%84utf8%E5%92%8Cutf8mb4-toc\" style=\"margin-left:40px;\"><a href=\"#5.MySQL%E4%B8%AD%E7%9A%84utf8%E5%92%8Cutf8mb4\" title=\"5.MySQL中的utf8和utf8mb4\">5.MySQL中的utf8和utf8mb4</a></p>\n<p id=\"%E5%AD%97%E7%AC%A6%E9%9B%86%E7%9A%84%E6%9F%A5%E7%9C%8B-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%AD%97%E7%AC%A6%E9%9B%86%E7%9A%84%E6%9F%A5%E7%9C%8B\" title=\"字符集的查看\">字符集的查看</a></p>\n<p id=\"8.MySQL%C2%A0%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%C2%A0DML-toc\" style=\"margin-left:0px;\"><a href=\"#8.MySQL%C2%A0%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%C2%A0DML\" title=\"8.MySQL 数据操作 DML\">8.MySQL 数据操作 DML</a></p>\n<p style=\"margin-left:40px;\"><a href=\"#%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE\" title=\"添加数据\">添加数据</a></p>\n<p id=\"%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE\" title=\"修改数据\">修改数据</a></p>\n<p id=\"%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE\" title=\"删除数据\">删除数据</a></p>\n<p id=\"9.MySQL%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2SQL-toc\" style=\"margin-left:0px;\"><a href=\"#9.MySQL%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2SQL\" title=\"9.MySQL数据查询SQL\">9.MySQL数据查询SQL</a></p>\n<p id=\"%E5%9F%BA%E7%A1%80%E6%9F%A5%E8%AF%A2-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%9F%BA%E7%A1%80%E6%9F%A5%E8%AF%A2\" title=\"基础查询\">基础查询</a></p>\n<p id=\"Where%C2%A0%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2-toc\" style=\"margin-left:40px;\"><a href=\"#Where%C2%A0%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2\" title=\"Where 条件查询\">Where 条件查询</a></p>\n<p id=\"Like%C2%A0%E5%AD%90%E5%8F%A5-toc\" style=\"margin-left:40px;\"><a href=\"#Like%C2%A0%E5%AD%90%E5%8F%A5\" title=\"Like 子句\">Like 子句</a></p>\n<p id=\"Group%20BY%C2%A0%E5%88%86%E7%BB%84-toc\" style=\"margin-left:40px;\"><a href=\"#Group%20BY%C2%A0%E5%88%86%E7%BB%84\" title=\"Group BY 分组\">Group BY 分组</a></p>\n<p id=\"Having%C2%A0%E5%AD%90%E5%8F%A5-toc\" style=\"margin-left:40px;\"><a href=\"#Having%C2%A0%E5%AD%90%E5%8F%A5\" title=\"Having 子句\">Having 子句</a></p>\n<p id=\"Order%20by%C2%A0%E6%8E%92%E5%BA%8F-toc\" style=\"margin-left:40px;\"><a href=\"#Order%20by%C2%A0%E6%8E%92%E5%BA%8F\" title=\"Order by 排序\">Order by 排序</a></p>\n<p id=\"Limit%C2%A0%E6%95%B0%E6%8D%AE%E5%88%86%E9%A1%B5-toc\" style=\"margin-left:40px;\"><a href=\"#Limit%C2%A0%E6%95%B0%E6%8D%AE%E5%88%86%E9%A1%B5\" title=\"Limit 数据分页\">Limit 数据分页</a></p>\n<p id=\"10.Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E5%92%8C%E6%8E%88%E6%9D%83-toc\" style=\"margin-left:0px;\"><a href=\"#10.Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E5%92%8C%E6%8E%88%E6%9D%83\" title=\"10.Mysql数据库导入导出和授权\">10.Mysql数据库导入导出和授权</a></p>\n<p id=\"%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%87%BA-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%87%BA\" title=\"数据导出\">数据导出</a></p>\n<p id=\"1.%E6%95%B0%E6%8D%AE%E5%BA%93%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%87%BA-toc\" style=\"margin-left:80px;\"><a href=\"#1.%E6%95%B0%E6%8D%AE%E5%BA%93%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%87%BA\" title=\"1.数据库数据导出\">1.数据库数据导出</a></p>\n<p id=\"2.%E5%B0%86%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84%E8%A1%A8%E5%AF%BC%E5%87%BA-toc\" style=\"margin-left:80px;\"><a href=\"#2.%E5%B0%86%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84%E8%A1%A8%E5%AF%BC%E5%87%BA\" title=\"2.将数据库中的表导出\">2.将数据库中的表导出</a></p>\n<p id=\"%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5\" title=\"数据导入\">数据导入</a></p>\n<p id=\"%E6%8A%8A%E5%AF%BC%E5%87%BA%E7%9A%84sql%E6%96%87%E4%BB%B6%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%88%B0mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%8A%8A%E5%AF%BC%E5%87%BA%E7%9A%84sql%E6%96%87%E4%BB%B6%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%88%B0mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD\" title=\"把导出的sql文件数据导入到mysql数据库中\">把导出的sql文件数据导入到mysql数据库中</a></p>\n<p id=\"%23%C2%A0%E6%8A%8A%E5%AF%BC%E5%87%BA%E7%9A%84%E8%A1%A8sql%C2%A0%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93-toc\" style=\"margin-left:80px;\"><a href=\"#%23%C2%A0%E6%8A%8A%E5%AF%BC%E5%87%BA%E7%9A%84%E8%A1%A8sql%C2%A0%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93\" title=\"把导出的表sql 导入数据库\">把导出的表sql 导入数据库</a></p>\n<p id=\"%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86\" title=\"权限管理\">权限管理</a></p>\n<p id=\"%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E7%9A%84%E8%AF%AD%E6%B3%95%E6%A0%BC%E5%BC%8F%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E7%9A%84%E8%AF%AD%E6%B3%95%E6%A0%BC%E5%BC%8F%EF%BC%9A\" title=\"创建用户的语法格式：\">创建用户的语法格式：</a></p>\n<p id=\"%23%C2%A0%E5%88%A0%E9%99%A4%E7%94%A8%E6%88%B7-toc\" style=\"margin-left:80px;\"><a href=\"#%23%C2%A0%E5%88%A0%E9%99%A4%E7%94%A8%E6%88%B7\" title=\"删除用户\">删除用户</a></p>\n<hr id=\"hr-toc\"/>\n<h1></h1>\n<h1 id=\"1.MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D\">1.MySQL数据库的介绍</h1>\n<h2 id=\"%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E5%BA%93\"><strong>什么是数据库</strong></h2>\n<p>数据库(Database)就是按照数据结构来组织，存储和管理数据的仓库 专业的数据库是专门对数据进行创建，访问，管理，搜索等操作的软件，比起我们自己用文件读写的方式对象数据进行管理更加的方便，快速，安全</p>\n<h2 id=\"%E4%BD%9C%E7%94%A8\">作用</h2>\n<ul><li>对数据进行持久化的保存</li><li> <p>方便数据的存储和查询，速度快，安全，方便</p> </li><li> <p>可以处理并发访问</p> </li><li> <p>更加安全的权限管理访问机制</p> </li></ul>\n<h2 id=\"%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93\"><strong>常见的数据库</strong></h2>\n<p>数据库分两大类，一类是 关系型数据库。另一类叫做 非关系型数据库。</p>\n<ul><li>关系型数据库: MySQL，Oracle，PostgreSQL，SQLserver。。。。</li><li>非关系型数据库: Redis内存数据库，MongoDB文档数据库。。。</li></ul>\n<h2 id=\"%E8%AE%A4%E8%AF%86mysql%E6%95%B0%E6%8D%AE%E5%BA%93\">认识mysql数据库</h2>\n<ul><li>MySQL是最流行的关系型数据库管理系统</li><li>安装mysql 关于数据库的一些概念</li><li>数据库 Database 数据表 Tables 数据字段</li><li>行 row</li><li>列</li></ul>\n<p></p>\n<h1 id=\"2.%E5%AE%89%E8%A3%85MySQL\">2.安装MySQL</h1>\n<h2 id=\"Mac%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%AE%89%E8%A3%85MySQL\">Mac<strong>系统中安装</strong>MySQL</h2>\n<h3 id=\"%E4%BD%BF%E2%BD%A4%E7%94%A8Mac%E4%B8%AD%E7%9A%84Homebrew%E8%BF%9B%E2%BE%8F%E8%A1%8C%E8%A1%8Cmysql%E7%9A%84%E5%AE%89%E8%A3%85\"><strong>使⽤用</strong>Mac<strong>中的</strong>Homebrew<strong>进⾏行行</strong>mysql<strong>的安装</strong></h3>\n<p><strong>1.下载安装mysql</strong></p>\n<p>brew install mysql@5.7</p>\n<p><img alt=\"\" height=\"217\" src=\"..\\..\\static\\image\\2021090110560413.png\" width=\"716\"/></p>\n<p>   如果看到以下界⾯面则表示已经下载安装成功</p>\n<p><img alt=\"\" height=\"474\" src=\"..\\..\\static\\image\\2021090110562977.png\" width=\"696\"/></p>\n<p><strong>2.启动mysql mysql.server start</strong></p>\n<p><strong>3.关闭mysql mysql.server stop</strong></p>\n<p><strong>4.登录mysql mysql -u root -p</strong></p>\n<h2 id=\"Windows%E5%AE%89%E8%A3%85MySQL5.7.17\">Windows安装MySQL5.7.17</h2>\n<p>1. 在MySQL官网 http://dev.mysql.com/downloads/mysql/ 上面下载ZIP安装包(第二个:Windows (x86, 64-</p>\n<p>bit), ZIP Archive)。</p>\n<p>2. 下载完成后解压，将其放到想要安装的目录下。</p>\n<p>例如:D:\\MySQL5.7\\mysql-5.7.17-winx64</p>\n<p>3. 新建一个my.ini配置文件，原始的my-default.ini配置文件只是个模版，不要在里面改动。 my.ini的内容如下:</p>\n<p>[mysql] default-character-set=utf8</p>\n<p>[mysqld] port = 3306 basedir=D:\\MySQL5.7\\mysql-5.7.17-winx64 datadir=D:\\MySQL5.7\\mysql-5.7.17- winx64\\data max_connections=200 character-set-server=utf8 default-storage-engine=INNODB explicit_defaults_for_timestamp=true</p>\n<p>4. 在安装路径下新建一个空的data文件夹。</p>\n<p>5. 以管理员身份运行cmd，进入bin目录，执行 mysqld --initialize-insecure --user=mysql 命令。不进行这一</p>\n<p>  步，安装完成之后无法启动服务。</p>\n<p>6. 依然在管理员cmd窗口的bin目录下，执行 mysqld install 命令安装。完成后会提示安装成功。</p>\n<p>7. 依然在管理员cmd窗口的bin目录下，执行 net start mysql 命令启动MySQL服务。</p>\n<p>8. 修改环境变量，添加\"D:\\MySQL5.7\\mysql-5.7.17-winx64\\bin\"。</p>\n<p>9. 在普通cmd窗口中，进入bin目录，执行 mysql -u root -p 命令，默认没有密码，回车进入。</p>\n<p></p>\n<h1 id=\"%C2%A03.%E8%AE%A4%E8%AF%86%E5%92%8C%E6%93%8D%E4%BD%9C%E4%B8%80%E4%B8%8Bmysql%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4\"> 3.认识和操作一下mysql的基本命令</h1>\n<p><strong>认识库，表的概念和关系 mysql的基本命令: 登录，查看库，选择库，查看表， 创建库，创建表，添加数据，查询数据。</strong></p>\n<p></p>\n<h2 id=\"%E7%99%BB%E5%BD%95mysql%2C%E5%9C%A8%E7%BB%88%E7%AB%AF%E8%BE%93%E5%85%A5%E4%BB%A5%E4%B8%8B%E5%91%BD%E4%BB%A4%EF%BC%8C%E8%BF%9B%E8%A1%8C%E7%99%BB%E5%BD%95\">登录mysql,在终端输入以下命令，进行登录</h2>\n<pre><code>mysql -u root -p\n\n    MacBook-Pro:~ yc$ mysql -u root -p\n\nEnter password:\n\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\n\nYour MySQL connection id is 4\n\nServer version: 5.7.28 Homebrew\n\nCopyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\n\naffiliates. Other names may be trademarks of their respective\n\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql&gt;</code></pre>\n<h2 id=\"%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8Dmysql%E4%B8%AD%E6%89%80%E6%9C%89%E7%9A%84%E5%BA%93\">查看当前mysql中所有的库</h2>\n<p>库==&gt;数据库==&gt;就像文件夹一样，库里面可以存储很多个表)</p>\n<p>show databases;</p>\n<p>+--------------------+</p>\n<p>| Database           |</p>\n<p>+--------------------+</p>\n<p>| information_schema |</p>\n<p>| mysql              |</p>\n<p>| performance_schema |</p>\n<p>| sys                |</p>\n<p>+--------------------+</p>\n<p>4 rows in set (0.00 sec)</p>\n<h2 id=\"%E9%80%89%E6%8B%A9%E9%9C%80%E8%A6%81%E6%93%8D%E4%BD%9C%E7%9A%84%E5%BA%93%EF%BC%8C%E6%89%93%E5%BC%80%E5%BA%93\">选择需要操作的库，打开库</h2>\n<p>use mysql; 查看当前库中的所有数据表</p>\n<p>show tables;</p>\n<p>+---------------------------+</p>\n<p>| Tables_in_mysql           |</p>\n<h2 id=\"%E6%9F%A5%E7%9C%8B%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE\">查看表中的数据</h2>\n<p># 查看user表中的所有数据的所有字段 select * from user;</p>\n<p># 查看 user表中的所有数据的 host和user字段列 select host,user from user;</p>\n<p>+-----------+---------------+</p>\n<p>| host      | user          |</p>\n<p>+-----------+---------------+</p>\n<p>| localhost | mysql.session |</p>\n<p>| localhost | mysql.sys     |</p>\n<p>| localhost | root          |</p>\n<p>+-----------+---------------+</p>\n<h2 id=\"%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%85%B3%E7%B3%BB\">库和表的概念与关系</h2>\n<p>库就像是文件夹，库中可以有很多个表 表就像是我们的excel表格文件一样 每一个表中都可以存储很多数据</p>\n<p>mysql中可以有很多不同的库，库中可以有很多不同的表 表中可以定义不同的列(字段)， 表中可以根据结构去存储很多的数据</p>\n<h2 id=\"%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%BA%93%3F\">如何创建自己的库?</h2>\n<p>create database 库名 default charset=utf8; 创建库</p>\n<p>+---------------------------+</p>\n<p>| columns_priv              |</p>\n<p>| db                        |</p>\n<p>| engine_cost               |</p>\n<p>....</p>\n<p>| time_zone_name            |</p>\n<p>| time_zone_transition      |</p>\n<p>| time_zone_transition_type |</p>\n<p>| user                      |</p>\n<p>+---------------------------+</p>\n<p>31 rows in set (0.00 sec)</p>\n<p>create database tlxy default charset=utf8;</p>\n<p>-- Query OK, 1 row affected (0.01 sec)</p>\n<h2 id=\"%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E5%BA%93\">查看所有库</h2>\n<p>show databases;</p>\n<p>+--------------------+</p>\n<p>| Database           |</p>\n<p>+--------------------+</p>\n<p>| information_schema |</p>\n<p>| mysql              |</p>\n<p>| performance_schema |</p>\n<p>| sys                |</p>\n<p>| tlxy               |</p>\n<p>+--------------------+</p>\n<p>5 rows in set (0.00 sec)</p>\n<p>-- 进入库 use tlxy;</p>\n<h2 id=\"%E5%88%9B%E5%BB%BA%E8%A1%A8%E7%9A%84%E8%AF%AD%E6%B3%95\">创建表的语法</h2>\n<p>create table 表名( 字段名 类型 字段约束, 字段名 类型 字段约束, 字段名 类型 字段约束, )engine=innodb default</p>\n<p>charset=utf8;</p>\n<p>-- 创建用户表 create table user(</p>\n<p>    name varchar(20),</p>\n<p>    age int,</p>\n<p>    sex char(1)</p>\n<p>)engine=innodb default charset=utf8;</p>\n<p>-- Query OK, 0 rows affected (0.16 sec)</p>\n<h2 id=\"%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE\">添加数据</h2>\n<p>-- 向 user 表中 添加 name，age，sex 数据</p>\n<p>insert into user(name,age,sex) values('admin',26,'男'); -- Query OK, 1 row affected (0.00 sec)</p>\n<p>insert into user(name,age,sex) values('张三',22,'女');</p>\n<p>查看表中的数据</p>\n<p>select * from user; +--------+------+------+ |name |age |sex | +--------+------+------+ |admin| 26|男 | |张三 | 22|女 | +--------+------+------+ 2 rows in set (0.00 sec)</p>\n<p></p>\n<p></p>\n<h1 id=\"4.MySQL%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C\">4.MySQL基础操作</h1>\n<h2 id=\"%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%3A\">使用方法:</h2>\n<ul><li>方式一: 通过在命令行敲命令来操作 ( 有助于命令的掌握)</li><li>方式二: 通过图型界面工具,如 Navicat 等(在熟练掌握后再使用)</li><li>方式三:通过编程语言(python,php,java,go...)执行mysql命令</li></ul>\n<h3 id=\"SQL%20(%20Structure%20query%20language%20)%20%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80\"><strong>SQL ( Structure query language ) 结构化查询语言</strong></h3>\n<p>SQL语言分为4个部分:DDL(定义)、DML(操作)、DQL(查询)、DCL(控制)</p>\n<h3 id=\"SQL%E8%AF%AD%E5%8F%A5%E4%B8%AD%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE\"><strong>SQL语句中的快捷键</strong></h3>\n<p>\\G 格式化输出(文本式，竖立显示) \\s 查看服务器端信息</p>\n<p>\\c 结束命令输入操作</p>\n<p>\\q 退出当前sql命令行模式</p>\n<p>\\h 查看帮助</p>\n<h2 id=\"%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%AD%A5%E9%AA%A4\">操作数据库的步骤</h2>\n<p><strong>连接, 打开库, 操作, 关闭退出</strong></p>\n<h2 id=\"1.%E9%80%9A%E8%BF%87%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BF%9E%E6%8E%A5MySQL\">1.通过命令行连接MySQL</h2>\n<h3 id=\"%E2%80%8B\"><img alt=\"\" height=\"246\" src=\"..\\..\\static\\image\\20210901114031641.png\" width=\"514\"/></h3>\n<h3 id=\"%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%AD%E6%B3%95%E7%9A%84%E7%89%B9%E7%82%B9\">数据库语法的特点</h3>\n<p><strong>1) SQL 语句可以换行, 要以分号结尾</strong></p>\n<p><strong>2) 命令不区分大小写. 关键字和函数建议用大写</strong></p>\n<p><strong>3) 如果提示符为 '&gt; 那么需要输入一个'回车</strong></p>\n<p><strong>4) 命令打错了换行后不能修改, 可以用 \\c 取消</strong></p>\n<h2 id=\"2.%20%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C\">2. 数据库操作</h2>\n<ul><li>查看数据库 show databases;</li><li>创建数据库 create database 库名 default charset=utf8;</li><li>删除数据库 drop database 库名;</li><li>打开数据库 use 库名;</li></ul>\n<h2 id=\"3.%20%E6%95%B0%E6%8D%AE%E8%A1%A8%E6%93%8D%E4%BD%9C\">3. 数据表操作</h2>\n<p>数据库管理系统中, 可以有很多库, 每个数据库中可以包括多张数据表</p>\n<p><strong>查看表</strong>: show tables;</p>\n<p><strong>创建表</strong>: create table 表名(字段名1 类型,字段名2 类型)engine=innodb default charset=utf8; 创建表: 如果表不存在,则创建, 如果存在就不执行这条命令</p>\n<p>create table if not exists 表名(字段1 类型,字段2 类型);</p>\n<p>create table if not exists users(</p>\n<p>id int not null primary key auto_increment, name varchar(4) not null,</p>\n<p>age tinyint,</p>\n<p>sex enum('男','女')</p>\n<p>) engine=innodb default charset=utf8;</p>\n<p><strong>删除表</strong>: drop table 表名;</p>\n<p><strong>表结构</strong>: desc 表名;</p>\n<p><strong>查看建标语句</strong>:show create table users;</p>\n<h2 id=\"4.%20%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%20%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5\">4. 数据操作 增删改查</h2>\n<p><strong>插入</strong></p>\n<p>insert into 表名(字段1,字段2,字段3) values(值1,值2,值3);</p>\n<p>insert into 表名(字段1,字段2,字段3) values(a值1,a值2,a值3),(b值1,b值2,b值3); 查询</p>\n<p>select * from 表名;</p>\n<p>select 字段1,字段2,字段3 from 表名;</p>\n<p>select * from 表名 where 字段=某个值;</p>\n<p><strong>修改</strong></p>\n<p>update 表名 set 字段=某个值 where 条件;</p>\n<p>update 表名 set 字段1=值1,字段2=值2 where 条件;</p>\n<p>update 表名 set 字段=字段+值 where 条件;</p>\n<p><strong>删除</strong></p>\n<p>delete from 表名 where 字段=某个值;</p>\n<h2 id=\"%E5%9B%9B.%20%E9%80%80%E5%87%BAMySQL\">四. 退出MySQL</h2>\n<p>exit; 或者 quit;</p>\n<p></p>\n<h1 id=\"5.MySQL%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><strong>5.MySQL的数据类型</strong></h1>\n<h2 id=\"%E4%B8%80.MySQL%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">一.MySQL的数据类型</h2>\n<p>数据类型是定义列中可以存储什么类型的数据以及该数据实际怎样存储的基本规则数据类型限制存储在数据列列中的数据。例如，数值数据类型列只能接受数值类型的的数据在设计表时，应该特别重视所用的数据类型。使用错误的数据类型可能会严重地影响应用程序的功能和性能。</p>\n<p>更改包含数据的列不是一件小事(而且这样做可能会导致数据丢失)。</p>\n<p><strong>数据类型: 整型、浮点型、字符串、日期等</strong></p>\n<h3 id=\"1%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">1、字符串数据类型</h3>\n<p>最常用的数据类型是串数据类型。它们存储串，如名字、地址、电 话号码、邮政编码等。 不管使用何种形式的串数据类型，串值都必须括在引号内 有两种基本的串类型，分别为定长串和变长串</p>\n<p><strong>定长串:char</strong></p>\n<p>1. 接受长度固定的字符串，其长度是在创建表时指定的。 定长列不允许存储多于指定长度字符的数据。</p>\n<p>2. 指定长度后，就会分配固定的存储空间用于存放数据 char(7) 不管实际插入多少字符，它都会占用7个字符位置</p>\n<p><strong>变长串 varchar</strong></p>\n<p>存储可变长度的字符串 varchar(7) 如果实际插入4个字符, 那么它只占4个字符位置,当然插入的数据长度不能超过7个字符。</p>\n<p><strong>注意</strong></p>\n<p>既然变长数据类型这样灵活，为什么还要使用定长数据类型? 回答:因为性能，MySQL处理定长列远比处理变长列快得多。</p>\n<p><strong>Text 变长文本类型存储</strong></p>\n<p><img alt=\"\" height=\"275\" src=\"..\\..\\static\\image\\20210901115700672.png\" width=\"582\"/></p>\n<p></p>\n<h2 id=\"2%E3%80%81%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B\">2、数值类型</h2>\n<p>数值数据类型存储数值。MySQL支持多种数值数据类型，每种存储的数值具有不同的取值范围。支持的取值范围越大，所需存储空间越多</p>\n<p>与字符串不一样，数值不应该括在引号内</p>\n<p><img alt=\"\" height=\"394\" src=\"..\\..\\static\\image\\20210901115842757.png\" width=\"563\"/></p>\n<p> decimal(5, 2) 表示数值总共5位, 小数占2位 tinyint 1字节(8位) 0-255。-128，127 int 4字节。 -21亿，21亿。0-42亿 float.</p>\n<p>MySQL中没有专门存储货币的数据类型，一般情况下使用DECIMAL(8, 2)</p>\n<p><strong>有符号或无符号</strong></p>\n<p>所有数值数据类型(除BIT和BOOLEAN外)都可以有符号或无符号</p>\n<ul><li>有符号数值列可以存储正或负的数值</li><li>无符号数值列只能存储正数。</li><li>默认情况为有符号，但如果你知道自己不需要存储负值，可以使用UNSIGNED关键字</li></ul>\n<p><strong>注意</strong></p>\n<p>如果将邮政编码类似于01234存储为数值类型，则保存的将是数值1234，此时需要使用字符串类型 手机号应该用什么进行存储呢?</p>\n<h3 id=\"3%E3%80%81%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E7%B1%BB%E5%9E%8B\">3、日期和时间类型</h3>\n<p>MySQL使用专门的数据类型来存储日期和时间值</p>\n<p>   <img alt=\"\" height=\"272\" src=\"..\\..\\static\\image\\20210901115928334.png\" width=\"820\"/></p>\n<p> datetime 8字节1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</p>\n<h3 id=\"4%E3%80%81%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">4、二进制数据类型</h3>\n<p>二进制数据类型可存储任何数据(甚至包括二进制信息)，如图像、多媒体、字处理文档等</p>\n<h2 id=\"%E4%BA%8C%E3%80%81%E8%A1%A8%E7%9A%84%E5%AD%97%E6%AE%B5%E7%BA%A6%E6%9D%9F\">二、表的字段约束</h2>\n<ul><li>unsigned 无符号(给数值类型使用，表示为正数，不写可以表示正负数都可以) 字段类型后面加括号限制宽度</li><li>char(5). varchar(7) 在字符类型后面加限制 表示 字符串的长度</li><li>int(4) 没有意义，默认无符号的int为int(11)，有符号的int(10)</li><li>int(4) unsigned zerofill只有当给int类型设置有前导零时，设置int的宽度才有意义。</li><li>not null 不能为空,在操作数据库时如果输入该字段的数据为NULL ，就会报错 default 设置默认值</li><li>primary key 主键不能为空,且唯一.一般和自动递增一起配合使用。 auto_increment 定义列为自增属性，一般用于主键，数值会自动加1</li><li>unique 唯一索引(数据不能重复:用户名)可以增加查询速度,但是会降低插入和更新速度</li></ul>\n<h2 id=\"%E4%B8%89%E3%80%81MySQL%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6\"><strong>三、MySQL的运算符</strong></h2>\n<ul><li>算术运算符: +、 -、 *、 /、 %</li><li>比较运算符: =、 &gt;、 &lt;、 &gt;=、 &lt;=、!=</li><li>数据库特有的比较: in、not in、is null、is not null、like、between、and</li><li>逻辑运算符: and、or、not</li><li>like: 支持特殊符号%和_ ;</li></ul>\n<p>其中%表示任意数量的任意字符，_表示任意一位字符</p>\n<h2 id=\"%E5%9B%9B%E3%80%81%E4%B8%BB%E9%94%AE\">四、主键</h2>\n<p>1、表中每一行都应该有可以唯一标识自己的一列，用于记录两条记录不能重复，任意两行都不具有相同的主键值</p>\n<p>2、应该总是定义主键 虽然并不总是都需要主键，但大多数数据库设计人员都应保证他们创建的每个表具有一个主 键，以便于以后的数据操纵和管理。</p>\n<p><strong>要求</strong></p>\n<ul><li>记录一旦插入到表中，主键最好不要再修改</li><li>不允许NULL</li><li>不在主键列中使用可能会更改的值。</li></ul>\n<p>(例如，如果使用一个名字作为主键以标识某个供应商，当该供应商合并和更改其名字时，必须更改这个主键。)</p>\n<ul><li>自增整数类型:数据库会在插入数据时自动为每一条记录分配一个自增整数，这样我们就完全不用担心主键重复，也不用自己预先生成主键</li><li>可以使用多个列作为联合主键，但联合主键并不常用。使用多列作为主键时，所有列值的组合必须是唯一的</li></ul>\n<p></p>\n<h1 id=\"6.MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E6%95%B0%E6%8D%AE%E8%A1%A8%E6%93%8D%E4%BD%9C\">6.MySQL数据库与数据表操作</h1>\n<p>数据库的操作：数据库创建 ；数据库删除</p>\n<p>数据表的操作：数据表的创建；数据表的修改 (表结构) ；数据表的删除</p>\n<h2 id=\"%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%93%8D%E4%BD%9C\"><strong>数据库的操作</strong></h2>\n<h3 id=\"1.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%88%9B%E5%BB%BA\">1.数据库的创建</h3>\n<p>   # 链接mysql数据库后，进入mysql后可以操作数据</p>\n<p># 1. 创建库</p>\n<p>create database if not exists tlxy default charset=utf8;</p>\n<p>-- 1. 数据库 tlxy 如果不存在则创建数据库，存在则不创建</p>\n<p>-- 2. 创建 tlxy 数据库，并设置字符集为utf8</p>\n<p>-- 3. 无特殊情况都要求字符集为utf8或者utf8mb4的字符编码</p>\n<h3 id=\"2.%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E5%BA%93\">2.查看所有库</h3>\n<p># 1. 查看所有库 show databases;</p>\n<h3 id=\"3.%E6%89%93%E5%BC%80%E5%BA%93%2F%E8%BF%9B%E5%85%A5%E5%BA%93%2F%E9%80%89%E6%8B%A9%E5%BA%93\">3.打开库/进入库/选择库</h3>\n<p># use 库名 use tlxy</p>\n<h3 id=\"4.%E5%88%A0%E9%99%A4%E5%BA%93\">4.删除库</h3>\n<p>删库有风险，动手需大胆（哈哈哈，大不了西红柿带你跑路）</p>\n<p># 删除库，那么库中的所有数据都将在磁盘中删除。 drop database 库名</p>\n<h2 id=\"%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%9A%84%E6%93%8D%E4%BD%9C\">数据表的操作</h2>\n<h3 id=\"1.%E5%88%9B%E5%BB%BA%E8%A1%A8\">1.创建表</h3>\n<p><strong>语法格式:</strong></p>\n<p>create table 表名(字段名，类型，【字段约束】，。。。); 实例:</p>\n<p># 以下创建一个 users 的表 create table users(</p>\n<p>-- 创建ID字段，为正整数，不允许为空 主键，自动递增</p>\n<p>id int unsigned not null primary key auto_increment,</p>\n<p>-- 创建 存储 名字的字段，为字符串类型，最大长度 5个字符，不允许为空 username varchar(5) not null,</p>\n<p>-- 创建存储 密码 的字段，固定长度 32位字符， 不允许为空</p>\n<p>password char(32) not null,</p>\n<p>-- 创建 年龄 字段，不允许为空，默认值为 20</p>\n<p>  age tinyint not null default 20</p>\n<p>)engine=innodb default charset=utf8;</p>\n<p># 查看表结构 desc users;</p>\n<p>#查看建表语句</p>\n<p>show create table users;</p>\n<p><strong>创建表的基本原则:</strong></p>\n<ul><li>表明和字段名 尽可能的符合命名规范，并且最好能够‘见名之意’</li><li>表中数据必须有唯一标示，即主键定义。无特殊情况，主键都为数字并自增即可</li><li>表中字段所对应的类型设置合理，并限制合理长度</li><li>表引擎推荐使用innodb，并无特殊情况都要求为utf8或者utf8mb4的字符编码</li></ul>\n<h3 id=\"2.%E4%BF%AE%E6%94%B9%E8%A1%A8%E7%BB%93%E6%9E%84\">2.修改表结构</h3>\n<p>语法格式:alter table 表名 action (更改的选项)</p>\n<p><strong>添加字段</strong></p>\n<p># 语法:alter table 表名 add 添加的字段信息 --在users表中 追加 一个num字段</p>\n<p>alter table users add num int not null;</p>\n<p>-- 在指定字段后面追加字段 在 users 表中 age字段后面 添加一个 email 字段 alter table users add email varchar(50) after age;</p>\n<p>-- 在指定字段后面追加字段，在 users 表中 age字段后面 添加一个 phone alter table users add phone char(11) not null after age;</p>\n<p>-- 在表的最前面添加一个字段</p>\n<p>alter table users add aa int first;</p>\n<p><strong>删除字段</strong></p>\n<p>   # 删除字段 alter table 表名 drop 被删除的字段名 alter table users drop aa;</p>\n<p><strong>修改字段</strong></p>\n<p>语法格式: alter table 表名 change|modify 被修改的字段信息 change: 可以修改字段名，</p>\n<p>modify: 不能修改字段名。</p>\n<p># 修改表中的 num 字段 类型，使用 modify 不修改表名</p>\n<p>alter table users modify num tinyint not null default 12;</p>\n<p># 修改表中的 num 字段 为 int并且字段名为 nn alter table users change num mm int;</p>\n<p># 注意:一般情况下，无特殊要求，不要轻易修改表结构</p>\n<h3 id=\"3.%E4%BF%AE%E6%94%B9%E8%A1%A8%E5%90%8D\">3.修改表名</h3>\n<p># 语法:alter table 原表名 rename as 新表名</p>\n<h3 id=\"4.%E6%9B%B4%E6%94%B9%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%87%AA%E5%A2%9E%E7%9A%84%E5%80%BC\">4.更改表中的自增的值</h3>\n<p># 在常规情况下，auto_increment 默认从1开始继续递增 alter table users auto_increment = 1000;</p>\n<h3 id=\"5.%E4%BF%AE%E6%94%B9%E8%A1%A8%E5%BC%95%E6%93%8E\">5.修改表引擎</h3>\n<p># 推荐在定义表时，表引擎为 innodb。</p>\n<p># 通过查看建表语句获取当前的表引擎</p>\n<p>mysql&gt; show create table users\\G;</p>\n<p>*************************** 1. row ***************************</p>\n<p>       Table: users</p>\n<p>Create Table: CREATE TABLE `users` (</p>\n<p>  PRIMARY KEY (`id`)</p>\n<p>) ENGINE=InnoDB AUTO_INCREMENT=1001 DEFAULT CHARSET=utf8</p>\n<p>1 row in set (0.00 sec)</p>\n<p># 直接查看当前表状态信息</p>\n<p>mysql&gt; show table status from tlxy where name = 'users'\\G; *************************** 1. row ***************************</p>\n<p>           Name: users</p>\n<p>         Engine: InnoDB</p>\n<p># 修改表引擎语句</p>\n<p>alter table users engine = 'myisam';</p>\n<h3 id=\"6.%E5%88%A0%E9%99%A4%E8%A1%A8\">6.删除表</h3>\n<p>drop table 表名</p>\n<p>   </p>\n<h1 id=\"%C2%A07.Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E5%BC%95%E6%93%8E%E4%B8%8E%E5%AD%97%E7%AC%A6%E9%9B%86\"><strong> 7.Mysql数据库表引擎与字符集</strong></h1>\n<h2 id=\"1.%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A4%84%E7%90%86%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AF%B7%E6%B1%82\"><strong>1.</strong><strong>服务器处理客户端请求</strong></h2>\n<p>其实不论客户端进程和服务器进程是采用哪种方式进行通信，最后实现的效果都是：<strong>客户端进程向服务器进程发送</strong></p>\n<p><strong>一段文本（</strong><strong>MySQL</strong><strong>语句），服务器进程处理后再向客户端进程发送一段文本（处理结果）。</strong>那服务器进程对客户</p>\n<p>端进程发送的请求做了什么处理，才能产生最后的处理结果呢？客户端可以向服务器发送增删改查各类请求，我们</p>\n<p>这里以比较复杂的查询请求为例来画个图展示一下大致的过程：</p>\n<p><img alt=\"\" height=\"278\" src=\"..\\..\\static\\image\\20210901141020811.png\" width=\"407\"/></p>\n<p></p>\n<p>虽然查询缓存有时可以提升系统性能，但也不得不因维护这块缓存而造成一些开销，比如每次都要去查询缓</p>\n<p>存中检索，查询请求处理完需要更新查询缓存，维护该查询缓存对应的内存区域。从MySQL 5.7.20开始，不</p>\n<p>推荐使用查询缓存，并在MySQL 8.0中删除。</p>\n<h2 id=\"2.%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E\"><strong>2.</strong><strong>存储引擎</strong></h2>\n<p></p>\n<p>MySQL 服务器把数据的存储和提取操作都封装到了一个叫 存储引擎 的模块里。我们知道 表 是由一行一行的记录组成的，但这只是一个逻辑上的概念，物理上如何表示记录，怎么从表中读取数据，怎么把数据写入具体的物理存储器上，这都是 存储引擎 负责的事情。为了实现不同的功能， MySQL 提供了各式各样的 存储引擎 ，不同 存储引擎 管理的表具体的存储结构可能不同，采用的存取算法也可能不同。</p>\n<p><strong>存储引擎以前叫做 表处理器 ，它的功能就是接收上层传下来的指令，然后对表中的数据进行提取或写入操作。</strong></p>\n<p></p>\n<p>为了管理方便，人们把 连接管理 、 查询缓存 、 语法解析 、 查询优化 这些并不涉及真实数据存储的功能划分为MySQL server 的功能，把真实存取数据的功能划分为 存储引擎 的功能。各种不同的存储引擎向上边的 MySQLserver 层提供统一的调用接口（也就是存储引擎API），包含了几十个底层函数，像\"读取索引第一条内容\"、\"读取索引下一条内容\"、\"插入记录\"等等。</p>\n<p>所以在 MySQL server 完成了查询优化后，只需按照生成的执行计划调用底层存储引擎提供的API，获取到数据后返回给客户端就好了。</p>\n<p></p>\n<p><strong>MySQL 支持非常多种存储引擎：</strong></p>\n<p>ARCHIVE 用于数据存档（行被插入后不能再修改）</p>\n<p>BLACKHOLE 丢弃写操作，读操作会返回空内容</p>\n<p>CSV 在存储数据时，以逗号分隔各个数据项</p>\n<p>FEDERATED 用来访问远程表</p>\n<p>InnoDB 具备外键支持功能的事务存储引擎</p>\n<p>MEMORY 置于内存的表</p>\n<p>MERGE 用来管理多个MyISAM表构成的表集合</p>\n<p>MyISAM 主要的非事务处理存储引擎</p>\n<p>NDB MySQL集群专用存储引擎</p>\n<p></p>\n<h2 id=\"3.MyISAM%E5%92%8CInnoDB%E8%A1%A8%E5%BC%95%E6%93%8E%E7%9A%84%E5%8C%BA%E5%88%AB\"><strong>3.MyISAM</strong><strong>和</strong><strong>InnoDB</strong><strong>表引擎的区别</strong></h2>\n<p></p>\n<h3 id=\"1)%C2%A0%E4%BA%8B%E5%8A%A1%E6%94%AF%E6%8C%81\"><strong>1) </strong><strong>事务支持</strong></h3>\n<p>MyISAM不支持事务，而InnoDB支持。</p>\n<p>事务：访问并更新数据库中数据的执行单元。事物操作中，要么都执行要么都不执行</p>\n<p></p>\n<h3 id=\"2)%C2%A0%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84\"><strong>2) </strong><strong>存储结构</strong></h3>\n<p>MyISAM：每个MyISAM在磁盘上存储成三个文件。</p>\n<ul><li>.frm文件存储表结构。</li><li>.MYD文件存储数据。</li><li>.MYI文件存储索引。</li></ul>\n<p>InnoDB：主要分为两种文件进行存储</p>\n<ul><li>.frm 存储表结构</li><li>.ibd 存储数据和索引 （也可能是多个.ibd文件，或者是独立的表空间文件）</li></ul>\n<p></p>\n<h3 id=\"3)%C2%A0%E8%A1%A8%E9%94%81%E5%B7%AE%E5%BC%82\"><strong>3) </strong><strong>表锁差异</strong></h3>\n<p></p>\n<p><strong>MyISAM</strong><strong>：只支持表级锁</strong>，用户在操作myisam表时，select，update，delete，insert语句都会给表自动加锁，如果加锁以后的表满足insert并发的情况下，可以在表的尾部插入新的数据。</p>\n<p> <strong>InnoDB</strong><strong>：支持事务和行级锁，是innodb的最大特色</strong>。</p>\n<p>行锁大幅度提高了多用户并发操作的新能。但是InnoDB的行锁，只是在WHERE的主键是有效的，非主键的WHERE都会锁全表的。</p>\n<p></p>\n<h3 id=\"4)%C2%A0%E8%A1%A8%E4%B8%BB%E9%94%AE\"><strong>4) </strong><strong>表主键</strong></h3>\n<p>MyISAM：允许没有任何索引和主键的表存在，索引都是保存行的地址。 InnoDB：如果没有设定主键或者非空唯一索引，就会自动生成一个6字节的主键(用户不可见)，数据是主索引的一部分，附加索引保存的是主索引的值。</p>\n<p>InnoDB的主键范围更大，最大是MyISAM的2倍。</p>\n<p></p>\n<h3 id=\"5)%C2%A0%E8%A1%A8%E7%9A%84%E5%85%B7%E4%BD%93%E8%A1%8C%E6%95%B0\"><strong>5) </strong><strong>表的具体行数</strong></h3>\n<p>MyISAM：保存有表的总行数，如果select count() from table;会直接取出出该值。 InnoDB：没有保存表的总行数</p>\n<p>(只能遍历)，如果使用select count() from table；就会遍历整个表，消耗相当大，但是在加了wehre条件后，</p>\n<p>myisam和innodb处理的方式都一样。</p>\n<p></p>\n<h3 id=\"6)%20CURD%E6%93%8D%E4%BD%9C\"><strong>6) CURD</strong><strong>操作</strong></h3>\n<p>MyISAM：如果执行大量的SELECT，MyISAM是更好的选择。 InnoDB：如果你的数据执行大量的INSERT或UPDATE，出于性能方面的考虑，应该使用InnoDB表。DELETE 从性能上InnoDB更优，但DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的删除，在innodb上如果要清空保存有大量数据的表，最好使用truncate table这个命令。</p>\n<p></p>\n<h3 id=\"7)%C2%A0%E5%A4%96%E9%94%AE\"><strong>7) </strong><strong>外键</strong></h3>\n<p>MyISAM：不支持 InnoDB：支持</p>\n<p></p>\n<h3 id=\"8)%C2%A0%E6%9F%A5%E8%AF%A2%E6%95%88%E7%8E%87\"><strong>8) </strong><strong>查询效率</strong></h3>\n<p>MyISAM相对简单，所以在效率上要优于InnoDB，小型应用可以考虑使用MyISAM。</p>\n<p></p>\n<p>推荐考虑使用InnoDB来替代MyISAM引擎，原因是InnoDB自身很多良好的特点，比如事务支持、存储 过程、视图、行级锁定等等，在并发很多的情况下，相信InnoDB的表现肯定要比MyISAM强很多。</p>\n<p>另外，任何一种表都不是万能的，只用恰当的针对业务类型来选择合适的表类型，才能最大的发挥MySQL的性能优势。如果不是很复杂的Web应用，非关键应用，还是可以继续考虑MyISAM的，这个具体情况可以自己斟酌。</p>\n<p></p>\n<h3 id=\"9%EF%BC%89MyISAM%E5%92%8CInnoDB%E4%B8%A4%E8%80%85%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><strong>9</strong><strong>）</strong><strong>MyISAM</strong><strong>和</strong><strong>InnoDB</strong><strong>两者的应用场景</strong></h3>\n<p>MyISAM管理非事务表。它提供高速存储和检索，以及全文搜索能力。如果应用中需要执行大量的SELECT查询，那么MyISAM是更好的选择。 InnoDB用于事务处理应用程序，具有众多特性，包括ACID事务支持。如果应用中需要执行大量的INSERT或UPDATE操作，则应该使用InnoDB，这样可以提高多用户并发操作的性能。现在默认使用InnoDB。</p>\n<p></p>\n<h2 id=\"4.%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8C%E4%B9%B1%E7%A0%81\"><strong>4.</strong><strong>了解一下字符集和乱码</strong></h2>\n<h3 id=\"%E5%AD%97%E7%AC%A6%E9%9B%86%E7%AE%80%E4%BB%8B\"><strong>字符集简介</strong></h3>\n<p>我们知道在计算机中只能存储二进制数据，那该怎么存储字符串呢？当然是建立字符与二进制数据的映射关系了，</p>\n<p>建立这个关系最起码要搞清楚两件事儿：</p>\n<p><strong>1. 你要把哪些字符映射成二进制数据？</strong></p>\n<p>也就是界定清楚字符范围。</p>\n<p><strong>2. 怎么映射？</strong></p>\n<p>将一个字符映射成一个二进制数据的过程也叫做 编码 ，将一个二进制数据映射到一个字符的过程叫做 解码 。人们抽象出一个 字符集 的概念来描述某个字符范围的编码规则</p>\n<p>我们看一下一些常用字符集的情况：</p>\n<p><strong>ASCII 字符集</strong></p>\n<p>共收录128个字符，包括空格、标点符号、数字、大小写字母和一些不可见字符。由于总共才128个字符，所以可以使用1个字节来进行编码，我们看一些字符的编码方式：</p>\n<ul><li>'L' -&gt; 01001100（十六进制：0x4C，十进制：76）</li><li>'M' -&gt; 01001101（十六进制：0x4D，十进制：77）</li></ul>\n<p><strong>ISO 8859-1 字符集</strong></p>\n<p>共收录256个字符，是在 ASCII 字符集的基础上又扩充了128个西欧常用字符(包括德法两国的字母)，也可以使用1个字节来进行编码。这个字符集也有一个别名 latin1 。</p>\n<p></p>\n<p><strong>GB2312 字符集</strong></p>\n<p>收录了汉字以及拉丁字母、希腊字母、日文平假名及片假名字母、俄语西里尔字母。其中收录汉字6763个，其他文字符号682个。同时这种字符集又兼容 ASCII 字符集，所以在编码方式上显得有些奇怪：</p>\n<ul><li>如果该字符在 ASCII 字符集中，则采用1字节编码。</li><li>否则采用2字节编码。</li></ul>\n<p>这种表示一个字符需要的字节数可能不同的编码方式称为 变长编码方式 。比方说字符串 '爱u' ，其</p>\n<p>中 '爱' 需要用2个字节进行编码，编码后的十六进制表示为 0xCED2 ， 'u' 需要用1个字节进行编码，编码后的十六进制表示为 0x75 ，所以拼合起来就是 0xCED275 。</p>\n<p></p>\n<p>小贴士： 我们怎么区分某个字节代表一个单独的字符还是代表某个字符的一部分呢？别忘了 ASCII 字符集只收录128个字符，使用0～127就可以表示全部字符，所以如果某个字节是在0～127之内的，就意味着一个字节代表一个单独的字符，否则就是两个字节代表一个单独的字符。</p>\n<p></p>\n<p><strong>GBK 字符集</strong></p>\n<p>GBK 字符集只是在收录字符范围上对 GB2312 字符集作了扩充，编码方式上兼容 GB2312 。</p>\n<p></p>\n<p><strong>utf8 字符集</strong></p>\n<p>收录地球上能想到的所有字符，而且还在不断扩充。这种字符集兼容 ASCII 字符集，采用变长编码方式，编码一个字符需要使用1～4个字节，比方说这样：</p>\n<ul><li>'L' -&gt; 01001100（十六进制：0x4C）</li><li>'啊' -&gt; 111001011001010110001010（十六进制：0xE5958A）</li></ul>\n<p></p>\n<p>小贴士： 其实准确的说，utf8只是Unicode字符集的一种编码方案，Unicode字符集可以采用utf8、</p>\n<p>utf16、utf32这几种编码方案，utf8使用1～4个字节编码一个字符，utf16使用2个或4个字节编码一个字符，utf32使用4个字节编码一个字符。更详细的Unicode和其编码方案的知识不是本书的重点，大家上网查查哈～ MySQL中并不区分字符集和编码方案的概念，所以后边唠叨的时候把utf8、utf16、utf32 都当作一种字符集对待。</p>\n<p></p>\n<p>对于同一个字符，不同字符集也可能有不同的编码方式。比如对于汉字 '我' 来说， ASCII 字符集中根本没有收录这个字符， utf8 和 gb2312 字符集对汉字 我 的编码方式如下：</p>\n<ul><li>utf8编码：111001101000100010010001 (3个字节，十六进制表示是：0xE68891)</li><li>gb2312编码：1100111011010010 (2个字节，十六进制表示是：0xCED2)</li></ul>\n<p></p>\n<h2 id=\"5.MySQL%E4%B8%AD%E7%9A%84utf8%E5%92%8Cutf8mb4\"><strong>5.MySQL中的utf8</strong><strong>和</strong><strong>utf8mb4</strong></h2>\n<p>我们上边说 utf8 字符集表示一个字符需要使用1～4个字节，但是我们常用的一些字符使用1～3个字节就可以表示了。而在 MySQL 中字符集表示一个字符所用最大字节长度在某些方面会影响系统的存储和性能，所以设计 MySQL的大叔偷偷的定义了两个概念：</p>\n<ul><li>utf8mb3 ：阉割过的 utf8 字符集，只使用1～3个字节表示字符。</li><li>utf8mb4 ：正宗的 utf8 字符集，使用1～4个字节表示字符。</li></ul>\n<p>有一点需要大家十分的注意，在 MySQL 中 utf8 是 utf8mb3 的别名，所以之后在 MySQL 中提到 utf8 就意味着使用1~3个字节来表示一个字符，如果大家有使用4字节编码一个字符的情况，比如存储一些emoji表情啥的，那请使用 utf8mb4 。</p>\n<p></p>\n<h3 id=\"%E5%AD%97%E7%AC%A6%E9%9B%86%E7%9A%84%E6%9F%A5%E7%9C%8B\"><strong>字符集的查看</strong></h3>\n<p>MySQL 支持好多好多种字符集，查看当前 MySQL 中支持的字符集可以用下边这个语句：</p>\n<p>show charset;</p>\n<p></p>\n<h1 id=\"8.MySQL%C2%A0%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%C2%A0DML\">8.MySQL 数据操作 DML</h1>\n<p>数据的DML操作：添加数据，修改数据，删除数据</p>\n<p></p>\n<h2>添加数据</h2>\n<p>格式： insert into 表名[(字段列表)] values(值列表...);</p>\n<p><strong>--标准添加（指定所有字段，给定所有的值）</strong></p>\n<p>mysql&gt; insert into stu(id,name,age,sex,classid) values(1,'zhangsan',20,'m','lamp138');</p>\n<p>Query OK, 1 row affected (0.13 sec)</p>\n<p></p>\n<p><strong>--指定部分字段添加值</strong></p>\n<p>mysql&gt; insert into stu(name,classid) value('lisi','lamp138');</p>\n<p>Query OK, 1 row affected (0.11 sec)</p>\n<p></p>\n<p><strong>-- 不指定字段添加值</strong></p>\n<p>mysql&gt; insert into stu value(null,'wangwu',21,'w','lamp138');</p>\n<p>Query OK, 1 row affected (0.22 sec)</p>\n<p></p>\n<p>-- 批量添加值</p>\n<p>mysql&gt; insert into stu values</p>\n<p>-&gt; (null,'zhaoliu',25,'w','lamp94'),</p>\n<p>-&gt; (null,'uu01',26,'m','lamp94'),</p>\n<p>-&gt; (null,'uu02',28,'w','lamp92'),</p>\n<p>-&gt; (null,'qq02',24,'m','lamp92'),</p>\n<p>-&gt; (null,'uu03',32,'m','lamp138'),</p>\n<p>-&gt; (null,'qq03',23,'w','lamp94'),</p>\n<p>-&gt; (null,'aa',19,'m','lamp138');</p>\n<p>Query OK, 7 rows affected (0.27 sec)</p>\n<p>Records: 7 Duplicates: 0 Warnings: 0</p>\n<p></p>\n<h2 id=\"%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE\">修改数据</h2>\n<p>格式：update 表名 set 字段1=值1,字段2=值2,字段n=值n... where 条件</p>\n<p>-- 将id为11的age改为35，sex改为m值</p>\n<p>mysql&gt; update stu set age=35,sex='m' where id=11;</p>\n<p>Query OK, 1 row affected (0.16 sec)</p>\n<p>Rows matched: 1 Changed: 1 Warnings: 0</p>\n<p></p>\n<p>-- 将id值为12和14的数据值sex改为m，classid改为lamp92</p>\n<p>mysql&gt; update stu set sex='m',classid='lamp92' where id=12 or id=14 --等价于下面</p>\n<p>mysql&gt; update stu set sex='m',classid='lamp92' where id in(12,14);</p>\n<p>Query OK, 2 rows affected (0.09 sec)</p>\n<p>Rows matched: 2 Changed: 2 Warnings: 0</p>\n<h2></h2>\n<h2 id=\"%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE\">删除数据</h2>\n<p>格式：delete from 表名 [where 条件]</p>\n<p></p>\n<p><strong>-- 删除stu表中id值为100的数据</strong></p>\n<p>mysql&gt; delete from stu where id=100;</p>\n<p>Query OK, 0 rows affected (0.00 sec)</p>\n<p></p>\n<p><strong>-- 删除stu表中id值为20到30的数据</strong></p>\n<p>mysql&gt; delete from stu where id&gt;=20 and id&lt;=30;</p>\n<p>Query OK, 0 rows affected (0.00 sec)</p>\n<p></p>\n<p><strong>-- 删除stu表中id值为20到30的数据（等级于上面写法）</strong></p>\n<p>mysql&gt; delete from stu where id between 20 and 30;</p>\n<p>Query OK, 0 rows affected (0.00 sec)</p>\n<p></p>\n<p><strong>-- 删除stu表中id值大于200的数据</strong></p>\n<p>mysql&gt; delete from stu where id&gt;200;</p>\n<p>Query OK, 0 rows affected (0.00 sec)</p>\n<p></p>\n<h1 id=\"9.MySQL%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2SQL\">9.MySQL数据查询SQL</h1>\n<p></p>\n<p><strong>语法格式：</strong></p>\n<p>select 字段列表|* from 表名</p>\n<p>[where 搜索条件]</p>\n<p>[group by 分组字段 [having 分组条件]]</p>\n<p>[order by 排序字段 排序规则]</p>\n<p>[limit 分页参数]</p>\n<p></p>\n<h2 id=\"%E5%9F%BA%E7%A1%80%E6%9F%A5%E8%AF%A2\">基础查询</h2>\n<p># 查询表中所有列 所有数据</p>\n<p>select * from users;</p>\n<p></p>\n<p># 指定字段列表进行查询</p>\n<p>select id,name,phone from users;</p>\n<p></p>\n<h2 id=\"Where%C2%A0%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2\">Where 条件查询</h2>\n<p>可以在where子句中指定任何条件</p>\n<p>可以使用 and 或者 or 指定一个或多个条件</p>\n<p>where条件也可以运用在update和delete语句的后面</p>\n<p>where子句类似程序语言中if条件，根据mysql表中的字段值来进行数据的过滤</p>\n<p></p>\n<p>示例：</p>\n<p><strong>-- 查询users表中 age &gt; 22的数据</strong></p>\n<p>select * from users where age &gt; 22;</p>\n<p></p>\n<p><strong>-- 查询 users 表中 name=某个条件值 的数据</strong></p>\n<p>select * from users where name = '王五';</p>\n<p></p>\n<p><strong>-- 查询 users 表中 年龄在22到25之间的数据</strong></p>\n<p>select * from users where age &gt;= 22 and age &lt;= 25;</p>\n<p>select * from users where age between 22 and 25;</p>\n<p></p>\n<p><strong>-- 查询 users 表中 年龄不在22到25之间的数据</strong></p>\n<p>select * from users where age &lt; 22 or age &gt; 25;</p>\n<p>select * from users where age not between 22 and 25;</p>\n<p></p>\n<p><strong>-- 查询 users 表中 年龄在22到25之间的女生信息</strong></p>\n<p>select * from users where age &gt;= 22 and age &lt;= 25 and sex = '女';</p>\n<p></p>\n<p><strong>and和or 使用时注意</strong></p>\n<p>假设要求 查询 users 表中 年龄为22或者25 的女生信息</p>\n<p>select * from users where age=22 or age = 25 and sex = '女';</p>\n<p>思考上面的语句能否返回符合条件的数据？</p>\n<p></p>\n<p>实际查询结果并不符合要求？</p>\n<p>select * from users where age=22 or age = 25 and sex = '女';</p>\n<p>+------+--------+------+-------+-------+------+------+</p>\n<p>| id | name | age | phone | email | sex | mm |</p>\n<p>+------+--------+------+-------+-------+------+------+</p>\n<p>| 1 | 章三 | 22 | | NULL | 男 | 0 |</p>\n<p>| 1002 | cc | 25 | 123 | NULL | 女 | NULL |</p>\n<p>+------+--------+------+-------+-------+------+------+</p>\n<p>2 rows in set (0.00 sec)</p>\n<p></p>\n<p>-- 上面的查询结果并不符合 查询条件的要求。</p>\n<p>-- 问题出在 sql 计算的顺序上，sql会优先处理and条件，所以上面的sql语句就变成了</p>\n<p>-- 查询变成了为年龄22的不管性别，或者年龄为 25的女生</p>\n<p></p>\n<p>-- 如何改造sql符合我们的查询条件呢？</p>\n<p>-- 使用小括号来关联相同的条件</p>\n<p>select * from users where (age=22 or age = 25) and sex = '女';</p>\n<p>+------+------+------+-------+-------+------+------+</p>\n<p>| id | name | age | phone | email | sex | mm |</p>\n<p>+------+------+------+-------+-------+------+------+</p>\n<p>| 1002 | cc | 25 | 123 | NULL | 女 | NULL |</p>\n<p>+------+------+------+-------+-------+------+------+</p>\n<p>1 row in set (0.00 sec)</p>\n<p></p>\n<h2 id=\"Like%C2%A0%E5%AD%90%E5%8F%A5\">Like 子句</h2>\n<p>我们可以在where条件中使用=,&lt;,&gt; 等符合进行条件的过滤，但是当想查询某个字段是否包含时如何过滤？</p>\n<p>可以使用like语句进行某个字段的模糊搜索，</p>\n<p></p>\n<p><strong>例如： 查询 name字段中包含五的数据</strong></p>\n<p>-- like 语句 like某个确定的值 和。where name = '王五' 是一样</p>\n<p></p>\n<p>select * from users where name like '王五';</p>\n<p>+----+--------+------+-------+-----------+------+------+</p>\n<p>| id | name | age | phone | email | sex | mm |</p>\n<p>+----+--------+------+-------+-----------+------+------+</p>\n<p>| 5 | 王五 | 24 | 10011 | ww@qq.com | 男 | 0 |</p>\n<p>+----+--------+------+-------+-----------+------+------+</p>\n<p>1 row in set (0.00 sec)</p>\n<p></p>\n<p>-- 使用 % 模糊搜索。%代表任意个任意字符</p>\n<p><strong>-- 查询name字段中包含五的</strong></p>\n<p>select * from users where name like '%五%';</p>\n<p></p>\n<p><strong>-- 查询name字段中最后一个字符 为 五的</strong></p>\n<p>select * from users where name like '%五';</p>\n<p></p>\n<p><strong>-- 查询name字段中第一个字符 为 王 的</strong></p>\n<p>select * from users where name like '王%';</p>\n<p></p>\n<p>-- 使用 _ 单个的下划线。表示一个任意字符，使用和%类似</p>\n<p><strong>-- 查询表中 name 字段为两个字符的数据</strong></p>\n<p>select * from users where name like '__';</p>\n<p></p>\n<p><strong>-- 查询 name 字段最后为五，的两个字符的数据</strong></p>\n<p>select * from users where name like '_五';</p>\n<p></p>\n<p>注意：where子句中的like在使用%或者_进行模糊搜索时，效率不高，使用时注意：</p>\n<p>尽可能的不去使用%或者_</p>\n<p>如果需要使用，也尽可能不要把通配符放在开头处</p>\n<p></p>\n<p><strong>Mysql中的统计函数（聚合函数）</strong></p>\n<p>max(),min(),count(),sum(),avg()</p>\n<p></p>\n<p><strong># 计算 users 表中 最大年龄，最小年龄，年龄和及平均年龄</strong></p>\n<p>select max(age),min(age),sum(age),avg(age) from users;</p>\n<p>+----------+----------+----------+----------+</p>\n<p>| max(age) | min(age) | sum(age) | avg(age) |</p>\n<p>+----------+----------+----------+----------+</p>\n<p>| 28 | 20 | 202 | 22.4444 |</p>\n<p>+----------+----------+----------+----------+</p>\n<p></p>\n<p>-- 上面数据中的列都是在查询时使用的函数名，不方便阅读和后期的调用，可以通过别名方式 美化</p>\n<p>select max(age) as max_age,</p>\n<p>min(age) min_age,sum(age) as sum_age,</p>\n<p>avg(age) as avg_age</p>\n<p>from users;</p>\n<p>+---------+---------+---------+---------+</p>\n<p>| max_age | min_age | sum_age | avg_age |</p>\n<p>+---------+---------+---------+---------+</p>\n<p>| 28 | 20 | 202 | 22.4444 |</p>\n<p>+---------+---------+---------+---------+</p>\n<p></p>\n<p><strong>-- 统计 users 表中的数据量</strong></p>\n<p>select count(*) from users;</p>\n<p>+----------+</p>\n<p>| count(*) |</p>\n<p>+----------+</p>\n<p>| 9 |</p>\n<p>+----------+</p>\n<p>select count(id) from users;</p>\n<p>+-----------+</p>\n<p>| count(id) |</p>\n<p>+-----------+</p>\n<p>| 9 |</p>\n<p>+-----------+</p>\n<p></p>\n<p>-- 上面的两个统计，分别使用了 count(*) 和 count(id),结果目前都一样，有什么区别？</p>\n<p>-- count(*) 是按照 users表中所有的列进行数据的统计，只要其中一列上有数据，就可以计算</p>\n<p>-- count(id) 是按照指定的 id 字段进行统计，也可以使用别的字段进行统计，</p>\n<p>-- 但是注意，如果指定的列上出现了NULL值，那么为NULL的这个数据不会被统计</p>\n<p>-- 假设有下面这样的一张表需要统计</p>\n<p>+------+-----------+------+--------+-----------+------+------+</p>\n<p>| id | name | age | phone | email | sex | mm |</p>\n<p>+------+-----------+------+--------+-----------+------+------+</p>\n<p>| 1 | 章三 | 22 | | NULL | 男 | 0 |</p>\n<p>| 2 | 李四 | 20 | | NULL | 女 | 0 |</p>\n<p>| 5 | 王五 | 24 | 10011 | ww@qq.com | 男 | 0 |</p>\n<p>| 1000 | aa | 20 | 123 | NULL | 女 | NULL |</p>\n<p>| 1001 | bb | 20 | 123456 | NULL | 女 | NULL |</p>\n<p>| 1002 | cc | 25 | 123 | NULL | 女 | NULL |</p>\n<p>| 1003 | dd | 20 | 456 | NULL | 女 | NULL |</p>\n<p>| 1004 | ff | 28 | 789 | NULL | 男 | NULL |</p>\n<p>| 1005 | 王五六 | 23 | 890 | NULL | NULL | NULL |</p>\n<p>+------+-----------+------+--------+-----------+------+------+</p>\n<p>9 rows in set (0.00 sec)</p>\n<p></p>\n<p>-- 如果按照sex这一列进行统计，结果就是8个而不是9个，因为sex这一列中有NULL值存在</p>\n<p>mysql&gt; select count(sex) from users;</p>\n<p>+------------+</p>\n<p>| count(sex) |</p>\n<p>+------------+</p>\n<p>| 8 |</p>\n<p>+------------+</p>\n<p></p>\n<p>聚合函数除了以上简单的使用意外，通常情况下都是配合着分组进行数据的统计和计算</p>\n<p></p>\n<h2 id=\"Group%20BY%C2%A0%E5%88%86%E7%BB%84\">Group BY 分组</h2>\n<p></p>\n<p><strong>group by 语句根据一个或多个列对结果集进行分组</strong></p>\n<p>一般情况下，是用与数据的统计或计算，配合聚合函数使用</p>\n<p></p>\n<p><strong>-- 统计 users 表中 男女生人数</strong></p>\n<p>-- 很明显按照上面的需要，可以写出两个语句进行分别统计</p>\n<p>select count(*) from users where sex = '女';</p>\n<p>select count(*) from users where sex = '男';</p>\n<p>-- 可以使用分组进行统计，更方便</p>\n<p>select sex,count(*) from users group by sex;</p>\n<p>+------+----------+</p>\n<p>| sex | count(*) |</p>\n<p>+------+----------+</p>\n<p>| 男 | 4 |</p>\n<p>| 女 | 5 |</p>\n<p></p>\n<p>+------+----------+</p>\n<p></p>\n<p><strong>-- 统计1班和2班的人数</strong></p>\n<p>select classid,count(*) from users group by classid;</p>\n<p>+---------+----------+</p>\n<p>| classid | count(*) |</p>\n<p>+---------+----------+</p>\n<p>| 1 | 5 |</p>\n<p>| 2 | 4 |</p>\n<p>+---------+----------+</p>\n<p></p>\n<p><strong>-- 分别统计每个班级的男女生人数</strong></p>\n<p>select classid,sex,count(*) as num from users group by classid,sex;</p>\n<p>+---------+------+-----+</p>\n<p>| classid | sex | num |</p>\n<p>+---------+------+-----+</p>\n<p>| 1 | 男 | 2 |</p>\n<p>| 1 | 女 | 3 |</p>\n<p>| 2 | 男 | 2 |</p>\n<p>| 2 | 女 | 2 |</p>\n<p>+---------+------+-----+</p>\n<p></p>\n<p># 注意，在使用。group by分组时，一般除了聚合函数，其它在select后面出现的字段列都需要出现在grouop by 后面</p>\n<p></p>\n<h2 id=\"Having%C2%A0%E5%AD%90%E5%8F%A5\">Having 子句</h2>\n<p></p>\n<p><strong>having时在分组聚合计算后，对结果再一次进行过滤，类似于where，</strong></p>\n<p>where过滤的是行数据，having过滤的是分组数据</p>\n<p></p>\n<p></p>\n<p><strong>-- 要统计班级人数</strong></p>\n<p>select classid,count(*) from users group by classid;</p>\n<p></p>\n<p><strong>-- 统计班级人数，并且要人数达到5人及以上</strong></p>\n<p>select classid,count(*) as num from users group by classid having num &gt;=5;</p>\n<p></p>\n<h2 id=\"Order%20by%C2%A0%E6%8E%92%E5%BA%8F\">Order by 排序</h2>\n<p></p>\n<p>我们在mysql中使用select的语句查询的数据结果是根据数据在底层文件的结构来排序的，</p>\n<p>首先不要依赖默认的排序，另外在需要排序时要使用orderby对返回的结果进行排序</p>\n<p></p>\n<p>Asc 升序，默认</p>\n<p>desc降序</p>\n<p><strong>-- 按照年龄对结果进行排序，从大到小</strong></p>\n<p>select * from users order by age desc;</p>\n<p></p>\n<p><strong>-- 从小到大排序 asc 默认就是。可以不写</strong></p>\n<p>select * from users order by age;</p>\n<p></p>\n<p><strong>-- 也可以按照多个字段进行排序</strong></p>\n<p>select * from users order by age,id; # 先按照age进行排序，age相同情况下，按照id进行排序</p>\n<p>select * from users order by age,id desc;</p>\n<p></p>\n<h2 id=\"Limit%C2%A0%E6%95%B0%E6%8D%AE%E5%88%86%E9%A1%B5\">Limit 数据分页</h2>\n<p>limit n 提取n条数据，</p>\n<p>limit m,n 跳过m跳数据，提取n条数据</p>\n<p></p>\n<p></p>\n<p><strong>-- 查询users表中的数据，只要3条</strong></p>\n<p>select * from users limit 3;</p>\n<p></p>\n<p><strong>-- 跳过前4条数据，再取3条数据</strong></p>\n<p>select * from users limit 4,3;</p>\n<p></p>\n<p><strong>-- limit一般应用在数据分页上面</strong></p>\n<p>-- 例如每页显示10条数据，第三页的 limit应该怎么写？ 思考</p>\n<p>第一页 limit 0,10</p>\n<p>第二页 limit 10,10</p>\n<p>第三页 limit 20,10</p>\n<p>第四页 limit 30,10</p>\n<p></p>\n<p><strong>-- 提取 user表中 年龄最大的三个用户数据 怎么查询？</strong></p>\n<p>select * from users order by age desc limit 3;</p>\n<p></p>\n<h1 id=\"10.Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E5%92%8C%E6%8E%88%E6%9D%83\">10.Mysql数据库导入导出和授权</h1>\n<p></p>\n<h2 id=\"%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%87%BA\">数据导出</h2>\n<h3 id=\"1.%E6%95%B0%E6%8D%AE%E5%BA%93%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%87%BA\"><strong>1.数据库数据导出</strong></h3>\n<p></p>\n<p># 不要进入mysql，然后输入以下命令 导出某个库中的数据</p>\n<p>mysqldump -u root -p tlxy &gt; ~/Desktop/code/tlxy.sql</p>\n<p></p>\n<p>导出一个库中所有数据，会形成一个建表和添加语句组成的sql文件之后可以用这个sql文件到别的库，或着本机中创建或回复这些数据</p>\n<p></p>\n<h3 id=\"2.%E5%B0%86%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84%E8%A1%A8%E5%AF%BC%E5%87%BA\"><strong>2.将数据库中的表导出</strong></h3>\n<p></p>\n<p># 不要进入mysql，然后输入以下命令 导出某个库中指定的表的数据</p>\n<p>mysqldump -u root -p tlxy tts &gt; ~/Desktop/code/tlxy-tts.sql</p>\n<p></p>\n<h2 id=\"%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5\">数据导入</h2>\n<p></p>\n<h3 id=\"%E6%8A%8A%E5%AF%BC%E5%87%BA%E7%9A%84sql%E6%96%87%E4%BB%B6%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%88%B0mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD\">把导出的sql文件数据导入到mysql数据库中</h3>\n<p># 在新的数据库中 导入备份的数据，导入导出的sql文件</p>\n<p>mysql -u root -p ops &lt; ./tlxy.sql</p>\n<p></p>\n<h3 id=\"%23%C2%A0%E6%8A%8A%E5%AF%BC%E5%87%BA%E7%9A%84%E8%A1%A8sql%C2%A0%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93\"># 把导出的表sql 导入数据库</h3>\n<p>mysql -u root -p ops &lt; ./tlxy-tts.sql</p>\n<p></p>\n<h2 id=\"%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86\">权限管理</h2>\n<p>mysql中的root用户是数据库中权限最高的用户，千万不要用在项目中。</p>\n<p>可以给不同的用户，或者项目，创建不同的mysql用户，并适当的授权，完成数据库的相关操作。这样就一定程度上保证了数据库的安全。</p>\n<p></p>\n<h3 id=\"%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E7%9A%84%E8%AF%AD%E6%B3%95%E6%A0%BC%E5%BC%8F%EF%BC%9A\">创建用户的语法格式：</h3>\n<p>grant 授权的操作 on 授权的库.授权的表 to 账户@登录地址 identified by ‘密码’;</p>\n<p></p>\n<p><strong>示例：</strong></p>\n<p># 在mysql中 创建一个 zhangsan 用户，授权可以对tlxy这个库中的所有表 进行 添加和查询 的权限</p>\n<p>grant select,insert on tlxy.* to zhangsan@'%' identified by '123456';</p>\n<p></p>\n<p># 用户 lisi。密码 123456 可以对tlxy库中的所有表有 所有操作权限</p>\n<p>grant all on tlxy.* to lisi@'%' identified by '123456';</p>\n<p></p>\n<h3 id=\"%23%C2%A0%E5%88%A0%E9%99%A4%E7%94%A8%E6%88%B7\"># 删除用户</h3>\n<p>drop user 'lisi'@'%';</p>\n<p></p>\n<p><strong>热门专栏推荐：</strong></p>\n<p>🥇 <a href=\"https://blog.csdn.net/weixin_39032019/category_11048805.html\" title=\"大数据集锦专栏：大数据-硬核学习资料 &amp; 面试真题集锦 \">大数据集锦专栏：大数据-硬核学习资料 &amp; 面试真题集锦 </a><br/> 🥈 <a href=\"https://blog.csdn.net/weixin_39032019/category_8871528.html\" title=\"数据仓库专栏：数仓发展史、建设方法论、实战经验、面试真题 \">数据仓库专栏：数仓发展史、建设方法论、实战经验、面试真题 </a><br/> 🥉 <a href=\"https://blog.csdn.net/weixin_39032019/category_8974792.html\" title=\"Python专栏：Python相关黑科技：爬虫、算法、小工具 \">Python专栏：Python相关黑科技：爬虫、算法、小工具 </a></p>\n<p>（优质好文持续更新中……）✍</p>\n<p></p>\n<p><img alt=\"\" height=\"127\" src=\"https://img-blog.csdnimg.cn/img_convert/878c9ac23e40e4916cbd96031081aef1.gif\" width=\"455\"/></p>\n<p></p>\n</div>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 1, "sql": 1, "php": 1, "time": "2021-10-24 11:37:14", "summary": "作者主页：不吃西红柿不吃西红柿简介：博客专家、信息技术智库公号作者简历模板、模板、学习资料、面试题库、技术互助关注我，都给你欢迎点赞收藏留言耗时年整理，硬核文章目录：目录数据库的介绍数据库的介绍什么是"}