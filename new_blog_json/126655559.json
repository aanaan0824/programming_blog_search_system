{"blogid": "126655559", "writerAge": "码龄1年", "writerBlogNum": "135", "writerCollect": "145", "writerComment": "201", "writerFan": "1325", "writerGrade": "5级", "writerIntegral": "1924", "writerName": "从未止步..", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126655559.jpg", "writerRankTotal": "10359", "writerRankWeekly": "945", "writerThumb": "315", "writerVisitNum": "25127", "blog_read_count": "789", "blog_time": "于 2022-09-03 10:25:20 发布", "blog_title": "Java入门-----基本语法", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"Java_0\"></a>Java程序的基本格式：</h2>\n<p>Java程序代码必须放在一个类中，刚开始学习时，我们可以将类看作一个Java程序。</p>\n<p>类使用关键字class定义，在class前面可以有类的修饰符。</p>\n<p>类的定义格式如下：</p>\n<blockquote>\n<p>修饰符 class 类名{ <br/> 程序代码<br/> }</p>\n</blockquote>\n<p><strong>1：Java程序代码可分为执行定义语句和功能执行语句</strong>，其中，结构定义语句用于声明一个类或方法，功能执行语句用于实现具体的功能，<strong>每条功能执行语句的最后必须用分号结束（;）。</strong></p>\n<p>举例：</p>\n<blockquote>\n<p>System.out.println(“这是第一个Java程序”);</p>\n</blockquote>\n<p>需要注意的是，在程序中，不要将英文的分号写成中文的分号。</p>\n<p>否则编译器会出现如下所示的错误：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\adb8b14cbcba4fb09816bf4a046a668c.png\"/><strong>2：Java语言是严格区分大小写的</strong>，在定义类时，不能将class写成Class，否则编译器会出现如下错误：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3ca1cc77119b4dff8334c31bb7f30ee3.png\"/><br/> <strong>假设在程序中定义了一个Computer，computer和Computer是两个完全不同的符号，因此在编写程序的时候需要注意！</strong></p>\n<p><strong>3：在编写Java程序时，为了方便阅读</strong>，通常会使用一种良好的书写格式进行排版，但这并不是必需的，<strong>我们可以在两个单词或符号之间插入空格，制表符以及换行符等任意的空白字符。</strong></p>\n<p>举例：</p>\n<p>第一种书写形式：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> \n    <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好，Java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"prism language-java\">你好，<span class=\"token class-name\">Java</span>\n</code></pre>\n<p>虽然Java语言并没有严格要求使用什么样的格式编排程序代码，但是，为了提高可读性，应该使自己编写的代码整齐美观，层次清晰。</p>\n<p>常用的编排方式即为如下所示第二种的这种形式，<strong>一行只写一条语句，符号“{”与语句同行，符号“}”独占一行。</strong></p>\n<p>第二种书写形式：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好，Java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>4：Java程序中一个连续的字符串不能分成两行书写。</strong></p>\n<p>举例：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>\"你好\n                <span class=\"token class-name\">Java</span>\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>编译并不能通过，出现以下错误：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0aa26e411a08490d8138fbc161b35fdb.png\"/>但有些字符串太长，必须两行才能够显示出来，针对这种情况，我们可以<strong>将字符串分成两个字符串，然后使用加号（+）将这两个字符串连接起来，在加号（+）处换行</strong>，例如：可以将上面的语句修改为如下所示：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好\"</span><span class=\"token operator\">+</span>\n                <span class=\"token string\">\"Java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>此时就可以输出正常结果啦！</p>\n<h2><a id=\"Java_80\"></a>Java中的注释：</h2>\n<h3><a id=\"_82\"></a>单行注释：</h3>\n<p><strong>单行注释用于对程序中某一行代码进行解释，一般用来注释局部变量，单行注释用符号“//”表示，“//”后面为被注释的内容。</strong></p>\n<p>举例：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//定义一个整形变量c</span>\n</code></pre>\n<h3><a id=\"_91\"></a>多行注释：</h3>\n<p><em><em>多行注释顾名思义就是注释的内容可以为多行，它以符号“/</em> ”开头，以符号\"*/\"结束。</em>*</p>\n<p>举例：</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/*int c=10;\nint x=5;*/</span>\n</code></pre>\n<h3><a id=\"_101\"></a>文档注释：</h3>\n<p>文档注释是以“/**”开头，并在注释内容末尾以“*/”结束。文档注释是对一段代码概括性的解释说明，可以使用javadoc命令将文档注释提取出来生成帮助文档。</p>\n<p>举例：</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\nname=\"黑马程序员\";\n*/</span>\n</code></pre>\n<h2><a id=\"Java_112\"></a>Java中的标识符：</h2>\n<p>和我们之前学过的C语言、Python等一样，在使用Java语言进行编程的过程中也需要定义一些符号标记一些名称，如类名，方法名，变量名等等，这些符号我们统称为标识符。</p>\n<p><strong>标识符可以是由字母，下划线，数字和美元符号（￥）组成，但不能是Java中的关键字，并且数字不可以开头。</strong></p>\n<p>标识符的定义规则和C语言相同，这里就不过多赘述了。</p>\n<p><strong>为了增加代码的可读性，在定义标识符时以下规则建议遵循：</strong></p>\n<p>1：包名所有字母一律小写，例如：cn.itcast.test</p>\n<p>2:类名和接口名每个单词的首字母都要大写，例如：ArrayList,Iterator</p>\n<p>3:常量名所有字母大写，单词之间用下划线连接，例如：DAY_OF_MONTH</p>\n<p>4:变量名和方法名的第一个单词首字母小写，从第二个单词开始每个单词首字母大写，例如：lineNumber,getLineNUmber.</p>\n<p>5:在程序中，应该尽可能的使用有意义的单词定义标识符，使得程序能够便于阅读，例如:定义用户名----username,定义密码----password</p>\n<h2><a id=\"Java_131\"></a>Java中的关键字：</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1e1d8118b8b141e59aa17bb56b45f3c6.jpeg\"/><strong>注意：</strong></p>\n<p>1：所有的关键字都是小写的。</p>\n<p>2：不能使用关键字命名标识符</p>\n<p>3：const和goto是保留关键字，虽然在Java中还没有任何意义，但在程序中不能用来作为自定义的标识符。</p>\n<p>4：true，false和null虽然不属于关键字，但他们具有特殊的意义，也不能作为标识符使用。</p>\n<h2><a id=\"Java_143\"></a>Java中的常量：</h2>\n<p><strong>常量就是固定不变的值，是不能改变的数据。</strong></p>\n<p>举例：</p>\n<p>数字1，字符‘a’,浮点数3.14等都是常量。</p>\n<p><strong>在Java中，常量包括整形常量，浮点数常量，布尔常量，字符常量等。</strong></p>\n<h3><a id=\"_152\"></a>整形常量：</h3>\n<p><strong>整形常量是整数类型的数据，有二进制，八进制，以及十六进制。</strong></p>\n<p>在程序中为了标明不同的进制，数据都有特定的标识。</p>\n<p>八进制必须以0开头，例如：0211,0432，</p>\n<p>十六进制必须以0x或0X开头，例如：0xaf2,0Xdd</p>\n<p>整数以十进制表示时，第一位不能是0,。</p>\n<h3><a id=\"_163\"></a>浮点数常量：</h3>\n<p><strong>浮点数常量就是数学中用到的小数。浮点数分为单精度浮点数（float）和双精度浮点数（double）两种类型。</strong></p>\n<p><strong>单精度浮点数后面以F/f结束，而双精度浮点数后面以D/d结束</strong>，当然，在使用浮点数时也可以在结尾处不加任何的后缀，此时JVM会默认浮点数为double类型的浮点数，浮点数常量还可以通过指数形式表示。</p>\n<h3><a id=\"_168\"></a>字符常量：</h3>\n<p><strong>字符常量用于表示一个字符，一个字符常量要用一对英文半角格式的单引号（‘’）括起来，字符常量可以是英文字母，数字，标点符号，以及由转义序列表示的特殊字符。</strong></p>\n<p>举例：</p>\n<blockquote>\n<p>‘a’ ‘1’ ‘&amp;’ ‘/t’</p>\n</blockquote>\n<h3><a id=\"_176\"></a>字符串常量：</h3>\n<p><strong>字符串常量用于表示一串连续的字符，一个字符串常量要用一对半角格式的双引号（“”）括起来。</strong></p>\n<p>举例：</p>\n<blockquote>\n<p>“HelloWorld” “123” “welcome\\n”</p>\n</blockquote>\n<h3><a id=\"_183\"></a>布尔常量：</h3>\n<p><strong>布尔常量即布尔型的值，用于区分事物的真与假，布尔常量有true和false两个值。</strong></p>\n<h3><a id=\"null_186\"></a>null常量：</h3>\n<p><strong>null常量只有一个值null，表示对象的引用为空。</strong></p>\n<h2><a id=\"_189\"></a>变量的定义：</h2>\n<p>在程序运行期间，随时可能产生一些临时数据，应用程序会将这些临时数据保存在内存单元中，每个内存单元都用一个标识符标识，这些用于标识内存单元的标识符就成为变量，<strong>内存单元中存储的数据就是变量的值。</strong></p>\n<p>通过具体的代码实现变量的定义：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\ny<span class=\"token operator\">=</span>x<span class=\"token operator\">+</span><span class=\"token number\">3</span>\n</code></pre>\n<p>通过上述第一行代码定义了两个变量x和y,与此同时也在内存中分配了两块内存单元，不仅如此，在定义变量的时候，为变量x分配了初始值0，而y没有分配初始值，此时x和y在内存中的状态，如下图所示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\596693855d7a45b2a7069e256601ff9c.png\"/><br/> 通过上述第二行代码，我们为y变量进行赋值，在程序执行到第二行代码的时候，程序首先取出变量x的值，与3相加后，将结果赋值给变量y，此时变量x和y的状态就会发生改变，如下所示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1c3a31cd7d6e4aaab21704f29c52dcee.png\"/></p>\n<h2><a id=\"_204\"></a>变量的数据类型：</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\772a97ab74cd4a6ca175a00c83a20c28.jpeg\"/></p>\n<h3><a id=\"_208\"></a>整数类型变量：</h3>\n<p><strong>整数类型变量用来存储整数数值，即没有小数部分的值</strong>，为了给不同大小范围内的整数合理地分配存储空间，整数类型分为四种不同的类型，分别是字节型（byte）,短整型（short），整形（int）,长整型（long）</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\13fdedc5146648118d0ad0f8a5bbe379.jpeg\"/><strong>注:在为一个long类型的变量赋值时，所赋值的后面要加上字母L（或小写l）,说明赋值为long类型，如果赋的值未超出int的取值范围，则可以省略字母L（或小写l）</strong></p>\n<p>举例：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">long</span> num<span class=\"token operator\">=</span><span class=\"token number\">22000000000L</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//所赋的值超过了int型的取值范围，后面必须加上字母L</span>\n<span class=\"token keyword\">long</span> nums<span class=\"token operator\">=</span><span class=\"token number\">189L</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//所赋的值未超过int型的取值范围，后面可以加字母L</span>\n<span class=\"token keyword\">long</span> nums<span class=\"token operator\">=</span><span class=\"token number\">189</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//所赋的值未超过int型的取值范围，后面的字母L可以省略</span>\n</code></pre>\n<h3><a id=\"_221\"></a>浮点数类型变量：</h3>\n<p><strong>浮点数类型变量用于存储小数数值，double类型所表示的浮点数比float类型更精确。</strong></p>\n<p>下图为两种浮点数所占存储空间的大小以及取值范围：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ebb092e7b24b463db70a3873c5d2245f.jpeg\"/><strong>在Java中，一个小数会被默认成double类型的值，因此在为一个float类型的变量赋值时，在所赋值 的后面一定要加上字母F（或小写字母 f），而为double类型的变量赋值时，可以在所赋值的后面加上字母D（或小写d）,或者可直接省略。</strong></p>\n<p>举例：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">float</span> num<span class=\"token operator\">=</span><span class=\"token number\">3.1423f</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//为一个float类型变量赋值，后面必须加上字f</span>\n<span class=\"token keyword\">double</span> nums<span class=\"token operator\">=</span><span class=\"token number\">98.3</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//为一个double类型变量赋值，后面可以省略字母d</span>\n<span class=\"token keyword\">double</span> nums<span class=\"token operator\">=</span><span class=\"token number\">189.8d</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//为一个double类型变量赋值，后面可以加上字母d</span>\n</code></pre>\n<h3><a id=\"_235\"></a>字符型变量：</h3>\n<p><strong>在Java 中，字符类型变量用char表示，用于存储一个单一字符，Java中每个char类型的字符变量都会占用两个字节。</strong></p>\n<p>在给char类型变量赋值时，需要用一对英文半角式的单引号（‘’）把字符括起来，例如’a’.</p>\n<p>无论是文字还是数字，在计算机中，他们都能够被表示为由连续的0或1表示出来的二进制，但人们是很难理解这种二进制的，于是就产生了各种方式的编码，使用一个数值代表某个字符，如我们在C语言中常用的字符编码系统ASCII</p>\n<p><strong>但Java使用Unicode字符编码系统，Unicode为每个字符制定了一个唯一的数值，在计算时，计算机会自动将字符转化为所对应的数值</strong></p>\n<p>举例：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//为一个char类型的变量赋值字符a</span>\n<span class=\"token keyword\">char</span> ch<span class=\"token operator\">=</span><span class=\"token number\">97</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//为一个char类型的变量赋值整数97，相当于赋值字符a</span>\n</code></pre>\n<h3><a id=\"_251\"></a>布尔类型变量：</h3>\n<p><strong>在Java中，使用boolean定义布尔类型变量，布尔类型变量只有true和false两个值，定义布尔类型变量。</strong></p>\n<p>举例：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">boolean</span> flag<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//定义一个boolean类型的变量flag,初始值为false</span>\nflag<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//改变变量flag的值为true</span>\n</code></pre>\n<h2><a id=\"_262\"></a>变量的类型转换：</h2>\n<h3><a id=\"_264\"></a>自动转换类型：</h3>\n<p><strong>自动类型转换也叫隐式类型转换，指的是两种数据类型在转换的过程中不需要显示地进行声明，由编译器自动完成。</strong></p>\n<p><strong>自动类型转换必须同时满足两个条件：</strong></p>\n<p>一是两种数据类型彼此兼容；</p>\n<p>二是目标类型的取值范围大于源类型的取值范围。</p>\n<p>举例：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">byte</span> b<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>上述代码中，使用byte类型变量b为int类型的变量x赋值，由于int类型的取值范围大于byte类型的取值范围，编译器在赋值过程中不会造成数据的丢失，所以编译器能够自动完成这种转换，在编译时，不报任何错误。</p>\n<p>总的来说就是<strong>取值范围小的转换为取值范围大的实现的是自动转换。</strong></p>\n<p>比如：</p>\n<blockquote>\n<p>byte转化为short,int,long等<br/> short,char转化为int,long</p>\n</blockquote>\n<p>反过来则不能自动进行转化，需要强制类型转化！</p>\n<h2><a id=\"_290\"></a>强制类型转化：</h2>\n<p><strong>强制类型转化也叫做显式类型转化，意为两种数据类型之间的转化需要进行显式的说明</strong>。当两种类型彼此不兼容，或者是将取值范围大的转化为取值范围小的，自动类型转化无法进行，必须进行强制类型转化。</p>\n<p>举例：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> num<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">byte</span> b<span class=\"token operator\">=</span>num<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>编译并没有通过，而是报出以下错误：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f65d988cb98846999e9cfd1c8d924d30.png\"/>解决办法：</p>\n<p>进行强制类型转化，即强制将int类型的值赋给byte类型的变量。</p>\n<blockquote>\n<p>强制类型转化格式：目标类型 变量=（目标类型）值</p>\n</blockquote>\n<p>因此对于上述类型转换，我们可以修改为：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">byte</span> b<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span>num<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>此时便可以正常运行！</p>\n<p><strong>在对变量进行类型转化的时候，如果将取值范围较大的数据类型强制转化为取值范围较小的数据</strong>，例如将int–&gt;byte这种，<strong>则极容易造成数据精度的丢失。</strong></p>\n<p>举例：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">byte</span> a<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">298</span><span class=\"token punctuation\">;</span>\n        a<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span>b<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b=\"</span><span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a=\"</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"prism language-java\">b<span class=\"token operator\">=</span><span class=\"token number\">298</span>\na<span class=\"token operator\">=</span><span class=\"token number\">42</span>\n</code></pre>\n<p>通过输出结果，我们会发现，即使进行了强制类型转化，但a和b的值仍然不同，这就是因为取值范围大的变量类型int转化为取值范围小的变量类型byte的过程中，发生了数据精度的丢失。</p>\n<p>具体原因如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\23f5d409ce1c413588b2546a13682697.png\"/></p>\n<h2><a id=\"_344\"></a>变量的作用域：</h2>\n<p>无论C语言还是Java，变量都需要先定义才能使用，但这并不代表定义了的变量在下面的程序代码中都可以使用，变<strong>量只能在其作用范围内才可以被使用，这个作用范围称为变量的作用域。</strong></p>\n<p><strong>变量一定会被定义在某一对大括号中，该大括号所包含的代码区域便是这个变量的作用域。</strong></p>\n<p>举例：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fa6f4db23b9b46e79bddcaee5cdf9d6d.png\"/>基本了解了变量的定义域后，下面我们通过一个程序熟悉一下:</p>\n<p>举例：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span>  a<span class=\"token operator\">=</span><span class=\"token number\">90</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a is\"</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b is\"</span><span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        a<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a is\"</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>编译未通过，报错如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\25abaf7ef6954e32aa03d593eeb37ddc.png\"/>原因即为：变量y在作用域范围之外被使用，出错代码为：a=b;这一句，由于变量b的作用域为内括号，因此出了这个内括号的范围，变量b便无法使用。</p>\n<h2><a id=\"Java_371\"></a>Java中的运算符：</h2>\n<p><strong>在绝大多数的程序中都出现过以下的特殊符号，例如+,-,*,=,&gt;等等，这些特殊符号叫做运算符，运算符通常用于对数据进行算术运算，赋值运算和比较运算。</strong></p>\n<h3><a id=\"_374\"></a>算数运算符：</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2d24c1dfdb7c4e68b90fbd4171a051c2.jpeg\"/><strong>算术运算符在使用的过程中需要注意以下几点：</strong></p>\n<p>1：在进行自增（++）和自减（–）运算时，如果运算符++或–放在操作数的前面，则先进行自增或自减运算，再进行其他运算。反之，如果运算符放在操作数的后面，则先进行其他运算再进行自增或自减运算。</p>\n<p>举例：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span>a<span class=\"token operator\">+</span>b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b=\"</span><span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x=\"</span><span class=\"token operator\">+</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"prism language-java\">b<span class=\"token operator\">=</span><span class=\"token number\">3</span>\nx<span class=\"token operator\">=</span><span class=\"token number\">3</span>\n</code></pre>\n<p>对于如下所示，这行代码，因为自增（++)，放在了操作数的后面，因此先执行a+b运算，再执行b++操作。</p>\n<p>此时的b还是2，但当程序运行到下一步时，b就变成3了。</p>\n<pre><code class=\"prism language-java\"> <span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span>a<span class=\"token operator\">+</span>b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>2：在进行除法运算时，当除数和被除数都为整数时，得到的结果也是一个整数，如果除法运算有小数参与，得到的结果会是一个小数。</p>\n<p>举例：</p>\n<blockquote>\n<p>2510/1000 属于整数之间相除，会忽略小数部分，得到的结果是2<br/> 而2.5/10的结果是0.25<br/> //这种规则和C语言是完全相同的，要想结果为浮点数，那么除数，被除数中，至少包含一个浮点数</p>\n</blockquote>\n<p>3：在进行取模（%）运算时，运算结果的正负取决于被模数（%左边的数）的符号，与模数（%右边的数）的符号无关。</p>\n<p>举例：</p>\n<blockquote>\n<p>（-5）%3=-2<br/> 5%(-3)=2</p>\n</blockquote>\n<h3><a id=\"_421\"></a>赋值运算符：</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0417e91249e0457d86e756cf48f213a8.jpeg\"/><strong>赋值运算符在使用的过程中需要注意以下几点：</strong></p>\n<p>1：在Java中可以通过一条赋值语句对多个变量进行赋值。</p>\n<p>举例：</p>\n<pre><code class=\"prism language-java\"> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">;</span>\n x<span class=\"token operator\">=</span>y<span class=\"token operator\">=</span>z<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//同时为多个变量赋初始值为4</span>\n</code></pre>\n<p><strong>但是不能在定义变量的时候，进行多个变量赋多个初始值。</strong></p>\n<p>举例：</p>\n<pre><code class=\"prism language-java\">  <span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span>y<span class=\"token operator\">=</span>z<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>2：在众多赋值运算符中，除了“=”，其他都是特殊的赋值运算符，以“+=”为例，x+=3所表示的含义即为x=x+3，表达式首先会进行x+3运算，再将其结果赋值给x，其他运算符以此类推。</p>\n<h3><a id=\"_441\"></a>比较运算符：</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c1fed223d23f4c55a17b1eb8aa590615.jpeg\"/><strong>注：一定不要将比较运算符“==”误写成赋值运算符\"=\"</strong></p>\n<h3><a id=\"_444\"></a>逻辑运算符：</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\611987d0630c43afa716f84c8704616e.jpeg\"/><strong>逻辑运算符在使用的过程中需要注意以下几点：</strong></p>\n<p>1：逻辑运算符可以针对结果为布尔值的表达式进行运算。</p>\n<p>例如：</p>\n<pre><code class=\"prism language-java\">x<span class=\"token operator\">&gt;</span><span class=\"token number\">3</span><span class=\"token operator\">&amp;&amp;</span>y<span class=\"token operator\">!=</span><span class=\"token number\">0</span>\n</code></pre>\n<p>2:运算符“&amp;”和“&amp;&amp;”都表示与操作，当且仅当运算符两边的操作数都为true时，其结果才为true，否则结果为false.</p>\n<p>虽然运算符“&amp;”和“&amp;&amp;”都表示与操作，但二者在使用上还是有一定的区别。在使用“&amp;”进行运算时，不论“&amp;”左边的表达式结果为true还是false，“&amp;”右边的表达式都会进行运算，但在使用“&amp;&amp;”进行运算时，当“&amp;&amp;”左边的表达式结果为false时，“&amp;&amp;”右边的表达式就不再进行运算，因此“&amp;&amp;”被称作短路与。</p>\n<p>举例：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> y<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> z<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">//a，b是布尔型变量，因此输出结果只能为true或者false</span>\n        a<span class=\"token operator\">=</span>x<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;</span>y<span class=\"token operator\">++</span><span class=\"token operator\">&gt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//即使x&gt;0为false，y++&gt;1还是会执行，因此才有下面的y输出结果为1</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"y=\"</span><span class=\"token operator\">+</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token operator\">=</span>x<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>z<span class=\"token operator\">++</span><span class=\"token operator\">&gt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//挡x&gt;0的结果为false，z++&gt;1便不会被执行，因此z的值依然是0</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"z=\"</span><span class=\"token operator\">+</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"prism language-java\"><span class=\"token boolean\">false</span>\ny<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token boolean\">false</span>\nz<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n</code></pre>\n<p>3：运算符“|”和“||”都表示或操作，当运算符两边的任一表达式的值为true时，其结果为true，只有两边表达式的结果都为false时，其结果才为false，和逻辑与操作相类似，“||”为短路或，当运算符“||”左边的表达式结果为true时，右边的表达式便不再进行。</p>\n<p>4：运算符“^”表示异或操作，当运算符两边的布尔值相同（都为true或者false），其结果为false，否则为true。</p>\n<h2><a id=\"_488\"></a>运算符优先级：</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3b221deb91684ecba55b7d17e86f3136.jpeg\"/><br/> 上表中所列举的这些运算符，<strong>优先级的数字越小代表优先级越高。</strong></p>\n<p>举例：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span>a<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>a<span class=\"token punctuation\">;</span><span class=\"token comment\">//*的优先级高于+，因此先执行3*a,在执行+a运算</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b=\"</span><span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>a<span class=\"token punctuation\">;</span><span class=\"token comment\">//（）的优先级高于*，因此先执行（a+3）,再执行*a运算</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c=\"</span><span class=\"token operator\">+</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出如下：</p>\n<pre><code class=\"prism language-java\">b<span class=\"token operator\">=</span><span class=\"token number\">8</span>\nc<span class=\"token operator\">=</span><span class=\"token number\">10</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-09-03 10:25:20", "summary": "程序的基本格式：程序代码必须放在一个类中，刚开始学习时，我们可以将类看作一个程序。类使用关键字定义，在前面可以有类的修饰符。类的定义格式如下：修饰符类名程序代码：程序代码可分为执行定义语句和功能执行语"}