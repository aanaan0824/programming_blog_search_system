{"blogid": "123147954", "writerAge": "码龄11年", "writerBlogNum": "3781", "writerCollect": "5265", "writerComment": "522", "writerFan": "2658", "writerGrade": "9级", "writerIntegral": "63862", "writerName": "allway2", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123147954.jpg", "writerRankTotal": "50", "writerRankWeekly": "1307", "writerThumb": "1068", "writerVisitNum": "4700441", "blog_read_count": "1430", "blog_time": "已于 2022-02-26 13:39:02 修改", "blog_title": "在 C# 中等待线程完成Task.WaitAll和Thread.Join", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<ol><li><a href=\"https://www.delftstack.com/ja/howto/csharp/wait-for-thread-to-finish-in-csharp/#c%23-%25E3%2581%25AE-task.waitall-%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%25E3%2581%25A7%25E3%2582%25B9%25E3%2583%25AC%25E3%2583%2583%25E3%2583%2589%25E3%2581%258C%25E7%25B5%2582%25E4%25BA%2586%25E3%2581%2599%25E3%2582%258B%25E3%2581%25AE%25E3%2582%2592%25E5%25BE%2585%25E3%2581%25A4\" title=\"Task.WaitAll()等待线程以 C#方法结束\">Task.WaitAll()等待线程以 C#方法结束</a></li><li><a href=\"https://www.delftstack.com/ja/howto/csharp/wait-for-thread-to-finish-in-csharp/#c%23-%25E3%2581%25AE-thread.join-%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%25E3%2581%25A7%25E3%2582%25B9%25E3%2583%25AC%25E3%2583%2583%25E3%2583%2589%25E3%2581%258C%25E7%25B5%2582%25E4%25BA%2586%25E3%2581%2599%25E3%2582%258B%25E3%2581%25AE%25E3%2582%2592%25E5%25BE%2585%25E3%2581%25A4\" title=\"Thread.Join()等待线程以 C#方法结束\">Thread.Join()等待线程以 C#方法结束</a></li></ol>\n<p style=\"margin-left:0;\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">本教程将向您展示如何在 C# 中等待线程完成。</span></span></p>\n<h2 id=\"c-の-task-waitall-メソッドでスレッドが終了するのを待つ\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\"><a href=\"https://www.delftstack.com/ja/howto/csharp/wait-for-thread-to-finish-in-csharp/#c-%E3%81%AE-task-waitall-%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%A7%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89%E3%81%8C%E7%B5%82%E4%BA%86%E3%81%99%E3%82%8B%E3%81%AE%E3%82%92%E5%BE%85%E3%81%A4\" title=\"Task.WaitAll()等待线程以C#方法结束\">Task.WaitAll()等待线程以C#方法结束</a></span></span></h2>\n<p style=\"margin-left:0;\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">C#<a href=\"https://docs.microsoft.com/ja-jp/dotnet/api/system.threading.tasks.task.waitall?view=net-5.0\" title=\"Task.WaitAll()方法\">Task.WaitAll()方法</a>用于<code>Task</code>等待类中所有对象的完成。<a href=\"https://docs.microsoft.com/ja-jp/dotnet/api/system.threading.tasks.task?view=net-5.0\" title=\"Task类\">Task类</a>代表 C# 异步任务。<code>Task</code>您可以在您的类中启动一个线程并等待 C#<code>Task.WaitAll()</code>方法完成该线程。</span></span></p>\n<div id=\"google_ads_iframe_/1254144,21871662888/delftstack_com-medrectangle-3_0__container__\"></div>\n<p></p>\n<div></div>\n<pre class=\"has\" style=\"margin-left:0;text-align:left;\"><code class=\"language- language-cs\">using System;\nusing System.Threading.Tasks;\n\nnamespace wait_for_thread\n{\n    class Program\n    {\n        static void fun1()\n        {\n            for(int i = 0; i &lt; 2; i++)\n            {\n                Console.WriteLine(\"Thread 1\");\n            }\n        }\n        static void fun2()\n        {\n            for (int i = 0; i &lt; 2; i++)\n            {\n                Console.WriteLine(\"Thread 2\");\n            }\n        }\n        static void Main(string[] args)\n        {\n            Task thread1 = Task.Factory.StartNew(() =&gt; fun1());\n            Task thread2 = Task.Factory.StartNew(() =&gt; fun2());\n            Task.WaitAll(thread1, thread2);\n            Console.WriteLine(\"The End\");\n        }\n    }\n}</code></pre>\n<p style=\"margin-left:0;\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">输出：</span></span></p>\n<div></div>\n<pre class=\"has\" style=\"margin-left:0;text-align:left;\"><code class=\"language-\">Thread 1\nThread 1\nThread 2\nThread 2\nThe End</code></pre>\n<p style=\"margin-left:0;\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">在上面的代码中，我使用了 C# 中的一个方法来等待<code>Task.WaitAll()</code>主线程中的任务<code>thread1</code>和<code>thread2</code>任务完成。</span></span></p>\n<pre><code class=\"language-cs\">using System.Threading.Tasks;\nusing System.Threading;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Task task1 = Task.Factory.StartNew(() =&gt; doStuff(\"Task1\"));\n        Task task2 = Task.Factory.StartNew(() =&gt; doStuff(\"Task2\"));\n        Task task3 = Task.Factory.StartNew(() =&gt; doStuff(\"Task3\"));\n        Task.WaitAll(task1, task2, task3);\n\n        Console.WriteLine(\"All threads complete\");\n        Console.ReadLine();\n    }\n\n    static void doStuff(string strName)\n    {\n        for (int i = 1; i &lt;= 3; i++)\n        {\n            Console.WriteLine(strName + \" \" + i.ToString());\n            Thread.Yield();\n        }\n    }\n}</code></pre>\n<pre><code>Task3 1\nTask1 1\nTask3 2\nTask1 2\nTask2 1\nTask1 3\nTask3 3\nTask2 2\nTask2 3\nAll threads complete</code></pre>\n<h2 id=\"c-の-thread-join-メソッドでスレッドが終了するのを待つ\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\"><a href=\"https://www.delftstack.com/ja/howto/csharp/wait-for-thread-to-finish-in-csharp/#c-%E3%81%AE-thread-join-%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%A7%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89%E3%81%8C%E7%B5%82%E4%BA%86%E3%81%99%E3%82%8B%E3%81%AE%E3%82%92%E5%BE%85%E3%81%A4\" title=\"Thread.Join()等待线程以C#方法结束\">Thread.Join()等待线程以C#方法结束</a></span></span></h2>\n<p style=\"margin-left:0;\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">上面的部分<code>Task.WaitAll()</code>描述了如何使用 C# 方法来等待一个线程。您可以使用C#<code>Thread.Join()</code>方法实现相同的目标。<a href=\"https://docs.microsoft.com/ja-jp/dotnet/api/system.threading.thread.join?view=net-5.0\" title=\"Thread.Join()该方法\">Thread.Join()该方法</a>停止调用线程的执行，直到当前线程完成执行。下面的代码示例展示了如何使用 C#<code>Thread.Join()</code>方法等待线程完成执行。</span></span></p>\n<div></div>\n<pre class=\"has\" style=\"margin-left:0;text-align:left;\"><code class=\"language- language-cs\">using System;\nusing System.Threading.Tasks;\n\nnamespace wait_for_thread\n{\n    class Program\n    {\n        static void fun1()\n        {\n            for(int i = 0; i &lt; 2; i++)\n            {\n                Console.WriteLine(\"Thread 1\");\n            }\n        }\n        static void fun2()\n        {\n            for (int i = 0; i &lt; 2; i++)\n            {\n                Console.WriteLine(\"Thread 2\");\n            }\n        }\n        static void Main(string[] args)\n        {\n            Thread thread1 = new Thread(new ThreadStart(fun1));\n            Thread thread2 = new Thread(new ThreadStart(fun2));\n            \n            thread1.Start();\n            thread1.Join();\n            thread2.Start();\n            thread2.Join();\n            Console.WriteLine(\"The End\");\n        }\n    }\n}</code></pre>\n<p style=\"margin-left:0;\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">输出：</span></span></p>\n<div></div>\n<pre class=\"has\" style=\"margin-left:0;text-align:left;\"><code class=\"language-\">Thread 1\nThread 1\nThread 2\nThread 2\nThe End</code></pre>\n<p style=\"margin-left:0;\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">在上面的代码中，我使用了一个 C#<code>Thread.Join()</code>方法来等待<code>thread1</code>线程和<code>thread2</code>线程在主线程内完成。</span></span></p>\n<pre><code class=\"language-cs\">using System.Threading.Tasks;\nusing System.Threading;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Thread t1 = new Thread(doStuff);\n        t1.Start(\"Task1\");\n        Thread t2 = new Thread(doStuff);\n        t2.Start(\"Task2\");\n        Thread t3 = new Thread(doStuff);\n        t3.Start(\"Task3\");\n        t1.Join(); //wait here until t1 has terminated...\n        t2.Join(); //wait here until t2 has terminated...\n        t3.Join(); //wait here until t3 has terminated...\n        Console.WriteLine(\"All threads complete\");\n    }\n    static void doStuff(object strName)\n    {\n        for (int i = 1; i &lt;= 3; i++)\n        {\n            Console.WriteLine(strName + \" \" + i.ToString());\n            Thread.Yield();\n        }\n    }\n}</code></pre>\n<pre><code>Task1 1\nTask1 2\nTask1 3\nTask2 1\nTask2 2\nTask2 3\nTask3 1\nTask3 2\nTask3 3\nAll threads complete</code></pre>\n<p style=\"margin-left:0;\"></p>\n</div>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-02-26 13:39:02", "summary": "等待线程以方法结束等待线程以方法结束等待线程以方法结束等待线程以方法结束本教程将向您展示如何在中等待线程完成。終了待等待线程以方法结束等待线程以方法结束方法方法用于等待类中所有对象的完成。类类代表异步"}