{"blogid": "126743177", "writerAge": "码龄6年", "writerBlogNum": "50", "writerCollect": "49", "writerComment": "6", "writerFan": "6", "writerGrade": "4级", "writerIntegral": "908", "writerName": "xinxin_csdn", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126743177.jpg", "writerRankTotal": "50628", "writerRankWeekly": "23665", "writerThumb": "10", "writerVisitNum": "58189", "blog_read_count": "5", "blog_time": "于 2022-09-07 12:54:48 发布", "blog_title": "路由的hash模式和history模式的区别", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>路由是为了支持单页面应用的页面管理和页面跳转。单页面应用只有一个HTML物理文件，切换页面既需要让地址发生变化，又不能触发HTML物理文件的重新加载，路由给出了以下俩种模式</p>\n<p>一、hash模式: </p>\n<p>在原有地址上增加 /#/xxx http://localhost:8080/#/test</p>\n<p>onhashchange监听锚点的变化，即#后的值的变化</p>\n<p><img alt=\"\" height=\"438\" src=\"..\\..\\static\\image\\4468248e99e74fecabb9d1b8117a0de3.png\" width=\"816\"/></p>\n<p>二、history模式</p>\n<p> http://localhost:8080/test</p>\n<p>利用history.putState()函数重写URL路径，实现网页不会重新加载；但重写后的新路径不包含原有HTML物理文件的访问地址，一旦刷新网页会造成404无法访问的效果。vuecli脚手架在开发环境解决了history刷新的问题，发布到生产环境就会有这个问题，需要服务器进行重定向的配置。</p>\n<p>1. 在地址栏中直接输入地址</p>\n<p>history: 直接向服务器发送一个get请求 http:// 192.168.1.1:8080/test，由后端管理前端的页面</p>\n<p>hash: 不会去发送请求 http://192.168.1.1:8080/#/test,前端页面自己控制,</p>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-07 12:54:48", "summary": "路由是为了支持单页面应用的页面管理和页面跳转。单页面应用只有一个物理文件，切换页面既需要让地址发生变化，又不能触发物理文件的重新加载，路由给出了以下俩种模式一、模式在原有地址上增加监听锚点的变化，即后"}