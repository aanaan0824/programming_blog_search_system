{"blogid": "123396848", "writerAge": "码龄4年", "writerBlogNum": "6", "writerCollect": "4", "writerComment": "0", "writerFan": "0", "writerGrade": "1级", "writerIntegral": "61", "writerName": "combAligadou", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123396848.jpg", "writerRankTotal": "134139", "writerRankWeekly": "347300", "writerThumb": "1", "writerVisitNum": "4169", "blog_read_count": "1060", "blog_time": "已于 2022-07-11 17:36:22 修改", "blog_title": "C#WPF内存回收与释放LierdaCracker", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>使用wpf程序常常会出现一个问题,那就是内存占用过高，使用wpf的程序功能越复杂往往用着用着内存就本着90往上去了。</p>\n<p>一方面wpf本身是一个ui框架，对图像以及界面的渲染虽然提高了软件的美观性,但实际使用过程中调用和消耗了大量的内存来进行协同处理;<br/> 另一方面这些调用的内存的确在使用完成之后并没有进行主动的释放或者是只是自动释放了一部分，即对于托管资源通过GC自动清理回收。对于非托管资源，通过代码调用手动进行清除，再由GC回收。例如流，数据库连接，网络连接等,所以就需要我们主动定时的对内存进行回收释放的处理。</p>\n<p>在这里非常推荐使用LierdaCracker</p>\n<p>一.可以使用nuget管理安装Lierda.WPFHelper包，在项目的App.xaml.cs中的Application_Startup方法里实例化并调用cracker方法直接使用</p>\n<pre><code class=\"prism language-csharp\">   <span class=\"token class-name\">LierdaCracker</span> cracker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">LierdaCracker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   cracker<span class=\"token punctuation\">.</span><span class=\"token function\">Cracker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>二.自己实现LierdaCracker类<br/> 提到C#资源和内存回收肯定少不了GC垃圾回收机制，托管堆上的内存由GC全权负责， 值引用的在栈上的内存会随着栈空间的消亡而自动消失。</p>\n<pre><code class=\"prism language-csharp\">GC<span class=\"token punctuation\">.</span><span class=\"token function\">Collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>； \nGC<span class=\"token punctuation\">.</span><span class=\"token function\">WaitForPendingFinalizers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>此方法强制对所有代进行即时垃圾回收！<br/> 当应用程序代码中某个确定的点上使用的内存量大量减少时，在这种情况下使用 GC.Collect 方法可能比较合适。而GC.WaitForPendingFinalizers则是提供收集完成前的等待。</p>\n<p>另外一个非常重要的系统api在释放内存的时候也是非常重要的<br/> SetProcessWorkingSetSize，使用这个函数来设置应用程序最小和最大的运行空间，只会保留需要的内存。当应用程序被闲置或系统内存太低时，操作系统会自动调用这个机制来设置应用程序的内存。应用程序也可以使用 VirtualLock 来锁住一定范围的内存不被系统释放。</p>\n<p>事实上，使用该函数并不能提高什么性能，也不会真的节省内存。<br/> 因为他只是暂时的将应用程序占用的内存移至虚拟内存，一旦，应用程序被激活或者有操作请求时，这些内存又会被重新占用。如果你强制使用该方法来 设置程序占用的内存，那么可能在一定程度上反而会降低系统性能，因为系统需要频繁的进行内存和硬盘间的页面交换。</p>\n<p>BOOL SetProcessWorkingSetSize(<br/> HANDLE hProcess,<br/> SIZE_T dwMinimumWorkingSetSize,<br/> SIZE_T dwMaximumWorkingSetSize<br/> );</p>\n<p>将 2个 SIZE_T 参数设置为 －1 ，即可以使进程使用的内存交换到虚拟内存，只保留一小部分代码，它是windowsNT的api 所以使用的使用需要加上平台条件。</p>\n<pre><code class=\"prism language-csharp\"> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Environment<span class=\"token punctuation\">.</span>OSVersion<span class=\"token punctuation\">.</span>Platform <span class=\"token operator\">==</span> PlatformID<span class=\"token punctuation\">.</span>Win32NT<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">SetProcessWorkingSetSize</span><span class=\"token punctuation\">(</span>Process<span class=\"token punctuation\">.</span><span class=\"token function\">GetCurrentProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Handle<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>综合下来LierdaCracker类为</p>\n<pre><code class=\"prism language-csharp\"> <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LierdaCracker</span>\n <span class=\"token punctuation\">{<!-- --></span>\n\t <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DllImport</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"kernel32.dll\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n     <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">extern</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">SetProcessWorkingSetSize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntPtr</span> proc<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> min<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">FlushMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{<!-- --></span>\n          GC<span class=\"token punctuation\">.</span><span class=\"token function\">Collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          GC<span class=\"token punctuation\">.</span><span class=\"token function\">WaitForPendingFinalizers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Environment<span class=\"token punctuation\">.</span>OSVersion<span class=\"token punctuation\">.</span>Platform <span class=\"token operator\">==</span> PlatformID<span class=\"token punctuation\">.</span>Win32NT<span class=\"token punctuation\">)</span>\n              <span class=\"token function\">SetProcessWorkingSetSize</span><span class=\"token punctuation\">(</span>Process<span class=\"token punctuation\">.</span><span class=\"token function\">GetCurrentProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Handle<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n\t  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Cracker</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> sleepSpan <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n           _ <span class=\"token operator\">=</span> Task<span class=\"token punctuation\">.</span>Factory<span class=\"token punctuation\">.</span><span class=\"token function\">StartNew</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">delegate</span>\n           <span class=\"token punctuation\">{<!-- --></span>\n               <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">{<!-- --></span>\n                   <span class=\"token keyword\">try</span>\n                   <span class=\"token punctuation\">{<!-- --></span>\n                       <span class=\"token comment\">//SetDate();</span>\n                       <span class=\"token function\">FlushMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                       Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>sleepSpan<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                   <span class=\"token punctuation\">}</span>\n                   <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n               <span class=\"token punctuation\">}</span>\n           <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n\n <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>以上资料有个人累积，也有前辈们总结出来的经验，欢迎指教。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-07-11 17:36:22", "summary": "使用程序常常会出现一个问题那就是内存占用过高，使用的程序功能越复杂往往用着用着内存就本着往上去了。一方面本身是一个框架，对图像以及界面的渲染虽然提高了软件的美观性但实际使用过程中调用和消耗了大量的内存"}