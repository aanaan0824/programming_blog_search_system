{"blogid": "126652907", "writerAge": "码龄1年", "writerBlogNum": "31", "writerCollect": "424", "writerComment": "679", "writerFan": "1014", "writerGrade": "5级", "writerIntegral": "1798", "writerName": "whispar", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126652907.jpg", "writerRankTotal": "10501", "writerRankWeekly": "233", "writerThumb": "545", "writerVisitNum": "31094", "blog_read_count": "879", "blog_time": "于 2022-09-02 07:45:00 发布", "blog_title": "【Java初阶】面向对象三大特性之继承", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h3></h3>\n<p class=\"img-center\"><img alt=\"ced485cbb11e458d81a746890b32cf3f.gif\" height=\"84\" src=\"https://img-blog.csdnimg.cn/ced485cbb11e458d81a746890b32cf3f.gif\" width=\"672\"/></p>\n<p style=\"text-align:center;\"><strong>  🎈🎈 作者 <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><a href=\"https://blog.csdn.net/m0_56361048?spm=1011.2415.3001.5343\" title=\"whispar\">whispar</a></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br/> 🎈🎈专栏 ：<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><a href=\"https://blog.csdn.net/m0_56361048/category_11939682.html\" title=\"Java由浅入深\">Java由浅入深</a></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>\n<p style=\"text-align:center;\">✨矢志不渝✨ </p>\n<p class=\"img-center\"><img alt=\"7abc9c8906564477a6679bb15d368e37.gif\" src=\"https://img-blog.csdnimg.cn/7abc9c8906564477a6679bb15d368e37.gif\"/></p>\n<hr/>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E4%B8%80%E3%80%81%E7%BB%A7%E6%89%BF-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%B8%80%E3%80%81%E7%BB%A7%E6%89%BF\">一、继承</a></p>\n<p id=\"%E4%BA%8C%E3%80%81super%E5%85%B3%E9%94%AE%E5%AD%97-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BA%8C%E3%80%81super%E5%85%B3%E9%94%AE%E5%AD%97\">二、super关键字</a></p>\n<p id=\"%E4%B8%89%E3%80%81%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E5%9D%97-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%B8%89%E3%80%81%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E5%9D%97\">三、继承关系下的代码块</a></p>\n<p id=\"%E5%9B%9B%E3%80%81protected%E5%85%B3%E9%94%AE%E5%AD%97-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%9B%9B%E3%80%81protected%E5%85%B3%E9%94%AE%E5%AD%97\">四、protected关键字</a></p>\n<p id=\"%E4%BA%94%E3%80%81final%E5%85%B3%E9%94%AE%E5%AD%97-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BA%94%E3%80%81final%E5%85%B3%E9%94%AE%E5%AD%97\">五、final关键字</a></p>\n<hr/>\n<h2>一、继承</h2>\n<p></p>\n<ul><li> <p>理解继承</p> </li></ul>\n<blockquote>\n<p>Cat继承了Animal类，其中：Animal类称为父类/基类或超类，Cat可以称为Animal的 子类/派生类，继承之后，<strong>子类可以复用父类中成员，子类在实现时只需关心自己新增加的成员即可</strong></p>\n<p>Java中不支持多继承，仅支持A extends B 单继承//A extends B B extends C 多层继承 //A extends C B extends C 不同类继承自同一类。</p>\n</blockquote>\n<pre><code class=\"language-java\">public class TestExtend {\n    public static void main(String[] args) {\n       Dog d1 =new Dog();\n       d1.name = \"xiaocs\";\n       d1.age = 15;\n       Cat c1 = new Cat();\n       c1.color = \"red\";\n       c1.type = \"波斯\";\n       c1.friendly();\n    }\n}\n/**\n*    Dog未继承animal则无法调用animal中的成员变量和成员方法\n*/\nclass Dog{\n    public  int age;\n​\n    public String  name;\n    \n    public void shot(){\n        System.out.println(\"汪汪汪\");\n    }\n}\n//cat可以直接调用animal中的成员变量和成员方法\nclass Cat extends animal{\n    public int weight;\n​\n    public String sex;\n    \n    public void eat(){\n        System.out.println(\"嘎嘎吃\");\n    }\n​\n}\nclass animal{\n    public String  color;\n​\n    public String type;\n    \n    public void friendly(){\n        System.out.println(\"对人类友好\");\n    }\n​\n}</code></pre>\n<ul><li> <p>子类访问父类</p>\n<ul><li> <p>子类和父类不存在同名成员变量</p> <pre><code class=\"language-java\">public class Base {\n    int a;\n    int b;\n}\npublic class Derived extends Base{\n    int c;\n    public void method(){\n        a = 10; // 访问从父类中继承下来的a\n        b = 20; // 访问从父类中继承下来的b\n        c = 30; // 访问子类自己的c\n    }</code></pre> </li><li> <p>子类和父类成员变量同名</p> <pre><code class=\"language-java\">public class Base {\n    int a;\n    int b;\n    int c;\n} \n​\npublic class Derived extends Base{\n    int a; // 与父类中成员a同名，且类型相同\n    char b; // 与父类中成员b同名，但类型不同\n    public void method(){\n        a = 100; \n        b = 101; \n        c = 102; // 子类没有c，访问的肯定是从父类继承下来的c\n     // d = 103; // 编译失败，因为父类和子类都没有定义成员变量b\n    }\n}</code></pre>\n<blockquote>\n<ul><li> <p>成员变量访问遵循就近原则，自己有优先自己的，与父类同名也优先访问自己的，如果没有则向父类中找。</p> </li><li> <p>成员方法亦然，如果子类有则先访问子类的，子类没有先访问父类的，如果存在方法重载，则根据引用的情况，选择合适的方法</p> </li></ul>\n</blockquote> </li></ul></li><li> <p>在子类方法中，如果想要明确访问父类中成员时，借助super关键字即可</p> </li></ul>\n<h2 id=\"%E4%BA%8C%E3%80%81super%E5%85%B3%E9%94%AE%E5%AD%97\">二、super关键字</h2>\n<ul><li> <p>当父类和子类的成员变量或成员方法相同时，调用父类的成员变量或方法，使用super关键字</p> </li></ul>\n<pre><code class=\"language-java\">class Cat extends animal{\n    public int color;\n​\n    public String type;\n​\n    public void eat(){\n    \n    //调用父类的成员变量\n        super.color = \"red\";\n        super.type = \"波斯\";\n        super.friendly();\n        System.out.println(\"嘎嘎吃\");\n    }\n​\n}\nclass animal{\n    public String  color;\n    public String type;\n​\n    public void friendly(){\n        System.out.println(\"对人类友好\");\n    }\n}\n​</code></pre>\n<ul><li> <p>子类的构造方法(无参数)</p> </li><li> <p>若父类显式定义无参或者默认的构造方法，在子类构造方法第一行默认有隐含的super()调用，即调用基类构造方法</p> </li></ul>\n<pre><code class=\"language-java\">public class TestExtend {\n    public static void main(String[] args) {\n        Cat c = new Cat();\n    }\n}\nclass Cat extends animal{\n    public int size;\n    public String name;\n​\n    public Cat(){\n        // super(); \n                   //注意子类构造方法中默认会调用基类的无参构造方法：super(), \n                   // 用户没有写时,编译器会自动添加，而且super()必须是子类构造方法中第一条语句，\n                   // 并且只能出现一次\n        System.out.println(\"Cat::\");\n    }\n    public void eat(){\n        System.out.println(\"嘎嘎吃\");\n    }\n​\n}\nclass animal{\n    public String  color;\n    public String type;\n​\n    public animal() {\n        System.out.println(\"animal::\");\n    }\n    public void friendly(){\n        System.out.println(\"对人类友好\");\n    }\n}</code></pre>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\756df0e06eeb76bea004401884a3b343.png\"/></p>\n<blockquote>\n<p><strong>子类对象构造时，需要先调用父类构造方法，然后执行子类的构造方法。</strong></p>\n</blockquote>\n<ul><li> <p>子类的构造方法(有参数)</p> </li><li> <p>如果父类构造方法是带有参数的，此时需要用户为子类显式定义构造方法，并在子类构造方法中选择合适的父类构造方法调用，否则会编译失败</p> </li></ul>\n<pre><code class=\"language-java\">\npublic class TestExtend {\n    public static void main(String[] args) {\n        Cat c = new Cat(\"red\",\"波斯\",45,\"xiaos\");\n    }\n}\nclass Cat extends animal{\n    public int size;\n    public String name;\n​\n    public Cat(String color, String type, int size, String name) {\n        super(color, type);\n        this.size = size;\n        this.name = name;\n    }\n    public void eat(){\n        System.out.println(\"嘎嘎吃\");\n    }\n}\nclass animal{\n    public String  color;\n    public String type;\n​\n    public animal(String color, String type) {\n        this.color = color;\n        this.type = type;\n    }\n    public void friendly(){\n        System.out.println(\"对人类友好\");\n    }\n​\n}</code></pre>\n<blockquote>\n<ul><li> <p>在子类构造方法中，super(...)调用父类构造时，必须是子类构造函数中第一条语句。</p> </li><li> <p>super(...)只能在子类构造方法中出现一次，并且不能和this同时出现</p> </li></ul>\n</blockquote>\n<p><strong>✅super和this之间的区别？</strong></p>\n<blockquote>\n<ul><li> <p><span style=\"color:#4da8ee;\">相同点：</span></p> </li></ul>\n<p><span style=\"color:#4da8ee;\">1.都属于java 中的关键字</span></p>\n<p><span style=\"color:#4da8ee;\">2.只能在类的非静态方法中使用，用来访问 非静态的方法和字段</span></p>\n<p><span style=\"color:#4da8ee;\">3.在构造 方法中使用时必须是构造方法当中的第一条语句，并且二者不能同时存在</span></p>\n</blockquote>\n<blockquote>\n<ul><li> <p><span style=\"color:#4da8ee;\">不同点：</span></p> </li></ul>\n<p><span style=\"color:#4da8ee;\">1.this指的是当前对象的引用，super指的是当前对象对父类部分对象的使用</span></p>\n<ol><li> <p><span style=\"color:#4da8ee;\">在非静态成员方法中，this用来访问本类的方法和属性，super用来访问父类继承下来的方法和属性</span></p> </li><li> <p><span style=\"color:#4da8ee;\">在构造方法当中，this用于调用本类的构造方法，super调用父类的构造方法，两种调用不能同时在构造方法中出现</span></p> </li><li> <p><span style=\"color:#4da8ee;\">构造方法中一定会存在super(...)的调用，用户没有写编译器也会增加，但是this(...)用户不写则没有</span></p> </li></ol>\n</blockquote>\n<h2 id=\"%E4%B8%89%E3%80%81%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E5%9D%97\">三、继承关系下的代码块</h2>\n<pre><code class=\"language-java\">​\npublic class TestExtend {\n    public static void main(String[] args) {\n        Cat c = new Cat(\"red\",\"波斯\",45,\"xiaos\");\n    }\n}\nclass Cat extends animal{\n    public int size;\n    public String name;\n    //5.子类的实例代码块\n    {\n        System.out.println(\"cat::实例\");\n    }\n    //2.子类的静态代码块\n    static{\n        System.out.println(\"cat::static\");\n​\n    }\n    //6.子类的构造方法\n    public Cat(String color, String type, int size, String name) {\n        super(color, type);\n        this.size = size;\n        this.name = name;\n        System.out.println(\"cat::构造\");\n    }\n    public void eat(){\n        System.out.println(\"嘎嘎吃\");\n    }\n}\nclass animal{\n    public String  color;\n    public String type;\n​\n    //3.父类的实例代码块\n    {\n        System.out.println(\"animal::实例\");\n    }\n    //1。父类的静态代码块\n    static{\n        System.out.println(\"animal::static\");\n​\n    }\n    //4.父类的构造方法\n    public animal(String color, String type) {\n        this.color = color;\n        this.type = type;\n        System.out.println(\"animal::构造\");\n    }\n    public void friendly(){\n        System.out.println(\"对人类友好\");\n    }\n​</code></pre>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\91050ceebc8abfc07d414560d608ee21.png\"/></p>\n<p>根据执行结果可以的出以下结论：</p>\n<blockquote>\n<p><span style=\"color:#1c7892;\">父类的静态代码块&gt;&gt;子类的静态代码块&gt;&gt;父类的实例代码块&gt;父类的构造方法&gt;&gt;子类的实例代码块&gt;&gt; 子类的构造方法</span></p>\n</blockquote>\n<ul><li> <p><strong>第二次实例化子类对象时，父类和子类的静态代码块都将不会再执行</strong></p> </li></ul>\n<h2 id=\"%E5%9B%9B%E3%80%81protected%E5%85%B3%E9%94%AE%E5%AD%97\">四、protected关键字</h2>\n<blockquote>\n<p>访问限定：同一个包中的类和不同包中的子类</p>\n</blockquote>\n<pre><code class=\"language-java\">package TestDemo2;\n​\npublic class B {\n    private int a;\n    protected int b;\n    public int c;\n    int d;\n}</code></pre>\n<pre>\n<strong>在不同包中即package TestDemo 中</strong></pre>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\234d1a9cec61824b4b9f5cc179b8d678.png\"/></p>\n<p>只有public和protected修饰的成员可以访问</p>\n<h2 id=\"%E4%BA%94%E3%80%81final%E5%85%B3%E9%94%AE%E5%AD%97\">五、final关键字</h2>\n<ul><li> <p>修饰变量时： 表示常量即不能修改</p> </li></ul>\n<pre><code class=\"language-java\">final int a = 10; \na = 20; // 编译出错</code></pre>\n<ul><li> <p>修饰类时： 表示此类不能被继承，即不能作为父类</p> </li></ul>\n<pre><code class=\"language-java\">//final修饰\nfinal class animal{\n    public String  color;\n    public String type;\n    public animal(String color, String type) {\n        this.color = color;\n        this.type = type;\n        System.out.println(\"animal::构造\");\n    }\n}</code></pre>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\815026da5e76fc3f40b4630cc6d28058.png\"/></p>\n<blockquote>\n<p style=\"text-align:center;\"><strong>     💖如果文章对你有帮助，请多多点赞、收藏、评论、关注支持！！💖 </strong>  </p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"ced485cbb11e458d81a746890b32cf3f.gif\" height=\"84\" src=\"https://img-blog.csdnimg.cn/ced485cbb11e458d81a746890b32cf3f.gif\" width=\"672\"/></p>\n</div>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-09-02 07:45:00", "summary": "作者专栏：由浅入深由浅入深矢志不渝目录一、继承二、关键字三、继承关系下的代码块四、关键字五"}