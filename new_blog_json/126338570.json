{"blogid": "126338570", "writerAge": "码龄4年", "writerBlogNum": "473", "writerCollect": "6887", "writerComment": "11736", "writerFan": "25045", "writerGrade": "7级", "writerIntegral": "23737", "writerName": "不渴望力量的哈士奇", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126338570.jpg", "writerRankTotal": "307", "writerRankWeekly": "33", "writerThumb": "7932", "writerVisitNum": "1030417", "blog_read_count": "1463", "blog_time": "已于 2022-08-18 20:37:23 修改", "blog_title": "〖Python 数据库开发实战 - MySQL篇㉛〗- 事务机制的概念与特性", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<div align=\"center\">\n<img src=\"https://img-blog.csdnimg.cn/32e9999525144885bd9b2dfd864c0419.gif#pic_center\" width=\"800\"/>\n</div>\n<table><thead><tr><th align=\"center\"><font color=\"red\">万叶集</font></th></tr></thead><tbody><tr><td align=\"center\"><font color=\"red\">🎉 隐约雷鸣，阴霾天空。 🎉</font></td></tr><tr><td align=\"center\"><font color=\"red\">🎉 但盼风雨来，能留你在此。 🎉</font></td></tr></tbody></table>\n<p><a href=\"https://bbs.csdn.net/topics/607171489\"><img src=\"..\\..\\static\\image\\d4cc2726108645c9811fee160b985fe9.png\"/></a></p>\n<hr/>\n<blockquote>\n<p><strong>前言</strong>：<br/> ✌ 作者简介：<a href=\"https://blog.csdn.net/weixin_42250835?type=blog\">渴望力量的哈士奇</a> ✌，大家可以叫我 🐶哈士奇🐶 ，一位致力于 <font color=\"red\">TFS - 全栈</font> 赋能的博主 ✌<br/> 🏆 <font color=\"red\" size=\"3\">CSDN博客专家认证、新星计划第三季全栈赛道 MVP 、华为云享专家、阿里云专家博主 🏆 </font><br/> 📫 如果文章知识点有错误的地方，请指正！和大家一起学习，一起进步👀<br/> 💬 人生格言：优于别人,并不高贵,真正的高贵应该是优于过去的自己。💬<br/> <font color=\"red\" size=\"3\">🔥 如果感觉博主的文章还不错的话，还请👍关注、点赞、收藏三连支持👍一下博主哦</font></p>\n<hr/>\n<table><tbody><tr align=\"center\"><th>专栏系列（点击解锁）</th><th>学习路线（点击解锁）</th><th>知识定位</th></tr><tr><td align=\"center\" rowspan=\"10\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11631906.html\"> <font color=\"red\" size=\"4.5\">🔥Python全栈白皮书🔥</font> </a> </td><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11631913.html\"> <font color=\"#ff6984\" size=\"3\"> 零基础入门篇 </font> </a> </td><td><font color=\"bule\">以浅显易懂的方式轻松入门，让你彻底爱上Python的魅力。</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11631928.html\"> <font color=\"#ff6984\" size=\"3\"> 语法进阶篇 </font> </a> </td><td><font color=\"bule\">主要围绕多线程编程、正则表达式学习、含贴近实战的项目练习 。 </font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11798104.html\"> <font color=\"#ff6984\" size=\"3\"> 自动化办公篇 </font> </a> </td><td><font color=\"bule\">实现日常办公软件的自动化操作，节省时间、提高办公效率。</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11834532.html\"> <font color=\"#ff6984\" size=\"3\"> 自动化测试实战篇 </font> </a> </td><td><font color=\"bule\">从实战的角度出发，先人一步，快速转型测试开发工程师。</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11840815.html\"> <font color=\"#ff6984\" size=\"3\"> 数据库开发实战篇</font> </a> </td><td><font color=\"bule\">掌握关系型与非关系数据库知识，提升数据库实战开发能力。</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11840958.html\"> <font color=\"#ff6984\" size=\"3\"> 爬虫入门与实战</font> </a> </td><td><font color=\"bule\">更新中</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11841010.html\"> <font color=\"#ff6984\" size=\"3\">数据分析篇</font> </a> </td><td><font color=\"bule\">更新中</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11841028.html\"> <font color=\"#ff6984\" size=\"3\">前端入门+flask 全栈篇</font> </a> </td><td><font color=\"bule\">更新中</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11841035.html\"> <font color=\"#ff6984\" size=\"3\">django+vue全栈篇</font> </a> </td><td><font color=\"bule\">更新中</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11841157.html\"> <font color=\"#ff6984\" size=\"3\">拓展-人工智能入门</font> </a> </td><td><font color=\"bule\">更新中</font></td></tr><tr><td align=\"center\" rowspan=\"6\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11123904.html\"> <font color=\"red\" size=\"4.5\">网络安全之路</font> </a> </td><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11170008.html\"> <font color=\"#ff6984\" size=\"3\"> 踩坑篇 </font> </a> </td><td>记录学习及演练过程中遇到的坑，便于后来居上者</td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11123907.html\"> <font color=\"#ff6984\" size=\"3\"> 网安知识扫盲篇 </font> </a> </td><td>三天打鱼，不深入了解原理，只会让你成为脚本小子。 </td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11366695.html\"> <font color=\"#ff6984\" size=\"3\"> vulhub靶场漏洞复现 </font> </a> </td><td>让漏洞复现变得简单，让安全研究者更加专注于漏洞原理本身。</td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11324653.html\"> <font color=\"#ff6984\" size=\"3\"> shell编程篇 </font> </a> </td><td>不涉及linux基础，最终案例会偏向于安全加固方向。 <font color=\"red\">[待完结]</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11134620.html\"> <font color=\"#ff6984\" size=\"3\"> WEB漏洞攻防篇</font> </a> </td><td><font color=\"red\">2021年9月3日停止更新，转战先知社区等安全社区及小密圈</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_10675569.html\"> <font color=\"#ff6984\" size=\"3\"> 渗透工具使用集锦</font> </a> </td><td><font color=\"red\">2021年9月3日停止更新，转战先知社区等安全社区及小密圈</font></td></tr><tr><td align=\"center\" rowspan=\"6\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11366983.html\"> <font color=\"red\" size=\"4.5\">点点点工程师</font> </a> </td><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11563688.html\"> <font color=\"#ff6984\" size=\"3\"> 测试神器 - Charles </font> </a> </td><td>软件测试数据包抓包分析神器</td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11393389.html\"> <font color=\"#ff6984\" size=\"3\"> 测试神器 - Fiddler </font> </a> </td><td>一文学会 fiddle ，学不会倒立吃翔，<font color=\"red\">稀得！</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11393395.html\"> <font color=\"#ff6984\" size=\"3\"> 测试神器 - Jmeter </font> </a> </td><td>不仅是性能测试神器，更可用于搭建轻量级接口自动化测试框架。</td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11462996.html\"> <font color=\"#ff6984\" size=\"3\"> RobotFrameWork</font> </a> </td><td><font color=\"blue\">Python实现的自动化测试利器，该篇章仅介绍UI自动化部分。</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11411882.html\"> <font color=\"#ff6984\" size=\"3\"> Java实现UI自动化</font> </a> </td><td><font color=\"blue\">文档写于2016年，Java实现的UI自动化，仍有借鉴意义。</font></td></tr><tr><td align=\"center\"> <a href=\"#\"> <font color=\"#ff6984\" size=\"3\"> MonkeyRunner</font> </a> </td><td><font color=\"blue\">该工具目前的应用场景已不多，文档已删，为了排版好看才留着。</font></td></tr></tbody></table>\n</blockquote>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/9855fc94edb54102af2ddbdbf685f6e3.gif#pic_center\"/></p>\n<hr/>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#__246\">🐳 事务机制所解决的问题</a></li><li><a href=\"#_Transaction_277\">🐳 事务机制(Transaction)</a></li><li><a href=\"#__317\">🐳 通过事务案例理解事务的原理</a></li><li><a href=\"#_SQL__366\">🐳 SQL 语句的事务管理</a></li><li><a href=\"#_ACID_459\">🐳 事务的ACID属性</a></li></ul>\n</div>\n<p></p>\n<p>该章节开始我们将学习一个非常重要的知识点，那就是 “数据库的事务机制” 。在之前的章节介绍 MySQL 历史的时候提到过，MySQL 是在 <code>5.0 版本之后引入的事务机制</code> 才正式的打开了企业市场的。接下来就了解一下 “事务机制” 对于一个数据库产品来说，到底有多重要。</p>\n<br/>\n<br/>\n<h1><a id=\"__246\"></a>🐳 事务机制所解决的问题</h1>\n<br/>\n<blockquote>\n<p><code>在学习 \"事务机制\" 之前，我们先来看一下 \"事务机制\" 解决了哪些问题？</code></p>\n<hr/>\n<ul><li>避免写入的行为直接操作数据文件。 \n   <ul><li>以现实场景为例：当我们在修改一份非常重要的文件时，通常是先备份一下，然后在副本里面去修改文件；数据库领域亦是如此，如果 SQL 语句直接操作数据文件，这本身也是一件非常危险的事情。</li><li>就比如说，当我们在执行 “UPDATE” 语句的时候，突然停电、或者服务器突然重启了，我们就无法知道有哪些记录被修改了，哪些记录没有被修改。如此的 “UPDATE” 语句执行的结果，与初衷是完全不一致的，那可就相当危险了<code>（尤其是这种类似的突发事件）</code>。</li></ul> </li></ul>\n<hr/>\n<ul><li>如果说使用的 “UPDATE、DELETE” 等 SQL 语句不是直接修改 数据文件 的话，那么又是如何实现 “修改、删除” 数据的呢？如何实现就和事务机制有关系了。 \n   <ul><li>MySQL 共有 <code>5种 日志文件</code>，其中的 <code>undo日志</code>、<code>redo日志</code> 与事务机制有关。</li><li>这里的<code>日志文件</code>其实就相当于是<code>数据文件</code> 的副本，SQL 语句操作什么样的记录，MySQL 的数据库就会将这些记录拷贝到 <code>undo日志</code> 里面，然后 <code>增、删、改、查</code> 这些操作会记录在 <code>redo日志</code> 里面 。</li><li>如果这些 SQL 语句的操作没有问题，最后会将 <code>redo日志</code> 与 <code>数据文件</code> 进行同步，即使在同步过程中出现停电、死机、重启等问题，由于 <code>redo日志</code> 的存在，重启了 MySQL 数据库以后，继续完成这个同步就可以了。同步完成之后，修改的记录就会真正的写到 <code>数据文件</code> 里面了。</li></ul> </li></ul>\n<hr/>\n<p><code>MySQL 有了日志文件之后，对数据的修改不再是直接修改数据文件，而是在日志文件尝试去操作，没有问题的情况下在执行同步。就算是同步的时候遇到问题也没关系。重新启动数据库服务，继续完成同步就可以了。</code></p>\n<p><code>其实理解了 \"undo\" 与 \"redo\" 日志的作用，事务机制也就搞明白了一半了。</code></p>\n</blockquote>\n<br/>\n<br/>\n<h1><a id=\"_Transaction_277\"></a>🐳 事务机制(Transaction)</h1>\n<br/>\n<blockquote>\n<ul><li>事务机制也叫做 “Transaction”</li><li>在数据库的使用者眼里， <code>RDBMS（关系数据库管理系统）的核心就是 \"SQL语句\" + \"事务\"（ACID）</code>。SQL 语句我们掌握的差不多了，接下来只剩下 <code>\"事务机制\"</code> 来攻破了。</li><li>从宏观上来理解 <code>\"事务机制\"</code> ：在 “事务机制” 下，所有的 SQL 语句 都被当做是一个整体，要么这些 SQL 语句全部执行成功，要么就全部执行失败。决不能出现，部分 SQL 语句成功，另一部分 SQL 语句失败的情况。</li><li>在实际业务当中，“事务的这个特性是非常重要的”。</li></ul>\n<hr/>\n<p>以真实场景，网络购物为例。在正常的网上购物的一次交易中，其付款过程至少包括以下几步数据库操作：</p>\n<pre><code>更新客户所购商品的库存信息\n\n保存客户付款信息--可能包括与银行系统的交互\n\n生成订单并且保存到数据库中\n\n更新用户相关信息，例如购物数量等等\n</code></pre>\n<p><code>正常的情况下，这些操作将顺利进行，最终交易成功，与交易相关的所有数据库信息也成功地更新。</code></p>\n<p><code>但是，如果在这一系列过程中任何一个环节出了差错，例如在更新商品库存信息时发生异常、该顾客银行帐户存款不足等，都将导致交易失败。</code></p>\n<p><code>一旦交易失败，数据库中所有信息都必须保持交易前的状态不变，比如最后一步更新用户信息时失败而导致交易失败，那么必须保证这笔失败的交易不影响数据库的状态--库存信息没有被更新、用户也没有付款，订单也没有生成。</code></p>\n<p><code>否则，数据库的信息将会一片混乱而不可预测。</code></p>\n<p><code>数据库的事务机制</code>正是用来保证这种情况下交易的平稳性和可预测性的技术。因为它满足业务过程中每一个步骤必须成功，或者因为一个步骤的失败撤销流程里的全部操作。</p>\n</blockquote>\n<br/>\n<br/>\n<h1><a id=\"__317\"></a>🐳 通过事务案例理解事务的原理</h1>\n<br/>\n<blockquote>\n<ul><li>将属于 10 部门中职位为 “MANGER” 的员工调往 20 部门，其他岗位的员工调往 30 部门，然后删除 10 部门 。 \n   <ul><li><code>分析：最终目的是删除 \"10\" 部门。</code></li><li><code>分析：先将 10 部门中职位为 \"MANGER\" 的员工调往 20 部门; ---&gt; 这是 \"UPDATE\" 语句</code></li><li><code>分析：再将其他岗位的员工调往 30 部门; ---&gt; 这也是 \"UPDATE\" 语句</code></li><li><code>分析：最后再 删除 10 部门; ---&gt; 这是 \"DELETE\" 语句</code></li></ul> </li></ul>\n<hr/>\n<p><code>在前面的章节，觉得在没有使用 \"事务\" 的情况下，也能够执行 \"增、删、改、查\" 这样的操作。这是因为 MySQL 默认情况下，执行一条 SQL 语句之前都会开启 \"事务\" 。等该 SQL 语句执行结束，就会提交事务，也就是让 \"redo\" 日志文件与数据文件做同步。</code></p>\n<p><code>继续执行下一条 SQL 语句，同样如此。先开启 \"事务\"，执行 SQL，然后再提交 \"事务\" 。</code></p>\n<p><code>在面对一条 SQL 语句，这种自动提交 \"事务\" 的模式是没有问题的。</code></p>\n<p><code>但是我们现在所需要实现的这个案例，它并不是一条SQL语句能够完成。他需要先执行 \"UPDATE\" 语句，再执行 \"DELETE\" 语句。这两条语句必须要在同一个 \"事务\" 之下运行才行，这就需要手动的管理 \"事务\" 了。</code></p>\n<pre><code>1、利用 SQL 语句 手动的开启事务\n\n2、执行 \"UPDATE\" 语句；执行 \"UPDATE\" 语句之前 MySQL 数据会将要修改的数据拷贝到 \"undo\" 日志，执行的修改会被记录在 \"redo\" 日志\n\n3、执行 \"DELETE\" 语句；执行 \"DELETE\" 语句之前 MySQL 数据会将要修改的数据拷贝到 \"undo\" 日志，执行的修改会被记录在 \"redo\" 日志\n\n4、提交事务；当提交 \"事务\" 后，MySQL 会让 \"redo\" 日志的将数据同步到数据文件，即使出现意外也没有关系。\n\n5、如果说出现意外的情况并结束之后，仍然希望让 MySQL 继续执行事务，就会让 \"redo\" 日志的继续就爱那个数据同步到数据文件；\n\n6、如果不想继续同步，可以将 \"undo\" 日志的数据同步到数据文件，如此，数据文件就恢复到了 事务 提交之前的一个状态了。\n</code></pre>\n<p><code>从上文介绍来看，\"undo\" 与 \"redo\" 这两个日志文件真的很重要。当一些特殊原因造成 \"事务\" 不能提交的时候，就应该将 \"事务\" 进行回滚。</code></p>\n<p><code>例如我们在抢购 \"秒杀\" 商品的时候，虽然抢到了商品，但是支付晚了，这事务就必须得回滚，而不能提交。 \"事务的回滚\" 对 MySQL 来说是非常的简单的，只需要将 \"undo\" 与 \"redo\" 这两个日志文件的数据做一个标记即可，这些被标记过得数据就不会被同步到 \"数据文件\" 了。由此看来， \"事务原子性的全部成功或者全部失败的重要性就体现出来了。\"</code></p>\n</blockquote>\n<br/>\n<br/>\n<h1><a id=\"_SQL__366\"></a>🐳 SQL 语句的事务管理</h1>\n<br/>\n<blockquote>\n<ul><li>上文我们提过，默认情况下，MySQL 执行的每一条 SQL 都会自动开启和提交事务。</li><li>当 <code>多条 SQL 语句被纳入到一个事务之下的时候，</code> 是可以通过手动的方式 “管理事务” 的。</li></ul>\n<hr/>\n<ul><li>手动 “管理事务” 语法如下：</li></ul>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">START</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SQL</span> 语句<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">COMMIT</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">ROLLBACK</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- COMMIT : 提交事务</span>\n<span class=\"token comment\">-- ROLLBACK : 回滚事务</span>\n</code></pre>\n<hr/>\n<p><code>事务管理案例:</code></p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">START</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> t_emp<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> t_dept<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> t_emp<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> t_dept<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- COMMIT;</span>\n<span class=\"token comment\">-- 暂时不提交事务</span>\n</code></pre>\n<blockquote>\n<div align=\"center\">\n<img src=\"..\\..\\static\\image\\f3a08e7987be4cce8071c7b107f06e0e.png\" width=\"1000\"/>\n</div>\n<hr/>\n<div align=\"center\">\n<img src=\"..\\..\\static\\image\\a8dbdeae3c0341bfbc4a53f17daf8b5d.png\" width=\"1000\"/>\n</div>\n</blockquote>\n<hr/>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">START</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">-- 手动开启事务</span>\n\n<span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> t_emp<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> t_dept<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> t_emp<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> t_dept<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">COMMIT</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">-- 提交事务（需要注意的是 \"COMMIT\" 提交的是一个最终结果状态，而不是删除这个动作的中间状态）</span>\n\n<span class=\"token comment\">-- 此时提交了事务，则完成了删除数据表的操作，\"t_emp\" 与 \"t_dept\" 表中的记录则被删除。</span>\n<span class=\"token comment\">-- 只有提交了事务之后，\"redo\" 日志才会与数据文件同步数据，否则真正的数据文件是不会发生变化的。</span>\n</code></pre>\n<hr/>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">START</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">-- 手动开启事务</span>\n\n<span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> t_emp<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> t_dept<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> t_emp<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> t_dept<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">ROLLBACK</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">-- 回滚事务</span>\n\n<span class=\"token comment\">-- 此时未提交事务，而是回滚了事务，删除数据表的操作被回滚，\"t_emp\" 与 \"t_dept\" 表中的记录未被删除。</span>\n<span class=\"token comment\">-- \"redo\" 日志因为回滚的操作，未与数据文件同步数据，真正的数据文件没有发生变化。</span>\n</code></pre>\n</blockquote>\n<br/>\n<br/>\n<h1><a id=\"_ACID_459\"></a>🐳 事务的ACID属性</h1>\n<br/>\n<blockquote>\n<ul><li>事务的四个特性分别是：<code>原子性、一致性、隔离性、持久性；这四个特性被统称为事务的 \"ACID\" 属性。</code></li></ul>\n<hr/>\n<ul><li><code>事务的原子性：一个事务的所有操作要么全部成功，要么全部失败。事务执行后，不允许停留在中间某个状态。</code></li><li><code>事务的一致性：不管在任何给定的时间、并发事务有多少，事务必须保证运行结果的一致性。(PS:事务的一致性这个特点真的很重要，它要求事务在并发的清情况下不会出现数据的 \"歧义\" ；事务如何实现 \"一致性\" 呢？其实很简单，取值事务相互之间读取临时数据即可。)</code></li><li><code>事务的隔离性：隔离性对于事务的一致性来说至关重要，隔离性要求事务不受其他并发事务的影响，如同在给定的时间内，该事物是数据库唯一运行的事务。也就是说，每个事务只能看到自己事务内的相关数据，别的事务的临时数据在当前事务里是看不到的。</code></li><li><code>事务的持久性：持久性的意思就是实物一旦提交，结果便是永久性的。即使发生了宕机、断电等突发状况，仍然可以依靠事务的日志完成数据的持久化。</code></li></ul>\n</blockquote>\n<hr/>\n<div align=\"center\">\n<img src=\"https://img-blog.csdnimg.cn/975ef72a4a20472c83cab3dff3a2cbb4.gif#pic_center\" width=\"1000\"/>\n</div>\n<hr/>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-08-18 20:37:23", "summary": "万叶集隐约雷鸣，阴霾天空。但盼风雨来，能留你在此。前言：作者简介：渴望力量的哈士奇，大家可以叫我哈士奇，一位致力于全栈赋能的博主博客专家认证、新星计划第三季全栈赛道、华为云享专家、阿里云专家博主如果文"}