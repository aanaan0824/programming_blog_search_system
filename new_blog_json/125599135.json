{"blogid": "125599135", "writerAge": "码龄5年", "writerBlogNum": "6", "writerCollect": "12", "writerComment": "5", "writerFan": "6", "writerGrade": "2级", "writerIntegral": "114", "writerName": "枫尘。", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125599135.jpg", "writerRankTotal": "102895", "writerRankWeekly": "217742", "writerThumb": "3", "writerVisitNum": "8004", "blog_read_count": "1308", "blog_time": "已于 2022-07-15 11:50:45 修改", "blog_title": "HybridCLR+Addressables资源代码全热更框架 二", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_huotuo__addressables_0\"></a>第二章 使用huotuo 与 addressables</h2>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#_huotuo__addressables_0\">第二章 使用huotuo 与 addressables</a></li><li><ul><li><a href=\"#HybridCLR_3\">一.修改HybridCLR打包方式</a></li><li><a href=\"#_162\">二.设置热更场景</a></li><li><a href=\"#_262\">三.打包测试</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_281\">总结</a></li></ul>\n</div>\n<p></p>\n<h3><a id=\"HybridCLR_3\"></a>一.修改HybridCLR打包方式</h3>\n<p>因为HybridCLR实例代码中使用的是传统<code>AssetBundle</code>打包方式，将预制体，程序集，场景打包到ab包中，在这里我们将替换为<code>Addressables</code>打包<br/> 1.创建热更程序集<code>Hotfix</code></p>\n<ul><li> <p>新建文件夹<code>HotFix</code></p> </li><li> <p>新建文件<code>HotFix.asmdef</code>并检视界面修改属性如下<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e333cfef5e3545cd827ff30ecfdd4cbd.png\"/></p> </li><li> <p>新建文件<code>App.cs</code><br/> <code>App.cs</code>代码如下</p> </li></ul>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>AddressableAssets</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">HotFix</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">MyValue</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> s<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">if</span> !</span><span class=\"token return-type class-name\">UNITY_EDITOR</span>\n            <span class=\"token function\">LoadMetadataForAOTAssembly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ydd-- AOT程序集加载完毕!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token preprocessor property\">#</span><span class=\"token return-type class-name\">endif</span>\n            <span class=\"token function\">TestAOTGeneric</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token function\">LoadScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 测试 aot泛型</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">TestAOTGeneric</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>MyValue<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            arr<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MyValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AOT泛型补充元数据机制测试正常\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 切换场景</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">LoadScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> handler <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Addressables<span class=\"token punctuation\">.</span><span class=\"token function\">LoadSceneAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MainScene\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Task<span class=\"token punctuation\">;</span>\n            handler<span class=\"token punctuation\">.</span><span class=\"token function\">ActivateAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 为aot assembly加载原始metadata， 这个代码放aot或者热更新都行。</span>\n        <span class=\"token comment\">/// 一旦加载后，如果AOT泛型函数对应native实现不存在，则自动替换为解释模式执行</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">unsafe</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">LoadMetadataForAOTAssembly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 可以加载任意aot assembly的对应的dll。但要求dll必须与unity build过程中生成的裁剪后的dll一致，而不能直接使用原始dll。</span>\n            <span class=\"token comment\">// 我们在Huatuo_BuildProcessor_xxx里添加了处理代码，这些裁剪后的dll在打包时自动被复制到 {项目目录}/HuatuoData/AssembliesPostIl2CppStrip/{Target} 目录。</span>\n\n            <span class=\"token comment\">/// 注意，补充元数据是给AOT dll补充元数据，而不是给热更新dll补充元数据。</span>\n            <span class=\"token comment\">/// 热更新dll不缺元数据，不需要补充，如果调用LoadMetadataForAOTAssembly会返回错误</span>\n\n\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> dllBytes <span class=\"token keyword\">in</span> LoadDll<span class=\"token punctuation\">.</span>aotDllBytes<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">fixed</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> dllBytes<span class=\"token punctuation\">.</span>bytes<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">// 加载assembly对应的dll，会自动为它hook。一旦aot泛型函数的native函数不存在，用解释器版本代码</span>\n                    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> err <span class=\"token operator\">=</span> HybridCLR<span class=\"token punctuation\">.</span>RuntimeApi<span class=\"token punctuation\">.</span><span class=\"token function\">LoadMetadataForAOTAssembly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>IntPtr<span class=\"token punctuation\">)</span>ptr<span class=\"token punctuation\">,</span> dllBytes<span class=\"token punctuation\">.</span>bytes<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"LoadMetadataForAOTAssembly:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">dllBytes<span class=\"token punctuation\">.</span>name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">. ret:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">err</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<ul><li>在检视界面修改<code>Main/Main.asmdef</code>文件，加入对<code>Addressables</code>的引用</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\34142b2f4f2e41d192e3a729b3edab4a.png\"/><br/> 2.打开<code>LoadDll.cs</code>，修改代码如下</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Reflection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">if</span> !UNITY_EDITOR</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>AddressableAssets</span><span class=\"token punctuation\">;</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token comment\">/// &lt;summary&gt;</span>\n<span class=\"token comment\">/// 加载热更新Dll</span>\n<span class=\"token comment\">/// &lt;/summary&gt;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoadDll</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Assembly</span> gameAss<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">TextAsset<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> aotDllBytes<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span> aotDlls <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token string\">\"mscorlib.dll\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"System.dll\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"System.Core.dll\"</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 如果使用了Linq，需要这个</span>\n                <span class=\"token comment\">// \"Newtonsoft.Json.dll\",</span>\n                <span class=\"token comment\">// \"protobuf-net.dll\",</span>\n                <span class=\"token comment\">// \"Google.Protobuf.dll\",</span>\n                <span class=\"token comment\">// \"MongoDB.Bson.dll\",</span>\n                <span class=\"token comment\">// \"DOTween.Modules.dll\",</span>\n                <span class=\"token comment\">// \"UniTask.dll\",</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Start is called before the first frame update</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">LoadGameDll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">RunMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">LoadGameDll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">if</span> !UNITY_EDITOR</span>\n            aotDllBytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TextAsset</span><span class=\"token punctuation\">[</span>aotDlls<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> aotDlls<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                aotDllBytes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Addressables<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">LoadAssetAsync</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TextAsset<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>aotDlls<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">WaitForCompletion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">TextAsset</span> hotfixDll <span class=\"token operator\">=</span> Addressables<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">LoadAssetAsync</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TextAsset<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HotFix.dll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">WaitForCompletion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            gameAss <span class=\"token operator\">=</span> Assembly<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span>hotfixDll<span class=\"token punctuation\">.</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">else</span></span>\n        gameAss <span class=\"token operator\">=</span> AppDomain<span class=\"token punctuation\">.</span>CurrentDomain<span class=\"token punctuation\">.</span><span class=\"token function\">GetAssemblies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span>assembly <span class=\"token operator\">=&gt;</span> assembly<span class=\"token punctuation\">.</span><span class=\"token function\">GetName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Name <span class=\"token operator\">==</span> <span class=\"token string\">\"HotFix\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">RunMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>gameAss <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            UnityEngine<span class=\"token punctuation\">.</span>Debug<span class=\"token punctuation\">.</span><span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dll未加载\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> appType <span class=\"token operator\">=</span> gameAss<span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HotFix.App\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> mainMethod <span class=\"token operator\">=</span> appType<span class=\"token punctuation\">.</span><span class=\"token function\">GetMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mainMethod<span class=\"token punctuation\">.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 如果是Update之类的函数，推荐先转成Delegate再调用，如</span>\n        <span class=\"token comment\">//var updateMethod = appType.GetMethod(\"Update\");</span>\n        <span class=\"token comment\">//var updateDel = System.Delegate.CreateDelegate(typeof(Action&lt;float&gt;), null, updateMethod);</span>\n        <span class=\"token comment\">//updateDel(deltaTime);</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_162\"></a>二.设置热更场景</h3>\n<p>使用上一章工程</p>\n<p>1.修改默认场景名为<code>Entry</code>并加入<code>BuildSetting</code>作为热更新的入口，新建场景<code>MainScene</code>作为热更场景,然后打开<code>Addressable Groups</code>选择Create<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a4b3da07f79f4360ad0cffbac01723f0.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a0bcccb68c454fbca71588c4b2e76f8a.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b41f2cf13afb4a92af6e68301a284a71.png\"/><br/> 2.在检视界面将<code>MainScene</code>标记为可寻址，名称为<code>MainScene</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4a5c07af46ed4e44b5b0b426f0190287.png\"/><br/> 3.打开<code>Entry</code>场景，修改界面UI如下，添加空对象挂载脚本<code>LoadDll.cs</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ea349a2066af46beb6c4945c4d7504f9.png\"/></p>\n<p>4.编译dll<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d933df0a490045e89b0f407bb93395c2.png\"/></p>\n<p>5.首次打包获取aot dll（<code>此次为无效打包，仅为获取aot dll</code>），然后<code>HybridCLRData/AssembliesPostIl2CppStrip/StandaloneWindows64</code>目录会如下<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\43624b13d96b40bf967848561e5a718d.png\"/></p>\n<p>6.复制4.5步中的HotFix.dll，mscorlib.dll，System.dll，System.Core.dll到Assets目录下<br/> <code>因为Addressables只能加载Assets目录下的资源，所以我们需要将HybridCLR生成的dll复制过去</code><br/> 在<code>Assets/Editor</code>目录下编写编辑器脚本<code>CopeDll2Assets.cs</code>如下</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEditor</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">HybridCLR</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CopeDll2Assets</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Editor</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MenuItem</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tools/复制Dll到Assets/ActiveBuildTarget\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">CopeByActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>EditorUserBuildSettings<span class=\"token punctuation\">.</span>activeBuildTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MenuItem</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tools/复制Dll到Assets/Win32\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">CopeByStandaloneWindows32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>BuildTarget<span class=\"token punctuation\">.</span>StandaloneWindows<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MenuItem</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tools/复制Dll到Assets/Win64\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">CopeByStandaloneWindows64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>BuildTarget<span class=\"token punctuation\">.</span>StandaloneWindows64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MenuItem</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tools/复制Dll到Assets/Android\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">CopeByAndroid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>BuildTarget<span class=\"token punctuation\">.</span>Android<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MenuItem</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tools/复制Dll到Assets/IOS\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">CopeByIOS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>BuildTarget<span class=\"token punctuation\">.</span>iOS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BuildTarget</span> target<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span> copyDlls <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token string\">\"HotFix.dll\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> outDir <span class=\"token operator\">=</span> BuildConfig<span class=\"token punctuation\">.</span><span class=\"token function\">GetHotFixDllsOutputDirByTarget</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> exportDir <span class=\"token operator\">=</span> Application<span class=\"token punctuation\">.</span>dataPath <span class=\"token operator\">+</span> <span class=\"token string\">\"/Res/Dlls\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Directory<span class=\"token punctuation\">.</span><span class=\"token function\">Exists</span><span class=\"token punctuation\">(</span>exportDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            Directory<span class=\"token punctuation\">.</span><span class=\"token function\">CreateDirectory</span><span class=\"token punctuation\">(</span>exportDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> copyDll <span class=\"token keyword\">in</span> copyDlls<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            File<span class=\"token punctuation\">.</span><span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">outDir</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">copyDll</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">exportDir</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">copyDll</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.bytes\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> aotDllDir <span class=\"token operator\">=</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">BuildConfig<span class=\"token punctuation\">.</span>AssembliesPostIl2CppStripDir</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">target</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> dll <span class=\"token keyword\">in</span> LoadDll<span class=\"token punctuation\">.</span>aotDlls<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> dllPath <span class=\"token operator\">=</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">aotDllDir</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">dll</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>File<span class=\"token punctuation\">.</span><span class=\"token function\">Exists</span><span class=\"token punctuation\">(</span>dllPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Debug<span class=\"token punctuation\">.</span><span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"ab中添加AOT补充元数据dll:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">dllPath</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> 时发生错误,文件不存在。需要构建一次主包后才能生成裁剪后的AOT dll\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> dllBytesPath <span class=\"token operator\">=</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">exportDir</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">dll</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.bytes\"</span></span><span class=\"token punctuation\">;</span>\n            File<span class=\"token punctuation\">.</span><span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>dllPath<span class=\"token punctuation\">,</span> dllBytesPath<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        AssetDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">Refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"热更Dll复制成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>执行<code>Tools/复制Dll到Assets/Win64</code>,结构如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dbbdfd1672c943c2aee49b3be18e0edb.png\"/></p>\n<p>7.将4个文件均加入<code>Addressables</code>并修改名称<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ea2d649995584d40aa94c82a0dc8e4b1.png\"/></p>\n<h3><a id=\"_262\"></a>三.打包测试</h3>\n<p>1.打包<code>Addressables Group</code> Befault build Script<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2fc22a1ff2104645bec02811aa7aa6d1.png\"/><br/> 2.打PC包测试</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\65a8ff83b25f4cf7857338bedb319a68.png\"/></p>\n<p>直接进入热更场景，说明在热更工程<code>App.Main</code>中的<code>Addressables</code>加载场景与async/await语法糖也能正确使用</p>\n<pre><code class=\"prism language-csharp\">        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 切换场景</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">LoadScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> handler <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Addressables<span class=\"token punctuation\">.</span><span class=\"token function\">LoadSceneAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MainScene\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Task<span class=\"token punctuation\">;</span>\n            handler<span class=\"token punctuation\">.</span><span class=\"token function\">ActivateAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_281\"></a>总结</h1>\n<p><code>hybridclr与 addressables的使用已经完毕，下一章会演示同时更新资源与代码</code></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-07-15 11:50:45", "summary": "第二章使用与文章目录第二章使用与一修改打包方式二设置热更场景三打包测试总结一修改打包方式因为实例代码中使用的是传统打包方式，将预制体，程序集，场景打包到包中，在这里我们将替换为打包创建热更程序集新建文"}