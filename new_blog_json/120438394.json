{"blogid": "120438394", "writerAge": "码龄2年", "writerBlogNum": "59", "writerCollect": "208", "writerComment": "18", "writerFan": "50", "writerGrade": "3级", "writerIntegral": "633", "writerName": "dlhto", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_120438394.jpg", "writerRankTotal": "1456530", "writerRankWeekly": "365077", "writerThumb": "36", "writerVisitNum": "69902", "blog_read_count": "14580", "blog_time": "于 2021-09-23 20:02:10 发布", "blog_title": "FISCO BCOS JAVA SDK（以HelloWorld合约为例）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"FISCO_BCOS_JAVA_SDK_0\"></a>FISCO BCOS JAVA SDK（环境搭建）</h1>\n<font color=\"#999AAA\"> </font>\n<hr color=\"#000000\" size='1\"'/>\n<font color=\"#999AAA\"> </font>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#FISCO_BCOS_JAVA_SDK_0\">FISCO BCOS JAVA SDK（环境搭建）</a></li><li><a href=\"#_13\">前言</a></li><li><a href=\"#_24\">一、环境准备</a></li><li><ul><li><a href=\"#1_26\">1.开发工具</a></li><li><a href=\"#2_31\">2.开发环境</a></li></ul>\n</li><li><a href=\"#_34\">二、开发步骤</a></li><li><ul><li><a href=\"#1Gradle_35\">1.创建一个Gradle应用</a></li><li><a href=\"#2Java_SDK_45\">2.引入Java SDK</a></li><li><a href=\"#3SDK_66\">3.配置SDK证书</a></li><li><a href=\"#4_78\">4.准备智能合约</a></li><li><a href=\"#5_109\">5.创建配置文件</a></li><li><a href=\"#6Java_SDK_222\">6.使用Java SDK部署和调用智能合约</a></li><li><a href=\"#7_316\">7.运用测试</a></li></ul>\n</li><li><a href=\"#_324\">总结</a></li></ul>\n</div>\n<p></p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_13\"></a>前言</h1>\n<font color=\"#999AAA\"> </font>\n<p><a href=\"https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/sdk/java_sdk/index.html\">参考官方文档</a></p>\n<hr color=\"#000000\" size='1\"'/>\n<p><font color=\"#999AAA\">提示：以下是本篇文章正文内容，下面案例可供参考</font></p>\n<h1><a id=\"_24\"></a>一、环境准备</h1>\n<h2><a id=\"1_26\"></a>1.开发工具</h2>\n<p><font color=\"#999AAA\">Java：JDK 14 （JDK1.8 至JDK 14都支持）<br/> <font color=\"#999AAA\">IDE：IntelliJ IDE.</font></font></p>\n<p><a href=\"https://www.jetbrains.com/idea/download/#section=windows\">安装官网</a></p>\n<h2><a id=\"2_31\"></a>2.开发环境</h2>\n<p><font color=\"#999AAA\">搭建一条FISCO BCOS链<br/> <a href=\"https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/installation.html#fisco-bcos\">FISCO BCOS安装搭建。</a></font></p>\n<h1><a id=\"_34\"></a>二、开发步骤</h1>\n<h2><a id=\"1Gradle_35\"></a>1.创建一个Gradle应用</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8b4459575e1c470f8163c6f4775408b6.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fb13cc4b1db14820a5f6df3ef66e2ec2.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\051e74e8460742ebbbf5b48eef4440b4.png\"/></p>\n<h2><a id=\"2Java_SDK_45\"></a>2.引入Java SDK</h2>\n<p><strong>在build.gradle中引入Java SDK</strong></p>\n<pre><code class=\"prism language-bash\">compile <span class=\"token punctuation\">(</span><span class=\"token string\">'org.fisco-bcos.java-sdk:fisco-bcos-java-sdk:2.7.2'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e550aa0688204b3cb18d31e3b6df5f89.png\"/></p>\n<p>如果您使用maven 通过以下方法引入Java SDK</p>\n<pre><code class=\"prism language-bash\"><span class=\"token operator\">&lt;</span>dependency<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>groupId<span class=\"token operator\">&gt;</span>org.fisco-bcos.java-sdk<span class=\"token operator\">&lt;</span>/groupId<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>artifactId<span class=\"token operator\">&gt;</span>fisco-bcos-java-sdk<span class=\"token operator\">&lt;</span>/artifactId<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>version<span class=\"token operator\">&gt;</span><span class=\"token number\">2.7</span>.<span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&lt;</span>/version<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>/dependency<span class=\"token operator\">&gt;</span>\n</code></pre>\n<font color=\"#999AAA\"> </font>\n<h2><a id=\"3SDK_66\"></a>3.配置SDK证书</h2>\n<p><strong>SDK证书位于（搭建第一个区块链网络）~/fisco/nodes/127.0.0.1/sdk/目录</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d5716c44530444a997774308a8268b0f.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a92d3fec4a434614994314cfc995925a.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9475dece8f49468e96cf901d5c8b43a6.png\"/><br/> <strong>或者直接拷贝该文件夹</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\df492418c8cf4283b5319ff5e3997dbb.png\"/><br/> <strong>后续在对其中的配置文件进行修改</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\30ce0c636f4c48639a1d1c12f6f33f2a.png\"/></p>\n<font color=\"#999AAA\"> </font>\n<h2><a id=\"4_78\"></a>4.准备智能合约</h2>\n<p>控制台console和java-sdk-demo均提供了工具，可以将solidity合约生成出调用该合约java工具类。本例中使用console做为例子. 使用java-sdk-demo给智能合约生成调用它的Java工具类” 首先，下载控制台。</p>\n<pre><code class=\"prism language-bash\"><span class=\"token builtin class-name\">cd</span> ~/fisco/console\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3371f92a2ec44e708f108be4b9b38a85.png\"/><br/> 然后，将您要用到的Solidity智能合约放入~/fisco/console/contracts/solidity的目录。本次我们用console中的HelloWorld.sol作为例子。保证HelloWorld.sol在指定的目录下。</p>\n<pre><code class=\"prism language-bash\"><span class=\"token builtin class-name\">cd</span> ~/fisco/console/contracts/solidity\n<span class=\"token function\">ls</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5d302c976cc7422483f9bab2233a3739.png\"/><br/> <strong>生成调用HelloWorld.sol智能合约的java类</strong><br/> <font color=\"#999AAA\">代码如下（示例）：</font></p>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\">#使用sol2java.sh将contracts/solidity下的所有合约编译产生bin,abi,java工具类。</span>\n<span class=\"token comment\">#当前目录~/fisco/console</span>\n <span class=\"token function\">bash</span> sol2java.sh org.com.fisco\n<span class=\"token comment\">#以上命令中参数“org.com.fisco”是指定产生的java类所属的包名。</span>\n<span class=\"token comment\">#./sol2java.sh [packageName] [solidityFilePath] [javaCodeOutputDir]</span>\n</code></pre>\n<p>未执行该脚本时：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fa66ff24c1ef44e299ea6458587786e5.png\"/><br/> 执行脚本进行合约编译<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\87eedabbc9a8419187704e2b96c52298.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1db65fabfdf34659b7a11d4e6a9b028f.png\"/></p>\n<h2><a id=\"5_109\"></a>5.创建配置文件</h2>\n<p>在项目中创建配置文件config.toml, 可参照配置向导进行配置，也可以参照config-example.toml,</p>\n<p>将编译生出的ABI和BIN以及两个配置文件放到resource目录下<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b68936dc521048158479520cab6c383d.png\"/><br/> 把编译生成的java类，放到新建包（org.com.fisco）下，点击构建项目无报错。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a9f0ac37ce6c49b5995a1f18b9d0dba6.png\"/><br/> 对配置文件进行修改，IDE工具在Windows系统，区块链网络为centos7服务器上。<br/> 如果是虚拟机我们用ifconfig查看IP进行配置，服务器就用服务器ip地址<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\93256e36a0584f35988f0d9b33685a52.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1c20544151774ed6aeda61d049b51171.png\"/></p>\n<p>log4j.propertise配置如下：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\">#</span>\n<span class=\"token comment\"># Copyright 2014-2020  [fisco-dev]</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except</span>\n<span class=\"token comment\"># in compliance with the License. You may obtain a copy of the License at</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># http://www.apache.org/licenses/LICENSE-2.0</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># Unless required by applicable law or agreed to in writing, software distributed under the License</span>\n<span class=\"token comment\"># is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express</span>\n<span class=\"token comment\"># or implied. See the License for the specific language governing permissions and limitations under</span>\n<span class=\"token comment\"># the License.</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\">#</span>\n\n<span class=\"token comment\">### set log levels ###</span>\nlog4j.rootLogger<span class=\"token operator\">=</span>DEBUG, <span class=\"token function\">file</span>\n\n<span class=\"token comment\">### output the log information to the file ###</span>\nlog4j.appender.file<span class=\"token operator\">=</span>org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.file.DatePattern<span class=\"token operator\">=</span><span class=\"token string\">'_'</span>yyyyMMddHH<span class=\"token string\">'.log'</span>\nlog4j.appender.file.File<span class=\"token operator\">=</span>./log/console.log\nlog4j.appender.file.Append<span class=\"token operator\">=</span>true\nlog4j.appender.file.filter.traceFilter<span class=\"token operator\">=</span>org.apache.log4j.varia.LevelRangeFilter\nlog4j.appender.file.layout<span class=\"token operator\">=</span>org.apache.log4j.PatternLayout\nlog4j.appender.file.layout.ConversionPattern<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>%p<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>%-d<span class=\"token punctuation\">{<!-- --></span>yyyy-MM-dd HH:mm:ss<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> %C<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span>.%M<span class=\"token punctuation\">(</span>%L<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> %m%n\n\n<span class=\"token comment\">###output the log information to the console ###</span>\nlog4j.appender.stdout<span class=\"token operator\">=</span>org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.Target<span class=\"token operator\">=</span>System.out\nlog4j.appender.stdout.layout<span class=\"token operator\">=</span>org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>%p<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>%-d<span class=\"token punctuation\">{<!-- --></span>yyyy-MM-dd HH:mm:ss<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> %C<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span>.%M<span class=\"token punctuation\">(</span>%L<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> %m%n\n</code></pre>\n<p>config-example.toml文件配置如下：<br/> <strong>修改：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d3d59b8e04f54fdc84be53b6ede50674.png\"/></p>\n<pre><code class=\"prism language-bash\"><span class=\"token punctuation\">[</span>cryptoMaterial<span class=\"token punctuation\">]</span>\n\ncertPath <span class=\"token operator\">=</span> <span class=\"token string\">\"conf\"</span>                           <span class=\"token comment\"># The certification path  </span>\n\n<span class=\"token comment\"># The following configurations take the certPath by default if commented</span>\n<span class=\"token comment\"># caCert = \"conf/ca.crt\"                    # CA cert file path</span>\n                                            <span class=\"token comment\"># If connect to the GM node, default CA cert path is ${certPath}/gm/gmca.crt</span>\n\n<span class=\"token comment\"># sslCert = \"conf/sdk.crt\"                  # SSL cert file path</span>\n                                            <span class=\"token comment\"># If connect to the GM node, the default SDK cert path is ${certPath}/gm/gmsdk.crt</span>\n\n<span class=\"token comment\"># sslKey = \"conf/sdk.key\"                   # SSL key file path</span>\n                                            <span class=\"token comment\"># If connect to the GM node, the default SDK privateKey path is ${certPath}/gm/gmsdk.key</span>\n\n<span class=\"token comment\"># enSslCert = \"conf/gm/gmensdk.crt\"         # GM encryption cert file path</span>\n                                            <span class=\"token comment\"># default load the GM SSL encryption cert from ${certPath}/gm/gmensdk.crt</span>\n\n<span class=\"token comment\"># enSslKey = \"conf/gm/gmensdk.key\"          # GM ssl cert file path</span>\n                                            <span class=\"token comment\"># default load the GM SSL encryption privateKey from ${certPath}/gm/gmensdk.key</span>\n\n<span class=\"token punctuation\">[</span>network<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">#peers=[\"127.0.0.1:20200\", \"127.0.0.1:20201\"]    # The peer list to connect</span>\n<span class=\"token comment\">#修改为服务器IP地址</span>\n<span class=\"token assign-left variable\">peers</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"101.37.116.199:20200\"</span>, <span class=\"token string\">\"101.37.116.199:20201\"</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\"># The peer list to connect</span>\n<span class=\"token comment\"># Configure a private topic as a topic message sender.</span>\n<span class=\"token comment\"># [[amop]]</span>\n<span class=\"token comment\"># topicName = \"PrivateTopic1\"</span>\n<span class=\"token comment\"># publicKeys = [ \"conf/amop/consumer_public_key_1.pem\" ]    # Public keys of the nodes that you want to send AMOP message of this topic to.</span>\n\n<span class=\"token comment\"># Configure a private topic as a topic subscriber.</span>\n<span class=\"token comment\"># [[amop]]</span>\n<span class=\"token comment\"># topicName = \"PrivateTopic2\"</span>\n<span class=\"token comment\"># privateKey = \"conf/amop/consumer_private_key.p12\"         # Your private key that used to subscriber verification.</span>\n<span class=\"token comment\"># password = \"123456\"</span>\n\n<span class=\"token punctuation\">[</span>account<span class=\"token punctuation\">]</span>\nkeyStoreDir <span class=\"token operator\">=</span> <span class=\"token string\">\"account\"</span>         <span class=\"token comment\"># The directory to load/store the account file, default is \"account\"</span>\n<span class=\"token comment\"># accountFilePath = \"\"          # The account file path (default load from the path specified by the keyStoreDir)</span>\naccountFileFormat <span class=\"token operator\">=</span> <span class=\"token string\">\"pem\"</span>       <span class=\"token comment\"># The storage format of account file (Default is \"pem\", \"p12\" as an option)</span>\n\n<span class=\"token comment\"># accountAddress = \"\"           # The transactions sending account address</span>\n                                <span class=\"token comment\"># Default is a randomly generated account</span>\n                                <span class=\"token comment\"># The randomly generated account is stored in the path specified by the keyStoreDir</span>\n\n<span class=\"token comment\"># password = \"\"                 # The password used to load the account file</span>\n\n<span class=\"token punctuation\">[</span>threadPool<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># channelProcessorThreadSize = \"16\"         # The size of the thread pool to process channel callback</span>\n                                            <span class=\"token comment\"># Default is the number of cpu cores</span>\n\n<span class=\"token comment\"># receiptProcessorThreadSize = \"16\"         # The size of the thread pool to process transaction receipt notification</span>\n                                            <span class=\"token comment\"># Default is the number of cpu cores</span>\n\nmaxBlockingQueueSize <span class=\"token operator\">=</span> <span class=\"token string\">\"102400\"</span>             <span class=\"token comment\"># The max blocking queue size of the thread pool</span>\n</code></pre>\n<p><strong>也可以通过xml配置. 使用xml配置进行配置”。</strong></p>\n<font color=\"#999AAA\"> </font>\n<h2><a id=\"6Java_SDK_222\"></a>6.使用Java SDK部署和调用智能合约</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\82558573e314437ba1bbc911bd98bf7e.png\"/></p>\n<p><font color=\"#999AAA\">BcosSDKTest代码如下（示例）：<br/> 官方示例代码</font></p>\n<blockquote>\n<p>public class BcosSDKTest {<!-- --><br/> // 获取配置文件路径<br/> public final String configFile = BcosSDKTest.class.getClassLoader().getResource(“config-example.toml”).getPath();<br/> public void testClient() throws ConfigException {<!-- --><br/> // 初始化BcosSDK<br/> BcosSDK sdk = BcosSDK.build(configFile);<br/> // 为群组1初始化client<br/> Client client = sdk.getClient(Integer.valueOf(1));</p>\n<pre><code>    // 获取群组1的块高\n    BlockNumber blockNumber = client.getBlockNumber();\n\n    // 向群组1部署HelloWorld合约\n    CryptoKeyPair cryptoKeyPair = client.getCryptoSuite().getCryptoKeyPair();\n    HelloWorld helloWorld = HelloWorld.deploy(client, cryptoKeyPair);\n\n    // 调用HelloWorld合约的get接口\n    String getValue = helloWorld.get();\n    \n    // 调用HelloWorld合约的set接口\n    TransactionReceipt receipt = helloWorld.set(\"Hello, fisco\");\n } }\n</code></pre>\n</blockquote>\n<p>本运用中代码如下：</p>\n<pre><code class=\"prism language-bash\">package org.com.fisco<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">import</span> org.fisco.bcos.sdk.BcosSDK<span class=\"token punctuation\">;</span>\n<span class=\"token function\">import</span> org.fisco.bcos.sdk.client.Client<span class=\"token punctuation\">;</span>\n<span class=\"token function\">import</span> org.fisco.bcos.sdk.client.protocol.response.BcosBlock<span class=\"token punctuation\">;</span>\n<span class=\"token function\">import</span> org.fisco.bcos.sdk.client.protocol.response.BcosTransactionReceipt<span class=\"token punctuation\">;</span>\n<span class=\"token function\">import</span> org.fisco.bcos.sdk.client.protocol.response.BlockNumber<span class=\"token punctuation\">;</span>\n<span class=\"token function\">import</span> org.fisco.bcos.sdk.config.exceptions.ConfigException<span class=\"token punctuation\">;</span>\n<span class=\"token function\">import</span> org.fisco.bcos.sdk.crypto.CryptoSuite<span class=\"token punctuation\">;</span>\n<span class=\"token function\">import</span> org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair<span class=\"token punctuation\">;</span>\n<span class=\"token function\">import</span> org.fisco.bcos.sdk.model.TransactionReceipt<span class=\"token punctuation\">;</span>\n<span class=\"token function\">import</span> org.fisco.bcos.sdk.transaction.codec.decode.TransactionDecoderInterface<span class=\"token punctuation\">;</span>\n<span class=\"token function\">import</span> org.fisco.bcos.sdk.transaction.codec.decode.TransactionDecoderService<span class=\"token punctuation\">;</span>\n<span class=\"token function\">import</span> org.fisco.bcos.sdk.transaction.model.exception.ContractException<span class=\"token punctuation\">;</span>\n<span class=\"token function\">import</span> org.junit.Test<span class=\"token punctuation\">;</span>\n\npublic class BcosSDKTest\n<span class=\"token punctuation\">{<!-- --></span>\n    // 获取配置文件路径\n    public final String configFile <span class=\"token operator\">=</span> BcosSDKTest.class.getClassLoader<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.getResource<span class=\"token punctuation\">(</span><span class=\"token string\">\"config-example.toml\"</span><span class=\"token punctuation\">)</span>.getPath<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    @Test\n    public void testClient<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> throws ConfigException <span class=\"token punctuation\">{<!-- --></span>\n        // 初始化BcosSDK\n        BcosSDK sdk <span class=\"token operator\">=</span>  BcosSDK.build<span class=\"token punctuation\">(</span>configFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        // 为群组1初始化client\n        Client client <span class=\"token operator\">=</span> sdk.getClient<span class=\"token punctuation\">(</span>Integer.valueOf<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>\n\n        // 获取群组1的块高\n        BlockNumber blockNumber <span class=\"token operator\">=</span> client.getBlockNumber<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        // 向群组1部署HelloWorld合约\n        CryptoKeyPair cryptoKeyPair <span class=\"token operator\">=</span> client.getCryptoSuite<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.getCryptoKeyPair<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        HelloWorld helloWorld <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n        try <span class=\"token punctuation\">{<!-- --></span>\n            helloWorld <span class=\"token operator\">=</span> HelloWorld.deploy<span class=\"token punctuation\">(</span>client, cryptoKeyPair<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> catch <span class=\"token punctuation\">(</span>ContractException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        // 调用HelloWorld合约的get接口\n        String <span class=\"token assign-left variable\">getValue</span><span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n        try <span class=\"token punctuation\">{<!-- --></span>\n            getValue <span class=\"token operator\">=</span> helloWorld.get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> catch <span class=\"token punctuation\">(</span>ContractException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        // 调用HelloWorld合约的set接口\n        TransactionReceipt receipt <span class=\"token operator\">=</span> helloWorld.set<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, fisco\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        BcosBlock block <span class=\"token operator\">=</span> client.getBlockByNumber<span class=\"token punctuation\">(</span>blockNumber.getBlockNumber<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>, <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //得到块的信息\n        Object o <span class=\"token operator\">=</span> block.getBlock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.getTransactions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.get<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>.get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //在块中得到交易哈希\n        Object b <span class=\"token operator\">=</span> block.getBlock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.getHash<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//在块中得到区块哈希\n        Object <span class=\"token assign-left variable\">c</span><span class=\"token operator\">=</span>block.getBlock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.getNumber<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//当前块高\n        BcosTransactionReceipt transactionReceipt <span class=\"token operator\">=</span> client.getTransactionReceipt<span class=\"token variable\"><span class=\"token punctuation\">((</span>String<span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">/</span><span class=\"token operator\">/</span>通过交易哈希得到交易回执\n        CryptoSuite cryptoSuite <span class=\"token operator\">=</span> client.getCryptoSuite<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token operator\">/</span><span class=\"token operator\">/</span> 获取当前群组对应的密码学接口\n        <span class=\"token operator\">/</span><span class=\"token operator\">/</span> 构造TransactionDecoderService实例，传入是否密钥类型参数。 事务解码器接口\n        TransactionDecoderInterface decoder <span class=\"token operator\">=</span> new TransactionDecoderService<span class=\"token punctuation\">(</span>cryptoSuite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        String setValue <span class=\"token operator\">=</span> decoder.decodeReceiptMessage<span class=\"token punctuation\">(</span>transactionReceipt.getResult<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.getInput<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">;</span>\n        System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"getValue:\"</span>+getValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"setValue:\"</span>+setValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"receipt:\"</span>+receipt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"7_316\"></a>7.运用测试</h2>\n<p>首先确保我们的区块链网络节点处于运行状态<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bb5e16967bfb4e81b57a7994f4e556e4.png\"/><br/> 测试结果：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7c1fa343dc9a49c89fdcc9361cc34289.png\"/></p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_324\"></a>总结</h1>\n<p><font color=\"#999AAA\">欢迎交流！</font></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2021-09-23 20:02:10", "summary": "环境搭建文章目录环境搭建前言一、环境准备开发工具开发环境二、开发步骤创建一个应用引入配置证书准备智能合约创建配置文件使用部署和调用智能合约运用测试总结前言参考官方文档提示：以下是本篇文章正文内容，下面"}