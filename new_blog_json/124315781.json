{"blogid": "124315781", "writerAge": "码龄1年", "writerBlogNum": "113", "writerCollect": "11301", "writerComment": "4529", "writerFan": "40870", "writerGrade": "7级", "writerIntegral": "11207", "writerName": "执 梗", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124315781.jpg", "writerRankTotal": "893", "writerRankWeekly": "1460", "writerThumb": "5003", "writerVisitNum": "333740", "blog_read_count": "1128", "blog_time": "已于 2022-04-28 16:27:55 修改", "blog_title": "零基础学算法100天第2天——bellman-ford（边数限制最短路算法）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>⭐️<strong><span style=\"color:#38d8f0;\">引言</span></strong>⭐️</p>\n<p>                大家好啊，我是执梗。今天是零基础学算法一百天的第2天，本次我们讲解的是bellman-ford算法。上一次我们提到了最短路算法是有好几种的，不同的算法不仅适用的场景不同，而且复杂度也不同，选择不适很可能会MLE或TLE，今天我们讲解的是bellman-ford算法，这还是非常重要的，<strong>模板非常容易记下来</strong>。</p>\n<p>⭐️<strong><span style=\"color:#38d8f0;\">精彩回放</span></strong>⭐️</p>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\"><tbody><tr><td>零基础学算法第一天</td><td><a class=\"link-info\" href=\"https://blog.csdn.net/m0_57487901/article/details/124162864?spm=1001.2014.3001.5502\" title=\"零基础学算法一百天第1天——Dijkstra（图解最短路算法）\">零基础学算法一百天第1天——Dijkstra（图解最短路算法）</a></td></tr></tbody></table>\n<blockquote>\n<p>📒博客首页：<a class=\"link-info\" href=\"https://blog.csdn.net/m0_57487901?type=bbs\" title=\"执梗的博客\">执梗的博客</a></p>\n<p>🎉欢迎关注🔎点赞👍收藏⭐️留言📝</p>\n<p>❤️ ：热爱Java与算法学习，期待一起交流！</p>\n<p>🙏作者水平很有限，如果发现错误，求告知，多谢！</p>\n<p>🌺有问题可私信交流！！！</p>\n<p>👻高校算法学习社区：<a class=\"link-info\" href=\"https://bbs.csdn.net/forums/Suanfa?category=0\" title=\"高校算法学习社区\">高校算法学习社区</a></p>\n<p><strong>社区有现役Acmer带领刷每日一题，每日更新题解，想一起刷题一起内卷速来加入我们！！</strong></p>\n</blockquote>\n<p></p>\n<p id=\"main-toc\">⭐️<strong>目录</strong>⭐️</p>\n<p id=\"%F0%9F%8D%8B1.%E4%BB%80%E4%B9%88%E6%98%AFbellman-ford%E7%AE%97%E6%B3%95%EF%BC%9F-toc\" style=\"margin-left:0px;\"><a href=\"#%F0%9F%8D%8B1.%E4%BB%80%E4%B9%88%E6%98%AFbellman-ford%E7%AE%97%E6%B3%95%EF%BC%9F\">🍋1.什么是bellman-ford算法？</a></p>\n<p id=\"%F0%9F%8D%90%202.bellman-ford%E5%92%8CDijkstra%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F-toc\" style=\"margin-left:0px;\"><a href=\"#%F0%9F%8D%90%202.bellman-ford%E5%92%8CDijkstra%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\">🍐 2.bellman-ford和Dijkstra有什么区别？</a></p>\n<p id=\"%F0%9F%8D%8D%203.%E4%BB%80%E4%B9%88%E6%98%AF%E6%9D%BE%E5%BC%9B%E6%93%8D%E4%BD%9C%EF%BC%9F-toc\" style=\"margin-left:0px;\"><a href=\"#%F0%9F%8D%8D%203.%E4%BB%80%E4%B9%88%E6%98%AF%E6%9D%BE%E5%BC%9B%E6%93%8D%E4%BD%9C%EF%BC%9F\">🍍 3.什么是松弛操作？</a></p>\n<p id=\"%C2%A0%F0%9F%8D%854.bellman-ford%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%80%9D%E8%B7%AF%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0%F0%9F%8D%854.bellman-ford%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%80%9D%E8%B7%AF%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"> 🍅4.bellman-ford的基本思路和注意事项</a></p>\n<p id=\"%C2%A0%F0%9F%8C%BC5.%E6%A8%A1%E6%9D%BF%E4%BB%A3%E7%A0%81%E4%BB%A5%E5%8F%8A%E4%BE%8B%E9%A2%98%E8%AE%AD%E7%BB%83-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0%F0%9F%8C%BC5.%E6%A8%A1%E6%9D%BF%E4%BB%A3%E7%A0%81%E4%BB%A5%E5%8F%8A%E4%BE%8B%E9%A2%98%E8%AE%AD%E7%BB%83\"> 🌼5.模板代码以及例题训练</a></p>\n<p id=\"%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%F0%9F%8D%84K%E7%AB%99%E4%B8%AD%E8%BD%AC%E5%86%85%E6%9C%80%E4%BE%BF%E5%AE%9C%E7%9A%84%E8%88%AA%E7%8F%AD-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%F0%9F%8D%84K%E7%AB%99%E4%B8%AD%E8%BD%AC%E5%86%85%E6%9C%80%E4%BE%BF%E5%AE%9C%E7%9A%84%E8%88%AA%E7%8F%AD\">        🍄K站中转内最便宜的航班</a></p>\n<p id=\"%F0%9F%9A%806.%E8%AF%BE%E5%90%8E%E6%80%BB%E7%BB%93-toc\" style=\"margin-left:0px;\"><a href=\"#%F0%9F%9A%806.%E8%AF%BE%E5%90%8E%E6%80%BB%E7%BB%93\">🚀6.课后总结</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h1 id=\"%F0%9F%8D%8B1.%E4%BB%80%E4%B9%88%E6%98%AFbellman-ford%E7%AE%97%E6%B3%95%EF%BC%9F\">🍋1.什么是bellman-ford算法？</h1>\n<p>        首先我们从百度百科来了解一下bellman-ford</p>\n<blockquote>\n<p><strong>            贝尔曼-福特算法</strong>（Bellman-Ford）是由<a href=\"https://baike.baidu.com/item/%E7%90%86%E6%9F%A5%E5%BE%B7%C2%B7%E8%B4%9D%E5%B0%94%E6%9B%BC/10233415\" title=\"理查德·贝尔曼\">理查德·贝尔曼</a>（Richard Bellman） 和 莱斯特·福特 创立的，求解单源<a href=\"https://baike.baidu.com/item/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84\" title=\"最短路径\">最短路径</a>问题的一种<a href=\"https://baike.baidu.com/item/%E7%AE%97%E6%B3%95/209025\" title=\"算法\">算法</a>。有时候这种算法也被称为 Moore-Bellman-Ford 算法，因为 Edward F. Moore 也为这个算法的发展做出了贡献。它的原理是对图进行V-1次松弛操作，得到所有可能的最短路径。<strong>其优于<a href=\"https://baike.baidu.com/item/%E8%BF%AA%E7%A7%91%E6%96%AF%E5%BD%BB%E7%AE%97%E6%B3%95/8595939\" title=\"迪科斯彻算法\">迪科斯彻算法</a>的方面是边的权值可以为负数、实现简单，缺点是时间复杂度过高，高达O(VE)。但算法可以进行若干种优化，提高了效率。</strong></p>\n</blockquote>\n<p>      <strong>   bellman-ford使用场景：</strong></p>\n<p><strong>        1.bellman-ford适用于解决带有负权边的单源最短路问题。</strong></p>\n<p><strong>        2.bellman-ford可用于判断图中是否存在负权环（但我们一般不使用该算法进行判断）</strong></p>\n<p><strong>       <span style=\"color:#fe2c24;\"> 3.bellman-ford可用于有边数限制的情况(使用bellman-ford最重要的标志)</span></strong></p>\n<h1 id=\"%F0%9F%8D%90%202.bellman-ford%E5%92%8CDijkstra%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\">🍐 2.bellman-ford和Dijkstra有什么区别？</h1>\n<p>       首先从适用场景上来说：Dijkstra值只能用于只有正权边的单源最短路问题，而<strong>bellman-ford算法不仅能适用于带正权边而且适用于带负权边的情况。而且当题目对边数有限制要求时，别犹豫，一定要使用bellman-ford算法。</strong></p>\n<p><strong>       </strong>其次我们最关心的应该是算法的时间复杂度，朴素版的Dijkstra的时间复杂度是O（n^2），n是点的数量（和边无关系），而堆优化版的Dijkstra的时间复杂度为O（mlongn），m是边数，n是点的数量。<strong>而bellman-ford算法的时间复杂度是O（mn），这个复杂度还是比较高的。</strong>所以一般使用bellman-ford算法时，一定要注意题目中给定的点数和边数，如果不是非常明显具有使用bellman-ford的提示，对于bellman-ford算法一定要慎用。</p>\n<h1 id=\"%F0%9F%8D%8D%203.%E4%BB%80%E4%B9%88%E6%98%AF%E6%9D%BE%E5%BC%9B%E6%93%8D%E4%BD%9C%EF%BC%9F\">🍍 3.什么是松弛操作？</h1>\n<p>           这个词语会经常出现在每一个最短路算法中，大家也会经常看见。上篇Dijkstra中我并没有认真的说清楚它的意思，只是有简略的语言带过了一下，这篇文章我们来细讲一下。</p>\n<p>          首先，松弛操作是Dijkstra和bellman-ford能找到最短路径的核心操作，两种算法都是基于它来实现的。         <img alt=\"\" height=\"424\" src=\"..\\..\\static\\image\\4f1f92e71fe24d759ed4827f5ee45712.png\" width=\"877\"/> </p>\n<p>         <strong>我们以上面的简图为例，首先提高松弛操作那就一定要提到dist[]数组，它是保存从起点到每个点的最短距离，比如dist[j]表示从起点i到j的最短距离，更详细的解释在</strong><strong>Dijkstra说明了，不太明白的建议去看看。</strong></p>\n<p><strong>        </strong>上面的图中，A是起点，C是终点。我们在对B点做松弛操作时，<span style=\"color:#fe2c24;\"><strong>要去遍历所有除去起点和本身的其他点</strong></span>，当然这个图里只有C点，然后判断dist[c]是否大于dist[b]+g[b][c]（此处的g数组是邻接矩阵数组，g[i][j]表示i点到j点这条边的距离）。上图中dist[c]本来是25，dist[b]是5，而g[b][c]是15，<strong>因为dist[c]&gt;dist[b]+g[b][c]，所以我们将dist[c]更新为20，也就表示我们找到了一条到达C点更近的线路，这就是松弛操作。</strong></p>\n<p><strong>        </strong>其实松弛操作非常好理解，就是判断，在已有的到达某点X的最短线路中，能否通过其他的点去更新这个最短路径，核心操作就是判断dist[c]是否大于dist[b]+g[b][c]。</p>\n<h1 id=\"%C2%A0%F0%9F%8D%854.bellman-ford%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%80%9D%E8%B7%AF%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"> 🍅4.bellman-ford的基本思路和注意事项</h1>\n<p>          <strong>1.图的存边方式</strong></p>\n<p><strong>        </strong>   bellman-ford算法是基于边来进行遍历迭代的，所以我们需要保存去保存每条边和它的权值，我们可以才取最简单的方式，也就是结构体存边即可，Java用一个Node类表示，属性有int类型的a，b，w。表示为有一条从a到b权值为w的边。</p>\n<pre><code class=\"language-java\">class Node{\n    int a,b,w;\n    public Node(int a, int b, int w) {\n            this.a = a;\n            this.b = b;\n            this.w = w;\n    }\n}</code></pre>\n<p>       <strong>2.for循环n次，每次遍历所有的边（所以时间复杂度是O（nm））</strong> </p>\n<p>        算法流程只需要循环n次，每次用所有的边去进行松弛操作即可，bellman-ford就是如此的简单，模板也非常容易记忆。<strong>只要知道松弛操作是如何，这个算法就是一个非常简单算法，因为它本身就是一个偏暴力的算法，所以时间复杂度比较高。</strong></p>\n<p><strong>       </strong><strong>3.对于图中可能存在负权回路的情况</strong></p>\n<p><img alt=\"\" height=\"458\" src=\"..\\..\\static\\image\\d1a4f2ab8112431ea3aab20c0c4ac89d.png\" width=\"1200\"/></p>\n<p>        如图这种情况，如果计算从A点到E点的距离，由于BCD是形成了一个负环，每循环一次权值就-1，所以如果循环无数圈就是负无穷，结果得到到E的最短距离是负无穷。<strong>但是大家不要担心，一般题目都不会出现这种情况，会说明，只不过大家要知道有这种情况产生。</strong></p>\n<p><strong>        那是不是有负环就一定不能得到解呢？</strong></p>\n<p><strong>        那也不一定，如果负环在我们走的路径上，那就会产生影响，否则是不会影响我们的最短路径的。</strong></p>\n<p><strong>       4.如何去利用bellman-ford解决有边数限制的情况</strong></p>\n<p><strong>        </strong>其实我们前面就已经提过，在bellman-ford中我们先需要循环n次，代表了走了n条边的最短路径，我们现在限制只能走k条边，<strong>所以我们只需要让循环只走k次，以此来限制走的边数即可</strong>，其余的代码不需要改变。</p>\n<p>       <strong>5.</strong><strong>backup作为备份数组的必要性</strong></p>\n<p><strong>        </strong>在bellman-ford和Dijkstra算法中，都有dist数组记录最短路径，而bellman-ford中还有一个 backup 数组，它作为的是我们的备份数组。<strong>它的存在为的是防止前面的边松弛影响到后面的边的松弛操作。我们每次松弛的的时候利用的是上一次的结果来。</strong></p>\n<p><img alt=\"\" height=\"397\" src=\"..\\..\\static\\image\\8d4359e6ab7e40978884f8f54c169aa8.png\" width=\"1046\"/></p>\n<p>       比如在如图，边数限制为1的情况下，从1到3的最短路径应该为3。初始的时候dist[]数组应该是被初始化为正无穷的。如果此时我们对1~2这边进行操作以后使得dist[2]=1以后，再松弛2~3这条边的时候，就会导致dist[3]变成了2，也就没有无法保证只有1条边了。</p>\n<p>       <strong>说白了其实就是bellman-ford的dist数组并不是实时更新，每一次循环m次都用的是上一次循环的dist数组，所以我们用backup备份上一次的dist数组。</strong></p>\n<h1 id=\"%C2%A0%F0%9F%8C%BC5.%E6%A8%A1%E6%9D%BF%E4%BB%A3%E7%A0%81%E4%BB%A5%E5%8F%8A%E4%BE%8B%E9%A2%98%E8%AE%AD%E7%BB%83\"> 🌼5.模板代码以及例题训练</h1>\n<p><img alt=\"\" height=\"489\" src=\"..\\..\\static\\image\\37791c0396f04720886826571bb6a4ce.png\" width=\"736\"/></p>\n<p>       <strong>代码转换：模板为bellman_ford函数，函数的每个操作我都搭配上了讲解。</strong></p>\n<pre><code class=\"language-java\">import java.util.*;\npublic class Main {\n    static int N=510;\n    static int M=10010;\n    static List&lt;Node&gt; list=new ArrayList&lt;&gt;();\n    static int[] dist=new int[N];\n    static int[] backup=new int[N];\n    static int n,m,k;\n    static boolean flag=false;\n    public static void main(String[] args) {\n        Scanner sc=new Scanner(System.in);\n        n=sc.nextInt();\n        m=sc.nextInt();\n        k=sc.nextInt();\n        for (int i = 0; i &lt;m; i++) {\n            int a=sc.nextInt();\n            int b=sc.nextInt();\n            int w=sc.nextInt();\n            list.add(new Node(a,b,w));\n        }\n        int t=bellman_ford();\n        if(t==-1&amp;&amp;flag) System.out.println(\"impossible\");\n        else System.out.println(t);\n    }\n    static int bellman_ford(){\n        //和Dijkstra一样的初始化步骤\n        Arrays.fill(dist,0x3f3f3f3f);\n        dist[1]=0;\n        //限制k条边，所以只循环K次\n        for (int i = 0; i &lt; k; i++) {\n            //每次松弛操作前先备份一下\n            backup=Arrays.copyOfRange(dist,0,N);\n            //开始松弛操作\n            for (int j = 0; j &lt; m; j++) {\n                int a=list.get(j).a;\n                int b=list.get(j).b;    \n                int w=list.get(j).w;\n                //和Dijkstra的差不多，只不过一定要使用backup进行松弛\n                dist[b]=Math.min(dist[b],backup[a]+w);\n            }\n        }\n        //注意这里是除以2，因为有负数的情况，在无解的情况下不一定刚好等于0x3f3f3f3f\n        if (dist[n]&gt;0x3f3f3f3f/2){\n            flag=true;\n            return -1;\n        }else return dist[n];\n}\n}\nclass Node{\n    int a,b,w;\n    public Node(int a, int b, int w) {\n            this.a = a;\n            this.b = b;\n            this.w = w;\n    }\n}</code></pre>\n<h2 id=\"%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%F0%9F%8D%84K%E7%AB%99%E4%B8%AD%E8%BD%AC%E5%86%85%E6%9C%80%E4%BE%BF%E5%AE%9C%E7%9A%84%E8%88%AA%E7%8F%AD\">        🍄K站中转内最便宜的航班</h2>\n<blockquote>\n<p>        有 n 个城市通过一些航班连接。给你一个数组 flights ，其中 flights[i] = [fromi, toi, pricei] ，表示该航班都从城市 fromi 开始，以价格 pricei 抵达 toi。</p>\n<p>        现在给定所有的城市和航班，以及出发城市 src 和目的地 dst，你的任务是找到出一条最多经过 k 站中转的路线，使得从 src 到 dst 的 价格最便宜 ，并返回该价格。 如果不存在这样的路线，则输出 -1。</p>\n<p>来源：力扣（LeetCode）<br/> 题目链接：<a class=\"link-info\" href=\"https://leetcode-cn.com/problems/cheapest-flights-within-k-stops/\" title=\"K 站中转内最便宜的航班\">K 站中转内最便宜的航班</a></p>\n</blockquote>\n<p>         这是一道bellman-ford的模板题，从题目的名字就已经告诉我们要使用该算法了。K站中转——限制边数，最便宜航班——最短路问题。在这里我们要注意一个问题，K次中转是K条边吗？当然不是，转了一次车说明做了两种不同的车，所以K次中转我们应该是K+1条边。</p>\n<p>        <strong>在这里我们直接使用上面的模板即可：</strong></p>\n<pre><code class=\"language-java\">class Solution {\n    //有边数限制使用贝尔曼夫算法\n    int N=100;\n    int M=5010;\n    List&lt;Node&gt; list=new ArrayList&lt;&gt;();\n    int[] dist=new int[N];\n    int[] backup=new int[N];\n    int n,m,k,src,dst;\n    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {\n        this.n=n;\n        this.m=flights.length;\n        //k次中转是k条边\n        this.k=k+1;\n        this.src=src;\n        this.dst=dst;\n        for(int[] s:flights){\n            int a=s[0];\n            int b=s[1];\n            int w=s[2];\n            list.add(new Node(a,b,w));\n        }\n        int t=bellman_ford();\n        return t;\n    }\n    int bellman_ford(){\n        Arrays.fill(dist,0x3f3f3f3f);\n        dist[src]=0;\n        for(int i=0;i&lt;k;++i){\n            backup=Arrays.copyOfRange(dist,0,N);\n            for(int j=0;j&lt;m;++j){\n                int a=list.get(j).a;\n                int b=list.get(j).b;\n                int w=list.get(j).w;\n                dist[b]=Math.min(dist[b],backup[a]+w);\n            }\n        }\n        if(dist[dst]&gt;0x3f3f3f3f/2) return -1;\n        else return dist[dst];\n    }\n}\nclass Node{\n    int a,b,w;\n    public Node(int a, int b, int w) {\n            this.a = a;\n            this.b = b;\n            this.w = w;\n    }\n}</code></pre>\n<h1 id=\"%F0%9F%9A%806.%E8%AF%BE%E5%90%8E%E6%80%BB%E7%BB%93\">🚀6.课后总结</h1>\n<blockquote>\n<p>      <strong>   bellman-ford算法是一个比较简单暴力的算法，可能有些地方我讲的不太清楚，大家可能评论区或者私信询问都可以，当然对于最短路算法大家实在理解不了的可以先背下来模板直接使用，用着用着就能慢慢明白了（我就是这样哈哈哈哈）。 bellman-ford的模板还是比较简单粗暴的，两次循环即可。</strong></p>\n</blockquote>\n<p>        <span style=\"color:#fe2c24;\"><strong>如果文章对你有所帮助，还望能给点三连支持一下，非常感谢！！！</strong> </span></p>\n<p>      <img alt=\"\" height=\"504\" src=\"..\\..\\static\\image\\f2887ff868893695493cc2ce44949129.png\" width=\"504\"/>  </p>\n</div>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-04-28 16:27:55", "summary": "引言大家好啊，我是执梗。今天是零基础学算法一百天的第天，本次我们讲解的是算法。上一次我们提到了最短路算法是有好几种的，不同的算法不仅适用的场景不同，而且复杂度也不同，选择不适很可能会或，今天我们讲解的"}