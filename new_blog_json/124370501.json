{"blogid": "124370501", "writerAge": "码龄1年", "writerBlogNum": "102", "writerCollect": "2405", "writerComment": "4050", "writerFan": "11757", "writerGrade": "7级", "writerIntegral": "9273", "writerName": "乔乔家的龙龙", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124370501.jpg", "writerRankTotal": "1535", "writerRankWeekly": "600", "writerThumb": "3100", "writerVisitNum": "141820", "blog_read_count": "855", "blog_time": "已于 2022-05-01 17:44:47 修改", "blog_title": "C++基础入门篇——入得三寸天地，匀开理想三旬", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><ul><li><a href=\"#_2\">传统艺能😎</a></li><li><a href=\"#_18\">前言😎</a></li><li><a href=\"#_28\">选择😎</a></li><li><a href=\"#C_35\">嘛是C++😎</a></li><li><a href=\"#_54\">命名空间🤔</a></li><li><a href=\"#_75\">域作用限定符🤔</a></li><li><a href=\"#C_122\">C++输入与输出🤔</a></li><li><a href=\"#_144\">缺省参数🤔</a></li><li><a href=\"#_196\">函数重载🤔</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"_2\"></a>传统艺能😎</h2>\n<p>小编是双非本科大一菜鸟不赘述，欢迎大佬指点江山（QQ：1319365055）<br/> 此前博客<a href=\"https://blog.51cto.com/\">点我！点我！请搜索博主 【知晓天空之蓝】</a><br/> 乔乔的gitee代码库（<s>打灰人</s> ）<a href=\"https://gitee.com/Dio002\">欢迎访问，点我！</a></p>\n<p><mark>🎉🎉非科班转码社区诚邀您入驻🎉🎉</mark><br/> 小伙伴们，打码路上一路向北，背后烟火，彼岸之前皆是疾苦<br/> <mark>一个人的单打独斗不如一群人的砥砺前行</mark><br/> 这是我和梦想合伙人组建的社区，诚邀各位有志之士的加入！！<br/> 社区用户好文均加精（“标兵”文章字数2000+加精，“达人”文章字数1500+加精）<br/> 直达： <a href=\"https://bbs.csdn.net/forums/FKBZM?typeId=22226\">社区链接点我</a></p>\n<p>🎉🎉🎉<font color=\"orange\" size=\"5\">倾力打造转码社区微信公众号，等你加入!🎉🎉🎉</font></p>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0b7d94358bf74139b85202e37f5cbab8.png\"/></p>\n<h2><a id=\"_18\"></a>前言😎</h2>\n<p><font color=\"blue4\" size=\"4\">没错，当你看到这里的时候说明我们C语言部分已经完结辣，初级的数据结构基础已经拿捏，我将步入C++的净土。</font></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d2fd7a57a7fc47859b60e7431041f4a1.png\"/></p>\n<p>你可能会说：<mark>啊这，不是上一篇才八大排序，算法还没搞完就跳到C++了？是什么让我做出这么跳跃的决定</mark>。</p>\n<p>首先算法本来就是代码的思想素养，他应该在积累中绽放身姿，本来我想放在最后期来学习和讲解，现在写出来单纯是因为觉得现在咱有能力拿捏他，何尝不去细节的拿捏一波呢？所以这和本来我计划的学习大纲并不冲突捏~<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5bf4c6d1f97f44f3a96110881d557f81.png\"/></p>\n<h2><a id=\"_28\"></a>选择😎</h2>\n<p>至于我为什么会选中去深入学习 C++ 也是有原因的，并非脑子发热一时兴起之举。</p>\n<p>在学习C语言之初就为未来学习方向打听了解了很多，很长时间后我才决定将我的目光投向 C++ 或者 JAVA，二者对于我这个又菜又爱玩的萌新来说无疑都极具吸引力，但是鱼和熊掌不可兼得，专精才是真爱，海王最后注定一无所有，摒着这个思想我狠狠去各大网站平台，某乎，pilipili，CSDN，甚至浏览器上各种不知名散装帖子。我承认，各抒己见，我被灌输了很多不同的意见和观点，导致我对于选择更加焦灼与懵b。</p>\n<p>因此我转身去了解了一手前端和后端，从本身去了解 c++ 和 扎瓦，两者学习难度是一样的，憋听世面上说什么扎瓦简单易学，从来没有一门语言是简单易学的，简单易学的语言只适合小型玩具程序，而且从目前Java庞大的类库看来，简单易学好像根本没有了；最后综合了心态，环境和个人兴趣还是把镖扔向了C++</p>\n<h2><a id=\"C_35\"></a>嘛是C++😎</h2>\n<p>C++和C一样吗？跟卡巴斯基和巴基斯坦一样，有个基巴关系，但也不是完全没关系，C++里面好歹带了个C，就不难知道他和 C 语言还多少有点渊源。</p>\n<p>C语言是模块化和结构化的语言，只适合处理规模小的程序，对于复杂的大规模程序，C语言需要高度的建模与抽象，就显得尤为吃力与不适，为了解决这个尴尬，80年代提出了<mark>OOP</mark>，即 <mark>面向对象编程</mark>，C++，因此横空出世。</p>\n<p><font color=\"red\" size=\"4\">（搬个老图，面对对象实在太草了）</font></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\986e0cfd9a264ad9bed6ef273d23ddb2.png\"/></p>\n<p>这是在C语言基础上引入并扩充了面向对象概念，为了表达和C语言的渊源，就命名为了C++（最早是贝尔实验室命名为 C with classes，即加入了类的概念）。</p>\n<p><font color=\"red\" size=\"4\">某度对面向对象的定义是这样的：</font></p>\n<blockquote>\n<p>面向对象程序设计（Object Oriented Programming，OOP）是一种计算机编程架构。. OOP的一条基本原则是计算机程序由单个能够起到子程序作用的单元或对象组合而成。. OOP达到了软件工程的三个主要目标：重用性、灵活性和扩展性。. OOP=对象+类+继承+多态+消息，其中核心概念是类和对象</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9de297aaf6a64bf9bde45c6d249e496e.png\"/></p>\n<p>不慌，我们慢慢来</p>\n<h2><a id=\"_54\"></a>命名空间🤔</h2>\n<p>但凡有看过C++的铁汁都会注意到，C++里面有个头文件是</p>\n<pre><code class=\"prism language-c\"> <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span> </span>\n</code></pre>\n<p>他就相当于我们C语言里面的&lt;stdio.h&gt;,他是在控制台对 IO 流进行输入输出操作的，接着你会看到一个</p>\n<pre><code class=\"prism language-c\">using namespace std<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>为了调用带有命名空间的函数或变量，需要在前面加上命名空间的名称。using 就是引用，他在引用一个命名空间 namespace，<mark>我们这里又会牵扯到一个命名冲突问题，即同一个域里面，不能有同名变量，C语言没有很好的解决这个问题，而CPP正好帮他擦了屁股</mark></p>\n<p>像C语言里面二级指针啥的太绕了，因此C++就产生了<mark>引用</mark>这个概念，本质上就是在对C语言的一个补充作用，所以C++基础语法也是无时无刻在为C语言补坑。要知道我们定义一个变量要注意两点，一就是要符合命名规则，二就是不能和关键字重名，比如定义了一个叫 number 的同时再定义一个叫 number 的函数或者定义一个 number() 函数，但在另一个可用的库中也存在一个相同的函数 number()。这样，编译器就无法判断您所使用的是哪一个 number() 函数</p>\n<p>但是引用了命名空间就不一样了，这个空间仿佛一片净土给予他逍遥法外的机会，就是这么个原理。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cd9b9adab01a4f52bf42694f83029880.png\"/></p>\n<h2><a id=\"_75\"></a>域作用限定符🤔</h2>\n<p><font color=\"blue4\" size=\"4\">我们在程序里定义了两个同名变量 a，一个是全局变量一个是局部变量，那么我能在 main 函数里面 printf 一下全局变量 a 的值吗？<mark>答案是可以的</mark>！我们写作如下：</font></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//打印局部变量 1</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">::</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//打印全局变量 0</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>那么问题来了，这个 ：：到底何方神圣？他就是域作用限定符，双冒号左边是空白，我们就默认它是全局变量的 a 。</p>\n<p>所以就可以知道命名空间是如何解决命名冲突问题的，如下是一个<mark>命名空间域</mark>，他和结构体不一样啊，他的作用是让里面的成员和外界成员形成一个隔离，需要访问域内成员就可以单独访问，避免冲突。</p>\n<pre><code class=\"prism language-c\">namespace room<span class=\"token comment\">//命名空间域</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//全局变量名</span>\n<span class=\"token keyword\">int</span> rand <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//stdlib库变量名</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>room<span class=\"token operator\">::</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>room<span class=\"token operator\">::</span>rand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//域内成员访问</span>\n</code></pre>\n<p>注意如果多文件下定义了重名的命名空间，它是可以同时存在的，语法会默认将同名的命名空间进行合并。但是命名空间里面如果有重名的变量就会发生冲突，同样的道理我们可以借助<mark>命名空间的嵌套</mark>解决，再加一层命名空间即可，注意命名空间套个两三层就绝对的多了不可多套。</p>\n<p>我们要用命名空间里的对象时，直接啪一句即可</p>\n<pre><code class=\"prism language-c\"> using namespace xxx<span class=\"token punctuation\">;</span><span class=\"token comment\">//把xxx这个命名空间定义的东西放出来</span>\n</code></pre>\n<p>就好像一个声明告诉你现在隔离层拆了，freedom！变得和全局变量差不多；我们甚至还能继续向里展开，比如 room 里的变量 a ，我们命名空间不能完全展完，展完就没有意义辣！严格来说不能随便去展开。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f4ebb875b2bc4bdc8506628e8966eaca.png\"/></p>\n<p>所以我们常见的一句声明：<font color=\"blue4\" size=\"4\"> using namespace std；</font></p>\n<p>这里 std 就是对C++库的封装，当然不写这句话也行，实际应用就需要域作用限定符去指定域名。我们放出来虽然方便使用，但是存在冲突风险，比如定义一个全局变量 cout 后使用 cout&lt;&lt;cout&lt;&lt;endl。为了解决冲突与方便问题，我们提出了第三种方式，非全展开，我们展开常用的就行：</p>\n<pre><code class=\"prism language-c\">using std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"C_122\"></a>C++输入与输出🤔</h2>\n<p>C语言输入输出需要我们指定类型的 scanf 与 printf ，C++里面又不一样了，我们对应使用的是流提取运算符 &gt;&gt; 和流插入运算符 &lt;&lt;</p>\n<pre><code class=\"prism language-c\">cin <span class=\"token operator\">&gt;&gt;</span> a<span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这个在C++里面叫运算符重载，cin 和 cout 叫对象，属于类和对象的知识，暂只做了解。</p>\n<p>他相比C语言的改进就非常奈斯了，因为输入输出可以多组输入输出，不用指定数据类型且可以交错类型，比如：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> b<span class=\"token punctuation\">;</span>\ncin <span class=\"token operator\">&gt;&gt;</span> a <span class=\"token operator\">&gt;&gt;</span> b<span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//endl相当于一个换行关键字，等价于‘\\n’</span>\n</code></pre>\n<p>但是C++想控制浮点数的位数输出就很麻烦了，想了解的情自行上网查询，但是极其不推荐，因为你会了也记不住，而且别忘了C++兼容C语言，直接C语言多方便啊是吧，所以要控制格式推荐C语言实现。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ab03557e99964fd799948fde35344e0c.png\"/></p>\n<h2><a id=\"_144\"></a>缺省参数🤔</h2>\n<p>C++引入了一个新的概念叫缺省参数，也叫默认参数，这是C语言没有的语法，指调用函数没有传参时，会使用参数的默认值，就好像你若安好，备胎到老。</p>\n<p>那如果对应是多个输入呢？是不是需要多个缺省参数，备胎成堆那不是更渣吗？</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a= \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b= \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c= \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>结果如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c3abf4b280b64ca9a9f54163741ddb25.png\"/></p>\n<p>我们这里是给所有参数都给出了默认值，我们称之为<mark>全缺省</mark>，有全必有不全，我们的<mark>半缺省</mark>就横空出世了，半缺省还有一些细节需要注意，<mark>他必须是从右往左缺省并且是连续的</mark></p>\n<p>全缺省和半缺省的选择视情况而定，在某些情景里面半缺省也是很奈斯的，比如我们的栈。</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stack</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">StackInit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stack</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\np<span class=\"token operator\">-&gt;</span>a <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\np<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\np<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\nStack st<span class=\"token punctuation\">;</span>\n<span class=\"token function\">StackInit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>st<span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//初始容量和扩容参数上比较方便</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_196\"></a>函数重载🤔</h2>\n<p>又来补坑辣，C语言不支持同名函数，但是C++支持。</p>\n<p>要求就是参数名相同而参数不同，比如个数，类型等等。我们需要知道函数重载到底有什么意义，C语言为什么不支持？比如我实现 swap 函数来交换两数的值，分别交换一组整型和一组浮点数，两组数类型不同因此需要两个 swap 函数，是不是想到就很不爽。</p>\n<p>所以C++支持同名。，看起来是一个函数但实际是相互独立的，后期的模板就能把这个玩通透。</p>\n<p>今天就到这里吧，摸了家人们。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-05-01 17:44:47", "summary": "目录传统艺能前言选择嘛是命名空间域作用限定符输入与输出缺省参数函数重载传统艺能小编是双非本科大一菜鸟不赘述，欢迎大佬指点江山：此前博客点我！点我！请搜索博主知晓天空之蓝乔乔的代码库打灰人欢迎访问，点我"}