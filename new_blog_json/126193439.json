{"blogid": "126193439", "writerAge": "码龄3年", "writerBlogNum": "11", "writerCollect": "738", "writerComment": "380", "writerFan": "1170", "writerGrade": "4级", "writerIntegral": "818", "writerName": "算法小学徒", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126193439.jpg", "writerRankTotal": "23428", "writerRankWeekly": "3022", "writerThumb": "338", "writerVisitNum": "37796", "blog_read_count": "600", "blog_time": "已于 2022-08-14 16:17:28 修改", "blog_title": "C++知识黄金学习记录(二)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"C_0\"></a>C++知识黄金学习记录(二)</h1>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#C_0\">C++知识黄金学习记录(二)</a></li><li><a href=\"#_6\">前言</a></li><li><a href=\"#std_8\">一、std详解</a></li><li><ul><li><a href=\"#11std_10\">1.1std是什么?</a></li><li><a href=\"#12std_14\">1.2std使用举例</a></li><li><a href=\"#13std_17\">1.3为什么要使用std</a></li><li><a href=\"#14_47\">1.4::(作用域）详解</a></li><li><a href=\"#15Namespace_103\">1.5Namespace基本知识</a></li><li><a href=\"#16_namespace__109\">1.6使用 namespace 中符号</a></li><li><a href=\"#17_namespace__119\">1.7 namespace 可包含的成员</a></li><li><a href=\"#18_namespace__123\">1.8直接通过 namespace 作用域访问</a></li><li><a href=\"#19using__157\">1.9using 声明指定某个符号在某个作用域下可见</a></li><li><a href=\"#110_using__182\">1.10 using 编译指令指定名字空间中所有符号在在某个作用域下可见</a></li><li><a href=\"#111structclass_206\">1.11struct与class的区别</a></li><li><a href=\"#112_C_215\">1.12 C语言中.和-&gt;的区别</a></li><li><a href=\"#113conststatic_const_219\">1.13const和static const的区别：</a></li><li><a href=\"#114__232\">1.14 友元函数</a></li><li><a href=\"#_236\">什么是友元函数？</a></li><li><a href=\"#_244\">为什么需要友元函数？</a></li><li><a href=\"#_251\">友元函数注意事项</a></li></ul>\n</li><li><a href=\"#_255\">二、总结</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_6\"></a>前言</h1>\n<p>所有的伟大，源于一个勇敢的开始，与博主一起坚持学习，“practice makes perfect”(熟能生巧)吧！</p>\n<h1><a id=\"std_8\"></a>一、std详解</h1>\n<h2><a id=\"11std_10\"></a>1.1std是什么?</h2>\n<p>std::是名称空间标示符，C++标准库中的函数或者对象都是在命名空间std中定义的，所以我们要使用标准函数库中的函数或对象都要使用std来限定。</p>\n<h2><a id=\"12std_14\"></a>1.2std使用举例</h2>\n<p>对象cout是标准函数库所提供的对象，而标准库在名字空间中被指定为std，所以在使用cout的时候要加上std::。这样编译器就会明白我们调用的cout是命名空间std中的cout。</p>\n<h2><a id=\"13std_17\"></a>1.3为什么要使用std</h2>\n<p>首先来看普通C++教程的写法:</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"我是CSDN-算法小学徒\"</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>但在公司实际项目中你会发现使用的都是std::cout或者std::cin等,那为什么在实际项目中不建议使用using namespace std呢?<br/> 因为这样将标准命名空间全部打开,如果用了using namespace std,std名字空间下的所有变量、函数、类等都可以不加std::修饰而直接使用，在一些大的项目中很容易造成和其他的名字冲突，同时容易引起错误，在小项目里无关痛痒，但这种代码习惯其实不好，而且也失去了名字空间本身的意义了。<br/> Extended explanation:<br/> 我们在 C 语言中，通过 static 可以限制名字只在当前编译单元内可见，在 C++ 中我们通过 namespace 来控制对名字的访问。C++中使用namespace定义作用域，所有变量都有作用域，以往C中定义一个变量，主要取决于定义的位置及修饰（如static），这样定义的作用域应用灵活度不高。<br/> 虽然C++兼容以往的做法，但博主更推荐使用namespace来定义作用域。<br/> 而且部分原来的C语法在C++中已经被取消(如使用static定义局部静态变量已经被C++取消了，使用未命名空间取代)~~~~</p>\n<p>代码举例:</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">namespace</span> \n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n等价于 <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>接下来我们对namespace一探究竟:</p>\n<h2><a id=\"14_47\"></a>1.4::(作用域）详解</h2>\n<p>\"::\"是运算符中等级最高的，它分为三种，分别如下:<br/> 一、 作用域符号：<br/> 作用域符号”::“的前面一般是类名称，后面一般是该类的成员名称，C++为例避免不同的类有名称相同的成员而采用作用域的方式进行区分。</p>\n<p>例如：A,B表示两个类，在A,B中都有成员member。</p>\n<p>那么：</p>\n<p>1、A::member就表示类A中的成员member。<br/> 2、B::member就表示类B中的成员member。</p>\n<p>二、全局作用域符号：<br/> 当全局变量在局部函数中与其中某个变量重名，那么就可以用::来区分：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> tot<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//全局变量 0</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">int</span> tot<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//局部变量10</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"total=%d\\n\"</span><span class=\"token punctuation\">,</span>tot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//局部变量屏蔽了全局变量 所以输出结果是10</span>\n <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"total=%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token double-colon punctuation\">::</span>tot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//作用域符号指出引用全局变量0</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cab0f863a68d4165b7ab2b5dac9714a3.png\"/><br/> 三、作用域分解运算符：用于在类之外定义函数。<br/> ::是C++里的作用域分解运算符，“比如声明了一个类A，类A里声明了一个成员函数void fun()，但没有在类的声明里给出fun的定义，那么在类外定义fun时，就要写成voidA::fun()，表示这个fun()函数是类A的成员函数。例如：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span>  </span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span>  \n<span class=\"token punctuation\">{<!-- --></span> \n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  \n   <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">void</span> <span class=\"token class-name\">A</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span> \n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"fun() called\"</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span> \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span> \n   A a<span class=\"token punctuation\">;</span> \n   a<span class=\"token punctuation\">.</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span> \n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3a05d673790a470faa3422d66cf49f3e.png\"/></p>\n<h2><a id=\"15Namespace_103\"></a>1.5Namespace基本知识</h2>\n<p>作用:C++中namespace简单来说就是用来解决标志符（如变量，函数，类等）的名字冲突问题的。<br/> C++中namespace关键字定义了一个declarative region(声明区域)，所以在一个namespace中声明的标志符和其他namespace中声明的同名标志符是没有名字冲突的。<br/> 解释:namespace（命名空间),简单理解为给类、变量、函数等限定一个区域。<br/> namespace把一些类、变量、函数包含在一个空间中，在调用的时候使用作用域限定符号来调用，防止出现同名类、变量、函数无法分清的情况。也可以用来区分一个程序中各个模块的功能，类似于类。</p>\n<h2><a id=\"16_namespace__109\"></a>1.6使用 namespace 中符号</h2>\n<p>使用名字空间中定义的符号有三种方式：</p>\n<ol><li> <p>直接通过 namespace 作用域访问</p> </li><li> <p>using 声明指定某个符号在某个作用域下可见</p> </li><li> <p>using 编译指令指定名字空间中所有符号在在某个作用域下可见</p> </li></ol>\n<h2><a id=\"17_namespace__119\"></a>1.7 namespace 可包含的成员</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5760b6d2380f4f67810961e1c2827550.png\"/></p>\n<h2><a id=\"18_namespace__123\"></a>1.8直接通过 namespace 作用域访问</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 第一个命名空间</span>\n<span class=\"token keyword\">namespace</span> test1\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">{<!-- --></span>\n      cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"This is the first test sample\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 第二个命名空间</span>\n<span class=\"token keyword\">namespace</span> test2\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">{<!-- --></span>\n      cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"This is the second test example\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n \n   <span class=\"token comment\">// 调用第一个命名空间中的函数</span>\n   test1<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">// 调用第二个命名空间中的函数</span>\n   test2<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\eeeff3840e5e4e0e98fe9bfb55baa808.png\"/></p>\n<h2><a id=\"19using__157\"></a>1.9using 声明指定某个符号在某个作用域下可见</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span>  </span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">namespace</span> test1\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">int</span> temp<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">{<!-- --></span>\n      cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"This is the first test sample\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span> \n  <span class=\"token comment\">//fun符号只能在当前函数作用域内使用</span>\n  <span class=\"token keyword\">using</span> test1<span class=\"token double-colon punctuation\">::</span>fun<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//temp符号只能在当前函数作用域内使用</span>\n  <span class=\"token keyword\">using</span> test1<span class=\"token double-colon punctuation\">::</span>temp<span class=\"token punctuation\">;</span>\n  cout<span class=\"token operator\">&lt;&lt;</span>temp<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\89a816ffa9fc448abe40dd4f11cff74a.png\"/></p>\n<h2><a id=\"110_using__182\"></a>1.10 using 编译指令指定名字空间中所有符号在在某个作用域下可见</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span>  </span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">namespace</span> test1\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">int</span> temp<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">{<!-- --></span>\n      cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"This is the first test sample\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span> \n  <span class=\"token comment\">//fun符号只能在当前函数作用域内使用</span>\n  <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> test1<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cout<span class=\"token operator\">&lt;&lt;</span>temp<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fea23f51b414492dad4e86c33a2d6346.png\"/></p>\n<h2><a id=\"111structclass_206\"></a>1.11struct与class的区别</h2>\n<p>C++中，class与struct都可以定义一个类。他们有以下两点区别：</p>\n<p>1.默认继承权限，如果不指定，来自class的继承按照private继承处理，来自struct的继承按照public继承处理；</p>\n<p>2.成员的默认访问权限:class的成员默认是private权限，struct默认是public权限。</p>\n<p>以上两点也是struct和class最基本的差别，也是最本质的差别!</p>\n<h2><a id=\"112_C_215\"></a>1.12 C语言中.和-&gt;的区别</h2>\n<p>结构体变量用\".\" 来访问结构体成员<br/> 指向结构体的指针用 \"-&gt; \"来访问其指向的结构体成员</p>\n<h2><a id=\"113conststatic_const_219\"></a>1.13const和static const的区别：</h2>\n<p>一、全局的区别</p>\n<p>const规定变量在全局中是只读的变量，并且它的值无法被修改。</p>\n<p>static const规定变量在当前的模块中是只读的变量，无法在全局中被其他模块读取。<br/> 二、函数的区别</p>\n<p>const只能通过构造函数初始化列表进行，并且必须有构造函数!</p>\n<p>static const是静态的，属于类的静态成员函数。</p>\n<h2><a id=\"114__232\"></a>1.14 友元函数</h2>\n<p>友元函数(friend function)介绍:<br/> 一个类的私有数据成员通常只能由类的函数成员来访问，而友元函数可以访问类的私有数据成员，也能访问其保护成员。</p>\n<h2><a id=\"_236\"></a>什么是友元函数？</h2>\n<p>友元函数（与成员函数相对）是定义在类外部，可以访问该类中的所有私有（private）成员和保护（protected）成员。指定函数为某个类的友元函数的方法是使用关键字friend。</p>\n<p>friend &lt;返回类型&gt; &lt;函数名&gt; (&lt;参数列表&gt;);</p>\n<p>友元可以是一个函数，该函数被称为友元函数；友元也可以是一个类，该类被称为友元类，在这种情况下，整个类及其所有成员都是友元。</p>\n<h2><a id=\"_244\"></a>为什么需要友元函数？</h2>\n<p>1、C++中引入友元函数，是为在该类中提供一个对外（除了他自己以外）访问的接口；<br/> 2、两个类要共享数据的时候，友元函数可以减少系统开销，调高效率；<br/> 3、运算符重载的某些场合需要使用友元函数；<br/> 4、通过友元函数，虚继承和私有构造函数可以让一个类不被继承；</p>\n<h2><a id=\"_251\"></a>友元函数注意事项</h2>\n<p>1.注意友元函数不是类的成员函数，所以友元函数的实现和普通函数一样，在实现时不用\"::“指示属于哪个类，只有成员函数才使用”::\"作用域符号。<br/> 2.使用友元函数会破坏类的封装（所以需要尽量使用成员函数，除非不得已才使用友元函数哦）。</p>\n<h1><a id=\"_255\"></a>二、总结</h1>\n<p>每日一语:一个优秀的程序员会具备很多品质,例如拥有旺盛的好奇心,并有能把其转化为求知欲的能力又或者是强大的学习能力,扎实的基本功等等,但这一切都需要你主动去学习，去探索，去培养，没有人生下来就是天才,所谓天才都是在人生的旅途中慢慢发现自己的优势,并从芸芸众生中脱颖而出。从现在开始养成良好的代码习惯,尽量自己debug,提升代码的健壮性,不断巩固基础,培养自己抽象问题的能力,相信终有一天你会脱颖而出,成为自己想成为的那个人。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-14 16:17:28", "summary": "知识黄金学习记录二文章目录知识黄金学习记录二前言一、详解是什么使用举例为什么要使用作用域详解基本知识使用中符号可包含的成员直接通过作用域访问声明指定某个符号在某个作用域下可见编译指令指定名字空间中所有"}