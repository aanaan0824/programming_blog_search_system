{"blogid": "123117829", "writerAge": "码龄9年", "writerBlogNum": "7", "writerCollect": "16", "writerComment": "3", "writerFan": "1", "writerGrade": "2级", "writerIntegral": "142", "writerName": "雪山大侠丶", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123117829.jpg", "writerRankTotal": "125588", "writerRankWeekly": "267437", "writerThumb": "3", "writerVisitNum": "9932", "blog_read_count": "1006", "blog_time": "于 2022-02-24 18:14:24 发布", "blog_title": "rust使用vec在遍历时删除元素", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>rust使用vec在遍历时删除元素</p>\n<p>需求: 工作中有一个地方需要用到在遍历时把不符合条件的元素删除掉，</p>\n<blockquote>\n<p>比如一个vec中是原始数据是 <code>vec![1,2,3,3,4,5]</code> ，然后我要在遍历中把等于c的元素删除掉,目的是得到<code>vec![1,2,4,5]</code></p>\n</blockquote>\n<h2><a id=\"_6\"></a>第一次错误尝试</h2>\n<p>由于最开始只知道移除元素用remove方法，所以最开始是这样写的</p>\n<pre><code class=\"prism language-rust\">    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> items<span class=\"token punctuation\">:</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before items is {:?}\"</span><span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">enumerate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">*</span>item <span class=\"token operator\">==</span> <span class=\"token string\">\"c\"</span> <span class=\"token punctuation\">{<!-- --></span>\n            items<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"then items is {:?}\"</span><span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>但是报错了，报错提示为</p>\n<pre><code>error[E0502]: cannot borrow `items` as mutable because it is also borrowed as immutable\n --&gt; src/main.rs:8:13\n  |\n6 |     for (index, item) in items.iter().enumerate() {\n  |                          ------------------------\n  |                          |\n  |                          immutable borrow occurs here\n  |                          immutable borrow later used here\n7 |         if *item == \"c\" {\n8 |             items.remove(index);\n  |             ^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n\nFor more information about this error, try `rustc --explain E0502`.\n</code></pre>\n<p>提示很明显，iter()是不可变的引用，但是调用remove的时候删除一个元素得时候，对items是可变的引用了，所以一个变量不能既是可变引用又是不可变引用，所以报错了。</p>\n<h2><a id=\"_38\"></a>第二次错误尝试</h2>\n<p>然后我进行了第二次尝试，<br/> 代码改成了，不在遍历中进行移除，把需要移除的id保存起来，在遍历结束之后，再把需要移除的元素给移除掉。</p>\n<pre><code class=\"prism language-rust\">    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> items<span class=\"token punctuation\">:</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before items is {:?}\"</span><span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> remove_indexs<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">enumerate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">*</span>item <span class=\"token operator\">==</span> <span class=\"token string\">\"c\"</span> <span class=\"token punctuation\">{<!-- --></span>\n            remove_indexs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"remove indexs is {:?}\"</span><span class=\"token punctuation\">,</span> remove_indexs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> remove_indexs <span class=\"token punctuation\">{<!-- --></span>\n        items<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"then items is {:?}\"</span><span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>打印出的结果是</p>\n<pre><code>before items is [\"a\", \"b\", \"c\", \"c\", \"d\", \"e\"]\nremove indexs is [2, 3]\nthen items is [\"a\", \"b\", \"c\", \"e\"]\n</code></pre>\n<p>不报错了，但是结果不对啊，预计是[“a”,“b”,“d”,“e”]的，怎么变成了[“a”, “b”, “c”, “e”]了。</p>\n<p>原因是:</p>\n<p>第二个循环需要移除<code>索引为2和3</code>的两个元素。所以有两次循环：</p>\n<ul><li>第一次：在移除<code>索引为2</code>的元素之后。items变成了[“a”,“b”,“c”,“d”,“e”],后面的元素补上去了。这时我们的<code>目标索引3</code>的index从3变成了2.</li><li>第二次：按照代码把<code>索引为3</code>的元素移除，但是索引3的元素却成c变成了d，这段程序也就错了。</li></ul>\n<h2><a id=\"_72\"></a>正确方法</h2>\n<p>上面方法失败之后，觉得vec应该有处理这种情况的方法，所以看了源码，找到了答案。<br/> vec有两个方法可以实现我想要的。</p>\n<p>vec.retain 和 vec.drain_filter</p>\n<h3><a id=\"vecretain_78\"></a>vec.retain</h3>\n<p>vec.retain 很简单，<code>retain</code>的意思是<code>保留</code>，所以这个方法的意思就是接收一个回调函数，然后回调函数里面返回true进行保留，返回false的就移除。<br/> 示例：</p>\n<pre><code class=\"prism language-rust\">    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> vec <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    vec<span class=\"token punctuation\">.</span><span class=\"token function\">retain</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token operator\">&amp;</span>x<span class=\"token closure-punctuation punctuation\">|</span></span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>所以用vec.retain来实现的话，就是这样</p>\n<pre><code class=\"prism language-rust\">    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> items<span class=\"token punctuation\">:</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before items is {:?}\"</span><span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    items<span class=\"token punctuation\">.</span><span class=\"token function\">retain</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>item<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token keyword\">if</span> <span class=\"token operator\">*</span>item <span class=\"token operator\">==</span> <span class=\"token string\">\"c\"</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"then items is {:?}\"</span><span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"vecdrain_filter_96\"></a>vec.drain_filter</h3>\n<p><code>drain</code>的意思是 <code>排出</code> 的意思，所以这个函数就是排出过滤器，接收一个回调函数，然后把回调函数里面返回true的元素就会排出，自然也就从原本的vec里面删除掉了。然后有需要的话还可以搜集排出的元素。<br/> 示例:</p>\n<pre><code class=\"prism language-rust\">    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> numbers <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">let</span> evens <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">drain_filter</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>x<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token operator\">*</span>x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span>_<span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> odds <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>evens<span class=\"token punctuation\">,</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>odds<span class=\"token punctuation\">,</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>所以用vec.drain_filter来实现的话，就是这样</p>\n<pre><code class=\"prism language-rust\">    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> items<span class=\"token punctuation\">:</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before items is {:?}\"</span><span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    items<span class=\"token punctuation\">.</span><span class=\"token function\">retain</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>item<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token keyword\">if</span> <span class=\"token operator\">*</span>item <span class=\"token operator\">==</span> <span class=\"token string\">\"c\"</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> removed_items <span class=\"token operator\">=</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">drain_filter</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>item<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token keyword\">if</span> <span class=\"token operator\">*</span>item <span class=\"token operator\">==</span> <span class=\"token string\">\"c\"</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span>_<span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"then items is {:?}\"</span><span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"removed item is {:?}\"</span><span class=\"token punctuation\">,</span> removed_items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>但是报错了，提示：</p>\n<pre><code>error[E0658]: use of unstable library feature 'drain_filter': recently added\n --&gt; src/main.rs:7:31\n  |\n7 |     let removed_items = items.drain_filter(|item| if *item == \"c\" { true} else { false}).collect::&lt;Vec&lt;_&gt;&gt;();\n  |                               ^^^^^^^^^^^^\n  |\n  = note: see issue #43244 &lt;https://github.com/rust-lang/rust/issues/43244&gt; for more information\n\nFor more information about this error, try `rustc --explain E0658`.\n</code></pre>\n<p>这个函数是属于不稳定的特性的，所以需要使用的话是有条件的<br/> 使用unstable feature的条件和步骤：</p>\n<ol><li>只有nightly才可以使用unstable</li><li>找到unstable feature的名字</li><li>#![feature(xxx)]启用这个feature</li></ol>\n<p>感兴趣的可以参考：https://blog.csdn.net/varding/article/details/48206689 来启用</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-02-24 18:14:24", "summary": "使用在遍历时删除元素需求工作中有一个地方需要用到在遍历时把不符合条件的元素删除掉，比如一个中是原始数据是，然后我要在遍历中把等于的元素删除掉目的是得到第一次错误尝试由于最开始只知道移除元素用方法，所以"}