{"blogid": "125421909", "writerAge": "码龄13年", "writerBlogNum": "257", "writerCollect": "1377", "writerComment": "68", "writerFan": "166", "writerGrade": "6级", "writerIntegral": "6428", "writerName": "江畔独步", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125421909.jpg", "writerRankTotal": "3673", "writerRankWeekly": "19725", "writerThumb": "247", "writerVisitNum": "564357", "blog_read_count": "2399", "blog_time": "已于 2022-06-23 10:45:24 修改", "blog_title": "MySQL中json_extract函数说明", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<h1><a id=\"1_json_extract__0\"></a>1. json_extract 使用场景说明</h1>\n</blockquote>\n<p>在日常业务开发中通常mysql数据库中某个字段会需要存储json格式字符串，查询的时候有时json数据较大，每次全部取出再去解析查询效率较低，也较麻烦.</p>\n<p>好在Mysql5.7及之后的版本里提供了json_extract函数，可以通过key查询value值(如果是json数组类型,可以通过下标获取对应位置的值)，非常方便。</p>\n<blockquote>\n<h1><a id=\"2_MySQL_json_extract__5\"></a>2. MySQL json_extract 函数简介</h1>\n</blockquote>\n<blockquote>\n<h2><a id=\"21__7\"></a>2.1 函数简介</h2>\n</blockquote>\n<p>Mysql5.7版本以后新增的功能，Mysql提供了一个原生的Json类型，Json值将不再以字符串的形式存储，而是采用一种允许快速读取文本元素（document elements）的内部二进制（internal binary）格式。 在Json列插入或者更新的时候将会自动验证Json文本，未通过验证的文本将产生一个错误信息。 Json文本采用标准的创建方式，可以使用大多数的比较操作符进行比较操作，例如：=, &lt;, &lt;=, &gt;, &gt;=, &lt;&gt;, != 和 &lt;=&gt;。</p>\n<blockquote>\n<h2><a id=\"22__10\"></a>2.2 使用方式</h2>\n</blockquote>\n<p>数据存储的数据是json字符串（类型是vachar）。<br/> 想要查询出来json中某个字段的值，用到方法是：JSON_EXTRACT()。</p>\n<p>语法：<br/> <code>**JSON_EXTRACT(json_doc, path[, path] …)**</code></p>\n<p>用法提示：</p>\n<ul><li>如果json字符串不是数组，则直接使用<code> $.字段名</code></li><li>如果json字符串是数组[Array]，则直接使用 <code>$[对应的索引ID]</code></li></ul>\n<blockquote>\n<h2><a id=\"23__21\"></a>2.3 注意事项</h2>\n</blockquote>\n<p>JSON_EXTRACT性能验证 , 通过查看执行计划，验证全部都是全表扫描。<br/> 使用场景：数据量不大json字符串较大则可以采用，数据量较大不建议使用。</p>\n<blockquote>\n<h1><a id=\"3__26\"></a>3. 数据验证</h1>\n</blockquote>\n<blockquote>\n<h2><a id=\"31_json_28\"></a>3.1 提取普通json中的值</h2>\n</blockquote>\n<p>说明:</p>\n<ul><li>普通字段使用 <code>$.KEY</code> 获取</li><li>数组字段使用 <code>$.KEY[index]</code> 获取,注意index从0开始</li><li>实际使用中,如下json字符串只需要换成对应的表字段即可,但要注意需对json判空和替换等ETL转换操作.</li></ul>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">select</span> \n\tjson_extract<span class=\"token punctuation\">(</span><span class=\"token string\">'{\"name\":\"zhangsan\",\"tel_no\":\"136-6666-6666\",\"hobbies\":[\"basketball\",\"run\",\"sing\"]}'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"$.name\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> name<span class=\"token punctuation\">,</span>\n\tjson_extract<span class=\"token punctuation\">(</span><span class=\"token string\">'{\"name\":\"zhangsan\",\"tel_no\":\"136-6666-6666\",\"hobbies\":[\"basketball\",\"run\",\"sing\"]}'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"$.tel_no\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> tel_no<span class=\"token punctuation\">,</span>\n\tjson_extract<span class=\"token punctuation\">(</span><span class=\"token string\">'{\"name\":\"zhangsan\",\"tel_no\":\"136-6666-6666\",\"hobbies\":[\"basketball\",\"run\",\"sing\"]}'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"$.hobbies[0]\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> hobby_1<span class=\"token punctuation\">,</span>\n\tjson_extract<span class=\"token punctuation\">(</span><span class=\"token string\">'{\"name\":\"zhangsan\",\"tel_no\":\"136-6666-6666\",\"hobbies\":[\"basketball\",\"run\",\"sing\"]}'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"$.hobbies[1]\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> hobby_2<span class=\"token punctuation\">,</span>\n\tjson_extract<span class=\"token punctuation\">(</span><span class=\"token string\">'{\"name\":\"zhangsan\",\"tel_no\":\"136-6666-6666\",\"hobbies\":[\"basketball\",\"run\",\"sing\"]}'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"$.hobbies[2]\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> hobby_3<span class=\"token punctuation\">,</span>\n\tjson_extract<span class=\"token punctuation\">(</span><span class=\"token string\">'{\"name\":\"zhangsan\",\"tel_no\":\"136-6666-6666\",\"hobbies\":[\"basketball\",\"run\",\"sing\"]}'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"$.hobbies[3]\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> hobby_4<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>结果:</p>\n<table><thead><tr><th align=\"center\">name</th><th align=\"center\">tel_no</th><th>hobby_1</th><th>hobby_2</th><th>hobby_3</th><th>hobby_4</th></tr></thead><tbody><tr><td align=\"center\">“zhangsan”</td><td align=\"center\">136-6666-6666</td><td>“basketball”</td><td>“run”</td><td>“sing”</td><td>NULL</td></tr></tbody></table>\n<blockquote>\n<h2><a id=\"32_json_50\"></a>3.2 提取json数组的值</h2>\n</blockquote>\n<p>site_user表</p>\n<table><thead><tr><th align=\"center\">id</th><th>name</th><th>tags</th></tr></thead><tbody><tr><td align=\"center\">1</td><td>zhangsan</td><td>[“COMMON”]</td></tr><tr><td align=\"center\">2</td><td>lisi</td><td>[“VIP”]</td></tr><tr><td align=\"center\">3</td><td>wangwu</td><td>[“VVIP”,“PLATINUM”]</td></tr><tr><td align=\"center\">4</td><td>zhaoliu</td><td></td></tr></tbody></table>\n<p>提取用户的第一个标签:</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">select</span> \n\tid<span class=\"token punctuation\">,</span>\n\tname<span class=\"token punctuation\">,</span>\n\ttags<span class=\"token punctuation\">,</span> \n\tjson_extract<span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>LENGTH<span class=\"token punctuation\">(</span>tags<span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>tags<span class=\"token punctuation\">,</span> <span class=\"token string\">'[]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"$[0]\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 如果tags无数据,赋值为空数组</span>\n<span class=\"token keyword\">from</span> site_user<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>结果:</p>\n<table><thead><tr><th align=\"center\">id</th><th>name</th><th>tags</th></tr></thead><tbody><tr><td align=\"center\">1</td><td>zhangsan</td><td>“COMMON”</td></tr><tr><td align=\"center\">2</td><td>lisi</td><td>“VIP”</td></tr><tr><td align=\"center\">3</td><td>wangwu</td><td>“VVIP”</td></tr><tr><td align=\"center\">4</td><td>zhaoliu</td><td>NULL</td></tr></tbody></table>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 0, "time": "2022-06-23 10:45:24", "summary": "使用场景说明在日常业务开发中通常数据库中某个字段会需要存储格式字符串，查询的时候有时数据较大，每次全部取出再去解析查询效率较低，也较麻烦好在及之后的版本里提供了函数，可以通过查询值如果是数组类型可以通"}