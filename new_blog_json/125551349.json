{"blogid": "125551349", "writerAge": "码龄2年", "writerBlogNum": "93", "writerCollect": "5020", "writerComment": "5443", "writerFan": "4921", "writerGrade": "7级", "writerIntegral": "13470", "writerName": "一名不会打字的程序员", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125551349.jpg", "writerRankTotal": "786", "writerRankWeekly": "73", "writerThumb": "5245", "writerVisitNum": "78510", "blog_read_count": "2704", "blog_time": "已于 2022-07-04 19:51:50 修改", "blog_title": "JVM 内存模型", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/f7f5e8f696074d79bb7c7cfaab2ea5d2.gif#pic_center\"/></p>\n<blockquote>\n<p>📢作者简介：物联网领域创作者，🏅阿里云专家博主🏅 🏅华为云享专家🏅<br/> ✒️个人主页：<a href=\"https://blog.csdn.net/weixin_51568389?spm=1011.2435.3001.5343\">Choice~</a><br/> 🌐格言：可正因为难，才有价值！🔶</p>\n</blockquote>\n<blockquote>\n<p>🏫系列专栏：<br/> 1️⃣ <a href=\"https://blog.csdn.net/weixin_51568389/category_11849487.html\">C/C++</a><br/> 2️⃣ <a href=\"https://blog.csdn.net/weixin_51568389/category_11830402.html\">C和指针</a><br/> 3️⃣ <a href=\"https://blog.csdn.net/weixin_51568389/category_11846393.html\">Linux</a><br/> 4️⃣ <a href=\"https://blog.csdn.net/weixin_51568389/category_11816257.html\">数据结构与算法</a><br/> 5️⃣ <a href=\"https://blog.csdn.net/weixin_51568389/category_11865484.html\">JavaScript从入门到精通</a><br/> 6️⃣ <a href=\"https://blog.csdn.net/weixin_51568389/category_11855792.html\">101算法JavaScript描述💰</a></p>\n</blockquote>\n<blockquote>\n<p>JAVA的主旨是它著名的WOTA：“一次编写，随处运行”。为了应用它，Sun Microsystems创建了Java虚拟机，这是解释已编译的Java代码的基础操作系统的抽象。<strong>JVM</strong>是JRE（Java运行时环境）的核心组件，是为运行Java代码而创建的，但现在被其他语言（Scala，Groovy，JRuby，Closure…）使用。</p>\n</blockquote>\n<p>在本文中，我将重点介绍 JVM 规范中描述的<strong>运行时数据区域</strong>。这些区域旨在存储程序或 JVM 本身使用的数据。我将首先介绍JVM的概述，然后是字节码是什么，并以不同的数据区域结束。</p>\n<h1><a id=\"_17\"></a>全球概览</h1>\n<p>JVM 是底层操作系统的抽象。它确保相同的代码将以相同的行为运行，无论JVM在什么硬件或操作系统上运行。例如：</p>\n<ul><li>无论 JVM 是否在 16 位/32 位/64 位操作系统上运行，基元类型 int 的大小将始终为从 -2^31 到 2^31-1 的 32 位有符号整数。</li><li>每个 JVM 都以大端顺序（其中高字节优先）在内存中存储和使用数据，无论底层操作系统/硬件是大端还是小端序。</li></ul>\n<p>注意：有时，JVM 实现的行为与另一个 JVM 实现不同，但通常是相同的。</p>\n<p><a href=\"http://coding-geek.com/wp-content/uploads/2015/04/jvm_overview.jpg\"><img alt=\"JVM 功能的过度\" src=\"..\\..\\static\\image\\f655ddcba5e3d5ed0b7926c6263387d4.jpeg\"/></a></p>\n<p>下图给出了 JVM 的概述：</p>\n<ul><li>JVM <strong>解释</strong>由编译类的源代码<strong>生成的</strong>字节码。虽然术语JVM代表“Java虚拟机”，但它可以运行其他语言，如scala或groovy，只要它们可以编译成java字节码。</li><li>为了避免磁盘 I/O，字节码由其中一个运行时数据区域中的<strong>类装入器加载</strong>到 JVM 中。此代码将保留在内存中，直到 JVM 停止或类装入器（装入它）被销毁。</li><li>然后，加载的代码<strong>由</strong>执行<strong>引擎解释和执行</strong>。</li><li>执行引擎需要存储数据，就像指向正在执行的代码的指针一样。它还需要存储开发人员代码中处理的数据。</li><li>执行引擎还负责处理底层操作系统。</li></ul>\n<p>注意：许多 JVM 实现的执行引擎不会总是解释字节码，而是将字节码编译为本机代码（如果经常使用）。它被称为Just In Time（<strong>JIT</strong>）编译，大大加快了JVM的速度。编译的代码临时保存在通常称为<strong>代码缓存的区域</strong>中。由于该区域不在 JVM 规范中，因此在本文的其余部分我不会讨论它。</p>\n<h1><a id=\"_44\"></a>基于堆栈的架构</h1>\n<blockquote>\n<p>JVM 使用基于堆栈的体系结构。虽然它对开发人员来说是不可见的，但它对生成的字节码和JVM架构有巨大的影响，这就是为什么我将简要解释这个概念。</p>\n</blockquote>\n<p>JVM通过执行Java字节码中描述的基本操作来执行开发人员的代码（我们将在下一章中看到它）。操作数是指令操作的值。根据 JVM 规范，这些操作要求通过称为<strong>操作数堆栈的堆栈</strong>传递参数。</p>\n<p><img alt=\"state_of_java_operand_stack\" src=\"..\\..\\static\\image\\e91474f09b0ac39daa206a3e42d953b6.jpeg\"/></p>\n<p>例如，让我们取 2 个整数的基本相加法。此操作称为 <strong>iadd</strong>（对于 <strong>i</strong>nteger <strong>add</strong>ition）。如果要在字节码中添加 3 和 4：</p>\n<ul><li>他首先在操作数堆栈中推送 3 和 4。</li><li>然后调用 iadd 指令。</li><li>iadd 将从操作数堆栈中弹出最后 2 个值。</li><li>int 结果 （3 + 4） 被推送到操作数堆栈中，以便其他操作使用。</li></ul>\n<p>这种工作方式称为基于堆栈的体系结构。还有其他方法可以处理基本操作，例如，基于寄存器的体系结构将操作数存储在小型寄存器中，而不是堆栈中。这种基于寄存器的架构由桌面/服务器（x86）处理器和以前的Android虚拟机Dalvik使用。</p>\n<h1><a id=\"_63\"></a>字节码</h1>\n<blockquote>\n<p>由于JVM解释字节码，因此在深入研究之前了解它是什么很有用。</p>\n</blockquote>\n<p>java字节码是转换为一组基本操作的java源代码。每个操作由一个表示要执行的指令的字节（称为<strong>操作码</strong>或<strong>操作代码</strong>）以及零个或多个用于传递参数的字节组成（但大多数操作使用操作数堆栈来传递参数）。在 256 个可能的一字节长的<a href=\"https://en.wikipedia.org/wiki/Opcode\">操作码</a>（从值 0x00 到十六进制的 0xFF）中，有 204 个目前在 java8 规范中使用。</p>\n<p>下面是不同类别的字节码操作的列表。对于每个类别，我添加了一个小描述和操作代码的十六进制范围：</p>\n<ul><li>常量：用于将值从常量池（我们稍后会看到它）或从已知值推送到操作数堆栈中。从价值0x00到0x14</li><li>加载：用于将值从局部变量加载到操作数堆栈中。从价值0x15到0x35</li><li>存储：用于将操作数堆栈存储到局部变量中。从价值0x36到0x56</li><li>堆栈：用于处理操作数堆栈。从价值0x57到0x5f</li><li>Math：用于对操作数堆栈中的值进行基本数学运算。从价值0x60到0x84</li><li>转换：用于从一种类型转换为另一种类型。从价值0x85到0x93</li><li>比较：用于两个值之间的基本比较。从价值0x94到0xa6</li><li>控制：基本操作，如转到，返回，…允许更高级的操作，如返回值的循环或函数。从价值0xa7到0xb1</li><li>引用：用于分配对象或数组，获取或检查对对象，方法或静态方法的引用。还用于调用（静态）方法。从价值0xb2到0xc3</li><li>扩展：之后添加的其他类别中的操作。从价值0xc4到0xc9</li><li>保留：供每个 Java 虚拟机实现内部使用。3 个值：0xca、0xfe和0xff。</li></ul>\n<p>这 204 个操作非常简单，例如：</p>\n<ul><li>操作数 <strong>ifeq</strong> （0x99 ） 检查 2 个值是否相等</li><li>操作数 <strong>iadd</strong> （0x60） 添加 2 个值</li><li>操作数 <strong>i2l</strong> （0x85） 将整数转换为长整型</li><li>操作数<strong>数组长度</strong> （0xbe） 给出数组的大小</li><li>操作数 <strong>pop</strong> （0x57） 从操作数堆栈中弹出第一个值</li></ul>\n<p>要创建字节码，需要一个编译器，JDK中包含的标准Java编译器是<strong>javac</strong>。</p>\n<p>让我们看一个简单的添加：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n \n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>“javac Test.java”命令在 Test.class 中生成一个字节码。由于java字节码是二进制代码，因此人类无法读取它。Oracle在其JDK中提供了一个工具<strong>javap</strong>，该工具将二进制字节码转换为JVM规范中人类可读的标记操作代码集。</p>\n<p>命令 “javap -verbose Test.class” 给出以下结果：</p>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">Classfile</span> <span class=\"token operator\">/</span><span class=\"token class-name\">C</span><span class=\"token operator\">:</span><span class=\"token operator\">/</span>TMP<span class=\"token operator\">/</span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span>\n  <span class=\"token class-name\">Last</span> modified <span class=\"token number\">1</span> avr<span class=\"token punctuation\">.</span> <span class=\"token number\">2015</span><span class=\"token punctuation\">;</span> size <span class=\"token number\">367</span> bytes\n  MD5 checksum adb9ff75f12fc6ce1cdde22a9c4c7426\n  <span class=\"token class-name\">Compiled</span> from <span class=\"token string\">\"Test.java\"</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>codinggeek<span class=\"token punctuation\">.</span>jvm<span class=\"token punctuation\">.</span></span>Test</span>\n  <span class=\"token class-name\">SourceFile</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Test.java\"</span>\n  minor version<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  major version<span class=\"token operator\">:</span> <span class=\"token number\">51</span>\n  flags<span class=\"token operator\">:</span> ACC_PUBLIC<span class=\"token punctuation\">,</span> ACC_SUPER\n<span class=\"token class-name\">Constant</span> pool<span class=\"token operator\">:</span>\n   #<span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Methodref</span>          #<span class=\"token number\">4.</span>#<span class=\"token number\">15</span>         <span class=\"token comment\">//  java/lang/Object.\"&lt;init&gt;\":()V</span>\n   #<span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Methodref</span>          #<span class=\"token number\">3.</span>#<span class=\"token number\">16</span>         <span class=\"token comment\">//  com/codinggeek/jvm/Test.add:(II)I</span>\n   #<span class=\"token number\">3</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span>              #<span class=\"token number\">17</span>            <span class=\"token comment\">//  com/codinggeek/jvm/Test</span>\n   #<span class=\"token number\">4</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span>              #<span class=\"token number\">18</span>            <span class=\"token comment\">//  java/lang/Object</span>\n   #<span class=\"token number\">5</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>init<span class=\"token punctuation\">&gt;</span></span>\n   #<span class=\"token number\">6</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">V</span>\n   #<span class=\"token number\">7</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               <span class=\"token class-name\">Code</span>\n   #<span class=\"token number\">8</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               <span class=\"token class-name\">LineNumberTable</span>\n   #<span class=\"token number\">9</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               main\n  #<span class=\"token number\">10</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Ljava</span><span class=\"token operator\">/</span>lang<span class=\"token operator\">/</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">V</span>\n  #<span class=\"token number\">11</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               add\n  #<span class=\"token number\">12</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               <span class=\"token punctuation\">(</span>II<span class=\"token punctuation\">)</span><span class=\"token class-name\">I</span>\n  #<span class=\"token number\">13</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               <span class=\"token class-name\">SourceFile</span>\n  #<span class=\"token number\">14</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               <span class=\"token class-name\">Test</span><span class=\"token punctuation\">.</span>java\n  #<span class=\"token number\">15</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">NameAndType</span>        #<span class=\"token number\">5</span><span class=\"token operator\">:</span>#<span class=\"token number\">6</span>          <span class=\"token comment\">//  \"&lt;init&gt;\":()V</span>\n  #<span class=\"token number\">16</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">NameAndType</span>        #<span class=\"token number\">11</span><span class=\"token operator\">:</span>#<span class=\"token number\">12</span>        <span class=\"token comment\">//  add:(II)I</span>\n  #<span class=\"token number\">17</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               com<span class=\"token operator\">/</span>codinggeek<span class=\"token operator\">/</span>jvm<span class=\"token operator\">/</span><span class=\"token class-name\">Test</span>\n  #<span class=\"token number\">18</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               java<span class=\"token operator\">/</span>lang<span class=\"token operator\">/</span><span class=\"token class-name\">Object</span>\n<span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>codinggeek<span class=\"token punctuation\">.</span>jvm<span class=\"token punctuation\">.</span></span>Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    flags<span class=\"token operator\">:</span> ACC_PUBLIC\n    <span class=\"token class-name\">Code</span><span class=\"token operator\">:</span>\n      stack<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> locals<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> args_size<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n         <span class=\"token number\">0</span><span class=\"token operator\">:</span> aload_0\n         <span class=\"token number\">1</span><span class=\"token operator\">:</span> invokespecial #<span class=\"token number\">1</span>                  <span class=\"token comment\">// Method java/lang/Object.\"&lt;init&gt;\":()V</span>\n         <span class=\"token number\">4</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span>\n      <span class=\"token class-name\">LineNumberTable</span><span class=\"token operator\">:</span>\n        line <span class=\"token number\">3</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n \n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    flags<span class=\"token operator\">:</span> ACC_PUBLIC<span class=\"token punctuation\">,</span> ACC_STATIC\n    <span class=\"token class-name\">Code</span><span class=\"token operator\">:</span>\n      stack<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> locals<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> args_size<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n         <span class=\"token number\">0</span><span class=\"token operator\">:</span> iconst_1\n         <span class=\"token number\">1</span><span class=\"token operator\">:</span> istore_1\n         <span class=\"token number\">2</span><span class=\"token operator\">:</span> bipush        <span class=\"token number\">15</span>\n         <span class=\"token number\">4</span><span class=\"token operator\">:</span> istore_2\n         <span class=\"token number\">5</span><span class=\"token operator\">:</span> iload_1\n         <span class=\"token number\">6</span><span class=\"token operator\">:</span> iload_2\n         <span class=\"token number\">7</span><span class=\"token operator\">:</span> invokestatic  #<span class=\"token number\">2</span>                  <span class=\"token comment\">// Method add:(II)I</span>\n        <span class=\"token number\">10</span><span class=\"token operator\">:</span> istore_3\n        <span class=\"token number\">11</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span>\n      <span class=\"token class-name\">LineNumberTable</span><span class=\"token operator\">:</span>\n        line <span class=\"token number\">6</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n        line <span class=\"token number\">7</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n        line <span class=\"token number\">8</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span>\n        line <span class=\"token number\">9</span><span class=\"token operator\">:</span> <span class=\"token number\">11</span>\n \n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    flags<span class=\"token operator\">:</span> ACC_PUBLIC<span class=\"token punctuation\">,</span> ACC_STATIC\n    <span class=\"token class-name\">Code</span><span class=\"token operator\">:</span>\n      stack<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> locals<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> args_size<span class=\"token operator\">=</span><span class=\"token number\">2</span>\n         <span class=\"token number\">0</span><span class=\"token operator\">:</span> iload_0\n         <span class=\"token number\">1</span><span class=\"token operator\">:</span> iload_1\n         <span class=\"token number\">2</span><span class=\"token operator\">:</span> iadd\n         <span class=\"token number\">3</span><span class=\"token operator\">:</span> istore_2\n         <span class=\"token number\">4</span><span class=\"token operator\">:</span> iload_2\n         <span class=\"token number\">5</span><span class=\"token operator\">:</span> ireturn\n      <span class=\"token class-name\">LineNumberTable</span><span class=\"token operator\">:</span>\n        line <span class=\"token number\">12</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n        line <span class=\"token number\">13</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>可读.class表明字节码包含的不仅仅是java源代码的简单转录。它包含：</p>\n<ul><li>类的常量池的描述。常量池是JVM的数据区域之一，它存储有关类的元数据，例如方法的名称，参数…当一个类在JVM中加载时，这部分进入常量池。</li><li>像 LineNumberTable 或 LocalVariableTable 这样的信息，用于指定函数的位置（以字节为单位）及其变量在字节码中的位置。</li><li>开发人员的 java 代码（加上隐藏构造函数）的字节码中的转录。</li><li>处理操作数堆栈的特定操作，更广泛地说是处理传递和获取参数的方式。</li></ul>\n<p>仅供参考，以下是存储在.class文件中的信息的简要说明：</p>\n<pre><code>ClassFile {\n  u4 magic;\n  u2 minor_version;\n  u2 major_version;\n  u2 constant_pool_count;\n  cp_info constant_pool[constant_pool_count-1];\n  u2 access_flags;\n  u2 this_class;\n  u2 super_class;\n  u2 interfaces_count;\n  u2 interfaces[interfaces_count];\n  u2 fields_count;\n  field_info fields[fields_count];\n  u2 methods_count;\n  method_info methods[methods_count];\n  u2 attributes_count;\n  attribute_info attributes[attributes_count];\n}\n</code></pre>\n<h1><a id=\"_221\"></a>运行时数据区域</h1>\n<blockquote>\n<p>运行时数据区域是用于存储数据的内存中区域。这些数据由开发人员的程序或JVM用于其内部工作。</p>\n</blockquote>\n<p><img alt=\"jvm_memory_overview\" src=\"..\\..\\static\\image\\4391a1969e2d07963334cf3e583fec11.jpeg\"/></p>\n<p>此图显示了 JVM 中不同运行时数据区域的概述。某些区域是每个线程的其他区域所独有的。</p>\n<h2><a id=\"_231\"></a>堆</h2>\n<blockquote>\n<p>堆是所有 Java 虚拟机线程之间共享的内存区域。它是在虚拟机启动时创建的。所有类<strong>实例</strong>和<strong>数组</strong>都在堆中<strong>分配</strong>（使用 <strong>new</strong> 运算符）。</p>\n</blockquote>\n<pre><code class=\"prism language-javascript\">MyClass myVariable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nMyClass<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> myArrayClass <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>此区域必须由<strong>垃圾回收器</strong>管理，以便在不再使用开发人员分配的实例时将其删除。清理内存的策略取决于 JVM 实现（例如，Oracle Hotspot 提供了多种算法）。</p>\n<p>堆可以动态扩展或收缩，并且可以具有固定的最小和最大大小。例如，在Oracle Hotspot中，用户可以通过以下方式使用Xms和Xmx参数指定堆的最小大小“java -Xms=512m -Xmx=1024m…”</p>\n<p>注意：堆不能超过的最大大小。如果超过此限制，JVM 将抛出一个 <strong>OutOfMemoryError。</strong></p>\n<h2><a id=\"_248\"></a>方法区域</h2>\n<blockquote>\n<p>方法区域是所有 Java 虚拟机线程之间共享的内存。它是在虚拟机启动时创建的，由<strong>类装入器</strong>从字节码装入。只要加载方法区域中的类装入器处于活动状态，它们就会保留在内存中。</p>\n</blockquote>\n<p>方法区域存储：</p>\n<ul><li>类信息（字段/方法数、超类名、接口名、版本等）</li><li>方法和构造函数的字节码。</li><li>每个装入的类的运行时常量池。</li></ul>\n<p>规范不会强制在堆中实现方法区域。例如，在JAVA7之前，Oracle <strong>HotSpot</strong>使用一个名为PermGen的区域来存储方法区域。这个<strong>PermGen</strong>与Java堆（以及像堆一样由JVM管理的内存）是连续的，并且被限制为默认空间64Mo（由参数-XX：MaxPermSize修改）。从Java 8开始，HotSpot现在将方法区域存储在称为<strong>Metaspace</strong>的单独本机内存空间中，最大可用空间是总可用系统内存。</p>\n<p>注意：方法区域不能超过的最大大小。如果超过此限制，JVM 将抛出一个 <strong>OutOfMemoryError。</strong></p>\n<h2><a id=\"_264\"></a>运行时常量池</h2>\n<p>此池是方法区域的子部分。由于它是元数据的重要组成部分，因此 Oracle 规范除了“方法区域”之外，还描述了运行时常量池。对于每个加载的类/接口，此常量池都会增加。这个池就像传统编程语言的符号表。换句话说，当引用类、方法或字段时，JVM 通过使用运行时常量池搜索内存中的实际地址。它还包含常量值，如字符串 litteral 或常量基元。</p>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">String</span> myString1 <span class=\"token operator\">=</span> “<span class=\"token class-name\">This</span> is a string litteral”<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> MY_CONSTANT<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"PC__275\"></a>PC 寄存器（每个线程）</h2>\n<p>每个线程都有自己的 pc（程序计数器）寄存器，与线程同时创建。在任何时候，每个 Java 虚拟机线程都在执行单个方法的代码，即该线程<strong>的当前方法</strong>。pc 寄存器包含当前正在执行的 Java 虚拟机指令（在方法区域中）的地址。</p>\n<p>注： 如果线程当前正在执行的方法是本机的，则 Java 虚拟机的 pc 寄存器的值是未定义的。Java 虚拟机的 pc 寄存器足够宽，可以在特定平台上保存 returnAddress 或本机指针。</p>\n<h2><a id=\"Java__283\"></a>Java 虚拟机堆栈（每个线程）</h2>\n<p>堆栈区域存储多个帧，因此在讨论堆栈之前，我将介绍这些帧。</p>\n<h3><a id=\"_287\"></a>框架</h3>\n<p>帧是一种数据结构，它包含多个数据，这些数据表示<strong>当前方法</strong>（被调用的方法）中线程的状态：</p>\n<ul><li> <p><strong>操作数堆栈</strong>：我已经在关于基于堆栈的体系结构的章节中介绍了操作数堆栈。此堆栈由字节码指令用于处理参数。此堆栈还用于在 （java） 方法调用中传递参数，并在调用方法的堆栈顶部获取被调用方法的结果。</p> </li><li> <p><strong>局部变量数组</strong>：此数组包含当前方法范围内的所有局部变量。此数组可以保存基元类型、引用或返回地址的值。此数组的大小是在编译时计算的。Java虚拟机使用局部变量在方法调用时传递参数，被调用方法的数组是从调用方法的操作数堆栈创建的。</p> </li><li> <p><strong>运行时常量池引用</strong>：对正在执行的当前<strong>方法****的当前类</strong>的常量池的引用。JVM 使用它来将符号方法/变量引用（例如：myInstance.method（））转换为实际内存引用。</p> </li></ul>\n<h3><a id=\"Fold_297\"></a>Fold</h3>\n<p>每个 Java 虚拟机线程都有一个私有 <em>Java 虚拟机堆栈</em>，与该线程同时创建。Java 虚拟机堆栈存储帧。每次调用方法时，都会创建一个新帧并将其放入堆栈中。当帧的方法调用完成时，无论该完成是正常还是突然（它会引发未捕获的异常），帧都会被销毁。</p>\n<p>只有一个帧（执行方法的帧）在给定线程中的任何点处于活动状态。此帧称为<em><strong>当前帧</strong></em>，其方法称为<em><strong>当前方法</strong></em>。在其中定义当前方法的类是<em><strong>当前类</strong></em>。对局部变量和操作数堆栈的操作通常参考当前帧。</p>\n<p>让我们看看下面的例子，这是一个简单的加法</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">functionA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token comment\">// some code without function call</span>\n  <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//call to function B</span>\n<span class=\"token comment\">// some code without function call</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>以下是当函数A（）运行时它在JVM中的工作方式：</p>\n<p><img alt=\"state_of_jvm_method_stack\" src=\"..\\..\\static\\image\\1102cdaf86502c0c434bd19c42081d5d.jpeg\"/></p>\n<p>内部函数A（） 帧 A 是堆栈帧的顶部，是当前帧。在内部调用添加 （） 时，一个新帧（帧 B）被放置在堆栈中。帧 B 成为当前帧。帧 B 的局部变量数组是通过弹出帧 A 的操作数堆栈来填充的。当 add（） 完成后，帧 B 将被销毁，帧 A 再次成为当前帧。add（） 的结果放在 Frame A 的操作数堆栈上，以便 functionA（） 可以通过弹出其操作数堆栈来使用它。</p>\n<p>注意：这个堆栈的功能使它动态可扩展和收缩。存在堆栈不能超过的最大大小，这会限制递归调用的数量。如果超过此限制，JVM 将抛出一个 <strong>StackOverflowError</strong>。</p>\n<p>使用 Oracle HotSpot，您可以使用参数 -Xss 指定此限制。</p>\n<h2><a id=\"_333\"></a>本机方法堆栈（线程）</h2>\n<p>这是一个用Java以外的语言编写的本机代码的堆栈，并通过JNI（Java本机接口）调用。由于它是一个“本机”堆栈，因此此堆栈的行为完全依赖于底层操作系统。</p>\n<h1><a id=\"_339\"></a>结论</h1>\n<p>我希望本文能帮助您更好地了解 JVM。在我看来，最棘手的部分是JVM堆栈，因为它与JVM的内部功能密切相关。</p>\n<ul><li>如果对大家有帮助，请三连支持一下！</li><li>有问题欢迎评论区留言，及时帮大家解决！</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\44fc08b4428f4092923ca9985b396e50.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 1, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-07-04 19:51:50", "summary": "在这里插入图片描述作者简介：物联网领域创作者，阿里云专家博主华为云享专家个人主页：格言：可正因为难，才有价值！系列专栏：和指针数据结构与算法从入门到精通算法描述的主旨是它著名的：一次编写，随处运行。为"}