{"blogid": "123758611", "writerAge": "码龄14年", "writerBlogNum": "25", "writerCollect": "176", "writerComment": "14", "writerFan": "18", "writerGrade": "4级", "writerIntegral": "951", "writerName": "小明乐", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123758611.jpg", "writerRankTotal": "26936", "writerRankWeekly": "98420", "writerThumb": "32", "writerVisitNum": "85672", "blog_read_count": "2351", "blog_time": "已于 2022-04-28 10:16:53 修改", "blog_title": "thinphp6 tp6 api接口开发，token(jwt)登录验证", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\e0435a418bfc49a2b70c17e97e1288d8.png\"/></p>\n<pre><code># 1.安装tp6\n\ncomposer create-project topthink/think mv\n\n#2 创建User控制器\n\nphp think make:controller User --api\n\n#3 创建User模型，对应数据库表 user\n\nphp think make:model User\n\n</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\8f639e1cf46742109553301a17c8aed2.png\"/><br/>  </p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\aa1c429f605e404cac6c1ede3bd2b36d.png\"/></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\a1cd97428c3c4ace90dc5b29b149f0b5.png\"/></p>\n<p>用phpmyadmin创建数据库，并在.env文件中填写数据库信息；user表字段为：</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\52850a28ac374f9ca758cb943e572f36.png\"/></p>\n<p> 然后编辑控制器 user.index 方法：</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\3f2fcb6c8e2249b78a0216528e61399c.png\"/></p>\n<p>浏览器打开：正常显示；</p>\n<p>然后再次编辑user.index.方法,这时我们显示点别的，就显示数据库user模型的内容；</p>\n<pre><code>#注意顶部引入User模型；as避免重名\n\nuse app\\model\\User as UserModel;\n\n#重写index方法，select()选择数据库内所有行；\n\npublic function index()\n{\n    return UserModel::select();\n}</code></pre>\n<p>效果如下：</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\555fa315429d485da2403ef5212fef21.png\"/></p>\n<p style=\"text-align:center;\"> <img alt=\"\" src=\"..\\..\\static\\image\\eb91d2b597534b83a3529339a4f3eb16.png\"/></p>\n<p> 和数据库是对应的，如果有错误，把config/app.php的 'show_error_msg'   =&gt; true打开，显示错误信息；example.env改成.env，然后配置数据库连接信息；</p>\n<hr/>\n<p>以下非常简单，有点tp基础的都可以弄；下面，继续；</p>\n<p>api请求是json格式的，如何让请求的内容为json;如果为api快速创建路由：</p>\n<p>1.资源路由；</p>\n<p>编辑：route/app.php,增加一条资源 路由；</p>\n<pre><code>Route::resource('user', 'User');</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\09aa6a4ed0c0467cbfd4c9271a900bca.png\"/></p>\n<p> 然后可以用命令查看：</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\5d6974706ba54532b499cc87b19d10dc.png\"/></p>\n<p>这样一来，直接编辑User控制器的方法就行了；资源路由己经默认创建了一些方法； 我们编辑这些方法让其返回json数据，核心代码就是：</p>\n<pre><code>return \\think\\Response::create($result, $type);</code></pre>\n<p>说白了，就是用tp的Response对象的create建立一个响应，类型为json,好，下面来封装这个方法，让他好看点;</p>\n<p>在app\\controller控制器目录下建立 Base.php,这个是虚基类，让其它控制器继承：</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\c183edaa25de45b3bf529e349f9d40d9.png\"/></p>\n<p> 修改User控制器：</p>\n<pre><code>public function index()\n    {\n        $data = \\app\\model\\User::field('id,username,email')-&gt;select();\n        //查询所有数据\n        return $this-&gt;create($data, $data-&gt;isEmpty() ? '数据不存在' : '数据请求成功');\n        \n    }</code></pre>\n<p>显示结果就是json数据了：</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\2da5810e1aa045ca9be6e518d4869a41.png\"/></p>\n<p> 下面，来个分页：也是编辑user.index控制器方法：</p>\n<pre><code>public function index()\n    {\n        $data = \\app\\model\\User::field('id,username,email')-&gt;paginate(5);\n        \n        return $this-&gt;create($data, $data-&gt;isEmpty() ? '数据不存在' : '数据请求成功');\n        \n    }</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\0e00bde0ac4645339bb3ac255c000ecc.png\"/></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\cd0fbbbafa494b9f8bc2839d9b466a07.png\"/></p>\n<p> 第二页：注意url参数：</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\4ebab680287e41b886fbbf982880d60e.png\"/></p>\n<p> 完善User.read控制器方法，使其能访问/user/2 (访问id为2的用户信息）</p>\n<pre><code>public function read($id)\n{\n        //        \n        //判断$id 为整型\n        if (!Validate::isInteger($id)) {\n            return $this-&gt;create([], 'id 参数错误~', 400);\n        }\n        //获取数据\n        $data = UserModel::field('id,username,email')-&gt;find($id);\n        //查询数据\n        if (empty($data)) {\n            return $this-&gt;create([], '没有数据', 204);\n        } else {\n            return $this-&gt;create($data, '数据请求成功', 200);\n        }\n}</code></pre>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\c75b8fd806344d879ef699ca7e1e164e.png\"/></p>\n<p> 其它的save,delete,就不写了，自己完善，这时，请求api,以json返回就可以了；现在，我们来做token验证；</p>\n<p>1.安装 jwt;</p>\n<pre><code>composer require firebase/php-jwt</code></pre>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\1bc89ff3d2dc47d08660632324ee1d1f.png\"/></p>\n<p>创建一个token服务 ，会在app/service目录下生成Token.php,然后修改Token.php文件，这个文件基本上就是生成token字符串，校验的作用；自己手工创建也是一样的；</p>\n<p>然后，我们创建一个中间件，用于检测token,如果没有token,就给客户端（前端）返回错误，提示没有登录 什么的。。。</p>\n<p>JWT生成和效验common.php公共函数：</p>\n<pre><code>&lt;?php\nuse \\Firebase\\JWT\\JWT;\nuse Firebase\\JWT\\Key;\n// 应用公共文件\n\n/**\n * 生成验签\n * @param $uid 用户id\n * @return mixed\n */\nfunction signToken($uid){\n    $key='abcdefg';         //自定义的一个随机字串用户于加密中常用的 盐  salt\n    $token=array(\n        \"iss\"=&gt;$key,        //签发者 可以为空\n        \"aud\"=&gt;'',          //面象的用户，可以为空\n        \"iat\"=&gt;time(),      //签发时间\n        \"nbf\"=&gt;time()+2,    //在什么时候jwt开始生效\n        \"exp\"=&gt; time()+7200, //token 过期时间\n        \"data\"=&gt;[           //记录的uid的信息\n            'uid'=&gt;$uid,\n        ]\n    );\n    //  print_r($token);\n    $jwt = JWT::encode($token, $key, \"HS256\");  //生成了 token\n    return $jwt;\n}\n\n/**\n * 验证token\n * @param $token\n * @return array|int[]\n */\nfunction checkToken($token){\n    $key='abcdefg';     //自定义的一个随机字串用户于加密中常用的 盐  salt\n    $res['status'] = false;\n    try {\n        JWT::$leeway    = 60;//当前时间减去60，把时间留点余地\n        $decoded        = JWT::decode($token, new Key($key, 'HS256')); //HS256方式，这里要和签发的时候对应\n        $arr            = (array)$decoded;\n        $res['status']  = 200;\n        $res['data']    =(array)$arr['data'];\n        return $res;\n\n    } catch(\\Firebase\\JWT\\SignatureInvalidException $e) { //签名不正确\n        $res['info']    = \"签名不正确\";\n        return $res;\n    }catch(\\Firebase\\JWT\\BeforeValidException $e) { // 签名在某个时间点之后才能用\n        $res['info']    = \"token失效\";\n        return $res;\n    }catch(\\Firebase\\JWT\\ExpiredException $e) { // token过期\n        $res['info']    = \"token失效\";\n        return $res;\n    }catch(Exception $e) { //其他错误\n        $res['info']    = \"未知错误\";\n        return $res;\n    }\n}\n</code></pre>\n<pre><code>php think make:middleware Auth</code></pre>\n<p>这条命令会在app\\middleware下创建Auth.php中间件，中间件有全局，控制器，路由三种，这里我们用路由中间件；</p>\n<p>我们修改这个中间件（Auth.php)：</p>\n<pre><code>\n\n\npublic function handle($request, \\Closure $next)\n{\n        //\n        //第一步先取token\n        $token = $request-&gt;header('token');\n        //jwt进行校验token\n        $res = (new TokenServer())-&gt;chekToken($token);\n\n       if ($res['code'] != 1 ){\n           return ['error_code'=&gt;999,'msg'=&gt;$res['msg'],'data'=&gt;''];\n       }\n\n    $request-&gt;uid = $res['data']-&gt;uid;\n    return $next($request);\n\n}\n    </code></pre>\n<p>这个中间件的作用是：从请求头中读取token，然后调用TokenServer类的checkToken()方法来检测这个token是否正确，如果正确，就什么都不干，直接把请求加上一个uid后，直接next,这个next,就是下一步，假设请求路由是<a href=\"http://localhost/index.php/user/2\" title=\" http://localhost/index.php/user/2\"> http://localhost/index.php/user/2</a>，token也正确，这时他会直接返回请求内容，中间件就像不存在一样，但是，一但客户没有token（未登录）,或是token错误(过期),这时，他就不会返回请求内容，而是 return [ error_code 999 当然，这里也可以转向到Login登录页；提示前端登录 ，访问了需要授权登录 的页面；</p>\n<p></p>\n<p>注意：上面的：要注意，中间件可能在实际中是验证缓存中的token.只有登录才是验证header.或表单；</p>\n</div>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 1, "time": "2022-04-28 10:16:53", "summary": "安装创建控制器创建模型，对应数据库表用创建数据库，并在文件中填写数据库信息；表字段为：然后编辑控制器方法：浏览器打开：正常显示；然后再次编辑方法这时我们显示点别的，就显示数据库模型的内容；注意顶部引入"}