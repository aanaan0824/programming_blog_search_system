{"blogid": "126311836", "writerAge": "码龄1年", "writerBlogNum": "289", "writerCollect": "3115", "writerComment": "226", "writerFan": "2124", "writerGrade": "5级", "writerIntegral": "3778", "writerName": "代码输入中...", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126311836.jpg", "writerRankTotal": "4409", "writerRankWeekly": "881", "writerThumb": "537", "writerVisitNum": "225036", "blog_read_count": "3212", "blog_time": "于 2022-08-12 21:37:44 发布", "blog_title": "用Python绘制了若干张词云图，超级惊艳", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>在数据可视化图表中，word cloud map的应用随处可见。它通常提取输入文本的词频，然后根据词频显示高频词。它简单、直观、高效。今天，让我们分享如何用Python绘制一个出色的词云。</p>\n<p>小试牛刀<br/> 让我们首先尝试使用Python中的wordcloud模块绘制一个简单的词云</p>\n<p>import jieba<br/> from wordcloud import WordCloud<br/> import matplotlib.pyplot as plt<br/> 我们导入文本内容，并且去除掉一下换行符和空格，代码如下：</p>\n<p>text = open(r\"明朝那些事儿.txt\",encoding='utf8').read()<br/> text = text.replace('\\n',\"\").replace(\"\\u3000\",\"\")<br/> 我们需要将其分成一个个的词，这个时候就需要用到jieba模块了，代码如下：</p>\n<p>text_cut = jieba.lcut(text)<br/> # 将分好的词用某个符号分割开连成字符串<br/> text_cut = ' '.join(text_cut)<br/> 当然，可能有很多不重要的内容，我们不需要在获得的结果中看到。此时，我们需要使用停止词。我们可以自己构建，也可以直接使用其他人构建的停止词列表。这里，小编辑器使用后者，代码如下：</p>\n<p>stop_words = open(r\"常见中文停用词表.txt\").read().split(\"\\n\")<br/> 下面便是绘制词云图的核心代码了。</p>\n<p>word_cloud = WordCloud(font_path=\"simsun.ttc\",  # 设置词云字体<br/>                       background_color=\"white\", # 词云图的背景颜色<br/>                       stopwords=stop_words) # 去掉的停词<br/> word_cloud.generate(text_cut)<br/> word_cloud.to_file(\"1.png\")<br/> output</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\a0230c8f13bfef5095ecb8871a3017bf.jpeg\"/></p>\n<p> 这样一张极其简单的词云图算是做好了，当然我们可以给它添加一个背景图片，例如下面这张图片，</p>\n<p><img alt=\"\" height=\"241\" src=\"..\\..\\static\\image\\0f5f52784ddd976c671efa4d72b08e45.jpeg\" width=\"293\"/></p>\n<p> 主要需要添加的代码如下所示：</p>\n<p>background = Image.open(r\"5.png\")<br/> graph = np.array(background)<br/> 然后在WorCloud当中添加mask参数</p>\n<p># 使用WordCloud生成词云<br/> word_cloud = WordCloud(font_path=\"simsun.ttc\",  # 设置词云字体<br/>                       background_color=\"white\", # 词云图的背景颜色<br/>                       stopwords=stop_words, # 去掉的停词<br/>                       mask=graph)<br/> word_cloud.generate(text_cut)<br/> word_cloud.to_file(\"1.png\")<br/> output</p>\n<p><img alt=\"\" height=\"203\" src=\"..\\..\\static\\image\\8e0ffc0878ec5e2e1d239da3c226dff6.jpeg\" width=\"246\"/></p>\n<p> 深度优化<br/> 除此之外，还有另外一个模块stylecloud绘制出来的词云图也是非常酷炫的，其中我们主要是用到下面这个函数。</p>\n<p>gen_stylecloud(text=None,<br/>               icon_name='fas fa-flag',<br/>               colors=None,<br/>               palette='cartocolors.qualitative.Bold_5',<br/>               background_color=\"white\",<br/>               max_font_size=200,<br/>               max_words=2000,<br/>               stopwords=True,<br/>               custom_stopwords=STOPWORDS,<br/>               output_name='stylecloud.png',<br/> )<br/> 其中几个常用的参数有</p>\n<p> icon_name: 词云图的形状<br/>  max_font_size: 最大的字号<br/>  max_words: 可以容纳下的最大单词数量<br/>  stopwords: 用于筛选常见的停用词<br/>  custom_stopwords: 要是自建有停用词表，可以拿来用<br/>  palette: 调色板<br/> 我们来尝试绘制一个词云图，代码如下：</p>\n<p>stylecloud.gen_stylecloud(text=text_cut,<br/>                          palette='tableau.BlueRed_6',<br/>                          icon_name='fas fa-apple-alt',<br/>                          font_path=r'田英章楷书3500字.ttf',<br/>                          output_name='2.png',<br/>                          stopwords=True,<br/>                          custom_stopwords=stop_words)<br/> output</p>\n<p><img alt=\"\" height=\"249\" src=\"..\\..\\static\\image\\0b27ac301a5c3b615da61051484c8141.jpeg\" width=\"249\"/></p>\n<p> 其中的palette参数作为调色板，可以任意变换的，具体参考：https://jiffyclub.github.io/palettable/ 这个网站。</p>\n<p>pyecharts<br/> 最后我们来看一下如何用Pyecharts模块来进行词云图的绘制，代码如下</p>\n<p>from pyecharts import options as opts<br/> from pyecharts.charts import Page, WordCloud<br/> words = [<br/>    (\"皇帝\", 10000),<br/>    (\"朱元璋\", 6181),<br/>    (\"明朝\", 4386),<br/>    (\"朝廷\", 4055),<br/>    (\"明军\", 2467),<br/>    (\"士兵\", 2244),<br/>    (\"张居正\", 1868),<br/>    (\"王守仁\", 1281)<br/> ]<br/> c = (<br/>        WordCloud()<br/>        .add(\"\", words, word_size_range=[20, 100])<br/>        .set_global_opts(title_opts=opts.TitleOpts(title=\"基本示例\"))<br/>    )<br/> c.render(\"1.html\")</p>\n<p>output</p>\n<p><img alt=\"\" height=\"200\" src=\"..\\..\\static\\image\\5175e2e848ad54162e9372dc3b120aca.jpeg\" width=\"331\"/></p>\n<p> 结果有点简单。然而，值得注意的是，pyecarts中的wordcloud（）方法传入的数据是指定的单词及其出现频率。这与之前的操作不同。</p>\n<p>今天就到这啦，动手开始操作起来吧，更多的学习内容可以查看我之前发的内容哦，关注点个赞~后续分享更多学习知识~</p>\n</div>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-12 21:37:44", "summary": "在数据可视化图表中，的应用随处可见。它通常提取输入文本的词频，然后根据词频显示高频词。它简单、直观、高效。今天，让我们分享如何用绘制一个出色的词云。小试牛刀让我们首先尝试使用中的模块绘制一个简单的词云"}