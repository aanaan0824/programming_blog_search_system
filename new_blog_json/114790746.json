{"blogid": "114790746", "writerAge": "码龄2年", "writerBlogNum": "3", "writerCollect": "1158", "writerComment": "58", "writerFan": "240", "writerGrade": "2级", "writerIntegral": "348", "writerName": "霸蛮哥", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_114790746.jpg", "writerRankTotal": "1380427", "writerRankWeekly": "690793", "writerThumb": "138", "writerVisitNum": "41640", "blog_read_count": "37532", "blog_time": "于 2021-03-14 21:42:38 发布", "blog_title": "从零搭建完整python自动化测试框架（UI自动化和接口自动化 ）——持续更新", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>本自动化测试框架采用python + unittest 的基础来搭建，采用PO模式、数据驱动的思想，通过selenium来实现WEB UI自动化，通过request来实现接口自动化。移动终端的自动化也可在该框架基础上去构建补充。</p>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#_4\">总体框架</a></li><li><ul><li><a href=\"#PODDT_13\">PO模式、DDT数据驱动、关键字驱动</a></li><li><a href=\"#_48\">框架技术选择</a></li><li><a href=\"#_58\">框架运行结果</a></li><li><ul><li><a href=\"#PODDT_61\">各用例对应的定义方式（PO/DDT）</a></li><li><a href=\"#_123\">测试执行结果</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_134\">从零开始搭建项目</a></li><li><ul><li><a href=\"#_135\">一、开发环境搭建</a></li><li><a href=\"#_144\">二、新建项目</a></li><li><a href=\"#_151\">三、基础功能实现</a></li><li><ul><li><a href=\"#1_Conf_152\">1. 配置功能实现（Conf）</a></li><li><a href=\"#2_Log_222\">2. 日志功能实现（Log）</a></li><li><a href=\"#3_EXCELdata_357\">3. 读取EXCEL实现（data）</a></li><li><a href=\"#4_Email_419\">4. 邮件发送实现（Email）</a></li></ul>\n</li><li><a href=\"#WEB_UI_526\">四、WEB UI自动化</a></li><li><ul><li><a href=\"#1_PO_532\">1. 页面PO对象配置</a></li><li><a href=\"#2_basePage_568\">2. 实现basePage基类</a></li><li><a href=\"#3__640\">3. 写业务测试用例</a></li></ul>\n</li><li><a href=\"#_733\">五、实现主程序</a></li><li><a href=\"#API__805\">六、API 自动化</a></li><li><ul><li><a href=\"#1_API_809\">1. API对象配置</a></li><li><a href=\"#2base_api_855\">2.实现base_api基类</a></li><li><a href=\"#3_978\">3.测试用例</a></li></ul>\n</li><li><a href=\"#MD5_1048\">补：MD5函数</a></li><li><ul><li><a href=\"#_1055\">未完待续...</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_4\"></a>总体框架</h1>\n<p>总体框架如下图：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210314163951573.png\"/><br/> 用例扫描、测试结果反馈，如要和其它项目管理系统或是用例管理系统对接（比如testlink），就需要单独出来进行处理。<br/> 对于大型的产品，用例数特别多的话，需要建设一个master节点，专门负责管理用例和脚本，分发测试脚本，指定测试环境，汇总测试结果等。各节点执行分给自己的测试用例即可。</p>\n<h2><a id=\"PODDT_13\"></a>PO模式、DDT数据驱动、关键字驱动</h2>\n<p><strong>PO模式</strong>（Page Object）是UI自动化测试常采用的一种设计模式，用于解决开发频繁修改UI页面而导致的自动化脚本维护困难的问题。<br/> PO模式中心思想：</p>\n<ol><li>每一个页面为一个对象；</li><li>每一个对象维护着页面中的各元素和操作方法；</li><li>用例测试脚本只需要聚集业务逻辑和测试数据；</li><li>UI页面的变更，只需要修改对应的PO对象，无需修改测试脚本（理想情况下。实际上也很难100%做到，因为UI的变更很多时候意味着业务逻辑的变更）。</li></ol>\n<p><strong>DDT（Data Driven Testing）数据驱动</strong>测试模式，用来解决部分自动化用例逻辑完全相同，只有测试数据和预期结果不同的问题。实际上就是同一测试脚本使用不同的测试数据来反复执行（但脚本只需要写一个），测试数据和测试行为完全分离。<br/> DDT中心思想：</p>\n<ol><li>将测试数据分离出来，单独维护；</li><li>减少重复自动化用例的数量。</li></ol>\n<p>将以上两种思想进行结合，就可以做成 <strong>对象、数据、业务行为 三者分离</strong>的模型，再结合模块进行管理，为后续自动化用例脚本的长期维护打下基础。否则时间一长自动化就会乱成一团，维护成本越来越高，陷入自动化率不升反降的怪圈。</p>\n<p><strong>关键字驱动（Keyword Driven Testing）</strong>，在前面的基础上，可以进一步实现关键字驱动。即将业务逻辑相同的部分，抽象成关键字库。这样在写自动化用例脚本时，只需要写关键字和对应测试数据即可，可以进一步减少工作量，减少测试人员对代码的学习和依赖。<br/> 如京东搜索商品时直接写脚本需要好多步：</p>\n<ol><li>定位到搜索框</li><li>输入关键字</li><li>定位到搜索按钮</li><li>点击搜索按钮</li><li>定位结果列表</li><li>获取结果并返回</li></ol>\n<p>以关键字驱动的思想，即将这6步抽象出一个方法jd_search()，测试人员只需要写一句话就能完成以上所有动作获得结果。如：</p>\n<pre><code class=\"prism language-python\">result <span class=\"token operator\">=</span> jd_search<span class=\"token punctuation\">(</span><span class=\"token string\">'电脑'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>方便、省时省力，测试人员可聚焦于产品业务，而不是自动化脚本和语言学习。<br/> 甚至可以直接在设计测试用例的时候写关键字，由自动化平台去解析用例，都不需要写脚本。这方面最有名的自动化框架就是RobotFrameWork。但是RobotFrameWork过于笨重。建议大家适当抽象即可，不要过度抽象。</p>\n<h2><a id=\"_48\"></a>框架技术选择</h2>\n<p>大多数框架采用java语言或是python语言来实现，考虑到python容易掌握，各种库也比较全，所以采用python语言来实现。<br/> python自动化框架最常用的有unittest和pytest，两者都可以，这里采用python自带的unittest。<br/> 对于WEB UI自动化测试，没有别的选择，基本都是采用selenium来驱动浏览器来完成。<br/> 对于接口自动化测试，可采用的办法较多，postman、jmeter都可以，但灵活性都不如直接采用python的request库。<br/> 数据驱动，由于unittest没有直接可用的dataprovider，采用常见的ddt来实现。<br/> 对于手机自动化，暂未实现，后续考虑加入，可采用appnium来实现。<br/> 测试数据，第1阶段采用excel管理，对于大型系统，建议直接采用数据库进行管理。<br/> 所以总的来讲，这个所谓的框架，就是东拼本凑，即没有新思想，也没有新技术，只是将一些常用的技术，按一定的思路组织起来、驱动起来而已。</p>\n<h2><a id=\"_58\"></a>框架运行结果</h2>\n<p>总共执行6个用例，4个为京东搜索并抓取结果（WEB UI自动化测试），2个为百度翻译通用接口（接口自动化测试）。</p>\n<h3><a id=\"PODDT_61\"></a>各用例对应的定义方式（PO/DDT）</h3>\n<p><strong>页面定义方式</strong><br/> PO对象定义：京东主页面定义了搜索框和搜索按钮，以name为关键字，定义元素定位方式和执行的动作。</p>\n<pre><code class=\"prism language-python\">page_url <span class=\"token operator\">=</span> <span class=\"token string\">'https://www.jd.com'</span>\n\nelements <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'search_ipt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'desc'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'搜索框'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'by'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>By<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> <span class=\"token string\">u'key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'action'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'send_keys()'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'search_btn'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'desc'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'搜索按钮'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'by'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>By<span class=\"token punctuation\">.</span>CLASS_NAME<span class=\"token punctuation\">,</span> <span class=\"token string\">u'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'action'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'click()'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n</code></pre>\n<p><strong>测试数据定义方式</strong>：<br/> <img alt=\"测试数据\" src=\"..\\..\\static\\image\\20210314195702411.png\"/></p>\n<p><strong>API接口定义方式</strong><br/> 直接采用大家接口测试时熟悉的json格式来定义。</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 接口地址信息</span>\nuri_scheme <span class=\"token operator\">=</span> <span class=\"token string\">'http'</span>\nendpoint <span class=\"token operator\">=</span> <span class=\"token string\">'api.fanyi.baidu.com'</span>\nresource_path <span class=\"token operator\">=</span> <span class=\"token string\">'/api/trans/vip/translate'</span>\nurl <span class=\"token operator\">=</span> uri_scheme <span class=\"token operator\">+</span> <span class=\"token string\">u'://'</span> <span class=\"token operator\">+</span> endpoint <span class=\"token operator\">+</span> resource_path\n\n<span class=\"token comment\"># 保持不变的参数</span>\n_from <span class=\"token operator\">=</span> <span class=\"token string\">'en'</span>\n_to <span class=\"token operator\">=</span> <span class=\"token string\">'zh'</span>\n\n<span class=\"token comment\"># 请求消息参数模板</span>\nreq_param <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string\">\"q\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 请求翻译 query, UTF-8</span>\n    <span class=\"token string\">\"from\"</span><span class=\"token punctuation\">:</span> _from<span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 翻译源语言</span>\n    <span class=\"token string\">\"to\"</span><span class=\"token punctuation\">:</span> _to<span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 翻译目标语言</span>\n    <span class=\"token string\">\"appid\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># APP ID</span>\n    <span class=\"token string\">\"salt\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 随机数</span>\n    <span class=\"token string\">\"sign\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 签名，app_id+q+salt+密钥 的MD5值</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># 响应消息参数模板</span>\nres_param <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string\">\"from\"</span><span class=\"token punctuation\">:</span> _from<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"to\"</span><span class=\"token punctuation\">:</span> _to<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"trans_result\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token string\">\"src\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hello World! This is 1st paragraph.\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"dst\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"你好，世界！这是第一段。\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token string\">\"src\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"This is 2nd paragraph.\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"dst\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"这是第二段。\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>对应的请求消息头headers等内容也可以定义在这里面。</p>\n<p><strong>主程序main.py</strong><br/> 负责扫描用例，执行用例，并生成测试报告，发送邮件。<br/> <img alt=\"main.py\" src=\"https://img-blog.csdnimg.cn/20210314212205206.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmppY2U=,size_16,color_FFFFFF,t_70#pic_center\"/></p>\n<h3><a id=\"_123\"></a>测试执行结果</h3>\n<p>3个脚本，每个脚本2条测试数据，共6个用例。运行main.py，执行测试，测试结果如下，3个失败的是故意修改了测试数据。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210314213527386.png\"/><br/> 红线部分为接口测试时，自动比对的json差异，预期结果为“苹果”，实际结果为“期望值”。</p>\n<p><strong>测试报告</strong>邮件：<br/> <img alt=\"测试报告邮件\" src=\"..\\..\\static\\image\\20210314193759785.png\"/><br/> 测试报告详情：<br/> <img alt=\"测试报告详情\" src=\"..\\..\\static\\image\\20210314193241529.png\"/></p>\n<h1><a id=\"_134\"></a>从零开始搭建项目</h1>\n<h2><a id=\"_135\"></a>一、开发环境搭建</h2>\n<ol><li>开发IDE： pycharm <a href=\"https://www.runoob.com/w3cnote/pycharm-windows-install.html\">安装指导</a></li><li>python： python 3 <a href=\"https://www.runoob.com/python3/python3-install.html\">安装指导</a></li><li>依赖库：anaconda 3（个人比较懒，懒得一个一个库的安装，这个库比较全） <a href=\"https://www.jianshu.com/p/c17ff5910926\">安装指导</a></li></ol>\n<p>pycharm、python、anaconda三者的关系：<a href=\"https://zhuanlan.zhihu.com/p/142657444?utm_source=com.tencent.tim\">添加链接描述</a></p>\n<p>基本上都是直接上对应官网，下载安装。准备好了以后，直接开干。</p>\n<h2><a id=\"_144\"></a>二、新建项目</h2>\n<p>pycharm上新建项目TestFrame，选择好存放目录，并在TestFrame项目下新建各模块。注意除了Log和Report是新建Directory外，其它的都是新建Python Package，因为下面还要放py文件的。</p>\n<p>pycharm上切换项目的python环境为anaconda，File—&gt;Settings—&gt;Project下面切换，如下图：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210320082313889.png\"/></p>\n<h2><a id=\"_151\"></a>三、基础功能实现</h2>\n<h3><a id=\"1_Conf_152\"></a>1. 配置功能实现（Conf）</h3>\n<p>配置功能是项目的基础，所以先实现。在Conf目录下新建2个文件，分别为config.ini和config.py。</p>\n<p>config.ini内容如下：</p>\n<pre><code class=\"prism language-ini\">[sys]\nbase_url = https://www.jd.com\n\n[smtp]\nhost = smtp.163.com\nport = 465\nuser = example@163.com\npasswd = password\n</code></pre>\n<p>暂时先加这么多，后续需要再慢慢添加。</p>\n<p>config.py文件实现config.ini文件的读取。<br/> ini文件读取，python有ConfigParser库可以使用，那就直接用。<br/> <a href=\"https://www.cnblogs.com/ming5218/p/7965973.html\">ConfigParser库传送门</a></p>\n<p>但是每次取值都要用他的方法，比较麻烦，因此对它的方法进行了一个继承和改写，直接将配置文件中所有内容读出来字典形式，方便后续使用。<br/> 代码如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">from</span> configparser <span class=\"token keyword\">import</span> ConfigParser\n<span class=\"token comment\"># 使用相对目录确定文件位置</span>\n_conf_dir <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span>\n_conf_file <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>_conf_dir<span class=\"token punctuation\">,</span> <span class=\"token string\">'config.ini'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 继承ConfigParser，写一个将结果转为dict的方法</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyParser</span><span class=\"token punctuation\">(</span>ConfigParser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">as_dict</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        d <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_sections<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> d<span class=\"token punctuation\">:</span>\n            d<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> d\n\n<span class=\"token comment\"># 读取所有配置，以字典方式输出结果</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">_get_all_conf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    _config <span class=\"token operator\">=</span> MyParser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isfile<span class=\"token punctuation\">(</span>_conf_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            _config<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span>_conf_file<span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'UTF-8'</span><span class=\"token punctuation\">)</span>\n            result <span class=\"token operator\">=</span> _config<span class=\"token punctuation\">.</span>as_dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> OSError<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"Read config file failed: %s\"</span> <span class=\"token operator\">%</span> OSError<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result\n\n<span class=\"token comment\"># 将各配置读取出来，放在变量中，后续其它文件直接引用这个这些变量</span>\nconfig <span class=\"token operator\">=</span> _get_all_conf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsys_cfg <span class=\"token operator\">=</span> config<span class=\"token punctuation\">[</span><span class=\"token string\">'sys'</span><span class=\"token punctuation\">]</span>\nsmtp_cfg <span class=\"token operator\">=</span> config<span class=\"token punctuation\">[</span><span class=\"token string\">'smtp'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys_cfg<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>smtp_cfg<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>smtp_cfg<span class=\"token punctuation\">[</span><span class=\"token string\">'host'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'base_url'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'https://www.jd.com'</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'host'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'smtp.163.com'</span>, <span class=\"token string\">'port'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'465'</span>, <span class=\"token string\">'user'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'example@163.com'</span>, <span class=\"token string\">'passwd'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'password'</span><span class=\"token punctuation\">}</span>\nsmtp.163.com\n</code></pre>\n<p>后续其它文件就可以直接使用 sys_cfg 和 smtp_cfg 这两个字典，以key的方式访问需要的配置内容。</p>\n<h3><a id=\"2_Log_222\"></a>2. 日志功能实现（Log）</h3>\n<p>日志在项目中也是基础功能，所以接着做日志。<br/> python自带logging库，可以定制日志的格式，就直接使用该库实现，没必要自己造。</p>\n<p>先去我们的配置文件中config.ini添加日志相关的配置，这里先定义3个配置：日志级别、日志格式、日志路径。</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">[</span>log<span class=\"token punctuation\">]</span>\nlog_level <span class=\"token operator\">=</span> logging<span class=\"token punctuation\">.</span>DEBUG\nlog_format <span class=\"token operator\">=</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>asctime<span class=\"token punctuation\">)</span>s <span class=\"token operator\">-</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>s <span class=\"token operator\">-</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span>s<span class=\"token punctuation\">[</span>line<span class=\"token punctuation\">:</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>lineno<span class=\"token punctuation\">)</span>d<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>levelname<span class=\"token punctuation\">)</span>s <span class=\"token operator\">-</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>s\nlog_path <span class=\"token operator\">=</span> Log\n</code></pre>\n<p>再在config.py中最后面添加一行代码，把log相关的配置放在一个变量中，好直接使用。</p>\n<pre><code class=\"prism language-python\">log_cfg <span class=\"token operator\">=</span> config<span class=\"token punctuation\">[</span><span class=\"token string\">'log'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>smtp_cfg<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>打印出来看一下结果：</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'log_level'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'logging.DEBUG'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'log_format'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'%(asctime)s - %(name)s - %(filename)s[line:%(lineno)d] - %(levelname)s - %(message)s'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'log_path'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Log'</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p>日志级别有：DEBUG、INFO、WARN、ERROR、FATAL。一般调试都是DEBUG，上线就改为INFO。<br/> 这里简单介绍一下日志格式log_format的内容：</p>\n<table><thead><tr><th>参数</th><th>意义</th><th>说明</th></tr></thead><tbody><tr><td>asctime</td><td>时间</td><td>格式：2021-03-14 09:37:40,258</td></tr><tr><td>name</td><td>logger的名称</td><td>简单理解就是将来把模块名称填到这里，区分是谁打的日志</td></tr><tr><td>filename</td><td>文件名</td><td>哪个文件打印的这条日志</td></tr><tr><td>line</td><td>行号</td><td>哪一行打印的这条日志</td></tr><tr><td>levelname</td><td>级别</td><td>日志的级别，注意是级别的name</td></tr><tr><td>message</td><td>内容</td><td>我们打印的日志内容</td></tr><tr><td>log_path</td><td>日志文件</td><td>保存到哪个日志文件</td></tr></tbody></table>\n<p>再接着在Comm目录下，新建一个Log.py，开始定制日志。定制日志还有几个问题要提前考虑：<br/> 一是存放目录问题，我们这里使用了固定目录，所以问题不大。<br/> 二是日志分割、滚动问题，每天跑持续集成，大量用例生成大量日志，日志堆成山。如果觉得日志有用呢，就搞个ELK把日志取走存放起来做分析。如果觉得日志没用呢，保存几天后就删除掉。无论怎么讲，都要实现日志的分割和滚动。<br/> 幸好你想到的大佬们早就想到了，logging模块就有这个功能，只要配置一下就可以了。</p>\n<p>下面开搞，引入logging库，把项目的根路径取出来，把上面config.ini中的日志配置取过来，最后拼接好日志文件存放的绝对路径：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> logging\n<span class=\"token keyword\">from</span> Conf<span class=\"token punctuation\">.</span>Config <span class=\"token keyword\">import</span> log_cfg\n\n_BaseHome <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>abspath<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n_log_level <span class=\"token operator\">=</span> <span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span>log_cfg<span class=\"token punctuation\">[</span><span class=\"token string\">'log_level'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n_log_path <span class=\"token operator\">=</span> log_cfg<span class=\"token punctuation\">[</span><span class=\"token string\">'log_path'</span><span class=\"token punctuation\">]</span>\n_log_format <span class=\"token operator\">=</span> log_cfg<span class=\"token punctuation\">[</span><span class=\"token string\">'log_format'</span><span class=\"token punctuation\">]</span>\n\n_log_file <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>_BaseHome<span class=\"token punctuation\">,</span> _log_path<span class=\"token punctuation\">,</span> <span class=\"token string\">'log.txt'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>注意上面log_level的写法，这里用了个eval，如果不加这个函数，log_level取过来是个字符串，没法直接用，通过eval执行后，就变成了logging定义的对象了。</p>\n<p>再配置日志，引入TimedRotatingFileHandler这个东东，这是实现滚动日志的。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> logging<span class=\"token punctuation\">.</span>handlers <span class=\"token keyword\">import</span> TimedRotatingFileHandler\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">log_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    logger <span class=\"token operator\">=</span> logging<span class=\"token punctuation\">.</span>getLogger<span class=\"token punctuation\">(</span><span class=\"token string\">'main'</span><span class=\"token punctuation\">)</span>\n    logger<span class=\"token punctuation\">.</span>setLevel<span class=\"token punctuation\">(</span>level<span class=\"token operator\">=</span>_log_level<span class=\"token punctuation\">)</span>\n    formatter <span class=\"token operator\">=</span> logging<span class=\"token punctuation\">.</span>Formatter<span class=\"token punctuation\">(</span>_log_format<span class=\"token punctuation\">)</span>\n\n    handler <span class=\"token operator\">=</span> TimedRotatingFileHandler<span class=\"token punctuation\">(</span>filename<span class=\"token operator\">=</span>_log_file<span class=\"token punctuation\">,</span> when<span class=\"token operator\">=</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">,</span> interval<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> backupCount<span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n    handler<span class=\"token punctuation\">.</span>setLevel<span class=\"token punctuation\">(</span>_log_level<span class=\"token punctuation\">)</span>\n    handler<span class=\"token punctuation\">.</span>setFormatter<span class=\"token punctuation\">(</span>formatter<span class=\"token punctuation\">)</span>\n    logger<span class=\"token punctuation\">.</span>addHandler<span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span>\n\n    console <span class=\"token operator\">=</span> logging<span class=\"token punctuation\">.</span>StreamHandler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span>setLevel<span class=\"token punctuation\">(</span>_log_level<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span>setFormatter<span class=\"token punctuation\">(</span>formatter<span class=\"token punctuation\">)</span>\n    logger<span class=\"token punctuation\">.</span>addHandler<span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>这个日志里面，加了两个输出，handler用于向日志文件打印日志，console 用于向终端打印日志，两个的定义方式不同。<br/> TimedRotatingFileHandler的参数简介：</p>\n<table><thead><tr><th>参数</th><th>意义</th><th>说明</th></tr></thead><tbody><tr><td>filename</td><td>日志文件</td><td>没啥好说的</td></tr><tr><td>when</td><td>切割条件</td><td>按周(W)、天(D)、时(H)、分(M)、秒(S)切割</td></tr><tr><td>interval</td><td>间隔</td><td>就是几个when切割一次。when是W，interval是3的话就代表3周切割一次</td></tr><tr><td>backupCount</td><td>日志备份数量</td><td>就是保留几个日志文件，起过这个数量，就把最早的删除掉，从而滚动删除</td></tr></tbody></table>\n<p>我这里配置的是每天生成1个日志文件，保留7天的日志。</p>\n<p>日志就做好了，试一下效果。</p>\n<pre><code class=\"prism language-python\">log_init<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nlogger <span class=\"token operator\">=</span> logging<span class=\"token punctuation\">.</span>getLogger<span class=\"token punctuation\">(</span><span class=\"token string\">'main'</span><span class=\"token punctuation\">)</span>\nlogger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">'log test----------'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"prism language-python\"><span class=\"token number\">2021</span><span class=\"token operator\">-</span><span class=\"token number\">03</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">21</span><span class=\"token punctuation\">:</span><span class=\"token number\">53</span><span class=\"token punctuation\">:</span><span class=\"token number\">41</span><span class=\"token punctuation\">,</span><span class=\"token number\">972</span> <span class=\"token operator\">-</span> main <span class=\"token operator\">-</span> Log<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">[</span>line<span class=\"token punctuation\">:</span><span class=\"token number\">49</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> INFO <span class=\"token operator\">-</span> log test<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n</code></pre>\n<p>其它文件使用日志：<br/> 先在main.py里面引入这个log_init()，在最开始的时候初始化一下，日志就配置好了。<br/> 再在各个要使用日志的文件中，直接按下面这种方式使用：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> logging\nlogger <span class=\"token operator\">=</span> logging<span class=\"token punctuation\">.</span>getLogger<span class=\"token punctuation\">(</span><span class=\"token string\">'main.jd'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>注意各个模块自己getLogger的时候，直接main后面加上“.模块名”，就能使用同一个logger区分模块了。</p>\n<p>到这里日志功能就完成了。</p>\n<p>顺手做个截图的功能，供大家使用。截图可以直接在用例里面用selenium提供的截图功能，也可以自己做一个公共的。下面是用PIL里面的功能做的截图。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> ImageGrab\n\n<span class=\"token comment\"># 先定义截图文件的存放路径，这里在Log目录下建个Screen目录，按天存放截图</span>\n_today <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%Y%m%d\"</span><span class=\"token punctuation\">)</span>\n_screen_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>_BaseHome<span class=\"token punctuation\">,</span> _log_path<span class=\"token punctuation\">,</span> <span class=\"token string\">'Screen'</span><span class=\"token punctuation\">,</span> _today<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#再使用PIL的ImageGrab实现截图</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">screen</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    t <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    png <span class=\"token operator\">=</span> ImageGrab<span class=\"token punctuation\">.</span>grab<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span>_screen_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        os<span class=\"token punctuation\">.</span>makedirs<span class=\"token punctuation\">(</span>_screen_path<span class=\"token punctuation\">)</span>\n    image_name <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>_screen_path<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n    png<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string\">'%s_%s.png'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>image_name<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 文件名后面加了个时间戳，避免重名</span>\n</code></pre>\n<p>运行这个方法就能截图了，大功告成。截图文件其实也需要一个滚动删除，后面有时间再写吧。</p>\n<h3><a id=\"3_EXCELdata_357\"></a>3. 读取EXCEL实现（data）</h3>\n<p>接着写一个读取EXCEL文件数据的功能吧，这个项目里面主要是用来读测试数据，以实现数据驱动。<br/> python读取excel数据，我看大家都喜欢用xlrd和xlwt，还有用openpyxl的，对于我这种懒人来讲，都太麻烦了。<br/> 我们用pandas来干，一句话的事情，搞那么多干吗，用python就是要快。</p>\n<p>在Comm目录下，新建一个data.py，专门来处理数据。引入pandas，直接用pandas的read_excel读excel，而且支持它原始的其它参数，只是最后将结果转了字典，方便使用：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">read_excel</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    data_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        data <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_excel<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        data_dict <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>to_dict<span class=\"token punctuation\">(</span><span class=\"token string\">'records'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> data_dict\n</code></pre>\n<p>随便放一个excel在同一个目录下，填上数据，试一下效果。excel里面2页数据，Sheet1如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210316211152774.png\"/><br/> Sheet2如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210316211227943.png\"/><br/> 调用我们写好的方法，打印数据：</p>\n<pre><code class=\"prism language-python\">sheet1 <span class=\"token operator\">=</span> read_excel<span class=\"token punctuation\">(</span><span class=\"token string\">'baidu_fanyi.xlsx'</span><span class=\"token punctuation\">)</span>\nsheet2 <span class=\"token operator\">=</span> read_excel<span class=\"token punctuation\">(</span><span class=\"token string\">'baidu_fanyi.xlsx'</span><span class=\"token punctuation\">,</span> sheet_name<span class=\"token operator\">=</span><span class=\"token string\">'Sheet2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sheet1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sheet2<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>运行结果如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'req.q'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'计算机\\n计算机'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'req.from'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'zh'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'req.to'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'en'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'res.from'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'zh'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'res.to'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'en'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'res.trans_result.0.src'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'计算机'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'res.trans_result.0.dst'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'computer'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'res.trans_result.1.src'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'计算机'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'res.trans_result.1.dst'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'computer'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'req.q'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'computer\\nexpected value'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'req.from'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'en'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'req.to'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'zh'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'res.from'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'en'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'res.to'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'zh'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'res.trans_result.0.src'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'computer'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'res.trans_result.0.dst'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'计算机'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'res.trans_result.1.src'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'expected value'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'res.trans_result.1.dst'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'苹果'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'req.q'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'计算机'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'req.from'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'zh'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'req.to'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'en'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'res.from'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'zh'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'res.to'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'en'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n<span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'req.q'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'computer'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'req.from'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'en'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'req.to'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'zh'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'res.from'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'en'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'res.to'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'zh'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p>每页数据都读出来了，而且每一行都是字典形式，直接通过key就可以方便的使用。</p>\n<p>pandas还能直接计算数据，如通过几个列算加密签名，写动态cookie等，使用方法也很简单。比如在数据中增加一列sign， 让它简单等于 req.from列 + ‘.aaaa.’ + req.to列，给大家演示一下。</p>\n<pre><code class=\"prism language-python\">data <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_excel<span class=\"token punctuation\">(</span><span class=\"token string\">'baidu_fanyi.xlsx'</span><span class=\"token punctuation\">)</span>\ndata<span class=\"token punctuation\">[</span><span class=\"token string\">'sign'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">\"req.from\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token string\">'.aaaaa.'</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">\"req.to\"</span><span class=\"token punctuation\">]</span>\ndata_dict <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>to_dict<span class=\"token punctuation\">(</span><span class=\"token string\">'records'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data_dict<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'req.q'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'计算机\\n计算机'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'req.from'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'zh'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'req.to'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'en'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'res.from'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'zh'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'res.to'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'en'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'res.trans_result.0.src'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'计算机'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'res.trans_result.0.dst'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'computer'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'res.trans_result.1.src'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'计算机'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'res.trans_result.1.dst'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'computer'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sign'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'zh.aaaaa.en'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n<span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'req.q'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'computer\\nexpected value'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'req.from'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'en'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'req.to'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'zh'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'res.from'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'en'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'res.to'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'zh'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'res.trans_result.0.src'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'computer'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'res.trans_result.0.dst'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'计算机'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'res.trans_result.1.src'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'expected value'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'res.trans_result.1.dst'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'苹果'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sign'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'en.aaaaa.zh'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n\n</code></pre>\n<p>我们可以看到多了一列sign，值就是自动根据每一行的数据算出来的，这对于我们数据驱动来讲，去计算一些动态值非常有用。我这里没有用到动态的，只是读而已。大家如果要计算，就要自己写计算方法。</p>\n<p>pandas还支持直接读各种主流数据库，后面扩展也很方便，我们一直都用它。</p>\n<h3><a id=\"4_Email_419\"></a>4. 邮件发送实现（Email）</h3>\n<p>实现邮件功能，用于发送测试报告。使用python的smtplib模块实现。</p>\n<p>先在Conf目录下的config.ini中添加好邮件相关的配置：</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">[</span>smtp<span class=\"token punctuation\">]</span>\nhost <span class=\"token operator\">=</span> smtp<span class=\"token punctuation\">.</span><span class=\"token number\">163.</span>com\nport <span class=\"token operator\">=</span> <span class=\"token number\">465</span>\nuser <span class=\"token operator\">=</span> example@<span class=\"token number\">163.</span>com\npasswd <span class=\"token operator\">=</span> password\n\n<span class=\"token punctuation\">[</span>email<span class=\"token punctuation\">]</span>\nsender <span class=\"token operator\">=</span> example@<span class=\"token number\">163.</span>com\nreceivers <span class=\"token operator\">=</span> example@qq<span class=\"token punctuation\">.</span>com<span class=\"token punctuation\">,</span> example@<span class=\"token number\">163.</span>com\n</code></pre>\n<p>再在Config.py中将它们取到变量中放好：</p>\n<pre><code class=\"prism language-python\">smtp_cfg <span class=\"token operator\">=</span> config<span class=\"token punctuation\">[</span><span class=\"token string\">'smtp'</span><span class=\"token punctuation\">]</span>\nemail_cfg <span class=\"token operator\">=</span> config<span class=\"token punctuation\">[</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p>然后在Comm目录下新建Email.py，开始撸代码。邮件支持了定义主题、正文和多个附件，控制了单个附件大小和附件总数。代码如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> smtplib\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> logging\n<span class=\"token keyword\">from</span> email<span class=\"token punctuation\">.</span>mime<span class=\"token punctuation\">.</span>text <span class=\"token keyword\">import</span> MIMEText\n<span class=\"token keyword\">from</span> email<span class=\"token punctuation\">.</span>mime<span class=\"token punctuation\">.</span>application <span class=\"token keyword\">import</span> MIMEApplication\n<span class=\"token keyword\">from</span> email<span class=\"token punctuation\">.</span>mime<span class=\"token punctuation\">.</span>multipart <span class=\"token keyword\">import</span> MIMEMultipart\n<span class=\"token keyword\">from</span> email<span class=\"token punctuation\">.</span>header <span class=\"token keyword\">import</span> Header\n<span class=\"token keyword\">from</span> Conf<span class=\"token punctuation\">.</span>Config <span class=\"token keyword\">import</span> smtp_cfg<span class=\"token punctuation\">,</span> email_cfg\n\n_FILESIZE <span class=\"token operator\">=</span> <span class=\"token number\">20</span>  <span class=\"token comment\"># 单位M， 单个附件大小</span>\n_FILECOUNT <span class=\"token operator\">=</span> <span class=\"token number\">10</span>  <span class=\"token comment\"># 附件个数</span>\n_smtp_cfg <span class=\"token operator\">=</span> smtp_cfg\n_email_cfg <span class=\"token operator\">=</span> email_cfg\n_logger <span class=\"token operator\">=</span> logging<span class=\"token punctuation\">.</span>getLogger<span class=\"token punctuation\">(</span><span class=\"token string\">'main.email'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Email</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> subject<span class=\"token punctuation\">,</span> context<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> attachment<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>subject <span class=\"token operator\">=</span> subject\n        self<span class=\"token punctuation\">.</span>context <span class=\"token operator\">=</span> context\n        self<span class=\"token punctuation\">.</span>attachment <span class=\"token operator\">=</span> attachment\n        self<span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> MIMEMultipart<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>_message_init<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_message_init</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">[</span><span class=\"token string\">'subject'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Header<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 邮件标题</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid subject\"</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">[</span><span class=\"token string\">'from'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _email_cfg<span class=\"token punctuation\">[</span><span class=\"token string\">'sender'</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># from</span>\n        self<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">[</span><span class=\"token string\">'to'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _email_cfg<span class=\"token punctuation\">[</span><span class=\"token string\">'receivers'</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># to</span>\n\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>MIMEText<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">,</span> <span class=\"token string\">'html'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 邮件正文内容</span>\n        <span class=\"token comment\"># 邮件附件</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>attachment<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>attachment<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>_attach<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>attachment<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>attachment<span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n                <span class=\"token keyword\">for</span> each <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>attachment<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">if</span> count <span class=\"token operator\">&lt;=</span> _FILECOUNT<span class=\"token punctuation\">:</span>\n                        self<span class=\"token punctuation\">.</span>_attach<span class=\"token punctuation\">(</span>each<span class=\"token punctuation\">)</span>\n                        count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                        _logger<span class=\"token punctuation\">.</span>warning<span class=\"token punctuation\">(</span><span class=\"token string\">'Attachments is more than '</span><span class=\"token punctuation\">,</span> _FILECOUNT<span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">break</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_attach</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isfile<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>getsize<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> _FILESIZE <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">:</span>\n            attach <span class=\"token operator\">=</span> MIMEApplication<span class=\"token punctuation\">(</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            attach<span class=\"token punctuation\">.</span>add_header<span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Disposition'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'attachment'</span><span class=\"token punctuation\">,</span> filename<span class=\"token operator\">=</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>basename<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            attach<span class=\"token punctuation\">[</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'application/octet-stream'</span>\n            self<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>attach<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            _logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string\">'The attachment is not exist or more than %sM: %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>_FILESIZE<span class=\"token punctuation\">,</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">send_mail</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        s <span class=\"token operator\">=</span> smtplib<span class=\"token punctuation\">.</span>SMTP_SSL<span class=\"token punctuation\">(</span>_smtp_cfg<span class=\"token punctuation\">[</span><span class=\"token string\">'host'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>_smtp_cfg<span class=\"token punctuation\">[</span><span class=\"token string\">'port'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        result <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            s<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_smtp_cfg<span class=\"token punctuation\">[</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>_smtp_cfg<span class=\"token punctuation\">[</span><span class=\"token string\">'passwd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            s<span class=\"token punctuation\">.</span>sendmail<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_smtp_cfg<span class=\"token punctuation\">[</span><span class=\"token string\">'sender'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>_smtp_cfg<span class=\"token punctuation\">[</span><span class=\"token string\">'receivers'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">.</span>as_string<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> smtplib<span class=\"token punctuation\">.</span>SMTPException <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            result <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n            _logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string\">'Send mail failed'</span><span class=\"token punctuation\">,</span> exc_info<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n            s<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> result\n</code></pre>\n<p>邮件初始化发送时的调用方式如下：</p>\n<pre><code class=\"prism language-python\">mail <span class=\"token operator\">=</span> Email<span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span>\nsend <span class=\"token operator\">=</span> mail<span class=\"token punctuation\">.</span>send_mail<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>send<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>返回结果为True则发送成功，否则发送失败。</p>\n<h2><a id=\"WEB_UI_526\"></a>四、WEB UI自动化</h2>\n<p>WEB UI自动化，采用 selenium来完成。通过PO对象、测试数据、业务逻辑三者分离的方式来实现。<br/> 另外一个主旨是尽量让测试人员使用selenium原生的各种方法，而不要做过多封装。原因很简单，不要让测试人员来学这个框架，而是去学selenium，这样以后他出去换工作才有饭吃。如果过度封装，就会让测试人员来学这个框架，他以后出去selenium都不会用，这不是害了别人么。框架的目的只是把对象、数据、业务逻辑三者驱动起来，让测试人员工作起来更快。</p>\n<p>我们以京东搜索爬虫为例来看如何构建这三者的关系：在京东主页面，搜索“电脑”，再获取搜索结果，保存。</p>\n<h3><a id=\"1_PO_532\"></a>1. 页面PO对象配置</h3>\n<p>打开京东商城主页，找到搜索框元素、和搜索按钮元素，分别确定他们的定位方式，以及元素对应的操作。<br/> 然后建立这个页面对象，在Page下新建一个名为\"jd\"的python package，再在这个package下新建一个jd.py，用来定义京东商城的主页面对象。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> selenium<span class=\"token punctuation\">.</span>webdriver<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>by <span class=\"token keyword\">import</span> By\n\n\npage_url <span class=\"token operator\">=</span> <span class=\"token string\">'https://www.jd.com'</span>\n\nelements <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'search_ipt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'desc'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'搜索框点击'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'by'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>By<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> <span class=\"token string\">u'key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ec'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'presence_of_element_located'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'action'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'send_keys()'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'search_btn'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'desc'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'搜索按钮点击'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'by'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>By<span class=\"token punctuation\">.</span>CLASS_NAME<span class=\"token punctuation\">,</span> <span class=\"token string\">u'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ec'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'presence_of_element_located'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'action'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'click()'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n</code></pre>\n<p>name: 每个元素+操作的唯一标识。一个元素可能由于操作不同，而要定义多个，但大部分只要定义一个。<br/> desc:元素+操作的描述。<br/> by:元素的定位方式，使用selenium的原生定位方式，不自己定义封装。<br/> ec: 等待元素出现的方式，这个暂时未用。<br/> action:元素的对应操作。使用原生的selenium动作方法，不自己定义封装。<br/> 京东商城主页面现在只用到这两个，就只定义这两个。</p>\n<p>搜索结果页面，定义如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> selenium<span class=\"token punctuation\">.</span>webdriver<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>by <span class=\"token keyword\">import</span> By\n\npage_url <span class=\"token operator\">=</span> <span class=\"token string\">'https://search.jd.com/'</span>\n\nelements <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'result_list'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'desc'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'结果列表'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'by'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>By<span class=\"token punctuation\">.</span>CLASS_NAME<span class=\"token punctuation\">,</span> <span class=\"token string\">u'gl-item'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ec'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'presence_of_all_elements_located'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'action'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'desc'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'价格'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'by'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>By<span class=\"token punctuation\">.</span>XPATH<span class=\"token punctuation\">,</span> <span class=\"token string\">u\".//div[@class='p-price']/strong/i\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ec'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'presence_of_element_located'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'action'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'pname'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'desc'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'描述'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'by'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>By<span class=\"token punctuation\">.</span>XPATH<span class=\"token punctuation\">,</span> <span class=\"token string\">u\".//div[@class='p-name p-name-type-2']/a/em\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ec'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'presence_of_element_located'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'action'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n</code></pre>\n<h3><a id=\"2_basePage_568\"></a>2. 实现basePage基类</h3>\n<p>basePage基类的实现思想是不做过多的封装，尽量让测试人员直接使用selenium原装的方法，而不像其它框架一样什么都封装在这里面。<br/> 所以我对basePage的定义是：根据业务逻辑（测试用例）指定的元素，输入的数据，协助它完成元素定位和操作，仅此而已。<br/> 当然如果去封装各种东西也是可以的，直接在里面加就行了。</p>\n<p>在Page目录下，新建basePage.py，开始撸代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> selenium<span class=\"token punctuation\">.</span>webdriver<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>by <span class=\"token keyword\">import</span> By\n<span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> importlib\n<span class=\"token keyword\">import</span> logging\n\nSimpleActions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'clear()'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'send_keys()'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'click()'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'submit()'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'size'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'is_displayed()'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'get_attribute()'</span><span class=\"token punctuation\">]</span>\nlogger <span class=\"token operator\">=</span> logging<span class=\"token punctuation\">.</span>getLogger<span class=\"token punctuation\">(</span><span class=\"token string\">'main.page'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Page</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> driver<span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>driver <span class=\"token operator\">=</span> driver\n        self<span class=\"token punctuation\">.</span>page <span class=\"token operator\">=</span> page\n        self<span class=\"token punctuation\">.</span>elements <span class=\"token operator\">=</span> get_page_elements<span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>by <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>action <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_get_page_elem</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 获取定位元素的 by，以及操作action</span>\n        <span class=\"token keyword\">for</span> each <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>elements<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> each<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> elem<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>by <span class=\"token operator\">=</span> each<span class=\"token punctuation\">[</span><span class=\"token string\">'by'</span><span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">if</span> <span class=\"token string\">'action'</span> <span class=\"token keyword\">in</span> each <span class=\"token keyword\">and</span> each<span class=\"token punctuation\">[</span><span class=\"token string\">'action'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>action <span class=\"token operator\">=</span> each<span class=\"token punctuation\">[</span><span class=\"token string\">'action'</span><span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>action <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">oper_elem</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> elem<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_get_page_elem<span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span>\n        cmd <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_selenium_cmd<span class=\"token punctuation\">(</span><span class=\"token string\">'find_element'</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">oper_elems</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> elem<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_get_page_elem<span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span>\n        cmd <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_selenium_cmd<span class=\"token punctuation\">(</span><span class=\"token string\">'find_elements'</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_selenium_cmd</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> find_type<span class=\"token operator\">=</span><span class=\"token string\">'find_element'</span><span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 拼接 selenium 查找命令， 查找单个元素时find_type为'find_element'，多个元素时为'find_elements'</span>\n        cmd <span class=\"token operator\">=</span> <span class=\"token string\">'self.driver.'</span> <span class=\"token operator\">+</span> find_type <span class=\"token operator\">+</span> <span class=\"token string\">'(*self.by)'</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>action<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>action <span class=\"token keyword\">in</span> SimpleActions<span class=\"token punctuation\">:</span>\n                cmd <span class=\"token operator\">=</span> cmd <span class=\"token operator\">+</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>action\n                <span class=\"token keyword\">if</span> args<span class=\"token punctuation\">:</span>\n                    cmd <span class=\"token operator\">=</span> cmd<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">'args'</span> <span class=\"token operator\">+</span> <span class=\"token string\">')'</span>\n        <span class=\"token keyword\">return</span> cmd\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_page_elements</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"动态加载页面定义文件，获取文件中定义的元素列表elements\"\"\"</span>\n    elements <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    <span class=\"token keyword\">if</span> page<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            m <span class=\"token operator\">=</span> importlib<span class=\"token punctuation\">.</span>import_module<span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span>\n            elements <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span>elements\n        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string\">'error info : %s'</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> elements\n</code></pre>\n<p>这里面主要的只包含3个方法，一个是动态加载指定的PO对象获取元素列表，一个是在获取的元素列表中去找到当前要操作的元素，最后一个就是拼接原生的selenium命令，将测试数据插入到动作里面去。<br/> 其它的就简单了，直接调用selenium运行拼接出来的命令，把结果返回出去。<br/> 这里要注意的是，有些复杂的selenium操作，不能这么简单的拼命令，要特殊处理，这里暂时没弄；简单的命令，也没有列全。后面再慢慢加。</p>\n<h3><a id=\"3__640\"></a>3. 写业务测试用例</h3>\n<p>下面开始写测试用例。<br/> 在Testcase目录下，新建一个python package：Model1。在Model1下面再建一个目录：Testdata，用于放测试数据；建一个python package：Case，用于放用例脚本。目录结构如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210319195447903.png\"/></p>\n<p><strong>准备测试数据：</strong><br/> 准备一份excel数据（test_jd_desktop.xlsx），存放在Model1/Testdata/jd下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210319194635733.png\"/><br/> keyword:搜索的关键字<br/> count:搜索结果总数，只抓了一页，应该是60个</p>\n<p><strong>实现业务用例：</strong><br/> 在Model1/Case/jd下新建一个文件：test_jd_desktop.py，开始写用例脚本。<br/> 用例使用unittest结合DDT来实现，具体代码如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> unittest\n<span class=\"token keyword\">import</span> ddt\n<span class=\"token keyword\">import</span> logging\n<span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver\n<span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep\n<span class=\"token keyword\">from</span> Page<span class=\"token punctuation\">.</span>basePage <span class=\"token keyword\">import</span> Page\n<span class=\"token keyword\">from</span> Comm<span class=\"token punctuation\">.</span>Log <span class=\"token keyword\">import</span> screen\n<span class=\"token keyword\">from</span> Comm<span class=\"token punctuation\">.</span>data <span class=\"token keyword\">import</span> read_excel\n<span class=\"token keyword\">from</span> main <span class=\"token keyword\">import</span> TestCasePath\n\nlogger <span class=\"token operator\">=</span> logging<span class=\"token punctuation\">.</span>getLogger<span class=\"token punctuation\">(</span><span class=\"token string\">'main.jd'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 读取测试数据</span>\n<span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>TestCasePath<span class=\"token punctuation\">,</span> <span class=\"token string\">'Model1/Testdata/jd/test_jd_desktop.xlsx'</span><span class=\"token punctuation\">)</span>\ntest_data <span class=\"token operator\">=</span> read_excel<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span>\n\nPO_jd <span class=\"token operator\">=</span> <span class=\"token string\">'Page.jd.jd'</span>\nPO_search <span class=\"token operator\">=</span> <span class=\"token string\">'Page.jd.search_jd'</span>\n\n<span class=\"token decorator annotation punctuation\">@ddt<span class=\"token punctuation\">.</span>ddt</span>  <span class=\"token comment\"># 数据驱动</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestJdSearchDesktop</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"京东搜索测试\"\"\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>driver <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        self<span class=\"token punctuation\">.</span>result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token decorator annotation punctuation\">@ddt<span class=\"token punctuation\">.</span>data</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>test_data<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 数据驱动传具体数据</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">testJdSearchDesktop</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> test_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"京东搜索测试--电脑\"\"\"</span>\n        url <span class=\"token operator\">=</span> <span class=\"token string\">'https://www.jd.com'</span>\n        keyword <span class=\"token operator\">=</span> test_data<span class=\"token punctuation\">[</span><span class=\"token string\">'keyword'</span><span class=\"token punctuation\">]</span>\n        wait <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">.</span>implicitly_wait<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 实例化jd主页面</span>\n            jd <span class=\"token operator\">=</span> Page<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">,</span> PO_jd<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 实例化jd搜索结果页面</span>\n            jd_search <span class=\"token operator\">=</span> Page<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">,</span> PO_search<span class=\"token punctuation\">)</span>\n            wait\n            <span class=\"token comment\"># jd主页面的搜索框元素中输入关键字</span>\n            jd<span class=\"token punctuation\">.</span>oper_elem<span class=\"token punctuation\">(</span><span class=\"token string\">'search_ipt'</span><span class=\"token punctuation\">,</span> keyword<span class=\"token punctuation\">)</span>\n            wait\n            <span class=\"token comment\"># 操作jd主页面的搜索按钮元素</span>\n            jd<span class=\"token punctuation\">.</span>oper_elem<span class=\"token punctuation\">(</span><span class=\"token string\">'search_btn'</span><span class=\"token punctuation\">)</span>\n\n            sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">.</span>execute_script<span class=\"token punctuation\">(</span><span class=\"token string\">\"window.scrollTo(0, document.body.scrollHeight);\"</span><span class=\"token punctuation\">)</span>\n            sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n\t\t\t<span class=\"token comment\"># jd搜索结果页面，获取结果列表</span>\n            lis <span class=\"token operator\">=</span> jd_search<span class=\"token punctuation\">.</span>oper_elems<span class=\"token punctuation\">(</span><span class=\"token string\">'result_list'</span><span class=\"token punctuation\">)</span>\n\n\t\t\t<span class=\"token comment\"># 在取到的结果列表中，循环获取商品价格和商品名称，结果存EXCEL就没写了</span>\n            <span class=\"token keyword\">for</span> each <span class=\"token keyword\">in</span> lis<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                page_each <span class=\"token operator\">=</span> Page<span class=\"token punctuation\">(</span>each<span class=\"token punctuation\">,</span> PO_search<span class=\"token punctuation\">)</span>\n                price <span class=\"token operator\">=</span> page_each<span class=\"token punctuation\">.</span>oper_elem<span class=\"token punctuation\">(</span><span class=\"token string\">'price'</span><span class=\"token punctuation\">)</span>\n                name <span class=\"token operator\">=</span> page_each<span class=\"token punctuation\">.</span>oper_elem<span class=\"token punctuation\">(</span><span class=\"token string\">'pname'</span><span class=\"token punctuation\">)</span>\n                self<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n            sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> E<span class=\"token punctuation\">:</span>\n            logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string\">'error info : %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>E<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            screen<span class=\"token punctuation\">(</span>test_data<span class=\"token punctuation\">[</span><span class=\"token string\">'keyword'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token comment\"># 判断是不是取到了60个商品</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>test_data<span class=\"token punctuation\">[</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">.</span>quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"_733\"></a>五、实现主程序</h2>\n<p>主程序的主要作用是 组织用例，执行用例，生成报告，发送测试报告邮件。<br/> 组织用例和执行用例都直接用unittest；<br/> 生成报告，采用BeautifulReport；<br/> 下面开始撸main.py的代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> unittest\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> logging\n<span class=\"token keyword\">from</span> Comm<span class=\"token punctuation\">.</span>Email <span class=\"token keyword\">import</span> Email\n<span class=\"token keyword\">from</span> Comm<span class=\"token punctuation\">.</span>Log <span class=\"token keyword\">import</span> log_init\n<span class=\"token keyword\">from</span> BeautifulReport <span class=\"token keyword\">import</span> BeautifulReport\n\n<span class=\"token comment\"># 定义各目录</span>\nProjectHome <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>realpath<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\nPageObjectPath <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>ProjectHome<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Page\"</span><span class=\"token punctuation\">)</span>\nTestCasePath <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>ProjectHome<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Testcase\"</span><span class=\"token punctuation\">)</span>\nReportPath <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>ProjectHome<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Report\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#对测试结果关键信息进行汇总，做为邮件正文</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">summary_format</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    summary <span class=\"token operator\">=</span> <span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">u\"&lt;p&gt;          测试结果汇总信息                &lt;/p&gt;\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span> \\\n                 <span class=\"token string\">u\"&lt;p&gt; 开始时间: \"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">[</span><span class=\"token string\">'beginTime'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">u\" &lt;/p&gt;\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span> \\\n                 <span class=\"token string\">u\"&lt;p&gt; 运行时间: \"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">[</span><span class=\"token string\">'totalTime'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">u\" &lt;/p&gt;\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span> \\\n                 <span class=\"token string\">u\"&lt;p&gt; 执行用例数: \"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span><span class=\"token string\">'testAll'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">u\" &lt;/p&gt;\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span> \\\n                 <span class=\"token string\">u\"&lt;p&gt; 通过用例数: \"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span><span class=\"token string\">'testPass'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">u\" &lt;/p&gt;\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span> \\\n                 <span class=\"token string\">u\"&lt;p&gt; 失败用例数: \"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span><span class=\"token string\">'testFail'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">u\" &lt;/p&gt;\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span> \\\n                 <span class=\"token string\">u\"&lt;p&gt; 忽略用例数: \"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span><span class=\"token string\">'testSkip'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">u\" &lt;/p&gt;\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span>\n    <span class=\"token keyword\">return</span> summary\n\n<span class=\"token comment\"># 发送邮件</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">send_email</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    title <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%Y-%m-%d %H:%M:%S\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'自动化测试结果'</span>\n    mail <span class=\"token operator\">=</span> Email<span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span>\n    send <span class=\"token operator\">=</span> mail<span class=\"token punctuation\">.</span>send_mail<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> send<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'测试报告邮件发送成功'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'测试报告邮件发送失败'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 加载测试用例</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_suite</span><span class=\"token punctuation\">(</span>case_path<span class=\"token operator\">=</span>TestCasePath<span class=\"token punctuation\">,</span> rule<span class=\"token operator\">=</span><span class=\"token string\">\"test_*.py\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"加载所有的测试用例\"\"\"</span>\n    unittest_suite <span class=\"token operator\">=</span> unittest<span class=\"token punctuation\">.</span>TestSuite<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    discover <span class=\"token operator\">=</span> unittest<span class=\"token punctuation\">.</span>defaultTestLoader<span class=\"token punctuation\">.</span>discover<span class=\"token punctuation\">(</span>case_path<span class=\"token punctuation\">,</span> pattern<span class=\"token operator\">=</span>rule<span class=\"token punctuation\">,</span> top_level_dir<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> each <span class=\"token keyword\">in</span> discover<span class=\"token punctuation\">:</span>\n        unittest_suite<span class=\"token punctuation\">.</span>addTests<span class=\"token punctuation\">(</span>each<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> unittest_suite\n\n<span class=\"token comment\"># 执行用例，生成测试报告，并返回报告附件路径、邮件正文内容</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">suite_run</span><span class=\"token punctuation\">(</span>unittest_suite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"执行所有的用例, 并把结果写入测试报告\"\"\"</span>\n    run_result <span class=\"token operator\">=</span> BeautifulReport<span class=\"token punctuation\">(</span>unittest_suite<span class=\"token punctuation\">)</span>\n\n    now <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%Y%m%d%H%M%S\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    filename <span class=\"token operator\">=</span> now <span class=\"token operator\">+</span> <span class=\"token string\">'_report.html'</span>\n    run_result<span class=\"token punctuation\">.</span>report<span class=\"token punctuation\">(</span>filename<span class=\"token operator\">=</span>filename<span class=\"token punctuation\">,</span> description<span class=\"token operator\">=</span>now<span class=\"token punctuation\">,</span> report_dir<span class=\"token operator\">=</span>ReportPath<span class=\"token punctuation\">)</span>\n    rpt_summary <span class=\"token operator\">=</span> summary_format<span class=\"token punctuation\">(</span>run_result<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>ReportPath<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rpt_summary\n\n<span class=\"token comment\"># 主程序，加载用例，执行用例，发送邮件</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    suite <span class=\"token operator\">=</span> get_suite<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    report_file<span class=\"token punctuation\">,</span> report_summary <span class=\"token operator\">=</span> suite_run<span class=\"token punctuation\">(</span>suite<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>report_summary<span class=\"token punctuation\">)</span>\n    send_email<span class=\"token punctuation\">(</span>report_file<span class=\"token punctuation\">,</span> report_summary<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>运行主程序，就可以把WEB UI自动化跑起来了。</p>\n<h2><a id=\"API__805\"></a>六、API 自动化</h2>\n<p>API自动化，采用 request库来完成。还是通过PO对象、测试数据、业务逻辑三者分离的方式来实现。<br/> 这里以百度通用翻译接口为例，这个接口对个人用户是免费的，大家可以自己去申请。</p>\n<h3><a id=\"1_API_809\"></a>1. API对象配置</h3>\n<p>在APIs下面新建python package：fanyi，再在fanyi下面建baidu.py。<br/> 将百度通用翻译接口定义在这里面，直接采用大家熟悉的json格式：</p>\n<pre><code class=\"prism language-python\">\n<span class=\"token triple-quoted-string string\">\"\"\"百度通用翻译接口\"\"\"</span> \nAPI_NAME <span class=\"token operator\">=</span> <span class=\"token string\">'fanyi'</span>\n<span class=\"token comment\"># 地址信息</span>\nuri_scheme <span class=\"token operator\">=</span> <span class=\"token string\">'http'</span>\nendpoint <span class=\"token operator\">=</span> <span class=\"token string\">'api.fanyi.baidu.com'</span>\nresource_path <span class=\"token operator\">=</span> <span class=\"token string\">'/api/trans/vip/translate'</span>\nurl <span class=\"token operator\">=</span> uri_scheme <span class=\"token operator\">+</span> <span class=\"token string\">u'://'</span> <span class=\"token operator\">+</span> endpoint <span class=\"token operator\">+</span> resource_path\n\n<span class=\"token comment\"># 保持不变的参数</span>\n_from <span class=\"token operator\">=</span> <span class=\"token string\">'en'</span>\n_to <span class=\"token operator\">=</span> <span class=\"token string\">'zh'</span>\n\n<span class=\"token comment\"># 请求消息参数</span>\nreq_param <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string\">\"q\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 请求翻译 query, UTF-8</span>\n    <span class=\"token string\">\"from\"</span><span class=\"token punctuation\">:</span> _from<span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 翻译源语言</span>\n    <span class=\"token string\">\"to\"</span><span class=\"token punctuation\">:</span> _to<span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 翻译目标语言</span>\n    <span class=\"token string\">\"appid\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># APP ID</span>\n    <span class=\"token string\">\"salt\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 随机数</span>\n    <span class=\"token string\">\"sign\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 签名，appid+q+salt+密钥 的MD5值</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># 响应消息参数</span>\nres_param <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string\">\"from\"</span><span class=\"token punctuation\">:</span> _from<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"to\"</span><span class=\"token punctuation\">:</span> _to<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"trans_result\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token string\">\"src\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hello World! This is 1st paragraph.\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"dst\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"你好，世界！这是第一段。\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token string\">\"src\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"This is 2nd paragraph.\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"dst\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"这是第二段。\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h3><a id=\"2base_api_855\"></a>2.实现base_api基类</h3>\n<p>base_api基类，主要是将数据、API对象、测试用例三者连起来；<br/> 在APIs目录下，新建base_api.py，代码如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> logging\n<span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">import</span> importlib\n<span class=\"token keyword\">import</span> copy\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> unittest\n<span class=\"token keyword\">from</span> hashlib <span class=\"token keyword\">import</span> md5\n<span class=\"token keyword\">from</span> ipaddress <span class=\"token keyword\">import</span> ip_address\n<span class=\"token keyword\">from</span> Comm<span class=\"token punctuation\">.</span>compare <span class=\"token keyword\">import</span> json_compare\n\n\nlogger <span class=\"token operator\">=</span> logging<span class=\"token punctuation\">.</span>getLogger<span class=\"token punctuation\">(</span><span class=\"token string\">'main.api'</span><span class=\"token punctuation\">)</span>\nreq_prefix <span class=\"token operator\">=</span> <span class=\"token string\">'req.'</span>\nres_prefix <span class=\"token operator\">=</span> <span class=\"token string\">'res.'</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">_separate_data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> prefix<span class=\"token operator\">=</span><span class=\"token string\">'req.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    pfx <span class=\"token operator\">=</span> prefix\n    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> key<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span>pfx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            req_key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>pfx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n            result<span class=\"token punctuation\">[</span>req_key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n    <span class=\"token keyword\">return</span> result\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">_get_cmd</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> dict_name<span class=\"token operator\">=</span><span class=\"token string\">'payload'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    separator <span class=\"token operator\">=</span> <span class=\"token string\">'.'</span>\n    cmd <span class=\"token operator\">=</span> dict_name\n    <span class=\"token keyword\">if</span> separator <span class=\"token keyword\">in</span> key<span class=\"token punctuation\">:</span>\n        data_key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>separator<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> each <span class=\"token keyword\">in</span> data_key<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> each<span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                cmd <span class=\"token operator\">=</span> cmd <span class=\"token operator\">+</span> <span class=\"token string\">'['</span> <span class=\"token operator\">+</span> each <span class=\"token operator\">+</span> <span class=\"token string\">']'</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                cmd <span class=\"token operator\">=</span> cmd <span class=\"token operator\">+</span> <span class=\"token string\">'[\\''</span> <span class=\"token operator\">+</span> each <span class=\"token operator\">+</span> <span class=\"token string\">'\\']'</span>\n        cmd <span class=\"token operator\">=</span> cmd <span class=\"token operator\">+</span> <span class=\"token string\">' = value'</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        cmd <span class=\"token operator\">=</span> cmd <span class=\"token operator\">+</span> <span class=\"token string\">'[key] = value'</span>\n    <span class=\"token keyword\">return</span> cmd\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">check_result</span><span class=\"token punctuation\">(</span>unittest_testcase<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 只有x,y完全相同才能通过，任意不同则返回失败。建议自己在用例中做结果检查</span>\n    testcase <span class=\"token operator\">=</span> unittest_testcase\n    diff <span class=\"token operator\">=</span> json_compare<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n    testcase<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseAPI</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>api <span class=\"token operator\">=</span> api\n        self<span class=\"token punctuation\">.</span>api_name <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>url <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n        self<span class=\"token punctuation\">.</span>req_template <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n        self<span class=\"token punctuation\">.</span>res_template <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n        self<span class=\"token punctuation\">.</span>_get_api_param<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_get_api_param</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"动态加载API定义文件，获取文件中定义的API参数\"\"\"</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            m <span class=\"token operator\">=</span> importlib<span class=\"token punctuation\">.</span>import_module<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>api_name <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span>API_NAME\n            self<span class=\"token punctuation\">.</span>url <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span>url\n            self<span class=\"token punctuation\">.</span>req_template <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span>req_param\n            self<span class=\"token punctuation\">.</span>res_template <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span>res_param\n        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string\">'error info : %s'</span> <span class=\"token operator\">%</span> e<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">payload</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        payload <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>deepcopy<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>req_template<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> data<span class=\"token punctuation\">:</span>\n            req_pre <span class=\"token operator\">=</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>api_name<span class=\"token punctuation\">,</span> req_prefix<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            req_data <span class=\"token operator\">=</span> _separate_data<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> req_pre<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> req_data<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                cmd <span class=\"token operator\">=</span> _get_cmd<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token string\">'payload'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">exec</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> payload\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">load_expected</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        expected <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>deepcopy<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>res_template<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> data<span class=\"token punctuation\">:</span>\n            res_pre <span class=\"token operator\">=</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>api_name<span class=\"token punctuation\">,</span> res_prefix<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            res_data <span class=\"token operator\">=</span> _separate_data<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> res_pre<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> res_data<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                cmd <span class=\"token operator\">=</span> _get_cmd<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token string\">'expected'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">exec</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> expected\n\n</code></pre>\n<p>这里面的思路是：</p>\n<ol><li>动态加载API对象，获取API请求参数模板、和响应参数模板；</li><li>payload的时候，从测试数据中，取出API请求相关的数据（以API名.req开头，如fanyi.req.q），填入模板，没有的就用模板数据；</li><li>加载预期结果的时候，从测试数据中，取出API响应相关的数据（以API名.res开头，如fanyi.res.trans_result.0.src），填入模板，没有的就用模板数据。</li><li>提供json比较的方法；</li><li>提供了一个随机handers。</li></ol>\n<p>具体的大家看一下就明白了。想进一步封装的还可以继续封装，比如生成hearders，数据配完了直接发送，取到结果直接比对什么的。但是建议不要过度封装。</p>\n<p>附json比较的方法：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> json_tools\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">json_compare</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    diff <span class=\"token operator\">=</span> json_tools<span class=\"token punctuation\">.</span>diff<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> diff<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> action <span class=\"token keyword\">in</span> diff<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token string\">'add'</span> <span class=\"token keyword\">in</span> action<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'++增加元素:'</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">[</span><span class=\"token string\">'add'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' 值:'</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">[</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">elif</span> <span class=\"token string\">'remove'</span> <span class=\"token keyword\">in</span> action<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--删除元素:'</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">[</span><span class=\"token string\">'remove'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' 值:'</span><span class=\"token punctuation\">,</span>  action<span class=\"token punctuation\">[</span><span class=\"token string\">'prev'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">elif</span> <span class=\"token string\">'replace'</span> <span class=\"token keyword\">in</span> action<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'**修改元素:'</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">[</span><span class=\"token string\">'replace'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' 值:'</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">[</span><span class=\"token string\">'prev'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'--&gt;'</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">[</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> diff\n</code></pre>\n<h3><a id=\"3_978\"></a>3.测试用例</h3>\n<p>在Testcase下建API模块，API模块下建Case和Testdata，分别放用例和数据，目录如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210320000747407.png\"/></p>\n<p><strong>定义测试数据</strong>：<br/> 测试数据需要按一定的格式处理，即每个参数以api名称开头，用“.”连接，然后用res和req来区分响应还是请求，后面就是具体的参数了，多级参数以“.”连接。具体如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210320000904397.png\"/></p>\n<p><strong>测试用例脚本：</strong><br/> 仍然用unittest和ddt来实现。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> unittest\n<span class=\"token keyword\">import</span> ddt\n<span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep\n<span class=\"token keyword\">from</span> Comm<span class=\"token punctuation\">.</span>data <span class=\"token keyword\">import</span> read_excel\n<span class=\"token keyword\">from</span> Comm<span class=\"token punctuation\">.</span>encryption <span class=\"token keyword\">import</span> make_md5\n<span class=\"token keyword\">from</span> main <span class=\"token keyword\">import</span> TestCasePath\n<span class=\"token keyword\">from</span> APIs<span class=\"token punctuation\">.</span>base_api <span class=\"token keyword\">import</span> BaseAPI<span class=\"token punctuation\">,</span> check_result\n\n\n<span class=\"token comment\"># 开通普通个人的百度翻译接口，设置appid和appkey.</span>\napp_id <span class=\"token operator\">=</span> your appid\napp_key <span class=\"token operator\">=</span> your appkey\n\n<span class=\"token comment\"># 获取测试数据</span>\n<span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>TestCasePath<span class=\"token punctuation\">,</span> <span class=\"token string\">'API/TestData/baidu_fanyi.xlsx'</span><span class=\"token punctuation\">)</span>\ntest_data <span class=\"token operator\">=</span> read_excel<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span>\napi <span class=\"token operator\">=</span> <span class=\"token string\">'APIs.fanyi.baidu'</span>\n\n\n<span class=\"token decorator annotation punctuation\">@ddt<span class=\"token punctuation\">.</span>ddt</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestBaiduFanyi</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"百度翻译接口测试\"\"\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>api <span class=\"token operator\">=</span> BaseAPI<span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">)</span>\n\n    <span class=\"token decorator annotation punctuation\">@ddt<span class=\"token punctuation\">.</span>data</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>test_data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_baidu_fanyi</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> test_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"百度翻译接口测试\"\"\"</span>\n        api <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>api\n\n        <span class=\"token comment\"># Build test_data，这是些动态参数，在这里计算</span>\n        test_data<span class=\"token punctuation\">[</span><span class=\"token string\">'fanyi.req.appid'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> app_id\n        salt <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">32768</span><span class=\"token punctuation\">,</span> <span class=\"token number\">65536</span><span class=\"token punctuation\">)</span>\n        test_data<span class=\"token punctuation\">[</span><span class=\"token string\">'fanyi.req.salt'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> salt\n        sign <span class=\"token operator\">=</span> make_md5<span class=\"token punctuation\">(</span>app_id <span class=\"token operator\">+</span> test_data<span class=\"token punctuation\">[</span><span class=\"token string\">'fanyi.req.q'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>salt<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> app_key<span class=\"token punctuation\">)</span>\n        test_data<span class=\"token punctuation\">[</span><span class=\"token string\">'fanyi.req.sign'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sign\n\n        <span class=\"token comment\"># Build request</span>\n        headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'application/x-www-form-urlencoded'</span><span class=\"token punctuation\">}</span>\n        payload <span class=\"token operator\">=</span> api<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">(</span>test_data <span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Send request</span>\n        r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span>payload<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span>\n        result <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        expected <span class=\"token operator\">=</span> api<span class=\"token punctuation\">.</span>load_expected<span class=\"token punctuation\">(</span>test_data<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n        check_result<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 简单的模板验证，大家最好自己写验证。</span>\n\n        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>然后运行主程序，API自动化测试也就可以跑起来了。</p>\n<h2><a id=\"MD5_1048\"></a>补：MD5函数</h2>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> hashlib <span class=\"token keyword\">import</span> md5\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">make_md5</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> md5<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span>encoding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"_1055\"></a>未完待续…</h3>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2021-03-14 21:42:38", "summary": "本自动化测试框架采用的基础来搭建，采用模式、数据驱动的思想，通过来实现自动化，通过来实现接口自动化。移动终端的自动化也可在该框架基础上去构建补充。目录总体框架模式、数据驱动、关键字驱动框架技术选择框架"}