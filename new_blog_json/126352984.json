{"blogid": "126352984", "writerAge": "码龄2年", "writerBlogNum": "161", "writerCollect": "1780", "writerComment": "2232", "writerFan": "6325", "writerGrade": "6级", "writerIntegral": "6450", "writerName": "海底烧烤店ai", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126352984.jpg", "writerRankTotal": "2402", "writerRankWeekly": "15", "writerThumb": "1716", "writerVisitNum": "407096", "blog_read_count": "4797", "blog_time": "已于 2022-09-04 11:28:39 修改", "blog_title": "【JavaScript】巩固JS开发中十个常用功能/案例（11-20）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>🖥️ TypeScript专栏：<a href=\"https://blog.csdn.net/m0_51969330/category_11929325.html\">TypeScript从入门到精通</a><br/> <br/>🖥️ 蓝桥杯真题解析：<a href=\"https://blog.csdn.net/m0_51969330/article/details/125360660?spm=1001.2014.3001.5502\">蓝桥杯Web国赛真题解析</a><br/> <br/>🧧 加入社区领红包：<a href=\"https://bbs.csdn.net/forums/ailjx?typeId=120909\">海底烧烤店ai（从前端到全栈）</a><br/> <br/>🧑‍💼个人简介：即将大三的学生，一个不甘平庸的平凡人🍬<br/> 👉 你的一键三连是我更新的最大动力❤️！<br/> <br/><font color=\"#32ca99\" face=\"黑体\" size=\"4\"> 🏆分享博主自用<strong>牛客网</strong>🏆：<a href=\"https://www.nowcoder.com/link/pc_csdncpt_hdskdai_js\">一个非常全面的面试刷题求职网站，真的超级好用🍬</a></font></p>\n</blockquote>\n<hr/>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_11\">前言</a></li><li><a href=\"#_20\">一、列表动态渲染</a></li><li><a href=\"#_46\">二、计算距离当前日期天数</a></li><li><a href=\"#_79\">三、构造函数的继承</a></li><li><a href=\"#_114\">四、类的继承</a></li><li><a href=\"#URL_147\">五、解析URL参数</a></li><li><a href=\"#_165\">六、生成页码</a></li><li><a href=\"#_203\">七、数据排序/总成绩排名</a></li><li><a href=\"#_216\">八、计算子字符串频次</a></li><li><a href=\"#_227\">九、判断斐波那契数列</a></li><li><a href=\"#_245\">十、数组扁平化处理</a></li><li><a href=\"#_266\">结语</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_11\"></a>前言</h1>\n<p>博主发现了一个超级好用的刷题、面试、求职的网站：<a href=\"https://www.nowcoder.com/link/pc_csdncpt_hdskdai_js\">牛客网</a>，它不仅具有<strong>公司真题</strong>、<strong>专项练习</strong>、<strong>面试题库</strong>、<strong>在线编程</strong>等功能，还具有非常强大的<strong>AI模拟面试</strong>功能，简直是求职者的福音！</p>\n<p>牛客网里的题库还是比较全面的，无论你是前端还是后端，都能在牛客网上找到适合自己的题，赶快点击链接去注册登录吧：<a href=\"https://www.nowcoder.com/link/pc_csdncpt_hdskdai_js\">点我进入牛客网</a></p>\n<p>本篇文章所有示例来自于<a href=\"https://www.nowcoder.com/link/pc_csdncpt_hdskdai_js\">牛客网</a><code>题库/在线编程/JS篇</code>（11-20题），这些都是前端开发中常用的功能，借此记录一下刷题过程，巩固基础</p>\n<h1><a id=\"_20\"></a>一、列表动态渲染</h1>\n<p>列表的动态渲染是前端开发中最常见的效果，这个案例中我们需要将<code>people</code>数组渲染在页面中，实现下面的列表：</p>\n<ul><li>牛油1号 20岁</li><li>牛油2号 21岁</li><li>牛油3号 19岁</li></ul>\n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n        <span class=\"token keyword\">var</span> people <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'牛油1号'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'牛油2号'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">21</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'牛油3号'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">19</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">var</span> ul <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 补全代码</span>\n        <span class=\"token keyword\">var</span> str<span class=\"token operator\">=</span><span class=\"token string\">''</span>\n        people<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n           str<span class=\"token operator\">+=</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;li&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>item<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>item<span class=\"token punctuation\">.</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">岁&lt;/li&gt;</span><span class=\"token template-punctuation string\">`</span></span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        ul<span class=\"token punctuation\">.</span>innerHTML<span class=\"token operator\">=</span>str\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<h1><a id=\"_46\"></a>二、计算距离当前日期天数</h1>\n<p>案例要求：</p>\n<ol><li>根据已有的<code>person</code>对象的注册时间求出距离当前时间的天数（天数向下取整）</li><li>将获得的天数和<code>person</code>数据拼接成字符串，作为<code>h2</code>标签的内容<br/> 注意：使用<strong>模板字符串</strong>进行字符串拼接，字符串最终内容如：尊贵的牛客网2级用户小丽您好，您已经注册牛客网3天啦~</li></ol>\n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token literal-property property\">level</span><span class=\"token operator\">:</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'小丽'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">registTime</span><span class=\"token operator\">:</span> <span class=\"token string\">'2021-11-01'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> h2 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 补全代码</span>\n    <span class=\"token comment\">// 当前时间戳</span>\n    <span class=\"token keyword\">let</span> now <span class=\"token operator\">=</span>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 过去时间措</span>\n    <span class=\"token keyword\">let</span> past <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>registTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 相距天数</span>\n    <span class=\"token keyword\">let</span> days <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> past<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    h2<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">尊敬的牛客网</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>person<span class=\"token punctuation\">.</span>level<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">级用户</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>person<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">您好，你已经注册牛客网</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>days<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">天啦~</span><span class=\"token template-punctuation string\">`</span></span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>解题步骤：</p>\n<ul><li>获取当前时间对应的时间戳</li><li>获取<code>person.registTime</code>对应的时间戳</li><li>根据两个时间戳的差值计算出两个时间之间的天数</li><li>使用模板字符串拼接数据</li></ul>\n<h1><a id=\"_79\"></a>三、构造函数的继承</h1>\n<p>在<code>ES6</code>的<code>class</code>类诞生之前，我们是以函数的形式来书写构造函数，<strong>继承</strong>在构造函数的运用过程中扮演着非常重要的角色，看下面这个案例：</p>\n<ol><li>给<code>Human</code>构造函数的原型对象添加<code>getName</code>方法，返回当前实例<code>name</code>属性</li><li>将<code>Chinese</code>构造函数<strong>继承于</strong><code>Human</code>构造函数</li><li>给<code>Chinese</code>构造函数的原型对象添加<code>getAge</code>方法，返回当前实例<code>age</code>属性</li></ol>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Human</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>kingdom <span class=\"token operator\">=</span> <span class=\"token string\">'animal'</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'yellow'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'brown'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Chinese</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span>age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token function\">Human</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'yellow'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 补全代码</span>\n<span class=\"token comment\">// 给\"Human\"构造函数的原型对象添加\"getName\"方法</span>\n<span class=\"token class-name\">Human</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getName</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 将\"Chinese\"构造函数继承于\"Human\"构造函数</span>\n<span class=\"token class-name\">Chinese</span><span class=\"token punctuation\">.</span>prototype<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Human</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Chinese</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">=</span>Chinese\n\n<span class=\"token comment\">// 给\"Chinese\"构造函数的原型对象添加\"getAge\"方法</span>\n<span class=\"token class-name\">Chinese</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getAge</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>可以看到，普通的构造函数的继承我们主要是通过操作<code>prototype</code>原型对象来进行实现的，这显然是比较麻烦又不太安全的，所以在<code>ES6</code>之后就诞生了<code>class</code>类来替换这种写法</p>\n<h1><a id=\"_114\"></a>四、类的继承</h1>\n<p><code>ES6</code>新增了<code>class</code>类，其能够很好的替代上述构造函数的使用，<code>class</code>实际就是构造函数的语法糖，它的继承写法如下：</p>\n<ol><li><code>Chinese</code>类继承于<code>Human</code>类</li><li><code>Human</code>类实现一个函数<code>getName</code>，返回该实例的<code>name</code>属性</li><li><code>Chinese</code>类构造函数有两个参数，分别为<code>name</code>、<code>age</code></li><li><code>Chinese</code>类实现一个函数<code>getAge</code>，返回该实例的<code>age</code>属性</li></ol>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Human</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>kingdom <span class=\"token operator\">=</span> <span class=\"token string\">'animal'</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'yellow'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'brown'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 补全代码</span>\n    <span class=\"token function\">getName</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 补全代码</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Chinese</span> <span class=\"token keyword\">extends</span>  <span class=\"token class-name\">Human</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span>age</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span>age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">getAge</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>class</code>类是通过<code>extends</code>关键字来继承基类的，同时使用<code>super</code>来调用基类（<code>Human</code>）的构造器（<code>constructor</code>）</p>\n<h1><a id=\"URL_147\"></a>五、解析URL参数</h1>\n<p>解析URL参数在前端开发中也是非常常见的功能，看下面这个例子：</p>\n<blockquote>\n<p>输入：<code>getParams('https://nowcoder.com/online?id=1&amp;salas=1000')</code><br/> 输出：<code>{id:1, salas: 100}</code></p>\n</blockquote>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">_getParams</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 补全代码</span>\n    <span class=\"token keyword\">const</span> params<span class=\"token operator\">=</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> obj<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n    params<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n        obj<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> obj\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这主要就是使用了分割字符串的方法<code>split</code></p>\n<h1><a id=\"_165\"></a>六、生成页码</h1>\n<p>在前后端交互过程中，分页功能非常常见，这个案例就是实现前端显示页码的效果：</p>\n<ol><li><code>allItem</code>为总数据项个数，<code>pageItem</code>为每页的数据项个数</li><li><code>li</code>标签内容为当前页码数，页码从1开始</li></ol>\n<p>具体要求实际就是需要在<code>ul</code>内通过<code>li</code>显示所有的页码，而<code>_createPage</code> 就是进行这一操作的函数</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">&gt;</span>\n\t<span class=\"token operator\">&lt;</span>ul id<span class=\"token operator\">=</span><span class=\"token string\">\"ul\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">_createPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">allItem<span class=\"token punctuation\">,</span> pageItem</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n\t       <span class=\"token comment\">// 补全代码</span>\n\t       <span class=\"token comment\">// ceil 向上取整</span>\n           <span class=\"token keyword\">var</span> liNum<span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>allItem<span class=\"token operator\">/</span>pageItem<span class=\"token punctuation\">)</span>\n           <span class=\"token keyword\">var</span> nums<span class=\"token operator\">=</span><span class=\"token string\">''</span>\n           <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>liNum<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n             nums<span class=\"token operator\">+=</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;li&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/li&gt;</span><span class=\"token template-punctuation string\">`</span></span>\n           <span class=\"token punctuation\">}</span>\n           ul<span class=\"token punctuation\">.</span>innerHTML<span class=\"token operator\">=</span>nums\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>这里注意一下，我们使用 <code>ul.innerHTML</code>时并没有事先通过<code>document.getElementById获取ul</code>，那我们为什么能直接操作这个<code>ul</code>呢？</p>\n<p>原因在于：目前不使用<code>getElementById</code>方法，也可以用<code>id</code><strong>直接操作</strong>对应<code>id</code>的元素，这也适用于一些元素的<code>name</code>属性：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>img name<span class=\"token operator\">=</span><span class=\"token string\">\"myDiv\"</span> alt<span class=\"token operator\">=</span><span class=\"token string\">\"Ailjx\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>img<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>img name<span class=\"token operator\">=</span><span class=\"token string\">\"myDiv\"</span> alt<span class=\"token operator\">=</span><span class=\"token string\">\"Ailjx2\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>img<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myDiv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>alt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ailjx</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>但目前这种写法好像还没形成标准，所以保险起见尽量还是不要使用！</p>\n<h1><a id=\"_203\"></a>七、数据排序/总成绩排名</h1>\n<p>这个案例是需要将数组参数中的对象以总成绩(包括属性<code>chinese</code>、<code>math</code>、<code>english</code>)<strong>从高到低</strong>进行排序并返回：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">_rank</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">array</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 补全代码</span>\n    <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevItem<span class=\"token punctuation\">,</span>nextItem</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">const</span> prev <span class=\"token operator\">=</span> prevItem<span class=\"token punctuation\">.</span>chinese<span class=\"token operator\">+</span>prevItem<span class=\"token punctuation\">.</span>math<span class=\"token operator\">+</span>prevItem<span class=\"token punctuation\">.</span>english\n        <span class=\"token keyword\">const</span> next <span class=\"token operator\">=</span> nextItem<span class=\"token punctuation\">.</span>chinese<span class=\"token operator\">+</span>nextItem<span class=\"token punctuation\">.</span>math<span class=\"token operator\">+</span>nextItem<span class=\"token punctuation\">.</span>english\n        <span class=\"token keyword\">return</span> next <span class=\"token operator\">-</span> prev\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>对于数组排序，一个<code>sort</code>方法就可搞定！</p>\n<h1><a id=\"_216\"></a>八、计算子字符串频次</h1>\n<p><code>_searchStrIndexOf</code> 函数接受两个参数分别为字符串<code>str</code>、子字符串<code>target</code>，要求返回子字符串<code>target</code>在字符串<code>str</code>中出现的频次：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">_searchStrIndexOf</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token comment\">// 补全代码</span>\n   <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这个例子，巧妙的使用分割字符串的方法<code>split</code>将字符串在子子字符串处进行分割，形成数组，最后根据数组长度-1即可得到子字符串在字符串中出现的频次</p>\n<h1><a id=\"_227\"></a>九、判断斐波那契数列</h1>\n<p>要求以<code>Boolean</code>的形式返回参数数组是否为斐波那契数列：</p>\n<blockquote>\n<p>在数学上，斐波那契数列以如下方法定义：<code>F(0)=0</code>，<code>F(1)=1</code>, <code>F(n)=F(n - 1)+F(n - 2)（n ≥ 2，n ∈ N）</code><br/> <strong>注意：</strong><code>[0,1,1]</code>为最短有效斐波那契数列</p>\n</blockquote>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">_isFibonacci</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">array</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 补全代码</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span>length<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    \n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">===</span>i\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">===</span>array<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>array<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_245\"></a>十、数组扁平化处理</h1>\n<p>将数组参数中的多维数组扩展为一维数组并返回该数组：</p>\n<blockquote>\n<p>输入：<code>[1,[2,[3,[4]]]]</code><br/> 输出：<code>[1,2,3,4]</code></p>\n</blockquote>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">_flatten</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">arr</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 补全代码</span>\n    <span class=\"token keyword\">const</span> newArr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                newArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token function\">each</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">each</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> newArr\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_266\"></a>结语</h1>\n<p>这篇文章内容非常简单，主要是为了巩固自己的基础，正可谓<strong>基础不牢，地动山摇！！！</strong></p>\n<p>这篇文章的内容都出自于<a href=\"https://www.nowcoder.com/link/pc_csdncpt_hdskdai_js\">牛客网的JS篇题库</a>，由此可见牛客网的<code>JS</code>题库还是非常贴合实际的，在写的过程中自己查漏补缺，收获了很多。</p>\n<p>身为前端，之前的我非常迷茫，不知道怎么刷题，后端常刷的算法题又不太适合我，直到发现牛客网，才结束这一现状！牛客网里的题真的是对前端太友好了，强烈将<a href=\"https://www.nowcoder.com/link/pc_csdncpt_hdskdai_js\">牛客网</a>推荐给大家！</p>\n<hr/>\n<blockquote>\n<p>🖥️ TypeScript专栏：<a href=\"https://blog.csdn.net/m0_51969330/category_11929325.html\">TypeScript从入门到精通</a><br/> <br/>🖥️ 蓝桥杯真题解析：<a href=\"https://blog.csdn.net/m0_51969330/article/details/125360660?spm=1001.2014.3001.5502\">蓝桥杯Web国赛真题解析</a><br/> <br/>🧧 加入社区领红包：<a href=\"https://bbs.csdn.net/forums/ailjx?typeId=120909\">海底烧烤店ai（从前端到全栈）</a><br/> <br/>🧑‍💼个人简介：即将大三的学生，一个不甘平庸的平凡人🍬<br/> 👉 你的一键三连是我更新的最大动力❤️！<br/> <br/><font color=\"#32ca99\" face=\"黑体\" size=\"4\"> 🏆分享博主自用<strong>牛客网</strong>🏆：<a href=\"https://www.nowcoder.com/link/pc_csdncpt_hdskdai_js\">一个非常全面的面试刷题求职网站，真的超级好用🍬</a></font></p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-09-04 11:28:39", "summary": "专栏：从入门到精通蓝桥杯真题解析：蓝桥杯国赛真题解析加入社区领红包：海底烧烤店从前端到全栈个人简介：即将大三的学生，一个不甘平庸的平凡人你的一键三连是我更新的最大动力！黑体分享博主自用牛客网：一个非常"}