{"blogid": "126063804", "writerAge": "码龄5年", "writerBlogNum": "157", "writerCollect": "1261", "writerComment": "439", "writerFan": "4709", "writerGrade": "5级", "writerIntegral": "3185", "writerName": "小满zs", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126063804.jpg", "writerRankTotal": "6067", "writerRankWeekly": "953", "writerThumb": "1100", "writerVisitNum": "383424", "blog_read_count": "2365", "blog_time": "已于 2022-07-31 20:18:41 修改", "blog_title": "小满Vue3第三十九章（Vue开发桌面程序Electron）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>Electron官网<a href=\"https://www.electronjs.org/\" title=\"Electron | Build cross-platform desktop apps with JavaScript, HTML, and CSS.\">Electron | Build cross-platform desktop apps with JavaScript, HTML, and CSS.</a></p>\n<p>我们用的VsCode 也是 electron 开发的</p>\n<p><img alt=\"\" height=\"840\" src=\"..\\..\\static\\image\\0f3a1002b8e34cfbaa0bc8cd025cd30e.png\" width=\"1200\"/></p>\n<p> electron 内置了 Chromium 和 nodeJS 其中 Chromium 是渲染进程 主要渲染和解析HTML，Nodejs作为主进程，其中管道用IPC 通信</p>\n<h1>1.使用vite 构建 electron项目</h1>\n<p>创建一个vite 项目</p>\n<pre><code>npm init vite@latest</code></pre>\n<p><img alt=\"\" height=\"635\" src=\"..\\..\\static\\image\\ca896e7502084f3dbb04f36301e3717f.png\" width=\"1129\"/></p>\n<p>安装electron</p>\n<pre><code>npm install electron -D\nnpm install vite-plugin-electron -D</code></pre>\n<p> 根目录新建 electron / index.ts</p>\n<p><img alt=\"\" height=\"1048\" src=\"..\\..\\static\\image\\40a06d3347e84cce85c66b1202da81d2.png\" width=\"1200\"/></p>\n<p>修改vite.config.ts 配置文件</p>\n<p>引入electron插件配置main  entry对应electron的文件</p>\n<p></p>\n<pre><code>import { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport electron from 'vite-plugin-electron'\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [vue(), electron({\n    main: {\n      entry: \"electron/index.ts\"\n    }\n  })]\n})</code></pre>\n<p><img alt=\"\" height=\"1048\" src=\"..\\..\\static\\image\\d66b35a9ab9f472f89332d2c34b61e44.png\" width=\"1200\"/></p>\n<p>编写代码 electron / index.ts</p>\n<pre><code>import { app, BrowserWindow } from 'electron'\nimport path from 'path'\n//app 控制应用程序的事件生命周期。\n//BrowserWindow 创建并控制浏览器窗口。\n\nlet win: BrowserWindow | null;\n//定义全局变量获取 窗口实例\n\nconst createWindow = () =&gt; {\n    win = new BrowserWindow({\n        //\n        webPreferences: {\n            devTools: true,\n            contextIsolation: false,\n            nodeIntegration: true\n            //允许html页面上的javascipt代码访问nodejs 环境api代码的能力（与node集成的意思）\n        }\n    })\n    if (app.isPackaged) {\n        win.loadFile(path.join(__dirname, \"../index.html\"));\n    } else {\n        win.loadURL(`http://${process.env['VITE_DEV_SERVER_HOST']}:${process.env['VITE_DEV_SERVER_PORT']}`)\n    }\n}\n//在Electron完成初始化时被触发\napp.whenReady().then(createWindow)\n</code></pre>\n<p>配置package json 增加main 字段<strong><span style=\"color:#fe2c24;\"> type 去掉</span></strong></p>\n<pre><code>{\n  \"name\": \"electron-vite\",\n  \"private\": true,\n  \"version\": \"0.0.0\",\n  \"main\": \"dist/electron/index.js\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vue-tsc --noEmit &amp;&amp; vite build  &amp;&amp;  electron-builder\",\n    \"preview\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"vue\": \"^3.2.37\"\n  },\n  \"devDependencies\": {\n    \"@vitejs/plugin-vue\": \"^3.0.0\",\n    \"electron\": \"^19.0.10\",\n    \"electron-builder\": \"^23.1.0\",\n    \"typescript\": \"^4.6.4\",\n    \"vite\": \"^3.0.0\",\n    \"vite-plugin-electron\": \"^0.8.3\",\n    \"vue-tsc\": \"^0.38.4\"\n  }\n}\n</code></pre>\n<p>npm run dev</p>\n<p><img alt=\"\" height=\"964\" src=\"..\\..\\static\\image\\b28dd412c1ef45209e88a6face2110b7.png\" width=\"1200\"/></p>\n<p></p>\n<h1>2.打包Electron</h1>\n<p>需要安装electron-builder</p>\n<pre><code>npm install electron-builder -D</code></pre>\n<p>package json 配置 build 修改npm run build命令</p>\n<pre><code>\"build\": \"vue-tsc --noEmit &amp;&amp; vite build  &amp;&amp;  electron-builder\",</code></pre>\n<pre><code>  \"build\": {\n    \"appId\": \"com.electron.desktop\",\n    \"productName\": \"electron\",\n    \"asar\": true,\n    \"copyright\": \"Copyright © 2022 electron\",\n    \"directories\": {\n      \"output\": \"release/\"\n    },\n    \"files\": [\n      \"dist\"\n    ],\n    \"mac\": {\n      \"artifactName\": \"${productName}_${version}.${ext}\",\n      \"target\": [\n        \"dmg\"\n      ]\n    },\n    \"win\": {\n      \"target\": [\n        {\n          \"target\": \"nsis\",\n          \"arch\": [\n            \"x64\"\n          ]\n        }\n      ],\n      \"artifactName\": \"${productName}_${version}.${ext}\"\n    },\n    \"nsis\": {\n      \"oneClick\": false,\n      \"perMachine\": false,\n      \"allowToChangeInstallationDirectory\": true,\n      \"deleteAppDataOnUninstall\": false\n    },\n    \"publish\": [\n      {\n        \"provider\": \"generic\",\n        \"url\": \"http://127.0.0.1:8080\"\n      }\n    ],\n    \"releaseInfo\": {\n      \"releaseNotes\": \"版本更新的具体内容\"\n    }\n  }</code></pre>\n<p>nsis 配置详解 </p>\n<pre><code>{\"oneClick\": false, // 创建一键安装程序还是辅助安装程序（默认是一键安装）\n    \"allowElevation\": true, // 是否允许请求提升，如果为false，则用户必须使用提升的权限重新启动安装程序 （仅作用于辅助安装程序）\n    \"allowToChangeInstallationDirectory\": true, // 是否允许修改安装目录 （仅作用于辅助安装程序）\n    \"installerIcon\": \"public/timg.ico\",// 安装程序图标的路径\n    \"uninstallerIcon\": \"public/timg.ico\",// 卸载程序图标的路径\n    \"installerHeader\": \"public/timg.ico\", // 安装时头部图片路径（仅作用于辅助安装程序）\n    \"installerHeaderIcon\": \"public/timg.ico\", // 安装时标题图标（进度条上方）的路径（仅作用于一键安装程序）\n    \"installerSidebar\": \"public/installerSiddebar.bmp\", // 安装完毕界面图片的路径，图片后缀.bmp，尺寸164*314 （仅作用于辅助安装程序）\n    \"uninstallerSidebar\": \"public/uninstallerSiddebar.bmp\", // 开始卸载界面图片的路径，图片后缀.bmp，尺寸164*314 （仅作用于辅助安装程序）\n    \"uninstallDisplayName\": \"${productName}${version}\", // 控制面板中的卸载程序显示名称\n    \"createDesktopShortcut\": true, // 是否创建桌面快捷方式\n    \"createStartMenuShortcut\": true,// 是否创建开始菜单快捷方式\n    \"shortcutName\": \"SHom\", // 用于快捷方式的名称，默认为应用程序名称\n    \"include\": \"script/installer.nsi\",  // NSIS包含定制安装程序脚本的路径，安装过程中自行调用  (可用于写入注册表 开机自启动等操作)\n    \"script\": \"script/installer.nsi\",  // 用于自定义安装程序的NSIS脚本的路径\n    \"deleteAppDataOnUninstall\": false, // 是否在卸载时删除应用程序数据（仅作用于一键安装程序）\n    \"runAfterFinish\": true,  // 完成后是否运行已安装的应用程序（对于辅助安装程序，应删除相应的复选框）\n    \"menuCategory\": false, // 是否为开始菜单快捷方式和程序文件目录创建子菜单，如果为true，则使用公司名称\n}</code></pre>\n<p>npm run build</p>\n<p><img alt=\"\" height=\"1048\" src=\"..\\..\\static\\image\\16969184f40d45cf8a3043a11e7281d3.png\" width=\"1200\"/></p>\n<p> <img alt=\"\" height=\"362\" src=\"..\\..\\static\\image\\7256d03f7d61424f854dfc458ecb16bc.png\" width=\"503\"/></p>\n<p> <img alt=\"\" height=\"916\" src=\"..\\..\\static\\image\\6018356cd0b94f4bb098da0c23ac6ace.png\" width=\"1200\"/></p>\n<h1> 3.Electron Vscode 输出乱码解决 方案</h1>\n<p>dev 的时候 加上chcp 65001 输出中文</p>\n<pre><code> \"dev\": \"chcp 65001 &amp;&amp; vite\",</code></pre>\n<p><img alt=\"\" height=\"1048\" src=\"..\\..\\static\\image\\2458dd6785a349f097eca043eb59766c.png\" width=\"1200\"/></p>\n<p>加上之后</p>\n<p><img alt=\"\" height=\"1048\" src=\"..\\..\\static\\image\\22d38f77131248da83fb9bbc25b47512.png\" width=\"1200\"/></p>\n<h1> 4.渲染进程和主进程通信</h1>\n<p>vite.config.ts 需要修改 不然会报一个错<span style=\"color:#fe2c24;\">Error: Module \"path\" has been externalized for browser compatibility. Cannot</span></p>\n<p>只要安装了  vite-plugin-electron 就会带上 vite-plugin-electron-renderer 直接引入用就行</p>\n<pre><code>import { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport electron from 'vite-plugin-electron'\nimport electronRender from 'vite-plugin-electron-renderer'\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [vue(), electron({\n    main: {\n      entry: \"electron/index.ts\"\n    }\n  }),electronRender()],\n  build:{\n    emptyOutDir: false,\n  }\n})\n</code></pre>\n<p>渲染进程使用ipcRenderer 发送</p>\n<pre><code>import { ipcRenderer } from 'electron'\n\nconst open = () =&gt; {\n     ipcRenderer.send('openFlyCar')\n}\n</code></pre>\n<p>主进程使用 ipcMain 接受</p>\n<pre><code>ipcMain.on('openFlyCar',()=&gt;{\n    console.log('收到')\n})</code></pre>\n<hr/>\n<p>主进程通知渲染进程</p>\n<pre><code>const  win = new BrowserWindow(xxxxx)\nwin!.webContents.send('load', { message: \"electron初始化了\" })</code></pre>\n<p>渲染进程接受</p>\n<pre><code>ipcRenderer.on('load',(_,data)=&gt;{\n  console.log(data)\n})</code></pre>\n<p></p>\n</div>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-07-31 20:18:41", "summary": "官网我们用的也是开发的内置了和其中是渲染进程主要渲染和解析，作为主进程，其中管道用通信使用构建项目创建一个项目安装根目录新建修改配置文件引入插件配置对应的文件编写代码控制应用程序的事件生命周期。创建并"}