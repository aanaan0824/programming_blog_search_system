{"blogid": "124664930", "writerAge": "码龄3年", "writerBlogNum": "29", "writerCollect": "50", "writerComment": "6", "writerFan": "3", "writerGrade": "2级", "writerIntegral": "345", "writerName": "WilhelmLiu", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124664930.jpg", "writerRankTotal": "45765", "writerRankWeekly": "277695", "writerThumb": "47", "writerVisitNum": "26893", "blog_read_count": "1183", "blog_time": "已于 2022-07-17 20:34:10 修改", "blog_title": "C# 实现快速排序", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"C__0\"></a>C# 实现快速排序</h1>\n<h2><a id=\"_1\"></a>过程拆解</h2>\n<p>假设现有一数组，如下</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\34dc0d04ef9e43adb12e14cb04a0d8b7.png\"/><br/> 基本排序代码，如下</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//替换代码</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> iIndex <span class=\"token operator\">=</span> <span class=\"token function\">BaseSort</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//替换代码</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前i的下标为\"</span> <span class=\"token operator\">+</span> iIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">BaseSort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> start<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> end<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//选取一个判定值(一般选取最后一个)</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> j <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> x<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//将下标j的值与下标i的值交换 保证i的前面都小于判定值</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> temp <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//将下标i的值与判定值交换</span>\n    array<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol><li>将<strong>替换代码</strong>换成下列代码，运行并分析</li></ol>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span></span> iIndex <span class=\"token operator\">=</span> <span class=\"token function\">BaseSort</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//从下标 0 到下标 5 - 1 的元素中找比下标 5 小的值移动到前面，最后将下标i的值与判定值交换</span>\n</code></pre>\n<p><strong>当 j = 0 时</strong>，下标为 j 的元素值<strong>小于</strong>判定值，交换下标 i 与 下标 j 的值，之后 i = i + 1。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\78a1bfa9d5de4930b796cd9e43a9ffa4.png\"/><br/> <strong>当 j = 1 时</strong>，下标为 j 的元素值<strong>大于</strong>判定值。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\900ce2d6e86a46c29373bae798c9f22c.png\"/><br/> <strong>当 j = 2 时</strong>，下标为 j 的元素值<strong>小于</strong>判定值，交换下标 i 与 下标 j 的值，之后 i = i + 1。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7a67354a2ffa4510b628a17267073798.png\"/><br/> <strong>当 j = 3 时</strong>，下标为 j 的元素值<strong>小于</strong>判定值，交换下标 i 与 下标 j 的值，之后 i = i + 1。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1bd0902bf43b4537818e659d46e8707b.png\"/><br/> <strong>当 j = 4 时</strong>，下标为 j 的元素值<strong>大于</strong>判定值。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5cbe6cd9e05d4984bed6ff137e23b284.png\"/><br/> <strong>当 for 结束循环时，将下标 i 的元素值与判定值交换。</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4d3468fb43b6443480be23c4841c5222.png\"/><br/> <strong>至此，将小于判定值的元素都移动到下标 i 之前，将大于/等于判定值的元素移动到下标i之后。</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ed75d5387a464373a3cf1ff8481c370f.png\"/></p>\n<ol start=\"2\"><li>将<strong>替换代码</strong>换成下列代码，运行并分析</li></ol>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span></span> iIndex <span class=\"token operator\">=</span> <span class=\"token function\">BaseSort</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//从下标 0 到下标 2 - 1 的元素中找比下标 2 小的值移动到前面，最后将下标i的值与判定值交换</span>\n</code></pre>\n<p><strong>当 j = 0 时</strong>，下标为 j 的元素值<strong>不小于</strong>判定值。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\430c250f75f745019e1b771d6b76af6e.png\"/><br/> <strong>当 j = 1 时</strong>，下标为 j 的元素值<strong>小于</strong>判定值，交换下标 i 与 下标 j 的值，之后 i = i + 1。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9f104440687b40beaebb53f7b8366d83.png\"/><br/> <strong>当 for 结束循环时，将下标 i 的元素值与判定值交换。</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\52b9c84cebe0488fa1f580f5d7b5150f.png\"/><br/> <strong>至此，将小于判定值的元素都移动到下标 i 之前，将大于/等于判定值的元素移动到下标i之后。</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2d8b1c0e78314b2d972b71220e5af76c.png\"/></p>\n<ol start=\"3\"><li>将<strong>替换代码</strong>换成下列代码，运行并分析</li></ol>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span></span> iIndex <span class=\"token operator\">=</span> <span class=\"token function\">BaseSort</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//从下标 4 到下标 5 - 1 的元素中找比下标 5 小的值移动到前面，最后将下标i的值与判定值交换</span>\n</code></pre>\n<p><strong>当 j = 4 时</strong>，下标为 j 的元素值<strong>大于</strong>判定值。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b6ddd6b519304ecda29c3176a726d9bc.png\"/><br/> <strong>当 for 结束循环时，将下标 i 的元素值与判定值交换。</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b5199fc6720a4530b65b543cba1fc440.png\"/><br/> <strong>至此，将小于判定值的元素都移动到下标 i 之前，将大于/等于判定值的元素移动到下标i之后。</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e8347b942b7f4255bf5a4b0ed90cdd2e.png\"/></p>\n<h2><a id=\"_112\"></a>算法实现</h2>\n<ol><li>选择一个数为<strong>确定数 (一般为数组最后一个数)</strong>，利用分治法放置在<strong>确定位置</strong>上。</li><li>使得<strong>小于</strong>确定数的元素位于确定位置的<strong>左边</strong>，<strong>大于/等于</strong>确定数位于确定位置的<strong>右边</strong>。</li><li>将确定数左边和右边<strong>再次进行分治</strong>，各自再选择一个数确定在某个位置上。</li><li>当分治的数组<strong>只有一个元素时</strong>，则<strong>不需要</strong>再次进行分治，可以<strong>确定这个数的位置</strong>。</li></ol>\n<p>代码如下</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//快速排序</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> start<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> end<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> mid <span class=\"token operator\">=</span> <span class=\"token function\">Partition</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//分治方法 把数组中一个数放置在确定的位置</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Partition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> start<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> end<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//选取一个判定值(一般选取最后一个)</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> j <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> x<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//将下标j的值与下标i的值交换 保证i的前面都小于判定值</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> temp <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//将下标i的值与判定值交换</span>\n    array<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_172\"></a>复杂度与稳定性</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8ca3d4806d5a43c5a561009e05735a03.png\"/></p>\n<ul><li>最优时间复杂度：</li></ul>\n<ol><li> <p>推导方式：<br/> 每次将数组分为左右数组，每次进行分治时，需要一个 <strong>for循环</strong>。所以公式为<strong>T[ n ] = 2T[ n / 2 ] + n</strong><br/> 第一次迭代 T[ n ] = 2<em>T[ n / 2 ]</em> + n<br/> 第二次迭代 <em>T[ n / 2 ]</em> = <strong>2T[ n / 4 ] + n / 2</strong> <strong>推出</strong> T[ n ] = 2{ <strong>2T[ n / 4 ] + n / 2</strong> } + n = 2<sup>2</sup><em>T[ n / 2<sup>2</sup> ]</em> + 2n<br/> 第三次迭代 <em>T[ n / 2<sup>2</sup> ]</em> = <strong>2T[ n / 8 ] + n / 4</strong> <strong>推出</strong> T[ n ] = 2<sup>2</sup>{ <strong>2T[ n / 8 ] + n / 4</strong> } + 2n = 2<sup>3</sup><em>T[ n / 2<sup>3</sup> ]</em> + 3n<br/> 第四次迭代 <em>T[ n / 2<sup>3</sup> ]</em> = <strong>2T[ n / 16 ] + n / 8</strong> <strong>推出</strong> T[ n ] = 2<sup>3</sup>{ <strong>2T[ n / 16 ] + n / 8</strong> } + 3n = 2<sup>4</sup>T[ n / 2<sup>4</sup> ] + 4n<br/> 因此，可以推出第m次迭代的时间复杂度 T[ n ] = 2<sup>m</sup>T[ n / 2<sup>m</sup> ] + <strong>m</strong>n</p> <p>当n = 1时，分治法仅需要进行一次 <strong>for循环</strong>，所以T[n] = n。<br/> 所以当T[ n / 2<sup>m</sup> ] = T[1] 时，即 m = log<sub>2</sub>n时<br/> T[ n ] = 2<sup>m</sup>T[ n / 2<sup>m</sup> ] + mn = 2<sup>log2n</sup>T[1] + (log<sub>2</sub>n) * n = n * T[1] + nlog<sub>2</sub>n = n + nlog<sub>2</sub>n<br/> 所以最优复杂度为 nlog<sub>2</sub>n</p> </li><li> <p>主定理方式：<br/> 对于公式 T[ n ] = aT[ n / b ] + cn<sup>d</sup> ，如果满足 a &gt;= 1，b &gt; 1，d &gt;= 0，则</p>\n<table><thead><tr><th>满足条件</th><th>时间复杂度</th></tr></thead><tbody><tr><td>d &lt; log<sub>b</sub>a 即 a &gt; b<sup>d</sup></td><td>n<sup>log</sup><sub>b</sub><sup>a)</sup></td></tr><tr><td>d = log<sub>b</sub>a 即 a = b<sup>d</sup></td><td>n<sup>d</sup>logn</td></tr><tr><td>d &gt; log<sub>b</sub>a 即 a &lt; b<sup>d</sup></td><td>n<sup>d</sup></td></tr></tbody></table><p>每次将数组分为左右数组，每次进行分治时，需要一个 <strong>for循环</strong>。所以公式为<strong>T[ n ] = 2T[ n / 2 ] + n</strong><br/> a = 2，b = 2，c = 1，d = 1 得 a = b<sup>d</sup> = 2，所以算法复杂度为nlogn</p> </li></ol>\n<ul><li>最差时间复杂度：当数组全部元素相同时，该算法类似冒泡算法。把最后一个元素放置在最前，之后进行右边数组的排序</li><li>平均时间复杂度：除数组全部元素相同时，其他情况时间算法复杂度均为nlog<sub>2</sub>n</li><li>空间复杂度：每进行一次迭代需要借助 <strong>变量mid</strong> ，总共需要进行log<sub>2</sub>n次迭代</li><li>不稳定性：经过选择算法后，后面的数被排在了前面(例如: 3)</li></ul>\n<blockquote>\n<p>因为作者精力有限，文章中难免出现一些错漏，敬请广大专家和网友批评、指正。</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-07-17 20:34:10", "summary": "实现快速排序过程拆解假设现有一数组，如下在这里插入图片描述基本排序代码，如下替换代码替换代码当前的下标为"}