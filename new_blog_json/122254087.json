{"blogid": "122254087", "writerAge": "码龄4年", "writerBlogNum": "266", "writerCollect": "433", "writerComment": "111", "writerFan": "243", "writerGrade": "5级", "writerIntegral": "3118", "writerName": "超悠閒", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122254087.jpg", "writerRankTotal": "47881", "writerRankWeekly": "43171", "writerThumb": "152", "writerVisitNum": "169310", "blog_read_count": "1112", "blog_time": "于 2021-12-31 12:51:54 发布", "blog_title": "Rust: Cargo Workspaces 多项目（即 Monorepo）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"Rust_Cargo_Workspaces__Monorepo_0\"></a>Rust: Cargo Workspaces 多项目（即 Monorepo）</h1>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#Rust_Cargo_Workspaces__Monorepo_0\">Rust: Cargo Workspaces 多项目（即 Monorepo）</a></li><li><a href=\"#WorkspacesMonorepo_4\">Workspaces？Monorepo？</a></li><li><a href=\"#Cargo_Workspace__10\">Cargo Workspace 特征</a></li><li><a href=\"#_18\">项目实践</a></li><li><ul><li><a href=\"#_22\">项目结构</a></li><li><a href=\"#_47\">项目构建</a></li><li><ul><li><a href=\"#_51\">构建项目</a></li><li><a href=\"#_Cargotoml_69\">根目录配置文件 Cargo.toml</a></li><li><a href=\"#_96\">声明依赖</a></li></ul>\n</li><li><a href=\"#_117\">项目功能填充</a></li><li><a href=\"#_149\">打包运行</a></li></ul>\n</li><li><a href=\"#_171\">小结</a></li><li><a href=\"#_175\">其他资源</a></li><li><ul><li><a href=\"#_177\">参考连接</a></li><li><a href=\"#_183\">完整代码示例</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"WorkspacesMonorepo_4\"></a>Workspaces？Monorepo？</h1>\n<p>作为一个前端人，相信大家对于近期越来越火的 monorepo 都略有耳闻，从 lerna、yarn workspaces、pnpm 等，实际上这样的概念在后端也是一样的。</p>\n<p>今天要介绍的 Cargo Workspaces 就是对于 Rust 开发下提供官方级别的 monorepo 实践方式，我们使用的官方工具 cargo 自带的功能，其称为 <strong>Workspaces</strong></p>\n<h1><a id=\"Cargo_Workspace__10\"></a>Cargo Workspace 特征</h1>\n<p>workspaces 与 monorepo 其实几乎可以说是一样，不外乎就是把多个关联的项目统统放到同一个项目下；然而这与子项目的概念是不同的，大多数的实现主要用于一次构建多个平行、顶级的包作为独立模块，当然你用 Workspace 的时候定义一个对外暴露的主包，并用它来关联其他包也是可以的。</p>\n<p>不过最重要的一个特征就是，在 workspaces 下每个包都应该是能够独立运行的个体，能够除了本项目以外的项目引入并运行</p>\n<p>除了这些之外，cargo worksapces 还提出了其它约束如共同依赖包版本应该一致能，算是比较琐碎的规范，有兴趣可以看看<a href=\"https://doc.rust-lang.org/book/ch14-03-cargo-workspaces.html\">官方介绍</a></p>\n<h1><a id=\"_18\"></a>项目实践</h1>\n<p>接下来带大家用一用这个 Cargo Workspaces（官方的文档真的写得很好，跟着走一遍就懂了）</p>\n<h2><a id=\"_22\"></a>项目结构</h2>\n<p>在开始之前我们先来看看最终产物的项目结构</p>\n<pre><code>/rust_workspaces\n├── Cargo.lock\n├── Cargo.toml\n└── crates\n    ├── add-one\n    │   ├── Cargo.toml\n    │   └── src\n    │       └── lib.rs\n    ├── add-two\n    │   ├── Cargo.toml\n    │   └── src\n    │       └── lib.rs\n    └── adder\n        ├── Cargo.toml\n        └── src\n            └── main.rs\n</code></pre>\n<p>本篇的最终产物会有三个包，分别是 <code>adder</code>、<code>add-one</code>、<code>add-two</code>，其中 <code>adder</code> 又依赖了其余两个包；全部三个包都放到 <code>crates</code> 目录下（当然你想放哪都行的），整个项目作为一个整体放到一个仓库进行管理</p>\n<h2><a id=\"_47\"></a>项目构建</h2>\n<p>接下来我们来看看如何构建一个如上的 cargo workspaces 多模块（或说多包）项目，实际上跟你原本用 cargo 的方式一模一样！</p>\n<h3><a id=\"_51\"></a>构建项目</h3>\n<p>首先先把三个小项目都建起来</p>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 目录结构</span>\n<span class=\"token function\">mkdir</span> rust_workspaces\n<span class=\"token builtin class-name\">cd</span> rust_workspaces\n<span class=\"token function\">mkdir</span> crates\n<span class=\"token builtin class-name\">cd</span> crates\n<span class=\"token comment\"># 构建三个包</span>\ncargo new adder --lib\ncargo new add-one --lib\ncargo new add-two --lib\n</code></pre>\n<p>没错就是这么粗暴</p>\n<h3><a id=\"_Cargotoml_69\"></a>根目录配置文件 Cargo.toml</h3>\n<p>我们知道通常一个由 Cargo 管理的 rust 项目，最主要的配置文件就是 <code>Cargo.toml</code>；一个 workspaces 项目也是一样的</p>\n<ul><li>创建配置文件</li></ul>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">touch</span> Cargo.toml\n</code></pre>\n<ul><li>编辑配置文件</li></ul>\n<p>这里与我们通常熟悉的部分就不同了，我们不需要填哪些正常项目或是包应该要填的东西，只需要一个 <code>workspace</code> 属性，声明当前 workspaces 都有哪些项目就可以了！</p>\n<ul><li><code>/Cargo.toml</code></li></ul>\n<pre><code class=\"prism language-toml\">[workspace]\nmembers = [\n    \"crates/adder\",\n    \"crates/add-one\",\n    \"crates/add-two\",\n]\n</code></pre>\n<p>可以看到实际上就是指定每一个项目根目录就可以了，所以其实你也可以直接平铺在项目根目录下，而不用放到什么 <code>crates</code> 目录下</p>\n<h3><a id=\"_96\"></a>声明依赖</h3>\n<p>前面我们提过 <code>adder</code> 包需要依赖另外两个包，但是根目录下的 <code>Cargo.toml</code> 只会识别当前 workspaces 下的项目，而无法知道你到底想要怎样的依赖关系</p>\n<p>这其实也好解决，分别在每个项目下自己的 <code>Cargo.toml</code> 定义好自己的依赖关系就可以了</p>\n<ul><li><code>/crates/adder/Cargo.toml</code></li></ul>\n<pre><code class=\"prism language-toml\">[package]\nname = \"adder\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\nadd-one = { path = \"../add-one\" }\nadd-two = { path = \"../add-two\" }\n</code></pre>\n<h2><a id=\"_117\"></a>项目功能填充</h2>\n<p>接下来我们稍微填充一下各个项目的内容代码</p>\n<ul><li><code>/crates/add-one/src/lib.rs</code></li></ul>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add_one</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">{<!-- --></span>\n    x <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li><code>/crates/add-two/src/lib.rs</code></li></ul>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add_two</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">{<!-- --></span>\n    x <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li><code>/crates/adder/src/main.rs</code></li></ul>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token punctuation\">{<!-- --></span>add_one<span class=\"token punctuation\">,</span> add_two<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world! {} + 1 = {}\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">,</span> <span class=\"token namespace\">add_one<span class=\"token punctuation\">::</span></span><span class=\"token function\">add_one</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world! {} + 2 = {}\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">,</span> <span class=\"token namespace\">add_two<span class=\"token punctuation\">::</span></span><span class=\"token function\">add_two</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_149\"></a>打包运行</h2>\n<p>最后你可能会疑惑，那我们该怎样运行呢？我们只需要在根目录下进行打包，Cargo 就会自动识别，将最终产物统一构建在根目录的 <code>/target</code> 目录下，甚至我们进入到单个项目的根目录下运行相同指令也是一样的效果，不会产生多余的 target 目录</p>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 当前在根目录，也就是 rust_workspaces 目录下</span>\n<span class=\"token builtin class-name\">pwd</span>  <span class=\"token comment\"># ~/rust_workspaces</span>\n\ncargo build  <span class=\"token comment\"># 打包项目（可以省略）</span>\ncargo run --bin adder  <span class=\"token comment\"># 指定运行 adder 项目（adder 是一个 bin 项目）</span>\n</code></pre>\n<ul><li>最终结果</li></ul>\n<pre><code>   Compiling adder v0.1.0 (~/rust_workspaces/crates/adder)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.53s\n     Running `target/debug/adder`\nHello, world! 10 + 1 = 11\nHello, world! 10 + 2 = 12\n</code></pre>\n<h1><a id=\"_171\"></a>小结</h1>\n<p>如果读者有兴趣可以去找找一些开源库来看看，现在 workspaces 或是说 monorepo 的概念其实已经在 rust 的社区广泛被采纳，写一些自己的小项目的时候也可以上手用看看，非常不错。（重点是集成的很好，体验极佳，跟某 lernx、什么 yar? wor!space 不一样）</p>\n<h1><a id=\"_175\"></a>其他资源</h1>\n<h2><a id=\"_177\"></a>参考连接</h2>\n<table><thead><tr><th>Title</th><th>Link</th></tr></thead><tbody><tr><td>Cargo Workspaces - The Rust Programming Language</td><td><a href=\"https://doc.rust-lang.org/book/ch14-03-cargo-workspaces.html\">https://doc.rust-lang.org/book/ch14-03-cargo-workspaces.html</a></td></tr></tbody></table>\n<h2><a id=\"_183\"></a>完整代码示例</h2>\n<p><a href=\"https://github.com/superfreeeee/Blog-code/tree/main/back_end/rust/rust_workspaces\">https://github.com/superfreeeee/Blog-code/tree/main/back_end/rust/rust_workspaces</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-12-31 12:51:54", "summary": "多项目即文章目录多项目即？？特征项目实践项目结构项目构建构建项目根目录配置文件声明依赖项目功能填充打包运行小结其他资源参考连接完整代码示例？？作为一个前端人，相信大家对于近期越来越火的都略有耳闻，从、"}