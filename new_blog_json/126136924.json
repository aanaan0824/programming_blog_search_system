{"blogid": "126136924", "writerAge": "码龄178天", "writerBlogNum": "58", "writerCollect": "3063", "writerComment": "3482", "writerFan": "4570", "writerGrade": "7级", "writerIntegral": "11991", "writerName": "XIN-XIANG荣", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126136924.jpg", "writerRankTotal": "1042", "writerRankWeekly": "53", "writerThumb": "4139", "writerVisitNum": "53220", "blog_read_count": "587", "blog_time": "已于 2022-08-05 22:18:15 修改", "blog_title": "【Java】方法的理解与使用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>活动地址：<a href=\"https://marketing.csdn.net/p/bdabfb52c5d56532133df2adc1a728fd\">CSDN21天学习挑战赛</a><br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/078b66f87e3c4e309d7f34d79c5776c4.gif#pic_center\"/><font size=\"4\">✨</font><font color=\"gray\" size=\"3\"><b>博客主页:</b></font><a href=\"https://blog.csdn.net/Trong_?spm=1000.2115.3001.5343\"><font color=\"\tLightSkyBlue\" size=\"3\"><b> XIN-XIANG荣</b></font></a><br/> <font size=\"4\">✨</font><font color=\"gray\" size=\"3\"><b>系列专栏:</b></font><a href=\"https://blog.csdn.net/trong_/category_11933690.html?spm=1001.2014.3001.5482\"><font color=\"\tLightSkyBlue\" size=\"3\"><b>【Java SE】</b></font></a><br/> <font size=\"4\">✨</font><font color=\"gray\" size=\"3\"><b>一句短话:</b></font><font color=\"\tCrimson\" size=\"3\"><b> 难在坚持,贵在坚持,成在坚持!</b></font><br/> <font size=\"4\">✨</font><font color=\"gray\" size=\"3\"><b>博客说明:</b></font><font color=\"RosyBrown\" size=\"3\"><b> 尽己所能，把每一篇博客写好，帮助自己熟悉所学知识，也希望自己的这些内容可以帮助到一些在学习路上的伙伴，文章中如果发现错误及不足之处，还望在评论区留言，我们一起交流进步！😊</b></font></p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_7\">前言</a></li><li><a href=\"#__11\">一. 方法的相关介绍</a></li><li><ul><li><a href=\"#1__15\">1. 方法的定义</a></li><li><a href=\"#2__50\">2. 方法调用的执行过程</a></li><li><a href=\"#3__88\">3. 实参和形参的关系</a></li></ul>\n</li><li><a href=\"#__94\">二. 方法重载</a></li><li><ul><li><a href=\"#1__103\">1. 函数重载的规则</a></li><li><a href=\"#2__131\">2. 方法签名</a></li></ul>\n</li><li><a href=\"#__179\">三. 递归</a></li><li><a href=\"#___198\">四. 关于 \"调用栈\"</a></li><li><a href=\"#_205\">结语</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_7\"></a>前言</h1>\n<p><font color=\"blue\" size=\"4\">😽这篇博客介绍Java当中的方法，类似于C语言中的函数，与之区别的是多了方法重载的知识需要掌握！</font></p>\n<h1><a id=\"__11\"></a>一. 方法的相关介绍</h1>\n<p>方法就是一个代码片段. 类似于 C 语言中的 “函数”。</p>\n<h2><a id=\"1__15\"></a>1. 方法的定义</h2>\n<p><strong>方法语法格式</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">// 方法定义</span>\n修饰符 返回值类型 方法名称<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>参数类型 形参 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n方法体代码<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">return</span> 返回值<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>示例：</p>\n<p>实现一个两个整数相加的方法</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Blog</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 方法的定义</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>注意事项：</p>\n<ol><li>修饰符：初学直接使用public static 固定搭配</li><li>返回值类型：如果方法有返回值，返回值类型必须要与返回的实体类型一致，如果没有返回值，必须写成void</li><li>方法名字：采用小驼峰命名（第一个单词首字母小写，后面的单词首字母大写）</li><li>参数列表：如果方法没有参数，()中什么都不写，如果有参数，需指定参数类型，多个参数之间使用逗号隔开</li><li>方法体：方法内部要执行的语句</li><li>在java当中，方法必须写在类当中，且方法不能嵌套定义</li><li>在java当中，没有方法声明一说</li></ol>\n<h2><a id=\"2__50\"></a>2. 方法调用的执行过程</h2>\n<p>调用方法—**&gt;<strong>传递参数—</strong>&gt;<strong>找到方法地址—</strong>&gt;<strong>执行被调方法的方法体—</strong>&gt;<strong>被调方法结束返回—</strong>&gt;**回到主调方法继续往下执行<br/> <strong>注意事项：</strong></p>\n<ul><li>定义方法的时候, 不会执行方法的代码. 只有调用的时候才会执行.</li><li>一个方法可以被多次调用</li></ul>\n<p><strong>代码示例</strong>: 计算 1! + 2! + 3! + 4! + 5!</p>\n<p>使用方法, 避免使用二重循环, 让代码更简单清晰</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Blog</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            sum <span class=\"token operator\">+=</span> <span class=\"token function\">fac</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sum = \"</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 方法的定义</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fac</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            result <span class=\"token operator\">*=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"计算 n 的阶乘中\"</span><span class=\"token operator\">+</span>n<span class=\"token operator\">+</span><span class=\"token string\">\"! = \"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>执行结果:</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\60d328d1dcccb892ff7b84ab25cf571c.png\"/></p>\n<h2><a id=\"3__88\"></a>3. 实参和形参的关系</h2>\n<p>在Java中，实参的值永远都是拷贝到形参中，形参和实参本质是两个实体</p>\n<p>对于 <strong>基础类型</strong> 来说， 形参相当于实参的拷贝，对于形参的改变不会影响实参，即 <strong>传值调用</strong> ；要想通过形参改变实参，可以传引用类型来做(比如数组)，此时是 <strong>传址调用。</strong></p>\n<h1><a id=\"__94\"></a>二. 方法重载</h1>\n<p>在自然语言中，经常会出现“一词多义”的现象，比如：“好人”。<br/> 一个词语如果有多重含义，那么就说该词语被重载了，具体代表什么含义需要结合具体的场景。</p>\n<p><strong>在Java中，如果多个方法的名字相同，参数列表不同，则称该几种方法被重载了；编译器在编译代码时，会对实参类型进行推演，根据推演的结果来确定调用哪个方法 。</strong></p>\n<p>重载函数常用来<strong>实现功能类似而所处理的数据类型不同的问题</strong>。</p>\n<h2><a id=\"1__103\"></a>1. 函数重载的规则</h2>\n<ol><li>方法名必须相同</li><li>参数列表必须不同(参数的个数不同/参数的类型不同/类型的次序必须不同)</li><li>与返回值类型是否相同无关，两个方法如果仅仅只是因为返回值类型不同，是不能构成重载的</li></ol>\n<p>代码示例：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Blog</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用add(int, int)</span>\n        <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用add(double, double)</span>\n        <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用add(double, double, double)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">double</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">double</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> z<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> z<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"2__131\"></a>2. 方法签名</h2>\n<p>在同一个作用域中不能定义两个相同名称的标识符。比如：方法中不能定义两个名字一样的变量，那**为什么类中就可以定义方法名相同的方法呢，**这里就是因为有方法签名的存在了，虽然我们所起的方法名是相同的，但经过编译器中处理后的方法名是有所不同可以区分的。</p>\n<p><strong>方法签名</strong>即：经过编译器编译修改过之后方法最终的名字。具体方式：<strong>方法全路径名</strong>+<strong>参数列表</strong>+<strong>返回值类型，构成方法完整的名字。</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestMethod</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">double</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上述代码经过编译之后，然后使用JDK自带的javap反汇编工具查看，具体操作：</p>\n<ol><li>先对工程进行编译生成.class字节码文件</li><li>在控制台中进入到要查看的.class所在的目录</li><li>输入：javap -v 字节码文件名字即可</li></ol>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\a2233dba26c6631fb516f4d638c7eb9e.png\"/></p>\n<p>方法签名中的一些特殊符号说明：</p>\n<table><thead><tr><th>特殊字符</th><th>数据类型</th></tr></thead><tbody><tr><td>V</td><td>void</td></tr><tr><td>Z</td><td>boolean</td></tr><tr><td>B</td><td>byte</td></tr><tr><td>C</td><td>char</td></tr><tr><td>S</td><td>short</td></tr><tr><td>I</td><td>int</td></tr><tr><td>J</td><td>long</td></tr><tr><td>F</td><td>float</td></tr><tr><td>D</td><td>double</td></tr><tr><td>[</td><td>数组(以 [ 开头，配合其他的特殊字符，表述对应数据类型的数组，几个[表述几维数组)</td></tr><tr><td>L</td><td>引用类型，以L开头，以 ; 结尾，中间是引用类型的全类名</td></tr></tbody></table>\n<h1><a id=\"__179\"></a>三. 递归</h1>\n<p>一个方法在执行过程中调用自身, 就称为 “递归”.</p>\n<p><strong>该种思想在数学和编程中非常有用，因为有些时候，我们遇到的问题直接并不好解决，但是发现将原问题拆分成其子问题之后，子问题与原问题有相同的解法，等子问题解决之后，原问题就迎刃而解了</strong>。</p>\n<p>递归相当于数学上的 “数学归纳法”, 有一个起始条件, 然后有一个递推公式.</p>\n<p>例如, 我们求 N!<br/> 起始条件: N = 1 的时候, N! 为 1. 这个起始条件相当于递归的结束条件.<br/> 递归公式: 求 N! , 直接不好求, 可以把问题转换成 N! =&gt; N * (N-1)!</p>\n<p>递归的必要条件：</p>\n<ol><li>将原问题划分成其子问题，注意：子问题必须要与原问题的解法相同</li><li>递归出口</li></ol>\n<p>这里关于递归不再多做介绍，<strong>在C语言函数部分的博客，对于递归有详细的介绍，可以参考学习。</strong></p>\n<h1><a id=\"___198\"></a>四. 关于 “调用栈”</h1>\n<p>方法调用的时候, 会有一个 “栈” 这样的内存空间描述当前的调用关系. 称为调用栈.</p>\n<p>每一次的方法调用就称为一个 “栈帧”, 每个栈帧中包含了这次调用的参数是哪些, 返回到哪里继续执行等信息.</p>\n<p><strong>可以参考我C语言部分函数栈帧的的博客。</strong></p>\n<h1><a id=\"_205\"></a>结语</h1>\n<p><font color=\"blue\" size=\"4\">各位小伙伴，看到这里就是缘分嘛，希望我的这些内容可以给你带来那么一丝丝帮助，可以的话三连支持一下呗😁！！！ 感谢每一位走到这里的小伙伴，我们可以一起学习交流，一起进步😉！！！加油🏃！！！</font></p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\f33106cefae9be2e9ab7a5d0c2fcff6e.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-08-05 22:18:15", "summary": "活动地址：天学习挑战赛在这里插入图片描述博客主页荣系列专栏一句短话难在坚持贵在坚持成在坚持博客说明尽己所能，把每一篇博客写好，帮助自己熟悉所学知识，也希望自己的这些内容可以帮助到一些在学习路上的伙伴，"}