{"blogid": "126213646", "writerAge": "码龄1年", "writerBlogNum": "72", "writerCollect": "2077", "writerComment": "3545", "writerFan": "2874", "writerGrade": "6级", "writerIntegral": "6764", "writerName": "快到锅里来呀", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126213646.jpg", "writerRankTotal": "2565", "writerRankWeekly": "159", "writerThumb": "2567", "writerVisitNum": "59252", "blog_read_count": "700", "blog_time": "于 2022-08-09 08:30:00 发布", "blog_title": "MySQl表的增删查改（聚合查询+联合查询）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"1.%20%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BA%A6%E6%9D%9F-toc\" style=\"margin-left:0px;\"><a href=\"#1.%20%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BA%A6%E6%9D%9F\">1. 数据库约束</a></p>\n<p id=\"1.1%20null%E7%BA%A6%E6%9D%9F-toc\" style=\"margin-left:40px;\"><a href=\"#1.1%20null%E7%BA%A6%E6%9D%9F\">1.1 null约束</a></p>\n<p id=\"%C2%A01.2%20upique%EF%BC%9A%E5%94%AF%E4%B8%80%E7%BA%A6%E6%9D%9F-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A01.2%20upique%EF%BC%9A%E5%94%AF%E4%B8%80%E7%BA%A6%E6%9D%9F\">1.2 upique：唯一约束</a></p>\n<p id=\"1.3%C2%A0default%EF%BC%9A%E9%BB%98%E8%AE%A4%E5%80%BC%E7%BA%A6%E6%9D%9F-toc\" style=\"margin-left:40px;\"><a href=\"#1.3%C2%A0default%EF%BC%9A%E9%BB%98%E8%AE%A4%E5%80%BC%E7%BA%A6%E6%9D%9F\">1.3 default：默认值约束</a></p>\n<p id=\"1.4%20primary%20key%EF%BC%9A%E4%B8%BB%E9%94%AE%E7%BA%A6%E6%9D%9F%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#1.4%20primary%20key%EF%BC%9A%E4%B8%BB%E9%94%AE%E7%BA%A6%E6%9D%9F%C2%A0\">1.4 primary key：主键约束 </a></p>\n<p id=\"1.5%20foreign%20key%EF%BC%9A%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F-toc\" style=\"margin-left:40px;\"><a href=\"#1.5%20foreign%20key%EF%BC%9A%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F\">1.5 foreign key：外键约束</a></p>\n<p id=\"1.6%20check%E7%BA%A6%E6%9D%9F%EF%BC%88%E4%BA%86%E8%A7%A3%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#1.6%20check%E7%BA%A6%E6%9D%9F%EF%BC%88%E4%BA%86%E8%A7%A3%EF%BC%89\">1.6 check约束（了解）</a></p>\n<p id=\"2.%20%E8%A1%A8%E7%9A%84%E8%AE%BE%E8%AE%A1-toc\" style=\"margin-left:0px;\"><a href=\"#2.%20%E8%A1%A8%E7%9A%84%E8%AE%BE%E8%AE%A1\">2. 表的设计</a></p>\n<p id=\"3.%20%E6%96%B0%E5%A2%9E-toc\" style=\"margin-left:0px;\"><a href=\"#3.%20%E6%96%B0%E5%A2%9E\">3. 新增(查询结果，插入另一个表)</a></p>\n<p id=\"4.%20%E6%9F%A5%E8%AF%A2-toc\" style=\"margin-left:0px;\"><a href=\"#4.%20%E6%9F%A5%E8%AF%A2\">4. 查询</a></p>\n<p id=\"4.1%20%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2-toc\" style=\"margin-left:40px;\"><a href=\"#4.1%20%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2\">4.1 聚合查询</a></p>\n<p id=\"4.1.1%20%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0%C2%A0-toc\" style=\"margin-left:80px;\"><a href=\"#4.1.1%20%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0%C2%A0\">4.1.1 聚合函数 </a></p>\n<p id=\"4.1.2%20group%20by%20%E5%AD%90%E5%8F%A5-toc\" style=\"margin-left:80px;\"><a href=\"#4.1.2%20group%20by%20%E5%AD%90%E5%8F%A5\">4.1.2 group by 子句</a></p>\n<p id=\"4.1.3%20having-toc\" style=\"margin-left:80px;\"><a href=\"#4.1.3%20having\">4.1.3 having</a></p>\n<p id=\"4.2%20%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2-toc\" style=\"margin-left:40px;\"><a href=\"#4.2%20%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2\">4.2 联合查询</a></p>\n<p id=\"4.2.1%20%E5%86%85%E8%BF%9E%E6%8E%A5%EF%BC%88%E5%B8%B8%E7%94%A8%EF%BC%89-toc\" style=\"margin-left:80px;\"><a href=\"#4.2.1%20%E5%86%85%E8%BF%9E%E6%8E%A5%EF%BC%88%E5%B8%B8%E7%94%A8%EF%BC%89\">4.2.1 内连接（常用）</a></p>\n<p id=\"4.2.2%20%E5%A4%96%E8%BF%9E%E6%8E%A5-toc\" style=\"margin-left:80px;\"><a href=\"#4.2.2%20%E5%A4%96%E8%BF%9E%E6%8E%A5\">4.2.2 外连接(左外+右外+全外)</a></p>\n<p id=\"4.2.3%20%E8%87%AA%E8%BF%9E%E6%8E%A5-toc\" style=\"margin-left:80px;\"><a href=\"#4.2.3%20%E8%87%AA%E8%BF%9E%E6%8E%A5\">4.2.3 自连接</a></p>\n<p id=\"4.2.4%20%E5%AD%90%E6%9F%A5%E8%AF%A2-toc\" style=\"margin-left:80px;\"><a href=\"#4.2.4%20%E5%AD%90%E6%9F%A5%E8%AF%A2\">4.2.4 子查询</a></p>\n<p id=\"4.2.5%20%E5%90%88%E5%B9%B6%E6%9F%A5%E8%AF%A2-toc\" style=\"margin-left:80px;\"><a href=\"#4.2.5%20%E5%90%88%E5%B9%B6%E6%9F%A5%E8%AF%A2\">4.2.5 合并查询(union)</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h1 id=\"1.%20%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BA%A6%E6%9D%9F\"><span style=\"color:#fe2c24;\"><strong>1. 数据库约束</strong></span></h1>\n<blockquote>\n<p>约束：对于数据库中的记录做出更详细的检查</p>\n<p><span style=\"color:#956fe7;\"><strong>（1）not null：</strong></span>指示<span style=\"color:#956fe7;\"><strong>某列不能存储null值</strong></span></p>\n<p><span style=\"color:#fe2c24;\"><strong>（2）unique：唯一约束</strong></span></p>\n<p>保证某列的每行必须有唯一值</p>\n<p><span style=\"color:#ff9900;\"><strong>（3）default：默认值约束</strong></span></p>\n<p>规定没有给列赋值时的默认值</p>\n<p><span style=\"color:#a2e043;\"><strong>（4）primary key：主键约束</strong></span></p>\n<p>确保某列（或多个列的结合）有唯一的标识</p>\n<p>有助于更容易快速找到表中的一个特定的记录</p>\n<p><span style=\"color:#4da8ee;\"><strong>（5）foreign key：外键约束</strong></span></p>\n<p>保证一个表中的数据匹配另一表中的值的参照完整性</p>\n<p>（6）check：保证列中的值符合指定的条件</p>\n</blockquote>\n<h2 id=\"1.1%20null%E7%BA%A6%E6%9D%9F\"><span style=\"color:#ff9900;\"><strong>1.1 null约束</strong></span></h2>\n<blockquote>\n<p><span style=\"color:#fe2c24;\"><strong>not null 要求指定列，非空</strong></span></p>\n<p>创建表时如果约束这列非空，那么新增时，这列就不可以为空</p>\n</blockquote>\n<p><img alt=\"\" height=\"347\" src=\"..\\..\\static\\image\\359e4987f0ad45d4aa40d524e532e989.png\" width=\"737\"/></p>\n<h2 id=\"%C2%A01.2%20upique%EF%BC%9A%E5%94%AF%E4%B8%80%E7%BA%A6%E6%9D%9F\"><span style=\"color:#956fe7;\"><strong>1.2 upique：唯一约束</strong></span></h2>\n<blockquote>\n<p><span style=\"color:#fe2c24;\"><strong>unique 值唯一，每次插入、修改数据，都会针对当前数据在表里进行查找，看这个值是否能查到，如果能查到，那么不是唯一的，就会导致插入或修改失败</strong></span></p>\n<p></p>\n<p><span style=\"color:#956fe7;\"><strong>如果使用unique后，先查询，再插入！！！   所以效率比较低</strong></span></p>\n</blockquote>\n<p><img alt=\"\" height=\"532\" src=\"..\\..\\static\\image\\6485b6fbaf634e0da17ba14f31e7110c.png\" width=\"736\"/></p>\n<p>entry 在数据结构出现过，Map时entry叫做入口、条目</p>\n<p>Map没有实现Iterable接口，没法直接遍历，所以把键值对转换成一个Set ，entrySet </p>\n<h2 id=\"1.3%C2%A0default%EF%BC%9A%E9%BB%98%E8%AE%A4%E5%80%BC%E7%BA%A6%E6%9D%9F\"><span style=\"color:#4da8ee;\"><strong>1.3 default：默认值约束</strong></span></h2>\n<blockquote>\n<p><span style=\"color:#fe2c24;\"><strong>default：作用是修改默认值</strong></span></p>\n<p><span style=\"color:#fe2c24;\"><strong>本来表的默认值是null，可以使用 default 把默认值修改成其他值</strong></span></p>\n</blockquote>\n<p><img alt=\"\" height=\"281\" src=\"..\\..\\static\\image\\117038fe14664eee82d0c536d5ac6520.png\" width=\"882\"/></p>\n<h2 id=\"1.4%20primary%20key%EF%BC%9A%E4%B8%BB%E9%94%AE%E7%BA%A6%E6%9D%9F%C2%A0\"><span style=\"color:#a2e043;\"><strong>1.4 primary key：主键约束 </strong></span></h2>\n<blockquote>\n<p><span style=\"color:#fe2c24;\"><strong>primary key 主键 针对每一天记录，作为身份标识</strong></span></p>\n<p><span style=\"color:#fe2c24;\"><strong>主键要保证唯一性，主键也不能为空</strong></span></p>\n</blockquote>\n<p><img alt=\"\" height=\"294\" src=\"..\\..\\static\\image\\773a800b425f4d14a2c907332e98fc43.png\" width=\"789\"/></p>\n<p><img alt=\"\" height=\"184\" src=\"..\\..\\static\\image\\174ef9c4eebf47a7869695a4a6c28516.png\" width=\"816\"/></p>\n<p><span style=\"color:#ff9900;\"><strong> 🤠 使用主键，需要给这个列设置一个唯一的值，我们自己进行分配值的工作，并且还要保证值不会重复，这样会比较麻烦，MySQL提供了一个机制，叫自增主键，来方便分配值</strong></span></p>\n<blockquote>\n<p><span style=\"color:#fe2c24;\"><strong>自增主键 跟在primary key 后面  （primary key auto_increment） ，</strong></span></p>\n<p><span style=\"color:#fe2c24;\"><strong>通过这样的机制，来给主键设置值</strong></span></p>\n</blockquote>\n<p><img alt=\"\" height=\"85\" src=\"..\\..\\static\\image\\9a9d8b6ba9084f75ad9cafe9ffd11544.png\" width=\"983\"/><img alt=\"\" height=\"670\" src=\"..\\..\\static\\image\\4f399b062fed437d9e8901428851034d.png\" width=\"1127\"/></p>\n<blockquote>\n<p><span style=\"color:#fe2c24;\"><strong> 自增主键，都是从最大值之后进行增加的</strong></span></p>\n<p>（虽然这样可能会有空间上的浪费，但从大量数据看，这点浪费不影响）</p>\n</blockquote>\n<p><img alt=\"\" height=\"351\" src=\"..\\..\\static\\image\\384ad63669fe4ba48922a03882e05d83.png\" width=\"1156\"/></p>\n<h2 id=\"1.5%20foreign%20key%EF%BC%9A%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F\"><span style=\"color:#ffd900;\"><strong>1.5 foreign key：外键约束</strong></span></h2>\n<blockquote>\n<p><span style=\"color:#956fe7;\"><strong>外键 foreign key：将两种表联系起来</strong></span></p>\n<p><span style=\"color:#956fe7;\"><strong>........foreign key (当前表的那一列) references 另外一张表(那一列);</strong></span></p>\n<p><img alt=\"\" height=\"102\" src=\"..\\..\\static\\image\\795a6f819ede4814988246d21667e601.png\" width=\"545\"/></p>\n<p>约束别的表的表，叫父表（parent，例子中的班级表）</p>\n<p>被约束的表，叫子表（child，例子中的学生表）</p>\n</blockquote>\n<p><span style=\"color:#ff9900;\"><strong>（1）创建班级表，创建外键约束的学生表 </strong></span></p>\n<p><img alt=\"\" height=\"199\" src=\"..\\..\\static\\image\\9546032ae39c41d9a1d332e110b8548e.png\" width=\"1200\"/></p>\n<p><span style=\"color:#ff9900;\"><strong>（2）给学生表插入数据，失败 </strong></span></p>\n<p><img alt=\"\" height=\"102\" src=\"..\\..\\static\\image\\b77b66e3c91d48f3a0d762fa5f0d4f97.png\" width=\"1200\"/></p>\n<p><span style=\"color:#ff9900;\"><strong>（3）给班级表插入数据，然后再给学生表插入数据，成功</strong></span></p>\n<p><img alt=\"\" height=\"437\" src=\"..\\..\\static\\image\\c2ed316e173a4b659c9b424639ecaf69.png\" width=\"1200\"/></p>\n<blockquote>\n<p><span style=\"color:#fe2c24;\"><strong> 这里也要求，子表中引用父表的这一列，必须是primary key 或者 unique</strong></span></p>\n</blockquote>\n<p><span style=\"color:#ff9900;\"><strong>（4）删除或修改父表的数据，失败</strong></span></p>\n<p><img alt=\"\" height=\"192\" src=\"..\\..\\static\\image\\8d81a8139bf546238e4845b29edc1226.png\" width=\"1200\"/></p>\n<blockquote>\n<p><span style=\"color:#fe2c24;\"><strong>修改或删除记录也要看当前记录是否被子表引用，如果引用不能随便修改删除，</strong></span></p>\n<p><span style=\"color:#fe2c24;\"><strong>如果没有引用就可以修改或删除</strong></span></p>\n</blockquote>\n<h2 id=\"1.6%20check%E7%BA%A6%E6%9D%9F%EF%BC%88%E4%BA%86%E8%A7%A3%EF%BC%89\"><span style=\"color:#ad720d;\"><strong>1.6 check约束（了解）</strong></span></h2>\n<blockquote>\n<p><span style=\"color:#fe2c24;\"><strong>check 不支持mysql</strong></span></p>\n<p>通过check中的表达式，对某些要求可以更加灵活实现</p>\n</blockquote>\n<hr/>\n<p></p>\n<h1 id=\"2.%20%E8%A1%A8%E7%9A%84%E8%AE%BE%E8%AE%A1\"><span style=\"color:#fe2c24;\"><strong>2. 表的设计</strong></span></h1>\n<blockquote>\n<p><span style=\"color:#ff9900;\"><strong>（1）一对一</strong></span></p>\n</blockquote>\n<p><span style=\"color:#ff9900;\"><strong>比如网上银行系统  ，一个客户，只有一个账号；一个账号也对应一个账号</strong></span></p>\n<p>设计方式可以有多种</p>\n<p><span style=\"color:#fe2c24;\"><strong>1）把所有信息放入一个表中</strong></span></p>\n<p>customer-account（身份证号，姓名，手机号，密码，用户名）</p>\n<p><span style=\"color:#fe2c24;\"><strong>2）在客户表中，加上一个账号id</strong></span></p>\n<p>customer（customerId，姓名，手机号，身份证号，<span style=\"color:#0d0016;\"><strong>accountId</strong></span>）</p>\n<p><span style=\"color:#0d0016;\"><strong>account</strong></span>（accountId，用户名，密码）</p>\n<p><span style=\"color:#fe2c24;\"><strong>3）反之，也可以在账号表中加客户id</strong></span></p>\n<p><span style=\"color:#fe2c24;\"><strong>customer</strong></span>（customerId，姓名，手机号，身份证号）</p>\n<p>account（accountId，用户名，密码，<span style=\"color:#fe2c24;\"><strong>customerId</strong></span>）</p>\n<blockquote>\n<p><span style=\"color:#ff9900;\"><strong>（2）一对多</strong></span></p>\n</blockquote>\n<p><span style=\"color:#ff9900;\"><strong>一个银行经理，可以专属多个客户</strong></span></p>\n<p><span style=\"color:#ff9900;\"><strong>一个客户，只能属于一个银行经理</strong></span></p>\n<p><span style=\"color:#ff9900;\"><strong> 1）设计一个客户表，一个银行经理表，客户表加银行经理id进行联系</strong></span></p>\n<p><img alt=\"\" height=\"203\" src=\"..\\..\\static\\image\\14de7d9488ce44d5858dc20a28735c8a.png\" width=\"407\"/></p>\n<p><span style=\"color:#ff9900;\"><strong> 2）设计一个客户表，一个银行经理表，银行经理表加客户id进行联系（</strong></span><span style=\"color:#0d0016;\"><strong>此方法行不通</strong></span><span style=\"color:#ff9900;\"><strong>）</strong></span></p>\n<p><img alt=\"\" height=\"223\" src=\"..\\..\\static\\image\\685ae5654dac4859bfe0e9eb3cc39468.png\" width=\"393\"/></p>\n<p><span style=\"color:#fe2c24;\"><strong>但是需要注意的是第二中这样的写法是不行的，因为customerld这里每行放多个，</strong></span></p>\n<p><span style=\"color:#fe2c24;\"><strong>在MySQL中是没有数组类型的，所以不能这样写</strong></span></p>\n<blockquote>\n<p><span style=\"color:#ff9900;\"><strong>（3）多对多</strong></span></p>\n</blockquote>\n<p><span style=\"color:#ff9900;\"><strong> 比如 一个客户，可以购买多个理财产品</strong></span></p>\n<p><span style=\"color:#ff9900;\"><strong>一个理财产品，也可以由多个客户购买</strong></span></p>\n<p><span style=\"color:#ff9900;\"><strong>1）创建一个客户表，一个理财产品表，一个关联表</strong></span></p>\n<p><img alt=\"\" height=\"246\" src=\"..\\..\\static\\image\\e189c6a91bda474b9a1ec0c5eb5e9834.png\" width=\"466\"/></p>\n<hr/>\n<h1 id=\"3.%20%E6%96%B0%E5%A2%9E\"><span style=\"color:#956fe7;\"><strong>3. 新增(查询结果，插入另一个表)</strong></span></h1>\n<blockquote>\n<p><span style=\"color:#fe2c24;\"><strong>可以把查询的结果，插入到另一个另一个表中</strong></span></p>\n<p><strong><span style=\"color:#a2e043;\">create table 表2 第一个表查询结果;</span></strong></p>\n<p><span style=\"color:#fe2c24;\"><strong>(也可以插入部分，通过条件筛选，但是注意列的个数和类型要匹配)</strong></span></p>\n</blockquote>\n<p><img alt=\"\" height=\"388\" src=\"..\\..\\static\\image\\aaded0047a00439dadde5f6cce75890f.png\" width=\"1200\"/></p>\n<hr/>\n<p></p>\n<h1 id=\"4.%20%E6%9F%A5%E8%AF%A2\"><span style=\"color:#ffd900;\"><strong>4. 查询</strong></span></h1>\n<h2 id=\"4.1%20%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2\"><span style=\"color:#ff9900;\"><strong>4.1 聚合查询</strong></span></h2>\n<blockquote>\n<p><span style=\"color:#fe2c24;\"><strong>聚合查询，是把行和行放在一起进行计算</strong></span></p>\n</blockquote>\n<h3 id=\"4.1.1%20%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0%C2%A0\"><span style=\"color:#a2e043;\"><strong>4.1.1 聚合函数</strong></span> </h3>\n<table align=\"left\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:650px;\"><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><th>count()</th><td>返回查询到的数据的  数量（单查行不计空值，查全部*计空值）</td></tr><tr><th>sum()</th><td>返回查询到的数据的 总和，不是数字没有意义</td></tr><tr><th>avg()</th><td>返回查询到的数据的 平均值</td></tr><tr><th>max()</th><td>返回查询到的数据的 最大值</td></tr><tr><th> <p>min()</p> </th><td>返回查询到的数据的 最小值</td></tr></tbody></table>\n<h3></h3>\n<h3></h3>\n<h3></h3>\n<h3></h3>\n<h3></h3>\n<h3></h3>\n<h3></h3>\n<p> 下面看两个例子<img alt=\"\" height=\"398\" src=\"..\\..\\static\\image\\b7bf583f8ebf44adb7bc890abd6d80bd.png\" width=\"1110\"/></p>\n<h3 id=\"4.1.2%20group%20by%20%E5%AD%90%E5%8F%A5\"><span style=\"color:#fe2c24;\"><strong>4.1.2 group by 子句</strong></span></h3>\n<blockquote>\n<p><span style=\"color:#956fe7;\"><strong>group by子句：可以对指定列进行分组查询，指定的字段必须是‘’分组依据字段‘’，其他字段若想出现必须包含在聚合函数中</strong></span></p>\n</blockquote>\n<p><span style=\"color:#ff9900;\"><strong>创建建一个emp表 </strong></span></p>\n<p><img alt=\"\" height=\"496\" src=\"..\\..\\static\\image\\4efe611f167d496fb195351823ed9743.png\" width=\"1200\"/></p>\n<p><span style=\"color:#fe2c24;\"><strong> （1）查询每个岗位的人数</strong></span></p>\n<p><span style=\"color:#956fe7;\"><strong>思路 先查询都有什么岗位，也就是对岗位role进行分组，然后查询每个岗位的人数</strong></span></p>\n<p><img alt=\"\" height=\"592\" src=\"..\\..\\static\\image\\b296312d40294af7a70b5811a796bc69.png\" width=\"1180\"/></p>\n<p><span style=\"color:#fe2c24;\"><strong> （2）查询每个岗位的平均薪资</strong></span></p>\n<p><span style=\"color:#956fe7;\"><strong>思路 先查有哪些岗位，也就是对岗位进行分组，然后再对每种岗位求平均工资</strong></span></p>\n<p><span style=\"color:#956fe7;\"><strong>求最高工资，和最低工资</strong></span></p>\n<p><img alt=\"\" height=\"255\" src=\"..\\..\\static\\image\\0c49cf5839a1489b9b44b71d15f1ff5e.png\" width=\"679\"/></p>\n<p><img alt=\"\" height=\"251\" src=\"..\\..\\static\\image\\d5ab0dd8b5094d3b92589b9f77d198f3.png\" width=\"994\"/></p>\n<hr/>\n<h3 id=\"4.1.3%20having\"><span style=\"color:#956fe7;\"><strong>4.1.3 having</strong></span></h3>\n<blockquote>\n<p><span style=\"color:#a2e043;\"><strong>group by 子句进行分组后，</strong></span><span style=\"color:#fe2c24;\"><strong>如果要对分组结果进行条件筛选时，不可以使用where语句，而要使用having</strong></span></p>\n<p></p>\n<p></p>\n<p><span style=\"color:#ff9900;\"><strong>分组查询，还可以指定条件，需要区别的是</strong></span></p>\n<p><strong><span style=\"color:#956fe7;\">分组之前，使用条件筛选；   使用where</span></strong></p>\n<p><strong><span style=\"color:#956fe7;\">分组之后，进行条件筛选；   使用having</span></strong></p>\n</blockquote>\n<p><span style=\"color:#ff9900;\"><strong>（1）查询每个岗位的平均薪资（除去 张三 这个记录）</strong></span></p>\n<p><span style=\"color:#956fe7;\"><strong>思路 先除去张三，再进行分组（也就是分组之前，进行条件筛选）</strong></span></p>\n<p><img alt=\"\" height=\"167\" src=\"..\\..\\static\\image\\b389b7f48fa8462d955ee6c913957862.png\" width=\"570\"/></p>\n<p><span style=\"color:#ff9900;\"><strong>（2）查询平均薪资 &gt; 10000的岗位</strong></span></p>\n<p><span style=\"color:#956fe7;\"><strong>先分组，计算平均薪资，然后再找到平均薪资大于10000的岗位</strong></span></p>\n<p><span style=\"color:#956fe7;\"><strong>（也就是先分组，再进行条件筛选）</strong></span></p>\n<p><img alt=\"\" height=\"241\" src=\"..\\..\\static\\image\\c095f803aabe48ebb36a124f3edce17d.png\" width=\"1004\"/></p>\n<p><span style=\"color:#ff9900;\"><strong>（3）求除去张三之外，每个岗位的平均薪资，并且保留平均薪资 &gt; 10000的岗位</strong></span></p>\n<p><img alt=\"\" height=\"236\" src=\"..\\..\\static\\image\\05627279bbff47cd80c354a2002bc734.png\" width=\"1200\"/></p>\n<hr/>\n<p></p>\n<h2 id=\"4.2%20%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2\"><span style=\"color:#1c7331;\"><strong>4.2 联合查询</strong></span></h2>\n<blockquote>\n<p>实际开发中往往数据来自不同的表，所以需要多表联合查询。多表查询是对多张表的数据取笛卡尔积：</p>\n<p><strong><span style=\"color:#fe2c24;\">笛卡尔积，是两个表记录，排列组合的结果</span></strong></p>\n</blockquote>\n<p>笛卡尔的行数是一个相乘的关系，如果原来行数很多，相乘后行数就会更多</p>\n<p>在进行联合查询的过程，就是在进行计算笛卡尔积的过程</p>\n<p>当表比较大时，如果多表查询，机会比较低效，很可能会是危险操作</p>\n<p><span style=\"color:#fe2c24;\"><strong>笛卡尔积的列数，是两个表的列数之和</strong></span></p>\n<p><span style=\"color:#fe2c24;\"><strong>笛卡尔积的行数，是两个表的行数之积</strong></span></p>\n<p><span style=\"color:#956fe7;\"><strong>联合查询/多表查询 = 笛卡尔积 +  连接条件 + 其他条件（根据其他的需求）</strong></span></p>\n<p><span style=\"color:#956fe7;\"><strong>联合查询：相当于把数据先变多，再变少的过程</strong></span></p>\n<p>创建四张表</p>\n<p><img alt=\"\" height=\"842\" src=\"..\\..\\static\\image\\306920bf082a43cc818cb35d8266e7a0.png\" width=\"1200\"/></p>\n<h3 id=\"4.2.1%20%E5%86%85%E8%BF%9E%E6%8E%A5%EF%BC%88%E5%B8%B8%E7%94%A8%EF%BC%89\"><span style=\"color:#4da8ee;\"><strong>4.2.1 内连接（常用）</strong></span></h3>\n<blockquote>\n<p><span style=\"color:#fe2c24;\"><strong>select 字段 from 表1 join 表2 on 连接条件 and 其他条件;</strong></span></p>\n<p><span style=\"color:#fe2c24;\"><strong>select 字段 from 表1,表2 where 连接条件 and 其他条件</strong></span></p>\n</blockquote>\n<blockquote>\n<p>内连接，方法四步走</p>\n<p><span style=\"color:#ff9900;\"><strong>（1）进行笛卡尔积</strong></span></p>\n<p>select * from 表1,表2;</p>\n<p><span style=\"color:#956fe7;\"><strong>（2）添加连接条件，去除无用信息</strong></span></p>\n<p>select * form 表1,表2 where 连接条件</p>\n<p><span style=\"color:#4da8ee;\"><strong>（3）添加其他条件，进行信息筛选</strong></span></p>\n<p> select * form 表1,表2 where 连接条件 and 其他条件;</p>\n<p><span style=\"color:#a2e043;\"><strong>（4）精简列，去除无用列</strong></span></p>\n<p> select 字段 form 表1,表2 where 连接条件 and 其他条件;</p>\n</blockquote>\n<p><span style=\"color:#ff9900;\"><strong>（1）查询“许仙”同学的成绩</strong></span></p>\n<p><span style=\"color:#956fe7;\"><strong>学生表中查名字，分数表中查成绩</strong></span></p>\n<p><span style=\"color:#1c7331;\"><strong>思路1：根据许仙同学的名字，找到学号，再根据学号找到对应的分数</strong></span></p>\n<p><span style=\"color:#1c7331;\"><strong>思路2：学生表和分数表笛卡尔积，根据条件进行筛选</strong></span></p>\n<p><span style=\"color:#fe2c24;\"><strong>使用where做 </strong></span></p>\n<p><img alt=\"\" height=\"1200\" src=\"..\\..\\static\\image\\49ee97bf36f848b5be8c9b930acd2b4a.png\" width=\"1200\"/></p>\n<p><span style=\"color:#fe2c24;\"><strong> 使用join...on...做</strong></span></p>\n<p><img alt=\"\" height=\"806\" src=\"..\\..\\static\\image\\290d0d982e9741028a68ec2e74cff0ad.png\" width=\"1200\"/></p>\n<div>\n<span style=\"color:#ff9900;\"><strong>（2）查询所有同学的总成绩，及同学的个人信息</strong></span>\n</div>\n<div></div>\n<div>\n<span style=\"color:#956fe7;\"><strong>思路 按照同学身份进行分组，然后依次每次求和</strong></span>\n</div>\n<div></div>\n<div>\n<img alt=\"\" height=\"1200\" src=\"..\\..\\static\\image\\c6053dce6b664f088c5b69ff6c63c839.png\" width=\"1200\"/>\n</div>\n<div>\n<span style=\"color:#ff9900;\"><strong>（3）查询所有同学的成绩，及同学的个人信息</strong></span>\n</div>\n<div></div>\n<div>\n<span style=\"color:#956fe7;\"><strong>查询出每个同学的成绩，带有课程信息</strong></span>\n</div>\n<div>\n<span style=\"color:#956fe7;\"><strong>同学名在学生表，课程名在课程表，分数在分数表中</strong></span>\n</div>\n<div></div>\n<div>\n 此时就要三张表的笛卡尔积\n</div>\n<div>\n<span style=\"color:#fe2c24;\"><strong>使用where</strong></span>\n</div>\n<div></div>\n<div>\n<img alt=\"\" height=\"1200\" src=\"..\\..\\static\\image\\6207e923e83248f89f64f15f3109293b.png\" width=\"1200\"/>\n</div>\n<p><span style=\"color:#fe2c24;\"><strong>使用 join...on... </strong></span></p>\n<p><img alt=\"\" height=\"1200\" src=\"..\\..\\static\\image\\79ad26acfac34c81b16f47668f352d52.png\" width=\"1200\"/></p>\n<hr/>\n<p></p>\n<h3 id=\"4.2.2%20%E5%A4%96%E8%BF%9E%E6%8E%A5\"><span style=\"color:#fe2c24;\"><strong>4.2.2 外连接(左外+右外+全外)</strong></span></h3>\n<blockquote>\n<p>外连接反为左外连接和右外连接</p>\n<p>（1） 左外连接，表1完全显示</p>\n<p><span style=\"color:#fe2c24;\"><strong>select 字段  from 表名1 left join 表名2 on 连接条件; </strong></span></p>\n<p>（2）右外连接，表2完全显示</p>\n<p><span style=\"color:#fe2c24;\"><strong>select 字段 from 表名1 right join 表名2 on 连接条件;</strong></span></p>\n</blockquote>\n<p><img alt=\"\" height=\"531\" src=\"..\\..\\static\\image\\caad8bf23c934a9884611ab63a9dfa19.png\" width=\"1102\"/>下面创建下面这两个信息不一一对应的两个表</p>\n<p><img alt=\"\" height=\"254\" src=\"..\\..\\static\\image\\926f1441638a41bfa8e516def7f4a29d.png\" width=\"713\"/><strong> 看一下内外连接的区别</strong></p>\n<p><img alt=\"\" height=\"910\" src=\"..\\..\\static\\image\\0d1b632cae524e8dbeaad9b068cb90f6.png\" width=\"772\"/></p>\n<blockquote>\n<p>如果两张表，完全重合，内外连接没有区别</p>\n<p>如果两张表，只有一部分重合，<span style=\"color:#956fe7;\"><strong>内连接就是获取到‘交集’；</strong></span></p>\n<p><img alt=\"\" height=\"156\" src=\"..\\..\\static\\image\\1b0a401953b6443c815eea99b7dc6e40.png\" width=\"492\"/></p>\n</blockquote>\n<p> <img alt=\"\" height=\"114\" src=\"..\\..\\static\\image\\1f2ccbbe144d41febfd87a6d8579999e.png\" width=\"365\"/></p>\n<blockquote>\n<p><span style=\"color:#4da8ee;\"><strong> 左外连接和右外连接，主要是看表的先后顺序</strong></span></p>\n<p><span style=\"color:#4da8ee;\"><strong>在join左侧还是右侧</strong></span></p>\n<p>select * from <strong><span style=\"color:#956fe7;\">studen</span>t</strong> left join score；    左外连接 student</p>\n<p>select * from score right join <span style=\"color:#956fe7;\"><strong>student</strong></span>；  右外连接 student</p>\n</blockquote>\n<hr/>\n<h3 id=\"4.2.3%20%E8%87%AA%E8%BF%9E%E6%8E%A5\"><span style=\"color:#956fe7;\"><strong>4.2.3 自连接</strong></span></h3>\n<blockquote>\n<p>自连接是指在同一张表连接自身进行查询(<span style=\"color:#fe2c24;\"><strong>自己和自己进行笛卡尔积</strong></span>)</p>\n<p><span style=\"color:#fe2c24;\"><strong>思路 ‘‘行’’转为‘’列‘’</strong></span></p>\n</blockquote>\n<p><span style=\"color:#ff9900;\"><strong>显示所有“计算机原理”成绩比“Java”成绩高的成绩信息</strong></span></p>\n<p><img alt=\"\" height=\"949\" src=\"..\\..\\static\\image\\87000d76d93c47d08cf53591757d84e0.png\" width=\"1100\"/></p>\n<p> 下面写一下，自连接的过程分析</p>\n<p><img alt=\"\" height=\"1159\" src=\"..\\..\\static\\image\\98d930a6e1ff4e79a874ac0d0f4529c7.png\" width=\"1200\"/></p>\n<blockquote>\n<p><span style=\"color:#ff9900;\"><strong>自连接的代价</strong></span></p>\n<p><span style=\"color:#ff9900;\"><strong>1.运行的开销</strong></span></p>\n<p><span style=\"color:#ff9900;\"><strong>2.可读性的成本 </strong></span></p>\n</blockquote>\n<hr/>\n<p></p>\n<h3 id=\"4.2.4%20%E5%AD%90%E6%9F%A5%E8%AF%A2\"><span style=\"color:#a2e043;\"><strong>4.2.4 子查询</strong></span></h3>\n<blockquote>\n<p>子查询是指嵌入在其他sql语句中的select语句，也叫嵌套查询</p>\n<p><span style=\"color:#fe2c24;\"><strong>本质就是把多个查询语句，给组合成一个查询语句</strong></span></p>\n<p><span style=\"color:#fe2c24;\"><strong>用一个查询的结果的临时表，基于这个临时表再发起另一组查询</strong></span></p>\n</blockquote>\n<p><strong><span style=\"color:#956fe7;\">（1）单行子查询 返回一行记录的子查询</span></strong></p>\n<p><span style=\"color:#ff9900;\"><strong>查询与“不想毕业”同学的同班同学</strong></span></p>\n<p><img alt=\"\" height=\"829\" src=\"..\\..\\static\\image\\3ce1c88f57a341c3a12a46941c092e85.png\" width=\"1200\"/></p>\n<blockquote>\n<p>子查询可以理解为套娃，一层套一层，但如果套娃太复杂，就会非常影响理解 </p>\n</blockquote>\n<p><span style=\"color:#956fe7;\"><strong> （2）多行子查询 返回多行记录的子查询</strong></span></p>\n<blockquote>\n<p><span style=\"color:#a2e043;\"><strong>如果子查询，返回的结构是多条记录，就可以使用in来进行子查询</strong></span></p>\n</blockquote>\n<p><span style=\"color:#ff9900;\"><strong>查询“语文”或“英文”课程的成绩信息</strong></span></p>\n<p><img alt=\"\" height=\"614\" src=\"..\\..\\static\\image\\3b0c53485ba74e7999a0d85bcfc9dd1f.png\" width=\"1200\"/></p>\n<blockquote>\n<p> 多行子查询  除了可以使用in之外，</p>\n<p>也可以使用exists ，<span style=\"color:#fe2c24;\"><strong>exists写法，执行效率和可读性都远低于in写法</strong></span></p>\n<p>但是在特殊情况下，exists可以带头in</p>\n<p><span style=\"color:#fe2c24;\"><strong>in的子查询结构是保存在内存中，</strong></span></p>\n<p><span style=\"color:#fe2c24;\"><strong>如果子查询结果集特别大，内存放不下，就需要使用exists</strong></span></p>\n</blockquote>\n<hr/>\n<p></p>\n<h3 id=\"4.2.5%20%E5%90%88%E5%B9%B6%E6%9F%A5%E8%AF%A2\"><span style=\"color:#956fe7;\"><strong>4.2.5 合并查询(union)</strong></span></h3>\n<blockquote>\n<p><span style=\"color:#fe2c24;\"><strong>使用union或者union all 来完成把多个查询的结果集合，合并到一起  </strong></span></p>\n<p></p>\n<p><span style=\"color:#ff9900;\"><strong>  union   在合并时，如果合并时有重复数据，去重</strong></span></p>\n<p><span style=\"color:#ff9900;\"><strong>  union all 在合并时，如果合并时有重复的数据，不去重</strong></span></p>\n</blockquote>\n<p><span style=\"color:#956fe7;\"><strong> 查询id小于3，或者名字为“英文”的课程</strong></span></p>\n<p><img alt=\"\" height=\"493\" src=\"..\\..\\static\\image\\59edc7ac7a2440b99bc37c2187c716c2.png\" width=\"1070\"/></p>\n<blockquote>\n<p><span style=\"color:#4da8ee;\"><strong>union 可以 将不同的表合并在一块查询</strong></span></p>\n<p><span style=\"color:#4da8ee;\"><strong>or 只能在同一张表中查询 </strong></span></p>\n</blockquote>\n<hr/>\n<p></p>\n</div>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-08-09 08:30:00", "summary": "目录数据库约束约束：唯一约束：默认值约束：主键约束：外键约束约束了解表的设计新增查询结果，插入另一个表查询聚合查询聚合函数子句联合查询内连接常用外连接左外右外全外自连接子查询合并查询数据库约束约束：对"}