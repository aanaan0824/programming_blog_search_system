{"blogid": "125516266", "writerAge": "码龄5年", "writerBlogNum": "118", "writerCollect": "603", "writerComment": "151", "writerFan": "4353", "writerGrade": "4级", "writerIntegral": "1181", "writerName": "小丫头呀", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125516266.jpg", "writerRankTotal": "18817", "writerRankWeekly": "3262", "writerThumb": "133", "writerVisitNum": "176407", "blog_read_count": "1530", "blog_time": "已于 2022-06-30 20:32:20 修改", "blog_title": "C#使用西门子S7 协议读写PLC DB块", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<blockquote>\n<ul><li>教大家使用C#如何方便快速的读写西门子DB块的值，实现上位机跟plc进行通讯的流程</li><li>使用的西门子PLC型号，S7 1200 </li></ul>\n</blockquote>\n<h3>1.Nuget 安装s7 驱动包</h3>\n<p><img alt=\"\" height=\"548\" src=\"..\\..\\static\\image\\43cdcb331003452e8138a4b550b59221.png\" width=\"900\"/></p>\n<h3> 2.西门子plc定义一个db块，这个是我们上位机要读写的DB</h3>\n<p><img alt=\"\" height=\"251\" src=\"..\\..\\static\\image\\3e9645ff3810450f86d39ed0a1717ed1.png\" width=\"947\"/></p>\n<h2> 3. 根据西门子S7 协议文档</h2>\n<blockquote>\n<p>读取DB块的方式有很多种，直接根据该DB的偏移量进行读写也行，但读或写数据都需要进行对应的数据类型转换才能最终拿到值或写进去，个人觉得太麻烦了。不过文档也提供了一种比较简单的方式，就是读写类的方式。</p>\n</blockquote>\n<h3>3.1 读写类的原理，是通过反射处理的，不过我们并不需要关心它是如何反射的，我们只关心我们要如何使用。</h3>\n<h3>3.2 首先，需要建立一个类，跟西门子 DB块 名称一样的实体类</h3>\n<blockquote>\n<p>西门子plc建立的DB 块名称 </p>\n</blockquote>\n<p><img alt=\"\" height=\"236\" src=\"..\\..\\static\\image\\15b80f656f8142f788bee6282e047c6f.png\" width=\"812\"/></p>\n<blockquote>\n<p> C# 建立对应的db块名称的类属性</p>\n</blockquote>\n<p><img alt=\"\" height=\"211\" src=\"..\\..\\static\\image\\8a2f0b003f93453d9e423cf61b110bf3.png\" width=\"846\"/></p>\n<h2> 4. 类建立完成，我们通过接口的方式实现读写数据</h2>\n<blockquote>\n<p>接口定义两种，普通接口和泛型接口。后面会介绍使用泛型接口和普通接口的区别以及好处</p>\n</blockquote>\n<h3>4.1 普通接口的实现</h3>\n<blockquote>\n<p> 根据s7 文档，提供了ReadClass读取的方法。提供读取的方法有很多种，我们只介绍一种方式，就是通过传入建立好的实体类。其他自行研究实现。</p>\n<div>\n<span style=\"color:#0000ff;\"> public void </span>\n<span style=\"color:#000000;\">ReadClass(</span>\n<span style=\"color:#0000ff;\">object </span>\n<span style=\"color:#000000;\">sourceClass, </span>\n<span style=\"color:#0000ff;\">int </span>\n<span style=\"color:#000000;\">db, </span>\n<span style=\"color:#0000ff;\">int </span>\n<span style=\"color:#000000;\">startByteAdr = 0)</span>\n</div>\n<ul><li><span style=\"color:#000000;\">sourceClass 分配值的类实例</span></li><li><span style=\"color:#000000;\">db 数据块</span></li><li><span style=\"color:#000000;\">startByteAdr </span>读取字体起始地址</li></ul>\n</blockquote>\n<h3> 4.2 我们知道该方法的传入参数后，接着需要定义接口的方法。</h3>\n<p><img alt=\"\" height=\"158\" src=\"..\\..\\static\\image\\df6ec5573d384f8286f6aa16c159e5af.png\" width=\"948\"/></p>\n<blockquote>\n<p> 为什么要定义返回一个实体，因为我们读数据时，需要传入一个实体，读取结束后，Plc的Db块的值就会反射在这个实体中，我们通过这个实体取到最新读到的数值。接下来我们实现这个接口方法。</p>\n</blockquote>\n<p><img alt=\"\" height=\"175\" src=\"..\\..\\static\\image\\a98dc667424a4015b1857124b386b146.png\" width=\"1089\"/></p>\n<blockquote>\n<p> 1.上面的实现方式，它是等同于下面的书写方式。</p>\n<pre><code class=\"language-cs\">CathodeEntity testClass = new CathodeEntity();\nplc.ReadClass(testClass, 5);</code></pre>\n<p>  只不过，我为了防止每一次调用都会重新new 一个CathodeEntity类。我就把这个 CathodeEntity 类设计成单例模式了。永远只实例化一次，我们需要修改的只是这个类的属性值而已。后面的5，意思就我们要读的DB块5</p>\n<p><img alt=\"\" height=\"134\" src=\"..\\..\\static\\image\\85361bfcec154871ab0e33203df6c0df.png\" width=\"297\"/></p>\n<p></p>\n<p> 2.单列实例类 CathodeEntity</p>\n<pre><code class=\"language-cs\">public class CathodeEntity\n    {\n        public bool CathodeUp { get; set; }\n        public bool EntryAllowed { get; set; }\n        public bool LeaveAllowed { get; set; }\n        // 定义一个静态变量来保存类的实例\n        private static CathodeEntity uniqueInstance;\n        // 定义一个标识确保线程同步\n        private static readonly object locker = new object();\n        // 定义私有构造函数，使外界不能创建该类实例\n        private CathodeEntity()\n        {\n\n        }\n        /// &lt;summary&gt;\n        /// 定义公有方法提供一个全局访问点,同时你也可以定义公有属性来提供全局访问点\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public static CathodeEntity GetInstance()\n        {\n            // 当第一个线程运行到这里时，此时会对locker对象 \"加锁\"，\n            // 当第二个线程运行该方法时，首先检测到locker对象为\"加锁\"状态，该线程就会挂起等待第一个线程解锁\n            // lock语句运行完之后（即线程运行完之后）会对该对象\"解锁\"\n            if (uniqueInstance == null)\n            {\n                lock (locker)\n                {\n                    // 如果类的实例不存在则创建，否则直接返回\n                    if (uniqueInstance == null)\n                    {\n                        uniqueInstance = new CathodeEntity();\n                    }\n                }\n            }\n            return uniqueInstance;\n        }\n    }</code></pre>\n<p>3.单例设计模式<a class=\"link-info\" href=\"https://www.cnblogs.com/zhili/p/SingletonPatterm.html\" title=\"参考 \">参考 </a></p>\n</blockquote>\n<h3>4.3 接下来，调用该接口，就能获取到plc 的值了。</h3>\n<p><img alt=\"\" height=\"217\" src=\"..\\..\\static\\image\\ebecf62a2f514f7cb9f63b86c9048a67.png\" width=\"1159\"/></p>\n<p> 读取到的值跟西门子PLC DB5的值是一样的<img alt=\"\" height=\"232\" src=\"..\\..\\static\\image\\1b3199cff5484abdbad2bb590b776b48.png\" width=\"889\"/></p>\n<h2> 5. 以上就是普通接口的实现方式，但如果我们是多个db块，按照常规是不是得写N个实现方法，这样不仅不容易维护，代码量也多。所以我们把接口设计成泛型的实现。</h2>\n<blockquote>\n<p>为什么能设计泛型，根据这个s7 协议，读类的方法，第一个参数是object 类型，也可以是具体的实例类型。</p>\n</blockquote>\n<h3>5.1 我们要设定接口约束类型。为什么要这样干，就是我们要让实现这个接口的类，规定它这个T类型，你不能传int 或string等，必须传个类给它。这样就防止，接口实现的时候，你传错参数了。</h3>\n<h3><img alt=\"\" height=\"398\" src=\"..\\..\\static\\image\\092f93564d9249f5bcc3af6a505da0da.png\" width=\"1200\"/> 5.2 接着，我们实现这个泛型接口，那么这个t，我们就可以换成，我们跟Plc定义的数据块，建立的对应实体类了。</h3>\n<blockquote>\n<p>例如，当前Plc有一个db块5，我们建立对应的实体属性类名是CathodeEntity，我们调用的时候就传CathodeEntity 实体进来。如果plc 有多个db块，我们也要有多个对应的实体类。这个时候我们就可以把不同的实体类传进去，返回来就是plc 具体db块的值了。</p>\n</blockquote>\n<p><strong>实现接口 </strong></p>\n<p><img alt=\"\" height=\"351\" src=\"..\\..\\static\\image\\26d5022774d74369aa6680053013938c.png\" width=\"1018\"/></p>\n<h3> 5.3 调用接口。首先实例化CathodeEntity 实体类，把CathodeEntity传进去，得到的就是对应Db块5的值。如果是其他Db块，就需要建立跟plc db块名称对应的实体类，然后再CathodeEntity 换成要新建读取的类。这样就实现的接口方法复用。</h3>\n<p><img alt=\"\" height=\"126\" src=\"..\\..\\static\\image\\723db692a3cb4c1ba0eb96a85f319e04.png\" width=\"961\"/></p>\n<h2> 6. 接口调用具体实现。</h2>\n<p><img alt=\"\" height=\"641\" src=\"..\\..\\static\\image\\8ea3a3cac4314a15b021bbb02ff48ee5.png\" width=\"1023\"/></p>\n<h3> 6.1 Plc 连接类，因为我只需要实例化一次，所以也要把它设计成了单例模式</h3>\n<pre><code>    /// &lt;summary&gt;\n    /// 正极缓存货架plc\n    /// &lt;/summary&gt;\n    internal class CathodeBufferRack\n    {\n        //定义静态变量保存实例\n        public static volatile Plc CathodePlc;\n        //定义一个标识确保线程同步\n        private static object lockHelper = new object();\n        //定义私有变量，使外部不能创建该类实例\n        private CathodeBufferRack()\n        {\n\n        }\n        public static Plc Instance(string DeviceIp)\n        {\n            if(CathodePlc == null)\n            {\n                lock (lockHelper)\n                {\n                    if (CathodePlc == null)\n                    {\n                        CathodePlc = new Plc(CpuType.S71200, DeviceIp, 0,1);\n                        CathodePlc.Open();\n                        if (!CathodePlc.IsConnected)\n                        {\n                            CathodePlc.Close();\n                            CathodePlc = null;\n                        }\n                    }\n                }\n            }\n            return CathodePlc;\n        }\n    }</code></pre>\n<h2> 7. 写plc db也同样的道理。</h2>\n<h3>7.1 定义写的接口方法</h3>\n<p><img alt=\"\" height=\"652\" src=\"..\\..\\static\\image\\e02b13e5851640849f2830dbb1240b75.png\" width=\"1100\"/></p>\n<h3>7.2 实现接口方法</h3>\n<h3><img alt=\"\" height=\"359\" src=\"..\\..\\static\\image\\0da3ceb29bb44d4ba2ef3829cbfa14f7.png\" width=\"1108\"/> 7.3 程序调用</h3>\n<p><img alt=\"\" height=\"315\" src=\"..\\..\\static\\image\\ea03a3a6c184498b99d3b61f7da5e93c.png\" width=\"992\"/></p>\n<h3>7.4  LeaveAllowed 实体更改成true后，传进去。plc驱动程序自动反射，把对应实体plc db块的值直接更新了。这样就不用通过偏移量来操作读写db块了。</h3>\n<p><img alt=\"\" height=\"267\" src=\"..\\..\\static\\image\\ed145aa8bd4a486b9f89455dbfa45b9d.png\" width=\"860\"/></p>\n<blockquote>\n<p>如果db块有不同的类型，例如byte ，Int ，DInt ，等，同样的道理，创建对应的数据类型就可以了。</p>\n</blockquote>\n<h3> 7.5 PLC与C# 常用数据类型转换</h3>\n<table align=\"center\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\"><tbody><tr><td>PLC</td><td>C#</td></tr><tr><td>Bool</td><td>Bool</td></tr><tr><td>Word</td><td>ushort</td></tr><tr><td>Int</td><td>ushort</td></tr><tr><td>Dword</td><td>uint32</td></tr><tr><td>Dint</td><td>uint</td></tr></tbody></table>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\"><tbody><tr><td>byte</td><td>byte</td></tr><tr><td>Real</td><td>\n<div>\n     bouble\n    </div> </td></tr><tr><td></td><td></td></tr></tbody></table>\n<p>具体使用参考<a class=\"link-info\" href=\"https://github.com/S7NetPlus/s7netplus\" title=\"官网\">官网</a></p>\n<h2>8. 普通接口和泛型接口对比。</h2>\n<h3>8.1 如下例子所示，普通接口固定死传入实体参数后，它就只能规定你传入CathodeEntity实体类对象。</h3>\n<blockquote>\n<p>普通接口方法方法：</p>\n<p><img alt=\"\" height=\"201\" src=\"..\\..\\static\\image\\65da0275ff03415caa4b987397c47ea2.png\" width=\"1200\"/>但如果，我们要读同一个plc，不同的db块，是不是这个方法就不适用了。那我们得要再重新定义一个接口方法，只是类参数不一样。</p>\n<p><img alt=\"\" height=\"291\" src=\"..\\..\\static\\image\\f436dc1fd468464a87f6617970ef8150.png\" width=\"1200\"/></p>\n<p>但plc.WriteClass()这个方法是适用写不同的db块的，它是由传入的参数决定它要写那个db块。所以这样子重复的做接口实现，增加代码量而且还不容易维护。</p>\n<hr/>\n<p> 所以，我们要学会分析构思代码。</p>\n<p>1.首先，得分析这个plc.WriteClass()能接受的参数类型是什么。它的第一个参数是object 类型，就是任意类数据类型。(当然了，这个的任意类型是有限制的,因为它是plc 驱动程序提供的写类的方法，它的任意数据类型就只能限制于类)，就是说可以传不同的类给它</p>\n<p><img alt=\"\" height=\"106\" src=\"..\\..\\static\\image\\c44c247ea5884ccc8a3f5f746e371a22.png\" width=\"732\"/></p>\n<p>2.那我们清楚它接受数据类型后，接着是不是要考滤接口的设计实现。因为它规定了，只能传入任意的<strong>类</strong> 类型，那也就是，它不能接受int或string 类型了。所以我们定义泛型接口要约束这个泛型接口类型。泛型接口的实现，只能传进来类对象，不能是其他。</p>\n<p><img alt=\"\" height=\"102\" src=\"..\\..\\static\\image\\c322c10fd18e440da54e831380ba91bd.png\" width=\"868\"/></p>\n<p>3.所以泛型接口实现，传入一个obj</p>\n<p><img alt=\"\" height=\"221\" src=\"..\\..\\static\\image\\4e1a00399c224d739c784dc3fbd78f9f.png\" width=\"1164\"/></p>\n<p>4.然后接口调用的时候，传什么，对应的泛型就是什么</p>\n<p><img alt=\"\" height=\"253\" src=\"..\\..\\static\\image\\ebe170d885b440e3bb26f644257e9381.png\" width=\"1200\"/> 总结：这样减少了代码量，容易维护。</p>\n</blockquote>\n<p></p>\n<p>那就先这样吧，理解了点赞收藏啊，防止那天找不到了。</p>\n<p></p>\n</div>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-06-30 20:32:20", "summary": "教大家使用如何方便快速的读写西门子块的值，实现上位机跟进行通讯的流程使用的西门子型号，安装驱动包西门子定义一个块，这个是我们上位机要读写的根据西门子协议文档读取块的方式有很多种，直接根据该的偏移量进行"}