{"blogid": "124127995", "writerAge": "码龄4年", "writerBlogNum": "20", "writerCollect": "350", "writerComment": "35", "writerFan": "53", "writerGrade": "3级", "writerIntegral": "445", "writerName": "听风ツ", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124127995.jpg", "writerRankTotal": "82344", "writerRankWeekly": "693838", "writerThumb": "66", "writerVisitNum": "58283", "blog_read_count": "1333", "blog_time": "已于 2022-04-12 17:14:40 修改", "blog_title": "倍福ADS通讯(二)——TwinCat ADS通讯方式", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>TwinCat ADS通讯方式（同步和异步两种方式）</h3>\n<ul><li><a href=\"#_Asynchronous_2\">★ 异步方式（Asynchronous）</a></li><li><a href=\"#_Synchronous_10\">★ 同步方式（Synchronous）</a></li><li><ul><li><a href=\"#_21\">读取方式——变量名句柄方式</a></li><li><a href=\"#_114\">读取方式——变量地址方式</a></li><li><a href=\"#_146\">不同方式的读取优缺点</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_Asynchronous_2\"></a>★ 异步方式（Asynchronous）</h1>\n<p>ADS 客户端向ADS 服务器发送ADS 请求，同时客户端继续自己的工作。ADS 服务器处理请求后，把响应以Call-back 函数方式发给客户端。</p>\n<p>优点：不会造成系统堵塞</p>\n<p>缺点：不能确保每次请求都有返回</p>\n<h1><a id=\"_Synchronous_10\"></a>★ 同步方式（Synchronous）</h1>\n<p>ADS 客户端向ADS 服务器发送ADS 请求，在通讯过程中客户端程序停止执行，直到获得ADS 服务器返回的响应</p>\n<p>优点：能即时返回结果</p>\n<p>缺点：如果通讯故障会造成系统堵塞</p>\n<p>同步方式（Synchronous）通讯分为两种，即读操作和写操作，针对于读和写操作又分别分为两种方式，即按变量名进行读写和按照地址进行读写。</p>\n<h2><a id=\"_21\"></a>读取方式——变量名句柄方式</h2>\n<p>通讯读取方式倍福可以按变量名读写或者按照地址进行读写两种方式<br/> 在TwinCAT PLC程序中每个变量都有一个句柄（Handle）。在对变量进行操作之前，首先我们要通过相关路径得到变量的句柄，然后进行读写操作，操作完毕后对句柄进行释放。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\809fc06e4f754213beecd4c47807cbe4.png\"/></p>\n<p>句柄读取类型示例 注：变量名及PLC程序内部变量名<br/> ReadAny读取</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token number\">1</span>．ReadAny读取\n（<span class=\"token number\">1</span>）读取BooL\n<span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> Data<span class=\"token operator\">=</span> adsClient<span class=\"token punctuation\">.</span><span class=\"token function\">CreateVariableHandle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MAIN.bool\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token number\">2</span><span class=\"token punctuation\">.</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> val <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Boolean<span class=\"token punctuation\">)</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAny</span><span class=\"token punctuation\">(</span>Data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">Boolean</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token number\">3</span><span class=\"token punctuation\">.</span>adsClient<span class=\"token punctuation\">.</span><span class=\"token function\">DeleteVariableHandle</span><span class=\"token punctuation\">(</span>Data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n（<span class=\"token number\">2</span>）读取<span class=\"token keyword\">double</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> Data<span class=\"token operator\">=</span> adsClient<span class=\"token punctuation\">.</span><span class=\"token function\">CreateVariableHandle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MAIN.Double\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token number\">2</span><span class=\"token punctuation\">.</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> val <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Double<span class=\"token punctuation\">)</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAny</span><span class=\"token punctuation\">(</span>Data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">Double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token number\">3</span><span class=\"token punctuation\">.</span>adsClient<span class=\"token punctuation\">.</span><span class=\"token function\">DeleteVariableHandle</span><span class=\"token punctuation\">(</span>Data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n其他数据类型读取相同略<span class=\"token range operator\">..</span><span class=\"token range operator\">..</span><span class=\"token range operator\">..</span><span class=\"token range operator\">..</span><span class=\"token range operator\">..</span>\n（<span class=\"token number\">3</span>）读取数组   \n<span class=\"token number\">1</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">//定义数组，含有五个元素  </span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">.</span><span class=\"token class-name\"><span class=\"token keyword\">short</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> arraytest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">short</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  \n<span class=\"token number\">3</span><span class=\"token punctuation\">.</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> Data3 <span class=\"token operator\">=</span> adsClient<span class=\"token punctuation\">.</span><span class=\"token function\">CreateVariableHandle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MAIN.plcarraytest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token number\">4</span><span class=\"token punctuation\">.</span>arraytest <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>adsClient<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAny</span><span class=\"token punctuation\">(</span>Data3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\"><span class=\"token keyword\">short</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token number\">5</span><span class=\"token punctuation\">.</span>adsClient<span class=\"token punctuation\">.</span><span class=\"token function\">DeleteVariableHandle</span><span class=\"token punctuation\">(</span>Data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n（<span class=\"token number\">4</span>）读取结构体\n<span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token comment\">//Mystruct如多个不同类型的数据结构 ,需要跟PLC的数据结构相对应   </span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Mystruct</span>  \n<span class=\"token number\">3</span><span class=\"token punctuation\">.</span>       <span class=\"token punctuation\">{<!-- --></span>   <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> Thickness_Channle_Setting<span class=\"token punctuation\">;</span>  \n<span class=\"token number\">4</span><span class=\"token punctuation\">.</span>           <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> Thickness_Channle_Setting_Button<span class=\"token punctuation\">;</span>  \n<span class=\"token number\">5</span><span class=\"token punctuation\">.</span>           <span class=\"token keyword\">public</span> <span class=\"token class-name\">UInt16</span> Thickness_Offset_Value_Button<span class=\"token punctuation\">;</span>   \n<span class=\"token number\">6</span><span class=\"token punctuation\">.</span> \t\t <span class=\"token punctuation\">}</span>  \n<span class=\"token number\">6</span><span class=\"token punctuation\">.</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> Data4 <span class=\"token operator\">=</span> adsClient<span class=\"token punctuation\">.</span><span class=\"token function\">CreateVariableHandle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MAIN.Mystruct\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token number\">7</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Mystruct</span> struct1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Mystruct<span class=\"token punctuation\">)</span>adsClient<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAny</span><span class=\"token punctuation\">(</span>Data4<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">Mystruct</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n（<span class=\"token number\">5</span>）读取String\n<span class=\"token number\">1</span><span class=\"token punctuation\">.</span>Data<span class=\"token operator\">=</span> adsClient<span class=\"token punctuation\">.</span><span class=\"token function\">CreateVariableHandle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main.Date_string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token number\">2</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Var</span> s <span class=\"token operator\">=</span>adsClient<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAny</span><span class=\"token punctuation\">(</span>Data<span class=\"token punctuation\">,</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\"><span class=\"token keyword\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">16</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token number\">3</span><span class=\"token punctuation\">.</span>adsClient<span class=\"token punctuation\">.</span><span class=\"token function\">DeleteVariableHandle</span><span class=\"token punctuation\">(</span>Data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n（<span class=\"token number\">6</span>）读取WString（中文编码）\n<span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Encoding</span> defaultEncoding <span class=\"token operator\">=</span> Encoding<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//系统默认用\"BGK\"进行解码与编码  </span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Encoding</span> utf8Encoding <span class=\"token operator\">=</span> Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">;</span>  \n<span class=\"token number\">3</span><span class=\"token punctuation\">.</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> temStr <span class=\"token operator\">=</span> adsClient<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAny</span><span class=\"token punctuation\">(</span>Data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\"><span class=\"token keyword\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">32</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token number\">4</span><span class=\"token punctuation\">.</span><span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> tempBytes <span class=\"token operator\">=</span> defaultEncoding<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span>temStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token number\">5</span><span class=\"token punctuation\">.</span><span class=\"token comment\">//解码：将字符、符号等转换为二进制机器语言  </span>\n<span class=\"token number\">6</span><span class=\"token punctuation\">.</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str <span class=\"token operator\">=</span> utf8Encoding<span class=\"token punctuation\">.</span><span class=\"token function\">GetString</span><span class=\"token punctuation\">(</span>tempBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//编码：将二进制机器语言</span>\n<span class=\"token number\">7</span><span class=\"token punctuation\">.</span>adsClient<span class=\"token punctuation\">.</span><span class=\"token function\">DeleteVariableHandle</span><span class=\"token punctuation\">(</span>Data<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>WriteAny写入</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token number\">2</span>．WriteAny写入\n（<span class=\"token number\">1</span>）写入<span class=\"token return-type class-name\">BooL</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAny</span><span class=\"token punctuation\">(</span>Data<span class=\"token punctuation\">,</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToBoolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n（<span class=\"token number\">2</span>）写入<span class=\"token return-type class-name\">Int16</span>\n_client<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAny</span><span class=\"token punctuation\">(</span>Data<span class=\"token punctuation\">,</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToInt16</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\n（<span class=\"token number\">3</span>）写入数组\n<span class=\"token class-name\"><span class=\"token keyword\">short</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> temArr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">short</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  \n_client<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAny</span><span class=\"token punctuation\">(</span>Data<span class=\"token punctuation\">,</span> temArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\n（<span class=\"token number\">4</span>）写入结构体\n<span class=\"token class-name\">Mystruct</span> tempStruct <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Mystruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \ntempStruct<span class=\"token punctuation\">.</span>Triggle <span class=\"token operator\">=</span> Boolean<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \ntempStruct<span class=\"token punctuation\">.</span>Velocity <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token number\">13.14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n_client<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAny</span><span class=\"token punctuation\">(</span>_myStructHand<span class=\"token punctuation\">,</span> tempStruct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n\n（<span class=\"token number\">5</span>）写入String\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str <span class=\"token operator\">=</span> “ADSYYDS”<span class=\"token punctuation\">;</span>   \n<span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> tempBytes <span class=\"token operator\">=</span> Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n _client<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAny</span><span class=\"token punctuation\">(</span>Data<span class=\"token punctuation\">,</span>tempBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n</code></pre>\n<p>ReadSymbol &amp;&amp; WriteSymbol</p>\n<pre><code class=\"prism language-csharp\">（<span class=\"token number\">1</span>）根据变量名读取 \n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> val <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Int16<span class=\"token punctuation\">)</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">ReadSymbol</span><span class=\"token punctuation\">(</span>varName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">Int16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"MAIN.iTest: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">val</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n（<span class=\"token number\">2</span>）根据变量名读取数组\n<span class=\"token class-name\">Int16<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> arrTests <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Int16<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">ReadSymbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MAIN.arrTests\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">Int16<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"MAIN.arrTests:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> arrTests<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n（<span class=\"token number\">3</span>）根据变量名读取结构体\n<span class=\"token class-name\">Cmd</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Cmd<span class=\"token punctuation\">)</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">ReadSymbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MAIN.sCmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">Cmd</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"MAIN.sCmd:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">c<span class=\"token punctuation\">.</span>done</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">c<span class=\"token punctuation\">.</span>iLastCaller</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">c<span class=\"token punctuation\">.</span>udExeCnt</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n（<span class=\"token number\">4</span>）根据变量名写入 \nclient<span class=\"token punctuation\">.</span><span class=\"token function\">WriteSymbol</span><span class=\"token punctuation\">(</span>varName<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n（<span class=\"token number\">5</span>）根据变量名写入数组\n<span class=\"token class-name\">Int16<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> arrTestsW <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Int16<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  \nclient<span class=\"token punctuation\">.</span><span class=\"token function\">WriteSymbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MAIN.arrTests\"</span><span class=\"token punctuation\">,</span> arrTestsW<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n（<span class=\"token number\">6</span>）根据变量名写入结构体\n<span class=\"token class-name\">Cmd</span> cw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Cmd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \ncw<span class=\"token punctuation\">.</span>done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>  \ncw<span class=\"token punctuation\">.</span>iLastCaller <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>  \nclient<span class=\"token punctuation\">.</span><span class=\"token function\">WriteSymbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MAIN.sCmd\"</span><span class=\"token punctuation\">,</span> cw<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n</code></pre>\n<h2><a id=\"_114\"></a>读取方式——变量地址方式</h2>\n<p>在TwinCAT PLC中一个变量的地址由两部分组成，即GroupIndex和OffsetIndex， GroupIndex为该变量所在的寄存器类型，为一常量； OffsetIndex为该变量在寄存器中得地址偏移量，为一变量。<br/> 在TwinCAT PLC中一个变量的地址由两部分组成，即GroupIndex和OffsetIndex， GroupIndex为该变量所在的寄存器类型，为一常量； OffsetIndex为该变量在寄存器中得地址偏移量，为一变量。<br/> 一个是寄存器的句柄，一个地址所在的位置<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7d33c61dd87d43788a0385d3927b38a4.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3d73b31dc5d44ab78eda2e7780260e79.png\"/><br/> 1.对于MX，IX，QX寄存器的偏移地址的单位是“位”，而不是字节，计算地址需要注意<br/> 2.M寄存器偏移地址最大值为0x0000FFFF，而MX，I，IX，Q，QX偏移地址最大值为0xFFFFFFFF。<br/> 说明：</p>\n<blockquote>\n<p>1：首先根据地址类型获取对应的GroupIndex<br/> 2：根据地址的位置获取对应的OffsetIndex<br/> 3：根据获取的GroupIndex和 OffsetIndex 获取值</p>\n</blockquote>\n<p>读取</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Object</span> obj<span class=\"token operator\">=</span>Client<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAny</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>GroupIndex<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>OffsetIndex<span class=\"token punctuation\">,</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n</code></pre>\n<p>多读取</p>\n<pre><code class=\"prism language-csharp\"> <span class=\"token class-name\">AdsStream</span> rStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AdsStream</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token comment\">//根据读取长度及数据类型转换对应字节长度  </span>\n<span class=\"token class-name\">AdsBinaryReader</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AdsBinaryReader</span><span class=\"token punctuation\">(</span>rStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \nadsClient<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>addrInfo<span class=\"token punctuation\">.</span>Index_Group<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>addrInfo<span class=\"token punctuation\">.</span>Index_Offset<span class=\"token punctuation\">,</span> rStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n<span class=\"token comment\">//读取设备中的数据并写入到文件流stream中  </span>\n<span class=\"token function\">ParseReadRecv</span><span class=\"token punctuation\">(</span>rStream<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> valueType<span class=\"token punctuation\">,</span> addrInfo<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> rst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n读取出来的字节根据数据类型跟长度解析转换成集合返回  \n</code></pre>\n<h2><a id=\"_146\"></a>不同方式的读取优缺点</h2>\n<p>1．变量名方式<br/> 优点：<br/> A、 无需知道变量的具体地址；<br/> B、 可以省略计算地址的工作；<br/> C、 可对过程变量进行操作；<br/> D、 可读取结构体拿到整个类数据，只要变量类PLC与上位机对应上<br/> 缺点：<br/> A、 因为要抓放句柄（10ms），和地址方式比较通讯速度慢<br/> B、 对BC、BX系列不能进行操作<br/> 2． 地址方式<br/> 优点：<br/> A、 直接对地址进行操作，省去抓放句柄时间，通讯速度快；<br/> B、 无需知道变量的具体路径；<br/> C、 可以操作BC、BX系列控制器<br/> 缺点：<br/> A、使用中需考虑不同变量的偏移地址，容易出错。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-04-12 17:14:40", "summary": "通讯方式同步和异步两种方式异步方式同步方式读取方式变量名句柄方式读取方式变量地址方式不同方式的读取优缺点异步方式客户端向服务器发送请求，同时客户端继续自己的工作。服务器处理请求后，把响应以函数方式发给"}