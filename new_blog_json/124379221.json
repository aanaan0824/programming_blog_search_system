{"blogid": "124379221", "writerAge": "码龄11年", "writerBlogNum": "85", "writerCollect": "254", "writerComment": "38", "writerFan": "47", "writerGrade": "5级", "writerIntegral": "2635", "writerName": "FighterLiu", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124379221.jpg", "writerRankTotal": "10313", "writerRankWeekly": "43108", "writerThumb": "54", "writerVisitNum": "203490", "blog_read_count": "11476", "blog_time": "已于 2022-04-24 11:57:10 修改", "blog_title": "Volatile关键字的作用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>Volatile关键字的作用主要有如下两个：<br/> 1.线程的可见性：当一个线程修改一个共享变量时，另外一个线程能读到这个修改的值。<br/> 2. 顺序一致性：禁止指令重排序。</p>\n<h1><a id=\"_3\"></a>一、线程可见性</h1>\n<p>我们先通过一个例子来看看线程的可见性：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VolatileTest</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updateFlag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"修改flag值为：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">VolatileTest</span> test <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VolatileTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">.</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Thread1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                test<span class=\"token punctuation\">.</span><span class=\"token function\">updateFlag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Thread2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>打印结果如下，我们可以看到虽然线程Thread2已经把flag 修改为false了，但是线程Thread1没有读取到flag修改后的值，线程一直在运行</p>\n<pre><code>修改flag值为：false\n</code></pre>\n<p>我们把flag 变量加上volatile：</p>\n<pre><code class=\"prism language-java\">    <span class=\"token keyword\">volatile</span>  <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>重新运行程序，打印结果如下。Thread1结束，说明Thread1读取到了flage修改后的值</p>\n<pre><code>修改flag值为：false\nThread1结束\n</code></pre>\n<p>说到可见性，我们需要先了解一下Java内存模型，Java内存模型如下所示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d90e39f9caa340b0bb589ef1dbb2f667.png\"/><br/> 线程之间的共享变量存储在主内存中（Main Memory）中，每个线程都一个都有一个私有的本地内存（Local Memory），本地内存中存储了该线程以读/写共享变量的副本。</p>\n<p>所以当一个线程把主内存中的共享变量读取到自己的本地内存中，然后做了更新。在还没有把共享变量刷新的主内存的时候，另外一个线程是看不到的。</p>\n<p>如何把修改后的值刷新到主内存中的？<br/> 现代的处理器使用写缓冲区临时保存向内存写入的数据。写缓冲区可以保证指令流水线持续运行，它可以避免由于处理器停顿下来等向内存写入数据而产生的延迟。同时，通过以批处理的方式刷新写缓冲区，以及合并写缓冲区中对同一内存地址的多次写，较少对内存总线的占用。但是什么时候写入到内存是不知道的。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f96ceb17a5644f7db67d3a64f8b888fa.png\"/><br/> 所以就引入了volatile，volatile是如何保证可见性的呢？<br/> 在X86处理器下通过工具获取JIT编译器生成的汇编指令来查看对volatile进行写操作时，会多出lock addl。Lock前缀的指令在多核处理器下会引发两件事情：</p>\n<ol><li>将当前处理器缓存行的数据写回到系统内存。</li><li>这个写回内存的操作会使其他cpu里缓存了该内存地址的数据无效。<br/> 如果声明了volatile的变量进行写操作，JVM就会向处理器发送一条Lock前缀的指令，将这个变量所在缓存行的数据写回到系统内存。但是，就算写回到内存，如果其他处理器缓存的还是旧的，在执行操作就会有问题。所以，在多处理器下，为了保证各个处理器的缓存是一致的，就会实现缓存一致性协议，每个处理器通过嗅探在总线传播的数据来检查自己缓存的值是不是过期了，当处理器发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置成无效状态，当处理器对这个数据进行修改操作的时候，会重新从系统内存中把数据读到处理器缓存里。</li></ol>\n<h1><a id=\"_62\"></a>二、顺序一致性</h1>\n<p>在执行程序时，为了提高性能，编译器和处理器常常会对指令做重排序。重排序分为如下三种：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\39a6b41a1a1a4d0191f418b0519aa532.png\"/><br/> 1属于编译器重排序，2和3属于处理器重排序。这些重排序可能会导致多线程程序出现内存可见性问题。<br/> 当变量声明为volatile时，Java编译器在生成指令序列时，会插入内存屏障指令。通过内存屏障指令来禁止重排序。<br/> JMM内存屏障插入策略如下：<br/> 在每个volatile写操作的前面插入一个StoreStore屏障，后面插入一个StoreLoad屏障。<br/> 在每个volatile读操作后面插入一个LoadLoad，LoadStore屏障。</p>\n<p>Volatile写插入内存屏障后生成指令序列示意图：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f44d26762f704a28905e2f65b2a75d53.png\"/><br/> Volatile读插入内存屏障后生成指令序列示意图：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\97e184ee75ed4e18b3066e1c8ab585e1.png\"/><br/> 通过上面这些我们可以得出如下结论：编译器不会对volatile读与volatile读后面的任意内存操作重排序；编译器不会对volatile写与volatile写前面的任意内存操作重排序。</p>\n<p>防止重排序使用案例：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SafeDoubleCheckedLocking</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Instance</span> instane<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span>  <span class=\"token keyword\">static</span> <span class=\"token class-name\">Instance</span> <span class=\"token function\">getInstane</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instane<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SafeDoubleCheckedLocking</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instane<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    instane<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Instance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> instane<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>创建一个对象主要分为如下三步：</p>\n<ol><li>分配对象的内存空间。</li><li>初始化对象。</li><li>设置instance指向内存空间。</li></ol>\n<p>如果instane 不加volatile，上面的2，3可能会发生重排序。假设A，B两个线程同时获取，A线程获取到了锁，发生了指令重排序，先设置了instance指向内存空间。这个时候B线程也来获取，instance不为空，这样B拿到了没有初始化完成的单例对象（如下图）<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\70457cf0d7904aa5a8b3edb1bffd4561.png\"/></p>\n<h1><a id=\"VolatileSynchronized_104\"></a>二、Volatile与Synchronized比较</h1>\n<ol><li>Volatile是轻量级的synchronized，因为它不会引起上下文的切换和调度，所以Volatile性能更好。</li><li>Volatile只能修饰变量，synchronized可以修饰方法，静态方法，代码块。</li><li>Volatile对任意单个变量的读/写具有原子性，但是类似于i++这种复合操作不具有原子性。而锁的互斥执行的特性可以确保对整个临界区代码执行具有原子性。</li><li>多线程访问volatile不会发生阻塞，而synchronized会发生阻塞。</li><li>volatile是变量在多线程之间的可见性，synchronize是多线程之间访问资源的同步性。</li></ol>\n<p>参考：《Java并发编程的艺术》</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-04-24 11:57:10", "summary": "关键字的作用主要有如下两个：线程的可见性：当一个线程修改一个共享变量时，另外一个线程能读到这个修改的值。顺序一致性：禁止指令重排序。一、线程可见性我们先通过一个例子来看看线程的可见性：修改值为：结束"}