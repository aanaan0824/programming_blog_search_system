{"blogid": "125388096", "writerAge": "码龄178天", "writerBlogNum": "58", "writerCollect": "3064", "writerComment": "3483", "writerFan": "4576", "writerGrade": "7级", "writerIntegral": "11993", "writerName": "XIN-XIANG荣", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125388096.jpg", "writerRankTotal": "1042", "writerRankWeekly": "53", "writerThumb": "4141", "writerVisitNum": "53287", "blog_read_count": "11345", "blog_time": "已于 2022-07-08 09:12:58 修改", "blog_title": "让代码优雅起来(学会调试+代码风格)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/078b66f87e3c4e309d7f34d79c5776c4.gif#pic_center\"/><br/> <font size=\"4\">✨</font><font color=\"gray\" size=\"3\"><b>博客主页:</b></font><a href=\"https://blog.csdn.net/Trong_?spm=1000.2115.3001.5343\"><font color=\"\tLightSkyBlue\" size=\"4\"><b>心辛向荣</b></font></a><br/> <font size=\"4\">✨</font><font color=\"gray\" size=\"3\"><b>系列专栏:</b></font><a href=\"https://blog.csdn.net/trong_/category_11758101.html?spm=1001.2014.3001.5482\"><font color=\"\tLightSkyBlue\" size=\"3\"><b>【从0到1，C语言学习】</b></font></a><br/> <font size=\"4\">✨</font><font color=\"gray\" size=\"3\"><b>一句短话:</b></font><font color=\"\tCrimson\" size=\"3\"><b>你若盛开，蝴蝶自来！</b></font><br/> <font size=\"4\">✨</font><font color=\"gray\" size=\"3\"><b>博客说明:</b></font><font color=\"RosyBrown\" size=\"3\"><b>尽己所能，把每一篇博客写好，帮助自己熟悉所学知识，也希望自己的这些内容可以帮助到一些在学习路上的伙伴，文章中如果发现错误及不足之处，还望在评论区留言，我们一起交流进步！😊</b></font></p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_8\">前言</a></li><li><a href=\"#_11\">一.实用的调试技巧</a></li><li><ul><li><a href=\"#1bug_13\">1.了解bug</a></li><li><a href=\"#2_21\">2.认识调试</a></li><li><ul><li><a href=\"#21__29\">2.1 什么是调试</a></li><li><a href=\"#22__47\">2.2 调试的基本步骤</a></li><li><a href=\"#23_DebugRelease_54\">2.3 Debug和Release的介绍。</a></li></ul>\n</li><li><a href=\"#3windows_115\">3.学会调试(windows环境)</a></li><li><ul><li><a href=\"#31__117\">3.1 调试环境的准备</a></li><li><a href=\"#32__123\">3.2 熟悉使用必要的快捷键</a></li><li><a href=\"#33__150\">3.3 调试的时候查看程序当前信息</a></li></ul>\n</li><li><a href=\"#5__197\">5. 调试实例</a></li><li><a href=\"#6__248\">6. 编程常见的错误</a></li></ul>\n</li><li><a href=\"#_262\">二.如何写出优秀的的代码</a></li><li><ul><li><a href=\"#_279\">(一)学习运用良好的代码风格</a></li><li><ul><li><a href=\"#1__281\">1. 文件结构</a></li><li><ul><li><a href=\"#11__287\">1.1 头文件的结构</a></li><li><a href=\"#12___309\">1.2 定义文件的结构</a></li><li><a href=\"#13__318\">1.3 目录结构</a></li></ul>\n</li><li><a href=\"#2__326\">2. 程序的版式</a></li><li><ul><li><a href=\"#21__332\">2.1 空行</a></li><li><a href=\"#22__342\">2.2 代码行</a></li><li><a href=\"#23__354\">2.3 代码行内的空格</a></li><li><a href=\"#24__374\">2.4 对齐</a></li><li><a href=\"#25__382\">2.5 长行拆分</a></li></ul>\n</li><li><a href=\"#3___390\">3. 命名规则</a></li><li><ul><li><a href=\"#31__392\">3.1 共性规则</a></li><li><a href=\"#32___Windows__406\">3.2 简单的 Windows 应用程序命名规则</a></li></ul>\n</li><li><a href=\"#4___426\">4. 表达式和基本语句</a></li><li><ul><li><a href=\"#41_428\">4.1运算符</a></li><li><a href=\"#42__432\">4.2 复合表达式</a></li><li><a href=\"#43__for__438\">4.3 for 语句的循环控制变量</a></li><li><a href=\"#44__switch__446\">4.4 switch 语句</a></li></ul>\n</li><li><a href=\"#5__452\">5. 常量(如宏常量)</a></li></ul>\n</li><li><a href=\"#_460\">(二)写出易于调试的代码</a></li><li><ul><li><a href=\"#1__assert_470\">1. 使用 assert（断言）</a></li><li><a href=\"#2const_476\">2.const修饰指针变量的时候：</a></li><li><a href=\"#3__481\">3. 一些完美代码示例</a></li><li><ul><li><a href=\"#31_strcpy_483\">3.1 模拟实现库函数strcpy</a></li><li><a href=\"#32_strlen_518\">3.2 模拟实现strlen</a></li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#_548\">结语</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_8\"></a>前言</h1>\n<p><font color=\"blue\" size=\"4\">🍁本篇介绍如何写出好的代码，从代码风格和实用调试技巧出发，代码的风格虽然不会对程序的运行造成影响，但好的代码风格可以让我们的代码逻辑更加的清晰，而学会调试程序对一个程序员来说更是非常重要的，我们写出的代码应当是易于调试的，好的代码可以避免很多不必要的麻烦，节省我们的时间！</font></p>\n<h1><a id=\"_11\"></a>一.实用的调试技巧</h1>\n<h2><a id=\"1bug_13\"></a>1.了解bug</h2>\n<p>程序错误，即英文的Bug、臭虫，是指在软件运行中因为程序本身有错误而造成的功能不正常、死机、数据丢失、非正常中断等现象。 早期的计算机由于体积非常庞大，有些小虫子可能会钻入机器内部，造成计算机工作失灵。史上的第一只 “Bug” ，真的是因为一只飞蛾意外走入一电脑而引致故障，因此Bug从原意为臭虫引申为程序错误。</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\4d52e65988655be2b11882d5eb5c7a93.png\"/></p>\n<p>我们在学习编码的过程中，初学时，由于对于语法的不熟悉，可能在代码的字里行间会出现语法上的错误而导致代码程序不能运行；还有我们写出来的代码不会报错，但代码的运行结果与我们所想的不同，不能得出正确的结果…这些各种原因导致代码程序出现了问题、错误便是与我们相关的bug了。</p>\n<h2><a id=\"2_21\"></a>2.认识调试</h2>\n<p>所有发生的事情都一定有迹可循，如果问心无愧，就不需要掩盖也就没有迹象了，如果问心有愧， 就必然需要掩盖，那就一定会有迹象，迹象越多就越容易顺藤而上，这就是推理的途径。</p>\n<p>顺着这条途径顺流而下就是犯罪，逆流而上，就是真相。</p>\n<p>一名优秀的程序员是一名出色的侦探， 每一次调试都是尝试破案的过程。</p>\n<h3><a id=\"21__29\"></a>2.1 什么是调试</h3>\n<p><strong>调试</strong>（英语：Debugging / Debug），又称除错，是发现和减少计算机程序或电子仪器设备中程序错误的一个过程；其实就是对代码中的错误进行纠正的一个过程！</p>\n<p><strong>对于修bug。。。</strong></p>\n<p><strong>写代码…</strong></p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\8e07f2fd56b2f7cae8322554ab00b72b.png\"/></p>\n<p><strong>排查出现的问题…</strong></p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\b3440e81dc30231e1e8906d11cae0df9.png\"/></p>\n<p>如果你是图片中的状态可是不行的，要学会正确调试程序的的方法，拒绝迷信式调试！！！</p>\n<h3><a id=\"22__47\"></a>2.2 调试的基本步骤</h3>\n<ul><li>发现程序错误的存在</li><li>以隔离、消除等方式对错误进行定位</li><li>确定错误产生的原因，提出纠正错误的解决办法</li><li>对程序错误予以改正，重新测试</li></ul>\n<h3><a id=\"23_DebugRelease_54\"></a>2.3 Debug和Release的介绍。</h3>\n<ol><li>Debug 通常称为调试版本，它包含调试信息，并且不作任何优化，便于程序员调试程序。</li><li>Release 称为发布版本，它往往是进行了各种优化，使得程序在代码大小和运行速度上都是最优 的，以便用户很好地使用。</li></ol>\n<p>看下面这段代码在俩种环境下的运行效果！</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上述代码在Debug环境的结果展示：</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\bb42f4e278226f86e89251985147941a.png\"/></p>\n<p>上述代码在Release环境的结果展示：</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\33908b8fb57280f64d50c7d4196dfb3d.png\"/></p>\n<p>Debug和Release反汇编展示对比：</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\f998543a7b1a97c16ee71ec22b8e1b17.png\"/></p>\n<p>所以我们说调试就是在Debug版本的环境中，找代码中潜伏的问题的一个过程；而在Release环境下中我们可以清晰的看到它优化后代码执行的的简洁，省略了一部分步骤，是不支持调试的！</p>\n<p>这里再看一下Release模式下编译器进行了哪些优化？</p>\n<p>看以下代码：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9.</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tarr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hehe\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n    \n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>如果是 debug 模式去编译，程序的结果是死循环。</p>\n<p>如果是 release 模式去编译，程序没有死循环。</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\4706babfcdf96483168e8d2e0afa5fd4.png\"/></p>\n<p>那他们之间有什么区别呢？ 就是因为优化导致的。</p>\n<h2><a id=\"3windows_115\"></a>3.学会调试(windows环境)</h2>\n<h3><a id=\"31__117\"></a>3.1 调试环境的准备</h3>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\c140e1192907913aeeb410ba709e1991.png\"/></p>\n<p>只有在Debug环境中，才能正常对代码进行调试！</p>\n<h3><a id=\"32__123\"></a>3.2 熟悉使用必要的快捷键</h3>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\e3a9bf13522896429029b9c74809fb2d.png\"/></p>\n<p>F5</p>\n<p>启动调试，经常用来直接跳到下一个断点处。</p>\n<p>F9</p>\n<p>创建断点和取消断点的重要作用，可以在程序的任意位置设置断点； 这样就可以使得程序在想要的位置随意停止执行，继而一步步执行下去。</p>\n<p>F10</p>\n<p>逐过程，通常用来处理一个过程，一个过程可以是一次函数调用，或者是一条语句。</p>\n<p>F11</p>\n<p>逐语句，就是每次都执行一条语句，但是这个快捷键可以使我们的执行逻辑进入函数内部（这是最常用的）。</p>\n<p>CTRL + F5</p>\n<p>开始执行不调试，如果你想让程序直接运行起来而不调试就可以直接使用。</p>\n<blockquote>\n<p>一般F5与F9配合使用，当我们写了比较长的代码，使用F10/F11逐步调试会很浪费时间；而使用F5和F9就会很方便，我们在想要让程序停下来的位置打上断点，在按F5就可以跳过前面的代码，使程序直接运行到断点处。<br/> 当再次按F5调试时会运行到逻辑上的下一处断点！</p>\n</blockquote>\n<h3><a id=\"33__150\"></a>3.3 调试的时候查看程序当前信息</h3>\n<p>3.3.1 查看临时变量的值</p>\n<p>在调试开始之后，用于观察变量的值。</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\c2f319012d58a6a42a389c9ff03ececb.png\"/></p>\n<p>这里最常用的是监视窗口，我们可以自行输入任意的合法变量对其值进行查看；而自动窗口和局部窗口随着调试过程，监视的内容是动态变化的，不能与我们所想同步，很不方便。</p>\n<p>3.3.2 查看内存信息</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\e8af457ddc8e2c2da691e93cd9cb7603.png\"/></p>\n<p>3.3.3 调用堆栈</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\329dfa9b007603db3ed18993efdc77fb.png\"/></p>\n<p>通过调用堆栈，可以清晰的反应函数的调用关系以及当前调用所处的位置 。</p>\n<p>3.3.4 查看汇编信息</p>\n<p>在调试开始之后，有两种方式转到汇编：</p>\n<p>第一种方式：右击鼠标，选择【转到反汇编】：</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\33f73aad3a8a7d674a20553c57fb5f54.png\"/></p>\n<p>第二种方式：</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\c46b42fb3a95767800f4774617ac4997.png\"/></p>\n<p>可以切换到汇编代码。</p>\n<p>3.3.5 查看寄存器信息</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\c81bab853c37cbf8435179ec9f169876.png\"/></p>\n<p>如果想要多了解一些关于的汇编知识，可以看一看我的另一篇博客 <a href=\"https://blog.csdn.net/Trong_/article/details/124522494\">关于函数栈帧</a> 。</p>\n<p>建议多动手，要去尝试调试解决问题：</p>\n<ul><li>一定要熟练掌握调试技巧。</li><li>初学者可能80%的时间在写代码，20%的时间在调试；但是一个程序员可能20%的时间在写程序，但是80%的时间在调试。</li><li>这里所讲的是一些简单基本的调试；以后可能会出现很复杂调试场景：多线程程序的调试等，需要我们不断地去尝试解决。</li><li>多多使用快捷键，提升效率。</li></ul>\n<h2><a id=\"5__197\"></a>5. 调试实例</h2>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9.</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tarr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hehe\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上面有介绍过这个代码在vs的Debug-x86环境下，运行结果出现了死循环！</p>\n<p>那么出现死循环的原因是什么？</p>\n<p>如果我们只是盯着代码找问题，能看出具体哪一步有问题吗？</p>\n<p>所以这里就需要我们通过调试找出题所在！</p>\n<p>我们F10去逐步进行调试，打开监视窗口对变量进行观察，调试过程中可以发现数组范围内的元素都正常被赋值为0；</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\89ae0181e06f9deb60deef206e0a8dc6.png\"/></p>\n<p>当程序在进行下一步的调试，i的值就会加为10，此时是数组的越界访问了，此时的arr[10]是不是还会被赋值为0，考虑问题会不会是在这里，然后进行调试，可以发现越界后的arr[10]和arr[11]还是正常赋值；</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\17867f009918c5ca25d285768f994641.png\"/></p>\n<p>再继续调试，此时i= 12，观察arr[12]还是被赋值为0，但在这一步调试中，观察变量i的值发现在arr[12]被赋值为0的同时i的值也变为了0；</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\c960ec67c2b3dd9b857bf6d65d0f2a00.png\"/></p>\n<p>此时我们就通过调试发现了造成程序死循环的原因，为什么将arr[12]赋值为0的同时i的值也变为了0，我们推测可能的原因是arr[12]和i占用的是同一处内存空间！取出俩者的内存地址比较发现确实是相同的！</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\8c7707136a97a3d89a26fb311ca509e4.png\"/> 分析一下俩者内存地址为什么相同！</p>\n<p>计算机中的内存空间，分为栈区、堆区和静态区；</p>\n<p>而对于局部的数据是在栈区进行内存分配的！</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\2f3725a8e3b70d34408b9050886786ca.png\"/></p>\n<h2><a id=\"6__248\"></a>6. 编程常见的错误</h2>\n<ol><li>编译型错误(语法错误)</li></ol>\n<ul><li>直接看错误提示信息（双击），解决问题；或者凭借经验就可以搞定。相对来说简单。</li></ul>\n<ol start=\"2\"><li>链接型错误</li></ol>\n<ul><li>看错误提示信息，主要在代码中找到错误信息中的标识符，然后定位问题所在；一般是标识符名不 存在或者拼写错误。</li></ul>\n<ol start=\"3\"><li>运行时错误</li></ol>\n<ul><li>借助调试，逐步定位问题；最难搞 。</li></ul>\n<h1><a id=\"_262\"></a>二.如何写出优秀的的代码</h1>\n<p>优秀的代码具有如下特征：</p>\n<ul><li>代码运行正常</li><li>bug很少</li><li>效率高</li><li>可读性高</li><li>可维护性高</li><li>注释清晰</li><li>文档齐全</li></ul>\n<p>那么如何写出优秀的代码，这里从俩个方面来讲:</p>\n<ol><li>良好的代码风格</li><li>易于调试的的代码</li></ol>\n<h2><a id=\"_279\"></a>(一)学习运用良好的代码风格</h2>\n<h3><a id=\"1__281\"></a>1. 文件结构</h3>\n<p>每个 C++/C 程序通常分为两个文件。一个文件用于保存程序的声明（declaration）， 称为头文件。另一个文件用于保存程序的实现（implementation），称为定义（definition） 文件。</p>\n<p>C++/C 程序的头文件以“.h”为后缀，C 程序的定义文件以“.c”为后缀，C++程序 的定义文件通常以“.cpp”为后缀（也有一些系统以“.cc”或“.cxx”为后缀）。</p>\n<h4><a id=\"11__287\"></a>1.1 头文件的结构</h4>\n<p>头文件由俩部分内容组成：</p>\n<p>（1）预处理块。</p>\n<p>（2）函数和类结构声明等。</p>\n<p>【规则 1-1-1】为了防止头文件被重复引用，应当用 ifndef/define/endif 结构产生预处理块。</p>\n<p>【规则 1-1-2】用 #include &lt;…&gt;格式来引用标准库的头文件（编译器将 从标准库目录开始搜索）。</p>\n<p>【规则 1-2-3】用 #include “filename.h” 格式来引用非标准库的头文件（编译器将 从用户的工作目录开始搜索）。</p>\n<p>【建议 1-1-1】头文件中只存放“声明”而不存放“定义”</p>\n<p>【建议 1-1-2】不提倡使用全局变量，尽量不要在头文件中出现象 extern int value 这 类声明。</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\c817038033d68bc68b089e46e0fd8fd1.png\"/></p>\n<h4><a id=\"12___309\"></a>1.2 定义文件的结构</h4>\n<p>定义文件也有俩部分内容：<br/> （1） 对一些头文件的引用。</p>\n<p>（2） 程序的实现体（包括数据和代码）。</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\2f5d4ae41db2a8f38bf974f69b45a469.png\"/></p>\n<h4><a id=\"13__318\"></a>1.3 目录结构</h4>\n<p>如果一个软件的头文件数目比较多（如超过十个），通常应将头文件和定义文件分 别保存于不同的目录，以便于维护。</p>\n<p>例如可将头文件保存于 include 目录，将定义文件保存于 source 目录（可以是多级 目录）。</p>\n<p>如果某些头文件是私有的，它不会被用户的程序直接引用，则没有必要公开其“声 明”。为了加强信息隐藏，这些私有的头文件可以和定义文件存放于同一个目录。</p>\n<h3><a id=\"2__326\"></a>2. 程序的版式</h3>\n<p>版式虽然不会影响程序的功能，但程序的版式追求清晰、美观，是 程序风格的重要构成因素。</p>\n<p>可以把程序的版式比喻为“书法”。</p>\n<h4><a id=\"21__332\"></a>2.1 空行</h4>\n<p>空行起着分隔程序段落的作用。空行得体（不过多也不过少）将使程序的布局更加 清晰。</p>\n<p>【规则 2-1-1】在每个类声明之后、每个函数定义结束之后都要加空行。</p>\n<p>【规则 2-1-2】在一个函数体内，逻揖上密切相关的语句之间不加空行，其它地方应 加空行分隔。</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\78dd2a15ee71de0de430a47b4a1a885b.png\"/></p>\n<h4><a id=\"22__342\"></a>2.2 代码行</h4>\n<p>【规则 2-2-1】一行代码只做一件事情，如只定义一个变量，或只写一条语句。这样 的代码容易阅读，并且方便于写注释。</p>\n<p>【规则 2-2-2】if、for、while、do 等语句自占一行，执行语句不得紧跟其后。不论 执行语句有多少都要加{}。这样可以防止书写失误。</p>\n<p>【建议 2-2-1】尽可能在定义变量的同时初始化该变量（就近原则）</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\a09e4f8ced554ee9babe189ce72bc2bd.png\"/></p>\n<h4><a id=\"23__354\"></a>2.3 代码行内的空格</h4>\n<p>【规则 2-3-1】关键字之后要留空格。象 const、virtual、inline、case 等关键字之后至少要留一个空格，否则无法辨析关键字。象 if、for、while 等关键字之后应留 一个空格再跟左括号‘（’，以突出关键字。</p>\n<p>【规则 2-3-2】函数名之后不要留空格，紧跟左括号‘（’，以与关键字区别。</p>\n<p>【规则 2-3-3】‘（’向后紧跟，‘）’、‘，’、‘;’向前紧跟，紧跟处不留空格。 【规则 2-3-4】‘，’之后要留空格，如 Function(x, y, z)。如果‘;’不是一行的结束 符号，其后要留空格，如 for (initialization; condition; update)。</p>\n<p>【规则 2-3-5】赋值操作符、比较操作符、算术操作符、逻辑操作符、位域操作符， 如“=”、“+=” “&gt;=”、“&lt;=”、“+”、“*”、“%”、“&amp;&amp;”、“||”、“&lt;&lt;”,“^”等二元操作符的前后应当加空格。</p>\n<p>【规则 2-3-6】一元操作符如“!”、“~”、“++”、“–”、“&amp;”（地址运算符）等前后不 加空格。</p>\n<p>【规则 2-3-7】象“［］”、“.”、“-&gt;”这类操作符前后不加空格。</p>\n<p>【建议 2-3-1】对于表达式比较长的 for 语句和 if 语句，为了紧凑起见可以适当地去 掉一些空格，如 for (i=0; i&lt;10; i++)和 if ((a&lt;=b) &amp;&amp; (c&lt;=d))</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\cecbdacfaadf7a412bfb1242102465d8.png\"/></p>\n<h4><a id=\"24__374\"></a>2.4 对齐</h4>\n<p>【规则 2-4-1】程序的分界符‘{’和‘}’应独占一行并且位于同一列，同时与引用 它们的语句左对齐。</p>\n<p>【规则 2-4-2】{ }之内的代码块在‘{’右边数格处左对齐。</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\b28ae9f0d5051a6b3ca236724fc1f107.png\"/></p>\n<h4><a id=\"25__382\"></a>2.5 长行拆分</h4>\n<p>【规则 2-5-1】代码行最大长度宜控制在 70 至 80 个字符以内。代码行不要过长，否 则眼睛看不过来，也不便于打印。</p>\n<p>【规则 2-5-2】长表达式要在低优先级操作符处拆分成新行，操作符放在新行之首（以 便突出操作符）。拆分出的新行要进行适当的缩进，使排版整齐，语句可读。</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\9926861f9ce4ec62e26c1662b4f8eb89.png\"/></p>\n<h3><a id=\"3___390\"></a>3. 命名规则</h3>\n<h4><a id=\"31__392\"></a>3.1 共性规则</h4>\n<p>【规则 3-1-1】标识符应当直观且可以拼读，可望文知意，不必进行“解码”； 标识符最好采用英文单词或其组合，便于记忆和阅读。切忌使用汉语拼音来命名。</p>\n<p>【规则 3-1-2】程序中不要出现仅靠大小写区分的相似的标识符。</p>\n<p>【规则 3-1-3】程序中不要出现标识符完全相同的局部变量和全局变量，尽管两者的 作用域不同而不会发生语法错误，但会使人误解。</p>\n<p>【规则 3-1-4】变量的名字应当使用“名词”或者“形容词＋名词\"；全局函数的名字应当使用“动词”或者“动词＋名词”。</p>\n<p>【规则 3-1-5】用正确的反义词组命名具有互斥意义的变量或相反动作的函数等。</p>\n<p>【建议 3-1-6】尽量避免名字中出现数字编号，如 Value1,Value2 等，除非逻辑上的 确需要编号。</p>\n<h4><a id=\"32___Windows__406\"></a>3.2 简单的 Windows 应用程序命名规则</h4>\n<p>【规则 3-2-1】类名和函数名用大写字母开头的单词组合而成</p>\n<p>【规则 3-2-2】变量和参数用小写字母开头的单词组合而成。</p>\n<p>【规则 3-2-3】常量全用大写的字母，用下划线分割单词。</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\f947289c8a4e363d54d4736ae1b8ab9f.png\"/></p>\n<p>【规则 3-2-4】静态变量加前缀 s_（表示 static）。</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\6370938e772ccaf2002699b448b996e1.png\"/></p>\n<p>【规则 3-2-5】如果不得已需要全局变量，则使全局变量加前缀 g_（表示 global）。</p>\n<p>【规则 3-2-6】类的数据成员加前缀 m_（表示 member），这样可以避免数据成员与 成员函数的参数同名。</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\c0c01d02872fe9e5bd162de46af65cd6.png\"/></p>\n<h3><a id=\"4___426\"></a>4. 表达式和基本语句</h3>\n<h4><a id=\"41_428\"></a>4.1运算符</h4>\n<p>【规则 4-1-1】如果代码行中的运算符比较多，用括号确定表达式的操作顺序，避免 使用默认的优先级。</p>\n<h4><a id=\"42__432\"></a>4.2 复合表达式</h4>\n<p>【规则 4-2-1】不要编写太复杂的复合表达式。</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\51fe76e0c2a208a0c17e86eab6807f1f.png\"/></p>\n<h4><a id=\"43__for__438\"></a>4.3 for 语句的循环控制变量</h4>\n<p>【规则 4-3-1】不可在 for 循环体内修改循环变量，防止 for 循环失去控制。</p>\n<p>【建议 4-3-1】建议 for 语句的循环控制变量的取值采用“半开半闭区间”写法。</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\cd6a475e51aa3eb2dd423e28e8743bb3.png\"/></p>\n<h4><a id=\"44__switch__446\"></a>4.4 switch 语句</h4>\n<p>【规则 4-4-1】每个 case 语句的结尾不要忘了加 break，否则将导致多个分支重叠 （除非有意使多个分支重叠）。</p>\n<p>【规则 4-4-2】不要忘记最后那个 default 分支。即使程序真的不需要 default 处理， 也应该保留语句 default : break; 这样做并非多此一举，而是为了防止别人误以 为你忘了 default 处理。</p>\n<h3><a id=\"5__452\"></a>5. 常量(如宏常量)</h3>\n<p>【规则 5-1】 尽量使用含义直观的常量来表示那些将在程序中多次出现的数字或 字符串。</p>\n<p>【规则 5-2】需要对外公开的常量放在头文件中，不需要对外公开的常量放在定义 文件的头部。为便于管理，可以把不同模块的常量集中存放在一个公共的头文件中。</p>\n<p>【规则 5-3】如果某一常量与其它常量密切相关，应在定义中包含这种关系，而不 应给出一些孤立的值。</p>\n<h2><a id=\"_460\"></a>(二)写出易于调试的代码</h2>\n<p>常见的coding技巧：</p>\n<ul><li>使用assert</li><li>尽量使用const</li><li>养成良好的编码风格</li><li>添加必要的注释</li><li>避免编码的陷阱</li></ul>\n<h3><a id=\"1__assert_470\"></a>1. 使用 assert（断言）</h3>\n<p>断言 assert 是仅在 Debug 版本起作用的宏，它用于检查“不应该”发生的情况。</p>\n<p>在运行过程中，如果 assert 的参数为假，那么程序就会中 止（一般地还会出现提示对话，说明在什么地方引发了 assert）。</p>\n<h3><a id=\"2const_476\"></a>2.const修饰指针变量的时候：</h3>\n<ul><li>const如果放在*的左边，修饰的是指针指向的内容，保证指针指向的内容不能通过指针来改变。但是指针变量本身的内容可变。</li><li>const如果放在*的右边，修饰的是指针变量本身，保证了指针变量的内容不能修改，但是指针指向的内容，可以通过指针改变。</li></ul>\n<h3><a id=\"3__481\"></a>3. 一些完美代码示例</h3>\n<h4><a id=\"31_strcpy_483\"></a>3.1 模拟实现库函数strcpy</h4>\n<p>strcpy在拷贝字符串的时候，会把源字符串中的\\0也拷贝过去</p>\n<p>返回值为目标字符串的首地址</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;assert.h&gt;</span></span>\n\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">my_strcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> ret <span class=\"token operator\">=</span> dest<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//断言</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>src <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>dest <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>dest<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>src<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n    \n\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> arr1<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> arr2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">my_strcpy</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"32_strlen_518\"></a>3.2 模拟实现strlen</h4>\n<p>strlen的返回值是一个无符号整形。</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">my_strlen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str <span class=\"token operator\">!=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n\t\tstr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n    \n\t<span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%u\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">my_strlen</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>本篇博客参考了《高质量的C/C++编程》，里面精细讲解了如何写出优秀的C/C++代码，这里附上网盘资源，感兴趣的小伙伴可以自行提取！<a href=\"https://pan.baidu.com/s/1VNd6WQA0EdJkdHrdjNCYBw?pwd=j6y6\"> 提取码：j6y6</a></p>\n<h1><a id=\"_548\"></a>结语</h1>\n<p><font color=\"blue\" size=\"4\">各位小伙伴，看到这里就是缘分嘛，希望我的这些内容可以给你带来那么一丝丝帮助，可以的话三连支持一下呗😁！！！ 感谢每一位走到这里的小伙伴，我们可以一起学习交流，一起进步😉！！！加油🏃！！！</font><br/> <img alt=\"img\" src=\"..\\..\\static\\image\\8e7f98ca734004ec692bfa66211ef7c1.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-07-08 09:12:58", "summary": "在这里插入图片描述博客主页心辛向荣系列专栏从到，语言学习一句短话你若盛开，蝴蝶自来！博客说明尽己所能，把每一篇博客写好，帮助自己熟悉所学知识，也希望自己的这些内容可以帮助到一些在学习路上的伙伴，文章中"}