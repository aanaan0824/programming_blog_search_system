{"blogid": "126650650", "writerAge": "码龄1年", "writerBlogNum": "113", "writerCollect": "4528", "writerComment": "1431", "writerFan": "8149", "writerGrade": "5级", "writerIntegral": "4189", "writerName": "一个山里的少年", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126650650.jpg", "writerRankTotal": "3715", "writerRankWeekly": "2593", "writerThumb": "1809", "writerVisitNum": "218514", "blog_read_count": "641", "blog_time": "于 2022-09-01 22:36:02 发布", "blog_title": "Git入门(建议收藏)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<blockquote>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"-toc\" style=\"margin-left:40px;\"></p>\n<p id=\"%E4%B8%80.git%E7%AE%80%E4%BB%8B-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%B8%80.git%E7%AE%80%E4%BB%8B\">一.git简介</a></p>\n<p id=\"%E4%BA%8C.git%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%85%B6%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BA%8C.git%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%85%B6%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4\">二.git的安装及其常用指令</a></p>\n<p id=\"%E4%B8%89.%E5%88%86%E6%94%AF%E5%8F%8A%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%B8%89.%E5%88%86%E6%94%AF%E5%8F%8A%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C\">三.分支及远程仓库基础操作</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n</blockquote>\n<h2 id=\"%E4%B8%80.git%E7%AE%80%E4%BB%8B\">一.git简介</h2>\n<blockquote>\n<div>\n<span style=\"color:#333333;\">中心服务器，仅仅是为了方便交换大家的修改，但是这个服务器的地位和我们每个人的</span>\n<span style=\"color:#333333;\">PC</span>\n<span style=\"color:#333333;\">是一样的。我们可以 把它当做一个开发者的pc</span>\n<span style=\"color:#333333;\">就可以就是为了大家代码容易交流不关机用的。没有它大家一样可以工作，只不过“</span>\n<span style=\"color:#333333;\">交换</span>\n<span style=\"color:#333333;\">”</span>\n<span style=\"color:#333333;\">修改不方便而已。 git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。</span>\n<span style=\"color:#333333;\">Git</span>\n<span style=\"color:#333333;\">是 Linus Torvalds 为了帮助管理 </span>\n<span style=\"color:#333333;\">Linux </span>\n<span style=\"color:#333333;\">内核开发而开发的一个开放源码的版本控制软件。 同生活中的许多伟大事物一样，Git </span>\n<span style=\"color:#333333;\">诞生于一个极富纷争大举创新的年代。</span>\n<span style=\"color:#333333;\">Linux </span>\n<span style=\"color:#333333;\">内核开源项目有着为数众 多的参与者。 绝大多数的 Linux </span>\n<span style=\"color:#333333;\">内核维护工作都花在了提交补丁和保存归档的繁琐事务上（</span>\n<span style=\"color:#333333;\">1991</span>\n<span style=\"color:#333333;\">－</span>\n<span style=\"color:#333333;\">2002 年间）。 到 2002 </span>\n<span style=\"color:#333333;\">年，整个项目组开始启用一个专有的分布式版本控制系统 </span>\n<span style=\"color:#333333;\">BitKeeper </span>\n<span style=\"color:#333333;\">来管理和维护代 码。到了 2005 年，开发 </span>\n<span style=\"color:#333333;\">BitKeeper </span>\n<span style=\"color:#333333;\">的商业公司同 </span>\n<span style=\"color:#333333;\">Linux </span>\n<span style=\"color:#333333;\">内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 </span>\n<span style=\"color:#333333;\">BitKeeper </span>\n<span style=\"color:#333333;\">的权力。 这就迫使 </span>\n<span style=\"color:#333333;\">Linux </span>\n<span style=\"color:#333333;\">开源社区（特别是 </span>\n<span style=\"color:#333333;\">Linux </span>\n<span style=\"color:#333333;\">的缔造者 Linus Torvalds）基于使用 </span>\n<span style=\"color:#333333;\">BitKeeper </span>\n<span style=\"color:#333333;\">时的经验教训，开发出自己的版本系统。 他们对新的系统制订 了若干目标： 速度简单的设计 对非线性开发模式的强力支持（允许成千上万个并行开发的分支） 完全分布式 有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）-------------来自百度</span>\n</div>\n</blockquote>\n<p>其大致工作原理和流程如下：</p>\n<blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"316\" src=\"..\\..\\static\\image\\0909f19a4f824317b51bec1a65999822.png\" width=\"936\"/></p>\n</blockquote>\n<p> 其中的工作区、暂存区、仓库区、远程仓库在后面在进行介绍，其中上面涉及到的指令如下：</p>\n<blockquote>\n<div>\n<span style=\"color:#333333;\">1. clone</span>\n<span style=\"color:#333333;\">（克隆）</span>\n<span style=\"color:#333333;\">: </span>\n<span style=\"color:#333333;\">从远程仓库中克隆代码到本地仓库。</span>\n</div>\n<div>\n<span style=\"color:#333333;\">2. checkout </span>\n<span style=\"color:#333333;\">（检出）:从本地仓库中检出一个仓库分支然后进行修订。</span>\n</div>\n<div>\n<span style=\"color:#333333;\">3. add</span>\n<span style=\"color:#333333;\">（添加）</span>\n<span style=\"color:#333333;\">: </span>\n<span style=\"color:#333333;\">在提交前先将代码提交到暂存区。</span>\n</div>\n<div>\n<span style=\"color:#333333;\">4. commit</span>\n<span style=\"color:#333333;\">（提交）</span>\n<span style=\"color:#333333;\">: </span>\n<span style=\"color:#333333;\">提交到本地仓库。本地仓库中保存修改的各个历史版本。</span>\n</div>\n<div>\n<span style=\"color:#333333;\">5. fetch (</span>\n<span style=\"color:#333333;\">抓取</span>\n<span style=\"color:#333333;\">) </span>\n<span style=\"color:#333333;\">： 从远程库，抓取到本地仓库，不进行任何的合并动作，一般操作比较少。 </span>\n</div>\n<div>\n<span style=\"color:#333333;\">6. pull (</span>\n<span style=\"color:#333333;\">拉取</span>\n<span style=\"color:#333333;\">) </span>\n<span style=\"color:#333333;\">： 从远程库拉到本地库，自动进行合并(merge)</span>\n<span style=\"color:#333333;\">，然后放到到工作区，相当于 </span>\n</div>\n<div>\n<span style=\"color:#333333;\">fetch+merge。</span>\n</div>\n<div>\n<span style=\"color:#333333;\">7. push</span>\n<span style=\"color:#333333;\">（推送）</span>\n<span style=\"color:#333333;\"> : </span>\n<span style=\"color:#333333;\">修改完成后，需要和团队成员共享代码时，将代码推送到远程仓库。</span>\n</div>\n</blockquote>\n<div>\n<span style=\"color:#333333;\">指令后面在慢慢详细介绍</span>\n</div>\n<div></div>\n<h2 id=\"%E4%BA%8C.git%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%85%B6%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4\">二.git的安装及其常用指令</h2>\n<p>1.git的安装：</p>\n<blockquote>\n<div>\n<span style=\"color:#333333;\">下载地址： </span>\n<span style=\"color:#4183c4;\">https://git-scm.com/download </span>\n</div>\n</blockquote>\n<div>\n 注意：下载之后右击鼠标会出现Git GUI 和Git Bash这两个东西：\n</div>\n<blockquote>\n<div>\n<p class=\"img-center\"><img alt=\"\" height=\"333\" src=\"..\\..\\static\\image\\61395ca0922643b8ba28e024a9a02d61.png\" width=\"350\"/></p>\n</div>\n<p> </p>\n</blockquote>\n<div>\n<ul><li><span style=\"color:#333333;\">Git GUI</span><span style=\"color:#333333;\">：</span><span style=\"color:#333333;\">Git</span><span style=\"color:#333333;\">提供的图形界面工具 </span></li><li><span style=\"color:#333333;\">Git Bash</span><span style=\"color:#333333;\">：</span><span style=\"color:#333333;\">Git</span><span style=\"color:#333333;\">提供的命令行工具 </span></li></ul>\n<div>\n<span style=\"color:#333333;\">当安装</span>\n<span style=\"color:#333333;\">Git</span>\n<span style=\"color:#333333;\">后首先要做的事情是设置用户名称和</span>\n<span style=\"color:#333333;\">email</span>\n<span style=\"color:#333333;\">地址。这是非常重要的，因为每次</span>\n<span style=\"color:#333333;\">Git</span>\n<span style=\"color:#333333;\">提交都会使用 该用户信息。我们只需要打开Git Bash然后输入以下指令就可以了：</span>\n</div>\n<div>\n<blockquote>\n<pre><code class=\"language-cpp\">git config --global user.name+用户名\n\ngit config --global user.email+你的邮箱\n\n</code></pre>\n</blockquote>\n<p> 注意：</p>\n<blockquote>\n<ul><li>--local（默认高优先级）：只会影响到本地仓库</li><li>--global(中优先级）：只会影响到当前用户的git仓库</li><li>--system（低优先级）:影响到全系统git仓库</li></ul>\n</blockquote>\n<p>在这里做一下演示：</p>\n<blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"449\" src=\"..\\..\\static\\image\\ac16b60ce5c6434cae71a760c5a19bcb.png\" width=\"745\"/></p>\n</blockquote>\n<p> 2.git当中的常用命令</p>\n<p>使用git的第一步首先我们得要有一个本地仓库：主要步骤如下</p>\n<blockquote>\n<div>\n<span style=\"color:#333333;\">1</span>\n<span style=\"color:#333333;\">）在电脑的任意位置创建一个空目录（例如</span>\n<span style=\"color:#333333;\">test</span>\n<span style=\"color:#333333;\">）作为我们的本地</span>\n<span style=\"color:#333333;\">Git</span>\n<span style=\"color:#333333;\">仓库 </span>\n</div>\n<div>\n<span style=\"color:#333333;\">2</span>\n<span style=\"color:#333333;\">）进入这个目录中，点击右键打开</span>\n<span style=\"color:#333333;\">Git bash</span>\n<span style=\"color:#333333;\">窗口 </span>\n</div>\n<div>\n<span style=\"color:#333333;\">3</span>\n<span style=\"color:#333333;\">）执行命令</span>\n<span style=\"color:#333333;\">git init </span>\n</div>\n<div>\n<span style=\"color:#333333;\">4</span>\n<span style=\"color:#333333;\">）如果创建成功后可在文件夹下看到隐藏的</span>\n<span style=\"color:#333333;\">.git</span>\n<span style=\"color:#333333;\">目录。 </span>\n</div>\n<div>\n<img alt=\"\" height=\"380\" src=\"..\\..\\static\\image\\a4814eafeb0b4006bd779524e4aee7b6.png\" width=\"1200\"/>\n</div>\n</blockquote>\n<p> <span style=\"color:#333333;\">Git工作目录下对于文件的</span><span style=\"color:#333333;\"><strong>修改</strong></span><span style=\"color:#333333;\">(</span><span style=\"color:#333333;\">增加、删除、更新</span><span style=\"color:#333333;\">)</span><span style=\"color:#333333;\">会存在几个状态，这些</span><span style=\"color:#333333;\"><strong>修改</strong></span><span style=\"color:#333333;\">的状态会随着我们执行</span><span style=\"color:#333333;\">Git 的命令而发生变化。</span></p>\n<blockquote>\n<p><img alt=\"\" height=\"353\" src=\"..\\..\\static\\image\\915469d11580479eb18a9cd661afdcc6.png\" width=\"903\"/></p>\n</blockquote>\n</div>\n</div>\n<p>其中几种状况的解释：</p>\n<blockquote>\n<p>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</p>\n<p><br/> Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</p>\n<p><br/> Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改</p>\n<p><br/> Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified<br/>  </p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\20200315141607661.png\"/></p>\n</blockquote>\n<p> 下面我们来看一些基本的git指令:</p>\n<div>\n 1.查看修改状态：\n</div>\n<blockquote>\n<div>\n<div>\n<span style=\"color:#333333;\">作用：查看的修改的状态（暂存区、工作区） </span>\n</div>\n<div>\n<span style=\"color:#333333;\">命令形式：</span>\n<span style=\"color:#333333;\">git status </span>\n</div>\n</div>\n</blockquote>\n<p>2.添加工作区到暂存区</p>\n<blockquote>\n<div>\n<span style=\"color:#333333;\">作用：添加工作区一个或多个文件的修改到暂存区 </span>\n</div>\n<div>\n<span style=\"color:#333333;\">命令形式：</span>\n<span style=\"color:#333333;\">git add </span>\n<span style=\"color:#333333;\">单个文件名或者</span>\n<span style=\"color:#333333;\">通配符 </span>\n</div>\n<div>\n<span style=\"color:#333333;\">将所有修改加入暂存区：</span>\n<span style=\"color:#333333;\">git add</span>\n</div>\n</blockquote>\n<div>\n<span style=\"color:#333333;\">3.提交暂存区到本地仓库</span>\n</div>\n<div>\n<blockquote>\n<div>\n<span style=\"color:#333333;\">作用：提交暂存区内容到本地仓库的当前分支 </span>\n</div>\n<div>\n<span style=\"color:#333333;\">命令形式：</span>\n<span style=\"color:#333333;\">git commit -m '</span>\n<span style=\"color:#333333;\">注释内容</span>\n<span style=\"color:#333333;\">'</span>\n</div>\n</blockquote>\n<div>\n  4.查看日志信息\n </div>\n<div>\n<blockquote>\n<div>\n<span style=\"color:#333333;\">作用</span>\n<span style=\"color:#333333;\">:</span>\n<span style=\"color:#333333;\">查看提交记录 </span>\n</div>\n<div>\n<span style=\"color:#333333;\">命令形式：</span>\n<span style=\"color:#333333;\">git log [option] </span>\n</div>\n<div>\n<span style=\"color:#333333;\">options：</span>\n</div>\n<div>\n<span style=\"color:#333333;\">--all </span>\n<span style=\"color:#333333;\">显示所有分支 </span>\n</div>\n<div>\n<span style=\"color:#333333;\">--pretty=oneline </span>\n<span style=\"color:#333333;\">将提交信息显示为一行 </span>\n</div>\n<div>\n<span style=\"color:#333333;\">--abbrev-commit </span>\n<span style=\"color:#333333;\">使得输出的</span>\n<span style=\"color:#333333;\">commitId</span>\n<span style=\"color:#333333;\">更简短 </span>\n</div>\n<div>\n<span style=\"color:#333333;\">--graph </span>\n<span style=\"color:#333333;\">以图的形式显示 </span>\n</div>\n</blockquote>\n<div>\n   5.版本回退\n  </div>\n<div>\n<blockquote>\n<div>\n<span style=\"color:#333333;\">作用：版本切换 </span>\n</div>\n<div>\n<span style=\"color:#333333;\">命令形式：</span>\n<span style=\"color:#333333;\">git reset --hard commitID </span>\n</div>\n<div>\n<span style=\"color:#333333;\">commitID </span>\n<span style=\"color:#333333;\">可以使用 </span>\n<span style=\"color:#333333;\">git</span>\n<span style=\"color:#333333;\">-</span>\n<span style=\"color:#333333;\">log </span>\n<span style=\"color:#333333;\">或 </span>\n<span style=\"color:#333333;\">git log </span>\n<span style=\"color:#333333;\">指令查看 </span>\n</div>\n<div>\n<span style=\"color:#333333;\">如何查看已经删除的记录？ </span>\n</div>\n<div>\n<span style=\"color:#333333;\">git reflflog </span>\n</div>\n<div>\n<span style=\"color:#333333;\">这个指令可以看到已经删除的提交记录 </span>\n</div>\n</blockquote>\n<h2 id=\"%E4%B8%89.%E5%88%86%E6%94%AF%E5%8F%8A%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C\">三.分支及远程仓库基础操作</h2>\n<div>\n<span style=\"color:#333333;\">分支几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离 开来进行重大的Bug</span>\n<span style=\"color:#333333;\">修改、开发新的功能，以免影响开发主线。 </span>\n</div>\n<div></div>\n<div>\n    1.查看本地分支:git branch\n   </div>\n<blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"194\" src=\"..\\..\\static\\image\\e31384251513421598bb8ec5baf8d546.png\" width=\"713\"/></p>\n</blockquote>\n<p> 2.创建本地分支：</p>\n<p>git branch +分支名</p>\n<blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"248\" src=\"..\\..\\static\\image\\8eb61fa1ae634c58921bd9eb7b99f417.png\" width=\"706\"/></p>\n<p> </p>\n</blockquote>\n<div>\n     此时我们就看到了两个分支一个是master分支和dev分支\n   </div>\n<div></div>\n<div></div>\n<div>\n    3.切换分支：\n   </div>\n<div></div>\n<div>\n    git checkout +分支名\n   </div>\n<div></div>\n<div>\n    不过我们\n    <span style=\"color:#333333;\">我们还可以直接切换到一个不存在的分支（创建并切换） </span>\n</div>\n<div></div>\n<div>\n    git checkout -b +分支名\n   </div>\n<div></div>\n<div></div>\n<div>\n    4.合并分支\n   </div>\n<div>\n    命令: git merge\n   </div>\n<div>\n<span style=\"color:#333333;\">一个分支上的提交可以合并到另一个分支，为什么要这样了下面我们来看一下现在我们将分支切换为dev分支并且修改test.c里面的内容</span>\n</div>\n<div></div>\n<blockquote>\n<div>\n<p class=\"img-center\"><img alt=\"\" height=\"395\" src=\"..\\..\\static\\image\\e6db267affcb43aaa5c734b39fccf4fb.png\" width=\"730\"/></p>\n</div>\n</blockquote>\n<p> 我们发现我们在dev分支上对test.c进行修改完之后我们在回到master分支时我们发现在dev分支上对test.c的修改我们在master分支上看不到此时需要进行git merge +分支名进行合并</p>\n<blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"449\" src=\"..\\..\\static\\image\\b03b2a7aef4d4a2cb39ffca91002499b.png\" width=\"745\"/></p>\n</blockquote>\n<p> 5.删除分支：git branch -d +分支名</p>\n<blockquote>\n<div>\n<span style=\"color:#333333;\">git branch -d b1 </span>\n<span style=\"color:#333333;\">删除分支时，需要做各种检查 </span>\n</div>\n<div>\n<span style=\"color:#333333;\">git branch -D b1 </span>\n<span style=\"color:#333333;\">不做任何检查，强制删除</span>\n</div>\n</blockquote>\n<div></div>\n<div>\n    6.分支冲突的解决：\n   </div>\n<div></div>\n<blockquote>\n<div>\n<span style=\"color:#333333;\">当两个分支上对文件的修改可能会存在冲突，例如同时修改了同一个文件的同一行，这时就需要手动解 </span>\n</div>\n<div>\n<span style=\"color:#333333;\">决冲突，解决冲突步骤如下： </span>\n</div>\n<div>\n<span style=\"color:#333333;\">1. </span>\n<span style=\"color:#333333;\">处理文件中冲突的地方 </span>\n</div>\n<div>\n<span style=\"color:#333333;\">2. </span>\n<span style=\"color:#333333;\">将解决完冲突的文件加入暂存区</span>\n<span style=\"color:#333333;\">(add) </span>\n</div>\n<div>\n<span style=\"color:#333333;\">3. </span>\n<span style=\"color:#333333;\">提交到仓库</span>\n<span style=\"color:#333333;\">(commit) </span>\n</div>\n</blockquote>\n<div>\n    下面我们来演示一下分支冲突：\n   </div>\n<div></div>\n<div>\n    首先我们可以在master分支上对test.c的第一行进行修改，然后我们在使用git checkout dev切换到dev分支同样的我们也修改test.c的第一行代码\n   </div>\n<div>\n    然后我们在回到master分支合并dev分支\n   </div>\n<blockquote>\n<div>\n<p class=\"img-center\"><img alt=\"\" height=\"176\" src=\"..\\..\\static\\image\\778a56ed8f934cdab2ebe64a147a32d2.png\" width=\"653\"/></p>\n</div>\n<p> </p>\n</blockquote>\n<div></div>\n<p>如何解决了？我们可以尝试打开一下这个test.c文件</p>\n<blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"164\" src=\"..\\..\\static\\image\\8116fcc53046411996428a0471b1f68e.png\" width=\"698\"/></p>\n</blockquote>\n<p>此时我们可以删除一个分支做的修改然后再使用git add 和git commit -m进行提交即可</p>\n<p>开发当中分支的原则和流程</p>\n<blockquote>\n<div>\n<span style=\"color:#333333;\">几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离 开来进行重大的Bug</span>\n<span style=\"color:#333333;\">修改、开发新的功能，以免影响开发主线。 在开发中，一般有如下分支使用原则与流程： </span>\n</div>\n<div>\n<span style=\"color:#333333;\">1.master </span>\n<span style=\"color:#333333;\">（生产） 分支 线上分支，主分支，中小规模项目作为线上运行的应用对应的分支.</span>\n</div>\n<div></div>\n<div>\n<span style=\"color:#333333;\">2.develop</span>\n<span style=\"color:#333333;\">（开发）分支 </span>\n</div>\n<div>\n<span style=\"color:#333333;\">是从</span>\n<span style=\"color:#333333;\">master</span>\n<span style=\"color:#333333;\">创建的分支，一般作为开发部门的主要开发分支，如果没有其他并行开发不同期上线 要求，都可以在此版本进行开发，阶段开发完成后，需要是合并到master</span>\n<span style=\"color:#333333;\">分支</span>\n<span style=\"color:#333333;\">,</span>\n<span style=\"color:#333333;\">准备上线。 </span>\n</div>\n<div></div>\n<div>\n<span style=\"color:#333333;\">3.feature/xxxx</span>\n<span style=\"color:#333333;\">分支 从develop</span>\n<span style=\"color:#333333;\">创建的分支，一般是同期并行开发，但不同期上线时创建的分支，分支上的研发任务完 </span>\n</div>\n<div>\n<span style=\"color:#333333;\">成后合并到</span>\n<span style=\"color:#333333;\">develop</span>\n<span style=\"color:#333333;\">分支。 hotfifix/xxxx分支， 从master</span>\n<span style=\"color:#333333;\">派生的分支，一般作为线上</span>\n<span style=\"color:#333333;\">bug</span>\n<span style=\"color:#333333;\">修复使用，修复完成后需要合并到</span>\n<span style=\"color:#333333;\">master</span>\n<span style=\"color:#333333;\">、</span>\n<span style=\"color:#333333;\">test</span>\n<span style=\"color:#333333;\">、 </span>\n</div>\n<div>\n<span style=\"color:#333333;\">develop分支。 还有一些</span>\n<span style=\"color:#333333;\">其他分支，在此不再详述，例如</span>\n<span style=\"color:#333333;\">test</span>\n<span style=\"color:#333333;\">分支（用于代码测试）、</span>\n<span style=\"color:#333333;\">pre</span>\n<span style=\"color:#333333;\">分支（预上线分支）等</span>\n<div>\n<span style=\"color:#333333;\">等。</span>\n</div>\n<div></div>\n</div>\n</blockquote>\n</div>\n</div>\n</div>\n<p> 7.操作远程仓库</p>\n<blockquote>\n<div>\n<span style=\"color:#333333;\">命令：</span>\n<span style=\"color:#333333;\"> git remote add &lt;</span>\n<span style=\"color:#333333;\">远端名称</span>\n<span style=\"color:#333333;\">&gt; &lt;</span>\n<span style=\"color:#333333;\">仓库路径</span>\n<span style=\"color:#333333;\">&gt; 。远端名称，默认是origin</span>\n<span style=\"color:#333333;\">，取决于远端服务器设置 。仓库路径，从远端服务器获取此URL </span>\n</div>\n<div>\n<span style=\"color:#333333;\">例如: git remote add origin </span>\n<a href=\"https://gitee.com/kuangsiyuanyigeshanlideshaonian/test.git\" title=\"一个山里的少年/测试\">一个山里的少年/测试</a>\n</div>\n</blockquote>\n<p> 查看远程仓库：</p>\n<p><span style=\"color:#333333;\">命令：</span><span style=\"color:#333333;\">git remote </span></p>\n<p>推送到远程仓库：</p>\n<blockquote>\n<div>\n<span style=\"color:#333333;\">命令：</span>\n<span style=\"color:#333333;\">git push [-f] [--set-upstream] [</span>\n<span style=\"color:#333333;\">远端名称</span>\n<span style=\"color:#333333;\"> [</span>\n<span style=\"color:#333333;\">本地分支名</span>\n<span style=\"color:#333333;\">][:</span>\n<span style=\"color:#333333;\">远端分支名</span>\n<span style=\"color:#333333;\">] ] </span>\n</div>\n<div>\n<span style=\"color:#333333;\">如果远程分支名和本地分支名称相同，则可以只写本地分支 </span>\n</div>\n<div>\n<span style=\"color:#333333;\">git push origin master -f 表示强制覆盖 --set</span>\n<span style=\"color:#333333;\">-</span>\n<span style=\"color:#333333;\">upstream </span>\n<span style=\"color:#333333;\">推送到远端的同时并且建立起和远端分支的关联关系。 </span>\n</div>\n<div>\n<span style=\"color:#333333;\">git push </span>\n<span style=\"color:#333333;\">--</span>\n<span style=\"color:#333333;\">set</span>\n<span style=\"color:#333333;\">-</span>\n<span style=\"color:#333333;\">upstream origin master </span>\n</div>\n<div>\n<span style=\"color:#333333;\">如果</span>\n<span style=\"color:#333333;\"><strong>当前分支已经和远端分支关联</strong></span>\n<span style=\"color:#333333;\">，则可以省略分支名和远端名。 </span>\n</div>\n<div>\n<span style=\"color:#333333;\">git push </span>\n<span style=\"color:#333333;\">将</span>\n<span style=\"color:#333333;\">master</span>\n<span style=\"color:#333333;\">分支推送到已关联的远端分支。</span>\n</div>\n</blockquote>\n<div>\n 从远程仓库克隆\n</div>\n<div>\n<blockquote>\n<div>\n<span style=\"color:#333333;\">如果已经有一个远端仓库，我们可以直接</span>\n<span style=\"color:#333333;\">clone</span>\n<span style=\"color:#333333;\">到本地。 </span>\n</div>\n<div>\n<span style=\"color:#333333;\">命令</span>\n<span style=\"color:#333333;\">: git clone &lt;</span>\n<span style=\"color:#333333;\">仓库路径</span>\n<span style=\"color:#333333;\">&gt; [</span>\n<span style=\"color:#333333;\">本地目录</span>\n<span style=\"color:#333333;\">] </span>\n</div>\n<div>\n<span style=\"color:#333333;\">本地目录可以省略，会自动生成一个目录 </span>\n</div>\n</blockquote>\n<div>\n  从远程仓库拉取与抓取\n </div>\n<div>\n<blockquote>\n<div>\n<span style=\"color:#333333;\"><strong>从远程仓库中抓取和拉取 </strong></span>\n</div>\n<div>\n<span style=\"color:#333333;\">远程分支和本地的分支一样，我们可以进行</span>\n<span style=\"color:#333333;\">merge</span>\n<span style=\"color:#333333;\">操作，只是需要先把远端仓库里的更新都下载到本 </span>\n</div>\n<div>\n<span style=\"color:#333333;\">地，再进行操作。 </span>\n</div>\n<div>\n<span style=\"color:#333333;\">抓取 命令：</span>\n<span style=\"color:#333333;\">git fetch [remote name] [branch name] </span>\n</div>\n<div>\n<span style=\"color:#333333;\"><strong>抓取指令就是将仓库里的更新都抓取到本地，不会进行合并 </strong>如果不指定远端名称和分支名，则抓取所有分支。 </span>\n</div>\n<div>\n<span style=\"color:#333333;\">拉取 命令：</span>\n<span style=\"color:#333333;\">git pull [remote name] [branch name] </span>\n</div>\n<div>\n<span style=\"color:#333333;\"><strong>拉取指令就是将远端仓库的修改拉到本地并自动进行合并，等同于</strong></span>\n<span style=\"color:#333333;\"><strong>fetch+merge </strong></span>\n</div>\n<div>\n<span style=\"color:#333333;\">如果不指定远端名称和分支名，则抓取所有并更新当前分支</span>\n</div>\n</blockquote>\n<div>\n   解决合并冲突\n  </div>\n<blockquote>\n<div>\n<span style=\"color:#333333;\">在一段时间，</span>\n<span style=\"color:#333333;\">A</span>\n<span style=\"color:#333333;\">、</span>\n<span style=\"color:#333333;\">B</span>\n<span style=\"color:#333333;\">用户修改了同一个文件，且修改了同一行位置的代码，此时会发生合并冲突。 </span>\n</div>\n<div>\n<span style=\"color:#333333;\">A</span>\n<span style=\"color:#333333;\">用户在本地修改代码后优先推送到远程仓库，此时</span>\n<span style=\"color:#333333;\">B</span>\n<span style=\"color:#333333;\">用户在本地修订代码，提交到本地仓库后，也需要 </span>\n</div>\n<div>\n<span style=\"color:#333333;\">推送到远程仓库，此时</span>\n<span style=\"color:#333333;\">B</span>\n<span style=\"color:#333333;\">用户晚于</span>\n<span style=\"color:#333333;\">A</span>\n<span style=\"color:#333333;\">用户，</span>\n<span style=\"color:#333333;\"><strong>故需要先拉取远程仓库的提交，经过合并后才能推送到远端分 </strong></span>\n</div>\n<div>\n<span style=\"color:#333333;\"><strong>支</strong></span>\n<span style=\"color:#333333;\">,</span>\n<span style=\"color:#333333;\">如下图所示。</span>\n</div>\n<div>\n<img alt=\"\" height=\"263\" src=\"..\\..\\static\\image\\33fa3fbdc801463fa9ab81234ded9c45.png\" width=\"817\"/>\n</div>\n<div>\n<span style=\"color:#333333;\">在</span>\n<span style=\"color:#333333;\">B</span>\n<span style=\"color:#333333;\">用户拉取代码时，因为</span>\n<span style=\"color:#333333;\">A</span>\n<span style=\"color:#333333;\">、</span>\n<span style=\"color:#333333;\">B</span>\n<span style=\"color:#333333;\">用户同一段时间修改了同一个文件的相同位置代码，故会发生合并冲 </span>\n</div>\n<div>\n<span style=\"color:#333333;\">突。 </span>\n</div>\n<div>\n<span style=\"color:#333333;\"><strong>远程分支也是分支，所以合并时冲突的解决方式也和解决本地分支冲突相同相同。</strong></span>\n</div>\n<p> </p>\n</blockquote>\n</div>\n</div>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-01 22:36:02", "summary": "目录一简介二的安装及其常用指令三分支及远程仓库基础操作一简介中心服务器，仅仅是为了方便交换大家的修改，但是这个服务器的地位和我们每个人的是一样的。我们可以把它当做一个开发者的就可以就是为了大家代码容易"}