{"blogid": "125268933", "writerAge": "码龄13年", "writerBlogNum": "104", "writerCollect": "51", "writerComment": "7", "writerFan": "11", "writerGrade": "4级", "writerIntegral": "1094", "writerName": "孟华328", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125268933.jpg", "writerRankTotal": "33766", "writerRankWeekly": "20122", "writerThumb": "10", "writerVisitNum": "39869", "blog_read_count": "4208", "blog_time": "已于 2022-06-13 22:58:27 修改", "blog_title": "Vue | babel.config.js 配置详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"1__0\"></a>1 概述</h2>\n<p>Babel 相当于一个中介，一边是用户，另一边是浏览器。这几年，JavaScript 发生了很大的变化，许多新特性在很多浏览器里都不支持。</p>\n<p>Babel 的主要作用就是规避这些问题，可以确保 JavaScript 代码兼容所有的浏览器，比如 IE 11。</p>\n<h2><a id=\"2_Babel__4\"></a>2 Babel 的工作原理</h2>\n<p>Babel 使用 AST 把不兼容的代码编译成 ES15 版本，因为大多数浏览器都支持这个版本的 JavaScript 代码。</p>\n<h3><a id=\"21__7\"></a>2.1 如何设置？</h3>\n<p>在控制台运行如下命令：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev @babel/core @babel/cli @babel/preset-env\n</code></pre>\n<p>应用程序的根目录会默认创建一个 <code>babel.config.json</code> 文件。Babel 将遍历 <code>src</code> 目录下的所有 JS 文件。</p>\n<pre><code class=\"prism language-json\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token string-property property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"@babel/env\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token string-property property\">\"targets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token string-property property\">\"edge\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"17\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string-property property\">\"firefox\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"60\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string-property property\">\"chrome\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"67\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string-property property\">\"safari\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"11.1\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">\"useBuiltIns\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"usage\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">\"corejs\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3.6.5\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>`\n</code></pre>\n<p>把 <code>babel.config.json</code> 添加到 <code> package.json</code> 里。</p>\n<pre><code class=\"prism language-json\"><span class=\"token string-property property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./node_modules/.bin/babel src --out-dir build\"</span>\n</code></pre>\n<p>然后，执行如下命令：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">npm</span> run build\n</code></pre>\n<p>这时，在 <code>build</code> 文件夹里就生成了转换代码。</p>\n<h3><a id=\"22_babelcore_babelcli_babelpresetenv__49\"></a>2.2 @babel/core @babel/cli @babel/preset-env 到底做了哪些事情</h3>\n<ul><li>@babel/core：Babel 的所有核心功能都在这里</li><li>@babel/cli：提供了 CLI 工具，使我们能够运行 <code>npm run build</code></li><li>@babel/preset-env：提供预置功能</li></ul>\n<h2><a id=\"3__54\"></a>3 插件</h2>\n<p>Babel 使用插件来执行代码转换，插件其实就是用 JavaScript 所写的程序片段。比如<code>@babel/plugin-change-Arrow-function</code> ，它的代码实现如下：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// From this</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Converted to this</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>上面提到的 <code>@babel/preset-env </code>本身包含了一组插件，可以处理手动设置插件带来的很多问题，大多数情况下能够智能处理代码。</p>\n<h3><a id=\"Polyfill_68\"></a>Polyfill</h3>\n<p>Polyfill 是 JavaScript 代码片段，兼容原本不支持的旧版浏览器。Polyfill 模块包括<code>core-js</code>和一个自定义的重生器运行时，以模拟完整的<code>ES2015 +</code>环境。如果要使用 PolyFill 必须运行如下命令：</p>\n<pre><code class=\"prism language-bash\">// Install via \n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save @babel/polyfill\n\n// Add via\n<span class=\"token function\">import</span> <span class=\"token string\">\"core-js/stable\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">import</span> <span class=\"token string\">\"regenerator-runtime/runtime\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"4_Babel__79\"></a>4 Babel 配置文件的优先级</h2>\n<p>从低到高依次为：</p>\n<ul><li>babel.config.json</li><li>babelrc.json</li><li>@babel/cli</li></ul>\n<p>依照优先级，<code>babel.config.json</code> 会被 <code>. babelrc</code> 覆盖，依次类推。</p>\n<h2><a id=\"5_Babel__87\"></a>5 Babel 有哪些值得注意的选项</h2>\n<p>以下面的配置为例：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string\">\"presets\"</span><span class=\"token builtin class-name\">:</span>\n    <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"@babel/env\"</span>,\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token string\">\"targets\"</span><span class=\"token builtin class-name\">:</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token string\">\"edge\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"17\"</span>,\n                    <span class=\"token string\">\"firefox\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"60\"</span>,\n                    <span class=\"token string\">\"chrome\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"67\"</span>,\n                    <span class=\"token string\">\"safari\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"11.1\"</span>\n                <span class=\"token punctuation\">}</span>,\n                <span class=\"token string\">\"useBuiltIns\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"usage\"</span>,\n                <span class=\"token string\">\"corejs\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"3.6.5\"</span>\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">]</span>,\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol><li> <p>如果要缩减输出代码，需要增加选项 <code> \"minified\": true</code></p> </li><li> <p>如果要忽略某些文件，则添加 <code>ignore: [\"file or directory path\"]</code></p> </li><li> <p>只编译特定的文件或文件夹，则添加</p> <pre><code class=\"prism language-bash\">// For Files\n<span class=\"token string\">\"only\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src/some_file.js\"</span><span class=\"token punctuation\">]</span>,\n// For Directory\n<span class=\"token string\">\"only\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src\"</span><span class=\"token punctuation\">]</span>,\n</code></pre> </li></ol>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-06-13 22:58:27", "summary": "概述相当于一个中介，一边是用户，另一边是浏览器。这几年，发生了很大的变化，许多新特性在很多浏览器里都不支持。的主要作用就是规避这些问题，可以确保代码兼容所有的浏览器，比如。的工作原理使用把不兼容的代码"}