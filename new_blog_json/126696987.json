{"blogid": "126696987", "writerAge": "码龄9年", "writerBlogNum": "137", "writerCollect": "4148", "writerComment": "315", "writerFan": "9061", "writerGrade": "7级", "writerIntegral": "9654", "writerName": "VIP_CQCRE", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126696987.jpg", "writerRankTotal": "2203", "writerRankWeekly": "10269", "writerThumb": "835", "writerVisitNum": "1079501", "blog_read_count": "935", "blog_time": "于 2022-09-04 13:26:11 发布", "blog_title": "有了这个库，以后再也不用写正则表达式了！", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<div id=\"js_content\">\n<p style=\"text-align:center;\">这是「进击的Coder」的第 715 篇技术分享</p>\n<p style=\"text-align:center;\">作者：崔庆才</p>\n<p style=\"text-align:center;\"><img alt=\"4a865bbd3ee5263b5ba50b578613008e.png\" src=\"..\\..\\static\\image\\4a865bbd3ee5263b5ba50b578613008e.png\"/></p>\n<p>正则表达式大家应该有了解过吧？它功能很强大，但有一个痛点就是不太容易读写，我们需要了解正则的很多语法规则才能写出一个健壮的正则表达式，很多朋友估计听到正则表达式估计都焦头烂额了。</p>\n<p>就没有解决办法吗？</p>\n<p>有的，今天给大家介绍一个可以让我们用“人类”的方式来写正则表达式的库。</p>\n<h2>Humre</h2>\n<p>没错，这个库就是 Humre，就是 Human（人类） + re（正则表达式） 的组合，单看这个名字还是很有来头啊。</p>\n<p>GitHub 地址：https://github.com/asweigart/humre</p>\n<p>PyPi：https://pypi.org/project/Humre/</p>\n<p>这个库其实很新，第一次 commit 是在 2022/7/21，作者是 Al Sweigart，就是写 pyautogui 库（已有 7.1k star）的那个人，所以还是有一定可信赖度的。</p>\n<p>这个库解决的问题就是让我们可以用更“人类”，也就是更语义化的方式编写正则表达式。</p>\n<blockquote>\n  “\n  <p>注意：当前时间（2022/9/4）这个库还没有发布 1.0 版本，所以相关 API 可能会更改，具体的最新 API 请参考原 GitHub 仓库的最新说明。</p>\n  ”\n </blockquote>\n<h2>基本体验</h2>\n<p>OK，我们先来一个例子看看，比如我们我们现在要从一段文字中提取出一个电话号码，比如原文本如下：</p>\n<pre class=\"has\"><code class=\"language-go\">Call 415-555-1234 today!</code></pre>\n<p>我们需要提取出其中的电话号码，那么用常规的正则表达式就是这么写的：</p>\n<pre class=\"has\"><code class=\"language-go\">\\d{3}-\\d{3}-\\d{4}</code></pre>\n<p>意思就是匹配“三个数字-三个数字-四个数字”，那么用 Python 就可以这么写：</p>\n<pre class=\"has\"><code class=\"language-go\">from re import *\n\ntext = 'Call 415-555-1234 today!'\nregexStr = '\\d{3}-\\d{3}-\\d{4}'\nresult = compile(regexStr).search(text)\nprint(result.group())</code></pre>\n<p>那么用 Humre 就可以写成这样：</p>\n<pre class=\"has\"><code class=\"language-go\">from humre import *\n\ntext = 'Call 415-555-1234 today!'\nregexStr = exactly(3, DIGIT) + '-' + exactly(3, DIGIT) + '-' + exactly(4, DIGIT)\nresult = compile(regexStr).search(text)\nprint(result.group())</code></pre>\n<p>可以看到整个正则表达式就变得语义化了，<code>exactly</code> 指的就是精确匹配，<code>DIGIT</code> 指的就是数字，<code>exactly(3, DIGIT)</code> 就是精确匹配三个数字，也就是 <code>\\d{3}</code>的意思。</p>\n<p>运行结果都是一样的：</p>\n<pre class=\"has\"><code class=\"language-go\">415-555-1234</code></pre>\n<p>我们观察可以发现，这里我们仅仅是把 re 这个库换成了 humre，然后修改了下 <code>regexStr</code> 就可以实现正则表达式的语义化表示了，是不是还挺简单的？</p>\n<p>这时候有人说，我现在也没感觉出这个库有什么优势啊，反而写得更长了。</p>\n<p>那好，咱们再来一个例子，找出所有十六进制数字，这个十六进制数字可能带前缀 <code>0x</code> 或者 <code>0X</code>，普通正则怎么写？</p>\n<pre class=\"has\"><code class=\"language-go\">import re\nre.compile('(?:(?:0x|0X)[0-9a-f]+)|(?:(?:0x|0X)[0-9A-F]+)|(?:[0-9a-f]+)|(?:[0-9A-F]+)')</code></pre>\n<p>感觉可读性怎么样？</p>\n<p>那如果这时候换成 Humre 呢？就可以这样写：</p>\n<pre class=\"has\"><code class=\"language-go\">from humre import *\ncompile(\n    either(\n        noncap_group(noncap_group(either('0x', '0X')), one_or_more(chars('0-9a-f'))),\n        noncap_group(noncap_group(either('0x', '0X')), one_or_more(chars('0-9A-F'))),\n        noncap_group(one_or_more(chars('0-9a-f'))),\n        noncap_group(one_or_more(chars('0-9A-F')))\n    )\n)</code></pre>\n<p>是不是清晰多了？<code>either</code> 指的就是其中某一个符合条件就可以，然后传入了四个参数，<code>noncap_group</code> 指的就是将内容看作一个整体来匹配，<code>one_or_more</code> 指的就是一个或更多，这样我们就可以清晰地知道这个正则表达式什么含义了。</p>\n<p>再来一个例子，匹配一个带或不带逗号的数字，并且可以匹配小数点，那么普通正则就这样写：</p>\n<pre class=\"has\"><code class=\"language-go\">import re\nre.compile(r'(?:\\+|-)?(?:(?:\\d{1,3}(?:,\\d{3})+)|\\d+)(?:\\.\\d+)?')</code></pre>\n<p>颤抖吧！估计正则专家都不一定一眼读出来这是啥意思，有没有错误。</p>\n<p>那用 Humre 怎么写呢？</p>\n<pre class=\"has\"><code class=\"language-go\">from humre import *\ncompile(\n    # optional negative or positive sign:\n    optional(noncap_group(either(PLUS_SIGN, '-'))),\n    # whole number section:\n    noncap_group(either(\n        # number with commas:\n        noncap_group(between(1, 3, DIGIT), one_or_more(noncap_group(',', exactly(3, DIGIT)))),\n        # number without commas:\n        one_or_more(DIGIT)\n    )),\n    # fractional number section (optional)\n    optional(noncap_group(PERIOD, one_or_more(DIGIT)))\n    )</code></pre>\n<p>是不是又清晰了？</p>\n<p>这里一共拆分为了三部分，正负号、数字、小数点，其中正负号和小数点都是可选的，所以可以加一个 <code>optional</code> ，<code>noncap_group</code> 照例还是整体匹配，然后有一些常量 <code>PLUS_SIGN</code> 就可以代表加号，<code>between</code> 就可代表从几到几。整体这么一拆分，并添加注释和分级，是不是可读性就大大增强了？</p>\n<p>OK，到这里，体会到 Humre 的便捷之处了吧～</p>\n<h2>Humre 真的有必要吗？</h2>\n<p>在我看来，使用正则的人可能有两种：一种是刚不怎么会刚入门的，另一种是精通正则的。</p>\n<p>如果是刚入门的，那有了 Humre，我们其实可以不用过多关心正则的很多语法，上手起来就会快很多。</p>\n<p>如果是精通正则了，那么其实可以很快写出来某个功能需求的正则表达式，这个没问题。</p>\n<p>但写出来之后，如果遇到问题了想要排查，那其实还得费点功夫，</p>\n<p>当然排查过程也可以借助于很多优秀的正则表达式辅助工具，比如：</p>\n<ul><li><p>https://regexr.com/ </p></li><li><p>https://regex101.com/</p></li></ul>\n<p>所以排查问题还好。</p>\n<p>但到了维护阶段，或者项目被别人来维护了，不管是自己还是别人，看到这个正则表达式想看出是什么意思，那其实就不太好办了。</p>\n<p>所以，这种语义化的正则不论对于正则小白还是专家，都是有一定帮助的。</p>\n<h2>语义化表</h2>\n<p>了解了 Humre 的基本功能之后，如果我们想要使用它的话，其实就是找到它的一些 API 功能就好了，比如 <code>optional</code>, <code>nocap_group</code> 等等都什么意思，对应正则表达式的什么功能，这里总结了一些常用的方法和含义：</p>\n<img alt=\"8e0e03db4dd01533a9bafa524d8fca7c.png\" src=\"..\\..\\static\\image\\8e0e03db4dd01533a9bafa524d8fca7c.png\"/>\n<p>另外还有一些常量表示如下：</p>\n<img alt=\"9749a0be872fdb245226091302403a2a.png\" src=\"..\\..\\static\\image\\9749a0be872fdb245226091302403a2a.png\"/>\n<p>另外 Humre 还提供了一些常用的表达，比如十六进制 <code>HEXADECIMAL</code>，参考如下：</p>\n<img alt=\"cebc4ad29d3c2a7ca2e01e20ec90c3cd.png\" src=\"..\\..\\static\\image\\cebc4ad29d3c2a7ca2e01e20ec90c3cd.png\"/>\n<p>这里简单列一下，但最新的 API 建议还是参考官方文档：https://github.com/asweigart/humre#quick-reference</p>\n<p>后面需要做什么？用这个库上手写几个，感受一下，练上几个就熟练了。</p>\n<h2>提示</h2>\n<p>当然，这个库好用是好用的，但距离成熟可能还有一点时间哈，在 1.0 版本之前，其中的 API 可能还会迭代，所以还不建议直接上生产环境。</p>\n<p>如果真的要上生产环境，建议锁死版本号，避免带来潜在的问题。</p>\n<h2>总结</h2>\n<p>好了，这里主要就是给大家介绍下这个正则库，有了它，我们的正则表达式就可以变得更加清晰易读，希望对大家有帮助～</p>\n<p><img alt=\"c7c725e2cf5e4e10a7ec37f00e8cea34.png\" src=\"..\\..\\static\\image\\c7c725e2cf5e4e10a7ec37f00e8cea34.png\"/></p>\n<p>End</p>\n<p style=\"text-align:left;\">崔庆才的新书《Python3网络爬虫开发实战（第二版）》已经正式上市了！书中详细介绍了零基础用 Python 开发爬虫的各方面知识，同时相比第一版新增了 JavaScript 逆向、Android 逆向、异步爬虫、深度学习、Kubernetes 相关内容，‍同时本书已经获得 Python 之父 Guido 的推荐，目前本书正在七折促销中！</p>\n<p style=\"text-align:left;\">内容介绍：<a href=\"\">《Python3网络爬虫开发实战（第二版）》内容介绍</a></p>\n<p style=\"text-align:center;\"><img alt=\"8d9af9f018ff14b796464d3cc9f1af2a.jpeg\" src=\"..\\..\\static\\image\\8d9af9f018ff14b796464d3cc9f1af2a.jpeg\"/></p>\n<p style=\"text-align:center;\">扫码购买</p>\n<p style=\"text-align:center;\"><img alt=\"12bfeecab6789c8eff3aab9533a467e3.png\" src=\"..\\..\\static\\image\\12bfeecab6789c8eff3aab9533a467e3.png\"/></p>\n<p style=\"text-align:center;\">好文和朋友一起看~</p>\n</div>\n</div>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 1, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-09-04 13:26:11", "summary": "这是进击的的第篇技术分享作者：崔庆才正则表达式大家应该有了解过吧？它功能很强大，但有一个痛点就是不太容易读写，我们需要了解正则的很多语法规则才能写出一个健壮的正则表达式，很多朋友估计听到正则表达式估计"}