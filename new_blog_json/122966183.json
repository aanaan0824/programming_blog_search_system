{"blogid": "122966183", "writerAge": "码龄3年", "writerBlogNum": "58", "writerCollect": "533", "writerComment": "1055", "writerFan": "1681", "writerGrade": "5级", "writerIntegral": "2746", "writerName": "一只小逸白", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122966183.jpg", "writerRankTotal": "12222", "writerRankWeekly": "7851", "writerThumb": "808", "writerVisitNum": "177189", "blog_read_count": "21597", "blog_time": "已于 2022-05-09 18:50:52 修改", "blog_title": "Redis实现点赞与关注", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#_3\">一、点赞</a></li><li><ul><li><a href=\"#Mysql_4\">直接写入Mysql</a></li><li><a href=\"#redis_23\">redis直接存储</a></li></ul>\n</li><li><a href=\"#_94\">二、关注</a></li><li><a href=\"#_172\">！！！欢迎点赞收藏关注！！！</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_3\"></a>一、点赞</h1>\n<h2><a id=\"Mysql_4\"></a>直接写入Mysql</h2>\n<p>直接写入Mysql是最简单的做法。</p>\n<p>做两个表即可，</p>\n<ol><li>post_like</li></ol>\n<p>记录文章被赞的次数，已有多少人赞过这种数据就可以直接从表中查到;</p>\n<ol start=\"3\"><li>user_like_post</li></ol>\n<p>记录用户赞过了哪些文章， 当打开文章列表时，显示的有没有赞过的数据就在这里面;</p>\n<p><strong>缺点</strong></p>\n<ol><li>数据库读写压力大<br/> 热门文章会有很多用户点赞，甚至是短时间内被大量点赞， 直接操作数据库从长久来看不是很理想的做法。</li></ol>\n<h2><a id=\"redis_23\"></a>redis直接存储</h2>\n<p>redis主要的特点就是快， 毕竟主要数据都在内存嘛;</p>\n<p><strong>优点</strong></p>\n<ol><li> <p>性能高</p> </li><li> <p>缓解数据库读写压力</p> </li></ol>\n<p>其实我更多的在于缓解写压力， 真的读压力， 通过mysql主从甚至通过加入redis对热点数据做缓存都可以解决，写压力对于前面的方案确实是不大好使。</p>\n<p><strong>缺点</strong></p>\n<ol><li>开发复杂</li></ol>\n<p>这个比直接写mysql的方案要复杂很多， 需要考虑的地方也很多;</p>\n<ol start=\"2\"><li>不能保证数据安全性</li></ol>\n<p>不过对于我们点赞而已， 稍微丢失一点数据问题不大;</p>\n<p><strong>具体设计</strong></p>\n<p><strong>redis设计部分:</strong></p>\n<p><code>post_set</code><br/> 在redis中弄一个set存放所有被点赞的文章</p>\n<p><code>post_user_like_set_{$post_id}</code><br/> 对每个post以post_id作为key, 搞一个set存放所有对该post点赞的用户;</p>\n<p><code>post_user_like_{$post_id}_{$user_id}</code><br/> 将每个用户对每个post的点赞情况放到一个hash里面去， hash的字段就</p>\n<p><strong>为啥用hash</strong></p>\n<p>只所以用hash是因为完全可以用hash来存储一个点赞的对象， 对应数据库的一行记录。</p>\n<p>当然有同学会说用key, value也可以， 将所有的数据序列化(json_encode等)</p>\n<p>后全部放到value里面去。 反复序列化也是一个很大的开销不是， hash可以很</p>\n<p>方便的修改某个字段， 而序列化和反序列化的操作。</p>\n<p><strong>用户点赞/取消赞</strong></p>\n<p>获取<code>user_id, post_id</code>， 查询该用户是否已经点过赞， 已点过就取消点赞，</p>\n<p>将用户的点赞/取消赞的情况记录在redis中， 具体为:</p>\n<ol><li>写入<code>post_set</code></li></ol>\n<p>将<code>post_id</code>写入<code>post_set</code></p>\n<ol start=\"2\"><li>写入<code>post_user_like_set_{$post_id}</code></li></ol>\n<p>将<code>user_id</code>写入<code>post_user_like_set_{$post_id}</code></p>\n<ol start=\"3\"><li>写入<code>post_user_like_{$post_id}_{$user_id}</code></li></ol>\n<p>将用户点赞数据， 例如赞状态, post_id, user_id, ctime(操作时间), mtime(修改时间)写入post_user_like_{<!-- --><span class=\"katex--inline\">KaTeX parse error: Expected 'EOF', got '}' at position 8: post_id}̲_{<!-- --></span>user_id}中</p>\n<ol start=\"4\"><li>更新<code>post_{$post_id}_counter</code></li></ol>\n<p>更新<code>post_{$post_id}_counter,</code> 这里的更新稍晚复杂一点， 需要和前面一样先获取当前用户是否对这个post点过赞</p>\n<p>如果点过， 并且本次是取消赞， counter减一， 如果没点过， 本次是点赞， counter加一。</p>\n<p>如果原来是取消赞的情况， 本次是点赞， counter加一。</p>\n<h1><a id=\"_94\"></a>二、关注</h1>\n<p>使用<strong>Redis</strong>的<strong>有序集合</strong>可以做到根据关注的时间有序的取出列表，假设我的ID是<code>me</code>，别人的ID是<code>other</code>。</p>\n<p><strong>1、添加关注</strong></p>\n<ol><li><strong>将对方id添加到自己的关注列表中；</strong><br/> Redis::ZADD(“me:follow”, time(), other)</li><li><strong>将自己的id添加到对方的粉丝列表中：</strong><br/> Redis::ZADD(“other:fans”, time(), me)</li></ol>\n<p><strong>2、取消关注</strong></p>\n<ol><li> <p><strong>将对方id从自己的关注列表中移除；</strong><br/> Redis::ZREM(“me:follow”, other)</p> </li><li> <p><strong>将自己的id从对方的粉丝列表中移除：</strong><br/> Redis::ZREM(“other:fans”, me)</p> </li></ol>\n<p><strong>3、 关注列表</strong></p>\n<ol><li> <p><strong>查看我的关注列表：</strong><br/> Redis::ZRANGE(“me:follow”, 0 , -1)</p> </li><li> <p><strong>查看别人的把id换掉就可以</strong><br/> Redis::ZRANGE(“other:follow”, 0 , -1)</p> </li></ol>\n<p><strong>4、 粉丝列表</strong></p>\n<ol><li> <p><strong>查看我的粉丝列表：</strong><br/> Redis::ZRANGE(“me:fans”, 0 , -1)</p> </li><li> <p><strong>查看别人的把id换掉就可以</strong><br/> Redis::ZRANGE(“other:fans”, 0 , -1)</p> </li></ol>\n<p><strong>5、人物关系</strong></p>\n<ol><li><strong>我单向关注他</strong></li></ol>\n<ul><li>我的关注列表中有他(或他的粉丝列表中有我)；</li><li>我的粉丝列表中没有他(或他的关注列表中没有我)。</li></ul>\n<p>Redis::ZSCORE(“me:fans”, other) #未返回分数<br/> Redis::ZSCORE(“me:follow”, other) #返回分数</p>\n<ol start=\"2\"><li><strong>他单向关注我</strong></li></ol>\n<ul><li>我的关注列表中没有他(或他的粉丝列表中没有我)；</li><li>我的粉丝列表中有他(或他的关注列表中有我)。</li></ul>\n<p>Redis::ZSCORE(“other:fans”, me) #未返回分数<br/> Redis::ZSCORE(“other:follow”, me) #返回分数</p>\n<ol start=\"3\"><li><strong>是否互粉</strong></li></ol>\n<ul><li>我的关注列表中有他(或他的粉丝列表中有我)；</li><li>我的粉丝列表中有他(或他的关注列表中有我)。同时成立才为互粉。</li></ul>\n<p>Redis::ZSCORE(“me:fans”, other) #返回分数<br/> Redis::ZSCORE(“me:follow”, other) #返回分数</p>\n<p><strong>6、 数量相关</strong></p>\n<ol><li> <p><strong>我的关注数</strong><br/> Redis::ZCARD(“me:follow”); #返回数量</p> </li><li> <p><strong>我的粉丝数</strong><br/> Redis::ZCARD(“me:fans”); #返回数量</p> </li></ol>\n<p><strong>7、 排序取出所有的人</strong></p>\n<ol><li> <p><strong>根据关注的时间倒叙取出用户的id</strong><br/> Redis::ZREVRANGE(“me:fans”, 0, -1, TRUE); #倒序取值</p> </li><li> <p><strong>根据关注时间顺序取出用户的id</strong><br/> Redis::ZRANGE(“me:fans”, 0, -1, TRUE); #顺序取值</p> </li></ol>\n<h1><a id=\"_172\"></a>！！！欢迎点赞收藏关注！！！</h1>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 0, "time": "2022-05-09 18:50:52", "summary": "目录一、点赞直接写入直接存储二、关注！！！欢迎点赞收藏关注！！！一、点赞直接写入直接写入是最简单的做法。做两个表即可，记录文章被赞的次数，已有多少人赞过这种数据就可以直接从表中查到记录用户赞过了哪些文"}