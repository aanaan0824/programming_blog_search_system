{"blogid": "120309344", "writerAge": "码龄3年", "writerBlogNum": "62", "writerCollect": "289", "writerComment": "36", "writerFan": "46", "writerGrade": "4级", "writerIntegral": "905", "writerName": "九本才", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_120309344.jpg", "writerRankTotal": "20410", "writerRankWeekly": "160487", "writerThumb": "251", "writerVisitNum": "96697", "blog_read_count": "5112", "blog_time": "于 2021-09-16 11:19:55 发布", "blog_title": "Unity 性能优化方法总结", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p></p>\n<p><span style=\"color:#494949;\">性能优化是游戏项目开发过程中一个永恒的话题。项目的性能优化主要围绕CPU、GPU和内存三大方面进行。但是如此的总结我感觉太繁杂不能成系统，例如：影响内存的主要三个部分<strong>1.资源内存占用；2.引擎模块自身内存占用；3.托管堆内存占用。</strong>你得资源和代码质量都会影响内存。这里主要从五个方面对项目进行优化，分别是<strong>资源内存</strong>，<strong>图形和GPU</strong>，<strong>编程和代码框架</strong>，<strong>项目中各种资源组件的配置</strong>。</span></p>\n<p></p>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E8%B5%84%E6%BA%90%E5%86%85%E5%AD%98-toc\" style=\"margin-left:40px;\"><a href=\"#%E8%B5%84%E6%BA%90%E5%86%85%E5%AD%98\" title=\"资源内存\">资源内存</a></p>\n<p id=\"%E6%AD%A3%E7%A1%AE%E5%AF%BC%E5%85%A5%E7%BA%B9%E7%90%86-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%AD%A3%E7%A1%AE%E5%AF%BC%E5%85%A5%E7%BA%B9%E7%90%86\" title=\"正确导入纹理\">正确导入纹理</a></p>\n<p id=\"%E8%B0%83%E6%95%B4%E7%BD%91%E6%A0%BC%E5%AF%BC%E5%85%A5%E8%AE%BE%E7%BD%AE-toc\" style=\"margin-left:80px;\"><a href=\"#%E8%B0%83%E6%95%B4%E7%BD%91%E6%A0%BC%E5%AF%BC%E5%85%A5%E8%AE%BE%E7%BD%AE\" title=\"调整网格导入设置\">调整网格导入设置</a></p>\n<p id=\"%E6%A3%80%E6%9F%A5%E5%A4%9A%E8%BE%B9%E5%BD%A2%E9%9D%A2%E6%95%B0-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%A3%80%E6%9F%A5%E5%A4%9A%E8%BE%B9%E5%BD%A2%E9%9D%A2%E6%95%B0\" title=\"检查多边形面数\">检查多边形面数</a></p>\n<p id=\"%E5%9B%BE%E5%BD%A2%E5%92%8CGPU-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%9B%BE%E5%BD%A2%E5%92%8CGPU\" title=\"图形和GPU\">图形和GPU</a></p>\n<p id=\"%E6%89%B9%E5%A4%84%E7%90%86%E6%89%A7%E8%A1%8C%E7%BB%98%E5%88%B6%E8%B0%83%E7%94%A8-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%89%B9%E5%A4%84%E7%90%86%E6%89%A7%E8%A1%8C%E7%BB%98%E5%88%B6%E8%B0%83%E7%94%A8\" title=\"批处理执行绘制调用\">批处理执行绘制调用</a></p>\n<p id=\"%E7%81%AF%E5%85%89-toc\" style=\"margin-left:80px;\"><a href=\"#%E7%81%AF%E5%85%89\" title=\"灯光\">灯光</a></p>\n<p id=\"%E7%9B%B8%E6%9C%BA-toc\" style=\"margin-left:80px;\"><a href=\"#%E7%9B%B8%E6%9C%BA\" title=\"相机\">相机</a></p>\n<p id=\"%E7%BC%96%E7%A8%8B%E5%92%8C%E4%BB%A3%E7%A0%81%E6%A1%86%E6%9E%B6-toc\" style=\"margin-left:40px;\"><a href=\"#%E7%BC%96%E7%A8%8B%E5%92%8C%E4%BB%A3%E7%A0%81%E6%A1%86%E6%9E%B6\" title=\"编程和代码框架\">编程和代码框架</a></p>\n<p id=\"Update-toc\" style=\"margin-left:80px;\"><a href=\"#Update\" title=\"Update\">Update</a></p>\n<p id=\"%E5%AD%97%E7%AC%A6%E4%B8%B2-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2\" title=\"字符串\">字符串</a></p>\n<p id=\"%E4%B8%8D%E8%A6%81%E4%BD%BF%E7%94%A8LINQ-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%B8%8D%E8%A6%81%E4%BD%BF%E7%94%A8LINQ\" title=\"不要使用LINQ\">不要使用LINQ</a></p>\n<p id=\"%E6%B3%A8%E6%84%8F%E8%A3%85%E7%AE%B1%E8%BF%87%E7%A8%8B-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%B3%A8%E6%84%8F%E8%A3%85%E7%AE%B1%E8%BF%87%E7%A8%8B\" title=\"注意装箱过程\">注意装箱过程</a></p>\n<p id=\"%E7%A1%AE%E4%BF%9D%E5%A4%96%E9%83%A8%E4%BB%A3%E7%A0%81%E5%BA%93%E4%B8%8D%E4%BA%A7%E7%94%9F%E5%9E%83%E5%9C%BE-toc\" style=\"margin-left:80px;\"><a href=\"#%E7%A1%AE%E4%BF%9D%E5%A4%96%E9%83%A8%E4%BB%A3%E7%A0%81%E5%BA%93%E4%B8%8D%E4%BA%A7%E7%94%9F%E5%9E%83%E5%9C%BE\" title=\"确保外部代码库不产生垃圾\">确保外部代码库不产生垃圾</a></p>\n<p id=\"%E5%B0%8F%E5%BF%83%E5%BE%AA%E7%8E%AF%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%B0%8F%E5%BF%83%E5%BE%AA%E7%8E%AF%E4%BB%A3%E7%A0%81\" title=\"小心循环代码\">小心循环代码</a></p>\n<p id=\"%E4%BB%85%E5%9C%A8%E9%9C%80%E8%A6%81%E6%97%B6%E8%BF%90%E8%A1%8C%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%BB%85%E5%9C%A8%E9%9C%80%E8%A6%81%E6%97%B6%E8%BF%90%E8%A1%8C%E4%BB%A3%E7%A0%81\" title=\"仅在需要时运行代码\">仅在需要时运行代码</a></p>\n<p id=\"%E4%BD%BF%E7%94%A8Array%E6%95%B0%E7%BB%84%E4%BB%A3%E6%9B%BFList%E5%88%97%E8%A1%A8-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%BD%BF%E7%94%A8Array%E6%95%B0%E7%BB%84%E4%BB%A3%E6%9B%BFList%E5%88%97%E8%A1%A8\" title=\"使用Array数组代替List列表\">使用Array数组代替List列表</a></p>\n<p id=\"%E4%BD%BF%E7%94%A8Float%E8%BF%90%E7%AE%97%E6%9B%BF%E4%BB%A3Vector%E8%BF%90%E7%AE%97-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%BD%BF%E7%94%A8Float%E8%BF%90%E7%AE%97%E6%9B%BF%E4%BB%A3Vector%E8%BF%90%E7%AE%97\" title=\"使用Float运算替代Vector运算\">使用Float运算替代Vector运算</a></p>\n<p id=\"Camera.main-toc\" style=\"margin-left:80px;\"><a href=\"#Camera.main\" title=\"Camera.main\">Camera.main</a></p>\n<p id=\"%E4%BD%BF%E7%94%A8LocalPosition%E6%9B%BF%E4%BB%A3Position-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%BD%BF%E7%94%A8LocalPosition%E6%9B%BF%E4%BB%A3Position\" title=\"使用LocalPosition替代Position\">使用LocalPosition替代Position</a></p>\n<p id=\"%E5%AF%B9%E8%B1%A1%E6%B1%A0-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%AF%B9%E8%B1%A1%E6%B1%A0\" title=\"对象池\">对象池</a></p>\n<p id=\"%E5%8D%8F%E7%A8%8B-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%8D%8F%E7%A8%8B\" title=\"协程\">协程</a></p>\n<p id=\"AssetBundle%E7%9A%84%E5%8D%B8%E8%BD%BD-toc\" style=\"margin-left:80px;\"><a href=\"#AssetBundle%E7%9A%84%E5%8D%B8%E8%BD%BD\" title=\"AssetBundle的卸载\">AssetBundle的卸载</a></p>\n<p id=\"%E9%81%BF%E5%85%8D%E5%9C%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E6%B7%BB%E5%8A%A0%E7%BB%84%E4%BB%B6-toc\" style=\"margin-left:80px;\"><a href=\"#%E9%81%BF%E5%85%8D%E5%9C%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E6%B7%BB%E5%8A%A0%E7%BB%84%E4%BB%B6\" title=\"避免在运行时添加组件\">避免在运行时添加组件</a></p>\n<p id=\"%E5%88%A0%E9%99%A4%E8%B0%83%E8%AF%95%E6%97%A5%E5%BF%97%E8%AF%AD%E5%8F%A5-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%88%A0%E9%99%A4%E8%B0%83%E8%AF%95%E6%97%A5%E5%BF%97%E8%AF%AD%E5%8F%A5\" title=\"删除调试日志语句\">删除调试日志语句</a></p>\n<p id=\"%E4%BD%BF%E7%94%A8ScriptableObject-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%BD%BF%E7%94%A8ScriptableObject\" title=\"使用ScriptableObject\">使用ScriptableObject</a></p>\n<p id=\"%E4%BD%BF%E7%94%A8NonAlloc%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%BD%BF%E7%94%A8NonAlloc%E5%87%BD%E6%95%B0\" title=\"使用NonAlloc函数\">使用NonAlloc函数</a></p>\n<p id=\"%E9%87%8D%E6%9E%84%E4%BB%A3%E7%A0%81%E6%9D%A5%E5%87%8F%E5%B0%8FGC%E7%9A%84%E5%BD%B1%E5%93%8D-toc\" style=\"margin-left:80px;\"><a href=\"#%E9%87%8D%E6%9E%84%E4%BB%A3%E7%A0%81%E6%9D%A5%E5%87%8F%E5%B0%8FGC%E7%9A%84%E5%BD%B1%E5%93%8D\" title=\"重构代码来减小GC的影响\">重构代码来减小GC的影响</a></p>\n<p id=\"%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%90%84%E7%A7%8D%E8%B5%84%E6%BA%90%E7%BB%84%E4%BB%B6%E7%9A%84%E9%85%8D%E7%BD%AE-toc\" style=\"margin-left:40px;\"><a href=\"#%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%90%84%E7%A7%8D%E8%B5%84%E6%BA%90%E7%BB%84%E4%BB%B6%E7%9A%84%E9%85%8D%E7%BD%AE\" title=\"项目中各种资源组件的配置\">项目中各种资源组件的配置</a></p>\n<p id=\"UI-toc\" style=\"margin-left:80px;\"><a href=\"#UI\" title=\"UI\">UI</a></p>\n<p id=\"%E9%9F%B3%E9%A2%91-toc\" style=\"margin-left:80px;\"><a href=\"#%E9%9F%B3%E9%A2%91\" title=\"音频\">音频</a></p>\n<p id=\"%E5%8A%A8%E7%94%BB-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%8A%A8%E7%94%BB\" title=\"动画\">动画</a></p>\n<p id=\"%E7%89%A9%E7%90%86-toc\" style=\"margin-left:80px;\"><a href=\"#%E7%89%A9%E7%90%86\" title=\"物理\">物理</a></p>\n<p id=\"%C2%A0%E6%80%BB%E7%BB%93-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E6%80%BB%E7%BB%93\" title=\" 总结\"> 总结</a></p>\n<hr id=\"hr-toc\"/>\n<h2 id=\"%E8%B5%84%E6%BA%90%E5%86%85%E5%AD%98\"><strong><span style=\"color:#494949;\">资源内存</span></strong></h2>\n<p><span style=\"color:#494949;\">资源管线可以大幅影响应用程序的性能。在一个较为复杂的大中型项目中，资源的内存占用往往占据了总体内存的70%以上。</span></p>\n<h3 id=\"%E6%AD%A3%E7%A1%AE%E5%AF%BC%E5%85%A5%E7%BA%B9%E7%90%86\"><strong><span style=\"color:#494949;\">正确导入纹理</span></strong></h3>\n<p><span style=\"color:#494949;\"><strong>纹理会占用大部分内存，因此，导入设置非常重要。通常，请遵循以下指导原则 ：</strong></span></p>\n<ul><li> <p><span style=\"color:#494949;\"><strong>减小 Max Size ：</strong>使用能生成视觉上可接受的结果的最低设置。这种非破坏性方式，可以快速降低纹理内存。</span></p> </li><li> <p><span style=\"color:#494949;\"><strong>使用 2 的幂 (POT) ：</strong>Unity 要求移动端纹理压缩格式 （PVRCT 或 ETC）采用 POT 纹理尺寸。</span></p> </li><li> <p><span style=\"color:#494949;\"><strong>制作纹理图集 ：</strong>将多个纹理放置到单个纹理中，可以减少绘制调用和加快渲染速度。使用 或Unity 精灵图集第三方Texture Packer可以制作纹理图集。</span></p> </li><li> <p><span style=\"color:#494949;\"><strong>关闭 Read／Write Enabled 选项 ：</strong>如果启用，此选项在 CPU 和 GPU 可寻址内存中都会创建副本，纹理会占用双倍内存。大多数情况下，应保持此选项为禁用状态。如果要在运行时生成纹理，请通过 Texture2D.Apply 强制执行，并且传入设置为 true 的 makeNoLongerReadable。</span></p> </li><li> <p><span style=\"color:#494949;\"><strong>禁用不必要的 Mip Map ：</strong>对于在屏幕上大小保持不变的纹理（如 2D 精灵和 UI 图形），Mip Map 不是必需的，对于与摄像机的距离会变化的 3D 模型，请保留 Mip Map为启用状态。</span></p> </li><li> <p><span style=\"color:#494949;\"><strong>压缩纹理。</strong></span></p> </li></ul>\n<p><span style=\"color:#494949;\"><img alt=\"\" height=\"622\" src=\"..\\..\\static\\image\\20210915155240485.png\" width=\"404\"/>​</span></p>\n<p><span style=\"color:#494949;\"> <img alt=\"\" height=\"860\" src=\"..\\..\\static\\image\\20210915155258462.png\" width=\"1200\"/>​</span></p>\n<p><span style=\"color:#494949;\"><strong>尽可能减少过度绘制和Alpha 混合</strong></span></p>\n<p><span style=\"color:#494949;\">避免绘制不必要的透明或半透明图像。这种方式导致的过度绘制和 Alpha 混合会极大影响移动平台。</span></p>\n<h3 id=\"%E8%B0%83%E6%95%B4%E7%BD%91%E6%A0%BC%E5%AF%BC%E5%85%A5%E8%AE%BE%E7%BD%AE\"><strong><span style=\"color:#494949;\">调整网格导入设置</span></strong></h3>\n<p><span style=\"color:#494949;\">与纹理很像，如果导入时不小心，网格可能占用过多内存。要尽可能减少网格占用的内存，请执行以下操作 ：</span></p>\n<ul><li> <p><span style=\"color:#494949;\"><strong>压缩网格 </strong>：高性能压缩可以减少占用磁盘空间（但不会影响运行时的内存）。请注意，网格量化可能造成不准确，因此应试验不同的压缩级别，从而找到适合模型的压缩级别。</span></p> </li><li> <p><span style=\"color:#494949;\"><strong>禁用 Read／Write</strong> ：如果启用此选项，内存中会有重复网格，网格的一个副本在系统内存中，另一个在 GPU 内存中。大多数情况下，应将其禁用（在 Unity 2019.2 以及更早版本中，此选项默认为选中状态）。</span></p> </li><li> <p><span style=\"color:#494949;\"><strong>禁用骨骼和 BlendShape </strong>：如果网格不需要骨架或 BlendShape 动画，请尽可能禁用这些选项。</span></p> </li><li> <p><span style=\"color:#494949;\"><strong>尽可能禁用法线和切线 </strong>：如果确信网格的材质不需要法线或切线，请取消选中这些选项，以节省更多内存。</span></p> </li></ul>\n<p><span style=\"color:#494949;\"> <img alt=\"\" height=\"559\" src=\"..\\..\\static\\image\\20210915155616636.png\" width=\"617\"/>​</span></p>\n<h3 id=\"%E6%A3%80%E6%9F%A5%E5%A4%9A%E8%BE%B9%E5%BD%A2%E9%9D%A2%E6%95%B0\"><strong><span style=\"color:#494949;\">检查多边形面数</span></strong></h3>\n<p><span style=\"color:#494949;\">分辨率越高的模型，需要的内存使用量越大，并且可能占用更长的 GPU 时间。</span></p>\n<p><span style=\"color:#494949;\"><strong>使用细节级别 (lOD)</strong></span></p>\n<p><span style=\"color:#494949;\">随着对象移向远处，细节级别可以将它们切换为使用更简单的网格，以及更简单的材质和着色器，从而帮助提高 GPU 性能。</span></p>\n<p><span style=\"color:#494949;\"><img alt=\"\" height=\"254\" src=\"..\\..\\static\\image\\20210915155932506.png\" width=\"604\"/>​</span></p>\n<p><span style=\"color:#494949;\"><strong>使用遮挡剔除来移除隐藏的对象</strong></span></p>\n<p><span style=\"color:#494949;\">隐藏在其他对象之后的对象仍然可能渲染和使用资源。使用遮挡剔除可以将它们丢弃。摄像机之外的视锥体剔除 (frustum culling) 是自动执行的，遮挡剔除 (occlusion culling) 是则要经过烘焙过程。只需将对象标记为静态遮挡物或被遮挡物，然后通过 Window &gt; Rendering &gt; Occlusion Culling 对话框进行烘焙。尽管不是所有场景都适合，剔除在很多情况下都能改善性能。</span></p>\n<hr/>\n<h2 id=\"%E5%9B%BE%E5%BD%A2%E5%92%8CGPU\"><span style=\"color:#494949;\"><strong>图形和GPU</strong></span></h2>\n<p><span style=\"color:#494949;\">每一帧，Unity 都需要确定必须渲染哪些对象，然后创建绘制调用。绘制调用是调用图形 API 来绘制对象（如三角形），而批处理是要一起执行的一组绘制调用。</span></p>\n<h3 id=\"%E6%89%B9%E5%A4%84%E7%90%86%E6%89%A7%E8%A1%8C%E7%BB%98%E5%88%B6%E8%B0%83%E7%94%A8\"><strong><span style=\"color:#494949;\">批处理执行绘制调用</span></strong></h3>\n<p><span style=\"color:#494949;\">将要绘制的对象组合为批次，可以尽可能减少在批次中绘制每个对象所需的状态更改。这种方式通过减少渲染对象的 CPU 开销，可以改善性能。Unity 可以使用以下几种方法将多个对象组合为较少的批次 ：</span></p>\n<ul><li> <p><span style=\"color:#494949;\"><strong>动态批处理 ：</strong>对于小网格，Unity 在 CPU 上分组和转换顶点，然后一次性绘制它们。注意 ：只在有足够低复杂度网格（少于 900 个顶点属性和不超过 300 个顶点）时使用这一方法。动态批处理程序不会对更大的网格进行批处理，如果启用会浪费 CPU 时间在每一帧都去查找要批处理的小网格。</span></p> </li><li> <p><span style=\"color:#494949;\"><strong>静态批处理 ：</strong>对于不移动的几何体，Unity 可以减少所有共享相同材质的网格的绘制调用。它比动态批处理更有效，但使用更多内存。</span></p> </li><li> <p><span style=\"color:#494949;\"><strong>GPU 实例化 ：</strong>如果有大量相同的对象，这种方法通过图像硬件对它们进行更有效地批处理​</span></p> </li><li> <p><span style=\"color:#494949;\"><strong>SRP 批处理 ：</strong>在 Advanced 下面的 Universal Render Pipeline Asset 中启用 。这样可以SRP Batcher大幅提高 CPU 渲染速度，具体取决于场景。</span></p> </li></ul>\n<p><span style=\"color:#494949;\"><img alt=\"\" height=\"600\" src=\"..\\..\\static\\image\\20210915163419704.png\" width=\"541\"/></span></p>\n<h3 id=\"%E7%81%AF%E5%85%89\"><strong><span style=\"color:#494949;\">灯光</span></strong></h3>\n<p><span style=\"color:#494949;\"><strong>避免使用过多动态光线</strong></span></p>\n<p><span style=\"color:#494949;\">避免向移动端应用程序添加过多动态光线。考虑采用其他方式，如对动态网格使用自定义着色器效果和光照探针，以及对静态网格使用烘焙光照。</span></p>\n<p><span style=\"color:#494949;\"><strong>禁用阴影</strong></span></p>\n<p><span style=\"color:#494949;\">阴影投射可按 MeshRenderer 和光线禁用。尽可能禁用阴影可以减少绘制调用。</span></p>\n<p><span style=\"color:#494949;\">您也可以通过向简单网格应用模糊纹理或在角色下面应用四边形来创建伪阴影。另外，可以使用自定义着色器创建模糊阴影。</span></p>\n<p><span style=\"color:#494949;\"><img alt=\"\" height=\"222\" src=\"..\\..\\static\\image\\20210915163600741.png\" width=\"619\"/></span></p>\n<p><span style=\"color:#494949;\"><strong>将光照烘焙到光照贴图中</strong></span></p>\n<p><span style=\"color:#494949;\">烘焙阴影和光照的渲染不会影响运行时性能。</span></p>\n<p><span style=\"color:#494949;\"><strong>光照探针</strong></span></p>\n<p><span style=\"color:#494949;\">光照探针存储场景中的空白空间的烘焙光照信息并且提供高质量的光照（直接和间接）。它们使用球谐函数，这种函数的计算速度比动态光照快很多。</span></p>\n<h3 id=\"%E7%9B%B8%E6%9C%BA\"><strong><span style=\"color:#494949;\">相机</span></strong></h3>\n<p><span style=\"color:#494949;\"><strong>限制摄像机的使用</strong></span></p>\n<p><span style=\"color:#494949;\">每个摄像机都会产生开销，无论它是否在做有意义的工作。只在有必要渲染时才使用摄像机组件。在低端移动平台，每个摄像机最多可以使用 1 ms CPU 时间。</span></p>\n<p><span style=\"color:#494949;\"><strong>限制后期处理效果</strong></span></p>\n<p><span style=\"color:#494949;\">全屏幕后期处理效果（如发光）会极大降低性能。请在游戏的美术设计中谨慎使用这些效果。</span></p>\n<p><span style=\"color:#494949;\">限制使用一些相机特效。</span></p>\n<hr/>\n<h2 id=\"%E7%BC%96%E7%A8%8B%E5%92%8C%E4%BB%A3%E7%A0%81%E6%A1%86%E6%9E%B6\"><strong><span style=\"color:#494949;\">编程和代码框架</span></strong></h2>\n<p><span style=\"color:#494949;\">因为我是程序出身就仔细说一下代码的问题吧。</span></p>\n<p><span style=\"color:#494949;\">每个 Unity 脚本都将按预定顺序运行多个事件函数。您应该了解 Awake、Start、Update 及其他创建脚本生命周期的函数之间的区别。</span></p>\n<h3 id=\"Update\"><strong><span style=\"color:#494949;\">Update</span></strong></h3>\n<p><span style=\"color:#494949;\"><strong>尽可能减少每帧运行的代码。</strong></span></p>\n<p><span style=\"color:#494949;\">考虑代码是否必须每一帧都运行。将不必要的逻辑移出 Update、 LateUpdate 和 FixedUpdate。可在这些事件函数中方便地放置必须每帧更新的代码，但应提取出任何不需要以这种频率更新的逻辑。尽可能只在情况发生改变时才执行逻辑。</span></p>\n<p><span style=\"color:#494949;\">如果确实 需要使用 Update，可以考虑每 n 帧运行一次代码。这是一种应用时间切片 （将繁重的工作负载分布到多个帧的常用技术）的方法，逻辑层和表现层分离，分层限帧和动态负载均衡。</span></p>\n<pre><code>    private int interval = 3;\n    void Update()\n    {\n        if (Time.frameCount % interval == 0)\n            Function();\n    }\n\n    void Function()\n    {\n\n    }</code></pre>\n<p></p>\n<p><span style=\"color:#494949;\"><strong>不在Update方法中创建新对象</strong></span></p>\n<p><span style=\"color:#494949;\">理想情况下，开发者在Update、FixedUpdate或LateUpdate方法中不应该使用New关键字，而是应该使用已有对象。</span></p>\n<p><strong><span style=\"color:#494949;\">一次创建，多次重用</span></strong></p>\n<p><span style=\"color:#494949;\">这条规则的意思是：要在Start方法和Awake方法中分配所有内容。这条规则和第一条类似，其实只是从Update方法移除new关键字的另一种方式。</span></p>\n<p><span style=\"color:#494949;\">开发者应该从Update方法移除有以下行为的代码：</span></p>\n<ul><li> <p><span style=\"color:#494949;\">创建新实例</span></p> </li><li> <p><span style=\"color:#494949;\">寻找任意游戏对象</span></p> </li></ul>\n<p><span style=\"color:#494949;\">然后，将这些代码移动到Start方法或Awake方法中。</span></p>\n<pre><code>//未优化的代码\n\nprivate List&lt;GameObject&gt; objectsList;void Update()\n{\n    objectsList = new List&lt;GameObject&gt;();\n    objectsList.Add(......)\n}\n\n\n\n//优化后的代码\n\nprivate List&lt;GameObject&gt; objectsList;void Start()\n{\n    objectsList = new List&lt;GameObject&gt;();\n}\n\n\n\nvoid Update()\n{\n    objectsList.Clear();\n    objectsList.Add(......)\n}</code></pre>\n<p><span style=\"color:#494949;\">GameObject.Find、GameObject.GetComponent 和 Camera.main（ 在 2020.2之前的版本中）可能开销较大，应避免在 Update 方法中调用它们。而应在 Start 中调用它们，并且缓存相应结果。</span></p>\n<pre><code>//未优化的代码\n\nvoid Update()\n{\n    var levelObstacles = FindObjectsOfType&lt;Obstacle&gt;();\n    foreach(var obstacle in levelObstacles) { ....... }\n}\n\n\n\n//优化后的代码\n\nprivate Object[] levelObstacles;\n\n\n\nvoid Start()\n{\n    levelObstacles = FindObjectsOfType&lt;Obstacle&gt;();\n}\n\n\n\nvoid Update()\n{\n    foreach(var obstacle in levelObstacles) { ....... }\n}</code></pre>\n<p><span style=\"color:#494949;\">尝试避免在Update方法中使用访问器，只在Start方法中调用一次访问器，并缓存返回的数值。</span></p>\n<pre><code>//未优化的代码\n\nvoid Update()\n{\n\n    //分配包含所有touches的新数组\n    Input.touches[0];\n}\n\n\n\n//优化后的代码\n\nvoid Update()\n{\n    Input.GetTouch(0);\n}\n\n\n\n//未优化的代码\n\nvoid Update()\n{\n\n    //返回新的字符串（垃圾），然后对比2个字符串\n    gameObject.Tag == \"MyTag\";\n}\n\n\n\n//优化后的代码\n\nvoid Update()\n{\n    gameObject.CompareTag(\"MyTag\");\n}</code></pre>\n<p><span style=\"color:#494949;\"><strong>避免空Unity 事件</strong></span></p>\n<p><span style=\"color:#494949;\">即使是空的 MonoBehaviour 也需要资源，因此应删除空的 Update 或 LateUpdate 方法。</span></p>\n<h3 id=\"%E5%AD%97%E7%AC%A6%E4%B8%B2\"><strong><span style=\"color:#494949;\">字符串</span></strong></h3>\n<p><span style=\"color:#494949;\"><strong>使用哈希值而不是字符串参数</strong></span></p>\n<p><span style=\"color:#494949;\">Unity 不使用字符串名称对 Animator、Material 和 Shader 属性进行内部寻址。为了加快速度，所有属性名称都经过哈希处理为属性 ID，实际上是这些 ID 用于寻址属性。</span></p>\n<p><span style=\"color:#494949;\">每当在 Animator、Material 或 Shader 上使用 Set 或 Get 方法时，请使用整数值方法而非字符串值方法。字符串方法只执行字符串哈希处理，然后将经过哈希处理的 ID 转发给整数值方法。</span></p>\n<p><span style=\"color:#494949;\"><strong>避免字符串连接</strong></span></p>\n<p><span style=\"color:#494949;\">在涉及到垃圾分配的时候，字符串要特别注意。即使是基本的字符串操作，也可能产生大量垃圾。这是为什么呢？</span></p>\n<p><span style=\"color:#494949;\">因为字符串是无法改变的数组。这意味着，如果要把两个字符串连接起来，我们会创建新数组，而旧数组会成为垃圾。所以我们可以使用StringBuilder避免或最小化这类垃圾分配。</span></p>\n<pre><code>//未优化的代码\n\nvoid Start()\n{\n    text = GetComponent&lt;Text&gt;();\n}\n\n\n\nvoid Update()\n{\n    text.text = \"Player \" + name + \" has score \" + score.toString();\n}\n\n\n\n//优化后的代码\n\nvoid Start()\n{\n    text = GetComponent&lt;Text&gt;();\n    builder = new StringBuilder(50);\n}\n\n\n\nvoid Update()\n{\n\n    //StringBuilder为所有类型重载了Append方法\n    builder.Length = 0;\n    builder.Append(\"Player \");\n    builder.Append(name);\n    builder.Append(\" has score \");\n    builder.Append(score);\n    text.text = builder.ToString();\n\n｝</code></pre>\n<h3 id=\"%E4%B8%8D%E8%A6%81%E4%BD%BF%E7%94%A8LINQ\"><strong><span style=\"color:#494949;\">不要使用LINQ</span></strong></h3>\n<p><span style=\"color:#494949;\">尽可能不要使用LINQ。也就是说，不要在任何经常执行的代码中使用LINQ。</span></p>\n<p><span style=\"color:#494949;\">虽然使用LINQ可以使代码更容易阅读，但在很多情况下，这类代码的性能和内存分配都非常糟糕。</span></p>\n<h3 id=\"%E6%B3%A8%E6%84%8F%E8%A3%85%E7%AE%B1%E8%BF%87%E7%A8%8B\"><strong><span style=\"color:#494949;\">注意装箱过程</span></strong></h3>\n<p><span style=\"color:#494949;\">装箱过程会生成垃圾。什么是装箱过程呢？</span></p>\n<p><span style=\"color:#494949;\">最常见的装箱过程是将数值类型，例如int，float，bool等传递到需要Object类型参数的函数时，所发生的过程。</span></p>\n<h3 id=\"%E7%A1%AE%E4%BF%9D%E5%A4%96%E9%83%A8%E4%BB%A3%E7%A0%81%E5%BA%93%E4%B8%8D%E4%BA%A7%E7%94%9F%E5%9E%83%E5%9C%BE\"><strong><span style=\"color:#494949;\">确保外部代码库不产生垃圾</span></strong></h3>\n<p><span style=\"color:#494949;\">如果发现部分垃圾由Asset Store资源商店下载的代码产生，我们有多个解决方法。但在我们进行逆向工程并调试前，请再次查看Asset Store资源商店的相应页面，代码库是否有进行更新。</span></p>\n<p><span style=\"color:#494949;\">在我们的项目中，我们使用的所有资源一直由资源的开发者进行维护，他们一直在进行性能更新，从而解决了我们的所有问题。</span></p>\n<p><span style=\"color:#494949;\">所以，一定要让项目使用的依赖保持更新。如果遇到没有维护的代码库，建议放弃这类代码库。</span></p>\n<h3 id=\"%E5%B0%8F%E5%BF%83%E5%BE%AA%E7%8E%AF%E4%BB%A3%E7%A0%81\"><strong><span style=\"color:#494949;\">小心循环代码</span></strong></h3>\n<p><span style=\"color:#494949;\">同Update一样。</span></p>\n<h3 id=\"%E4%BB%85%E5%9C%A8%E9%9C%80%E8%A6%81%E6%97%B6%E8%BF%90%E8%A1%8C%E4%BB%A3%E7%A0%81\"><strong><span style=\"color:#494949;\">仅在需要时运行代码</span></strong></h3>\n<p><span style=\"color:#494949;\">建议通过使用C#事件实现观察者设计模式。</span></p>\n<h3 id=\"%E4%BD%BF%E7%94%A8Array%E6%95%B0%E7%BB%84%E4%BB%A3%E6%9B%BFList%E5%88%97%E8%A1%A8\"><strong><span style=\"color:#494949;\">使用Array数组代替List列表</span></strong></h3>\n<p><span style=\"color:#494949;\">在代码中，我们发现大多数列表有固定的长度，或是可以计算出最大成员数量。因此我们使用数组重新实现了这些列表，在特定情况下，可以在迭代数据的时候得到原先2倍的速度。</span></p>\n<p><span style=\"color:#494949;\">在某些情况下，我们无法避免使用列表或其它复杂的数据结构。常见的情况是：需要经常添加或移除元素的时候，使用列表的效果更好的时候。通常来说，我们会对固定大小的列表使用数组。</span></p>\n<p><span style=\"color:#494949;\">在堆内存上进行链表的分配的时候，如果该链表需要多次反复的分配，我们可以采用链表的clear函数来清空链表从而替代反复多次的创建分配链表。</span></p>\n<pre><code>//优化前\nvoid Update()\n{\n    List myList = new List();\n    PopulateList(myList);       \n}\n//优化后\nprivate List myList = new List();\nvoid Update()\n{\n    myList.Clear();\n    PopulateList(myList);\n}</code></pre>\n<h3 id=\"%E4%BD%BF%E7%94%A8Float%E8%BF%90%E7%AE%97%E6%9B%BF%E4%BB%A3Vector%E8%BF%90%E7%AE%97\"><strong><span style=\"color:#494949;\">使用Float运算替代Vector运算</span></strong></h3>\n<p><span style=\"color:#494949;\">Float运算和Vector运算的区别不是很明显，除非像我们一样进行上千次运算，因此对我们来说，这项改动的性能提升效果非常明显。</span></p>\n<h3 id=\"Camera.main\"><strong><span style=\"color:#494949;\">Camera.main</span></strong></h3>\n<p><span style=\"color:#494949;\">使用Camera.main很简单，但是这种操作的性能非常糟糕。这是因为在每个Camera.main调用背后，Unity其实会执行FindGameObjectsWithTag()来获取结果，因此频繁调用Camera.main并不好。</span></p>\n<p><span style=\"color:#494949;\">最好的解决方法是在Start或Awake方法中缓存Camera.main的引用。</span></p>\n<h3 id=\"%E4%BD%BF%E7%94%A8LocalPosition%E6%9B%BF%E4%BB%A3Position\"><strong><span style=\"color:#494949;\">使用LocalPosition替代Position</span></strong></h3>\n<p><span style=\"color:#494949;\">在代码允许的位置，为获取函数(Getter)和设置函数（Setter）使用Transform.LocalPosition替代Transform.Position。</span></p>\n<p><span style=\"color:#494949;\">这样的原因是：每次Transform.Position调用的背后，都会有更多操作要执行，包括在调用获取函数时计算全局位置，或是在调用设置函数时从全局位置计算出本地位置。</span></p>\n<p><span style=\"color:#494949;\">在项目中，我们发现在出现Transform.Position的几乎所有情况中都可以用LocalPosition替代Transform.Position，无需在代码中做其它改动。</span></p>\n<h3 id=\"%E5%AF%B9%E8%B1%A1%E6%B1%A0\"><strong><span style=\"color:#494949;\">对象池</span></strong></h3>\n<p><span style=\"color:#494949;\">对象池用于减少内存开销，其原理就是把可能用到到的对象，先存在一个地方（池），要用的时候就调出来，不用就放回去。而不是要用的时候创建，不用的时候销毁。</span></p>\n<h3 id=\"%E5%8D%8F%E7%A8%8B\"><span style=\"color:#494949;\"><strong>协程</strong></span></h3>\n<p><span style=\"color:#494949;\">调用 StartCoroutine()会产生少量的内存垃圾，因为unity会生成实体来管理协程。所以在游戏的关键时刻应该限制该函数的调用。基于此，任何在游戏关键时刻调用的协程都需要特别的注意，特别是包含延迟回调的协程，另外还要注意不要同时开启多个携程，必要的时候可以手动关闭协程StopCoroutine();</span></p>\n<h3 id=\"AssetBundle%E7%9A%84%E5%8D%B8%E8%BD%BD\"><strong><span style=\"color:#494949;\">AssetBundle的卸载</span></strong></h3>\n<p><span style=\"color:#494949;\">不用的资源记得卸载。</span></p>\n<h3 id=\"%E9%81%BF%E5%85%8D%E5%9C%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E6%B7%BB%E5%8A%A0%E7%BB%84%E4%BB%B6\"><strong><span style=\"color:#494949;\">避免在运行时添加组件</span></strong></h3>\n<p><span style=\"color:#494949;\">在运行时调用 AddComponent 需要一些开销。每当在运行时添加组件时，Unity 都必须检查是否有重复项或是否需要其他组件。</span></p>\n<h3 id=\"%E5%88%A0%E9%99%A4%E8%B0%83%E8%AF%95%E6%97%A5%E5%BF%97%E8%AF%AD%E5%8F%A5\"><strong><span style=\"color:#494949;\">删除调试日志语句</span></strong></h3>\n<p><span style=\"color:#494949;\">日志语句（尤其是在 Update、LateUpdate 或 FixedUpdate 中）可能会降低性能。在进行构建之前，请禁用日志语句。</span></p>\n<h3 id=\"%E4%BD%BF%E7%94%A8ScriptableObject\"><strong><span style=\"color:#494949;\">使用ScriptableObject</span></strong></h3>\n<p><span style=\"color:#494949;\">在 ScriptableObject 中而不是 MonoBehaviour 中存储不变的值或设置。ScriptableObject 这种资源只需设置一次就可以在项目中一直使用。它不能直接附加到游戏对象。</span></p>\n<p><span style=\"color:#494949;\">在 ScriptableObject 中创建字段来存储值或设置，然后在 Monobehaviour 中引用该 ScriptableObject。</span></p>\n<p><span style=\"color:#494949;\">使用 ScriptableObject 的这些字段可以防止每次使用该 Monobehaviour 实例化对象时出现不必要的数据重复。</span></p>\n<p><span style=\"color:#494949;\"><img alt=\"\" height=\"336\" src=\"..\\..\\static\\image\\20210915180522591.png\" width=\"610\"/></span></p>\n<h3 id=\"%E4%BD%BF%E7%94%A8NonAlloc%E5%87%BD%E6%95%B0\"><strong><span style=\"color:#494949;\">使用NonAlloc函数</span></strong></h3>\n<p><span style=\"color:#494949;\">对于特定Unity函数，我们可以找到不分配任何内存的替代函数。在我们的项目中，这些函数都和物理功能有关。我们在碰撞检测使用的函数如下。</span></p>\n<pre><code>Physics2D. CircleCast();</code></pre>\n<p><span style=\"color:#494949;\">对于该函数，我们可以找到不分配任何内存的版本。</span></p>\n<pre><code>Physics2D. CircleCastNonAlloc();</code></pre>\n<p><span style=\"color:#494949;\">许多其它函数都有类似的替代函数，因此请记得查看文档，了解函数是否有相应的NonAlloc版本。</span></p>\n<h3 id=\"%E9%87%8D%E6%9E%84%E4%BB%A3%E7%A0%81%E6%9D%A5%E5%87%8F%E5%B0%8FGC%E7%9A%84%E5%BD%B1%E5%93%8D\"><span style=\"color:#494949;\"><strong>重构代码来减小GC的影响</strong></span></h3>\n<p><span style=\"color:#494949;\">即使我们减小了代码在堆内存上的分配操作，代码也会增加GC的工作量。最常见的增加GC工作量的方式是让其检查它不必检查的对象。struct是值类型的变量，但是如果struct中包含有引用类型的变量，那么GC就必须检测整个struct。如果这样的操作很多，那么GC的工作量就大大增加。在下面的例子中struct包含一个string，那么整个struct都必须在GC中被检查：</span></p>\n<pre><code>//优化前\npublic struct ItemData\n{\n    public string name;\n    public int cost;\n    public Vector3 position;\n}\nprivate ItemData[] itemData;\n//优化后\nprivate string[] itemNames;\nprivate int[] itemCosts;\nprivate Vector3[] itemPositions;</code></pre>\n<p><span style=\"color:#494949;\">如果我们知道堆内存在被分配后并没有被使用，我们希望可以主动地调用GC操作，或者在GC操作并不影响游戏体验的时候（例如场景切换的时候），我们可以主动的调用GC操作：</span></p>\n<pre><code>System.GC.Collect()</code></pre>\n<p><span style=\"color:#494949;\">总之代码的优化还有很多，平时要多注意这些细节养成良好的书写代码的习惯。</span></p>\n<hr/>\n<h2 id=\"%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%90%84%E7%A7%8D%E8%B5%84%E6%BA%90%E7%BB%84%E4%BB%B6%E7%9A%84%E9%85%8D%E7%BD%AE\"><strong><span style=\"color:#494949;\">项目中各种资源组件的配置</span></strong></h2>\n<p><span style=\"color:#494949;\">这一块的内容主要是开发者对Unity引擎的熟悉程度，如果你工作时间长经历的项目多自然会知道这些组件的优化点。</span></p>\n<h3 id=\"UI\"><strong><span style=\"color:#494949;\">UI</span></strong></h3>\n<p><span style=\"color:#494949;\">UGUI)常常是性能问题的来源。Canvas 组件生成和更新 UI 组件的网格并向 GPU 发出绘制调用。它的运行开销很大，因此，在使用 UGUI 时，请注意以下因素。</span></p>\n<p><span style=\"color:#494949;\"><strong>隐藏不可见的UI 元素</strong></span></p>\n<p><span style=\"color:#494949;\">可能有些 UI 元素（如仅当角色收到伤害时才出现的生命值血条）只偶尔在游戏中出现。如果不可见的 UI 元素是活动的，它仍然可能使用绘制调用。显式禁用所有不可见的 UI 组件，在需要时再重新启用。</span></p>\n<p><span style=\"color:#494949;\">如果只需要关闭画布的可见性，请禁用 Canvas 组件而不是游戏对象。这样就不必重新构建网格和顶点。</span></p>\n<p><span style=\"color:#494949;\"><strong>限制GraphicRaycaster 和禁用Raycast Target</strong></span></p>\n<p><span style=\"color:#494949;\">输入事件（如屏上触摸或单击）需要 GraphicRaycaster 组件。它只是循环处理屏幕上的每个输入点，检查它是否在 UI 的 RectTransform 之内。</span></p>\n<p><span style=\"color:#494949;\">从层级视图的顶层画布中移除默认的 GraphicRaycaster。只向需要交互的各元素（按钮、滚动矩形等）添加 GraphicRaycaster。</span></p>\n<p><span style=\"color:#494949;\"><img alt=\"\" height=\"147\" src=\"..\\..\\static\\image\\20210916104618972.png\" width=\"615\"/></span></p>\n<p><span style=\"color:#494949;\"> 另外，在所有不需要 Raycast Target 的 UI 文本和图像上将其禁用。如果是包含很多元素的复杂 UI，所有这些小更改都可以减少不必要的计算。</span></p>\n<p><span style=\"color:#494949;\"><img alt=\"\" height=\"250\" src=\"..\\..\\static\\image\\20210916104640743.png\" width=\"616\"/></span></p>\n<p><span style=\"color:#494949;\"><strong> 避免使用布局组</strong></span></p>\n<p><span style=\"color:#494949;\">布局组的更新很低效，应少量使用。如果内容是动态的，应完全避免不用，而是使用锚点进行比例布局。或者，创建自定义代码，在Layout Group 组件设置 UI 之后，将该组件禁用。</span></p>\n<p><span style=\"color:#494949;\">如果动态元素确实需要使用布局组（水平、垂直、网格），应避免嵌套它们，从而改善性能。</span></p>\n<p><span style=\"color:#494949;\"><img alt=\"\" height=\"233\" src=\"..\\..\\static\\image\\20210916104726432.png\" width=\"608\"/>​</span></p>\n<p><span style=\"color:#494949;\">使用全屏UI 时，隐藏其他全部内容</span></p>\n<p><span style=\"color:#494949;\">如果暂停屏幕或者启动屏幕遮住场景中的其他全部内容，则禁用摄像机对 3D 场景的渲染。同样，禁用隐藏在顶层画布之后的所有背景画布元素。</span></p>\n<p><span style=\"color:#494949;\">由于不需要以 60 fps 的帧率进行更新，可以考虑在全屏 UI 过程中降低 Application.targetFrameRate。</span></p>\n<p><span style=\"color:#494949;\"><strong>合并图集</strong></span></p>\n<p><span style=\"color:#494949;\">减少DrawCall，多张图片需要多次DrawCall，合并成一张大图只需要调用一次DrawCall</span></p>\n<p><span style=\"color:#494949;\">减少对内存的占用。</span></p>\n<h3 id=\"%E9%9F%B3%E9%A2%91\"><strong><span style=\"color:#494949;\">音频</span></strong></h3>\n<p><span style=\"color:#494949;\"> 尽管音频通常不会造成性能瓶颈，还是可以进行优化以节省内存。</span></p>\n<p><span style=\"color:#494949;\"><strong>尽量使用单声道声音剪辑</strong></span></p>\n<p><span style=\"color:#494949;\">如果要使用 3D 空间音频， 请以单声道 (single channel) 的形式创作声音剪辑，或者启用 Force To Mono 设置。在运行时定位使用的多声道声音会扁平化为单声道源，因此会增加 CPU 开销和浪费内存。</span></p>\n<p><span style=\"color:#494949;\"><strong>尽可能使用原始未压缩WAV 文件作为源资源</strong></span></p>\n<p><span style=\"color:#494949;\">如果使用任何压缩格式（如 MP3 或 Vorbis），Unity 会将其解压并在构建时重新压缩。这样会导致两个有损通道，从而降低最终质量。</span></p>\n<p><span style=\"color:#494949;\"><strong>压缩剪辑并降低压缩比特率</strong></span></p>\n<p><span style=\"color:#494949;\">通过压缩减小剪辑的大小和内存使用量 ：</span></p>\n<ul><li> <p><span style=\"color:#494949;\">对大多数声音使用 Vorbis（或者对不循环的声音使用 MP3）。</span></p> </li><li> <p><span style=\"color:#494949;\">对常用的短声音使用 ADPCM（如脚步声、枪声）。相比于未压缩的 PCM，这样可以减小文件大小，在播放时又可以很快解码。</span></p> </li></ul>\n<p><span style=\"color:#494949;\">移动设备上的音效最高为 22,050 Hz。使用较低设置通常对最终质量影响很小，当然，请使用您自己的耳朵来判断</span></p>\n<p><span style=\"color:#494949;\"><img alt=\"\" height=\"768\" src=\"..\\..\\static\\image\\20210916105616126.png\" width=\"575\"/>​。</span></p>\n<p><span style=\"color:#494949;\"><strong> 选择正确的加载类型</strong></span></p>\n<p><span style=\"color:#494949;\">每个剪辑大小的设置都不同。</span></p>\n<ul><li> <p><span style=\"color:#494949;\">小剪辑 (&lt; 200 kb) 应采用 Decompress on Load。将声音解压缩为原始 16 位 PCM 音频数据，会导致 CPU 开销和内存占用，因此，这仅适用于短声音。</span></p> </li><li> <p><span style=\"color:#494949;\">中等剪辑 (&gt;= 200 kb) 应保持为 Compressed in Memory。</span></p> </li><li> <p><span style=\"color:#494949;\">大文件（背景音乐）应设置为 Streaming。否则，整个资源会一次性加载到内存中。</span></p> </li></ul>\n<p><span style=\"color:#494949;\"><strong>从内存中卸载静音的音频源 (AudioSources)</strong></span></p>\n<p><span style=\"color:#494949;\">实现静音按钮时，不要只是将音量设置为 0。可以销毁 AudioSource 组件，从而将其从内存中卸载，这样，播放器不需要过于频繁地切换开关。</span></p>\n<h3 id=\"%E5%8A%A8%E7%94%BB\"><strong><span style=\"color:#494949;\">动画</span></strong></h3>\n<p><span style=\"color:#494949;\">Unity的动画相当复杂。尽可能限制在移动设备上使用下面的设置。</span></p>\n<p><span style=\"color:#494949;\"><strong>使用通用还是人形骨架</strong></span></p>\n<p><span style=\"color:#494949;\">默认情况下，Unity 通过通用骨架导入动画模型，但在动画化角色时，开发人员常常切换为人形骨架。</span></p>\n<p><span style=\"color:#494949;\">人形骨架每一帧（即使未使用）都计算反向动力学和动画重定向，占用的 CPU 时间比等效的通用骨架多 30-50%。如果不需要这些特定人形骨架功能，请使用通用骨架。</span></p>\n<p><span style=\"color:#494949;\"><strong>避免过多使用 Animator</strong></span></p>\n<p><span style=\"color:#494949;\">Animator 主要用于人形角色，但也常用于动画化单个值（如 UI 元素的 Alpha 通道）。避免过多使用 Animator，尤其是与 UI 元素结合使用。只要可能，对移动设备使用旧版 Animation 组件。</span></p>\n<p><span style=\"color:#494949;\">考虑创建补间函数或者使用第三方库来实现简单动画（如 DOTween）。</span></p>\n<p><span style=\"color:#494949;\"><img alt=\"\" height=\"239\" src=\"..\\..\\static\\image\\20210916110141703.png\" width=\"634\"/>​</span></p>\n<h3 id=\"%E7%89%A9%E7%90%86\"><strong><span style=\"color:#494949;\">物理</span></strong></h3>\n<p><span style=\"color:#494949;\">Unity 的内置物理系统 (Nvidia PhysX) 在移动设备上开销较大。下面的提示可以帮助您每秒减少更多帧。</span></p>\n<p><span style=\"color:#494949;\"><strong>优化设置</strong></span></p>\n<p><span style=\"color:#494949;\">在 PlayerSettings 中，尽可能选中 Prebake Collision Meshes。</span></p>\n<p><span style=\"color:#494949;\"><img alt=\"\" height=\"238\" src=\"..\\..\\static\\image\\20210916110339847.png\" width=\"614\"/>​</span></p>\n<p><span style=\"color:#494949;\">请务必同时编辑 Physics 设置 (Project Settings &gt; Physics)。尽可能简化 Layer Collision Matrix。</span></p>\n<p><span style=\"color:#494949;\">禁用 Auto Sync Transforms 并启用 Reuse Collision Callbacks。</span></p>\n<p><span style=\"color:#494949;\"><img alt=\"\" height=\"696\" src=\"..\\..\\static\\image\\20210916110426493.png\" width=\"612\"/>​</span></p>\n<p><span style=\"color:#494949;\"><strong> 简化碰撞体</strong></span></p>\n<p><span style=\"color:#494949;\">网格碰撞体开销较大。用简单的原始碰撞体或网格碰撞体代替更复杂的网格碰撞体来近似原始形状。</span></p>\n<p><span style=\"color:#494949;\"><strong>使用物理方法移动刚体</strong></span></p>\n<p><span style=\"color:#494949;\">使用类方法（如 MovePosition 或 AddForce）来移动 Rigidbody 对象。直接转换其 Transform 组件可能导致重新计算物理世界，在复杂场景中，这样需要较大开销。</span></p>\n<p><span style=\"color:#494949;\">在 FixedUpdate 中而不是 Update 中移动物理体。</span></p>\n<p><strong><span style=\"color:#494949;\">修改固定时间间隔</span></strong></p>\n<p></p>\n<p><span style=\"color:#494949;\">Project Settings 中的默认 Fixed Timestep 是 0.02 (50 Hz)。根据目标帧率对此进行更改（例如，对 30 fps 设置为 0.03）。</span></p>\n<p><span style=\"color:#494949;\">否则，如果帧率在运行时下降，也就是说 Unity 每帧都多次调用 FixedUpdate，可能会因物理内容过多而造成 CPU 性能问题。</span></p>\n<p><span style=\"color:#494949;\">Maximum Allowed Timestep 对帧率下降时物理计算和 FixedUpdate 事件可以使用的时间进行限制。降低该值意味着在性能顿挫过程中，物理系统和动画会缓慢下来，但也会减小其对帧率的影响。</span></p>\n<p><span style=\"color:#494949;\"><img alt=\"\" height=\"169\" src=\"..\\..\\static\\image\\20210916110815380.png\" width=\"615\"/>​</span></p>\n<h2 id=\"%C2%A0%E6%80%BB%E7%BB%93\"><strong><span style=\"color:#494949;\">总结</span></strong></h2>\n<p>性能优化是一个广泛的话题。理解移动硬件的运行方式及其限制。要找到符合您的设计要求的有效解决方案，您需要掌握 Unity 的类和组件、算法和数据结构，以及平台的性能分析工具。</p>\n</div>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-09-16 11:19:55", "summary": "性能优化是游戏项目开发过程中一个永恒的话题。项目的性能优化主要围绕、和内存三大方面进行。但是如此的总结我感觉太繁杂不能成系统，例如：影响内存的主要三个部分资源内存占用；引擎模块自身内存占用；托管堆内存"}