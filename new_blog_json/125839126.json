{"blogid": "125839126", "writerAge": "码龄5年", "writerBlogNum": "20", "writerCollect": "21", "writerComment": "2", "writerFan": "3", "writerGrade": "2级", "writerIntegral": "228", "writerName": "图灵，图灵，图个机灵", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125839126.jpg", "writerRankTotal": "59032", "writerRankWeekly": "26025", "writerThumb": "6", "writerVisitNum": "7494", "blog_read_count": "1055", "blog_time": "已于 2022-08-01 12:56:24 修改", "blog_title": "std::function用法详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"stdfunction_0\"></a>std::function用法详解</h1>\n<p>代码在：VCCommon/functionDemo</p>\n<h2><a id=\"stdfunction__4\"></a>std::function 简介</h2>\n<p>类模板 std :: function 是一个通用的多态函数包装器。 std :: function 的实例可以存储，复制和调用任何可调用的目标 ：包括函数，lambda表达式，绑定表达式或其他函数对象，以及指向成员函数和指向数据成员的指针。当std::function对象未包裹任何实际的可调用元素，调用该 std::function 对象将抛出std::bad_function_call 异常。</p>\n<h2><a id=\"_8\"></a>与函数指针的比较</h2>\n<pre><code class=\"prism language-c++\">#include&lt;iostream&gt;\n#include &lt;functional&gt;\n\nusing namespace std;\n\n// c type global function\nint c_func(int a, int b)\n{\n    return a + b;\n}\n\nint main()\n{\n    typedef int(*Func)(int ,int);\n    Func f1 = c_func;\n\tcout&lt;&lt; f1(1,2)&lt;&lt;endl;  //3\n   \n\tstd::function&lt;int(int, int)&gt;f2 = c_func;\n\tcout&lt;&lt;f2(1, 2)&lt;&lt;endl;      // 3\n    system(\"pause\");\n\treturn 0;\n}\n</code></pre>\n<p>从上面我们可以看出，使用C++11的function类调用函数方便多了。</p>\n<h2><a id=\"function__37\"></a>function 类模板</h2>\n<pre><code class=\"prism language-c++\">template&lt; class R, class... Args &gt;\nclass function&lt;R(Args...)&gt;;\n</code></pre>\n<p>模板参数说明：</p>\n<ul><li>R: 被调用函数的返回类型</li><li>Args…：被调用函数的形参</li></ul>\n<p>例如：function&lt;int(int,int)&gt; func;<br/> 则 function 类的实例 func 可以指向返回值为int型，有两个形参都为int型的函数。</p>\n<h2><a id=\"function__52\"></a>function 的成员函数</h2>\n<p>虽然是function是类模板，但其只有成员函数，无数据成员。</p>\n<table><thead><tr><th>成员函数声明</th><th>说明</th></tr></thead><tbody><tr><td>constructor</td><td>构造函数：constructs a new std::function instance</td></tr><tr><td>destructor</td><td>析构函数： destroys a std::function instance</td></tr><tr><td>operator=</td><td>给定义的function对象赋值</td></tr><tr><td>operator bool</td><td>检查定义的function对象是否包含一个有效的对象</td></tr><tr><td>operator()</td><td>调用一个对象</td></tr></tbody></table>\n<h2><a id=\"_64\"></a>用法</h2>\n<h3><a id=\"1_66\"></a>1.调用普通函数</h3>\n<p>非模板</p>\n<pre><code class=\"prism language-c++\">#include &lt;functional&gt;\n#include &lt;iostream&gt;\n\nint f(int a, int b)\n{\n    return a+b;\n}\n\nint main()\n{\n    std::function&lt;int(int, int)&gt;func = f;\n    cout&lt;&lt;func(1, 2)&lt;&lt;endl;      // 3\n    \n    system(\"pause\");\n    return 0;\n}\n</code></pre>\n<p>有模板</p>\n<pre><code class=\"prism language-c++\">#include &lt;functional&gt;\n#include &lt;iostream&gt;\n\ntemplate&lt;class T&gt;\nT f(T a, T b)\n{\n    return a+b;\n}\n\nint main()\n{\n    std::function&lt;int(int, int)&gt;func = f&lt;int&gt;;\n    cout&lt;&lt;func(1, 2)&lt;&lt;endl;      // 3\n    \n    system(\"pause\");\n    return 0;\n}\n</code></pre>\n<h3><a id=\"2_111\"></a>2.调用函数对象</h3>\n<p>非模板</p>\n<pre><code class=\"prism language-c++\">#include&lt;iostream&gt;\n#include &lt;functional&gt;\n\nusing namespace std;\n\n//function object\nstruct functor  // or class functor\n{\npublic:\n    int operator() (int a, int b)\n    {\n        return a + b;\n    }\n};\n\nint main()\n{\n    functor ft;\n    function&lt;int(int,int)&gt; func = ft();\n    cout&lt;&lt;func(1,2)&lt;&lt;endl;    //3\n    \n    system(\"pause\");\n    return 0;\n}\n</code></pre>\n<p>有模板</p>\n<pre><code class=\"prism language-c++\">#include&lt;iostream&gt;\n#include &lt;functional&gt;\n\nusing namespace std;\n\n//function object\ntemplate&lt;class T&gt;\nstruct functor   // or class functor\n{\npublic:\n    T operator() (T a, T b)\n    {\n        return a + b;\n    }\n};\n\nint main()\n{\n    functor&lt;int&gt; ft;\n    function&lt;int(int,int)&gt; func = ft;\n    //function&lt;int(int,int)&gt; func = functor&lt;int&gt;();\n    cout&lt;&lt;func(1,2)&lt;&lt;endl;    //3\n    \n    system(\"pause\");\n    return 0;\n}\n</code></pre>\n<h3><a id=\"3lambda_173\"></a>3.调用lambda表达式</h3>\n<pre><code class=\"prism language-c++\">#include &lt;functional&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\n\tauto f = [](const int a, const int b) { return a + b; };\n\tstd::function&lt;int(int, int)&gt;func = f;\n\tcout &lt;&lt; func(1, 2) &lt;&lt; endl;      // 3\n\tsystem(\"pause\");\n\treturn 0;\n}\n</code></pre>\n<h3><a id=\"4_191\"></a>4.调用类静态成员函数</h3>\n<p>非模板</p>\n<pre><code class=\"prism language-c++\">#include &lt;iostream&gt;\n#include &lt;functional&gt;\nusing namespace std;\n\nclass Plus\n{\npublic:\n    static int plus(int a, int b)\n    {\n        return a + b;\n    }\n};\n\nint main()\n{\n    function&lt;int(int, int)&gt; f = Plus::plus;\n    //function&lt;int(int, int)&gt; f = &amp;Plus::plus;\n    cout &lt;&lt; f(1, 2) &lt;&lt; endl;     //3\n    \n    system(\"pause\");                                       \n    return 0;\n}\n</code></pre>\n<p>有模板</p>\n<pre><code class=\"prism language-c++\">#include &lt;iostream&gt;\n#include &lt;functional&gt;\nusing namespace std;\n\nclass Plus\n{\npublic:\n    template &lt;class T&gt;\n    static T plus(T a, T b)\n    {\n        return a + b;\n    }\n};\n\nint main()\n{\n    function&lt;int(int, int)&gt; f = Plus::plus&lt;int&gt;;\n    //function&lt;int(int, int)&gt; f = &amp;Plus::plus&lt;int&gt;;\n    cout &lt;&lt; f(1, 2) &lt;&lt; endl;     //3\n    \n    system(\"pause\");                                       \n    return 0;\n}\n</code></pre>\n<h3><a id=\"5_248\"></a>5.调用类成员函数</h3>\n<p>非模板</p>\n<pre><code class=\"prism language-c++\">#include &lt;iostream&gt;\n#include &lt;functional&gt;\n\nusing namespace std;\n\nclass Plus\n{\npublic:\n    int plus(int a, int b)\n    {\n        return a + b;\n    }\n};\n\nint main()\n{\n    Plus p;\n    function&lt;int(Plus&amp;,int, int)&gt; f = &amp;Plus::plus;\n    function&lt;int(Plus,int, int)&gt; f2 = &amp;Plus::plus;\n    cout &lt;&lt; f(p,1, 2) &lt;&lt; endl;     //3\n    cout &lt;&lt; f2(p,1, 2) &lt;&lt; endl;     //3\n    \n    system(\"pause\");                                       \n    return 0;\n}\n</code></pre>\n<p>有模板</p>\n<pre><code class=\"prism language-c++\">#include &lt;iostream&gt;\n#include &lt;functional&gt;\n\nusing namespace std;\n\nclass Plus\n{\npublic:\n    template &lt;class T&gt;\n    T plus(T a, T b)\n    {\n        return a + b;\n    }\n};\n\nint main()\n{\n    Plus p;\n    function&lt;int(Plus&amp;,int, int)&gt; f = &amp;Plus::plus&lt;int&gt;;\n    function&lt;int(Plus,int, int)&gt; f2 = &amp;Plus::plus&lt;int&gt;;\n    cout &lt;&lt; f(p,1, 2) &lt;&lt; endl;      //3\n    cout &lt;&lt; f2(p,1, 2) &lt;&lt; endl;     //3\n    \n    system(\"pause\");                                       \n    return 0;\n}\n</code></pre>\n<h3><a id=\"6_311\"></a>6.调用类公有数据成员</h3>\n<p>非模板</p>\n<pre><code class=\"prism language-c++\">#include &lt;iostream&gt;\n#include &lt;functional&gt;\nusing namespace std;\n\nclass Plus\n{\npublic:\n    Plus(int num_):num(num_){}\n    \n    int  num;\n};\n\nint main()\n{\n    Plus p(2);\n    function&lt;int(Plus&amp;)&gt; f = &amp;Plus::num;\n    function&lt;int(Plus)&gt; f2 = &amp;Plus::num;\n    cout &lt;&lt; f(p) &lt;&lt; endl;     //2\n    cout &lt;&lt; f2(p) &lt;&lt; endl; \n    \n    system(\"pause\");                                       \n    return 0;\n}\n</code></pre>\n<pre><code class=\"prism language-c++\">#include &lt;iostream&gt;\n#include &lt;functional&gt;\n\nusing namespace std;\n\ntemplate &lt;class T&gt;\nclass Plus\n{\npublic:\n    Plus(T num_):num(num_){}\n    \n    T  num;\n};\n\nint main()\n{\n    Plus&lt;int&gt; p(2);\n    function&lt;int(Plus&lt;int&gt;&amp;)&gt; f = &amp;Plus&lt;int&gt;::num;\n    function&lt;int(Plus&lt;int&gt;)&gt; f2 = &amp;Plus&lt;int&gt;::num;\n    cout &lt;&lt; f(p) &lt;&lt; endl;      //2\n    cout &lt;&lt; f2(p) &lt;&lt; endl;     //2\n    \n    system(\"pause\");                                       \n    return 0;\n}\n</code></pre>\n<h3><a id=\"7bind_371\"></a>7.通过bind函数调用类成员函数</h3>\n<p>非模板</p>\n<pre><code class=\"prism language-c++\">#include &lt;iostream&gt;\n#include &lt;functional&gt;\nusing namespace std;\n\nclass Plus\n{\npublic:\n    int plus(int a, int b)\n    {\n        return a + b;\n    }\n};\n\nclass Plus2\n{\npublic:\n    static int plus(int a, int b)\n    {\n        return a + b;\n    }\n};\n\nint main()\n{\n    Plus p;\n    // 指针形式调用成员函数\n    function&lt;int(int, int)&gt; f1 = bind(&amp;Plus::plus, &amp;p, placeholders::_1, placeholders::_2);// placeholders::_1是占位符\n    \n    // 对象形式调用成员函数\n    function&lt;int(int, int)&gt; f2 = bind(&amp;Plus::plus, p, placeholders::_1, placeholders::_2);// placeholders::_1是占位符\n    cout &lt;&lt; f1(1, 2) &lt;&lt; endl;     //3\n    cout &lt;&lt; f2(1, 2) &lt;&lt; endl;     //3\n    \n    Plus2 p2;\n\t// 指针形式调用成员函数\n\tfunction&lt;int(int, int)&gt; f3 = bind(Plus2::plus, placeholders::_1, placeholders::_2);// placeholders::_1是占位符\n\tcout &lt;&lt; f3(1, 2) &lt;&lt; endl;     //3\n    \n    system(\"pause\");                                       \n    return 0;\n}\n</code></pre>\n<p>有模板</p>\n<pre><code class=\"prism language-c++\">#include &lt;iostream&gt;\n#include &lt;functional&gt;\n\nusing namespace std;\n\nclass Math\n{\npublic:\n    template &lt;class T&gt;\n    T Minus(T i, T j)\n    {\n        return i - j;\n    }\n};\n\nint main()\n{\n\tMath m;\n    function&lt;int(int, int)&gt; f = bind(&amp;Math::Minus&lt;int&gt;, &amp;m, placeholders::_1, placeholders::_2);\n    cout &lt;&lt; f(1, 2) &lt;&lt; endl;                                            // -1\n    return 1;\n}\n</code></pre>\n<h3><a id=\"_446\"></a>最后附上一段代码：</h3>\n<pre><code class=\"prism language-c++\">#include &lt;iostream&gt;\n#include &lt;map&gt;\n#include &lt;functional&gt;\n\nusing namespace std;\n \n// 普通函数\nint add(int i, int j) { return i + j; }\n\n// lambda表达式\nauto mod = [](int i, int j){return i % j; };\n\n// 函数对象类\nstruct divide\n{\n\tint operator() (int denominator, int divisor)\n\t{\n\t\treturn denominator / divisor;\n\t}\n};\n\nint main()\n{\n\tmap&lt;char, function&lt;int(int, int)&gt;&gt; binops = \n\t{\n\t\t{ '+', add },\n\t\t{ '-', [](int i, int j){return i - j; } },\n\t\t{ '/', divide() }\n\t};\n\tcout &lt;&lt; binops['+'](10, 5) &lt;&lt; endl;\n\tcout &lt;&lt; binops['-'](10, 5) &lt;&lt; endl;\n\tcout &lt;&lt; binops['/'](10, 5) &lt;&lt; endl;\n    \n\tsystem(\"pause\");\n\treturn 0;\n}\n</code></pre>\n<p>该文章持续更新，欢迎大家批评指正。</p>\n<p>推荐一个零声学院免费公开课程，个人觉得老师讲得不错，<br/> 分享给大家：[Linux，Nginx，ZeroMQ，MySQL，Redis，<br/> fastdfs，MongoDB，ZK，流媒体，CDN，P2P，K8S，Docker，<br/> TCP/IP，协程，DPDK等技术内容，点击立即学习:<br/> 服务器课程：<a href=\"https://course.0voice.com/v1/course/intro?courseId=5&amp;agentId=0\">C++服务器</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 0, "time": "2022-08-01 12:56:24", "summary": "用法详解代码在：简介类模板是一个通用的多态函数包装器。的实例可以存储，复制和调用任何可调用的目标：包括函数，表达式，绑定表达式或其他函数对象，以及指向成员函数和指向数据成员的指针。当对象未包裹任何实际"}