{"blogid": "124377965", "writerAge": "码龄3年", "writerBlogNum": "117", "writerCollect": "6148", "writerComment": "3236", "writerFan": "26563", "writerGrade": "7级", "writerIntegral": "11287", "writerName": "Mr.Winter`", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124377965.jpg", "writerRankTotal": "986", "writerRankWeekly": "37", "writerThumb": "4303", "writerVisitNum": "393648", "blog_read_count": "26916", "blog_time": "已于 2022-07-14 10:34:27 修改", "blog_title": "C++比Python快50倍？如何让C++和Python优势互补？(Boost::Python)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#1__3\">1 为什么需要多语言联合编程？</a></li><li><a href=\"#2_PythonC_24\">2 Python调用C++的主要方式</a></li><li><ul><li><a href=\"#21_SWIG_27\">2.1 SWIG</a></li><li><a href=\"#22_BoostPython_33\">2.2 Boost::Python</a></li><li><a href=\"#23_ctypes_42\">2.3 ctypes</a></li></ul>\n</li><li><a href=\"#3_BoostPython_46\">3 Boost::Python安装</a></li><li><a href=\"#4_pythonC_101\">4 测试实例：python继承C++接口</a></li><li><a href=\"#5__202\">5 常见问题</a></li><li><a href=\"#6__215\">6 参考文档</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"1__3\"></a>1 为什么需要多语言联合编程？</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7322c241f1964ce09aaffc66ddb9518b.png\"/><br/> 在大型工程项目中，经常会遇到多语言联合编程的情况，举个例子：</p>\n<blockquote>\n<p>在一个远端控制系统中，前端Web使用html+css+js；后端采用python-flask作为服务端，底层控制采用C/C++</p>\n</blockquote>\n<p>这是因为不同编程语言有各自的适用场景和语法特性，联合编程可使得各种语言发挥自己的特长。本文主要比较Python和C++，先列举各自特点如下：</p>\n<table><thead><tr><th>对比项目</th><th>C++</th><th>Python</th></tr></thead><tbody><tr><td>本质</td><td>编译型语言</td><td>解释型语言</td></tr><tr><td>编程难度</td><td>难以掌握</td><td>易于上手</td></tr><tr><td>语法特性</td><td>静态</td><td>动态</td></tr><tr><td>垃圾回收</td><td>不支持</td><td>支持</td></tr><tr><td>安装</td><td>易</td><td>难(需要专门打包)</td></tr><tr><td>数据类型</td><td>在编译时由关键字确定</td><td>在运行时由数值确定</td></tr><tr><td>函数</td><td>输入参数和返回值类型有限制</td><td>输入参数和返回值类型无限制</td></tr><tr><td>执行速度</td><td>快</td><td>慢</td></tr><tr><td>性能</td><td>高</td><td>低</td></tr></tbody></table>\n<p>国外有一个测试指出在相同复杂度算法中，<font color=\"#f00\"><strong>C++约比Python快50倍左右</strong></font>。因此Python不适合用于底层算法的开发，应用在上层应用中作粘合剂或进行智能领域的研究比较占优；C/C++则适合用于底层控制算法编程。下面主要介绍Python调用C++，让C++和Python形成优势互补。</p>\n<h1><a id=\"2_PythonC_24\"></a>2 Python调用C++的主要方式</h1>\n<p>主要介绍三种C++/Python联合编程的方式：</p>\n<h2><a id=\"21_SWIG_27\"></a>2.1 SWIG</h2>\n<blockquote>\n<ul><li>支持Python、Java、Ruby等语言调用C接口</li><li>文档全面，易于学习</li><li>绑定性能欠佳， 不支持属性和内部类封装</li><li>C++支持不好</li></ul>\n</blockquote>\n<h2><a id=\"22_BoostPython_33\"></a>2.2 Boost::Python</h2>\n<blockquote>\n<ul><li>支持Python2与Python3调用C++接口</li><li>大量使用C++ templates，明显提高编译时间</li><li>非常可靠、稳定、经过充分测试</li><li>语法较复杂，且文档不详细<br/> <br/><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d1f9ec06cc474636b2125da0e7d5932b.png\"/></li></ul>\n</blockquote>\n<p>本文采用<code>Boost::Python</code>进行C++/Python联合编程。</p>\n<h2><a id=\"23_ctypes_42\"></a>2.3 ctypes</h2>\n<blockquote>\n<ul><li>灵活，完全兼容C语言</li><li>使用较繁琐且不支持C++特性</li></ul>\n</blockquote>\n<h1><a id=\"3_BoostPython_46\"></a>3 Boost::Python安装</h1>\n<p>打开参考中的官方下载地址，根据不同的操作系统平台下载<code>boost</code>，UNIX和Windows的安装流程差不多，下面以Windows系统为例说明安装过程。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f4c1cada41704b0fb69caf190dade01b.png\"/><br/> 按下面步骤安装编译<code>Boost::Python</code></p>\n<ul><li>下载最新的<code>boost_1_79_0.zip</code>并解压到本地目录</li><li>运行<code>bootstrap.bat</code>在目录下产生<code>b2.exe</code>可执行文件</li><li>进入根目录新建<code>user-config.jam</code>用户配置文件，存放本地C++/Python信息<pre><code class=\"prism language-shell\">using msvc <span class=\"token builtin class-name\">:</span> <span class=\"token number\">14.2</span><span class=\"token punctuation\">;</span>\nusing python <span class=\"token builtin class-name\">:</span> <span class=\"token number\">3.7</span>.5\n\t<span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"D:/Anaconda/Anaconda/envs/test/python.exe\"</span>\n\t<span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"D:/Anaconda/Anaconda/envs/test/include\"</span>\n\t<span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"D:/Anaconda/Anaconda/envs/test/libs\"</span><span class=\"token punctuation\">;</span>\n</code></pre> 其中<code>msvc</code>是<code>Visual Studio</code>对应的<code>msvc toolset</code>版本，具体对应关系如下：<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a7843350b93546fa8fafbf9a53c7868b.png\"/><br/> <code>python</code>则定义了本地使用的<code>python</code>解释器相关路径和库</li><li>命令行执行自动化安装：<pre><code class=\"prism language-shell\">b2 --with-python <span class=\"token function\">install</span> --prefix<span class=\"token operator\">=</span><span class=\"token string\">\"D:/3rdLib/boost/boost_1_79_0/bin/lib64-msvc-14.2\"</span> <span class=\"token assign-left variable\">toolset</span><span class=\"token operator\">=</span>msvc-14.2 <span class=\"token assign-left variable\">link</span><span class=\"token operator\">=</span>static address-model<span class=\"token operator\">=</span><span class=\"token number\">64</span> --user-config<span class=\"token operator\">=</span>user-config.jam\n</code></pre> 其中一些关键参数解释如下： \n  <blockquote>\n<ul><li><code>with-</code> | <code>without-</code>：前者后接要编译的Boost库名，如本文中只需编译Boost下的Python库；后者即为编译除之外的所有库，缺省则为全部编译</li><li><code>stage</code> | <code>install</code>：前者表示只生成库文件(.dll与.lib)，后者会额外生成include目录包含库文件对应的头文件，推荐使用<code>stage</code>，因为安装完成后根目录下的<code>boost</code>与include目录文件完全一致，可直接作为头文件使用，节省编译时间</li><li><code>stagedir</code> | <code>prefix</code>：表示编译生成文件的路径，前者对应<code>stage</code>安装模式，后者对应<code>install</code>安装模式。建议在根目录下新建<code>bin</code>目录管理生成的库文件<pre><code class=\"prism language-shell\"><span class=\"token comment\"># VS2019编译的x86库文件</span>\nbin/lib32-msvc-14.2 \n<span class=\"token comment\"># VS2019编译的x64库文件</span>\nbin/lib64-msvc-14.2\n</code></pre> </li><li><code>toolset</code>：表示编译器，可选<code>gcc</code>、<code>msvc-14.2</code>(VS2019)等</li><li><code>link</code>：指定生成动态链接库<code>shared</code>还是静态链接库<code>static</code>，推荐使用静态库方式编译，这样发布程序时无需连带发布Boost的.dll文件，本文采用静态编译。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2dffe65409d54c52b927e75f723cf6d9.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ea4adfd75d9843cfb2961fcd4db5dcd5.png\"/></li><li><code>address-model</code>：指定编译版本，可选<code>32</code> | <code>64</code>，该参数必须和本地安装的Python位数相对应，否则会编译出错</li><li><code>user-config</code>：使用的本地用户配置文件路径</li></ul>\n</blockquote> </li></ul>\n<p>补充一下编译库文件的命名格式：</p>\n<pre><code>libboost_python37-vc142-mt-gd-x64-1_79\n| ||   | |      | |   | || ||| | | |  |\n -  ---   ------   ---  -- - -  -   --\n 1   2       3      4    5 6 7  8    9\n</code></pre>\n<ol><li>静态库以<code>lib</code>开头，动态库没有<code>lib</code>前缀</li><li><code>boost::python</code>库名称和版本</li><li>编译器名称及版本</li><li><code>mt</code>代表<code>threading=multi</code>，没有则代表<code>threading=single</code></li><li><code>s</code>代表<code>runtime-link=static</code>，没有则代表<code>runtime-link=shared</code></li><li><code>gd</code>代表<code>debug</code>版本，没有则代表<code>release</code>版本</li><li><code>x32</code>代表32 位程序，<code>x64</code>代表64 位</li><li>Boost库版本，<code>1_79</code>代表Boost 1.79版本。</li></ol>\n<h1><a id=\"4_pythonC_101\"></a>4 测试实例：python继承C++接口</h1>\n<p>新建工程文件夹，包含三个文件<code>helloworld.cpp</code>、<code>helloworld.py</code>与<code>CMakeLists.txt</code></p>\n<p>在<code>helloworld.cpp</code>中编写：</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">// 因为采用静态编译boost库，因此必须定义此宏，否则编译出错</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">BOOST_PYTHON_STATIC_LIB</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;boost/python.hpp&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;boost/python/wrapper.hpp&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n\nusing namespace boost<span class=\"token operator\">::</span>python<span class=\"token punctuation\">;</span>\nusing namespace std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Base</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    virtual <span class=\"token operator\">~</span><span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n    virtual <span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">BaseWrap</span> <span class=\"token operator\">:</span> Base<span class=\"token punctuation\">,</span> wrapper<span class=\"token operator\">&lt;</span>Base<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>override f <span class=\"token operator\">=</span> this<span class=\"token operator\">-&gt;</span><span class=\"token function\">get_override</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//如果函数进行重载了，则返回重载</span>\n        <span class=\"token keyword\">return</span> Base<span class=\"token operator\">::</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//否则返回基类</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">default_f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> this<span class=\"token operator\">-&gt;</span>Base<span class=\"token operator\">::</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">BOOST_PYTHON_MODULE</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    class_<span class=\"token operator\">&lt;</span>BaseWrap<span class=\"token punctuation\">,</span> boost<span class=\"token operator\">::</span>noncopyable<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Base\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">def</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>Base<span class=\"token operator\">::</span>f<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>BaseWrap<span class=\"token operator\">::</span>default_f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在<code>CMakeLists.txt</code>中编写编译规则</p>\n<pre><code class=\"prism language-txt\">project(Boost_Test)\ncmake_minimum_required(VERSION 2.8.3)\n\nif(MSVC)\n    # set(Boost_USE_STATIC_LIBS ON)\n    set(Boost_DIR D:/3rdLib/boost/boost_1_79_0/stage/lib/cmake/Boost-1.79.0)\n    set(PYTHON_INCLUDE_DIRS D:/Anaconda/Anaconda/envs/test/include)\n    set(PYTHON_LIBRARIES D:/Anaconda/Anaconda/envs/test/libs/python37.lib)\n    find_package(Boost 1.79.0 CONFIG COMPONENTS python REQUIRED)\n    include_directories(${Boost_INCLUDE_DIR} ${PYTHON_INCLUDE_DIRS})\nendif(MSVC)\n\nset(MODULE_NAME hello)\nadd_library(${MODULE_NAME} SHARED\n    helloword.cpp\n\t)\n\nif (UNIX)\n  set_target_properties(${MODULE_NAME}\n    PROPERTIES\n    PREFIX \"\"\n  )\nelseif (WIN32)\n  set_target_properties(${MODULE_NAME}\n  PROPERTIES\n  SUFFIX \".pyd\"\n  )\nendif()\n\ntarget_link_libraries(${MODULE_NAME}\n  ${Boost_LIBRARIES}\n  ${PYTHON_LIBRARIES}\n)\n</code></pre>\n<p>在工程目录下执行以下命令行：</p>\n<pre><code class=\"prism language-shell\"><span class=\"token function\">mkdir</span> build\n<span class=\"token builtin class-name\">cd</span> build\ncmake <span class=\"token punctuation\">..</span>\n<span class=\"token function\">make</span>\n</code></pre>\n<p>即可编译出<code>hello.pyd</code>二进制文件，将该文件置于工程目录下(与<code>helloworld.py</code>在同一个目录)，在<code>helloworld.py</code>中导入接口，测试多态：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> hello \nbase <span class=\"token operator\">=</span> hello<span class=\"token punctuation\">.</span>Base<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 定义派生类，继承C++类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">.</span>Base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">42</span>\n\nderived <span class=\"token operator\">=</span> Derived<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span> base<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>derived<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出以下内容，证明实验成功</p>\n<pre><code class=\"prism language-shell\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">42</span>\n</code></pre>\n<h1><a id=\"5__202\"></a>5 常见问题</h1>\n<ol><li>\n<blockquote>\n<p><code> #include &lt;boost\\python.hpp&gt;无法打开源文件'pyconfig.h'</code></p>\n</blockquote> <p><mark>解决方案</mark>：首先确保当前虚拟环境下有<code>pyconfig</code>，否则需要<code>pip install</code>。接着对于<code>vscode</code>，在<code>c_cpp_properties.json</code>中添加python的<code>include</code>目录</p> </li><li>\n<blockquote>\n<p><code> error LNK2019: 无法解析的外部符号 \"__declspec(dllimport) class boost::python::xxx</code></p>\n</blockquote> <p><mark>解决方案</mark>：库链接出错，对于静态编译的Boost::python库需要在C++文件中声明静态编译宏</p> <pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">BOOST_PYTHON_STATIC_LIB</span></span>\n</code></pre> </li></ol>\n<h1><a id=\"6__215\"></a>6 参考文档</h1>\n<ul><li><a href=\"https://www.boost.org/doc/libs/1_69_0/libs/python/doc/html/index.html\">Boost::Python官方文档</a></li><li><a href=\"https://www.boost.org/users/history/\">Boost::Python下载官网</a></li></ul>\n<hr color=\"#FFF\" size='1\"'/>\n<p>🔥 <strong>更多精彩专栏</strong>：</p>\n<ul><li><a href=\"https://blog.csdn.net/frigidwinter/category_11541346.html\">《ROS从入门到精通》</a></li><li><a href=\"https://blog.csdn.net/frigidwinter/category_11410243.html\">《机器人原理与技术》</a></li><li><a href=\"https://blog.csdn.net/frigidwinter/category_10302228.html\">《机器学习强基计划》</a></li><li><a href=\"https://blog.csdn.net/frigidwinter/category_11195510.html\">《计算机视觉教程》</a></li><li>…</li></ul>\n<br/>\n<center>\n 👇源码获取 · 技术交流 · 抱团学习 · 咨询分享 请联系👇 \n</center>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 1, "csharp": 0, "python": 1, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-07-14 10:34:27", "summary": "目录为什么需要多语言联合编程？调用的主要方式安装测试实例：继承接口常见问题参考文档为什么需要多语言联合编程？在这里插入图片描述在大型工程项目中，经常会遇到多语言联合编程的情况，举个例子：在一个远端控制"}