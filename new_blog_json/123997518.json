{"blogid": "123997518", "writerAge": "码龄9年", "writerBlogNum": "20", "writerCollect": "119", "writerComment": "89", "writerFan": "22", "writerGrade": "2级", "writerIntegral": "323", "writerName": "jack_dos", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123997518.jpg", "writerRankTotal": "99222", "writerRankWeekly": "39467", "writerThumb": "33", "writerVisitNum": "38269", "blog_read_count": "1454", "blog_time": "已于 2022-04-11 11:43:56 修改", "blog_title": "C#和JavaScript 使用 Lz4 文本压缩算法 相互压缩/解压", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>C# &amp; JavaScript 使用LZ4 相互压缩&amp;解压</h3>\n<ul><li><a href=\"#_2\">前言</a></li><li><ul><li><a href=\"#_10\">正文</a></li><li><ul><li><a href=\"#utiljs__Utilcs_11\">util.js -&gt; Util.cs</a></li><li><a href=\"#xxh32js__Xxh32cs_95\">xxh32.js -&gt; Xxh32.cs</a></li><li><a href=\"#lz4js__Lz4cs_220\">lz4.js -&gt; Lz4.cs</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_832\">测试</a></li><li><ul><li><a href=\"#C_833\">C#端</a></li><li><a href=\"#JavaScript_861\">JavaScript端</a></li></ul>\n</li><li><a href=\"#_925\">不足之处</a></li><li><a href=\"#__929\">看完了？ 点赞、收藏、关注！</a></li><li><a href=\"#_930\">转载只能放本文标题、链接</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_2\"></a>前言</h1>\n<p>      工作需要，由于复杂度提升，公司算法端生成的结果会有几十甚至上百M，直接将结果发送到网页端，太占用网络资源。因此考虑将C#端的结果文本进行压缩，发送给前端。通过比较压缩/解压速度，最后选取了Lz4压缩算法。<br/>       网上找了一些资料，C#端用<a href=\"https://www.jianshu.com/p/e9d1e313369f\">lz4net</a>这个库，js端用这个库<a href=\"https://github.com/Benzinga/lz4js\">lz4js</a>。<br/>       近一步测试，发现<strong>这两个库</strong>只能压缩/解压自己的内容，并<strong>不能相互压缩/解压</strong>。通过对C#端lz4net库的dll文件的反编译，发现其压缩算法和js端<strong>稍有差异</strong>，导致无法相互解析。<br/>       综合以上，只要<strong>保证C#和JS两边算法一致</strong>即可相互解析。由于C#端算法阅读性差，最终决定将js的lz4压缩算法移植到C#端。</p>\n<h2><a id=\"_10\"></a>正文</h2>\n<h3><a id=\"utiljs__Utilcs_11\"></a>util.js -&gt; Util.cs</h3>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Lz4CSharp</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Util</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//相当于js中运算符‘&gt;&gt;&gt;‘</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">UInt32</span> <span class=\"token function\">UInt32MoveRight</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UInt32</span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">UInt32</span> mask <span class=\"token operator\">=</span> <span class=\"token number\">0x7fffffff</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Integer.MAX_VALUE</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> y<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                x <span class=\"token operator\">&gt;&gt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                x <span class=\"token operator\">&amp;=</span> mask<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// Simple hash function, from: http://burtleburtle.net/bob/hash/integer.html.</span>\n        <span class=\"token comment\">// Chosen because it doesn't use multiply and achieves full avalanche.</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">UInt32</span> <span class=\"token function\">hashU32</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UInt32</span> a<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            a <span class=\"token operator\">|=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            a <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">2127912214</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UInt32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">^</span> <span class=\"token operator\">-</span><span class=\"token number\">949894596</span> <span class=\"token operator\">^</span> <span class=\"token function\">UInt32MoveRight</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            a <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">374761393</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UInt32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token operator\">-</span><span class=\"token number\">744332180</span> <span class=\"token operator\">^</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UInt32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token operator\">-</span><span class=\"token number\">42973499</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>UInt32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">^</span> <span class=\"token operator\">-</span><span class=\"token number\">1252372727</span> <span class=\"token operator\">^</span> <span class=\"token function\">UInt32MoveRight</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Reads a 64-bit little-endian integer from an array.</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">UInt64</span> <span class=\"token function\">readU64</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> b<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> n<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">UInt64</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            x <span class=\"token operator\">|=</span> b<span class=\"token punctuation\">[</span>n<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            x <span class=\"token operator\">|=</span> b<span class=\"token punctuation\">[</span>n<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n            x <span class=\"token operator\">|=</span> b<span class=\"token punctuation\">[</span>n<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n            x <span class=\"token operator\">|=</span> b<span class=\"token punctuation\">[</span>n<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\n            x <span class=\"token operator\">|=</span> b<span class=\"token punctuation\">[</span>n<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span>\n            x <span class=\"token operator\">|=</span> b<span class=\"token punctuation\">[</span>n<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span>\n            x <span class=\"token operator\">|=</span> b<span class=\"token punctuation\">[</span>n<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">48</span><span class=\"token punctuation\">;</span>\n            x <span class=\"token operator\">|=</span> b<span class=\"token punctuation\">[</span>n<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">56</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Reads a 32-bit little-endian integer from an array.</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">UInt32</span> <span class=\"token function\">readU32</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> b<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> n<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">UInt32</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            x <span class=\"token operator\">|=</span> b<span class=\"token punctuation\">[</span>n<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            x <span class=\"token operator\">|=</span> b<span class=\"token punctuation\">[</span>n<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n            x <span class=\"token operator\">|=</span> b<span class=\"token punctuation\">[</span>n<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n            x <span class=\"token operator\">|=</span> b<span class=\"token punctuation\">[</span>n<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Writes a 32-bit little-endian integer from an array.</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">writeU32</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> b<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> n<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UInt32</span> x<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            b<span class=\"token punctuation\">[</span>n<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span>\n            b<span class=\"token punctuation\">[</span>n<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span>\n            b<span class=\"token punctuation\">[</span>n<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span>\n            b<span class=\"token punctuation\">[</span>n<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Multiplies two numbers using 32-bit integer multiplication.</span>\n        <span class=\"token comment\">// Algorithm from Emscripten.</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">UInt32</span> <span class=\"token function\">imul</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UInt32</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UInt32</span> b<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ah <span class=\"token operator\">=</span> <span class=\"token function\">UInt32MoveRight</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> al <span class=\"token operator\">=</span> a <span class=\"token operator\">&amp;</span> <span class=\"token number\">65535</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bh <span class=\"token operator\">=</span> <span class=\"token function\">UInt32MoveRight</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bl <span class=\"token operator\">=</span> b <span class=\"token operator\">&amp;</span> <span class=\"token number\">65535</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> al <span class=\"token operator\">*</span> bl <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>ah <span class=\"token operator\">*</span> bl <span class=\"token operator\">+</span> al <span class=\"token operator\">*</span> bh <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h3><a id=\"xxh32js__Xxh32cs_95\"></a>xxh32.js -&gt; Xxh32.cs</h3>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Lz4CSharp</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Xxh32</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// xxhash32 primes</span>\n        <span class=\"token keyword\">static</span> <span class=\"token class-name\">UInt32</span> prime1 <span class=\"token operator\">=</span> <span class=\"token number\">0x9e3779b1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token class-name\">UInt32</span> prime2 <span class=\"token operator\">=</span> <span class=\"token number\">0x85ebca77</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token class-name\">UInt32</span> prime3 <span class=\"token operator\">=</span> <span class=\"token number\">0xc2b2ae3d</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token class-name\">UInt32</span> prime4 <span class=\"token operator\">=</span> <span class=\"token number\">0x27d4eb2f</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token class-name\">UInt32</span> prime5 <span class=\"token operator\">=</span> <span class=\"token number\">0x165667b1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Utility functions/primitives</span>\n        <span class=\"token comment\">// --</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">UInt32</span> <span class=\"token function\">rotl32</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UInt32</span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> r<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            x <span class=\"token operator\">|=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            r <span class=\"token operator\">|=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> Util<span class=\"token punctuation\">.</span><span class=\"token function\">UInt32MoveRight</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">32</span> <span class=\"token operator\">-</span> r <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> x <span class=\"token operator\">&lt;&lt;</span> r <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">UInt32</span> <span class=\"token function\">rotmul32</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UInt32</span> h<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> r<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UInt32</span> m<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            h <span class=\"token operator\">|=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            r <span class=\"token operator\">|=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            m <span class=\"token operator\">|=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> Util<span class=\"token punctuation\">.</span><span class=\"token function\">imul</span><span class=\"token punctuation\">(</span>Util<span class=\"token punctuation\">.</span><span class=\"token function\">UInt32MoveRight</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> <span class=\"token number\">32</span> <span class=\"token operator\">-</span> r <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> h <span class=\"token operator\">&lt;&lt;</span> r<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">UInt32</span> <span class=\"token function\">shiftxor32</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UInt32</span> h<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> s<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            h <span class=\"token operator\">|=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            s <span class=\"token operator\">|=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> Util<span class=\"token punctuation\">.</span><span class=\"token function\">UInt32MoveRight</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> h <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Implementation</span>\n        <span class=\"token comment\">// --</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">UInt32</span> <span class=\"token function\">xxhapply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UInt32</span> h<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UInt32</span> src<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UInt32</span> m0<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UInt32</span> m1<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">rotmul32</span><span class=\"token punctuation\">(</span>Util<span class=\"token punctuation\">.</span><span class=\"token function\">imul</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> m0<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> h<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> m1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">UInt32</span> <span class=\"token function\">xxh1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UInt32</span> h<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> src<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">rotmul32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>h <span class=\"token operator\">+</span> Util<span class=\"token punctuation\">.</span><span class=\"token function\">imul</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> prime5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> prime1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">UInt32</span> <span class=\"token function\">xxh4</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UInt32</span> h<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> src<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">xxhapply</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> Util<span class=\"token punctuation\">.</span><span class=\"token function\">readU32</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> prime3<span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> prime4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token function\">xxh16</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> h<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> src<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{<!-- --></span>\n              <span class=\"token function\">xxhapply</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Util<span class=\"token punctuation\">.</span><span class=\"token function\">readU32</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> prime2<span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> prime1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n              <span class=\"token function\">xxhapply</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Util<span class=\"token punctuation\">.</span><span class=\"token function\">readU32</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> prime2<span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> prime1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n              <span class=\"token function\">xxhapply</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Util<span class=\"token punctuation\">.</span><span class=\"token function\">readU32</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> prime2<span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> prime1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n              <span class=\"token function\">xxhapply</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Util<span class=\"token punctuation\">.</span><span class=\"token function\">readU32</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> prime2<span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> prime1<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">UInt32</span> <span class=\"token function\">xxh32</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UInt32</span> seed<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> src<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> len<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">UInt32</span> h<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">UInt32</span> l <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UInt32<span class=\"token punctuation\">)</span>len<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">&gt;=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> tmpH <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{<!-- --></span>\n                  seed <span class=\"token operator\">+</span> prime1 <span class=\"token operator\">+</span> prime2<span class=\"token punctuation\">,</span>\n                  seed <span class=\"token operator\">+</span> prime2<span class=\"token punctuation\">,</span>\n                  seed<span class=\"token punctuation\">,</span>\n                  seed <span class=\"token operator\">-</span> prime1\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">&gt;=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    tmpH <span class=\"token operator\">=</span> <span class=\"token function\">xxh16</span><span class=\"token punctuation\">(</span>tmpH<span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    index <span class=\"token operator\">+=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n                    len <span class=\"token operator\">-=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                h <span class=\"token operator\">=</span> <span class=\"token function\">rotl32</span><span class=\"token punctuation\">(</span>tmpH<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">rotl32</span><span class=\"token punctuation\">(</span>tmpH<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">rotl32</span><span class=\"token punctuation\">(</span>tmpH<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">rotl32</span><span class=\"token punctuation\">(</span>tmpH<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> l<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                h <span class=\"token operator\">=</span> Util<span class=\"token punctuation\">.</span><span class=\"token function\">UInt32MoveRight</span><span class=\"token punctuation\">(</span>seed <span class=\"token operator\">+</span> prime5 <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>UInt32<span class=\"token punctuation\">)</span>len<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">&gt;=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                h <span class=\"token operator\">=</span> <span class=\"token function\">xxh4</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                index <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n                len <span class=\"token operator\">-=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                h <span class=\"token operator\">=</span> <span class=\"token function\">xxh1</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                len<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            h <span class=\"token operator\">=</span> <span class=\"token function\">shiftxor32</span><span class=\"token punctuation\">(</span>Util<span class=\"token punctuation\">.</span><span class=\"token function\">imul</span><span class=\"token punctuation\">(</span><span class=\"token function\">shiftxor32</span><span class=\"token punctuation\">(</span>Util<span class=\"token punctuation\">.</span><span class=\"token function\">imul</span><span class=\"token punctuation\">(</span><span class=\"token function\">shiftxor32</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> prime2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> prime3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> Util<span class=\"token punctuation\">.</span><span class=\"token function\">UInt32MoveRight</span><span class=\"token punctuation\">(</span>h <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h3><a id=\"lz4js__Lz4cs_220\"></a>lz4.js -&gt; Lz4.cs</h3>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Lz4CSharp</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Lz4</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// lz4.js - An implementation of Lz4 in plain JavaScript.</span>\n        <span class=\"token comment\">//</span>\n        <span class=\"token comment\">// TODO:</span>\n        <span class=\"token comment\">// - Unify header parsing/writing.</span>\n        <span class=\"token comment\">// - Support options (block size, checksums)</span>\n        <span class=\"token comment\">// - Support streams</span>\n        <span class=\"token comment\">// - Better error handling (handle bad offset, etc.)</span>\n        <span class=\"token comment\">// - HC support (better search algorithm)</span>\n        <span class=\"token comment\">// - Tests/benchmarking</span>\n\n        <span class=\"token comment\">// Constants</span>\n        <span class=\"token comment\">// --</span>\n\n        <span class=\"token comment\">// Compression format parameters/constants.</span>\n        <span class=\"token keyword\">static</span> <span class=\"token class-name\">UInt32</span> minMatch <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token class-name\">UInt32</span> minLength <span class=\"token operator\">=</span> <span class=\"token number\">13</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token class-name\">UInt32</span> searchLimit <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> skipTrigger <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token class-name\">UInt32</span> hashSize <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Token constants.</span>\n        <span class=\"token keyword\">static</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> mlBits <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> mlMask <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> mlBits<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> runBits <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> runMask <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> runBits<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Shared buffers</span>\n        <span class=\"token keyword\">static</span> <span class=\"token class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> blockBuf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UInt32</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> hashTable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UInt32</span><span class=\"token punctuation\">[</span>hashSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Frame constants.</span>\n        <span class=\"token keyword\">static</span> <span class=\"token class-name\">UInt32</span> magicNum <span class=\"token operator\">=</span> <span class=\"token number\">0x184D2204</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Frame descriptor flags.</span>\n        <span class=\"token keyword\">static</span> <span class=\"token class-name\">UInt32</span> fdContentChksum <span class=\"token operator\">=</span> <span class=\"token number\">0x4</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token class-name\">UInt32</span> fdContentSize <span class=\"token operator\">=</span> <span class=\"token number\">0x8</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token class-name\">UInt32</span> fdBlockChksum <span class=\"token operator\">=</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// var fdBlockIndep = 0x20;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token class-name\">UInt32</span> fdVersion <span class=\"token operator\">=</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token class-name\">UInt32</span> fdVersionMask <span class=\"token operator\">=</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Block sizes.</span>\n        <span class=\"token keyword\">static</span> <span class=\"token class-name\">UInt32</span> bsUncompressed <span class=\"token operator\">=</span> <span class=\"token number\">0x80000000</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token class-name\">UInt32</span> bsDefault <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> bsShift <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token class-name\">UInt32</span> bsMask <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token class-name\">Dictionary<span class=\"token punctuation\">&lt;</span>UInt32<span class=\"token punctuation\">,</span> UInt32<span class=\"token punctuation\">&gt;</span></span> bsMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span>UInt32<span class=\"token punctuation\">,</span> UInt32<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            bsMap<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            bsMap<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            bsMap<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x100000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            bsMap<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x400000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Utility functions/primitives</span>\n        <span class=\"token comment\">// --</span>\n\n\n\n        <span class=\"token comment\">// Clear hashtable.</span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">clearHashTable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> table<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> hashSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                hashTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n\n\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token function\">sliceArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> start<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> end<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// Uint8Array#slice polyfill.</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> len <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Calculate start.</span>\n            start <span class=\"token operator\">=</span> start <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            start <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">Max</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">+</span> start<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">Min</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Calculate end.</span>\n            end <span class=\"token operator\">=</span> end <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">?</span> len <span class=\"token punctuation\">:</span> end <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            end <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">Max</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">+</span> end<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">Min</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Copy into new array.</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> arraySlice <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UInt32</span><span class=\"token punctuation\">[</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> start<span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                arraySlice<span class=\"token punctuation\">[</span>n<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> arraySlice<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n\n        <span class=\"token comment\">// Implementation</span>\n        <span class=\"token comment\">// --</span>\n\n        <span class=\"token comment\">// Calculates an upper bound for lz4 compression.</span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">UInt32</span> <span class=\"token function\">compressBound</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UInt32</span> n<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">/</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Calculates an upper bound for lz4 decompression, by reading the data.</span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">UInt64</span> <span class=\"token function\">decompressBound</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> src<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> sIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Read magic number</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Util<span class=\"token punctuation\">.</span><span class=\"token function\">readU32</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> sIndex<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> magicNum<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invalid magic number\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            sIndex <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Read descriptor</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> descriptor <span class=\"token operator\">=</span> src<span class=\"token punctuation\">[</span>sIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Check version</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>descriptor <span class=\"token operator\">&amp;</span> fdVersionMask<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> fdVersion<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"incompatible descriptor version </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">descriptor <span class=\"token operator\">&amp;</span> fdVersionMask</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// Read flags</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> useBlockSum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>descriptor <span class=\"token operator\">&amp;</span> fdBlockChksum<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> useContentSize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>descriptor <span class=\"token operator\">&amp;</span> fdContentSize<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Read block size</span>\n            <span class=\"token class-name\">UInt32</span> bsIdx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">[</span>sIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> bsShift<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> bsMask<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bsMap<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>bsIdx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"invalid block size </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">bsIdx</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> maxBlockSize <span class=\"token operator\">=</span> bsMap<span class=\"token punctuation\">[</span>bsIdx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Get content size</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>useContentSize<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> Util<span class=\"token punctuation\">.</span><span class=\"token function\">readU64</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> sIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// Checksum</span>\n            sIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Read blocks.</span>\n            <span class=\"token class-name\">UInt32</span> maxSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> blockSize <span class=\"token operator\">=</span> Util<span class=\"token punctuation\">.</span><span class=\"token function\">readU32</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> sIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                sIndex <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>blockSize <span class=\"token operator\">&amp;</span> bsUncompressed<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    blockSize <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>bsUncompressed<span class=\"token punctuation\">;</span>\n                    maxSize <span class=\"token operator\">+=</span> blockSize<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    maxSize <span class=\"token operator\">+=</span> maxBlockSize<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>blockSize <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">return</span> maxSize<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>useBlockSum<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    sIndex <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                sIndex <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>blockSize<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Decompresses a block of Lz4.</span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">UInt32</span> <span class=\"token function\">decompressBlock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> src<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> dst<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UInt32</span> sIndex<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UInt32</span> sLength<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UInt32</span> dIndex<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">UInt32</span> mLength<span class=\"token punctuation\">,</span> mOffset<span class=\"token punctuation\">,</span> sEnd<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Setup initial state.</span>\n            sEnd <span class=\"token operator\">=</span> sIndex <span class=\"token operator\">+</span> sLength<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Consume entire input block.</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>sIndex <span class=\"token operator\">&lt;</span> sEnd<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> token <span class=\"token operator\">=</span> src<span class=\"token punctuation\">[</span>sIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// Copy literals.</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> literalCount <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>token <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>literalCount <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">// Parse length.</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>literalCount <span class=\"token operator\">==</span> <span class=\"token number\">0xf</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">{<!-- --></span>\n                            literalCount <span class=\"token operator\">+=</span> src<span class=\"token punctuation\">[</span>sIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">[</span>sIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">{<!-- --></span>\n                                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token comment\">// Copy literals</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> sIndex <span class=\"token operator\">+</span> literalCount<span class=\"token punctuation\">;</span> sIndex <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{<!-- --></span>\n                        dst<span class=\"token punctuation\">[</span>dIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> src<span class=\"token punctuation\">[</span>sIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sIndex <span class=\"token operator\">&gt;=</span> sEnd<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token comment\">// Copy match.</span>\n                mLength <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>token <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xf</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// Parse offset.</span>\n                mOffset <span class=\"token operator\">=</span> src<span class=\"token punctuation\">[</span>sIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">[</span>sIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// Parse length.</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mLength <span class=\"token operator\">==</span> <span class=\"token number\">0xf</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{<!-- --></span>\n                        mLength <span class=\"token operator\">+=</span> src<span class=\"token punctuation\">[</span>sIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">[</span>sIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">{<!-- --></span>\n                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n\n                mLength <span class=\"token operator\">+=</span> minMatch<span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// Copy match.</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> dIndex <span class=\"token operator\">-</span> mOffset<span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> mLength<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    dst<span class=\"token punctuation\">[</span>dIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dst<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> dIndex<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Compresses a block with Lz4.</span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">UInt32</span> <span class=\"token function\">compressBlock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> src<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> dst<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> sIndex<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> sLength<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> hashTable<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> mIndex<span class=\"token punctuation\">,</span> mAnchor<span class=\"token punctuation\">,</span> mLength<span class=\"token punctuation\">,</span> mOffset<span class=\"token punctuation\">,</span> mStep<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> literalCount<span class=\"token punctuation\">,</span> dIndex<span class=\"token punctuation\">,</span> sEnd<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Setup initial state.</span>\n            dIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            sEnd <span class=\"token operator\">=</span> sLength <span class=\"token operator\">+</span> sIndex<span class=\"token punctuation\">;</span>\n            mAnchor <span class=\"token operator\">=</span> sIndex<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Process only if block is large enough.</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sLength <span class=\"token operator\">&gt;=</span> minLength<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> searchMatchCount <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> skipTrigger<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// Consume until last n literals (Lz4 spec limitation.)</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>sIndex <span class=\"token operator\">+</span> minMatch <span class=\"token operator\">&lt;</span> sEnd <span class=\"token operator\">-</span> searchLimit<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> seq <span class=\"token operator\">=</span> Util<span class=\"token punctuation\">.</span><span class=\"token function\">readU32</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>sIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> hash <span class=\"token operator\">=</span> Util<span class=\"token punctuation\">.</span><span class=\"token function\">UInt32MoveRight</span><span class=\"token punctuation\">(</span>Util<span class=\"token punctuation\">.</span><span class=\"token function\">hashU32</span><span class=\"token punctuation\">(</span>seq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token comment\">// Crush hash to 16 bits.</span>\n                    hash <span class=\"token operator\">=</span> Util<span class=\"token punctuation\">.</span><span class=\"token function\">UInt32MoveRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>hash <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> hash <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token comment\">// Look for a match in the hashtable. NOTE: remove one; see below.</span>\n                    mIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>hashTable<span class=\"token punctuation\">[</span>hash<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token comment\">// Put pos in hash table. NOTE: add one so that zero = invalid.</span>\n                    hashTable<span class=\"token punctuation\">[</span>hash<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UInt32<span class=\"token punctuation\">)</span>sIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token comment\">// Determine if there is a match (within range.)</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mIndex <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> Util<span class=\"token punctuation\">.</span><span class=\"token function\">UInt32MoveRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>UInt32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>sIndex <span class=\"token operator\">-</span> mIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> Util<span class=\"token punctuation\">.</span><span class=\"token function\">readU32</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>mIndex<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> seq<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{<!-- --></span>\n                        mStep <span class=\"token operator\">=</span> searchMatchCount<span class=\"token operator\">++</span> <span class=\"token operator\">&gt;&gt;</span> skipTrigger<span class=\"token punctuation\">;</span>\n                        sIndex <span class=\"token operator\">+=</span> mStep<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    searchMatchCount <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> skipTrigger<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token comment\">// Calculate literal count and offset.</span>\n                    literalCount <span class=\"token operator\">=</span> sIndex <span class=\"token operator\">-</span> mAnchor<span class=\"token punctuation\">;</span>\n                    mOffset <span class=\"token operator\">=</span> sIndex <span class=\"token operator\">-</span> mIndex<span class=\"token punctuation\">;</span>\n\n                    <span class=\"token comment\">// We've already matched one word, so get that out of the way.</span>\n                    sIndex <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>minMatch<span class=\"token punctuation\">;</span>\n                    mIndex <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>minMatch<span class=\"token punctuation\">;</span>\n\n                    <span class=\"token comment\">// Determine match length.</span>\n                    <span class=\"token comment\">// N.B.: mLength does not include minMatch, Lz4 adds it back</span>\n                    <span class=\"token comment\">// in decoding.</span>\n                    mLength <span class=\"token operator\">=</span> sIndex<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>sIndex <span class=\"token operator\">&lt;</span> sEnd <span class=\"token operator\">-</span> searchLimit <span class=\"token operator\">&amp;&amp;</span> src<span class=\"token punctuation\">[</span>sIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> src<span class=\"token punctuation\">[</span>mIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{<!-- --></span>\n                        sIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                        mIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    mLength <span class=\"token operator\">=</span> sIndex <span class=\"token operator\">-</span> mLength<span class=\"token punctuation\">;</span>\n\n                    <span class=\"token comment\">// Write token + literal count.</span>\n                    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> token <span class=\"token operator\">=</span> mLength <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">mlMask <span class=\"token punctuation\">?</span></span> mLength <span class=\"token punctuation\">:</span> mlMask<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>literalCount <span class=\"token operator\">&gt;=</span> runMask<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{<!-- --></span>\n                        dst<span class=\"token punctuation\">[</span>dIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UInt32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>runMask <span class=\"token operator\">&lt;&lt;</span> mlBits<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> literalCount <span class=\"token operator\">-</span> runMask<span class=\"token punctuation\">;</span> n <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">-=</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">{<!-- --></span>\n                            dst<span class=\"token punctuation\">[</span>dIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        dst<span class=\"token punctuation\">[</span>dIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UInt32<span class=\"token punctuation\">)</span>n<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">else</span>\n                    <span class=\"token punctuation\">{<!-- --></span>\n                        dst<span class=\"token punctuation\">[</span>dIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UInt32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>literalCount <span class=\"token operator\">&lt;&lt;</span> mlBits<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token comment\">// Write literals.</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> literalCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{<!-- --></span>\n                        dst<span class=\"token punctuation\">[</span>dIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> src<span class=\"token punctuation\">[</span>mAnchor <span class=\"token operator\">+</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token comment\">// Write offset.</span>\n                    dst<span class=\"token punctuation\">[</span>dIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UInt32<span class=\"token punctuation\">)</span>mOffset<span class=\"token punctuation\">;</span>\n                    dst<span class=\"token punctuation\">[</span>dIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UInt32<span class=\"token punctuation\">)</span>mOffset <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token comment\">// Write match length.</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mLength <span class=\"token operator\">&gt;=</span> mlMask<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> mLength <span class=\"token operator\">-</span> mlMask<span class=\"token punctuation\">;</span> n <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">-=</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">{<!-- --></span>\n                            dst<span class=\"token punctuation\">[</span>dIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        dst<span class=\"token punctuation\">[</span>dIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UInt32<span class=\"token punctuation\">)</span>n<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token comment\">// Move the anchor.</span>\n                    mAnchor <span class=\"token operator\">=</span> sIndex<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// Nothing was encoded.</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mAnchor <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// Write remaining literals.</span>\n            <span class=\"token comment\">// Write literal token+count.</span>\n            literalCount <span class=\"token operator\">=</span> sEnd <span class=\"token operator\">-</span> mAnchor<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>literalCount <span class=\"token operator\">&gt;=</span> runMask<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                dst<span class=\"token punctuation\">[</span>dIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UInt32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>runMask <span class=\"token operator\">&lt;&lt;</span> mlBits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> literalCount <span class=\"token operator\">-</span> runMask<span class=\"token punctuation\">;</span> n <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">-=</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    dst<span class=\"token punctuation\">[</span>dIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                dst<span class=\"token punctuation\">[</span>dIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UInt32<span class=\"token punctuation\">)</span>n<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                dst<span class=\"token punctuation\">[</span>dIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UInt32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>literalCount <span class=\"token operator\">&lt;&lt;</span> mlBits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// Write literals.</span>\n            sIndex <span class=\"token operator\">=</span> mAnchor<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>sIndex <span class=\"token operator\">&lt;</span> sEnd<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                dst<span class=\"token punctuation\">[</span>dIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> src<span class=\"token punctuation\">[</span>sIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>UInt32<span class=\"token punctuation\">)</span>dIndex<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Decompresses a frame of Lz4 data.</span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">UInt32</span> <span class=\"token function\">decompressFrame</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> src<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> dst<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> useBlockSum<span class=\"token punctuation\">,</span> useContentSum<span class=\"token punctuation\">,</span> useContentSize<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">UInt32</span> descriptor<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">UInt32</span> sIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">UInt32</span> dIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Read magic number</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Util<span class=\"token punctuation\">.</span><span class=\"token function\">readU32</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>sIndex<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> magicNum<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invalid magic number\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            sIndex <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Read descriptor</span>\n            descriptor <span class=\"token operator\">=</span> src<span class=\"token punctuation\">[</span>sIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Check version</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>descriptor <span class=\"token operator\">&amp;</span> fdVersionMask<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> fdVersion<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"incompatible descriptor version\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// Read flags</span>\n            useBlockSum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>descriptor <span class=\"token operator\">&amp;</span> fdBlockChksum<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            useContentSum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>descriptor <span class=\"token operator\">&amp;</span> fdContentChksum<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            useContentSize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>descriptor <span class=\"token operator\">&amp;</span> fdContentSize<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Read block size</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bsIdx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">[</span>sIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> bsShift<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> bsMask<span class=\"token punctuation\">;</span>\n            \n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bsMap<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>bsIdx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invalid block size\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>useContentSize<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">// TODO: read content size</span>\n                sIndex <span class=\"token operator\">+=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            sIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Read blocks.</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">UInt32</span> compSize<span class=\"token punctuation\">;</span>\n\n                compSize <span class=\"token operator\">=</span> Util<span class=\"token punctuation\">.</span><span class=\"token function\">readU32</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>sIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                sIndex <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>compSize <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>useBlockSum<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">// TODO: read block checksum</span>\n                    sIndex <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token comment\">// Check if block is compressed</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>compSize <span class=\"token operator\">&amp;</span> bsUncompressed<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">// Mask off the 'uncompressed' bit</span>\n                    compSize <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>bsUncompressed<span class=\"token punctuation\">;</span>\n\n                    <span class=\"token comment\">// Copy uncompressed data into destination buffer.</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> compSize<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{<!-- --></span>\n                        dst<span class=\"token punctuation\">[</span>dIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> src<span class=\"token punctuation\">[</span>sIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">// Decompress into blockBuf</span>\n                    dIndex <span class=\"token operator\">=</span> <span class=\"token function\">decompressBlock</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">,</span> sIndex<span class=\"token punctuation\">,</span> compSize<span class=\"token punctuation\">,</span> dIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    sIndex <span class=\"token operator\">+=</span> compSize<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>useContentSum<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">// TODO: read content checksum</span>\n                sIndex <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> dIndex<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Compresses data to an Lz4 frame.</span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">UInt32</span> <span class=\"token function\">compressFrame</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> src<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> dst<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> dIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Write magic number.</span>\n            Util<span class=\"token punctuation\">.</span><span class=\"token function\">writeU32</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> dIndex<span class=\"token punctuation\">,</span> magicNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            dIndex <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Descriptor flags.</span>\n            dst<span class=\"token punctuation\">[</span>dIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fdVersion<span class=\"token punctuation\">;</span>\n            dst<span class=\"token punctuation\">[</span>dIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> bsDefault <span class=\"token operator\">&lt;&lt;</span> bsShift<span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">UInt32</span> x32 <span class=\"token operator\">=</span> Xxh32<span class=\"token punctuation\">.</span><span class=\"token function\">xxh32</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> dIndex <span class=\"token operator\">-</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// Descriptor checksum.</span>\n            dst<span class=\"token punctuation\">[</span>dIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UInt32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>UInt16<span class=\"token punctuation\">)</span>x32 <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            dIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Write blocks.</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> maxBlockSize <span class=\"token operator\">=</span> bsMap<span class=\"token punctuation\">[</span>bsDefault<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> remaining <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> sIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Clear the hashtable.</span>\n            <span class=\"token function\">clearHashTable</span><span class=\"token punctuation\">(</span>hashTable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Split input into blocks and write.</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>remaining <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">UInt32</span> compSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> blockSize <span class=\"token operator\">=</span> remaining <span class=\"token operator\">&gt;</span> maxBlockSize <span class=\"token punctuation\">?</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>maxBlockSize <span class=\"token punctuation\">:</span> remaining<span class=\"token punctuation\">;</span>\n\n                compSize <span class=\"token operator\">=</span> <span class=\"token function\">compressBlock</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> blockBuf<span class=\"token punctuation\">,</span> sIndex<span class=\"token punctuation\">,</span> blockSize<span class=\"token punctuation\">,</span> hashTable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>compSize <span class=\"token operator\">&gt;</span> blockSize <span class=\"token operator\">||</span> compSize <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">// Output uncompressed.</span>\n                    Util<span class=\"token punctuation\">.</span><span class=\"token function\">writeU32</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> dIndex<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>UInt32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x80000000</span> <span class=\"token operator\">|</span> blockSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    dIndex <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> z <span class=\"token operator\">=</span> sIndex <span class=\"token operator\">+</span> blockSize<span class=\"token punctuation\">;</span> sIndex <span class=\"token operator\">&lt;</span> z<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{<!-- --></span>\n                        dst<span class=\"token punctuation\">[</span>dIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> src<span class=\"token punctuation\">[</span>sIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    remaining <span class=\"token operator\">-=</span> blockSize<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">// Output compressed.</span>\n                    Util<span class=\"token punctuation\">.</span><span class=\"token function\">writeU32</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> dIndex<span class=\"token punctuation\">,</span> compSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    dIndex <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> compSize<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{<!-- --></span>\n                        dst<span class=\"token punctuation\">[</span>dIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> blockBuf<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    sIndex <span class=\"token operator\">+=</span> blockSize<span class=\"token punctuation\">;</span>\n                    remaining <span class=\"token operator\">-=</span> blockSize<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// Write blank end block.</span>\n            Util<span class=\"token punctuation\">.</span><span class=\"token function\">writeU32</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> dIndex<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            dIndex <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>UInt32<span class=\"token punctuation\">)</span>dIndex<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Decompresses a buffer containing an Lz4 frame. maxSize is optional; if not</span>\n        <span class=\"token comment\">// provided, a maximum size will be determined by examining the data. The</span>\n        <span class=\"token comment\">// buffer returned will always be perfectly-sized.</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token function\">decompress</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> src<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UInt64</span> maxSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> dst<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">UInt32</span> size<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxSize <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                maxSize <span class=\"token operator\">=</span> <span class=\"token function\">decompressBound</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            dst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UInt32</span><span class=\"token punctuation\">[</span>maxSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            size <span class=\"token operator\">=</span> <span class=\"token function\">decompressFrame</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">!=</span> maxSize<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                dst <span class=\"token operator\">=</span> <span class=\"token function\">sliceArray</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> dst<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Compresses a buffer to an Lz4 frame. maxSize is optional; if not provided,</span>\n        <span class=\"token comment\">// a buffer will be created based on the theoretical worst output size for a</span>\n        <span class=\"token comment\">// given input size. The buffer returned will always be perfectly-sized.</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token function\">compress</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> src<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UInt32</span> maxSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">UInt32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> dst<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">UInt32</span> size<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxSize <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                maxSize <span class=\"token operator\">=</span> <span class=\"token function\">compressBound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>UInt32<span class=\"token punctuation\">)</span>src<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            dst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UInt32</span><span class=\"token punctuation\">[</span>maxSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            size <span class=\"token operator\">=</span> <span class=\"token function\">compressFrame</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">!=</span> maxSize<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                dst <span class=\"token operator\">=</span> <span class=\"token function\">sliceArray</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> dst<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h1><a id=\"_832\"></a>测试</h1>\n<h2><a id=\"C_833\"></a>C#端</h2>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Lz4<span class=\"token punctuation\">.</span><span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World! 你好 世界！\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"A painter hangs his or her finished picture on a wall, and everyone can see it. A composer writes a work, but no one can hear it until it is performed. Professional singers and players have great responsibilities, for the composer is utterly dependent on them. A student of music needs as long and as arduous a training to become a performer as a medical student needs to become a doctor. Most training is concerned with technique, for musicians have to have the muscular proficiency of an athlete or a ballet dancer. Singers practice breathing every day, as their vocal chords would be inadequate without controlled muscular support. String players practice moving the fingers of the left hand up and down, while drawing the bow to and fro with the right arm -- two entirely different movements.画家将已完成的作品挂在墙上，每个人都可以观赏到。 作曲家写完了一部作品，得由 演奏者将其演奏出来，其他人才能得以欣赏。因为作曲家是如此完全地依赖于职业歌手和职 业演奏者，所以职业歌手和职业演奏者肩上的担子可谓不轻。 一名学音乐的学生要想成为 一名演奏者，需要经受长期的、严格的训练，就象一名医科的学生要成为一名医生一样。 绝 大多数的训练是技巧性的。 音乐家们控制肌肉的熟练程度，必须达到与运动员或巴蕾舞演 员相当的水平。 歌手们每天都练习吊嗓子，因为如果不能有效地控制肌肉的话，他们的声 带将不能满足演唱的要求。 弦乐器的演奏者练习的则是在左手的手指上下滑动的同时，用 右手前后拉动琴弓--两个截然不同的动作。\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> bytes <span class=\"token operator\">=</span> Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> compress <span class=\"token operator\">=</span> Lz4<span class=\"token punctuation\">.</span><span class=\"token function\">compress</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ConvertAll</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">,</span> UInt32<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> input <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>UInt32<span class=\"token punctuation\">)</span>input<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> compressBytes <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ConvertAll</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>UInt32<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>compress<span class=\"token punctuation\">,</span> input <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span>input<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> base64Str <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToBase64String</span><span class=\"token punctuation\">(</span>compressBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>base64Str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> decompress <span class=\"token operator\">=</span> Lz4<span class=\"token punctuation\">.</span><span class=\"token function\">decompress</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ConvertAll</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">,</span> UInt32<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>Convert<span class=\"token punctuation\">.</span><span class=\"token function\">FromBase64String</span><span class=\"token punctuation\">(</span>base64Str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> input <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>UInt32<span class=\"token punctuation\">)</span>input<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> decompressBytes <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ConvertAll</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>UInt32<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>decompress<span class=\"token punctuation\">,</span> input <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span>input<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> decompressString <span class=\"token operator\">=</span> Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetString</span><span class=\"token punctuation\">(</span>decompressBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>decompressString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>测试结果<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\65b96d5ffa614a96a4c1c3a55daf738d.png\"/></p>\n<h2><a id=\"JavaScript_861\"></a>JavaScript端</h2>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">var</span> lz4 <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lz4js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World! 你好 世界！\"</span>\n    <span class=\"token keyword\">var</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">'A painter hangs his or her finished picture on a wall, and everyone can see it. A composer writes a work, but no one can hear it until it is performed. Professional singers and players have great responsibilities, for the composer is utterly dependent on them. A student of music needs as long and as arduous a training to become a performer as a medical student needs to become a doctor. Most training is concerned with technique, for musicians have to have the muscular proficiency of an athlete or a ballet dancer. Singers practice breathing every day, as their vocal chords would be inadequate without controlled muscular support. String players practice moving the fingers of the left hand up and down, while drawing the bow to and fro with the right arm -- two entirely different movements.画家将已完成的作品挂在墙上，每个人都可以观赏到。 作曲家写完了一部作品，得由 演奏者将其演奏出来，其他人才能得以欣赏。因为作曲家是如此完全地依赖于职业歌手和职 业演奏者，所以职业歌手和职业演奏者肩上的担子可谓不轻。 一名学音乐的学生要想成为 一名演奏者，需要经受长期的、严格的训练，就象一名医科的学生要成为一名医生一样。 绝 大多数的训练是技巧性的。 音乐家们控制肌肉的熟练程度，必须达到与运动员或巴蕾舞演 员相当的水平。 歌手们每天都练习吊嗓子，因为如果不能有效地控制肌肉的话，他们的声 带将不能满足演唱的要求。 弦乐器的演奏者练习的则是在左手的手指上下滑动的同时，用 右手前后拉动琴弓--两个截然不同的动作。'</span>\n\n    <span class=\"token keyword\">var</span> u8a <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> compressed <span class=\"token operator\">=</span> lz4<span class=\"token punctuation\">.</span><span class=\"token function\">compress</span><span class=\"token punctuation\">(</span>u8a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> base64Str <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">uint8arrayToBase64</span><span class=\"token punctuation\">(</span>compressed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>base64Str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> decompressU8A <span class=\"token operator\">=</span> Uint8Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token function\">atob</span><span class=\"token punctuation\">(</span>base64Str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">c</span> <span class=\"token operator\">=&gt;</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> decompressed <span class=\"token operator\">=</span> lz4<span class=\"token punctuation\">.</span><span class=\"token function\">decompress</span><span class=\"token punctuation\">(</span>decompressU8A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 由于部分浏览器对String栈有大小限制，下面这行解析字符串，对于本文的短字符串没有问题，但是对于长字符串就会导致栈溢出(可自行测试几兆的字符串，及不同的浏览器)</span>\n    <span class=\"token comment\">// var encodedString = String.fromCharCode.apply(null, decompressed);</span>\n\n    <span class=\"token comment\">// 使用分段解析可以避免出现栈溢出的问题</span>\n    <span class=\"token keyword\">var</span> encodedString <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">sliceReadArray</span><span class=\"token punctuation\">(</span>decompressed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> decodedString <span class=\"token operator\">=</span> <span class=\"token function\">decodeURIComponent</span><span class=\"token punctuation\">(</span><span class=\"token function\">escape</span><span class=\"token punctuation\">(</span>encodedString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>decodedString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">uintToString</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">uintArray</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">var</span> encodedString <span class=\"token operator\">=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> uintArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            decodedString <span class=\"token operator\">=</span> <span class=\"token function\">decodeURIComponent</span><span class=\"token punctuation\">(</span><span class=\"token function\">escape</span><span class=\"token punctuation\">(</span>encodedString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> decodedString<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">uint8arrayToBase64</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">u8Arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> <span class=\"token constant\">CHUNK_SIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x8000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//arbitrary number</span>\n        <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> length <span class=\"token operator\">=</span> u8Arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> slice<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            slice <span class=\"token operator\">=</span> u8Arr<span class=\"token punctuation\">.</span><span class=\"token function\">subarray</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token constant\">CHUNK_SIZE</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            result <span class=\"token operator\">+=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> slice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            index <span class=\"token operator\">+=</span> <span class=\"token constant\">CHUNK_SIZE</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">btoa</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">sliceReadArray</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">var</span> chunk <span class=\"token operator\">=</span> <span class=\"token number\">8</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">var</span> i<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> chunk<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        res <span class=\"token operator\">+=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> chunk<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      res <span class=\"token operator\">+=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n\n</code></pre>\n<p>测试结果<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\540bc72157c548a3aa594ac3d015f659.png\"/></p>\n<h1><a id=\"_925\"></a>不足之处</h1>\n<p>      由于一开始的误判，将byte类型写为UInt32，导致C#在压缩及解压时，会多占用4倍的空间。但不影响压缩、解压。<br/>       <strong>有时间</strong>再优化吧~~</p>\n<h1><a id=\"__929\"></a>看完了？ 点赞、收藏、关注！</h1>\n<h1><a id=\"_930\"></a>转载只能放本文标题、链接</h1>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 1, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-04-11 11:43:56", "summary": "使用相互压缩解压前言正文测试端端不足之处看完了？点赞、收藏、关注！转载只能放本文标题、链接前言工作需要，由于复杂度提升，公司算法端生成的结果会有几十甚至上百，直接将结果发送到网页端，太占用网络资源。因"}