{"blogid": "120072425", "writerAge": "码龄7年", "writerBlogNum": "56", "writerCollect": "2432", "writerComment": "782", "writerFan": "9057", "writerGrade": "6级", "writerIntegral": "4522", "writerName": "攻城狮白玉", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_120072425.jpg", "writerRankTotal": "6277", "writerRankWeekly": "4795", "writerThumb": "994", "writerVisitNum": "507212", "blog_read_count": "10433", "blog_time": "于 2021-09-03 00:16:53 发布", "blog_title": "【Python】一文弄懂python装饰器（附源码例子）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E5%89%8D%E8%A8%80-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></p>\n<p id=\"%E4%B8%80%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E8%A3%85%E9%A5%B0%E5%99%A8-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E8%A3%85%E9%A5%B0%E5%99%A8\">一、什么是装饰器</a></p>\n<p id=\"%E4%BA%8C%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8%E8%A3%85%E9%A5%B0%E5%99%A8-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8%E8%A3%85%E9%A5%B0%E5%99%A8\">二、为什么要用装饰器</a></p>\n<p id=\"%E4%B8%89%E3%80%81%E7%AE%80%E5%8D%95%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%89%E3%80%81%E7%AE%80%E5%8D%95%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8\">三、简单的装饰器</a></p>\n<p id=\"%E5%9B%9B%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E8%AF%AD%E6%B3%95%E7%B3%96%40-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%9B%9B%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E8%AF%AD%E6%B3%95%E7%B3%96%40\">四、装饰器的语法糖@</a></p>\n<p id=\"%E4%BA%94%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8%E4%BC%A0%E5%8F%82-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%94%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8%E4%BC%A0%E5%8F%82\">五、装饰器传参</a></p>\n<p id=\"%E5%85%AD%E3%80%81%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%85%AD%E3%80%81%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8\">六、带参数的装饰器</a></p>\n<p id=\"%E4%B8%83%E3%80%81%E7%B1%BB%E8%A3%85%E9%A5%B0%E5%99%A8-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%83%E3%80%81%E7%B1%BB%E8%A3%85%E9%A5%B0%E5%99%A8\">七、类装饰器</a></p>\n<p id=\"%E5%85%AB%E3%80%81%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E7%B1%BB%E8%A3%85%E9%A5%B0%E5%99%A8-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%85%AB%E3%80%81%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E7%B1%BB%E8%A3%85%E9%A5%B0%E5%99%A8\">八、带参数的类装饰器</a></p>\n<p id=\"%E4%B9%9D%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E9%A1%BA%E5%BA%8F-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B9%9D%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E9%A1%BA%E5%BA%8F\">九、装饰器的顺序</a></p>\n<p id=\"%E6%80%BB%E7%BB%93-toc\" style=\"margin-left:0px;\"><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></p>\n<p id=\"%E5%86%99%E5%9C%A8%E5%90%8E%E9%9D%A2-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%86%99%E5%9C%A8%E5%90%8E%E9%9D%A2\">写在后面</a></p>\n<hr id=\"hr-toc\"/>\n<h1>前言</h1>\n<p>最近有人问我装饰器是什么，我就跟他说，其实就是装饰器就是类似于女孩子的发卡。你喜欢的一个女孩子，她可以有很多个发卡，而当她戴上不同的发卡，她的头顶上就是装饰了不同的发卡。但是你喜欢的女孩子还是你喜欢的女孩子。如果还觉得不理解的话，装饰器就是咱们的手机壳，你尽管套上了手机壳，但并不影响你的手机功能，可你的手机还是该可以给你玩，该打电话打电话，该玩游戏玩游戏，该收藏攻城狮白玉的博客就收藏攻城狮白玉的博客。而你的手机就变成了带手机壳的手机。</p>\n<p>装饰器就是python的一个拦路虎，你干或者不干它，它都在那里。如果你想学会高级的python用法，装饰器就是你这个武松必须打倒的一只虎。</p>\n<p>本文的环境如下：</p>\n<p>win10，python3.7</p>\n<h1 id=\"%E4%B8%80%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E8%A3%85%E9%A5%B0%E5%99%A8\">一、什么是装饰器</h1>\n<p>装饰器是给现有的模块增添新的小功能，可以对原函数进行功能扩展，而且还不需要修改原函数的内容，也不需要修改原函数的调用。</p>\n<p>装饰器的使用符合了面向对象编程的开放封闭原则。</p>\n<blockquote>\n<p>开放封闭原则主要体现在两个方面：</p>\n<ol><li>对扩展开放，意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。</li><li>对修改封闭，意味着类一旦设计完成，就可以独立其工作，而不要对类尽任何修改。</li></ol>\n</blockquote>\n<h1 id=\"%E4%BA%8C%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8%E8%A3%85%E9%A5%B0%E5%99%A8\">二、为什么要用装饰器</h1>\n<p>使用装饰器之前，我们要知道，其实python里是万物皆对象，也就是万物都可传参。</p>\n<p>函数也可以作为函数的参数进行传递的。</p>\n<p>通过下面这个简单的例子可以更直观知道函数名是如何直接作为参数进行传递</p>\n<pre><code class=\"language-python\">def baiyu():\n    print(\"我是攻城狮白玉\")\n\n\ndef blog(name):\n    print('进入blog函数')\n    name()\n    print('我的博客是 https://blog.csdn.net/zhh763984017')\n\n\nif __name__ == '__main__':\n    func = baiyu  # 这里是把baiyu这个函数名赋值给变量func\n    func()  # 执行func函数\n    print('------------')\n    blog(baiyu)  # 把baiyu这个函数作为参数传递给blog函数</code></pre>\n<p>执行结果如下所示：</p>\n<p><img alt=\"\" height=\"185\" src=\"..\\..\\static\\image\\20210903000616737.png\" width=\"580\"/></p>\n<p> 接下来，我想知道这<strong><code>baiyu</code></strong>和<strong><code>blog</code></strong>两个函数分别的执行时间是多少，我就把代码修改如下：</p>\n<pre><code class=\"language-python\">import time\n\n\ndef baiyu():\n    t1 = time.time()\n    print(\"我是攻城狮白玉\")\n    time.sleep(2)\n    print(\"执行时间为：\", time.time() - t1)\n\n\ndef blog(name):\n    t1 = time.time()\n    print('进入blog函数')\n    name()\n    print('我的博客是 https://blog.csdn.net/zhh763984017')\n    print(\"执行时间为：\", time.time() - t1)\n\n\nif __name__ == '__main__':\n    func = baiyu  # 这里是把baiyu这个函数名赋值给变量func\n    func()  # 执行func函数\n    print('------------')\n    blog(baiyu)  # 把baiyu这个函数作为参数传递给blog函数</code></pre>\n<p> <img alt=\"\" height=\"239\" src=\"..\\..\\static\\image\\20210903000702671.png\" width=\"580\"/></p>\n<p> 上述的改写已经实现了我需要的功能，但是，当我有另外一个新的函数【python_blog_list】，具体如下：</p>\n<pre><code class=\"language-python\">def python_blog_list():\n    print('''【Python】爬虫实战，零基础初试爬虫下载图片（附源码和分析过程）\n    https://blog.csdn.net/zhh763984017/article/details/119063252 ''')\n    print('''【Python】除了多线程和多进程，你还要会协程\n    https://blog.csdn.net/zhh763984017/article/details/118958668 ''')\n    print('''【Python】爬虫提速小技巧，多线程与多进程（附源码示例）\n    https://blog.csdn.net/zhh763984017/article/details/118773313 ''')\n    print('''【Python】爬虫解析利器Xpath，由浅入深快速掌握（附源码例子）\n    https://blog.csdn.net/zhh763984017/article/details/118634945 ''')</code></pre>\n<p>也需要计算函数执行时间的，那按之前的逻辑，就是改写如下：</p>\n<pre><code class=\"language-python\">def python_blog_list():\n    t1 = time.time()\n    print('''【Python】爬虫实战，零基础初试爬虫下载图片（附源码和分析过程）\n    https://blog.csdn.net/zhh763984017/article/details/119063252 ''')\n    print('''【Python】除了多线程和多进程，你还要会协程\n    https://blog.csdn.net/zhh763984017/article/details/118958668 ''')\n    print('''【Python】爬虫提速小技巧，多线程与多进程（附源码示例）\n    https://blog.csdn.net/zhh763984017/article/details/118773313 ''')\n    print('''【Python】爬虫解析利器Xpath，由浅入深快速掌握（附源码例子）\n    https://blog.csdn.net/zhh763984017/article/details/118634945 ''')\n    print(\"执行时间为：\", time.time() - t1)</code></pre>\n<p style=\"margin-left:0;text-align:left;\">如果也要这样子写的话，不就重复造轮子了吗？虽说人类的本质是鸽王和复读机，但作为一个优秀的cv攻城狮（ctrl+c和ctrl+v）肯定是要想办法偷懒的呀</p>\n<p style=\"margin-left:0;text-align:left;\"> <img alt=\"\" height=\"315\" src=\"..\\..\\static\\image\\20210903000832391.png\" width=\"597\"/></p>\n<p style=\"margin-left:0;text-align:left;\">装饰器，就是可以让我们拓展一些原有函数没有的功能。</p>\n<h1 id=\"%E4%B8%89%E3%80%81%E7%AE%80%E5%8D%95%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8\">三、简单的装饰器</h1>\n<p>基于上面的函数执行时间的需求，我们就手写一个简单的装饰器进行实现。</p>\n<pre><code class=\"language-python\">import time\n\n\ndef baiyu():\n    print(\"我是攻城狮白玉\")\n    time.sleep(2)\n\n\ndef count_time(func):\n    def wrapper():\n        t1 = time.time()\n        func()\n        print(\"执行时间为：\", time.time() - t1)\n\n    return wrapper\n\n\nif __name__ == '__main__':\n    baiyu = count_time(baiyu)  # 因为装饰器 count_time(baiyu) 返回的时函数对象 wrapper，这条语句相当于  baiyu = wrapper\n    baiyu()  # 执行baiyu()就相当于执行wrapper()</code></pre>\n<p>这里的count_time是一个装饰器，装饰器函数里面定义一个wrapper函数，把func这个函数当作参数传入，函数实现的功能是把func包裹起来，并且返回wrapper函数。wrapper函数体就是要实现装饰器的内容。</p>\n<p>当然，这里的wrapper函数名是可以自定义的，只要你定义的函数名，跟你return的函数名是相同的就好了</p>\n<h1 id=\"%E5%9B%9B%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E8%AF%AD%E6%B3%95%E7%B3%96%40\">四、装饰器的语法糖@</h1>\n<p>你如果看过其他python项目里面的代码里，难免会看到@符号，这个@符号就是装饰器的语法糖。因此上面简单的装饰器还是可以通过语法糖来实现的，这样就可以省去</p>\n<blockquote>\n<p>baiyu = count_time(baiyu)</p>\n</blockquote>\n<p>这一句代码，而直接调用baiyu()这个函数</p>\n<p>换句话说，其实使用装饰器的是，默认传入的参数就是被装饰的函数。</p>\n<pre><code class=\"language-python\">import time\n\n\ndef count_time(func):\n    def wrapper():\n        t1 = time.time()\n        func()\n        print(\"执行时间为：\", time.time() - t1)\n\n    return wrapper\n\n\n@count_time\ndef baiyu():\n    print(\"我是攻城狮白玉\")\n    time.sleep(2)\n\n\nif __name__ == '__main__':\n    # baiyu = count_time(baiyu)  # 因为装饰器 count_time(baiyu) 返回的时函数对象 wrapper，这条语句相当于  baiyu = wrapper\n    # baiyu()  # 执行baiyu()就相当于执行wrapper()\n\n    baiyu()  # 用语法糖之后，就可以直接调用该函数了</code></pre>\n<h1 id=\"%E4%BA%94%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8%E4%BC%A0%E5%8F%82\">五、装饰器传参</h1>\n<p>当我们的被装饰的函数是带参数的，此时要怎么写装饰器呢？</p>\n<p>上面我们有定义了一个blog函数是带参数的</p>\n<pre><code class=\"language-python\">def blog(name):\n    print('进入blog函数')\n    name()\n    print('我的博客是 https://blog.csdn.net/zhh763984017')</code></pre>\n<p>此时我们的装饰器函数要优化一下下，修改成为可以接受任意参数的装饰器</p>\n<pre><code class=\"language-python\">def count_time(func):\n    def wrapper(*args,**kwargs):\n        t1 = time.time()\n        func(*args,**kwargs)\n        print(\"执行时间为：\", time.time() - t1)\n\n    return wrapper</code></pre>\n<p>此处，我们的wrapper函数的参数为*args和**kwargs，表示可以接受任意参数</p>\n<p>这时我们就可以调用我们的装饰器了。</p>\n<pre><code class=\"language-python\">import time\n\n\ndef count_time(func):\n    def wrapper(*args, **kwargs):\n        t1 = time.time()\n        func(*args, **kwargs)\n        print(\"执行时间为：\", time.time() - t1)\n\n    return wrapper\n\n\n@count_time\ndef blog(name):\n    print('进入blog函数')\n    name()\n    print('我的博客是 https://blog.csdn.net/zhh763984017')\n\n\nif __name__ == '__main__':\n    # baiyu = count_time(baiyu)  # 因为装饰器 count_time(baiyu) 返回的时函数对象 wrapper，这条语句相当于  baiyu = wrapper\n    # baiyu()  # 执行baiyu()就相当于执行wrapper()\n\n    # baiyu()  # 用语法糖之后，就可以直接调用该函数了\n    blog(baiyu)</code></pre>\n<h1 id=\"%E5%85%AD%E3%80%81%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8\">六、带参数的装饰器</h1>\n<p>前面咱们知道，装饰器函数也是函数，既然是函数，那么就可以进行参数传递，咱们怎么写一个带参数的装饰器呢？</p>\n<p>前面咱们的装饰器只是实现了一个计数，那么我想在使用该装饰器的时候，传入一些备注的msg信息，怎么办呢？咱们一起看一下下面的代码</p>\n<pre><code class=\"language-python\">import time\n\n\ndef count_time_args(msg=None):\n    def count_time(func):\n        def wrapper(*args, **kwargs):\n            t1 = time.time()\n            func(*args, **kwargs)\n            print(f\"[{msg}]执行时间为：\", time.time() - t1)\n\n        return wrapper\n\n    return count_time\n\n\n@count_time_args(msg=\"baiyu\")\ndef fun_one():\n    time.sleep(1)\n\n\n@count_time_args(msg=\"zhh\")\ndef fun_two():\n    time.sleep(1)\n\n\n@count_time_args(msg=\"mylove\")\ndef fun_three():\n    time.sleep(1)\n\n\nif __name__ == '__main__':\n    fun_one()\n    fun_two()\n    fun_three()</code></pre>\n<p>咱们基于原来的count_time函数外部再包一层用于接收参数的count_time_args，接收回来的参数就可以直接在内部的函数里面调用了。上述代码执行效果如下：</p>\n<p><img alt=\"\" height=\"164\" src=\"..\\..\\static\\image\\2021090300104842.png\" width=\"580\"/></p>\n<p> </p>\n<h1 id=\"%E4%B8%83%E3%80%81%E7%B1%BB%E8%A3%85%E9%A5%B0%E5%99%A8\">七、类装饰器</h1>\n<p>上面咱们一起学习了怎么写装饰器函数，在python中，其实也可以同类来实现装饰器的功能，称之为类装饰器。类装饰器的实现是调用了类里面的__call__函数。类装饰器的写法比我们装饰器函数的写法更加简单。</p>\n<p>当我们将类作为一个装饰器，工作流程：</p>\n<ul><li>通过__init__（）方法初始化类</li><li>通过__call__（）方法调用真正的装饰方法</li></ul>\n<pre><code class=\"language-python\">import time\n\n\nclass BaiyuDecorator:\n    def __init__(self, func):\n        self.func = func\n        print(\"执行类的__init__方法\")\n\n    def __call__(self, *args, **kwargs):\n        print('进入__call__函数')\n        t1 = time.time()\n        self.func(*args, **kwargs)\n        print(\"执行时间为：\", time.time() - t1)\n\n\n@BaiyuDecorator\ndef baiyu():\n    print(\"我是攻城狮白玉\")\n    time.sleep(2)\n\n\ndef python_blog_list():\n    time.sleep(5)\n    print('''【Python】爬虫实战，零基础初试爬虫下载图片（附源码和分析过程）\n    https://blog.csdn.net/zhh763984017/article/details/119063252 ''')\n    print('''【Python】除了多线程和多进程，你还要会协程\n    https://blog.csdn.net/zhh763984017/article/details/118958668 ''')\n    print('''【Python】爬虫提速小技巧，多线程与多进程（附源码示例）\n    https://blog.csdn.net/zhh763984017/article/details/118773313 ''')\n    print('''【Python】爬虫解析利器Xpath，由浅入深快速掌握（附源码例子）\n    https://blog.csdn.net/zhh763984017/article/details/118634945 ''')\n\n\n@BaiyuDecorator\ndef blog(name):\n    print('进入blog函数')\n    name()\n    print('我的博客是 https://blog.csdn.net/zhh763984017')\n\n\nif __name__ == '__main__':\n    baiyu()\n    print('--------------')\n    blog(python_blog_list)</code></pre>\n<p><img alt=\"\" height=\"377\" src=\"..\\..\\static\\image\\20210903001129797.png\" width=\"580\"/></p>\n<h1 id=\"%E5%85%AB%E3%80%81%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E7%B1%BB%E8%A3%85%E9%A5%B0%E5%99%A8\">八、带参数的类装饰器</h1>\n<p>当装饰器有参数的时候，__init__() 函数就不能传入<strong>func</strong>（func代表要装饰的函数）了，而<strong>func</strong>是在__call__函数调用的时候传入的。</p>\n<p> </p>\n<pre><code class=\"language-python\">class BaiyuDecorator:\n    def __init__(self, arg1, arg2):  # init()方法里面的参数都是装饰器的参数\n        print('执行类Decorator的__init__()方法')\n        self.arg1 = arg1\n        self.arg2 = arg2\n\n    def __call__(self, func):  # 因为装饰器带了参数，所以接收传入函数变量的位置是这里\n        print('执行类Decorator的__call__()方法')\n\n        def baiyu_warp(*args):  # 这里装饰器的函数名字可以随便命名，只要跟return的函数名相同即可\n            print('执行wrap()')\n            print('装饰器参数：', self.arg1, self.arg2)\n            print('执行' + func.__name__ + '()')\n            func(*args)\n            print(func.__name__ + '()执行完毕')\n\n        return baiyu_warp\n\n\n@BaiyuDecorator('Hello', 'Baiyu')\ndef example(a1, a2, a3):\n    print('传入example()的参数：', a1, a2, a3)\n\n\nif __name__ == '__main__':\n    print('准备调用example()')\n    example('Baiyu', 'Happy', 'Coder')\n    print('测试代码执行完毕')</code></pre>\n<p>建议各位同学好好比对一下这里的代码和不带参数的装饰器代码的区别，加深理解。</p>\n<h1 id=\"%E4%B9%9D%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E9%A1%BA%E5%BA%8F\">九、装饰器的顺序</h1>\n<p>一个函数可以被多个装饰器进行装饰，那么装饰器的执行顺序是怎么样的呢？咱们执行一下下面的代码就清楚了</p>\n<pre><code class=\"language-python\">def BaiyuDecorator_1(func):\n    def wrapper(*args, **kwargs):\n        func(*args, **kwargs)\n        print('我是装饰器1')\n\n    return wrapper\n\ndef BaiyuDecorator_2(func):\n    def wrapper(*args, **kwargs):\n        func(*args, **kwargs)\n        print('我是装饰器2')\n\n    return wrapper\n\ndef BaiyuDecorator_3(func):\n    def wrapper(*args, **kwargs):\n        func(*args, **kwargs)\n        print('我是装饰器3')\n\n    return wrapper\n\n@BaiyuDecorator_1\n@BaiyuDecorator_2\n@BaiyuDecorator_3\ndef baiyu():\n    print(\"我是攻城狮白玉\")\n\n\nif __name__ == '__main__':\n    baiyu()</code></pre>\n<p>由输出结果可知，在装饰器修饰完的函数，在执行的时候先执行原函数的功能，然后再<strong>由里到外</strong>依次执行装饰器的内容。</p>\n<p><img alt=\"\" height=\"386\" src=\"..\\..\\static\\image\\2021090300121675.png\" width=\"484\"/></p>\n<p>我们带三个装饰器的函数的代码如下：</p>\n<p> </p>\n<pre><code>@BaiyuDecorator_1\n@BaiyuDecorator_2\n@BaiyuDecorator_3\ndef baiyu():\n    print(\"我是攻城狮白玉\")</code></pre>\n<p>上述的代码可以看作如下代码，就能理解为何是由里到外执行了</p>\n<blockquote>\n<p>baiyu = BaiyuDecorator_1 (BaiyuDecorator_2 (BaiyuDecorator_3(baiyu)))</p>\n</blockquote>\n<h1 id=\"%E6%80%BB%E7%BB%93\">总结</h1>\n<p>本文由浅入深介绍了python的装饰器，并且通过代码展现了如何自己手写装饰器函数和类装饰器。</p>\n<h1 id=\"%E5%86%99%E5%9C%A8%E5%90%8E%E9%9D%A2\">写在后面</h1>\n<p>如果觉得有用的话，麻烦<span style=\"color:#fe2c24;\"><strong>一键三连</strong></span>支持一下<strong><span style=\"color:#38d8f0;\">攻城狮白玉</span>，</strong>并把本文分享给更多的小伙伴。你的简单支持，我的无限创作动力</p>\n</div>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-09-03 00:16:53", "summary": "目录前言一、什么是装饰器二、为什么要用装饰器三、简单的装饰器四、装饰器的语法糖五、装饰器传参六、带参数的装饰器七、类装饰器八、带参数的类装饰器九、装饰器的顺序总结写在后面前言最近有人问我装饰器是什么，"}