{"blogid": "125956576", "writerAge": "码龄11年", "writerBlogNum": "696", "writerCollect": "3161", "writerComment": "393", "writerFan": "45015", "writerGrade": "7级", "writerIntegral": "16289", "writerName": "西京刀客", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125956576.jpg", "writerRankTotal": "593", "writerRankWeekly": "325", "writerThumb": "721", "writerVisitNum": "1997035", "blog_read_count": "714", "blog_time": "于 2022-07-25 00:15:00 发布", "blog_title": "Rust标准库-实现一个TCP服务、Rust使用套接字", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#Rust_1\">Rust-使用套接字</a></li><li><ul><li><a href=\"#rustlibc_7\">rust调libc中的函数</a></li><li><a href=\"#rustAPI_44\">rust操作套接字API</a></li></ul>\n</li><li><a href=\"#Rust_56\">Rust标准库</a></li><li><ul><li><a href=\"#Rust_net_64\">Rust标准库 net</a></li><li><ul><li><a href=\"#rusttcp_server_72\">rust实现一个tcp server</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"Rust_1\"></a>Rust-使用套接字</h1>\n<p>Rust 实战 - 使用套接字联网API (一)<br/> 参考URL: https://www.jianshu.com/p/d1048d0b687f<br/> 使用Rust编写一个简单的Socket服务器（1）：Rust下的配置载入<br/> 参考URL: https://my.oschina.net/u/4528547/blog/4951186</p>\n<h2><a id=\"rustlibc_7\"></a>rust调libc中的函数</h2>\n<p>官网rust可以调的libc：http://www.eclipse.org/paho/files/rustdoc/libc/index.html#<br/> Rust 实战 - 使用套接字联网API (一)<br/> 参考URL:https://www.jianshu.com/p/d1048d0b687f</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>os<span class=\"token punctuation\">::</span>raw<span class=\"token punctuation\">::</span></span>c_char<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>ffi<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">CStr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">extern</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">gethostname</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token operator\">*</span><span class=\"token keyword\">mut</span> c_char<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">:</span> <span class=\"token keyword\">usize</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> buf <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">u8</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">::</span><span class=\"token function\">with_capacity</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> ptr <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">.</span><span class=\"token function\">as_mut_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token operator\">*</span><span class=\"token keyword\">mut</span> c_char<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">gethostname</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CStr</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_ptr</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>extren 表示“外部块（External blocks）”</strong>，用来申明外部非 Rust 库中的符号。我<strong>们需要使用 Rust 以外的函数，比如 libc ，就需要在 extren 中将需要用到的函数定义出来，然后就可以像使用本地函数一样使用外部函数，编译器会负责帮我们转换</strong>。但是，调用一个外部函数是unsafe的，编译器不能提供足够的保证，所以要放到unsafe块中。</p>\n<p>“gethostname” 函数在 C 头文件中的原型是：</p>\n<pre><code class=\"prism language-rust\">int <span class=\"token function\">gethostname</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>在 Linux 64位平台上，C中的int对应于Rust中的int，size_t对应Rust中的usize，但C中的char与Rust中的char是完全不同的，C中的char始终是i8或者u8，而 Rust 中的char是一个unicode标量值。你也可以去标准库查看。对于指针，Rust 中的裸指针 与C中的指针几乎是一样的，Rust的*mut对应C的普通指针，*const 对应C的const指针。因此我们将类型一一对应，函数的参数名称不要求一致。</p>\n<p>请查看原文！<br/> Rust 实战 - 使用套接字联网API (一)<br/> 参考URL: https://www.jianshu.com/p/d1048d0b687f</p>\n<h2><a id=\"rustAPI_44\"></a>rust操作套接字API</h2>\n<p>官网rust可以调的libc：http://www.eclipse.org/paho/files/rustdoc/libc/index.html#<br/> Rust 实战 - 使用套接字联网API (一)<br/> https://www.jianshu.com/p/d1048d0b687f</p>\n<p>说起套接字API，主要包括TCP、UDP、SCTP相关的函数，I/O复用函数和高级I/O函数。其中大部分函数Rust标准里是没有的，如果标准库不能满足你的需求，你可以直接调用libc中的函数。实际上，<strong>标准库中，网络这一块，也基本是对libc中相关函数的封装</strong>。</p>\n<p>请查看原文！<br/> Rust 实战 - 使用套接字联网API (一)<br/> 参考URL: https://www.jianshu.com/p/d1048d0b687f</p>\n<h1><a id=\"Rust_56\"></a>Rust标准库</h1>\n<p>标准库：https://doc.rust-lang.org/std/<br/> 标准库net模块：https://doc.rust-lang.org/std/net/index.html</p>\n<p>Rust 标准库是便携式 Rust 软件的基础，它是一组经过实战测试的最小共享抽象，适用于更广泛的 Rust 生态系统。它提供核心类型，如Vec和 Option、库定义的语言原语、标准宏、I/O和 多线程等操作，等等。</p>\n<p>std默认情况下可用于所有 Rust crate。因此，可以use通过路径在语句中 访问标准库std，如use std::env.</p>\n<h2><a id=\"Rust_net_64\"></a>Rust标准库 net</h2>\n<p>标准库net模块：https://doc.rust-lang.org/std/net/index.html</p>\n<p>Rust标准库 net模块 提供用于TCP / UDP通信的网络原语。</p>\n<p>该模块为传输控制和用户数据报协议以及 IP 和套接字地址的类型提供网络功能。</p>\n<h3><a id=\"rusttcp_server_72\"></a>rust实现一个tcp server</h3>\n<p>rust实现一个tcp server<br/> 参考URL: https://blog.csdn.net/by186/article/details/117234191<br/> Rust Web 全栈开发 - 1 构建TCP Server<br/> 参考URL: https://blog.csdn.net/weixin_51487151/article/details/123784175<br/> 【推荐，作者还有压力测试】Rust 编写一个简单，高并发的http服务（纯标准库，编译后168kb），附并发压力测试<br/> 参考URL: https://blog.csdn.net/qq_26373925/article/details/109187251</p>\n<p>服务端</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std <span class=\"token punctuation\">::</span>net<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">TcpListener</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">TcpStream</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>thread<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>time<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>io<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>io<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">Read</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Write</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n \n \n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">handle_client</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">mut</span> stream<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TcpStream</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n \n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span><span class=\"token number\">1000</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> bytes_read <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> buf<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> bytes_read <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n \n        stream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">..</span>bytes_read<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n        <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token namespace\">time<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_secs</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> listener <span class=\"token operator\">=</span> <span class=\"token class-name\">TcpListener</span><span class=\"token punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1:7878\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> thread_vec<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">JoinHandle</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;&gt;</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">for</span> stream <span class=\"token keyword\">in</span> listener<span class=\"token punctuation\">.</span><span class=\"token function\">incoming</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> stream <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token keyword\">let</span> handle <span class=\"token operator\">=</span> <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">move</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">handle_client</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap_or_else</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>error<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token macro property\">eprintln!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        thread_vec<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token keyword\">for</span> handle <span class=\"token keyword\">in</span> thread_vec <span class=\"token punctuation\">{<!-- --></span>\n        handle<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n \n \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>使用TcpListener监听Socket请求<br/> 使用Read/Write Trait进行Socket数据读写</p>\n<p>客户端</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>io<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span><span class=\"token namespace\">prelude<span class=\"token punctuation\">::</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">BufReader</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Write</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>net<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">TcpStream</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">str</span><span class=\"token punctuation\">;</span>\n \n \n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> stream <span class=\"token operator\">=</span> <span class=\"token class-name\">TcpStream</span><span class=\"token punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1:7878\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span><span class=\"token number\">1000</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> input <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token function\">stdin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">read_line</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to read\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">as_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to write\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> reader <span class=\"token operator\">=</span><span class=\"token class-name\">BufReader</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> buffer<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">u8</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        reader<span class=\"token punctuation\">.</span><span class=\"token function\">read_until</span><span class=\"token punctuation\">(</span><span class=\"token char\">b'\\n'</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> buffer<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read form server:{}\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_utf8</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-07-25 00:15:00", "summary": "文章目录使用套接字调中的函数操作套接字标准库标准库实现一个使用套接字实战使用套接字联网一参考使用编写一个简单的服务器：下的配置载入参考调中的函数官网可以调的：实战使用套接字联网一参考表示外部块，用来申"}