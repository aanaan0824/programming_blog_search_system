{"blogid": "120152117", "writerAge": "码龄4年", "writerBlogNum": "100", "writerCollect": "835", "writerComment": "261", "writerFan": "137", "writerGrade": "5级", "writerIntegral": "1921", "writerName": "RichardorMu", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_120152117.jpg", "writerRankTotal": "214725", "writerRankWeekly": "216267", "writerThumb": "160", "writerVisitNum": "182718", "blog_read_count": "18729", "blog_time": "于 2021-09-07 10:26:52 发布", "blog_title": "Jetson 系列——基于yolov5和deepsort的多目标头部识别，跟踪，使用tensorrt和c++加速", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"_0\"></a>项目简介：</h1>\n<p>代码地址：<br/> github地址:<a href=\"https://github.com/RichardoMrMu/yolov5-deepsort-tensorrt\">https://github.com/RichardoMrMu/yolov5-deepsort-tensorrt</a><br/> gitee地址:<a href=\"https://gitee.com/mumuU1156/yolov5-deepsort-tensorrt\">https://gitee.com/mumuU1156/yolov5-deepsort-tensorrt</a><br/> 欢迎start或提出你的issue、改进建议。<br/> 本项目使用yolov5+deepsort实现室内人头部追踪和计数，使用c++实现，并用tensorrt加速，在物体有70+左右的情况下，在Jetson Xavier nx上整个项目的推理时间在130ms左右，即7FPS的速度。你可以体验一下python版本的<a href=\"\">yolov5+deepsort</a>，使用原生pytorch，当跟踪的物体达到70+的时候，deepsort一次推理的速度将到1s左右，根本无法实现实时推理。<br/> You can see video play in <a href=\"https://www.bilibili.com/video/BV1nR4y1H7sR/\">BILIBILI</a>, or <a href=\"https://www.youtube.com/watch?v=29vEi-7mEic\">YOUTUBE</a> and <a href=\"https://youtu.be/mVq3pWNjb3E\">YOUTUBE</a>.</p>\n<h1><a id=\"_7\"></a>效果</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/eb943503a3d54c8ab9c6807f5d20d2a9.gif#pic_center\"/><br/> 这里我是用我自己训练的模型，识别人物的头部。你也可以尝试yolov5的官方<a href=\"https://github.com/ultralytics/yolov5/releases/tag/v5.0\">pretrained模型</a>，然后根据教程将pytorch的模型转为tensorrt使用的engine文件，即可进行1000种类别的检测。</p>\n<h1><a id=\"Speed_10\"></a>Speed</h1>\n<table><thead><tr><th align=\"left\">Backbone</th><th>before TensorRT without tracking</th><th>before TensorRT with tracking</th><th>TensorRT(detection + tracking)</th><th>FPS(detection + tracking)</th></tr></thead><tbody><tr><td align=\"left\">Yolov5s_416</td><td>100ms</td><td>0.9s</td><td>450ms</td><td>1.5 ~ 2</td></tr><tr><td align=\"left\">Yolov5s-640</td><td>120ms</td><td>1s</td><td>100-150ms</td><td>8 ~ 9</td></tr></tbody></table>\n<h1><a id=\"_18\"></a>项目使用</h1>\n<p>这个项目中，需要两个模型，检测的yolov5和deepsort特征提取的ckpt.t7，对于yolov5，我选择<a href=\"https://github.com/ultralytics/yolov5\">yolov5s</a>模型，并通过<code>yolov5s.pt-&gt;yolov5s.wts-&gt;yolov5s.engine</code>，获取engine file。deepsort模型在官方仓库里有训练好的模型<a href=\"https://github.com/ZQPei/deep_sort_pytorch\">deepsort</a>。如果你要训练自己的模型，你可以参考<a href=\"\">custom model,待补充</a>。同时你也可以参考<a href=\"https://github.com/wang-xinyu/tensorrtx/tree/master/yolov5\">tensorrtx official readme</a>。<br/> 下面是我转换好的deepsort.onnx和deepsort.engine文件，可以直接下载使用。</p>\n<table><thead><tr><th align=\"left\">模型</th><th>链接</th></tr></thead><tbody><tr><td align=\"left\">百度云</td><td><a href=\"https://pan.baidu.com/s/1vpQFsD346lP64O1nhOilkw\">BaiduYun url</a> 密码:z68e</td></tr></tbody></table>\n<h2><a id=\"0_24\"></a>0.数据集</h2>\n<p>如果你想训练自己的头部检测模型，你可以使用<a href=\"https://github.com/HCIILAB/SCUT-HEAD-Dataset-Release\">SCUT-HEAD</a>这个数据集，它是公开的，且可以随意下载的，有头部框的标注。</p>\n<h2><a id=\"1_requirement_26\"></a>1. requirement</h2>\n<p>请注意，下列流程，我在<code>Jetson Xavier nx</code>和<code>Jetson nano</code>上完整实现过，你同样可以在ubuntu系统上实现，如果想在windows上测试，需要你自己摸索。</p>\n<pre><code class=\"prism language-shell\">Jetson <span class=\"token function\">nano</span> or Jetson Xavier nx\nJetpack <span class=\"token number\">4.5</span>.1\npython3 with default<span class=\"token punctuation\">(</span>jetson <span class=\"token function\">nano</span> or jetson xavier nx has default python3 with tensorrt <span class=\"token number\">7.1</span>.3.0 <span class=\"token punctuation\">)</span>\ntensorrt <span class=\"token number\">7.1</span>.3.0\ntorch <span class=\"token number\">1.8</span>.0\ntorchvision <span class=\"token number\">0.9</span>.0\ntorch2trt <span class=\"token number\">0.3</span>.0\nonnx <span class=\"token number\">1.4</span>.1\nopencv-python <span class=\"token number\">4.5</span>.3.56\nprotobuf <span class=\"token number\">3.17</span>.3\nscipy <span class=\"token number\">1.5</span>.4\n</code></pre>\n<h2><a id=\"2_yolov5deepsorttensorrthttpsgithubcomRichardoMrMuyolov5deepsorttensorrt_42\"></a>2. 下载<a href=\"https://github.com/RichardoMrMu/yolov5-deepsort-tensorrt\">yolov5-deepsort-tensorrt</a></h2>\n<p>如果你已经有了yolov5s.engine和deepsort.engine，那么仅下载{yolov5-deepsort-tensorrt}仓库，然后修改<code>{yolov5-deepsort-tensorrt}/src/main.cpp</code>中<br/> <code>char* yolo_engine = \"\";</code>和<code>char* sort_engine = \"\";</code>为自己模型的位置 ,执行编译链接即可。如果没有这两个文件，请参考3往后的步骤。</p>\n<pre><code class=\"prism language-shell\">// 下载c++项目代码\n<span class=\"token function\">git</span> clone https://github.com/RichardoMrMu/yolov5-deepsort-tensorrt.git\n// <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>代表该项目的绝对路径\n<span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">{<!-- --></span>yolov5-deepsort-tensorrt<span class=\"token punctuation\">}</span>\n<span class=\"token function\">mkdir</span> build\n// 修改<span class=\"token punctuation\">{<!-- --></span>yolov5-deepsort-tensorrt<span class=\"token punctuation\">}</span>/src/main.cpp中deepsort\n//char* yolo_engine <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> 和 char* sort_engine <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>为自己模型的位置\n// frame <span class=\"token operator\">=</span> capture.open<span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>将open中换成mp4所在的路径，或者如果使用usb摄像头，就写成capture.open<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n// 然后执行编译链接即可\n</code></pre>\n<pre><code class=\"prism language-shell\">cmake <span class=\"token punctuation\">..</span>\n<span class=\"token function\">make</span>\n// make成功后，会在build文件夹下生成一个yolosort二进制文件 运行即可\n./yolosort // 运行二进制文件\n</code></pre>\n<h2><a id=\"3_pytorchtensorrt_63\"></a>3. 将pytorch的模型转为tensorrt支持的模型文件</h2>\n<p>因为<code>python</code>自身速度的问题和pytorch原生模型速度的问题，如果将检测部分的yolov5模型和track模块特征提取的模型转为tensorrt，速度会快10倍左右。</p>\n<ol><li>下载yolov5官方代码和模型</li></ol>\n<p>请注意，我下面使用的yolov5代码版本是yolov5-5，即<a href=\"https://github.com/ultralytics/yolov5/releases/tag/v5.0\">v5.0版本</a>，所以，如果你想自己训练模型替换engine file，请确保的yolov5代码版本是v5.0。</p>\n<pre><code class=\"prism language-shell\">// 下载v5.0\n<span class=\"token function\">git</span> clone -b v5.0 https://github.com/ultralytics/yolov5.git\n<span class=\"token builtin class-name\">cd</span> yolov5\n<span class=\"token function\">mkdir</span> weights\n<span class=\"token builtin class-name\">cd</span> weights\n// download https://github.com/ultralytics/yolov5/releases/download/v5.0/yolov5s.pt\n// 这里使用yolov5s模型\n<span class=\"token function\">wget</span> https://github.com/ultralytics/yolov5/releases/download/v5.0/yolov5s.pt\n</code></pre>\n<ol start=\"2\"><li>下载并配置tensorrt</li></ol>\n<pre><code class=\"prism language-shell\"><span class=\"token function\">git</span> clone https://github.com/wang-xinyu/tensorrtx\n</code></pre>\n<ol start=\"3\"><li>将pytorch的yolov5s.pt模型文件转为wst文件<br/> 将tensorrtx下的get_wts.py文件拷贝到yolov5文件夹下，然后将下载好的或者训练好的yolov5s.pt模型转换为wts模型</li></ol>\n<pre><code class=\"prism language-shell\"><span class=\"token function\">cp</span> tensorrtx/gen_wts.py yolov5/\n<span class=\"token builtin class-name\">cd</span> yolov5 \npython3 gen_wts.py -w ./weights/yolov5s.pt -o ./weights/yolov5s.wts\n// a <span class=\"token function\">file</span> <span class=\"token string\">'yolov5s.wts'</span> will be generated.\n</code></pre>\n<p>你可以在 <code>yolov5/weights/</code>找到<code>yolov5s.wts</code>模型</p>\n<ol start=\"4\"><li>编译<code>tensorrtx/yolov5</code>项目并获取<code>tensorrt engine file</code><br/> 此处请注意，如果你是自己训练的模型，那么要将<code>yololayer.h</code>中的<code>CLASS_NUM</code>，<code>INPUT_H</code>,<code>INPUT_W</code>修改为自己的参数。即文件的20,21,22行。</li></ol>\n<pre><code class=\"prism language-shell\"><span class=\"token builtin class-name\">cd</span> tensorrtx/yolov5\n// update CLASS_NUM <span class=\"token keyword\">in</span> yololayer.h <span class=\"token keyword\">if</span> your model is trained on custom dataset\n<span class=\"token function\">mkdir</span> build\n<span class=\"token builtin class-name\">cd</span> build\n<span class=\"token function\">cp</span> <span class=\"token punctuation\">{<!-- --></span>ultralytics<span class=\"token punctuation\">}</span>/yolov5/yolov5s.wts <span class=\"token punctuation\">{<!-- --></span>tensorrtx<span class=\"token punctuation\">}</span>/yolov5/build\ncmake <span class=\"token punctuation\">..</span>\n<span class=\"token function\">make</span>\n// yolov5s\n<span class=\"token function\">sudo</span> ./yolov5 -s yolov5s.wts yolov5s.engine s\n// <span class=\"token builtin class-name\">test</span> your engine <span class=\"token function\">file</span>\n<span class=\"token function\">sudo</span> ./yolov5 -d yolov5s.engine <span class=\"token punctuation\">..</span>/samples\n</code></pre>\n<p>然后你就得到了yolov5.engine文件，你需要将这个文件放到我的项目中，你可以创建一个<code>{yolov5-deepsort-tensorrt}/resources</code>文件夹放模型。</p>\n<pre><code class=\"prism language-shell\"><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">{<!-- --></span>yolov5-deepsort-tensorrt<span class=\"token punctuation\">}</span>\n<span class=\"token function\">mkdir</span> resources\n<span class=\"token function\">cp</span> <span class=\"token punctuation\">{<!-- --></span>tensorrtx<span class=\"token punctuation\">}</span>/yolov5/build/yolov5s.engine <span class=\"token punctuation\">{<!-- --></span>yolov5-deepsort-tensorrt<span class=\"token punctuation\">}</span>/resources\n</code></pre>\n<ol start=\"5\"><li>获取deepsort特征提取的engine文件</li></ol>\n<p>你可以从<a href=\"https://github.com/ZQPei/deep_sort_pytorch\">deepsort</a>中找到训练好的模型，你也可以直接下载下面的连接<a href=\"https://drive.google.com/drive/folders/1xhG0kRH1EX5B9_Iz8gQJb7UNnn_riXi6\">drive url</a>，下载ckpt.t7就好了。我也放在了百度云一份，如果你连接有麻烦，可以下载百度云上的模型。</p>\n<table><thead><tr><th align=\"left\">模型</th><th>链接</th></tr></thead><tbody><tr><td align=\"left\">google drive</td><td><a href=\"https://drive.google.com/drive/folders/1xhG0kRH1EX5B9_Iz8gQJb7UNnn_riXi6\">drive url</a></td></tr><tr><td align=\"left\">百度云</td><td><a href=\"https://pan.baidu.com/s/1lJegDjuYyfFoTnUvWfFOCw\">BaiduYun url</a> 密码:x5mj</td></tr></tbody></table>\n<ul><li>2021-9-16日补充<br/> 对于<code>deep_sort_pytorch</code>，该仓库进行了更新，使得直接下载后，将exportOnnx.py复制到该仓库代码路径下，运行会报错。<code>No module named 'fastreid'.</code>，你可以根据该仓库的第五步提示，安装fastreid，也可以下载之前版本的<code>deep_sort_pytorch</code>，地址：<br/> <code>deep_sort_pytorch</code>官方仓库旧版本地址:<a href=\"https://github.com/ZQPei/deep_sort_pytorch/tree/d9027f9d230633fdab23fba89516b67ac635e378\">https://github.com/ZQPei/deep_sort_pytorch/tree/d9027f9d230633fdab23fba89516b67ac635e378</a><br/> 点击download zip下载代码即可。<br/> 我的github备份地址:<a href=\"https://github.com/RichardoMrMu/deep_sort_pytorch\">https://github.com/RichardoMrMu/deep_sort_pytorch</a><br/> 对于我github上备份的代码，可以直接执行</li></ul>\n<pre><code class=\"prism language-shell\"><span class=\"token function\">git</span> clone https://github.com/RichardoMrMu/deep_sort_pytorch.git\n// 或者点击download <span class=\"token function\">zip</span>\n</code></pre>\n<p>补充完毕。</p>\n<pre><code class=\"prism language-shell\"><span class=\"token function\">git</span> clone https://github.com/RichardoMrMu/deepsort-tensorrt.git\n// 根据github的说明\n<span class=\"token function\">cp</span> <span class=\"token punctuation\">{<!-- --></span>deepsort-tensorrt<span class=\"token punctuation\">}</span>/exportOnnx.py <span class=\"token punctuation\">{<!-- --></span>deep_sort_pytorch<span class=\"token punctuation\">}</span>/\npython3 exportOnnx.py\n<span class=\"token function\">mv</span> <span class=\"token punctuation\">{<!-- --></span>deep_sort_pytorch<span class=\"token punctuation\">}</span>/deepsort.onnx <span class=\"token punctuation\">{<!-- --></span>deepsort-tensorrt<span class=\"token punctuation\">}</span>/resources\n<span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">{<!-- --></span>deepsort-tensorrt<span class=\"token punctuation\">}</span>\n<span class=\"token function\">mkdir</span> build\n<span class=\"token builtin class-name\">cd</span> build\ncmake <span class=\"token punctuation\">..</span>\n<span class=\"token function\">make</span> \n.onnx2engine <span class=\"token punctuation\">..</span>/resources/deepsort.onnx <span class=\"token punctuation\">..</span>/resources/deepsort.engine\n// <span class=\"token builtin class-name\">test</span>\n./demo <span class=\"token punctuation\">..</span>/resource/deepsort.engine <span class=\"token punctuation\">..</span>/resources/track.txt\n</code></pre>\n<p>经过以上的步骤，获得了yolov5.engine和deepsort.engine，将这两个文件放到相应的位置。即可编译运行该项目。<br/> 如果你遇到问题，请在github项目<a href=\"https://github.com/RichardoMrMu/yolov5-deepsort-tensorrt\">yolov5-deepsort-tensorrt</a>的issue中提问题，或者在这篇文章下评论。欢迎讨论。</p>\n<h1><a id=\"Other_Project_157\"></a>Other Project</h1>\n<ul><li> <p><a href=\"https://blog.csdn.net/weixin_42264234/article/details/121325030\">Jetson 系列——基于yolov5对是否吸烟的检测，部属于jetson xavier nx，使用tensorrt、c++和int8加速，可用于边缘计算</a></p> </li><li> <p><a href=\"https://blog.csdn.net/weixin_42264234/article/details/121323704\">Jetson 系列——基于yolov5对是否带口罩的检测，部属于jetson xavier nx，使用tensorrt、c++和int8加速，可用于边缘计算</a></p> </li><li> <p><a href=\"https://blog.csdn.net/weixin_42264234/article/details/121321454\">Jetson 系列——基于yolov5对反光衣和安全帽的检测，部属于jetson xavier nx，使用tensorrt、c++和int8加速，可用于边缘计算</a></p> </li><li> <p><a href=\"https://blog.csdn.net/weixin_42264234/article/details/121269662\">DL Project系列——基于gazecapture，mediapipe和TF.js，Flask的视线估计和脸部特征点估计</a></p> </li><li> <p><a href=\"https://blog.csdn.net/weixin_42264234/article/details/121241573\">Jetson 系列——基于yolov5对工地头盔的检测，部属于jetson xavier<br/> nx，使用tensorrt、c++和int8加速，可用于边缘计算</a></p> </li><li> <p><a href=\"https://blog.csdn.net/weixin_42264234/article/details/121214079\">Jetson 系列——基于yolov5对火源或者烟雾的检测，使用tensorrt、c++和int8加速<br/> </a></p> </li><li> <p><a href=\"https://blog.csdn.net/weixin_42264234/article/details/120790097\">竞赛——人脸情绪识别挑战赛，科大讯飞&amp;DataWhale<br/> 第三名</a></p> </li><li> <p><a href=\"https://blog.csdn.net/weixin_42264234/article/details/120254651\">Jetson 系列——基于deepsort的物体跟踪使用tensorrt和c++加速<br/> </a></p> </li><li> <p><a href=\"https://blog.csdn.net/weixin_42264234/article/details/120152117\">Jetson 系列——基于yolov5和deepsort的多目标头部识别，跟踪，使用tensorrt和c++加速<br/> </a></p> </li></ul>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 1, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-09-07 10:26:52", "summary": "项目简介：代码地址：地址地址欢迎或提出你的、改进建议。本项目使用实现室内人头部追踪和计数，使用实现，并用加速，在物体有左右的情况下，在上整个项目的推理时间在左右，即的速度。你可以体验一下版本的，使用原"}