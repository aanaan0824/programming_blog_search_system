{"blogid": "126308906", "writerAge": "码龄3年", "writerBlogNum": "54", "writerCollect": "134", "writerComment": "9", "writerFan": "17", "writerGrade": "3级", "writerIntegral": "789", "writerName": "浅墨入画，岁月入禅", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126308906.jpg", "writerRankTotal": "23069", "writerRankWeekly": "298459", "writerThumb": "28", "writerVisitNum": "39081", "blog_read_count": "226", "blog_time": "于 2022-09-03 16:29:43 发布", "blog_title": "多线程（一）——委托与多线程", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atelier-sulphurpool-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#_1\">委托的使用</a></li><li><ul><li><a href=\"#lamda_2\">委托的概念，简单匿名函数与lamda表达式使用</a></li><li><a href=\"#_62\">委托的定义与使用</a></li><li><a href=\"#_174\">多播委托</a></li><li><a href=\"#_230\">泛型委托</a></li><li><ul><li><a href=\"#_248\">匿名方法</a></li><li><a href=\"#Lamda_252\">Lamda表达式</a></li></ul>\n</li><li><a href=\"#_282\">举例</a></li></ul>\n</li><li><a href=\"#_300\">扩展方法</a></li><li><a href=\"#winform_339\">winform间窗体传值</a></li><li><ul><li><a href=\"#_340\">传统方法</a></li><li><a href=\"#_364\">使用委托</a></li><li><a href=\"#_395\">事件方式实现</a></li><li><a href=\"#_425\">发布订阅模式的实现</a></li></ul>\n</li><li><a href=\"#_494\">文件流复习</a></li><li><ul><li><a href=\"#_495\">选择文件并读取</a></li><li><a href=\"#_523\">写入文件</a></li></ul>\n</li><li><a href=\"#_550\">多线程</a></li><li><a href=\"#WinFrm_607\">WinFrm与多线程</a></li><li><ul><li><a href=\"#_622\">跨线程访问控件</a></li></ul>\n</li><li><a href=\"#_644\">进程与线程</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>委托的使用</h1>\n<h2><a id=\"lamda_2\"></a>委托的概念，简单匿名函数与lamda表达式使用</h2>\n<p>委托是一个类，它定义了方法的类型，使得可以将方法当作另一个方法的参数来进行传递，这种将方法动态地赋给参数的做法，可以避免在程序中大量使用语句，同时使得程序具有更好的可扩展性。<br/> 把一个方法作为参数传给另一个方法<br/> 委托内部由三部分：1，_methodPtr，是一个方法指针，指向当前委托指向的方法的内存地址；<br/> 2，_target，目标对象，如下</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">Program</span> p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Program</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndel <span class=\"token operator\">+=</span> p<span class=\"token punctuation\">.</span>AddStaticFunc1<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>中，方法指针指向的是AddStaticFunc1方法，目标对象就是p<br/> 3、委托链，就是一个委托数组，定义委托实例AddDel del = new AddDel(AddStaticFunc);的背后就是创建这三个部分，当指向的方法为静态方法的时候，_target为null。<br/> 执行的时候，从委托链的第0个索引到最后一个索引，因此多播委托返回的是最后一个方法的执行结果。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> 委托概念\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//声明一个委托指向一个函数</span>\n        <span class=\"token comment\">//委托指向的参数必须跟委托具有相同的签名</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DelSayHi</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//DelSayHi del = English;//new DelSayHi(English);</span>\n            <span class=\"token comment\">//del(\"张三\");</span>\n            <span class=\"token comment\">//test(\"张三\",Chinese);</span>\n            <span class=\"token comment\">//test(\"李四\", English);</span>\n            <span class=\"token comment\">/*DelSayHi del=delegate (string s)\n             {\n                 Console.WriteLine(\"中文\" + s);\n             };*/</span>\n            <span class=\"token class-name\">DelSayHi</span> del <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> s<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"中文\"</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//lamda表达式，匿名函数的简写形式 =&gt; goes to</span>\n            <span class=\"token function\">del</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DelSayHi</span> del<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">del</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Chinese</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"中文\"</span><span class=\"token operator\">+</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">English</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"英文\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_62\"></a>委托的定义与使用</h2>\n<p><strong>委托的定义与使用：</strong><br/> 代码1：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">ConsoleApp1</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//定义一个委托类型</span>\n    <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">AddDel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//定义一个委托的实例</span>\n            <span class=\"token class-name\">AddDel</span> del <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AddDel</span><span class=\"token punctuation\">(</span>AddStaticFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//触发实例</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> r <span class=\"token operator\">=</span> <span class=\"token function\">del</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//定义一个符合委托规范的方法</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">AddStaticFunc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> a<span class=\"token punctuation\">,</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> b<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>结果输出：7<br/> 代码2：<br/> <strong>匿名函数使用</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> 委托\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">DelProStr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">// ProStrSYH(names);</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token string\">\"abcdEFG\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"HIjklMn\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token function\">ProStr</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">,</span> <span class=\"token keyword\">delegate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">ToUpper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//匿名函数，用delegate代替，只执行一次用</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> names<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ProStr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> name<span class=\"token punctuation\">,</span><span class=\"token class-name\">DelProStr</span> del<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> name<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                name<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">del</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n       <span class=\"token comment\">/* public static string StrToUpper(string n)\n        {\n            return n.ToUpper();\n        }\n        public static string StrToLower(string n)\n        {\n            return n.ToLower();\n        }\n        public static string StrSYH(string name)\n        {\n            return \"\\\"\" + name + \"\\\"\";\n        }*/</span>\n        <span class=\"token comment\">/* public static void ProStrToUpper(string[] name)\n         {\n             for(int i = 0; i &lt; name.Length; i++)\n             {\n                 name[i] = name[i].ToUpper();\n             }\n         }\n         public static void ProStrToLower(string[] name)\n         {\n             for (int i = 0; i &lt; name.Length; i++)\n             {\n                 name[i] = name[i].ToLower();\n             }\n         }\n         public static void ProStrSYH(string[] name)\n         {\n             for (int i = 0; i &lt; name.Length; i++)\n             {\n                 name[i] = \"\\\"\" + name[i]+ \"\\\"\";\n             }\n         }*/</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>输出：<br/> ABCDEFG<br/> HIJKLMN</p>\n<h2><a id=\"_174\"></a>多播委托</h2>\n<p><strong>多播委托1：</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">Program</span> p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Program</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndel <span class=\"token operator\">+=</span> p<span class=\"token punctuation\">.</span>AddStaticFunc1<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">AddStaticFunc1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>执行结果：8<br/> 使用多播委托时，拿到的委托返回值是最后一个委托指向的方法的执行结果。<br/> <strong>多播委托2：</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> 委托\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//可以指向多个函数</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DelTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">DelTest</span> del <span class=\"token operator\">=</span> T1<span class=\"token punctuation\">;</span>\n            del <span class=\"token operator\">+=</span> T2<span class=\"token punctuation\">;</span>\n            del <span class=\"token operator\">-=</span> T1<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">del</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">T1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"T1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">T2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"T2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">T3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"T3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">T4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"T4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>执行结果：T2 T3 T4</p>\n<h2><a id=\"_230\"></a>泛型委托</h2>\n<p><strong>简单例子：</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> funcDemo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Func<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>AddStaticFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span></span> result<span class=\"token operator\">=</span><span class=\"token function\">funcDemo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">AddStaticFunc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> a<span class=\"token punctuation\">,</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>结果是3。<br/> Func原构造函数：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\">TResult</span> <span class=\"token generic-method\"><span class=\"token function\">Func</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">in</span> T1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> T2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> TResult<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T1</span> arg1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T2</span> arg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>可以有很多个int，但是要有一个out，最后一项是用来约束返回值的。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2c4c449b6add47f8805a18085f7c0cf7.png\"/></p>\n<h3><a id=\"_248\"></a>匿名方法</h3>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> funcDemo <span class=\"token operator\">=</span> <span class=\"token keyword\">delegate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> a<span class=\"token punctuation\">,</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"Lamda_252\"></a>Lamda表达式</h3>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> funcDemo <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> a<span class=\"token punctuation\">,</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> b<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n或\n<span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> funcDemo <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> a<span class=\"token punctuation\">,</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> b<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span>  a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>例子：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DelOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DelTwo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">DelThree</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//DelOne del = delegate () { };</span>\n    <span class=\"token class-name\">DelOne</span> del <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//DelTwo del2 = delegate(string name) { };</span>\n    <span class=\"token class-name\">DelTwo</span> del2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*DelThree del3 = (string name) =&gt;{\n        return name;\n    };*/</span>\n    <span class=\"token class-name\">DelThree</span> del3 <span class=\"token operator\">=</span> <span class=\"token keyword\">delegate</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">RemoveAll</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">=&gt;</span> n <span class=\"token operator\">&gt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//lamda表达式</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_282\"></a>举例</h2>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"9\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"32\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"7\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> temp <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">delegate</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">CompareTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"6\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> v <span class=\"token keyword\">in</span> temp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">ReadKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>where是扩展方法，内部会遍历list集合，把每个元素传到委托里执行，如果返回true，就把元素选择出来，最后把所有满足条件的元素一起返回</p>\n<h1><a id=\"_300\"></a>扩展方法</h1>\n<p>三要素：静态类、静态方法、this关键字<br/> 重新定义where方法<br/> <strong>定义：</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Class1</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">List<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> <span class=\"token generic-method\"><span class=\"token function\">myWhere</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> list<span class=\"token punctuation\">,</span><span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">&gt;</span></span> funcWhere<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> item <span class=\"token keyword\">in</span> list<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">funcWhere</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//调用委托，如果满足条件，加到集合中</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>调用：</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"9\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"32\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"7\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n匿名方法：\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> temp <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">myWhere</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">delegate</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">CompareTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"6\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlamda表达式\n <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> temp <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">myWhere</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=&gt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">CompareTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"6\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n方法泛型的约束可以省略，但是如果是显式的约束就必须满足约束。\n即<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">&gt;</span>可以省略不写，就像<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> demo <span class=\"token operator\">=</span> <span class=\"token string\">\"sss\"</span><span class=\"token punctuation\">;</span>一样，编译器会自动推断类型\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> v <span class=\"token keyword\">in</span> temp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">ReadKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h1><a id=\"winform_339\"></a>winform间窗体传值</h1>\n<h2><a id=\"_340\"></a>传统方法</h2>\n<p>form1和form2两个类之间传值，在from1定义一个form2的对象，并将form2中文本框设置为外部可访问，如下所示。<br/> form1:</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Form2</span> myForm2 <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">button2_Click</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    myForm2<span class=\"token punctuation\">.</span>textBox2<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textBox1<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>form2的designer中：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Windows<span class=\"token punctuation\">.</span>Forms<span class=\"token punctuation\">.</span>TextBox</span> textBox2<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>但是，对象内部的字段或者元素最好不要直接让外部访问，最好通过设置的方法控制一下。<br/> 例如，设置为私有后，在子窗体定义函数，父窗体中的子窗体对象调用函数：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SetText</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> txt<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    textBox2<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> txt<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nmyForm2<span class=\"token punctuation\">.</span><span class=\"token function\">SetText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textBox1<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"_364\"></a>使用委托</h2>\n<p>主窗体发送消息：点击按钮执行委托，给委托传递参数（当前文本框的内容），子窗体想接收就注册主窗体的委托，把子窗体的方法注册到委托中，执行时，委托执行每个子窗体的方法<br/> 主窗体发布，子窗体订阅<br/> 主窗体：点击按钮，执行委托</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Action<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span> AfterMsgSend <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Form2</span> myForm2 <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">button2_Click</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>AfterMsgSend <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\t <span class=\"token punctuation\">{<!-- --></span>\n\t     <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token punctuation\">}</span>\n\t <span class=\"token function\">AfterMsgSend</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textBox1<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Form1_Load</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t <span class=\"token class-name\">Form2</span> frm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Form2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t myForm2 <span class=\"token operator\">=</span> frm<span class=\"token punctuation\">;</span>\n\t <span class=\"token comment\">//关注主窗体消息的变化</span>\n\t AfterMsgSend<span class=\"token operator\">+=</span> frm<span class=\"token punctuation\">.</span>SetText<span class=\"token punctuation\">;</span>\n\t frm<span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>SetText是Form2的一个方法</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SetText</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> txt<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    textBox2<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> txt<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_395\"></a>事件方式实现</h2>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">//定义消息发布的事件</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">event</span> <span class=\"token class-name\">EventHandler</span> AfterMsgEvent<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//EventHandler 是最常见的事件委托类型，子窗体需要符合它的规范</span>\n事件触发：\n<span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">button2_Click</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">AfterMsgEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TextChangeEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        Text <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textBox1<span class=\"token punctuation\">.</span>Text\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nTextChangeEvent是一个类，继承事件，含有属性Text\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TextChangeEvent</span><span class=\"token punctuation\">:</span><span class=\"token type-list\"><span class=\"token class-name\">EventArgs</span></span> \n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Text <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//加载父窗体时的事件</span>\nAfterMsgEvent <span class=\"token operator\">+=</span> frm<span class=\"token punctuation\">.</span>AfterParentFrmChange<span class=\"token punctuation\">;</span>\nForm2中函数：\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AfterParentFrmChange</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//拿到父窗体传过来的值</span>\n    <span class=\"token class-name\">TextChangeEvent</span> text<span class=\"token operator\">=</span>e <span class=\"token keyword\">as</span> <span class=\"token class-name\">TextChangeEvent</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetText</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>**区别：**委托是类型，事件是委托类型的一个特殊实例，事件只能在类的内部触发执行，安全</p>\n<h2><a id=\"_425\"></a>发布订阅模式的实现</h2>\n<p>发布订阅模式<br/> 观察者模式<br/> 指的是一个<br/> 发布订阅：子窗体的个数和类型对主窗体没有影响<br/> 如果不使用委托，在主窗体点击按钮，遍历集合，集合存放所有关心此主窗体消息变化的所有子窗体，这个集合相当于注册委托或事件方法<br/> <strong>定义一个接口类型：</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Interface1</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SetText</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>子窗体：</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ChildFrm</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Form</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Interface1</span></span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//继承基类，实现接口</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">ChildFrm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">InitializeComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SetText</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> text<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//实现接口的方法</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textBox1<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>父窗体：</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ParentFrm</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Form</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">List<span class=\"token punctuation\">&lt;</span>Interface1<span class=\"token punctuation\">&gt;</span></span> ChildFrmList <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">ParentFrm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">InitializeComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">button1_Click</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//遍历所有关注主窗体消息变化的子窗体集合</span>\n        <span class=\"token comment\">//调用集合中每个元素的方法</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ChildFrmList<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//减少括号的层次，比先判断不是空再循环要好一些</span>\n        <span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> item <span class=\"token keyword\">in</span> ChildFrmList<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            item<span class=\"token punctuation\">.</span><span class=\"token function\">SetText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textBox1<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ParentFrm_Load</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">ChildFrm</span> frm<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ChildFrm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ChildFrmList<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Interface1<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ChildFrmList<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>frm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        frm<span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>如果再多加一个<strong>管理窗体</strong>，加载时的执行代码为：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">//弹出主窗体</span>\n<span class=\"token class-name\">ParentFrm</span> parentForm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ParentFrm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nparentForm<span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ChildFrm</span> childForm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ChildFrm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nparentForm<span class=\"token punctuation\">.</span>ChildFrmList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Interface1<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nparentForm<span class=\"token punctuation\">.</span>ChildFrmList<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>childForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nchildForm<span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这样，就实现了主窗体和子窗体的分离解耦。</p>\n<h1><a id=\"_494\"></a>文件流复习</h1>\n<h2><a id=\"_495\"></a>选择文件并读取</h2>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OpenFileDialog</span> ofd<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">OpenFileDialog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ofd<span class=\"token punctuation\">.</span><span class=\"token function\">ShowDialog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> DialogResult<span class=\"token punctuation\">.</span>OK<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//选中文件后，读取文件</span>\n    <span class=\"token comment\">//1、</span>\n    <span class=\"token comment\">//string x=File.ReadAllText(ofd.FileName, Encoding.Default);</span>\n    <span class=\"token comment\">//直接写，如果文件太大会卡死</span>\n    <span class=\"token comment\">//2、使用文件流</span>\n    <span class=\"token keyword\">using</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FileStream</span> fs<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FileStream</span><span class=\"token punctuation\">(</span>ofd<span class=\"token punctuation\">.</span>FileName<span class=\"token punctuation\">,</span> FileMode<span class=\"token punctuation\">.</span>Open<span class=\"token punctuation\">,</span> FileAccess<span class=\"token punctuation\">.</span>Read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        textBox1<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> ofd<span class=\"token punctuation\">.</span>FileName<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">using</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StreamReader</span> sr<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StreamReader</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sr<span class=\"token punctuation\">.</span>EndOfStream<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> line<span class=\"token operator\">=</span>sr<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textBox2<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">+=</span> line<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_523\"></a>写入文件</h2>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SaveFileDialog</span> save<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SaveFileDialog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>save<span class=\"token punctuation\">.</span><span class=\"token function\">ShowDialog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> DialogResult<span class=\"token punctuation\">.</span>OK<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//1、</span>\n    <span class=\"token comment\">//File.WriteAllText(save.FileName,textBox2.Text,Encoding.Default);</span>\n    <span class=\"token comment\">//2、</span>\n    <span class=\"token comment\">/*using(StreamWriter sw=new StreamWriter(save.FileName,false,Encoding.Default,1024*1024))\n    {//第二个参数是是否追加的意思，最后一个参数为缓冲区大小\n        sw.Write(textBox2.Text);\n        sw.Flush();//一举写入\n    }*/</span>\n    <span class=\"token comment\">//3、文件流写入</span>\n    <span class=\"token keyword\">using</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FileStream</span> fs<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FileStream</span><span class=\"token punctuation\">(</span>save<span class=\"token punctuation\">.</span>FileName<span class=\"token punctuation\">,</span> FileMode<span class=\"token punctuation\">.</span>OpenOrCreate<span class=\"token punctuation\">,</span> FileAccess<span class=\"token punctuation\">.</span>ReadWrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> x<span class=\"token operator\">=</span>textBox2<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>data<span class=\"token operator\">=</span>Encoding<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//不读取换行，一行行的读写，因为x没有\\r</span>\n        <span class=\"token comment\">//fs.Write(data,0,data.Length);</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_550\"></a>多线程</h1>\n<p>一个线程就是一个进程里的代码执行流，每个线程都要指向一个方法体，方法执行完成之后，线程就释放。<br/> 例如：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Thread</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">delegate</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n相当于\n<span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Thread</span><span class=\"token punctuation\">(</span>ThreadMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ThreadMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>进程执行是调用Start()方法，线程默认是前台线程。尽量设置为true</p>\n<pre><code class=\"prism language-csharp\">thread<span class=\"token punctuation\">.</span>IsBackground <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nthread<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>进程退出的标志：所有的前台线程都结束之后，后台线程不会阻塞进程的退出。<br/> 程序执行时，Main函数是程序的入口，CLR一开始就默认创建一个主线程，主线程也是一个前台线程。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Thread</span><span class=\"token punctuation\">(</span>ThreadMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nthread<span class=\"token punctuation\">.</span>IsBackground <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nthread<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"from 主线程-----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">ReadKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>执行结果：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a1b42298015c4998a4b0c1e9e0a1d5ce.png\"/><br/> 主线程与创建的线程不停的执行，类似于俩个线程同时在执行。<br/> 线程的其它属性：1、 IsAlive表示当前线程的状态，2、ManagedThreadId表示线程id<br/> 如下：</p>\n<pre><code class=\"prism language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>thread<span class=\"token punctuation\">.</span>ManagedThreadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span>CurrentThread<span class=\"token punctuation\">.</span>ManagedThreadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n</code></pre>\n<p>3、优先级<br/> 设置为最高都是建议操作系统设置为最高，不一定为最高；线程执行是告诉操作系统可以执行，自己准备好了。</p>\n<pre><code class=\"prism language-csharp\">thread<span class=\"token punctuation\">.</span>Priority <span class=\"token operator\">=</span> ThreadPriority<span class=\"token punctuation\">.</span>Highest<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>4、挂起：thread.Suspend();<br/> 5、继续挂起的线程：thread.Resume();<br/> 6、终止Abort，不得已才能用，直接终结：thread.Abort();<br/> 7、等待thread线程执行完成：thread.Join();，执行代码的线程等待thread执行完成，参数为超时时间。<br/> 例如：thread.Join(5000);后的代码执行结果为：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20bab232b98d4addab27f4c2db3da404.png\"/></p>\n<h1><a id=\"WinFrm_607\"></a>WinFrm与多线程</h1>\n<p>创建一个Windows窗体，设置为控制台输出<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\028832d690bc401b8ddf3bdd43d66a77.png\"/><br/> 如果不使用线程，显示窗体线程就是前台线程，卡死；<br/> 如果设置了线程，使用lamda表达式输出内容，设置为前台线程，既可以控制台输出，主窗体也不卡死，关掉窗体，线程关闭。<br/> 如果不设置线程为前台线程，那么关闭主窗体，控制台仍然执行。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n       Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nthread<span class=\"token punctuation\">.</span>IsBackground <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nthread<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"_622\"></a>跨线程访问控件</h2>\n<p>线程访问主线程（主窗体）控件，设置非法跨线程为false；但是这个属性只是演示，真正项目不可以使用。</p>\n<pre><code class=\"prism language-csharp\">Control<span class=\"token punctuation\">.</span>CheckForIllegalCrossThreadCalls <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>正确访问方法：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>button1<span class=\"token punctuation\">.</span>InvokeRequired<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//检查是否为别的线程创建的子控件，为true</span>\n        <span class=\"token comment\">//找到创建控件的线程，执行方法</span>\n        button1<span class=\"token punctuation\">.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Action<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span>   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n       Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nthread<span class=\"token punctuation\">.</span>IsBackground <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nthread<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h1><a id=\"_644\"></a>进程与线程</h1>\n<p>操作系统分配的资源最小单位是进程，进程与进程之间互不影响，可以理解为一个程序的基本边界。<br/> 进程是Windows系统中的一个基本概念，它包含着一个运行程序所需要的资源。进程之间是相对独立的，一个进程无法直接访问另 一个进程的数据（除非利用分布式计算方式），一个进程运行的失败也不会影响其他进程的运行，Windows系统就是利用进程把工作划分为多个独立的区域 的。<strong>进程可以理解为一个程序的基本边界。</strong><br/> CPU的其中一个核心，同一时间只能执行一个指令。<br/> 一个线程就是一个进程里面的代码的执行流。每个线程都要指向一个方法体，方法执行完成后线程就释放。<br/> <strong>输出所有进程：</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> allPro <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span><span class=\"token function\">GetProcesses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> pro <span class=\"token keyword\">in</span> allPro<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>pro<span class=\"token punctuation\">.</span>ProcessName <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">+</span> pro<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>打开某个进程：</strong></p>\n<pre><code class=\"prism language-csharp\">Process<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"notepad\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"aaa.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>第二个参数是文件名，如果打开浏览器，是网站地址</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-03 16:29:43", "summary": "目录委托的使用委托的概念，简单匿名函数与表达式使用委托的定义与使用多播委托泛型委托匿名方法表达式举例扩展方法间窗体传值传统方法使用委托事件方式实现发布订阅模式的实现文件流复习选择文件并读取写入文件多线"}