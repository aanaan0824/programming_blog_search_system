{"blogid": "123663120", "writerAge": "码龄3年", "writerBlogNum": "33", "writerCollect": "1506", "writerComment": "1529", "writerFan": "4255", "writerGrade": "6级", "writerIntegral": "4924", "writerName": "寄一片海给你", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123663120.jpg", "writerRankTotal": "14747", "writerRankWeekly": "42965", "writerThumb": "1619", "writerVisitNum": "82112", "blog_read_count": "1633", "blog_time": "于 2022-03-22 19:05:23 发布", "blog_title": "C++每日一练——组队竞赛&&两数相加", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atelier-sulphurpool-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_2\">🍎组队竞赛</a></li><li><ul><li><a href=\"#_3\">🍉题目要求</a></li><li><a href=\"#_9\">🍉思路分析</a></li><li><a href=\"#C_16\">🍉C++代码</a></li></ul>\n</li><li><a href=\"#_56\">🍎删除公共字符串</a></li><li><ul><li><a href=\"#_57\">🍉题目要求</a></li><li><a href=\"#_60\">🍉思路分析</a></li><li><a href=\"#C_64\">🍉C++代码</a></li></ul>\n</li><li><a href=\"#_98\">🍑链表的两数相加</a></li><li><a href=\"#_165\">🍑字符串相加</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_2\"></a>🍎组队竞赛</h1>\n<h2><a id=\"_3\"></a>🍉题目要求</h2>\n<blockquote>\n<p><font size=\"3\">每组有3个队员，在3*n个选手，n组队伍中找到每组队伍的水平值（<code>队员中第二高的水平值</code>），然后求出所有队伍水平值总和的最大值<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6fa13d9b3fd64b9b97dfd01cccdf335c.png\"/><br/> 第一行输入：队伍的个数n<br/> 第二行输入：3 * n个选手的水平值<br/> 输出：水平值总和可能超过int所以设为long<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\85772cb8f00a44aa819e1ae4c4b2dea0.png\"/></font></p>\n</blockquote>\n<h2><a id=\"_9\"></a>🍉思路分析</h2>\n<p>要求水平值总和的最大值，只需要保证<code>每支队伍的水平值最大</code>，那么和就最大。</p>\n<blockquote>\n<p><font color=\"#00BFFF\" size=\"3\">如何使每支队伍的水平值最大呢？</font></p>\n<p><font color=\"#00BFFF\" size=\"3\">先对3 * n个选手<code>排升序</code>，然后从大到小找到每支队伍最大的水平值相加，得到想要的输出结果，从3*n-2开始每隔一个数就是每组的最大水平值</font></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d22cecb1b24c4bc1b29a63b59211196a.png\"/></p>\n<h2><a id=\"C_16\"></a>🍉C++代码</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm&gt;</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\t\n\t<span class=\"token comment\">//n是队伍个数，tmp是每个队员的水平值</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//循环输入</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cin <span class=\"token operator\">&gt;&gt;</span> n<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> v<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//开3*n个空间</span>\n\t\tv<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcin <span class=\"token operator\">&gt;&gt;</span> tmp<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">//将3*n个数尾插到vector中</span>\n\t\t\tv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//迭代器区间对vector排序</span>\n\t\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">long</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">-</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">--</span>n<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tsum <span class=\"token operator\">+</span><span class=\"token operator\">=</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> sum <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>结果测试和上面的两个用例吻合<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\76ebae95b90c495293a1c4eef68c808f.png\"/></p>\n<h1><a id=\"_56\"></a>🍎删除公共字符串</h1>\n<h2><a id=\"_57\"></a>🍉题目要求</h2>\n<blockquote>\n<p>在字符串1中删除在字符串2中出现的所有字符<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\50c931102ec4454c9d922d3719a3ed21.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\27be4be64a4e4cb3be881abc826b256a.png\"/></p>\n</blockquote>\n<h2><a id=\"_60\"></a>🍉思路分析</h2>\n<blockquote>\n<p><font color=\"ofcsdf\" size=\"3\">我们可以定义一个数组，在数组中标记字符串2中出现过的所有字符，实现数组与字符串2之间的映射，然后在依次判断字符串1的字符是否出现在数组中，最后得到新的字符</font></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bac459484e144f55a2b050798ca0c87a.png\"/></p>\n<h2><a id=\"C_64\"></a>🍉C++代码</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">255</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\t\n\t<span class=\"token comment\">//s1，s2为输入的两个字符对象，s3为输出的字符对象</span>\n\tstring s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">,</span> s3<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//记录s2中出现的所有字符</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tarr<span class=\"token punctuation\">[</span>s2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//将s1中没有在s2中出现过的字符尾插到s3中</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>s1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\ts3 <span class=\"token operator\">+</span><span class=\"token operator\">=</span> s1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> s3 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>测试结果吻合<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d36b10d4a8284812a21cfb9f1b906695.png\"/></p>\n<h1><a id=\"_98\"></a>🍑链表的两数相加</h1>\n<p>LeetCode第二题</p>\n<blockquote>\n<p><font color=\"#37cfd8\" size=\"3\">链表是逆序的，从头节点到尾节点依次是个位,十位，百位…，而我们要的就是从个位开始加逐步加到最高位。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\15d5aa7e9ce545eca28c278aacdfeed4.png\"/><br/> 所以只需要依次取两个链表对应的个位，十位，百位…相加，然后尾插到新的链表中中即可，在这过程中需要考虑进位与两个链表的节点个数<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7fd13025fd5f428b8ab301ec47c755dc.png\"/></font></p>\n</blockquote>\n<p>题目已经给出了节点的构造函数<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\198423dc32fe445fb0026ff628800b68.png\"/></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> l1<span class=\"token punctuation\">,</span> ListNode<span class=\"token operator\">*</span> l2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        ListNode<span class=\"token operator\">*</span> begin1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>begin2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//头尾指针</span>\n        ListNode<span class=\"token operator\">*</span> head <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>tail <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//next为进位，sum为两个位数的和</span>\n        <span class=\"token keyword\">int</span> next <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> val1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> val2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//通过begin1和begin2分别遍历两个链表</span>\n        <span class=\"token comment\">//只有都走到nullptr循环才终止</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>begin1 <span class=\"token operator\">||</span> begin2<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\t\n        \t<span class=\"token comment\">//val1和val2分别表示两个链表的节点的val，都初始化为0</span>\n            val1 <span class=\"token operator\">=</span> val2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//只有不为空才取节点的val</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>begin1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                val1 <span class=\"token operator\">=</span> begin1<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>val<span class=\"token punctuation\">;</span>\n                begin1 <span class=\"token operator\">=</span> begin1<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>begin2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                val2 <span class=\"token operator\">=</span> begin2<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>val<span class=\"token punctuation\">;</span>\n                begin2 <span class=\"token operator\">=</span> begin2<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">//将两个val和进位相加</span>\n            sum <span class=\"token operator\">=</span> val1 <span class=\"token operator\">+</span> val2 <span class=\"token operator\">+</span> next<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//进位</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">&gt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                sum <span class=\"token operator\">-</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n                next <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n                next <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                head <span class=\"token operator\">=</span> tail <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                tail<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                tail <span class=\"token operator\">=</span> tail<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//最后判断是否需要进位，比如9+1，循环结束后需要把进位加上</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            tail<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            tail <span class=\"token operator\">=</span> tail<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h1><a id=\"_165\"></a>🍑字符串相加</h1>\n<p>Leetc第415题</p>\n<blockquote>\n<p><font size=\"3\">字符串的两数相加很有意义可以处理大数之间的求和，不存在溢出的情况。<br/> 和上面链表的两数相加类似，不过这里我们需要将从尾开始相加，然后将个位数、十位数…依次<code>尾插</code>到新的string中，然后需要<code>逆序string</code><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7847a185444f48d990e32b57d37c0faf.png\"/></font></p>\n</blockquote>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    string <span class=\"token function\">addStrings</span><span class=\"token punctuation\">(</span>string num1<span class=\"token punctuation\">,</span> string num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    \t<span class=\"token comment\">//restr用来存放和</span>\n        string retstr<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//从字符串的最后一个有效字符相加，也就是个位数</span>\n        <span class=\"token keyword\">int</span> end1 <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end2 <span class=\"token operator\">=</span> num2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> next <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//进位值</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>end1 <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> end2 <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">int</span> x1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> x2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end1 <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\t\n            \t<span class=\"token comment\">//'5'-'0'=5</span>\n                x1 <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">[</span>end1<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">--</span>end1<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end2 <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                x2 <span class=\"token operator\">=</span> num2<span class=\"token punctuation\">[</span>end2<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">--</span>end2<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> x1 <span class=\"token operator\">+</span> x2 <span class=\"token operator\">+</span> next<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">&gt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                next <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                val <span class=\"token operator\">-</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n                next <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            retstr <span class=\"token operator\">+</span><span class=\"token operator\">=</span> val <span class=\"token operator\">+</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//循环结束之后判断是否还有进位，比如1+9</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            retstr <span class=\"token operator\">+</span><span class=\"token operator\">=</span> next <span class=\"token operator\">+</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>retstr<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> retstr<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> retstr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/b54be650ca4a438bb41cbee6f0765033.gif#pic_center\"/></p>\n<blockquote>\n<p><strong><font color=\"#FF00FF\" size=\"4\">以上就是今天的题目了，希望我的文章对你有所帮助，欢迎👍点赞 ，📝评论，🌟关注，⭐️收藏</font></strong></p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-22 19:05:23", "summary": "文章目录组队竞赛题目要求思路分析代码删除公共字符串题目要求思路分析代码链表的两数相加字符串相加组队竞赛题目要求每组有个队员，在个选手，组队伍中找到每组队伍的水平值队员中第二高的水平值，然后求出所有队伍"}