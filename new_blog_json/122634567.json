{"blogid": "122634567", "writerAge": "码龄2年", "writerBlogNum": "88", "writerCollect": "566", "writerComment": "15", "writerFan": "4099", "writerGrade": "4级", "writerIntegral": "1077", "writerName": "会思想的苇草i", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122634567.jpg", "writerRankTotal": "16212", "writerRankWeekly": "2656", "writerThumb": "131", "writerVisitNum": "72585", "blog_read_count": "958", "blog_time": "已于 2022-01-25 11:48:25 修改", "blog_title": "Node.js与前端开发实战", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>Node.js与前端开发实战</h3>\n<ul><li><a href=\"#Nodejs_9\">一、Node.js的应用场景</a></li><li><ul><li><a href=\"#1_10\">1.前端工程化</a></li><li><a href=\"#2Web_18\">2.Web服务端应用</a></li><li><a href=\"#3Electron_26\">3.Electron跨端桌面应用</a></li><li><a href=\"#4Nodejs_32\">4.Node.js在字节</a></li></ul>\n</li><li><a href=\"#Nodejs_39\">二、Node.js运行时结构</a></li><li><a href=\"#_Http_Server_63\">三、编写 Http Server</a></li><li><a href=\"#_104\">四、延伸话题</a></li></ul>\n</div>\n<p></p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"Nodejs_9\"></a>一、Node.js的应用场景</h1>\n<h2><a id=\"1_10\"></a>1.前端工程化</h2>\n<ul><li>Bundle：webpack, vite, esbuild, parcel</li><li>Uglify：uglifyjs</li><li>Transpile：bablejs, typescript</li><li>其他语言加入竞争：esbuild（go）, parcel（rust）, prisma</li><li>现状：难以替代</li></ul>\n<h2><a id=\"2Web_18\"></a>2.Web服务端应用</h2>\n<ul><li>学习曲线平缓，开发效率较高</li><li>运行效率接近常见的编译语言</li><li>社区生态丰富及工具链成熟(npm, V8 inspector)</li><li>与前端结合的场景会有优势(SSR)</li><li>现状：竞争激烈，Node.js有自己独特的优势</li></ul>\n<h2><a id=\"3Electron_26\"></a>3.Electron跨端桌面应用</h2>\n<ul><li>商业应用：vscode, slack, discord, zoom</li><li>大型公司内的效率工具</li><li>现状：大部分场景在选型时，都值得考虑</li></ul>\n<h2><a id=\"4Nodejs_32\"></a>4.Node.js在字节</h2>\n<ul><li>BFF应用、SSR应用，举例：Modern.js</li><li>服务端应用，例如：头条搜索，西瓜视频，懂车帝</li><li>Electron应用：飞连，飞书</li><li>每年新增1000+ Node.js应用</li></ul>\n<hr/>\n<h1><a id=\"Nodejs_39\"></a>二、Node.js运行时结构</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\53ac4a87d3c045af9fcf8c9dc9ad0ff7.png\"/><br/> <strong>结构：</strong></p>\n<ul><li>V8：JavaScript Runtime，诊断调试工具(inspector)</li><li>libuv：eventloop(事件循环)， syscall (系统调用)</li><li>举例：用node-fetch发起请求时…</li></ul>\n<p><strong>特点：</strong></p>\n<ol><li> <p>异步I/O<br/> 当Node.js执行I/O操作时，会在响应返回后恢复操作，而不是阻塞线程并占用额外内存等待。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1360487bef044facb060523108b05761.png\"/></p> </li><li> <p>单线程</p> </li></ol>\n<ul><li>JS 单线程 \n  <ul><li>实际：JS线程+uv线程池+V8任务线程池+V8 Inspector线程</li></ul> </li><li>优点：不用考虑多线程状态同步问题，也就不需要锁；同时还能比较高效地利用系统资源</li><li>缺点：阻塞会产生更多负面影响 \n  <ul><li>解决办法：多进程或多线程</li></ul> </li></ul>\n<ol start=\"3\"><li>跨平台</li></ol>\n<ul><li>跨平台(大部分功能、api)</li><li>Node.js跨平台+JS无需编译环境(+ Web 跨平台+诊断工具跨平台) \n  <ul><li>=开发成本低(大部分场景无需担心跨平台问题)，整体学习成本低</li></ul> </li></ul>\n<hr/>\n<h1><a id=\"_Http_Server_63\"></a>三、编写 Http Server</h1>\n<p><strong>安装Node.js</strong></p>\n<ul><li>Mac,Linux推荐使用nvm。多版本管理。</li><li>Windows推荐 nvm4w 或是官方安装包。</li><li>安装慢，安装失败的情况，设置安装源<br/> NVM_NODEJS_ORG_MRROR=https://npmmirror.com/mirrors/node nvm install 16</li></ul>\n<p><strong>Http Server</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f4fb3d960c7349db847f34811b985c5e.png\"/><br/> <strong>静态文件</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fcecb67af53e4deb8d2ad34148ee0b1e.png\"/></p>\n<p><strong>React SSR</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\532b88cb75c74c0182c7459f7ed7a39a.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3bf0e71edd324f01850c6cf512295a63.png\"/></p>\n<p><strong>Debug</strong><br/> V8 Inspector：开箱即用、特性丰富强大、与前端开发一致、跨平台</p>\n<ul><li>node --inspect</li><li>open <a href=\"http://localhost:9229/json\">http://localhost:9229/json</a></li></ul>\n<p>场景：</p>\n<ul><li>查看console.log内容</li><li>breakpoint</li><li>高CPU、死循环：cpuprofile</li><li>高内存占用：heapsnapshot</li><li>性能分析</li></ul>\n<p><strong>部署</strong></p>\n<p>部署要解决的问题：</p>\n<ul><li>守护进程：当进程退出时，重新拉起</li><li>多进程：cluster便捷地利用多进程</li><li>记录进程状态，用于诊断</li></ul>\n<p>容器环境：</p>\n<ul><li>通常有健康检查的手段，只需考虑多核 cpu 利用率即可</li></ul>\n<hr/>\n<h1><a id=\"_104\"></a>四、延伸话题</h1>\n<ul><li>Node.js贡献代码</li><li>编译Node.js</li><li>诊断/追踪</li><li>WASM,NAPI</li></ul>\n<hr color=\"#000000\" size='1\"'/>\n<p><a href=\"https://nodejs.org/zh-cn/\">Node.js下载</a></p>\n<p><a href=\"https://www.runoob.com/nodejs/nodejs-tutorial.html\">Node.js 教程-菜鸟教程</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-01-25 11:48:25", "summary": "与前端开发实战一、的应用场景前端工程化服务端应用跨端桌面应用在字节二、运行时结构三、编写四、延伸话题一、的应用场景前端工程化：：：其他语言加入竞争：现状：难以替代服务端应用学习曲线平缓，开发效率较高运"}