{"blogid": "123649755", "writerAge": "码龄15年", "writerBlogNum": "128", "writerCollect": "246", "writerComment": "24", "writerFan": "212", "writerGrade": "4级", "writerIntegral": "1327", "writerName": "有技巧搬砖", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123649755.jpg", "writerRankTotal": "31085", "writerRankWeekly": "57419", "writerThumb": "33", "writerVisitNum": "91573", "blog_read_count": "882", "blog_time": "于 2022-03-22 00:06:02 发布", "blog_title": "WPF Binding绑定模式", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>Binding是WPF 应用程序中的一种机制，它为应用程序提供了一种简单易用的方式来显示数据并与之交互。它允许数据在 UI 和业务模型之间流动。绑定完成后对业务模型中的数据所做的任何修改都会自动反映到 UI，反之亦然。</p>\n<p>绑定可以是单向的或双向的。数据绑定的源可以是普通的 .NET 属性或 Dependency 属性，但目标属性必须是Dependency属性。</p>\n<p>为了使绑定正常工作，属性的双方都必须提供通知中的更改，这将告诉绑定更新目标值。在普通的 .NET 属性中，可以通过使用INotifyPorpertyChanged接口来实现。而对于Dependency属性，它是由属性元数据的PropertyChanged回调完成的。</p>\n<p>数据绑定模式:</p>\n<table><tbody><tr><td>模式</td><td>描述</td></tr><tr><td>OneWay</td><td>源 → 目标</td></tr><tr><td>TwoWay</td><td>源 ←→ 目标</td></tr><tr><td>OneWayToSource</td><td>源 ← 目标</td></tr><tr><td>OneTime</td><td>源 → 目标 (仅一次)</td></tr></tbody></table>\n<p>这可以通过 WPF 提供的不同类型的数据绑定表达式来实现。</p>\n<p>下面给出了数据绑定表达式的类型。</p>\n<ul><li>数据上下文绑定</li><li>相对源绑定</li><li>集合绑定的当前项目</li></ul>\n<p><strong>数据上下文绑定</strong></p>\n<p>DataContext 是一个 Dependency 属性，它是默认的绑定源。数据上下文沿逻辑树继承。因此，如果您设置一个数据上下文来控制逻辑树中的所有子元素，它也将引用相同的数据上下文，除非并且直到明确指定另一个源。</p>\n<ul><li>创建一个类Book，如下：</li></ul>\n<pre><code class=\"language-cs\">public class Book \n{  \n    public string Name \n    {  \n        get;  \n        set;  \n    }  \n    public string Author \n    {  \n        get;  \n        set;  \n    }  \n}  \n</code></pre>\n<ul><li>添加一个 XAML 文件 DataContextBinding.xaml 并放置四个 Textblock，如下所示。</li></ul>\n<pre><code class=\"language-XML\">&lt;Grid VerticalAlignment=\"Center\"&gt;  \n    &lt;Grid.RowDefinitions&gt;  \n        &lt;RowDefinition Height=\"40\" /&gt;  \n        &lt;RowDefinition Height=\"40\" /&gt;  \n    &lt;/Grid.RowDefinitions&gt;  \n    &lt;Grid.ColumnDefinitions&gt;  \n        &lt;ColumnDefinition Width=\"Auto\" /&gt;  \n        &lt;ColumnDefinition Width=\"Auto\" /&gt;  \n    &lt;/Grid.ColumnDefinitions&gt;  \n    &lt;TextBlock Text=\"Book Name:\" FontWeight=\"Bold\" /&gt;  \n    &lt;TextBlock Grid.Column=\"1\" /&gt;  \n    &lt;TextBlock Text=\"Author:\" FontWeight=\"Bold\" Grid.Row=\"1\" /&gt;  \n    &lt;TextBlock Grid.Row=\"1\" Grid.Column=\"1\" /&gt;  \n&lt;/Grid&gt;  </code></pre>\n<p>现在，让我们看看如何使用这个 DataContext 属性来显示数据。</p>\n<p>它有两种使用方式，如下所示。</p>\n<ol><li><em>使用 {Binding} 表达式</em><br/><br/> 用于直接绑定 DataContext。<br/> 创建类 Book 的实例，初始化其属性并将类的 Name 属性分配给 Window 的 DataContext 属性。</li></ol>\n<pre><code class=\"language-cs\">public partial class DataContextBinding: Window \n{  \n    public DataContextBinding() \n    {  \n        InitializeComponent();  \n        //Create the instance  \n        Book book = new Book();  \n        //initialize the properties  \n        book.Name = \"Computer Networking\";  \n        //Assign the Property as DataContext  \n        this.DataContext = book.Name;  \n    }  \n}  \n</code></pre>\n<p>由于 Datacontext 是沿逻辑树和数据簿继承的，因此 name 绑定到 Control Window。Window 的所有子元素也将引用同一个对象（book.Name）。</p>\n<p>要显示数据，请将 DataContext 与 Textblock 绑定，如下所示。</p>\n<pre><code class=\"language-XML\">&lt;TextBlock Text=\"Book Name:\" FontWeight=\"Bold\"/&gt;  \n&lt;TextBlock Text=\"{Binding}\" Grid.Column=\"1\" /&gt;   </code></pre>\n<ol><li>输出</li></ol>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\2863392f1270cae251c972d1b1cfa3ca.png\"/></p>\n<ol><li><em>使用 {Binding Property} 表达式</em><br/><br/> 绑定 Datacontext 的属性。<br/> 创建一个 Book 类的实例，初始化它的属性并将类（book）的实例分配给 Window 的 DataContext 属性。</li></ol>\n<pre><code class=\"language-cs\"> Book book = new Book();  \n//initialize the properties  \nbook.Name = \"Computer Networking\";  \nbook.Author = \"James F. Kurose\";  \n//Assign the instance as DataContext  \nthis.DataContext = book;  \n</code></pre>\n<p>现在，让我们看看输出。</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\40adb2c45dc890c9505b2d9266a4f7a8.png\"/></p>\n<p>由于绑定表达式 {Binding} 用于绑定 Book 类型的 DataContext 对象，因此在其上调用 ToString() 方法并将数据显示为字符串。为了以正确的格式显示数据，我们必须绑定属性带有文本块的数据对象，如下图所示：</p>\n<pre><code class=\"language-XML\">&lt;TextBlock Text=\"Book Name:\" FontWeight=\"Bold\"/&gt;  \n&lt;TextBlock Text=\"{Binding Name}\" Grid.Column=\"1\" /&gt;  \n&lt;TextBlock Text=\"Author:\" FontWeight=\"Bold\" Grid.Row=\"1\" /&gt;  \n&lt;TextBlock Text=\"{Binding Author}\" Grid.Row=\"1\" Grid.Column=\"1\"/&gt;</code></pre>\n<p>绑定表达式{Binding Name}用于绑定DataContext绑定的Name属性。</p>\n<p>输出</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\8980192310b389f0ccae2e51e170ec87.png\"/></p>\n<p><strong>RelativeSource Binding</strong></p>\n<p>RelativeSource 是一个属性，它设置绑定源与绑定目标的相对关系。当您必须将元素的一个属性绑定到同一元素的另一个属性时，主要使用此扩展。</p>\n<p>有四种类型的RelativeSource，如下所示。</p>\n<ol><li>Self</li><li>FindAncestor</li><li>TemplatedParent</li><li>PreviousData</li></ol>\n<p>让我们一一详细探讨。</p>\n<p><strong>Self</strong></p>\n<p>Self用于一个场景，当Binding源和绑定目标相同时。对象的一个​​属性与同一对象的另一个属性绑定。</p>\n<p>例如 - 让我们采用具有相同高度和宽度的椭圆。</p>\n<p>在 XAML 文件中添加下面给出的代码。宽度属性与高度属性相对绑定。</p>\n<pre><code class=\"language-XML\">&lt;Grid&gt;  \n    &lt;Ellipse Fill=\"Black\" Height=\"100\" Width=\"{Binding RelativeSource={RelativeSource Self},Path=Height}\"&gt;  \n    &lt;/Ellipse&gt;  \n&lt;/Grid&gt;   </code></pre>\n<p>输出</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\32011c8a62f203867d2ce38ac13c2861.png\"/></p>\n<p>如果 Ellipse 的高度发生变化，宽度也会相对变化。</p>\n<p><strong>FindAncestor</strong></p>\n<p>顾名思义，这在绑定源是绑定目标的祖先（父母）之一时使用。使用 FindAncestor 扩展，您可以找到任何级别的祖先。</p>\n<p>让我们举个例子来更清楚地理解它。</p>\n<p>创建 XAML，它表示下面给出的元素的逻辑树。</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\3d5024a8a8e92132196e6da943fe9a81.png\"/></p>\n<pre><code class=\"language-XML\">&lt;Grid Name=\"Parent_3\"&gt;  \n    &lt;StackPanel Name=\"Parent_2\"&gt;  \n        &lt;Border Name=\"Parent_1\"&gt;  \n            &lt;StackPanel x:Name=\"Parent_0\" Orientation=\"Vertical\"&gt;  \n                &lt;Button&gt;&lt;/Button&gt;  \n            &lt;/StackPanel&gt;  \n        &lt;/Border&gt;  \n    &lt;/StackPanel&gt;  \n&lt;/Grid&gt;  </code></pre>\n<p>现在，让我们使用 FindAncestor 扩展将祖先的名称属性绑定到子元素按钮的内容属性。</p>\n<pre><code class=\"language-XML\">&lt;Grid Name=\"Parent_3\"&gt;\n    &lt;StackPanel Name=\"Parent_2\" HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\" Width=\"100\"&gt;  \n        &lt;Border Name=\"Parent_1\"&gt;  \n            &lt;StackPanel x:Name=\"Parent_0\" Orientation=\"Vertical\"&gt;  \n                &lt;Button Height=\"50\" Content=\"{Binding RelativeSource={RelativeSource FindAncestor,  \nAncestorType={x:Type StackPanel},  \nAncestorLevel=2},Path=Name}\"&gt;&lt;/Button&gt;  \n            &lt;/StackPanel&gt;  \n        &lt;/Border&gt;  \n    &lt;/StackPanel&gt;  \n&lt;/Grid&gt;</code></pre>\n<p>输出</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\49192dac4e41820786f58399e5352b51.png\"/></p>\n<p>AncestorType “StackPanel” 结合 AcestorLevel as “2” 将 button 的 content 属性与 StackPanel (Parent_2) 的 Name 属性绑定。</p>\n<p><strong>TemplatedParent</strong></p>\n<p>TemplatedParent 是一个属性，它使您能够创建具有少量未知值的控件模板。这些值取决于应用 ControlTemplate 的控件的属性。</p>\n<p>让我们举个例子来更详细地理解它</p>\n<ul><li>为按钮创建一个ControlTemplate，如下所示。</li></ul>\n<pre><code class=\"language-XML\">&lt;Window.Resources&gt;\n    &lt;ControlTemplate x:Key=\"template\"&gt;  \n        &lt;Canvas&gt;  \n            &lt;Ellipse Height=\"110\" Width=\"155\"  \n             Fill=\"Black\"/&gt;  \n            &lt;Ellipse Height=\"100\" Width=\"150\"  \n             Fill=\"{Binding RelativeSource={RelativeSource TemplatedParent},Path=Background}\"&gt;  \n            &lt;/Ellipse&gt;  \n            &lt;ContentPresenter Margin=\"35\"  \n             Content=\"{Binding RelativeSource={RelativeSource TemplatedParent},Path=Content}\"/&gt;  \n       &lt;/Canvas&gt;\n    &lt;/ControlTemplate&gt;\n&lt;/Window.Resources&gt;</code></pre>\n<p>在上面给出的代码中，Ellipse 的示例 Fill 属性和 ContentPresenter 的 Content 属性取决于将应用此模板的控件的属性值。</p>\n<ul><li>添加一个按钮并将模板应用到它。</li></ul>\n<pre><code class=\"language-XML\">&lt;Button Margin=\"50\" Background=\"Beige\" Template=\"{StaticResource template}\" Height=\"0\" Content=\"Click me\" FontSize=\"22\"&gt;  \n&lt;/Button&gt;   </code></pre>\n<p>在应用模板时，按钮的Background（Beige）与Ellipse的Fill属性相对绑定，Content（点我）与ContentPresenter的Content属性相对绑定。评估相关值并给出下面给出的输出。<br/> 输出：</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\dfd0058e6aac95a5857162cf44bdf585.png\"/></p>\n<p><strong>PreviousData</strong></p>\n<p>这是RelativeSource 最少使用的模式。这在分析数据时出现，我们需要表示相对于先前数据的值变化。</p>\n<p>让我们举个例子来更详细地理解它。</p>\n<ul><li>创建一个Data类并实现INotifyPropertyChanged接口，如下图</li></ul>\n<pre><code class=\"language-cs\">public class Data: INotifyPropertyChanged \n{  \n    public int DataValue \n    {  \n        get;  \n        set;  \n    }  \n    public event PropertyChangedEventHandler PropertyChanged;  \n    protected void OnPropertyChanged(string PropertyName) \n    {  \n        if (null != PropertyChanged) \n        {  \n            PropertyChanged(this,  \n                new PropertyChangedEventArgs(PropertyName));  \n        }  \n    }  \n}   \n</code></pre>\n<ul><li>创建一个列表以键入 Data 并将其分配为 DataContext。</li></ul>\n<pre><code class=\"language-cs\">public RelativeSourcePreviousData() \n{  \n    InitializeComponent();  \n    List &lt; Data &gt; data = new List &lt; Data &gt; ();  \n    data.Add(new Data() \n    {  \n        DataValue = 60  \n    });  \n    data.Add(new Data() \n    {  \n        DataValue = 100  \n    });  \n    data.Add(new Data() \n    {  \n        DataValue = 120  \n    });  \n    this.DataContext = data;  \n}   \n</code></pre>\n<ul><li>在 XAML 文件中添加 ItemsControl。</li></ul>\n<pre><code class=\"language-XML\">&lt;ItemsControl ItemsSource=\"{Binding}\"&gt;&lt;/ItemsControl&gt;  </code></pre>\n<ul><li>为其创建 ItemsPanel 模板，如下所示。</li></ul>\n<pre><code class=\"language-XML\">&lt;ItemsControl ItemsSource=\"{Binding}\"&gt;  \n    &lt;ItemsControl.ItemsPanel&gt;  \n        &lt;ItemsPanelTemplate&gt;  \n            &lt;StackPanel Orientation=\"Vertical\" /&gt;  \n        &lt;/ItemsPanelTemplate&gt;  \n    &lt;/ItemsControl.ItemsPanel&gt;  \n&lt;/ItemsControl&gt;  </code></pre>\n<ul><li>现在，为了正确表示数据，创建 DataTemplate，如下所示。</li></ul>\n<pre><code class=\"language-XML\">&lt;ItemsControl.ItemTemplate&gt;\n    &lt;DataTemplate&gt;  \n        &lt;StackPanel Orientation=\"Horizontal\"&gt;  \n            &lt;Grid Margin=\"30,20,0,0\"&gt;  \n                &lt;Rectangle Width=\"80\" Height=\"{Binding DataValue}\" Fill=\"Blue\" /&gt;  \n                &lt;TextBlock Foreground=\"White\" Margin=\"35,0,0,0\" Text=\"{Binding DataValue}\"&gt;&lt;/TextBlock&gt;  \n            &lt;/Grid&gt;  \n            &lt;TextBlock Margin=\"30,20,0,0\" Text=\"Previous Data:\"&gt;&lt;/TextBlock&gt;  \n            &lt;TextBlock VerticalAlignment=\"Center\" Margin=\"5,20,0,0\" Text=\"{Binding  \n             RelativeSource={RelativeSource PreviousData}, Path=DataValue}\" /&gt;  \n        &lt;/StackPanel&gt;  \n    &lt;/DataTemplate&gt;  \n&lt;/ItemsControl.ItemTemplate&gt;</code></pre>\n<p>输出</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\19c8e9dc72109b4bb808d462ca3a026c.png\"/></p>\n<p>蓝色框的高度是列表中项目的值，之前的数据显示在框的右侧。项目的第一个值为“60”。因此，先前的数据显示第一项没有价值。</p>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-22 00:06:02", "summary": "是应用程序中的一种机制，它为应用程序提供了一种简单易用的方式来显示数据并与之交互。它允许数据在和业务模型之间流动。绑定完成后对业务模型中的数据所做的任何修改都会自动反映到，反之亦然。绑定可以是单向的或"}