{"blogid": "120408132", "writerAge": "码龄13年", "writerBlogNum": "907", "writerCollect": "81409", "writerComment": "12148", "writerFan": "191745", "writerGrade": "9级", "writerIntegral": "69388", "writerName": "英雄哪里出来", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_120408132.jpg", "writerRankTotal": "75", "writerRankWeekly": "427", "writerThumb": "29213", "writerVisitNum": "21663334", "blog_read_count": "36989", "blog_time": "于 2021-09-30 05:36:45 发布", "blog_title": "《算法和数据结构》从语言到算法的过渡篇", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<center>\n 本文已收录于专栏\n</center>\n<center>\n<a href=\"https://blog.csdn.net/whereisherofrom/category_9273531.html\"><font color=\"886ce4\"><b>💜《<u>夜深人静写算法</u>》💜</b></font></a>\n</center>\n<h1><a id=\"_3\"></a>前言</h1>\n<p>  看到太多爆肝熬夜整合的内容，又是几万字，又是爆肝，我也来试试看能不能扛得住。试完后发现，果然还是扛不住啊。但是既然整理完了，那就把我的 <strong>算法学习路线</strong> 发出来吧，我把整个算法学习的阶段总结成了五个步骤，分别为：<a href=\"https://blog.csdn.net/whereisherofrom/category_11131373.html\"><font color=\"red\"> <b><u>「 基础语法 」</u></b></font></a>、<a href=\"https://blog.csdn.net/whereisherofrom/category_11158834.html\"><font color=\"FFa700\"> <b><u>「 语法练习 」</u></b></font></a>、<a href=\"https://blog.csdn.net/whereisherofrom/category_11227297.html\"><font color=\"ffd700\"> <b><u>「 数据结构 」</u></b></font></a>、<a href=\"https://docs.qq.com/mind/DU01SVGpab2tWdlNj\"><font color=\"13ae01\"> <b><u>「 算法入门 」</u></b></font></a>、<a href=\"https://blog.csdn.net/whereisherofrom/category_9273531.html\"><font color=\"2290ff\"> <b><u>「 算法进阶 」</u></b></font></a>。本文梳理了这五个大项的思维导图，在下文会有详细介绍。<br/>  希望各位能够找到自己的定位，通过自己的努力在算法这条路上越走越远。<br/>  刚开始切勿心浮气躁，说一定要把这么多东西都学会。就算你的精力旺盛，日夜操劳，时间也是有限的。所以，首先是明确我们要做什么，然后制定好一个合理的 <font color=\"red\"> <b>「 目标 」</b></font> ，然后再将目标进行逐渐拆解，再一点一点将要学习的内容逐步付诸实践才是最重要的。</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\21ba32facf304e6b9142e9310035318c.png\"/><br/> <a href=\"#jump99\"><font color=\"ff1f00\" size=\"5\"><b><u>点击我跳转末尾</u></b></font></a> 获取 <strong>粉丝专属</strong> 《算法和数据结构》源码。</p>\n<hr/>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_3\">前言</a></li><li><a href=\"#1_13\">1、基础语法</a></li><li><ul><li><a href=\"#1_17\">1）第一个程序</a></li><li><a href=\"#2_29\">2）热爱编程</a></li><li><a href=\"#3_32\">3）制定目录</a></li><li><a href=\"#4_37\">4）勤于思考</a></li><li><a href=\"#5_41\">5）事必躬亲</a></li><li><a href=\"#6_43\">6）坚持到底</a></li><li><a href=\"#7_45\">7）正反馈</a></li><li><a href=\"#8_50\">8）仪式感</a></li></ul>\n</li><li><a href=\"#2_55\">2、语法练习</a></li><li><ul><li><a href=\"#11_62\">1、例题1：整除判定</a></li><li><ul><li><a href=\"#_63\">一、题目描述</a></li><li><a href=\"#_67\">二、解题思路</a></li><li><a href=\"#_70\">三、代码详解</a></li><li><ul><li><a href=\"#1if_else__72\">1、if else 语句</a></li><li><a href=\"#2_92\">2、条件运算符</a></li></ul>\n</li></ul>\n</li><li><a href=\"#22_106\">2、例题2：最大的数</a></li><li><ul><li><a href=\"#_107\">一、题目描述</a></li><li><a href=\"#_110\">二、解题思路</a></li><li><a href=\"#_113\">三、代码详解</a></li></ul>\n</li></ul>\n</li><li><a href=\"#3_144\">3、数据结构</a></li><li><ul><li><a href=\"#1_146\">1、什么是数据结构</a></li><li><a href=\"#2_152\">2、数据结构和算法的关系</a></li><li><a href=\"#3_158\">3、数据结构概览</a></li><li><ul><li><a href=\"#1_162\">1）顺序表</a></li><li><a href=\"#2_168\">2）链表</a></li><li><a href=\"#3_176\">3）栈</a></li><li><a href=\"#4_183\">4）队列</a></li><li><a href=\"#5_190\">5）双端队列</a></li><li><a href=\"#6_198\">6）哈希表</a></li><li><a href=\"#7_205\">7）树</a></li><li><a href=\"#8_216\">8）二叉树</a></li><li><a href=\"#9_225\">9）二叉搜索树</a></li><li><a href=\"#10_232\">10）堆</a></li><li><a href=\"#11AVL_241\">11）AVL树</a></li><li><a href=\"#12_250\">12）线段树</a></li><li><a href=\"#13_259\">13）字典树</a></li><li><a href=\"#14_268\">14）霍夫曼树</a></li><li><a href=\"#15_277\">15）并查集</a></li><li><a href=\"#16_287\">16）图</a></li><li><a href=\"#17_298\">17）二分匹配</a></li><li><a href=\"#18_307\">18）最短路</a></li><li><a href=\"#19_316\">19）最小生成树</a></li><li><a href=\"#20_324\">20）强连通</a></li></ul>\n</li></ul>\n</li><li><a href=\"#4_334\">4、算法入门</a></li><li><a href=\"#5_339\">5、算法进阶</a></li><li><ul><li><a href=\"#1_346\">1）图论</a></li><li><ul><li><a href=\"#1_347\">1、搜索概览</a></li><li><a href=\"#2_351\">2、深度优先搜索</a></li><li><a href=\"#3_364\">3、记忆化搜索</a></li><li><a href=\"#4_375\">4、广度优先搜索</a></li></ul>\n</li><li><a href=\"#2_384\">2）动态规划</a></li><li><ul><li><a href=\"#11D1D_388\">1、1D/1D</a></li><li><a href=\"#22D0D_393\">2、2D/0D</a></li><li><a href=\"#32D1D_401\">3、2D/1D</a></li><li><a href=\"#42D2D_408\">4、2D/2D</a></li></ul>\n</li><li><a href=\"#3_415\">3）计算几何</a></li><li><ul><li><a href=\"#1double__float_418\">1、double 代替 float</a></li><li><a href=\"#2_420\">2、浮点数判定</a></li><li><a href=\"#3_438\">3、负零判定</a></li><li><a href=\"#4_453\">4、避免三角函数、对数、开方、除法等</a></li><li><a href=\"#5_457\">5、系统性的学习</a></li></ul>\n</li><li><a href=\"#4_463\">4）数论</a></li><li><ul><li><a href=\"#1_467\">1、数论入门</a></li><li><a href=\"#2_470\">2、数论四大定理</a></li><li><a href=\"#3_473\">3、数论进阶</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_514\">粉丝专属福利</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"1_13\"></a>1、基础语法</h1>\n<p>  算法是以编程语言为基础的，所以选择一门编程语言来学习是必须的。因为作者本身是C/C++技术栈的，所以就拿C语言来举例子吧。如果是 Java、Python 技术栈，可以跳过 C语言相关的内容。这一小节，先给出学习路线图，然后我再来讲，每部分应该如何去学。<br/> <img alt=\"\" src=\"..\\..\\static\\image\\20210704204448265.png\"/></p>\n<h2><a id=\"1_17\"></a>1）第一个程序</h2>\n<p>  无论是 Java、Python、C/C++，想要上手一门语言，第一步一定是 <strong>HelloWorld</strong>，先不要急着去配环境。如果环境配了几个小时，可能一开始的雄心壮志就被配环境的过程消磨殆尽，更加不要谈日后的丰功伟业了。来看第一个 C 语言程序：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span>               <span class=\"token comment\">// (1)</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                       <span class=\"token comment\">// (2)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token comment\">/* 我的第一个 C 程序 */</span>       <span class=\"token comment\">// (3)</span>\n   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, World! \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// (4)</span>\n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                     <span class=\"token comment\">// (5)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>这段代码只做了一件事情，就是向屏幕上输出一行字：<code>Hello, World!</code>。<br/><span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         (\n        \n        \n         1\n        \n        \n         )\n        \n       \n       \n        (1)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span> <code>stdio.h</code>是一个头文件 (标准输入输出头文件) , <code>#include</code>是一个预处理命令，用来引入头文件。当编译器遇到 <code>printf()</code>函数时，如果没有找到 <code>stdio.h</code>头文件，就会发生编译错误。<br/><span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         (\n        \n        \n         2\n        \n        \n         )\n        \n       \n       \n        (2)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span></span> <code>main()</code>作为这个程序的入口函数，代码都是从这个函数开始执行的。<br/><span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         (\n        \n        \n         3\n        \n        \n         )\n        \n       \n       \n        (3)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mclose\">)</span></span></span></span></span> 被<code>/*</code>和<code>*/</code>包围起来的代表注释，是给人看到，不进行代码的解析和执行。<br/><span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         (\n        \n        \n         4\n        \n        \n         )\n        \n       \n       \n        (4)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">4</span><span class=\"mclose\">)</span></span></span></span></span> <code>printf</code>代表将内容输出到控制台上。其中<code>\\n</code>代表换行符。<br/><span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         (\n        \n        \n         5\n        \n        \n         )\n        \n       \n       \n        (5)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">5</span><span class=\"mclose\">)</span></span></span></span></span> 作为函数的返回值。</p>\n</blockquote>\n<h2><a id=\"2_29\"></a>2）热爱编程</h2>\n<p>  所以，我们需要让这件事情从一开始就变得 <strong>有趣</strong>，这样才能坚持下去。比如找一个相对较为有趣的教程，这里我会推荐这个：<a href=\"https://blog.csdn.net/whereisherofrom/category_11131373.html\">《光天化日学C语言》</a>。听名字就比较搞笑，可能作者本身也不是什么正经人，哈哈哈！虽然不能作为一个严谨的教程去学，起码可以对搞笑的内容先产生兴趣。从而对于语言本身有学习下去的动力。<br/>   刚才提到的这个系列，可以先收藏起来。回头再去看，它讲述的是 <strong>对白式</strong> 的 <strong>C语言教学</strong>，从最简单的输出 <strong>HelloWorld</strong> 这个字符串开始讲起，逐渐让读者产生对C语言的兴趣。这个系列的作者是前 <strong>WorldFinal</strong> 退役选手，一直致力于 <strong>将困难的问题讲明白</strong> 。我看了他的大部分教程，基本都能一遍看懂。</p>\n<h2><a id=\"3_32\"></a>3）制定目录</h2>\n<p>  然后，我们大致看下你选择的教程的前几个章节，那些标题是否有你认知以外的名词出现，比如以这个思维导图为例，前几个章节为：</p>\n<blockquote>\n<p>1、第一个C语言程序<br/>2、搭建本地环境<br/>3、变量<br/>4、标准输出<br/>5、标准输入<br/>6、进制转换入门<br/>7、ASCII字符<br/>8、常量</p>\n</blockquote>\n<p>  如果你觉得这些名词中有 五六个是没有什么概念的。那么，可能需要补齐一些数学、计算机方面的基础知识。反之，我们就可以继续下一步了。</p>\n<h2><a id=\"4_37\"></a>4）勤于思考</h2>\n<p>  只要对一件事情养成习惯以后，你就会发现，再难的事情，都只是一点一点积累的过程。重要的是，每天学习的过程一定要吃透，养成主动思考的好习惯。因为，越到后面肯定是越难的，如果前期不养成习惯，后面很可能心有余而力不足。<br/>   就像刷题，一旦不会做就去找解题报告，最后就养成了看解题报告才会做题的习惯。当然这也是一种习惯，只不过不是一种好习惯罢了。</p>\n<h2><a id=\"5_41\"></a>5）事必躬亲</h2>\n<p>  光看教程肯定是不行的，写代码肯定还是要动手的，因为有些语法你看一遍，必定忘记。但是写了几遍，永世难忘。这或许就是写代码的魅力所在吧。所以，记得多写代码实践。</p>\n<h2><a id=\"6_43\"></a>6）坚持到底</h2>\n<p>  每天把教程上的内容，自己在键盘上敲一遍，坚持一天，两天，三天。你会发现，第四天就变成了习惯。所以坚持就是今天做了这件事情，明天继续做。</p>\n<h2><a id=\"7_45\"></a>7）正反馈</h2>\n<p>  然而，就算再有趣的教程，看多了都会乏味，这是人性决定的，你我都逃不了。能够让你坚持下去的只有你自己，这时候，适当给予自己一些正反馈就显得尤为重要。比如，可以用一张表格将自己的学习计划记录下来，然后每天都去分析一下自己的数据。<br/>   当然，你也可以和我一样，创建一个博客，然后每天更新博文，就算没有内容，也坚持日更，久而久之，你会发现，下笔如有神，键盘任我行！更新的内容，可以是自己的学习笔记，心路历程 等等。<br/>   看着每天的粉丝量呈指数级增长，这是全网对你的认可，应该没有什么会是比这个更好的正反馈了。</p>\n<h2><a id=\"8_50\"></a>8）仪式感</h2>\n<p>  那么，至此，不知道屏幕前的你感想如何，反正正在打字的我已经激情澎湃了。已经全然忘记这一章是要讲C语言基础的了！<br/>   介于篇幅，我会把C语言基础的内容，放在这个专栏 <a href=\"https://blog.csdn.net/whereisherofrom/category_11131373.html\">《光天化日学C语言》</a> 里面去讲，一天更新一篇，对啊，既然说了要坚持，要养成习惯，我当然也要做到啦~如果你学到了哪一章，可以在评论区评论 “打卡” ，也算是一种全网见证嘛！<br/>   我也很希望大家的学习速度能够超越我的更新速度。</p>\n<h1><a id=\"2_55\"></a>2、语法练习</h1>\n<p>  学习的过程中，做题当然也是免不了的，还是应征那句话：实践是检验真理的唯一标准。<br/>   而这里的题库，是我花了大量时间，搜罗了网上各大C语言教程里的例题，总结出来的思维导图，可以先大致看一眼：</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\20210701132438782.png\"/><br/>   从数学基础、输入输出、数据类型、循环、数组、指针、函数、位运算、结构体、排序 等几个方面，总结出的具有概括性的例题 100 道 <a href=\"https://blog.csdn.net/whereisherofrom/category_11158834.html?spm=1001.2014.3001.5482\">《C语言入门100例》</a>。</p>\n<ul><li>这里可以列举几个例子：</li></ul>\n<h2><a id=\"11_62\"></a>1、例题1：整除判定</h2>\n<h3><a id=\"_63\"></a>一、题目描述</h3>\n<blockquote>\n<p>  先输入一个 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         t\n        \n       \n       \n        t\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.61508em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">t</span></span></span></span></span>，然后输入 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         t\n        \n       \n       \n        t\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.61508em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">t</span></span></span></span></span> 组数据，对于每组数据，输入两个整数 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         a\n        \n       \n       \n        a\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.43056em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span></span> 和 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         b\n        \n       \n       \n        b\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span></span>，如果 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         a\n        \n       \n       \n        a\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.43056em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span></span> 能够被 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         b\n        \n       \n       \n        b\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span></span> 整除，则输出 <code>YES</code>，否则输出 <code>NO</code>。<br/> <img alt=\"\" src=\"https://img-blog.csdnimg.cn/2021070405500914.gif#pic_center\"/></p>\n</blockquote>\n<h3><a id=\"_67\"></a>二、解题思路</h3>\n<blockquote>\n<p>难度：🔴⚪⚪⚪⚪<br/>   首先，当 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         b\n        \n       \n       \n        b\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span></span> 等于 0 时，<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         a\n        \n       \n       \n        a\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.43056em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span></span> 是一定不能被 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         b\n        \n       \n       \n        b\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span></span> 整除的；然后，就是看 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         a\n        \n       \n       \n        a\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.43056em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span></span> 除上 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         b\n        \n       \n       \n        b\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span></span> 的余数是不是零了，这步运算在C语言中表示为<code>a % b</code>；</p>\n</blockquote>\n<h3><a id=\"_70\"></a>三、代码详解</h3>\n<h4><a id=\"1if_else__72\"></a>1、if else 语句</h4>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// (1)</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>                <span class=\"token comment\">// (2)</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> a <span class=\"token operator\">%</span> b<span class=\"token punctuation\">)</span>     <span class=\"token comment\">// (3)</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NO\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YES\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li><span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         (\n        \n        \n         1\n        \n        \n         )\n        \n       \n       \n        (1)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span> 输入 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         t\n        \n       \n       \n        t\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.61508em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">t</span></span></span></span></span> 组数据；</li><li><span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         (\n        \n        \n         2\n        \n        \n         )\n        \n       \n       \n        (2)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span></span> <code>while(t--)</code>等价于<code>while(t-- != 0)</code>，当 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         t\n        \n        \n         =\n        \n        \n         0\n        \n       \n       \n        t=0\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.61508em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\">0</span></span></span></span></span> 的情况下，这个循环就会结束，也就是说整个循环会执行一开始输入的那个<code>t</code>的次数；</li><li><span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         (\n        \n        \n         3\n        \n        \n         )\n        \n       \n       \n        (3)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mclose\">)</span></span></span></span></span> 根据本题的题意，用逻辑运算符<code>||</code>（或）对两种情况输出 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         N\n        \n        \n         O\n        \n       \n       \n        NO\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.68333em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.10903em;\">N</span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">O</span></span></span></span></span>，一种是 <code>b</code>等于0，另一个中是 <code>a % b</code>不等于0；</li></ul>\n<hr/>\n<h4><a id=\"2_92\"></a>2、条件运算符</h4>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> a <span class=\"token operator\">%</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"NO\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"YES\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (1)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li><span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         (\n        \n        \n         1\n        \n        \n         )\n        \n       \n       \n        (1)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span> 采用条件运算符<code>?:</code>来实现<code>if else</code>语句的功能；</li></ul>\n<h2><a id=\"22_106\"></a>2、例题2：最大的数</h2>\n<h3><a id=\"_107\"></a>一、题目描述</h3>\n<blockquote>\n<p>  循环输入。每组数据先输入 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         n\n        \n        \n         (\n        \n        \n         n\n        \n        \n         ≤\n        \n        \n         10000\n        \n        \n         )\n        \n       \n       \n        n(n \\le 10000)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span></span>，再输入<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         n\n        \n       \n       \n        n\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.43056em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span></span> 个正整数 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          a\n         \n         \n          i\n         \n        \n        \n         (\n        \n        \n         \n          a\n         \n         \n          i\n         \n        \n        \n         ≤\n        \n        \n         10000\n        \n        \n         )\n        \n       \n       \n        a_i(a_i \\le 10000)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.311664em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.311664em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span></span>，输出其中最大的数。当没有任何输入时，程序结束。</p>\n</blockquote>\n<h3><a id=\"_110\"></a>二、解题思路</h3>\n<blockquote>\n<p>难度：🔴⚪⚪⚪⚪<br/>   这个问题的经典思路就是枚举问题，以第一个元素为初始最大值，然后不断和第二个数、第三个数、…、第 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         n\n        \n       \n       \n        n\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.43056em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span></span> 个数进行比较，过程中将最大值存下来，最后输出这个最大值即可。</p>\n</blockquote>\n<h3><a id=\"_113\"></a>三、代码详解</h3>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">&gt;</span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span>             <span class=\"token comment\">// (1)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> maxv<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>              <span class=\"token comment\">// (2)</span>\n                maxv <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>       \n            <span class=\"token punctuation\">}</span>\n            maxv <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> maxv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// (3)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> maxv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li><span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         (\n        \n        \n         1\n        \n        \n         )\n        \n       \n       \n        (1)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span> 首先，实现一个最大值函数：给定两个数，求其中的大者。我们利用三目运算符来实现；</li><li><span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         (\n        \n        \n         2\n        \n        \n         )\n        \n       \n       \n        (2)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span></span> 对 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         n\n        \n       \n       \n        n\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.43056em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span></span> 个数迭代求大者，将最大值存储在<code>maxv</code>中，当输入第一个数的时候因为没有比较，所以我们把第一个输入的数直接赋值给它；</li><li><span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         (\n        \n        \n         3\n        \n        \n         )\n        \n       \n       \n        (3)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mclose\">)</span></span></span></span></span> 然后对每个输入的数<code>a</code>，和<code>maxv</code>比大小，迭代求最大值；</li></ul>\n<hr/>\n<p>  由于这个专栏是付费专栏，可能对学生党不是很友好，所以作者经过再三思考，打算放出 300 张 <font color=\"red\" size=\"5\">7 折优惠券</font>， 先到先得。只要拿这个图片来找作者即可享受，仅限前 300 名。<br/>   为了适当提高一定门槛，你至少需要学会如何下载图片或者截图并且发送到微信里 🤣。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9aa5b57c96774c29ad0e0e2c46dab20e.png\"/></p>\n<h1><a id=\"3_144\"></a>3、数据结构</h1>\n<p>  <a href=\"https://blog.csdn.net/whereisherofrom/category_11158834.html?spm=1001.2014.3001.5482\">《C语言入门100例》</a>上的例题，如果能理解前面 35 道，那基本C语言的学习就可以告一段落了，接下来就要开始我们的数据结构的学习了。</p>\n<h2><a id=\"1_146\"></a>1、什么是数据结构</h2>\n<ul><li>你可能听说过 数组、链表、队列、栈、堆、二叉树、图，没错，这些都是数据结构，但是你要问我什么是数据结构，我突然就一脸懵逼了。</li><li>如果一定要给出一个官方的解释，那么它就是：</li></ul>\n<blockquote>\n<p>计算机存储、组织数据的方式。相互之间存在一种或多种特定关系的数据元素的集合。通常情况下，精心选择的数据结构可以带来更高的运行或者存储效率。往往同高效的检索算法和索引技术有关。</p>\n</blockquote>\n<ul><li>是不是还不如说它是堆，是栈，是队列呢？</li><li>是这样的，我们学习的过程中，跳过一些不必要的概念，能够节省我们更多的时间，从而达到更好的效果，当你还在理解数据结构是什么的时候，可能人家已经知道了栈有哪些操作了。</li></ul>\n<h2><a id=\"2_152\"></a>2、数据结构和算法的关系</h2>\n<ul><li>很多同学搞不明白，数据结构与算法有哪些千丝万缕的关系？甚至有些同学以为算法里本身就包含了数据结构。</li><li>数据结构主要讲解数据的组织形式，比如链表，堆，栈，队列。</li><li>而算法，则注重的是思想，比如链表的元素怎么插入、删除、查找？堆的元素怎么弹出来的？栈为什么是先进后出？队列又为什么是先进先出？</li><li>讲得直白一点，数据结构是有实体的，算法是虚拟的；数据结构是物质上的，算法是精神上的。当然，物质和精神 缺一不可。</li></ul>\n<h2><a id=\"3_158\"></a>3、数据结构概览</h2>\n<center>\n<font color=\"2290ff\" size=\"6\"><b>第一章</b></font>\n</center>\n<center>\n<font color=\"fce100\" size=\"5\"><b>线性表</b></font>\n</center>\n<h3><a id=\"1_162\"></a>1）顺序表</h3>\n<center>\n<a href=\"https://blog.csdn.net/whereisherofrom/article/details/119902884\"><font color=\"eb3f41\"><b><u>《画解数据结构》（1 - 1）- 顺序表</u></b></font></a>\n</center>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\e0f7a80495e44be9a6ed2e65dd625c08.png\"/></p>\n<hr/>\n<h3><a id=\"2_168\"></a>2）链表</h3>\n<p><span id=\"jump12\"></span></p>\n<center>\n<a href=\"https://blog.csdn.net/WhereIsHeroFrom/article/details/119381711\"><font color=\"eb3f41\"><b><u>《画解数据结构》（1 - 2）- 链表</u></b></font></a>\n</center>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\e60cfd772a184263b17c837ce40c78a4.png\"/></p>\n<hr/>\n<h3><a id=\"3_176\"></a>3）栈</h3>\n<p><span id=\"jump13\"></span></p>\n<center>\n<a href=\"https://blog.csdn.net/WhereIsHeroFrom/article/details/119580434\"><font color=\"eb3f41\"><b><u>《画解数据结构》（1 - 3）- 栈</u></b></font></a>\n</center>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\08b27404a79045a6b7afe8acb4284759.png\"/></p>\n<hr/>\n<h3><a id=\"4_183\"></a>4）队列</h3>\n<p><span id=\"jump14\"></span></p>\n<center>\n<a href=\"https://blog.csdn.net/WhereIsHeroFrom/article/details/119754983\"><font color=\"eb3f41\"><b><u>《画解数据结构》（1 - 4）- 队列</u></b></font></a>\n</center>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f7205796fb46412a96491c56ea66eaa1.png\"/></p>\n<hr/>\n<h3><a id=\"5_190\"></a>5）双端队列</h3>\n<p><span id=\"jump15\"></span></p>\n<center>\n<a href=\"https://blog.csdn.net/WhereIsHeroFrom/article/details/120187284\"><font color=\"eb3f41\"><b><u>《画解数据结构》（1 - 5）- 双端队列</u></b></font></a>\n</center>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\bf36b8458ad14c37b1a3840a56ffb36b.png\"/></p>\n<hr/>\n<h3><a id=\"6_198\"></a>6）哈希表</h3>\n<p><span id=\"jump16\"></span></p>\n<center>\n<a href=\"https://blog.csdn.net/WhereIsHeroFrom/article/details/119838427\"><font color=\"eb3f41\"><b><u>《画解数据结构》（1 - 6）- 哈希表</u></b></font></a>\n</center>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fc8988579dd447208f555fa0dc4ad540.png\"/></p>\n<hr/>\n<h3><a id=\"7_205\"></a>7）树</h3>\n<p><span id=\"jump21\"></span></p>\n<center>\n<font color=\"2290ff\" size=\"6\"><b>第二章</b></font>\n</center>\n<center>\n<font color=\"fce100\" size=\"5\"><b>树</b></font>\n</center>\n<center>\n<font color=\"e81224\"><b>（2-1）画解树</b></font>\n</center>\n<p><img alt=\"、\" src=\"..\\..\\static\\image\\d05644de87ed458fbfe6c3c352f5e70e.png\"/></p>\n<p>   更多内容请收看：<a href=\"https://blog.csdn.net/WhereIsHeroFrom/article/details/119768563\">画解树</a>。</p>\n<hr/>\n<h3><a id=\"8_216\"></a>8）二叉树</h3>\n<p><span id=\"jump22\"></span></p>\n<center>\n<font color=\"e81224\"><b>（2-2）画解二叉树</b></font>\n</center>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\a69dd0c15014497fbfd55c0c991133a7.png\"/></p>\n<p>   为了增加阅读体验，更多内容请收看：<a href=\"https://blog.csdn.net/WhereIsHeroFrom/article/details/118850208\">画解二叉树</a>。</p>\n<hr/>\n<h3><a id=\"9_225\"></a>9）二叉搜索树</h3>\n<p><span id=\"jump23\"></span></p>\n<center>\n<a href=\"https://blog.csdn.net/WhereIsHeroFrom/article/details/120408132\"><font color=\"eb3f41\"><b><u>《画解数据结构》（2 - 3）- 二叉搜索树</u></b></font></a>\n</center>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\195668a97d114c24960f18c7f97e321d.png\"/></p>\n<hr/>\n<h3><a id=\"10_232\"></a>10）堆</h3>\n<p><span id=\"jump24\"></span></p>\n<center>\n<font color=\"e81224\"><b>（2-4）画解堆</b></font>\n</center>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\bf288d0a3ff4459c9c5a6b7e3b382608.png\"/></p>\n<p>   为了增加阅读体验，更多内容请收看：<a href=\"https://blog.csdn.net/WhereIsHeroFrom/article/details/118988169\">画解堆</a>。</p>\n<hr/>\n<h3><a id=\"11AVL_241\"></a>11）AVL树</h3>\n<p><span id=\"jump25\"></span></p>\n<center>\n<font color=\"e81224\"><b>（2-5）画解AVL树</b></font>\n</center>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\5aac92d61dbc4058aa9a129abf6b71f0.png\"/></p>\n<p>   本文已超五万字，为了增加阅读体验，更多内容请收看：<a href=\"https://blog.csdn.net/WhereIsHeroFrom/article/details/118988118\">画解二叉平衡树</a>。</p>\n<hr/>\n<h3><a id=\"12_250\"></a>12）线段树</h3>\n<p><span id=\"jump26\"></span></p>\n<center>\n<font color=\"e81224\"><b>（2-6）画解线段树</b></font>\n</center>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\d018100f9dc64bb5aa421f15ec8151b9.png\"/></p>\n<p>   为了增加阅读体验，更多内容请收看：<a href=\"https://blog.csdn.net/WhereIsHeroFrom/article/details/78969718\">画解线段树</a>。</p>\n<hr/>\n<h3><a id=\"13_259\"></a>13）字典树</h3>\n<p><span id=\"jump27\"></span></p>\n<center>\n<font color=\"e81224\"><b>（2-7）画解字典树</b></font>\n</center>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f7ab4dde876c4ae0ade7d24e5c72f0f8.png\"/></p>\n<p>   为了增加阅读体验，更多内容请收看：<a href=\"https://blog.csdn.net/WhereIsHeroFrom/article/details/112271312\">画解字典树</a>。</p>\n<hr/>\n<h3><a id=\"14_268\"></a>14）霍夫曼树</h3>\n<p><span id=\"jump28\"></span></p>\n<center>\n<font color=\"e81224\"><b>（2-8）画解霍夫曼树</b></font>\n</center>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\09dabad43dd345b4b8625e39dff5f216.png\"/></p>\n<p>   为了增加阅读体验，更多内容请收看：<a href=\"https://blog.csdn.net/WhereIsHeroFrom/article/details/106435229\">画解霍夫曼树</a>。</p>\n<hr/>\n<h3><a id=\"15_277\"></a>15）并查集</h3>\n<p><span id=\"jump29\"></span></p>\n<center>\n<font color=\"e81224\"><b>（2-9）画解并查集</b></font>\n</center>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\3a28d1a03fa448728ed90b1c88d3b30f.png\"/></p>\n<p>   为了增加阅读体验，更多内容请收看：<a href=\"https://blog.csdn.net/WhereIsHeroFrom/article/details/111879216\">画解并查集</a>。</p>\n<hr/>\n<h3><a id=\"16_287\"></a>16）图</h3>\n<p><span id=\"jump31\"></span></p>\n<center>\n<font color=\"2290ff\" size=\"6\"><b>第三章</b></font>\n</center>\n<center>\n<font color=\"fce100\" size=\"5\"><b>图</b></font>\n</center>\n<center>\n<font color=\"e81224\"><b>（3-1）画解图</b></font>\n</center>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\4ba4d11c65c14cc9824ea013235bc552.png\"/></p>\n<p>   本文已超五万字，为了增加阅读体验，更多内容请收看：<a href=\"https://blog.csdn.net/WhereIsHeroFrom/article/details/112479644\">画解图</a>。</p>\n<hr/>\n<h3><a id=\"17_298\"></a>17）二分匹配</h3>\n<p><span id=\"jump32\"></span></p>\n<center>\n<font color=\"e81224\"><b>（3-2）画解二分匹配</b></font>\n</center>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\c5e33def0f4e4ad6ba5759e8516fd7a0.png\"/></p>\n<p>   为了增加阅读体验，更多内容请收看：<a href=\"https://blog.csdn.net/WhereIsHeroFrom/article/details/112479644\">画解二分匹配</a>。</p>\n<hr/>\n<h3><a id=\"18_307\"></a>18）最短路</h3>\n<p><span id=\"jump33\"></span></p>\n<center>\n<font color=\"e81224\"><b>（3-3）画解最短路</b></font>\n</center>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\703a191210c845109cadab116a05aacb.png\"/></p>\n<p>   为了增加阅读体验，更多内容请收看：<a href=\"https://blog.csdn.net/WhereIsHeroFrom/article/details/114456899\">画解最短路</a>。</p>\n<hr/>\n<h3><a id=\"19_316\"></a>19）最小生成树</h3>\n<p><span id=\"jump34\"></span></p>\n<center>\n<font color=\"e81224\"><b>（3-4）画解最小生成树</b></font>\n</center>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\cd2d4ae9900c448c8577f7a2323b3599.png\"/><br/>    为了增加阅读体验，更多内容请收看：<a href=\"https://blog.csdn.net/WhereIsHeroFrom/article/details/118988361\">画解最小生成树</a>。</p>\n<hr/>\n<h3><a id=\"20_324\"></a>20）强连通</h3>\n<p><span id=\"jump35\"></span></p>\n<center>\n<font color=\"e81224\"><b>（3-5）画解强连通</b></font>\n</center>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\40d4a4ccf1ea4af9b06b9a625aea0121.png\"/></p>\n<p>   为了增加阅读体验，更多内容请收看：<a href=\"https://blog.csdn.net/WhereIsHeroFrom/article/details/79417926\">画解强连通</a>。</p>\n<h1><a id=\"4_334\"></a>4、算法入门</h1>\n<ul><li>算法入门，其实就是要开始我们的刷题之旅了。先给出思维导图，然后一一介绍入门十大算法。<br/> <img alt=\"\" src=\"..\\..\\static\\image\\20210704171728670.png\"/></li></ul>\n<center>\n<a href=\"https://docs.qq.com/mind/DU01SVGpab2tWdlNj\"><font color=\"2290ff\"><b>🌌《<u>算法入门指引</u>》🌌</b></font></a>\n</center>\n<h1><a id=\"5_339\"></a>5、算法进阶</h1>\n<ul><li>算法进阶这块是我打算规划自己未来十年去完成的一个项目，囊括了 大学生ACM程序设计竞赛、高中生的OI竞赛、LeetCode 职场面试算法 的算法全集，也就是之前网络上比较有名的 <a href=\"https://blog.csdn.net/whereisherofrom/category_9273531.html\">《夜深人静写算法》</a> 系列，这可以说是我自己对自己的一个要求和目标吧。</li><li>如果只是想进大厂，那么 算法入门 已经足够了，不需要再来看算法进阶了，当然如果对算法有浓厚兴趣，也欢迎和我一起打卡。由于内容较难，工作也比较忙，所以学的也比较慢，一周基本也只能更新一篇。</li></ul>\n<blockquote>\n<p>这个系列主要分为以下几个大块内容：<br/>  1）图论<br/>  2）动态规划<br/>  3）计算几何<br/>  4）数论<br/>  5）字符串匹配<br/>  6）高级数据结构（课本上学不到的）<br/>  7）杂项算法</p>\n</blockquote>\n<ul><li>先来看下思维导图，然后我大致讲一下每一类算法各自的特点，以及学习方式：</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210701122851262.png\"/></p>\n<h2><a id=\"1_346\"></a>1）图论</h2>\n<h3><a id=\"1_347\"></a>1、搜索概览</h3>\n<ul><li>图论主要围绕搜索算法进行展开。搜索算法的原理就是枚举。利用计算机的高性能，给出人类制定好的规则，枚举出所有可行的情况，找到可行解或者最优解。<br/> <img alt=\"\" src=\"https://img-blog.csdnimg.cn/20210619111717635.gif#pic_center\"/></li><li>比较常见的搜索算法是 深度优先搜索（又叫深度优先遍历） 和 广度优先搜索（又叫广度优先遍历 或者 宽度优先遍历）。各种图论的算法基本都是依靠这两者进行展开的。</li></ul>\n<h3><a id=\"2_351\"></a>2、深度优先搜索</h3>\n<ul><li>深度优先搜索一般用来求可行解，利用剪枝进行优化，在树形结构的图上用处较多；而广度优先搜索一般用来求最优解，配合哈希表进行状态空间的标记，从而避免重复状态的计算；</li><li>原则上，天下万物皆可搜，只是时间已惘然。搜索会有大量的重复状态出现，这里的状态和动态规划的状态是同一个概念，所以有时候很难分清到底是用搜索还是动态规划。</li><li>但是，大体上还是有迹可循的，如果这个状态不能映射到数组被缓存下来，那么大概率就是需要用搜索来求解的。</li><li>如图所示，代表的是一个深度优先搜索的例子，红色实箭头表示搜索路径，蓝色虚箭头表示回溯路径。<br/> <img alt=\"\" src=\"https://img-blog.csdnimg.cn/20210604083836342.gif#pic_center\"/></li><li>红色块表示往下搜索，蓝色块表示往上回溯，遍历序列为：</li></ul>\n<pre><code class=\"prism language-cpp\">\t<span class=\"token number\">0</span> <span class=\"token operator\">-&gt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">-&gt;</span> <span class=\"token number\">3</span> <span class=\"token operator\">-&gt;</span> <span class=\"token number\">4</span> <span class=\"token operator\">-&gt;</span> <span class=\"token number\">5</span> <span class=\"token operator\">-&gt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">-&gt;</span> <span class=\"token number\">6</span>\n</code></pre>\n<ul><li>同样，搜索的例子还有：<br/> <img alt=\"\" src=\"https://img-blog.csdnimg.cn/20210619091154437.gif#pic_center\"/></li><li>计算的是利用递归实现的 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         n\n        \n       \n       \n        n\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.43056em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span></span> 的阶乘。</li></ul>\n<h3><a id=\"3_364\"></a>3、记忆化搜索</h3>\n<ul><li>对于斐波那契函数的求解，如下所示：</li><li><span class=\"katex--display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          f\n         \n         \n          (\n         \n         \n          n\n         \n         \n          )\n         \n         \n          =\n         \n         \n          \n           {\n          \n          \n           \n            \n             \n              \n               1\n              \n             \n            \n            \n             \n              \n               \n                (\n               \n               \n                n\n               \n               \n                =\n               \n               \n                0\n               \n               \n                )\n               \n              \n             \n            \n           \n           \n            \n             \n              \n               1\n              \n             \n            \n            \n             \n              \n               \n                (\n               \n               \n                n\n               \n               \n                =\n               \n               \n                1\n               \n               \n                )\n               \n              \n             \n            \n           \n           \n            \n             \n              \n               \n                f\n               \n               \n                (\n               \n               \n                n\n               \n               \n                −\n               \n               \n                1\n               \n               \n                )\n               \n               \n                +\n               \n               \n                f\n               \n               \n                (\n               \n               \n                n\n               \n               \n                −\n               \n               \n                2\n               \n               \n                )\n               \n              \n             \n            \n            \n             \n              \n               \n                (\n               \n               \n                n\n               \n               \n                &gt;\n               \n               \n                2\n               \n               \n                )\n               \n              \n             \n            \n           \n          \n         \n        \n        \n         f(n) = \\begin{cases}1 &amp; (n = 0) \\\\1 &amp; (n = 1) \\\\f(n-1) + f(n-2) &amp; (n &gt; 2) \\end{cases}\n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 4.32em; vertical-align: -1.91em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 2.35002em;\"><span class=\"\" style=\"top: -2.19999em;\"><span class=\"pstrut\" style=\"height: 3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span class=\"\">⎩</span></span></span><span class=\"\" style=\"top: -2.19999em;\"><span class=\"pstrut\" style=\"height: 3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span class=\"\">⎪</span></span></span><span class=\"\" style=\"top: -3.15001em;\"><span class=\"pstrut\" style=\"height: 3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span class=\"\">⎨</span></span></span><span class=\"\" style=\"top: -4.30001em;\"><span class=\"pstrut\" style=\"height: 3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span class=\"\">⎪</span></span></span><span class=\"\" style=\"top: -4.60002em;\"><span class=\"pstrut\" style=\"height: 3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span class=\"\">⎧</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 1.85002em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 2.41em;\"><span class=\"\" style=\"top: -4.41em;\"><span class=\"pstrut\" style=\"height: 3.008em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span class=\"\" style=\"top: -2.97em;\"><span class=\"pstrut\" style=\"height: 3.008em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span class=\"\" style=\"top: -1.53em;\"><span class=\"pstrut\" style=\"height: 3.008em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 1.91em;\"><span class=\"\"></span></span></span></span></span><span class=\"arraycolsep\" style=\"width: 1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 2.41em;\"><span class=\"\" style=\"top: -4.41em;\"><span class=\"pstrut\" style=\"height: 3.008em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span><span class=\"\" style=\"top: -2.97em;\"><span class=\"pstrut\" style=\"height: 3.008em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span><span class=\"\" style=\"top: -1.53em;\"><span class=\"pstrut\" style=\"height: 3.008em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 1.91em;\"><span class=\"\"></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></span></li><li>对于 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         f\n        \n        \n         (\n        \n        \n         5\n        \n        \n         )\n        \n       \n       \n        f(5)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\">5</span><span class=\"mclose\">)</span></span></span></span></span> 的求解，程序调用如下：<br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/img_convert/080a927606cec45d6665537f120bdd1e.gif#pic_center\"/></li><li>这个过程用到了很多重复状态的搜索，我们需要将它优化，一般将一些状态缓存起来。</li><li>我们通过一个动图来感受一下：<br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/img_convert/c64ec9dc2c21fbe1f15b164bf28eb1a0.gif#pic_center\"/></li><li>当第二次需要计算 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         f\n        \n        \n         (\n        \n        \n         2\n        \n        \n         )\n        \n       \n       \n        f(2)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span></span> 和 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         f\n        \n        \n         (\n        \n        \n         3\n        \n        \n         )\n        \n       \n       \n        f(3)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mclose\">)</span></span></span></span></span> 时，由于结果已经计算出来并且存储在 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         h\n        \n        \n         [\n        \n        \n         2\n        \n        \n         ]\n        \n       \n       \n        h[2]\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">h</span><span class=\"mopen\">[</span><span class=\"mord\">2</span><span class=\"mclose\">]</span></span></span></span></span> 和 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         h\n        \n        \n         [\n        \n        \n         3\n        \n        \n         ]\n        \n       \n       \n        h[3]\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">h</span><span class=\"mopen\">[</span><span class=\"mord\">3</span><span class=\"mclose\">]</span></span></span></span></span> 中，所以上面这段代码的<code>fib != inf</code>表达式为真，直接返回，不再需要往下递归计算，这样就把原本的 “递归二叉树” 转换成了 “递归链”， 从而将原本指数级的算法变成了多项式级别。</li><li>这就是记忆化搜索，像这种把状态缓存起来的方法，就是动态规划的思想了。</li></ul>\n<h3><a id=\"4_375\"></a>4、广度优先搜索</h3>\n<ul><li>单向广搜就是最简化情况下的广度优先搜索（Breadth First Search），以下简称为广搜。游戏开发过程中用到的比较广泛的 A* 寻路，就是广搜的加强版。</li><li>我们通过一个动图来对广搜有一个初步的印象。</li></ul>\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/20210124145611779.gif#pic_center\"/></p>\n<ul><li>从图中可以看出，广搜的本质还是暴力枚举。即对于每个当前位置，枚举四个相邻可以行走的方向进行不断尝试，直到找到目的地。有点像洪水爆发，从一个源头开始逐渐蔓延开来，直到所有可达的区域都被洪水灌溉，所以我们也把这种算法称为 FloodFill。</li><li>那么，如何把它描述成程序的语言呢？这里需要用到一种数据结构 —— 队列。</li><li>这时候，算法和数据结构就完美结合了。</li></ul>\n<h2><a id=\"2_384\"></a>2）动态规划</h2>\n<blockquote>\n<p>动态规划算法三要素：<br/>  ①所有不同的子问题组成的表；<br/>  ②解决问题的依赖关系可以看成是一个图；<br/>  ③填充子问题的顺序（即对②的图进行拓扑排序，填充的过程称为状态转移）；</p>\n</blockquote>\n<ul><li>如果子问题的数目为 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         O\n        \n        \n         (\n        \n        \n         \n          n\n         \n         \n          t\n         \n        \n        \n         )\n        \n       \n       \n        O(n^t)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1.04356em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.793556em;\"><span class=\"\" style=\"top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span>，每个子问题需要用到 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         O\n        \n        \n         (\n        \n        \n         \n          n\n         \n         \n          e\n         \n        \n        \n         )\n        \n       \n       \n        O(n^e)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.664392em;\"><span class=\"\" style=\"top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">e</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span> 个子问题的结果，那么我们称它为 tD/eD 的问题，于是可以总结出四类常用的动态规划方程：（下面会把opt作为取最优值的函数（一般取 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         m\n        \n        \n         i\n        \n        \n         n\n        \n       \n       \n        min\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.65952em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span></span></span></span></span> 或 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         m\n        \n        \n         a\n        \n        \n         x\n        \n       \n       \n        max\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.43056em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">x</span></span></span></span></span> ）, <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         w\n        \n        \n         (\n        \n        \n         j\n        \n        \n         ,\n        \n        \n         i\n        \n        \n         )\n        \n       \n       \n        w(j, i)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.02691em;\">w</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right: 0.05724em;\">j</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">)</span></span></span></span></span>为一个实函数，其它变量都可以在常数时间计算出来）。</li></ul>\n<h3><a id=\"11D1D_388\"></a>1、1D/1D</h3>\n<ul><li><span class=\"katex--display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          d\n         \n         \n          [\n         \n         \n          i\n         \n         \n          ]\n         \n         \n          =\n         \n         \n          o\n         \n         \n          p\n         \n         \n          t\n         \n         \n          (\n         \n         \n          d\n         \n         \n          [\n         \n         \n          j\n         \n         \n          ]\n         \n         \n          +\n         \n         \n          w\n         \n         \n          (\n         \n         \n          j\n         \n         \n          ,\n         \n         \n          i\n         \n         \n          )\n         \n         \n          ∣\n         \n         \n          0\n         \n         \n          &lt;\n         \n         \n          =\n         \n         \n          i\n         \n         \n          &lt;\n         \n         \n          j\n         \n         \n          )\n         \n        \n        \n         d[i] = opt( d[j] + w(j, i) | 0 &lt;= i &lt; j )\n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right: 0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.02691em;\">w</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right: 0.05724em;\">j</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">&lt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.36687em; vertical-align: 0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.69862em; vertical-align: -0.0391em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.05724em;\">j</span><span class=\"mclose\">)</span></span></span></span></span></span></li><li>状态转移如图四所示（黄色块代表<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         d\n        \n        \n         [\n        \n        \n         i\n        \n        \n         ]\n        \n       \n       \n        d[i]\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span></span>，绿色块代表<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         d\n        \n        \n         [\n        \n        \n         j\n        \n        \n         ]\n        \n       \n       \n        d[j]\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right: 0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span></span>）：<br/> <img alt=\"\" src=\"..\\..\\static\\image\\20201222081902820.png\"/></li><li>这类状态转移方程一般出现在线性模型中。</li></ul>\n<h3><a id=\"22D0D_393\"></a>2、2D/0D</h3>\n<ul><li><span class=\"katex--display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          d\n         \n         \n          [\n         \n         \n          i\n         \n         \n          ]\n         \n         \n          [\n         \n         \n          j\n         \n         \n          ]\n         \n         \n          =\n         \n         \n          o\n         \n         \n          p\n         \n         \n          t\n         \n         \n          (\n         \n         \n          d\n         \n         \n          [\n         \n         \n          i\n         \n         \n          −\n         \n         \n          1\n         \n         \n          ]\n         \n         \n          [\n         \n         \n          j\n         \n         \n          ]\n         \n         \n          +\n         \n         \n          \n           x\n          \n          \n           i\n          \n         \n         \n          ,\n         \n         \n          d\n         \n         \n          [\n         \n         \n          i\n         \n         \n          ]\n         \n         \n          [\n         \n         \n          j\n         \n         \n          −\n         \n         \n          1\n         \n         \n          ]\n         \n         \n          +\n         \n         \n          \n           y\n          \n          \n           j\n          \n         \n         \n          ,\n         \n         \n          d\n         \n         \n          [\n         \n         \n          i\n         \n         \n          −\n         \n         \n          1\n         \n         \n          ]\n         \n         \n          [\n         \n         \n          j\n         \n         \n          −\n         \n         \n          1\n         \n         \n          ]\n         \n         \n          +\n         \n         \n          \n           z\n          \n          \n           \n            i\n           \n           \n            j\n           \n          \n         \n         \n          )\n         \n        \n        \n         d[i][j] = opt( d[i-1][j] + x_i, d[i][j-1] + y_j, d[i-1][j-1] + z_{ij} ) \n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right: 0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right: 0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.311664em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right: 0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1.03611em; vertical-align: -0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.311664em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.03588em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right: 0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.286108em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right: 0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1.03611em; vertical-align: -0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right: 0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.311664em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.04398em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mord mathdefault mtight\" style=\"margin-right: 0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.286108em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span></span></li><li>状态转移如图四所示：<br/> <img alt=\"\" src=\"..\\..\\static\\image\\20201222081743545.png\"/></li><li>比较经典的问题是最长公共子序列、最小编辑距离。</li><li>有关最长公共子序列的问题，可以参考以下文章：<a href=\"https://blog.csdn.net/WhereIsHeroFrom/article/details/114456565\">夜深人静写算法（二十一）- 最长公共子序列<br/> </a></li><li>有关最小编辑距离的问题，可以参考以下文章：<a href=\"https://blog.csdn.net/WhereIsHeroFrom/article/details/114456738\">夜深人静写算法（二十二）- 最小编辑距离</a></li></ul>\n<h3><a id=\"32D1D_401\"></a>3、2D/1D</h3>\n<ul><li><span class=\"katex--display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          d\n         \n         \n          [\n         \n         \n          i\n         \n         \n          ]\n         \n         \n          [\n         \n         \n          j\n         \n         \n          ]\n         \n         \n          =\n         \n         \n          w\n         \n         \n          (\n         \n         \n          i\n         \n         \n          ,\n         \n         \n          j\n         \n         \n          )\n         \n         \n          +\n         \n         \n          o\n         \n         \n          p\n         \n         \n          t\n         \n         \n          (\n         \n         \n          d\n         \n         \n          [\n         \n         \n          i\n         \n         \n          ]\n         \n         \n          [\n         \n         \n          k\n         \n         \n          −\n         \n         \n          1\n         \n         \n          ]\n         \n         \n          +\n         \n         \n          d\n         \n         \n          [\n         \n         \n          k\n         \n         \n          ]\n         \n         \n          [\n         \n         \n          j\n         \n         \n          ]\n         \n         \n          )\n         \n        \n        \n         d[i][j] = w(i, j) + opt( d[i][k-1] + d[k][j] )\n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right: 0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.02691em;\">w</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.05724em;\">j</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03148em;\">k</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right: 0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span></span></span></span></span></span></li><li>区间模型常用方程，如图所示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2020122208280319.png\"/></li><li>另外一种常用的 2D/1D 的方程为：</li><li><span class=\"katex--display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          d\n         \n         \n          [\n         \n         \n          i\n         \n         \n          ]\n         \n         \n          [\n         \n         \n          j\n         \n         \n          ]\n         \n         \n          =\n         \n         \n          o\n         \n         \n          p\n         \n         \n          t\n         \n         \n          (\n         \n         \n          d\n         \n         \n          [\n         \n         \n          i\n         \n         \n          −\n         \n         \n          1\n         \n         \n          ]\n         \n         \n          [\n         \n         \n          k\n         \n         \n          ]\n         \n         \n          +\n         \n         \n          w\n         \n         \n          (\n         \n         \n          i\n         \n         \n          ,\n         \n         \n          j\n         \n         \n          ,\n         \n         \n          k\n         \n         \n          )\n         \n         \n          ∣\n         \n         \n          k\n         \n         \n          &lt;\n         \n         \n          j\n         \n         \n          )\n         \n        \n        \n         d[i][j] = opt( d[i-1][k] + w(i, j, k) | k &lt; j ) \n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right: 0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03148em;\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.02691em;\">w</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.05724em;\">j</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.05724em;\">j</span><span class=\"mclose\">)</span></span></span></span></span></span></li><li>\n<ul><li>区间模型的详细内容可以参考以下这篇文章：<a href=\"https://blog.csdn.net/WhereIsHeroFrom/article/details/115292471\">夜深人静写算法（二十七）- 区间DP</a></li></ul> </li></ul>\n<h3><a id=\"42D2D_408\"></a>4、2D/2D</h3>\n<ul><li><span class=\"katex--display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          d\n         \n         \n          [\n         \n         \n          i\n         \n         \n          ]\n         \n         \n          [\n         \n         \n          j\n         \n         \n          ]\n         \n         \n          =\n         \n         \n          o\n         \n         \n          p\n         \n         \n          t\n         \n         \n          (\n         \n         \n          d\n         \n         \n          [\n         \n         \n          \n           i\n          \n          \n           ′\n          \n         \n         \n          ]\n         \n         \n          [\n         \n         \n          \n           j\n          \n          \n           ′\n          \n         \n         \n          ]\n         \n         \n          +\n         \n         \n          w\n         \n         \n          (\n         \n         \n          \n           i\n          \n          \n           ′\n          \n         \n         \n          ,\n         \n         \n          \n           j\n          \n          \n           ′\n          \n         \n         \n          ,\n         \n         \n          i\n         \n         \n          ,\n         \n         \n          j\n         \n         \n          )\n         \n         \n          ∣\n         \n         \n          0\n         \n         \n          &lt;\n         \n         \n          =\n         \n         \n          \n           i\n          \n          \n           ′\n          \n         \n         \n          &lt;\n         \n         \n          i\n         \n         \n          ,\n         \n         \n          0\n         \n         \n          &lt;\n         \n         \n          =\n         \n         \n          \n           j\n          \n          \n           ′\n          \n         \n         \n          &lt;\n         \n         \n          j\n         \n         \n          )\n         \n        \n        \n         d[i][j] = opt( d[i'][j'] + w(i', j', i, j) | 0 &lt;= i' &lt; i, 0 &lt;= j' &lt; j)\n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right: 0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1.05189em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.801892em;\"><span class=\"\" style=\"top: -3.113em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right: 0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.801892em;\"><span class=\"\" style=\"top: -3.113em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1.05189em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.02691em;\">w</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.801892em;\"><span class=\"\" style=\"top: -3.113em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right: 0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.801892em;\"><span class=\"\" style=\"top: -3.113em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.05724em;\">j</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">&lt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.36687em; vertical-align: 0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.840992em; vertical-align: -0.0391em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.801892em;\"><span class=\"\" style=\"top: -3.113em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.85396em; vertical-align: -0.19444em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">&lt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.36687em; vertical-align: 0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.996332em; vertical-align: -0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right: 0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.801892em;\"><span class=\"\" style=\"top: -3.113em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.05724em;\">j</span><span class=\"mclose\">)</span></span></span></span></span></span></li><li>如图所示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20201222083216590.png\"/></li><li>常见于二维的迷宫问题，由于复杂度比较大，所以一般配合数据结构优化，如线段树、树状数组等。</li><li>对于一个tD/eD 的动态规划问题，在不经过任何优化的情况下，可以粗略得到一个时间复杂度是<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         O\n        \n        \n         (\n        \n        \n         \n          n\n         \n         \n          \n           t\n          \n          \n           +\n          \n          \n           e\n          \n         \n        \n        \n         )\n        \n       \n       \n        O(n^ {t+e})\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1.04356em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.793556em;\"><span class=\"\" style=\"top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">t</span><span class=\"mbin mtight\">+</span><span class=\"mord mathdefault mtight\">e</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span>，空间复杂度是<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         O\n        \n        \n         (\n        \n        \n         \n          n\n         \n         \n          t\n         \n        \n        \n         )\n        \n       \n       \n        O(n^t)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1.04356em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.793556em;\"><span class=\"\" style=\"top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span> 的算法，大多数情况下空间复杂度是很容易优化的，难点在于时间复杂度，后续章节将详细讲解各种情况下的动态规划优化算法。</li></ul>\n<h2><a id=\"3_415\"></a>3）计算几何</h2>\n<ul><li>计算几何的问题是代码量最大的。它是计算机科学的一个分支，以往的解析几何，是用代数的方法，建立坐标系去解决问题，但是很多时候需要付出一些代价，比如精度误差，而计算几何更多的是从几何角度，用向量的方法来尽量减少精度误差，例如：将除法转化为乘法、避免三角函数等近似运算 等等。</li><li>如果一个比赛中，有一道计算几何的题，那么至少，它不会是一道水题。</li></ul>\n<h3><a id=\"1double__float_418\"></a>1、double 代替 float</h3>\n<ul><li>c++ 中 double 的精度高于 float，对精度要求较高的问题，务必采用 double；</li></ul>\n<h3><a id=\"2_420\"></a>2、浮点数判定</h3>\n<ul><li>由于浮点数（小数）中是有无理数的，即无限不循环小数，也就是小数点后的位数是无限的，在计算机存储的时候不可能全部存下来，一定是近似的存储的，所以浮点数一定是存在精度误差的（实际上，就算是有理数，也是存在误差的，这和计算机存储机制有关，这里不再展开，有兴趣可以参见我博客的文章：<a href=\"https://blog.csdn.net/WhereIsHeroFrom/article/details/110609492\">C++ 浮点数精度判定</a>）；</li><li>两个浮点数是否相等，可以采用两数相减的绝对值小于某个精度来实现：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> eps <span class=\"token operator\">=</span> <span class=\"token number\">1e-8</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">EQ</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> eps<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>并且可以用一个三值函数来确定某个数是零、大于零还是小于零：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">threeValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> eps<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> d <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"3_438\"></a>3、负零判定</h3>\n<ul><li>因为精度误差的存在，所以在输出的时候一定要注意，避免输出 -0.00：</li></ul>\n<pre><code class=\"prism language-cpp\">    <span class=\"token keyword\">double</span> v <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">0.0000000001</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.2lf\\n\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>避免方法是先通过三值函数确定实际值是否为0，如果是0，则需要取完绝对值后再输出：</li></ul>\n<pre><code class=\"prism language-cpp\">    <span class=\"token keyword\">double</span> v <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">0.0000000001</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">threeValue</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        v <span class=\"token operator\">=</span> <span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.2lf\\n\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"4_453\"></a>4、避免三角函数、对数、开方、除法等</h3>\n<ul><li>c++ 三角函数运算方法采用的是 <strong>CORDIC算法</strong>，一种利用迭代的方式进行求解的算法，其中还用到了开方运算，所以实际的算力消耗还是很大的，在实际求解问题的过程中，能够避免不用就尽量不用。</li><li>除法运算会带来精度误差，所以能够转换成乘法的也尽量转换为乘法运算。</li></ul>\n<h3><a id=\"5_457\"></a>5、系统性的学习</h3>\n<blockquote>\n<p><strong>基础知识</strong>：点、向量、叉乘、点乘、旋转、线段、线段判交、三角形面积；<br/> <strong>进阶知识</strong>：多边形面积、凸多边形判定、点在多边形内判定；<br/> <strong>相关算法</strong>：二维凸包、三维凸包、旋转卡壳、多边形面积交、多边形面积并、多边形面积异或、多边形和圆的面积交、半平面交、最小覆盖圆、最小包围球、模拟退火。</p>\n</blockquote>\n<ul><li>学习计算几何，最好是系统性的，刷题的过程中不断提炼出自己的模板。</li></ul>\n<h2><a id=\"4_463\"></a>4）数论</h2>\n<ul><li>刷题的时候遇到不会的数论题，真的是很揪心，从头学起吧，内容实在是太多了，每个知识点都要证明吃透，不然下次遇到还是不会；不学吧，又不甘心，就是单纯的想把这个题过了，真是进退两难！</li><li>数论对一个人的数学思维要求较高，但是一般也是一些固定的模式，所以把模板整理出来很重要。</li><li>当然，数论也有简单问题，一般先做一些入门题提升信心。</li></ul>\n<h3><a id=\"1_467\"></a>1、数论入门</h3>\n<ul><li>主要是一些基本概念，诸如：</li><li>整除性、素数与合数、素数判定、素数筛选法、因数分解、算术基本定理、因子个数、因子和、最大公约数 (GCD) 和 最小公倍数 (LCM)、辗转相除、同余、模运算、快速幂取模、循环节；</li></ul>\n<h3><a id=\"2_470\"></a>2、数论四大定理</h3>\n<ul><li>这四个定理学完，可以KO很多题：</li><li>欧拉定理、中国剩余定理、费马小定理、威尔逊定理</li></ul>\n<h3><a id=\"3_473\"></a>3、数论进阶</h3>\n<ul><li>系统性的学习，基本也就这些内容了：</li><li>扩展欧几里得、逆元、欧拉函数、同余方程组、扩展欧拉定理、RSA、卢卡斯定理、整数分块、狄利克雷卷积、莫比乌斯反演、大数判素、大数因子分解、大步小步离散对数等等。</li></ul>\n<hr/>\n<ul><li>今天先讲这么多吧。</li><li>如果还有不懂的问题，可以 <font color=\"ffcf00\"><b>「 想方设法 」</b></font>找到作者的<font color=\"2290ff\"><b>「 联系方式 」 </b></font> ，随时线上沟通。</li></ul>\n<hr/>\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/20210719231917561.gif#pic_center\"/><br/>   相信看我文章的大多数都是<font color=\"FF0500\"><b>「 大学生 」</b></font>，能上大学的都是<font color=\"FFa700\"><b>「 精英 」</b></font>，那么我们自然要<font color=\"ffd700\"><b>「 精益求精 」</b></font>，如果你还是<font color=\"229034\"><b>「 大一 」</b></font>，那么太好了，你拥有大把时间，当然你可以选择<font color=\"13ae01\"><b>「 刷剧 」</b></font>，然而，<font color=\"2290ff\"><b>「 学好算法 」</b></font>，三年后的你自然<font color=\"1300f1\"><b>「 不能同日而语 」</b></font>。<br/>   那么这里，我整理了<font color=\"FF0500\"><b>「 几十个基础算法 」</b></font> 的分类，点击开启： </p>\n<center>\n<a href=\"https://docs.qq.com/mind/DU01SVGpab2tWdlNj\"><font color=\"2290ff\"><b>🌌《<u>算法入门指引</u>》🌌</b></font></a>\n</center>\n<br/>  如果链接被屏蔽，或者有权限问题，可以私聊作者解决。\n<br/>   大致题集一览：\n<br/>\n<img alt=\"\" src=\"..\\..\\static\\image\\b2f5a8c71e8649bbaa4a384b59486cd7.png\"/>\n<br/>\n<img alt=\"\" src=\"..\\..\\static\\image\\da37df753a5542c49b76d1746c529684.png\"/>\n<br/>\n<img alt=\"\" src=\"..\\..\\static\\image\\fcbb287b787945df848aaa52cd7267d4.png\"/>\n<br/>\n<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\777948b34a264cb98e7cbed2030ee677.png\"/>\n<br/>\n<img alt=\"\" src=\"..\\..\\static\\image\\910dfdee56d048918a35c07f62857700.png\"/>\n<br/>\n<img alt=\"\" src=\"..\\..\\static\\image\\031ee2fc20ae4234aad3e67744204eac.png\"/>\n<br/>\n<img alt=\"\" src=\"..\\..\\static\\image\\e32796858c274962bb3c85ca35b5ff55.png\"/>\n<br/>\n<img alt=\"\" src=\"..\\..\\static\\image\\9b625c1372bc41a99b626bd5b0e29486.png\"/>\n<p></p>\n<p>  为了让这件事情变得有趣，以及<font color=\"02eff0\"><b>「 照顾初学者 」</b></font>，目前题目只开放最简单的算法 <font color=\"FF4500\"><b>「 枚举系列 」</b></font> （包括：<strong>线性枚举、双指针、前缀和、二分枚举、三分枚举</strong>），当有 一半成员刷完 <font color=\"FF4500\"><b>「 枚举系列 」</b></font> 的所有题以后，会开放下个章节，等这套题全部刷完，你还在群里，那么你就会成为<font color=\"2290ff\"><b>「 夜深人静写算法 」专家团</b></font> 的一员。<br/>   不要小看这个专家团，三年之后，你将会是别人 <font color=\"FF0500\"><b>望尘莫及</b></font> 的存在。如果要加入，可以联系我，考虑到大家都是学生，<font color=\"ffd700\"><b> 没有「 主要经济来源 」</b></font>，在你成为神的路上，<font color=\"220ff0\"><b>「 不会索取任何 」</b></font>。</p>\n<hr/>\n<blockquote>\n<center>\n<font color=\"f7630c\"><b>🔥让天下没有难学的算法🔥</b></font>\n</center>\n<br/>\n<center>\n<font color=\"FFD700\">C语言免费动漫教程，和我一起打卡！</font>\n</center>\n<center>\n<a href=\"https://blog.csdn.net/whereisherofrom/category_11131373.html\"><font color=\"FFD700\"><b>🌞《<u>光天化日学C语言</u>》🌞</b></font></a>\n</center>\n<br/>\n<center>\n<font color=\"FF4500\">入门级C语言真题汇总</font>\n</center>\n<center>\n<a href=\"https://blog.csdn.net/whereisherofrom/category_11158834.html\"><font color=\"FF4500\"><b>🧡《<u>C语言入门100例</u>》🧡</b></font></a>\n</center>\n<br/>\n<center>\n<font color=\"13ae01\">几张动图学会一种数据结构</font>\n</center>\n<center>\n<a href=\"https://blog.csdn.net/whereisherofrom/category_11227297.html\"><font color=\"13ae01\"><b>🌳《<u>画解数据结构</u>》🌳 </b></font></a>\n</center>\n<br/>\n<center>\n<font color=\"2290ff\">组团学习，抱团生长</font>\n</center>\n<center>\n<a href=\"https://docs.qq.com/mind/DU01SVGpab2tWdlNj\"><font color=\"2290ff\"><b>🌌《<u>算法入门指引</u>》🌌</b></font></a>\n</center>\n<br/>\n<center>\n<font color=\"886ce4\">竞赛选手金典图文教程</font>\n</center>\n<center>\n<a href=\"https://blog.csdn.net/whereisherofrom/category_9273531.html\"><font color=\"886ce4\"><b>💜《<u>夜深人静写算法</u>》💜</b></font></a>\n</center>   这篇文章的主要目的是讲解二叉搜索树的一些基础概念，以及和二叉搜索树相关的一些经典算法。但是实际学习过程还是需要看个人的毅力和坚持。下图代表的是 LeetCode 经典的二叉搜索树的题集，其中树是很重要的一个章节，涉及了诸多算法，希望可以供读者参考和学习。 \n <p><img alt=\"\" src=\"..\\..\\static\\image\\ed570df6f86c4ba992751e0a9a13aff1.png\"/></p>\n</blockquote>\n<h1><a id=\"_514\"></a>粉丝专属福利</h1>\n<p><span id=\"jump99\"></span></p>\n<blockquote>\n<p><strong>语言入门</strong>：<a href=\"https://pan.baidu.com/s/1xLAWFd-sga7LQ8KFWbwwnQ\">《光天化日学C语言》(示例代码) </a><br/> <strong>语言训练</strong>：<a href=\"https://pan.baidu.com/s/1OvpKXh0nproMophGFnhdJQ\">《C语言入门100例》试用版</a><br/> <strong>数据结构</strong>：<a href=\"https://pan.baidu.com/s/1aGa5hYppG_1fDZF4H4xgYw\">《画解数据结构》源码</a><br/> <strong>算法入门</strong>：<a href=\"https://docs.qq.com/mind/DU01SVGpab2tWdlNj\">《算法入门》指引</a><br/> <strong>算法进阶</strong>：<a href=\"https://pan.baidu.com/s/1OvFw9KzKVf9LpwpgmWCkMA\">《夜深人静写算法》算法模板</a></p>\n</blockquote>\n<p>   </p>\n<center>\n 👇🏻\n <strong>验证码</strong> 可通过搜索下方 \n <strong>公众号</strong> 获取👇🏻\n</center>\n<p></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 1, "csharp": 0, "python": 1, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2021-09-30 05:36:45", "summary": "本文已收录于专栏《夜深人静写算法》前言看到太多爆肝熬夜整合的内容，又是几万字，又是爆肝，我也来试试看能不能扛得住。试完后发现，果然还是扛不住啊。但是既然整理完了，那就把我的算法学习路线发出来吧，我把整"}