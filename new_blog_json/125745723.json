{"blogid": "125745723", "writerAge": "码龄1年", "writerBlogNum": "86", "writerCollect": "1147", "writerComment": "1706", "writerFan": "4316", "writerGrade": "6级", "writerIntegral": "7201", "writerName": "Fly upward", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125745723.jpg", "writerRankTotal": "2245", "writerRankWeekly": "1799", "writerThumb": "2039", "writerVisitNum": "49863", "blog_read_count": "2980", "blog_time": "已于 2022-07-18 16:46:55 修改", "blog_title": "Spring 通过注解来存储和读取对象", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"1.%20%E5%88%9B%E5%BB%BASpring%20%E9%A1%B9%E7%9B%AE-toc\" style=\"margin-left:0px;\"><a href=\"#1.%20%E5%88%9B%E5%BB%BASpring%20%E9%A1%B9%E7%9B%AE\">1. 创建Spring 项目</a></p>\n<p id=\"1.1%C2%A0%E5%88%9B%E5%BB%BA%E2%BC%80%E4%B8%AA%20Maven%20%E9%A1%B9%E2%BD%AC-toc\" style=\"margin-left:40px;\"><a href=\"#1.1%C2%A0%E5%88%9B%E5%BB%BA%E2%BC%80%E4%B8%AA%20Maven%20%E9%A1%B9%E2%BD%AC\">1.1 创建⼀个 Maven 项⽬</a></p>\n<p id=\"%C2%A01.2%20%E6%B7%BB%E5%8A%A0%20Spring%20%E6%A1%86%E6%9E%B6%E6%94%AF%E6%8C%81-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A01.2%20%E6%B7%BB%E5%8A%A0%20Spring%20%E6%A1%86%E6%9E%B6%E6%94%AF%E6%8C%81\"> 1.2 添加 Spring 框架支持</a></p>\n<p id=\"%C2%A01.3%20%E6%B7%BB%E5%8A%A0%E5%90%AF%E5%8A%A8%E7%B1%BB-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A01.3%20%E6%B7%BB%E5%8A%A0%E5%90%AF%E5%8A%A8%E7%B1%BB\"> 1.3 添加启动类</a></p>\n<p id=\"%C2%A02.%20%E5%AD%98%E5%82%A8%20Bean%20%E5%AF%B9%E8%B1%A1-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A02.%20%E5%AD%98%E5%82%A8%20Bean%20%E5%AF%B9%E8%B1%A1\">2. 存储 Bean 对象</a></p>\n<p id=\"2.1%C2%A0%E5%88%9B%E5%BB%BABean%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#2.1%C2%A0%E5%88%9B%E5%BB%BABean%C2%A0\">2.1 创建Bean </a></p>\n<p id=\"2.2%C2%A0%E9%85%8D%E7%BD%AE%C2%A0spring-config.xml-toc\" style=\"margin-left:40px;\"><a href=\"#2.2%C2%A0%E9%85%8D%E7%BD%AE%C2%A0spring-config.xml\">2.2 配置 spring-config.xml</a></p>\n<p id=\"3.%20%E8%8E%B7%E5%8F%96%E5%B9%B6%E4%BD%BF%E7%94%A8%C2%A0Bean%20%E5%AF%B9%E8%B1%A1-toc\" style=\"margin-left:0px;\"><a href=\"#3.%20%E8%8E%B7%E5%8F%96%E5%B9%B6%E4%BD%BF%E7%94%A8%C2%A0Bean%20%E5%AF%B9%E8%B1%A1\">3. 获取并使用 Bean 对象</a></p>\n<p id=\"3.1%20%E5%88%9B%E5%BB%BASprign%20%E4%B8%8A%E4%B8%8B%E6%96%87-toc\" style=\"margin-left:40px;\"><a href=\"#3.1%20%E5%88%9B%E5%BB%BASprign%20%E4%B8%8A%E4%B8%8B%E6%96%87\">3.1 创建Sprign 上下文</a></p>\n<p id=\"%C2%A03.2%C2%A0%C2%A0%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E7%9A%84%20Bean%20%E5%AF%B9%E8%B1%A1-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A03.2%C2%A0%C2%A0%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E7%9A%84%20Bean%20%E5%AF%B9%E8%B1%A1\"> 3.2  获取指定的 Bean 对象</a></p>\n<p id=\"%C2%A03.3%20%E4%BD%BF%E7%94%A8Bean-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A03.3%20%E4%BD%BF%E7%94%A8Bean\"> 3.3 使用Bean</a></p>\n<p id=\"4.%E6%80%BB%E7%BB%93-toc\" style=\"margin-left:0px;\"><a href=\"#4.%E6%80%BB%E7%BB%93\">4.总结</a></p>\n<p id=\"%E6%9B%B4%E7%AE%80%E5%8D%95%E7%9A%84%E8%8E%B7%E5%8F%96%E5%92%8C%E5%AD%98%E5%82%A8%E5%AF%B9%E8%B1%A1-toc\" style=\"margin-left:0px;\"><a href=\"#%E6%9B%B4%E7%AE%80%E5%8D%95%E7%9A%84%E8%8E%B7%E5%8F%96%E5%92%8C%E5%AD%98%E5%82%A8%E5%AF%B9%E8%B1%A1\">更简单的获取和存储对象</a></p>\n<p id=\"1.%E9%85%8D%E7%BD%AE%E6%89%AB%E6%8F%8F%E8%B7%AF%E5%BE%84-toc\" style=\"margin-left:0px;\"><a href=\"#1.%E9%85%8D%E7%BD%AE%E6%89%AB%E6%8F%8F%E8%B7%AF%E5%BE%84\">5.配置扫描路径</a></p>\n<p id=\"2.%E6%B7%BB%E5%8A%A0%E6%B3%A8%E8%A7%A3%E5%AD%98%E5%82%A8%20bean%E5%AF%B9%E8%B1%A1-toc\" style=\"margin-left:0px;\"><a href=\"#2.%E6%B7%BB%E5%8A%A0%E6%B3%A8%E8%A7%A3%E5%AD%98%E5%82%A8%20bean%E5%AF%B9%E8%B1%A1\">6.添加注解存储 bean对象</a></p>\n<p id=\"2.1%20%40Controller%EF%BC%88%E6%8E%A7%E5%88%B6%E5%99%A8%E5%AD%98%E5%82%A8%EF%BC%89%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#2.1%20%40Controller%EF%BC%88%E6%8E%A7%E5%88%B6%E5%99%A8%E5%AD%98%E5%82%A8%EF%BC%89%C2%A0\">6.1 @Controller（控制器存储） </a></p>\n<p id=\"%C2%A02.2%20%40Service%20%EF%BC%88%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AD%98%E5%82%A8%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A02.2%20%40Service%20%EF%BC%88%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AD%98%E5%82%A8%EF%BC%89\"> 6.2 @Service （服务器存储）</a></p>\n<p id=\"2.3%20%40Repository%20%EF%BC%88%E4%BB%93%E5%BA%93%E5%AD%98%E5%82%A8%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#2.3%20%40Repository%20%EF%BC%88%E4%BB%93%E5%BA%93%E5%AD%98%E5%82%A8%EF%BC%89\">6.3 @Repository （仓库存储）</a></p>\n<p id=\"2.4%20%40Component%20%EF%BC%88%E7%BB%84%E4%BB%B6%E5%AD%98%E5%82%A8%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#2.4%20%40Component%20%EF%BC%88%E7%BB%84%E4%BB%B6%E5%AD%98%E5%82%A8%EF%BC%89\">6.4 @Component （组件存储）</a></p>\n<p id=\"2.5%C2%A0%40Configuration%EF%BC%88%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A8%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#2.5%C2%A0%40Configuration%EF%BC%88%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A8%EF%BC%89\">6.5 @Configuration（配置存储）</a></p>\n<p id=\"%C2%A02.6%20%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E4%BA%94%E5%A4%A7%E6%B3%A8%E8%A7%A3-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A02.6%20%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E4%BA%94%E5%A4%A7%E6%B3%A8%E8%A7%A3\"> 6.6 为什么需要五大注解</a></p>\n<p id=\"2.7%20%E6%96%B9%E6%B3%95%E6%B3%A8%E8%A7%A3%20%40Bean-toc\" style=\"margin-left:40px;\"><a href=\"#2.7%20%E6%96%B9%E6%B3%95%E6%B3%A8%E8%A7%A3%20%40Bean\">6.7 方法注解 @Bean</a></p>\n<p id=\"6.7.1%20%E6%96%B9%E6%B3%95%E6%B3%A8%E8%A7%A3%E9%85%8D%E5%90%88%E7%B1%BB%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8-toc\" style=\"margin-left:40px;\"><a href=\"#6.7.1%20%E6%96%B9%E6%B3%95%E6%B3%A8%E8%A7%A3%E9%85%8D%E5%90%88%E7%B1%BB%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8\">6.7.1 方法注解配合类注解使用</a></p>\n<p id=\"2.7.2%20%E9%87%8D%E5%91%BD%E5%90%8DBean-toc\" style=\"margin-left:80px;\"><a href=\"#2.7.2%20%E9%87%8D%E5%91%BD%E5%90%8DBean\">6.7.2 重命名Bean</a></p>\n<p id=\"%C2%A03.%E8%8E%B7%E5%8F%96%20Bean%20%E5%AF%B9%E8%B1%A1-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A03.%E8%8E%B7%E5%8F%96%20Bean%20%E5%AF%B9%E8%B1%A1\">8.获取 Bean 对象</a></p>\n<p id=\"3.1%20%E5%B1%9E%E6%80%A7%E6%B3%A8%E5%85%A5-toc\" style=\"margin-left:40px;\"><a href=\"#3.1%20%E5%B1%9E%E6%80%A7%E6%B3%A8%E5%85%A5\">8.1 属性注入</a></p>\n<p id=\"%C2%A03.2%20%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E6%B3%A8%E5%85%A5-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A03.2%20%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E6%B3%A8%E5%85%A5\"> 8.2 构造方法注入</a></p>\n<p id=\"3.3%20Setter%20%E6%B3%A8%E5%85%A5-toc\" style=\"margin-left:40px;\"><a href=\"#3.3%20Setter%20%E6%B3%A8%E5%85%A5\">8.3 Setter 注入</a></p>\n<p id=\"3.4%C2%A0%E4%B8%89%E7%A7%8D%E6%B3%A8%E2%BC%8A%E4%BC%98%E7%BC%BA%E7%82%B9%E5%88%86%E6%9E%90-toc\" style=\"margin-left:40px;\"><a href=\"#3.4%C2%A0%E4%B8%89%E7%A7%8D%E6%B3%A8%E2%BC%8A%E4%BC%98%E7%BC%BA%E7%82%B9%E5%88%86%E6%9E%90\">8.4 三种注⼊优缺点分析</a></p>\n<p id=\"3.5%20%40Resource%EF%BC%9A%E5%8F%A6%E4%B8%80%E7%A7%8D%E6%B3%A8%E5%85%A5%E5%85%B3%E9%94%AE%E5%AD%97-toc\" style=\"margin-left:40px;\"><a href=\"#3.5%20%40Resource%EF%BC%9A%E5%8F%A6%E4%B8%80%E7%A7%8D%E6%B3%A8%E5%85%A5%E5%85%B3%E9%94%AE%E5%AD%97\">8.5 @Resource：另一种注入关键字</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h1 id=\"1.%20%E5%88%9B%E5%BB%BASpring%20%E9%A1%B9%E7%9B%AE\">1. 创建Spring 项目</h1>\n<p>1） 创建⼀个普通 Maven 项⽬。</p>\n<p>2.）添加 Spring 框架⽀持（spring-context、spring-beans）。</p>\n<p>3） 添加启动类。</p>\n<h2 id=\"1.1%C2%A0%E5%88%9B%E5%BB%BA%E2%BC%80%E4%B8%AA%20Maven%20%E9%A1%B9%E2%BD%AC\">1.1 创建⼀个 Maven 项⽬</h2>\n<p><img alt=\"\" height=\"630\" src=\"..\\..\\static\\image\\a2f37477d1534eb596cd8c6f2cab045c.png\" width=\"787\"/></p>\n<p></p>\n<p><img alt=\"\" height=\"641\" src=\"..\\..\\static\\image\\7fe2bc56acd74899bc360194c12542b8.png\" width=\"784\"/></p>\n<h2 id=\"%C2%A01.2%20%E6%B7%BB%E5%8A%A0%20Spring%20%E6%A1%86%E6%9E%B6%E6%94%AF%E6%8C%81\"> <strong>1</strong>.<strong>2 </strong>添加 Spring 框架支持</h2>\n<p>在项⽬的 pom.xml 中添加 Spring 框架的⽀持，xml 配置如下：</p>\n<pre><code class=\"language-XML\">   &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;\n            &lt;version&gt;5.2.3.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;\n            &lt;version&gt;5.2.3.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;</code></pre>\n<p>配置国内源</p>\n<p>将下面两个框都要勾选上</p>\n<p><img alt=\"\" height=\"770\" src=\"..\\..\\static\\image\\3c5d804510104153b7110ad665b5d283.png\" width=\"1065\"/></p>\n<p> <img alt=\"\" height=\"343\" src=\"..\\..\\static\\image\\e8004950bf924abaaada3b8d82770e24.png\" width=\"768\"/></p>\n<p> settings.xml 文件配置代码：</p>\n<pre><code class=\"language-XML\">&lt;mirrors&gt;\n   &lt;mirror&gt;\n        &lt;id&gt;alimaven&lt;/id&gt;\n        &lt;name&gt;aliyun maven&lt;/name&gt;\n        &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;\n        &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        \n      &lt;/mirror&gt;</code></pre>\n<p>修改位置如下</p>\n<p><img alt=\"\" height=\"296\" src=\"..\\..\\static\\image\\b4dbab5673da4caaa7d8483ecb52ff75.png\" width=\"749\"/></p>\n<p> 配置好之后，如果想下一次的项目也使用该国内源，则需下面的配置</p>\n<p><img alt=\"\" height=\"462\" src=\"..\\..\\static\\image\\e79b6fb5accd4074bfaa3f5e22660720.png\" width=\"698\"/></p>\n<p> <img alt=\"\" height=\"707\" src=\"..\\..\\static\\image\\291a4e3b603444809ed9ba04bd690884.png\" width=\"962\"/></p>\n<h2 id=\"%C2%A01.3%20%E6%B7%BB%E5%8A%A0%E5%90%AF%E5%8A%A8%E7%B1%BB\"> 1.3 添加启动类</h2>\n<p>最后在创建好的项⽬ java ⽂件夹下创建⼀个启动类，包含 main ⽅法即可</p>\n<p><img alt=\"\" height=\"569\" src=\"..\\..\\static\\image\\01e10f6f3a944c07b16cdb7b83906c88.png\" width=\"772\"/></p>\n<h1 id=\"%C2%A02.%20%E5%AD%98%E5%82%A8%20Bean%20%E5%AF%B9%E8%B1%A1\">2. 存储 Bean 对象</h1>\n<p>存储 Bean 分为以下 3步：</p>\n<p>1）存储 Bean 之前，先得有 Bean 才⾏，因此先要创建⼀个 Bean。</p>\n<p>2) 配置⽂件 spring-config.xml</p>\n<p>3）将创建的 Bean 注册到 Spring 容器中。</p>\n<h2 id=\"2.1%C2%A0%E5%88%9B%E5%BB%BABean%C2%A0\">2.1 创建Bean </h2>\n<p>Bean 就是 Java 语⾔中的⼀个普通对象，实现代码如下：</p>\n<pre><code class=\"language-java\">public class User {\n    public static void say(String name){\n        System.out.println(\"hello \" + name);\n    }\n}</code></pre>\n<h2 id=\"2.2%C2%A0%E9%85%8D%E7%BD%AE%C2%A0spring-config.xml\">2.2 配置 spring-config.xml</h2>\n<p><img alt=\"\" height=\"415\" src=\"..\\..\\static\\image\\2b1df2451ad745fcb8b1a7d27089993d.png\" width=\"844\"/></p>\n<p>在文件中添加以下代码</p>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"&gt;\n   \n&lt;/beans&gt;</code></pre>\n<p>再将 User 对象注册到spring-config.xml 中就可以，具体操作是在 &lt;beans&gt; 中添加如下配置：</p>\n<p><img alt=\"\" height=\"263\" src=\"..\\..\\static\\image\\d7834bfe2f4f4192b14b3480fed1ee1d.png\" width=\"722\"/></p>\n<p></p>\n<h1 id=\"3.%20%E8%8E%B7%E5%8F%96%E5%B9%B6%E4%BD%BF%E7%94%A8%C2%A0Bean%20%E5%AF%B9%E8%B1%A1\">3. 获取并使用 Bean 对象</h1>\n<p>获取并使⽤ Bean 对象，分为以下 3 步：</p>\n<p>1. 得到 Spring 上下⽂对象，因为对象都交给 Spring 管理了，所以获取对象要从 Spring 中获取，那么就得先得到 Spring 的上下⽂。</p>\n<p>2. 通过 Spring 上下⽂，获取某⼀个指定的 Bean 对象。</p>\n<p>3. 使⽤ Bean 对象。</p>\n<h2 id=\"3.1%20%E5%88%9B%E5%BB%BASprign%20%E4%B8%8A%E4%B8%8B%E6%96%87\">3.1 创建Sprign 上下文</h2>\n<p>Spring 上下⽂对象可使⽤ ApplicationContext，代码如下</p>\n<pre><code class=\"language-java\">public static void main(String[] args) {\n        ApplicationContext context =\n                new ClassPathXmlApplicationContext(\"spring-config.xml\");\n}</code></pre>\n<p><img alt=\"\" height=\"298\" src=\"..\\..\\static\\image\\66e31a7028654477843780cb9d4b021b.png\" width=\"1024\"/></p>\n<p>除了 ApplicationContext 之外，我们还可以使⽤ BeanFactory 来作为 Spring 的上下⽂，如下代码所示</p>\n<pre><code class=\"language-java\"> // 1.得到 bean 工厂\n       BeanFactory factory = new XmlBeanFactory(\n               new ClassPathResource(\"spring-config.xml\"));\n       // 2.获取 bean\n       User user = (User) factory.getBean(\"user\");\n        // 3.使用 bean\n       user.say(\"黄小小\");</code></pre>\n<p>ApplicationContext 和 BeanFactory 效果是⼀样的，ApplicationContext 属于 BeanFactory 的⼦类， 它们的区别如下</p>\n<blockquote>\n<p>1）继承关系和功能⽅⾯来说：Spring 容器有两个顶级的接⼝：BeanFactory 和ApplicationContext。</p>\n<p>其中 BeanFactory 提供了基础的访问容器的能⼒，⽽ ApplicationContext 属于 BeanFactory 的⼦类，它除了继承了 BeanFactory 的所有功能之外，它还拥有独特的特性，还添加了对国际化⽀持、资源访问⽀持、以及事件传播等⽅⾯的⽀持。</p>\n<p>2）从性能⽅⾯来说：ApplicationContext 是⼀次性加载并初始化所有的 Bean 对象，⽽ BeanFactory是需要那个才去加载那个，因此更加轻量。</p>\n</blockquote>\n<h2 id=\"%C2%A03.2%C2%A0%C2%A0%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E7%9A%84%20Bean%20%E5%AF%B9%E8%B1%A1\"> 3.2  获取指定的 Bean 对象</h2>\n<pre><code class=\"language-java\">         //2.根据上下文对象提供的方法获取到 bean\n        //User user = (User) context.getBean(\"user\");//与spring-config.xml 中的id 一致\n\n        //User user = context.getBean(User.class);//不需要强转，但不建议使用\n        User user = context.getBean(\"user\",User.class);//精准并不需要强转，推荐使用</code></pre>\n<p><img alt=\"\" height=\"126\" src=\"..\\..\\static\\image\\d946d5e94557472daab401adbc558d97.png\" width=\"631\"/></p>\n<p><img alt=\"\" height=\"270\" src=\"..\\..\\static\\image\\409e619ae67b48b1aa7849a2bbfcefc3.png\" width=\"707\"/></p>\n<p></p>\n<h2 id=\"%C2%A03.3%20%E4%BD%BF%E7%94%A8Bean\"> 3.3 使用Bean</h2>\n<pre><code class=\"language-java\">//3.使用\nuser.say(\"黄小小\");</code></pre>\n<p>总代码：</p>\n<pre><code class=\"language-java\">public class App {\n    public static void main(String[] args) {\n        //1.得到 spring 上下文对象\n        ApplicationContext context =\n                new ClassPathXmlApplicationContext(\"spring-config.xml\");\n        //2.根据上下文对象提供的方法获取到 bean\n        //User user = (User) context.getBean(\"user\");//与spring-config.xml 中的id 一致\n\n        //User user = context.getBean(User.class);//不需要强转，但不建议使用\n        User user = context.getBean(\"user\",User.class);//精准并不需要强转，推荐使用\n        //3.使用\n        user.say(\"黄小小\");\n    }\n}</code></pre>\n<p><img alt=\"\" height=\"162\" src=\"..\\..\\static\\image\\2d0f6ccb03954e748017df08fed4ce63.png\" width=\"691\"/></p>\n<h1 id=\"4.%E6%80%BB%E7%BB%93\">4.总结</h1>\n<p><img alt=\"\" height=\"532\" src=\"..\\..\\static\\image\\e1dd65ec47954ef79686b7491fd20c59.png\" width=\"690\"/></p>\n<h1 id=\"%E6%9B%B4%E7%AE%80%E5%8D%95%E7%9A%84%E8%8E%B7%E5%8F%96%E5%92%8C%E5%AD%98%E5%82%A8%E5%AF%B9%E8%B1%A1\">更简单的获取和存储对象</h1>\n<h1 id=\"1.%E9%85%8D%E7%BD%AE%E6%89%AB%E6%8F%8F%E8%B7%AF%E5%BE%84\">5.配置扫描路径</h1>\n<div>\n<span style=\"color:#404040;\">想要将对象成功的存储到 Spring 中，我们需要配置⼀下存储对象的扫描包路径，只有被配置的包下的所有类，添加了注解才能被正确的识别并保存到 Spring 中。 </span>\n</div>\n<div></div>\n<div>\n<div>\n<span style=\"color:#404040;\">在 spring-config.xml 添加如下配置： </span>\n</div>\n<div>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:content=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd\"&gt;\n    &lt;content:component-scan base-package=\"com.beans\"&gt;&lt;/content:component-scan&gt;\n&lt;/beans&gt;</code></pre>\n<p><img alt=\"\" height=\"254\" src=\"..\\..\\static\\image\\7c2c290096104b1b84d273ba835d4dab.png\" width=\"1032\"/></p>\n<h1 id=\"2.%E6%B7%BB%E5%8A%A0%E6%B3%A8%E8%A7%A3%E5%AD%98%E5%82%A8%20bean%E5%AF%B9%E8%B1%A1\">6.添加注解存储 bean对象</h1>\n<div>\n<span style=\"color:#404040;\">想要将对象存储在 Spring 中，有两种注解类型可以实现： </span>\n</div>\n<blockquote>\n<div>\n<span style=\"color:#404040;\">1） </span>\n<span style=\"color:#404040;\">类注解：@Controller、@Service、@Repository、@Component、@Configuration。 </span>\n</div>\n<div>\n<span style=\"color:#404040;\">2） </span>\n<span style=\"color:#404040;\">⽅法注解：@Bean</span>\n</div>\n</blockquote>\n</div>\n</div>\n<h2 id=\"2.1%20%40Controller%EF%BC%88%E6%8E%A7%E5%88%B6%E5%99%A8%E5%AD%98%E5%82%A8%EF%BC%89%C2%A0\">6.1 @Controller（控制器存储） </h2>\n<div>\n<span style=\"color:#404040;\">使⽤ @Controller 存储 bean 的代码如下所示：</span>\n</div>\n<div>\n<span style=\"color:#404040;\">在要扫描的根路径（com.beans）下创建一个 </span>UserController 类\n</div>\n<div>\n<pre><code class=\"language-java\">import org.springframework.stereotype.Controller;\n\n@Controller//将对象存储到Spring中\npublic class UserController {\n    public void sayHi() {\n        System.out.println(\"hello controller\");\n    }\n}</code></pre>\n<div>\n<span style=\"color:#404040;\">在main 方法中用读取对象的⽅式来读取上⾯的 UserController 对象，如下代码所示</span>\n</div>\n<div>\n<pre><code class=\"language-java\">public class App {\n    public static void main(String[] args) {\n       //1. 先得到上下文对象\n        ApplicationContext context =\n                new ClassPathXmlApplicationContext(\"spring-config.xml\");\n\n        //2.得到bean\n        UserController controller = context.getBean(\"userController\",UserController.class);\n        //3.使用 bean\n        controller.sayHi();\n    }\n}</code></pre>\n<p>代码注入解释：</p>\n<p><img alt=\"\" height=\"363\" src=\"..\\..\\static\\image\\cb2b9f6100a041b1851563e946d0ba25.png\" width=\"779\"/></p>\n<p>获取结果</p>\n<p><img alt=\"\" height=\"208\" src=\"..\\..\\static\\image\\b72d3fa04cf84449b865b9f4e8ad7e11.png\" width=\"667\"/></p>\n<h2 id=\"%C2%A02.2%20%40Service%20%EF%BC%88%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AD%98%E5%82%A8%EF%BC%89\"> 6.2 @Service （服务器存储）</h2>\n<div>\n<span style=\"color:#404040;\">使⽤ @</span>Service\n   <span style=\"color:#404040;\"> 存储 bean 的代码如下所示：</span>\n</div>\n<div>\n<span style=\"color:#404040;\">在要扫描的根路径（com.beans）下创建一个 </span>UserService类\n  </div>\n<div>\n<pre><code class=\"language-java\">import org.springframework.stereotype.Service;\n\n@Service\npublic class UserService {\n    public void sayHi() {\n        System.out.println(\"hello service\");\n    }\n}</code></pre>\n<p><span style=\"color:#404040;\">在main 方法中用读取对象的⽅式来读取上⾯的 </span>UserService<span style=\"color:#404040;\"> 对象，如下代码所示</span></p>\n</div>\n<div>\n<pre><code class=\"language-java\">public class App {\n    public static void main(String[] args) {\n       //1. 先得到上下文对象\n        ApplicationContext context =\n                new ClassPathXmlApplicationContext(\"spring-config.xml\");\n\n        //2.得到bean\n        UserService service = context.getBean(\"userService\",UserService.class);\n        \n        //3.使用 bean\n        service.sayHi();\n    }\n}</code></pre>\n<h2 id=\"2.3%20%40Repository%20%EF%BC%88%E4%BB%93%E5%BA%93%E5%AD%98%E5%82%A8%EF%BC%89\">6.3 @Repository （仓库存储）</h2>\n<div>\n<span style=\"color:#404040;\">使⽤ @</span>Repository \n    <span style=\"color:#404040;\"> 存储 bean 的代码如下所示：</span>\n</div>\n<div>\n<span style=\"color:#404040;\">在要扫描的根路径（com.beans）下创建一个 </span>UserRepository 类\n   </div>\n<div>\n<pre><code class=\"language-java\">import org.springframework.stereotype.Repository;\n\n@Repository\npublic class UserRepository {\n    public void sayHi() {\n        System.out.println(\"hello repository\");\n    }\n}</code></pre>\n<p><span style=\"color:#404040;\">在main 方法中用读取对象的⽅式来读取上⾯的 UserController 对象，如下代码所示</span></p>\n<pre><code class=\"language-java\">public class App {\n    public static void main(String[] args) {\n       //1. 先得到上下文对象\n        ApplicationContext context =\n                new ClassPathXmlApplicationContext(\"spring-config.xml\");\n\n        //2.得到bean\n        UserRepository repository = context.getBean(\"userRepository\",UserRepository.class);\n          \n        //3.使用 bean\n          repository.sayHi();\n    }\n}</code></pre>\n<h2 id=\"2.4%20%40Component%20%EF%BC%88%E7%BB%84%E4%BB%B6%E5%AD%98%E5%82%A8%EF%BC%89\">6.4 @Component （组件存储）</h2>\n<div>\n<span style=\"color:#404040;\">使用 @</span>Component \n     <span style=\"color:#404040;\"> 存储 bean 的代码如下所示：</span>\n</div>\n<div>\n<span style=\"color:#404040;\">在要扫描的根路径（com.beans）下创建一个 </span>UserComponent 类\n    </div>\n<div>\n<pre><code class=\"language-java\">import org.springframework.stereotype.Component;\n\n@Component\npublic class UserComponent {\n    public void sayHi() {\n        System.out.println(\"hello component\");\n    }\n}</code></pre>\n<p><span style=\"color:#404040;\">在main 方法中用读取对象的⽅式来读取上⾯的 </span>UserComponent<span style=\"color:#404040;\"> 对象，如下代码所示</span></p>\n<pre><code class=\"language-java\">public class App {\n    public static void main(String[] args) {\n       //1. 先得到上下文对象\n        ApplicationContext context =\n                new ClassPathXmlApplicationContext(\"spring-config.xml\");\n\n        //2.得到bean\n        UserComponent component = context.getBean(\"userComponent\",UserComponent.class);\n       \n        //3.使用 bean\n        component.sayHi();\n    }\n}</code></pre>\n<h2 id=\"2.5%C2%A0%40Configuration%EF%BC%88%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A8%EF%BC%89\">6.5 <span style=\"color:#404040;\">@Configuration（配置存储）</span></h2>\n<p><span style=\"color:#404040;\">使用 @</span>Configuration <span style=\"color:#404040;\"> 存储 bean 的代码如下所示：</span></p>\n<div>\n<span style=\"color:#404040;\">在要扫描的根路径（com.beans）下创建一个 </span>UserConfig 类\n     </div>\n<div></div>\n</div>\n<div>\n<pre><code class=\"language-java\">@Configuration\npublic class UserConfig {\n    public void sayHi() {\n        System.out.println(\"hello Configuration\");\n    }\n}</code></pre>\n<p><span style=\"color:#404040;\">在main 方法中用读取对象的⽅式来读取上⾯的 </span>UserConfig<span style=\"color:#404040;\"> 对象，如下代码所示</span></p>\n<pre><code class=\"language-java\">public class App {\n    public static void main(String[] args) {\n       //1. 先得到上下文对象\n        ApplicationContext context =\n                new ClassPathXmlApplicationContext(\"spring-config.xml\");\n\n        //2.得到bean\n         UserConfig config = context.getBean(\"userConfig\",UserConfig.class);\n        \n        //3.使用 bean\n         config.sayHi();\n    }\n}</code></pre>\n<h2 id=\"%C2%A02.6%20%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E4%BA%94%E5%A4%A7%E6%B3%A8%E8%A7%A3\"> 6.6 为什么需要五大注解</h2>\n<p>让代码可读性提高，能直观的判断当前类的用途</p>\n<p><img alt=\"\" height=\"503\" src=\"..\\..\\static\\image\\ea8afa1b78f44c59a7fc0d23f8d1f31a.png\" width=\"674\"/></p>\n<div>\n<span style=\"color:#404040;\">查看 @Controller / @Service / @Repository / @Configuration 等注解的源码发现，</span>\n</div>\n<div>\n<img alt=\"\" height=\"267\" src=\"..\\..\\static\\image\\0e8f398a821a447b933771eb5e7e38aa.png\" width=\"580\"/>\n</div>\n<div></div>\n<div>\n<span style=\"color:#404040;\">这些注解⾥⾯都有⼀个注解 @Component，说明它们本身就是属于 @Component 的“⼦类。</span>\n</div>\n<div></div>\n<h2 id=\"2.7%20%E6%96%B9%E6%B3%95%E6%B3%A8%E8%A7%A3%20%40Bean\"><span style=\"color:#404040;\">6.7 方法注解 @Bean</span></h2>\n<h2 id=\"6.7.1%20%E6%96%B9%E6%B3%95%E6%B3%A8%E8%A7%A3%E9%85%8D%E5%90%88%E7%B1%BB%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8\"><span style=\"color:#404040;\">6.7.1 方法注解配合类注解使用</span></h2>\n<p><span style=\"color:#404040;\">1)创建一个 bean</span></p>\n<p><span style=\"color:#404040;\">在要扫描的根路径（com.beans）下创建一个 </span> UserBeans 类</p>\n<div>\n<span style=\"color:#404040;\">在 Spring 框架的设计中，⽅法注解 @Bean 要配合类注解才能将对象正常的存储到 Spring 容器中</span>\n</div>\n<pre><code class=\"language-java\">@Component\npublic class UserBeans {\n    @Bean\n    public User user1() {\n        User user = new User();\n        user.setId(1);\n        user.setName(\"黄小小\");\n        return user;\n    }\n}</code></pre>\n<p>然后创建一个User对象</p>\n<pre><code class=\"language-java\">public class User {\n    private int id;\n    private String name;\n\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"id=\" + id +\n                \", name='\" + name + '\\'' +\n                '}';\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}</code></pre>\n<p><span style=\"color:#404040;\">在main 方法中用读取对象的⽅式来读取上⾯的 </span>User<span style=\"color:#404040;\"> 对象，如下代码所示</span></p>\n<pre><code class=\"language-java\">public class App {\n    public static void main(String[] args) {\n       //1. 先得到上下文对象\n        ApplicationContext context =\n                new ClassPathXmlApplicationContext(\"spring-config.xml\");\n\n        User user = context.getBean(\"user1\",User.class);\n        System.out.println(user);\n    }\n}</code></pre>\n<p><img alt=\"\" height=\"224\" src=\"..\\..\\static\\image\\eb497920bd554d6c8fbe54ff7aa88925.png\" width=\"666\"/></p>\n<h3 id=\"2.7.2%20%E9%87%8D%E5%91%BD%E5%90%8DBean\">6.7.2 重命名Bean</h3>\n<p>当 User 类里面有多个对象时，可以通过<span style=\"color:#404040;\">设置 name 属性给 Bean 对象进⾏重命名操作，如下代码</span></p>\n</div>\n</div>\n</div>\n</div>\n</div>\n<pre><code class=\"language-java\">@Component\npublic class UserBeans {\n    @Bean(name = \"in\")\n    public User user1() {\n        User user1 = new User();\n        user1.setId(1);\n        user1.setName(\"黄小小\");\n        return user1;\n    }\n\n    @Bean(name = \"to\")\n    public User user2() {\n        User user2 = new User();\n        user2.setId(2);\n        user2.setName(\"杨通达\");\n        return user2;\n    }\n\n}</code></pre>\n<p> 通过使用 Bean 里面的 name 就可以获取对象了</p>\n<pre><code class=\"language-java\">public class App {\n    public static void main(String[] args) {\n       //1. 先得到上下文对象\n        ApplicationContext context =\n                new ClassPathXmlApplicationContext(\"spring-config.xml\");\n\n\n        User user1 = context.getBean(\"in\",User.class);\n        System.out.println(user1);\n        \n        User user2 = context.getBean(\"to\",User.class);\n        System.out.println(user2);\n    }\n}</code></pre>\n<p><img alt=\"\" height=\"187\" src=\"..\\..\\static\\image\\b44b71edd76d4ab3a08bfa85c737d2f4.png\" width=\"693\"/></p>\n<h1 id=\"%C2%A03.%E8%8E%B7%E5%8F%96%20Bean%20%E5%AF%B9%E8%B1%A1\">8.获取 Bean 对象</h1>\n<div>\n<span style=\"color:#404040;\">获取 bean 对象也叫做对象装配，是把对象取出来放到某个类中，有时候也叫对象注⼊。 </span>\n</div>\n<div>\n<span style=\"color:#404040;\">类似于把 B 中的对象取出来放到 A 类当中</span>\n</div>\n<div>\n<span style=\"color:#404040;\">对象装配（对象注⼊）的实现⽅法以下 </span>\n<span style=\"color:#404040;\">3 </span>\n<span style=\"color:#404040;\">种： </span>\n</div>\n<blockquote>\n<div>\n<span style=\"color:#404040;\">1. </span>\n<span style=\"color:#404040;\">属性注⼊ </span>\n</div>\n<div>\n<span style=\"color:#404040;\">2. </span>\n<span style=\"color:#404040;\">构造⽅法注⼊ </span>\n</div>\n<div>\n<span style=\"color:#404040;\">3. </span>\n<span style=\"color:#404040;\">Setter 注⼊ </span>\n</div>\n</blockquote>\n<h2 id=\"3.1%20%E5%B1%9E%E6%80%A7%E6%B3%A8%E5%85%A5\"><span style=\"color:#404040;\">8.1 属性注入</span></h2>\n<div>\n<span style=\"color:#404040;\">属性注⼊是使⽤ @Autowired 实现的。</span>\n</div>\n<div>\n<span style=\"color:#404040;\">下面将 UserService 类注⼊到 UserController2 类中。</span>\n</div>\n<div>\n<pre>UserService类</pre>\n<pre><code class=\"language-java\">@Service\npublic class UserService {\n    public void sayHi() {\n\n        System.out.println(\"hello service\");\n    }\n}</code></pre>\n<p><span style=\"color:#404040;\">UserController2 类</span></p>\n<pre><code class=\"language-java\">@Controller\npublic class UserController2 {\n\n    //对象注入方式1：属性注入\n    @Autowired\n    private UserService userService;\n    public void sayHi() {\n        userService.sayHi();\n    }\n}</code></pre>\n<p>main方法</p>\n<pre><code class=\"language-java\">public class App2 {\n    public static void main(String[] args) {\n        ApplicationContext context =\n                new ClassPathXmlApplicationContext(\"spring-config.xml\");\n        UserController2 userController2 =\n                context.getBean(UserController2.class);\n        userController2.sayHi();\n    }\n}</code></pre>\n<p>获取结果</p>\n<p><img alt=\"\" height=\"217\" src=\"..\\..\\static\\image\\b7490e20516f46bb920fd838a66bbf76.png\" width=\"665\"/></p>\n<p> 整个获取的调用链过程：</p>\n<p><img alt=\"\" height=\"638\" src=\"..\\..\\static\\image\\d1618d4e46ad492a9dc543e7edba2e80.png\" width=\"684\"/></p>\n<h2 id=\"%C2%A03.2%20%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E6%B3%A8%E5%85%A5\"> 8.2 构造方法注入</h2>\n<p><span style=\"color:#404040;\">其中</span>UserService类和上面属性注入的一样。</p>\n</div>\n<div>\n<span style=\"color:#404040;\">构造⽅法注⼊是在类的构造⽅法中实现注⼊，如下代码所示</span>\n</div>\n<div></div>\n<div>\n<pre><code class=\"language-java\">@Controller\npublic class UserController3 {\n\n    private UserService userService;\n    //构造方法注入（官方推荐）\n    @Autowired\n    public UserController3(UserService userService) {\n        this.userService = userService;\n    }\n/*\n    //当有多个构造方法时，上面的 @Autowired 不能省略\n    public UserController3(UserService userService, int num) {\n        this.userService = userService;\n    }*/\n\n    public void sayHi() {\n        userService.sayHi();\n    }\n}</code></pre>\n<h2 id=\"3.3%20Setter%20%E6%B3%A8%E5%85%A5\">8.3 Setter 注入</h2>\n<div>\n<span style=\"color:#404040;\">Setter 注⼊和属性的 Setter ⽅法实现类似，只不过在设置 set ⽅法的时候需要加上 @Autowired 注 </span>\n</div>\n<div>\n<span style=\"color:#404040;\">解，如下代码所示： </span>\n</div>\n<pre><code class=\"language-java\">@Controller\npublic class UserController4 {\n    private UserService userService;\n\n    //Setter 注⼊\n    @Autowired\n    public void setUserService(UserService userService) {\n        this.userService = userService;\n    }\n\n    public void sayHi() {\n        userService.sayHi();\n   }\n}</code></pre>\n<h2 id=\"3.4%C2%A0%E4%B8%89%E7%A7%8D%E6%B3%A8%E2%BC%8A%E4%BC%98%E7%BC%BA%E7%82%B9%E5%88%86%E6%9E%90\">8.4 <span style=\"color:#404040;\">三种注⼊优缺点分析</span></h2>\n<blockquote>\n<p></p>\n<div>\n<span style=\"color:#404040;\">1）属性注⼊的优点是简洁，使⽤⽅便；缺点是只能⽤于 IoC 容器，如果是⾮ IoC 容器不可⽤，并且只有在使⽤的时候才会出现 NPE（空指针异常）。</span>\n</div>\n<div></div>\n<div>\n<span style=\"color:#404040;\">2）构造⽅法注⼊是 Spring 推荐的注⼊⽅式，它的缺点是如果有多个注⼊会显得⽐较臃肿，但出现这种情况你应该考虑⼀下当前类是否符合程序的单⼀职责的设计模式了，它的优点是通⽤性，在使⽤之前⼀定能把保证注⼊的类不为空。 </span>\n</div>\n<div></div>\n<div>\n<span style=\"color:#404040;\">3）Setter ⽅式是 Spring 前期版本推荐的注⼊⽅式，但通⽤性不如构造⽅法，所有 Spring 现版本已经推荐使⽤构造⽅法注⼊的⽅式来进⾏类注⼊了</span>\n</div>\n</blockquote>\n</div>\n<h2 id=\"3.5%20%40Resource%EF%BC%9A%E5%8F%A6%E4%B8%80%E7%A7%8D%E6%B3%A8%E5%85%A5%E5%85%B3%E9%94%AE%E5%AD%97\">8.5 @Resource：另一种注入关键字</h2>\n<div>\n<span style=\"color:#404040;\">在进⾏类注⼊时，除了可以使⽤ @Autowired 关键字之外，我们还可以使⽤ @Resource 进⾏注⼊，如下代码所示</span>\n</div>\n<div>\n<pre><code class=\"language-java\">@Controller\npublic class UserController4 {\n    private UserService userService;\n\n    //Setter 注⼊\n    //@Autowired\n\n    @Resource\n    public void setUserService(UserService userService) {\n        this.userService = userService;\n    }\n\n    public void sayHi() {\n        userService.sayHi();\n   }\n}</code></pre>\n<div>\n<strong><span style=\"color:#404040;\">@Autowired 和 @Resource 的区别</span></strong>\n</div>\n<blockquote>\n<div>\n<span style=\"color:#404040;\">1）出身不同：@Resource 来自于 JDK ，@Autowrired 是Spring 框架提供的</span>\n</div>\n<div></div>\n<div>\n   2）用法不同：@Autowired 支持属性注入、构造方法注入和Setter 注入，而 @Resource 不支持构造方法注入。\n  </div>\n<div></div>\n<div>\n   3）支持的参数不同：@Resource 支持更多的参数设置，比如 name 、type 设置，而@Autowired 只支持required 参数设置。\n  </div>\n</blockquote>\n</div>\n</div>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-07-18 16:46:55", "summary": "目录创建项目创建个项添加框架支持添加启动类存储对象创建配置获取并使用对象创建上下文获取指定的对象使用总结更简单的获取和存储对象配置扫描路径添加注解存储对象控制器存储服务器存储仓库存储组件存储配置存储为"}