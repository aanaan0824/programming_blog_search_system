{"blogid": "126575557", "writerAge": "码龄1年", "writerBlogNum": "58", "writerCollect": "2337", "writerComment": "3617", "writerFan": "5857", "writerGrade": "6级", "writerIntegral": "6301", "writerName": "计算机魔术师", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126575557.jpg", "writerRankTotal": "2278", "writerRankWeekly": "85", "writerThumb": "2175", "writerVisitNum": "89215", "blog_read_count": "822", "blog_time": "已于 2022-08-30 19:41:31 修改", "blog_title": "【刷题之路 | Java & Python】两数之和（暴力枚举&哈希表）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8005761f9a1c4525a95b118212679668.png\"/></p>\n<blockquote>\n<p>🤵‍♂️ 个人主页: <a href=\"https://cpt-magician.blog.csdn.net/?type=blog\">@计算机魔术师</a><br/> 👨‍💻 作者简介：CSDN内容合伙人，全栈领域优质创作者。</p>\n</blockquote>\n<p>🌐 推荐一款找工作神器网站: <a href=\"https://www.nowcoder.com/link/pc_csdncpt_jsjmss_python\">牛客网 </a> |笔试题库|面试经验|实习招聘内推</p>\n<p>还没账户的小伙伴 <font size=\"5\"><a href=\"https://www.nowcoder.com/link/pc_csdncpt_jsjmss_python\">速速点击链接登录注册吧！🙋‍♂️</a></font> 刷题通关之路等你冲！！🎉🎉🎉 开始刷爆题库，速速通关面试吧🙋‍♂️\\</p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_17\">一、说在前面</a></li><li><a href=\"#_32\">二、两数之和</a></li><li><ul><li><a href=\"#21_73\">2.1、暴力枚举</a></li><li><ul><li><a href=\"#211_python_78\">2.1.1 python实现</a></li><li><a href=\"#212_java_94\">2.1.2 java实现</a></li></ul>\n</li><li><a href=\"#31_Hash_table_118\">3.1 哈希表(Hash table)</a></li><li><ul><li><a href=\"#311_python_141\">3.1.1 python实现</a></li><li><a href=\"#312_Java_171\">3.1.2 Java实现</a></li></ul>\n</li></ul>\n</li><li><a href=\"#___198\">今日份推荐 —— 牛客网</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_17\"></a>一、说在前面</h1>\n<p>刷题是一件日积月累的事情，我们在刷题中要保持良好习惯，让每一道题发挥最大作用！以下是 某ACM🥇金牌选手所建议的刷题方式，觉得很不错,给大家参考一下</p>\n<p><strong>如何正确的做一道题</strong></p>\n<ol><li>从简入手: 先从简单暴力(时间复杂度高)的方法入手。</li><li>优化: 思考如何在第一步的基础上，如何优化算法，降低时间复杂度。</li><li>构思代码: 有了以上两步，我们此时应该已经有了一个正确的想法，此时我们应该构思代码，有那几部分，每部分实现什么功能，代码怎么写。而不是直接闷头去写代码，没想清楚直接去写代码，会导致写了一半发现思路不对，写的代码都是错误的。</li><li>写代码: 实现第三步代码。</li><li>(Debug): 如果我们的题目没有通过测试，应该检查代码是不是有bug、思路对不对等。</li><li><strong>总结与反思</strong>: 题目通过了，我们应该总结一下这道题考察的知识点、切入的角度、同类型的题目等，同时思考有没有更优的办法。</li></ol>\n<p>做到以上几点，一道题学习的就很透了，遇到同类型的题目可以举一反三啦。</p>\n<blockquote>\n<p><strong>数组&amp;双指针章节</strong></p>\n</blockquote>\n<h1><a id=\"_32\"></a>二、两数之和</h1>\n<p>和<code>hello world</code> 一样经典的刷题入门第一题 —— <strong>两数之和</strong></p>\n<p>原题如下：</p>\n<blockquote>\n<p>给定一个整 数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那 两个 整数，并&gt;返回它们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>\n<p>你可以按任意顺序返回答案。</p>\n</blockquote>\n<p>示例 1：</p>\n<pre><code>输入：nums = [2,7,11,15], target = 9\n输出：[0,1]\n解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。\n</code></pre>\n<p>示例 2：</p>\n<pre><code>输入：nums = [3,2,4], target = 6\n输出：[1,2]\n</code></pre>\n<p>示例 3：</p>\n<pre><code>输入：nums = [3,3], target = 6\n输出：[0,1]\n</code></pre>\n<p>提示：</p>\n<pre><code>2 &lt;= nums.length &lt;= 104\n-109 &lt;= nums[i] &lt;= 109\n-109 &lt;= target &lt;= 109\n只会存在一个有效答案\n</code></pre>\n<p>进阶：你可以想出一个时间复杂度小于 O(n2) 的算法吗？</p>\n<p>思路历程：</p>\n<h2><a id=\"21_73\"></a>2.1、暴力枚举</h2>\n<blockquote>\n<p>按照解题思路，暴力枚举，这里选择快速排序法，快速筛选</p>\n</blockquote>\n<h3><a id=\"211_python_78\"></a>2.1.1 python实现</h3>\n<p>代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> target <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n                    result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> result\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c1d33fb3d5be49f290aa900e365e7aaa.png\"/></p>\n<h3><a id=\"212_java_94\"></a>2.1.2 java实现</h3>\n<p>代码：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>可以看出<code>java</code>作为编译性语言还是要比python运行速度快很多，不过使用内存消耗更多一点<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\754ae9ca8f21418bb8c892ac87b3a4c6.png\"/></p>\n<p><strong>时间复杂度为</strong> <code>O(n2)</code><br/> <strong>空间复杂度</strong>：<code>O(1)</code></p>\n<h2><a id=\"31_Hash_table_118\"></a>3.1 哈希表(Hash table)</h2>\n<p>我们适用哈希表对其优化，我们先简单讲讲<strong>哈希表的原理</strong></p>\n<ul><li>数组的特点是：寻址容易，插入和删除困难；</li><li>而链表的特点是：寻址困难，插入和删除容易。</li></ul>\n<p>我们把两者结合起来，便是<strong>哈希表</strong>，</p>\n<blockquote>\n<p>哈希表的底层实际上是基于数组来存储的，当插入键值对时，并不是直接插入该数组中，而是通过对键进行<code>Hash</code>运算得到<code>Hash</code>值，然后和数组容量取模，得到在数组中的位置后再插入（不害怕多个重复数字，使用<strong>链表</strong>把多个数字都压缩在同一个值上）。取值时，先对指定的键求<code>Hash</code>值，再和容量取模得到底层数组中对应的位置，如果指定的键值与存贮的键相匹配，则返回该键值对，如果不匹配，则表示哈希表中没有对应的键值对。这样做的好处是在查找、插入、删除等操作可以做到<code>O(1)</code>，最坏的情况是<code>O( n )</code>，当然这种是最极端的情况，极少遇到。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4be9d08896a64be2b213e1996ebdc101.png\"/></p>\n<p>哈希表实现原理很多，不管哪门语言，实现一个HashMap的过程均可分为三大步骤：</p>\n<ol><li>实现一个Hash函数</li><li>合理解决Hash冲突</li><li>实现HashMap的操作方法</li></ol>\n<p>我们这里不深揪算法，大概了解即可，<code>python</code>的<code>dict</code>便是<code>哈希表算法</code>,我们直接使用即可。</p>\n<h3><a id=\"311_python_141\"></a>3.1.1 python实现</h3>\n<p>代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        Hashmap <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span>num <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> target <span class=\"token operator\">-</span> num  <span class=\"token keyword\">in</span> Hashmap<span class=\"token punctuation\">:</span>\n                result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>Hashmap<span class=\"token punctuation\">[</span>target <span class=\"token operator\">-</span> num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n            Hashmap<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token comment\"># 默认会把本次数值省略</span>\n\n        <span class=\"token keyword\">return</span> result\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\393c1fd157604986903c6ffe495c03e9.png\"/><br/> 与之前相比执行速度快了十倍, 内存消耗多了一点</p>\n<p><strong>时间复杂度</strong>： <code>O(n)</code><br/> <strong>空间复杂度</strong>: <code>O(1)</code></p>\n<p>这里提一点比较秒的地方，因为有一种情况是比较特殊的</p>\n<pre><code class=\"prism language-cpp\">输入：\n<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token number\">6</span>\n</code></pre>\n<blockquote>\n<p>这个时候如果正常遍历所有数，会有可能添加到<code>3</code>，因为 6 - 3 = 3 在<code>nums</code>里面，即自己和自己相加了。<strong>解决办法：</strong> 错开索引，在当前索引在字典创建对应值，跳过本次循环到下一个值判断。</p>\n</blockquote>\n<h3><a id=\"312_Java_171\"></a>3.1.2 Java实现</h3>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span>  hashmap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span>  result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span>hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1daea7b3ee8a46f193e3a84af434a857.png\"/><br/> 与之前暴力枚举同样快速十倍，内存消耗没有变化</p>\n<hr/>\n<p><font size=\"4\"><strong>到这里我们已经成功踏出我们刷题的第一步啦</strong>🎉🎉🎉</font></p>\n<h1><a id=\"___198\"></a>今日份推荐 —— 牛客网</h1>\n<p><font size=\"3\">学习掌握一门语言的快速方法就是通过刷题实践运用该语言的语法以及与其他语言的比较也可以得到更深的领悟和收获！</font></p>\n<p>如果还不知道哪里可以适用与<strong>小白</strong> 刷题掌握语法，牛客网亲测很不错！！<br/> <font size=\"4\"><a href=\"https://www.nowcoder.com/link/pc_csdncpt_jsjmss_python\">点击链接跳转牛客网登录注册</a></font>看看，他们现在的IT题库内容很丰富，属于国内做的很好的了，而且是课程+刷题+面经+求职+讨论区分享，一站式求职学习网站，最最最重要的里面的资源全部免费！！<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\608c75276ddf4596b8783139220bbee4.png\"/></p>\n<p>他们的<code>Java &amp; Python</code>题单是从最基础的输出、字符串格式化输出开始，经过运算符、列表、循环语句、条件语句、元组、字典、函数等知识点，一步一步教你慢慢学会<code>Java &amp; Python</code>那为数不多的基本语法，最后再配合上8道具有实践意义的综合实践题，可以帮你更加有效的巩固前面学会的知识。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\66dee94804154b529adb59c8cca1e14a.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b488b6a674114511a7aaec13db900a05.png\"/></p>\n<p><a href=\"https://www.nowcoder.com/link/pc_csdncpt_jsjmss_python\">牛客网</a>还提供题解专区和讨论区会有大神提供题解思路，对新手玩家及其友好，有不清楚的语法，不理解的地方，看看别人的思路，别人的代码，也许就能豁然开朗。</p>\n<p>如果现在的你按捺不住卷起来，那就赶快点击下方链接学起来吧！<br/> <strong>链接：</strong><a href=\"https://www.nowcoder.com/link/pc_csdncpt_jsjmss_python\">点击链接跳转牛客网开始刷题之路！！！</a></p>\n<p><font size=\"4\"><a href=\"https://www.nowcoder.com/link/pc_csdncpt_jsjmss_python\">如果还没有账号的小伙伴速速点击链接登录注册吧！🙋‍♂️</a></font> 刷题通关之路等你冲！！🎉🎉🎉</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-08-30 19:41:31", "summary": "在这里插入图片描述个人主页计算机魔术师作者简介：内容合伙人，全栈领域优质创作者。推荐一款找工作神器网站牛客网笔试题库面试经验实习招聘内推还没账户的小伙伴速速点击链接登录注册吧！刷题通关之路等你冲！！开"}