{"blogid": "112217181", "writerAge": "码龄4年", "writerBlogNum": "90", "writerCollect": "136", "writerComment": "24", "writerFan": "11", "writerGrade": "4级", "writerIntegral": "1084", "writerName": "吴俊荣", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_112217181.jpg", "writerRankTotal": "38191", "writerRankWeekly": "304478", "writerThumb": "31", "writerVisitNum": "57710", "blog_read_count": "8037", "blog_time": "于 2021-01-05 10:57:12 发布", "blog_title": "C#——ref", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"Cref_0\"></a>C#——ref</h2>\n<p>ref 关键字指示按引用传递的值。 它用在四种不同的上下文中：</p>\n<pre><code>1.在方法签名和方法调用中，按引用将参数传递给方法。\n2.在方法签名中，按引用将值返回给调用方。\n3.在成员正文中，指示引用返回值是否作为调用方欲修改的引用被存储在本地，或在一般情况下，局部变量按引用访问另一个值。\n4.在 struct 声明中声明 ref struct 或 readonly ref struct。\n</code></pre>\n<h2><a id=\"_8\"></a>按引用传递参数</h2>\n<p>在方法的参数列表中使用 ref 关键字时，它指示参数按引用传递，而非按值传递。 ref 关键字让形参成为实参的别名，这必须是变量。 换而言之，对形参执行的任何操作都是对实参执行的。 例如，如果调用方传递本地变量表达式或数组元素访问表达式，所调用方法会替换 ref 参数引用的对象，然后，当该方法返回时，调用方的本地变量或数组元素将开始引用新对象。</p>\n<p>不要混淆通过引用传递的概念与引用类型的概念。 这两种概念是不同的。 无论方法参数是值类型还是引用类型，均可由 ref 修改。 当通过引用传递时，不会对值类型装箱。</p>\n<p>若要使用 ref 参数，方法定义和调用方法均必须显式使用 ref 关键字，如下面的示例所示。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Method</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token keyword\">int</span> refArgument<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    refArgument <span class=\"token operator\">=</span> refArgument <span class=\"token operator\">+</span> <span class=\"token number\">44</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> number <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">Method</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Output: 45</span>\n</code></pre>\n<p>传递到 ref 或 in 形参的实参必须先经过初始化，然后才能传递。 这与 out 形参不同，在传递之前，不需要显式初始化该形参的实参。</p>\n<p>类的成员不能具有仅在 ref、in 或 out 方面不同的签名。 如果类型的两个成员之间的唯一区别在于其中一个具有 ref 参数，而另一个具有 out 或 in 参数，则会发生编译器错误。 例如，以下代码将不会编译。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CS0663_Example</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// Compiler error CS0663: \"Cannot define overloaded</span>\n    <span class=\"token comment\">// methods that differ only on ref and out\".</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SampleMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SampleMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>但是，当一个方法具有 ref、in 或 out 参数，另一个方法具有值参数时，则可以重载方法，如下面的示例所示。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">RefOverloadExample</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SampleMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SampleMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在其他要求签名匹配的情况下（如隐藏或重写），in、ref 和 out 是签名的一部分，相互之间不匹配。</p>\n<p>属性不是变量。 它们是方法，不能传递到 ref 参数。</p>\n<p>不能将 ref、in 和 out 关键字用于以下几种方法：</p>\n<pre><code>1. 异步方法，通过使用 async 修饰符定义。\n2. 迭代器方法，包括 yield return 或 yield break 语句。\n</code></pre>\n<p>此外，扩展方法具有以下限制：</p>\n<pre><code>1.不能对扩展方法的第一个参数使用 out 关键字。\n2.当参数不是结构或是不被约束为结构的泛型类型时，不能对扩展方法的第一个参数使用 ref 关键字。\n3.除非第一个参数是结构，否则不能使用 in 关键字。 即使约束为结构，也不能对任何泛型类型使用 in 关键字。\n</code></pre>\n<h2><a id=\"_62\"></a>按引用传递参数：示例</h2>\n<p>前面的示例按引用传递值类型。 还可使用 ref 关键字按引用传递引用类型。 按引用传递引用类型使所调用方能够替换调用方中引用参数引用的对象。 对象的存储位置按引用参数的值传递到方法。 如果更改参数存储位置中的值（以指向新对象），你还可以将存储位置更改为调用方所引用的位置。 下面的示例将引用类型的实例作为 ref 参数传递。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Product</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Product</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> newID<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        ItemName <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        ItemID <span class=\"token operator\">=</span> newID<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> ItemName <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> ItemID <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ChangeByReference</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token class-name\">Product</span> itemRef<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// Change the address that is stored in the itemRef parameter.</span>\n    itemRef <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Product</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stapler\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// You can change the value of one of the properties of</span>\n    <span class=\"token comment\">// itemRef. The change happens to item in Main as well.</span>\n    itemRef<span class=\"token punctuation\">.</span>ItemID <span class=\"token operator\">=</span> <span class=\"token number\">12345</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ModifyProductsByReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// Declare an instance of Product and display its initial values.</span>\n    <span class=\"token class-name\">Product</span> item <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Product</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fasteners\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">54321</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Original values in Main.  Name: {0}, ID: {1}\\n\"</span><span class=\"token punctuation\">,</span>\n        item<span class=\"token punctuation\">.</span>ItemName<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">.</span>ItemID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Pass the product instance to ChangeByReference.</span>\n    <span class=\"token function\">ChangeByReference</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Back in Main.  Name: {0}, ID: {1}\\n\"</span><span class=\"token punctuation\">,</span>\n        item<span class=\"token punctuation\">.</span>ItemName<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">.</span>ItemID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// This method displays the following output:</span>\n<span class=\"token comment\">// Original values in Main.  Name: Fasteners, ID: 54321</span>\n<span class=\"token comment\">// Back in Main.  Name: Stapler, ID: 12345</span>\n</code></pre>\n<h2><a id=\"_105\"></a>引用返回值</h2>\n<p>引用返回值（或 ref 返回值）是由方法按引用向调用方返回的值。 即是说，调用方可以修改方法所返回的值，此更改反映在调用方法中的对象的状态中。</p>\n<p>使用 ref 关键字来定义引用返回值：</p>\n<p>在方法签名中。 例如，下列方法签名指示 GetCurrentPrice 方法按引用返回了 Decimal 值。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">ref</span> <span class=\"token keyword\">decimal</span> <span class=\"token function\">GetCurrentPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>在 return 标记和方法的 return 语句中返回的变量之间。 例如：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">return</span> <span class=\"token keyword\">ref</span> DecimalArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>为方便调用方修改对象的状态，引用返回值必须存储在被显式定义为 ref 局部变量的变量中。</p>\n<p>下面是一个更完整的 ref 返回示例，同时演示方法签名和方法主体。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">ref</span> <span class=\"token keyword\">int</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">,</span> Func<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token operator\">&gt;</span> predicate<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">.</span><span class=\"token function\">GetLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">.</span><span class=\"token function\">GetLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">predicate</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">ref</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidOperationException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>所调用方法还可能会将返回值声明为 ref readonly 以按引用返回值，并坚持调用代码无法修改返回的值。 调用方法可以通过将返回值存储在本地 ref readonly 变量中来避免复制该值。</p>\n<h2><a id=\"ref__137\"></a>ref 局部变量</h2>\n<p>ref 局部变量用于指代使用 return ref 返回的值。 无法将 ref 局部变量初始化为非 ref 返回值。 也就是说，初始化的右侧必须为引用。 任何对 ref 本地变量值的修改都将反映在对象的状态中，该对象的方法按引用返回值。</p>\n<p>在变量声明前或在方法（该方法将按引用返回值）调用前使用 ref 关键字定义 ref 局部变量。</p>\n<p>例如，下列语句定义名为 GetEstimatedValue 的方法返回的 ref 局部变量值：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">ref</span> <span class=\"token keyword\">decimal</span> estValue <span class=\"token operator\">=</span> <span class=\"token keyword\">ref</span> Building<span class=\"token punctuation\">.</span><span class=\"token function\">GetEstimatedValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>可通过相同方式按引用访问值。 在某些情况下，按引用访问值可避免潜在的高开销复制操作，从而提高性能。 例如，以下语句显示用户可如何定义一个用于引用值的 ref 局部变量值。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">ref</span> <span class=\"token class-name\">VeryLargeStruct</span> reflocal <span class=\"token operator\">=</span> <span class=\"token keyword\">ref</span> veryLargeStruct<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>在这两个示例中，必须在两个位置同时使用 ref 关键字，否则编译器将生成错误 CS8172：“无法使用值对按引用变量进行初始化”。</p>\n<p>从 C# 7.3 开始，foreach 语句的迭代变量可以是 ref local 变量，也可以是 ref readonly local 变量。</p>\n<p>此外，从 C# 7.3 开始，可以使用 ref 赋值运算符重新分配 ref local 或 ref readonly local 变量。</p>\n<h2><a id=\"Ref_readonly__158\"></a>Ref readonly 局部变量</h2>\n<p>Ref readonly 局部变量用于指代在其签名中具有 ref readonly 并使用 return ref 的方法或属性返回的值。 ref readonly 变量将 ref 本地变量的属性与 readonly 变量结合使用：它是所分配到的存储的别名，且无法修改。</p>\n<h2><a id=\"ref__ref__161\"></a>ref 返回值和 ref 局部变量示例</h2>\n<p>下列示例定义一个具有两个 String 字段（Title 和 Author）的 Book 类。 还定义包含 Book 对象的专用数组的 BookCollection 类。 通过调用 GetBookByTitle 方法，可按引用返回个别 book 对象。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> Author<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> Title<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookCollection</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> Book<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> books <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{<!-- --></span> Title <span class=\"token operator\">=</span> <span class=\"token string\">\"Call of the Wild, The\"</span><span class=\"token punctuation\">,</span> Author <span class=\"token operator\">=</span> <span class=\"token string\">\"Jack London\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{<!-- --></span> Title <span class=\"token operator\">=</span> <span class=\"token string\">\"Tale of Two Cities, A\"</span><span class=\"token punctuation\">,</span> Author <span class=\"token operator\">=</span> <span class=\"token string\">\"Charles Dickens\"</span> <span class=\"token punctuation\">}</span>\n                       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Book</span> nobook <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">ref</span> <span class=\"token class-name\">Book</span> <span class=\"token function\">GetBookByTitle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> title<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ctr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> ctr <span class=\"token operator\">&lt;</span> books<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> ctr<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>title <span class=\"token operator\">==</span> books<span class=\"token punctuation\">[</span>ctr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Title<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">ref</span> books<span class=\"token punctuation\">[</span>ctr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">ref</span> nobook<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ListBooks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> book <span class=\"token keyword\">in</span> books<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>$<span class=\"token string\">\"{book.Title}, by {book.Author}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>调用方将 GetBookByTitle 方法所返回的值存储为 ref 局部变量时，调用方对返回值所做的更改将反映在 BookCollection 对象中，如下例所示。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">var</span> bc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BookCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbc<span class=\"token punctuation\">.</span><span class=\"token function\">ListBooks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">ref</span> <span class=\"token keyword\">var</span> book <span class=\"token operator\">=</span> <span class=\"token keyword\">ref</span> bc<span class=\"token punctuation\">.</span><span class=\"token function\">GetBookByTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Call of the Wild, The\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>book <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    book <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{<!-- --></span> Title <span class=\"token operator\">=</span> <span class=\"token string\">\"Republic, The\"</span><span class=\"token punctuation\">,</span> Author <span class=\"token operator\">=</span> <span class=\"token string\">\"Plato\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nbc<span class=\"token punctuation\">.</span><span class=\"token function\">ListBooks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// The example displays the following output:</span>\n<span class=\"token comment\">//       Call of the Wild, The, by Jack London</span>\n<span class=\"token comment\">//       Tale of Two Cities, A, by Charles Dickens</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//       Republic, The, by Plato</span>\n<span class=\"token comment\">//       Tale of Two Cities, A, by Charles Dickens</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-01-05 10:57:12", "summary": "关键字指示按引用传递的值。它用在四种不同的上下文中：在方法签名和方法调用中，按引用将参数传递给方法。在方法签名中，按引用将值返回给调用方。在成员正文中，指示引用返回值是否作为调用方欲修改的引用被存储在"}