{"blogid": "126613939", "writerAge": "码龄1年", "writerBlogNum": "54", "writerCollect": "21", "writerComment": "33", "writerFan": "220", "writerGrade": "3级", "writerIntegral": "593", "writerName": "默萧756", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126613939.jpg", "writerRankTotal": "29474", "writerRankWeekly": "22029", "writerThumb": "14", "writerVisitNum": "11364", "blog_read_count": "409", "blog_time": "于 2022-09-03 21:54:25 发布", "blog_title": "数仓学习笔记(4)——数仓搭建（ODS层和DIM层）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E4%B8%80%E3%80%81%E6%95%B0%E4%BB%93%E6%90%AD%E5%BB%BA-ODS%E5%B1%82-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81%E6%95%B0%E4%BB%93%E6%90%AD%E5%BB%BA-ODS%E5%B1%82\">一、数仓搭建-ODS层</a></p>\n<p id=\"1%E3%80%81ODS%E5%B1%82(%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E6%95%B0%E6%8D%AE)-toc\" style=\"margin-left:40px;\"><a href=\"#1%E3%80%81ODS%E5%B1%82%28%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E6%95%B0%E6%8D%AE%29\">1、ODS层(用户行为数据)</a></p>\n<p id=\"1.1%20%E5%88%9B%E5%BB%BA%E6%97%A5%E5%BF%97%E8%A1%A8ods_log-toc\" style=\"margin-left:80px;\"><a href=\"#1.1%20%E5%88%9B%E5%BB%BA%E6%97%A5%E5%BF%97%E8%A1%A8ods_log\">1.1 创建日志表ods_log</a></p>\n<p id=\"1.2%C2%A0Shell%E4%B8%AD%E5%8D%95%E5%BC%95%E5%8F%B7%E5%92%8C%E5%8F%8C%E5%BC%95%E5%8F%B7%E5%8C%BA%E5%88%AB-toc\" style=\"margin-left:80px;\"><a href=\"#1.2%C2%A0Shell%E4%B8%AD%E5%8D%95%E5%BC%95%E5%8F%B7%E5%92%8C%E5%8F%8C%E5%BC%95%E5%8F%B7%E5%8C%BA%E5%88%AB\">1.2 Shell中单引号和双引号区别</a></p>\n<p id=\"1.3%C2%A0ODS%E5%B1%82%E6%97%A5%E5%BF%97%E8%A1%A8%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE%E8%84%9A%E6%9C%AC-toc\" style=\"margin-left:80px;\"><a href=\"#1.3%C2%A0ODS%E5%B1%82%E6%97%A5%E5%BF%97%E8%A1%A8%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE%E8%84%9A%E6%9C%AC\">1.3 ODS层日志表加载数据脚本</a></p>\n<p id=\"2%E3%80%81ODS%E5%B1%82(%E4%B8%9A%E5%8A%A1%E6%95%B0%E6%8D%AE)-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81ODS%E5%B1%82%28%E4%B8%9A%E5%8A%A1%E6%95%B0%E6%8D%AE%29\">2、ODS层(业务数据)</a></p>\n<p id=\"%E4%BA%8C%E3%80%81%E6%95%B0%E4%BB%93%E6%90%AD%E5%BB%BA-DIM%E5%B1%82-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81%E6%95%B0%E4%BB%93%E6%90%AD%E5%BB%BA-DIM%E5%B1%82\">二、数仓搭建-DIM层</a></p>\n<p id=\"1%E3%80%81%E5%95%86%E5%93%81%E7%BB%B4%E5%BA%A6%E8%A1%A8%EF%BC%88%E5%85%A8%E9%87%8F%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#1%E3%80%81%E5%95%86%E5%93%81%E7%BB%B4%E5%BA%A6%E8%A1%A8%EF%BC%88%E5%85%A8%E9%87%8F%EF%BC%89\">1、商品维度表（全量）</a></p>\n<p id=\"1.1%20%E5%BB%BA%E8%A1%A8%E8%AF%AD%E5%8F%A5-toc\" style=\"margin-left:80px;\"><a href=\"#1.1%20%E5%BB%BA%E8%A1%A8%E8%AF%AD%E5%8F%A5\">1.1 建表语句</a></p>\n<p id=\"1.2%20%E5%88%86%E5%8C%BA%E8%A7%84%E5%88%92-toc\" style=\"margin-left:80px;\"><a href=\"#1.2%20%E5%88%86%E5%8C%BA%E8%A7%84%E5%88%92\">1.2 分区规划</a></p>\n<p id=\"1.3%20%E6%95%B0%E6%8D%AE%E8%A3%85%E8%BD%BD-toc\" style=\"margin-left:80px;\"><a href=\"#1.3%20%E6%95%B0%E6%8D%AE%E8%A3%85%E8%BD%BD\">1.3 数据装载</a></p>\n<p id=\"1.4%20Hive%E8%AF%BB%E5%8F%96%E7%B4%A2%E5%BC%95%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98-toc\" style=\"margin-left:80px;\"><a href=\"#1.4%20Hive%E8%AF%BB%E5%8F%96%E7%B4%A2%E5%BC%95%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98\">1.4 Hive读取索引文件问题</a></p>\n<p id=\"1.5%20%E9%A6%96%E6%97%A5%E8%A3%85%E8%BD%BD%E5%92%8C%E6%AF%8F%E6%97%A5%E8%A3%85%E8%BD%BD-toc\" style=\"margin-left:80px;\"><a href=\"#1.5%20%E9%A6%96%E6%97%A5%E8%A3%85%E8%BD%BD%E5%92%8C%E6%AF%8F%E6%97%A5%E8%A3%85%E8%BD%BD\">1.5 首日装载和每日装载</a></p>\n<p id=\"2%E3%80%81%E4%BC%98%E6%83%A0%E5%8D%B7%E7%BB%B4%E5%BA%A6%E8%A1%A8%EF%BC%88%E5%85%A8%E9%87%8F%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81%E4%BC%98%E6%83%A0%E5%8D%B7%E7%BB%B4%E5%BA%A6%E8%A1%A8%EF%BC%88%E5%85%A8%E9%87%8F%EF%BC%89\">2、优惠卷维度表（全量）</a></p>\n<p id=\"2.1%20%E5%BB%BA%E8%A1%A8%E8%AF%AD%E5%8F%A5-toc\" style=\"margin-left:80px;\"><a href=\"#2.1%20%E5%BB%BA%E8%A1%A8%E8%AF%AD%E5%8F%A5\">2.1 建表语句</a></p>\n<p id=\"2.2%20%E5%88%86%E5%8C%BA%E8%A7%84%E5%88%92-toc\" style=\"margin-left:80px;\"><a href=\"#2.2%20%E5%88%86%E5%8C%BA%E8%A7%84%E5%88%92\">2.2 分区规划</a></p>\n<p id=\"2.3%20%E6%95%B0%E6%8D%AE%E8%A3%85%E8%BD%BD-toc\" style=\"margin-left:80px;\"><a href=\"#2.3%20%E6%95%B0%E6%8D%AE%E8%A3%85%E8%BD%BD\">2.3 数据装载</a></p>\n<p id=\"2.4%20%E9%A6%96%E6%97%A5%E8%A3%85%E8%BD%BD%E5%92%8C%E6%AF%8F%E6%97%A5%E8%A3%85%E8%BD%BD-toc\" style=\"margin-left:80px;\"><a href=\"#2.4%20%E9%A6%96%E6%97%A5%E8%A3%85%E8%BD%BD%E5%92%8C%E6%AF%8F%E6%97%A5%E8%A3%85%E8%BD%BD\">2.4 首日装载和每日装载</a></p>\n<p id=\"3%E3%80%81%E6%B4%BB%E5%8A%A8%E7%BB%B4%E5%BA%A6%E8%A1%A8%EF%BC%88%E5%85%A8%E9%87%8F%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#3%E3%80%81%E6%B4%BB%E5%8A%A8%E7%BB%B4%E5%BA%A6%E8%A1%A8%EF%BC%88%E5%85%A8%E9%87%8F%EF%BC%89\">3、活动维度表（全量）</a></p>\n<p id=\"3.1%20%E5%BB%BA%E8%A1%A8%E8%AF%AD%E5%8F%A5-toc\" style=\"margin-left:80px;\"><a href=\"#3.1%20%E5%BB%BA%E8%A1%A8%E8%AF%AD%E5%8F%A5\">3.1 建表语句</a></p>\n<p id=\"3.2%20%E5%88%86%E5%8C%BA%E8%A7%84%E5%88%92-toc\" style=\"margin-left:80px;\"><a href=\"#3.2%20%E5%88%86%E5%8C%BA%E8%A7%84%E5%88%92\">3.2 分区规划</a></p>\n<p id=\"3.3%20%E6%95%B0%E6%8D%AE%E8%A3%85%E8%BD%BD-toc\" style=\"margin-left:80px;\"><a href=\"#3.3%20%E6%95%B0%E6%8D%AE%E8%A3%85%E8%BD%BD\">3.3 数据装载</a></p>\n<p id=\"%C2%A03.4%20%E9%A6%96%E6%97%A5%E8%A3%85%E8%BD%BD%E5%92%8C%E6%AF%8F%E6%97%A5%E8%A3%85%E8%BD%BD-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A03.4%20%E9%A6%96%E6%97%A5%E8%A3%85%E8%BD%BD%E5%92%8C%E6%AF%8F%E6%97%A5%E8%A3%85%E8%BD%BD\"> 3.4 首日装载和每日装载</a></p>\n<p id=\"4%E3%80%81%E5%9C%B0%E5%8C%BA%E7%BB%B4%E5%BA%A6%E8%A1%A8%EF%BC%88%E7%89%B9%E6%AE%8A%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#4%E3%80%81%E5%9C%B0%E5%8C%BA%E7%BB%B4%E5%BA%A6%E8%A1%A8%EF%BC%88%E7%89%B9%E6%AE%8A%EF%BC%89\">4、地区维度表（特殊）</a></p>\n<p id=\"4.1%20%E5%BB%BA%E8%A1%A8%E8%AF%AD%E5%8F%A5-toc\" style=\"margin-left:80px;\"><a href=\"#4.1%20%E5%BB%BA%E8%A1%A8%E8%AF%AD%E5%8F%A5\">4.1 建表语句</a></p>\n<p id=\"4.2%20%E6%95%B0%E6%8D%AE%E8%A3%85%E8%BD%BD-toc\" style=\"margin-left:80px;\"><a href=\"#4.2%20%E6%95%B0%E6%8D%AE%E8%A3%85%E8%BD%BD\">4.2 数据装载</a></p>\n<p id=\"%C2%A05%E3%80%81%E6%97%B6%E9%97%B4%E7%BB%B4%E5%BA%A6%E8%A1%A8%EF%BC%88%E7%89%B9%E6%AE%8A%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A05%E3%80%81%E6%97%B6%E9%97%B4%E7%BB%B4%E5%BA%A6%E8%A1%A8%EF%BC%88%E7%89%B9%E6%AE%8A%EF%BC%89\">5、时间维度表（特殊）</a></p>\n<p id=\"5.1%20%E5%BB%BA%E8%A1%A8%E8%AF%AD%E5%8F%A5-toc\" style=\"margin-left:80px;\"><a href=\"#5.1%20%E5%BB%BA%E8%A1%A8%E8%AF%AD%E5%8F%A5\">5.1 建表语句</a></p>\n<p id=\"5.2%20%E6%95%B0%E6%8D%AE%E8%A3%85%E8%BD%BD-toc\" style=\"margin-left:80px;\"><a href=\"#5.2%20%E6%95%B0%E6%8D%AE%E8%A3%85%E8%BD%BD\">5.2 数据装载</a></p>\n<p id=\"6%E3%80%81%E6%8B%89%E9%93%BE%E8%A1%A8-toc\" style=\"margin-left:40px;\"><a href=\"#6%E3%80%81%E6%8B%89%E9%93%BE%E8%A1%A8\">6、拉链表</a></p>\n<p id=\"6.1%20%E6%8B%89%E9%93%BE%E8%A1%A8%E6%A6%82%E8%BF%B0-toc\" style=\"margin-left:80px;\"><a href=\"#6.1%20%E6%8B%89%E9%93%BE%E8%A1%A8%E6%A6%82%E8%BF%B0\">6.1 拉链表概述</a></p>\n<p id=\"6.2%20%E5%88%B6%E4%BD%9C%E6%8B%89%E9%93%BE%E8%A1%A8-toc\" style=\"margin-left:80px;\"><a href=\"#6.2%20%E5%88%B6%E4%BD%9C%E6%8B%89%E9%93%BE%E8%A1%A8\">6.2 制作拉链表</a></p>\n<p id=\"7%E3%80%81DIM%E5%B1%82%E9%A6%96%E6%97%A5%E8%A3%85%E8%BD%BD%E6%95%B0%E6%8D%AE%E8%84%9A%E6%9C%AC-toc\" style=\"margin-left:40px;\"><a href=\"#7%E3%80%81DIM%E5%B1%82%E9%A6%96%E6%97%A5%E8%A3%85%E8%BD%BD%E6%95%B0%E6%8D%AE%E8%84%9A%E6%9C%AC\">7、DIM层首日装载数据脚本</a></p>\n<p id=\"8%E3%80%81DIM%E5%B1%82%E6%AF%8F%E6%97%A5%E6%95%B0%E6%8D%AE%E8%A3%85%E8%BD%BD%E8%84%9A%E6%9C%AC-toc\" style=\"margin-left:40px;\"><a href=\"#8%E3%80%81DIM%E5%B1%82%E6%AF%8F%E6%97%A5%E6%95%B0%E6%8D%AE%E8%A3%85%E8%BD%BD%E8%84%9A%E6%9C%AC\">8、DIM层每日数据装载脚本</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h1 id=\"%E4%B8%80%E3%80%81%E6%95%B0%E4%BB%93%E6%90%AD%E5%BB%BA-ODS%E5%B1%82\">一、数仓搭建-ODS层</h1>\n<h2 id=\"1%E3%80%81ODS%E5%B1%82(%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E6%95%B0%E6%8D%AE)\">1、ODS层(用户行为数据)</h2>\n<h3 id=\"1.1%20%E5%88%9B%E5%BB%BA%E6%97%A5%E5%BF%97%E8%A1%A8ods_log\">1.1 创建日志表ods_log</h3>\n<p><img alt=\"\" height=\"604\" src=\"..\\..\\static\\image\\f29355cd035e4a768bbf3a5473ee7b3f.png\" width=\"1196\"/></p>\n<p><img alt=\"\" height=\"617\" src=\"..\\..\\static\\image\\09e25bba07d542329806fbfc01fc3d27.png\" width=\"1200\"/></p>\n<p><img alt=\"\" height=\"1079\" src=\"..\\..\\static\\image\\a449d85450d54e9e93e9625fd9bab42a.png\" width=\"1200\"/></p>\n<p></p>\n<h3 id=\"1.2%C2%A0Shell%E4%B8%AD%E5%8D%95%E5%BC%95%E5%8F%B7%E5%92%8C%E5%8F%8C%E5%BC%95%E5%8F%B7%E5%8C%BA%E5%88%AB\">1.2 Shell中单引号和双引号区别</h3>\n<p><img alt=\"\" height=\"926\" src=\"..\\..\\static\\image\\1583e889ead242d2b8e392f68beb60fd.png\" width=\"1200\"/></p>\n<p></p>\n<h3 id=\"1.3%C2%A0ODS%E5%B1%82%E6%97%A5%E5%BF%97%E8%A1%A8%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE%E8%84%9A%E6%9C%AC\">1.3 ODS层日志表加载数据脚本</h3>\n<p><img alt=\"\" height=\"104\" src=\"..\\..\\static\\image\\362d434b2da849aebcd15e24fbc25161.png\" width=\"1030\"/></p>\n<p>脚本中编写如下内容</p>\n<pre><code>#!/bin/bash\n\n# 定义变量方便修改\nAPP=gmall\n\n# 如果是输入的日期按照取输入日期；如果没输入日期取当前时间的前一天\nif [ -n \"$1\" ] ;then\n   do_date=$1\nelse \n   do_date=`date -d \"-1 day\" +%F`\nfi \n\necho ================== 日志日期为 $do_date ==================\nsql=\"\nload data inpath '/origin_data/$APP/log/topic_log/$do_date' into table ${APP}.ods_log partition(dt='$do_date');\n\"\n\nhive -e \"$sql\"\n\nhadoop jar /opt/module/hadoop-3.1.3/share/hadoop/common/hadoop-lzo-0.4.20.jar com.hadoop.compression.lzo.DistributedLzoIndexer /warehouse/$APP/ods/ods_log/dt=$do_date\n</code></pre>\n<p><img alt=\"\" height=\"727\" src=\"..\\..\\static\\image\\541afca3575648eeb03018316bdda8f7.png\" width=\"1200\"/></p>\n<p></p>\n<h2 id=\"2%E3%80%81ODS%E5%B1%82(%E4%B8%9A%E5%8A%A1%E6%95%B0%E6%8D%AE)\">2、ODS层(业务数据)</h2>\n<p><img alt=\"\" height=\"624\" src=\"..\\..\\static\\image\\bc2c92aa6c5040f9922d847fa22318d7.png\" width=\"1137\"/></p>\n<p><img alt=\"\" height=\"670\" src=\"..\\..\\static\\image\\c2f151393e91417babf6d3d4166966ee.png\" width=\"1193\"/></p>\n<p></p>\n<p></p>\n<h1 id=\"%E4%BA%8C%E3%80%81%E6%95%B0%E4%BB%93%E6%90%AD%E5%BB%BA-DIM%E5%B1%82\">二、数仓搭建-DIM层</h1>\n<p><strong><span style=\"color:#fe2c24;\">DIM层储存的基本都为维度表，且基本都是进行全量同步操作</span></strong></p>\n<h2 id=\"1%E3%80%81%E5%95%86%E5%93%81%E7%BB%B4%E5%BA%A6%E8%A1%A8%EF%BC%88%E5%85%A8%E9%87%8F%EF%BC%89\">1、商品维度表（全量）</h2>\n<h3 id=\"1.1%20%E5%BB%BA%E8%A1%A8%E8%AF%AD%E5%8F%A5\">1.1 建表语句</h3>\n<pre><code>DROP TABLE IF EXISTS dim_sku_info;\nCREATE EXTERNAL TABLE dim_sku_info (\n    `id` STRING COMMENT '商品id',\n    `price` DECIMAL(16,2) COMMENT '商品价格',\n    `sku_name` STRING COMMENT '商品名称',\n    `sku_desc` STRING COMMENT '商品描述',\n    `weight` DECIMAL(16,2) COMMENT '重量',\n    `is_sale` BOOLEAN COMMENT '是否在售',\n    `spu_id` STRING COMMENT 'spu编号',\n    `spu_name` STRING COMMENT 'spu名称',\n    `category3_id` STRING COMMENT '三级分类id',\n    `category3_name` STRING COMMENT '三级分类名称',\n    `category2_id` STRING COMMENT '二级分类id',\n    `category2_name` STRING COMMENT '二级分类名称',\n    `category1_id` STRING COMMENT '一级分类id',\n    `category1_name` STRING COMMENT '一级分类名称',\n    `tm_id` STRING COMMENT '品牌id',\n    `tm_name` STRING COMMENT '品牌名称',\n    `sku_attr_values` ARRAY&lt;STRUCT&lt;attr_id:STRING,value_id:STRING,attr_name:STRING,value_name:STRING&gt;&gt; COMMENT '平台属性',\n    `sku_sale_attr_values` ARRAY&lt;STRUCT&lt;sale_attr_id:STRING,sale_attr_value_id:STRING,sale_attr_name:STRING,sale_attr_value_name:STRING&gt;&gt; COMMENT '销售属性',\n    `create_time` STRING COMMENT '创建时间'\n) COMMENT '商品维度表'\nPARTITIONED BY (`dt` STRING)\nSTORED AS PARQUET\nLOCATION '/warehouse/gmall/dim/dim_sku_info/'\nTBLPROPERTIES (\"parquet.compression\"=\"lzo\");\n</code></pre>\n<blockquote>\n<p>这里的平台属性表由于每个商品的平台属性不一样，不会因为某个商品的特殊属性去增加一个字段。因此这里将商品的平台属性设为一个结构体，把所有的关于该商品的平台属性放到结构体中并最后由一个数组保存。</p>\n</blockquote>\n<p></p>\n<h3 id=\"1.2%20%E5%88%86%E5%8C%BA%E8%A7%84%E5%88%92\">1.2 分区规划</h3>\n<p><img alt=\"\" height=\"586\" src=\"..\\..\\static\\image\\99cd1a3e4cd0447fac95d2522d476658.png\" width=\"1200\"/></p>\n<p></p>\n<h3 id=\"1.3%20%E6%95%B0%E6%8D%AE%E8%A3%85%E8%BD%BD\">1.3 数据装载</h3>\n<p><img alt=\"\" height=\"593\" src=\"..\\..\\static\\image\\d08d2dfbe1fc4d6bb08bdecd0fb3ed3e.png\" width=\"1200\"/></p>\n<p></p>\n<h3 id=\"1.4%20Hive%E8%AF%BB%E5%8F%96%E7%B4%A2%E5%BC%95%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98\">1.4 Hive读取索引文件问题</h3>\n<p><img alt=\"\" height=\"885\" src=\"..\\..\\static\\image\\bf379c8185e1436b803b0d6dc3dc1234.png\" width=\"1200\"/></p>\n<p></p>\n<h3 id=\"1.5%20%E9%A6%96%E6%97%A5%E8%A3%85%E8%BD%BD%E5%92%8C%E6%AF%8F%E6%97%A5%E8%A3%85%E8%BD%BD\">1.5 首日装载和每日装载</h3>\n<p><strong>首日装载：</strong></p>\n<pre><code>with\nsku as\n(\n    select\n        id,\n        price,\n        sku_name,\n        sku_desc,\n        weight,\n        is_sale,\n        spu_id,\n        category3_id,\n        tm_id,\n        create_time\n    from ods_sku_info\n    where dt='2020-06-14'\n),\nspu as\n(\n    select\n        id,\n        spu_name\n    from ods_spu_info\n    where dt='2020-06-14'\n),\nc3 as\n(\n    select\n        id,\n        name,\n        category2_id\n    from ods_base_category3\n    where dt='2020-06-14'\n),\nc2 as\n(\n    select\n        id,\n        name,\n        category1_id\n    from ods_base_category2\n    where dt='2020-06-14'\n),\nc1 as\n(\n    select\n        id,\n        name\n    from ods_base_category1\n    where dt='2020-06-14'\n),\ntm as\n(\n    select\n        id,\n        tm_name\n    from ods_base_trademark\n    where dt='2020-06-14'\n),\nattr as\n(\n    select\n        sku_id,\n        collect_set(named_struct('attr_id',attr_id,'value_id',value_id,'attr_name',attr_name,'value_name',value_name)) attrs\n    from ods_sku_attr_value\n    where dt='2020-06-14'\n    group by sku_id\n),\nsale_attr as\n(\n    select\n        sku_id,\n        collect_set(named_struct('sale_attr_id',sale_attr_id,'sale_attr_value_id',sale_attr_value_id,'sale_attr_name',sale_attr_name,'sale_attr_value_name',sale_attr_value_name)) sale_attrs\n    from ods_sku_sale_attr_value\n    where dt='2020-06-14'\n    group by sku_id\n)\ninsert overwrite table dim_sku_info partition(dt='2020-06-14')\nselect\n    sku.id,\n    sku.price,\n    sku.sku_name,\n    sku.sku_desc,\n    sku.weight,\n    sku.is_sale,\n    sku.spu_id,\n    spu.spu_name,\n    sku.category3_id,\n    c3.name,\n    c3.category2_id,\n    c2.name,\n    c2.category1_id,\n    c1.name,\n    sku.tm_id,\n    tm.tm_name,\n    attr.attrs,\n    sale_attr.sale_attrs,\n    sku.create_time\nfrom sku\nleft join spu on sku.spu_id=spu.id\nleft join c3 on sku.category3_id=c3.id\nleft join c2 on c3.category2_id=c2.id\nleft join c1 on c2.category1_id=c1.id\nleft join tm on sku.tm_id=tm.id\nleft join attr on sku.id=attr.sku_id\nleft join sale_attr on sku.id=sale_attr.sku_id;\n</code></pre>\n<p></p>\n<p><strong>每日装载：</strong></p>\n<pre><code>with\nsku as\n(\n    select\n        id,\n        price,\n        sku_name,\n        sku_desc,\n        weight,\n        is_sale,\n        spu_id,\n        category3_id,\n        tm_id,\n        create_time\n    from ods_sku_info\n    where dt='2020-06-15'\n),\nspu as\n(\n    select\n        id,\n        spu_name\n    from ods_spu_info\n    where dt='2020-06-15'\n),\nc3 as\n(\n    select\n        id,\n        name,\n        category2_id\n    from ods_base_category3\n    where dt='2020-06-15'\n),\nc2 as\n(\n    select\n        id,\n        name,\n        category1_id\n    from ods_base_category2\n    where dt='2020-06-15'\n),\nc1 as\n(\n    select\n        id,\n        name\n    from ods_base_category1\n    where dt='2020-06-15'\n),\ntm as\n(\n    select\n        id,\n        tm_name\n    from ods_base_trademark\n    where dt='2020-06-15'\n),\nattr as\n(\n    select\n        sku_id,\n        collect_set(named_struct('attr_id',attr_id,'value_id',value_id,'attr_name',attr_name,'value_name',value_name)) attrs\n    from ods_sku_attr_value\n    where dt='2020-06-15'\n    group by sku_id\n),\nsale_attr as\n(\n    select\n        sku_id,\n        collect_set(named_struct('sale_attr_id',sale_attr_id,'sale_attr_value_id',sale_attr_value_id,'sale_attr_name',sale_attr_name,'sale_attr_value_name',sale_attr_value_name)) sale_attrs\n    from ods_sku_sale_attr_value\n    where dt='2020-06-15'\n    group by sku_id\n)\ninsert overwrite table dim_sku_info partition(dt='2020-06-15')\nselect\n    sku.id,\n    sku.price,\n    sku.sku_name,\n    sku.sku_desc,\n    sku.weight,\n    sku.is_sale,\n    sku.spu_id,\n    spu.spu_name,\n    sku.category3_id,\n    c3.name,\n    c3.category2_id,\n    c2.name,\n    c2.category1_id,\n    c1.name,\n    sku.tm_id,\n    tm.tm_name,\n    attr.attrs,\n    sale_attr.sale_attrs,\n    sku.create_time\nfrom sku\nleft join spu on sku.spu_id=spu.id\nleft join c3 on sku.category3_id=c3.id\nleft join c2 on c3.category2_id=c2.id\nleft join c1 on c2.category1_id=c1.id\nleft join tm on sku.tm_id=tm.id\nleft join attr on sku.id=attr.sku_id\nleft join sale_attr on sku.id=sale_attr.sku_id;\n</code></pre>\n<p></p>\n<h2 id=\"2%E3%80%81%E4%BC%98%E6%83%A0%E5%8D%B7%E7%BB%B4%E5%BA%A6%E8%A1%A8%EF%BC%88%E5%85%A8%E9%87%8F%EF%BC%89\">2、优惠卷维度表（全量）</h2>\n<h3 id=\"2.1%20%E5%BB%BA%E8%A1%A8%E8%AF%AD%E5%8F%A5\">2.1 建表语句</h3>\n<pre><code>DROP TABLE IF EXISTS dim_coupon_info;\nCREATE EXTERNAL TABLE dim_coupon_info(\n    `id` STRING COMMENT '购物券编号',\n    `coupon_name` STRING COMMENT '购物券名称',\n    `coupon_type` STRING COMMENT '购物券类型 1 现金券 2 折扣券 3 满减券 4 满件打折券',\n    `condition_amount` DECIMAL(16,2) COMMENT '满额数',\n    `condition_num` BIGINT COMMENT '满件数',\n    `activity_id` STRING COMMENT '活动编号',\n    `benefit_amount` DECIMAL(16,2) COMMENT '减金额',\n    `benefit_discount` DECIMAL(16,2) COMMENT '折扣',\n    `create_time` STRING COMMENT '创建时间',\n    `range_type` STRING COMMENT '范围类型 1、商品 2、品类 3、品牌',\n    `limit_num` BIGINT COMMENT '最多领取次数',\n    `taken_count` BIGINT COMMENT '已领取次数',\n    `start_time` STRING COMMENT '可以领取的开始日期',\n    `end_time` STRING COMMENT '可以领取的结束日期',\n    `operate_time` STRING COMMENT '修改时间',\n    `expire_time` STRING COMMENT '过期时间'\n) COMMENT '优惠券维度表'\nPARTITIONED BY (`dt` STRING)\nSTORED AS PARQUET\nLOCATION '/warehouse/gmall/dim/dim_coupon_info/'\nTBLPROPERTIES (\"parquet.compression\"=\"lzo\");\n</code></pre>\n<p></p>\n<h3 id=\"2.2%20%E5%88%86%E5%8C%BA%E8%A7%84%E5%88%92\">2.2 分区规划</h3>\n<p><img alt=\"\" height=\"539\" src=\"..\\..\\static\\image\\06a236f5c70e49ef8049918d9b2daf86.png\" width=\"1200\"/></p>\n<h3 id=\"2.3%20%E6%95%B0%E6%8D%AE%E8%A3%85%E8%BD%BD\">2.3 数据装载</h3>\n<p><img alt=\"\" height=\"592\" src=\"..\\..\\static\\image\\ec279204eb1348f0a08961a05a032c28.png\" width=\"1200\"/></p>\n<p></p>\n<h3 id=\"2.4%20%E9%A6%96%E6%97%A5%E8%A3%85%E8%BD%BD%E5%92%8C%E6%AF%8F%E6%97%A5%E8%A3%85%E8%BD%BD\">2.4 首日装载和每日装载</h3>\n<p><strong>首日装载：</strong></p>\n<p>这里不需要和别的表进行join操作，因此只需要select进行操作即可，这里看上去没有进行其他操作，但是数据的存储格式从ODS层的lzo压缩文件变为了DIM层的列式存储加压缩的格式。</p>\n<pre><code>insert overwrite table dim_coupon_info partition(dt='2020-06-14')\nselect\n    id,\n    coupon_name,\n    coupon_type,\n    condition_amount,\n    condition_num,\n    activity_id,\n    benefit_amount,\n    benefit_discount,\n    create_time,\n    range_type,\n    limit_num,\n    taken_count,\n    start_time,\n    end_time,\n    operate_time,\n    expire_time\nfrom ods_coupon_info\nwhere dt='2020-06-14';\n</code></pre>\n<p><strong>每日装载：</strong></p>\n<pre><code>insert overwrite table dim_coupon_info partition(dt='2020-06-15')\nselect\n    id,\n    coupon_name,\n    coupon_type,\n    condition_amount,\n    condition_num,\n    activity_id,\n    benefit_amount,\n    benefit_discount,\n    create_time,\n    range_type,\n    limit_num,\n    taken_count,\n    start_time,\n    end_time,\n    operate_time,\n    expire_time\nfrom ods_coupon_info\nwhere dt='2020-06-15';\n</code></pre>\n<p></p>\n<h2 id=\"3%E3%80%81%E6%B4%BB%E5%8A%A8%E7%BB%B4%E5%BA%A6%E8%A1%A8%EF%BC%88%E5%85%A8%E9%87%8F%EF%BC%89\">3、活动维度表（全量）</h2>\n<h3 id=\"3.1%20%E5%BB%BA%E8%A1%A8%E8%AF%AD%E5%8F%A5\">3.1 建表语句</h3>\n<pre><code>DROP TABLE IF EXISTS dim_activity_rule_info;\nCREATE EXTERNAL TABLE dim_activity_rule_info(\n    `activity_rule_id` STRING COMMENT '活动规则ID',\n    `activity_id` STRING COMMENT '活动ID',\n    `activity_name` STRING  COMMENT '活动名称',\n    `activity_type` STRING  COMMENT '活动类型',\n    `start_time` STRING  COMMENT '开始时间',\n    `end_time` STRING  COMMENT '结束时间',\n    `create_time` STRING  COMMENT '创建时间',\n    `condition_amount` DECIMAL(16,2) COMMENT '满减金额',\n    `condition_num` BIGINT COMMENT '满减件数',\n    `benefit_amount` DECIMAL(16,2) COMMENT '优惠金额',\n    `benefit_discount` DECIMAL(16,2) COMMENT '优惠折扣',\n    `benefit_level` STRING COMMENT '优惠级别'\n) COMMENT '活动信息表'\nPARTITIONED BY (`dt` STRING)\nSTORED AS PARQUET\nLOCATION '/warehouse/gmall/dim/dim_activity_rule_info/'\nTBLPROPERTIES (\"parquet.compression\"=\"lzo\");\n</code></pre>\n<p></p>\n<h3 id=\"3.2%20%E5%88%86%E5%8C%BA%E8%A7%84%E5%88%92\">3.2 分区规划</h3>\n<p><img alt=\"\" height=\"570\" src=\"..\\..\\static\\image\\9fe006d9357f459191ae9e4d7527049a.png\" width=\"1174\"/></p>\n<p></p>\n<h3 id=\"3.3%20%E6%95%B0%E6%8D%AE%E8%A3%85%E8%BD%BD\">3.3 数据装载</h3>\n<p><img alt=\"\" height=\"586\" src=\"..\\..\\static\\image\\629eb9971032460192fe3f30979cdb8b.png\" width=\"1200\"/></p>\n<p></p>\n<h3 id=\"%C2%A03.4%20%E9%A6%96%E6%97%A5%E8%A3%85%E8%BD%BD%E5%92%8C%E6%AF%8F%E6%97%A5%E8%A3%85%E8%BD%BD\"> 3.4 首日装载和每日装载</h3>\n<p><strong>首日装载：</strong></p>\n<pre><code>insert overwrite table dim_activity_rule_info partition(dt='2020-06-14')\nselect\n    ar.id,\n    ar.activity_id,\n    ai.activity_name,\n    ar.activity_type,\n    ai.start_time,\n    ai.end_time,\n    ai.create_time,\n    ar.condition_amount,\n    ar.condition_num,\n    ar.benefit_amount,\n    ar.benefit_discount,\n    ar.benefit_level\nfrom\n(\n    select\n        id,\n        activity_id,\n        activity_type,\n        condition_amount,\n        condition_num,\n        benefit_amount,\n        benefit_discount,\n        benefit_level\n    from ods_activity_rule\n    where dt='2020-06-14'\n)ar\nleft join\n(\n    select\n        id,\n        activity_name,\n        start_time,\n        end_time,\n        create_time\n    from ods_activity_info\n    where dt='2020-06-14'\n)ai\non ar.activity_id=ai.id;\n</code></pre>\n<p><strong>每日装载：</strong></p>\n<pre><code>insert overwrite table dim_activity_rule_info partition(dt='2020-06-15')\nselect\n    ar.id,\n    ar.activity_id,\n    ai.activity_name,\n    ar.activity_type,\n    ai.start_time,\n    ai.end_time,\n    ai.create_time,\n    ar.condition_amount,\n    ar.condition_num,\n    ar.benefit_amount,\n    ar.benefit_discount,\n    ar.benefit_level\nfrom\n(\n    select\n        id,\n        activity_id,\n        activity_type,\n        condition_amount,\n        condition_num,\n        benefit_amount,\n        benefit_discount,\n        benefit_level\n    from ods_activity_rule\n    where dt='2020-06-15'\n)ar\nleft join\n(\n    select\n        id,\n        activity_name,\n        start_time,\n        end_time,\n        create_time\n    from ods_activity_info\n    where dt='2020-06-15'\n)ai\non ar.activity_id=ai.id;\n</code></pre>\n<p></p>\n<h2 id=\"4%E3%80%81%E5%9C%B0%E5%8C%BA%E7%BB%B4%E5%BA%A6%E8%A1%A8%EF%BC%88%E7%89%B9%E6%AE%8A%EF%BC%89\">4、地区维度表（特殊）</h2>\n<p>地区维度表一般不会改变，因此不需要每天都进行同步，因此就不需要进行分区</p>\n<h3 id=\"4.1%20%E5%BB%BA%E8%A1%A8%E8%AF%AD%E5%8F%A5\">4.1 建表语句</h3>\n<pre><code>DROP TABLE IF EXISTS dim_base_province;\nCREATE EXTERNAL TABLE dim_base_province (\n    `id` STRING COMMENT 'id',\n    `province_name` STRING COMMENT '省市名称',\n    `area_code` STRING COMMENT '地区编码',\n    `iso_code` STRING COMMENT 'ISO-3166编码，供可视化使用',\n    `iso_3166_2` STRING COMMENT 'IOS-3166-2编码，供可视化使用',\n    `region_id` STRING COMMENT '地区id',\n    `region_name` STRING COMMENT '地区名称'\n) COMMENT '地区维度表'\nSTORED AS PARQUET\nLOCATION '/warehouse/gmall/dim/dim_base_province/'\nTBLPROPERTIES (\"parquet.compression\"=\"lzo\");\n</code></pre>\n<p></p>\n<h3 id=\"4.2%20%E6%95%B0%E6%8D%AE%E8%A3%85%E8%BD%BD\">4.2 数据装载</h3>\n<p style=\"margin-left:0;text-align:justify;\">地区维度表数据相对稳定，变化概率较低，故无需每日装载。</p>\n<p style=\"margin-left:0;text-align:justify;\"><img alt=\"\" height=\"594\" src=\"..\\..\\static\\image\\2f7bf00c1a5543f081a094cbee892c76.png\" width=\"1189\"/></p>\n<pre><code>insert overwrite table dim_base_province\nselect\n    bp.id,\n    bp.name,\n    bp.area_code,\n    bp.iso_code,\n    bp.iso_3166_2,\n    bp.region_id,\n    br.region_name\nfrom ods_base_province bp\njoin ods_base_region br on bp.region_id = br.id;\n</code></pre>\n<p></p>\n<h2 id=\"%C2%A05%E3%80%81%E6%97%B6%E9%97%B4%E7%BB%B4%E5%BA%A6%E8%A1%A8%EF%BC%88%E7%89%B9%E6%AE%8A%EF%BC%89\">5、时间维度表（特殊）</h2>\n<h3 id=\"5.1%20%E5%BB%BA%E8%A1%A8%E8%AF%AD%E5%8F%A5\">5.1 建表语句</h3>\n<pre><code>DROP TABLE IF EXISTS dim_date_info;\nCREATE EXTERNAL TABLE dim_date_info(\n    `date_id` STRING COMMENT '日',\n    `week_id` STRING COMMENT '周ID',\n    `week_day` STRING COMMENT '周几',\n    `day` STRING COMMENT '每月的第几天',\n    `month` STRING COMMENT '第几月',\n    `quarter` STRING COMMENT '第几季度',\n    `year` STRING COMMENT '年',\n    `is_workday` STRING COMMENT '是否是工作日',\n    `holiday_id` STRING COMMENT '节假日'\n) COMMENT '时间维度表'\nSTORED AS PARQUET\nLOCATION '/warehouse/gmall/dim/dim_date_info/'\nTBLPROPERTIES (\"parquet.compression\"=\"lzo\");</code></pre>\n<p></p>\n<h3 id=\"5.2%20%E6%95%B0%E6%8D%AE%E8%A3%85%E8%BD%BD\">5.2 数据装载</h3>\n<p style=\"margin-left:0;text-align:justify;\">通常情况下，时间维度表的数据并不是来自于业务系统，而是手动写入，并且由于时间维度表数据的可预见性，无须每日导入，一般可一次性导入一年的数据。</p>\n<p><img alt=\"\" height=\"950\" src=\"..\\..\\static\\image\\1a9f81f7efb945ffbca3544d9f21ef82.png\" width=\"1200\"/></p>\n<blockquote>\n<p>日期数据文件是文本文件，而表数据是lzo压缩和parquet存储，因此直接load进表中是无法识别的。这里建一个临时表，不使用parquet存储和lzo压缩，将日期的文本文件先load该表中，然后再将该临时表中选择数据，去insert到时间维度表</p>\n</blockquote>\n<p></p>\n<h2 id=\"6%E3%80%81%E6%8B%89%E9%93%BE%E8%A1%A8\">6、拉链表</h2>\n<h3 id=\"6.1%20%E6%8B%89%E9%93%BE%E8%A1%A8%E6%A6%82%E8%BF%B0\">6.1 拉链表概述</h3>\n<p><img alt=\"\" height=\"552\" src=\"..\\..\\static\\image\\b12f39c7f05c458ca432fd5b8b12605b.png\" width=\"1156\"/></p>\n<p><img alt=\"\" height=\"658\" src=\"..\\..\\static\\image\\f09ae571b83947cc8ada9cf474259ed1.png\" width=\"1200\"/></p>\n<p><img alt=\"\" height=\"873\" src=\"..\\..\\static\\image\\5e83b2d08b194e48acfb014d6835f2f2.png\" width=\"1200\"/></p>\n<p> <img alt=\"\" height=\"885\" src=\"..\\..\\static\\image\\11305e36e06d41ab8c34c230761ee3ef.png\" width=\"1200\"/></p>\n<p></p>\n<h3 id=\"6.2%20%E5%88%B6%E4%BD%9C%E6%8B%89%E9%93%BE%E8%A1%A8\">6.2 制作拉链表</h3>\n<p><strong>建表语句：</strong></p>\n<pre><code>DROP TABLE IF EXISTS dim_user_info;\nCREATE EXTERNAL TABLE dim_user_info(\n    `id` STRING COMMENT '用户id',\n    `login_name` STRING COMMENT '用户名称',\n    `nick_name` STRING COMMENT '用户昵称',\n    `name` STRING COMMENT '用户姓名',\n    `phone_num` STRING COMMENT '手机号码',\n    `email` STRING COMMENT '邮箱',\n    `user_level` STRING COMMENT '用户等级',\n    `birthday` STRING COMMENT '生日',\n    `gender` STRING COMMENT '性别',\n    `create_time` STRING COMMENT '创建时间',\n    `operate_time` STRING COMMENT '操作时间',\n    `start_date` STRING COMMENT '开始日期',\n    `end_date` STRING COMMENT '结束日期'\n) COMMENT '用户表'\nPARTITIONED BY (`dt` STRING)\nSTORED AS PARQUET\nLOCATION '/warehouse/gmall/dim/dim_user_info/'\nTBLPROPERTIES (\"parquet.compression\"=\"lzo\");\n</code></pre>\n<p></p>\n<p><strong>分区规划：</strong></p>\n<p><img alt=\"\" height=\"755\" src=\"..\\..\\static\\image\\cbe48a756b464f968398523a8ea2e7ef.png\" width=\"1200\"/></p>\n<p></p>\n<p><strong>数据装载：</strong><img alt=\"\" height=\"943\" src=\"..\\..\\static\\image\\7edc319aa315424eacfc59f44941b423.png\" width=\"1200\"/></p>\n<p></p>\n<p><strong>首日装载：</strong></p>\n<p>拉链表首日装载，需要进行初始化操作，具体工作为将截止到初始化当日的全部历史用户导入一次性导入到拉链表中。目前的ods_user_info表的第一个分区，即2020-06-14分区中就是全部的历史用户，故将该分区数据进行一定处理后导入拉链表的9999-99-99分区即可。</p>\n<pre><code class=\"hljs\">insert overwrite table dim_user_info partition(dt='9999-99-99')\nselect\n    id,\n    login_name,\n    nick_name,\n    md5(name),\n    md5(phone_num),\n    md5(email),\n    user_level,\n    birthday,\n    gender,\n    create_time,\n    operate_time,\n    '2020-06-14',\n    '9999-99-99'\nfrom ods_user_info\nwhere dt='2020-06-14';\n</code></pre>\n<p></p>\n<p><strong>每日装载sql编写： </strong></p>\n<p><img alt=\"\" height=\"782\" src=\"..\\..\\static\\image\\726179b5d6f34fa58957888ccf82ebd7.png\" width=\"1200\"/></p>\n<pre><code class=\"hljs\">with\ntmp as\n(\n    select\n        old.id old_id,\n        old.login_name old_login_name,\n        old.nick_name old_nick_name,\n        old.name old_name,\n        old.phone_num old_phone_num,\n        old.email old_email,\n        old.user_level old_user_level,\n        old.birthday old_birthday,\n        old.gender old_gender,\n        old.create_time old_create_time,\n        old.operate_time old_operate_time,\n        old.start_date old_start_date,\n        old.end_date old_end_date,\n        new.id new_id,\n        new.login_name new_login_name,\n        new.nick_name new_nick_name,\n        new.name new_name,\n        new.phone_num new_phone_num,\n        new.email new_email,\n        new.user_level new_user_level,\n        new.birthday new_birthday,\n        new.gender new_gender,\n        new.create_time new_create_time,\n        new.operate_time new_operate_time,\n        new.start_date new_start_date,\n        new.end_date new_end_date\n    from\n    (\n        select\n            id,\n            login_name,\n            nick_name,\n            name,\n            phone_num,\n            email,\n            user_level,\n            birthday,\n            gender,\n            create_time,\n            operate_time,\n            start_date,\n            end_date\n        from dim_user_info\n        where dt='9999-99-99'\n    )old\n    full outer join\n    (\n        select\n            id,\n            login_name,\n            nick_name,\n            md5(name) name,\n            md5(phone_num) phone_num,\n            md5(email) email,\n            user_level,\n            birthday,\n            gender,\n            create_time,\n            operate_time,\n            '2020-06-15' start_date,\n            '9999-99-99' end_date\n        from ods_user_info\n        where dt='2020-06-15'\n    )new\n    on old.id=new.id\n)\ninsert overwrite table dim_user_info partition(dt)\nselect\n    nvl(new_id,old_id),\n    nvl(new_login_name,old_login_name),\n    nvl(new_nick_name,old_nick_name),\n    nvl(new_name,old_name),\n    nvl(new_phone_num,old_phone_num),\n    nvl(new_email,old_email),\n    nvl(new_user_level,old_user_level),\n    nvl(new_birthday,old_birthday),\n    nvl(new_gender,old_gender),\n    nvl(new_create_time,old_create_time),\n    nvl(new_operate_time,old_operate_time),\n    nvl(new_start_date,old_start_date),\n    nvl(new_end_date,old_end_date),\n    nvl(new_end_date,old_end_date) dt\nfrom tmp\nunion all\nselect\n    old_id,\n    old_login_name,\n    old_nick_name,\n    old_name,\n    old_phone_num,\n    old_email,\n    old_user_level,\n    old_birthday,\n    old_gender,\n    old_create_time,\n    old_operate_time,\n    old_start_date,\n    cast(date_add('2020-06-15',-1) as string),\n    cast(date_add('2020-06-15',-1) as string) dt\nfrom tmp\nwhere new_id is not null and old_id is not null;\n</code></pre>\n<p></p>\n<h2 id=\"7%E3%80%81DIM%E5%B1%82%E9%A6%96%E6%97%A5%E8%A3%85%E8%BD%BD%E6%95%B0%E6%8D%AE%E8%84%9A%E6%9C%AC\">7、DIM层首日装载数据脚本</h2>\n<pre><code class=\"hljs\">#!/bin/bash\n\nAPP=gmall\n\nif [ -n \"$2\" ] ;then\n   do_date=$2\nelse \n   echo \"请传入日期参数\"\n   exit\nfi \n\ndim_user_info=\"\nset hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;\ninsert overwrite table ${APP}.dim_user_info partition(dt='9999-99-99')\nselect\n    id,\n    login_name,\n    nick_name,\n    md5(name),\n    md5(phone_num),\n    md5(email),\n    user_level,\n    birthday,\n    gender,\n    create_time,\n    operate_time,\n    '$do_date',\n    '9999-99-99'\nfrom ${APP}.ods_user_info\nwhere dt='$do_date';\n\"\n\ndim_sku_info=\"\nset hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;\nwith\nsku as\n(\n    select\n        id,\n        price,\n        sku_name,\n        sku_desc,\n        weight,\n        is_sale,\n        spu_id,\n        category3_id,\n        tm_id,\n        create_time\n    from ${APP}.ods_sku_info\n    where dt='$do_date'\n),\nspu as\n(\n    select\n        id,\n        spu_name\n    from ${APP}.ods_spu_info\n    where dt='$do_date'\n),\nc3 as\n(\n    select\n        id,\n        name,\n        category2_id\n    from ${APP}.ods_base_category3\n    where dt='$do_date'\n),\nc2 as\n(\n    select\n        id,\n        name,\n        category1_id\n    from ${APP}.ods_base_category2\n    where dt='$do_date'\n),\nc1 as\n(\n    select\n        id,\n        name\n    from ${APP}.ods_base_category1\n    where dt='$do_date'\n),\ntm as\n(\n    select\n        id,\n        tm_name\n    from ${APP}.ods_base_trademark\n    where dt='$do_date'\n),\nattr as\n(\n    select\n        sku_id,\n        collect_set(named_struct('attr_id',attr_id,'value_id',value_id,'attr_name',attr_name,'value_name',value_name)) attrs\n    from ${APP}.ods_sku_attr_value\n    where dt='$do_date'\n    group by sku_id\n),\nsale_attr as\n(\n    select\n        sku_id,\n        collect_set(named_struct('sale_attr_id',sale_attr_id,'sale_attr_value_id',sale_attr_value_id,'sale_attr_name',sale_attr_name,'sale_attr_value_name',sale_attr_value_name)) sale_attrs\n    from ${APP}.ods_sku_sale_attr_value\n    where dt='$do_date'\n    group by sku_id\n)\n\ninsert overwrite table ${APP}.dim_sku_info partition(dt='$do_date')\nselect\n    sku.id,\n    sku.price,\n    sku.sku_name,\n    sku.sku_desc,\n    sku.weight,\n    sku.is_sale,\n    sku.spu_id,\n    spu.spu_name,\n    sku.category3_id,\n    c3.name,\n    c3.category2_id,\n    c2.name,\n    c2.category1_id,\n    c1.name,\n    sku.tm_id,\n    tm.tm_name,\n    attr.attrs,\n    sale_attr.sale_attrs,\n    sku.create_time\nfrom sku\nleft join spu on sku.spu_id=spu.id\nleft join c3 on sku.category3_id=c3.id\nleft join c2 on c3.category2_id=c2.id\nleft join c1 on c2.category1_id=c1.id\nleft join tm on sku.tm_id=tm.id\nleft join attr on sku.id=attr.sku_id\nleft join sale_attr on sku.id=sale_attr.sku_id;\n\"\n\ndim_base_province=\"\nset hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;\ninsert overwrite table ${APP}.dim_base_province\nselect\n    bp.id,\n    bp.name,\n    bp.area_code,\n    bp.iso_code,\n    bp.iso_3166_2,\n    bp.region_id,\n    br.region_name\nfrom ${APP}.ods_base_province bp\njoin ${APP}.ods_base_region br on bp.region_id = br.id;\n\"\n\ndim_coupon_info=\"\nset hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;\ninsert overwrite table ${APP}.dim_coupon_info partition(dt='$do_date')\nselect\n    id,\n    coupon_name,\n    coupon_type,\n    condition_amount,\n    condition_num,\n    activity_id,\n    benefit_amount,\n    benefit_discount,\n    create_time,\n    range_type,\n    limit_num,\n    taken_count,\n    start_time,\n    end_time,\n    operate_time,\n    expire_time\nfrom ${APP}.ods_coupon_info\nwhere dt='$do_date';\n\"\n\ndim_activity_rule_info=\"\nset hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;\ninsert overwrite table ${APP}.dim_activity_rule_info partition(dt='$do_date')\nselect\n    ar.id,\n    ar.activity_id,\n    ai.activity_name,\n    ar.activity_type,\n    ai.start_time,\n    ai.end_time,\n    ai.create_time,\n    ar.condition_amount,\n    ar.condition_num,\n    ar.benefit_amount,\n    ar.benefit_discount,\n    ar.benefit_level\nfrom\n(\n    select\n        id,\n        activity_id,\n        activity_type,\n        condition_amount,\n        condition_num,\n        benefit_amount,\n        benefit_discount,\n        benefit_level\n    from ${APP}.ods_activity_rule\n    where dt='$do_date'\n)ar\nleft join\n(\n    select\n        id,\n        activity_name,\n        start_time,\n        end_time,\n        create_time\n    from ${APP}.ods_activity_info\n    where dt='$do_date'\n)ai\non ar.activity_id=ai.id;\n\"\n\ncase $1 in\n\"dim_user_info\"){\n    hive -e \"$dim_user_info\"\n};;\n\"dim_sku_info\"){\n    hive -e \"$dim_sku_info\"\n};;\n\"dim_base_province\"){\n    hive -e \"$dim_base_province\"\n};;\n\"dim_coupon_info\"){\n    hive -e \"$dim_coupon_info\"\n};;\n\"dim_activity_rule_info\"){\n    hive -e \"$dim_activity_rule_info\"\n};;\n\"all\"){\n    hive -e \"$dim_user_info$dim_sku_info$dim_coupon_info$dim_activity_rule_info$dim_base_province\"\n};;\nesac\n</code></pre>\n<blockquote>\n<p>注意：该脚本不包含时间维度表的装载，时间维度表需要手动装载</p>\n</blockquote>\n<p></p>\n<h2 id=\"8%E3%80%81DIM%E5%B1%82%E6%AF%8F%E6%97%A5%E6%95%B0%E6%8D%AE%E8%A3%85%E8%BD%BD%E8%84%9A%E6%9C%AC\">8、DIM层每日数据装载脚本</h2>\n<pre><code class=\"hljs\">#!/bin/bash\n\nAPP=gmall\n\n# 如果是输入的日期按照取输入日期；如果没输入日期取当前时间的前一天\nif [ -n \"$2\" ] ;then\n    do_date=$2\nelse \n    do_date=`date -d \"-1 day\" +%F`\nfi\n\ndim_user_info=\"\nset hive.exec.dynamic.partition.mode=nonstrict;\nset hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;\nwith\ntmp as\n(\n    select\n        old.id old_id,\n        old.login_name old_login_name,\n        old.nick_name old_nick_name,\n        old.name old_name,\n        old.phone_num old_phone_num,\n        old.email old_email,\n        old.user_level old_user_level,\n        old.birthday old_birthday,\n        old.gender old_gender,\n        old.create_time old_create_time,\n        old.operate_time old_operate_time,\n        old.start_date old_start_date,\n        old.end_date old_end_date,\n        new.id new_id,\n        new.login_name new_login_name,\n        new.nick_name new_nick_name,\n        new.name new_name,\n        new.phone_num new_phone_num,\n        new.email new_email,\n        new.user_level new_user_level,\n        new.birthday new_birthday,\n        new.gender new_gender,\n        new.create_time new_create_time,\n        new.operate_time new_operate_time,\n        new.start_date new_start_date,\n        new.end_date new_end_date\n    from\n    (\n        select\n            id,\n            login_name,\n            nick_name,\n            name,\n            phone_num,\n            email,\n            user_level,\n            birthday,\n            gender,\n            create_time,\n            operate_time,\n            start_date,\n            end_date\n        from ${APP}.dim_user_info\n        where dt='9999-99-99'\n        and start_date&lt;'$do_date'\n    )old\n    full outer join\n    (\n        select\n            id,\n            login_name,\n            nick_name,\n            md5(name) name,\n            md5(phone_num) phone_num,\n            md5(email) email,\n            user_level,\n            birthday,\n            gender,\n            create_time,\n            operate_time,\n            '$do_date' start_date,\n            '9999-99-99' end_date\n        from ${APP}.ods_user_info\n        where dt='$do_date'\n    )new\n    on old.id=new.id\n)\ninsert overwrite table ${APP}.dim_user_info partition(dt)\nselect\n    nvl(new_id,old_id),\n    nvl(new_login_name,old_login_name),\n    nvl(new_nick_name,old_nick_name),\n    nvl(new_name,old_name),\n    nvl(new_phone_num,old_phone_num),\n    nvl(new_email,old_email),\n    nvl(new_user_level,old_user_level),\n    nvl(new_birthday,old_birthday),\n    nvl(new_gender,old_gender),\n    nvl(new_create_time,old_create_time),\n    nvl(new_operate_time,old_operate_time),\n    nvl(new_start_date,old_start_date),\n    nvl(new_end_date,old_end_date),\n    nvl(new_end_date,old_end_date) dt\nfrom tmp\nunion all\nselect\n    old_id,\n    old_login_name,\n    old_nick_name,\n    old_name,\n    old_phone_num,\n    old_email,\n    old_user_level,\n    old_birthday,\n    old_gender,\n    old_create_time,\n    old_operate_time,\n    old_start_date,\n    cast(date_add('$do_date',-1) as string),\n    cast(date_add('$do_date',-1) as string) dt\nfrom tmp\nwhere new_id is not null and old_id is not null;\n\"\n\ndim_sku_info=\"\nset hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;\nwith\nsku as\n(\n    select\n        id,\n        price,\n        sku_name,\n        sku_desc,\n        weight,\n        is_sale,\n        spu_id,\n        category3_id,\n        tm_id,\n        create_time\n    from ${APP}.ods_sku_info\n    where dt='$do_date'\n),\nspu as\n(\n    select\n        id,\n        spu_name\n    from ${APP}.ods_spu_info\n    where dt='$do_date'\n),\nc3 as\n(\n    select\n        id,\n        name,\n        category2_id\n    from ${APP}.ods_base_category3\n    where dt='$do_date'\n),\nc2 as\n(\n    select\n        id,\n        name,\n        category1_id\n    from ${APP}.ods_base_category2\n    where dt='$do_date'\n),\nc1 as\n(\n    select\n        id,\n        name\n    from ${APP}.ods_base_category1\n    where dt='$do_date'\n),\ntm as\n(\n    select\n        id,\n        tm_name\n    from ${APP}.ods_base_trademark\n    where dt='$do_date'\n),\nattr as\n(\n    select\n        sku_id,\n        collect_set(named_struct('attr_id',attr_id,'value_id',value_id,'attr_name',attr_name,'value_name',value_name)) attrs\n    from ${APP}.ods_sku_attr_value\n    where dt='$do_date'\n    group by sku_id\n),\nsale_attr as\n(\n    select\n        sku_id,\n        collect_set(named_struct('sale_attr_id',sale_attr_id,'sale_attr_value_id',sale_attr_value_id,'sale_attr_name',sale_attr_name,'sale_attr_value_name',sale_attr_value_name)) sale_attrs\n    from ${APP}.ods_sku_sale_attr_value\n    where dt='$do_date'\n    group by sku_id\n)\n\ninsert overwrite table ${APP}.dim_sku_info partition(dt='$do_date')\nselect\n    sku.id,\n    sku.price,\n    sku.sku_name,\n    sku.sku_desc,\n    sku.weight,\n    sku.is_sale,\n    sku.spu_id,\n    spu.spu_name,\n    sku.category3_id,\n    c3.name,\n    c3.category2_id,\n    c2.name,\n    c2.category1_id,\n    c1.name,\n    sku.tm_id,\n    tm.tm_name,\n    attr.attrs,\n    sale_attr.sale_attrs,\n    sku.create_time\nfrom sku\nleft join spu on sku.spu_id=spu.id\nleft join c3 on sku.category3_id=c3.id\nleft join c2 on c3.category2_id=c2.id\nleft join c1 on c2.category1_id=c1.id\nleft join tm on sku.tm_id=tm.id\nleft join attr on sku.id=attr.sku_id\nleft join sale_attr on sku.id=sale_attr.sku_id;\n\"\n\ndim_base_province=\"\nset hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;\ninsert overwrite table ${APP}.dim_base_province\nselect\n    bp.id,\n    bp.name,\n    bp.area_code,\n    bp.iso_code,\n    bp.iso_3166_2,\n    bp.region_id,\n    bp.name\nfrom ${APP}.ods_base_province bp\njoin ${APP}.ods_base_region br on bp.region_id = br.id;\n\"\n\ndim_coupon_info=\"\nset hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;\ninsert overwrite table ${APP}.dim_coupon_info partition(dt='$do_date')\nselect\n    id,\n    coupon_name,\n    coupon_type,\n    condition_amount,\n    condition_num,\n    activity_id,\n    benefit_amount,\n    benefit_discount,\n    create_time,\n    range_type,\n    limit_num,\n    taken_count,\n    start_time,\n    end_time,\n    operate_time,\n    expire_time\nfrom ${APP}.ods_coupon_info\nwhere dt='$do_date';\n\"\n\ndim_activity_rule_info=\"\nset hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;\ninsert overwrite table ${APP}.dim_activity_rule_info partition(dt='$do_date')\nselect\n    ar.id,\n    ar.activity_id,\n    ai.activity_name,\n    ar.activity_type,\n    ai.start_time,\n    ai.end_time,\n    ai.create_time,\n    ar.condition_amount,\n    ar.condition_num,\n    ar.benefit_amount,\n    ar.benefit_discount,\n    ar.benefit_level\nfrom\n(\n    select\n        id,\n        activity_id,\n        activity_type,\n        condition_amount,\n        condition_num,\n        benefit_amount,\n        benefit_discount,\n        benefit_level\n    from ${APP}.ods_activity_rule\n    where dt='$do_date'\n)ar\nleft join\n(\n    select\n        id,\n        activity_name,\n        start_time,\n        end_time,\n        create_time\n    from ${APP}.ods_activity_info\n    where dt='$do_date'\n)ai\non ar.activity_id=ai.id;\n\"\n\ncase $1 in\n\"dim_user_info\"){\n    hive -e \"$dim_user_info\"\n};;\n\"dim_sku_info\"){\n    hive -e \"$dim_sku_info\"\n};;\n\"dim_base_province\"){\n    hive -e \"$dim_base_province\"\n};;\n\"dim_coupon_info\"){\n    hive -e \"$dim_coupon_info\"\n};;\n\"dim_activity_rule_info\"){\n    hive -e \"$dim_activity_rule_info\"\n};;\n\"all\"){\n    hive -e \"$dim_user_info$dim_sku_info$dim_coupon_info$dim_activity_rule_info\"\n};;\nesac\n</code></pre>\n<p></p>\n</div>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 0, "time": "2022-09-03 21:54:25", "summary": "目录一、数仓搭建层、层用户行为数据创建日志表中单引号和双引号区别层日志表加载数据脚本、层业务数据二、数仓搭建层、商品维度表全量建表语句分区规划数据装载读取索引文件问题首日装载和每日装载、优惠卷维度表全"}