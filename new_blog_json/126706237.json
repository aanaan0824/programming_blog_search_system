{"blogid": "126706237", "writerAge": "码龄3年", "writerBlogNum": "560", "writerCollect": "5291", "writerComment": "157", "writerFan": "664", "writerGrade": "7级", "writerIntegral": "14098", "writerName": "Python热爱者", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126706237.jpg", "writerRankTotal": "795", "writerRankWeekly": "3841", "writerThumb": "911", "writerVisitNum": "1684913", "blog_read_count": "85", "blog_time": "于 2022-09-05 15:43:33 发布", "blog_title": "Python学习：类与实例", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>面向对象最重要的概念就是类（Class）和实例（Instance），必须牢记类是抽象的模板，比如Student类</p>\n<p>而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。</p>\n<p>定义类通过class关键字</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n</code></pre>\n<p>class后面跟着的是类名，类名通常大写开头的单词，object表示从哪个类继承的</p>\n<p>通常，如果没有合适的继承类，就使用object类</p>\n<p>定义好了类，可以根据类名创建对应的实例，创建实例是通过类名+()实现的：</p>\n<pre><code class=\"prism language-python\">bart <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>可以给实例的变量绑定属性</p>\n<pre><code class=\"prism language-python\">bart<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Bart Simpson'</span>\n</code></pre>\n<p>由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。</p>\n<p>通过定义一个特殊的__init__方法，在创建实例的时候，就把name，score等属性绑上去：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#特殊方法“__init__”前后分别有两个下划线！！！</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> score\nbart <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'Bart Simpson'</span><span class=\"token punctuation\">,</span><span class=\"token number\">59</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>有了__init__方法，在创建实例的时候不能传入空的参数，必须传与之匹配的参数</p>\n<p>self不需要传，解释器会自动把实例变量带进去</p>\n<p>和普通函数相比，类中定义的函数只有一点不同，就是第一个参数永远是self，并且调用时候，不用传该参数</p>\n<p>除此之外，类方法的函数和普通函数没区别，仍然可以用默认参数，可变参数，关键字参数和命名关键字参数</p>\n<p><strong>数据封装</strong></p>\n<p>面对对象编程一个重要特点就是数据封装</p>\n<p>在上面的Student类中，每个实例就拥有各自的name和score这些数据。</p>\n<p>我们可以通过函数来访问这些数据，比如打印一个学生的成绩</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">print_score</span><span class=\"token punctuation\">(</span>std<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%s: %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>std<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> std<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nprint_score<span class=\"token punctuation\">(</span>bart<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出</p>\n<pre><code class=\"prism language-python\">Bart Simpson：<span class=\"token number\">59</span>\n</code></pre>\n<p>但是既然Student类本身就有数据，要访问这些数据，就没有必要从外面的函数去访问</p>\n<p>可以直接在Student类的内部定义访问数据的函数，这样，就把“数据”给封装起来了。</p>\n<p>这些封装数据的函数是和Student类本身是关联起来的，我们称之为类的方法：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student1</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#特殊方法“__init__”前后分别有两个下划线！！！</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> score\n\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">print_score</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#数据封装</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%s: %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nPeter <span class=\"token operator\">=</span> Student1<span class=\"token punctuation\">(</span><span class=\"token string\">'Peter'</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span>\nPeter<span class=\"token punctuation\">.</span>print_score<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出</p>\n<pre><code class=\"prism language-python\">Peter：<span class=\"token number\">99</span>\n</code></pre>\n<p>这样打印的操作都在类的内部定义好，我们只需要知道创建实例的时候给什么参数，然后调用</p>\n<p>封装的另一个好处是可以给Student类增加新的方法，比如get_grade：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student2</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#特殊方法“__init__”前后分别有两个下划线！！！</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> score\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">print_score</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#这是下面数据封装的代码   类的方法</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%s: %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_grade</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#给类添加新方法</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>score <span class=\"token operator\">&gt;=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">'A'</span>\n        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span>score <span class=\"token operator\">&gt;=</span><span class=\"token number\">60</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">'B'</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">'C'</span>\nkael <span class=\"token operator\">=</span> Student2<span class=\"token punctuation\">(</span><span class=\"token string\">'kael'</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>kael<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>kael<span class=\"token punctuation\">.</span>get_grade<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出</p>\n<pre><code class=\"prism language-python\">kael A\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-05 15:43:33", "summary": "面向对象最重要的概念就是类和实例，必须牢记类是抽象的模板，比如类而实例是根据类创建出来的一个个具体的对象，每个对象都拥有相同的方法，但各自的数据可能不同。定义类通过关键字后面跟着的是类名，类名通常大写"}