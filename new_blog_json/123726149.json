{"blogid": "123726149", "writerAge": "码龄4年", "writerBlogNum": "7", "writerCollect": "35", "writerComment": "6", "writerFan": "5", "writerGrade": "1级", "writerIntegral": "84", "writerName": "萌一代", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123726149.jpg", "writerRankTotal": "153045", "writerRankWeekly": "963570", "writerThumb": "9", "writerVisitNum": "17124", "blog_read_count": "1508", "blog_time": "已于 2022-04-11 07:32:45 修改", "blog_title": "ThinkPHP6.0 入门【四】，单条数据查询、查询数据集、值和列查询、海量数据优化查询、查询规则、查询对象保存调用（相当于单例）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1><a id=\"_0\"></a></h1>\n<p>       本学习课程以学习为目的一周三篇持续更新，学习代码更新在<a href=\"https://gitee.com/zeineng/tp60-learning?_from=gitee_search\" title=\"码云公开仓库\">码云公开仓库</a>，不足之处欢迎朋友们前来指导，写作不易请多多支持，本人创作新手写的不好，不喜勿喷，谢谢大家。</p>\n<p>学习目标</p>\n<ol><li>单条数据查询</li><li>查询数据集</li><li>值和列查询</li><li>海量数据优化查询</li><li>查询规则</li><li>查询对象保存调用（相当于单例）</li></ol>\n<h2></h2>\n<h2>一.单条数据查询</h2>\n<p><span style=\"color:#a2e043;\">码云提交编号：10921f8cd191d1caa45c03e53af52a472845ad0a</span></p>\n<ol><li>首先贴一下数据库表以便配套代码（不需要可以忽略），当然大家也可以自己创建啊 <pre><code class=\"language-sql\">CREATE DATABASE `tp60-learning` ;\n\nUSE `tp60-learning`;\n\nDROP TABLE IF EXISTS `tp_user`;\n\nCREATE TABLE `tp_user` (\n  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT COMMENT '自动编号',\n  `username` varchar(20) NOT NULL COMMENT '用户名',\n  `password` char(40) NOT NULL COMMENT '密码',\n  `gender` char(1) NOT NULL DEFAULT '1' COMMENT '性别',\n  `email` varchar(50) DEFAULT NULL COMMENT '邮箱',\n  `remarks` text NOT NULL COMMENT '备注',\n  `status` tinyint(3) NOT NULL DEFAULT '0' COMMENT '状态',\n  `delete_time` datetime DEFAULT NULL,\n  `create_time` datetime NOT NULL COMMENT '创建时间',\n  `update_time` datetime NOT NULL COMMENT '修改时间',\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;\n\n\nLOCK TABLES `tp_user` WRITE;\n\ninsert  into `tp_user`(`id`,`username`,`password`,`gender`,`email`,`remarks`,`status`,`delete_time`,`create_time`,`update_time`) values (1,'反贼唐三','e10adc3949ba59abbe56e057f20f883e','1','123@qq.com','老铁66',0,NULL,'2022-03-23 20:09:27','2022-03-23 20:09:27'),(2,'张三','e10adc3949ba59abbe56e057f20f883e','1','123@qq.com','老铁66',0,NULL,'2022-03-23 20:09:27','2022-03-23 20:09:27'),(3,'李四','e10adc3949ba59abbe56e057f20f883e','1','123@qq.com','老铁66',0,NULL,'2022-03-23 20:09:27','2022-03-23 20:09:27'),(4,'王二','e10adc3949ba59abbe56e057f20f883e','1','123@qq.com','老铁66',0,NULL,'2022-03-23 20:09:27','2022-03-23 20:09:27'),(5,'码字','e10adc3949ba59abbe56e057f20f883e','1','123@qq.com','老铁66',0,NULL,'2022-03-23 20:09:27','2022-03-23 20:09:27'),(6,'赵六','e10adc3949ba59abbe56e057f20f883e','1','123@qq.com','老铁66',0,NULL,'2022-03-23 20:09:27','2022-03-23 20:09:27');\n\nUNLOCK TABLES;\n</code></pre> <p></p> </li><li><span style=\"color:#000000;\">Db::table()</span><span style=\"color:#000000;\">中 </span><span style=\"color:#000000;\">table </span><span style=\"color:#000000;\">必须指定完整数据表（包括前缀）</span></li><li>\n<div>\n<span style=\"color:#000000;\">如果希望只查询一条数据，可以使用 </span>\n<span style=\"color:#000000;\">find()</span>\n<span style=\"color:#000000;\">方法，需指定 </span>\n<span style=\"color:#000000;\">where </span>\n<span style=\"color:#000000;\">条件</span>\n<pre><code class=\"language-php\">&lt;?php\n\nnamespace app\\controller;\n\nuse think\\facade\\Db;\n\nclass DatabaseSite\n{\n    public function index(){\n        $user = Db::table('tp_user')-&gt;where('id',1)-&gt;find();\n        return json($user);\n    }\n\n}</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\e90b0ab5273146c1b45cafa5aa9949a8.png\"/></p>\n<p></p>\n</div> </li><li>\n<div>\n<span style=\"color:#000000;\">Db::getLastSql()</span>\n<span style=\"color:#000000;\">方法，可以得到最近一条 </span>\n<span style=\"color:#000000;\">SQL </span>\n<span style=\"color:#000000;\">查询的原生语句，没有查询到结果会返回null</span>\n<pre><code class=\"language-php\">        $user = Db::table('tp_user')-&gt;where('id',1)-&gt;find();\n//      return json($user);\n        return Db::getLastSql();\n//      得到的结果是\n//      SELECT * FROM `tp_user` WHERE `id` = 1 LIMIT 1\n        </code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\f925b35eed7541d59683ab538ac4332a.png\"/></p>\n<p></p>\n</div> </li><li>\n<div>\n<span style=\"color:#000000;\">使用 </span>\n<span style=\"color:#000000;\">findOrFail()</span>\n<span style=\"color:#000000;\">方法同样可以查询一条数据，在没有数据时抛出一个异常</span>\n<pre><code class=\"language-php\">        $user = Db::table('tp_user')-&gt;where('id',100)-&gt;findOrFail();\n        return json($user);</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\d7e0c2a0b21a4a1a903352e8610d49eb.png\"/></p>\n<p></p>\n</div> </li><li><span style=\"color:#000000;\">使用 </span><span style=\"color:#000000;\">findOrEmpty()</span><span style=\"color:#000000;\">方法也可以查询一条数据，但在没有数据时返回一个空数组</span> <pre><code class=\"language-php\">        $user = Db::table('tp_user')-&gt;where('id',100)-&gt;findOrEmpty();\n        return json($user);\n</code></pre> <p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\dfadcb508fa843318fdac2d5a8bcd73f.png\"/></p> <p></p> </li></ol>\n<h2>二.查询数据集</h2>\n<ol><li><span style=\"color:#000000;\">想要获取多列数据，可以使用 </span><span style=\"color:#000000;\">select()</span><span style=\"color:#000000;\">方法,获取所有数据</span> <pre><code class=\"language-php\">        $user = Db::table('tp_user')-&gt;select();\n        return json($user);</code></pre> <p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\0c72e908bae647b7ab8afc00d6c90a08.png\"/></p> <p></p> </li><li><span style=\"color:#000000;\">多列数据在查询不到任何数据时返回空数组，使用 </span><span style=\"color:#000000;\">selectOrFail()</span><span style=\"color:#000000;\">抛出异常</span> <pre><code class=\"language-php\">        $user = Db::table('tp_user')-&gt;where('gender',2)-&gt;selectOrFail();\n        return json($user);\n</code></pre> <p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\921c93089da345dfa5810b7e1a014b75.png\"/></p> <p></p> </li><li><span style=\"color:#000000;\">在 </span><span style=\"color:#000000;\">select()</span><span style=\"color:#000000;\">方法后再使用 </span><span style=\"color:#000000;\">toArray()</span><span style=\"color:#000000;\">方法，可以将数据集对象转化为数组</span> <pre><code class=\"language-php\">       $user = Db::table('tp_user')-&gt;select()-&gt;toArray();\n        dump($user);\n</code></pre> <p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\995c014daefb4ba3a6b125b511001835.png\"/></p> <p></p> </li><li><span style=\"color:#000000;\">当在数据库配置文件中设置了前缀，那么我们可以使用 </span><span style=\"color:#000000;\">name()</span><span style=\"color:#000000;\">方法忽略前缀</span> <pre><code class=\"language-php\">        $user = Db::name('user')-&gt;select();\n        return json($user);</code></pre> </li></ol>\n<h2> 三.值和列查询</h2>\n<ol><li>\n<div>\n<span style=\"color:#000000;\">通过 </span>\n<span style=\"color:#000000;\">value()</span>\n<span style=\"color:#000000;\">方法，可以查询指定字段的值（单个），没有数据返回 </span>\n<span style=\"color:#000000;\">null</span>\n<pre><code class=\"language-php\">        $user = Db::name('user')-&gt;where('id', 1)-&gt;value('username');\n        return $user;\n</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\d60fce1a643446a3944985dcbc93d0c1.png\"/></p>\n<p></p>\n</div> </li><li>\n<div>\n<span style=\"color:#000000;\">通过 </span>\n<span style=\"color:#000000;\">colunm()方法，可以查询指定列的值（多个），没有数据返回空数组，可以指定 </span>\n<span style=\"color:#000000;\">id </span>\n<span style=\"color:#000000;\">作为列值的索引</span>\n<pre><code class=\"language-php\">        $user =Db::name('user')-&gt;column('username','id');\n        return json($user);</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\62938b8ef96141d48735d9f58ed2246c.png\"/></p>\n<p></p>\n</div> </li></ol>\n<h2> 四.海量数据优化查询 </h2>\n<ol><li>\n<div>\n<span style=\"color:#000000;\">如果处理的数据量巨大，成千上万那种，一次性读取有可能会导致内存开销过大，为了避免内存处理太多数据出错，可以使用 </span>\n<span style=\"color:#000000;\">chunk()</span>\n<span style=\"color:#000000;\">方法分批处理数据</span>\n</div> </li><li>\n<div>\n   该方法一次获取结果集的一小块，然后填充每一小块数据到要处理的闭包，该方法在编写处理大量数据库记录的时候非常有用\n  </div> </li><li>这里配置一个数据库mysql3并用连接connect('mysql3')，分批处理goods表前100000条数据，每次处理1000条，</li><li>为了验证他真的是每次只处理1000条数据 ，我们用echo \"每处理1000数据后，输出标记点\" <pre><code class=\"language-php\">Db::connect('mysql3')-&gt;table('goods')-&gt;where('id','&lt;',100000)-&gt;chunk(1000, function($users) {\n    foreach ($users as $user) {\n        echo $user['id'].\"**\";\n    }\n    echo \"每处理10000数据后，输出标记点\";\n});</code></pre> <p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\c89a4285a662450b9c351b8abad42819.png\"/></p> <p></p> </li><li>接下来验证他是否真的能节省内存开销，我们以相同的条件和操作，写一个select查询， <pre><code class=\"language-php\">//chunk测试\nDb::connect('mysql3')-&gt;table('goods')-&gt;where('id','&lt;',100000)-&gt;chunk(1000, function($users) {\n    foreach ($users as $user) {\n        echo $user['id'].\"**\";\n    }\n\n});\n\n//select测试\n$users = Db::connect('mysql3')-&gt;table('goods')-&gt;where('id','&lt;',100000)-&gt;select();\n    foreach ($users as $user) {\n        echo $user['id'].\"**\";\n    }\n</code></pre> <p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\f94d95eb854942c38a1783ae06ca174a.png\"/></p> <p></p> </li><li>\n<div>\n   你可以通过从闭包函数中返回\n   <code>false</code>来中止对后续数据集的处理 \n   <pre><code class=\"language-php\">Db::connect('mysql3')-&gt;table('goods')-&gt;where('id','&lt;',100000)-&gt;chunk(1000, function($users) {\nforeach ($users as $user) {\n    if($user['id']==1003){\n        return false;\n    }\n    echo $user['id'].\"--\";\n    echo $user['name'].\"&lt;br&gt;\";\n}\necho \"每处理10000数据后，输出标记点\";\n});</code></pre>\n<p></p>\n</div> </li><li>\n<div>\n<code>chunk</code>方法的处理默认是根据主键查询，支持指定字段，并且支持指定处理数据的顺序 \n   <pre><code class=\"language-php\">Db::connect('mysql3')-&gt;table('goods')-&gt;where('id','&lt;',1000)-&gt;chunk(10, function($users) {\nforeach ($users as $user) {\n    if($user['id']==15){\n        return false;\n    }\n//    echo $user['id'].\"--\";\n//    echo $user['name'].\"&lt;br&gt;\";\n    dump($user);\n}\necho \"每处理10000数据后，输出标记点\";\n},'id', 'desc');</code></pre>\n<p></p>\n</div> </li><li>\n<div>\n   果你需要处理大量的数据，可以使用新版提供的游标查询功能，该查询方式利用了PHP的生成器特性，可以大幅减少大量数据查询的内存开销问题。\n  </div> </li><li>\n<div>\n<span style=\"color:#000000;\">它每次查询只读取一行数据，然后再读取时，自动定位到下一行继续读取，</span>\n<blockquote>\n<pre><code>$cursor = Db::table('user')-&gt;where('status', 1)-&gt;cursor();\nforeach($cursor as $user){\n\techo $user['name'];\n}</code></pre>\n<p></p>\n</blockquote>\n</div> </li><li>那我们测试一下他的内存占用情况，写一个select查询和cursor查询，和相同的遍历输出操作 <pre><code class=\"language-php\">//select查询\n$users = Db::connect('mysql3')-&gt;table('goods')-&gt;where('id','&lt;',100000)-&gt;select();\n    foreach ($users as $user) {\n        echo $user['id'].\"**&lt;br&gt;\";\n    }\n//游标查询\n$users = Db::connect('mysql3')-&gt;table('goods')-&gt;where('id','&lt;',100000)-&gt;cursor();\n    foreach ($users as $user) {\n    echo $user['id'].\"**&lt;br&gt;\";\n    }</code></pre> <p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\9bd62e0e0bae4127bd90f89b138af571.png\"/></p> <p></p> </li></ol>\n<h2>五.查询规则</h2>\n<p><span style=\"color:#a2e043;\">码云提交编号：b5beec6d4b35649ac274d7d5e71bd72b7f2ccb6f</span></p>\n<ol><li>\n<div>\n<span style=\"color:#252525;\">前面课程中我们通过指向符号“</span>\n<span style=\"color:#252525;\">-&gt;</span>\n<span style=\"color:#252525;\">”多次连续调用方法称为：链式查询</span>\n</div> </li><li>\n<div>\n<div>\n<span style=\"color:#252525;\">当 </span>\n<span style=\"color:#252525;\">Db::name('user')</span>\n<span style=\"color:#252525;\">时，返回查询对象</span>\n<span style=\"color:#252525;\">(Query)</span>\n<span style=\"color:#252525;\">，即可连缀数据库对应的方法</span>\n<pre><code class=\"language-php\">$users = Db::connect('mysql3')-&gt;table('goods');\ndump($users);</code></pre>\n<blockquote>\n<pre id=\"sf-dump-747668590\">^ think\\db\\Query {<!-- -->#52 ▼\n  #connection: think\\db\\connector\\Mysql {<!-- --><a href=\"http://tp.com/DatabaseSite#sf-dump-747668590-ref250\" title=\"#50 ▶\">#50 ▶</a>}\n  #name: \"\"\n  #pk: null\n  #autoinc: null\n  #prefix: \"tp_\"\n  #options: array:1 [▼\n    \"table\" =&gt; \"goods\"\n  ]\n  #timeRule: array:8 [▼\n    \"today\" =&gt; array:2 [▶]\n    \"yesterday\" =&gt; array:2 [▶]\n    \"week\" =&gt; array:2 [▶]\n    \"last week\" =&gt; array:2 [▶]\n    \"month\" =&gt; array:2 [▶]\n    \"last month\" =&gt; array:2 [▶]\n    \"year\" =&gt; array:2 [▶]\n    \"last year\" =&gt; array:2 [▶]\n  ]\n  #model: null\n  #bind: []\n}</pre>\n</blockquote>\n</div>\n</div> </li><li>\n<div>\n<div>\n<span style=\"color:#252525;\">而每次执行一个数据库查询方法时，比如 </span>\n<span style=\"color:#252525;\">where()</span>\n<span style=\"color:#252525;\">，还将返回查询对象</span>\n<span style=\"color:#252525;\">(Query)</span>\n<pre><code class=\"language-php\">$users = Db::connect('mysql3')-&gt;table('goods')-&gt;where('id','&lt;',3);\ndump($users);</code></pre>\n<blockquote>\n<pre id=\"sf-dump-1310741902\">^ think\\db\\Query {<!-- -->#52 ▼\n  #connection: think\\db\\connector\\Mysql {<!-- --><a href=\"http://tp.com/DatabaseSite#sf-dump-1310741902-ref250\" title=\"#50 ▶\">#50 ▶</a>}\n  #name: \"\"\n  #pk: null\n  #autoinc: null\n  #prefix: \"tp_\"\n  #options: array:2 [▼\n    \"table\" =&gt; \"goods\"\n    \"where\" =&gt; array:1 [▼\n      \"AND\" =&gt; array:1 [▼\n        0 =&gt; array:4 [▼\n          0 =&gt; \"id\"\n          1 =&gt; \"&lt;\"\n          2 =&gt; 100000\n          3 =&gt; null\n        ]\n      ]\n    ]\n  ]\n  #timeRule: array:8 [▶]\n  #model: null\n  #bind: []\n}</pre>\n</blockquote>\n</div>\n</div> </li><li>\n<div>\n<div>\n<span style=\"color:#252525;\">只要还是数据库对象，那么就可以一直使用指向符号进行链式查询</span>\n</div>\n</div> </li><li>\n<div>\n<div>\n<span style=\"color:#252525;\">再利用 </span>\n<span style=\"color:#252525;\">find()</span>\n<span style=\"color:#252525;\">、</span>\n<span style=\"color:#252525;\">select()</span>\n<span style=\"color:#252525;\">等方法返回数组</span>\n<span style=\"color:#252525;\">(Array)</span>\n<span style=\"color:#252525;\">或数据集对象</span>\n<span style=\"color:#252525;\">(Colletion)</span>\n<pre><code class=\"language-php\">$users = Db::connect('mysql3')-&gt;table('goods')-&gt;where('id','&lt;',3)-&gt;select();\ndump($users);</code></pre>\n<blockquote>\n<pre id=\"sf-dump-1686953072\">^ think\\Collection {<!-- -->#53 ▼\n  #items: array:2 [▼\n    0 =&gt; array:14 [▶]\n    1 =&gt; array:14 [▼\n      \"id\" =&gt; 2\n      \"name\" =&gt; \"将很快\"\n      \"category_id\" =&gt; 2\n      \"store_id\" =&gt; 2\n      \"status\" =&gt; 0\n      \"use_flag\" =&gt; 0\n      \"create_time\" =&gt; \"2020-12-12 00:00:00\"\n      \"update_time\" =&gt; \"2021-12-13 00:00:00\"\n      \"up_time\" =&gt; \"2022-12-12 00:00:00\"\n      \"down_time\" =&gt; \"0000-00-00 00:00:00\"\n      \"description\" =&gt; \"12321\"\n      \"keywords\" =&gt; \"121\"\n      \"min_price\" =&gt; \"121\"\n      \"max_price\" =&gt; \"2121\"\n    ]\n  ]\n}</pre>\n</blockquote>\n<pre><code class=\"language-php\">$users = Db::connect('mysql3')-&gt;table('goods')-&gt;where('id','&lt;',3)-&gt;find();\ndump($users);</code></pre>\n<blockquote>\n<pre id=\"sf-dump-1458447298\">^ array:14 [▼\n  \"id\" =&gt; 1\n  \"name\" =&gt; \"12\"\n  \"category_id\" =&gt; 2\n  \"store_id\" =&gt; null\n  \"status\" =&gt; null\n  \"use_flag\" =&gt; null\n  \"create_time\" =&gt; null\n  \"update_time\" =&gt; null\n  \"up_time\" =&gt; null\n  \"down_time\" =&gt; null\n  \"description\" =&gt; null\n  \"keywords\" =&gt; null\n  \"min_price\" =&gt; null\n  \"max_price\" =&gt; null\n]</pre>\n</blockquote>\n</div>\n</div> </li></ol>\n<h2>六.查询对象保存调用（相当于单例）</h2>\n<ol><li>\n<div>\n<span style=\"color:#000000;\">如果多次使用数据库查询，那么每次静态创建都会生成一个实例，造成浪费，但我们可以把对象实例保存下来，再进行反复调用即可；</span>\n<pre><code class=\"language-php\">$sqlquery = Db::name('user');\n$dataFind = $sqlquery-&gt;where('id', '&lt;',5)-&gt;find();\n$dataSelect = $sqlquery-&gt;select();</code></pre>\n<p></p>\n</div> </li><li><span style=\"color:#000000;\">但是，当同一个对象实例第二次查询后，会保留第一次查询的值，我们</span> <pre><code class=\"language-php\">$sqlquery = Db::name('user');\n$dataFind = $sqlquery-&gt;where('id', '&lt;',5)-&gt;find();\n$dataSelect = $sqlquery-&gt;select();\nreturn Db::getlastSql();</code></pre>\n<blockquote>\n<p>SELECT * FROM `tp_user` WHERE `id` &lt; 5</p>\n<p>这里有一个where条件，但是我们进行select查询时并没有执行where操作</p>\n</blockquote> </li><li><span style=\"color:#000000;\">使用 </span><span style=\"color:#000000;\">removeOption()</span><span style=\"color:#000000;\">方法，可以清理掉上一次查询保留的值</span> <pre><code class=\"language-php\">$sqlquery = Db::name('user');\n$dataFind = $sqlquery-&gt;where('id', '&lt;',5)-&gt;find();\n$dataSelect = $sqlquery-&gt;removeOption('where')-&gt;select();\nreturn Db::getlastSql();</code></pre>\n<blockquote>\n<p>SELECT * FROM `tp_user`</p>\n</blockquote> </li><li>\n<div>\n<span style=\"color:#000000;\">removeOption()方法，</span>\n<blockquote>\n<pre>/**\n * 去除查询参数\n * @access public\n * @param string $option 参数名 留空去除所有参数\n * @return $this\n */</pre>\n</blockquote>\n</div> </li></ol>\n</div>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 1, "time": "2022-04-11 07:32:45", "summary": "本学习课程以学习为目的一周三篇持续更新，学习代码更新在码云公开仓库码云公开仓库，不足之处欢迎朋友们前来指导，写作不易请多多支持，本人创作新手写的不好，不喜勿喷，谢谢大家。学习目标单条数据查询查询数据集"}