{"blogid": "123312217", "writerAge": "码龄2年", "writerBlogNum": "31", "writerCollect": "2088", "writerComment": "2170", "writerFan": "4910", "writerGrade": "6级", "writerIntegral": "5360", "writerName": "小老师ir", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123312217.jpg", "writerRankTotal": "2908", "writerRankWeekly": "449", "writerThumb": "1707", "writerVisitNum": "42283", "blog_read_count": "4071", "blog_time": "于 2022-05-11 09:45:17 发布", "blog_title": "Java-反射机制（超详解）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>Java反射机制概述</h3>\n<ul><li><a href=\"#_3\">前言</a></li><li><ul><li><a href=\"#Java_7\">一、Java反射机制概述</a></li><li><ul><li><a href=\"#1_Java_Reflection_8\">1. Java Reflection</a></li><li><a href=\"#2__vs__14\">2. 动态语言 vs 静态语言</a></li></ul>\n</li><li><a href=\"#_Class_38\">二、 Class类的理解</a></li><li><ul><li><a href=\"#1__40\">1. 类的加载过程</a></li><li><ul><li><a href=\"#11__41\">1.1 初步了解</a></li><li><a href=\"#12__49\">1.2 类的加载过程图解</a></li><li><a href=\"#13__87\">1.3 了解：什么时候会发生类初始化？</a></li><li><a href=\"#14__101\">1.4 类加载器的作用</a></li><li><a href=\"#15__JVM_108\">1.5 JVM中不同类型的类的加载器</a></li><li><a href=\"#16__114\">1.6 代码演示</a></li></ul>\n</li><li><a href=\"#2_Class_173\">2. 何为Class类？</a></li><li><a href=\"#3_Class_202\">3. Class类的常用方法方法</a></li><li><a href=\"#3_Class_215\">3. 哪些类型可以有Class对象？</a></li></ul>\n</li><li><a href=\"#Class_225\">三、获取Class类实例的四种方法</a></li><li><ul><li><a href=\"#1_class_226\">1. 调用运行时类的属性：.class</a></li><li><a href=\"#2_getClass_232\">2. 通过运行时类的对象,调用getClass()</a></li><li><a href=\"#3ClassforNameString_classPath_237\">3.调用Class的静态方法：forName(String classPath)</a></li><li><a href=\"#4_ClassLoader_243\">4. 使用类的加载器：ClassLoader</a></li><li><a href=\"#5__249\">5. 代码演示</a></li></ul>\n</li><li><a href=\"#__277\">四、 创建运行时类的对象</a></li><li><ul><li><a href=\"#1__278\">1. 引入</a></li><li><a href=\"#2__295\">2. 语法步骤</a></li><li><a href=\"#3__317\">3. 代码演示</a></li><li><a href=\"#4__342\">4. 体会反射的动态性</a></li></ul>\n</li><li><a href=\"#_382\">五、获取运行时类的完整结构</a></li><li><ul><li><a href=\"#1__470\">1. 获取当前运行时类的属性结构</a></li><li><a href=\"#2__529\">2. 获取当前运行时类的方法结构</a></li><li><a href=\"#3__625\">3. 获取当前运行时类的构造器结构</a></li></ul>\n</li><li><a href=\"#_751\">六、调用运行时类的指定结构</a></li><li><ul><li><a href=\"#1___762\">1. 调用运行时类中指定的属性</a></li><li><a href=\"#2__832\">2. 调用运行时类中的指定的方法</a></li><li><a href=\"#3__892\">3. 调用运行时类中的指定的构造器</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<hr/>\n<hr/>\n<h1><a id=\"_3\"></a>前言</h1>\n<p><font color=\"pink\">本博主将用CSDN记录软件开发求学之路上亲身所得与所学的心得与知识，有兴趣的小伙伴可以关注博主！<br/> 也许一个人独行，可以走的很快，但是一群人结伴而行，才能走的更远！让我们在成长的道路上互相学习，欢迎关注！<br/> </font></p>\n<font color=\"pink\"> <h2><a id=\"Java_7\"></a>一、Java反射机制概述</h2> <h3><a id=\"1_Java_Reflection_8\"></a>1. Java Reflection</h3>\n<blockquote>\n<p>（1）Reflection（反射）是被视为动态语言的关键，反射机制允许程序在执行期 借助于ReflectionAPI取得任何类的内部信息，并能直接操作任意对象的内 部属性及方法。</p>\n</blockquote>\n<blockquote>\n<p>（2）加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称之为：反射。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3e0040cf01cd4dde968cb8727f35e317.png\"/></p>\n</blockquote> <h3><a id=\"2__vs__14\"></a>2. 动态语言 vs 静态语言</h3> <p><strong>（1）动态语言</strong></p>\n<blockquote>\n<p>是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以 被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是在运行时代码可以根据某些条件改变自身结构。</p>\n<p>主要动态语言：Object-C、C#、JavaScript、PHP、Python、Erlang。</p>\n</blockquote> <p><strong>（2）静态语言</strong></p>\n<blockquote>\n<p>与动态语言相对应的，运行时结构不可变的语言就是静态语言。如Java、C、C++。Java不是动态语言，但Java可以称之为“准动态语言”。即Java有一定的动态性，我们可以利用反射机制、字节码操作获得类似动态语言的特性。 Java的动态性让编程的时候更加灵活！</p>\n</blockquote> <p><strong>（3）Java反射机制研究及应用</strong></p>\n<blockquote>\n<p>⭕ Java反射机制提供的功能</p>\n<ol><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断任意一个类所具有的成员变量和方法</li><li>在运行时获取泛型信息 在运行时调用任意一个对象的成员变量和方法</li><li>在运行时处理注解 生成动态代理</li></ol>\n</blockquote>\n<blockquote>\n<p>⭕ 反射相关的主要API</p>\n<ol><li>java.lang.Class:代表一个类</li><li>java.lang.reflect.Method:代表类的方法</li><li>java.lang.reflect.Field:代表类的成员变量</li><li>java.lang.reflect.Constructor:代表类的构造器  … …</li></ol>\n</blockquote> <h2><a id=\"_Class_38\"></a>二、 Class类的理解</h2> <h3><a id=\"1__40\"></a>1. 类的加载过程</h3> <h4><a id=\"11__41\"></a>1.1 初步了解</h4>\n<blockquote>\n<p>⭕ 程序经过<code>javac.exe</code>命令以后，会生成一个或多个字节码文件(<code>.class</code>结尾)。<br/> 接着我们使用<code>java.exe</code>命令对某个字节码文件进行解释运行。相当于将某个字节码文件加载到内存中。此过程就称为类的加载。加载到内存中的类，我们就称为运行时类，此运行时类，就作为<code>Class</code>的一个实例。</p>\n</blockquote>\n<blockquote>\n<p>⭕ 换句话说，<code>Class</code>的实例就对应着一个运行时类。</p>\n</blockquote>\n<blockquote>\n<p>⭕ 加载到内存中的运行时类，会缓存一定的时间。在此时间之内，我们可以通过不同的方式来获取此运行时类。</p>\n</blockquote> <h4><a id=\"12__49\"></a>1.2 类的加载过程图解</h4>\n<blockquote>\n<p>当程序主动使用某个类时，如果该类还未被加载到内存中，则系统会通过如下三个步骤来对该类进行初始化。</p>\n</blockquote> <p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\53f06b8e3bd141389e2b0429158dfdf5.png\"/></p>\n<blockquote>\n<p>⭕ 类的加载：将<code>class</code>文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的<code>java.lang.Class</code>对象，作为方法区中类数据的访问入口（即引用地址）。所有需要访问和使用类数据只能通过这个Class对象。这个加载的过程需要类加载器参与。</p>\n</blockquote>\n<blockquote>\n<p>⭕ 类的链接：将Java类的二进制代码合并到JVM的运行状态之中的过程。<br/> ● 验证：确保加载的类信息符合JVM规范，例如：以cafe开头，没有安全方面的问题<br/> ● 准备：正式为类变量（<code>static</code>）分配内存并设置类变量默认初始值的阶段，这些内存 都将在方法区中进行分配。<br/> ● 解析：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程。</p>\n</blockquote>\n<blockquote>\n<p>⭕ 类的初始化：<br/> ● 执行类构造器【<code>clinit</code>】()方法的过程。类构造器【<code>clinit</code>】()方法是由编译期自动收集类中 所有类变量的赋值动作和静态代码块中的语句合并产生的。（类构造器是构造类信 息的，不是构造该类对象的构造器）。<br/> ● 当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类 的初始化。<br/> ● 虚拟机会保证一个类的()方法在多线程环境中被正确加锁和同步。</p>\n</blockquote> <pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassLoadingTest</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">static</span> <span class=\"token punctuation\">{<!-- --></span> m <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//第二步：链接结束后m=0</span>\n<span class=\"token comment\">//第三步：初始化后，m的值由&lt;clinit&gt;()方法执行决定</span>\n<span class=\"token comment\">// 这个A的类构造器&lt;clinit&gt;()方法由类变量的赋值和静态代码块中的语句按照顺序合并产生，类似于</span>\n<span class=\"token comment\">// &lt;clinit&gt;(){<!-- --></span>\n<span class=\"token comment\">// m = 300;</span>\n<span class=\"token comment\">// m = 100;</span>\n<span class=\"token comment\">// }</span>\n</code></pre> <h4><a id=\"13__87\"></a>1.3 了解：什么时候会发生类初始化？</h4>\n<blockquote>\n<p>⭕ 类的主动引用（一定会发生类的初始化）</p>\n<ol><li>当虚拟机启动，先初始化<code>main</code>方法所在的类</li><li><code>new</code>一个类的对象</li><li>调用类的静态成员（除了final常量）和静态方法</li><li>使用<code>java.lang.reflect</code>包的方法对类进行反射调用</li><li>当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类</li></ol>\n</blockquote>\n<blockquote>\n<p>⭕ 类的被动引用（不会发生类的初始化）</p>\n<ol><li>当访问一个静态域时，只有真正声明这个域的类才会被初始化</li><li>当通过子类引用父类的静态变量，不会导致子类初始化</li><li>通过数组定义类引用，不会触发此类的初始化</li><li>引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了）</li></ol>\n</blockquote> <h4><a id=\"14__101\"></a>1.4 类加载器的作用</h4>\n<blockquote>\n<p>⭕ 类加载的作用：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为 方法区中类数据的访问入口。<br/> ⭕ 类缓存：标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器 中，它将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象。</p>\n</blockquote> <p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\13f95e4289694521b7a09b6a77286435.png\"/></p> <h4><a id=\"15__JVM_108\"></a>1.5 JVM中不同类型的类的加载器</h4> <p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f58e25b9ec904df489b515aae6c68a45.png\"/></p> <h4><a id=\"16__114\"></a>1.6 代码演示</h4>\n<blockquote>\n<p>⭕ 不同类型的类的加载器：</p>\n</blockquote> <pre><code class=\"prism language-java\"> <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//对于自定义类，使用系统类加载器进行加载</span>\n        <span class=\"token class-name\">ClassLoader</span> classLoader <span class=\"token operator\">=</span> <span class=\"token class-name\">ClassLoaderTest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>classLoader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//sun.misc.Launcher$AppClassLoader@18b4aac2:系统类加载器</span>\n        <span class=\"token comment\">//调用系统类加载器的getParent()：获取扩展类加载器</span>\n        <span class=\"token class-name\">ClassLoader</span> classLoader1 <span class=\"token operator\">=</span> classLoader<span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>classLoader1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//sun.misc.Launcher$ExtClassLoader@279f2327：扩展类加载器</span>\n        <span class=\"token comment\">//调用扩展类加载器的getParent()：无法获取引导类加载器</span>\n        <span class=\"token comment\">//引导类加载器主要负责加载java的核心类库，无法加载自定义类的。</span>\n        <span class=\"token class-name\">ClassLoader</span> classLoader2 <span class=\"token operator\">=</span> classLoader1<span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>classLoader2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//null</span>\n\n        <span class=\"token class-name\">ClassLoader</span> classLoader3 <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>classLoader3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//null</span>\n\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>⭕ 使用系统类加载器读取<code>Properties</code>配置文件。</p>\n</blockquote> <pre><code class=\"prism language-java\"> <span class=\"token comment\">/*\n    Properties：用来读取配置文件。\n\n     */</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token class-name\">Properties</span> pros <span class=\"token operator\">=</span>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//此时的文件默认在当前的module下。</span>\n        <span class=\"token comment\">//读取配置文件的方式一：</span>\n<span class=\"token comment\">//        FileInputStream fis = new FileInputStream(\"jdbc.properties\");</span>\n<span class=\"token comment\">//        FileInputStream fis = new FileInputStream(\"src\\\\jdbc1.properties\");</span>\n<span class=\"token comment\">//        pros.load(fis);</span>\n\n        <span class=\"token comment\">//读取配置文件的方式二：使用ClassLoader</span>\n        <span class=\"token comment\">//配置文件默认识别为：当前module的src下</span>\n        <span class=\"token class-name\">ClassLoader</span> classLoader <span class=\"token operator\">=</span> <span class=\"token class-name\">ClassLoaderTest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">InputStream</span> is <span class=\"token operator\">=</span> classLoader<span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc1.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pros<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token class-name\">String</span> user <span class=\"token operator\">=</span> pros<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> pros<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user = \"</span> <span class=\"token operator\">+</span> user <span class=\"token operator\">+</span> <span class=\"token string\">\",password = \"</span> <span class=\"token operator\">+</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <h3><a id=\"2_Class_173\"></a>2. 何为Class类？</h3>\n<blockquote>\n<p>⭕ <code>Class</code>类在<code>Object</code>类中定义了以下的方法，此方法将被所有子类继承：</p>\n</blockquote> <pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Class</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<blockquote>\n<p>以上的方法返回值的类型是一个<code>Class</code>类，此类是<code>Java</code>反射的源头，实际上所谓反射从程序的运行结果来看也很好理解，即：可以通过对象反射求出类的名称。</p>\n</blockquote> <p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\700693cc89904188abdcad226da74f40.png\"/></p>\n<blockquote>\n<p>⭕ 对象照镜子后可以得到的信息：某个类的属性、方法和构造器、某个类到底实现了哪些接口。对于每个类而言，<code>JRE</code> 都为其保留一个不变的<code>Class</code>类型的对象。<br/> 一个 <code>Class</code>对象包含了特定某个结构(<code>class</code>/<code>interface</code>/<code>enum</code>/<code>annotation</code>/<code>primitivetype</code>/<code>void</code>/<code>[]</code>)的有关信息。</p>\n</blockquote>\n<blockquote>\n<p>⭕ <code>Class</code>本身也是一个类</p>\n</blockquote>\n<blockquote>\n<p>⭕ <code>Class</code> 对象只能由系统建立对象</p>\n</blockquote>\n<blockquote>\n<p>⭕ 一个加载的类在 <code>JVM</code>中只会有一个<code>Class</code>实例</p>\n</blockquote>\n<blockquote>\n<p>⭕ 一个Class对象对应的是一个加载到<code>JVM</code>中的一个<code>.class</code>文件</p>\n</blockquote>\n<blockquote>\n<p>⭕ 每个类的实例都会记得自己是由哪个<code>Class</code> 实例所生成</p>\n</blockquote>\n<blockquote>\n<p>⭕ 通过<code>Class</code>可以完整地得到一个类中的所有被加载的结构</p>\n</blockquote>\n<blockquote>\n<p>⭕ <code>Class</code>类是<code>Reflection</code>的根源，针对任何你想动态加载、运行的类，唯有先获得相应的</p>\n</blockquote> <h3><a id=\"3_Class_202\"></a>3. Class类的常用方法方法</h3>\n<table><thead><tr><th>方法名</th><th>功能说明</th></tr></thead><tbody><tr><td><code>static Class forName(String name)</code></td><td>返回指定类名 <code>name</code> 的 <code>Class</code> 对象</td></tr><tr><td><code>Object newInstance()</code></td><td>调用缺省构造函数，返回该<code>Class</code>对象的一个实例</td></tr><tr><td><code>getName()</code></td><td>返回此Class对象所表示的实体（类、接口、数组类、基本类型或<code>void</code>）名称</td></tr><tr><td><code>Class getSuperClass()</code></td><td>返回当前<code>Class</code>对象的父类的<code>Class</code>对象</td></tr><tr><td><code>Class [] getInterfaces()</code></td><td>获取当前<code>Class</code>对象的接口</td></tr><tr><td><code>ClassLoader getClassLoader()</code></td><td>返回该类的类加载器</td></tr><tr><td><code>Class getSuperclass()</code></td><td>返回表示此<code>Class</code>所表示的实体的超类的Class</td></tr><tr><td><code>Constructor[] getConstructors()</code></td><td>返回一个包含某些<code>Constructor</code>对象的数组</td></tr><tr><td><code>Field[] getDeclaredFields()</code></td><td>返回<code>Field</code>对象的一个数组</td></tr><tr><td><code>Method getMethod(String name,Class … paramTypes)</code></td><td>返回一个<code>Method</code>对象，此对象的形参类型为<code>paramType</code></td></tr></tbody></table><h3><a id=\"3_Class_215\"></a>3. 哪些类型可以有Class对象？</h3>\n<blockquote>\n<p>（1）class： 外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类<br/> （2）interface：接口<br/> （3）[]：数组<br/> （4）enum：枚举<br/> （5）annotation：注解@interface<br/> （6）primitive type：基本数据类型<br/> （7）void</p>\n</blockquote> <h2><a id=\"Class_225\"></a>三、获取Class类实例的四种方法</h2> <h3><a id=\"1_class_226\"></a>1. 调用运行时类的属性：.class</h3>\n<blockquote>\n<p>前提：若已知具体的类，通过类的class属性获取，该方法最为安全可靠， 程序性能最高<br/> 示例： <code>Class clazz1 = String.class;</code></p>\n</blockquote> <h3><a id=\"2_getClass_232\"></a>2. 通过运行时类的对象,调用getClass()</h3>\n<blockquote>\n<p>前提：已知某个类的实例，调用该实例的<code>getClass()</code>方法获取<code>Class</code>对象<br/> 示例：<code>Class clazz = “www.atguigu.com”.getClass();</code></p>\n</blockquote> <h3><a id=\"3ClassforNameString_classPath_237\"></a>3.调用Class的静态方法：forName(String classPath)</h3>\n<blockquote>\n<p>前提：已知一个类的全类名，且该类在类路径下，可通过<code>Class</code>类的静态方法<code>forName()</code> 获取，可能抛出<code>ClassNotFoundException</code><br/> 示例： <code>Class clazz = Class.forName(“java.lang.String”);</code></p>\n</blockquote> <h3><a id=\"4_ClassLoader_243\"></a>4. 使用类的加载器：ClassLoader</h3>\n<blockquote>\n<p>示例：<br/> <code>ClassLoader cl = this.getClass().getClassLoader();</code><br/> <code>Class clazz4 = cl.loadClass(“类的全类名”);</code></p>\n</blockquote> <h3><a id=\"5__249\"></a>5. 代码演示</h3> <pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//方式一：调用运行时类的属性：.class</span>\n            <span class=\"token class-name\">Class</span> clazz1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//class com.jiaying.java1.Person</span>\n            <span class=\"token comment\">//方式二：通过运行时类的对象,调用getClass()</span>\n            <span class=\"token class-name\">Person</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Class</span> clazz2 <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//class com.jiaying.java1.Person</span>\n\n            <span class=\"token comment\">//方式三：调用Class的静态方法：forName(String classPath)</span>\n            <span class=\"token class-name\">Class</span> clazz3 <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.jiaying.java1.Person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Class</span> clazz5 <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.String\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//class com.jiaying.java1.Person</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//class java.lang.String</span>\n\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz1 <span class=\"token operator\">==</span> clazz2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz1 <span class=\"token operator\">==</span> clazz3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span>\n\n            <span class=\"token comment\">//方式四：使用类的加载器：ClassLoader  (了解)</span>\n            <span class=\"token class-name\">ClassLoader</span> classLoader <span class=\"token operator\">=</span> <span class=\"token class-name\">ReflectionTest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Class</span> clazz4 <span class=\"token operator\">=</span> classLoader<span class=\"token punctuation\">.</span><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.jiaying.java1.Person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//class com.jiaying.java1.Person</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz1 <span class=\"token operator\">==</span> clazz4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <h2><a id=\"__277\"></a>四、 创建运行时类的对象</h2> <h3><a id=\"1__278\"></a>1. 引入</h3>\n<blockquote>\n<p>⭕ 有了Class对象，能做什么？</p>\n<p>创建类的对象：调用<code>Class</code>对象的<code>newInstance()</code>方法<br/> 要求：</p>\n<ol><li>类必须有一个无参数的构造器。</li><li>类的构造器的访问权限需要足够。</li></ol>\n</blockquote>\n<blockquote>\n<p>⭕ 难道没有无参的构造器就不能创建对象了吗？<br/> 不是！只要在操作的时候明确的调用类中的构造器，并将参数传递进去之后，才可以实例化操作。<br/> 步骤如下：</p>\n<ol><li>通过<code>Class</code>类的<code>getDeclaredConstructor(Class … parameterTypes)</code>取得本类的指定形参类型的构造器</li><li>向构造器的形参中传递一个对象数组进去，里面包含了构造器中所需的各个参数。</li><li>通过<code>Constructor</code>实例化对象。</li></ol>\n</blockquote> <h3><a id=\"2__295\"></a>2. 语法步骤</h3>\n<blockquote>\n<p>（1）根据全类名获取对应的<code>Class</code>对象</p>\n</blockquote> <pre><code class=\"prism language-java\"><span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> “<span class=\"token class-name\"><span class=\"token namespace\">atguigu<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">.</span></span>Person</span>\"<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\nclazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>（2）调用指定参数结构的构造器，生成<code>Constructor</code>的实例</p>\n</blockquote> <pre><code class=\"prism language-java\"><span class=\"token class-name\">Constructor</span> con <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>（3）通过<code>Constructor</code>的实例创建对应类的对象，并初始化类属性</p>\n</blockquote> <pre><code class=\"prism language-java\"><span class=\"token class-name\">Person</span> p2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> con<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Peter\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <h3><a id=\"3__317\"></a>3. 代码演示</h3> <pre><code class=\"prism language-java\"> <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span> <span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">&gt;</span></span> clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/*\n        newInstance():调用此方法，创建对应的运行时类的对象。内部调用了运行时类的空参的构造器。\n\n        要想此方法正常的创建运行时类的对象，要求：\n        1.运行时类必须提供空参的构造器\n        2.空参的构造器的访问权限得够。通常，设置为public。\n\n\n        在javabean中要求提供一个public的空参构造器。原因：\n        1.便于通过反射，创建运行时类的对象\n        2.便于子类继承此运行时类时，默认调用super()时，保证父类有此构造器\n\n         */</span>\n        <span class=\"token class-name\">Person</span> obj <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n</code></pre> <h3><a id=\"4__342\"></a>4. 体会反射的动态性</h3> <pre><code class=\"prism language-java\"><span class=\"token comment\">//体会反射的动态性</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//0,1,2</span>\n            <span class=\"token class-name\">String</span> classPath <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n                    classPath <span class=\"token operator\">=</span> <span class=\"token string\">\"java.util.Date\"</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n                    classPath <span class=\"token operator\">=</span> <span class=\"token string\">\"java.lang.Object\"</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n                    classPath <span class=\"token operator\">=</span> <span class=\"token string\">\"com.atguigu.java.Person\"</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>classPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/*\n    创建一个指定类的对象。\n    classPath:指定类的全类名\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> classPath<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span>  <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>classPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">return</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <h2><a id=\"_382\"></a>五、获取运行时类的完整结构</h2> <p>提供具有丰富内容的<code>Person</code>类</p> <pre><code class=\"prism language-java\"><span class=\"token comment\">//接口</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">MyInterface</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//注解</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>TYPE<span class=\"token punctuation\">,</span> FIELD<span class=\"token punctuation\">,</span> METHOD<span class=\"token punctuation\">,</span> PARAMETER<span class=\"token punctuation\">,</span> CONSTRUCTOR<span class=\"token punctuation\">,</span> LOCAL_VARIABLE<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">MyAnnotation</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//父类</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Creature</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">char</span> gender<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> weight<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">breath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生物呼吸\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生物吃东西\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Person类</span>\n<span class=\"token annotation punctuation\">@MyAnnotation</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Creature</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span><span class=\"token class-name\">MyInterface</span><span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@MyAnnotation</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n     <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@MyAnnotation</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> nation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我的国籍是：\"</span> <span class=\"token operator\">+</span> nation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> nation<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> interests<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">ClassCastException</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> interests <span class=\"token operator\">+</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是一个人\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showDesc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是一个可爱的人\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Person{\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\", age=\"</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span>\n                <span class=\"token string\">\", id=\"</span> <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span>\n                <span class=\"token char\">'}'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <h3><a id=\"1__470\"></a>1. 获取当前运行时类的属性结构</h3>\n<table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>public Field[] getFields()</code></td><td>返回此<code>Class</code>对象所表示的类或接口的<code>public</code>的<code>Field</code></td></tr><tr><td><code>public Field[] getDeclaredFields()</code></td><td>返回此<code>Class</code>对象所表示的类或接口的全部<code>Field</code></td></tr></tbody></table>\n<ul><li><strong>Field方法中：</strong></li></ul>\n<table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>public int getModifiers()</code></td><td>以整数形式返回此<code>Field</code>的修饰符</td></tr><tr><td><code>public Class&lt;?&gt; getType()</code></td><td>得到<code>Field</code>的属性类型</td></tr><tr><td><code>public String getName()</code></td><td>返回<code>Field</code>的名称</td></tr></tbody></table><pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//获取属性结构</span>\n        <span class=\"token comment\">//getFields():获取当前运行时类及其父类中声明为public访问权限的属性</span>\n        <span class=\"token class-name\">Field</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fields <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span> f <span class=\"token operator\">:</span> fields<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//getDeclaredFields():获取当前运行时类中声明的所有属性。（不包含父类中声明的属性）</span>\n        <span class=\"token class-name\">Field</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> declaredFields <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span> f <span class=\"token operator\">:</span> declaredFields<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//权限修饰符  数据类型 变量名</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Field</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> declaredFields <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span> f <span class=\"token operator\">:</span> declaredFields<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//1.权限修饰符</span>\n            <span class=\"token keyword\">int</span> modifier <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>modifier<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//2.数据类型</span>\n            <span class=\"token class-name\">Class</span> type <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//3.变量名</span>\n            <span class=\"token class-name\">String</span> fName <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>fName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre> <h3><a id=\"2__529\"></a>2. 获取当前运行时类的方法结构</h3>\n<table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>public Method[] getMethods()</code></td><td>返回此<code>Class</code>对象所表示的类或接口的<code>public</code>的方法</td></tr><tr><td><code>public Method[] getDeclaredMethods()</code></td><td>返回此<code>Class</code>对象所表示的类或接口的全部方法</td></tr></tbody></table>\n<ul><li><strong>Method类中：</strong></li></ul>\n<table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>public Class&lt;?&gt; getReturnType()</code></td><td>取得全部的返回值</td></tr><tr><td><code>public Class&lt;?&gt;[] getParameterTypes()</code></td><td>取得全部的参数</td></tr><tr><td><code>public int getModifiers()</code></td><td>取得修饰符</td></tr><tr><td><code>public Class&lt;?&gt;[] getExceptionTypes()</code></td><td>取得异常信息</td></tr></tbody></table><pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//getMethods():获取当前运行时类及其所有父类中声明为public权限的方法</span>\n        <span class=\"token class-name\">Method</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> methods <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> m <span class=\"token operator\">:</span> methods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//getDeclaredMethods():获取当前运行时类中声明的所有方法。（不包含父类中声明的方法）</span>\n        <span class=\"token class-name\">Method</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> declaredMethods <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> m <span class=\"token operator\">:</span> declaredMethods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">/*\n    @Xxxx\n    权限修饰符  返回值类型  方法名(参数类型1 形参名1,...) throws XxxException{}\n     */</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Method</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> declaredMethods <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> m <span class=\"token operator\">:</span> declaredMethods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//1.获取方法声明的注解</span>\n            <span class=\"token class-name\">Annotation</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> annos <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Annotation</span> a <span class=\"token operator\">:</span> annos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">//2.权限修饰符</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//3.返回值类型</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">getReturnType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//4.方法名</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//5.形参列表</span>\n            <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> parameterTypes <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>parameterTypes <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> parameterTypes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> parameterTypes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> parameterTypes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>parameterTypes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" args_\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>parameterTypes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" args_\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//6.抛出的异常</span>\n            <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> exceptionTypes <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">getExceptionTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>exceptionTypes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"throws \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> exceptionTypes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> exceptionTypes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>exceptionTypes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>exceptionTypes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre> <h3><a id=\"3__625\"></a>3. 获取当前运行时类的构造器结构</h3>\n<table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>public Constructor&lt;T&gt;[] getConstructors()</code></td><td>返回此 <code>Class</code> 对象所表示的类的所有<code>public</code>构造方法。</td></tr><tr><td><code>public Constructor&lt;T&gt;[] getDeclaredConstructors()</code></td><td>返回此 <code>Class</code> 对象表示的类声明的所有构造方法。</td></tr></tbody></table>\n<ul><li><strong>Constructor类中：</strong></li></ul>\n<table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>public int getModifiers()</code></td><td>取得修饰符</td></tr><tr><td><code>public String getName()</code></td><td>取得方法名称</td></tr><tr><td><code>public Class&lt;?&gt;[] getParameterTypes()</code></td><td>取得参数的类型</td></tr></tbody></table><pre><code class=\"prism language-java\"><span class=\"token comment\">/*\n    获取构造器结构\n\n     */</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//getConstructors():获取当前运行时类中声明为public的构造器</span>\n        <span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> constructors <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constructor</span> c <span class=\"token operator\">:</span> constructors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//getDeclaredConstructors():获取当前运行时类中声明的所有的构造器</span>\n        <span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> declaredConstructors <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constructor</span> c <span class=\"token operator\">:</span> declaredConstructors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n <span class=\"token comment\">/*\n    获取运行时类的父类\n\n     */</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Class</span> superclass <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>superclass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/*\n    获取运行时类的带泛型的父类\n\n     */</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Type</span> genericSuperclass <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getGenericSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>genericSuperclass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/*\n    获取运行时类的带泛型的父类的泛型\n\n\n    代码：逻辑性代码  vs 功能性代码\n     */</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Type</span> genericSuperclass <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getGenericSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ParameterizedType</span> paramType <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ParameterizedType</span><span class=\"token punctuation\">)</span> genericSuperclass<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//获取泛型类型</span>\n        <span class=\"token class-name\">Type</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> actualTypeArguments <span class=\"token operator\">=</span> paramType<span class=\"token punctuation\">.</span><span class=\"token function\">getActualTypeArguments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        System.out.println(actualTypeArguments[0].getTypeName());</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">)</span>actualTypeArguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*\n    获取运行时类实现的接口\n     */</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> interfaces <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span> c <span class=\"token operator\">:</span> interfaces<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//获取运行时类的父类实现的接口</span>\n        <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> interfaces1 <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span> c <span class=\"token operator\">:</span> interfaces1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/*\n        获取运行时类所在的包\n\n     */</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Package</span> pack <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getPackage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>pack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/*\n        获取运行时类声明的注解\n\n     */</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test7</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Annotation</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> annotations <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Annotation</span> annos <span class=\"token operator\">:</span> annotations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>annos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n</code></pre> <h2><a id=\"_751\"></a>六、调用运行时类的指定结构</h2> <p><strong>关于setAccessible方法的使用</strong></p>\n<blockquote>\n<p>⭕ <code>Method</code>和<code>Field</code>、<code>Constructor</code>对象都有<code>setAccessible()</code>方法。</p>\n</blockquote>\n<blockquote>\n<p>⭕ <code>setAccessible</code>启动和禁用访问安全检查的开关。</p>\n</blockquote>\n<blockquote>\n<p>⭕ 参数值为<code>true</code>则指示反射的对象在使用时应该取消Java语言访问检查。</p>\n</blockquote>\n<blockquote>\n<p>⭕ 提高反射的效率。如果代码中必须用反射，而该句代码需要频繁的被 调用，那么请设置为<code>true</code>，使得原本无法访问的私有成员也可以访问，参数值为<code>false</code>则指示反射的对象应该实施Java语言访问检查。</p>\n</blockquote> <h3><a id=\"1___762\"></a>1. 调用运行时类中指定的属性</h3>\n<blockquote>\n<p>在反射机制中，可以直接通过<code>Field</code>类操作类中的属性，通过<code>Field</code>类提供的<code>set()</code>和 <code>get()</code>方法就可以完成设置和取得属性内容的操作。</p>\n</blockquote>\n<table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>public Field getField(String name)</code></td><td>返回此<code>Class</code>对象表示的类或接口的指定的<code>public</code>的<code>Field</code></td></tr><tr><td><code>public Field getDeclaredField(String name)</code></td><td>返回此<code>Class</code>对象表示的类或接口的指定的<code>Field</code></td></tr></tbody></table><p><strong>在Field中：</strong></p>\n<table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>public Object get(Object obj)</code></td><td>取得指定对象<code>obj</code>上此<code>Field</code>的属性内容</td></tr><tr><td><code>public void set(Object obj,Object value)</code></td><td>设置指定对象<code>obj</code>上此<code>Field</code>的属性内容</td></tr></tbody></table><p><strong>代码演示：</strong></p> <pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectionTest</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//创建运行时类的对象</span>\n        <span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token comment\">//获取指定的属性：要求运行时类中属性声明为public</span>\n        <span class=\"token comment\">//通常不采用此方法</span>\n        <span class=\"token class-name\">Field</span> id <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/*\n        设置当前属性的值\n\n        set():参数1：指明设置哪个对象的属性   参数2：将此属性值设置为多少\n         */</span>\n\n        id<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token number\">1001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/*\n        获取当前属性的值\n        get():参数1：获取哪个对象的当前属性值\n         */</span>\n        <span class=\"token keyword\">int</span> pId <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> id<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>pId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/*\n    如何操作运行时类中的指定的属性 -- 需要掌握\n     */</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testField1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//创建运行时类的对象</span>\n        <span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//1. getDeclaredField(String fieldName):获取运行时类中指定变量名的属性</span>\n        <span class=\"token class-name\">Field</span> name <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//2.保证当前属性是可访问的</span>\n        name<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//3.获取、设置指定对象的此属性值</span>\n        name<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n</code></pre> <h3><a id=\"2__832\"></a>2. 调用运行时类中的指定的方法</h3>\n<blockquote>\n<p>通过反射，调用类中的方法，通过<code>Method</code>类完成。步骤：</p>\n<ol><li>通过<code>Class</code>类的<code>getMethod(String name,Class…parameterTypes)</code>方法取得 一个<code>Method</code>对象，并设置此方法操作时所需要的参数类型。</li><li>之后使用<code>Object invoke(Object obj, Object[] args)</code>进行调用，并向方法中 传递要设置的<code>obj</code>对象的参数信息。</li></ol>\n</blockquote> <p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ce1c1f0d290f4cce8eaa93a5c6354bf7.png\"/></p>\n<blockquote>\n<p><code>Object invoke(Object obj, Object … args)</code><br/> 说明：<br/> ⭕ <code>Object</code> 对应原方法的返回值，若原方法无返回值，此时返回<code>null</code></p>\n<p>⭕ 若原方法若为静态方法，此时形参<code>Object obj</code>可为<code>null</code></p>\n<p>⭕ 若原方法形参列表为空，则<code>Object[] args</code>为<code>null</code><br/> ⭕ 若原方法声明为<code>private</code>,则需要在调用此<code>invoke()</code>方法前，显式调用 方法对象的<code>setAccessible(true)</code>方法，将可访问<code>private</code>的方法。</p>\n</blockquote> <p><strong>代码演示：</strong></p> <pre><code class=\"prism language-java\"> <span class=\"token comment\">/*\n    如何操作运行时类中的指定的方法 -- 需要掌握\n     */</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//创建运行时类的对象</span>\n        <span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/*\n        1.获取指定的某个方法\n        getDeclaredMethod():参数1 ：指明获取的方法的名称  参数2：指明获取的方法的形参列表\n         */</span>\n        <span class=\"token class-name\">Method</span> show <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"show\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//2.保证当前方法是可访问的</span>\n        show<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/*\n        3. 调用方法的invoke():参数1：方法的调用者  参数2：给方法形参赋值的实参\n        invoke()的返回值即为对应类中调用的方法的返回值。\n         */</span>\n        <span class=\"token class-name\">Object</span> returnValue <span class=\"token operator\">=</span> show<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">\"CHN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//String nation = p.show(\"CHN\");</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>returnValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*************如何调用静态方法*****************\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// private static void showDesc()</span>\n\n        <span class=\"token class-name\">Method</span> showDesc <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"showDesc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        showDesc<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//如果调用的运行时类中的方法没有返回值，则此invoke()返回null</span>\n<span class=\"token comment\">//        Object returnVal = showDesc.invoke(null);</span>\n        <span class=\"token class-name\">Object</span> returnVal <span class=\"token operator\">=</span> showDesc<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>returnVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//null</span>\n\n    <span class=\"token punctuation\">}</span>\n\n\n</code></pre> <h3><a id=\"3__892\"></a>3. 调用运行时类中的指定的构造器</h3> <p><strong>代码演示：</strong></p> <pre><code class=\"prism language-java\">  <span class=\"token comment\">/*\n    如何调用运行时类中的指定的构造器\n     */</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//private Person(String name)</span>\n        <span class=\"token comment\">/*\n        1.获取指定的构造器\n        getDeclaredConstructor():参数：指明构造器的参数列表\n         */</span>\n\n        <span class=\"token class-name\">Constructor</span> constructor <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//2.保证此构造器是可访问的</span>\n        constructor<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//3.调用此构造器创建运行时类的对象</span>\n        <span class=\"token class-name\">Person</span> per <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> constructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>per<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n</code></pre> </font>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "PHP", "cpp": 1, "csharp": 1, "python": 1, "javascript": 1, "java": 0, "sql": 0, "php": 1, "time": "2022-05-11 09:45:17", "summary": "反射机制概述前言一、反射机制概述动态语言静态语言二、类的理解类的加载过程初步了解类的加载过程图解了解：什么时候会发生类初始化？类加载器的作用中不同类型的类的加载器代码演示何为类？类的常用方法方法哪些类"}