{"blogid": "126679808", "writerAge": "码龄2年", "writerBlogNum": "29", "writerCollect": "71", "writerComment": "95", "writerFan": "448", "writerGrade": "3级", "writerIntegral": "645", "writerName": "苏瞳呐", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126679808.jpg", "writerRankTotal": "25920", "writerRankWeekly": "4747", "writerThumb": "134", "writerVisitNum": "21369", "blog_read_count": "151", "blog_time": "于 2022-09-03 17:43:05 发布", "blog_title": "SpringMVC（四万五字超详细笔记）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#1__2\">1. 简介</a></li><li><a href=\"#2__73\">2. 第一个程序</a></li><li><a href=\"#3__RequestMapping_245\">3. @RequestMapping</a></li><li><ul><li><a href=\"#31__248\">3.1 功能</a></li><li><a href=\"#32__255\">3.2 注解位置</a></li><li><a href=\"#33__278\">3.3 注解属性</a></li><li><a href=\"#34_ant_324\">3.4 支持ant风格的路径</a></li><li><a href=\"#35_RESTFul_347\">3.5 支持RESTFul架构的路径⭐</a></li></ul>\n</li><li><a href=\"#4_SpringMVC_382\">4. SpringMVC获取请求参数</a></li><li><ul><li><a href=\"#41_ServletAPI_387\">4.1 原生ServletAPI获取</a></li><li><a href=\"#42__407\">4.2 控制器方法的形参获取</a></li><li><a href=\"#43_RequestParam_427\">4.3 @RequestParam</a></li><li><a href=\"#44_RequestHeader_452\">4.4 @RequestHeader</a></li><li><a href=\"#45_CookieValue_471\">4.5 @CookieValue</a></li><li><a href=\"#46_Bean_492\">4.6 通过Bean获取</a></li><li><a href=\"#47__526\">4.7 乱码问题</a></li></ul>\n</li><li><a href=\"#5__558\">5. 域对象共享数据</a></li><li><ul><li><a href=\"#51_Request_567\">5.1 Request域</a></li><li><a href=\"#52_Session_666\">5.2 Session域</a></li><li><a href=\"#53_Application_702\">5.3 Application域</a></li></ul>\n</li><li><a href=\"#6_SpringMVC_723\">6. SpringMVC中的视图</a></li><li><ul><li><a href=\"#61_ThymeleafView_746\">6.1 ThymeleafView</a></li><li><a href=\"#62_InternalResourceView_759\">6.2 InternalResourceView</a></li><li><a href=\"#63_RedirectView_778\">6.3 RedirectView</a></li><li><a href=\"#64_viewcontroller_795\">6.4 视图控制器view-controller</a></li><li><a href=\"#65_JSP_824\">6.5 JSP的视图解析器(了解)</a></li></ul>\n</li><li><a href=\"#7RESTFul_879\">7.RESTFul</a></li><li><ul><li><a href=\"#71__882\">7.1 概念</a></li><li><a href=\"#72__902\">7.2 模拟用户模块操作</a></li><li><a href=\"#73_Thymeleaf_982\">7.3 Thymeleaf的循环语法</a></li></ul>\n</li><li><a href=\"#8_HttpMessageConverter_1037\">8. HttpMessageConverter</a></li><li><ul><li><a href=\"#81_RequestBody_1053\">8.1 @RequestBody</a></li><li><a href=\"#82_RequestEntity_1075\">8.2 RequestEntity</a></li><li><a href=\"#83_ResponseBody_1090\">8.3 @ResponseBody</a></li><li><ul><li><a href=\"#json_1111\">⭐处理json</a></li><li><a href=\"#ajax_1137\">⭐处理ajax</a></li><li><a href=\"#RestController_1191\">@RestController</a></li><li><a href=\"#_1199\">响应乱码</a></li></ul>\n</li><li><a href=\"#84_ResponseEntity_1231\">8.4 ResponseEntity</a></li><li><ul><li><a href=\"#_1237\">⭐文件下载</a></li><li><a href=\"#_1281\">⭐文件上传</a></li></ul>\n</li></ul>\n</li><li><a href=\"#9__1356\">9. 拦截器</a></li><li><ul><li><a href=\"#91__1366\">9.1 三个方法</a></li><li><a href=\"#92__1400\">9.2 创建拦截器</a></li><li><a href=\"#93__1454\">9.3 多个拦截器执行顺序</a></li></ul>\n</li><li><a href=\"#10__1479\">10. 异常处理器</a></li><li><ul><li><a href=\"#_1489\">配置文件方式</a></li><li><a href=\"#_1508\">注解方式</a></li></ul>\n</li><li><a href=\"#11__1526\">11. 完全注解开发</a></li><li><ul><li><a href=\"#111__1532\">11.1 创建初始化类</a></li><li><a href=\"#112_WebConfig_1584\">11.2 创建WebConfig类</a></li><li><a href=\"#113_SpringConfig_1682\">11.3 创建SpringConfig类</a></li></ul>\n</li><li><a href=\"#12_SpringMVC_1703\">12. SpringMVC执行流程</a></li><li><ul><li><a href=\"#121__1706\">12.1 常用组件</a></li><li><a href=\"#122_DispatcherServlet_1717\">12.2 DispatcherServlet初始化</a></li><li><a href=\"#123_DispatcherServlet_1763\">12.3 DispatcherServlet服务过程</a></li><li><a href=\"#124__1791\">12.4 执行流程</a></li></ul>\n</li><li><a href=\"#13_JSR303_1819\">13. JSR303后端校验</a></li><li><a href=\"#14__1904\">14. 异步请求</a></li><li><a href=\"#15__2075\">15. 邮件发送</a></li><li><a href=\"#16__2156\">16. 定时任务</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"1__2\"></a>1. 简介</h1>\n<p><code>MVC</code>：Model View Controller ，一种软件架构思想</p>\n<p><code>Model</code>：指的是JavaBean，包括User，Service，Dao等</p>\n<p><code>View</code>：视图层值过程中的html，jsp页面</p>\n<p><code>Controller</code>：控制层，工程中的servlet，接受响应响应浏览器</p>\n<p><code>SpringMVC</code>：是Spring的一个后续产品，子项目，为表述层开发提供的一整套的解决方案（表述层：前台页面和后台Servlet）</p>\n<hr/>\n<p>SpringMVC特点：</p>\n<ul><li>Spring家产品，与IOC基础无缝对接</li><li>基于原生的Servlet，通过强大的前端控制器DispatcherServlt，对请求和响应进行统一的处理</li><li>代码清新简洁，提高开发效率</li><li>内部组件化程度高，想要什么功能配置什么相应组件即可</li><li>性能卓越</li></ul>\n<p>我们下面使用的是<code>org.springframework:spring-webmvc:5.3.15</code> ，这个依赖了Spring5 中的一些核心包，SpringMVC本质就是在Spring上</p>\n<p><strong>依赖</strong>：</p>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>4.11<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">&gt;</span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-webmvc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>5.3.15<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>ch.qos.logback<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>logback-classic<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.2.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">&gt;</span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>javax.servlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>javax.servlet-api<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>3.1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">&gt;</span></span>provided<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf-spring5 --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.thymeleaf<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>thymeleaf-spring5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>3.0.14.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<br/>\n<h1><a id=\"2__73\"></a>2. 第一个程序</h1>\n<ol><li>配置<code>web.xml</code>，因为我们的请求都要被SpringMVC的前端控制器 <code>DispatcherServlt</code> 统一处理</li></ol>\n<p>① 默认配置方式：通过这种配置方式，SpringMVC的配置文件默认在<code>WEB-INF</code>在，默认名称是<code>[servlet-name]-servlet.xml</code>，这样就不好了，因为一般配置文件都放在<code>main/resources</code>目录下，所以建议用下面的扩展配置方式</p>\n<pre><code class=\"prism language-xml\"><span class=\"token comment\">&lt;!-- web.xml里面：配置SpringMVC的前端控制器，对发来的请求统一处理--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">&gt;</span></span>DispatcherServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-class</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-class</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-mapping</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">&gt;</span></span>DispatcherServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">&gt;</span></span>/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">&gt;</span></span>  \n    <span class=\"token comment\">&lt;!-- 这里不能写固定，写成一个斜杠表示发来的所有请求但不包括.jsp为后缀的请求路径，\n     \t 因为jsp本质是Servlet，需要专门的Servlet来处理，\n   \t\t 如果交给DispatcherServlet处理就当作一个简单的请求，不能显示页面了。（因为jsp页面是tomcat的jsp引擎解析的！）\n\t\t 在Filter中有写成/*,这才是所有请求，包括了jsp\n\t--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-mapping</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p><strong>② 扩展配置方式：⭐</strong> 可以通过<code>servlet</code>标签里面的<code>init-param</code>标签设置SpringMVC框架的配置文件位置和名称，通过<code>load-on-startup</code>标签设置前端控制器的初始化时间。</p>\n<p>web.xml：</p>\n<pre><code class=\"prism language-xml\"><span class=\"token comment\">&lt;!-- 配置SpringMVC的前端控制器，对发来的请求统一处理--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">&gt;</span></span>DispatcherServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-class</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-class</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>init-param</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token comment\">&lt;!-- 固定的参数名--&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-name</span><span class=\"token punctuation\">&gt;</span></span>contextConfigLocation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-name</span><span class=\"token punctuation\">&gt;</span></span>  \n        <span class=\"token comment\">&lt;!-- 注意一定要加上classpath，对应java目录下文件和resources下的文件,\n   \t\t\t springMVC.xml创建和spring创建配置文件的方式本质一样--&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-value</span><span class=\"token punctuation\">&gt;</span></span>classpath:springMVC.xml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-value</span><span class=\"token punctuation\">&gt;</span></span>    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>init-param</span><span class=\"token punctuation\">&gt;</span></span>\n    \n    <span class=\"token comment\">&lt;!-- 防止都在第一次访问时初始化，而影响体验，这个参数1是让前端控制器初始化时间提前到服务器启动时--&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>load-on-startup</span><span class=\"token punctuation\">&gt;</span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>load-on-startup</span><span class=\"token punctuation\">&gt;</span></span>  \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-mapping</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">&gt;</span></span>DispatcherServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">&gt;</span></span>/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">&gt;</span></span>  \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-mapping</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<ol start=\"2\"><li><code>main/resources/springMVC.xml</code>：编写SpringMVC的XML配置文件</li></ol>\n<pre><code class=\"prism language-xml\"><span class=\"token comment\">&lt;!-- 开启注解扫描--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>component-scan</span> <span class=\"token attr-name\">base-package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.sutong<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token comment\">&lt;!-- 配置Thymeleaf视图解析器,并注入bean，Thymeleaf非常类似JSP中的EL表达式！！--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewResolver<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.thymeleaf.spring5.view.ThymeleafViewResolver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>order<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span> <span class=\"token comment\">&lt;!-- 设置解析器优先级--&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>characterEncoding<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span> \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>templateEngine<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span> \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.thymeleaf.spring5.SpringTemplateEngine<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token comment\">&lt;!-- 内部bean--&gt;</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>templateResolver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n                    <span class=\"token comment\">&lt;!-- 视图前缀 - 只/WEB-INF/templates/目录下的--&gt;</span>  \n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>prefix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/WEB-INF/templates/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span> \n\n                    <span class=\"token comment\">&lt;!-- 视图后缀 - 解析前缀下的.html文件--&gt;</span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>suffix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.html<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>  \n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>templateMode<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>HTML5<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>characterEncoding<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<blockquote>\n<p>之所以把要解析的html文件放到WEB-INF下因为这些html页面中有Thymeleaf的解析器的语法，不能让用户直接访问到（即使让用户访问到用户也看不明白），要经过解析器解析后展现给用户 。解析器如果加上前后缀，我们只需要写文件名就行了，不需要加上全路径，解析的时候会自动加上了。</p>\n<p>Thymeleaf的解析器能解析能多种文件html，xml等，但现在最多用来解析html文件。</p>\n</blockquote>\n<ol start=\"3\"><li>创建一个<code>WEB-INF/templates/index.html</code>文件</li></ol>\n<p>注意：要加入使用解析器，要引入解析器名称空间</p>\n<pre><code class=\"prism language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>th</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.thymeleaf.org<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>   <span class=\"token comment\">&lt;!-- 这里--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>首页<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>Test页面<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<ol start=\"4\"><li>创建请求控制器，访问<code>templates</code>下的<code>index.html</code></li></ol>\n<p>由于<code>DispatcherServlet</code>对请求统一处理，而具体的请求又有不同的处理过程，所以要创建处理具体请求的类，即<strong>请求控制器</strong>，其中每一个处理请求的方法是<strong>控制器方法</strong>。</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Controller</span>  <span class=\"token comment\">// 放到IOC容器中</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloController</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token comment\">/**\n     * 要访问的是 “/”  -&gt;  /WEB-INF/templates/index.html，我们把前后缀去掉加上视图名称,方法名可以随便写的\n     * @RequestMapping 创建映射关系，当请求是/时，就会来执行这个注解所标记的方法，解析器会解析返回值，加上前后缀去跳转\n     * @return 返回视图名称\n     */</span>\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"index\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"5\"><li> <p>配置Tomcat，直接运行就能访问到<code>WEB-INF/templates/index.html</code>文件</p> </li><li> <p>超链接访问其他目标资源，<code>WEB-INF/templates/target.html</code></p> </li></ol>\n<p>index.html：</p>\n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- 浏览器解析/是到port,所以要加上项目路径才对，而项目路径可能变化不能写死，\n\t\t 所以要使用解析器解析，属性前面加上th就行了，代表这个属性要被解析\n         @{}, 当解析器检测到里面使用的绝对路径的时候，会自动帮我们添加上项目路径，即/springmvc/target--&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@{/target}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>访问目标页面target.html<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>HelloController.java （请求控制器）</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Controller</span>  <span class=\"token comment\">// 放到IOC容器中</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloController</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 访问 \"/target\"  -&gt;  /WEB-INF/templates/target.html</span>\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/target\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toTarget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"target\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>最后在浏览器输入<code>http://localhost:8080/springmvc/target</code>，就能访问<code>target.html</code>资源</p>\n<ol start=\"7\"><li>总结</li></ol>\n<blockquote>\n<ul><li> <p>浏览器发送请求，若请求地址符合前端控制器的url-pattern（web.xml里面写的），该请求就会被前端控制器DispatcherServlet处理。</p> </li><li> <p>前端控制器会读取SpringMVC的核心配置文件，通过扫描组件找到控制器，将<strong>请求地址</strong>和控制器中**@RequestMapping注解的value属性值**进行匹配。</p> </li><li> <p>若匹配成功，<strong>该注解所标识的控制器方法就是处理请求的方法。<strong>处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上前缀和后缀组成视图的路径，通过Thymeleaf对视图进行渲染，最终</strong>请求转发</strong>到视图所对应页面。（浏览器地址栏没变）</p> </li></ul>\n</blockquote>\n<br/>\n<h1><a id=\"3__RequestMapping_245\"></a>3. @RequestMapping</h1>\n<br/>\n<h2><a id=\"31__248\"></a>3.1 功能</h2>\n<p>请求映射，将请求和处理请求的控制器方法关联起来，建议映射关系。SpringMVC收到指定的请求就会来找在映射关系中对应的控制器方法来处理这个请求。</p>\n<br/>\n<h2><a id=\"32__255\"></a>3.2 注解位置</h2>\n<ul><li>类上面：设置映射请求的请求路径的初始信息</li><li>方法上面：设置请求的请求路径的具体信息</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Controller</span>  \n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user\"</span><span class=\"token punctuation\">)</span>          <span class=\"token comment\">// 通常用于不同模块设置访问路径</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloController</span> <span class=\"token punctuation\">{<!-- --></span>\n    \n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/target\"</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 想要访问target.html资源,访问路径应为 .../工程路径/user/target</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toTarget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"target\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>如果有多个控制器，而且控制器中的控制器方法，RequestMapping中处理的请求路径是一样的，springMVC就不知道找谁处理了，就会报错。所以RequestMapping中的请求路径是唯一的。</p>\n<p>所以我们可以在多个控制器上面加上RequestMapping注解，区分请求路径，加一层路径，从而因映射不冲突！！！</p>\n</blockquote>\n<br/>\n<h2><a id=\"33__278\"></a>3.3 注解属性</h2>\n<ul><li> <p><code>value</code> ：根据请求的<strong>请求地址来匹配</strong>，String[]类型，</p> <p>可以多个<code>@RequestMapping(value = {\"/target01\", \"/target02\"})</code>，满足数组中其中一个就行，<em>这个属性必须设置。</em></p> </li><li> <p><code>methed</code>：根据请求的<strong>请求方式来进行匹配</strong>，RequestMethod[]类型，<em>不写是不以请求方式匹配，则所有请求方式都行</em></p> <p><code>@RequestMapping(value = \"/target\", method = RequestMethod.GET)</code>既要请求路径满足，请求方式也要满足！可以多个请求方式。请求不被支持则会报405错误。</p>\n<blockquote>\n<p>对于处理请求方式的控制器方法，SpringMVC提供了RequestMapping的派生注解，就不用特别设置method属性了</p>\n<ul><li><code>GetMapping</code> ：处理Get请求的映射，下面一样，里面直接写value就行了</li><li><code>PostMapping</code></li><li><code>PutMapping</code></li><li><code>DeleteMapping</code></li></ul>\n<p>但是目前浏览器只支持Get/Post，若在form的action属性设置put/delete，则按照默认的Get请求方式，下面有解决方法</p>\n</blockquote> </li><li> <p><code>params</code>：根据请求的<strong>请求参数匹配</strong>，String[]类型，可以通过四种表达式设置请求参数和请求映射的匹配关系，<em>多个必须同时满足</em>，参数不匹配则会报400错误。</p>\n<ul><li> <p><code>\"param\"</code> ：请求映射的请求必须携带param请求参数</p> </li><li> <p><code>\"!param\"</code></p> </li><li> <p><code>\"param=value\"</code> ：请求映射的请求必须携带param请求参数并且值等于value</p> </li><li> <p><code>\"param!=value\"</code></p> </li></ul> <pre><code class=\"prism language-html\"><span class=\"token comment\">&lt;!-- 注意拼接参数的时候直接用?&amp;拼接也行，但idea会报一个红线，可以使用下面的方式！！--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@{/target(username=<span class=\"token punctuation\">'</span>admin<span class=\"token punctuation\">'</span>,id=1)}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>测试param参数<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span> \n</code></pre> <br/> </li><li> <p><code>headers</code>：根据请求的<strong>请求头信息匹配</strong>，String[]类型，也是四种方式。请求头不匹配则会报404错误。</p> <p><code>header</code> <code>!header</code> <code>header=value</code> <code>header!=value</code> 和上面表达意思一样</p> </li></ul>\n<h2><a id=\"34_ant_324\"></a>3.4 支持ant风格的路径</h2>\n<blockquote>\n<p>ant风格：类似模糊匹配</p>\n</blockquote>\n<p>以下是在RequestMapping注解的value属性下可以用的：</p>\n<p><code>？</code>：表示任意的单个字符</p>\n<p><code>*</code>：表示任意的0个或多个字符</p>\n<p><code>**</code>：表示任意的一层或多层目录，没有也行</p>\n<p>注意：在使用**时，只能使用/**/xxx的方式</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/t?mp/target\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toTarget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"target\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<br/>\n<h2><a id=\"35_RESTFul_347\"></a>3.5 支持RESTFul架构的路径⭐</h2>\n<p>原始方式：<code>/deleteUser?id=1</code></p>\n<p>rest方式：<code>/deleteUser/1</code></p>\n<blockquote>\n<p>/userSpringMVCToColltronller?id=1&amp;username=admin</p>\n<p>-&gt; 把请求参数以写成请求路径的方式</p>\n<p>-&gt; /user/springmvc/to/colltronller/1/admin</p>\n</blockquote>\n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@{/testPath/1}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>测试占位符<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Controller</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloController</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// /{占位符} 花括号里面就是占位符，@PathVariable(\"占位符\")会将请求路径中的值赋给注解后面对应的形参!!!</span>\n    <span class=\"token comment\">// 如果映射的路径中有占位符，请求路径中也必须有这个值(这层路径)，例如没有后面的'/1'或者'1'，就匹配不上，404</span>\n\t<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testPath/{id}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testPath</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Id = \"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<br/>\n<br/>\n<h1><a id=\"4_SpringMVC_382\"></a>4. SpringMVC获取请求参数</h1>\n<br/>\n<h2><a id=\"41_ServletAPI_387\"></a>4.1 原生ServletAPI获取</h2>\n<p>前端控制器DispatcherServlet，里面封装了很多数据，会<strong>根据控制器方法的形参自动注入值</strong>，我们可以直接使用</p>\n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@{/param(id=1,username=<span class=\"token punctuation\">'</span>admin<span class=\"token punctuation\">'</span>)}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>测试获取请求参数<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/param\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testParam</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">//会把当前请求的Request对象赋给形参,如果是rest风格就不能这样了</span>\n    <span class=\"token class-name\">String</span> id <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<br/>\n<h2><a id=\"42__407\"></a>4.2 控制器方法的形参获取</h2>\n<p>只需要保证<strong>控制器方法里面的形参名和请求参数的name保持一致</strong>就行了，SpringMVC帮我们获取好了，自动注入</p>\n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@{/param(id=1,username=<span class=\"token punctuation\">'</span>admin<span class=\"token punctuation\">'</span>)}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>测试获取请求参数<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/param\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 如果hobby是个复选框用字符串数组行。String hobby也行则多个值中间会用逗号进行拼接，例如a,b,c</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testParam</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> hobby<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<br/>\n<h2><a id=\"43_RequestParam_427\"></a>4.3 @RequestParam</h2>\n<p>上面的方法当我们的请求参数和我们的控制器方法里面的参数名不一致，就获取不到了！！</p>\n<p>我们可以在形参前面使用 <code>RequestParam</code> 注解，<strong>让请求参数和我们的形参映射</strong>，这样我们就不用改前端的源代码了！</p>\n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@{/param(id=1,user_name=<span class=\"token punctuation\">'</span>admin<span class=\"token punctuation\">'</span>)}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>测试获取请求参数<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/param\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testParam</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_name\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>属性 <code>boolean required()</code> 默认是true，代表value对应的参数一定要传输，没有就报错400</p>\n<p>属性<code>String defaultValue() </code> 默认值的意思，这个<strong>不管required是不是true还是false，当请求参数不传或是空字符串时</strong> 则使用默认值为形参赋值</p>\n<br/>\n<h2><a id=\"44_RequestHeader_452\"></a>4.4 @RequestHeader</h2>\n<p><strong>让请求头信息和我们的形参映射</strong>，找到请求头对应信息赋给我们的形参</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/param\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testParam</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Host\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> host<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Host请求头的信息是：\"</span> <span class=\"token operator\">+</span> host<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>属性 <code>boolean required()</code></p>\n<p>属性 <code>String defaultValue() </code></p>\n<br/>\n<h2><a id=\"45_CookieValue_471\"></a>4.5 @CookieValue</h2>\n<p><strong>让Cookie和我们的形参映射</strong>，将Cookie的key对应的信息赋给我们的形参</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/param\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testParam</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@CookieValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JSESSIONID\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JSESSIONID对应的值为：\"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上面这三个注解的里面的属性是一样的，都有那三个属性</p>\n<p>属性 <code>boolean required()</code></p>\n<p>属性 <code>String defaultValue() </code></p>\n<br/>\n<h2><a id=\"46_Bean_492\"></a>4.6 通过Bean获取</h2>\n<p><strong>当我们请求参数和我们实体类对象的属性名对应</strong>，那我们可以直接在形参位置使用这个实体类！SpringMVC自动为我们装好了</p>\n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@{/testBean}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    用户名：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span>\n    密码：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span>\n    年龄：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 下面省略了有参无参get/set方法</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloController</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testBean\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">// 这样就不会很多参数了</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User = \"</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<br/>\n<h2><a id=\"47__526\"></a>4.7 乱码问题</h2>\n<p>以上，post请求可能会有乱码，而设置编码必须要在前端处理器DispatcherServlet获取参数之前，所以可以使用过滤器设置编码，而SpringMVC内置了许多过滤器，我们在<code>web.xml</code>里面配置一下就好了</p>\n<blockquote>\n<p>Web三大组件执行顺序 ,Listener -&gt; Filter -&gt; Servlet，而 Listener 在项目启动时只执行一次，所以要使用 Filter</p>\n</blockquote>\n<pre><code class=\"prism language-xml\"><span class=\"token comment\">&lt;!-- 设置编码--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-name</span><span class=\"token punctuation\">&gt;</span></span>CharacterEncodingFilter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-name</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-class</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.web.filter.CharacterEncodingFilter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-class</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>init-param</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token comment\">&lt;!-- 设置CharacterEncodingFilter类里面的encoding属性--&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-name</span><span class=\"token punctuation\">&gt;</span></span>encoding<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-name</span><span class=\"token punctuation\">&gt;</span></span> \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-value</span><span class=\"token punctuation\">&gt;</span></span>UTF-8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-value</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>init-param</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>init-param</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token comment\">&lt;!-- 设置里面的forceResponseEncoding属性为true，看源码只有它为true才会设置响应的编码--&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-name</span><span class=\"token punctuation\">&gt;</span></span>forceResponseEncoding<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-name</span><span class=\"token punctuation\">&gt;</span></span>  \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-value</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-value</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>init-param</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-mapping</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-name</span><span class=\"token punctuation\">&gt;</span></span>CharacterEncodingFilter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-name</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">&gt;</span></span>/*<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">&gt;</span></span>  <span class=\"token comment\">&lt;!-- 对所有请求进行设置编码--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-mapping</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<br/>\n<br/>\n<h1><a id=\"5__558\"></a>5. 域对象共享数据</h1>\n<blockquote>\n<p>一共有四个域对象，pageContext -&gt; request -&gt; session -&gt; application</p>\n<p>这里不用JSP页面了，所以我们可以少一个域对象pageContext</p>\n</blockquote>\n<br/>\n<h2><a id=\"51_Request_567\"></a>5.1 Request域</h2>\n<ol><li> <p>原生的（用的少）</p> <pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testRequest\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>  \n    req<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 这个就是转发到 ...\\WEB-INF\\templates\\success.html，所以可以在success.html获取Request域中数据</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>\n</code></pre> <p>success.html:</p> <pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    success <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>${username}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>  <span class=\"token comment\">&lt;!-- ${}不能写道p标签里面，因为写里面就会当作纯文本了，在JSP页面里面可以--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> </li><li> <p><strong>使用ModelAndView</strong> （SpringMVC建议用这个）</p>\n<blockquote>\n<p>不管什么方式在前端处理器底层都会封装为为ModelAndView！！ 注意控制器方法的返回值</p>\n</blockquote> <pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n  * ModelAndView有Model和View的功能\n  * Model主要用于向请求域共享数据\n  * View主要用于设置视图，实现页面跳转\n  * @return 返回值必须是ModelAndView！！\n  *         返回给前端控制器解析他，不返回SpringMVC也不知道我们创建了这个ModelAndView\n  */</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testModelAndView\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ModelAndView</span> <span class=\"token function\">testModelAndView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">ModelAndView</span> modelAndView <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ModelAndView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 处理模型数据 - 往Request域中存数据</span>\n    modelAndView<span class=\"token punctuation\">.</span><span class=\"token function\">addObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sutong1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 设置视图名称，相当于以前返回的字符串</span>\n    modelAndView<span class=\"token punctuation\">.</span><span class=\"token function\">setViewName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">return</span> modelAndView<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>使用Model</p>\n<blockquote>\n<p>在控制器形参设置Model参数，返回视图名称</p>\n</blockquote> <pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testModel\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testModel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Model</span> model<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    model<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sutong2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>使用Map</p>\n<blockquote>\n<p>在控制器方法形参创建一个Map，方法里往Map里面存数据就是往Request域里面存放数据，最后返回视图名称</p>\n</blockquote> <pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testMap\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> map<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sutong3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>使用ModelMap</p>\n<blockquote>\n<p>在控制器形参设置ModelMap类型参数，返回视图名称，和第三种类似！！</p>\n</blockquote> <pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testModelMap\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testModelMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ModelMap</span> modelMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    modelMap<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sutong4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li></ol>\n<blockquote>\n<p><code>Model</code>, <code>Map</code>, <code>ModelMap</code>关系：</p>\n<p>当我们打印上面三个的运行时类名是都是用一个，<code>BindingAwareModelMap</code>！即都是<code>BindingAwareModelMap</code>类型实例的</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Model</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ModelMap</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">LinkedHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExtendedModelMap</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ModelMap</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Model</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BindingAwareModelMap</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ExtendedModelMap</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<br/>\n<h2><a id=\"52_Session_666\"></a>5.2 Session域</h2>\n<ol><li> <p>原生的</p> <pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testSession\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testSession</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSession</span> session<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    session<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>${session.username}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>   \n</code></pre> </li><li> <p><code>@SessionAttribute </code>注解，只能使用在类定义上（不太好用）</p> <p>作用：配置需要在session中存放的数据范围，SpringMVC将存放在model中对应的数据暂存到HttpSession中。</p> <pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@SessionAttributes</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 还可以通过type选择</span>\n<span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testSessionAttributes\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testSessionAttributes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Model</span> model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sutong\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 把model中所有数据放到request域，并且会把model中key为user的数据拷贝一份放到session域！</span>\n        model<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <br/> </li></ol>\n<h2><a id=\"53_Application_702\"></a>5.3 Application域</h2>\n<ol><li> <p>原生的</p> <pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testApplication\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 在参数上直接填ServletConfig/ServletContext会报错</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testApplication</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSession</span> session<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>  \n    <span class=\"token comment\">// 获取上下文对象很多方法，可以通过Session/Request/ServletConfig获取ServletContext ！！！</span>\n    <span class=\"token class-name\">ServletContext</span> application <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    application<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"word\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>${application.username}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> </li></ol>\n<br/>\n<br/>\n<h1><a id=\"6_SpringMVC_723\"></a>6. SpringMVC中的视图</h1>\n<p>SpringMVC中的视图是个<code>View</code>接口，视图的作用渲染数据，将模型<code>Model</code>中的数据展示给用户。</p>\n<p>视图的种类很多，默认有：</p>\n<ul><li><strong>转发视图</strong> <code>InternalResourceView</code></li><li><strong>重定向视图</strong> <code>RedirectView</code></li></ul>\n<p>当工程引入jstl 标签库的依赖（JSP里面用的），转发视图会自动转换为<code>JstlView</code></p>\n<p>若使用的视图技术为<code>Thymeleaf</code>，即配置了<code>Thymeleaf</code>的视图解析器，由此视图解析器解析之后所得到的是 <code>ThymeleafView</code></p>\n<blockquote>\n<p>创建的视图对象是什么只和我们返回的视图名称有关系！！！</p>\n<p>返回视图名称 没有前缀就是 <code>ThymeleafView</code></p>\n<p>forward 为前缀时就是 <code>InternalResourceView</code></p>\n<p>redirect 为前缀时就是 <code>RedirectView</code></p>\n</blockquote>\n<br/>\n<h2><a id=\"61_ThymeleafView_746\"></a>6.1 ThymeleafView</h2>\n<p>当控制器方法中所设置的<strong>视图名称没有加任何前缀时</strong>，则视图名称会被我们配置的<code>ThymeleafViewResolver</code>视图解析器解析（是<code>ThymeleafView</code>类型视图，即是底层的View的运行类型），<strong>视图名称拼接视图前缀和后缀所得到的最终路径，通过转发的方式实现跳转</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testThymeleaf\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> testThymeleaf <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<br/>\n<h2><a id=\"62_InternalResourceView_759\"></a>6.2 InternalResourceView</h2>\n<p>SpringMVC中默认的转发视图是<code>InternalResourceView</code></p>\n<p>当视图名称以<code>\"forward:\"</code>为前缀时，则创建<code>InternalResourceView</code>视图，此时的视图名称不会被我们配置的<code>ThymeleafView</code>视图解析器解析，而是会<strong>将前缀<code>\"forward:\"</code>去掉，剩余部分作为最终路径通过转发的方式实现跳转。</strong></p>\n<blockquote>\n<p>这个可以转发到另一个请求，也可以转发到一个页面（当然这个页面如果有thymeleaf语法还得要服务器解析）。</p>\n<p>例如\"forward:/testThymeleaf\"，“forward:/order”</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testInternalResourceView\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> testInternalResourceView <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"forward:/testThymeleaf\"</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 转发到上面的那个测试，还要创建一个ThymeleafView</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<br/>\n<h2><a id=\"63_RedirectView_778\"></a>6.3 RedirectView</h2>\n<p>SpringMVC中默认的重定向视图是<code>RedirectView</code></p>\n<p>当视图名称以<code>\"redirect:\"</code>为前缀时，则创建<code>RedirectVie</code>视图，此时的视图名称不会被我们配置的<code>ThymeleafView</code>视图解析器解析，而是会<strong>将前缀<code>\"redirect:\"</code>去掉，剩余部分作为最终路径通过重定向的方式实现跳转</strong></p>\n<blockquote>\n<p>可以重定向一个页面，请求，项目外的路径等。</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testRedirectView\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> testRedirectView <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"redirect:/testThymeleaf\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 重定向到上面的那个测试，还要创建一个ThymeleafView</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<br/>\n<h2><a id=\"64_viewcontroller_795\"></a>6.4 视图控制器view-controller</h2>\n<p>当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用<code>view-controller</code>标签进行表示，就不需要写个方法了。</p>\n<p>springMVC.xml：</p>\n<pre><code class=\"prism language-xml\"><span class=\"token comment\">&lt;!-- path就是RequestMapping注解里面写的，view-name就是控制器方法返回的视图名称--&gt;</span>\n<span class=\"token comment\">&lt;!-- 在当前控制器对应的控制器方法中没有其他请求过程的处理，只需要来设置一个视图名称的时候，就可以用这个标签--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">mvc:</span>view-controller</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">view-name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>index<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>    <span class=\"token comment\">&lt;!-- 没有前缀还是ThymeleafView--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">mvc:</span>annotation-driven</span><span class=\"token punctuation\">/&gt;</span></span>   <span class=\"token comment\">&lt;!-- 开启MVC的注解驱动，如果不写这个但写了上面那个则所有控制器中的使用控制器方法将会失效--&gt;</span>\n</code></pre>\n<p>完全注解开发：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WebMvcConfig</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WebMvcConfigurer</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addViewControllers</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ViewControllerRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addViewController</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setViewName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<br/>\n<h2><a id=\"65_JSP_824\"></a>6.5 JSP的视图解析器(了解)</h2>\n<blockquote>\n<p>开启工程会自动访问工程下的<code>index.jsp</code>，通过首页的<code>a</code>标签访问<code>/WEB-INF/jsp/testJsp.jsp</code>页面</p>\n</blockquote>\n<p><code>springMVC.xml</code>：</p>\n<pre><code class=\"prism language-xml\"><span class=\"token comment\">&lt;!-- 只配置JSP的视图解析器，没有配置Thymeleaf视图解析器--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>prefix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/WEB-INF/jsp/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>suffix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.jsp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p><code>webapp/index.jsp</code></p>\n<pre><code class=\"prism language-jsp\">&lt;a href=\"${pageContext.request.contextPath}/testJsp\"&gt;测试jsp解析器&lt;/a&gt;\n</code></pre>\n<p><code>/WEB-INF/jsp/testJsp.jsp</code>：</p>\n<pre><code class=\"prism language-html\">&lt;%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %&gt;\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>Title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- 这个不用前端处理器处理也行，如果放到WEB-INF目录外则可以直接访问--&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>Jsp页面<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p><code>JspController.java</code></p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JspController</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testJsp\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testJsp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 没有配置Thymeleaf视图解析器，这个工程只会创建默认的两种视图，</span>\n        <span class=\"token comment\">// 当没有任何前缀和加forward前缀则会被JSP的视图解析器InternalResourceViewResolver解析，</span>\n        <span class=\"token comment\">// 创建InternalResourceView视图加上前后缀转发。</span>\n        <span class=\"token comment\">// redirect前缀是创建RedirectView视图</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"testJsp\"</span><span class=\"token punctuation\">;</span>   \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<br/>\n<br/>\n<h1><a id=\"7RESTFul_879\"></a>7.RESTFul</h1>\n<br/>\n<h2><a id=\"71__882\"></a>7.1 概念</h2>\n<p><code>REST</code>：Representational state Transfer，表述层资源状态转移（表述层：前台页面和后台Servlet），一种思想（统一的规则）</p>\n<p>通过请求路径来实现间接操作资源的目的，就是上面的rest风格的路径，让请求路径统一，而根据请求方式做不同的业务。</p>\n<p>在HTTP协议里面，四个表述操作方式的动词：<code>GET</code>：获取资源，<code>POST</code>：新建资源，<code>PUT</code>：更新资源，<code>DELETE</code>：删除资源</p>\n<blockquote>\n<p><code>REST</code> 风格提倡 <code>URL</code> 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，<strong>不使用问号键值对方式携带请求参数</strong>，而是将要发送给服务器的数据作为 <code>URL</code> 地址的一部分，以保证整体风格的一致性。现在几乎都是这样的风格</p>\n</blockquote>\n<table><thead><tr><th>操作</th><th>传统方式</th><th>REST风格</th></tr></thead><tbody><tr><td>查询操作</td><td>getUserById?id=1</td><td>user/1 --&gt; get请求方式</td></tr><tr><td>保存操作</td><td>saveUser</td><td>user --&gt; post请求方式</td></tr><tr><td>删除操作</td><td>deleteUser?id=1</td><td>user/1 --&gt; delete请求方式</td></tr><tr><td>更新操作</td><td>updateUser</td><td>user --&gt; put请求方式</td></tr></tbody></table>\n<br/>\n<h2><a id=\"72__902\"></a>7.2 模拟用户模块操作</h2>\n<p>SpringMVC提供的过滤器 <code>HiddenHttpMethodFilter</code>，<strong>可将 POST 请求转换为 DELETE ,PUT,PATCH请求</strong></p>\n<p><code>HiddenHttpMethodFilter</code> 处理<code>put</code>和<code>delete</code>请求的条件：</p>\n<ul><li> <p>当前请求的请求方式必须为<code>post</code></p> </li><li> <p>当前请求必须传输请求参数<code>_method</code>，就会把post请求转化为参数<code>_method</code>的值！！</p> </li></ul>\n<blockquote>\n<p>注意在web.xml中注册时，必须先注册CharacterEncodingFilter，再注册HiddenHttpMethodFilter，因为HiddenHttpMethodFilter有获取请求参数的代码，而获取了请求参数在设置编码就没用了！！</p>\n</blockquote>\n<p>web.xml：</p>\n<pre><code class=\"prism language-xml\"><span class=\"token comment\">&lt;!-- 配置HiddenHttpMethodFilter过滤器--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-name</span><span class=\"token punctuation\">&gt;</span></span>HiddenHttpMethodFilter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-name</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-class</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.web.filter.HiddenHttpMethodFilter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-class</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-mapping</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-name</span><span class=\"token punctuation\">&gt;</span></span>HiddenHttpMethodFilter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-name</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">&gt;</span></span>/*<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token comment\">&lt;!-- 对所有请求--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-mapping</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>index.html</p>\n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@{/user/1}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>查询用户id为1的用户信息<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span>\n\n\n<span class=\"token comment\">&lt;!-- 表单只能写post/get，不能写put/delete即使写上也是使用默认的get，要使用SpringMVC提供的过滤器了--&gt;</span>\n<span class=\"token comment\">&lt;!-- 看源码必须是post才能让过滤器进行修改，\"POST\".equals(request.getMethod()) --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@{/user}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>        \n    <span class=\"token comment\">&lt;!-- 源码根据会_method参数进行修改请求方式request.getParameter(\"_method\")--&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hidden<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_method<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>PUT<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>  \n    用户名：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span>\n    密码：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span>\n    年龄：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>修改<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@{/user/1}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- 一般删除都是超链接，即使把超链接放到表单里面不会让表单提交的，怎么处理呢？--&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hidden<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_method<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>DELETE<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>  \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>删除id为1的用户<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>UserController.java</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">// 使用RestFul风格模拟用户资源的操作</span>\n<span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user/{id}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getOneUser</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查询Id为\"</span> <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span> <span class=\"token string\">\"的用户信息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@PutMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">updateUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"修改了\"</span> <span class=\"token operator\">+</span> user <span class=\"token operator\">+</span> <span class=\"token string\">\"用户信息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@DeleteMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user/{id}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">deleteUser</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除了Id为\"</span> <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span> <span class=\"token string\">\"的用户信息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<br/>\n<h2><a id=\"73_Thymeleaf_982\"></a>7.3 Thymeleaf的循环语法</h2>\n<p>Thymeleaf的循环/细节</p>\n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataTable<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">&gt;</span></span>Id<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">&gt;</span></span>Name<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">&gt;</span></span>Options<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>each</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>emp : ${employeeList}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>  <span class=\"token comment\">&lt;!-- request域直接写key就行--&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>${emp.id}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>${emp.name}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token comment\">&lt;!-- 或者这样写th:href=\"@{'/employee/'+${emp.id}}\"，删除应该是delete请求--&gt;</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@{/employee/}+${emp.id}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">v-on:</span>click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>deleteEmp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Delete<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>  \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Update<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>deleteForm<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hidden<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_method<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>delete<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>  <span class=\"token comment\">&lt;!-- 把上面的超链接get请求改为delete请求--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token comment\">&lt;!-- cdn引入Vue/或者下载放到static目录下，操作实现上面的get-&gt;delete，实际可以用Ajax，比这简单--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">var</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token literal-property property\">el</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#dataTable\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function-variable function\">deleteEmp</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">var</span> deleteForm <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"deleteForm\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                deleteForm<span class=\"token punctuation\">.</span>action <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 表单根据超链接的提交地址去提交</span>\n                deleteForm<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 提交表单 get-&gt;delete</span>\n                event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 取消超链接的默认行为</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<pre><code class=\"prism language-xml\"><span class=\"token comment\">&lt;!-- 开放对静态资源的访问！！（webapp/static下的vue.js,jquery.js等）静态资源先会被SpringMVC前端控制器处理，\n  \t 如果在控制器中找不到对应的映射就会交给默认的Servlet处理,再找不到就真404了--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">mvc:</span>default-servlet-handler</span><span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token comment\">&lt;!-- 这个一般和上面那个一起写上--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">mvc:</span>annotation-driven</span><span class=\"token punctuation\">/&gt;</span></span>\n</code></pre>\n<br/>\n<br/>\n<h1><a id=\"8_HttpMessageConverter_1037\"></a>8. HttpMessageConverter</h1>\n<p><code>HttpMessageConverter</code>：报文信转换器，将<strong>请求报文转化为java对象</strong>，或将<strong>java对象转化为响应报文</strong></p>\n<p>两个注解</p>\n<ul><li><code>@RequestBody</code></li><li><code>@ResponseBody </code></li></ul>\n<p>两个类</p>\n<ul><li><code>RequestEntity</code></li><li><code>ResponseEntity</code></li></ul>\n<br/>\n<h2><a id=\"81_RequestBody_1053\"></a>8.1 @RequestBody</h2>\n<p><code>@RequestBoby</code> ： 可以获取<strong>请求体</strong>（就是和req.getParameter类似），在控制器方法设置一个形参，使用@RequestBody进行标识，当前请求的请求体就会为形参赋值</p>\n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@{/testRequestBody}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>  <span class=\"token comment\">&lt;!-- post请求才有请求体，因为get参数都拼接到url上了--&gt;</span>\n    用户名：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span>\n    密码：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testRequestBody\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testRequestBody</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">String</span> reqBobyStr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>reqBobyStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// username=sutong&amp;password=123</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<br/>\n<h2><a id=\"82_RequestEntity_1075\"></a>8.2 RequestEntity</h2>\n<p><code>RequestEntity</code>：封装<strong>请求报文</strong>的一个类，在控制器方法的形参中设置该类型的形参，当前请求的<strong>请求报文</strong>就会赋值给该形参，可以通过<code>getHeaders()</code>获取<strong>请求头信息</strong>，通过<code>getBody()</code>获取<strong>请求体信息</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testRequestEntity\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testRequestEntity</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RequestEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> reqEntity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>reqEntity<span class=\"token punctuation\">.</span><span class=\"token function\">getHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 请求头的所有k-v都会输出，获得特定一个可以继续.get(\"Host\")</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>reqEntity<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Post才有请求体，就是参数</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<br/>\n<h2><a id=\"83_ResponseBody_1090\"></a>8.3 @ResponseBody</h2>\n<p><code>@ResponseBody</code> 用于标识一个控制器方法，可以将<strong>该方法的返回值直接作为响应报文的响应体响应到浏览器</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testResponseBody\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testResponseBody</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletResponse</span> resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    resp<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"haha\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// SpringMVC中写法!!</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testResponseBody\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@ResponseBody</span>                          \n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testResponseBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"haha\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 响应的是haha这个字符串，就不是视图名称了，而是当前响应的响应体</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<br/>\n<h3><a id=\"json_1111\"></a>⭐处理json</h3>\n<p>如果想要想要响应对象的话，要先转化为<strong>Json字符串</strong>响应给浏览器</p>\n<p>（这里我们用的是<code>jackson</code>，内嵌于<code>Spring</code>框架方便点，好像还比<code>Gson</code>快点）</p>\n<blockquote>\n<ol><li> <p>加入jackson依赖</p> </li><li> <p>开启mvc的注解驱动<code>&lt;mvc:annotation-driven/&gt;</code></p> </li><li> <p>在控制器方法是使用<code>@ResponseBody</code>标识</p> </li><li> <p>将Java对象直接作为控制器方法的返回值返回，<code>jackson</code>就会自动帮我们转化为<code>Json</code>格式的字符串</p> </li></ol>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testResponseBody\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@ResponseBody</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">testResponseBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 如果返回的是一个对象，要先处理为JSON字符串</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"苏瞳\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 挺方便的！！</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// {\"id\":1,\"username\":\"苏瞳\",\"password\":\"123\",\"age\":19}</span>\n</code></pre>\n<br/>\n<h3><a id=\"ajax_1137\"></a>⭐处理ajax</h3>\n<blockquote>\n<p>导入<code>axios.js</code>或者cdn版的，来发送 ajax 请求（少用JQuery）</p>\n</blockquote>\n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- 点击不是跳转，会alert服务器返回的data--&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@{/testAxios}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">v-on:</span>click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>onAxios<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>SpringMVC处理Ajax请求<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span> \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/axios/dist/axios.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token literal-property property\">el</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#app\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function-variable function\">onAxios</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>                          <span class=\"token comment\">// 使用axios发送Ajax请求 - get</span>\n                    <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">\"123456\"</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 显示服务器响应的数据</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 阻止上面测试超链接的默认行为</span>\n\n                <span class=\"token comment\">// axios.get('event.target.href', {    // 这样写也行</span>\n                <span class=\"token comment\">//     params: {<!-- --></span>\n                <span class=\"token comment\">//         username: \"admin\",</span>\n                <span class=\"token comment\">//         password: \"123456\"</span>\n                <span class=\"token comment\">//     }</span>\n                <span class=\"token comment\">// }).then(function (response) {<!-- --></span>\n                <span class=\"token comment\">//     alert(response.data);</span>\n                <span class=\"token comment\">// });</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testAxios\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@ResponseBody</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testAxios</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>username <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// admin 123456</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello, axios\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<br/>\n<h3><a id=\"RestController_1191\"></a>@RestController</h3>\n<p><code>@ResponseBody</code> 这个注解后面是用的最多的！！</p>\n<p>所以SpringMVC提供了一个复合注解<code>@RestController</code>，标识在<strong>控制器的类上面</strong>，相当于为类添加了 <code>@Controller</code>，并且为每一个方法都添加了<code>@ResponseBody</code>注解！！！</p>\n<br/>\n<h3><a id=\"_1199\"></a>响应乱码</h3>\n<p>我们以前在Filter里面设置过请求和响应编码了，但不知道为啥直接返回中文字符串还响应乱码！！？？</p>\n<blockquote>\n<p>过滤器中已经设置了response的响应格式，但是返回值是string类型时会使用StringHttpMessageConverter这个类的对象去输出，这个类的对象默认使用的格式ISO-8859-1来输出，所以也就意味着前面你在过滤器无论怎样设置response的写入格式都会被覆盖。解决的方案有三种：</p>\n<p>第一种是自己去重写StringHttpMessageConvert这个类，然后设置它的默认编码格式为utf-8，然后将他注册进你的springmvc中</p>\n<p>第二种就是下面这种利用配置文件的方式</p>\n<p>第三种可以在@RequestMapping注解加上属性produces=\"text/html;charset=utf-8\"解决，但这个只能解决当前的控制器方法</p>\n</blockquote>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">mvc:</span>annotation-driven</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">mvc:</span>message-converters</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token comment\">&lt;!-- 处理响应中文内容乱码 --&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.http.converter.StringHttpMessageConverter<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>defaultCharset<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>supportedMediaTypes<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>list</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">&gt;</span></span>text/html<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">&gt;</span></span>text/plain<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">&gt;</span></span>application/json<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>list</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">mvc:</span>message-converters</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">mvc:</span>annotation-driven</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<br/>\n<h2><a id=\"84_ResponseEntity_1231\"></a>8.4 ResponseEntity</h2>\n<p><code>ResponseEntity</code>用于<strong>控制器方法的返回值类型</strong>，处理下载二进制文件的接口，该控制器方法的<strong>返回值就是响应到浏览器的响应报文</strong> （相当于自定义的响应报文）</p>\n<br/>\n<h3><a id=\"_1237\"></a>⭐文件下载</h3>\n<p>要下载文件路径：<code>webapp/static/imgs/head.jpg</code> ，下面的代码几乎固定的，无非就改改下载的文件名而已！！</p>\n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@{/testDownload}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>下载head.jpg图片<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileUpAndDownController</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testDownload\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">testDownload</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSession</span> session<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 1.获取要下载的文件路径</span>\n        <span class=\"token class-name\">ServletContext</span> context <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获得ServletContext</span>\n        <span class=\"token class-name\">String</span> downloadPath <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getRealPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/static/imgs/head.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 文件在服务器的部署真实路径</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>downloadPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 2.读取要下载的文件 - 就是响应体</span>\n        <span class=\"token comment\">//  new FileInputStream(downloadPath)或者context.getResourceAsStream(\"/static/imgs/head.jpg\"); </span>\n        <span class=\"token comment\">//  参数路径不同，前者要写绝对路径，后置是以部署到tomcat服务器上的项目名开始的，写绝对路径好像不行！！</span>\n        <span class=\"token class-name\">FileInputStream</span> fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>downloadPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>fis<span class=\"token punctuation\">.</span><span class=\"token function\">available</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        fis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 3.设置响应头 - 告诉客户端收到的数据是用于下载的，不是直接显示。设置下载文件的类型和服务器上传的类型一样</span>\n        <span class=\"token class-name\">HttpHeaders</span> respHeaders <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        respHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Disposition\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"attachment;filename=head.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        respHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getMimeType</span><span class=\"token punctuation\">(</span>downloadPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 4.创建ResponseEntity，返回</span>\n        <span class=\"token class-name\">ResponseEntity</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span> entity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> respHeaders<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        fis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> entity<span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">// 链式编程</span>\n        <span class=\"token operator\">/</span><span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">headers</span><span class=\"token punctuation\">(</span>respHeaders<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<br/>\n<h3><a id=\"_1281\"></a>⭐文件上传</h3>\n<p>条件：</p>\n<ul><li>必须是**<code>post</code>**请求</li><li><code>encType</code> 属性值必须为 <strong><code>multipart/form-data</code></strong> ，提交的数据以多端（每一个表单项一个数据段）的形式进行拼接，然后以二进制流的形式发送给服务器。</li><li>使用 <code>input type=\"file\"</code> 添加上传的文件</li></ul>\n<blockquote>\n<p>记得引入commons-fileupload依赖，我引入的是1.4版本，利用SpringMVC比以前学的简单多了！！</p>\n</blockquote>\n<p><code>index.html</code> ：</p>\n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@{/testUpload}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">enctype</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>multipart/form-data<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token comment\">&lt;!-- --&gt;</span>\n    请上传头像：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>photo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>提交<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p><code>SpringMVC.xml</code> ：</p>\n<p>配置文件上传解析器！！！！！！✨✨✨</p>\n<pre><code class=\"prism language-xml\"><span class=\"token comment\">&lt;!-- 配置文件上传解析器，将上传的二进制文件封装为MultipartFile对象,\n     发现MultipartResolver是个接口，要找实现类CommonsMultipartResolver\n     这个bean我们不访问，SpringMVC使用,底层是根据byName获取这个bean的，id必须的multipartResolver!!--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>multipartResolver<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n</code></pre>\n<p><code>FileUpAndDownController.java</code> ：</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">// 文件上传 - SpringMVC的帮我们封装好了photo信息(MultipartFile类型)</span>\n<span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testUpload\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testUpload</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MultipartFile</span> photo<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpSession</span> session<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// photo.getName() -&gt; photo - 获取的是表单元素的name属性值</span>\n    <span class=\"token comment\">// photo.getOriginalFilename() -&gt; head.jpg - 获得上传的文件名</span>\n\n    <span class=\"token class-name\">ServletContext</span> context <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 获得ServletContext对象</span>\n    <span class=\"token class-name\">String</span> uploadFileName <span class=\"token operator\">=</span> photo<span class=\"token punctuation\">.</span><span class=\"token function\">getOriginalFilename</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// 获取上传的文件名</span>\n    <span class=\"token class-name\">String</span> saveFolder <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getRealPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/WEB-INF/uploadFiles\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取要上传到的文件夹</span>\n    <span class=\"token class-name\">File</span> saveFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>saveFolder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                            <span class=\"token comment\">// 第一次上传文件目录可能不存在,判断一下</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>saveFile<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        saveFile<span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">String</span> finalSavePath <span class=\"token operator\">=</span> saveFolder <span class=\"token operator\">+</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">.</span>separator <span class=\"token operator\">+</span> uploadFileName<span class=\"token punctuation\">;</span>\n    photo<span class=\"token punctuation\">.</span><span class=\"token function\">transferTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Paths</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>finalSavePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传入Paths，File都行,上传到部署服务器端的文件夹中了！！</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>文件一般会保存到用户访问不能直接访问的目录下 。</p>\n<p>File.separator是系统默认路径分隔符，win下是 ‘/’，注意上面这是保存到了部署的真是目录下,保存到了服务器中。</p>\n<p>如果上面文件名出现重复则出文件覆盖，可以用UUID保证文件名的唯一性，防止覆盖。</p>\n<p>如果目录文件过多影响读写速度，还可以使用目录生成算法分散储存。</p>\n<p>原生的请看JavaWeb阶段写的笔记！！</p>\n</blockquote>\n<p>使用UUID解决文件名重复：</p>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">String</span> userUploadFileName <span class=\"token operator\">=</span> photo<span class=\"token punctuation\">.</span><span class=\"token function\">getOriginalFilename</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// head.jpg 获取上传的文件名</span>\n<span class=\"token class-name\">String</span> suffixName <span class=\"token operator\">=</span> userUploadFileName<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>userUploadFileName<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取文件后缀 .jpg</span>\n<span class=\"token class-name\">String</span> realUploadFileName <span class=\"token operator\">=</span> UUID<span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> suffixName<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// UUID + .jpg</span>\n</code></pre>\n<br/>\n<h1><a id=\"9__1356\"></a>9. 拦截器</h1>\n<p>拦截器英语：<code>Interceptor</code></p>\n<p>请求 -&gt; Filter -&gt; DispatcherServlet -&gt; Interceptor -&gt; Controller</p>\n<p><strong>SpringMVC中的拦截器用于拦截控制器方法的执行</strong></p>\n<br/>\n<h2><a id=\"91__1366\"></a>9.1 三个方法</h2>\n<p><code>preHandle()</code>：<strong>控制器方法执行之前</strong>执行，有boolean类型的返回值表示是否拦截或放行，返回true为放行，即去调用控制器方法，返回false表示拦截，即不调用控制器方法。</p>\n<p><code>postHandle()</code>：<strong>控制器方法执行之后</strong>执行</p>\n<p><code>afterComplation()</code>：处理完视图和模型数据，<strong>渲染视图完毕之后</strong>执行</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">// 前端控制器 DispatcherServlet 里面源码！！！！</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mappedHandler<span class=\"token punctuation\">.</span><span class=\"token function\">applyPreHandle</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">// 调用所有拦截器的preHandle()</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nmv <span class=\"token operator\">=</span> ha<span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> mappedHandler<span class=\"token punctuation\">.</span><span class=\"token function\">getHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用控制器方法</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>asyncManager<span class=\"token punctuation\">.</span><span class=\"token function\">isConcurrentHandlingStarted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">applyDefaultViewName</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> mv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmappedHandler<span class=\"token punctuation\">.</span><span class=\"token function\">applyPostHandle</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> mv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用所有拦截器的postHandle()</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token comment\">// 里面是调用afterComplation()</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">processDispatchResult</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> mappedHandler<span class=\"token punctuation\">,</span> mv<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">)</span>dispatchException<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">//-------------------------------------------processDispatchResult方法里面：</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>mv<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 渲染视图</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mappedHandler <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//调用所有拦截器的afterComplation()</span>\n    mappedHandler<span class=\"token punctuation\">.</span><span class=\"token function\">triggerAfterCompletion</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<br/>\n<h2><a id=\"92__1400\"></a>9.2 创建拦截器</h2>\n<ol><li>创建一个类<code>MyInterceptor</code>需要实现<code>HandlerInterceptor</code>接口</li><li>SpringMVC的配置文件中进行配置</li></ol>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">// 拦截器</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyInterceptor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HandlerInterceptor</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">preHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> \n                             <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"控制器方法执行前\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true代表放行</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> \n                           <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ModelAndView</span> modelAndView<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"控制器方法执行后\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterCompletion</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> \n                                <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"渲染视图后！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-xml\"><span class=\"token comment\">&lt;!-- 配置拦截器1--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">mvc:</span>interceptors</span><span class=\"token punctuation\">&gt;</span></span> \n    <span class=\"token comment\">&lt;!-- 以下这样两种都会对DispatcherServlet处理的所有请求来拦截！！--&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.sutong.interceptors.MyInterceptor<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span> \n    \n    <span class=\"token comment\">&lt;!-- 这种方式MyInterceptor类上面记得加注解！写一种就行--&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ref</span> <span class=\"token attr-name\">bean</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myInterceptor<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span> \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">mvc:</span>interceptors</span><span class=\"token punctuation\">&gt;</span></span>\n\n\n<span class=\"token comment\">&lt;!-- 配置拦截器2--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">mvc:</span>interceptors</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">mvc:</span>interceptor</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token comment\">&lt;!-- 拦截路径，但写'/*'不是代表所有请求，而是这一层路径下的所有请求，拦截所有请求是'/**'--&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">mvc:</span>mapping</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/**<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span> \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">mvc:</span>exclude-mapping</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>   <span class=\"token comment\">&lt;!-- 不拦截的路径 - '/'除了访问主界面--&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ref</span> <span class=\"token attr-name\">bean</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myInterceptor<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>       <span class=\"token comment\">&lt;!-- 指定拦截器--&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">mvc:</span>interceptor</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">mvc:</span>interceptors</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<br/>\n<h2><a id=\"93__1454\"></a>9.3 多个拦截器执行顺序</h2>\n<ul><li> <p>若每个拦截器的<code>preHandle()</code>都返回true</p> <p>此时多个拦截器的执行顺序和拦截器在SpringMVC的<strong>配置文件的配置顺序有关。</strong></p> <p><strong>preHandle()会按照配置的顺序执行，而postHandle()和afterComplation()会按照配置的反序执行</strong></p> <pre><code class=\"prism language-java\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptorList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptorIndex <span class=\"token operator\">=</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// preHanders</span>\n    \n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptorList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// postHanders</span>\n    \n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptorIndex<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// afterCompletions</span>\n</code></pre> </li><li> <p>若某个拦截器的<code>preHandle()</code>返回了false</p> <p><code>preHandle()</code>返回false和它之前的拦截器的<code>preHandle()</code>都会执行，**而所有的<code>postHandle()</code>都不执行！！**返回false的拦截器之前的拦截器的<code>afterComplation()</code>会执行</p> </li></ul>\n<br/>\n<br/>\n<h1><a id=\"10__1479\"></a>10. 异常处理器</h1>\n<p>SpringMVC提供了一个<strong>处理控制器方法执行过程中所出现的异常</strong>的接口：<code>HandlerExceptionResolver</code></p>\n<p>实现类有：<code>DefaultHandlerExceptionResolver</code> 和 <code>SimpleMappingExceptionResolver</code></p>\n<p>前者是默认的异常处理器，后者是自定义异常处理器。</p>\n<br/>\n<h2><a id=\"_1489\"></a>配置文件方式</h2>\n<pre><code class=\"prism language-xml\"><span class=\"token comment\">&lt;!-- 配置异常处理--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>exceptionMappings<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>  <span class=\"token comment\">&lt;!-- 是Properties类型的--&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>props</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token comment\">&lt;!-- key是要处理的异常全类名，value是发生该异常跳转的视图，视图规则和以前讲的一样--&gt;</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>prop</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>java.lang.ArithmeticException<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>error<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>prop</span><span class=\"token punctuation\">&gt;</span></span>   \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>props</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n    \n    <span class=\"token comment\">&lt;!-- 把出现的错误报错到Request域中，跳转到错误页面就可以输出了，value是key--&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>exceptionAttribute<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ex<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>  \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<br/>\n<h2><a id=\"_1508\"></a>注解方式</h2>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@ControllerAdvice</span>  <span class=\"token comment\">// 其实是Component扩展出来的注解</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExceptionController</span> <span class=\"token punctuation\">{<!-- --></span>\n \n    <span class=\"token comment\">// 如果控制器方法出现了一下的异常，则改注解标识的控制器方法将作为新的控制器方法使用,形参自动注入当前出现的异常</span>\n    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">ArithmeticException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Model</span> model<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        model<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ex\"</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 放到Request域 </span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<br/>\n<br/>\n<h1><a id=\"11__1526\"></a>11. 完全注解开发</h1>\n<p>使用配置类，代替<code>web.xml</code>和<code>SpringMVC.xml</code> 配置文件的功能</p>\n<br/>\n<h2><a id=\"111__1532\"></a>11.1 创建初始化类</h2>\n<p>创建初始化类代替<code>web.xml</code>文件！！！</p>\n<blockquote>\n<p>在<code>Servlet3.0</code>环境中，容器会在<strong>类路径</strong>中查找实现<code>javax.servlet.ServletContainerInitializer</code>接口的类，如果找到的话就用它来配置Servlet容器。(Servlet容器：就是Tomcat服务器！！)</p>\n<p>Spring提供了这个接口的实现, 即<code>SpringServletContainerInitializer</code>, 这个类反过来又会查找实现<code>WebApplicationInitializer</code>的类并将配置的任务交给它们来完成。</p>\n</blockquote>\n<p><code>Spring3.2</code> 引入了一个便利的WebApplicationInitializer基础实现，名为AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展（继承）了它并将其<strong>部署到Servlet3.0容器</strong>的时候，容器会<strong>自动发现它</strong>，并用它来配置Servlet上下文。</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * web工程的初始化类 - 代替web.xml\n * 1.配置前端处理器 - DispatcherServlet\n * 2.字符编码过滤器 - CharacterEncodingFilter\n * 3.请求转换处理过滤器 - HiddenHttpMethodFilter\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WebInit</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token comment\">// 获取根配置，即指定spring的配置类，父容器(配置：Services,Repositories,Datasources,TransactionManager...)</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getRootConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">SpringConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 指定SpringMVC的配置类，子容器(配置：Controllers,ViewReslover,HandlerMapping..)</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">WebConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 指定前端处理器DispatcherServlet的映射规则，即url-pattern</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletMappings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 处理除.jsp结尾的所有请求</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 设置过滤器Filter，不需要可以不用重写这个方法，默认都是过滤所有的请求，即'/*'</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Filter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletFilters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">CharacterEncodingFilter</span> cef <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CharacterEncodingFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 字符编码过滤器</span>\n        cef<span class=\"token punctuation\">.</span><span class=\"token function\">setEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cef<span class=\"token punctuation\">.</span><span class=\"token function\">setForceResponseEncoding</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">HiddenHttpMethodFilter</span> hhmf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HiddenHttpMethodFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Post转Put/Delete请求过滤器</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Filter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span>cef<span class=\"token punctuation\">,</span> hhmf<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<br/>\n<h2><a id=\"112_WebConfig_1584\"></a>11.2 创建WebConfig类</h2>\n<p>创建WebConfig类：代替 <code>SpringMVC.xml</code></p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * 代替SpringMVC的配置文件\n * 1.扫描组件 - component-scan\n * 2.配置视图解析器Thymeleaf - ThymeleafViewResolver\n * 3.视图控制器 - view-controller\n * 4.开启MVC注解驱动，并且解决字符串响应乱码 - annotation-driven\n * 5.开放对静态资源的访问 - default-servlet-handler\n * 6.配置文件上传解析器 - CommonsMultipartResolver\n * 7.配置拦截器 - interceptors\n * 8.配置异常处理器 - 这个也可以直接用注解@ControllerAdvice\n */</span>\n<span class=\"token annotation punctuation\">@Configuration</span>                                <span class=\"token comment\">// 标记为是个配置类</span>\n<span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span>basePackages <span class=\"token operator\">=</span> <span class=\"token string\">\"com.sutong\"</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 1开启注解扫描</span>\n<span class=\"token annotation punctuation\">@EnableWebMvc</span>                                 <span class=\"token comment\">// 4开启MVC注解驱动和开启MVC的定制功能</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WebConfig</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WebMvcConfigurer</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token comment\">// 3视图控制器</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addViewControllers</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ViewControllerRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// addViewController是path，setViewName是视图名</span>\n        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addViewController</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setViewName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 5开放对静态资源的访问，Override的都是实现WebMvcConfigurer接口的方法</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configureDefaultServletHandling</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DefaultServletHandlerConfigurer</span> configurer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        configurer<span class=\"token punctuation\">.</span><span class=\"token function\">enable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 默认ServletHandler可用</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 6文件上传解析器</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MultipartResolver</span> <span class=\"token function\">multipartResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CommonsMultipartResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n    \n    <span class=\"token comment\">// 7拦截器</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addInterceptors</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterceptorRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">MyInterceptor</span> myInterceptor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addInterceptor</span><span class=\"token punctuation\">(</span>myInterceptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addPathPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">excludePathPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 添加</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 8异常解析器，可以用这个方法，也可用使用@Bean+@ExceptionHandler</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configureHandlerExceptionResolvers</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HandlerExceptionResolver</span><span class=\"token punctuation\">&gt;</span></span> resolvers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">SimpleMappingExceptionResolver</span> exceptionResolver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleMappingExceptionResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Properties</span> prop <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// key是要处理的异常全类名字符串，value是发生该异常跳转的视图</span>\n        prop<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.ArithmeticException\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        exceptionResolver<span class=\"token punctuation\">.</span><span class=\"token function\">setExceptionMappings</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               \n        exceptionResolver<span class=\"token punctuation\">.</span><span class=\"token function\">setExceptionAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ex\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// 异常信息放入Request域</span>\n        resolvers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>exceptionResolver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                           <span class=\"token comment\">// 放入参数的List中</span>\n    <span class=\"token punctuation\">}</span>\n\n    \n    <span class=\"token comment\">//2Thymeleaf解析器的配置，好长啊，SpringBoot好像会简单-----------------------------------</span>\n    <span class=\"token comment\">//配置生成模板解析器</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ITemplateResolver</span> <span class=\"token function\">templateResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">WebApplicationContext</span> webApplicationContext <span class=\"token operator\">=</span> <span class=\"token class-name\">ContextLoader</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentWebApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，</span>\n        <span class=\"token comment\">// 可通过WebApplicationContext 的方法获得</span>\n        <span class=\"token class-name\">ServletContextTemplateResolver</span> templateResolver <span class=\"token operator\">=</span> \n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServletContextTemplateResolver</span><span class=\"token punctuation\">(</span>webApplicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        templateResolver<span class=\"token punctuation\">.</span><span class=\"token function\">setPrefix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/WEB-INF/templates/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 前缀</span>\n        templateResolver<span class=\"token punctuation\">.</span><span class=\"token function\">setSuffix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// 后缀</span>\n        templateResolver<span class=\"token punctuation\">.</span><span class=\"token function\">setCharacterEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        templateResolver<span class=\"token punctuation\">.</span><span class=\"token function\">setTemplateMode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TemplateMode</span><span class=\"token punctuation\">.</span>HTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> templateResolver<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//生成模板引擎并为模板引擎注入模板解析器</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SpringTemplateEngine</span> <span class=\"token function\">templateEngine</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ITemplateResolver</span> templateResolver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">SpringTemplateEngine</span> templateEngine <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpringTemplateEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        templateEngine<span class=\"token punctuation\">.</span><span class=\"token function\">setTemplateResolver</span><span class=\"token punctuation\">(</span>templateResolver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> templateEngine<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//生成视图解析器并未解析器注入模板引擎</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ViewResolver</span> <span class=\"token function\">viewResolver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringTemplateEngine</span> templateEngine<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">ThymeleafViewResolver</span> viewResolver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThymeleafViewResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        viewResolver<span class=\"token punctuation\">.</span><span class=\"token function\">setOrder</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        viewResolver<span class=\"token punctuation\">.</span><span class=\"token function\">setCharacterEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        viewResolver<span class=\"token punctuation\">.</span><span class=\"token function\">setTemplateEngine</span><span class=\"token punctuation\">(</span>templateEngine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> viewResolver<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//------------------------------------------------------------------------------------</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<br/>\n<h2><a id=\"113_SpringConfig_1682\"></a>11.3 创建SpringConfig类</h2>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * 这里没用整合SSM，这个暂时可以不写\n * 要想形成父子容器，这里需要排除一些扫描包\n * (而上面那个WebConfig配置类需要配置只扫描Controller，形成互补，\n * \t\t只扫描记得禁用默认是扫描规则 useDefaultFilters = false )\n */</span>\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"com.sutong\"</span><span class=\"token punctuation\">,</span> excludeFilters <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token annotation punctuation\">@ComponentScan.Filter</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span>ANNOTATION<span class=\"token punctuation\">,</span> classes <span class=\"token operator\">=</span> <span class=\"token class-name\">Controller</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringConfig</span> <span class=\"token punctuation\">{<!-- --></span>\n    \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<br/>\n<br/>\n<h1><a id=\"12_SpringMVC_1703\"></a>12. SpringMVC执行流程</h1>\n<br/>\n<h2><a id=\"121__1706\"></a>12.1 常用组件</h2>\n<ul><li>DispatcherServlet 前端控制器，框架提供</li><li>HandlerMapping 控制器映射器，框架提供</li><li>Handler 控制器，<strong>程序员开发</strong></li><li>HandlerAdapter 控制器适配器，框架提供</li><li>ViewResolver 视图解析器，框架提供</li><li>View 视图，框架或视图技术提供（页面需自己写）</li></ul>\n<br/>\n<h2><a id=\"122_DispatcherServlet_1717\"></a>12.2 DispatcherServlet初始化</h2>\n<blockquote>\n<p>初始化过程：</p>\n<p>Servlet - init() -&gt; GenericServlet - init() -&gt; HttpServlet null -&gt; HttpServletBean init() - initServletBean()</p>\n<p>-&gt; FrameworkServlet initServletBean() - initWebApplicationContext() - createWebApplicationContext() - onRefresh()</p>\n<p>-&gt; DispatcherServlet onRefresh() - initStrategies()</p>\n<p>createWebApplicationContext这个方法到整合ssm的时候可能会用到</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">// 里面部分代码</span>\n<span class=\"token class-name\">ConfigurableWebApplicationContext</span> wac <span class=\"token operator\">=</span>\n       <span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableWebApplicationContext</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">BeanUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">instantiateClass</span><span class=\"token punctuation\">(</span>contextClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//创建IOC容器</span>\nwac<span class=\"token punctuation\">.</span><span class=\"token function\">setEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwac<span class=\"token punctuation\">.</span><span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// !!!设置父容器</span>\n<span class=\"token class-name\">String</span> configLocation <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getContextConfigLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>configLocation <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n       wac<span class=\"token punctuation\">.</span><span class=\"token function\">setConfigLocation</span><span class=\"token punctuation\">(</span>configLocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<p>​</p>\n<p>initStrategies() 部分源码（看这初始化工作做了很多！所以要提前DispatcherServlet 初始化不要再第一次访问的时候才初始化）：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initStrategies</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">initMultipartResolver</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">initLocaleResolver</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">initThemeResolver</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">initHandlerMappings</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">initHandlerAdapters</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">initHandlerExceptionResolvers</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">initRequestToViewNameTranslator</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">initViewResolvers</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">initFlashMapManager</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<br/>\n<h2><a id=\"123_DispatcherServlet_1763\"></a>12.3 DispatcherServlet服务过程</h2>\n<blockquote>\n<p>Servlet service() -&gt; GenericServlet service() -&gt; HttpServlet service() - doPost()/doGet()/doPut()/… -&gt; HttpServletBean null</p>\n<p>-&gt; FrameworkServlet 重写了doPost()/doGet()/…方法 - processRequest() - doService()</p>\n<p>-&gt; DispatcherServlet - doService() - doDispatch() - handle()就是给我们控制器方法形参赋值，调用控制器方法，调用这个方法前后有执行拦截器的方法。</p>\n</blockquote>\n<p>doDispatch() 部分源码：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doDispatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// preHandle</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mappedHandler<span class=\"token punctuation\">.</span><span class=\"token function\">applyPreHandle</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 执行控制器方法</span>\n    mv <span class=\"token operator\">=</span> ha<span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> mappedHandler<span class=\"token punctuation\">.</span><span class=\"token function\">getHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// postHandle</span>\n    mappedHandler<span class=\"token punctuation\">.</span><span class=\"token function\">applyPostHandle</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> mv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n    <span class=\"token comment\">// afterComplation - 在processDispatchResult()里面调用triggerAfterCompletion()才是真正执行</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">processDispatchResult</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span>                       \n                               mappedHandler<span class=\"token punctuation\">,</span> mv<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">)</span>dispatchException<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<br/>\n<h2><a id=\"124__1791\"></a>12.4 执行流程</h2>\n<ol><li>用户向服务器请求，请求会被前端处理器<code>DispatcherServlet</code>捕获</li><li><code>DispatcherServlet</code>对请求进行解析，得到请求资源标识符（url），判断请求url对象的映射： \n  <ul><li>映射不存在 \n    <ol><li>看是否配置了<code>defalut-servlet-handler</code></li><li>如果没配置，则<code>404</code></li><li>如果有配置，则去访问目标资源（一般是静态资源JS,CSS,HTML等），找不到目标资源还是<code>404</code></li></ol> </li><li>映射存在 \n    <ol><li>根据URL调用<code>HandlerMapping</code>获得该<code>Handler</code>配置的所有相关的对象（包括Handler对象和对应的拦截器），最后以<code>HandlerExecutionChain</code>执行链对象形式返回</li><li><code>DispatcherServlet</code>根据获得的<code>Handler</code>，选择一个合适的<code>HandlerAdapter</code></li><li>如果成功获取<code>HandlerAdapter</code>，则开始执行拦截器<code>preHandler()</code>方法（正向）</li><li>提取<code>Request</code>中的模型数据，填充<code>Handler</code>的入参，开始执行<code>Handler</code>方法，处理请求。在填充入参的过程中，SpringMVC会根据你的配置做一些额外的工作 \n      <ul><li><code>HttpMessageConventer</code>：将请求消息(JSON,XML数据)转化为一个对象/将对象转化为响应的信息</li><li>数据转换：对请求消息进行数据转换，如<code>String</code>转化为<code>Interger</code>，<code>Double</code>等</li><li>数据格式化：对请求消息进行格式化，如将字符串转化为格式化数字或格式化日期等</li><li>数据验证：验证数据的有效性(长度，格式等)，验证结果存储到<code>BindingResult</code>或<code>Error</code>中</li></ul> </li><li><code>Handler</code>执行完之后，返回一个<code>ModelAndView</code>对象</li><li>开始执行拦截器的<code>postHandler()</code>方法（逆向）</li><li>根据返回的<code>ModelAndView</code>（如果发生异常则会<code>HandlerExceptionResolver</code>进行处理异常）选择一个合适的<code>ViewResolver</code>进行视图解析，根据<code>Model</code>和<code>View</code>来渲染视图</li><li>渲染视图后执行拦截器的<code>afterCompletion()</code>方法（逆向）</li><li>将渲染的结果返回给客户端</li></ol> </li></ul> </li></ol>\n<br/>\n<br/>\n<h1><a id=\"13_JSR303_1819\"></a>13. JSR303后端校验</h1>\n<p>1.导入hibernate-validator依赖<br/> 或者SpringBoot中引入启动器spring-boot-starter-validation，默认也是这个hibernate-validator：</p>\n<pre><code class=\"prism language-xml\"><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-validator --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.hibernate<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>hibernate-validator<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>7.0.2.Final<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>2.Bean上加上注解（还有很多…）：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Books</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Pattern</span><span class=\"token punctuation\">(</span>regexp <span class=\"token operator\">=</span> <span class=\"token string\">\"^[a-z0-9_-]{3,16}$\"</span><span class=\"token punctuation\">,</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"书名不合法\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Email</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"邮箱不合法\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 默认的邮箱匹配规则，要和前端一样</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@NotNull</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"count不能为空\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> count<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> detail<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>3.Contronller层：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookController</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookService</span> bookService<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">/**\n     * @param book    @Valid标注的参数代表需要校验\n     * @param result  校验后的结果\n     */</span>\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/add\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Valid</span> <span class=\"token class-name\">Books</span> book<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BindingResult</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">hasErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FieldError</span><span class=\"token punctuation\">&gt;</span></span> errors <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">getFieldErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 获得所有错误信息</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FieldError</span> error <span class=\"token operator\">:</span> errors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"错误的字段名：\"</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">.</span><span class=\"token function\">getField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" 错误信息：\"</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">.</span><span class=\"token function\">getDefaultMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 一般还要保存一些错误原因等可以封装为一个Map返回..(返回一个Json字符串)..</span>\n        <span class=\"token punctuation\">}</span> \n        \n        bookService<span class=\"token punctuation\">.</span><span class=\"token function\">addBook</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"redirect:/book/list\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<br/>\n<p><code>@Validated</code> 和 <code>@Valid</code> 区别： <a href=\"https://blog.csdn.net/wangjiangongchn/article/details/86477386\">@Validated和@Valid区别</a></p>\n<p>使用@Validated或者@Valid在基本验证功能上没有太多区别。但是在<strong>分组、注解地方、嵌套验证</strong>等功能上两个有所不同，</p>\n<ol><li> <p>@Valid是javax.validation里的，@Validated是@Valid 的一次封装，是Spring提供的校验机制使用。</p> </li><li> <p>@Valid不提供分组功能，当一个实体类需要多种验证方式时，例：对于一个实体类的id来说，新增的时候是不需要的，对于更新时是必须的，对一个参数需要多种验证方式时，可通过分配不同的组达到目的。</p> </li><li> <p>@Validated：可以用在类型、方法和方法参数上。但是不能用在成员属性（字段）上</p> <p>@Valid：可以用在方法、构造函数、方法参数和成员属性（字段）上</p> </li><li> <p>@Validated：用在方法入参上无法单独提供嵌套验证功能。不能用在成员属性（字段）上，也无法提示框架进行嵌套验证。能配合嵌套验证注解@Valid进行嵌套验证。</p> <p>@Valid：用在方法入参上无法单独提供嵌套验证功能。能够用在成员属性（字段）上，提示验证框架进行嵌套验证。能配合嵌套验证注解@Valid进行嵌套验证。</p> </li></ol>\n<br/>\n<br/>\n<h1><a id=\"14__1904\"></a>14. 异步请求</h1>\n<p>Servlet3.0之后的规范</p>\n<p>默认的Servlet使用异步，示例：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span>urlPatterns <span class=\"token operator\">=</span> <span class=\"token string\">\"/my\"</span><span class=\"token punctuation\">,</span> asyncSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 1.支持异步处理器 (Servlet3.0后)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyServlet02</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> resp<span class=\"token punctuation\">)</span> \n        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主线程：\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">// 2.开启异步模式(返回是异步的上下文对象/req.getAsyncContext())</span>\n        <span class=\"token class-name\">AsyncContext</span> asyncContext <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">startAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 业务逻辑进行异步处理，开启异步处理</span>\n        asyncContext<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"副线程：\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用业务逻辑</span>\n                asyncContext<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 异步以及调用完了</span>\n                <span class=\"token class-name\">ServletResponse</span> response <span class=\"token operator\">=</span> asyncContext<span class=\"token punctuation\">.</span><span class=\"token function\">getResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                    response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 写东西</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"副线程：\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主线程：\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>SpringMVC异步请求使用，示例：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Callable</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 异步处理</span>\n<span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AsyncController</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token comment\">/**\n     * 1.当控制器返回Callable\n     * 2.SpringMVC进行异步处理，将Callable提交到TaskExecutor使用一个隔离的线程进行执行\n     * 3.DispatcherServlet和所有的Filter退出web容器的线程(主线程)，但Response保存打开状态\n     * 4.Callable返回结果，SpringMVC将请求重新派发给容器！!恢复之前的处理\n     * 5.根据Callable返回的结果，SpringMVC进入视图渲染流程/写出数据 (从收请求 -&gt; 视图渲染)...\n     *\n     * 打印流程(添加了普通的拦截器)：\n     * preHandler.../springmvc/async01\n     * 主线程开始：Thread[http-nio-8080-exec-5,5,main]\n     * 主线程结束：Thread[http-nio-8080-exec-5,5,main]\n     * ----DispatcherServlet和所有的Filter退出web容器的线程-----\n     * \n     * ----等待Callable执行-----\n     * 副线程开始：Thread[task-2,5,main]\n     * 副线程结束：Thread[task-2,5,main]\n     * ----等待Callable执行完成-----\n     * \n     * ----再次发了一次请求-----\n     * preHandle.../springmvc/async01\n     * postHandle...(这个之前不用执行目标方法了，Callable的之前的返回值就是目标方法的返回值)\n     * afterCompletion..\n     * \n     * 上面的普通的拦截器并不能有效的拦截目标方法，\n     * 要使用异步的拦截器：原生的AsyncListener，SpringMVC的AsyncHandlerInterceptor\n     */</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/async01\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@ResponseBody</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">async01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主线程开始：\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> callable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"副线程开始：\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 业务逻辑</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"副线程结束：\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主线程结束：\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> callable<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>使用Callable 对于前台来说是和正常请求一样的，对于后台来说却可以大大增加Tomcat吞吐量。</p>\n<p>当然有些场景， Callable并不能解决，比如说：我们访问A接口，A接口调用三方的服务，服务回调B接口，这种情况就没办法使用Callable了，这个时候可以使用DeferredResult</p>\n</blockquote>\n<p>实际中可能没上面那么简单，要结合消息中间件等，可以下面这样（后面再详细用）：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"async02\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@ResponseBody</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">DeferredResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">async02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">DeferredResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> deferredResult <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeferredResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//这个还能传入超时时间，和超出时间的Result</span>\n    <span class=\"token comment\">// Save the deferredResult somewhere...</span>\n    <span class=\"token keyword\">return</span> deferredResult<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// In some other thread</span>\ndeferredResult<span class=\"token punctuation\">.</span><span class=\"token function\">setResult</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p><strong>DeferredResult</strong> 用于在不阻塞用于回答的 Tomcat HTTP 线程的情况下回答请愿书。通常是 @ResponseBody 注释方法的返回值。</p>\n<p><code>DeferredResult</code> 利用 Servlet 3.0 AsyncContext。当您需要返回结果时，它不会像其他线程那样阻塞线程。另一个很大的好处是<code>DeferredResult</code> 支持回调。</p>\n<p>DeferredResult比较适合一些比较复杂的业务场景，提升性能。有个问题，当使用分布式部署，调用链走的不是同一个实例时，DeferredResult的处理有可能会出现问题。</p>\n</blockquote>\n<br/>\n<hr/>\n<p><strong>异步任务</strong> （对方法进行注解，以便将其异步调用）</p>\n<p>如果在Service层使用异步，首先需要开启异步支持<code>@EnableAsync</code>，然后在需要异步的方法上面加<code>@Async</code> ，类上面添加也行，代表当前类所有方法都是异步方法，它使用的是线程池<code>SimpleAsyncTaskExecutor</code>，这也是Spring<code>默认</code>给我们提供的线程池，也可以说不是一个线程池。</p>\n<blockquote>\n<ol><li>异步方法建议尽量处理耗时的任务，或者是处理不希望阻断主流程的任务（比如异步记录操作日志）</li><li>尽量为<code>@Async</code>准备一个专门的线程池来提高效率减少开销，而不要用Spring默认的<code>SimpleAsyncTaskExecutor</code>，它不是一个真正的线程池~</li></ol>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyService</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Async</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">doSomeWork</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>当您调用 service.doSomeWork() 时，调用将被放入执行程序的队列中以异步调用。这对于可以同时执行的任务很有用。您可以使用 Async 来执行任何类型的异步任务。</p>\n<br/>\n<h1><a id=\"15__2075\"></a>15. 邮件发送</h1>\n<p>依赖：</p>\n<pre><code class=\"prism language-xml\"><span class=\"token comment\">&lt;!-- 邮件发送 --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-mail<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>配置：</p>\n<pre><code class=\"prism language-yaml\"><span class=\"token comment\"># 邮箱发送配置</span>\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span> \n    <span class=\"token key atrule\">mail</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> xxx@qq.com\n        <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> eayeleandankfoffbbc   <span class=\"token comment\"># qq邮箱客户端授权码，并不是qq密码，可以防止暴露qq的密码</span>\n        <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> smtp.qq.com\n        <span class=\"token key atrule\">properties.mail.smtp.enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># qq邮箱需要开启加密验证</span>\n</code></pre>\n<p>测试：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmailTest</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token class-name\">JavaMailSender</span> javaMailSender<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">SimpleMailMessage</span> smm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleMailMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 简单的消息邮箱</span>\n        smm<span class=\"token punctuation\">.</span><span class=\"token function\">setSubject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"苏瞳小号你好2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 主题</span>\n        smm<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我爱你\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 内容</span>\n        smm<span class=\"token punctuation\">.</span><span class=\"token function\">setTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx@qq.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 发送给谁（我们这里是自己给自己发）</span>\n        smm<span class=\"token punctuation\">.</span><span class=\"token function\">setFrom</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx@qq.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 谁发送的</span>\n        javaMailSender<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>smm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MessagingException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">MimeMessage</span> mm <span class=\"token operator\">=</span> javaMailSender<span class=\"token punctuation\">.</span><span class=\"token function\">createMimeMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 复杂的邮件</span>\n        <span class=\"token class-name\">MimeMessageHelper</span> helper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MimeMessageHelper</span><span class=\"token punctuation\">(</span>mm<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第二参数是否多文件</span>\n        helper<span class=\"token punctuation\">.</span><span class=\"token function\">setSubject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"苏瞳的文件2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        helper<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;p&gt;我爱你&lt;/p&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第二个参数是是否解析为HTML</span>\n        helper<span class=\"token punctuation\">.</span><span class=\"token function\">addAttachment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.png\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"static/1.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 添加附件</span>\n        helper<span class=\"token punctuation\">.</span><span class=\"token function\">setTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2081140153@qq.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        helper<span class=\"token punctuation\">.</span><span class=\"token function\">setFrom</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2081140153@qq.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        javaMailSender<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>mm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 可以把这两个封装起来，参数：主题，正文，附件路径，收件人...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>Class.getResource(“”)获取的是相对于当前类的相对路径。</p>\n<p>Class.getResource(“/”)获取的是classpath的根路径。</p>\n<p>ClassLoader.getResource(“”)获取的是classpath的根路径。</p>\n<p>spring中获取资源，四个都<code>springframework</code>包下的： ⭐⭐</p>\n<ul><li> <p><code>FileSystemResource</code> 从文件系统加载，比如说自己指定配置文件的全路径 （效果类似于Java中的<code>File</code>）</p> </li><li> <p><code>ClassPathResource</code> 从系统的类路径中加载 （效果类似于this.getClass().getResource(“/”).getPath();）</p> <p>在创建<code>ClassPathResource</code>对象时，我们可以指定是按Class的相对路径获取文件还是按ClassLoader来获取。</p> </li><li> <p><code>ServletContextResource</code> 从Servlet 上下文环境中加载 （效果类似于request.getServletContext().getRealPath(“”);）</p> </li><li> <p><code>UrlResource</code> 从指定的Url加载</p> </li></ul>\n</blockquote>\n<br/>\n<h1><a id=\"16__2156\"></a>16. 定时任务</h1>\n<p>相关接口： <code>TaskExecutor</code> ，<code>TaskScheduler</code></p>\n<p>相关注解：<code>@EnableScheduling</code> ，<code>@Scheduled</code></p>\n<p>Cron表达式（Linux中crontab差不多）：</p>\n<pre><code class=\"prism language-txt\">共七个占位符 * * * * * * *\n第一个     一小时当中的第几秒    0-59  (Linux中没有这个秒)\n第二个     一小时当中的第几分钟   0-59\n第三个     一天中的第几个小时     0-23\n第四个     一个月中第几天        1-31\n第五个     一年中的第几月        1-12\n第六个     一周中的星期几        0-7 (0,7都代表星期日)\n第七个     年   \t\t       不必须，可以省略  (Linux中也没有这个年)\n\n*         代表任何时间，第一*则代表每分钟都要执行一次\n,         代表不连续的时间，\"0 8,12 * * *\" 代表每天的8点0分，12点0分都会执行一次\n-         代表连续的时间范围，\"0 5 * * 1-6\" 代表周一到周六的5点0分执行一次\n*/n       代表每个多久执行一次，\"*/10 4 * * *\" 代表每天的4点期间，每隔10分钟执行一次(即到5点就不执行了)\n?         不指定值\nL \t\t  表示最后的意思\nW \t\t 表示离指定日期的最近那个工作日(周一至周五).\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ScheduledService</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Scheduled</span><span class=\"token punctuation\">(</span>cron <span class=\"token operator\">=</span> <span class=\"token string\">\"0 10/5 12 * *\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 每天的12:10:00开都每隔5分钟去执行一次</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你被执行了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-09-03 17:43:05", "summary": "文章目录简介第一个程序功能注解位置注解属性支持风格的路径支持架构的路径获取请求参数原生获取控制器方法的形参获取通过获取乱码问题域对象共享数据域域域中的视图视图控制器的视图解析器了解概念模拟用户模块操作"}