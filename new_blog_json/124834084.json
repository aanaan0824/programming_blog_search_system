{"blogid": "124834084", "writerAge": "码龄2年", "writerBlogNum": "7", "writerCollect": "52", "writerComment": "9", "writerFan": "8", "writerGrade": "2级", "writerIntegral": "160", "writerName": "晓枫寒叶", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124834084.jpg", "writerRankTotal": "68778", "writerRankWeekly": "91197", "writerThumb": "14", "writerVisitNum": "7516", "blog_read_count": "3959", "blog_time": "于 2022-05-18 02:02:03 发布", "blog_title": "C++实现线程池", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>C++实现线程池</h3>\n<ul><li><a href=\"#_1\">线程池介绍</a></li><li><a href=\"#_7\">线程池知识背景</a></li><li><a href=\"#_18\">并发和并行</a></li><li><a href=\"#_24\">线程池的优势</a></li><li><a href=\"#_59\">第一个版本</a></li><li><a href=\"#_343\">第二个版本</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>线程池介绍</h1>\n<p>作为五大池之一（内存池、连接池、线程池、进程池、协程池），线程池的应用非常广泛，不管事客户端程序还是后台服务端，都是提高业务处理能力的必备模块。</p>\n<p>线程池有很多的开源实现，虽然在接口使用上优点区别，但是其核心实现原理基本相同。</p>\n<h1><a id=\"_7\"></a>线程池知识背景</h1>\n<ul><li>C++面向对象的标准 \n  <ul><li>组合和继承、多态、STL容器、智能指针、函数对象、绑定器、可变参数模板等</li></ul> </li><li>C++11多线程编程 \n  <ul><li>thread、mutex、atomic、condition_variable、unique_lock等</li></ul> </li><li>C++17和C++20标准 \n  <ul><li>C++17中的any类型可以接受任何类型的参数、C++20 的semaphore信号量</li></ul> </li><li>多线程理论 \n  <ul><li>多线程基本知识、线程互斥、线程同步、原子操作等。</li></ul> </li></ul>\n<h1><a id=\"_18\"></a>并发和并行</h1>\n<ul><li> <p>并发：单核上，多个线程占用不同的CPU时间片，物理上还是串行执行的，但是由于每个线程占用的CPU时间片非常短（比如10ms），看起来就像是多个线程都在共同执行一样，这样的场景称作并发（concurrent）。</p> </li><li> <p>并行：在多核或者多CPU上，多个线程是在真正的同时执行，这样的场景称作并行（parallel）。</p> </li></ul>\n<h1><a id=\"_24\"></a>线程池的优势</h1>\n<blockquote>\n<p>多线程程序一定就好吗？不一定，要看具体的应用场景：</p>\n</blockquote>\n<ul><li> <p>多线程处理可以同时运⾏多个线程。由于多线程应⽤程序将程序划分成多个独⽴的任务,因此可以在以下⽅⾯显著提⾼性能:<br/> (1)多线程技术使程序的响应速度更快 ,因为⽤户界⾯可以在进⾏其它⼯作的同时⼀直处于活动状态;<br/> (2)当前没有进⾏处理的任务时可以将处理器时间让给其它任务;<br/> (3)占⽤⼤量处理时间的任务可以定期将处理器时间让给其它任务;<br/> (4)可以随时停⽌任务;<br/> (5)可以分别设置各个任务的优先级以优化性能。</p> </li><li> <p>多线程开发的缺点：<br/> 同样的 ,多线程也存在许多缺点 ,在考虑多线程时需要进⾏充分的考虑。多线程的主要缺点包括:<br/> (1)等候使⽤共享资源时造成程序的运⾏速度变慢。这些共享资源主要是独占性的资源 ,如打印机等。<br/> (2)对线程进⾏管理要求额外的 CPU开销。线程的使⽤会给系统带来上下⽂切换的额外负担。当这种负担超过⼀定程度时,多线程的特点主要<br/> 表现在其缺点上,⽐如⽤独⽴的线程来更新数组内每个元素。<br/> (3)线程的死锁。即较长时间的等待或资源竞争以及死锁等多线程症状。<br/> (4)对公有变量的同时读或写。当多个线程需要对公有变量进⾏写操作时,后⼀个线程往往会修改掉前⼀个线程存放的数据,从⽽使前⼀个线程<br/> 的参数被修改;另外 ,当公⽤变量的读写操作是⾮原⼦性时,在不同的机器上,中断时间的不确定性,会导致数据在⼀个线程内的操作产⽣错误,从⽽产⽣莫名其妙的错误,⽽这种错误是程序员⽆法预知的。</p> </li><li> <p>fixed模式线程池<br/> 线程池里面的线程个数是固定不变的，一般是ThreadPool创建时根据当前机器的CPU核心数量进行指<br/> 定。<br/> cached模式线程池<br/> 线程池里面的线程个数是可动态增长的，根据任务的数量动态的增加线程的数量，但是会设置一个线程<br/> 数量的阈值（线程过多的坏处上面已经讲过了），任务处理完成，如果动态增长的线程空闲了60s还没<br/> 有处理其它任务，那么关闭线程，保持池中最初数量的线程即可。fixed模式线程池：<br/> 线程池里面的线程个数是固定不变的，一般是ThreadPool创建时根据当前机器的CPU核心数量进行指<br/> 定。</p> </li><li> <p>cached模式线程池：<br/> 线程池里面的线程个数是可动态增长的，根据任务的数量动态的增加线程的数量，但是会设置一个线程<br/> 数量的阈值（线程过多的坏处上面已经讲过了），任务处理完成，如果动态增长的线程空闲了60s还没<br/> 有处理其它任务，那么关闭线程，保持池中最初数量的线程即可。</p> </li></ul>\n<blockquote>\n<p>两个版本的线程池，第一个版本自己定义的类型较多；第二个版本多采用C++新特性提供的类型</p>\n</blockquote>\n<h1><a id=\"_59\"></a>第一个版本</h1>\n<p><strong>线程池两个模式：</strong></p>\n<pre><code class=\"prism language-c++\">//线程池支持的模式\nenum class PoolMode\n{\n\tMODE_FIXED,\t\t//固定数量的线程\n\tMODE_CACHED,\t//线程数量可以动态增长\n};\n</code></pre>\n<p><strong>C++17提供了Any类型 可以接受任何参数，我们第一个版本手写一个Any类型用于接受任何参数：</strong></p>\n<pre><code class=\"prism language-c++\">//定义一个Any类型 可以接受任何数据类型\n//C++17中提供了Any类型 可以保存任何数据类型\nclass Any\n{\npublic:\n\tAny() = default;\n\t~Any() = default;\n\tAny(const Any&amp;) = delete;\n\tAny&amp; operator=(const Any&amp;) = delete;\n\tAny(Any&amp;&amp;) = default;\n\tAny&amp; operator=(Any&amp;&amp;) = default;\n\n\t//构造成函数 可以接受任何数据类型\n\ttemplate&lt;typename T&gt;\n\tAny(T data) :m_base(std::make_unique&lt;Derive&lt;T&gt;&gt;(data))\n\t{\n\t}\n\n\ttemplate&lt;typename T&gt;\n\tT cast()\t\t//用来提取保存的数据\n\t{\n\t\t//先将保存的基类转化为子类\n\t\tDerive&lt;T&gt;* dp = dynamic_cast&lt;Derive&lt;T&gt;*&gt;(m_base.get());\n\t\tif (dp == nullptr)\n\t\t{\n\t\t\tthrow \"type is wrong\";\n\t\t}\n\t\treturn dp-&gt;m_data;\n\t}\n\nprivate:\n\tclass Base\t\t//基类类型\n\t{\n\tpublic:\n\t\tvirtual ~Base() = default;\n\t};\n\n\ttemplate&lt;typename T&gt;\n\tclass Derive :public Base\t\t//派生类类型\n\t{\n\tpublic:\n\t\tDerive(T data) :m_data(data)\n\t\t{\n\t\t}\n\t\tT m_data;\t//可以保存所有数据类型\n\t};\n\nprivate:\n\t//定义一个基类指针\n\tstd::unique_ptr&lt;Base&gt; m_base;\n};\n</code></pre>\n<p><strong>C++20提供了semaphore信号量 但是之前的版本没有提供 下面我们手写一个信号量：</strong></p>\n<pre><code class=\"prism language-c++\">//定义一个信号量 Semaphore在C++20中已经提供\nclass Semaphore\n{\npublic:\n\t//构造函数\n\tSemaphore(int limit = 0)\n\t\t:m_resLimit(limit)\n\t\t, m_isExit(false)\n\t{\n\n\t}\n\n\t~Semaphore()\n\t{\n\t\tm_isExit = true;\n\t}\n\n\t//获取一个信号量资源\n\tvoid wait()\n\t{\n\t\tif (m_isExit)\n\t\t\treturn;\n\t\tstd::unique_lock&lt;std::mutex&gt; lock(m_mtx);\n\t\t//等待信号量有资源，没有资源的话 阻塞当前线程\n\t\tm_cond.wait(lock, [&amp;]()-&gt;bool {return m_resLimit &gt; 0; });\n\t\tm_resLimit--;\n\t}\n\n\t//增加一个信号量资源\n\tvoid post()\n\t{\n\t\tif (m_isExit)\n\t\t\treturn;\n\t\tstd::unique_lock&lt;std::mutex&gt; lock(m_mtx);\n\t\tm_resLimit++;\n\t\tm_cond.notify_all();\n\t}\n\nprivate:\n\tstd::atomic_bool m_isExit;\n\tint m_resLimit;\n\tstd::mutex m_mtx;\n\tstd::condition_variable m_cond;\n};\n</code></pre>\n<p><strong>线程类型类：</strong></p>\n<pre><code class=\"prism language-c++\">//线程类型\nclass Thread\n{\npublic:\n\t//线程函数对象类型\n\tusing ThreadFunc = std::function&lt;void(int)&gt;;\n\t// 线程构造\n\tThread(ThreadFunc func);\n\t// 线程析构\n\t~Thread();\n\t// 启动线程\n\tvoid start();\n\n\t//获取线程ID\n\tint getId()const;\nprivate:\n\tThreadFunc m_func;\n\tstatic int m_generateId;\n\tint m_threadId;\t\t//保存线程id\n};\n</code></pre>\n<p><strong>线程池类型：</strong></p>\n<pre><code class=\"prism language-c++\">//线程池类型\nclass ThreadPool\n{\npublic:\n\t//线程池构造\n\tThreadPool();\n\t//线程池析构\n\t~ThreadPool();\n\n\t//设置线程池的工作模式\n\tvoid setMode(PoolMode mode);\n\n\t//设置task任务队列上线的阈值\n\tvoid setTaskQueMaxThrshHold(int threshhold);\n\t//给线程池提交任务\n\tResult submitTask(std::shared_ptr&lt;Task&gt; sp);\n\n\t//设置线程池cached模式下线程阈值\n\tvoid setThreadSizeThreshHold(int threshHold);\n\n\t//开启线程池\n\tvoid start(int initThreadSize = std::thread::hardware_concurrency());\n\n\tThreadPool(const ThreadPool&amp;) = delete;\n\tThreadPool&amp; operator=(const ThreadPool&amp;) = delete;\n\nprivate:\n\t//定义线程函数\n\tvoid threadFunc(int threadId);\n\n\t//检查pool的运行状态\n\tbool checkRunningState() const;\nprivate:\n\t//std::vector&lt;std::unique_ptr&lt;Thread&gt;&gt; m_threads;\t//线程列表\n\tstd::unordered_map &lt;int, std::unique_ptr&lt;Thread&gt;&gt; m_threads;\n\t//初始的线程数量\n\tint m_initThreadSize;\n\n\t//记录当前线程池里面线程的总数量\n\tstd::atomic_int m_curThreadSize;\n\n\t//线程数量上限阈值\n\tint m_threadSizeThreshHold;\n\n\t//记录空闲线程的数量\n\tstd::atomic_int m_idleThreadSize;\n\n\t//任务队列\n\tstd::queue&lt;std::shared_ptr&lt;Task&gt;&gt; m_taskque;\n\n\t//任务的数量\n\tstd::atomic_int m_taskSize;\n\t//任务队列数量上限的阈值\n\tint m_taskqueMaxThresHold;\n\n\t//包装任务队列的线程安全\n\tstd::mutex m_taskQueMtx;\n\n\t//表示任务队列不满\n\tstd::condition_variable m_notFull;\n\t//表示任务队列不空\n\tstd::condition_variable m_notEmpty;\n\n\t//表示等待线程资源全部回收\n\tstd::condition_variable m_exitCond;\n\n\t//当前线程池的工作模式\n\tPoolMode m_poolMode;\n\n\t//表示当前线程池的启动状态\n\tstd::atomic_bool m_isPoolRunning;\n};\n</code></pre>\n<p>测试类型(main.cpp)：</p>\n<pre><code class=\"prism language-c++\">#include \"ThreadPool.h\"\n\n#include &lt;thread&gt;\n#include &lt;chrono&gt;\n#include &lt;iostream&gt;\n\nusing ulong = unsigned long long;\n\nclass MyTask:public Task\n{\npublic:\n\tMyTask(int begin, int end)\n\t\t:m_begin(begin),\n\t\tm_end(end)\n\t{\n\t}\n\tAny run()\n\t{\n\t\tstd::cout &lt;&lt; \"tid:\" &lt;&lt; std::this_thread::get_id()\n\t\t\t&lt;&lt; \"begin...\" &lt;&lt; std::endl;\n\t\t//std::this_thread::sleep_for(std::chrono::seconds(2));\n\t\tulong sum = 0;\n\t\tfor (int i = m_begin; i &lt;= m_end; i++)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tstd::cout &lt;&lt; \"tid:\" &lt;&lt; std::this_thread::get_id()\n\t\t\t&lt;&lt; \"end...\" &lt;&lt; std::endl;\n\t\treturn sum;\n\t}\nprivate:\n\tint m_begin;\n\tint m_end;\n};\n\nint main()\n{\n\t{\n\t\tThreadPool pool;\n\t\tpool.setMode(PoolMode::MODE_CACHED);\n\t\t// 开始启动线程池\n\t\tpool.start(2);\n\n\t\t// linux上，这些Result对象也是局部对象，要析构的！！！\n\t\tResult res1 = pool.submitTask(std::make_shared&lt;MyTask&gt;(1, 100000000));\n\t\tResult res2 = pool.submitTask(std::make_shared&lt;MyTask&gt;(100000001, 200000000));\n\t\tpool.submitTask(std::make_shared&lt;MyTask&gt;(100000001, 200000000));\n\t\tpool.submitTask(std::make_shared&lt;MyTask&gt;(100000001, 200000000));\n\t\tpool.submitTask(std::make_shared&lt;MyTask&gt;(100000001, 200000000));\n\n\t\tulong sum1 = res1.get().cast&lt;ulong&gt;();\n\t\tstd::cout &lt;&lt; sum1 &lt;&lt; std::endl; \n\t} // 这里Result对象也要析构!!! 在vs下，条件变量析构会释放相应资源的\n\n\tstd::cout &lt;&lt; \"main over!\" &lt;&lt; std::endl;\n\tgetchar();\n}\n</code></pre>\n<p>结果：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f8242f6f9aeb4603a6462e808fbdbbc4.png\"/></p>\n<h1><a id=\"_343\"></a>第二个版本</h1>\n<p><strong>线程池支持的模式:</strong></p>\n<pre><code class=\"prism language-c++\">enum class PoolMode\n{\n\tMODE_FIXED,\t\t//固定数量的线程\n\tMODE_CACHED,\t//线程数量可以动态增长\n};\n</code></pre>\n<p><strong>线程类型:</strong></p>\n<pre><code class=\"prism language-c++\">class Thread\n{\npublic:\n\t//线程函数对象类型\n\tusing ThreadFunc = std::function&lt;void(int)&gt;;\n\t// 线程构造\n\tThread(ThreadFunc func);\n\t// 线程析构\n\t~Thread() = default;\n\t// 启动线程\n\tvoid start();\n\n\t//获取线程ID\n\tint getId()const;\nprivate:\n\tThreadFunc m_func;\n\tstatic int m_generateId;\n\tint m_threadId;\t\t//保存线程id\n};\n</code></pre>\n<p><strong>测试类型(main.cpp)：</strong></p>\n<pre><code class=\"prism language-c++\">#include \"thread.h\"\n\n#include &lt;future&gt;\n#include &lt;functional&gt;\n#include &lt;thread&gt;\n#include &lt;chrono&gt;\n\nint sum1(int a, int b)\n{\n\tstd::this_thread::sleep_for(std::chrono::seconds(1));\n\treturn a + b;\n}\n\nint sum2(int a, int b, int c)\n{\n\tstd::this_thread::sleep_for(std::chrono::seconds(1));\n\treturn a + b + c;\n}\n\nint main()\n{\n\tThreadPool pool;\n\tpool.start(4);\n\n\tstd::future&lt;int&gt; res1 = pool.submit(sum1, 100, 300);\n\tstd::future&lt;int&gt; res2 = pool.submit(sum2, 1, 2, 3);\n\n\tstd::cout &lt;&lt; res1.get() &lt;&lt; std::endl;\n\tstd::cout &lt;&lt; res2.get() &lt;&lt; std::endl;\n}\n</code></pre>\n<p><strong>测试结果：</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2218c413ffa74ecf9fb3f0928c6ca1af.png\"/><br/> 获取完整代码：<a href=\"https://github.com/xf-8087/ThreadPool\">https://github.com/xf-8087/ThreadPool</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-05-18 02:02:03", "summary": "实现线程池线程池介绍线程池知识背景并发和并行线程池的优势第一个版本第二个版本线程池介绍作为五大池之一内存池、连接池、线程池、进程池、协程池，线程池的应用非常广泛，不管事客户端程序还是后台服务端，都是提"}