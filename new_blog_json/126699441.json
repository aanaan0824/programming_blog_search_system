{"blogid": "126699441", "writerAge": "码龄57天", "writerBlogNum": "119", "writerCollect": "211", "writerComment": "20", "writerFan": "103", "writerGrade": "4级", "writerIntegral": "1277", "writerName": "Mr_DC_IT", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126699441.jpg", "writerRankTotal": "15794", "writerRankWeekly": "1121", "writerThumb": "38", "writerVisitNum": "24577", "blog_read_count": "524", "blog_time": "于 2022-09-05 10:56:53 发布", "blog_title": "【毕业设计】行人口罩佩戴检测系统 - 深度学习 机器视觉", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h4><a id=\"_0\"></a>前言</h4>\n<p>🔥 Hi，大家好，这里是丹成学长的毕设系列文章！</p>\n<p>🔥 对毕设有任何疑问都可以问学长哦!</p>\n<p>这两年开始，各个学校对毕设的要求越来越高，难度也越来越大… 毕业设计耗费时间，耗费精力，甚至有些题目即使是专业的老师或者硕士生也需要很长时间，所以一旦发现问题，一定要提前准备，避免到后面措手不及，草草了事。</p>\n<p>为了大家能够顺利以及最少的精力通过毕设，学长分享优质毕业设计项目，今天要分享的新项目是</p>\n<p>🚩 <strong>基于机器视觉的行人口罩佩戴检测</strong></p>\n<p>🥇学长这里给一个题目综合评分(每项满分5分)</p>\n<ul><li>难度系数：4分</li><li>工作量：4分</li><li>创新点：3分</li></ul>\n<p>🧿 <strong>选题指导, 项目分享：</strong></p>\n<p><a href=\"https://blog.csdn.net/Mr_DC_IT/article/details/126460477\">https://blog.csdn.net/Mr_DC_IT/article/details/126460477</a></p>\n<h4><a id=\"_23\"></a>简介</h4>\n<p>2020新冠爆发以来，疫情牵动着全国人民的心，一线医护工作者在最前线抗击疫情的同时，我们也可以看到很多科技行业和人工智能领域的从业者，也在贡献着他们的力量。近些天来，旷视、商汤、海康、百度都多家科技公司研发出了带有AI人脸检测算法的红外测温、口罩佩戴检测等设备，依图、阿里也研发出了通过深度学习来自动诊断新冠肺炎的医疗算法。可以说，各行各业的从业者都在为早日战胜这场疫情贡献着力量。</p>\n<h4><a id=\"_27\"></a>效果展示</h4>\n<p>不多说， 先上效果<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20201106135259270.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2020110613532377.png\"/></p>\n<h4><a id=\"_33\"></a>实现方法</h4>\n<h6><a id=\"_34\"></a>模型介绍</h6>\n<p>在深度学习时代之前，人脸检测一般采用传统的、基于手动设计特征的方法，其中最知名的莫过于Viola-Jones算法，至今部分手机和数码相机内置的人脸检测算法，仍旧采用Viola-Jones算法。然而，随着深度学习技术的蓬勃发展，基于深度学习的人脸检测算法逐步取代了传统的计算机视觉算法。</p>\n<p>在人脸检测最常用的数据集——WIDER Face数据集的评估结果上来看，使用深度学习的模型在准确率和召回率上极大的超过了传统算法。下图的青线是Viola-Jones的Precision-Recall图。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2020110613561779.png\"/></p>\n<p>下图是众多基于深度学习的人脸检测算法的性能评估PR曲线。可以看到基于深度学习的人脸检测算法的性能，大幅超过了VJ算法（曲线越靠右越好）。近两年来，人脸检测算法在WIDER Face的简单测试集（easy 部分）上可以达到95%召回率下，准确率也高达90%，作为对比，VJ算法在40%召回率下，准确率只有75%左右。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20201106135628505.png\"/></p>\n<p>其实，基于深度学习的人脸检测算法，多数都是基于深度学习目标检测算法进行的改进，或者说是把通用的目标检测模型，为适应人脸检测任务而进行的特定配置。而众多的目标检测模型（Faster RCNN、SSD、YOLO）中，人脸检测算法最常用的是SSD算法，例如知名的SSH模型、S3FD模型、RetinaFace算法，都是受SSD算法的启发，或者基于SSD进行的任务定制化改进， 例如将定位层提到更靠前的位置，Anchor大小调整、Anchor标签分配规则的调整，在SSD基础上加入FPN等。</p>\n<p>在我个人看来，SSD是最优雅、简洁的目标检测模型，因此，我们实现的人脸口罩检测模型，也是采用SSD的思想，限于篇幅原因，本文不会详细介绍SSD的原理，只会进行简单的模型配置介绍。</p>\n<p>在本项目中，我们使用的是SSD架构的人脸检测算法，相比于普通的人脸检测模型只有人脸一个类别，而人脸口罩检测，只不过是增加了一个类别，变成戴口罩人脸和不戴口罩的人脸两个类别而已。</p>\n<p>我们开源的模型是一个非常小的模型，输入是260x260大小，主干网络只有8层，有五个定位和分类层，一共只有28个卷积层。而每个卷积层的通道数，是32、64、128这三种，所有这个模型总的参数量只有101.5万个参数。下图是网络的结构图。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20201106135723473.png\"/></p>\n<p>其中，上面八个卷积层是主干网络，也就是特征提取层，下面20层是定位和分类层（注意，为了方便显示，我们没有画出BN层）。</p>\n<p>训练目标检测模型，最重要的合理的设置anchor的大小和宽高比，笔者个人在做项目时，一般会统计数据集的目标物体的宽高比和大小来设置anchor的大小和宽高比。例如，在我们标注的口罩人脸数据集上，我们读取了所有人脸的标注信息，并计算每个人脸高度与宽度的比值，统计得到高度与宽比的分布直方图，如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20201106135732680.png\"/></p>\n<p>因为人脸的一般是长方形的，而很多图片是比较宽的，例如16:9的图片，人脸的宽度和高度归一化后，有很多图片的高度是宽度的2倍甚至更大。从上图也可以看出，归一化后的人脸高宽比集中在1~2.5之间。所以，根据数据的分布，我们将五个定位层的anchor的宽高比统一设置为1，0.62, 0.42。（转换为高宽比，也就是约1，1.6：1，2.4:1）</p>\n<p>五个定位层的配置信息如下表所示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2020110613575929.png\"/></p>\n<p>笔者使用基于Keras实现的目标检测微框架训练的人脸口罩检测模型，为了避免一些网友提到的使用手挡住嘴巴就会欺骗部分口罩检测系统的情况，我们在数据集中加入了部分嘴巴被手捂住的数据，另外，我们还在训练的过程中，随机的往嘴巴部分粘贴一些其他物体的图片，从而避免模型认为只要露出嘴巴的就是没戴口罩，没露出嘴巴的就是带口罩这个问题，通过这两个规避方法，我们很好的解决了这个问题，大家可以在aizoo.com体验我们的模型效果。</p>\n<p>后处理部分主要就是非最大抑制（NMS），我们使用了单类的NMS，也就是戴口罩人脸和不戴口罩人脸两个类别一起做NMS，从而提高速度。</p>\n<h6><a id=\"_76\"></a>获取数据集</h6>\n<p>人脸口罩数据集下载</p>\n<p>下载人脸口罩数据集的目的是利用OpenCV进行模型训练，这里采用口罩数据集的正负比列为1:3，即500张戴口罩的人脸图片和1500张不戴口罩的人脸图片。</p>\n<h6><a id=\"_81\"></a>数据集获取：联系博主获取</h6>\n<p>解压之后，将压缩包中的mask文件自行选择文件夹放置，以便之后的操作。</p>\n<p>如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20201106134241511.png\"/></p>\n<p>上面带口罩的人脸图像我们命名为正样本，相反，没带口罩的数据集合命名为负样本， 如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20201106134515695.png\"/><br/> 由于数据集解压后样本图像命名是乱序的，我们要进行重命名，上面两幅图是已经处理好的， 下面给出示例代码</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#对数据集重命名</span>\n<span class=\"token comment\">#coding:utf-8</span>\n<span class=\"token keyword\">import</span> os\npath <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\facemask\\\\mask\\\\have_mask\"</span> <span class=\"token comment\">#人脸口罩数据集正样本的路径</span>\nfilelist <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\ncount<span class=\"token operator\">=</span><span class=\"token number\">1000</span> <span class=\"token comment\">#开始文件名1000.jpg</span>\n<span class=\"token keyword\">for</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">in</span> filelist<span class=\"token punctuation\">:</span>   \n    Olddir<span class=\"token operator\">=</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isdir<span class=\"token punctuation\">(</span>Olddir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n        <span class=\"token keyword\">continue</span>\n    filename<span class=\"token operator\">=</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>splitext<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>   \n    filetype<span class=\"token operator\">=</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>splitext<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n \n    Newdir<span class=\"token operator\">=</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>filetype<span class=\"token punctuation\">)</span>  \n    os<span class=\"token punctuation\">.</span>rename<span class=\"token punctuation\">(</span>Olddir<span class=\"token punctuation\">,</span>Newdir<span class=\"token punctuation\">)</span>\n    count<span class=\"token operator\">+=</span><span class=\"token number\">1</span>\n</code></pre>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#对数据集重命名</span>\n<span class=\"token comment\">#coding:utf-8</span>\n<span class=\"token keyword\">import</span> os\npath <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\facemask\\\\mask\\\\no_mask\"</span> <span class=\"token comment\">#人脸口罩数据集的路径</span>\nfilelist <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\ncount<span class=\"token operator\">=</span><span class=\"token number\">10000</span> <span class=\"token comment\">#开始文件名1000.jpg</span>\n<span class=\"token keyword\">for</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">in</span> filelist<span class=\"token punctuation\">:</span>   \n    Olddir<span class=\"token operator\">=</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isdir<span class=\"token punctuation\">(</span>Olddir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n        <span class=\"token keyword\">continue</span>\n    filename<span class=\"token operator\">=</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>splitext<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>   \n    filetype<span class=\"token operator\">=</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>splitext<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n \n    Newdir<span class=\"token operator\">=</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>filetype<span class=\"token punctuation\">)</span>  \n    os<span class=\"token punctuation\">.</span>rename<span class=\"token punctuation\">(</span>Olddir<span class=\"token punctuation\">,</span>Newdir<span class=\"token punctuation\">)</span>\n    count<span class=\"token operator\">+=</span><span class=\"token number\">1</span>\n</code></pre>\n<br/>\n<p>🧿 <strong>选题指导, 项目分享：</strong></p>\n<p><a href=\"https://blog.csdn.net/Mr_DC_IT/article/details/126460477\">https://blog.csdn.net/Mr_DC_IT/article/details/126460477</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-05 10:56:53", "summary": "前言，大家好，这里是丹成学长的毕设系列文章！对毕设有任何疑问都可以问学长哦这两年开始，各个学校对毕设的要求越来越高，难度也越来越大毕业设计耗费时间，耗费精力，甚至有些题目即使是专业的老师或者硕士生也需"}