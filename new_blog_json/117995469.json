{"blogid": "117995469", "writerAge": "码龄6年", "writerBlogNum": "80", "writerCollect": "1735", "writerComment": "2266", "writerFan": "1482", "writerGrade": "6级", "writerIntegral": "4714", "writerName": "ZHW_AI课题组", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_117995469.jpg", "writerRankTotal": "22832", "writerRankWeekly": "87102", "writerThumb": "938", "writerVisitNum": "241556", "blog_read_count": "12437", "blog_time": "于 2021-06-17 15:51:45 发布", "blog_title": "利用LSTM实现预测时间序列（股票预测）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#1__2\">1. 作者介绍</a></li><li><a href=\"#2_tushare__8\">2. tushare 简介</a></li><li><a href=\"#3_LSTM_16\">3. LSTM简介</a></li><li><ul><li><a href=\"#31__Recurrent_Neural_Networks_17\">3.1 循环神经网络 (Recurrent Neural Networks)</a></li><li><a href=\"#32_LSTM_33\">3.2 LSTM网络</a></li><li><ul><li><a href=\"#321_LSTM_43\">3.2.1 LSTM的核心思想</a></li><li><a href=\"#322_LSTM_56\">3.2.2 一步一步理解LSTM</a></li></ul>\n</li></ul>\n</li><li><a href=\"#4__67\">4. 代码实现</a></li><li><ul><li><a href=\"#41__68\">4.1 导入相关资源包</a></li><li><a href=\"#42__80\">4.2 定义模型结构</a></li><li><a href=\"#43__107\">4.3 制作数据集</a></li><li><a href=\"#44__126\">4.4 模型训练</a></li><li><a href=\"#45__176\">4.5 测试与保存结果</a></li><li><a href=\"#46__197\">4.6 实验结果</a></li></ul>\n</li><li><a href=\"#5___202\">5. 完整代码</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"1__2\"></a>1. 作者介绍</h1>\n<p>糜红敏，男，西安工程大学电子信息学院，2019级硕士研究生，张宏伟人工智能课题组。<br/> 研究方向：机器视觉与人工智能。<br/> 电子邮件：1353197091@qq.com</p>\n<h1><a id=\"2_tushare__8\"></a>2. tushare 简介</h1>\n<p>Tushare是一个免费、开源的python财经数据接口包。主要实现对股票等金融数据从数据采集、清洗加工到数据存储的过程，能够为金融分析人员提供快速、整洁、和多样的便于分析的数据，为他们在数据获取方面极大地减轻工作量，使他们更加专注于策略和模型的研究与实现上。考虑到Python pandas包在金融量化分析中体现出的优势，Tushare返回的绝大部分的数据格式都是pandas DataFrame类型，非常便于用pandas、NumPy、Matplotlib进行数据分析和可视化。<br/> 更详细的介绍<a href=\"http://tushare.org/index.html#id3\">http://tushare.org/index.html#id3</a></p>\n<p>通过tushare接口下载下来的部分数据的可视化如图所示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210617104449577.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210617104756955.png\"/></p>\n<h1><a id=\"3_LSTM_16\"></a>3. LSTM简介</h1>\n<h2><a id=\"31__Recurrent_Neural_Networks_17\"></a>3.1 循环神经网络 (Recurrent Neural Networks)</h2>\n<p>人对一个问题的思考不会完全从头开始。比如你在阅读本片文章的时，你会根据之前理解过的信息来理解下面看到的文字。在理解当前文字的时候，你并不会忘记之前看过的文字，从头思考当前文字的含义。</p>\n<p>传统的神经网络并不能做到这一点，这是在对这种序列信息（如语音）进行预测时的一个缺点。比如你想对电影中的每个片段去做事件分类，传统的神经网络是很难通过利用前面的事件信息来对后面事件进行分类。</p>\n<p>而循环神经网络（RNN）可以通过不停的将信息循环操作，保证信息持续存在，从而解决上述问题。RNN如下图所示：(<a href=\"https://www.jianshu.com/p/95d5c461924c\">原文来自这里</a>)<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210616220922444.png\"/><br/> 可以看出A是一组神经网络（可以理解为一个网络的自循环），它的工作是不停的接收 X<sub>t</sub> 并且输出 h<sub>t</sub>。从图中可以看出A允许将信息不停的再内部循环，这样使得它可以保证每一步的计算都保存以前的信息。</p>\n<p>更好的理解方式，将RNN的自循环结构展开，像是将同一个网络复制并连成一条线的结构，将自身提取的信息传递给下一个继承者，如下图所示。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2021061622154783.png\"/><br/> 这样的一条链状神经网络代表了一个递归神经网络，可以认为它是对相同神经网络的多重复制，每一时刻的神经网络会传递信息给下一时刻。</p>\n<p>递归神经网络因为具有一定的记忆功能，可以被用来解决很多问题，例如：语音识别、语言模型、机器翻译等。但是它并不能很好地处理长时依赖问题。</p>\n<p>长时依赖是这样的一个问题，当预测点与依赖的相关信息距离比较远的时候，就难以学到该相关信息。例如在句子”我出生在法国，……，我会说法语“中，若要预测末尾”法语“，我们需要用到上下文”法国“。理论上，递归神经网络是可以处理这样的问题的，但是实际上，常规的递归神经网络并不能很好地解决长时依赖，好的是LSTM可以很好地解决这个问题。</p>\n<h2><a id=\"32_LSTM_33\"></a>3.2 LSTM网络</h2>\n<p>Long Short Term Memory networks（以下简称LSTMs），一种特殊的RNN网络，该网络设计出来是为了解决长依赖问题。该网络由 <a href=\"http://www.bioinf.jku.at/publications/older/2604.pdf\">Hochreiter &amp; Schmidhuber (1997)</a>引入，并有许多人对其进行了改进和普及。他们的工作被用来解决了各种各样的问题，直到目前还被广泛应用。</p>\n<p>所有循环神经网络都具有神经网络的重复模块链的形式。 在标准的RNN中，该重复模块将具有非常简单的结构，例如单个tanh层。标准的RNN网络如下图所示<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210616222302235.png\"/><br/> LSTM也具有这种链式结构，但是它的重复单元不同于标准RNN网络里的单元只有一个网络层，它的内部有四个网络层。LSTM的结构如下图所示。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210616222359884.png\"/><br/> 在解释LSTMs的详细结构时先定义一下图中各个符号的含义，符号包括下面几种<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210616222520967.png\"/><br/> 图中黄色类似于CNN里的激活函数操作，粉色圆圈表示点操作，单箭头表示数据流向，箭头合并表示向量的合并（concat）操作，箭头分叉表示向量的拷贝操作。</p>\n<h3><a id=\"321_LSTM_43\"></a>3.2.1 LSTM的核心思想</h3>\n<p>LSTM的核心是细胞状态，用贯穿细胞的水平线表示。</p>\n<p>细胞状态像传送带一样。它贯穿整个细胞却只有很少的分支，这样能保证信息不变的流过整个RNN。细胞状态如下图所示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210616222839128.png\"/><br/> LSTM网络能通过一种被称为门的结构对细胞状态进行删除或者添加信息。</p>\n<p>门能够有选择性的决定让哪些信息通过。其实门的结构很简单，就是一个sigmoid层和一个点乘操作的组合。如下图所示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210616222926424.png\"/><br/> 因为sigmoid层的输出是0-1的值，这代表有多少信息能够流过sigmoid层。0表示都不能通过，1表示都能通过。</p>\n<p>一个LSTM里面包含三个门来控制细胞状态。</p>\n<h3><a id=\"322_LSTM_56\"></a>3.2.2 一步一步理解LSTM</h3>\n<p>前面提到LSTM由三个门来控制细胞状态，这三个门分别称为忘记门、输入门和输出门。下面一个一个的来讲述。</p>\n<p>LSTM的第一步就是决定细胞状态需要丢弃哪些信息。这部分操作是通过一个称为忘记门的sigmoid单元来处理的。它通过查看 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        \n         h\n        \n        \n         \n          t\n         \n         \n          −\n         \n         \n          1\n         \n        \n       \n      \n      \n       h_{t-1}\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.902771em; vertical-align: -0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">t</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.208331em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span> 和 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        \n         x\n        \n        \n         t\n        \n       \n      \n      \n       x_t\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.58056em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.280556em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span> 信息来输出一个0-1之间的向量，该向量里面的0-1值表示细胞状态 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        \n         C\n        \n        \n         \n          t\n         \n         \n          −\n         \n         \n          1\n         \n        \n       \n      \n      \n       C_{t-1}\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.891661em; vertical-align: -0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right: 0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.07153em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">t</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.208331em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span>中的哪些信息保留或丢弃多少。0表示不保留，1表示都保留。忘记门如下图所示:<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210616223340516.png\"/><br/> 下一步是决定给细胞状态添加哪些新的信息。这一步又分为两个步骤，首先，利用 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        \n         h\n        \n        \n         \n          t\n         \n         \n          −\n         \n         \n          1\n         \n        \n       \n      \n      \n       h_{t-1}\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.902771em; vertical-align: -0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">t</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.208331em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span> 和 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        \n         x\n        \n        \n         t\n        \n       \n      \n      \n       x_t\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.58056em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.280556em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span> 通过一个称为输入门的操作来决定更新哪些信息。然后利用 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        \n         h\n        \n        \n         \n          t\n         \n         \n          −\n         \n         \n          1\n         \n        \n       \n      \n      \n       h_{t-1}\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.902771em; vertical-align: -0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">t</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.208331em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span> 和 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        \n         x\n        \n        \n         t\n        \n       \n      \n      \n       x_t\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.58056em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.280556em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span> 通过一个tanh层得到新的候选细胞信息 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        \n         \n          C\n         \n         \n          t\n         \n        \n        \n         ~\n        \n       \n      \n      \n       \\tilde{C_t}\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1.07019em; vertical-align: -0.15em;\"></span><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.92019em;\"><span class=\"\" style=\"top: -3em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right: 0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.280556em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.07153em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span><span class=\"\" style=\"top: -3.60233em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"accent-body\" style=\"left: -0.25em;\">~</span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span>，这些信息可能会被更新到细胞信息中。这两步描述如下图所示:<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210616225121272.png\"/><br/> 下面将更新旧的细胞信息 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        \n         C\n        \n        \n         \n          t\n         \n         \n          −\n         \n         \n          1\n         \n        \n       \n      \n      \n       C_{t-1}\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.891661em; vertical-align: -0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right: 0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.07153em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">t</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.208331em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span>，变为新的细胞信息 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        \n         C\n        \n        \n         t\n        \n       \n      \n      \n       C_{t}\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.83333em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right: 0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.280556em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.07153em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span>。更新的规则就是通过忘记门选择忘记旧细胞信息的一部分，通过输入门选择添加候选细胞信息 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        \n         \n          C\n         \n         \n          ~\n         \n        \n        \n         t\n        \n       \n      \n      \n       \\tilde C_{t}\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1.07019em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.92019em;\"><span class=\"\" style=\"top: -3em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.07153em;\">C</span></span><span class=\"\" style=\"top: -3.60233em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"accent-body\" style=\"left: -0.16666em;\">~</span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.280556em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.07153em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span> 的一部分得到新的细胞信息 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        \n         C\n        \n        \n         t\n        \n       \n      \n      \n       C_{t}\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.83333em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right: 0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.280556em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.07153em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span>。更新操作如下图所示:<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210616233834150.png\"/>更新完细胞状态后需要根据输入的 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        \n         h\n        \n        \n         \n          t\n         \n         \n          −\n         \n         \n          1\n         \n        \n       \n      \n      \n       h_{t-1}\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.902771em; vertical-align: -0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">t</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.208331em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span> 和 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        \n         x\n        \n        \n         t\n        \n       \n      \n      \n       x_t\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.58056em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.280556em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span> 来判断输出细胞的哪些状态特征，这里需要将输入经过一个称为输出门的sigmoid层得到判断条件，然后将细胞状态经过tanh层得到一个-1~1之间值的向量，该向量与输出门得到的判断条件相乘就得到了最终该RNN单元的输出。该步骤如下图所示:<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210616234115733.png\"/><br/> 还是拿语言模型来举例说明，在预测动词形式的时候，我们需要通过输入的主语是单数还是复数来推断输出门输出的预测动词是单数形式还是复数形式。</p>\n<h1><a id=\"4__67\"></a>4. 代码实现</h1>\n<h2><a id=\"41__68\"></a>4.1 导入相关资源包</h2>\n<p>这里除了安装深度学习框架pytorch之外，还需要安装matplotlib、numpy、pandas、tushare等库，安装步骤都很简单，只需输入pip3 install xxx(库名)即可。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> tushare <span class=\"token keyword\">as</span> ts\n<span class=\"token keyword\">import</span> torch\n<span class=\"token keyword\">from</span> torch <span class=\"token keyword\">import</span> nn\n<span class=\"token keyword\">import</span> datetime\n<span class=\"token keyword\">import</span> time\n</code></pre>\n<h2><a id=\"42__80\"></a>4.2 定义模型结构</h2>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LSTM_Regression</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n        使用LSTM进行回归\n        \n        参数：\n        - input_size: feature size\n        - hidden_size: number of hidden units\n        - output_size: number of output\n        - num_layers: layers of LSTM to stack\n    \"\"\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> input_size<span class=\"token punctuation\">,</span> hidden_size<span class=\"token punctuation\">,</span> output_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> num_layers<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>lstm <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>LSTM<span class=\"token punctuation\">(</span>input_size<span class=\"token punctuation\">,</span> hidden_size<span class=\"token punctuation\">,</span> num_layers<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>fc <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span>hidden_size<span class=\"token punctuation\">,</span> output_size<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> _x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>lstm<span class=\"token punctuation\">(</span>_x<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># _x is input, size (seq_len, batch, input_size)</span>\n        s<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> h <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>shape  <span class=\"token comment\"># x is output, size (seq_len, batch, hidden_size)</span>\n        x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>s<span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>fc<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 把形状改回来</span>\n        <span class=\"token keyword\">return</span> x\n</code></pre>\n<h2><a id=\"43__107\"></a>4.3 制作数据集</h2>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">create_dataset</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> days_for_train<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n        根据给定的序列data，生成数据集\n        \n        数据集分为输入和输出，每一个输入的长度为days_for_train，每一个输出的长度为1。\n        也就是说用days_for_train天的数据，对应下一天的数据。\n\n        若给定序列的长度为d，将输出长度为(d-days_for_train+1)个输入/输出对\n    \"\"\"</span>\n    dataset_x<span class=\"token punctuation\">,</span> dataset_y<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>days_for_train<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        _x <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span>days_for_train<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        dataset_x<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>_x<span class=\"token punctuation\">)</span>\n        dataset_y<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>days_for_train<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>dataset_x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>dataset_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"44__126\"></a>4.4 模型训练</h2>\n<p>可以根据自己的兴趣选择想要下载的时间范围，比如代码中选择了起始日期为2019年1月1日。另外训练集与测试集的长度也可以自由调节。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    t0 <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    data_close <span class=\"token operator\">=</span> ts<span class=\"token punctuation\">.</span>get_k_data<span class=\"token punctuation\">(</span><span class=\"token string\">'000001'</span><span class=\"token punctuation\">,</span> start<span class=\"token operator\">=</span><span class=\"token string\">'2019-01-01'</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'close'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>values  <span class=\"token comment\"># 取上证指数的收盘价的np.ndarray 而不是pd.Series</span>\n    data_close <span class=\"token operator\">=</span> data_close<span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">'float32'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 转换数据类型</span>\n    plt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>data_close<span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>savefig<span class=\"token punctuation\">(</span><span class=\"token string\">'data.png'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">format</span><span class=\"token operator\">=</span><span class=\"token string\">'png'</span><span class=\"token punctuation\">,</span> dpi<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 将价格标准化到0~1</span>\n    max_value <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>data_close<span class=\"token punctuation\">)</span>\n    min_value <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>data_close<span class=\"token punctuation\">)</span>\n    data_close <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>data_close <span class=\"token operator\">-</span> min_value<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>max_value <span class=\"token operator\">-</span> min_value<span class=\"token punctuation\">)</span>\n\n    dataset_x<span class=\"token punctuation\">,</span> dataset_y <span class=\"token operator\">=</span> create_dataset<span class=\"token punctuation\">(</span>data_close<span class=\"token punctuation\">,</span> DAYS_FOR_TRAIN<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 划分训练集和测试集，70%作为训练集</span>\n    train_size <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>dataset_x<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.7</span><span class=\"token punctuation\">)</span>\n\n    train_x <span class=\"token operator\">=</span> dataset_x<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>train_size<span class=\"token punctuation\">]</span>\n    train_y <span class=\"token operator\">=</span> dataset_y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>train_size<span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># 将数据改变形状，RNN 读入的数据维度是 (seq_size, batch_size, feature_size)</span>\n    train_x <span class=\"token operator\">=</span> train_x<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> DAYS_FOR_TRAIN<span class=\"token punctuation\">)</span>\n    train_y <span class=\"token operator\">=</span> train_y<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 转为pytorch的tensor对象</span>\n    train_x <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>from_numpy<span class=\"token punctuation\">(</span>train_x<span class=\"token punctuation\">)</span>\n    train_y <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>from_numpy<span class=\"token punctuation\">(</span>train_y<span class=\"token punctuation\">)</span>\n\n    model <span class=\"token operator\">=</span> LSTM_Regression<span class=\"token punctuation\">(</span>DAYS_FOR_TRAIN<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> output_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> num_layers<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n    loss_function <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MSELoss<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    optimizer <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>optim<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span><span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>                   \n        out <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span>train_x<span class=\"token punctuation\">)</span>\n        loss <span class=\"token operator\">=</span> loss_function<span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> train_y<span class=\"token punctuation\">)</span>\n\n        loss<span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        optimizer<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        optimizer<span class=\"token punctuation\">.</span>zero_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'log.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a+'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'{} - {}\\n'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> loss<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Epoch: {}, Loss:{:.5f}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> loss<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"45__176\"></a>4.5 测试与保存结果</h2>\n<pre><code class=\"prism language-python\">    model <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 转换成测试模式</span>\n    <span class=\"token comment\"># model.load_state_dict(torch.load('model_params.pkl'))  # 读取参数</span>\n\n    <span class=\"token comment\"># 注意这里用的是全集 模型的输出长度会比原数据少DAYS_FOR_TRAIN 填充使长度相等再作图</span>\n    dataset_x <span class=\"token operator\">=</span> dataset_x<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> DAYS_FOR_TRAIN<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (seq_size, batch_size, feature_size)</span>\n    dataset_x <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>from_numpy<span class=\"token punctuation\">(</span>dataset_x<span class=\"token punctuation\">)</span>\n\n    pred_test <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span>dataset_x<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 全量训练集的模型输出 (seq_size, batch_size, output_size)</span>\n    pred_test <span class=\"token operator\">=</span> pred_test<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pred_test <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>DAYS_FOR_TRAIN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pred_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 填充0 使长度相同</span>\n    <span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>pred_test<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data_close<span class=\"token punctuation\">)</span>\n\n    plt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>pred_test<span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'prediction'</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>data_close<span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'real'</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>train_size<span class=\"token punctuation\">,</span> train_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'g--'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 分割线 左边是训练数据 右边是测试数据的输出</span>\n    plt<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span>loc<span class=\"token operator\">=</span><span class=\"token string\">'best'</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>savefig<span class=\"token punctuation\">(</span><span class=\"token string\">'result.png'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">format</span><span class=\"token operator\">=</span><span class=\"token string\">'png'</span><span class=\"token punctuation\">,</span> dpi<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"46__197\"></a>4.6 实验结果</h2>\n<p>训练结束后在终端会有如下显示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210617013203379.png\"/><br/> 实验结果会保存为.png格式的图片保存在代码的根目录下，如下图所示（线条颜色可根据个人喜好自己选择）。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210617013100922.png\"/></p>\n<h1><a id=\"5___202\"></a>5. 完整代码</h1>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#!/usr/bin/python3</span>\n<span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> tushare <span class=\"token keyword\">as</span> ts\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> torch\n<span class=\"token keyword\">from</span> torch <span class=\"token keyword\">import</span> nn\n<span class=\"token keyword\">import</span> datetime\n<span class=\"token keyword\">import</span> time\n\n\nDAYS_FOR_TRAIN <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LSTM_Regression</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n        使用LSTM进行回归\n        \n        参数：\n        - input_size: feature size\n        - hidden_size: number of hidden units\n        - output_size: number of output\n        - num_layers: layers of LSTM to stack\n    \"\"\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> input_size<span class=\"token punctuation\">,</span> hidden_size<span class=\"token punctuation\">,</span> output_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> num_layers<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>lstm <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>LSTM<span class=\"token punctuation\">(</span>input_size<span class=\"token punctuation\">,</span> hidden_size<span class=\"token punctuation\">,</span> num_layers<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>fc <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span>hidden_size<span class=\"token punctuation\">,</span> output_size<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> _x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>lstm<span class=\"token punctuation\">(</span>_x<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># _x is input, size (seq_len, batch, input_size)</span>\n        s<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> h <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>shape  <span class=\"token comment\"># x is output, size (seq_len, batch, hidden_size)</span>\n        x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>s<span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>fc<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 把形状改回来</span>\n        <span class=\"token keyword\">return</span> x\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_dataset</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> days_for_train<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n        根据给定的序列data，生成数据集\n        \n        数据集分为输入和输出，每一个输入的长度为days_for_train，每一个输出的长度为1。\n        也就是说用days_for_train天的数据，对应下一天的数据。\n\n        若给定序列的长度为d，将输出长度为(d-days_for_train+1)个输入/输出对\n    \"\"\"</span>\n    dataset_x<span class=\"token punctuation\">,</span> dataset_y<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>days_for_train<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        _x <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span>days_for_train<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        dataset_x<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>_x<span class=\"token punctuation\">)</span>\n        dataset_y<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>days_for_train<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>dataset_x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>dataset_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    t0 <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#data_close = ts.get_k_data('000001', start='2019-01-01', index=True)['close']  # 取上证指数的收盘价</span>\n    <span class=\"token comment\">#data_close.to_csv('000001.csv', index=False) #将下载的数据转存为.csv格式保存</span>\n    data_close <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'000001.csv'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#读取文件</span>\n    <span class=\"token comment\">#df_sh = ts.get_k_data('sh', start='2019-01-01', end=datetime.datetime.now().strftime('%Y-%m-%d'))</span>\n    <span class=\"token comment\">#print(df_sh.shape)</span>\n    data_close <span class=\"token operator\">=</span> data_close<span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">'float32'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>values  <span class=\"token comment\"># 转换数据类型</span>\n    plt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>data_close<span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>savefig<span class=\"token punctuation\">(</span><span class=\"token string\">'data.png'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">format</span><span class=\"token operator\">=</span><span class=\"token string\">'png'</span><span class=\"token punctuation\">,</span> dpi<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n    <span class=\"token comment\"># 将价格标准化到0~1</span>\n    max_value <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>data_close<span class=\"token punctuation\">)</span>\n    min_value <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>data_close<span class=\"token punctuation\">)</span>\n    data_close <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>data_close <span class=\"token operator\">-</span> min_value<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>max_value <span class=\"token operator\">-</span> min_value<span class=\"token punctuation\">)</span>\n\n    dataset_x<span class=\"token punctuation\">,</span> dataset_y <span class=\"token operator\">=</span> create_dataset<span class=\"token punctuation\">(</span>data_close<span class=\"token punctuation\">,</span> DAYS_FOR_TRAIN<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 划分训练集和测试集，70%作为训练集</span>\n    train_size <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>dataset_x<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.7</span><span class=\"token punctuation\">)</span>\n\n    train_x <span class=\"token operator\">=</span> dataset_x<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>train_size<span class=\"token punctuation\">]</span>\n    train_y <span class=\"token operator\">=</span> dataset_y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>train_size<span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># 将数据改变形状，RNN 读入的数据维度是 (seq_size, batch_size, feature_size)</span>\n    train_x <span class=\"token operator\">=</span> train_x<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> DAYS_FOR_TRAIN<span class=\"token punctuation\">)</span>\n    train_y <span class=\"token operator\">=</span> train_y<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 转为pytorch的tensor对象</span>\n    train_x <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>from_numpy<span class=\"token punctuation\">(</span>train_x<span class=\"token punctuation\">)</span>\n    train_y <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>from_numpy<span class=\"token punctuation\">(</span>train_y<span class=\"token punctuation\">)</span>\n\n\n    model <span class=\"token operator\">=</span> LSTM_Regression<span class=\"token punctuation\">(</span>DAYS_FOR_TRAIN<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> output_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> num_layers<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 导入模型并设置模型的参数输入输出层、隐藏层等</span>\n\n\t\n    model_total <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>param<span class=\"token punctuation\">.</span>nelement<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> param <span class=\"token keyword\">in</span> model<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 计算模型参数</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number of model_total parameter: %.8fM\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>model_total<span class=\"token operator\">/</span><span class=\"token number\">1e6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n    train_loss <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    loss_function <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MSELoss<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    optimizer <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>optim<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span><span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> betas<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> eps<span class=\"token operator\">=</span><span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">08</span><span class=\"token punctuation\">,</span> weight_decay<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        out <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span>train_x<span class=\"token punctuation\">)</span>\n        loss <span class=\"token operator\">=</span> loss_function<span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> train_y<span class=\"token punctuation\">)</span>\n        loss<span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        optimizer<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        optimizer<span class=\"token punctuation\">.</span>zero_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        train_loss<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>loss<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\n\t\t<span class=\"token comment\"># 将训练过程的损失值写入文档保存，并在终端打印出来</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'log.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a+'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'{} - {}\\n'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> loss<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Epoch: {}, Loss:{:.5f}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> loss<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 画loss曲线</span>\n    plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>train_loss<span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'loss'</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Train_Loss_Curve\"</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">'train_loss'</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">'epoch_num'</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>savefig<span class=\"token punctuation\">(</span><span class=\"token string\">'loss.png'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">format</span><span class=\"token operator\">=</span><span class=\"token string\">'png'</span><span class=\"token punctuation\">,</span> dpi<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n    <span class=\"token comment\"># torch.save(model.state_dict(), 'model_params.pkl')  # 可以保存模型的参数供未来使用</span>\n    t1<span class=\"token operator\">=</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    T<span class=\"token operator\">=</span>t1<span class=\"token operator\">-</span>t0\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The training time took %.2f'</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">/</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">' mins.'</span><span class=\"token punctuation\">)</span>\n\n    tt0<span class=\"token operator\">=</span>time<span class=\"token punctuation\">.</span>asctime<span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span>t0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    tt1<span class=\"token operator\">=</span>time<span class=\"token punctuation\">.</span>asctime<span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The starting time was '</span><span class=\"token punctuation\">,</span>tt0<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The finishing time was '</span><span class=\"token punctuation\">,</span>tt1<span class=\"token punctuation\">)</span>\n\n\n    <span class=\"token comment\"># for test</span>\n    model <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 转换成测试模式</span>\n    <span class=\"token comment\"># model.load_state_dict(torch.load('model_params.pkl'))  # 读取参数</span>\n\n    <span class=\"token comment\"># 注意这里用的是全集 模型的输出长度会比原数据少DAYS_FOR_TRAIN 填充使长度相等再作图</span>\n    dataset_x <span class=\"token operator\">=</span> dataset_x<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> DAYS_FOR_TRAIN<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (seq_size, batch_size, feature_size)</span>\n    dataset_x <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>from_numpy<span class=\"token punctuation\">(</span>dataset_x<span class=\"token punctuation\">)</span>\n\n    pred_test <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span>dataset_x<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 全量训练集</span>\n    <span class=\"token comment\"># 的模型输出 (seq_size, batch_size, output_size)</span>\n    pred_test <span class=\"token operator\">=</span> pred_test<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pred_test <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>DAYS_FOR_TRAIN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pred_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 填充0 使长度相同</span>\n    <span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>pred_test<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data_close<span class=\"token punctuation\">)</span>\n\n    plt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>pred_test<span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'prediction'</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>data_close<span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'real'</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>train_size<span class=\"token punctuation\">,</span> train_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'g--'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 分割线 左边是训练数据 右边是测试数据的输出</span>\n    plt<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span>loc<span class=\"token operator\">=</span><span class=\"token string\">'best'</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>savefig<span class=\"token punctuation\">(</span><span class=\"token string\">'result.png'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">format</span><span class=\"token operator\">=</span><span class=\"token string\">'png'</span><span class=\"token punctuation\">,</span> dpi<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-06-17 15:51:45", "summary": "目录作者介绍简介简介循环神经网络网络的核心思想一步一步理解代码实现导入相关资源包定义模型结构制作数据集模型训练测试与保存结果实验结果完整代码作者介绍糜红敏，男，西安工程大学电子信息学院，级硕士研究生，"}