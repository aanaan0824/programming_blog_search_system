{"blogid": "121785959", "writerAge": "码龄1年", "writerBlogNum": "3", "writerCollect": "14", "writerComment": "0", "writerFan": "1", "writerGrade": "1级", "writerIntegral": "35", "writerName": "阔耐滴喵星人", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_121785959.jpg", "writerRankTotal": "271520", "writerRankWeekly": "111955", "writerThumb": "5", "writerVisitNum": "6313", "blog_read_count": "1168", "blog_time": "于 2021-12-08 12:34:39 发布", "blog_title": "QT调用C#的Dll", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p style=\"margin-left:.0001pt;text-align:justify;\">1：环境：VS2017  QT 5.12.4</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">（1）说明：Qt是不能直接调用C#生成的dll，需要将C#的编写的dll通过CLR编译成lib</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">（2）检查VS环境是否装好：看下图勾选部分是否安装，没有安装需及时安装，C#这边生成dll,C++这边用来生成lib文件</p>\n<p style=\"margin-left:.0001pt;text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\1e6ddd6d965f4e3599ab02df54db0b89.png\"/></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\08d359e51c1d4723b127249c3454c8fb.png\"/> </p>\n<p> </p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2：编写C#的Dll</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">选择下图所示功能进行编程，实际项目命名需规范对待</p>\n<p style=\"margin-left:.0001pt;text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\a8d4685a5e8845eaa60945c22d138531.png\"/></p>\n<p>3：编写代码后，点击生成，生成解决方案后，在对应的项目文件夹bin/debug里面找到对应的Dll,代码及对应的Dll截图如下图，找到对应的dll后存储到自己找得到的位置，一会儿用<img alt=\"\" src=\"..\\..\\static\\image\\26b7f5f4088444b296fc5edf9bf4425b.png\"/></p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace CSharpDllTest\n{\n    public class TestClass\n    {\n        public int Add_Num(int numberRight,int numberLeft)\n        {\n            int sum = numberRight + numberLeft;\n            return sum;\n        }\n    }\n}\n</code></pre>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\08edb7f554554076a2c33961d6761c0a.png\"/> </p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">4：使用CLR生成Lib</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">创建CLR项目：如下图，选择CLR类库，命名在实际项目中需要规范对待，创建项目后，将刚刚得到的C#版的DLL放进项目文件中，代码中需要using，如下图右所示位置，</p>\n<p style=\"margin-left:.0001pt;text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\ecf14e04c3d34bb5a178f9271e81dea5.png\"/></p>\n<p style=\"text-align:center;\"> <img alt=\"\" src=\"..\\..\\static\\image\\eb9c3257c2fa4b31841a8fc926d972db.png\"/></p>\n<p> </p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">Dll放进项目中后，编写代码，此时代码与C#代码对应处理即可</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">代码如下，编写后点击生成，生成解决方案后，在项目文件夹中的X64/debug文件夹中即可找到对应的lib和dll文件，具体路径如下图，生成后，将dll和lib文件放到自己可以找到的位置，一会儿用，注意，VS中选择的X64环境或者X86环境，需要与QT对应，否则会出问题</p>\n<p style=\"margin-left:.0001pt;text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\e973bc1e21a948228887d5b51da2d4be.png\"/></p>\n<pre><code>#pragma once\n\nusing namespace System;\n#using \"./CSharpDllTest.dll\"\n\nusing namespace CSharpDllTest;\nextern \"C\" _declspec(dllexport) int api_Add(int numberRight,int numberLeft)\n{\n\n\tTestClass classTest;\n\treturn classTest.Add_Num(numberRight, numberLeft);\n}</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\60eab418e824475f9288e2fa2d0e82d2.png\"/> </p>\n<p> </p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">5：QT中使用Lib文件</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">创建QT工程选择对应的X64或者X86即可，此处不截图</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">创建后分别把Lib和Dll文件放到项目文件夹和debug文件夹中，然后引用Lib文件，</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">选择项目，右键添加库，如下图</p>\n<p style=\"margin-left:.0001pt;text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\0509505eae9d42e6b28e8ccd0e6b2a11.png\"/></p>\n<p style=\"margin-left:.0001pt;\"><img alt=\"\" src=\"..\\..\\static\\image\\9e3412e2b94a4666ae6c2114191b5831.png\"/></p>\n<p> </p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">库文件选择后包含路径会自动补充，然后下一步，完成即可，</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">引用Lib文件代码如下</p>\n<p style=\"margin-left:.0001pt;text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\6b6746fd30804a96853bf76bd93eb775.png\"/></p>\n<p> </p>\n<pre><code>#include \"mainwindow.h\"\n#include \"ui_mainwindow.h\"\n#include&lt;QDebug&gt;\nextern \"C\" _declspec(dllexport) int api_Add(int numberRight,int numberLeft);\nMainWindow::MainWindow(QWidget *parent)\n    : QMainWindow(parent)\n    , ui(new Ui::MainWindow)\n{\n    ui-&gt;setupUi(this);\n    int all=api_Add(5,9);\n    qDebug()&lt;&lt;\"All:::::\"&lt;&lt;all&lt;&lt;endl;\n}\n\nMainWindow::~MainWindow()\n{\n    delete ui;\n}\n\n</code></pre>\n<p style=\"margin-left:.0001pt;text-align:justify;\">运行结果如下</p>\n<p style=\"margin-left:.0001pt;text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\e67f508b28e44792935e60d81dad8c18.png\"/></p>\n<p> </p>\n<p>后面如果说接口多了之后，是否考虑在QT里面用一个类去封装这些API</p>\n<p> </p>\n<p></p>\n</div>\n</div>", "first_tag": "C#", "cpp": 1, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-12-08 12:34:39", "summary": "：环境：说明：是不能直接调用生成的，需要将的编写的通过编译成检查环境是否装好：看下图勾选部分是否安装，没有安装需及时安装，这边生成这边用来生成文件：编写的选择下图所示功能进行编程，实际项目命名需规范对"}