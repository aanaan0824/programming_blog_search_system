{"blogid": "124738711", "writerAge": "码龄1年", "writerBlogNum": "40", "writerCollect": "94", "writerComment": "9", "writerFan": "17", "writerGrade": "3级", "writerIntegral": "429", "writerName": "深夜无法入眠的程序猿", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124738711.jpg", "writerRankTotal": "69514", "writerRankWeekly": "84753", "writerThumb": "23", "writerVisitNum": "26752", "blog_read_count": "2769", "blog_time": "于 2022-05-12 20:46:21 发布", "blog_title": "字符串 格式化 String.format()的详细解释", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h3>问题：<br/>         当我们开发的时候，有时候会遇到需要输出一定格式的字符串，在JDK1.5中增加了一个非常有用的静态函数format(String  format, Objece...  argues)，可以将各类数据格式化为字符串并输出。其中format参数指定了输出的格式，是最复杂也是最难掌握的一点，而argues则是一系列等待被格式化的对象。</h3>\n<h3>该函数对c语言中printf函数的用法进行了一定的模仿，因此有c语言基础的人学起来会轻松许多。下面我们着重讨论一下format 参数的格式及含义。</h3>\n<h3></h3>\n<h2>1.<span style=\"color:#fe2c24;\">String.format()  </span>有两种重载方式</h2>\n<ul><li><span style=\"color:#fe2c24;\">format(String format, Object… args) </span>新字符串使用本地语言环境，制定字符串格式和参数生成格式化的新字符串。</li><li><span style=\"color:#fe2c24;\">format(Locale locale, String format, Object… args)</span> 使用指定的语言环境，制定字符串格式和参数生成格式化的字符串。</li><li>例子  </li></ul>\n<pre><code class=\"language-java\">String str = String.format(\"%s今年%d岁。\", \"小李\", 30); \nSystem.out.println(str);</code></pre>\n<h3>   结果为：小李今年30岁。</h3>\n<h2>2.转换符说明</h2>\n<table><thead><tr><th style=\"width:323px;\"></th></tr></thead><tbody><tr><td style=\"width:323px;\">%s      %S            字符串类型</td><td style=\"width:256px;\">String.format(\"%s\", \"学校\");</td><td style=\"width:175px;\">学校</td></tr><tr><td style=\"width:323px;\">%c                   字符类型</td><td style=\"width:256px;\">String.format(\"B的大写是：%c %n\", 'B');</td><td style=\"width:175px;\">B的大写是：B</td></tr><tr><td style=\"width:323px;\">%b  %B               布尔类型</td><td style=\"width:256px;\">String.format(\"结果：%b %n\", \"小\".equal(\"哥\"));</td><td style=\"width:175px;\">结果：false</td></tr><tr><td style=\"width:323px;\">%d         整数类型（十进制）</td><td style=\"width:256px;\">String.format(\"%d\",88);</td><td style=\"width:175px;\">88</td></tr><tr><td style=\"width:323px;\">%x   %X      整数类型（十六进制）</td><td style=\"width:256px;\">FF</td><td style=\"width:175px;\"></td></tr><tr><td style=\"width:323px;\">%o        整数类型（八进制）</td><td style=\"width:256px;\">77</td><td style=\"width:175px;\"></td></tr><tr><td style=\"width:323px;\">%f        浮点类型</td><td style=\"width:256px;\">8.888</td><td style=\"width:175px;\"></td></tr><tr><td style=\"width:323px;\">%a       十六进制浮点类型</td><td style=\"width:256px;\">FF.35AE</td><td style=\"width:175px;\"></td></tr><tr><td style=\"width:323px;\">%e    %E   指数类型</td><td style=\"width:256px;\">9.38e+5</td><td style=\"width:175px;\"></td></tr><tr><td style=\"width:323px;\">%g   %G    通用浮点类型（f和e类型中较短的）</td><td style=\"width:256px;\">不举例(基本用不到)</td><td style=\"width:175px;\"></td></tr><tr><td style=\"width:323px;\">%h   %H    散列码</td><td style=\"width:256px;\">不举例(基本用不到)</td><td style=\"width:175px;\"></td></tr><tr><td style=\"width:323px;\">%%     百分比类型</td><td style=\"width:256px;\">％(%特殊字符%%才能显示%)</td><td style=\"width:175px;\"></td></tr><tr><td style=\"width:323px;\">%n      换行符</td><td style=\"width:256px;\">不举例(基本用不到)</td><td style=\"width:175px;\"></td></tr><tr><td style=\"width:323px;\">%tx     日期与时间类型（x代表不同的日期与时间转换符)</td><td style=\"width:256px;\">不举例(基本用不到)</td><td style=\"width:175px;\"></td></tr></tbody></table>\n<h2> 3.搭配转换符的标志</h2>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\"><tbody><tr><td style=\"width:69px;\">+</td><td style=\"width:261px;\">添加符号</td><td style=\"width:73px;\">(\"%+d\",5) </td><td>+5</td></tr><tr><td style=\"width:69px;\">－</td><td style=\"width:261px;\">左对齐</td><td style=\"width:73px;\"> (\"%-5d\",5)</td><td></td></tr><tr><td style=\"width:69px;\">0</td><td style=\"width:261px;\">数字前面补0</td><td style=\"width:73px;\">(\"%05d\", 55) </td><td>00055</td></tr><tr><td style=\"width:69px;\">空格</td><td style=\"width:261px;\">在整数之前添加指定数量的空格</td><td style=\"width:73px;\">(\"%　5d\", 55)</td><td></td></tr><tr><td style=\"width:69px;\">，</td><td style=\"width:261px;\">以“,”对数字分组</td><td style=\"width:73px;\">(\"%,f\", 5555.55)</td><td>5,555.550000</td></tr><tr><td style=\"width:69px;\">( </td><td style=\"width:261px;\"> 使用括号包含负数</td><td style=\"width:73px;\"></td><td></td></tr><tr><td style=\"width:69px;\"># </td><td style=\"width:261px;\">如果是浮点数则包含小数点，如果是16进制或8进制则添加0x或0</td><td style=\"width:73px;\">(\"%#x\", 99)和(\"%#o\", 99)</td><td> 0x63 和0143</td></tr><tr><td style=\"width:69px;\">&lt; </td><td style=\"width:261px;\">格式化前一个转换符所描述的参数 </td><td style=\"width:73px;\">(\"%f和%&lt;3.2f\", 99.45) </td><td> 99.450000和99.45</td></tr><tr><td style=\"width:69px;\">$</td><td style=\"width:261px;\">被格式化的参数索引  </td><td style=\"width:73px;\">(\"%1$d,%2$s\", 55,\"abc\")  </td><td>55,abc</td></tr></tbody></table>\n<h2>4.日期、时间格式化</h2>\n<p>Y=年；m=月；d=日；H=时；M=分；S=秒；L=毫秒；A=星期几（名称）；B=月份名称；</p>\n<table><thead><tr><th style=\"width:83px;\">标志</th><th style=\"width:209px;\">符号解释</th><th style=\"width:198px;\">例子</th><th style=\"width:199px;\"></th></tr></thead><tbody><tr><td style=\"width:83px;\">c</td><td style=\"width:209px;\">包括全部日期和时间信息</td><td style=\"width:198px;\">星期六 十月 27 14:21:20 CST 2007</td><td style=\"width:199px;\">\"%ta %tb %td %tT %tZ %tY\"</td></tr><tr><td style=\"width:83px;\">F</td><td style=\"width:209px;\">“年-月-日”格式</td><td style=\"width:198px;\">2007-10-27</td><td style=\"width:199px;\">\"%tY-%tm-%td\"</td></tr><tr><td style=\"width:83px;\">D</td><td style=\"width:209px;\">“月/日/年”格式</td><td style=\"width:198px;\">10/27/07</td><td style=\"width:199px;\">\"%tm/%td/%ty\"</td></tr><tr><td style=\"width:83px;\">r</td><td style=\"width:209px;\">“HH:MM:SS PM”格式（12时制）</td><td style=\"width:198px;\">02:25:51 下午</td><td style=\"width:199px;\">\"%tI:%tM:%tS %Tp\"</td></tr><tr><td style=\"width:83px;\">T</td><td style=\"width:209px;\">“HH:MM:SS”格式（24时制）</td><td style=\"width:198px;\">14:28:16</td><td style=\"width:199px;\">\"%tH:%tM:%tS\"</td></tr><tr><td style=\"width:83px;\">R</td><td style=\"width:209px;\">“HH:MM”格式（24时制）</td><td style=\"width:198px;\">14:28</td><td style=\"width:199px;\">\"%tH:%tM\"</td></tr></tbody></table>\n<p><br/>  </p>\n</div>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-05-12 20:46:21", "summary": "问题：当我们开发的时候，有时候会遇到需要输出一定格式的字符串，在中增加了一个非常有用的静态函数，可以将各类数据格式化为字符串并输出。其中参数指定了输出的格式，是最复杂也是最难掌握的一点，而则是一系列等"}