{"blogid": "120597131", "writerAge": "码龄4年", "writerBlogNum": "21", "writerCollect": "553", "writerComment": "172", "writerFan": "71", "writerGrade": "3级", "writerIntegral": "727", "writerName": "无解的菜鸟晖", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_120597131.jpg", "writerRankTotal": "787498", "writerRankWeekly": "87600", "writerThumb": "123", "writerVisitNum": "83665", "blog_read_count": "5876", "blog_time": "于 2021-10-03 21:38:42 发布", "blog_title": "Vue 移动端实现调用相机扫描二维码或条形码", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h2>一、开发前的准备</h2>\n<p>    实现二维码或条形码的扫描识别比较普遍的做法是去<span style=\"color:#fe2c24;\">调用微信 JS-SDK 的扫一扫功能</span>（详见 <a href=\"https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html\" title=\"概述 | 微信开放文档\">概述 | 微信开放文档</a>），或者<span style=\"color:#fe2c24;\">支付宝 H5 开放的API</span>（详见<a href=\"https://myjsapi.alipay.com/alipayjsapi/device/scan/scan.html\" title=\" 支付宝H5开放文档\"> 支付宝H5开放文档</a>）。</p>\n<p>    <span style=\"color:#fe2c24;\">但是这两者都会比较麻烦且有一定的局限性</span>，微信的扫一扫只能在微信里用，而且还需要公众号认证等配置操作。支付宝在内置 App 内可以同时识别二维码和条形码，但外部调用的 API 无法一次性同时识别，只能分开识别。</p>\n<p>    我这里就提供一个<span style=\"color:#fe2c24;\">直接使用的开源库</span>：<strong><a href=\"https://github.com/zxing-js/library\" title=\"https://github.com/zxing-js/library\">https://github.com/zxing-js/library</a></strong>，本人移动端前端开发的框架是 Vue，组件库用的是 Vant，本文方案只要开发时用的电脑具有摄像头就可以实现效果预览。</p>\n<p></p>\n<h2>二、实现效果图</h2>\n<p>这里分享两个在线工具</p>\n<p>1、<a href=\"http://barcode.cnaidc.com/html/BCGcode128b.php\" title=\"免费在线条形码生成器-条码生成制作工具\">免费在线条形码生成器-条码生成制作工具</a></p>\n<p>2、<a href=\"https://cli.im/\" title=\"草料二维码生成器\">草料二维码生成器</a></p>\n<p><img alt=\"\" height=\"360\" src=\"..\\..\\static\\image\\20211003192739465.png\" width=\"437\"/></p>\n<p><img alt=\"\" height=\"344\" src=\"..\\..\\static\\image\\825641ddad844fd5998c043bedc2964f.png\" width=\"534\"/></p>\n<p><img alt=\"\" height=\"182\" src=\"..\\..\\static\\image\\20211003193912428.png\" width=\"465\"/><img alt=\"\" height=\"328\" src=\"..\\..\\static\\image\\6d1377bea32449f68eae305556f4ebd0.png\" width=\"514\"/></p>\n<p></p>\n<p>    可以看到这样操作不用经过任何打包（有的需要打包成 app 才行）、部署（有的需要部署到 https 的服务器才行）、配置（前面说的诸如微信开发的配置等...）。</p>\n<p></p>\n<h2>三、具体操作实现</h2>\n<p>1、安装。</p>\n<pre><code class=\"language-bash\">npm install @zxing/library --save</code></pre>\n<p></p>\n<p> 2、假设场景：页面上有个按钮，点击触发扫码功能 <strong>@click='scanCode()'</strong>，在 <strong>methods</strong> 写入该方法。</p>\n<pre><code class=\"language-javascript\">scanCode() {\n  console.log('浏览器信息', navigator.userAgent);\n  this.$router.push({\n    path: '/scanCodePage'\n  });\n}</code></pre>\n<p>同时在 <strong>vue-router</strong> 写入对应页面的路由。</p>\n<pre><code class=\"language-javascript\">{ \n  title: '扫码页面', \n  name: 'scanCodePage', \n  path: '/scanCodePage', \n  component: () =&gt; import('@/views/scanCodePage.vue') \n}</code></pre>\n<p></p>\n<p>3、扫码页面代码，通过与 <strong>video 标签</strong>结合使用，把以下代码<strong>直接全部拷贝</strong>到新建的一个 <strong>scanCodePage.vue</strong> 文件里使用，读者在<strong>注释的地方自行根据需求</strong>，编写后续的业务代码即可。</p>\n<pre><code class=\"language-javascript\">&lt;template&gt;\n  &lt;div class=\"page-scan\"&gt;\n    &lt;!--返回--&gt;\n    &lt;van-nav-bar title=\"扫描二维码/条形码\" fixed\n      @click-left=\"clickIndexLeft()\"\n      class=\"scan-index-bar\"&gt;\n      &lt;template #left&gt;\n        &lt;van-icon name=\"arrow-left\" size=\"18\" color=\"#fff\"/&gt;\n        &lt;span style=\"color: #fff\"&gt; 取消 &lt;/span&gt;\n      &lt;/template&gt;\n    &lt;/van-nav-bar&gt;\n    &lt;!-- 扫码区域 --&gt;\n    &lt;video ref=\"video\" id=\"video\" class=\"scan-video\" autoplay&gt;&lt;/video&gt;\n    &lt;!-- 提示语 --&gt;\n    &lt;div v-show=\"tipShow\" class=\"scan-tip\"&gt; {<!-- -->{tipMsg}} &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { BrowserMultiFormatReader } from '@zxing/library';\nimport { Dialog, Notify } from 'vant';\n\n  export default {\n    name: 'scanCodePage',\n    data() {\n      return {\n        loadingShow: false,\n        codeReader: null,\n        scanText: '',\n        vin: null,\n        tipMsg: '正在尝试识别....',\n        tipShow: false\n      }\n    },\n    created() {\n      this.codeReader = new BrowserMultiFormatReader();\n      this.openScan();\n    },\n    destroyed(){\n      this.codeReader.reset();\n    },\n    watch: {\n      '$route'(to, from) {\n        if(to.path == '/scanCodePage'){\n          this.codeReader = new BrowserMultiFormatReader();\n          this.openScanTwo();\n        }\n      }\n    },\n    methods: {\n      async openScan() {\n        this.codeReader.getVideoInputDevices().then((videoInputDevices) =&gt; {\n          this.tipShow = true;\n          this.tipMsg = '正在调用摄像头...';\n          console.log('videoInputDevices', videoInputDevices);\n          // 默认获取第一个摄像头设备id\n          let firstDeviceId = videoInputDevices[0].deviceId;\n          // 获取第一个摄像头设备的名称\n          const videoInputDeviceslablestr = JSON.stringify(videoInputDevices[0].label);\n          if (videoInputDevices.length &gt; 1) {\n            // 判断是否后置摄像头\n            if (videoInputDeviceslablestr.indexOf('back') &gt; -1) {\n              firstDeviceId = videoInputDevices[0].deviceId;\n            } else {\n              firstDeviceId = videoInputDevices[1].deviceId;\n            }\n          }\n          this.decodeFromInputVideoFunc(firstDeviceId);\n        }).catch(err =&gt; {\n          this.tipShow = false;\n          console.error(err);\n        });\n      },\n      async openScanTwo() {\n        this.codeReader = await new BrowserMultiFormatReader();\n        this.codeReader.getVideoInputDevices().then((videoInputDevices) =&gt; {\n          this.tipShow = true;\n          this.tipMsg = '正在调用摄像头...';\n          console.log('videoInputDevices', videoInputDevices);\n          // 默认获取第一个摄像头设备id\n          let firstDeviceId = videoInputDevices[0].deviceId;\n          // 获取第一个摄像头设备的名称\n          const videoInputDeviceslablestr = JSON.stringify(videoInputDevices[0].label);\n          if (videoInputDevices.length &gt; 1) {\n            // 判断是否后置摄像头\n            if (videoInputDeviceslablestr.indexOf('back') &gt; -1) {\n              firstDeviceId = videoInputDevices[0].deviceId;\n            } else {\n              firstDeviceId = videoInputDevices[1].deviceId;\n            }\n          }\n          this.decodeFromInputVideoFunc(firstDeviceId);\n        }).catch(err =&gt; {\n          this.tipShow = false;\n          console.error(err);\n        });\n      },\n      decodeFromInputVideoFunc(firstDeviceId) {\n        this.codeReader.reset(); // 重置\n        this.scanText = '';\n        this.codeReader.decodeFromInputVideoDeviceContinuously(firstDeviceId, 'video', (result, err) =&gt; {\n          this.tipMsg = '正在尝试识别...';\n          this.scanText = '';\n          if (result) {\n            console.log('扫描结果', result);\n            this.scanText = result.text;\n            if (this.scanText) {\n              this.tipShow = false;\n              // 这部分接下去的代码根据需要，读者自行编写了\n              // this.$store.commit('app/SET_SCANTEXT', result.text);\n              // console.log('已扫描的小票列表', this.$store.getters.scanTextArr);\n            }\n          }\n          if (err &amp;&amp; !(err)) {\n            this.tipMsg = '识别失败';\n            setTimeout(() =&gt; {\n              this.tipShow = false;\n            }, 2000)\n            console.error(err);\n          }\n        });\n      },\n      clickIndexLeft(){  // 返回上一页\n        this.codeReader = null;\n        this.$destroy();\n        this.$router.back();\n      }\n    }\n  }\n&lt;/script&gt;\n\n&lt;style lang=\"scss\"&gt;\n.scan-index-bar{\n  background-image: linear-gradient( -45deg, #42a5ff ,#59cfff);\n}\n.van-nav-bar__title{\n  color: #fff !important;\n}\n.scan-video{\n  height: 80vh;\n}\n.scan-tip{\n  width: 100vw;\n  text-align: center;\n  margin-bottom: 10vh;\n  color: white;\n  font-size: 5vw;\n}\n.page-scan{\n  overflow-y: hidden;\n  background-color: #363636;\n}\n&lt;/style&gt;</code></pre>\n<p></p>\n<p>    这是我本人在工作学习中做的一些总结，同时也分享出来给需要的小伙伴哈 ~ 供参考学习，有什么建议也欢迎评论留言，转载请注明出处哈，感谢支持！</p>\n</div>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 1, "time": "2021-10-03 21:38:42", "summary": "一、开发前的准备实现二维码或条形码的扫描识别比较普遍的做法是去调用微信的扫一扫功能详见概述微信开放文档概述微信开放文档，或者支付宝开放的详见支付宝开放文档支付宝开放文档。但是这两者都会比较麻烦且有一定"}