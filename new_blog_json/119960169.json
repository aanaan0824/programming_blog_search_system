{"blogid": "119960169", "writerAge": "码龄4年", "writerBlogNum": "129", "writerCollect": "823", "writerComment": "291", "writerFan": "266", "writerGrade": "5级", "writerIntegral": "3014", "writerName": "韦_恩", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_119960169.jpg", "writerRankTotal": "7673", "writerRankWeekly": "58027", "writerThumb": "440", "writerVisitNum": "466020", "blog_read_count": "5839", "blog_time": "于 2021-08-27 21:09:43 发布", "blog_title": "C#如何读取文件内容？（FileStream与StreamReader区别）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p> 在C#中读取文件内容，有两个类可以做到，一个是<strong>StreamReader</strong>类，一个是<strong>FileStream</strong>类。那么究竟如何实现？以及他们两个有什么区别？在今后应用中应该使用哪一个？别着急，我一个个来说！</p>\n<hr/>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"1.%E5%BC%80%E9%97%A8%E8%A7%81%E5%B1%B1%E8%B0%88%E5%8C%BA%E5%88%AB-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E5%BC%80%E9%97%A8%E8%A7%81%E5%B1%B1%E8%B0%88%E5%8C%BA%E5%88%AB\">1.开门见山谈区别</a></p>\n<p id=\"2.FileStream-toc\" style=\"margin-left:40px;\"><a href=\"#2.FileStream\">2.FileStream</a></p>\n<p id=\"3.StreamReader-toc\" style=\"margin-left:40px;\"><a href=\"#3.StreamReader\">3.StreamReader</a></p>\n<p id=\"4.%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-toc\" style=\"margin-left:40px;\"><a href=\"#4.%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\">4.注意事项</a></p>\n<p id=\"4.1.%E5%8F%8A%E6%97%B6%E9%87%8A%E6%94%BE-toc\" style=\"margin-left:80px;\"><a href=\"#4.1.%E5%8F%8A%E6%97%B6%E9%87%8A%E6%94%BE\">4.1.及时释放</a></p>\n<p id=\"%C2%A04.2.%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A04.2.%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C\"> 4.2.异步操作</a></p>\n<p id=\"4.3%E6%B1%89%E5%AD%97%E4%B9%B1%E7%A0%81-toc\" style=\"margin-left:80px;\"><a href=\"#4.3%E6%B1%89%E5%AD%97%E4%B9%B1%E7%A0%81\">4.3汉字乱码</a></p>\n<p id=\"5.%E6%80%BB%E7%BB%93%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#5.%E6%80%BB%E7%BB%93%EF%BC%9A\">5.总结：</a></p>\n<p id=\"6.%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#6.%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE%EF%BC%9A\">6.参考文献：</a></p>\n<hr id=\"hr-toc\"/>\n<h2 id=\"1.%E5%BC%80%E9%97%A8%E8%A7%81%E5%B1%B1%E8%B0%88%E5%8C%BA%E5%88%AB\">1.开门见山谈区别</h2>\n<p>FileStream类提供了在文件中读写字节的方法，但经常使用StreamReader或 StreamWriter执行这些功能。<span style=\"color:#be191c;\"><strong>这是因为FileStream类操作的是字节和字节数组，而StreamReader类操作的是字符数据</strong></span>。因此FileStream类既可以对文本文件进行读写也可以对多媒体文件进行读写，多用于对大文件进行读写，且它对文件可进行分步读写，减小内存压力。而StreamReader和StreamWriter类多用于对小文件读写。</p>\n<blockquote>\n<p><span style=\"color:#be191c;\"><strong>FileStream操作字节，更适合大文件。</strong></span></p>\n<p><span style=\"color:#be191c;\"><strong>StreamReader操作字符，更适合小文件。</strong></span></p>\n</blockquote>\n<h2 id=\"2.FileStream\">2.FileStream</h2>\n<p><img alt=\"\" height=\"70\" src=\"..\\..\\static\\image\\20210827204127271.png\" width=\"812\"/></p>\n<p> 用FileStream操作文件的方法代码如下：</p>\n<pre><code class=\"language-cs\">using System;\nusing System.IO;\nusing System.Text;\n\nclass Test\n{\n\n    public static void Main()\n    {\n        string path = @\"c:\\temp\\MyTest.txt\";\n\n        //如果文件存在就删除\n        if (File.Exists(path))\n        {\n            File.Delete(path);\n        }\n\n        //创建新文件\n        using (FileStream fs = File.Create(path))\n        {\n            AddText(fs, \"This is some text\");\n            AddText(fs, \"This is some more text,\");\n            AddText(fs, \"\\r\\nand this is on a new line\");\n            AddText(fs, \"\\r\\n\\r\\nThe following is a subset of characters:\\r\\n\");\n\n            for (int i=1;i &lt; 120;i++)\n            {\n                AddText(fs, Convert.ToChar(i).ToString());\n            }\n        }\n\n        //读取文件内容\n        using (FileStream fs = File.OpenRead(path))\n        {\n            byte[] b = new byte[1024];\n            UTF8Encoding temp = new UTF8Encoding(true);\n            while (fs.Read(b,0,b.Length) &gt; 0)\n            {\n                Console.WriteLine(temp.GetString(b));\n            }\n        }\n    }\n    //添加文本内容的方法\n    private static void AddText(FileStream fs, string value)\n    {\n        byte[] info = new UTF8Encoding(true).GetBytes(value);\n        fs.Write(info, 0, info.Length);\n    }\n}</code></pre>\n<h2 id=\"3.StreamReader\">3.StreamReader</h2>\n<p><img alt=\"\" height=\"58\" src=\"..\\..\\static\\image\\20210827204306377.png\" width=\"926\"/></p>\n<p> 用StreamReader操作文件的方法代码如下：</p>\n<pre><code class=\"language-cs\">using System;\nusing System.IO;\n\nclass Test\n{\n    public static void Main()\n    {\n        try\n        {\n            // 读取文本文件\n            using (StreamReader sr = new StreamReader(\"TestFile.txt\"))\n            {\n                string line;\n                // ReadLine()一行一行的循环读取\n                //当然可以直接ReadToEnd()读到最后\n                while ((line = sr.ReadLine()) != null)\n                {\n                    Console.WriteLine(line);\n                }\n            }\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n}</code></pre>\n<h2 id=\"4.%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\">4.注意事项</h2>\n<h3 id=\"4.1.%E5%8F%8A%E6%97%B6%E9%87%8A%E6%94%BE\">4.1.及时释放</h3>\n<p>这两种类型使用完毕后都需要对其进行释放！具体说明看下图：</p>\n<p><img alt=\"\" height=\"358\" src=\"..\\..\\static\\image\\20210827204737812.png\" width=\"1200\"/></p>\n<h3 id=\"%C2%A04.2.%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C\"> 4.2.异步操作</h3>\n<p>如果读取的文件内容过大，时间过长，导致界面卡死，那么可以采用两个办法：</p>\n<p>①开线程</p>\n<p>②利用异步</p>\n<p>具体请看文末参考文献。</p>\n<h3 id=\"4.3%E6%B1%89%E5%AD%97%E4%B9%B1%E7%A0%81\">4.3汉字乱码</h3>\n<blockquote>\n<p><span style=\"color:#fe2c24;\"><strong>编码：gb2312可以保证汉字不出现乱码：</strong></span></p>\n</blockquote>\n<p>请看我的使用：</p>\n<p>（StreamReader）</p>\n<p><img alt=\"\" height=\"580\" src=\"..\\..\\static\\image\\2021082721010833.png\" width=\"1200\"/></p>\n<p>（FileStream）</p>\n<p><img alt=\"\" height=\"354\" src=\"..\\..\\static\\image\\20210827210248705.png\" width=\"1158\"/></p>\n<p> </p>\n<h2 id=\"5.%E6%80%BB%E7%BB%93%EF%BC%9A\">5.总结：</h2>\n<p>我们正常操作文件的时候，比如office文件或者txt文本文件，那么使用相对简便的StreamReader就足够了。如果读取音视频文件，那么就要考虑FileStream了！</p>\n<h2 id=\"6.%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE%EF%BC%9A\">6.参考文献：</h2>\n<p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-5.0\">FileStream 类 (System.IO) | Microsoft Docs</a></p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.io.streamreader?view=net-5.0\">StreamReader 类 (System.IO) | Microsoft Docs</a></p>\n<p><a href=\"https://blog.csdn.net/Hellen0708/article/details/86234801\">https://blog.csdn.net/Hellen0708/article/details/86234801</a></p>\n<p></p>\n</div>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-08-27 21:09:43", "summary": "在中读取文件内容，有两个类可以做到，一个是类，一个是类。那么究竟如何实现？以及他们两个有什么区别？在今后应用中应该使用哪一个？别着急，我一个个来说！目录开门见山谈区别注意事项及时释放异步操作汉字乱码总"}