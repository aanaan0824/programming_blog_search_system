{"blogid": "126333091", "writerAge": "码龄100天", "writerBlogNum": "124", "writerCollect": "1173", "writerComment": "1767", "writerFan": "1158", "writerGrade": "6级", "writerIntegral": "5046", "writerName": "林有酒", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126333091.jpg", "writerRankTotal": "3492", "writerRankWeekly": "55", "writerThumb": "1199", "writerVisitNum": "21234", "blog_read_count": "251", "blog_time": "于 2022-08-21 09:00:00 发布", "blog_title": "【TypeScript】类的基本使用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#TypeScript_1\">TypeScript类的基本使用</a></li><li><ul><li><a href=\"#_3\">🍟类的介绍</a></li><li><a href=\"#_25\">🍟类的定义</a></li><li><a href=\"#_106\">🍟类的继承</a></li><li><a href=\"#_251\">🍟类成员的修饰符</a></li><li><a href=\"#_310\">🍟只读属性</a></li><li><a href=\"#getterssetters_343\">🍟getters/setters</a></li><li><a href=\"#_375\">🍟类的静态成员</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"TypeScript_1\"></a>TypeScript类的基本使用</h2>\n<h3><a id=\"_3\"></a>🍟类的介绍</h3>\n<p>在早期的JavaScript开发中（ ES5）我们需要通过函数和原型链来实现类和继承，从ES6开始，引入了class关键字，可以更加方便的定义和使用类。</p>\n<p><strong>TypeScript作为JavaScript的超集，也是支持使用class关键字的，并且还可以对类的属性和方法等进行静态类型检测</strong>。</p>\n<p>实际上在JavaScript的开发过程中，我们<strong>更加习惯于函数式编程</strong>：</p>\n<blockquote>\n<p>比如React开发中，目前更多使用的函数组件以及结合Hook的开发模式；</p>\n<p>比如在Vue3开发中，目前也更加推崇使用 Composition API；</p>\n</blockquote>\n<p><strong>但是在封装某些业务的时候，类具有更强大封装性，所以我们也需要掌握它们</strong>。</p>\n<p>类的定义我们通常会使用class关键字：</p>\n<blockquote>\n<p>在面向对象的世界里，任何事物都可以使用类的结构来描述；</p>\n<p>类中包含特有的属性和方法；</p>\n</blockquote>\n<hr/>\n<h3><a id=\"_25\"></a>🍟类的定义</h3>\n<p><strong>例如我们使用class关键字来定义一个Person类</strong> ;</p>\n<ul><li>我们可以声明一些类的属性：在类的内部声明类的属性以及对应的类型</li></ul>\n<blockquote>\n<p>类中如果类型没有声明，那么它们默认是any的；</p>\n<p>我们也可以给属性设置初始化值；</p>\n</blockquote>\n<p>在默认的strictPropertyInitialization模式下面我们的属性是必须初始化的</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>如果没有初始化，那么编译时就会报错；</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2817608fd4484dde97662ca3ef3b4802.png\"/></p>\n<blockquote>\n<p>如果我们在strictPropertyInitialization模式下确实不希望给属性初始化，可以使用 name!: string语法；</p>\n</blockquote>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n  name<span class=\"token operator\">!</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">!</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>类可以有自己的构造函数constructor，当我们通过new关键字创建一个实例时，构造函数会被调用</strong>；</p>\n<blockquote>\n<p>构造函数不需要返回任何值，默认返回当前创建出来的实例；</p>\n<p>我们也可以使用构造函数constructor对属性进行初始化</p>\n</blockquote>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>类中可以有自己的函数，定义的函数称之为方法</strong>；</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">eating</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"is eating\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">running</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"is running\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 测试</span>\n<span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chenyq\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span><span class=\"token function\">eating</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span><span class=\"token function\">running</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<hr/>\n<h3><a id=\"_106\"></a>🍟类的继承</h3>\n<p><strong>面向对象的其中一大特性就是继承，继承不仅仅可以减少我们的代码量，也是多态的使用前提</strong>。</p>\n<p><strong>我们使用<code>extends关键字</code>来实现继承，子类中使用super来访问父类</strong>。</p>\n<p>我们来看一下Student类和Teacher类继承自Person类：</p>\n<blockquote>\n<p>Student类和Teacher类可以有自己的属性和方法，并且会继承Person的属性和方法；</p>\n</blockquote>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token function\">eating</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eating\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n  score<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  \n  <span class=\"token function\">studying</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"studying\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n  <span class=\"token function\">teaching</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"teaching\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 测试</span>\n<span class=\"token keyword\">const</span> stu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nstu<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"chenyq\"</span>\nstu<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\nstu<span class=\"token punctuation\">.</span><span class=\"token function\">eating</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nstu<span class=\"token punctuation\">.</span><span class=\"token function\">studying</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> tea <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Teacher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntea<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"kaisa\"</span>\ntea<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tea<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tea<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\ntea<span class=\"token punctuation\">.</span><span class=\"token function\">eating</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntea<span class=\"token punctuation\">.</span><span class=\"token function\">teaching</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>但是目前这种做法我们还需要在实例中对name, age属性赋值, 这种方式会很麻烦, 我们希望创建对象实例的时候就可以进行初始化</strong></p>\n<blockquote>\n<p>在构造函数中，我们可以通过super()方法, 来调用父类的构造方法，对父类中的属性进行初始化；</p>\n</blockquote>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n\n  <span class=\"token comment\">// 父类构造器</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">eating</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eating\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n  score<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> score<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 调用父类构造器</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> score\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">studying</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"studying\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 测试</span>\n<span class=\"token keyword\">const</span> stu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chenyq\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">110</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">)</span>\nstu<span class=\"token punctuation\">.</span><span class=\"token function\">eating</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nstu<span class=\"token punctuation\">.</span><span class=\"token function\">studying</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>目前我们调用的eating方法, 是由父类Person继承的, 当我们Student子类对父类方法不满意时, 我们可以重写</strong></p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n  score<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> score<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 调用父类构造器</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> score\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 重写父类方法</span>\n  <span class=\"token function\">eating</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"student eating\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">studying</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"studying\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>如果我们重写子类eating方法时, 又想让父类的eating方法也执行一次, 可以通过super调用</strong></p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n  score<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> score<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 调用父类构造器</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> score\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 重写父类方法</span>\n  <span class=\"token function\">eating</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 子类中是由super, 再让父类的方法也执行一次</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">eating</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 重写的部分</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"student eating\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">studying</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"studying\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_251\"></a>🍟类成员的修饰符</h3>\n<p><strong>在TypeScript中，类的属性和方法支持三种修饰符：<code>public、 private、 protected</code></strong></p>\n<ul><li><code>public修饰符</code>: 是在任何地方可见、公有的属性或方法，默认编写的属性就是public的；</li></ul>\n<blockquote>\n<p>例如下面代码中, 属性默认的修饰符是public, 因此可在任何地方访问</p>\n</blockquote>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 测试</span>\n<span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 可以在任何地方访问类中的额name属性</span>\np<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"aaa\"</span>\n</code></pre>\n<ul><li><code>private修饰符</code>: 是仅在同一类中可见、私有的属性或方法；</li></ul>\n<blockquote>\n<p>private修饰的属性或方法, 只能在同一类中访问, 外部访问就会报错</p>\n</blockquote>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">private</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span>\n\n  <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 测试</span>\n<span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// p.name // 外部无法访问</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul><li><code>protected修饰符</code>: 是仅在类自身及子类中可见、受保护的属性或方法；</li></ul>\n<blockquote>\n<p>protected修饰符除自身类中可以访问之外, 子类中也可以访问, 外部同样无法访问到</p>\n</blockquote>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">protected</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 子类中也可以访问到protected</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 测试</span>\n<span class=\"token keyword\">const</span> stu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"_310\"></a>🍟只读属性</h3>\n<blockquote>\n<p>readonly准确的说也是一个修饰符, 使用readonly修饰符修饰的属性是一个只读属性</p>\n</blockquote>\n<p><strong>如果有一个属性我们不希望外界可以任意的修改，只希望确定值后直接使用，那么可以使用readonly修饰符</strong>：</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">readonly</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"aaa\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 测试</span>\n<span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// p.name = \"bbb\" // 只能读, 不能修改</span>\n</code></pre>\n<p><strong>但是只读属性是可以在constructor构造器中赋值的, 赋值之后同样不可修改, 演示如下</strong></p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">readonly</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  \n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 测试</span>\n<span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"getterssetters_343\"></a>🍟getters/setters</h3>\n<p>在前面一些私有属性我们是不能直接访问的，或者某些属性我们想要监听它的获取(getter)和设置(setter)的过程， 这个时候我们可以使用<strong>访问器</strong>。</p>\n<blockquote>\n<p>访问器的定义是类似一个函数的形式, 而调用又和一般函数不一样, 类似于属性的方式</p>\n</blockquote>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">private</span> _name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_name <span class=\"token operator\">=</span> name\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 访问器 setter/getter定义方式</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span>newName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_name <span class=\"token operator\">=</span> newName\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">get</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_name\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 测试</span>\n<span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 访问器的访问方式</span>\np<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"aaa\"</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n</code></pre>\n<hr/>\n<h3><a id=\"_375\"></a>🍟类的静态成员</h3>\n<p><strong>面我们在类中定义成员的属性和方法都属于对象实例的, 但是在开发中, 我们有时候也需要定义类级别的成员和方法(也就是类属性、类方法)</strong>。</p>\n<p><strong>在TypeScript中通过<code>关键字static</code>来定义</strong>：</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 定义类的属性</span>\n  <span class=\"token keyword\">static</span> time<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"20:00\"</span>\n\n  <span class=\"token comment\">// 定义类方法</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">studying</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"去上课学习\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 测试</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Student<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">)</span>\nStudent<span class=\"token punctuation\">.</span><span class=\"token function\">studying</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-08-21 09:00:00", "summary": "文章目录类的基本使用类的介绍类的定义类的继承类成员的修饰符只读属性类的静态成员类的基本使用类的介绍在早期的开发中我们需要通过函数和原型链来实现类和继承，从开始，引入了关键字，可以更加方便的定义和使用类"}