{"blogid": "122795215", "writerAge": "码龄8年", "writerBlogNum": "249", "writerCollect": "1269", "writerComment": "225", "writerFan": "267", "writerGrade": "6级", "writerIntegral": "5922", "writerName": "咲奈", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122795215.jpg", "writerRankTotal": "2905", "writerRankWeekly": "13393", "writerThumb": "455", "writerVisitNum": "684776", "blog_read_count": "9352", "blog_time": "于 2022-02-06 04:18:49 发布", "blog_title": "聊聊vscode配置settings.json知其所以然（附大量配置）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h3><a id=\"_0\"></a>前言</h3>\n<p>vscode 的配置 <code>settings.json</code> 是一个老生常谈的话题，随着时间的流逝我们可能会很高频的改动他，但我们应该极力避免一个问题：</p>\n<blockquote>\n<p>⚠️ 配了某项但是不知道他的作用 ⚠️</p>\n</blockquote>\n<p>其实就是一个 <strong>知其所以然</strong> 的问题。</p>\n<p>籍此话题，本文将细致的分析我的 <code>settings.json</code> ，希冀可以给读者带来一些帮助。</p>\n<h3><a id=\"_10\"></a>正文</h3>\n<p>以下部分插件的配置来自于：</p>\n<p><a href=\"https://blog.csdn.net/qq_21567385/article/details/119968366\">《 前端web开发高效vscode插件分享（辩证的海量实战检验）》</a></p>\n<p>中提到过的插件。</p>\n<h4><a id=\"_18\"></a>自动保存</h4>\n<pre><code class=\"prism language-js\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 自动保存</span>\n  <span class=\"token string\">\"files.autoSave\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"afterDelay\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>使用 vscode 这里强烈建议开启自动保存，因为闪电编码容不得手动 save ，同时要具备一遍成功的 code style 。</p>\n<h4><a id=\"_29\"></a>字体</h4>\n<pre><code class=\"prism language-js\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 字号</span>\n  <span class=\"token string\">\"editor.fontSize\"</span><span class=\"token operator\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 字体  中文  日本語　にほんご</span>\n  <span class=\"token string\">\"editor.fontFamily\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"'JetBrains Mono NL','等线'\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>对于字号，通常屏幕推荐使用 <code>13</code> 码，不会特别大，展示信息量也足够。</p>\n<p>字体推荐方面，英文推荐使用 JB 全家桶的官方 <code>JetBrains Mono</code> 系列的非连体字体，也就是 <code>JetBrains Mono NL</code> ，你可以在 <a href=\"https://www.jetbrains.com/zh-cn/lp/mono/\">jetbrains mono</a> 下载并全部安装该字体，即可马上使用。对于逆天的隔离开发场景，请参考下文进行配置字体：</p>\n<p><a href=\"https://blog.csdn.net/qq_21567385/article/details/109590166\">《 vscode 不安装字体使用本地/网络字体文件更改字体方法（没有管理员权限）》</a></p>\n<p>中文方面推荐使用 <code>等线</code> ，该字体对 <strong>中/日</strong> 文字均可以提供一个很平滑的体感，不会有棱角情况。</p>\n<h4><a id=\"settings_sync_48\"></a>settings sync</h4>\n<pre><code class=\"prism language-js\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// sync git同步</span>\n  <span class=\"token string\">\"sync.gist\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"......\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"sync.autoUpload\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"sync.autoDownload\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>早期 vscode 的 settings 推荐使用 <a href=\"https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync\">Settings Sync</a> 插件同步到 github gist 上，虽然后期 ms 收购 github 后有财力支持了 vscode 内同步，但并不是很好用，其次尽量不要做单点容灾。</p>\n<p>为了保证足够的安全，我还是常用 Settings Sync 做手动 sync 容灾的（如上所示，关闭了自动上传和下载，全部手动使用 <code>cmd + shift + p</code> 选择 <code>Sync: 更新/上传配置</code> 命令进行手动同步）。</p>\n<p>如果要使用，安装该插件后，根据提示同意授权 github gist 访问即可。</p>\n<h4><a id=\"_65\"></a>代码提示</h4>\n<pre><code class=\"prism language-js\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// code snippet</span>\n  <span class=\"token string\">\"editor.suggestSelection\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"recentlyUsedByPrefix\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"vsintellicode.modify.editor.suggestSelection\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"automaticallyOverrodeDefaultValue\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这里就不做赘述，我们的策略是：</p>\n<ol><li> <p><code>recentlyUsedByPrefix</code> ：按使用过的 prefix 前缀优先匹配，方便选择我们的惯用项。</p> </li><li> <p><code>automaticallyOverrodeDefaultValue</code> ：自动覆盖提示的优先默认值，也是为了保持惯用优先。</p> </li></ol>\n<h4><a id=\"_81\"></a>新开窗口</h4>\n<pre><code class=\"prism language-js\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 新开窗口</span>\n  <span class=\"token string\">\"workbench.startupEditor\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"newUntitledFile\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"workbench.editor.enablePreview\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>vscode 的默认策略是 <strong>新窗口默认覆盖当前窗口</strong> + <strong>默认预览状态打开文件</strong> ，这会造成在多文件间切换修改不便，使用双击打开不符合惯用习惯等问题。</p>\n<p>所以我们通过 <code>newUntitledFile</code> 持续保持新开文件一定是一个独立的新窗口，搭配 <code>enablePreview: false</code> 取消预览模式，保证编辑模式稳定。</p>\n<h4><a id=\"_95\"></a>图标系列</h4>\n<pre><code class=\"prism language-js\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 开启 material icons</span>\n  <span class=\"token string\">\"workbench.iconTheme\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"material-icon-theme\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我喜欢使用的 <strong>文件/文件夹</strong> icons 图标是 <a href=\"https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme\">Material Icon Theme</a> ，这一款插件内置大量的图标，而且涵盖了超多工具（如 <code>commitlint</code> / <code>lerna</code> 等）的配置文件 icon，使用起来特别舒爽。</p>\n<h4><a id=\"_107\"></a>文件层次</h4>\n<pre><code class=\"prism language-js\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 文件夹紧凑模式显示</span>\n  <span class=\"token string\">\"explorer.compactFolders\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>默认情况下，vscode 和 github 保持一致，即当一个文件夹下只有一个文件夹时，会略过中间部分的文件夹，将显示缩略为一行（这在 java 等面向对象的文件层次结构中格外有用），但对于 FE 场景，不太需要省略，缩略反而会影响项目架构的布局，所以这里建议将文件夹缩略关闭。</p>\n<h4><a id=\"_118\"></a>文件结尾</h4>\n<pre><code class=\"prism language-js\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 默认 lf 结尾</span>\n  <span class=\"token string\">\"files.eol\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这是一个老生常谈的经典问题，首先我们明确两个点：</p>\n<ol><li> <p><code>linux</code> / <code>mac</code> / <code>win</code> 上的文件结尾符不一样</p> </li><li> <p>Git 对于不同的结尾符，在不同平台上可能会引发不一致问题</p> </li></ol>\n<p>通常情况下，我们会使用工作区格式 <code>.editorconfig</code> 搭配 <a href=\"https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig\">EditorConfig for VS Code</a> 插件解这个问题，统一将其指定为 linux 结尾符 <code>lf</code> ：</p>\n<pre><code class=\"prism language-yml\"><span class=\"token comment\"># .editorconfig</span>\nroot = true\n\n<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>\nend_of_line = lf\n</code></pre>\n<p>但对于没配置 <code>.editorconfig</code> 的工作区我们束手无策，所以我们要从根本上解决该问题，最好的办法即从 vscode 上就锁死 <code>lf</code> 结尾。</p>\n<h4><a id=\"Git_scm_145\"></a>Git scm</h4>\n<pre><code class=\"prism language-js\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// git</span>\n  <span class=\"token string\">\"git.enableSmartCommit\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>开启智能 commit，这对于使用 scm gui 面板大有帮助，可以帮助我们在没 add 到暂存区时，使用 <code>cmd + enter</code> 即自动 add 并 commit 所有 change 。</p>\n<p>注：如果你不是 vscode 可视化 Git gui 使用者，无需配置该项，但建议简单操作都使用 vscode 原生 gui，这在 check change 时格外方便，且可以十分灵活的应对大部分基本场景（ <code>push</code> / <code>merge</code> 等）</p>\n<h4><a id=\"vscode_update_158\"></a>vscode update</h4>\n<pre><code class=\"prism language-js\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// vscode update tips</span>\n  <span class=\"token string\">\"update.mode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>关闭 vscode 自动更新提示，我们定期手动升级即可，注意全面的了解 changelog 以便即时享用新特性。</p>\n<h4><a id=\"_169\"></a>删除确认</h4>\n<pre><code class=\"prism language-js\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// delete confirm</span>\n  <span class=\"token string\">\"explorer.confirmDelete\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>灵活的开发并不需要删除二次确认，因为我们希望丝滑无缝操作，同时你也可以使用 <code>cmd + z</code> 撤销掉删除行为。</p>\n<h4><a id=\"_180\"></a>终端行为</h4>\n<pre><code class=\"prism language-js\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// Internal terminal</span>\n  <span class=\"token string\">\"code-runner.runInTerminal\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"code-runner.fileDirectoryAsCwd\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>通过 code runner 插件来使得每次打开终端都在当前选中的文件夹位置，这需要一些配置，详见：</p>\n<p><a href=\"https://blog.csdn.net/qq_21567385/article/details/115683322\">《 vscode 快捷键快速打开终端到当前目录打开的文件位置 》</a></p>\n<h4><a id=\"vscode_extension_194\"></a>vscode extension</h4>\n<pre><code class=\"prism language-js\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// vscode Suggested expansion</span>\n  <span class=\"token string\">\"extensions.ignoreRecommendations\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// extension update</span>\n  <span class=\"token string\">\"extensions.autoUpdate\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"onlyEnabledExtensions\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>对于 vscode 插件行为，我们进行几个配置：</p>\n<ol><li> <p>关闭 vscode 推荐插件的行为。作为成熟的开发者应该理解自己在做什么，知道自己需要什么、不需要什么，所以我们不需要 “初级” 的提示。</p> </li><li> <p>只有已启用的插件才开启自动 update 更新功能，防止禁用的插件还在后台更新浪费资源。</p> </li></ol>\n<h4><a id=\"_211\"></a>翻译插件</h4>\n<pre><code class=\"prism language-js\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// Google Translate plugin configuration</span>\n  <span class=\"token string\">\"googleTranslateExt.replaceText\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"commentTranslate.targetLanguage\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"zh-CN\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// translation</span>\n  <span class=\"token string\">\"varTranslation.translationEngine\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"google\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>翻译插件的选择上，这里推荐同时使用三款，详见：</p>\n<p><a href=\"https://blog.csdn.net/qq_21567385/article/details/106775038\">《 vscode 翻译插件最佳搭配、翻译变量、划词翻译、中译英（提高生产效率） 》</a></p>\n<p>同时，我们进行如下配置：</p>\n<ol><li> <p><code>googleTranslateExt.replaceText</code> ：打开翻译替换，使得 <a href=\"https://marketplace.visualstudio.com/items?itemName=benshabatnoam.google-translate-ext\">Google Translate</a> 插件可以将我们的中文选区覆盖为英文。（当然，我更推荐 deepl 的翻译）</p> </li><li> <p><code>commentTranslate.targetLanguage</code> ：指定 <a href=\"https://marketplace.visualstudio.com/items?itemName=intellsmi.comment-translate\">Comment Translate</a> 插件的翻译语言对象为中文，方便我们 hover 查看注释的中文翻译。</p> </li><li> <p><code>varTranslation.translationEngine</code> ：指定 <a href=\"https://marketplace.visualstudio.com/items?itemName=svenzhao.var-translation\">驼峰翻译助手</a> 的翻译 api 走 google ，根据你的网络情况，建议选择自己网络最好的翻译来源（当然翻译质量也大不相同）。</p> </li></ol>\n<h4><a id=\"_236\"></a>文件格式化</h4>\n<pre><code class=\"prism language-js\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 默认格式化方式，统一为 prettier</span>\n  <span class=\"token string\">\"editor.defaultFormatter\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"esbenp.prettier-vscode\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// prettier global config</span>\n  <span class=\"token string\">\"prettier.semi\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"prettier.printWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"prettier.singleQuote\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>早期百花齐放，我们还需要 <code>Beautify</code> / <code>Beautify css</code> 等插件根据不同文件配置不同的格式化器，但当下 prettier 已发展的十分成熟，prettier 支持的文件格式就使用 prettier 进行最佳实践的格式化，所以我们配置默认的格式化行为使用 prettier 即可，这可以帮我们省去很多针对不同文件的格式化配置。</p>\n<p>需要注意的是，prettier 默认配置并非全部都为最佳实践，这里推荐将全局默认行为也配置上，这样在任意文件都可以享受到最佳的格式化行为。</p>\n<h4><a id=\"eslint_253\"></a>eslint</h4>\n<pre><code class=\"prism language-js\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// eslint config</span>\n  <span class=\"token string\">\"editor.codeActionsOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string\">\"source.fixAll.eslint\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// eslint 自动识别工作区</span>\n  <span class=\"token string\">\"eslint.workingDirectories\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token string\">\"mode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"auto\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>对于 eslint 的配置都需要安装 eslint 的插件（ <a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\">ESLint</a> ），然后将 <code>cmd + s</code> 保存自动修复打开即可（ <code>source.fixAll.eslint</code> ），方便我们随时手动格式化代码。</p>\n<p>同时在 monorepo 场景，eslint 插件往往会在顶层寻找 eslintrc 配置文件，忽略了单 project 的文件夹 eslint 配置，所以我们需要打开 <code>auto</code> 自动识别模式，来更好的应对 monorepo 场景。</p>\n<h4><a id=\"Vue_270\"></a>Vue</h4>\n<pre><code class=\"prism language-js\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 防止 vetur 报错</span>\n  <span class=\"token string\">\"vetur.validation.template\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// \"vetur.validation.script\": false,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在 vue 2 系开发时，使用 vetur 进行支持，为了防止 <code>template</code> 解析报错，我们需要关掉对应的校验行为，这也是老生常谈。</p>\n<p>根据情况，你可能还需要关掉 <code>script</code> 区的校验行为。</p>\n<h4><a id=\"svg_284\"></a>svg</h4>\n<pre><code class=\"prism language-js\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// svg preview config</span>\n  <span class=\"token string\">\"svg.preview.mode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"svg\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>预览 svg 时直接查看源码，而不是预览图像，这方便于我们进行修改颜色等行为。</p>\n<p>在预览时，建议你使用一款插件来支持 svg preview 。</p>\n<h4><a id=\"liveserver_297\"></a>live-server</h4>\n<pre><code class=\"prism language-js\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// liveserver 关闭开启服务提示</span>\n  <span class=\"token string\">\"liveServer.settings.donotShowInfoMsg\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>经常需要本地起 server 时，往往会用到 <a href=\"https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer\">Live Server</a> 插件，该插件在启动 server 后会有一个启动 port 的提示，每次都需要手动关掉，对于经常使用该插件的开发者，可以省略这一步浪费时间的行为。</p>\n<h4><a id=\"code_diff_308\"></a>code diff</h4>\n<pre><code class=\"prism language-js\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// diff</span>\n  <span class=\"token string\">\"diffEditor.ignoreTrimWhitespace\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>vscode 的 diff 行为默认会忽略尾部空字符，为了更精准的控制文件尾，我们需要更加敏感，所以关闭忽略行为。</p>\n<h4><a id=\"_319\"></a>彩色括号/导轨</h4>\n<pre><code class=\"prism language-js\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 原生复现 彩色括号</span>\n  <span class=\"token string\">\"workbench.colorCustomizations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string\">\"editorBracketHighlight.foreground1\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#ffd700\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"editorBracketPairGuide.activeBackground1\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#ffd7007f\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"editorBracketHighlight.foreground2\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#da70d6\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"editorBracketPairGuide.activeBackground2\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#da70d67f\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"editorBracketHighlight.foreground3\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#87cefa\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"editorBracketPairGuide.activeBackground3\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#87cefa7f\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"editorBracketHighlight.foreground4\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#ffd700\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"editorBracketPairGuide.activeBackground4\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#ffd7007f\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"editorBracketHighlight.foreground5\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#da70d6\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"editorBracketPairGuide.activeBackground5\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#da70d67f\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"editorBracketHighlight.foreground6\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#87cefa\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"editorBracketPairGuide.activeBackground6\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#87cefa7f\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"editorBracketHighlight.unexpectedBracket.foreground\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#ff0000\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"editor.bracketPairColorization.enabled\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"editor.guides.bracketPairs\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"active\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>由于 vscode 自 v1.60 开始原生支持彩色括号和导轨，且性能极好，我们从 Bracket-Pair-Colorizer 插件迁出，详见：</p>\n<p><a href=\"https://blog.csdn.net/qq_21567385/article/details/120387446\">《 vscode1.60 原生高性能括号着色无缝迁移方案（等价Bracket-Pair-Colorizer） 》</a></p>\n<p><a href=\"https://blog.csdn.net/qq_21567385/article/details/121173936\">《 vscode1.62 原生代码块边缘导轨着色与Bracket Pair Colorizer的对标和差异化（附配置） 》</a></p>\n<h4><a id=\"_350\"></a>主题</h4>\n<pre><code class=\"prism language-js\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// theme</span>\n  <span class=\"token string\">\"workbench.colorTheme\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Dracula\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我非常喜欢的一款 <strong>无红色</strong> 暗色主题 <a href=\"https://marketplace.visualstudio.com/items?itemName=dracula-theme.theme-dracula\">Dracula Official</a> 。</p>\n<h4><a id=\"jsx_attr_auto_brackets_361\"></a>jsx attr auto brackets</h4>\n<pre><code class=\"prism language-js\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// jsx auto complete</span>\n  <span class=\"token string\">\"typescript.preferences.jsxAttributeCompletionStyle\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"auto\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"javascript.preferences.jsxAttributeCompletionStyle\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"auto\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>vscode v1.63 对 jsx 属性的自动补全括号行为更加智能化了，详见 <a href=\"https://code.visualstudio.com/updates/v1_63#_jsx-attribute-completions\">JSX attribute completions</a> 。</p>\n<h4><a id=\"inline_complete_373\"></a>inline complete</h4>\n<pre><code class=\"prism language-js\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// inline complete</span>\n  <span class=\"token string\">\"editor.inlineSuggest.enabled\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>使用 Tabnine 或 github copilot 等自动补全插件都需要开启的选项。</p>\n<h4><a id=\"_384\"></a>其他</h4>\n<pre><code class=\"prism language-js\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// svg formatter</span>\n  <span class=\"token string\">\"[svg]\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string\">\"editor.defaultFormatter\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"jock.svg\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// python format</span>\n  <span class=\"token string\">\"[python]\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string\">\"editor.defaultFormatter\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ms-python.python\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// python language server engine</span>\n  <span class=\"token string\">\"python.languageServer\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Pylance\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_401\"></a>后记</h3>\n<p>为了真正做到 “<strong>知其所以然</strong>” ，而不是单纯的复制粘贴，本文不会给出大全套的配置合集，加上习惯的不同，请各位读者自行各取所需。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 1, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-02-06 04:18:49", "summary": "前言的配置是一个老生常谈的话题，随着时间的流逝我们可能会很高频的改动他，但我们应该极力避免一个问题：配了某项但是不知道他的作用其实就是一个知其所以然的问题。籍此话题，本文将细致的分析我的，希冀可以给读"}