{"blogid": "120943271", "writerAge": "码龄4年", "writerBlogNum": "683", "writerCollect": "13997", "writerComment": "5838", "writerFan": "34845", "writerGrade": "8级", "writerIntegral": "43133", "writerName": "孙叫兽", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_120943271.jpg", "writerRankTotal": "90", "writerRankWeekly": "1874", "writerThumb": "12942", "writerVisitNum": "2295678", "blog_read_count": "23425", "blog_time": "于 2021-10-24 23:50:06 发布", "blog_title": "15K的前端应届毕业生，就因为掌握了这些知识点！（前端企业级开发必备）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"-toc\" style=\"margin-left:0px;\"></p>\n<p id=\"1.%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91-toc\" style=\"margin-left:0px;\"><a href=\"#1.%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91\" title=\"1.前端开发\">1.前端开发</a></p>\n<p id=\"%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85VScode-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85VScode\" title=\"下载安装VScode\">下载安装VScode</a></p>\n<p id=\"%E4%BC%98%E5%8C%96%E9%85%8D%E7%BD%AE-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BC%98%E5%8C%96%E9%85%8D%E7%BD%AE\" title=\"优化配置\">优化配置</a></p>\n<p id=\"2%E3%80%81%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85-toc\" style=\"margin-left:0px;\"><a href=\"#2%E3%80%81%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85\" title=\"2、插件安装\">2、插件安装</a></p>\n<p id=\"3%E3%80%81%E8%AE%BE%E7%BD%AE%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F-toc\" style=\"margin-left:40px;\"><a href=\"#3%E3%80%81%E8%AE%BE%E7%BD%AE%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F\" title=\"3、设置字体大小\">3、设置字体大小</a></p>\n<p id=\"4%E3%80%81%E5%BC%80%E5%90%AF%E5%AE%8C%E6%95%B4%E7%9A%84Emmet%E8%AF%AD%E6%B3%95%E6%94%AF%E6%8C%81-toc\" style=\"margin-left:40px;\"><a href=\"#4%E3%80%81%E5%BC%80%E5%90%AF%E5%AE%8C%E6%95%B4%E7%9A%84Emmet%E8%AF%AD%E6%B3%95%E6%94%AF%E6%8C%81\" title=\"4、开启完整的Emmet语法支持\">4、开启完整的Emmet语法支持</a></p>\n<p id=\"5%E3%80%81%E8%A7%86%E5%9B%BE-toc\" style=\"margin-left:40px;\"><a href=\"#5%E3%80%81%E8%A7%86%E5%9B%BE\" title=\"5、视图\">5、视图</a></p>\n<p id=\"2.Node.js%20%E5%85%A5%E9%97%A8-toc\" style=\"margin-left:0px;\"><a href=\"#2.Node.js%20%E5%85%A5%E9%97%A8\" title=\"2.Node.js 入门\">2.Node.js 入门</a></p>\n<p id=\"2.1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AFNode.js-toc\" style=\"margin-left:40px;\"><a href=\"#2.1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AFNode.js\" title=\"2.1、什么是Node.js\">2.1、什么是Node.js</a></p>\n<p id=\"2.2%E3%80%81Node.js%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8-toc\" style=\"margin-left:40px;\"><a href=\"#2.2%E3%80%81Node.js%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8\" title=\"2.2、Node.js有什么用\">2.2、Node.js有什么用</a></p>\n<p id=\"2.3%E3%80%81%E5%AE%89%E8%A3%85%20%E4%B8%8B%E8%BD%BD%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#2.3%E3%80%81%E5%AE%89%E8%A3%85%20%E4%B8%8B%E8%BD%BD%EF%BC%9A\" title=\"2.3、安装 下载：\">2.3、安装 下载：</a></p>\n<p id=\"2.4%E3%80%81%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-toc\" style=\"margin-left:80px;\"><a href=\"#2.4%E3%80%81%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8\" title=\"2.4、快速入门\">2.4、快速入门</a></p>\n<p id=\"2.5%E3%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91-toc\" style=\"margin-left:40px;\"><a href=\"#2.5%E3%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91\" title=\"2.5、服务器端应用开发\">2.5、服务器端应用开发</a></p>\n<p id=\"3%E3%80%81ES6%E5%85%A5%E9%97%A8-toc\" style=\"margin-left:0px;\"><a href=\"#3%E3%80%81ES6%E5%85%A5%E9%97%A8\" title=\"3、ES6入门\">3、ES6入门</a></p>\n<p id=\"3.2%E3%80%81let%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F-toc\" style=\"margin-left:40px;\"><a href=\"#3.2%E3%80%81let%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F\" title=\"3.2、let声明变量\">3.2、let声明变量</a></p>\n<p id=\"3.3%E3%80%81const%E5%A3%B0%E6%98%8E%E5%B8%B8%E9%87%8F-toc\" style=\"margin-left:40px;\"><a href=\"#3.3%E3%80%81const%E5%A3%B0%E6%98%8E%E5%B8%B8%E9%87%8F\" title=\"3.3、const声明常量\">3.3、const声明常量</a></p>\n<p id=\"3.4%E3%80%81%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC%20%E5%88%9B%E5%BB%BA-toc\" style=\"margin-left:40px;\"><a href=\"#3.4%E3%80%81%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC%20%E5%88%9B%E5%BB%BA\" title=\"3.4、解构赋值 创建\">3.4、解构赋值 创建</a></p>\n<p id=\"3.5%E3%80%81%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2%20%E5%88%9B%E5%BB%BA-toc\" style=\"margin-left:40px;\"><a href=\"#3.5%E3%80%81%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2%20%E5%88%9B%E5%BB%BA\" title=\"3.5、模板字符串 创建\">3.5、模板字符串 创建</a></p>\n<p id=\"3.6%E3%80%81%E5%A3%B0%E6%98%8E%E5%AF%B9%E8%B1%A1%E7%AE%80%E5%86%99%20%E5%88%9B%E5%BB%BA-toc\" style=\"margin-left:40px;\"><a href=\"#3.6%E3%80%81%E5%A3%B0%E6%98%8E%E5%AF%B9%E8%B1%A1%E7%AE%80%E5%86%99%20%E5%88%9B%E5%BB%BA\" title=\"3.6、声明对象简写 创建\">3.6、声明对象简写 创建</a></p>\n<p id=\"3.7%E3%80%81%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E7%AE%80%E5%86%99-toc\" style=\"margin-left:40px;\"><a href=\"#3.7%E3%80%81%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E7%AE%80%E5%86%99\" title=\"3.7、定义方法简写\">3.7、定义方法简写</a></p>\n<p id=\"3.8%E3%80%81%E5%AF%B9%E8%B1%A1%E6%8B%93%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6-toc\" style=\"margin-left:40px;\"><a href=\"#3.8%E3%80%81%E5%AF%B9%E8%B1%A1%E6%8B%93%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6\" title=\"3.8、对象拓展运算符\">3.8、对象拓展运算符</a></p>\n<p id=\"3.9%E3%80%81%E5%87%BD%E6%95%B0%E7%9A%84%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0-toc\" style=\"margin-left:40px;\"><a href=\"#3.9%E3%80%81%E5%87%BD%E6%95%B0%E7%9A%84%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0\" title=\"3.9、函数的默认参数\">3.9、函数的默认参数</a></p>\n<p id=\"3.10%E3%80%81%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:40px;\"><a href=\"#3.10%E3%80%81%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0\" title=\"3.10、箭头函数\">3.10、箭头函数</a></p>\n<p id=\"4%E3%80%81NPM%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8-toc\" style=\"margin-left:0px;\"><a href=\"#4%E3%80%81NPM%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8\" title=\"4、NPM包管理器\">4、NPM包管理器</a></p>\n<p id=\"4.1%E3%80%81%E7%AE%80%E4%BB%8B-toc\" style=\"margin-left:40px;\"><a href=\"#4.1%E3%80%81%E7%AE%80%E4%BB%8B\" title=\"4.1、简介\">4.1、简介</a></p>\n<p id=\"4.2%E3%80%81%E4%BD%BF%E7%94%A8npm%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE-toc\" style=\"margin-left:40px;\"><a href=\"#4.2%E3%80%81%E4%BD%BF%E7%94%A8npm%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE\" title=\"4.2、使用npm管理项目\">4.2、使用npm管理项目</a></p>\n<p id=\"4.3%E3%80%81%E4%BF%AE%E6%94%B9npm%E9%95%9C%E5%83%8F-toc\" style=\"margin-left:40px;\"><a href=\"#4.3%E3%80%81%E4%BF%AE%E6%94%B9npm%E9%95%9C%E5%83%8F\" title=\"4.3、修改npm镜像\">4.3、修改npm镜像</a></p>\n<p id=\"4.4%E3%80%81npm%20install-toc\" style=\"margin-left:40px;\"><a href=\"#4.4%E3%80%81npm%20install\" title=\"4.4、npm install\">4.4、npm install</a></p>\n<p id=\"4.5%E3%80%81%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4-toc\" style=\"margin-left:40px;\"><a href=\"#4.5%E3%80%81%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4\" title=\"4.5、其他命令\">4.5、其他命令</a></p>\n<p id=\"5%E3%80%81Babel-toc\" style=\"margin-left:0px;\"><a href=\"#5%E3%80%81Babel\" title=\"5、Babel\">5、Babel</a></p>\n<p id=\"5.1%E3%80%81%E7%AE%80%E4%BB%8B-toc\" style=\"margin-left:40px;\"><a href=\"#5.1%E3%80%81%E7%AE%80%E4%BB%8B\" title=\"5.1、简介\">5.1、简介</a></p>\n<p id=\"5.2%E3%80%81%E5%AE%89%E8%A3%85-toc\" style=\"margin-left:40px;\"><a href=\"#5.2%E3%80%81%E5%AE%89%E8%A3%85\" title=\"5.2、安装\">5.2、安装</a></p>\n<p id=\"5.3%E3%80%81Babel%E7%9A%84%E4%BD%BF%E7%94%A8-toc\" style=\"margin-left:40px;\"><a href=\"#5.3%E3%80%81Babel%E7%9A%84%E4%BD%BF%E7%94%A8\" title=\"5.3、Babel的使用\">5.3、Babel的使用</a></p>\n<p id=\"5.4%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E8%84%9A%E6%9C%AC%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#5.4%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E8%84%9A%E6%9C%AC%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\" title=\"5.4、自定义脚本        \">5.4、自定义脚本        </a></p>\n<p id=\"6%E3%80%81%E6%A8%A1%E5%9D%97%E5%8C%96%C2%A0-toc\" style=\"margin-left:0px;\"><a href=\"#6%E3%80%81%E6%A8%A1%E5%9D%97%E5%8C%96%C2%A0\" title=\"6、模块化 \">6、模块化 </a></p>\n<p id=\"6.1%E3%80%81%E7%AE%80%E4%BB%8B-toc\" style=\"margin-left:40px;\"><a href=\"#6.1%E3%80%81%E7%AE%80%E4%BB%8B\" title=\"6.1、简介\">6.1、简介</a></p>\n<p id=\"6.2%E3%80%81CommonJS%E8%A7%84%E8%8C%83-toc\" style=\"margin-left:40px;\"><a href=\"#6.2%E3%80%81CommonJS%E8%A7%84%E8%8C%83\" title=\"6.2、CommonJS规范\">6.2、CommonJS规范</a></p>\n<p id=\"6.3%E3%80%81ES6%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83-toc\" style=\"margin-left:40px;\"><a href=\"#6.3%E3%80%81ES6%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83\" title=\"6.3、ES6模块化规范\">6.3、ES6模块化规范</a></p>\n<p id=\"6.4%E3%80%81ES6%E6%A8%A1%E5%9D%97%E5%8C%96%E5%86%99%E6%B3%952-toc\" style=\"margin-left:40px;\"><a href=\"#6.4%E3%80%81ES6%E6%A8%A1%E5%9D%97%E5%8C%96%E5%86%99%E6%B3%952\" title=\"6.4、ES6模块化写法2\">6.4、ES6模块化写法2</a></p>\n<p id=\"7%E3%80%81Webpack-toc\" style=\"margin-left:0px;\"><a href=\"#7%E3%80%81Webpack\" title=\"7、Webpack\">7、Webpack</a></p>\n<p id=\"7.1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AFWebpack-toc\" style=\"margin-left:40px;\"><a href=\"#7.1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AFWebpack\" title=\"7.1、什么是Webpack\">7.1、什么是Webpack</a></p>\n<p id=\"%C2%A07.2%E3%80%81Webpack%E5%AE%89%E8%A3%85-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A07.2%E3%80%81Webpack%E5%AE%89%E8%A3%85\" title=\" 7.2、Webpack安装\"> 7.2、Webpack安装</a></p>\n<p id=\"7.3%E3%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE-toc\" style=\"margin-left:40px;\"><a href=\"#7.3%E3%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE\" title=\"7.3、初始化项目\">7.3、初始化项目</a></p>\n<p id=\"7.4%E3%80%81JS%E6%89%93%E5%8C%85-toc\" style=\"margin-left:40px;\"><a href=\"#7.4%E3%80%81JS%E6%89%93%E5%8C%85\" title=\"7.4、JS打包\">7.4、JS打包</a></p>\n<p id=\"7.5%E3%80%81Css%E6%89%93%E5%8C%85-toc\" style=\"margin-left:40px;\"><a href=\"#7.5%E3%80%81Css%E6%89%93%E5%8C%85\" title=\"7.5、Css打包\">7.5、Css打包</a></p>\n<p id=\"7.6%E3%80%81%E9%85%8D%E7%BD%AE-toc\" style=\"margin-left:40px;\"><a href=\"#7.6%E3%80%81%E9%85%8D%E7%BD%AE\" title=\"7.6、配置\">7.6、配置</a></p>\n<hr id=\"hr-toc\"/>\n<h1 id=\"1.%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91\">1.前端开发</h1>\n<p>前端工程师“Front-End-Developer”源自于美国。大约从2005年开始正式的前端工程师角色被行业所认 可，到了2010年，互联网开始全面进入移动时代，前端开发的工作越来越重要。 最初所有的开发工作都是由后端工程师完成的，随着业务越来越繁杂，工作量变大，于是我们将项目中 的可视化部分和一部分交互功能的开发工作剥离出来，形成了前端开发。 由于互联网行业的急速发展，导致了在不同的国家，有着截然不同的分工体制。 在日本和一些人口比较稀疏的国家，例如加拿大、澳洲等，流行“Full-Stack Engineer”，也就是我们通常 所说的全栈工程师。通俗点说就是一个人除了完成前端开发和后端开发工作以外，有的公司从产品设计 到项目开发再到后期运维可能都是同一个人，甚至可能还要负责UI、配动画，也可以是扫地、擦窗、写 文档、维修桌椅等等。 而在美国等互联网环境比较发达的国家项目开发的分工协作更为明确，整个项目开发分为前端、中间层 和后端三个开发阶段，这三个阶段分别由三个或者更多的人来协同完成。 国内的大部分互联网公司只有前端工程师和后端工程师，中间层的工作有的由前端来完成，有的由后端 来完成。 PRD（产品原型-产品经理） - PSD（视觉设计-UI工程师） - HTML/CSS/JavaScript（PC/移动端网页，实现网页端的视觉展示和交互-前端工程师）</p>\n<h2 id=\"%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85VScode\">下载安装VScode</h2>\n<p>下载地址：https://code.visualstudio.com/</p>\n<p>安装：无脑下一步</p>\n<h2 id=\"%E4%BC%98%E5%8C%96%E9%85%8D%E7%BD%AE\">优化配置</h2>\n<p>中文界面配置</p>\n<p>首先安装中文插件：Chinese (Simplified) Language Pack for Visual Studio Code</p>\n<p><img alt=\"\" height=\"604\" src=\"..\\..\\static\\image\\18e80b22007b48c39bb4ec745616342b.png\" width=\"1200\"/></p>\n<p>2、右下角弹出是否重启vs，点击“yes”</p>\n<p>3、有些机器重启后如果界面没有变化，则 点击 左边栏Manage -&gt; Command Paletet... 【Ctrl+Shift+p】</p>\n<p>4、在搜索框中输入“configure display language”，回车 5、打开locale.json文件，修改文件下的属性 \"locale\":\"zh-cn\" </p>\n<pre><code class=\"language-javascript\">{\n// 定义 VS Code 的显示语言。\n// 请参阅 https://go.microsoft.com/fwlink/?LinkId=761051，了解支持的语言列表\n\"locale\":\"zh-cn\" // 更改将在重新启动 VS Code 之后生效。\n}\n</code></pre>\n<p>6、重启vscode</p>\n<h1 id=\"2%E3%80%81%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85\">2、插件安装</h1>\n<p>为方便后续开发，建议安装如下插件.</p>\n<p><img alt=\"\" height=\"856\" src=\"..\\..\\static\\image\\037de4d5dba641f5b6c3afcb9cb274b2.png\" width=\"890\"/></p>\n<h2 id=\"3%E3%80%81%E8%AE%BE%E7%BD%AE%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F\">3、设置字体大小</h2>\n<p>左边栏Manage -&gt; settings -&gt; 搜索 “font” -&gt; Font size</p>\n<h2 id=\"4%E3%80%81%E5%BC%80%E5%90%AF%E5%AE%8C%E6%95%B4%E7%9A%84Emmet%E8%AF%AD%E6%B3%95%E6%94%AF%E6%8C%81\">4、开启完整的Emmet语法支持</h2>\n<p>设置中搜索 Emmet：启用如下选项，必要时重启vscode</p>\n<h2 id=\"5%E3%80%81%E8%A7%86%E5%9B%BE\">5、视图</h2>\n<p>查看--&gt; 外观--&gt; 向左移动侧边栏</p>\n<h1 id=\"2.Node.js%20%E5%85%A5%E9%97%A8\">2.Node.js 入门</h1>\n<h2 id=\"2.1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AFNode.js\">2.1、什么是Node.js</h2>\n<p>简单的说 Node.js 就是运行在服务端的 JavaScript。 Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度 非常快，性能非常好。</p>\n<h2 id=\"2.2%E3%80%81Node.js%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8\">2.2、Node.js有什么用</h2>\n<p>如果你是一个前端程序员，你不懂得像PHP、Python或Ruby等动态编程语言，然后你想创建自己的服 务，那么Node.js是一个非常好的选择。 Node.js 是运行在服务端的 JavaScript，如果你熟悉Javascript，那么你将会很容易的学会Node.js。 当然，如果你是后端程序员，想部署一些高性能的服务，那么学习Node.js也是一个非常好的选择。</p>\n<h3 id=\"2.3%E3%80%81%E5%AE%89%E8%A3%85%20%E4%B8%8B%E8%BD%BD%EF%BC%9A\">2.3、安装 下载：</h3>\n<p>下载：https://nodejs.org/en/</p>\n<p>中文网：http://nodejs.cn/</p>\n<p>LTS：长期支持版本</p>\n<p>Current：最新版</p>\n<p>安装：无脑下一步</p>\n<p>查看版本</p>\n<pre><code class=\"language-javascript\">node -v\nC:\\Users\\Administrator&gt;node -v\nv12.14.0\n# 由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以使用cmd命令行输\n入“npm -v”来测试是否安装成功。\nnpm -v\nC:\\Users\\Administrator&gt;npm -v\n6.13.4\n# 安装相关环境 express快速、开放、极简的 Web 开发框架\nnpm install express -g\n# 安装淘宝镜像，防止下载较慢\nnpm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre>\n<h3 id=\"2.4%E3%80%81%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8\">2.4、快速入门</h3>\n<p>1、创建文件夹 nodejs</p>\n<p>2、创建 01-控制台程序.js</p>\n<p>3、打开命令行终端：Ctrl + Shift + y</p>\n<p>4、进入到程序所在的目录，终端</p>\n<p><img alt=\"\" height=\"857\" src=\"..\\..\\static\\image\\3b32c6c47bff42988ada6c1c8555a483.png\" width=\"1200\"/></p>\n<p> 浏览器的内核包括两部分核心：</p>\n<ol><li>DOM渲染引擎；</li><li>java script 解析器（js引擎）</li><li>js运行在浏览器内核中的js引擎内部</li></ol>\n<p>Node.js是脱离浏览器环境运行的JavaScript程序，基于V8 引擎</p>\n<h2 id=\"2.5%E3%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91\">2.5、服务器端应用开发</h2>\n<p>1、创建 02-server-app.js ；</p>\n<pre><code class=\"language-javascript\">const http = require('http')\nhttp.createServer(function (request, response) {\n// 发送 HTTP 头部\n// HTTP 状态值: 200 : OK\n// 内容类型: text/plain\nresponse.writeHead(200, {'Content-Type': 'text/plain'})\n// 发送响应数据 \"Hello World\"\nresponse.end('Hello Server')\n}).listen(8888)\n// 终端打印如下信息\nconsole.log('Server running at http://127.0.0.1:8888/')</code></pre>\n<p>2、运行服务器程序；</p>\n<pre><code class=\"language-javascript\">node 02-server-app.js</code></pre>\n<p>3、服务器启动成功后，在浏览器中输入：http://localhost:8888/ 查看webserver成功运行，并输出 html页面</p>\n<p>4、停止服务：ctrl + c 如果想开发更复杂的基于Node.js的应用程序后台，需要进一步学习Node.js的Web开发相关框架 express，art-template等</p>\n<h1 id=\"3%E3%80%81ES6%E5%85%A5%E9%97%A8\">3、ES6入门</h1>\n<p>3.1、简介 ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。 它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p>\n<p><strong>ECMAScript 和 JavaScript 的关系</strong></p>\n<p>一个常见的问题是，ECMAScript 和 JavaScript 到底是什么关系？ 要讲清楚这个问题，需要回顾历史。1996 年 11 月，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给标准化组织 ECMA，希望这种语言能够成为国际标准。次年，ECMA 发布 262 号标准 文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript，这个版 本就是 1.0 版。 因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现（另外的 ECMAScript 方言还有 Jscript 和 ActionScript）</p>\n<p><strong>ES6 与 ECMAScript 2015 的关系</strong></p>\n<p>ECMAScript 2015（简称 ES2015）这个词，也是经常可以看到的。它与 ES6 是什么关系呢？ 2011 年，ECMAScript 5.1 版发布后，就开始制定 6.0 版了。因此，ES6 这个词的原意，就是指 JavaScript 语言的下一个版本。 ES6 的第一个版本，在 2015 年 6 月发布，正式名称是《ECMAScript 2015 标准》（简称 ES2015）。 2016 年 6 月，小幅修订的《ECMAScript 2016 标准》（简称 ES2016）如期发布，这个版本可以看作是 ES6.1 版，因为两者的差异非常小，基本上是同一个标准。根据计划，2017 年 6 月发布 ES2017 标准。</p>\n<p>因此，ES6 既是一个历史名词，也是一个泛指，含义是 5.1 版以后的 JavaScript 的下一代标准，涵盖了 ES2015、ES2016、ES2017 等等，而 ES2015 则是正式名称，特指该年发布的正式版本的语言标准。我 们说 ES6 的地方，一般是指 ES2015 标准，但有时也是泛指“下一代 JavaScript 语言”。</p>\n<p><strong>基本语法：</strong></p>\n<p>ES标准中不包含 DOM 和 BOM的定义，只涵盖基本数据类型、关键字、语句、运算符、内建对象、内 建函数等通用语法。 本部分只学习我们的项目开发中ES6的最少必要知识，方便项目开发中对代码的理解。</p>\n<h2 id=\"3.2%E3%80%81let%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F\">3.2、let声明变量</h2>\n<p>1、创建 01-let.js</p>\n<pre><code class=\"language-javascript\">// var 声明的变量没有局部作用域\n// let 声明的变量 有局部作用域\n{\nvar a = 0\nlet b = 1\n}\nconsole.log(a) // 0\nconsole.log(b) // ReferenceError: b is not defined</code></pre>\n<pre><code class=\"language-javascript\">// var 可以声明多次\n// let 只能声明一次\nvar m = 1\nvar m = 2\nlet n = 3\nlet n = 4\nconsole.log(m) // 2\nconsole.log(n) // Identifier 'n' has already been declared</code></pre>\n<pre><code class=\"language-javascript\">// var 会变量提升\n// let 不存在变量提升\nconsole.log(x) //undefined\nvar x = 'apple'\nconsole.log(y) //ReferenceError: y is not defined\nlet y = 'banana'</code></pre>\n<pre><code class=\"language-javascript\">// var 会变量提升\n// let 不存在变量提升\nconsole.log(x) //undefined\nvar x = 'apple'\nconsole.log(y) //ReferenceError: y is not defined\nlet y = 'banana'</code></pre>\n<h2 id=\"3.3%E3%80%81const%E5%A3%B0%E6%98%8E%E5%B8%B8%E9%87%8F\">3.3、const声明常量</h2>\n<p>创建 02-const.js</p>\n<pre><code class=\"language-javascript\">// 1、声明之后不允许改变\nconst PI = '3.1415926'\nPI = 3 // TypeError: Assignment to constant variable.\n</code></pre>\n<pre><code class=\"language-javascript\">// 2、一但声明必须初始化，否则会报错\nconst MY_AGE // SyntaxError: Missing initializer in const declaration\n</code></pre>\n<h2 id=\"3.4%E3%80%81%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC%20%E5%88%9B%E5%BB%BA\">3.4、解构赋值 创建</h2>\n<p>03-解构赋值.js</p>\n<p>解构赋值是对赋值运算符的扩展。 他是一种针对数组或者对象进行模式匹配，然后对其中的变量进行赋值。 在代码书写上简洁且易读，语义更加清晰明了；也方便了复杂对象中数据字段获取。</p>\n<pre><code class=\"language-javascript\">//1、数组解构\n// 传统\nlet a = 1, b = 2, c = 3\nconsole.log(a, b, c)\n// ES6\nlet [x, y, z] = [1, 2, 3]\nconsole.log(x, y, z)</code></pre>\n<pre><code class=\"language-javascript\">//1、数组解构\n// 传统\nlet a = 1, b = 2, c = 3\nconsole.log(a, b, c)\n// ES6\nlet [x, y, z] = [1, 2, 3]\nconsole.log(x, y, z)</code></pre>\n<h2 id=\"3.5%E3%80%81%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2%20%E5%88%9B%E5%BB%BA\">3.5、模板字符串 创建</h2>\n<p>04-模板字符串.js</p>\n<p>模板字符串相当于加强版的字符串，用反引号 `,除了作为普通字符串，还可以用来定义多行字符 串，还可以在字符串中加入变量和表达式。</p>\n<pre><code class=\"language-javascript\">// 字符串插入变量和表达式。变量名写在 ${} 中，${} 中可以放入 JavaScript 表达式。\nlet name = 'sunjiaoshou'\nlet age = 27\nlet info = `My Name is ${name},I am ${age+1} years old next year.`\nconsole.log(info)\n// My Name is Kuangshen,I am 28 years old next year.</code></pre>\n<h2 id=\"3.6%E3%80%81%E5%A3%B0%E6%98%8E%E5%AF%B9%E8%B1%A1%E7%AE%80%E5%86%99%20%E5%88%9B%E5%BB%BA\">3.6、声明对象简写 创建</h2>\n<p>05-声明对象简写.js</p>\n<pre><code>const age = 12\nconst name = 'sunjiaoshou'\n// 传统\nconst person1 = {age: age, name: name}\nconsole.log(person1)\n// ES6\nconst person2 = {age, name}\nconsole.log(person2) //{age: 12, name: 'sunjiaoshou'}</code></pre>\n<h2 id=\"3.7%E3%80%81%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E7%AE%80%E5%86%99\">3.7、定义方法简写</h2>\n<p>创建 06-定义方法简写.js</p>\n<pre><code class=\"language-javascript\">// 传统\nconst person1 = {\nsayHi:function(){\nconsole.log('Hi')\n}\n}\nperson1.sayHi();//'Hi'\n// ES6\nconst person2 = {\nsayHi(){\nconsole.log('Hi')\n}\n}\nperson2.sayHi() //'Hi'</code></pre>\n<h2 id=\"3.8%E3%80%81%E5%AF%B9%E8%B1%A1%E6%8B%93%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6\">3.8、对象拓展运算符</h2>\n<p>创建 07-对象拓展运算符.js 拓展运算符（...）用于取出参数对象所有可遍历属性，然后拷贝到当前对象。</p>\n<pre><code class=\"language-javascript\">let person = {name: 'sunjiaoshou', age: 15}\nlet someoneOld = person //引用赋值\nlet someone = { ...person } //对拷拷贝\nsomeoneOld.name = 'sunjiaoshou'\nsomeone.name = 'sunjiaoshou'\nconsole.log(person) //{name: 'sunjiaoshou', age: 15}\nconsole.log(someoneOld) //{name: 'sunjiaoshou', age: 15}\nconsole.log(someone) //{name: 'sunjiaoshou', age: 15}</code></pre>\n<h2 id=\"3.9%E3%80%81%E5%87%BD%E6%95%B0%E7%9A%84%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0\">3.9、函数的默认参数</h2>\n<p>创建 08-函数的默认参数.js</p>\n<pre><code class=\"language-javascript\">function showInfo(name, age = 17) {\nconsole.log(name + \",\" + age)\n}\n// 只有在未传递参数，或者参数为 undefined 时，才会使用默认参数\n// null 值被认为是有效的值传递。\nshowInfo(\"sunjiaoshou\", 18) // sunjiaoshou,18\nshowInfo(\"sunjiaoshou\") // sunjiaoshou,17\nshowInfo(\"sunjiaoshou\", undefined) // sunjiaoshou,17\nshowInfo(\"sunjiaoshou\", null) // sunjiaoshou, null\n</code></pre>\n<h2 id=\"3.10%E3%80%81%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0\">3.10、箭头函数</h2>\n<p>创建 09-箭头函数.js</p>\n<p>箭头函数提供了一种更加简洁的函数书写方式。</p>\n<p>基本语法是：参数 =&gt; 函数体</p>\n<p>箭头函数多用于匿名函数的定义</p>\n<pre><code class=\"language-javascript\">let arr = [\"10\", \"5\", \"40\", \"25\", \"1000\"]\nlet arr1 = arr.sort()\nconsole.log(arr1)\n//上面的代码没有按照数值的大小对数字进行排序，\n//要实现这一点，就必须使用一个排序函数\narr2 = arr.sort(function(a,b){\nreturn a - b\n})\n// arr2 = arr.sort((a,b) =&gt; {return a - b})\n// arr2 = arr.sort((a,b) =&gt; a - b)\nconsole.log(arr2)</code></pre>\n<pre><code class=\"language-javascript\">let arr = [\"10\", \"5\", \"40\", \"25\", \"1000\"]\nlet arr1 = arr.sort()\nconsole.log(arr1)\n//上面的代码没有按照数值的大小对数字进行排序，\n//要实现这一点，就必须使用一个排序函数\narr2 = arr.sort(function(a,b){\nreturn a - b\n})\n// arr2 = arr.sort((a,b) =&gt; {return a - b})\n// arr2 = arr.sort((a,b) =&gt; a - b)\nconsole.log(arr2)</code></pre>\n<h1 id=\"4%E3%80%81NPM%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8\">4、NPM包管理器</h1>\n<h2 id=\"4.1%E3%80%81%E7%AE%80%E4%BB%8B\">4.1、简介</h2>\n<p>NPM全称Node Package Manager，是Node.js包管理工具，是全球最大的模块生态系统，里面所有的 模块都是开源免费的；也是Node.js的包管理工具，相当于前端的Maven 。</p>\n<pre><code class=\"language-javascript\">#在命令提示符输入 npm -v 可查看当前npm版本\nnpm -v</code></pre>\n<h2 id=\"4.2%E3%80%81%E4%BD%BF%E7%94%A8npm%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE\">4.2、使用npm管理项目</h2>\n<p>1、创建文件夹npm</p>\n<p>2、项目初始化</p>\n<pre><code class=\"language-javascript\">#建立一个空文件夹，在命令提示符进入该文件夹 执行命令初始化\nnpm init\n#按照提示输入相关信息，如果是用默认值则直接回车即可。\n#name: 项目名称\n#version: 项目版本号\n#description: 项目描述\n#keywords: {Array}关键词，便于用户搜索到我们的项目\n#最后会生成package.json文件，这个是包的配置文件，相当于maven的pom.xml\n#我们之后也可以根据需要进行修改。</code></pre>\n<blockquote>\n<p>#如果想直接生成 package.json 文件，那么可以使用命令 npm init -y</p>\n</blockquote>\n<h2 id=\"4.3%E3%80%81%E4%BF%AE%E6%94%B9npm%E9%95%9C%E5%83%8F\">4.3、修改npm镜像</h2>\n<p>1、修改npm镜像</p>\n<blockquote>\n<p>NPM官方的管理的包都是从 http://npmjs.com下载的，但是这个网站在国内速度很慢。</p>\n<p>这里推荐使用淘宝 NPM 镜像 http://npm.taobao.org/</p>\n<p>淘宝 NPM 镜像是一个完整 npmjs.com 镜像，同步频率目前为 10分钟一次，以保证尽量与官方服 务同步。</p>\n</blockquote>\n<p>2、设置镜像地址</p>\n<blockquote>\n<p>#经过下面的配置，以后所有的 npm install 都会经过淘宝的镜像地址下载</p>\n<p>npm config set registry https://registry.npm.taobao.org</p>\n<p>#查看npm配置信息</p>\n<p>npm config list</p>\n</blockquote>\n<h2 id=\"4.4%E3%80%81npm%20install\">4.4、npm install</h2>\n<pre><code class=\"language-javascript\">#使用 npm install 安装依赖包的最新版，\n#模块安装的位置：项目目录\\node_modules\n#安装会自动在项目目录下添加 package-lock.json文件，这个文件帮助锁定安装包的版本\n#同时package.json 文件中，依赖包会被添加到dependencies节点下，类似maven中的\n&lt;dependencies&gt;\nnpm install jquery\n#如果安装时想指定特定的版本\nnpm install jquery@2.1.x\n#devDependencies节点：开发时的依赖包，项目打包到生产环境的时候不包含的依赖\n#使用 -D参数将依赖添加到devDependencies节点\nnpm install --save-dev eslint\n#或\nnpm install -D eslint\n#全局安装\n#Node.js全局安装的npm包和工具的位置：用户目录\\AppData\\Roaming\\npm\\node_modules\n#一些命令行工具常使用全局安装的方式\nnpm install -g webpack\n#npm管理的项目在备份和传输的时候一般不携带node_modules文件夹\nnpm install #根据package.json中的配置下载依赖，初始化项目</code></pre>\n<h2 id=\"4.5%E3%80%81%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4\">4.5、其他命令</h2>\n<pre><code class=\"language-javascript\">#更新包（更新到最新版本）\nnpm update 包名\n#全局更新\nnpm update -g 包名\n#卸载包\nnpm uninstall 包名\n#全局卸载\nnpm uninstall -g 包名\n</code></pre>\n<h1 id=\"5%E3%80%81Babel\">5、Babel</h1>\n<h2 id=\"5.1%E3%80%81%E7%AE%80%E4%BB%8B\">5.1、简介</h2>\n<p>ES6的某些高级语法在浏览器环境甚至是Node.js环境中无法执行。 Babel是一个广泛使用的转码器，可以将ES6代码转为ES5代码，从而在现有环境执行执行。 这意味着，你可以现在就用 ES6 编写程序，而不用担心现有环境是否支持。</p>\n<h2 id=\"5.2%E3%80%81%E5%AE%89%E8%A3%85\">5.2、安装</h2>\n<p>安装命令行转码工具</p>\n<p>Babel提供babel-cli工具，用于命令行转码。它的安装命令如下：</p>\n<pre><code class=\"language-javascript\">npm install -g babel-cli\n#查看是否安装成功\nbabel --version</code></pre>\n<h2 id=\"5.3%E3%80%81Babel%E7%9A%84%E4%BD%BF%E7%94%A8\">5.3、Babel的使用</h2>\n<p>1、创建babel文件夹</p>\n<p>2、初始化项目</p>\n<blockquote>\n<p>npm init -y</p>\n</blockquote>\n<p>3、创建文件 src/example.js ，下面是一段ES6代码：</p>\n<pre><code class=\"language-javascript\">// 转码前\n// 定义数据\nlet input = [1, 2, 3]\n// 将数组的每个元素 +1\ninput = input.map(item =&gt; item + 1)\nconsole.log(input)</code></pre>\n<p>4、配置 .babelrc</p>\n<p>Babel的配置文件是.babelrc，存放在项目的根目录下，该文件用来设置转码规则和插件，基本格式 如下。</p>\n<blockquote>\n<p>{<!-- --></p>\n<p>\"presets\": [],</p>\n<p>\"plugins\": []</p>\n<p>}</p>\n</blockquote>\n<p> presets字段设定转码规则，将es2015规则加入 .babelrc：</p>\n<blockquote>\n<p>{<!-- --></p>\n<p>\"presets\": [\"es2015\"],</p>\n<p>\"plugins\": []</p>\n<p>}</p>\n</blockquote>\n<p>5、安装转码器，在项目中安装</p>\n<blockquote>\n<p> npm install --save-dev babel-preset-es2016</p>\n</blockquote>\n<p>6、转码</p>\n<p></p>\n<pre><code class=\"language-javascript\"># npm install --save-dev csv-loader xml-loader\n# 转码结果写入一个文件\nmkdir dist1\n# --out-file 或 -o 参数指定输出文件\nbabel src/example.js --out-file dist1/compiled.js\n# 或者\nbabel src/example.js -o dist1/compiled.js\n# 整个目录转码\nmkdir dist2\n# --out-dir 或 -d 参数指定输出目录\nbabel src --out-dir dist2\n# 或者\nbabel src -d dist2</code></pre>\n<h2 id=\"5.4%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E8%84%9A%E6%9C%AC%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">5.4、自定义脚本        </h2>\n<p>1、改写package.json</p>\n<pre><code class=\"language-javascript\">{\n// ...\n\"scripts\": {\n// ...\n\"build\": \"babel src\\\\example.js -o dist\\\\compiled.js\"\n},\n}</code></pre>\n<p> 2、转码的时候，执行下面的命令</p>\n<blockquote>\n<p>mkdir dist</p>\n<p>npm run build</p>\n</blockquote>\n<h1 id=\"6%E3%80%81%E6%A8%A1%E5%9D%97%E5%8C%96%C2%A0\">6、模块化 </h1>\n<h2 id=\"6.1%E3%80%81%E7%AE%80%E4%BB%8B\">6.1、简介</h2>\n<p>模块化产生的背景 随着网站逐渐变成\"互联网应用程序\"，嵌入网页的Javascript代码越来越庞大，越来越复杂。</p>\n<p>Javascript模块化编程，已经成为一个迫切的需求。理想情况下，开发者只需要实现核心的业务逻辑，其 他都可以加载别人已经写好的模块。 但是，Javascript不是一种模块化编程语言，它不支持\"类\"（class），包（package）等概念，也不支 持\"模块\"（module）。 模块化规范 CommonJS模块化规范 ES6模块化规范</p>\n<h2 id=\"6.2%E3%80%81CommonJS%E8%A7%84%E8%8C%83\">6.2、CommonJS规范</h2>\n<p>每个文件就是一个模块，有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的， 对其他文件不可见。</p>\n<p>1、创建“module”文件夹</p>\n<p>2、创建 mokuai-common-js/四则运算.js</p>\n<pre><code class=\"language-javascript\">// 定义成员：\nconst sum = function(a,b){\nreturn a + b\n}\nconst subtract = function(a,b){\nreturn a - b\n}\nconst multiply = function(a,b){\nreturn a * b\n}\nconst divide = function(a,b){\nreturn a / b\n}</code></pre>\n<p>3、导出模块中的成员</p>\n<pre><code class=\"language-javascript\">// 导出成员：\nmodule.exports = {\nsum: sum,\nsubtract: subtract,\nmultiply: multiply,\ndivide: divide\n}</code></pre>\n<p>4、创建 mokuai-common-js/引入模块.js</p>\n<pre><code class=\"language-javascript\">//引入模块，注意：当前路径必须写 ./\nconst m = require('./四则运算.js')\nconsole.log(m)\nconst r1 = m.sum(1,2)\nconst r2 = m.subtract(1,2)\nconsole.log(r1,r2)</code></pre>\n<p>5、运行程序</p>\n<blockquote>\n<p>node 引入模块.js</p>\n</blockquote>\n<p>CommonJS使用 exports 和require 来导出、导入模块。</p>\n<h2 id=\"6.3%E3%80%81ES6%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83\">6.3、ES6模块化规范</h2>\n<p>ES6使用 export 和 import 来导出、导入模块。</p>\n<p>1、创建 mokuai-es6 文件夹</p>\n<p>2、创建 src/userApi.js 文件，导出模块 </p>\n<pre><code class=\"language-javascript\">export function getList() {\nconsole.log('获取数据列表')\n}\nexport function save() {\nconsole.log('保存数据')\n}</code></pre>\n<p>3、创建 src/userComponent.js文件，导入模块</p>\n<pre><code class=\"language-javascript\">//只取需要的方法即可，多个方法用逗号分隔\nimport { getList, save } from './userApi.js'\ngetList()\nsave()</code></pre>\n<p>注意：这时的程序无法运行的，因为ES6的模块化无法在Node.js中执行，需要用Babel编辑成ES5 后再执行。</p>\n<p>4.初始化项目</p>\n<blockquote>\n<p>npm init -y</p>\n</blockquote>\n<p>5、配置 .babelrc</p>\n<pre><code class=\"language-javascript\">{\n\"presets\": [\"es2016\"],\n\"plugins\": []\n}</code></pre>\n<p> 6、安装转码器，在项目中安装</p>\n<blockquote>\n<p>npm install --save-dev babel-preset-es2016</p>\n</blockquote>\n<p>7、定义运行脚本，package.json中增加\"build\"</p>\n<pre><code class=\"language-javascript\">{\n// ...\n\"scripts\": {\n\"build\": \"babel src -d dist\"\n}\n}</code></pre>\n<p>8、执行命令转码</p>\n<pre><code class=\"language-javascript\">npm run build</code></pre>\n<p>9、运行程序</p>\n<pre><code class=\"language-javascript\">node dist/userComponent.js</code></pre>\n<h2 id=\"6.4%E3%80%81ES6%E6%A8%A1%E5%9D%97%E5%8C%96%E5%86%99%E6%B3%952\">6.4、ES6模块化写法2</h2>\n<p>1、创建 src/userApi</p>\n<p>2.js ，导出模块</p>\n<pre><code class=\"language-javascript\">export default {\ngetList() {\nconsole.log('获取数据列表2')\n},\nsave() {\nconsole.log('保存数据2')\n}\n}</code></pre>\n<p>2、创建 src/userComponent2.js，导入模块</p>\n<pre><code class=\"language-javascript\">import user from \"./userApi2.js\"\nuser.getList()\nuser.save()</code></pre>\n<p>3、执行命令转码</p>\n<blockquote>\n<p>npm run build</p>\n</blockquote>\n<p>4、运行程序</p>\n<blockquote>\n<p>node dist/userComponent2.js </p>\n</blockquote>\n<h1 id=\"7%E3%80%81Webpack\">7、Webpack</h1>\n<h2 id=\"7.1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AFWebpack\">7.1、什么是Webpack</h2>\n<p>Webpack 是一个前端资源加载/打包工具。它将根据模块的依赖关系进行静态分析，然后将这些模块按 照指定的规则生成对应的静态资源。 从图中我们可以看出，Webpack 可以将多种静态资源 js、css、less 转换成一个静态文件，减少了页面 的请求。</p>\n<p><img alt=\"\" height=\"696\" src=\"..\\..\\static\\image\\1adf395205284736a2cf94fb629411dd.png\" width=\"1200\"/></p>\n<h2 id=\"%C2%A07.2%E3%80%81Webpack%E5%AE%89%E8%A3%85\"> 7.2、Webpack安装</h2>\n<p>1、全局安装</p>\n<blockquote>\n<p>npm install -g webpack webpack-cli</p>\n</blockquote>\n<p>2、安装后查看版本号</p>\n<blockquote>\n<p>webpack -v</p>\n</blockquote>\n<h2 id=\"7.3%E3%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE\">7.3、初始化项目</h2>\n<p>1、创建webpack文件夹</p>\n<blockquote>\n<p>npm init -y</p>\n</blockquote>\n<p>2、创建src文件夹</p>\n<p>3、src下创建common.js</p>\n<pre><code class=\"language-javascript\">exports.info = function (str) {\ndocument.write(str);\n}</code></pre>\n<p>4、src下创建utils.js</p>\n<pre><code class=\"language-javascript\">exports.add = function (a, b) {\nreturn a + b;\n}</code></pre>\n<p>5、src下创建main.js</p>\n<pre><code class=\"language-javascript\">const common = require('./common');\nconst utils = require('./utils');\ncommon.info('Hello world!' + utils.add(100, 200));</code></pre>\n<h2 id=\"7.4%E3%80%81JS%E6%89%93%E5%8C%85\">7.4、JS打包</h2>\n<p>1、webpack目录下创建配置文件webpack.config.js</p>\n<pre><code class=\"language-javascript\">const path = require(\"path\"); //Node.js内置模块\nmodule.exports = {\nentry: './src/main.js', //配置入口文件\noutput: {\npath: path.resolve(__dirname, './dist'), //输出路径，__dirname：当前文件\n所在路径\nfilename: 'bundle.js' //输出文件\n}\n}</code></pre>\n<p>以上配置的意思是：读取当前项目目录下src文件夹中的main.js（入口文件）内容，分析资源依赖， 把相关的js文件打包，打包后的文件放入当前目录的dist文件夹下，打包后的js文件名为bundle.js</p>\n<p>2、命令行执行编译命令</p>\n<blockquote>\n<p>webpack --mode=development #执行后查看bundle.js 里面包含了上面两个js文件的内容并进行了代码压缩</p>\n</blockquote>\n<p>也可以配置项目的npm运行命令，修改package.json文件</p>\n<blockquote>\n<p>\"scripts\": { //..., \"dev\": \"webpack --mode=development\" }</p>\n</blockquote>\n<p>运行npm命令执行打包</p>\n<blockquote>\n<p>npm run dev</p>\n</blockquote>\n<p>3、webpack目录下创建index.html ， 引用bundle.js</p>\n<pre><code class=\"language-html\">&lt;body&gt;\n&lt;script src=\"dist/bundle.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;</code></pre>\n<p>4、浏览器中查看index.html</p>\n<h2 id=\"7.5%E3%80%81Css%E6%89%93%E5%8C%85\">7.5、Css打包</h2>\n<p>1、安装style-loader和 css-loader Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转 换。 Loader 可以理解为是模块和资源的转换器。 首先我们需要安装相关Loader插件</p>\n<blockquote>\n<p>css-loader 是将 css 装载到 javascript</p>\n<p>style-loader 是让 javascript 认识css</p>\n</blockquote>\n<blockquote>\n<p> npm install --save-dev style-loader css-loader</p>\n</blockquote>\n<pre><code class=\"language-javascript\">const path = require(\"path\"); //Node.js内置模块\nmodule.exports = {\n//...,\noutput:{\n//其他配置\n},\nmodule: {\nrules: [\n{\ntest: /\\.css$/, //打包规则应用到以css结尾的文件上\nuse: ['style-loader', 'css-loader']\n}\n]\n}}</code></pre>\n<p>3、在src文件夹创建style.css</p>\n<pre><code class=\"language-javascript\">body{\nbackground:pink;\n}</code></pre>\n<p>4、修改main.js，在第一行引入style.css</p>\n<blockquote>\n<p>require('./style.css')</p>\n</blockquote>\n<p> 5、运行编译命令</p>\n<blockquote>\n<p>npm run dev</p>\n</blockquote>\n<p>6、浏览器中查看index.html ， 看看背景是不是变成粉色啦？</p>\n<h2 id=\"7.6%E3%80%81%E9%85%8D%E7%BD%AE\">7.6、配置</h2>\n<p>entry：入口文件，指定</p>\n<p>WebPack 用哪个文件作为项目的入口</p>\n<p>output：输出，指定</p>\n<p>WebPack 把处理完成的文件放置到指定路径</p>\n<p>module：模块，用于处理各种类型的文件</p>\n<p>plugins：插件，如：热更新、代码重用等</p>\n<p>resolve：设置路径指向</p>\n<p>watch：监听，用于设置文件改动后直接打包</p>\n<pre><code class=\"language-javascript\">module.exports = {\nentry: \"\",\noutput: {\npath: \"\",\nfilename: \"\"\n},\nmodule: {\nloaders: [\n{test: /\\.js$/, loader: \"\"}\n]\n},\nplugins: {},\nresolve: {},\nwatch: true\n}</code></pre>\n<p>把这些知识都学习完毕了，去个大型的外包公司要个15K问题不大！</p>\n<p>好啦，本期的内容就分享到这里，我们下期见！</p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n</div>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 1, "javascript": 1, "java": 0, "sql": 0, "php": 1, "time": "2021-10-24 23:50:06", "summary": "目录前端开发前端开发下载安装下载安装优化配置优化配置、插件安装、插件安装、设置字体大小、设置字体大小、开启完整的语法支持、开启完整的语法支持、视图、视图入门入门、什么是、什么是、有什么用、有什么用、安"}