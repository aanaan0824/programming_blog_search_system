{"blogid": "126570417", "writerAge": "码龄1年", "writerBlogNum": "117", "writerCollect": "271", "writerComment": "53", "writerFan": "258", "writerGrade": "4级", "writerIntegral": "1405", "writerName": "逍遥ovo", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126570417.jpg", "writerRankTotal": "13833", "writerRankWeekly": "42365", "writerThumb": "122", "writerVisitNum": "40290", "blog_read_count": "381", "blog_time": "已于 2022-08-29 01:16:19 修改", "blog_title": "C# 委托详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><strong>通过 <a href=\"https://www.bilibili.com/video/BV13b411b7Ht?p=19&amp;vd_source=3ba8e5c6f208a2b08d0e0bc4fc3e280f\">刘铁锰老师的 C# 入门详解中委托详解</a> 记录学习，讲得真的非常好</strong><br/> </p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><ul><li><a href=\"#1__3\">1. 什么是委托</a></li><li><ul><li><a href=\"#11__4\">1.1 一切皆地址</a></li><li><a href=\"#12__16\">1.2 方法的调用</a></li><li><a href=\"#13__21\">1.3 什么是委托</a></li></ul>\n</li><li><a href=\"#2__152\">2 如何自定义委托</a></li><li><a href=\"#3__217\">3 为什么使用委托</a></li><li><ul><li><a href=\"#31__219\">3.1 模板方法</a></li><li><a href=\"#32__298\">3.2 回调方法</a></li></ul>\n</li><li><a href=\"#4__406\">4 多播委托</a></li><li><a href=\"#5__459\">5 隐式异步调用</a></li><li><a href=\"#6__518\">6 适当的使用接口替代委托</a></li><li><a href=\"#7__596\">7 个人总结（接口和委托）</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"1__3\"></a>1. 什么是委托</h2>\n<h3><a id=\"11__4\"></a>1.1 一切皆地址</h3>\n<p>程序 = 数据结构 + 算法。<br/> 数据结构也就是存放 <strong>数据</strong> 的结构，比如最常用的数组、哈希表、链表等。<br/> 算法我目前的理解是尽量减少一个 <strong>方法</strong> 的时间复杂度，比如排序算法中冒泡排序的时间复杂度为 O(N^2)，而快排的时间复杂度为O(log2n)，显然，冒泡排序的时间复杂度高于快排。<br/> 跑题了。。。<br/> <strong>数据</strong> 和 <strong>方法</strong> 存储在什么地方呢？</p>\n<p>答案是内存中。</p>\n<p><strong>数据 存储在以某个地址为起点的一段内存<br/> 方法 存储在以某个地址为起点的一段内存中所存储的一组机器语言指令</strong></p>\n<h3><a id=\"12__16\"></a>1.2 方法的调用</h3>\n<p><strong>方法的调用</strong> 分为 <strong>直接调用</strong> 和 <strong>间接调用</strong><br/> <strong>直接调用</strong>：通过方法名调用，CPU 通过读取函数名从而获得函数所在地址 → 执行函数 → 返回<br/> <strong>间接调用</strong>：通过函数指针调用，CPU 通过读取函数指针存储的函数所在地址 → 执行函数 → 返回</p>\n<h3><a id=\"13__21\"></a>1.3 什么是委托</h3>\n<p>委托就是 <strong>间接调用方法</strong>，也就是说，将函数作为参数传递，在合适的时候调用该方法</p>\n<p>C# 中内置了两个常用委托类型，</p>\n<p><strong>无返回值有 0 - 16 个参数的 Action</strong></p>\n<p>使用方法：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\15f7ee4acb274d8491d8f37d0cadb7da.png\"/></p>\n<p><strong>有返回值有 0 - 16 个参数的 Func</strong></p>\n<p>使用方法：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\84aadc01dfee425eba615ef81376516e.png\"/></p>\n<p>代码如下</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">DelegateTest</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token class-name\">Calculator</span> calculator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Calculator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 2 C# 内置委托类型 Action</span>\n            <span class=\"token comment\">// Action 类型委托没有返回值、有 0 - 16 个参数</span>\n            <span class=\"token comment\">// 传入方法名, 注意不是方法</span>\n\n            <span class=\"token comment\">// 2.1 使用 Action 无参数</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"通过 C# 内置委托 Action&lt;&gt; 间接调用 calculator.Report, 结果为:  \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Action</span> actionReport <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Action</span><span class=\"token punctuation\">(</span>calculator<span class=\"token punctuation\">.</span>Report<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            actionReport<span class=\"token punctuation\">.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 1.1 通过函数名调用</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"直接调用 calculator.Report, 结果为: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            calculator<span class=\"token punctuation\">.</span><span class=\"token function\">Report</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 2.2 使用 Action 有 1 个参数</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"通过 C# 内置委托 Action&lt;&gt; 间接调用 calculator.Log, 结果为:  \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> now <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Action<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span> actionLog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Action<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>calculator<span class=\"token punctuation\">.</span>Log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            actionLog<span class=\"token punctuation\">.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 1.2 直接调用</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"直接调用 calculator.Report, 结果为: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            calculator<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 3 C# 内置委托类型 Func</span>\n            <span class=\"token comment\">// Func 中重载方法 17 种, 但是都是必须要有返回值, 第一个参数始终为返回值类型, 之后参数个数从 0 - 16</span>\n\n            <span class=\"token comment\">// 3.1 有参数有返回值</span>\n            <span class=\"token comment\">// Func&lt;返回值类型, 参数 1 类型, 参数 2 类型&gt; 实例化对象 = new Func&lt;返回值类型, 参数 1 类型, 参数 2 类型&gt;(需要调用方法名);</span>\n            <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">&gt;</span></span> funcAdd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Func<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>calculator<span class=\"token punctuation\">.</span>Add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> resAdd <span class=\"token operator\">=</span> funcAdd<span class=\"token punctuation\">.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"通过 C# 内置委托 Func&lt;&gt; 间接调用 calculator.Add, 结果为: {0}\"</span><span class=\"token punctuation\">,</span> resAdd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 1.3 直接调用 calculator.Add</span>\n            resAdd <span class=\"token operator\">=</span> calculator<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"直接调用 calculator.Add, 结果为: {0}\"</span><span class=\"token punctuation\">,</span> resAdd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 3.2 间接调用 calculator.Sub</span>\n            <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">&gt;</span></span> funcSub <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Func<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>calculator<span class=\"token punctuation\">.</span>Sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> resSub <span class=\"token operator\">=</span> funcSub<span class=\"token punctuation\">.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"通过 C# 内置委托 Func&lt;&gt; 间接调用 calculator.Sub, 结果为: {0}\"</span><span class=\"token punctuation\">,</span> resSub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 1.4 直接调用 calculator.Sub</span>\n            resSub <span class=\"token operator\">=</span> calculator<span class=\"token punctuation\">.</span><span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"直接调用 calculator.Sub, 结果为: {0}\"</span><span class=\"token punctuation\">,</span> resSub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 3.3 有返回值无参数</span>\n            <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span> funcGetTime <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Func<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>calculator<span class=\"token punctuation\">.</span>GetTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> resGetTime <span class=\"token operator\">=</span> funcGetTime<span class=\"token punctuation\">.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"通过 C# 内置委托 Func&lt;&gt; 间接调用 calculator.GetTime, 结果为: {0}\"</span><span class=\"token punctuation\">,</span> resGetTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 1.5 直接调用 calculator.GetTime</span>\n            resGetTime <span class=\"token operator\">=</span> calculator<span class=\"token punctuation\">.</span><span class=\"token function\">GetTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"直接调用 calculator.GetTime, 结果为: {0}\"</span><span class=\"token punctuation\">,</span> resGetTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Calculator</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Report</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I have 3 methods.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">double</span></span> num1<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> num2<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> <span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">double</span></span> num1<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> num2<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">-</span> num2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">GetTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> time <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> time<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> time<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Now is {0}, I will record something to text \"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>运行截图如下<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a07d2b69cdaa49dd8807dccb520c7890.png\"/></p>\n<h2><a id=\"2__152\"></a>2 如何自定义委托</h2>\n<p>委托与类同级，也是一种数据类型，因此声明时一般都是声明在以类同级的地方<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f06440f9b36e4b80add27b005739646c.png\"/></p>\n<p>声明方式如下<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9497ffd8f2d74bb19905466bcbbf25d6.png\"/><br/> 使用方式如下</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1012816697374960ac8e9db65d6c5a96.png\"/></p>\n<p>代码如下</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">DelegateTest</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> num3 <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> num4 <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Calculator</span> calculator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Calculator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 自定义委托类型 实例化对象 = new 自定义委托类型(需要调用对象的方法名);</span>\n\n            <span class=\"token class-name\">Calc</span> calcAdd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Calc</span><span class=\"token punctuation\">(</span>calculator<span class=\"token punctuation\">.</span>Add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> resAdd <span class=\"token operator\">=</span> calcAdd<span class=\"token punctuation\">.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span>num3<span class=\"token punctuation\">,</span> num4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"通过自定义委托 Calc 间接调用 calculator.Add, 结果为：{0}\"</span><span class=\"token punctuation\">,</span> resAdd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            resAdd <span class=\"token operator\">=</span> calculator<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>num3<span class=\"token punctuation\">,</span> num4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"直接调用 calculator.Add, 结果为: {0}\"</span><span class=\"token punctuation\">,</span> resAdd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">Calc</span> calcSub <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Calc</span><span class=\"token punctuation\">(</span>calculator<span class=\"token punctuation\">.</span>Sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> resSub <span class=\"token operator\">=</span> calcSub<span class=\"token punctuation\">.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span>num3<span class=\"token punctuation\">,</span>num4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"通过自定义委托 Calc 间接调用 calculator.Sub, 结果为：{0}\"</span><span class=\"token punctuation\">,</span> resSub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            resSub <span class=\"token operator\">=</span> calculator<span class=\"token punctuation\">.</span><span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span>num3<span class=\"token punctuation\">,</span>num4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"直接调用 calculator.Sub, 结果为: {0}\"</span><span class=\"token punctuation\">,</span> resSub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> <span class=\"token function\">Calc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">double</span></span> num1<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Calculator</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">double</span></span> num1<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> num2<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> <span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">double</span></span> num1<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> num2<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">-</span> num2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>结果如下<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c84372ff48f544a1a6f824fa2ebaeabc.png\"/></p>\n<h2><a id=\"3__217\"></a>3 为什么使用委托</h2>\n<p>委托可用于 <strong>模板方法</strong> 和 <strong>回调方法</strong></p>\n<h3><a id=\"31__219\"></a>3.1 模板方法</h3>\n<blockquote>\n<p>什么是模板方法？<br/> 来自网络：<a href=\"https://cloud.tencent.com/developer/article/1910674\">Java设计模式之（十三）——模板方法模式</a><br/> 定义：一个操作中的算法的框架， 而将一些步骤延迟到子类中。 使得子类可以不改<br/> 说人话：父类模板方法定义不变的流程，子类重写流程中的方法。</p>\n</blockquote>\n<p>如下，产品工厂生产产品，包装工厂包装产品<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\53de01bf86f848979e637a773ad62258.png\"/></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">DelegateTest</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 产品工厂生产产品</span>\n            <span class=\"token class-name\">ProductFactory</span> productFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ProductFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>Product<span class=\"token punctuation\">&gt;</span></span> funcBeer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Func<span class=\"token punctuation\">&lt;</span>Product<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>productFactory<span class=\"token punctuation\">.</span>MakeBeer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>Product<span class=\"token punctuation\">&gt;</span></span> funcCola <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Func<span class=\"token punctuation\">&lt;</span>Product<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>productFactory<span class=\"token punctuation\">.</span>MakeCola<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\">// 包装工厂包装产品</span>\n            <span class=\"token class-name\">WarpFactory</span> warpFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WarpFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Box</span> boxBeer <span class=\"token operator\">=</span> warpFactory<span class=\"token punctuation\">.</span><span class=\"token function\">WarpProduct</span><span class=\"token punctuation\">(</span>funcBeer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>boxBeer<span class=\"token punctuation\">.</span>Product<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Box</span> boxCola <span class=\"token operator\">=</span> warpFactory<span class=\"token punctuation\">.</span><span class=\"token function\">WarpProduct</span><span class=\"token punctuation\">(</span>funcCola<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>boxCola<span class=\"token punctuation\">.</span>Product<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">class</span> <span class=\"token class-name\">Product</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Box</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Product</span> Product <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">WarpFactory</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Box</span> <span class=\"token function\">WarpProduct</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>Product<span class=\"token punctuation\">&gt;</span></span> getProduct<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Box</span> box <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Box</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Product</span> product <span class=\"token operator\">=</span> getProduct<span class=\"token punctuation\">.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            box<span class=\"token punctuation\">.</span>Product <span class=\"token operator\">=</span> product<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> box<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProductFactory</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Product</span> <span class=\"token function\">MakeBeer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Product</span> product <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Product</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            product<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Beer\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> product<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Product</span> <span class=\"token function\">MakeCola</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Product</span> product <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Product</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            product<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Cola\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> product<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果如下<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ed109286c83a48cda9dfd58f073db8b2.png\"/></p>\n<p>使用委托的目的则是在于 <strong>假如需要生产新的产品，只需要在 ProductFactory() 里添加新的产品即可</strong>。</p>\n<blockquote>\n<p>以下是刘铁锰老师对委托中模板方法的总结</p>\n<ol><li>相当于填空题</li><li>常位于代码中部</li><li>委托有返回值</li></ol>\n</blockquote>\n<h3><a id=\"32__298\"></a>3.2 回调方法</h3>\n<blockquote>\n<p>什么是回调方法？<br/> 来自网络：<a href=\"https://www.runoob.com/w3cnote/c-callback-function.html\">C 语言回调函数详解</a><br/> 解释： 函数 F1 调用函数 F2 的时候，函数 F1 通过参数给 函数 F2 传递了另外一个函数 F3 的指针，在函数 F2 执行的过程中，函数F2 调用了函数 F3，这个动作就叫做回调（Callback），而先被当做指针传入、后面又被回调的函数 F3 就是回调函数。</p>\n</blockquote>\n<p>虽然说的是 C 语言的回调函数，但是对应 C# 的回调方法道理也是一样的</p>\n<p>继续应该上面的例子，当产品的价格大于 5 时，记录下来<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8505921ccccf40eda4d13efbbbf841ae.png\"/></p>\n<p>代码如下</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">DelegateTest</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">// 生产工厂</span>\n\t\t    <span class=\"token class-name\">ProductFactory</span> productFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ProductFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t    \n\t\t    <span class=\"token comment\">// 日志</span>\n\t\t    <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Logger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t    <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>Product<span class=\"token punctuation\">&gt;</span></span> funcBeer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Func<span class=\"token punctuation\">&lt;</span>Product<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>productFactory<span class=\"token punctuation\">.</span>MakeBeer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t    <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>Product<span class=\"token punctuation\">&gt;</span></span> funcCola <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Func<span class=\"token punctuation\">&lt;</span>Product<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>productFactory<span class=\"token punctuation\">.</span>MakeCola<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t    <span class=\"token class-name\">Action<span class=\"token punctuation\">&lt;</span>Product<span class=\"token punctuation\">&gt;</span></span> funcLog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Action<span class=\"token punctuation\">&lt;</span>Product<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span>Log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">// 包装工厂</span>\n\t\t    <span class=\"token class-name\">WarpFactory</span> warpFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WarpFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t    <span class=\"token class-name\">Box</span> boxBeer <span class=\"token operator\">=</span> warpFactory<span class=\"token punctuation\">.</span><span class=\"token function\">WarpProduct</span><span class=\"token punctuation\">(</span>funcBeer<span class=\"token punctuation\">,</span>funcLog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>boxBeer<span class=\"token punctuation\">.</span>Product<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t    <span class=\"token class-name\">Box</span> boxCola <span class=\"token operator\">=</span> warpFactory<span class=\"token punctuation\">.</span><span class=\"token function\">WarpProduct</span><span class=\"token punctuation\">(</span>funcCola<span class=\"token punctuation\">,</span>funcLog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>boxCola<span class=\"token punctuation\">.</span>Product<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Logger</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Product</span> product<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Product '{0}' created at {1}. Price is {2}\"</span><span class=\"token punctuation\">,</span> product<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> product<span class=\"token punctuation\">.</span>Price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Product</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> Price <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Box</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Product</span> Product <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">WarpFactory</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Box</span> <span class=\"token function\">WarpProduct</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>Product<span class=\"token punctuation\">&gt;</span></span> getProduct<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Action<span class=\"token punctuation\">&lt;</span>Product<span class=\"token punctuation\">&gt;</span></span> logCallback<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Box</span> box <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Box</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Product</span> product <span class=\"token operator\">=</span> getProduct<span class=\"token punctuation\">.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            box<span class=\"token punctuation\">.</span>Product <span class=\"token operator\">=</span> product<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">.</span>Price <span class=\"token operator\">&gt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                logCallback<span class=\"token punctuation\">.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> box<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProductFactory</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Product</span> <span class=\"token function\">MakeBeer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Product</span> product <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Product</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            product<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Beer\"</span><span class=\"token punctuation\">;</span>\n            product<span class=\"token punctuation\">.</span>Price <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> product<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Product</span> <span class=\"token function\">MakeCola</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Product</span> product <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Product</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            product<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Cola\"</span><span class=\"token punctuation\">;</span>\n            product<span class=\"token punctuation\">.</span>Price <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> product<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>运行结果如下<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e520078430bb4f0abc3056cc9ade7d65.png\"/></p>\n<blockquote>\n<p>以下是刘铁锰老师对委托中回调方法的总结</p>\n<ol><li>相当于 “流水线”</li><li>常位于代码末尾</li><li>委托无返回值</li></ol>\n</blockquote>\n<blockquote>\n<p>刘铁锰老师对于委托的整体优缺点总结<br/> 难精通 + 易使用 + 功能强大，一旦滥用后果严重</p>\n<ol><li>方法级别的紧耦合，工作中慎用</li><li>可读性下降，debug 难度增加</li><li>把委托回调、异步调用和多线程纠缠在一起，会让项目难以维护</li><li>使用不当可能会造成内存泄漏和程序性能下降</li></ol>\n</blockquote>\n<h2><a id=\"4__406\"></a>4 多播委托</h2>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">DelegateTest</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">Progarm</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span> \n\t\t<span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">Student</span> stu1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>penColor<span class=\"token operator\">=</span>ConsoleColor<span class=\"token punctuation\">.</span>Red<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Student</span> stu2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> id<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>penColor<span class=\"token operator\">=</span>ConsoleColor<span class=\"token punctuation\">.</span>Green<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Student</span> stu3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> id<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>penColor<span class=\"token operator\">=</span>ConsoleColor<span class=\"token punctuation\">.</span>Blue<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Action</span> action1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Action</span><span class=\"token punctuation\">(</span>stu1<span class=\"token punctuation\">.</span>DoHomework<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Action</span> action2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Action</span><span class=\"token punctuation\">(</span>stu2<span class=\"token punctuation\">.</span>DoHomework<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Action</span> action3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Action</span><span class=\"token punctuation\">(</span>stu3<span class=\"token punctuation\">.</span>DoHomework<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//action1.Invoke();</span>\n            <span class=\"token comment\">//action2.Invoke();</span>\n            <span class=\"token comment\">//action3.Invoke();</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">// 使用 += 实现多播委托</span>\n            action1 <span class=\"token operator\">+=</span> action2<span class=\"token punctuation\">;</span>\n            action1 <span class=\"token operator\">+=</span> action3<span class=\"token punctuation\">;</span>\n            action1<span class=\"token punctuation\">.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> id <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">ConsoleColor</span> penColor <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DoHomework</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span>ForegroundColor <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>penColor<span class=\"token punctuation\">;</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Student {0} doing Homework {1} hours.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>运行结果如下<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\62b26ad4b7f74c9e84c61a18dfacf689.png\"/></p>\n<h2><a id=\"5__459\"></a>5 隐式异步调用</h2>\n<blockquote>\n<p>什么是 <strong>异步调用</strong> ？<br/> <strong>个人理解：</strong><br/> 先来说 <strong>异步</strong>，编程中异步指的是同时进行，也就是宏观意义上的程序的并行（不是同步），而 <strong>同步</strong> 指的是程序的串行。<br/> <strong>调用</strong> 指的是调用某个回调方法。<br/> 结合博客内容来理解就是 <strong>开辟多线程完成某个委托，在代码上看不出来开辟了多线程</strong>。<br/> 之前写过一篇 <a href=\"https://blog.csdn.net/m0_56651882/article/details/126175479?spm=1001.2014.3001.5502\">C# 异步编程</a> 的博客，欢迎访问</p>\n</blockquote>\n<p>使用 <strong>委托的 BeginInvoke</strong> 方法实现 <strong>隐士异步调用</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">DelegateTest</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">Progarm</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span> \n\t\t<span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">Student</span> stu1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>penColor<span class=\"token operator\">=</span>ConsoleColor<span class=\"token punctuation\">.</span>Red<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Student</span> stu2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> id<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>penColor<span class=\"token operator\">=</span>ConsoleColor<span class=\"token punctuation\">.</span>Green<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Student</span> stu3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> id<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>penColor<span class=\"token operator\">=</span>ConsoleColor<span class=\"token punctuation\">.</span>Blue<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Action</span> action1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Action</span><span class=\"token punctuation\">(</span>stu1<span class=\"token punctuation\">.</span>DoHomework<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Action</span> action2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Action</span><span class=\"token punctuation\">(</span>stu2<span class=\"token punctuation\">.</span>DoHomework<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Action</span> action3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Action</span><span class=\"token punctuation\">(</span>stu3<span class=\"token punctuation\">.</span>DoHomework<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t\n            action1<span class=\"token punctuation\">.</span><span class=\"token function\">BeginInvoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            action2<span class=\"token punctuation\">.</span><span class=\"token function\">BeginInvoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            action3<span class=\"token punctuation\">.</span><span class=\"token function\">BeginInvoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> id <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">ConsoleColor</span> penColor <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DoHomework</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span>ForegroundColor <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>penColor<span class=\"token punctuation\">;</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Student {0} doing Homework {1} hours.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>执行结果如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\89286a42c2b94fcdb489bacc3914fb6d.png\"/><br/> 可以看出，代码执行顺序不是顺序的。</p>\n<h2><a id=\"6__518\"></a>6 适当的使用接口替代委托</h2>\n<p>对 3.1 中模板方法示例代码使用接口进行重构</p>\n<p>代码如下</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">DelegateTest</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">// 产品制造工厂</span>\n            <span class=\"token class-name\">IProductFactory</span> makeBeer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MakeBeer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">IProductFactory</span> MakeCalo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MakeCalo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">// 包装产品工厂</span>\n            <span class=\"token class-name\">WarpFactory</span> warpFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WarpFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Box</span> resBeer <span class=\"token operator\">=</span> warpFactory<span class=\"token punctuation\">.</span><span class=\"token function\">WarpProduct</span><span class=\"token punctuation\">(</span>makeBeer<span class=\"token punctuation\">.</span><span class=\"token function\">Make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>resBeer<span class=\"token punctuation\">.</span>Product<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Box</span> resCalo <span class=\"token operator\">=</span> warpFactory<span class=\"token punctuation\">.</span><span class=\"token function\">WarpProduct</span><span class=\"token punctuation\">(</span>MakeCalo<span class=\"token punctuation\">.</span><span class=\"token function\">Make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>resCalo<span class=\"token punctuation\">.</span>Product<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Product</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> Price <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Box</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Product</span> Product <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">WarpFactory</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 接口取代委托</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Box</span> <span class=\"token function\">WarpProduct</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Product</span> product<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Box</span> box <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Box</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            box<span class=\"token punctuation\">.</span>Product <span class=\"token operator\">=</span> product<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> box<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IProductFactory</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token return-type class-name\">Product</span> <span class=\"token function\">Make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">MakeBeer</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IProductFactory</span></span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Product</span> <span class=\"token function\">Make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Product</span> product <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Product</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            product<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Beer\"</span><span class=\"token punctuation\">;</span>\n            product<span class=\"token punctuation\">.</span>Price <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> product<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">MakeCalo</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IProductFactory</span></span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Product</span> <span class=\"token function\">Make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Product</span> product <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Product</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            product<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Calo\"</span><span class=\"token punctuation\">;</span>\n            product<span class=\"token punctuation\">.</span>Price <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> product<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>执行结果如下<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d2cc8d49c0d642dc854d67d695551e1d.png\"/></p>\n<h2><a id=\"7__596\"></a>7 个人总结（接口和委托）</h2>\n<p>使用接口逻辑如下<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\463d96e581704e57b49c357880004fde.png\"/></p>\n<p>使用委托逻辑如下<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\74b7b0d9dfd142ca8f9afcef5d1cd122.png\"/></p>\n<p>目前的理解为：</p>\n<ol><li>从上面两张图可以看出，接口可能更 “粗”，委托更 “细”，以上面为例子，接口判断生产那种产品是在 Main 函数也就是主线程中，而委托判断生产那种产品则是在类的某个方法中；</li><li>接口不能用方法作为参数，而委托可以以方法名作为参数，从而实现动态调用。</li></ol>\n<p><strong>2022.08.29</strong>，后续学完事件再看看有啥新的理解。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-08-29 01:16:19", "summary": "通过刘铁锰老师的入门详解中委托详解记录学习，讲得真的非常好目录什么是委托一切皆地址方法的调用什么是委托如何自定义委托为什么使用委托模板方法回调方法多播委托隐式异步调用适当的使用接口替代委托个人总结接口"}