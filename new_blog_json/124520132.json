{"blogid": "124520132", "writerAge": "码龄2年", "writerBlogNum": "74", "writerCollect": "2262", "writerComment": "1775", "writerFan": "4012", "writerGrade": "6级", "writerIntegral": "6012", "writerName": "不苒", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124520132.jpg", "writerRankTotal": "2728", "writerRankWeekly": "124", "writerThumb": "1988", "writerVisitNum": "89061", "blog_read_count": "4928", "blog_time": "已于 2022-08-07 11:26:51 修改", "blog_title": "【JavaScript】this指向经典面试题（超详细）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9c9e31c54d7343aca5abc665a7495141.png\"/></p>\n<blockquote>\n<p><strong>还在担心面试不通过吗？给大家推荐一个超级好用的刷面试题神器：<a href=\"https://www.nowcoder.com/link/pc_csdncpt_br_qianduan\">牛客网</a>，里面涵盖了各个领域的面试题库，还有大厂真题哦！</strong></p>\n<p><strong>赶快悄悄的努力起来吧，不苒在这里衷心祝愿各位大佬都能顺利通过面试。</strong><br/> <strong>面试专栏分享，感觉有用的小伙伴可以点个订阅，不定时更新相关面试题：<a href=\"https://blog.csdn.net/qq_49002903/category_11753185.html?spm=1001.2014.3001.5482\">面试专栏</a> 。</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c34872323c65435888090476cd0a5dfb.png\"/><br/> </p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_8\">🍉前言</a></li><li><ul><li><a href=\"#_28\">面试题一：</a></li><li><a href=\"#_56\">面试题二：</a></li><li><a href=\"#_106\">面试题三：</a></li><li><a href=\"#_151\">面试题四：</a></li></ul>\n</li><li><a href=\"#_190\">🎃专栏分享：</a></li></ul>\n</div>\n<p></p>\n</blockquote>\n<h1><a id=\"_8\"></a>🍉前言</h1>\n<blockquote>\n<p><strong>本篇文章主要写的是【JS中this指向面试题（超详细代码解读）】，面试遇到的经典问题不少，所以本文总结一写常见的分享给各位。<br/> 只要我们掌握了this的四个绑定规则，仔细的去慢慢分析一定没有问题。接下来为大家展示四个经典的面试题。</strong></p>\n<p>面试题参考文章：</p>\n<ul><li><a href=\"http%EF%BC%9A//t.csdn.cn/Z22yY\">【Web前端面试】葵花宝典（2022版本）—— Vue篇</a></li><li><a href=\"http://t.csdn.cn/uluBH\">【Web前端面试】葵花宝典(2022版本) —— React 篇</a></li><li><a href=\"http%EF%BC%9A//t.csdn.cn/3fm8J\">【Web前端面试】葵花宝典（2022版本）—— CSS篇</a></li><li><a href=\"http%EF%BC%9A//t.csdn.cn/gu7gz\">【Web前端面试】葵花宝典 （2022版本）—— JS篇（上）</a></li><li><a href=\"http%EF%BC%9A//t.csdn.cn/oDF5t\">【Web前端面试】葵花宝典(2022版本)—— JS篇（下）</a></li><li><a href=\"http%EF%BC%9A//t.csdn.cn/OoqMV\">【JavaScript】中this指向相关的经典面试题</a></li><li><a href=\"http%EF%BC%9A//t.csdn.cn/nsaR0\">【JavaScript】作用域提升面试题（详解）</a></li></ul>\n</blockquote>\n<blockquote>\n<p><strong>【面试专栏】—— <a href=\"https://blog.csdn.net/qq_49002903/category_11753185.html?spm=1001.2014.3001.5482\">点击链接即可订阅面试专栏</a></strong></p>\n</blockquote>\n<blockquote>\n<p>由于先写代码然后再在代码块下面进行分析解释，怕xdm找不到对应的句子，所以直接就在代码块中，相应的句子后面给出了分析解释。下面的四个案例皆是如此，望见谅。</p>\n</blockquote>\n<h2><a id=\"_28\"></a>面试题一：</h2>\n<p>这道面试题非常简单，无非就是绕一下，希望把面试者绕晕：</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'window'</span>\n<span class=\"token comment\">// var name = 'window' 表示在window中name的值为 ’window‘</span>\n\n<span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'person'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">sayName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sayName</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">var</span> sss <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span>sayName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">sss</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// window  独立调用指向全局对象window</span>\n\n    person<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// person  隐式调用</span>\n\n    <span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>sayName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// person  和上一句效果一样(person.sayName) 带小括号不带小括号没区别</span>\n\n    <span class=\"token punctuation\">(</span>b <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span>sayName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// window  间接引用 ，(b = person.sayName)的结果是一个值，并没有和person对象有联系，所以后面加一个（）进行调用的时候，还是属于默认绑定（直接调用），this指向全局对象</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"_56\"></a>面试题二：</h2>\n<p>这道面试题比上一道更加绕一些，在对象内部进行了函数的声明：</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'window'</span>\n\n<span class=\"token keyword\">var</span> person1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'person1'</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function-variable function\">foo1</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function-variable function\">foo2</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function-variable function\">foo3</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function-variable function\">foo4</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> person2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'person2'</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 正题来咯</span>\n\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">foo1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// person1 (隐式绑定)</span>\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">foo1</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// person2 (call显示绑定person2，显示绑定优先级大于隐式绑定)</span>\n\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">foo2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// window (箭头函数不绑定作用域，找到上层作用域为全局window)</span>\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">foo2</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// window (箭头函数没有this，call()无效)</span>\n\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">foo3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// window (person1.foo3()得到一个return的函数，再加上一个小括号属于独立调用指向全局对象window)</span>\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">foo3</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// window (person1.foo3.call(person2)这句话得到返回值后，后面加小括号调用，还是属于独立调用 指向window) </span>\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">foo3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// person2 (最终调用return函数时，显示绑定上了person2)</span>\n\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">foo4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// person1 (person1.foo4()这句话得到return后的函数为箭头函数进行调用，箭头函数中没有this向上一层作用域找，上层作用域为foo4,this指向person1)</span>\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">foo4</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// person2 (上层作用域被显示绑定为person2 ，在箭头函数中找不到this后，向上层所用域找 就找到了之前被显示绑定的person2)</span>\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">foo4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// person1 (person1.foo4()这句话得到return后的函数为箭头函数进行显示绑定person2,但箭头函数中没有this，显示绑定无效，向上一层作用域找，找到函数foo4，this指向person1)</span>\n\n\n</code></pre>\n<h2><a id=\"_106\"></a>面试题三：</h2>\n<p>第三题就更加绕了，学过构造函数的小伙伴应该不难看懂，没学过的也可以去学习一下：</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'window'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Person</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">foo1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">foo2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">foo3</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">foo4</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> person1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'person1'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> person2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'person2'</span><span class=\"token punctuation\">)</span>\n\n\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">foo1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// person1  (隐式绑定)</span>\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">foo1</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// person2 (显示绑定person2，显示绑定优先级高于person1.foo1的隐式绑定)</span>\n\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">foo2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// person1  (上层作用域中的this是person1函数)</span>\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">foo2</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// person1 (显示绑定在箭头函数中无效，所以结果还是上层作用域中的this是person1函数)</span>\n\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">foo3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// window (person1.foo3()得到返回函数 加小括号进行直接调用 this指向全局作用域window)</span>\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">foo3</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// window (person1.foo3.call(person2)得到返回函数后，独立函数调用指向全局)</span>\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">foo3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// person2 (person1.foo3()得到返回函数后，显示绑定person2)</span>\n\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">foo4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// person1 (箭头函数中没有this，向上一层作用域找 this指向person1)</span>\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">foo4</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// person2 (person1.foo4.call(person2)显示绑定person2，得到返回的箭头函数后，向上一层作用域找，this指向person2)</span>\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">foo4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// person1 (person1.foo4()得到返回箭头函数显示绑定person2无效，向上一层作用域找，this指向person1)</span>\n\n\n</code></pre>\n<h2><a id=\"_151\"></a>面试题四：</h2>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'window'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Person</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'obj'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 此时foo1，foo2的上层作用域为obj对象</span>\n        <span class=\"token function-variable function\">foo1</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">foo2</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> person1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'person1'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> person2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'person2'</span><span class=\"token punctuation\">)</span>\n\n\nperson1<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">foo1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// window  (person1.obj.foo1()得到返回函数后直接调用，this指向全局对象)</span>\nperson1<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">foo1</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// window (还是直接调用，this指向全局对象)</span>\nperson1<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">foo1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// person2 (person1.obj.foo1()这句话得到返回函数后，使用显示调用绑定person2，this指向person2)</span>\n\nperson1<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">foo2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// obj (person1.obj.foo2()这句话得到返回函数后调用，但是箭头函数没有this，向上一层作用域找，上一层作用域为foo2函数，foo2是被obj对象调用的，所以this指向obj对象)</span>\nperson1<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">foo2</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// person2 (person1.obj.foo2.call(person2)将foo2的上层作用域指向了person2，再进行调用的时候，上一层作用域就是person2)</span>\nperson1<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">foo2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// obj (person1.obj.foo2()的到返回函数，使用显示绑定call无效，上一层作用域为foo2函数，foo2是被obj对象调用的，所以this指向obj对象)</span>\n</code></pre>\n<blockquote>\n<p>这里可能产生一点有疑问的地方，首先说明在对象中是没有作用域的，<code>person1.obj.foo2()() </code>这句，按照之前的理解，<code>person1.obj.foo2()</code>这句话得到返回函数后调用，但是箭头函数没有this，向上一层作用域找，因为obj对象是没有作用域的，按道理来讲this应该指向person1，但是foo2函数是被obj对象隐式绑定进行调用的，所以会指向obj对象。</p>\n</blockquote>\n<hr/>\n<blockquote>\n<p>不了解this的四种绑定规则或者this的指向问题的小伙伴，可以参考<a href=\"http://t.csdn.cn/pSTZ0\">【JavaScript】this关键字的指向问题（五千字详解）</a>和<a href=\"http://t.csdn.cn/vRgSh\">JavaScript中this四种绑定规则优先级比较与箭头函数中的this获取</a>，有详细进行描述与举例说明。</p>\n</blockquote>\n<h1><a id=\"_190\"></a>🎃专栏分享：</h1>\n<blockquote>\n<p><code> JavaScript相关面试题就更新到这里啦，相关 Web前端面试题 可以订阅专栏哦</code>🥰<br/> <strong>专栏地址：</strong><a href=\"https://blog.csdn.net/qq_49002903/category_11753185.html\">《面试必看》</a></p>\n</blockquote>\n<hr/>\n<blockquote>\n<p>⏳ <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          名言警句：说能做的做说过的\n         \n        \n       \n       \n        \\textcolor{red} {名言警句：说能做的做说过的}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: red;\">名言警句：说能做的做说过的</span></span></span></span></span> <br/><br/> ✨ <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          原创不易，还希望各位大佬支持一下\n         \n        \n       \n       \n        \\textcolor{blue}{原创不易，还希望各位大佬支持一下}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: blue;\">原创不易，还希望各位大佬支持一下</span></span></span></span></span> <br/><br/> 👍 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          点赞，你的认可是我创作的动力！\n         \n        \n       \n       \n        \\textcolor{green}{点赞，你的认可是我创作的动力！}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: green;\">点赞，你的认可是我创作的动力！</span></span></span></span></span> <br/><br/> ⭐️ <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          收藏，你的青睐是我努力的方向！\n         \n        \n       \n       \n        \\textcolor{green}{收藏，你的青睐是我努力的方向！}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: green;\">收藏，你的青睐是我努力的方向！</span></span></span></span></span> <br/><br/> ✏️ <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          评论，你的意见是我进步的财富！\n         \n        \n       \n       \n        \\textcolor{green}{评论，你的意见是我进步的财富！}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: green;\">评论，你的意见是我进步的财富！</span></span></span></span></span> <br/></p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-08-07 11:26:51", "summary": "在这里插入图片描述还在担心面试不通过吗？给大家推荐一个超级好用的刷面试题神器：牛客网，里面涵盖了各个领域的面试题库，还有大厂真题哦！赶快悄悄的努力起来吧，不苒在这里衷心祝愿各位大佬都能顺利通过面试。面"}