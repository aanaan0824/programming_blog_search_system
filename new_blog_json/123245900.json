{"blogid": "123245900", "writerAge": "码龄6年", "writerBlogNum": "54", "writerCollect": "907", "writerComment": "88", "writerFan": "250", "writerGrade": "5级", "writerIntegral": "3672", "writerName": "不过如此1951", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123245900.jpg", "writerRankTotal": "6036", "writerRankWeekly": "40802", "writerThumb": "162", "writerVisitNum": "430793", "blog_read_count": "1358", "blog_time": "已于 2022-03-03 16:45:22 修改", "blog_title": "python 通过clr库调用C#写的dll文件（详细）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\3db64d7832a042d19b01c543244cff08.png\"/></p>\n<h2>前提摘要：</h2>\n<p>所谓dll文件也叫库文件，可以简单的把库文件看成一种代码仓库，它提供给使用者一些可以直接拿来用的变量、函数或类。比如，再我们安装一些软件的时候，目录下面会有很多dll文件。当我们执行这个程序时，相应的DLL文件就会被调用。一个应用程序可有多个DLL文件，一个DLL文件也可能被几个应用程序所共用，这样的DLL文件被称为共享DLL文件。关于dll文件解释大家可自行百度。</p>\n<p>今天要做的主要是使用python如何调用C#写的dll文件，并使用文件中的方法。但是想要使用dll文件中的方法需要知道dll中有哪些方法可用，那么就得有源码，或者有接口文档也可以。</p>\n<p></p>\n<p></p>\n<h2>项目介绍：</h2>\n<p>首先，先看下我们dll文件的C#代码结构：</p>\n<pre><code class=\"language-cs\">namespace HwTest\n{\n    public class HwTestClient\n    {\n        public int DownloadFile(string ipaddress, string urlhash, string filename, string directory)\n        {\n            ///下载函数的具体内容就省略了\n        }\n\n\n    }\n\n\n\n}</code></pre>\n<p>  </p>\n<p>然后，看看再python中是如何调用的， 大概流程如下：</p>\n<p></p>\n<p><em><strong>step 1：</strong></em> 先将dll文件放到你python文件的同目录下，或者就是引入dll文件的位置，比如：</p>\n<pre><code class=\"language-python\">import os\n\nnewpath = os.path.dirname(os.path.abspath(__file__)) + '\\\\lib\\\\win32\\\\x86'\nsys.path.append(newpath)</code></pre>\n<p></p>\n<p><em><strong>step 2：</strong></em> 依次导入clr 库，加载dll文件：</p>\n<pre><code class=\"language-python\">    import clr\n\n\tclr.FindAssembly('CfeIec2Mms.dll')\n\tclr.FindAssembly('CfeIEC61850RepClient.dll')\n\tclr.FindAssembly('CfeMms2Iec.dll')\n\tclr.FindAssembly('CfeTraceDotNet.dll')\n\n\tclr.FindAssembly('IEC61850Library.dll')\n\tclr.AddReference('IEC61850Library')\n\n\tclr.FindAssembly('Python_iec61850Adapter.dll')\n\tclr.AddReference('Python_iec61850Adapter')</code></pre>\n<p></p>\n<p><em><strong>step 3：</strong></em>从 C# 的命名空间中导入所有的类和方法：</p>\n<pre><code class=\"language-python\">from HwTest import *  # HwTest 就是之前源码中的namespace</code></pre>\n<p style=\"text-align:center;\"></p>\n<p><strong>step 4:  </strong>正式开始使用dll 中的方法了，这里要重点说一下，在使用C# 中的方法之前呢也需要先实例化一下类，然后方可使用类中的所有方法：</p>\n<pre><code class=\"language-python\">\tdef open_xxx_connection(self, ipAddress, username, password, defaultProtocol,     \n        deviceType, configChangePassword, forceValuePassword):\n\t\tself._mori = HwTestClient() # 将C#中的类实例化, 实例化以后self._mori 就可调用类中的所有函数了\n\t\tself._ipAddress = str(ipAddress)\n\t\tself._username = str(username)\n\t\tself._password = str(password)\n\t\tself._defaultProtocol = str(defaultProtocol)\n\t\tself._deviceType = str(deviceType)\n\t\tself._configChangePassword = str(configChangePassword)\n\t\tself._forceValuePassword = str(forceValuePassword)</code></pre>\n<p></p>\n<p><em><strong>step 5：</strong></em>如上在步骤4中已经将C# 中的HwTestClient类实例化，接下来就可随意使用类中的函数了，这里举一个调用类中DownloadFile的函数的例子，调用的话也很见到，C#中需要几个参数就传几个参数即可，调用其他函数也使用同样方法：</p>\n<pre><code class=\"language-python\">\tdef _download_file_from_mori(self, filename, directory=\"\"):\n\t\tdirectory = str(directory)\n\n\t\tstatus = self._mori.DownloadFile(self._ipAddress, \"/\", filename, directory)\n        # 这里 DownloadFile 函数就是调用类中的函数了\n\n\t\tif status == 0:\n\t\t\tlogger.info('Download OK')\n\t\telif status == 1:\n\t\t\traise AssertionError('File not found')\n\t\telif status == 2:\n\t\t\traise AssertionError('Directory false')\n\t\telif status == 3:\n\t\t\traise AssertionError('Only for DEVINFO.TXT File cannot be generated')\n\t\telif status == 4:\n\t\t\traise AssertionError('Can not download web string')\n\t\telif status == 10:\n\t\t\traise AssertionError('Web logoff need logon first')\n\n\t\treturn status</code></pre>\n<p> <strong>step 6：</strong> 接下来就是按部就班了，想实现什么功能调用什么函数即可，最好能看懂一点C#代码则会提高效率，其他的就不赘述了。</p>\n<p></p>\n<p></p>\n<h2>遇到的坑：</h2>\n<p>有一个函数调用C# 函数的时候需要调用一个C#的枚举类，但是C#的枚举类和python枚举类有些不同，传入python枚举类的name是不行的，C#理解不了。如何解决的呢，可以根据C#的枚举类再重新定义一个python的枚举类，value用int形表示，传参的时直接传python枚举类的value即可。</p>\n<p>这是C#的枚举类：</p>\n<pre><code class=\"language-cs\">        public enum EFirmwareDeviceType\n        {\n            FW_DEVICETYPE_NONE = 0,\n            FW_DEVICETYPE_Q100_V1X = 1,\n            FW_DEVICETYPE_Q100_V2X = 2,\n            FW_DEVICETYPE_Q200 = 3,\n            FW_DEVICETYPE_P850_V2_23 = 4,\n            FW_DEVICETYPE_SICAM_T_WITH_LOGON = 5,\n            FW_DEVICETYPE_MMU_WITH_LOGON = 6,\n            FW_DEVICETYPE_IO_WITH_LOGON = 7,\n            FW_DEVICETYPE_MAX = 7\n        }</code></pre>\n<p>这是python重写的枚举类：</p>\n<pre><code class=\"language-python\">class EFirmwareDeviceType(enum.Enum):\n\tFW_DEVICETYPE_NONE = 0,\n\tFW_DEVICETYPE_Q100_V1X = 1,\n\tFW_DEVICETYPE_Q100_V2X = 2,\n\tFW_DEVICETYPE_Q200 = 3,\n\tFW_DEVICETYPE_P850_V2_23 = 4,\n\tFW_DEVICETYPE_SICAM_T_WITH_LOGON = 5,\n\tFW_DEVICETYPE_MMU_WITH_LOGON = 6,\n\tFW_DEVICETYPE_IO_WITH_LOGON = 7,\n\tFW_DEVICETYPE_MAX = 7</code></pre>\n<p>比如，调用C#函数时入参需要传 FW_DEVICETYPE_Q200， 直接传 肯定报错，这里可以传 EFirmwareDeviceType.FW_DEVICETYPE_Q200.value 即可完美解决！</p>\n<p></p>\n<p></p>\n<h2>写在最后： </h2>\n<p> 总体来说，只要方法找对了，python 调用C# 的dll库不难；当然，其中也会遇到坑，换个思路问题就好解决了。最后，如果文章能帮助到你，麻烦点个赞哈！</p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n</div>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 1, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-03 16:45:22", "summary": "前提摘要：所谓文件也叫库文件，可以简单的把库文件看成一种代码仓库，它提供给使用者一些可以直接拿来用的变量、函数或类。比如，再我们安装一些软件的时候，目录下面会有很多文件。当我们执行这个程序时，相应的文"}