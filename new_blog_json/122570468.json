{"blogid": "122570468", "writerAge": "码龄8年", "writerBlogNum": "78", "writerCollect": "163", "writerComment": "22", "writerFan": "806", "writerGrade": "4级", "writerIntegral": "859", "writerName": "Andy阿辉", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122570468.jpg", "writerRankTotal": "94957", "writerRankWeekly": "41177", "writerThumb": "60", "writerVisitNum": "53433", "blog_read_count": "1813", "blog_time": "于 2022-01-18 22:40:23 发布", "blog_title": "C#多线程开发-线程间通讯", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h3><a id=\"_0\"></a>前言</h3>\n<p>在实际的开发过程中，经常需要使用很多子线程来实现某些功能需求，有时候当主线程分配的任务过多或做一些需要长时间等待和响应的工作时单独使用子线程来实现可能更好，可是当我们程序中的子线程太多的时候，有些需求就需要在线程之间进行通讯或者传递消息。那么对于C#来说，是如何实现线程间通讯的。</p>\n<p><strong>一、AutoResetEvent</strong></p>\n<p><strong>介绍</strong></p>\n<p>AutoResetEvent表示信号量，可用于线程间发送信号互相通讯，线程通过调用WaitOne来等待信号。</p>\n<p>如果AutoResetEvent为非终止状态，则线程会被阻止,并等待当前控制资源的线程(主线程)调用Set()发出资源可用的信号时释放等待线程。此时AutoResetEvent将保持终止状态，直到一个正在等待的线程被释放，然后自动返回非终止状态。如果没有任何线程在等待，则状态将无限期的保持为终止状态。</p>\n<p>AutoResetEvent可在声明时，传递布尔值到构造函数，初始化其初始状态。若初始状态为终止状态则为true,否则为false。</p>\n<p>简单解释就是非终止状态下子线程在使用AutoResetEvent在方法WainOne时需要等待AutoResetEvent的信号，否则不往下继续执行，无信号则一直等待。终止状态就是无需等待直接可以顺序执行。</p>\n<pre><code>//初始化为非终止状态\nprivate AutoResetEvent threadOne = new AutoResetEvent(false);\n</code></pre>\n<p><strong>常用方法</strong></p>\n<p><strong>Set()：</strong> 表示AutoResetEvent发送信号，在主线程或者掌握资源的线程中使用。</p>\n<p><strong>WaitOne()：</strong> 等待信号，在子线程中使用，如果初始化的AutoResetEvent默认为非终止状态，当子线程运行到WaitOne()程序时，则线程等待，后面的不执行。直到Set()信号发出，才顺序执行。</p>\n<p><strong>Demo案例</strong></p>\n<p>假设我去书店买书，选中书后需要先去缴费处付钱，付完钱后去仓库取书，走就行。</p>\n<p>在此业务中我属于主线程，收费处和仓库为子线程。</p>\n<p>主线程</p>\n<pre><code>        const int num = 400;\n        //默认为非终止状态，必须得等待信号量。\n         static AutoResetEvent threadPayMoneyOne = new AutoResetEvent(false);               \n         static AutoResetEvent threadGetBookTwo = new AutoResetEvent(false);\n\n        static int number;                           \n        static void Main(string[] args)\n        {\n            Thread PaymoneyThread = new Thread(new ThreadStart(PayMoneyOne));\n            PaymoneyThread.Name = \"缴费线程\";\n            PaymoneyThread.Start();\n\n            Thread GetBookThread = new Thread(new ThreadStart(GetBookTwo));\n            GetBookThread.Name = \"仓库线程\";            \n            GetBookThread.Start();\n\n            for (int i = 0; i &lt; num; i++)\n            {\n                Console.WriteLine(\"买书主线程：数量 \"+i);\n                number = i;\n\n                //主线程通知两个子线程\n                threadPayMoneyOne.Set();\n                threadGetBookTwo.Set();\n                Thread.Sleep(0);\n            }\n\n            PaymoneyThread.Abort();\n            GetBookThread.Abort();\n            \n            Console.ReadKey();\n        }\n</code></pre>\n<p>子线程</p>\n<pre><code>        /// &lt;summary&gt;\n        /// 缴费处\n        /// &lt;/summary&gt;\n        static void PayMoneyOne() \n        {\n            while (true)\n            {\n                threadPayMoneyOne.WaitOne();\n\n                Console.WriteLine(\"Thread Name=\" + Thread.CurrentThread.Name + \"，number：\" + number);\n                Thread.Sleep(0);\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 仓库处\n        /// &lt;/summary&gt;\n        static void GetBookTwo() \n        {\n            while (true)\n            {\n                threadGetBookTwo.WaitOne();\n\n                Console.WriteLine(\"Thread Name=\"+Thread.CurrentThread.Name+\"，number：\"+number);\n                Thread.Sleep(0);\n            }\n        }\n</code></pre>\n<p>验证图片</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\6adbfb79983183130d37e6e3ae3ba078.png\"/></p>\n<p>可以发现当在主线程中循环的调用两个子线程的Set()方法后，子线程就会立即执行，否则就等待不往下执行。</p>\n<p>利用AutoResetEvent中的Set()和WaitOne()来进行线程间的通讯，在日常的软件开发中可以帮助我们更好的实现更加复杂的业务。</p>\n<p><strong>二、ManualResetEvent</strong></p>\n<p>ManualResetEvent和AutoResetEvent都可用作线程间通讯的，字面意思看看到ManualResetEvent是手动通讯，AutoResetEvent是自动的。</p>\n<p>两者用法基本一样，最最根本的不同是，AutoResetEvent在子线程中调用完WaitOne()方法后，AutoResetEvent就又进入到了非终止状态，其它调用了WaitOne的线程则必须继续等待。而ManualResetEvent则不同，它在调用完WWaitOne后不更改ManualResetEvent信号量的状态，其余调用WainOne的线程也可以收到信号。</p>\n<p>若要使得ManualResetEvent和AutoResetEvent保持一致的行为，则在ManualResetEvent调用完WainOne后，再次调用Reset就可更改信号量状态。</p>\n<h3><a id=\"_112\"></a>小寄语</h3>\n<p>人生短暂，我不想去追求自己看不见的，我只想抓住我能看得见的。</p>\n<blockquote>\n<p>原创不易，给个关注。</p>\n</blockquote>\n<p>我是<strong>阿辉</strong>，感谢您的阅读，如果对你有帮助，麻烦点赞、转发 谢谢。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-01-18 22:40:23", "summary": "前言在实际的开发过程中，经常需要使用很多子线程来实现某些功能需求，有时候当主线程分配的任务过多或做一些需要长时间等待和响应的工作时单独使用子线程来实现可能更好，可是当我们程序中的子线程太多的时候，有些"}