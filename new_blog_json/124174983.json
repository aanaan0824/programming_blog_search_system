{"blogid": "124174983", "writerAge": "码龄1年", "writerBlogNum": "58", "writerCollect": "2337", "writerComment": "3617", "writerFan": "5857", "writerGrade": "6级", "writerIntegral": "6301", "writerName": "计算机魔术师", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124174983.jpg", "writerRankTotal": "2278", "writerRankWeekly": "85", "writerThumb": "2175", "writerVisitNum": "89231", "blog_read_count": "775", "blog_time": "已于 2022-08-17 17:48:19 修改", "blog_title": "【Python | 入门】 从输出打印到面对对象（五分钟速通Python）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8005761f9a1c4525a95b118212679668.png\"/></p>\n<blockquote>\n<p>🤵‍♂️ 个人主页: <a href=\"https://cpt-magician.blog.csdn.net/?type=blog\">@计算机魔术师</a><br/> 👨‍💻 作者简介：CSDN内容合伙人，全栈领域优质创作者。<br/> 🌐 推荐一款找工作神器网站: <a href=\"https://www.nowcoder.com/link/pc_csdncpt_jsjmss_python\">宝藏网站</a> |笔试题库|面试经验|实习招聘内推|</p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>Python轻松上手</h3>\n<ul><li><a href=\"#_pythonpy_13\">一、 编写第一个python.py</a></li><li><a href=\"#_py_49\">二、 固定数据介绍.py</a></li><li><a href=\"#_py_75\">三、 列表的性质以及增删改查.py</a></li><li><a href=\"#_sinxpy_128\">四、 小小的任务：求sinx曲线图形面积.py</a></li><li><a href=\"#_py_157\">五、 常用操作符.py</a></li><li><a href=\"#_py_172\">六、 条件判断语句.py</a></li><li><a href=\"#__207\">七、 字符串索引&amp;切片&amp;增删改查</a></li><li><a href=\"#__315\">八、 对文件处理操作</a></li><li><a href=\"#__343\">九、 统计小说的单词词频</a></li><li><a href=\"#__384\">十、 用户函数自定义</a></li><li><a href=\"#_python_418\">十一、 python方法与函数对比</a></li><li><a href=\"#__436\">十二、 面对对象实例</a></li><li><a href=\"#_python_458\">十三、 python模块</a></li><li><a href=\"#___494\">今日份推荐 —— 牛客网</a></li></ul>\n</div>\n<p></p>\n<blockquote>\n<p>🎏<strong>该篇讲解以代码和结果结合，能够快速上手python基础用法</strong><br/> <strong>源码：</strong> <a href=\"https://download.csdn.net/download/weixin_66526635/85134489\">传送门</a></p>\n</blockquote>\n<h1><a id=\"_pythonpy_13\"></a>一、 编写第一个python.py</h1>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># python中变量不需要声明 但必须赋值 赋值后才能创建 </span>\n<span class=\"token comment\"># 所以也有人把变量称为名字</span>\n\n<span class=\"token comment\"># python 的输出代码</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># hello world yyds</span>\n\n魔术师 <span class=\"token operator\">=</span> <span class=\"token number\">666</span> <span class=\"token comment\"># 因为python使用 utf-8编码所以可以用中文</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>魔术师<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出变量</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Majician\"</span><span class=\"token punctuation\">,</span>魔术师<span class=\"token punctuation\">)</span><span class=\"token comment\"># 同时输出字符和变量 </span>\n\n<span class=\"token comment\">#进阶知识</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Majiciam\"</span><span class=\"token punctuation\">,</span> 魔术师真酷<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">'!'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 设置结尾</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Majiciam\"</span><span class=\"token punctuation\">,</span> 魔术师真酷<span class=\"token punctuation\">,</span> sep<span class=\"token operator\">=</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">'!'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 设置 间隔</span>\n\n</code></pre>\n<p>结果：</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># hello world yyds</span>\nhello world\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span>魔术师真酷 <span class=\"token operator\">=</span> <span class=\"token number\">666</span>  <span class=\"token comment\"># 因为python使用 utf-8编码所以可以用中文</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>魔术师真酷<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出变量</span>\n<span class=\"token number\">666</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Majician\"</span><span class=\"token punctuation\">,</span> 魔术师真酷<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 同时输出字符和变量</span>\nMajician <span class=\"token number\">666</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Majiciam\"</span><span class=\"token punctuation\">,</span> 魔术师真酷<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">'!'</span><span class=\"token punctuation\">)</span>\nMajiciam <span class=\"token number\">666</span>!\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Majiciam\"</span><span class=\"token punctuation\">,</span> 魔术师真酷<span class=\"token punctuation\">,</span> sep<span class=\"token operator\">=</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span>end<span class=\"token operator\">=</span><span class=\"token string\">'!'</span><span class=\"token punctuation\">)</span>\nMajiciam<span class=\"token operator\">-</span><span class=\"token number\">666</span>!\n\n</code></pre>\n<p><img alt=\"print函数官方介绍\" src=\"..\\..\\static\\image\\c0f99f599cbc49b5ba541e6cee573879.png\"/></p>\n<h1><a id=\"_py_49\"></a>二、 固定数据介绍.py</h1>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 如何用python中的数据结构/数据表示和存放数据</span>\n<span class=\"token comment\"># 标准数据类型 = 【</span>\n\n<span class=\"token comment\"># ”Number(数字）：[’int.float,bool,complex(复数)'],</span>\n<span class=\"token comment\"># “String(字符串)”,</span>\n<span class=\"token comment\"># “list（列表）”，</span>\n<span class=\"token comment\"># “Dictionary:字典”，</span>\n<span class=\"token comment\"># “Set：（集合）”，</span>\n<span class=\"token comment\"># “Tuple:(元组)\"</span>\n\n<span class=\"token comment\"># 】</span>\n\n<span class=\"token keyword\">import</span> math\n\na <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">3.5</span>\nb <span class=\"token operator\">=</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># absolute value</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n\nc <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span>sin<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n\n\n</code></pre>\n<h1><a id=\"_py_75\"></a>三、 列表的性质以及增删改查.py</h1>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 列表（List)</span>\nall_in_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'love'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 列表每个元素都是可变的，</span>\n<span class=\"token comment\"># 列表中每个元素都是有序的，</span>\n<span class=\"token comment\"># 列表可以容纳Python所有对象</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>all_in_list<span class=\"token punctuation\">)</span>\n\nindex <span class=\"token operator\">=</span> all_in_list<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\nindex <span class=\"token operator\">=</span> all_in_list<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\nindex <span class=\"token operator\">=</span> all_in_list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 列表的切片，顾头不顾尾，只有1到2，不包括2，</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 列表的增删改查</span>\n\nall_in_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 附加最后一个元素</span>\nall_in_list<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pre_hello\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 插入元素</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>all_in_list<span class=\"token punctuation\">)</span>\n\nall_in_list<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 删除指定元素</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>all_in_list<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">del</span> all_in_list<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 删除元素</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>all_in_list<span class=\"token punctuation\">)</span>\n\nall_in_list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>all_in_list<span class=\"token punctuation\">)</span>\n\n\n\n<span class=\"token comment\">#for循环  #效率底 所以使用列表推导式</span>\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    x<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#print(x)</span>\n\n<span class=\"token comment\">#列表推导式</span>\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i<span class=\"token operator\">**</span><span class=\"token number\">2</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\nz <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i<span class=\"token operator\">**</span><span class=\"token number\">2</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> i<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">#输出偶数项</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"_sinxpy_128\"></a>四、 小小的任务：求sinx曲线图形面积.py</h1>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> math\n\nn <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\nwidth <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>pi <span class=\"token operator\">/</span> n\n\n<span class=\"token comment\"># 方法一：for循环建立核心数据结构</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    x<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> width<span class=\"token punctuation\">)</span>\n    y<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>sin<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 绝对值</span>\nsums <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> width  <span class=\"token comment\"># 求和函数</span>\n\n\n<span class=\"token comment\"># 列表推导式建立核心数据结构（尽量不用for循环，时间复杂度高）</span>\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> width <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>sin<span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\nz <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>sin<span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> width <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\nsums <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sums<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h1><a id=\"_py_157\"></a>五、 常用操作符.py</h1>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># python 操作符 大多与C语言类似</span>\n<span class=\"token comment\"># 赋值 关系 运算 逻辑 等 （也是返回一个值)</span>\n\n<span class=\"token comment\"># 逻辑</span>\n\nres <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span>  <span class=\"token comment\"># 不同时可以连续比较 猜测其在对 &lt; &gt; 进行重载 没有参数返回Boll型数据，又参数返回类继续比较</span>\nres <span class=\"token operator\">=</span> <span class=\"token string\">'M'</span> <span class=\"token keyword\">in</span> <span class=\"token string\">'Magic'</span>  <span class=\"token comment\"># 判断是否在里面</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n\n\n</code></pre>\n<h1><a id=\"_py_172\"></a>六、 条件判断语句.py</h1>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 只有 if  elif  else while 没有switch了</span>\n\n<span class=\"token comment\"># 条件判定语句 if 后面语句可以不用加()</span>\n<span class=\"token keyword\">if</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 冒泡排序法</span>\n\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\nn <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 循环次数更多，时间复杂度更高</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 保证在循环中x[i]值最大，前面小于的不管他，一旦有一个x[j]&gt;x[i] j+1后面也全大于 x[j] 和x[i]一直调换</span>\n        <span class=\"token keyword\">if</span> x<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 调换方法！！！</span>\n            x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h1><a id=\"__207\"></a>七、 字符串索引&amp;切片&amp;增删改查</h1>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 字符串</span>\n<span class=\"token comment\"># 任何在这双引号的文字</span>\n<span class=\"token comment\"># 单引号其实和双引号完全一样，但在开发时建议引入用单引号,</span>\n<span class=\"token comment\"># '''三个引号被用于长段文字或说明，只要引号不结束，你就可以任意换行'''</span>\n<span class=\"token comment\"># 字符串为不可变数据类型</span>\n\n\nstring <span class=\"token operator\">=</span> <span class=\"token string\">\"字符串\"</span>\n\nstring <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">'''hello\n\n嘿嘿\n\nworld'''</span>\n\nstring <span class=\"token operator\">=</span> <span class=\"token string\">'my ,name'</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 字符串基本用法，</span>\n<span class=\"token comment\"># 拼接 char1 + char2 + char3，</span>\n<span class=\"token comment\"># 重复 'word'*3，</span>\n<span class=\"token comment\"># 转换 int(string)，</span>\n<span class=\"token comment\"># 切片与索引：</span>\n<span class=\"token comment\"># str[-3],</span>\n<span class=\"token comment\"># str[1:4],</span>\n<span class=\"token comment\"># str[3:]</span>\n\nres <span class=\"token operator\">=</span> string<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 字符串索引</span>\nres <span class=\"token operator\">=</span> string<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 字符串索引</span>\n\nres <span class=\"token operator\">=</span> string <span class=\"token operator\">*</span> <span class=\"token number\">3</span>\n\nres <span class=\"token operator\">=</span> string <span class=\"token operator\">+</span> <span class=\"token string\">' is '</span>\n\n<span class=\"token comment\"># 字符串自身属性</span>\n\n<span class=\"token comment\"># 分割</span>\nres <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>sep<span class=\"token operator\">=</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 默认按照空格切割开,可以设置separate设置隔开符</span>\n<span class=\"token comment\"># 返回值是一个列表，</span>\n\n<span class=\"token comment\">#注意！！！！：string是不可变的数据类型,不能对其数据进行改动， 除非对名字重新赋值</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>string<span class=\"token punctuation\">)</span>\nstring<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'y'</span> <span class=\"token comment\">#报错！！</span>\n\n<span class=\"token comment\">#小写变大写</span>\nres <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p>字典的创建 索引&amp;增删改查</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 字典 大括号 ，列表 中括号</span>\n\ndictionary <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string\">'BIDU'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'baidu'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'SINA'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'sina'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'YOKU'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'youku'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># 键 - 值 成对出现;</span>\n<span class=\"token comment\"># 键不能重复，</span>\n<span class=\"token comment\"># 键不可更改，值可修改！！！！！ 字符串也是 列表则可以</span>\n<span class=\"token comment\"># 键来索引值</span>\n\ndic <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'h'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># dic = {'h': 'hello', 0.5: [0.3, 0.5], 'w': 'world',[2]:2}</span>\n<span class=\"token comment\"># 不能以列表为键！！前提是因为键是不可以变得，而序列是可以变的</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dic<span class=\"token punctuation\">)</span>\n\ndemo <span class=\"token operator\">=</span> dic<span class=\"token punctuation\">[</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">]</span>\ndemo <span class=\"token operator\">=</span> dic<span class=\"token punctuation\">[</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 字典中的元素无先后顺序，只能用键来索引</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 字典的增删改查</span>\n\n<span class=\"token comment\"># 修改</span>\n\ndic<span class=\"token punctuation\">[</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'hi'</span>\n\n<span class=\"token comment\"># 增加</span>\n\n<span class=\"token comment\"># 单个</span>\ndic<span class=\"token punctuation\">[</span><span class=\"token string\">'new'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'new dic'</span>  <span class=\"token comment\"># 如果没有该键，会在字典末尾生成新的键值对</span>\n\n<span class=\"token comment\"># 多个</span>\ndic<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 删除</span>\n<span class=\"token comment\"># del dic #直接整个删掉</span>\n<span class=\"token keyword\">del</span> dic<span class=\"token punctuation\">[</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 字典推导式</span>\n\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>i<span class=\"token punctuation\">:</span> i <span class=\"token operator\">**</span> <span class=\"token number\">2</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>i<span class=\"token punctuation\">:</span> i <span class=\"token operator\">**</span> <span class=\"token number\">2</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dic<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h1><a id=\"__315\"></a>八、 对文件处理操作</h1>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 文件操作</span>\n\n<span class=\"token comment\"># 只读</span>\nf <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'beauty_live.text'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 读取文件操作</span>\n\ntxt <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntxt <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#设置读取字符的个数</span>\n<span class=\"token comment\"># 因为是对文件以读的方式打开，</span>\n<span class=\"token comment\"># 所以在读取文件指针后，</span>\n<span class=\"token comment\"># 指向文件的指针指向文件尾，就无法再继续读取，需要将指针seek变为0</span>\n\nf<span class=\"token punctuation\">.</span>seek<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 只读行(返回值是一个列表)</span>\ntxt1 <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># txt1 = f.readline() #只读一行</span>\n\nf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># print(txt1)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>txt<span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"__343\"></a>九、 统计小说的单词词频</h1>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 统计小说的单词频次</span>\n<span class=\"token keyword\">import</span> re\n\n<span class=\"token comment\"># 查看当前路径</span>\n<span class=\"token keyword\">import</span> os\n\npath <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># current word directory 当前目录</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n\nf <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'beauty_live.text'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 引入当前工程路径 ， 如果移动了 需要绝对路径</span>\ntxt <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 读取进来的数据类型是字符串</span>\nf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ntxt <span class=\"token operator\">=</span> txt<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 去除小数点等符号  用‘’替代 就是空</span>\nre<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">'[,.?!\"\\'-]'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> txt<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 由于使用分割后返回值是一个列表 无法使用re.sub 所以先处理在分割</span>\ntxt <span class=\"token operator\">=</span> txt<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 统计频次</span>\nword <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> txt<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> i <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> word<span class=\"token punctuation\">:</span>\n        word<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        word<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n<span class=\"token comment\"># 对次数排序</span>\nsor <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>txt<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sor<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h1><a id=\"__384\"></a>十、 用户函数自定义</h1>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 函数自定义</span>\n\n<span class=\"token comment\"># 简单用lamdba</span>\ny <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">**</span> <span class=\"token number\">2</span>\ny1 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n\n<span class=\"token comment\"># 复杂用def</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 设置默认值同于c++，前面设置了后面必须避免歧义，可以只设置后面</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y\n\n\nres <span class=\"token operator\">=</span> Sum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndemo <span class=\"token operator\">=</span> y<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\ndemo <span class=\"token operator\">=</span> y1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#求给定序列 偶数个数</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">su</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    z <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> x<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> i<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            z <span class=\"token operator\">+=</span><span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> z\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>su<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h1><a id=\"_python_418\"></a>十一、 python方法与函数对比</h1>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 面对对象编程</span>\n\n<span class=\"token builtin\">list</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2.4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">]</span>\n<span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'hehe'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span>\n\nstring <span class=\"token operator\">=</span> <span class=\"token string\">'myapp'</span>\n\nstring<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 对字符串对象而言 没有append方法 ，注意不是函数</span>\n<span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 同样不可以对列表对象 使用split方法 方法与对象挂钩</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h1><a id=\"__436\"></a>十二、 面对对象实例</h1>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 创建自己的类</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">human</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 方法是定义在类内的函数</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> ag<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> se<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 构造函数</span>\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> ag  <span class=\"token comment\"># 类的属性</span>\n        self<span class=\"token punctuation\">.</span>sex <span class=\"token operator\">=</span> se\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 方法</span>\n        <span class=\"token keyword\">return</span> x <span class=\"token operator\">**</span> <span class=\"token number\">2</span>\n\n\nzhangfei <span class=\"token operator\">=</span> human<span class=\"token punctuation\">(</span>ag<span class=\"token operator\">=</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span> se<span class=\"token operator\">=</span><span class=\"token string\">'M'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 类的实例化</span>\n\ndemo <span class=\"token operator\">=</span> zhangfei<span class=\"token punctuation\">.</span>square<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\ndemo <span class=\"token operator\">=</span> zhangfei<span class=\"token punctuation\">.</span>age\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h1><a id=\"_python_458\"></a>十三、 python模块</h1>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 模块是一个包含了所有你定义的函数的变量的文件，其后缀名为.py其实就是一个脚本文件</span>\n\n<span class=\"token keyword\">import</span> math  <span class=\"token comment\"># 引入模块</span>\n<span class=\"token keyword\">import</span> def_math\n<span class=\"token keyword\">from</span> def_math <span class=\"token keyword\">import</span> Sum\n\nres <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span>sin<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 用模块调用</span>\nres <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span>pi\n\n<span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> sin<span class=\"token punctuation\">,</span> pi  <span class=\"token comment\"># 从模块引入变量和函数 直接使用 面对多次使用的情况下，建议用此方法 ！</span>\n\n<span class=\"token comment\"># 导入模块全部变量和函数</span>\n<span class=\"token keyword\">from</span> def_math <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>  <span class=\"token comment\"># 不建议这样做 把全部引入 没有库名称区别 与其他库的函数名歧义</span>\n\nres <span class=\"token operator\">=</span> sin<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 在模块引入直接使用</span>\nres <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> pi\n\nres <span class=\"token operator\">=</span> def_math<span class=\"token punctuation\">.</span>Sum<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nres <span class=\"token operator\">=</span> Sum<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<blockquote>\n<p>模块def_math.py</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y\n\n</code></pre>\n<h1><a id=\"___494\"></a>今日份推荐 —— 牛客网</h1>\n<p>python的学习还是要多以练习为主，想要练习python的同学，推荐可以去<a href=\"https://www.nowcoder.com/link/pc_csdncpt_jsjmss_python\">牛客网</a>看看，他们现在的IT题库内容很丰富，属于国内做的很好的了，而且是课程+刷题+面经+求职+讨论区分享，一站式求职学习网站，最最最重要的里面的资源全部免费<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\608c75276ddf4596b8783139220bbee4.png\"/></p>\n<p>他们的python题单是从最基础的输出、字符串格式化输出开始，经过运算符、列表、循环语句、条件语句、元组、字典、函数等知识点，一步一步教你慢慢学会Python那为数不多的基本语法，最后再配合上8道具有实践意义的综合实践题，可以帮你更加有效的巩固前面学会的知识。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\66dee94804154b529adb59c8cca1e14a.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b488b6a674114511a7aaec13db900a05.png\"/></p>\n<p><a href=\"https://www.nowcoder.com/link/pc_csdncpt_jsjmss_python\">牛客网</a>还提供题解专区和讨论区会有大神提供题解思路，对新手玩家及其友好，有不清楚的语法，不理解的地方，看看别人的思路，别人的代码，也许就能豁然开朗。<br/> 快点击下方链接学起来吧！<br/> <strong>链接：</strong><a href=\"https://www.nowcoder.com/link/pc_csdncpt_jsjmss_python\">点击链接跳转牛客网</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 1, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-17 17:48:19", "summary": "在这里插入图片描述个人主页计算机魔术师作者简介：内容合伙人，全栈领域优质创作者。推荐一款找工作神器网站宝藏网站笔试题库面试经验实习招聘内推轻松上手一、编写第一个二、固定数据介绍三、列表的性质以及增删改"}