{"blogid": "122520861", "writerAge": "码龄3年", "writerBlogNum": "116", "writerCollect": "1286", "writerComment": "1926", "writerFan": "8006", "writerGrade": "6级", "writerIntegral": "7562", "writerName": "_End丶断弦", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122520861.jpg", "writerRankTotal": "1860", "writerRankWeekly": "3269", "writerThumb": "2065", "writerVisitNum": "83514", "blog_read_count": "4326", "blog_time": "于 2022-01-16 21:58:41 发布", "blog_title": "红黑树(C++实现)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>红黑树</h3>\n<ul><li><a href=\"#_1\">红黑树的概念</a></li><li><ul><li><a href=\"#_6\">红黑树的性质</a></li></ul>\n</li><li><a href=\"#_38\">红黑树的结点定义</a></li><li><a href=\"#_64\">红黑树的插入</a></li><li><ul><li><a href=\"#_89\">情况一</a></li><li><a href=\"#_101\">情况二</a></li><li><a href=\"#_115\">情况三</a></li></ul>\n</li><li><a href=\"#_338\">红黑树的查找</a></li><li><a href=\"#_365\">红黑树的验证</a></li><li><a href=\"#AVL_431\">红黑树的和AVL树的比较</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>红黑树的概念</h1>\n<p>红黑树，是一种二叉搜索树，但在每个结点上增加一个存储位表示结点的颜色，可以是红色或黑色。 通过对任何一条从根到叶子的路径上各个结点着色方式的限制，红黑树确保没有一条路径会比其他路径长出俩倍，因而是接近平衡的。如下图：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\41fa71b30af24f1d8d1ec8d67a743abe.png\"/></p>\n<h2><a id=\"_6\"></a>红黑树的性质</h2>\n<ol><li>每个结点不是红色就是黑色</li><li>根节点是黑色的</li><li>如果一个节点是红色的，则它的两个孩子结点是黑色的</li><li>对于每个结点，从该结点到其所有后代叶结点的简单路径上，均 包含相同数目的黑色结点</li><li>每个叶子结点都是黑色的(此处的叶子结点指的是空结点)</li></ol>\n<blockquote>\n<p>上面的4点性质用自己的话可以总结为：(性质5不用记)</p>\n</blockquote>\n<p><font color=\"blue\">1.结点不是红色就是黑色<br/> 2.没有连续的红色结点<br/> 3.每条路径上的黑色结点的数量是一样的 </font></p>\n<p><strong>AVL树是通过高度来控制平衡的，是严格平衡的。那如果新插入结点很多那么旋转也是要付出代价的。红黑树通过颜色来控制平衡，但不是严格的平衡，它近似平衡。红黑树也可以达到AVL树的效率。它最长路径不超过最短路径的2倍。</strong></p>\n<blockquote>\n<p>那为什么红黑树的最长路径不超过最短路径的2倍呢？</p>\n</blockquote>\n<p>通过上面的性质，假设我们把红黑树的黑色结点单独抽出来，从跟到叶子黑结点个数为N个<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\79221728ee714d2f9f68a85b874ec723.png\"/><br/> 那它最短路径就是长度为N<br/> 那它最长的路径可能是一黑一红<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9af04e099160469ca763328302e76c36.png\"/><br/> 那它的长度为2N，所以它的最长路径不超过最短路径的2倍，则其他路径的长度就在N-2N之间。那么红黑树增删查改的效率就在logN-2logN之间，和AVL树的logN差不多了。</p>\n<h1><a id=\"_38\"></a>红黑树的结点定义</h1>\n<p>红黑树的结点定义还是跟AVL树一样，定义成三叉链结构和KV模型，不同的则是红黑树用枚举加入了颜色。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Color</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tRED<span class=\"token punctuation\">,</span>\n\tBLACK\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">V</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">RBTreeNode</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tRBTreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span> _left<span class=\"token punctuation\">;</span><span class=\"token comment\">//结点的左孩子</span>\n\tRBTreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span> _right<span class=\"token punctuation\">;</span><span class=\"token comment\">//结点的右孩子</span>\n\tRBTreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span> _parent<span class=\"token punctuation\">;</span><span class=\"token comment\">//结点的双亲</span>\n\tpair<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span>_kv<span class=\"token punctuation\">;</span>\n\tColor _color<span class=\"token punctuation\">;</span><span class=\"token comment\">//该结点的颜色</span>\n\t<span class=\"token function\">RBTreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> pair<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> kv<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">_left</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">_right</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">_parent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">_kv</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">_color</span><span class=\"token punctuation\">(</span>RED<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h1><a id=\"_64\"></a>红黑树的插入</h1>\n<blockquote>\n<p>那么我们插入结点时选择插入黑结点还是红结点呢？</p>\n</blockquote>\n<p>当然是选择插入红结点了。选择插入黑结点那麻烦就大了，那1条路径上就多了1个黑结点，破坏了性质4，代价很大。插入红结点，如果它的父亲结点是黑色则不用调整，拍拍屁股走人，它的父亲是红色那我们在进行后序的处理。</p>\n<p><strong>总结一下：</strong><br/> <font color=\"red\">1.插入黑色结点一定破坏性质4，调整起来会很麻烦<br/> 2.插入红结点不一定破坏红黑树的性质，它的父亲结点是红色才进行调整，比插入黑结点调整起来方便。<br/> </font><br/> ✨✨✨✨✨✨✨✨✨✨***我是分割线***✨✨✨✨✨✨✨✨✨✨✨✨✨✨</p>\n<blockquote>\n<p>插入的逻辑：</p>\n</blockquote>\n<p><font color=\"blue\">1.找到插入结点的位置<br/> 2.插入结点<br/> 3.检测新结点插入后是否破坏了红黑的性质，如果破坏则需要进行处理<br/> </font></p>\n<p>因为新插入结点的颜色是红色，若它的父亲结点是黑色不用调整，是红色的话需要对红黑树分情况来讨论。</p>\n<blockquote>\n<p>红黑树调整主要看叔叔结点</p>\n</blockquote>\n<p>下面我们根据叔叔结点的情况来具体看一下。</p>\n<h2><a id=\"_89\"></a>情况一</h2>\n<p>以下用p来代表parent结点，c代表cur为新增结点,g代表grandparent结点，u代表uncle结点。<br/> 我们还是跟AVL树一样画具象图：</p>\n<p>1.叔叔结点存在且为红<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cd1b12cd21da42cab19655f0bc2e9e00.png\"/><br/> 为什么把g变成红色呢？如果g不变成红色，那此时子树上就多了1个黑结点了。<br/> 只要我们画出具象图，那面试时手撕红黑树也完全不怂。</p>\n<p>当然还有很多种情况，那就给出抽象图：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1032e74e2faf4c56822753db24a587f1.png\"/><br/> 这种情况下cur在p的左边还是右边都不影响。</p>\n<h2><a id=\"_101\"></a>情况二</h2>\n<blockquote>\n<p><font color=\"blue\">叔叔结点存在且为黑，新增结点是p的左边</font></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\06d4a34988bb45079b4c75fa3c8f5290.png\"/><br/> 这是由情况一变来的，如果u存在那cur一定是黑的，不是新郑结点，这样才满足红黑树的性质。</p>\n<p>✨✨✨✨✨✨✨✨✨✨***我是分割线***✨✨✨✨✨✨✨✨✨✨✨✨✨✨</p>\n<blockquote>\n<p><font color=\"blue\">新增结点是p的右边</font></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\92109928e6344233ba37fe911f70b834.png\"/></p>\n<h2><a id=\"_115\"></a>情况三</h2>\n<blockquote>\n<p><font color=\"blue\">叔叔结点不存在</font></p>\n</blockquote>\n<p><strong>新增结点在parent的左边</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a578ee54753843b582642a808f1a968c.png\"/><br/> <strong>新增结点在parent的右边</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\422073c114c646279c8835e641853d18.png\"/><br/> 总结一下：<br/> <font color=\"blue\"><br/> 以上的情况都是父亲结点在祖先结点的左边，在祖先结点的右边也是相同的处理方法<br/> 1.叔叔结点存在且为红，把父亲结点和叔叔结点变黑，祖先变红继续向上处理直到祖先是根节点<br/> 2.叔叔存在为黑，祖孙三代在一条直线上进行单旋，不在则进行双旋<br/> 3.叔叔不存在，祖孙三代在一条直线上进行单旋，不在则进行双旋<br/> 所以2,3的逻辑可以合在一起，分为新增结点在父亲结点的左边还是右边处理。<br/> </font></p>\n<p><strong>下面再来简单的说说父亲结点在祖先结点的右边</strong></p>\n<blockquote>\n<p>叔叔存在且为红</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\77971440be024919916fa148add7b9a1.png\"/><br/> 此时，cur在p的左边还是右边没有影响。</p>\n<blockquote>\n<p>叔叔存在且为黑</p>\n</blockquote>\n<p><strong>新增结点在父亲结点的右边</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\58c5fd873ca245759977a956e928550b.png\"/><br/> <strong>新增结点在父亲结点的左边</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bad000af9df34109ba0230071c951fa9.png\"/></p>\n<blockquote>\n<p>叔叔不存在</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\49e86ae5c71240e9b79d9cb27fce9a27.png\"/><br/> 总结一下：<br/> <font color=\"blue\"><br/> 1.叔叔存在且为红,u,p变黑，g变红继续向上调，直到g为根结点，最后把g变黑<br/> 2.叔叔存在且为黑，祖孙3带在一条直线上单旋，折线要双旋<br/> 3.叔叔不存在，祖孙3带在一条直线上单旋，折线要双旋</font></p>\n<p>✨✨✨✨✨✨✨✨✨✨***我是分割线***✨✨✨✨✨✨✨✨✨✨✨✨✨✨</p>\n<p>代码如下：</p>\n<pre><code class=\"prism language-cpp\">\tpair<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> pair<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> kv<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//1.树为空</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_root <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t_root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t_root<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span><span class=\"token comment\">//根结点为黑色</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>_root<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//树不为空</span>\n\t\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _root<span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//新结点key大于当前结点往右边</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;</span> kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tparent <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">//新结点key小于当前结点往左边</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&gt;</span> kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tparent <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tcur <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\tnewnode<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;</span> kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tparent<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n\t\t\tnewnode<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tparent<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n\t\t\tnewnode<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">//开始调整颜色</span>\n\t\t<span class=\"token comment\">//父亲存在且为红</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">&amp;&amp;</span> parent<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tNode<span class=\"token operator\">*</span> grandParent <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\t\t\n\t\t\t<span class=\"token comment\">//parent是grandParent左孩子</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grandParent<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">==</span> parent<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tNode<span class=\"token operator\">*</span> uncle <span class=\"token operator\">=</span> grandParent<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token comment\">//叔叔存在且为红色,父亲和叔叔都调为黑色</span>\n\t\t\t\t<span class=\"token comment\">//祖先调为红色，如果不调那每条路径的黑结点变了</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uncle <span class=\"token operator\">&amp;&amp;</span> uncle<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tparent<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\t\t\t\t\tuncle<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\t\t\t\t\tgrandParent<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token comment\">//继续往上调</span>\n\t\t\t\t\tcur <span class=\"token operator\">=</span> grandParent<span class=\"token punctuation\">;</span>\n\t\t\t\t\tparent <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">else</span><span class=\"token comment\">//叔叔不存在或叔叔存在且为黑</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">==</span> cur<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>    <span class=\"token comment\">//右单旋</span>\n\t\t\t\t\t\t<span class=\"token function\">RotateR</span><span class=\"token punctuation\">(</span>grandParent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tparent<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tgrandParent<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token keyword\">else</span> <span class=\"token comment\">//parent-&gt;_right == cur</span>\n\t\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t<span class=\"token function\">RotateL</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token function\">RotateR</span><span class=\"token punctuation\">(</span>grandParent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tgrandParent<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tcur<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token comment\">//parent是grandParent左孩子</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tNode<span class=\"token operator\">*</span> uncle <span class=\"token operator\">=</span> grandParent<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uncle <span class=\"token operator\">&amp;&amp;</span> uncle<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tuncle<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\t\t\t\t\tparent<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\t\t\t\t\tgrandParent<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n\t\t\t\t\tcur <span class=\"token operator\">=</span> grandParent<span class=\"token punctuation\">;</span>\n\t\t\t\t\tparent <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">==</span> cur<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t<span class=\"token function\">RotateL</span><span class=\"token punctuation\">(</span>grandParent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tparent<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tgrandParent<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t<span class=\"token function\">RotateR</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token function\">RotateL</span><span class=\"token punctuation\">(</span>grandParent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tcur<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tgrandParent<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\t\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t_root<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>newnode<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">RotateL</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> parent<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tNode<span class=\"token operator\">*</span> subR <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> subRL <span class=\"token operator\">=</span> subR<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> parentParent <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//先旋转</span>\n\t\tparent<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">=</span> subRL<span class=\"token punctuation\">;</span>\n\t\tsubR<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\n\t\tparent<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> subR<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//在改父亲结点</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subRL<span class=\"token punctuation\">)</span>\n\t\t\tsubRL<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_root <span class=\"token operator\">==</span> parent<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t_root <span class=\"token operator\">=</span> subR<span class=\"token punctuation\">;</span>\n\t\t\t_root<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//subR旋转后可能是左右子树2种情况</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentParent<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">==</span> parent<span class=\"token punctuation\">)</span>\n\t\t\t\tparentParent<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">=</span> subR<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\tparentParent<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">=</span> subR<span class=\"token punctuation\">;</span>\n\t\t\tsubR<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parentParent<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">RotateR</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> parent<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tNode<span class=\"token operator\">*</span> subL <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> subLR <span class=\"token operator\">=</span> subL<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> parentParent <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span><span class=\"token comment\">//记录parent的父亲结点</span>\n\t\t<span class=\"token comment\">//subLR做parent-&gt;_left</span>\n\t\tparent<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">=</span> subLR<span class=\"token punctuation\">;</span>\n\t\tsubL<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//同时更新动的2个节点的parent</span>\n\t\t<span class=\"token comment\">//注意subLR还可能是空结点</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subLR<span class=\"token punctuation\">)</span>\n\t\t\tsubLR<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t\tparent<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> subL<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//parent可能是单独的树，或者子树,分情况</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_root <span class=\"token operator\">==</span> parent<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t_root <span class=\"token operator\">=</span> subL<span class=\"token punctuation\">;</span>\n\t\t\t_root<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//还有可能parent是子树，可能是左子树</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentParent<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">==</span> parent<span class=\"token punctuation\">)</span>\n\t\t\t\tparentParent<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">=</span> subL<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\t<span class=\"token comment\">//也可能是右子树</span>\n\t\t\t\tparentParent<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">=</span> subL<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">//调整subL的父亲结点</span>\n\t\t\tsubL<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parentParent<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_338\"></a>红黑树的查找</h1>\n<p>查找跟AVL树的逻辑是一样的，博主这里就不做多的讲解了。</p>\n<pre><code class=\"prism language-cpp\">\tNode<span class=\"token operator\">*</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _root<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&gt;</span> key<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;</span> key<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">return</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_365\"></a>红黑树的验证</h1>\n<p>先检查有没有连续的红结点，还有红结点的父亲结点是不是黑色。这就保证了没有连续的红结点。还有路径也要算。我们找1条路径作为参考，例如最左路径，只要有1条路径和它的黑结点数量不同就不是红黑树。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">bool</span> <span class=\"token function\">_CheckBlance</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> root<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> blackNum<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">!=</span> blackNum<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"黑色节点的数量不相等\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">==</span> RED <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token operator\">-&gt;</span>_parent<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"存在连续的红色节点\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">==</span> BLACK<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">_CheckBlance</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">,</span> blackNum<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">_CheckBlance</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">,</span> blackNum<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">CheckBlance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_root <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_root<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"根节点是红色的\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// 找最左路径做黑色节点数量参考值</span>\n\t\t<span class=\"token keyword\">int</span> blackNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> left <span class=\"token operator\">=</span> _root<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">==</span> BLACK<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tblackNum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\tleft <span class=\"token operator\">=</span> left<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">_CheckBlance</span><span class=\"token punctuation\">(</span>_root<span class=\"token punctuation\">,</span> blackNum<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们来测试一下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7b12cb0e8e7e4f77a081e66a9603b846.png\"/><br/> 没有问题，博主也是调试了好长时间。一定要用好调试。</p>\n<h1><a id=\"AVL_431\"></a>红黑树的和AVL树的比较</h1>\n<p>红黑树的删除也是了解，红黑树和AVL树都是高效的平衡二叉树，增删改查的时间复杂度都是O(log2)，红黑树不追求绝对平衡，其只需保证最长路径不超过最短路径的2倍，相对而言，降低了插入和旋转的次数，所以在经常进增删的结构中性能比AVL树更优，而且红黑树实现比较简单，所以实际运用中红黑树更多。</p>\n<blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a34b025e0f2b40a08e61725a8edf01ae.png\"/><br/> 🍁🍁博主水平有限，如有错误，直接留下评论即可！🍁🍁<br/> 🍁🍁红黑树是面试必备的，大家一起加油！🍁🍁<br/> 🍁🍁欢迎一键三连！ 🍁🍁</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-01-16 21:58:41", "summary": "红黑树红黑树的概念红黑树的性质红黑树的结点定义红黑树的插入情况一情况二情况三红黑树的查找红黑树的验证红黑树的和树的比较红黑树的概念红黑树，是一种二叉搜索树，但在每个结点上增加一个存储位表示结点的颜色，"}