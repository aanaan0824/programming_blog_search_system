{"blogid": "126623915", "writerAge": "码龄1年", "writerBlogNum": "35", "writerCollect": "2282", "writerComment": "3780", "writerFan": "7377", "writerGrade": "6级", "writerIntegral": "7364", "writerName": "Dream_Y.Ocean", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126623915.jpg", "writerRankTotal": "1941", "writerRankWeekly": "114", "writerThumb": "2714", "writerVisitNum": "97955", "blog_read_count": "366", "blog_time": "于 2022-09-01 10:50:44 发布", "blog_title": "猿创征文｜C++来时路 _ 重温经典之C++类和对象 | 三大特性之一 - 封装 | 腾讯面试题", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><strong>💛 前情提要💛</strong></p>\n<p>本章节是<code>C++</code>的<code>类和对象- 封装</code>的相关知识~</p>\n<p>接下来我们即将进入一个全新的空间，对代码有一个全新的视角~</p>\n<p>以下的内容一定会让你对<code>C++</code>有一个颠覆性的认识哦！！！</p>\n<p><font color=\"gray\" size=\"3\"><strong>以下内容干货满满，跟上步伐吧~</strong></font></p>\n<hr color=\"#000000\" size='1\"'/>\n<p><strong>作者介绍：</strong></p>\n<blockquote>\n<p>🎓 <strong>作者：</strong> 热爱编程不起眼的小人物🐐<br/> 🔎<strong>作者的Gitee：</strong><a href=\"https://gitee.com/Dream_Y-ocean\">代码仓库</a><br/> 📌<strong>系列文章&amp;专栏推荐：</strong> <a href=\"https://blog.csdn.net/qq_62817113/category_11605818.html?spm=1001.2014.3001.5482\">《刷题特辑》</a>、 <a href=\"https://blog.csdn.net/qq_62817113/category_11534485.html\">《C语言学习专栏》</a>、<a href=\"https://blog.csdn.net/qq_62817113/category_11755379.html?spm=1001.2014.3001.5482\">《数据结构_初阶》</a> 、<a href=\"https://blog.csdn.net/qq_62817113/category_11982632.html\">《C++轻松学_深度剖析_由0至1》</a></p>\n<p>📒<strong>我和大家一样都是初次踏入这个美妙的“元”宇宙🌏 希望在输出知识的同时，也能与大家共同进步、无限进步</strong>🌟<br/> 🌐<strong>这里为大家推荐一款很好用的刷题网站呀</strong>👉<a href=\"https://www.nowcoder.com/link/pc_csdncpt_dream_sf\">点击跳转</a></p>\n</blockquote>\n<hr color=\"#000000\" size='1\"'/>\n<blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>📌导航小助手📌</h3>\n<ul><li><a href=\"#_36\">💡本章重点</a></li><li><a href=\"#_52\">🍞一.类和对象</a></li><li><a href=\"#_70\">🍞二.类</a></li><li><ul><li><a href=\"#_101\">🥐Ⅰ.类的定义</a></li><li><a href=\"#__175\">🥐 Ⅱ.封装</a></li><li><a href=\"#__206\">🥐 Ⅲ.类的访问限定符</a></li><li><a href=\"#__239\">🥐 Ⅳ.类的作用域</a></li><li><a href=\"#_288\">🥯Ⅴ.总结</a></li></ul>\n</li><li><a href=\"#_296\">🍞三.类对象</a></li><li><ul><li><a href=\"#_309\">🥐Ⅰ.类对象的大小</a></li><li><a href=\"#_349\">🥯Ⅱ.总结</a></li></ul>\n</li><li><a href=\"#this_356\">🍞四.this指针</a></li><li><ul><li><a href=\"#_423\">🥐Ⅰ.腾讯面试题</a></li><li><a href=\"#_482\">🥯Ⅱ.总结</a></li></ul>\n</li><li><a href=\"#bb__490\"><b>🍞五.</b> 如何高效学习数据结构与算法？</a></li><li><a href=\"#_510\">🫓总结</a></li></ul>\n</div>\n<p></p>\n</blockquote>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_36\"></a>💡本章重点</h1>\n<ul><li> <p>了解<code>C++</code>类的定义</p> </li><li> <p>认识<code>C++</code>类和对象</p> </li><li> <p>了解<code>C++</code>面向对象三大特性之一：<code>封装</code></p> </li></ul>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_52\"></a>🍞一.类和对象</h1>\n<p>💡<strong>类和对象：</strong></p>\n<ul><li> <p>在<code>C语言</code>中，是<strong>面向过程</strong>的，<strong>关注</strong>的是<strong>过程</strong>，即为了解决一个问题，一步步分析出解题的步骤，通过函数的调用逐步解决</p> </li><li> <p>而在<code>C++</code>中，是基于<strong>面向对象</strong>的，<strong>关注</strong>的是<strong>对象</strong>，将一件事情拆分成不同的对象，通过实现对象之间的交互操作、交互关系从而解决问题</p> </li></ul>\n<p>❗<strong>补充：</strong></p>\n<ul><li class=\"task-list-item\"><input checked=\"true\" class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> 在C++中我们一般称变量为<code>对象</code></li></ul>\n<p>👆有了以上的基础了解，我们深入分析<code>类</code>究竟是什么~</p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_70\"></a>🍞二.类</h1>\n<p>💡<strong>类的引入：</strong></p>\n<ul><li> <p>在C语言中其实我们已经了解过<code>类</code>的概念，本质就是C语言中的<code>结构体</code></p> </li><li> <p>而在C++中，因为面向对象的概念引入，所以创建了一种新的类型：<code>类</code></p> </li><li class=\"task-list-item\"> <p><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> <strong>本质：</strong> 类可以看作不同对象的集合【Eg：不同的人，有着不同的身高、体重……但可以定义一个<code>person</code>类去表述出不同的人】</p> </li></ul>\n<p>➡️<strong>类的构成：</strong></p>\n<ul><li> <p>1️⃣<code>类的属性</code>：即类的<code>成员变量</code></p> </li><li> <p>2️⃣<code>类的方法（行为）</code>：即类的<code>成员函数</code></p> </li></ul>\n<p>👆<strong>简单来说：</strong></p>\n<ul><li> <p>C语言中，结构体中只能定义变量</p> </li><li> <p>在C++中，结构体内不仅可以定义变量，也可以定义函数</p> </li></ul>\n<hr color=\"#000000\" size='1\"'/>\n<h2><a id=\"_101\"></a>🥐Ⅰ.类的定义</h2>\n<p>💡<strong>类的定义：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">className</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//类的主体</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>👆<strong>由上我们可得知三点：</strong></p>\n<ul><li> <p><code>class</code>：为定义类的<code>关键字</code></p> </li><li> <p><code>className</code>：为类的名字</p> </li><li> <p><code>类的主体</code>：可由<code>成员变量</code>➕<code>成员函数</code>组成</p> </li></ul>\n<p>👉<strong>代码示例：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> STDataType<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//成员函数：</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> inintSize <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\ta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>STDataType<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>STDataType<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> inintSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tsize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tcapacity <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>STDataType x<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//增容</span>\n\t\t<span class=\"token comment\">//...</span>\n\t\ta<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\t\tsize<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">//成员变量：【即 这个 类 的一些属性、特征、数据】</span>\n\tSTDataType<span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>❗<strong>特别注意：</strong></p>\n<ul><li> <p><strong>成员变量</strong>在类里面是<code>声明</code>，而非<code>定义</code>：</p>\n<ul><li> <p>成员变量只有在类实例化（创建）一个对象的时候才被<code>定义</code></p> </li><li> <p>如果是<code>声明+定义</code>的话，相当于多个这个类的对象共用类里的成员变量，所以这是不对的</p> </li></ul> </li><li> <p>C++虽然兼容C语言的结构体<code>struct</code>，但更喜欢用<code>class</code>定义类【还有一些属性上的不同，后面会继续介绍】</p> </li></ul>\n<hr color=\"#000000\" size='1\"'/>\n<h2><a id=\"__175\"></a>🥐 Ⅱ.封装</h2>\n<p>💡<strong>面向对象的三大特性：</strong></p>\n<ul><li> <p>封装</p> </li><li> <p>继承</p> </li><li> <p>多态</p> </li></ul>\n<p>【实际中不止三种特性，还有：抽象、反射，但与上述三种相比较之下，上述的三种特性更为重要】</p>\n<p>➡️<strong>什么是封装：</strong></p>\n<ul><li>将数据和操作数据的方法进行有机结合，隐藏对象的属性和实现细节，仅对外公开接口来和对象进行交互</li></ul>\n<p>👆<strong>简单来说：</strong></p>\n<ul><li> <p><strong>封装</strong>本质是一种管理方法：即把类中的数据（成员变量）和方法（成员函数）管理起来，将给用户访问的定义成<code>公有</code>，不想让人访问的定义成<code>私有</code>or<code>保护</code></p> </li><li> <p>这样可以在面向对象的过程中更加规范、严格且安全</p> </li><li> <p>即不是不给访问，而是在访问的基础上加上<strong>保护措施</strong>，进行合理的访问以确保这次的访问不会一次就直接破坏了这个类，而是提供持续性地保护</p> </li></ul>\n<p>👉<strong>接下来我们就深入探讨是<code>类</code>是如何进行封装的~</strong></p>\n<hr color=\"#000000\" size='1\"'/>\n<h2><a id=\"__206\"></a>🥐 Ⅲ.类的访问限定符</h2>\n<p>➡️<strong>C++实现封装的方式：</strong></p>\n<ul><li>用类将对象的属性与方法结合在一块，让对象更加完善，通过<strong>访问权限选择性</strong>的将其接口提供给外部的用户使用</li></ul>\n<p>💡<strong>类的访问限定符：</strong></p>\n<ul><li> <p><code>public</code>（公有）：所修饰的成员（变量 or 函数）在类外面可以直接被访问</p> </li><li> <p><code>protect</code>（保护）、 <code>private</code>（私有）：所修饰的成员（变量 or 函数）在类外面不能直接被访问</p> </li></ul>\n<p>❗<strong>特别注意：</strong></p>\n<ul><li> <p>访问权限作用域：从该访问限定符出现的位置开始，直到下一个访问限定符出现时为止</p> </li><li> <p>C++为了兼容C语言的<strong>struct</strong>：</p>\n<ul><li> <p>于是<code>struct</code>的默认访问权限为<code>public</code>【这也就是为什么结构体的成员可以直接被访问】</p> </li><li> <p>而<code>class</code>的默认访问权限为<code>private</code>【这也就是为什么在C++中定义类用<code>class</code>关键字，因为这样可以默认保护成员变量】</p> </li></ul> </li><li> <p>类的访问限定符，限定的时类外面的程序对类成员的直接修改、访问，但不限制类里面的访问和修改【即家里上锁的目的是：防外人，但家里人可以随意进出】</p> </li></ul>\n<p>👆上述所提到的就很好的回答了一道经典的面试题：<strong>“C++中struct和class的区别是什么？”</strong></p>\n<p>⭐<strong>综上：</strong> 一般情况下，在类的设计中将<code>成员函数</code>设计成<code>public</code>【可以在类外直接访问得到】，将<code>成员变量</code>设计成<code>protect</code>或<code> private</code>【不想让类外面的访问得到】</p>\n<hr color=\"#000000\" size='1\"'/>\n<h2><a id=\"__239\"></a>🥐 Ⅳ.类的作用域</h2>\n<p>💡<strong>作用域：</strong></p>\n<ul><li> <p>类域跟命名空间类似，即类定义了一个新的作用域，所有类的成员都在类的作用域中</p> </li><li> <p>若类中的成员函数的声明和定义是分离的话，此时成员函数的定义在类外就需要用<code>::</code>（域作用限定符）去指定表明这个成员函数的定义是哪个类域中的</p> </li></ul>\n<p>👉<strong>代码示例：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> STDataType<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">//成员函数：</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> inintSize <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\ta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>STDataType<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>STDataType<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> inintSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tsize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tcapacity <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token comment\">//成员函数的声明：</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>STDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">//成员变量：【即 这个 类 的一些属性、特征、数据】</span>\n\tSTDataType<span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//成员函数的定义：</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Stack</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>STDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//增容</span>\n\t<span class=\"token comment\">//...</span>\n\ta<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\tsize<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr color=\"#000000\" size='1\"'/>\n<h2><a id=\"_288\"></a>🥯Ⅴ.总结</h2>\n<p>⭐<strong>综上：</strong> 就是类的相关知识点的了解啦~</p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_296\"></a>🍞三.类对象</h1>\n<p>💡<strong>类的实例化：</strong></p>\n<ul><li> <p>简单来说就是用类创建对象的过程，成为<code>类的实例化</code></p> </li><li> <p>因为类只是相当于一个<code>设计图</code>，只是限定了有哪些成员，但并没有实际创建出来，所以要通过实例化来建造一个对象从而分配实际的内存空间来存储成员</p> </li></ul>\n<p>➡️一个类可以实例化多个对象~</p>\n<hr color=\"#000000\" size='1\"'/>\n<h2><a id=\"_309\"></a>🥐Ⅰ.类对象的大小</h2>\n<p>💡<strong>类对象的大小：</strong></p>\n<ul><li> <p>类对象的大小的计算是遵循<code>内存对齐</code>的规则【相关知识可&gt;<a href=\"https://dream-yocean.blog.csdn.net/article/details/123856121\">点击</a>&lt;跳转食用】</p> </li><li> <p>但现在有一个问题：类里包含了成员函数，成员函数的大小是否包含在类对象的大小中呢？</p> </li></ul>\n<p>👉<strong>我们便可以通过如下代码进行测试：</strong></p>\n<blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\13bc0e1c2fb145d3af193a0689a3ac10.png\"/></p>\n</blockquote>\n<ul><li>由此可见，计算出来的大小为<code>4</code>，而这恰好仅仅是只有一个<code>int</code>类型在类里经过<code>内存对齐</code>计算出来的大小</li></ul>\n<blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1524fbc32bab48529db5403c033ccfc2.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dca0a4c736374f7eb515f557c66cb53f.png\"/></p>\n</blockquote>\n<ul><li>从这里可以看得出：<code>空类</code>和仅有<code>成员函数</code>的类的空间大小是一样的，只有<code>1</code>字节</li></ul>\n<p>⭐<strong>综上我们可知：</strong></p>\n<ul><li> <p>一个类的大小只计算<code>成员变量</code>的大小（遵循<code>内存对齐</code>的规则），不计算<code>成员函数</code>的大小在内</p> </li><li> <p>对于<code>\"空类\"</code>的空间大小，只有<code>1</code>字节</p> </li></ul>\n<p>❗<strong>特别注意：</strong></p>\n<ul><li> <p>其中，<code>成员函数</code>真正存储的地方，并不是在类里面，而是在<code>公共代码区</code></p> </li><li> <p>这样的好处是当多个对象调用<code>成员函数</code>时，并不会产生多份重复的<code>成员函数</code>从而占用空间、浪费空间</p> </li></ul>\n<p>❓这里不免会产生疑惑：<code>\"空类\"</code>为什么不给<code>0</code>字节呢</p>\n<ul><li> <p>这是因为如果对象的空间大小为<code>0</code>字节的话，是无法区分都为<code>空类</code>时对象的地址【因为一个字节对应一个地址】，它们此时地址就会重合</p> </li><li> <p>所以，为了可以区分是不同对象，于是给<code>1</code>字节表示<code>占位</code>【即表示对象存在】</p> </li></ul>\n<hr color=\"#000000\" size='1\"'/>\n<h2><a id=\"_349\"></a>🥯Ⅱ.总结</h2>\n<p>⭐<strong>综上：</strong> 分析下来，相信大家对<code>类对象</code>有了更深一步的了解啦~</p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"this_356\"></a>🍞四.this指针</h1>\n<p>💡<strong>this指针：</strong></p>\n<ul><li> <p>C++中为何会有<code>this</code>指针的概念呢？</p> </li><li> <p><code>this</code>指针在C++中是如何使用的？</p> </li></ul>\n<p>如上问题，我将通过下述<strong>代码示例</strong>，带领大家深入了解<code>this</code>指针</p>\n<p>👉<strong>代码示例：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Date</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> _year <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">&lt;&lt;</span> _month <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">&lt;&lt;</span> _day <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">SetDate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> year<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> month<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> day<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t_year <span class=\"token operator\">=</span> year<span class=\"token punctuation\">;</span>\n\t\t_month <span class=\"token operator\">=</span> month<span class=\"token punctuation\">;</span>\n\t\t_day <span class=\"token operator\">=</span> day<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _year<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 年</span>\n\t<span class=\"token keyword\">int</span> _month<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 月</span>\n\t<span class=\"token keyword\">int</span> _day<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 日</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6195c960871445c8af9c9e6fb8d9bd93.png\"/></p>\n</blockquote>\n<p>👆由上通过<code>Date</code>类（日期类）创建了了两个对象：<code>d1</code>、<code>d2</code>，但当对象都调用成员函数的时候，函数体内并没关于不同对象的区分，那成员函数是如何知道该设置哪个对象呢？</p>\n<ul><li> <p>为了解决这个问题，C++便引入了<code>this</code>指针</p> </li><li> <p>C++编译器给每个 <strong>“非静态的成员函数”</strong> 增加了一个 <strong>隐藏的指针参数</strong>，让该指针指向当前对象(函数运行时调用该函数的对象)，在函数体中所有成员变量的操作，都是通过该指针去访问。只不过所有的操作对用户是<strong>透明</strong>的，即用户不需要来传递，<strong>编译器自动完成</strong></p> </li></ul>\n<p>➡️<strong>简单来说：</strong></p>\n<ul><li> <p>就是在对象调用成员函数时，为了指明成员函数修改的是哪个对象的成员变量，于是C++在对象调用成员函数的时候，增加了一个隐藏的参数（<code>this</code>指针），从而让成员函数可以区分是哪个对象调用的</p> </li><li> <p>其中，<code>this</code>指针是在调用成员函数的时候编译器<code>隐藏</code>且<code>自动</code>帮我们传递的，这也就是为什么我们会产生上述问题的原因，因为我们看不见这个<code>this</code>指针</p> </li></ul>\n<p>👉<strong>示例：</strong></p>\n<blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bf142e9b72fe4d09b892855294881d02.png\"/></p>\n</blockquote>\n<ul><li><strong>本质：</strong><code>this</code>指针存储的就是<strong>对象的地址</strong>【传递<code>this</code>指针，也就是传递对象的<code>地址</code>，这也就是为什么成员函数可以区分开来是哪个对象调用的，从而访问哪个对象中的成员变量】</li></ul>\n<p>❗特别注意：</p>\n<ul><li> <p><code>this</code>指针是隐含的，是编译器编译时加的，所以我们在调用成员函数传参的时候时=不能显示的加上<code>this</code>指针</p> </li><li> <p>但我们可以显示地在成员函数 中使用<code>this</code>指针（如上示例）</p> </li><li> <p><code>this</code>指针一般时储存在栈上的【不过不同编译器不同，在<code>VS</code>中时使用<code>eax</code>寄存器存储、传参的】</p> </li></ul>\n<hr color=\"#000000\" size='1\"'/>\n<h2><a id=\"_423\"></a>🥐Ⅰ.腾讯面试题</h2>\n<p>💡<strong>以上的知识便被腾讯运用在一道面试题目中：</strong></p>\n<ul><li> <p><code>this</code>指针可以为空吗？</p> </li><li> <p>下面程序能编译通过吗？</p> </li><li> <p>程序会崩溃吗？在哪里崩溃？</p> </li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">PrintA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> _a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Show()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tA<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\n\tp<span class=\"token operator\">-&gt;</span><span class=\"token function\">PrintA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tp<span class=\"token operator\">-&gt;</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>🙌<strong>我们来看一下答案吧：</strong></p>\n<blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8836fc05834b4b989afcaa58d7d9a1f0.png\"/></p>\n</blockquote>\n<p>➡️<strong>我们来解析一下吧：</strong></p>\n<blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4acc091549b34f35a6952714de5a75ca.png\"/></p>\n</blockquote>\n<ul><li> <p>1️⃣一个类型为<code>A*</code>的指针p被赋值为<code>空指针</code>，此时p会被看作为一个对象的地址【本身是没有这个对象的，但因为类型为<code>A*</code>，所以被看作有访问类里的成员的权力】</p> </li><li> <p>2️⃣在调用<code>PrintA</code>成员函数时，隐藏传递的对象的地址在这里传递的其实就是<code>p</code>（空指针）本身，所以<code>this</code>指针接收的也就是<code>空指针</code>，但因为<code>PrintA</code>内有涉及访问访问成员变量（即对<code>this</code>指针进行解引用：<code>nullptr-&gt;_a</code>），对空指针非法解引用了，所以会引发空指针访问的崩溃</p> </li><li> <p>3️⃣而在调用<code>Show</code>成员函数时，依旧传递的是<code>空指针</code>，但<code>Show</code>函数内并没有对p这个指针进行解引用，所以这里的程序是正常执行，不会引发崩溃的</p> </li></ul>\n<hr color=\"#000000\" size='1\"'/>\n<h2><a id=\"_482\"></a>🥯Ⅱ.总结</h2>\n<p>⭐<strong>综上：</strong> 关于<code>this</code>指针的细节还是很多的哟，但全部理解下来后看回去还是很简单的呢！</p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"bb__490\"></a><b>🍞五.</b> 如何高效学习数据结构与算法？</h1>\n<br/>\n<p><kbd>数据结构与算法</kbd>的学习还是得<code>基础知识</code>➕<code>自己动手</code>同步进行</p>\n<p>如果是初学者，需要找一个可以在线练习得网站，大家去<a href=\"https://www.nowcoder.com/link/pc_csdncpt_dream_sf\">牛客网</a>多练习呀（快点击跳转学起来吧！）</p>\n<blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bdc84b4b9c8f4c9ca9f6c10de2384ce8.png\"/></p>\n</blockquote>\n<p><a href=\"https://www.nowcoder.com/link/pc_csdncpt_dream_sf\">牛客网</a>还有大神提供题解思路，对新手玩家及其友好，有不清楚的语法，不理解的地方，看看别人的思路，别人的代码，也许就能豁然开朗~</p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_510\"></a>🫓总结</h1>\n<p>综上，我们基本了解了C++中的 <font color=\"#FF69B4\"><strong>“类和对象 - 封装”</strong> </font> 🍭 <font color=\"black\">的知识啦~</font></p>\n<p>恭喜你的内功又双叒叕得到了提高！！！</p>\n<p>感谢你们的阅读😆</p>\n<p>后续还会继续更新💓，欢迎持续关注📌哟~</p>\n<p>💫<strong>如果有错误❌，欢迎指正呀</strong>💫</p>\n<p><strong>✨如果觉得收获满满，可以点点赞👍支持一下哟~✨</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/a60f92c6d6124df2b7d2113a59f3a9e1.webp#pic_center\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-01 10:50:44", "summary": "前情提要本章节是的类和对象封装的相关知识接下来我们即将进入一个全新的空间，对代码有一个全新的视角以下的内容一定会让你对有一个颠覆性的认识哦！！！以下内容干货满满，跟上步伐吧作者介绍：作者：热爱编程不起"}