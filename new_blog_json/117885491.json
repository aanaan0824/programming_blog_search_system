{"blogid": "117885491", "writerAge": "码龄3年", "writerBlogNum": "49", "writerCollect": "2011", "writerComment": "568", "writerFan": "2677", "writerGrade": "6级", "writerIntegral": "6178", "writerName": "生产队的驴.", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_117885491.jpg", "writerRankTotal": "6987", "writerRankWeekly": "81663", "writerThumb": "4224", "writerVisitNum": "372488", "blog_read_count": "8031", "blog_time": "于 2021-06-13 23:45:39 发布", "blog_title": "C# 高效率编程 “多线程” 的基本使用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><strong>英文意思：</strong><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210613205107980.png\"/></p>\n<h2><a id=\"_2\"></a><strong>什么是多线程？</strong></h2>\n<p>比如你需要建房子，如果使用单线程，房子的门，地板，水管等都是你一个人安装，这样效率特别的低 总知就是 “<strong>终究还是一个人扛下了所有</strong>”。</p>\n<p>但是在开一个线程就可以把你一部分工作分给另一人（另一个线程）做，这样就不会导致你累死了（程序的假死）</p>\n<p><strong>例图：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210613235527263.jpg\"/></p>\n<h2><a id=\"CPU_15\"></a>CPU执行方式</h2>\n<p><strong>单核CPU：</strong><br/> 如果在单核CPU运行多线程程序，那么他将在线程中来回切换速度非常的快，感觉不出来</p>\n<p><strong>多核CPU：</strong><br/> 在多核CPU运行多线程，才是真正的多线程，同时执行</p>\n<p>下面以例子介绍他的使用方法</p>\n<h2><a id=\"_25\"></a>实例</h2>\n<p><em>命名空间</em></p>\n<blockquote>\n<p>using System.Threading;</p>\n</blockquote>\n<p>创建一个窗体应用程序<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210613214857646.png\"/><br/> 写一个方法</p>\n<blockquote>\n<p>void a() {<!-- --><br/> for (int i = 0; i &lt;= 1000000; i++){<!-- --><br/> textBox1.Text = i.ToString();<br/> }<br/> }</p>\n</blockquote>\n<p>按钮里调用</p>\n<blockquote>\n<p>a();//调用方法</p>\n</blockquote>\n<p>运行点击按钮，程序卡死一段时间，这是因为循环在主线程未结束造成的，<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210613215140339.png\"/><br/> 但是创建一个线程让他执行程序就不会卡死，把之前的调用删除</p>\n<p>按钮里创建线程</p>\n<blockquote>\n<p>Thread th = new Thread(a);<br/> //创建一个线程，执行方法a的代码<br/> th.Start();<br/> //告诉CPU可以执行这个线程了</p>\n</blockquote>\n<p>运行的时候跳异常了 ，这是因为“胯线程”了<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2021061322040135.png\"/></p>\n<h2><a id=\"_62\"></a>跨线程的解决方法</h2>\n<p>之所以出异常是因为创建的“线程”去访问了“textBox1.Text”<br/> 而“textBox1.Text\"文本框的控件是在主线程中创建的</p>\n<p><strong>解决方法：</strong><br/> 在窗体加载的时禁止”跨线程“的检测</p>\n<blockquote>\n<p>CheckForIllegalCrossThreadCalls = false;<br/> //写在窗体下</p>\n</blockquote>\n<p>这样就可以运行了</p>\n<p>但是运行的速度非常的快，一秒钟就到大几千了，给他加一个时间间隔<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210613221640113.png\"/></p>\n<h2><a id=\"_82\"></a>线程的间隔时间</h2>\n<blockquote>\n<p>Thread.Sleep(1000);<br/> //间隔1秒 单位：毫秒</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210613222006851.png\"/><br/> 这样一秒钟就加一个数字了</p>\n<p><strong>程序已经关闭了，为什么Vs中还显示在运行？</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210613222805868.png\"/><br/> 因为程序的线程在前台，程序关闭后线程还在继续执行，直到运行完，如果是个死循环那么将不会结束</p>\n<p>解决方法：</p>\n<pre><code> Thread th = new Thread(a);\n   //创建一个线程，执行方法a的代码 \n\n th.IsBackground = true;\n      //在后台执行\n         \n   th.Start();\n  //告诉CPU可以执行这个线程了\n</code></pre>\n<h2><a id=\"_109\"></a>前台线程与后台线程</h2>\n<p><strong>前台线程（默认）</strong>：程序关闭但线程还在执行，程序还没真正的关闭，直到代码运行完才关闭，关闭了但还没完全关闭</p>\n<p><strong>后台线程</strong>：程序关闭后，线程也一起关闭</p>\n<blockquote>\n<p>th.IsBackground = true;<br/> //设置成后台线程</p>\n</blockquote>\n<p>这个例子就结束了！！</p>\n<h2><a id=\"_125\"></a>线程间参数的传递</h2>\n<p>这是一个方法体，传递参数到a1 a2 上</p>\n<blockquote>\n<p>static int a (int a1,int a2) {<!-- --></p>\n<p>int b = a1 + a2;</p>\n<p>Console.Write(b);<br/> }</p>\n</blockquote>\n<p><strong>传递方式1（建议使用）：</strong></p>\n<blockquote>\n<p>Thread th = new Thread(()=&gt;a(1,1));<br/> //创建一个线程，传递两个 1 的参数<br/> th.Start();<br/> //开始线程</p>\n</blockquote>\n<p>===============================</p>\n<p><strong>传递方式2（单参数）</strong></p>\n<p>方法类型必须是 object 类型的 否则无法传递，而且只能单个参数，必须得类型转换<br/> <strong>创建方法：</strong></p>\n<blockquote>\n<p>static void a (object a1) {<!-- --><br/> int b = Convert.ToInt32(a1);<br/> Console.Write(b);<br/> }</p>\n</blockquote>\n<p><strong>传递参数：</strong></p>\n<blockquote>\n<p>Thread th = new Thread(a);<br/> //创建一个线程<br/> th.Start(“1”);<br/> //开始线程</p>\n</blockquote>\n<h2><a id=\"_165\"></a>线程命名</h2>\n<p>这个好像没什么用…</p>\n<blockquote>\n<p>Thread.CurrentThread.Name = “马冬梅”;<br/> //给当前线程命名（主线程）<br/> Console.WriteLine(Thread.CurrentThread.Name);<br/> //输出主线程的名字<br/> Thread th = new Thread(a);<br/> //创建一个线程<br/> th.Name = “小马哥的棺材”;<br/> //给创建的线程命名</p>\n<pre><code>  static void  a () \n      {\n\n  Console.WriteLine(Thread.CurrentThread.Name);\n          输出当前线程名        \"小马哥的棺材\"\n    }\n</code></pre>\n</blockquote>\n<p><strong>运行结果：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210613233156358.png\"/></p>\n<h2><a id=\"_192\"></a>等待线程执行完后在执行</h2>\n<p>编写程序中需要等一个线程执行完后在继续执行下面的语句，例如加载一些东西等</p>\n<pre><code>   th.Join(); //等待这个线程执行完\n</code></pre>\n<blockquote>\n<p>Thread th = new Thread(a);<br/> //创建一个线程<br/> th.Start(); //开始线程<br/> th.Join(); //等待这个线程执行完<br/> Console.Write(“小马哥的棺材板”);</p>\n<pre><code>    static   void  a() {\n        Console.WriteLine(\"线程在执行\");\n        Thread.Sleep(3000);\n        //线程间隔3秒                        \n    }\n</code></pre>\n</blockquote>\n<p>使用这个方法需要等待这个线程执行完成后才会继续执行后面的代码</p>\n<p><strong>纯手打，点个赞呗~</strong></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-06-13 23:45:39", "summary": "英文意思：在这里插入图片描述什么是多线程？比如你需要建房子，如果使用单线程，房子的门，地板，水管等都是你一个人安装，这样效率特别的低总知就是终究还是一个人扛下了所有。但是在开一个线程就可以把你一部分工"}