{"blogid": "124483692", "writerAge": "码龄3年", "writerBlogNum": "18", "writerCollect": "68", "writerComment": "2", "writerFan": "1", "writerGrade": "2级", "writerIntegral": "198", "writerName": "Liu-yasai", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124483692.jpg", "writerRankTotal": "105750", "writerRankWeekly": "803217", "writerThumb": "16", "writerVisitNum": "13276", "blog_read_count": "2656", "blog_time": "于 2022-04-28 22:13:19 发布", "blog_title": "JS中字符串常用方法总结", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"1charAt_0\"></a>1.charAt()方法</h1>\n<p>charAt() 方法可返回字符串中指定位置的字符。</p>\n<pre><code>let str = \"Hello\";\nlet s = str.charAt(1);\nconsole.log(s);//e\n</code></pre>\n<p>语法：string.charAt(index)<br/> index 必需值。表示字符串中某个位置的数字，即字符在字符串中的位置。</p>\n<h1><a id=\"2concat__10\"></a>2.concat() 方法</h1>\n<p>concat() 方法用于连接两个或多个字符串。<br/> 该方法没有改变原有字符串，但是会返回连接两个或多个字符串新字符串</p>\n<pre><code>let str = \"Hello\";\nlet str2 = \"World\";\nlet s = str.concat(str2);\nconsole.log(s); //HelloWorld\n</code></pre>\n<p>语法：string.concat(string1, string2, …, stringX)<br/> string1, string2, …, stringX 必需值。将被连接为一个字符串的一个或多个字符串对象。</p>\n<h1><a id=\"3indexOf__22\"></a>3.indexOf() 方法</h1>\n<p>indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。<br/> 如果没有找到匹配的字符串则返回 -1。</p>\n<pre><code>let str = \"Hello\";\nlet s = str.indexOf(\"e\");\nconsole.log(s); //1\n</code></pre>\n<p>语法：string.indexOf(searchvalue,start)<br/> searchvalue 必需值。规定需检索的字符串值。<br/> start 可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 string Object.length - 1。如省略该参数，则将从字符串的首字符开始检索。</p>\n<h1><a id=\"4includes__34\"></a>4.includes() 方法</h1>\n<p>includes() 方法用于判断字符串是否包含指定的子字符串。</p>\n<pre><code>let str = \"Hello\";\nlet s = str.includes(\"e\");\nconsole.log(s); //true\n</code></pre>\n<p>语法：string.includes(searchvalue, start)<br/> searchvalue 必需值，要查找的字符串。<br/> start 可选值，设置从那个位置开始查找，默认为 0。</p>\n<h1><a id=\"5match__45\"></a>5.match() 方法</h1>\n<p>match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。</p>\n<pre><code>let str = \"Hello\";\nlet s = str.match(/l/g);\nconsole.log(s); //[ 'l', 'l' ]\n</code></pre>\n<p>语法：string.match(regexp)<br/> regexp 必需。规定要匹配的模式的 RegExp 对象。如果该参数不是 RegExp 对象，则需要首先把它传递给 RegExp 构造函数，将其转换为 RegExp 对象。</p>\n<h1><a id=\"6repeat__55\"></a>6.repeat() 方法</h1>\n<p>repeat() 方法字符串复制指定次数。</p>\n<pre><code>let str = \"Hello\";\nlet s = str.repeat(2);\nconsole.log(s); //HelloHello\n</code></pre>\n<p>语法：string.repeat(count)<br/> count 必需，设置要复制的次数。</p>\n<h1><a id=\"7replace__65\"></a>7.replace() 方法</h1>\n<p>replace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</p>\n<pre><code>let str = \"Hello\";\nlet s = str.replace(\"l\", \"o\");\nconsole.log(s); //Heolo\n</code></pre>\n<p>语法：string.replace(searchvalue,newvalue)<br/> searchvalue 必须。规定子字符串或要替换的模式的 RegExp 对象。<br/> 请注意，如果该值是一个字符串，则将它作为要检索的直接量文本模式，而不是首先被转换为 RegExp 对象。<br/> newvalue 必需。一个字符串值。规定了替换文本或生成替换文本的函数。</p>\n<h1><a id=\"8replaceAll_77\"></a>8.replaceAll()方法</h1>\n<p>replaceAll() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串，该函数会替换所有匹配到的子字符串。</p>\n<pre><code>let str = \"Hello\";\nlet s = str.replaceAll(\"l\", \"o\");\nconsole.log(s); //Heooo\n\n</code></pre>\n<p>语法同replace方法相同</p>\n<h1><a id=\"9search__87\"></a>9.search() 方法</h1>\n<p>search() 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。返回与指定查找的字符串或者正则表达式相匹配的 String 对象起始位置。</p>\n<pre><code>let str = \"Hello\";\nlet s = str.search(\"lo\");\nconsole.log(s); //3\n\n</code></pre>\n<p>语法：string.search(searchvalue)<br/> searchvalue 必须。查找的字符串或者正则表达式。</p>\n<h1><a id=\"10slice__98\"></a>10.slice() 方法</h1>\n<p>slice(start, end) 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分。</p>\n<pre><code>let str = \"Hello\";\nlet s = str.slice(1, 2);\nconsole.log(s); //e\n\n</code></pre>\n<p>语法:string.slice(start,end)<br/> start 必须。 要抽取的片断的起始下标，第一个字符位置为 0。如果为负数，则从尾部开始截取。<br/> end 可选。 紧接着要截取的片段结尾的下标。若未指定此参数，则要提取的子串包括 start 到原字符串结尾的字符串。如果该参数是负数，那么它规定的是从字符串的尾部开始算起的位置。slice(-2) 表示提取原数组中的倒数第二个元素到最后一个元素（包含最后一个元素）。</p>\n<h1><a id=\"11split__110\"></a>11.split() 方法</h1>\n<p>split() 方法用于把一个字符串分割成字符串数组。</p>\n<pre><code>let str = \"Hello\";\nlet s = str.split(\"e\");\nconsole.log(str); //Hello\nconsole.log(s); //[ 'H', 'llo' ]\n\n</code></pre>\n<p>语法：string.split(separator,limit)<br/> separator 可选。字符串或正则表达式，从该参数指定的地方分割 string Object。<br/> limit 可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。</p>\n<h1><a id=\"12substring__123\"></a>12.substring() 方法</h1>\n<p>substring() 方法用于提取字符串中介于两个指定下标之间的字符。</p>\n<pre><code>let str = \"Hello\";\nlet s = str.substring(1, 3);\nconsole.log(str); //Hello\nconsole.log(s); //el\n</code></pre>\n<p>语法：string.substring(from, to)<br/> from 必需。一个非负的整数，规定要提取的子串的第一个字符在 string Object 中的位置。<br/> to 可选。一个非负的整数，比要提取的子串的最后一个字符在 string Object 中的位置多 1。<br/> 如果省略该参数，那么返回的子串会一直到字符串的结尾。</p>\n<h1><a id=\"13toLowerCasetoUpperCase_136\"></a>13.toLowerCase()和toUpperCase()方法</h1>\n<p>toLowerCase() 方法用于把字符串转换为小写。<br/> toUpperCase() 方法用于把字符串转换为大写。</p>\n<pre><code>let str = \"Hello\";\nlet s = str.toLowerCase();\nlet s2 = str.toUpperCase();\nconsole.log(str); //Hello\nconsole.log(s); //hello\nconsole.log(s2);//HELLO\n\n</code></pre>\n<h1><a id=\"14trim__149\"></a>14.trim() 方法</h1>\n<p>trim() 方法用于删除字符串的头尾空白符，空白符包括：空格、制表符 tab、换行符等其他空白符等。</p>\n<pre><code>let str = \"    Hello   \";\nlet s = str.trim();\nconsole.log(str); //    Hello\nconsole.log(s); //Hello\n\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-04-28 22:13:19", "summary": "方法方法可返回字符串中指定位置的字符。语法：必需值。表示字符串中某个位置的数字，即字符在字符串中的位置。方法方法用于连接两个或多个字符串。该方法没有改变原有字符串，但是会返回连接两个或多个字符串新字符"}