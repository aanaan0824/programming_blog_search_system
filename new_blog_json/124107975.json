{"blogid": "124107975", "writerAge": "码龄4年", "writerBlogNum": "33", "writerCollect": "54", "writerComment": "11", "writerFan": "4", "writerGrade": "2级", "writerIntegral": "356", "writerName": "qq_42393139", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124107975.jpg", "writerRankTotal": "52064", "writerRankWeekly": "29398", "writerThumb": "12", "writerVisitNum": "34929", "blog_read_count": "4876", "blog_time": "于 2022-04-11 21:51:06 发布", "blog_title": "Unity Timeline的使用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"TimeLine_0\"></a>创建TimeLine</h1>\n<p><strong>第一种方法</strong>：在Assets目录下，右键Create—&gt;TimeLine，<br/> 双击创建的TimeLine文件，就可以打开TimeLine窗口<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3ddae0b1f6c944f998322ca3d9e081e5.png\"/></p>\n<p><strong>第二种方法</strong>：<br/> 找到右上角的菜单Window<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\543fe6e759a84eaebe4df3fb33b41b36.png\"/><br/> 找到Sequencing—&gt;TimeLine<br/> 打开TimeLine窗口<br/> 由于TimeLine必须依附于一个游戏对象上的Playable Director组件，所以创建一个空物体，并选中它，点击TimeLine窗口中的Create<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6dee644b495548239b1bdf5962876306.png\"/><br/> 系统会自动为这个空物体挂载Animator和Playable Director组件<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5046b6f49ad842439792d22c80f87a86.png\"/><br/> 将TimeLine窗口中的TimeLine_Obj(Animator)删掉，我们不需要它（后面其实也可以自己创建）</p>\n<h1><a id=\"ActivationTrack_15\"></a>ActivationTrack</h1>\n<p>用来设置物体的激活状态</p>\n<p><strong>只要动画播放到ActivationTrack的轨道上，物体就会被激活，在这之外全部为失活状态</strong><br/> 如图，用Cube做例子<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\92cb2ac4ab9b4f498327b86154b7ef8a.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\15849b3e62a943eeb4441858bd998d89.png\"/><br/> 点击选中ActivationTrack的这条轨道，Inspector面板上其实是可以对动画播放之后的处理进行设置的<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f4f247de8225448994654a998ad6807e.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b9bfef5b17364bfeab62ac9a17b2f110.png\"/><br/> <strong>Active</strong>：设置为激活的(active=true)，当Timeline资源播放完后，物体始终会保持激活状态（运行之后才能看到效果）。</p>\n<p><strong>Inactive</strong> ：播放Timeline完后，设置为非激活(active=false)。</p>\n<p><strong>Revert</strong> ：在Timeline播放完后，GameObject.active=播放前的GameObject.active的去反值。<br/> 也就是说，播放TimeLine之前是激活的，播放完后就是失活的（active=false）</p>\n<p><strong>Leave As Is</strong>： 设置active的状态是依赖Timeline资源播放完后active的值是什么就保持为什么。<br/> 例如，Timeline播放完后物体是失活的（active=false），那么物体就就保持为失活状态了（active=false）。</p>\n<h1><a id=\"Animation_Track_36\"></a>Animation Track</h1>\n<p>动画轨道，必须依附于Animator才能使用<br/> 创建一个Sphere球体，并给它挂载Animator<br/> 通过Animation录一段简单的位移动画<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6ed0c1edae23492699fbfe73ff09a151.png\"/><br/> 我录了一段上下位移的动画，命名为Sphere_Jump<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3dbd124d71c842718334860459fabea0.png\"/><br/> 在TimeLine中创建一个AnimationTrack，将刚刚的Sphere拖进去，因为Sphere上带有Animator，可以直接赋值，然后将刚刚录制的动画片段拖到轨道上<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\830f44e812864510920f8d0e6cd0f315.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e21119e05c9e44a28fdd97fbb500d6d8.png\"/><br/> 播放后，在Sphere跳起的过程中，Cube会被激活</p>\n<h1><a id=\"Playable_Track_47\"></a>Playable Track</h1>\n<p>可播放轨道，可以用来执行C#脚本中的方法<br/> 但是不同于Animtion中的事件，写法不同</p>\n<p>我们需要两个成对的脚本，缺一不可，一个是<br/> <strong>PlayableAsset</strong><br/> <strong>PlayableBehaviour</strong><br/> 我们要用来执行的脚本，<strong>必须要继承这两个类</strong><br/> 我们可以直接在Asset文件夹下右键<br/> Create—&gt;Playables分别创建这两个脚本<br/> 我这里命名为：<br/> <strong>TimeLineEvent_Asset.cs<br/> TimeLineEvent_Behaviour.cs</strong></p>\n<p>代码内容分别为：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>Playables</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Serializable</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TimeLineEvent_Asset</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">PlayableAsset</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// Factory method that generates a playable based on this asset</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Playable</span> <span class=\"token function\">CreatePlayable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PlayableGraph</span> graph<span class=\"token punctuation\">,</span> <span class=\"token class-name\">GameObject</span> go<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> Playable<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>Playables</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// A behaviour that is attached to a playable</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TimeLineEvent_Behaviour</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">PlayableBehaviour</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// Called when the owning graph starts playing</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnGraphStart</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Playable</span> playable<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Called when the owning graph stops playing</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnGraphStop</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Playable</span> playable<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Called when the state of the playable is set to Play</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnBehaviourPlay</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Playable</span> playable<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FrameData</span> info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Called when the state of the playable is set to Paused</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnBehaviourPause</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Playable</span> playable<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FrameData</span> info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Called each frame while the state is set to Play</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">PrepareFrame</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Playable</span> playable<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FrameData</span> info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这里来写一个简单的功能</p>\n<p>创建一个Capsule胶囊体，通过TimeLine来改变它的颜色</p>\n<p>将TimeLineEvent_Behaviour .cs中的代码进行精简后，编写如下，在播放的时候将胶囊体的材质设置为红色，暂停为白色</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>Playables</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// A behaviour that is attached to a playable</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TimeLineEvent_Behaviour</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">PlayableBehaviour</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">GameObject</span> target<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Called when the state of the playable is set to Play</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnBehaviourPlay</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Playable</span> playable<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FrameData</span> info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        target<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MeshRenderer<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>material<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>red<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Called when the state of the playable is set to Paused</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnBehaviourPause</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Playable</span> playable<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FrameData</span> info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        target<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MeshRenderer<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>material<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在<strong>TimeLineEvent_Asset.cs</strong>中编写代码：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>Playables</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Serializable</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TimeLineEvent_Asset</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">PlayableAsset</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//这是为了设置TimeLineEvent_Behaviour 中的target属性的值</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ExposedReference<span class=\"token punctuation\">&lt;</span>GameObject<span class=\"token punctuation\">&gt;</span></span> target<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Factory method that generates a playable based on this asset</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Playable</span> <span class=\"token function\">CreatePlayable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PlayableGraph</span> graph<span class=\"token punctuation\">,</span> <span class=\"token class-name\">GameObject</span> go<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> p <span class=\"token operator\">=</span> ScriptPlayable<span class=\"token operator\">&lt;</span>TimeLineEvent_Behaviour<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//获取面版上的赋值</span>\n        p<span class=\"token punctuation\">.</span><span class=\"token function\">GetBehaviour</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">Resolve</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">.</span><span class=\"token function\">GetResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bbf6c6b0590e44b19d8f14fff5a08d11.png\"/><br/> 在TimeLine窗口上右键创建Playable Track，再点击旁边的三个点，选择TimeLine_Event_Asset，其他的是我之前写的，不用在意<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0c9df8da0e014a37869213ee3826a054.png\"/><br/> 创建之后，选择轨道上的片段<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3dd3f57fd88049b6ad8b444fb313177a.png\"/><br/> 右侧会出现我们刚刚写的暴露出来的Target，这个其实就是<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d1fffd06902f49eda90e47f6c8616074.png\"/><br/> 将创建的胶囊体拖拽过去<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\043c752f86574b81bcdbdedf48c6ef74.png\"/><br/> 播放TimeLine<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9e0ec6776f764bf1b41b25d7034fa1e9.png\"/><br/> 当播放到Playable Track上的片段时，胶囊体就变成了红色<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\847b1a11b71d4f46827e83b483ee01ae.png\"/><br/> 但是，这样并不方便我们对动画进行调试，有时候我们想要在物体身上挂载脚本然后进行调试，这时候，需要加入第三个脚本<br/> <strong>TrackAsset</strong></p>\n<p>创建一个继承MonoBehaviour的脚本，实现一个功能，将一个列表中的所有物体全部变成红色</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TimeLineEvent_Mono</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>GameObject<span class=\"token punctuation\">&gt;</span></span> objs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>GameObject<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SetObjColor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isRed<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> objs<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isRed<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                objs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MeshRenderer<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>material<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>red<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                objs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MeshRenderer<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>material<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>white<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>创建一个类继承TrackAsset</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>Playables</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>Timeline</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//这个一定要是继承PlayableAsset的类</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">TrackClipType</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">TimeLineEvent_Asset</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">//这个一定是继承MonoBehaviour的类</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">TrackBindingType</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">TimeLineEvent_Mono</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TimeLineEvent_Track</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">TrackAsset</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Playable</span> <span class=\"token function\">CreateTrackMixer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PlayableGraph</span> graph<span class=\"token punctuation\">,</span> <span class=\"token class-name\">GameObject</span> go<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> inputCount<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> ScriptPlayable<span class=\"token operator\">&lt;</span>TimeLineEvent_Behaviour<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> inputCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>将TimeLineEvent_Asset脚本进行修改</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>Playables</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Serializable</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TimeLineEvent_Asset</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">PlayableAsset</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ExposedReference<span class=\"token punctuation\">&lt;</span>TimeLineEvent_Mono<span class=\"token punctuation\">&gt;</span></span> target<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Factory method that generates a playable based on this asset</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Playable</span> <span class=\"token function\">CreatePlayable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PlayableGraph</span> graph<span class=\"token punctuation\">,</span> <span class=\"token class-name\">GameObject</span> go<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> p <span class=\"token operator\">=</span> ScriptPlayable<span class=\"token operator\">&lt;</span>TimeLineEvent_Behaviour<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        p<span class=\"token punctuation\">.</span><span class=\"token function\">GetBehaviour</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">Resolve</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">.</span><span class=\"token function\">GetResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>对TimeLineEvent_Behaviour进行修改</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>Playables</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// A behaviour that is attached to a playable</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TimeLineEvent_Behaviour</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">PlayableBehaviour</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//public GameObject target;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TimeLineEvent_Mono</span> target<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Called when the state of the playable is set to Play</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnBehaviourPlay</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Playable</span> playable<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FrameData</span> info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        target<span class=\"token punctuation\">.</span><span class=\"token function\">SetObjColor</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Called when the state of the playable is set to Paused</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnBehaviourPause</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Playable</span> playable<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FrameData</span> info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        target<span class=\"token punctuation\">.</span><span class=\"token function\">SetObjColor</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>保存后，回到TimeLine窗口（最好关闭TimeLine窗口再打开，有时候不会刷新），右键会多了一个TimeLineEvent_Track的选项，选中它<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b29fdf4367874cf5bf9565f61c9c28d9.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\67733b5c42254106af3b6bf170a08d3c.png\"/><br/> 这个时候就可以将挂载TimeLineEvent_Mono 的物体拖入进去了<br/> 在场景中创建一个空物体，和4个胶囊体，在空物体上挂载TimeLineEvent_Mono 脚本，将四个胶囊体拖入列表中，<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8607acdf6e53472cac3e6e86263ce1b4.png\"/><br/> 将Test物体拖入到TimeLine中<br/> 再将Test拖入到轨道上<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b9eb73e107944d96bc1ab25b4182bbe3.png\"/><br/> 播放后，播放到相应片段上胶囊体变白，其他时候是红色的<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\805619b644ce452cbd847254a95696f8.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c3c5bfad533e4bbebcf3bea63aa9a52c.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-04-11 21:51:06", "summary": "创建第一种方法：在目录下，右键，双击创建的文件，就可以打开窗口在这里插入图片描述第二种方法：找到右上角的菜单在这里插入图片描述找到打开窗口由于必须依附于一个游戏对象上的组件，所以创建一个空物体，并选中"}