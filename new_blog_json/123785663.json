{"blogid": "123785663", "writerAge": "码龄2年", "writerBlogNum": "68", "writerCollect": "1904", "writerComment": "1445", "writerFan": "6655", "writerGrade": "6级", "writerIntegral": "5474", "writerName": "AKA你的闺蜜", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123785663.jpg", "writerRankTotal": "2912", "writerRankWeekly": "411", "writerThumb": "2640", "writerVisitNum": "78902", "blog_read_count": "2572", "blog_time": "已于 2022-03-30 04:38:17 修改", "blog_title": "C++初阶：list类", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"List_0\"></a>List</h1>\n<p><a href=\"http://www.cplusplus.com/reference/list/list/\">list (cplusplus.com)</a></p>\n<h3><a id=\"list__4\"></a>list 的介绍</h3>\n<blockquote>\n<p>list 是能够在序列内任意位置执行常数次插入删除操作的顺序容器，并且它具有双向迭代器。</p>\n<p>list 容器的实现类似于双向链表，双向链表可以将每个元素存储内存中不同且不相关的地址处。整个链表的顺序由它的节点与其前后节点的链接关联决定。</p>\n<p>list 容器和 forward_list 容器很像：他们主要区别在于 forward_list 对象是单向链表，所以它只能向前迭代，以换取稍微小点的体积以及更高的效效率。</p>\n<p>和其他基础地标准顺序容器（数组，vector，deque）相比，通常，list 容器使用已获取的迭代器在任意位置插入、提取以及移动元素方面表现的更优。因此算法库中大量使用 list 容器，如排序算法。</p>\n<p>list 容器和 forward_list 容器和其他顺序容器相比，其主要的短板在于缺少通过下标对元素的随机访问。举个例子，为访问 list 容器中的第六个元素，可以从开头或结尾处进行迭代遍历，这样会消耗正比于元素间距离的时间。而且还需要花费一些额外的空间来保存元素之间的连接关系（这可能是影响链表体积大小的一个重要因素）。</p>\n</blockquote>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span> \n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//模板参数T</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">Alloc</span> <span class=\"token operator\">=</span> allocator<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> <span class=\"token comment\">//空间配置器</span>\n         <span class=\"token operator\">&gt;</span> \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">list</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//类模板</span>\n</code></pre>\n<p>由声明可知，list 同样是个类模板。实际上，list 是一个<strong>双向带头循环的链表</strong>。</p>\n<h2><a id=\"1_list__30\"></a>1. list 的使用</h2>\n<h3><a id=\"11__32\"></a>1.1 默认成员函数</h3>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\c6bf081631a048998d62094b859d70fa.png\"/></p>\n<ol><li>默认构造，即空构造，构造出一个空的对象。</li><li>填充构造，使用 n 个指定类型的变量 val 填充对象。</li><li>范围构造，使用任意类型对象的迭代器区间 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         [\n        \n        \n         f\n        \n        \n         i\n        \n        \n         r\n        \n        \n         s\n        \n        \n         t\n        \n        \n         ,\n        \n        \n         l\n        \n        \n         a\n        \n        \n         s\n        \n        \n         t\n        \n        \n         )\n        \n       \n       \n        [first,last)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">r</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.01968em;\">l</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span></span>，将区间中的元素按相应的顺序构造对象。</li><li>拷贝构造，构造对象并将指定 list 对象的元素拷贝至其中。</li></ol>\n<h3><a id=\"12__reverse_42\"></a>1.2 逆置 reverse</h3>\n<p>逆置整个链表。</p>\n<pre><code class=\"prism language-cpp\">lt<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"13__sort_50\"></a>1.3 排序 sort</h3>\n<p>list 不支持随机访问，所以 list 不支持算法库中的 sort 函数。list 单独内置一个 sort 接口，使用的是归并排序，但实际上该排序的效率并不高。当需要经常对数据进行排序的时候，不要选择链表来存储。</p>\n<pre><code class=\"prism language-cpp\">lt<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"14__unique_58\"></a>1.4 去重 unique</h3>\n<p>去重接口可以去掉链表中的重复元素，但<strong>前提是需先将链表排成有序状态</strong>。</p>\n<pre><code class=\"prism language-cpp\">lt<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlt<span class=\"token punctuation\">.</span><span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"15__remove_67\"></a>1.5 删除 remove</h3>\n<p>删除链表中所有指定值的元素，不是指定下标位置的元素。</p>\n<pre><code class=\"prism language-cpp\">lt<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"16__splice_75\"></a>1.6 接合 splice</h3>\n<p>接合函数能将一个链表中的一个或多个节点，转移到另一个链表中的指定迭代器位置。</p>\n<p>可转移整个链表，可转移链表内的一个元素，转移一个迭代器区间。</p>\n<pre><code class=\"prism language-cpp\">lt<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 转移整个迭代器 </span>\nlt<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 转移链表的单个节点</span>\nlt<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">,</span> first<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 转移链表的一段区间</span>\n</code></pre>\n<p><code>splice</code>的功能是<strong>转移不是拷贝</strong>，所以原链表中的该节点将不复存在。</p>\n<p> </p>\n<blockquote>\n<p>list 实际中用的并不多，因为 list 不支持随机访问，包括OJ中也更多用的是 vector。list 的重点在于模拟实现。</p>\n</blockquote>\n<h2><a id=\"2_list__95\"></a>2. list 的模拟实现</h2>\n<h3><a id=\"21_list__97\"></a>2.1 list 类的定义</h3>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// listnode类</span>\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">__list_node</span> <span class=\"token punctuation\">{<!-- --></span> \n    <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;</span> data <span class=\"token operator\">=</span> <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \t<span class=\"token operator\">:</span> <span class=\"token function\">_data</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">,</span> <span class=\"token function\">_prev</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">,</span> <span class=\"token function\">_next</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n    __list_node<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> _prev<span class=\"token punctuation\">;</span>\n    __list_node<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> _next<span class=\"token punctuation\">;</span>\n    T _data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// list类</span>\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">list</span> <span class=\"token punctuation\">{<!-- --></span> \n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">typedef</span> __list_node<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> Node<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \t<span class=\"token operator\">:</span> <span class=\"token function\">_head</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Node<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        _head<span class=\"token operator\">-&gt;</span>_prev <span class=\"token operator\">=</span> _head<span class=\"token punctuation\">;</span>\n        _head<span class=\"token operator\">-&gt;</span>_next <span class=\"token operator\">=</span> _head<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    Node<span class=\"token operator\">*</span> _head<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>__list_node 是链表节点的类，他用于用于构造链表的节点。</li><li>list 是链表类，他的成员变量是 __list_node 节点类型的节点指针，用于构造链表的头节点，以便链接之后的存储节点。</li><li>一般用来被别的类使用的类都用<code>struct</code>定义，因为 struct 定义的类成员默认都是公有的。</li></ul>\n<h3><a id=\"22__132\"></a>2.2 默认成员</h3>\n<h4><a id=\"_134\"></a>构造函数</h4>\n<table><thead><tr><th>构造函数</th><th>接口说明</th></tr></thead><tbody><tr><td><strong>list ()</strong></td><td>默认构造，构造出空的 list 容器</td></tr><tr><td><strong>list (size_type n, const value_type&amp; val = value_type())</strong></td><td>填充构造，构造出指定的 n 个 val 节点的链表</td></tr><tr><td><strong>list (const list&amp; lt)</strong></td><td>拷贝构造，深拷贝构造出值与 lt 相同的链表</td></tr><tr><td><strong>list (InputIterator first, InputIterator last)</strong></td><td>用一段迭代器区间深拷贝构造出相同的链表</td></tr></tbody></table>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">/* default constructor */</span>\n<span class=\"token function\">list</span><span class=\"token punctuation\">(</span>T x <span class=\"token operator\">=</span> <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">:</span><span class=\"token function\">_head</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    _head<span class=\"token operator\">-&gt;</span>_prev <span class=\"token operator\">=</span> _head<span class=\"token punctuation\">;</span>\n    _head<span class=\"token operator\">-&gt;</span>_next <span class=\"token operator\">=</span> _head<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\5f523c7fe8664cd29a95d276d6fa937c.png\"/></p>\n<blockquote>\n<p>这样就构造出了带头的空链表。</p>\n</blockquote>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">/* copy constructor */</span>\n<span class=\"token comment\">//传统写法</span>\n<span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> list<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> lt<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">:</span><span class=\"token function\">_head</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Node<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    _head<span class=\"token operator\">-&gt;</span>_prev <span class=\"token operator\">=</span> _head<span class=\"token punctuation\">;</span>\n    _head<span class=\"token operator\">-&gt;</span>_next <span class=\"token operator\">=</span> _head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> lt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//现代写法</span>\n<span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> list<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> lt<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">:</span> <span class=\"token function\">_head</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Node<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    _head<span class=\"token operator\">-&gt;</span>_prev <span class=\"token operator\">=</span> _head<span class=\"token punctuation\">;</span>\n    _head<span class=\"token operator\">-&gt;</span>_next <span class=\"token operator\">=</span> _head<span class=\"token punctuation\">;</span> <span class=\"token comment\">//处理随机值</span>\n    list<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> <span class=\"token function\">tmp</span><span class=\"token punctuation\">(</span>lt<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>lt<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>_head<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">.</span>_head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/* deconstructor */</span>\n<span class=\"token operator\">~</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> _head<span class=\"token punctuation\">;</span>\n    _head <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/* fill constructor */</span>\n<span class=\"token function\">list</span><span class=\"token punctuation\">(</span>size_t n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> val <span class=\"token operator\">=</span> <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">:</span><span class=\"token function\">_head</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Node<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    _head<span class=\"token operator\">-&gt;</span>_prev <span class=\"token operator\">=</span> _head<span class=\"token punctuation\">;</span>\n    _head<span class=\"token operator\">-&gt;</span>_next <span class=\"token operator\">=</span> _head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        n<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/* range constructor */</span>\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">InputIterator</span><span class=\"token operator\">&gt;</span>\n<span class=\"token function\">list</span><span class=\"token punctuation\">(</span>InputIterator first<span class=\"token punctuation\">,</span> InputIterator last<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">:</span><span class=\"token function\">_head</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Node<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    _head<span class=\"token operator\">-&gt;</span>_prev <span class=\"token operator\">=</span> _head<span class=\"token punctuation\">;</span>\n    _head<span class=\"token operator\">-&gt;</span>_next <span class=\"token operator\">=</span> _head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>first <span class=\"token operator\">!=</span> last<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">++</span>first<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>当节点的值为内置类型时，范围构造和填充构造会产生冲突。如下代码所示：</p>\n<pre><code class=\"prism language-cpp\">list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">lt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token function\">list</span><span class=\"token punctuation\">(</span>size_t n<span class=\"token punctuation\">,</span> T<span class=\"token operator\">&amp;</span> val <span class=\"token operator\">=</span> <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token operator\">-&gt;</span>  <span class=\"token function\">list</span><span class=\"token punctuation\">(</span>size_t n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">list</span><span class=\"token punctuation\">(</span>InIter first<span class=\"token punctuation\">,</span> InIter last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">-&gt;</span>  <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> first<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>当用链表构造3个值为5的节点，<code>3,5</code>默认都是整型，模板实例化后显然迭代器范围构造的重载版本更符合要求，就意外走入了范围构造。内置类型不会存在这样的问题。</p>\n<p>只有当传入整型或无符号整型时会出现这样的问题，可以单独重载一个<code>(size_t n, int val)</code>的版本。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//list&lt;int&gt; lt(3, 5);</span>\n<span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">list</span><span class=\"token punctuation\">(</span>size_t n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> val <span class=\"token operator\">=</span> <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">InputIterator</span><span class=\"token operator\">&gt;</span>\n<span class=\"token function\">list</span><span class=\"token punctuation\">(</span>InputIterator first<span class=\"token punctuation\">,</span> InputIterator last<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_237\"></a>赋值重载</h4>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//传统写法</span>\nlist<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> list<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> lt<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> lt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//现代写法</span>\nlist<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>list lt<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    std<span class=\"token operator\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>_head<span class=\"token punctuation\">,</span> lt<span class=\"token punctuation\">.</span>_head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"23__259\"></a>2.3 迭代器</h3>\n<p>迭代器模拟指针的机制，意图能够像指针一样便捷操作容器数据，一般需要实现类似指针的解引用、加减常数、相互比较这些运算。比如下例代码所需要的功能：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> lt<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    it<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>string, vector 等顺序容器的物理结构是一块连续的空间，这使得该容器可直接通过指针运算实现迭代器的功能。但 list 的底层实现并不是连续空间，而是通过节点内存储的前后节点的地址进行链接操作，故 list 容器想要实现上述操作就需要自行重载这些运算符。</p>\n<h4><a id=\"_273\"></a>正向迭代器</h4>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token comment\">/* class Ref, class Ptr */</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">_list_iterator</span> \n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">typedef</span> __list__node<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> Node<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">typedef</span> __list_iterator<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> self<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">_list_iterator</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span>\n    \t<span class=\"token operator\">:</span> <span class=\"token function\">_node</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//操作符重载</span>\n    T<span class=\"token operator\">&amp;</span>    <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    self<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    self  <span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span>  <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> self<span class=\"token operator\">&amp;</span> it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//节点指针作成员</span>\n    Node<span class=\"token operator\">*</span> _node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>迭代器的加加减减，解引用等等操作都是在访问迭代器所指位置上的节点，所以迭代器的成员变量和链表相同都是节点指针。由于名称过长也可以采用如下方式类型重命名。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">typedef</span> __list__node<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> Node<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> __list_iterator<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> self<span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>list 容器的迭代器是双向迭代器，所以不支持随机访问，也就没有重载<code>+,+=,-,-=</code>这些操作符。</p>\n</blockquote>\n<h5><a id=\"_303\"></a>默认成员函数</h5>\n<pre><code class=\"prism language-cpp\"><span class=\"token function\">_list_iterator</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">:</span> <span class=\"token function\">_node</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p>构造函数很简单，用传入的节点地址初始化迭代器中成员变量这个节点指针，相当于迭代器中的节点指针指向了链表中的该节点。调用了 __list_node 的拷贝构造，</p>\n<p>迭代器的拷贝构造、赋值重载都只需要浅拷贝，两个迭代器可以完全一样。析构函数无需释放任何资源，节点交由链表进行管理。所以这些默认函数编译器默认生成的就可以。</p>\n<h5><a id=\"_315\"></a>自增自减操作符</h5>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//++it</span>\nself<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    _node <span class=\"token operator\">=</span> _node<span class=\"token operator\">-&gt;</span>_next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//it++</span>\nself <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    self <span class=\"token function\">tmp</span><span class=\"token punctuation\">(</span>_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _node <span class=\"token operator\">=</span> _node<span class=\"token operator\">-&gt;</span>_next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//--it\t</span>\nself<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    _node <span class=\"token operator\">=</span> _node<span class=\"token operator\">-&gt;</span>_prev<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//it--</span>\nself <span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    self <span class=\"token function\">tmp</span><span class=\"token punctuation\">(</span>_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _node <span class=\"token operator\">=</span> _node<span class=\"token operator\">-&gt;</span>_prev<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>++</code>和<code>--</code>操作符重载分别是将节点指针指向当前节点的后一个或前一个节点。就实现了自增自减运算。</p>\n<blockquote>\n<p>返回当前对象或返回临时对象的处理方式，都是老生常谈不再过多赘述。</p>\n</blockquote>\n<h5><a id=\"_346\"></a>解引用箭头操作符</h5>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Ref</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Ptr</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">__list_iterator</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//*it</span>\n    Ref <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> _node<span class=\"token operator\">-&gt;</span>_data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//-&gt;</span>\n    Ptr <span class=\"token keyword\">operator</span><span class=\"token operator\">-&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>_node<span class=\"token operator\">-&gt;</span>_data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">list</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">typedef</span> __list_iterator<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> T<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> T<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> iterator<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">typedef</span> __list_iterator<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> const_iterator<span class=\"token punctuation\">;</span> <span class=\"token comment\">//传入常量类型</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>一般通过迭代器访问或修改节点的值都是通过上述的两个解引用<code>*</code>、箭头<code>-&gt;</code>操作符重载实现的。</p>\n<pre><code class=\"prism language-cpp\">list<span class=\"token operator\">&lt;</span>Date<span class=\"token operator\">&gt;</span> lt<span class=\"token punctuation\">;</span>\nlt<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2022</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlt<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2022</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlt<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2022</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//</span>\nlist<span class=\"token operator\">&lt;</span>Date<span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator it <span class=\"token operator\">=</span> lt<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> lt1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//1.</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>_year <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>_month <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>_day <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//2.</span>\n    cout <span class=\"token operator\">&lt;&lt;</span>  it<span class=\"token operator\">-&gt;</span>_year  <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">&lt;&lt;</span>  it<span class=\"token operator\">-&gt;</span>_month  <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">&lt;&lt;</span>  it<span class=\"token operator\">-&gt;</span>_day  <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">++</span>it<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>it 是迭代器对象，通过解引用访问到链表节点的<code>_data</code>数据，也就是 Date 对象。直接对象<code>.</code>得 _year 等变量。</li><li>it 是迭代器对象，通过箭头<code>-&gt;</code>访问到<code>_data</code>的指针，即 Date* 对象指针。本应再箭头<code>-&gt;</code>一次才能访问到 _year 等变量，但<code>it-&gt;-&gt;_year</code>可读性太差，编译器直接省略成一个箭头。</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> it<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator it <span class=\"token operator\">=</span> lt<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Err - 常对象无法调用普通迭代器，只能调用常量迭代器</span>\n    list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>const_iterator it <span class=\"token operator\">=</span> lt<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>当 const 修饰的常对象调用迭代器时，就要将迭代器类模板初始化为常量迭代器。常量对象只能调用常量迭代器，所以给迭代器类加了<code>Ref</code>和<code>Ptr</code>两个模板参数，对应返回值的引用类型和指针类型，在外部初始化迭代器类模板时传入对应的类型。</p>\n<blockquote>\n<p>不可以在迭代器类中重载一个常对象调用的版本，因为是外部调用的 list 对象是常对象而非迭代器。</p>\n</blockquote>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\d8c5a21ecc94474b875f49912c9b7c14.png\"/></p>\n<h5><a id=\"_407\"></a>比较运算操作符</h5>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//it!=it</span>\n<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> self it<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> _node <span class=\"token operator\">!=</span> it<span class=\"token punctuation\">.</span>_node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>迭代器的比较运算，就是比较迭代器位置上的节点指针的值是否相等。</p>\n<blockquote>\n<p>Node* 原生指针和一个迭代器对象，他们都是地址占用空间大小相同，也都指向链表的节点，但他们的运算符操作的意义和结果是不同的。</p>\n</blockquote>\n<h4><a id=\"_421\"></a>反向迭代器</h4>\n<p>反向迭代器是个迭代器同样是个类模板，因为它能够适配所有的容器类型，所以它被单独实现在一个文件中。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Iterator</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Ref</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Ptr</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">reverse_iterator</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    Iterator _it<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>反向迭代器的类成员变量为当前传入容器的正向迭代器，是对正向迭代器的一种封装，这是一种适配器模式。所以反向迭代适配所有容器。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//constructor</span>\n<span class=\"token function\">reverse_iterator</span><span class=\"token punctuation\">(</span>Iterator it<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span><span class=\"token function\">_it</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span> <span class=\"token comment\">//利用正向迭代器构造出反向迭代器</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//++it</span>\n<span class=\"token keyword\">typedef</span> reverse_iterator self<span class=\"token punctuation\">;</span>\nself<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token operator\">--</span>_it<span class=\"token punctuation\">;</span> <span class=\"token comment\">//反向迭代器++，就是正向迭代器--</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//--it</span>\nself<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token operator\">++</span>_it<span class=\"token punctuation\">;</span> <span class=\"token comment\">//反向迭代器--，就是正向迭代器++</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//it1 != it2</span>\n<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> self<span class=\"token operator\">&amp;</span> it<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> _it <span class=\"token operator\">!=</span> it<span class=\"token punctuation\">.</span>_it<span class=\"token punctuation\">;</span> <span class=\"token comment\">//反向迭代器是否相等，就是正向迭代器是否相等</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>基本的操作符重载以及构造函数都是调用传入的正向迭代器的实现的，这样才能适配所有容器。</p>\n<pre><code class=\"prism language-cpp\">Ref <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//return *_it;</span>\n    Iterator tmp <span class=\"token operator\">=</span> _it<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token operator\">--</span>tmp<span class=\"token punctuation\">;</span> <span class=\"token comment\">//前一个位置的迭代器</span>\n<span class=\"token punctuation\">}</span>\nPtr <span class=\"token keyword\">operator</span><span class=\"token operator\">-&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Iterator tmp <span class=\"token operator\">=</span> _it<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span><span class=\"token operator\">*</span><span class=\"token operator\">--</span>tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>STL 中反向迭代器关于解引用<code>*</code>和箭头<code>-&gt;</code>的实现却不是访问当前位置的迭代器，而是<strong>返回当前位置的前一个位置的迭代器</strong>。</li><li>STL 中所有容器的正反向迭代器的<code>begin()</code>,<code>end()</code>和<code>rbegin()</code>,<code>rend()</code>所指向的位置正好对应相反。目的是设计出对称形式，因此解引用时返回的是上一个位置的数据。</li></ul>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\f5ead1e2394c406ea69f58f5779b7870.png\"/></p>\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/e2ca35525b2543d3a3fd2888f8555c03.gif#pic_center\"/></p>\n<h4><a id=\"_487\"></a>迭代器接口</h4>\n<p>迭代器位置的接口函数放在<code>list</code>类体中，不要和上述<code>__list_iterator</code>类的实现混淆。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">list</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">typedef</span> __list_iterator<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> T<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> T<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> iterator<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">typedef</span> __list_iterator<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> const_iterator<span class=\"token punctuation\">;</span>\n    iterator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span>_head<span class=\"token operator\">-&gt;</span>_next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    iterator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span>_head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    const_iterator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">const_iterator</span><span class=\"token punctuation\">(</span>_head<span class=\"token operator\">-&gt;</span>_next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    const_iterator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">const_iterator</span><span class=\"token punctuation\">(</span>_head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>值得注意的是返回迭代器位置不是直接返回节点指针<code>_head</code>，而是返回迭代器对象<code>iterator(_head)</code>。</li><li><code>iterator(_head)</code>是调用构造函数传入节点指针构造出迭代器对象，返回迭代器对象才能够支持迭代器的各种操作。</li></ul>\n<blockquote>\n<p><code>begin()</code>和<code>end()</code>位置分别指向有效元素部分第一个节点和 _head 位置，_head 正好是最后一个有效元素的下一个位置，满足有闭右开的条件<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         [\n          \n        \n         b\n        \n        \n         e\n        \n        \n         g\n        \n        \n         i\n        \n        \n         n\n        \n        \n         (\n        \n        \n         )\n        \n        \n         ,\n        \n        \n         e\n        \n        \n         n\n        \n        \n         d\n        \n        \n         (\n        \n        \n         )\n          \n        \n         )\n        \n       \n       \n        [\\;begin(),end()\\;)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">g</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mclose\">)</span></span></span></span></span>。</p>\n</blockquote>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\90057a9194914d3592d5a7948d864816.png\"/></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">typedef</span> test<span class=\"token operator\">::</span>reverse_iterator<span class=\"token operator\">&lt;</span>iterator<span class=\"token punctuation\">,</span> T<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> T<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> reverse_iterator<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> test<span class=\"token operator\">::</span>reverse_iterator<span class=\"token operator\">&lt;</span>const_iterator<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> const_reverse_iterator<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//反向迭代器位置</span>\nreverse_iterator <span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">reverse_iterator</span><span class=\"token punctuation\">(</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nreverse_iterator <span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">reverse_iterator</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconst_reverse_iterator <span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">const_reverse_iterator</span><span class=\"token punctuation\">(</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconst_reverse_iterator <span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">const_reverse_iterator</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\348781f91b7b4cb2b518fc71c30352bd.png\"/></p>\n<h3><a id=\"24__540\"></a>2.4 增删查改接口</h3>\n<h4><a id=\"_542\"></a>插入删除</h4>\n<pre><code class=\"prism language-cpp\">iterator <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>iterator pos<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Node<span class=\"token operator\">*</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Node<span class=\"token operator\">*</span> prev <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">.</span>_node<span class=\"token operator\">-&gt;</span>_prev<span class=\"token punctuation\">;</span>\n    Node<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">.</span>_node<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// prev - newNode - cur</span>\n    prev<span class=\"token operator\">-&gt;</span>_next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n    newNode<span class=\"token operator\">-&gt;</span>_prev <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span>\n    cur <span class=\"token operator\">-&gt;</span>_prev <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n    newNode<span class=\"token operator\">-&gt;</span>_next <span class=\"token operator\">=</span>  cur<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//返回迭代器</span>\n<span class=\"token punctuation\">}</span>\niterator <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>iterator pos<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">!=</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//断言位置合法</span>\n    Node<span class=\"token operator\">*</span> prev <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">.</span>_node<span class=\"token operator\">-&gt;</span>_prev<span class=\"token punctuation\">;</span>\n    Node<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">.</span>_node<span class=\"token operator\">-&gt;</span>_next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> pos<span class=\"token punctuation\">.</span>_node<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// prev - pos - after</span>\n    prev<span class=\"token operator\">-&gt;</span>_next <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n    next<span class=\"token operator\">-&gt;</span>_prev <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>list 的插入操作迭代器不会失效，因为迭代器 pos 的值不会改变，始终指向原来的节点。</p>\n<blockquote>\n<p>vector 的插入操作一般需要后移元素，导致当前所指位置变成新元素位置，还可能会引发扩容，导致迭代器指向已释放的空间，两种情况都会使迭代器失效。</p>\n</blockquote>\n<p>list 的删除操作迭代器一定失效，因为节点已经被释放了，应修正为 pos 下一个位置。</p>\n<blockquote>\n<p>vector 的删除操作迭代也会失效，也需要接受返回值。Windows 下的 vs 中使用陈旧的迭代器会强制报错，而Linux下不会。</p>\n</blockquote>\n<h4><a id=\"_578\"></a>接口复用</h4>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>需要迅速实现简洁的 list 时，可以先写出尾插接口，也可以写出插入删除其他直接复用。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Node<span class=\"token operator\">*</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Node<span class=\"token operator\">*</span> tail <span class=\"token operator\">=</span> _head<span class=\"token operator\">-&gt;</span>_prev<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//修改链接关系</span>\n    <span class=\"token comment\">//tail - newNode - head</span>\n    tail<span class=\"token operator\">-&gt;</span>_next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n    newNode<span class=\"token operator\">-&gt;</span>_prev <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">;</span>\n    _head<span class=\"token operator\">-&gt;</span>_prev <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n    newNode<span class=\"token operator\">-&gt;</span>_next <span class=\"token operator\">=</span> _head<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>开辟新节点、找到链表尾节点并修改链接关系。</li><li>上述代码不管链表是否为空都适用，这是双向带头循环链表结构的优势。</li></ul>\n<h4><a id=\"_617\"></a>其他接口</h4>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//1.</span>\n    iterator it <span class=\"token operator\">=</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        iterator del <span class=\"token operator\">=</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//del复制迭代器位置，顺便++迭代器</span>\n        <span class=\"token keyword\">delete</span> del<span class=\"token punctuation\">.</span>_node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    _head<span class=\"token operator\">-&gt;</span>_prev <span class=\"token operator\">=</span> _head<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 修正链接关系</span>\n    _head<span class=\"token operator\">-&gt;</span>_next <span class=\"token operator\">=</span> _head<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//2.</span>\n    iterator it <span class=\"token operator\">=</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nsize_t <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    size_t n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> _head<span class=\"token operator\">-&gt;</span>_next <span class=\"token operator\">==</span> _head<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nT<span class=\"token operator\">&amp;</span> <span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> <span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nT<span class=\"token operator\">*</span> <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> T<span class=\"token operator\">*</span> <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> lt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    std<span class=\"token operator\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>_head<span class=\"token punctuation\">,</span> lt<span class=\"token punctuation\">.</span>_head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"3_listvector_663\"></a>3. list和vector对比</h2>\n<table><thead><tr><th>容器</th><th>vector</th><th>list</th></tr></thead><tbody><tr><td>底层结构</td><td>连续的物理空间，也就是数组</td><td>带头双向循环链表，空间不连续</td></tr><tr><td>随机访问</td><td>支持随机访问</td><td>不支持随机访问</td></tr><tr><td>插入删除</td><td>非尾部的插入删除都要移动数据，效率低 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n       \n        \n         \n          \n           O\n          \n          \n           (\n          \n          \n           n\n          \n          \n           )\n          \n         \n         \n          O(n)\n         \n        \n       </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span></span></td><td>任意位置的插入删除，效率高</td></tr><tr><td>空间利用率</td><td>增容代价大，倍数扩容存在一定的空间浪费</td><td>按需申请空间，不存在浪费</td></tr><tr><td>迭代器</td><td>原生指针支持随机访问</td><td>构造迭代器类，模拟指针行为，支持双向访问</td></tr><tr><td>适用场景</td><td>需要高效存储，随机访问，不关心增删效率</td><td>频繁使用插入删除，不关心随机访问</td></tr></tbody></table>\n<blockquote>\n<p>vector 与 list 两种容器各有优劣，实际上 vector 用的更多些。因为 vector 支持随机访问这是最大的优点，其次，空间浪费也不是太严重的缺陷。</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-30 04:38:17", "summary": "的介绍是能够在序列内任意位置执行常数次插入删除操作的顺序容器，并且它具有双向迭代器。容器的实现类似于双向链表，双向链表可以将每个元素存储内存中不同且不相关的地址处。整个链表的顺序由它的节点与其前后节点"}