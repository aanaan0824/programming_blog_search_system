{"blogid": "124914380", "writerAge": "码龄1年", "writerBlogNum": "88", "writerCollect": "164", "writerComment": "48", "writerFan": "31", "writerGrade": "4级", "writerIntegral": "1000", "writerName": "PIKapikaaaa", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124914380.jpg", "writerRankTotal": "20206", "writerRankWeekly": "214246", "writerThumb": "69", "writerVisitNum": "41413", "blog_read_count": "5751", "blog_time": "于 2022-05-22 18:38:19 发布", "blog_title": "什么是Ajax？", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"AJax_0\"></a>AJax</h1>\n<h2><a id=\"Ajax_2\"></a>一、Ajax简介</h2>\n<blockquote>\n<p>Ajax 即“Asynchronous Javascript And XML”（异步 JavaScript 和 XML），是指⼀种创建交互式⽹⻚应⽤的⽹⻚开发技术。</p>\n<p>Ajax 是⼀种⽤于创建快速动态⽹⻚的技术。</p>\n<p>Ajax 是⼀种在⽆需重新加载整个⽹⻚的情况下，能够更新部分⽹⻚的技术。</p>\n<p>通过在后台与服务器进⾏少量数据交换，Ajax 可以使⽹⻚实现异步更新。这意味着可以在不重新加载整个⽹⻚的情况下，对⽹⻚的某部分进⾏更新。</p>\n<p>传统的⽹⻚（不使⽤ Ajax）如果需要更新内容，必须重载整个⽹⻚⻚⾯。</p>\n</blockquote>\n<h2><a id=\"_14\"></a>二、同步与异步</h2>\n<blockquote>\n<p>1、<strong>同步</strong>：发送⼀个请求，需要等待响应返回，然后才能够发送下⼀个请求，如果该请求没有响应，不能发送下⼀个请求，客户端会处于⼀直等待过程中。</p>\n</blockquote>\n<blockquote>\n<p>2、<strong>异步</strong>：发送⼀个请求，不需要等待响应返回，随时可以再发送下⼀个请求，即不需要等待。</p>\n</blockquote>\n<h2><a id=\"_20\"></a>三、应用场景</h2>\n<blockquote>\n<p>1、在线视频、直播平台等…评论实时更新、点赞、⼩礼物、…</p>\n<p>2、会员注册时的信息验证，⼿机号、账号唯⼀</p>\n<p>3、百度关键搜索补全功能</p>\n</blockquote>\n<h3><a id=\"_28\"></a>四、实现</h3>\n<h3><a id=\"41JS_30\"></a>4.1、原生JS实现</h3>\n<blockquote>\n<p>实现步骤：</p>\n<p>1、定义⼀个XMLHttpRequest核⼼对象xhr;</p>\n<p>2、通过xhr.open⽅法给当前对象提供访问⽅式、URL等。</p>\n<p>3、发送当前的请求⾄指定的URL</p>\n<p>4、接收返回值并处理</p>\n</blockquote>\n<blockquote>\n<p><strong>案例需求</strong>：前台⻚⾯通过⼀个按钮向后台发送⼀个Ajax请求，后台做完处理后向前台⻚⾯响应⼀段⽂本信息显示在⻚⾯上</p>\n</blockquote>\n<ul><li><strong>⻚⾯代码</strong>：</li></ul>\n<pre><code class=\"prism language-jsp\">&lt;%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %&gt;\n&lt;html&gt;\n&lt;head&gt; \n&lt;title&gt;Title&lt;/title&gt; \n&lt;script type=\"text/javascript\"&gt;\n    function testJsAjax(){\n         //1. 创建核⼼对象\n         var xmlhttp = new XMLHttpRequest();\n         //2.通过核⼼对象⽅法给当前的对象提供访问⽅式和URL路径\n         xmlhttp.open(\"GET\",\"jsAjax?name=liuyan\",true);\n         //3.发送当前的请求⾄指定的URL\n         xmlhttp.send();\n         //4.接收返回值并处理\n         xmlhttp.onreadystatechange=function(){\n             //xmlhttp.readyState==4代表XMLHttpRequest对象读取服务器的响应结束\n             //xmlhttp.status==200响应成功\n             if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200){\n                 var msg = xmlhttp.responseText;\n                 document.getElementById(\"msg\").innerHTML=msg;\n             }\n         }\n    }\n&lt;/script&gt;\n&lt;/head&gt; \n    &lt;body&gt; \n        &lt;div id=\"msg\"&gt;&lt;/div&gt; \n        &lt;input type=\"button\" name=\"btn\" value=\"JS原⽣⽅式实现异步\" οnclick=\"testJsAjax()\"&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul><li><strong>Servlet代码</strong>：</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebServlet</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServlet</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/jsAjax\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JsAjaxServlet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">service</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span><span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{<!-- --></span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/html;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//获取名称</span>\n        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//响应</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"响应成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"42JQuery_101\"></a>4.2、JQuery实现</h3>\n<blockquote>\n<ul><li> <p>JS版的Ajax仅做为了解，我们重点学习jQuery版的Ajax，jQuery是⼀个优秀的js框架，⾃然对JS原⽣的Ajax进⾏了封装，封装后的Ajax的操作⽅法更简洁，功能更强⼤，这也是程序员最普遍使⽤，语法结构简单，代码可读性好。</p> </li><li> <p>与Ajax操作相关的jQuery⽅法经常使⽤的有三种：</p> </li></ul>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d97328391c1e4c2da08efa5a9e3d2cd6.png\"/></p>\n<h4><a id=\"421Ajax_110\"></a>4.2.1、Ajax请求</h4>\n<ul><li>语法格式：</li></ul>\n<pre><code class=\"prism language-javascript\">$<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n     <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n     <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span><span class=\"token string\">\"post/get\"</span><span class=\"token punctuation\">,</span>\n     <span class=\"token literal-property property\">async</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n     <span class=\"token literal-property property\">dataType</span><span class=\"token operator\">:</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span>\n     <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n     <span class=\"token function-variable function\">error</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c91977c0c32241ca9bda3d6c7d04c407.png\"/></p>\n<ul><li>注意事项：</li></ul>\n<blockquote>\n<p>1、每个属性后都要跟随⼀个英⽂逗号，最后⼀个不⽤。</p>\n<p>2、每⼀个属性都是键值对的形式存在，中间⽤英⽂冒号:隔开</p>\n<p>3、data:{} 是⼀个特殊的写法，值是⼀个{}，⾥⾯使⽤键值对存储</p>\n<p>例如：data:{“键1”:值1, “键2”:值2, “键3”:值3}</p>\n<p>4、以上属性没有先后顺序要求</p>\n</blockquote>\n<h4><a id=\"422Get_143\"></a>4.2.2、Get请求</h4>\n<ul><li>语法格式：</li></ul>\n<pre><code class=\"prism language-javascript\">$<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>callback<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6598582f88014f5dafaaa5979e395676.png\"/></p>\n<ul><li> <p>注意事项：这种写法功能和$.ajax是⼀样的，但是严格要求属性顺序。</p> </li><li> <p><strong>举例</strong>：</p> </li></ul>\n<blockquote>\n<p>$.get() 的第一个参数是我们希望请求的 URL（“demo_test.asp”）。第二个参数是回调函数。第一个回调参数存有被请求页面的内容，第二个回调参数存有请求的状态。</p>\n</blockquote>\n<pre><code class=\"prism language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n  $<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo_test.asp\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span>status</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Data: \"</span> <span class=\"token operator\">+</span> data <span class=\"token operator\">+</span> <span class=\"token string\">\"\\nStatus: \"</span> <span class=\"token operator\">+</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4><a id=\"423Post_166\"></a>4.2.3、Post请求</h4>\n<ul><li>语法格式：</li></ul>\n<pre><code class=\"prism language-javascript\">$<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>callback<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c0be95d20f454aa492956ff0ef530476.png\"/></p>\n<ul><li>注意事项：这种写法功能和$.ajax是⼀样的，但是严格要求属性顺序。</li><li><strong>举例</strong>：</li></ul>\n<blockquote>\n<p>$.post() 的第一个参数是我们希望请求的 URL (“demo_test_post.asp”)。然后我们连同请求（name 和 city）一起发送数据。“demo_test_post.asp” 中的 ASP 脚本读取这些参数，对它们进行处理，然后返回结果。第三个参数是回调函数。第一个回调参数存有被请求页面的内容，而第二个参数存有请求的状态</p>\n</blockquote>\n<pre><code class=\"prism language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n  $<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo_test_post.asp\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"Donald Duck\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">city</span><span class=\"token operator\">:</span><span class=\"token string\">\"Duckburg\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span>status</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Data: \"</span> <span class=\"token operator\">+</span> data <span class=\"token operator\">+</span> <span class=\"token string\">\"\\nStatus: \"</span> <span class=\"token operator\">+</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4><a id=\"424_195\"></a>4.2.4、异同</h4>\n<pre><code class=\"prism language-text\">相同点： 都是jQuery封装的⽅法实现异步交互。\n不同点： $.ajax()是jQuery的第⼀次封装，使⽤时稍显麻烦，但是功能强⼤，覆盖了get和post请求，有错误调试能⼒，写法顺序可以改变。\n\n$.post()和$.get()是jQuery Ajax的第⼆次封装，由于$.Ajax()写法过于臃肿，简化为$.post()和$.get()，功能是相同的没有区别。但是写法要求更⾼，顺序不能改变。\n</code></pre>\n<h3><a id=\"_204\"></a>五、案例</h3>\n<blockquote>\n<p>案例需求: 校验⽤户名唯⼀在⽤户注册⻚⾯，输⼊⽤户名，当⽤户名输⼊框失去焦点时，发送异步请求，将输⼊框的⽤户名传递给服务器端进⾏是否存在的校验。</p>\n</blockquote>\n<ul><li><strong>页面代码</strong></li></ul>\n<pre><code class=\"prism language-jsp\">&lt;%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %&gt;\n&lt;html&gt; &lt;head&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=\"./js/jquery-3.3.1.js\"&gt;&lt;/script&gt; &lt;script&gt; \n    $(function(){\n        $(\"#uname\").blur(function(){\n            var uname = $(\"#uname\").val();\n            //判断⽤户名不为空\n            var req = /^\\s*$/;\n            if(req.test(uname)){\n                $(\"#msg\").html(\"⽤户名不能为空\").css(\"color\",\"red\");\n                return;\n            }\n            //发送ajax请求\n            $.ajax({\n                url:\"${pageContext.request.contextPath}/ckeckUsername\",\n                data:{\"uname\":uname},\n                type:\"post\",\n                dataType:\"text\",\n                success:function(obj){\n                    //判断\n                    if(obj){\n                        $(\"#msg\").html(\"该⽤户名已被占⽤\").css(\"color\",\"red\");\n                    }else{\n                        $(\"#msg\").html(\"该⽤户名可⽤\").css(\"color\",\"green\");\n                    }\n                }\n            })\n        })\n    })\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt; \n    &lt;p&gt;⽤户名: &lt;input type=\"text\" id=\"uname\" name=\"uname\"&gt; &lt;span id=\"msg\"&gt;&lt;/span&gt;&lt;/p&gt; \n    &lt;p&gt; &lt;input type=\"button\" value=\"注册\"&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul><li><strong>servlet</strong></li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebServlet</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServlet</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/ckeckUsername\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CheckUsernameServlet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">service</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span><span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{<!-- --></span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">setCharacterEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/html;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> uname <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"uname\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Boolean</span> flag<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//判断</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"liuyan\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>uname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n     \t\tflag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n     \t\tflag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> \n    \t<span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//响应</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_277\"></a>六、返回值类型</h3>\n<blockquote>\n<p>Ajax⽀持多种返回值类型：</p>\n<p>XML：太麻烦，解析太费劲，已经不使⽤</p>\n<p>HTML：⽹⻚，其实质和返回⽂本⼀样，没区别，⼀般使⽤⽂本代替</p>\n<p>Script： 直接返回脚本</p>\n<p>Text（⽂本）：（默认返回类型）字符串类型，返回直接接收字符串</p>\n<p>Json：返回是⼀个js对象，脚本中可以直接操作这个对象，⾮常⽅便</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-05-22 18:38:19", "summary": "一、简介即异步和，是指种创建交互式应的开发技术。是种于创建快速动态的技术。是种在需重新加载整个的情况下，能够更新部分的技术。通过在后台与服务器进少量数据交换，可以使实现异步更新。这意味着可以在不重新加"}