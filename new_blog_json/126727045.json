{"blogid": "126727045", "writerAge": "码龄2年", "writerBlogNum": "164", "writerCollect": "3030", "writerComment": "471", "writerFan": "7555", "writerGrade": "5级", "writerIntegral": "4254", "writerName": "今天也要写bug、", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126727045.jpg", "writerRankTotal": "3768", "writerRankWeekly": "5838", "writerThumb": "1480", "writerVisitNum": "150442", "blog_read_count": "51", "blog_time": "于 2022-09-06 22:58:17 发布", "blog_title": "C++定时器和时间轮", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_3\">定时器</a></li><li><ul><li><a href=\"#_8\">最小堆实现定时器</a></li></ul>\n</li><li><a href=\"#_302\">时间轮</a></li><li><ul><li><a href=\"#_309\">单层级时间轮</a></li><li><a href=\"#_479\">多层级时间轮</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_3\"></a>定时器</h1>\n<p>有些时候我们需要延迟执行一些功能，比如每10s进行一次数据采集。或者告知用户技能冷却有多少时间，如果我们将执行这些功能的任务交给主线程，就会造成主线程的阻塞。因此我们可以选择一个创建一个子线程，让其检测定时器中的任务，当有任务的时间到了的时候，就去执行这个任务。</p>\n<hr/>\n<h2><a id=\"_8\"></a>最小堆实现定时器</h2>\n<p>定时器可以由很多种数据结构实现，比如最小堆、红黑树、跳表、甚至数组都可以，其本质都是拿到最小时间的任务，然后取出该任务并执行。<br/> 综合实现难度和效率来看，最小堆是最容易实现定时器的数据结构。</p>\n<p>最小堆主要有以下接口：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>TimerHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">TimerNode</span> <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//获取系统时间，单位是毫秒</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">uint32_t</span> <span class=\"token function\">current_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">uint32_t</span> t<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timespec</span> ti<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">clock_gettime</span><span class=\"token punctuation\">(</span>CLOCK_MONOTONIC<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ti<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span><span class=\"token punctuation\">)</span>ti<span class=\"token punctuation\">.</span>tv_sec <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n    t <span class=\"token operator\">+=</span> ti<span class=\"token punctuation\">.</span>tv_nsec <span class=\"token operator\">/</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">TimerNode</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//该任务在最小堆中的下标位置</span>\n    <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//该任务是第几号任务</span>\n    <span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//几毫秒后执行该任务</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> expire <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//回调函数</span>\n    TimerHandler cb <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MinHeapTimer</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">MinHeapTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        _heap<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _map<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">Count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//加入任务，expire为该任务的失效时间，expire过后就要执行回调函数cb</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">AddTimer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span> expire<span class=\"token punctuation\">,</span> TimerHandler cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//删除一个任务</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">DelTimer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//获取一个任务</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">ExpireTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">//用于比较两个任务的过期时间</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">_compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//向下调整算法，每次删除一个节点就要向下调整</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">_shiftDown</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//向上调整算法，每添加一个数都要调用向上调整算法，保证根节点为最小节点</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">_shiftUp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//删除的子函数</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">_delNode</span><span class=\"token punctuation\">(</span>TimerNode <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">resign</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">//数组中存储任务节点</span>\n    vector<span class=\"token operator\">&lt;</span>TimerNode <span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> _heap<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//存储值和响应节点的映射关系</span>\n    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> TimerNode <span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> _map<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//任务的个数，注意不是_heap的size</span>\n    <span class=\"token keyword\">int</span> _count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>具体的实现以及测试为：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>TimerHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">TimerNode</span> <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//获取系统时间，单位是毫秒</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">uint32_t</span> <span class=\"token function\">current_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">uint32_t</span> t<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timespec</span> ti<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">clock_gettime</span><span class=\"token punctuation\">(</span>CLOCK_MONOTONIC<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ti<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span><span class=\"token punctuation\">)</span>ti<span class=\"token punctuation\">.</span>tv_sec <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n    t <span class=\"token operator\">+=</span> ti<span class=\"token punctuation\">.</span>tv_nsec <span class=\"token operator\">/</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">TimerNode</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//该任务在最小堆中的下标位置</span>\n    <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//该任务是第几号任务</span>\n    <span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> expire <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//回调函数</span>\n    TimerHandler cb <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MinHeapTimer</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">MinHeapTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        _heap<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _map<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">Count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">++</span>_count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//加入任务，expire为该任务的失效时间，expire过后就要执行回调函数cb</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">AddTimer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span> expire<span class=\"token punctuation\">,</span> TimerHandler cb<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token keyword\">int64_t</span> timeout <span class=\"token operator\">=</span> <span class=\"token function\">current_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> expire<span class=\"token punctuation\">;</span>\n        TimerNode <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> TimerNode<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> <span class=\"token function\">Count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        node<span class=\"token operator\">-&gt;</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n        node<span class=\"token operator\">-&gt;</span>expire <span class=\"token operator\">=</span> timeout<span class=\"token punctuation\">;</span>\n        node<span class=\"token operator\">-&gt;</span>cb <span class=\"token operator\">=</span> cb<span class=\"token punctuation\">;</span>\n        node<span class=\"token operator\">-&gt;</span>idx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>_heap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _heap<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_shiftUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>_heap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _map<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//删除一个任务</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">DelTimer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">auto</span> iter <span class=\"token operator\">=</span> _map<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iter <span class=\"token operator\">==</span> _map<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_delNode</span><span class=\"token punctuation\">(</span>iter<span class=\"token operator\">-&gt;</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//获取一个任务</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">ExpireTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_heap<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//获取当前时间</span>\n        <span class=\"token keyword\">uint32_t</span> now <span class=\"token operator\">=</span> <span class=\"token function\">current_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_heap<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//获取最近的一个任务</span>\n            TimerNode <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> _heap<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//当最近一个任务的时间大于当前时间，说明没有任务要执行</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">&lt;</span> node<span class=\"token operator\">-&gt;</span>expire<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">//遍历一下堆，这一步可以不加</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> _heap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"touch    idx: \"</span> <span class=\"token operator\">&lt;&lt;</span> _heap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-&gt;</span>idx\n                          <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" id: \"</span> <span class=\"token operator\">&lt;&lt;</span> _heap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-&gt;</span>id <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" expire: \"</span>\n                          <span class=\"token operator\">&lt;&lt;</span> _heap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-&gt;</span>expire <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">//执行最近任务的回调函数</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">-&gt;</span>cb<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                node<span class=\"token operator\">-&gt;</span><span class=\"token function\">cb</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">//执行完就删掉这个任务</span>\n            <span class=\"token function\">_delNode</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">//用于比较两个任务的过期时间</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">_compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> rhs<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> _heap<span class=\"token punctuation\">[</span>lhs<span class=\"token punctuation\">]</span><span class=\"token operator\">-&gt;</span>expire <span class=\"token operator\">&lt;</span> _heap<span class=\"token punctuation\">[</span>rhs<span class=\"token punctuation\">]</span><span class=\"token operator\">-&gt;</span>expire<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//向下调整算法，每次删除一个节点就要向下调整</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">_shiftDown</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> child <span class=\"token operator\">=</span> parent <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">&lt;</span> _heap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> _heap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">_compare</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> child <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                child<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">_compare</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>_heap<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> _heap<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                _heap<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token operator\">-&gt;</span>idx <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n                _heap<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token operator\">-&gt;</span>idx <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span>\n                parent <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span>\n                child <span class=\"token operator\">=</span> parent <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//向上调整算法，每添加一个数都要调用向上调整算法，保证根节点为最小节点</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">_shiftUp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> child<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">_compare</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>_heap<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> _heap<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                _heap<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token operator\">-&gt;</span>idx <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n                _heap<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token operator\">-&gt;</span>idx <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span>\n                child <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n                parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//删除的子函数</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">_delNode</span><span class=\"token punctuation\">(</span>TimerNode <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> last <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>_heap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> node<span class=\"token operator\">-&gt;</span>idx<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">!=</span> last<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>_heap<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> _heap<span class=\"token punctuation\">[</span>last<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            _heap<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token operator\">-&gt;</span>idx <span class=\"token operator\">=</span> idx<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">resign</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        _heap<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _map<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-&gt;</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">delete</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">resign</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//向上调整和向下调整只会发生一个</span>\n        <span class=\"token function\">_shiftDown</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_shiftUp</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">//数组中存储任务节点</span>\n    vector<span class=\"token operator\">&lt;</span>TimerNode <span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> _heap<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//存储值和响应节点的映射关系</span>\n    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> TimerNode <span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> _map<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//任务的个数，注意不是_heap的size</span>\n    <span class=\"token keyword\">int</span> _count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"minheap.h\"</span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">print_hello</span><span class=\"token punctuation\">(</span>TimerNode <span class=\"token operator\">*</span>te<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"hello world time = \"</span> <span class=\"token operator\">&lt;&lt;</span> te<span class=\"token operator\">-&gt;</span>idx <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">&lt;&lt;</span> te<span class=\"token operator\">-&gt;</span>id <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">current_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    MinHeapTimer mht<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//一号任务，立刻执行</span>\n    mht<span class=\"token punctuation\">.</span><span class=\"token function\">AddTimer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> print_hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//二号任务，一秒后执行</span>\n    mht<span class=\"token punctuation\">.</span><span class=\"token function\">AddTimer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> print_hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mht<span class=\"token punctuation\">.</span><span class=\"token function\">AddTimer</span><span class=\"token punctuation\">(</span><span class=\"token number\">7000</span><span class=\"token punctuation\">,</span> print_hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mht<span class=\"token punctuation\">.</span><span class=\"token function\">AddTimer</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> print_hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mht<span class=\"token punctuation\">.</span><span class=\"token function\">AddTimer</span><span class=\"token punctuation\">(</span><span class=\"token number\">9000</span><span class=\"token punctuation\">,</span> print_hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mht<span class=\"token punctuation\">.</span><span class=\"token function\">AddTimer</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> print_hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mht<span class=\"token punctuation\">.</span><span class=\"token function\">AddTimer</span><span class=\"token punctuation\">(</span><span class=\"token number\">6000</span><span class=\"token punctuation\">,</span> print_hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mht<span class=\"token punctuation\">.</span><span class=\"token function\">AddTimer</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> print_hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        mht<span class=\"token punctuation\">.</span><span class=\"token function\">ExpireTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// usleep(10000);</span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6e358b6d3374473b87be6fddbe2ebc8b.png\"/></p>\n<hr/>\n<h1><a id=\"_302\"></a>时间轮</h1>\n<p>上面的定时器在任务数量很多时，效率会很低，因为我们需要用最小堆来维护这些任务，并且每删除一个任务，都要进行调整。其主要原因是我们不知道其他任务什么时候执行，所以我们只能进行调整，将最近的任务放到堆顶。</p>\n<p>如果我们能够向哈希桶那样，将要执行的任务形成链表，挂到要执行的位置，当时间走到那个位置的时候，就执行这些任务，效率岂不是更高？<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\497a39989bf2446694f13b68cf62d151.png\"/></p>\n<h2><a id=\"_309\"></a>单层级时间轮</h2>\n<p>客户端每 5 秒钟发送⼼跳包；服务端若 10 秒内没收到⼼跳数据，则清除连接。</p>\n<p>考虑到正常情况下 5 秒钟发送⼀次⼼跳包，10 秒才检测⼀次，如下图到索引为 10 的时候并不能踢掉连接；所以需要每收到⼀次⼼跳包则 used++ ，每检测⼀次 used-- ；当检测到used == 0 则踢掉连接；<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2a27cc3c563d4f859060f96a7c53b691.png\"/></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdint.h&gt;</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/time.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h&gt;</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAX_CONN</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token comment\">//连接的节点，用来记录心跳包发送的次数</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">conn_node</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">conn_node</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//引用计数的次数,当used==0，相当于自动销毁</span>\n    <span class=\"token keyword\">uint8_t</span> used<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> conn_node_t<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//用数组记录所有的连接</span>\n<span class=\"token keyword\">static</span> conn_node_t nodes<span class=\"token punctuation\">[</span>MAX_CONN<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">uint32_t</span> iter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//获取一个空的连接节点</span>\nconn_node_t <span class=\"token operator\">*</span><span class=\"token function\">get_node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    iter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">[</span>iter <span class=\"token operator\">&amp;</span> MAX_CONN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>used <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        iter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>nodes<span class=\"token punctuation\">[</span>iter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//哈希桶的个数</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TW_SIZE</span> <span class=\"token expression\"><span class=\"token number\">16</span></span></span>\n<span class=\"token comment\">//检测心跳包的延迟时间，由于哈希桶的个数有限，所以心跳包发送时间不能够超过6</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXPIRE</span> <span class=\"token expression\"><span class=\"token number\">10</span></span></span>\n<span class=\"token comment\">//取余操作</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TW_MASK</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>TW_SIZE <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">uint32_t</span> tick <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//哈希桶</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">link_list</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    conn_node_t head<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//一个tail，能够进行快速插入</span>\n    conn_node_t <span class=\"token operator\">*</span>tail<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> link_list_t<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//添加连接</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">add_conn</span><span class=\"token punctuation\">(</span>link_list_t <span class=\"token operator\">*</span>tw<span class=\"token punctuation\">,</span> conn_node_t <span class=\"token operator\">*</span>node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> delay<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//获取对应的哈希桶</span>\n    link_list_t <span class=\"token operator\">*</span>list <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>tw<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>tick <span class=\"token operator\">+</span> EXPIRE <span class=\"token operator\">+</span> delay<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> TW_MASK<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    list<span class=\"token operator\">-&gt;</span>tail<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n    list<span class=\"token operator\">-&gt;</span>tail <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n    node<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    node<span class=\"token operator\">-&gt;</span>used<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//清楚这个哈希桶</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">link_clear</span><span class=\"token punctuation\">(</span>link_list_t <span class=\"token operator\">*</span>list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    list<span class=\"token operator\">-&gt;</span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    list<span class=\"token operator\">-&gt;</span>tail <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">-&gt;</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//检测哈希桶</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">check_conn</span><span class=\"token punctuation\">(</span>link_list_t <span class=\"token operator\">*</span>tw<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int32_t</span> itick <span class=\"token operator\">=</span> tick<span class=\"token punctuation\">;</span>\n    tick<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//取到对应哈希桶的链表</span>\n    link_list_t <span class=\"token operator\">*</span>list <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>tw<span class=\"token punctuation\">[</span>itick <span class=\"token operator\">&amp;</span> TW_MASK<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//检测哈希桶对应的链表</span>\n    conn_node_t <span class=\"token operator\">*</span>current <span class=\"token operator\">=</span> list<span class=\"token operator\">-&gt;</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        conn_node_t <span class=\"token operator\">*</span>temp <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n        current <span class=\"token operator\">=</span> current<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        temp<span class=\"token operator\">-&gt;</span>used<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-&gt;</span>used <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接:%d 断开\\n\"</span><span class=\"token punctuation\">,</span> temp<span class=\"token operator\">-&gt;</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            temp<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这个链接:%d 心跳包还剩:%d个需要检测\\n\"</span><span class=\"token punctuation\">,</span> temp<span class=\"token operator\">-&gt;</span>id<span class=\"token punctuation\">,</span> temp<span class=\"token operator\">-&gt;</span>used<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">link_clear</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//获取时间，单位是s</span>\n<span class=\"token keyword\">static</span> time_t <span class=\"token function\">current_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    time_t t<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timespec</span> ti<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">clock_gettime</span><span class=\"token punctuation\">(</span>CLOCK_MONOTONIC<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ti<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>time_t<span class=\"token punctuation\">)</span>ti<span class=\"token punctuation\">.</span>tv_sec<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> MAX_CONN <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>conn_node_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// init link list</span>\n    link_list_t tw<span class=\"token punctuation\">[</span>TW_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>tw<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> TW_SIZE <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>link_list_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> TW_SIZE<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">link_clear</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tw<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 第一个连接对应的心跳包，在0和5时进行发送</span>\n    <span class=\"token comment\">//所以会在10s和15s时进行检测，15s时把该连接断开</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        conn_node_t <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token function\">get_node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        node<span class=\"token operator\">-&gt;</span>id <span class=\"token operator\">=</span> <span class=\"token number\">10001</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">add_conn</span><span class=\"token punctuation\">(</span>tw<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">add_conn</span><span class=\"token punctuation\">(</span>tw<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//第二个连接发送的心跳包，在第10s时进行检测</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        conn_node_t <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token function\">get_node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        node<span class=\"token operator\">-&gt;</span>id <span class=\"token operator\">=</span> <span class=\"token number\">10002</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">add_conn</span><span class=\"token punctuation\">(</span>tw<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//第二个连接发送的心跳包，在第13s时检测</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        conn_node_t <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token function\">get_node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        node<span class=\"token operator\">-&gt;</span>id <span class=\"token operator\">=</span> <span class=\"token number\">10003</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">add_conn</span><span class=\"token punctuation\">(</span>tw<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    time_t start <span class=\"token operator\">=</span> <span class=\"token function\">current_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        time_t now <span class=\"token operator\">=</span> <span class=\"token function\">current_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> start <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> now <span class=\"token operator\">-</span> start<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">check_conn</span><span class=\"token punctuation\">(</span>tw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            start <span class=\"token operator\">=</span> now<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在第%d秒时检测,此时机器时间:%d\\n\"</span><span class=\"token punctuation\">,</span> tick<span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b4e8c83396254c60aa9b4f68fd17733f.png\"/></p>\n<p>上面的时间轮受哈希桶大小和延迟10s收到心跳包的影响，只能在[0,6]秒内发送数据心跳包，如果想要延迟长时间，则需要扩大哈希桶的大小。</p>\n<p>如果我们不发送心跳包，而是改成在若干秒后执行一个任务，比如50s后执行任务，但哈希桶大小只有16，我们可以在任务节点中增加一个参数round，用来记录需要走多少遍哈希桶，比如50s，对应到大小为16的哈希桶则round=3,idx=2。<br/> 不过这样做，在check_conn取任务时就不能够把整个链表都取出来，而是需要取出round==0的任务。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">conn_node</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//需要走多少轮哈希桶，当round==0时，则说明需要执行这个任务</span>\n    <span class=\"token keyword\">int</span> round<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> node_t<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这样做能解决时间轮刻度范围过大造成的空间浪费，但是却带来了另一个问题：时间轮每次都需要遍历任务列表，耗时增加，当时间轮刻度粒度很小(秒级甚至毫秒级)，任务列表又特别长时，这种遍历的办法是不可接受的。</p>\n<h2><a id=\"_479\"></a>多层级时间轮</h2>\n<p>参照时钟表盘的运转规律，可以将定时任务根据触发的紧急程度，分布到不同层级的时间轮中；<br/> 假设时间精度为 10ms ；在第 1 层级每 10ms 移动⼀格；每移动⼀格执⾏该格⼦当中所有的定时任务；<br/> 当第 1 层指针从 255 格开始移动，此时层级 2 移动⼀格；层级 2 移动⼀格的⾏为定义为，将该格当中的定时任务重新映射到层级 1 当中；同理，层级 2 当中从 63 格开始移动，层级 3 格⼦中的定时任务重新映射到层级 2 ; 以此类推层级 4 往层级 3 映射，层级 5 往层级 4 映射。<br/> <strong>只有任务在第一层时才会被执行，其他层都是将任务重新映射到上一层。</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7285b54961d147e69e72d24730a216d6.png\"/></p>\n<ul><li>timewheel.h:</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdint.h&gt;</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TIME_NEAR_SHIFT</span> <span class=\"token expression\"><span class=\"token number\">8</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TIME_NEAR</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> TIME_NEAR_SHIFT<span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TIME_LEVEL_SHIFT</span> <span class=\"token expression\"><span class=\"token number\">6</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TIME_LEVEL</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> TIME_LEVEL_SHIFT<span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TIME_NEAR_MASK</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>TIME_NEAR <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TIME_LEVEL_MASK</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>TIME_LEVEL <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timer_node</span> timer_node_t<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>handler_pt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">timer_node</span> <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">timer_node</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">timer_node</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">uint32_t</span> expire<span class=\"token punctuation\">;</span>\t <span class=\"token comment\">//时间</span>\n\thandler_pt callback<span class=\"token punctuation\">;</span> <span class=\"token comment\">//回调函数</span>\n\t<span class=\"token keyword\">uint8_t</span> cancel<span class=\"token punctuation\">;</span>\t\t <span class=\"token comment\">//是否删除</span>\n\t<span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\t\t\t\t <span class=\"token comment\">// 此时携带参数</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ntimer_node_t <span class=\"token operator\">*</span><span class=\"token function\">add_timer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> time<span class=\"token punctuation\">,</span> handler_pt func<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> threadid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">expire_timer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">del_timer</span><span class=\"token punctuation\">(</span>timer_node_t <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">init_timer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">clear_timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>spinlock.h:</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">spinlock</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> lock<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">spinlock_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">spinlock</span> <span class=\"token operator\">*</span>lock<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tlock<span class=\"token operator\">-&gt;</span>lock <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">spinlock_lock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">spinlock</span> <span class=\"token operator\">*</span>lock<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">__sync_lock_test_and_set</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>lock<span class=\"token operator\">-&gt;</span>lock<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">spinlock_trylock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">spinlock</span> <span class=\"token operator\">*</span>lock<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">__sync_lock_test_and_set</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>lock<span class=\"token operator\">-&gt;</span>lock<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">spinlock_unlock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">spinlock</span> <span class=\"token operator\">*</span>lock<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">__sync_lock_release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>lock<span class=\"token operator\">-&gt;</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">spinlock_destroy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">spinlock</span> <span class=\"token operator\">*</span>lock<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>lock<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>timewheel.cpp:</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"spinlock.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"timewheel.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stddef.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h&gt;</span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">link_list</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\ttimer_node_t head<span class=\"token punctuation\">;</span>\n\ttimer_node_t <span class=\"token operator\">*</span>tail<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> link_list_t<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//多级时间轮</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timer</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//第一级</span>\n\tlink_list_t near<span class=\"token punctuation\">[</span>TIME_NEAR<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 2-4级</span>\n\tlink_list_t t<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>TIME_LEVEL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">spinlock</span> lock<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">uint32_t</span> time<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">uint64_t</span> current<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">uint64_t</span> current_point<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> s_timer_t<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">static</span> s_timer_t <span class=\"token operator\">*</span>TI <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\ntimer_node_t <span class=\"token operator\">*</span><span class=\"token function\">link_clear</span><span class=\"token punctuation\">(</span>link_list_t <span class=\"token operator\">*</span>list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\ttimer_node_t <span class=\"token operator\">*</span>ret <span class=\"token operator\">=</span> list<span class=\"token operator\">-&gt;</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\tlist<span class=\"token operator\">-&gt;</span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tlist<span class=\"token operator\">-&gt;</span>tail <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">-&gt;</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//链接一个节点</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">link</span><span class=\"token punctuation\">(</span>link_list_t <span class=\"token operator\">*</span>list<span class=\"token punctuation\">,</span> timer_node_t <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tlist<span class=\"token operator\">-&gt;</span>tail<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n\tlist<span class=\"token operator\">-&gt;</span>tail <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n\tnode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">add_node</span><span class=\"token punctuation\">(</span>s_timer_t <span class=\"token operator\">*</span>T<span class=\"token punctuation\">,</span> timer_node_t <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">uint32_t</span> time <span class=\"token operator\">=</span> node<span class=\"token operator\">-&gt;</span>expire<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">uint32_t</span> current_time <span class=\"token operator\">=</span> T<span class=\"token operator\">-&gt;</span>time<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">uint32_t</span> msec <span class=\"token operator\">=</span> time <span class=\"token operator\">-</span> current_time<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//根据时间</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msec <span class=\"token operator\">&lt;</span> TIME_NEAR<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//[0, 0x100)</span>\n\t\t<span class=\"token function\">link</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>T<span class=\"token operator\">-&gt;</span>near<span class=\"token punctuation\">[</span>time <span class=\"token operator\">&amp;</span> TIME_NEAR_MASK<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msec <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>TIME_NEAR_SHIFT <span class=\"token operator\">+</span> TIME_LEVEL_SHIFT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//[0x100, 0x4000)</span>\n\t\t<span class=\"token function\">link</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>T<span class=\"token operator\">-&gt;</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>time <span class=\"token operator\">&gt;&gt;</span> TIME_NEAR_SHIFT<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> TIME_LEVEL_MASK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msec <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>TIME_NEAR_SHIFT <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> TIME_LEVEL_SHIFT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//[0x4000, 0x100000)</span>\n\t\t<span class=\"token function\">link</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>T<span class=\"token operator\">-&gt;</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>time <span class=\"token operator\">&gt;&gt;</span> <span class=\"token punctuation\">(</span>TIME_NEAR_SHIFT <span class=\"token operator\">+</span> TIME_LEVEL_SHIFT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> TIME_LEVEL_MASK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msec <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>TIME_NEAR_SHIFT <span class=\"token operator\">+</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> TIME_LEVEL_SHIFT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//[0x100000, 0x4000000)</span>\n\t\t<span class=\"token function\">link</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>T<span class=\"token operator\">-&gt;</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>time <span class=\"token operator\">&gt;&gt;</span> <span class=\"token punctuation\">(</span>TIME_NEAR_SHIFT <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> TIME_LEVEL_SHIFT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> TIME_LEVEL_MASK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//[0x4000000, 0xffffffff]</span>\n\t\t<span class=\"token function\">link</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>T<span class=\"token operator\">-&gt;</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>time <span class=\"token operator\">&gt;&gt;</span> <span class=\"token punctuation\">(</span>TIME_NEAR_SHIFT <span class=\"token operator\">+</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> TIME_LEVEL_SHIFT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> TIME_LEVEL_MASK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//增加事件</span>\ntimer_node_t <span class=\"token operator\">*</span><span class=\"token function\">add_timer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> time<span class=\"token punctuation\">,</span> handler_pt func<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> threadid<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\ttimer_node_t <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>timer_node_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">spinlock_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>TI<span class=\"token operator\">-&gt;</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tnode<span class=\"token operator\">-&gt;</span>expire <span class=\"token operator\">=</span> time <span class=\"token operator\">+</span> TI<span class=\"token operator\">-&gt;</span>time<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 每10ms加1 0</span>\n\tnode<span class=\"token operator\">-&gt;</span>callback <span class=\"token operator\">=</span> func<span class=\"token punctuation\">;</span>\n\tnode<span class=\"token operator\">-&gt;</span>id <span class=\"token operator\">=</span> threadid<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>time <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tnode<span class=\"token operator\">-&gt;</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">spinlock_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>TI<span class=\"token operator\">-&gt;</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">add_node</span><span class=\"token punctuation\">(</span>TI<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">spinlock_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>TI<span class=\"token operator\">-&gt;</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">move_list</span><span class=\"token punctuation\">(</span>s_timer_t <span class=\"token operator\">*</span>T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> idx<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\ttimer_node_t <span class=\"token operator\">*</span>current <span class=\"token operator\">=</span> <span class=\"token function\">link_clear</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>T<span class=\"token operator\">-&gt;</span>t<span class=\"token punctuation\">[</span>level<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\ttimer_node_t <span class=\"token operator\">*</span>temp <span class=\"token operator\">=</span> current<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">add_node</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcurrent <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">timer_shift</span><span class=\"token punctuation\">(</span>s_timer_t <span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> mask <span class=\"token operator\">=</span> TIME_NEAR<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">uint32_t</span> ct <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>T<span class=\"token operator\">-&gt;</span>time<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ct <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">move_list</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">// ct / 256</span>\n\t\t<span class=\"token keyword\">uint32_t</span> time <span class=\"token operator\">=</span> ct <span class=\"token operator\">&gt;&gt;</span> TIME_NEAR_SHIFT<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// ct % 256 == 0</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ct <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>mask <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> time <span class=\"token operator\">&amp;</span> TIME_LEVEL_MASK<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token function\">move_list</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tmask <span class=\"token operator\">&lt;&lt;=</span> TIME_LEVEL_SHIFT<span class=\"token punctuation\">;</span>\n\t\t\ttime <span class=\"token operator\">&gt;&gt;=</span> TIME_LEVEL_SHIFT<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">dispatch_list</span><span class=\"token punctuation\">(</span>timer_node_t <span class=\"token operator\">*</span>current<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">do</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\ttimer_node_t <span class=\"token operator\">*</span>temp <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n\t\tcurrent <span class=\"token operator\">=</span> current<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-&gt;</span>cancel <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\ttemp<span class=\"token operator\">-&gt;</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">timer_execute</span><span class=\"token punctuation\">(</span>s_timer_t <span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> T<span class=\"token operator\">-&gt;</span>time <span class=\"token operator\">&amp;</span> TIME_NEAR_MASK<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">-&gt;</span>near<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\ttimer_node_t <span class=\"token operator\">*</span>current <span class=\"token operator\">=</span> <span class=\"token function\">link_clear</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>T<span class=\"token operator\">-&gt;</span>near<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">spinlock_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>T<span class=\"token operator\">-&gt;</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">dispatch_list</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">spinlock_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>T<span class=\"token operator\">-&gt;</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">timer_update</span><span class=\"token punctuation\">(</span>s_timer_t <span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">spinlock_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>T<span class=\"token operator\">-&gt;</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">timer_execute</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">timer_shift</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">timer_execute</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">spinlock_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>T<span class=\"token operator\">-&gt;</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">del_timer</span><span class=\"token punctuation\">(</span>timer_node_t <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tnode<span class=\"token operator\">-&gt;</span>cancel <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\ns_timer_t <span class=\"token operator\">*</span><span class=\"token function\">timer_create_timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\ts_timer_t <span class=\"token operator\">*</span>r <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s_timer_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>s_timer_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> TIME_NEAR<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">link_clear</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>r<span class=\"token operator\">-&gt;</span>near<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> TIME_LEVEL<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">link_clear</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>r<span class=\"token operator\">-&gt;</span>t<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">spinlock_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>r<span class=\"token operator\">-&gt;</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tr<span class=\"token operator\">-&gt;</span>current <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">uint64_t</span> <span class=\"token function\">gettime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">uint64_t</span> t<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">timespec</span> ti<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">clock_gettime</span><span class=\"token punctuation\">(</span>CLOCK_MONOTONIC<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ti<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">uint64_t</span><span class=\"token punctuation\">)</span>ti<span class=\"token punctuation\">.</span>tv_sec <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\tt <span class=\"token operator\">+=</span> ti<span class=\"token punctuation\">.</span>tv_nsec <span class=\"token operator\">/</span> <span class=\"token number\">10000000</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">expire_timer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">uint64_t</span> cp <span class=\"token operator\">=</span> <span class=\"token function\">gettime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cp <span class=\"token operator\">!=</span> TI<span class=\"token operator\">-&gt;</span>current_point<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">uint32_t</span> diff <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>cp <span class=\"token operator\">-</span> TI<span class=\"token operator\">-&gt;</span>current_point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tTI<span class=\"token operator\">-&gt;</span>current_point <span class=\"token operator\">=</span> cp<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> diff<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">timer_update</span><span class=\"token punctuation\">(</span>TI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">init_timer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tTI <span class=\"token operator\">=</span> <span class=\"token function\">timer_create_timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tTI<span class=\"token operator\">-&gt;</span>current_point <span class=\"token operator\">=</span> <span class=\"token function\">gettime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">clear_timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> TIME_NEAR<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tlink_list_t <span class=\"token operator\">*</span>list <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>TI<span class=\"token operator\">-&gt;</span>near<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\ttimer_node_t <span class=\"token operator\">*</span>current <span class=\"token operator\">=</span> list<span class=\"token operator\">-&gt;</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\ttimer_node_t <span class=\"token operator\">*</span>temp <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n\t\t\tcurrent <span class=\"token operator\">=</span> current<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">link_clear</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>TI<span class=\"token operator\">-&gt;</span>near<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> TIME_LEVEL<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tlink_list_t <span class=\"token operator\">*</span>list <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>TI<span class=\"token operator\">-&gt;</span>t<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\ttimer_node_t <span class=\"token operator\">*</span>current <span class=\"token operator\">=</span> list<span class=\"token operator\">-&gt;</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\ttimer_node_t <span class=\"token operator\">*</span>temp <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n\t\t\t\tcurrent <span class=\"token operator\">=</span> current<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token function\">link_clear</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>TI<span class=\"token operator\">-&gt;</span>t<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>tw-timer.cpp:</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h&gt;</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"timewheel.h\"</span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">context</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> quit<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> thread<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">thread_param</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">context</span> <span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">context</span> ctx <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">do_timer</span><span class=\"token punctuation\">(</span>timer_node_t <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timer expired:%d - thread-id:%d\\n\"</span><span class=\"token punctuation\">,</span> node<span class=\"token operator\">-&gt;</span>expire<span class=\"token punctuation\">,</span> node<span class=\"token operator\">-&gt;</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">thread_worker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">thread_param</span> <span class=\"token operator\">*</span>tp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">thread_param</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> tp<span class=\"token operator\">-&gt;</span>id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">context</span> <span class=\"token operator\">*</span>ctx <span class=\"token operator\">=</span> tp<span class=\"token operator\">-&gt;</span>ctx<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ctx<span class=\"token operator\">-&gt;</span>quit<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> expire <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">add_timer</span><span class=\"token punctuation\">(</span>expire<span class=\"token punctuation\">,</span> do_timer<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">usleep</span><span class=\"token punctuation\">(</span>expire <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"thread_worker:%d exit!\\n\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">do_quit</span><span class=\"token punctuation\">(</span>timer_node_t <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    ctx<span class=\"token punctuation\">.</span>quit <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ctx<span class=\"token punctuation\">.</span>thread <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n    pthread_t pid<span class=\"token punctuation\">[</span>ctx<span class=\"token punctuation\">.</span>thread<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">init_timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">add_timer</span><span class=\"token punctuation\">(</span><span class=\"token number\">6000</span><span class=\"token punctuation\">,</span> do_quit<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">thread_param</span> task_thread_p<span class=\"token punctuation\">[</span>ctx<span class=\"token punctuation\">.</span>thread<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ctx<span class=\"token punctuation\">.</span>thread<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        task_thread_p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        task_thread_p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ctx <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>ctx<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> thread_worker<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>task_thread_p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"create thread failed\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ctx<span class=\"token punctuation\">.</span>quit<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">expire_timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">usleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">clear_timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ctx<span class=\"token punctuation\">.</span>thread<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">pthread_join</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all thread is closed\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\80f73af220c64871a86454c6e3a2e5eb.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-06 22:58:17", "summary": "文章目录定时器最小堆实现定时器时间轮单层级时间轮多层级时间轮定时器有些时候我们需要延迟执行一些功能，比如每进行一次数据采集。或者告知用户技能冷却有多少时间，如果我们将执行这些功能的任务交给主线程，就会"}