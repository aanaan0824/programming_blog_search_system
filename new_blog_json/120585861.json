{"blogid": "120585861", "writerAge": "码龄3年", "writerBlogNum": "26", "writerCollect": "552", "writerComment": "93", "writerFan": "71", "writerGrade": "4级", "writerIntegral": "1128", "writerName": "若芷兰", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_120585861.jpg", "writerRankTotal": "22478", "writerRankWeekly": "60046", "writerThumb": "147", "writerVisitNum": "109983", "blog_read_count": "30625", "blog_time": "已于 2022-04-16 05:36:45 修改", "blog_title": "Python dataframe 多条件筛选/过滤数据的方法及函数isin，query，contains，loc的使用介绍", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"1__0\"></a>1. 背景概述</h2>\n<p>日常的数据分析中，经常要根据各种不同的条件从数据集中筛选出相应的数据记录，再进行提取、替换、修改和分析等操作。因此筛选是数据分析中使用频率最高的操作之一。在刚开始做数据分析的时候，常常是使用for循环在数据集中进行条件筛选，导致代码比较冗长且效率不高。本文总结了在python中常用的并且使用效率比较高的几种数据筛选函数如：isin()、query()、contains()、loc()等，并且展示了它们单独使用或搭配一起使用的实践效果。</p>\n<h2><a id=\"2__2\"></a>2. 筛选方法和函数简介</h2>\n<p>2.1 简单的筛选方法：<br/> 单一的筛选：条件范围可以是数值或字符串<br/> df[df[“column_name”] == value]<br/> 多字段的筛选（又称为复合条件的筛选）: 多个不同的特征列，并且条件可以对应不同的数值或字符串<br/> df[(df[“column_name1”] &lt;= value) &amp; (df[“column_name2”] == str)]</p>\n<p>2.2 isin函数：df[df[“column_name”].isin(li)] (# li = [20, 25, 27] 或 li = np.arange(20, 30))<br/> 根据从isin函数传入的列表(li)，筛选出与列表中包含的数值或字符串相同的数据记录, 用法有点类似sql中的\"in\"</p>\n<p>2.3 query函数：df.query(\"(column_name1 == ‘str1’) &amp; (column_name2 == ‘str2’)\")<br/> 根据query中引入的不同字段（str1，str2等）和条件，筛选出同时能满足这些要求的数据记录</p>\n<p>2.4 contains函数：df[df[“column_name”].str.contains(“str”)]<br/> 筛选出所有含有(str)的数据记录, 用法类似于sql中的\"contains\"</p>\n<p>2.5 loc函数：df.loc[df[\"column_name] &lt;= value]<br/> 根据特征属性（列名）或索引标签筛选数据：df.loc[columns 筛选条件] 或df.loc[index 筛选条件];<br/> 同时根据索引标签和特征属性（列名）筛选数据：df.loc[index 筛选条件，columns 筛选条件]</p>\n<p>2.6 筛选函数之间还能根据各自的特点搭配使用</p>\n<h2><a id=\"3__24\"></a>3. 函数的使用实践</h2>\n<h3><a id=\"31__25\"></a>3.1 数据准备和说明</h3>\n<pre><code>数据准备：数据按行筛选（数据记录）并提取数据\nimport numpy as np\nimport pandas as pd\ndf = pd.DataFrame({\"name\": [\"A001\", \"A002\", \"B001\", \"A001_K\", \"C002\", \"B001_K\", \"B001\"], \n                    \"protein\": [25, 28, 45, 22, 60, 40, 27], \n                    \"Qty\": [85, 90, 75, 80, 30, 50, 30], \n                    \"rank\": [\"1st\", \"1st\", \"1st\", \"2nd\", \"1st\", \"1st\", \"2nd\"]})\ndf\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\86499f73db8744c484b502ec63b55c9d.png\"/></p>\n<h3><a id=\"32__37\"></a>3.2 示例代码</h3>\n<h4><a id=\"321__38\"></a>3.2.1 简单的条件筛选方法</h4>\n<pre><code># 1 简单的条件筛选：单一条件筛选\ndata = df[df[\"protein\"] &lt;= 30]\ndata\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2153418217e1486bbfffe0937c45675a.png\"/><br/> 代码描述：df.loc[df[“protein”] &lt;= 30] 与 df[df[“protein”] &lt;= 30]的运行结果是一样的。</p>\n<pre><code># 2 多重条件筛选 -- 筛选的条件是数值\n# 筛选并提取protein 在40-50之间的记录(符合条件)\ndata = df[(df[\"protein\"] &gt;= 40) &amp; (df[\"protein\"] &lt;= 50)]\ndata\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\092dc3d2abbb4a5a8576c51a1cd749cd.png\"/></p>\n<pre><code># 3 多重条件筛选 -- 筛选的条件有数值和字符串\n# 筛选出蛋白质含量大于30并且产品评级为\"1st\"的数据\ndata = df[(df[\"protein\"] &gt;= 30) &amp; (df[\"rank\"] == \"1st\")]\ndata\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e5013b17365041e798c668c9c6621824.png\"/></p>\n<h4><a id=\"322_isin__60\"></a>3.2.2 isin 函数的使用</h4>\n<p>返回的结果是根据从isin函数传入的列表(li)，筛选出与列表中包含的数值或字符串相同的数据记录, 用法有点类似sql中的\"in\"</p>\n<pre><code># 筛选出与列表中的数值或字符串相等的数据记录\n# li = np.arange(20, 30)\nli = [25, 60, 45, 40]\ndata = df[df[\"protein\"].isin(li)]\ndata\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\72852ec031e847b0adfdf4558a8b164f.png\"/></p>\n<h4><a id=\"323_query__70\"></a>3.2.3 query 函数的使用</h4>\n<p>返回的结果是根据query中引入的不同字段（str1，str2）和条件，筛选出同时能满足这些要求的数据记录</p>\n<pre><code># 筛选出名称为“A001”或“B001”，并且级别都是“1st”的数据记录\ndata = df.query(\"(name=='A001'| name=='B001') &amp; (rank == '1st')\")\ndata\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5b21e231cca34312915141c3692488ae.png\"/><br/> 温馨提示：在使用query函数时，所有的表达内容都必须用引号标识出来，并且字符串的引号与表达式的引号需要区分出来（即遵从使用双引号与单引号的套用规则）。另外，特征列名称是不需要使用引号标注的，这可以理解为是直接调用了列表，因此列名称不需要注释。</p>\n<h4><a id=\"324_contains__80\"></a>3.2.4 contains 函数的使用</h4>\n<pre><code># 1 筛选出所有名称中还有“K”的数据记录\ndata = df[df[\"name\"].str.contains(\"K\")]\ndata\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\588bd4d970a74b5b8607f98f1376cbfd.png\"/></p>\n<pre><code># 2 筛选出级别中含有\"st\", 并且名字中含有\"K\"的数据记录\ndata = df[(df[\"rank\"].str.contains(\"st\") &amp; df[\"name\"].str.contains(\"K\"))]\ndata\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0b25ccbaa08a4d09a6c7df8f87bc0529.png\"/></p>\n<h4><a id=\"325_loc__93\"></a>3.2.5 loc 函数的使用</h4>\n<pre><code># 5. loc() 函数 -- 根据标签和特征列名进行数据筛选 \n# 5.1 单一条件的筛选\ndata = df.loc[df[\"protein\"] &lt;=30]    # 与df[df[\"protein\"] &lt;=30]的运行结果是一致的！\ndata\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\546317760c6a4c0fa60bb4bef1b3013b.png\"/><br/> 小结：这与之前说的 df[df[“protein”] &lt;=30] 的运行结果是一致的！</p>\n<pre><code># 5.2 复合条件的筛选\n# 筛选出名称为\"B001\"并且蛋白质含量低于30的数据记录\ndata = df.loc[(df[\"name\"]==\"B001\") &amp; (df[\"protein\"]&lt;=30)]\ndata\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\24fab77eae81435385dec947e32942ba.png\"/></p>\n<pre><code># 5.3 使用loc函数同时对索引标签和特征属性（列名）进行数据筛选\n# 注意：当使用loc函数根据索引标签和特征列名进行筛选时，需要设定相应的索引标签。本测试会先将名称更换为索引值再进行筛选（使用set_index()函数将特征列名转换为索引值)\n\n# 筛选出名称为\"B001\"的所有数据记录\ntest = df.copy().set_index(\"name\")\ntest.loc[\"B001\", :]\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\22f83e80d7ec40bca819e5dda4d46edd.png\"/></p>\n<pre><code># 5.4 筛选出名称为\"B001\"和“A001”的蛋白质和评级数据\ntest_ = test.loc[[\"B001\", \"A001\"], [\"protein\", \"rank\"]]\ntest_\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\505824e466f54adaa075b360e7b1dad0.png\"/></p>\n<h4><a id=\"326__124\"></a>3.2.6 筛选函数的搭配使用</h4>\n<p>上述介绍的筛选方法和函数是可以被搭配在一起使用，并且效果很不错！</p>\n<pre><code># 1 筛选出蛋白质小于等于30，并且级别是含有\"2nd\"的数据记录\ndata = df[(df[\"protein\"] &lt;=30) &amp; df[\"rank\"].str.contains(\"2nd\")]\ndata\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\223d4f87f667464ebac0690902f3653c.png\"/></p>\n<pre><code># 2  筛选出蛋白质的含量是列表中的数值，并且名称中含有\"K\"的数据记录\nli = [25, 60, 45, 40, 22]\ndata = df[(df[\"protein\"].isin(li)) &amp; (df[\"name\"].str.contains(\"K\"))]\ndata\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\273b1d249f86462cb0b6695872c25806.png\"/></p>\n<h2><a id=\"4__139\"></a>4. 结束语</h2>\n<ol><li>单一条件的行或列的筛选可直接使用df[columns 筛选条件] 或df[indx 筛选条件]</li><li>isin 函数的使用很灵活，能将多个不用的数值范围要求或字段要求通过列表的形式传入函数中进行筛选。</li><li>query 函数能进行多字段的筛选，但要特别注意列名的引用，以及格式的书写与其他函数不一样的地方。</li><li>contains 函数其实是相当与SQL 中的contains的用法，能灵活地对字符串的数据进行筛选。</li><li>筛选方法和函数是可以根据不同的需要被搭配在一起形成多重的条件筛选，并且使用的效果很不错！</li><li>如果是同时对行和列进行筛选，可使用df.loc[index 筛选条件，columns 筛选条件]</li></ol>\n<h6><a id=\"lociloc_147\"></a>基础概念：loc函数与iloc函数的区别</h6>\n<ol><li>loc() 函数：指Selection by label的函数<br/> 是按照标签来提取数据，标签是由2个参数决定的。<br/> 第1个参数是index: “0”-“6”； 第2个参数是column: “name”, “protein”, “Qty”, “rank” # df.loc[6, :], # df.loc[6, “protein”]</li><li>iloc(n, m) 函数：指Selection by Position的函数<br/> 是按位置选择数据，即第n行，第m列，只接受整数型 的参数 # df.iloc[:, 0]； #df.iloc[1, :]</li></ol>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 1, "php": 0, "time": "2022-04-16 05:36:45", "summary": "背景概述日常的数据分析中，经常要根据各种不同的条件从数据集中筛选出相应的数据记录，再进行提取、替换、修改和分析等操作。因此筛选是数据分析中使用频率最高的操作之一。在刚开始做数据分析的时候，常常是使用循"}