{"blogid": "124259074", "writerAge": "码龄3年", "writerBlogNum": "2", "writerCollect": "1", "writerComment": "1", "writerFan": "0", "writerGrade": "1级", "writerIntegral": "24", "writerName": "Persistence_db", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124259074.jpg", "writerRankTotal": "187758", "writerRankWeekly": "1180682", "writerThumb": "1", "writerVisitNum": "2569", "blog_read_count": "2535", "blog_time": "于 2022-04-18 21:42:22 发布", "blog_title": "Unity 开发：模型自动贴合配准", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<blockquote>\n C#写的一个简单的自动贴合脚本，可以实现物体移动后，将物体放回原位的功能。 \n <p></p>\n</blockquote>\n<h1 id=\"%E5%89%8D%E8%A8%80\"><a id=\"_7\"></a>前言</h1>\n<p>      本文采用标志位进行物体位置判断，设置自动贴合距离。两物体处于自动贴合距离内时，根据物体标志位的三维坐标和欧拉角，进行平移和旋转操作，实现贴合操作。</p>\n<hr/>\n<p></p>\n<h1 id=\"%E4%B8%80%E3%80%81pandas%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><a id=\"pandas_16\"></a>一、设置物体标志位</h1>\n<p>Target：绘制一个蓝色四边形，表示贴合平面位置；一条红色射线，表示贴合平面的欧拉角。</p>\n<p>在需要自动贴合的两物体下创建空物体，命名为Target，并将标志位脚本挂载在空物体上。</p>\n<pre><code class=\"language-cs\">Vector2 halfSize = Size * 0.5f;\nGizmos.color = Color.red;\nfloat lineLength = Mathf.Min(Size.x, Size.y);\nGizmos.DrawLine(transform.position, transform.position + transform.forward * lineLength);\n\nGizmos.color = Color.blue;\nVector3 topLeft = transform.position - (transform.right * halfSize.x) + (transform.up * Size.y) / 2;\nVector3 topRight = transform.position + (transform.right * halfSize.x) + (transform.up * Size.y) / 2;\n\nVector3 bottomLeft = transform.position - (transform.right * halfSize.x) - (transform.up * Size.y) / 2;\nVector3 bottomRight = transform.position + (transform.right * halfSize.x) - (transform.up * Size.y) / 2;\n\nGizmos.DrawLine(topLeft, topRight);\nGizmos.DrawLine(topRight, bottomRight);\nGizmos.DrawLine(bottomRight, bottomLeft);\nGizmos.DrawLine(bottomLeft, topLeft);</code></pre>\n<h1 id=\"%E4%BA%8C%E3%80%81%E8%87%AA%E5%8A%A8%E8%B4%B4%E5%90%88%E6%93%8D%E4%BD%9C\"><a id=\"_19\"></a>二、自动贴合操作</h1>\n<h2 id=\"1.%E5%BC%95%E5%85%A5%E5%BA%93\"><a id=\"1_20\"></a>1.贴合操作脚本</h2>\n<p>设置两个Transform变量接收两物体的位置信息</p>\n<pre><code class=\"language-cs\">Transform m_door;\nTransform T_door;\n\nvoid Start()\n\t{\n        m_door = this.transform.Find(\"Target\");\n\t\tif (m_door == null)\n\t\t{\n\t\t\tDebug.LogError(\"本地对象未找到位置标志\");\n\t\t}\n\n\t\tT_door = m_Target.Find(\"Target\");\n\t\tif (T_door  == null)\n\t\t{\n\t\t\tDebug.LogError(\"目标对象未找到位置标志\");\n\t\t}\n\n\t}</code></pre>\n<p>判断两物体的位置是否小于设置距离</p>\n<pre><code class=\"language-cs\">public bool IsClose()\n\t{\n\t\tif (m_door != null &amp;&amp; T_door != null)\n\t\t{\n\t\t\tif (Vector3.Distance(m_door.position, T_door.position) &lt;= Distance)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}</code></pre>\n<p>贴合物体计算移动距离，进行位置移动，移动脚本挂载的父物体（模型）</p>\n<pre><code class=\"language-cs\">public void MoveTo()\n\t{\n\t\t\n\t\tVector3 moveVector = T_door.position - m_door.position;\n\t\tm_door.parent.Translate(moveVector, Space.World);\n\t}</code></pre>\n<p>贴合物体计算欧拉角，进行旋转</p>\n<pre><code class=\"language-cs\">public void RotateThis1()\n\t{\n\t\tVector3 RotateAix = Vector3.Cross(m_door.forward, T_door.forward);\n\t\tfloat angle = Vector3.Angle(m_door.forward, T_door.forward) + 180;\n\t\tm_door.parent.Rotate(RotateAix, angle, Space.World);\n\n\t\tfloat Anle = Vector3.Angle(T_door.up, m_door.up);\n\t\tDebug.Log(Anle);\n\t\tm_door.parent.Rotate(T_door.forward, Anle, Space.World);\n\n\t}</code></pre>\n<p></p>\n<h2>2.Unity中脚本挂载</h2>\n<p>在需要自动贴合的两物体下创建空物体，用于挂载标志位脚本。</p>\n<p>注：空物体命名为Target，需与脚本内一致，否则获取不到位置信息</p>\n<p><img alt=\"\" height=\"218\" src=\"..\\..\\static\\image\\406e460ccd714889ac1d5426f1f4c1c3.png\" width=\"355\"/></p>\n<p> </p>\n<p>Size设置标志位显示大小，此处显示非必要，可以不显示。</p>\n<p><img alt=\"\" height=\"284\" src=\"..\\..\\static\\image\\0162d3f7eb4f4ba3b80dcfa335165055.png\" width=\"368\"/><img alt=\"\" height=\"313\" src=\"..\\..\\static\\image\\f0b65347af7344a180546cfc1cc6a06f.png\" width=\"371\"/></p>\n<p> </p>\n<p> 两物体有一个为移动物体（位置变动去贴合另一个物体），A为移动物体。将自动贴合脚本挂载在移动物体A上，在Target初选择B物体，Distance设置贴合距离。</p>\n<p> <img alt=\"\" height=\"103\" src=\"..\\..\\static\\image\\4b4e4f9f439044ef83a914b0c8e200cd.png\" width=\"449\"/></p>\n<p>运行后，两物体标志位面贴近到Distance以内，自动贴合，并可以分离。</p>\n<p><img alt=\"\" height=\"277\" src=\"..\\..\\static\\image\\7e5ee0448e6c4c63a3b19d9a82a34177.png\" width=\"640\"/><img alt=\"\" height=\"262\" src=\"..\\..\\static\\image\\a045255b0a3f4139aad8b663367da136.png\" width=\"393\"/></p>\n<hr/>\n<p> </p>\n<p> </p>\n<h1 id=\"%E6%80%BB%E7%BB%93\"><a id=\"_45\"></a>总结</h1>\n<p>C#写的一个简单的自动贴合脚本，可以实现物体移动后，将物体放回原位的功能。标志位可以自由移动，放置在任意位置和角度。完整代码请看主页。</p>\n</div>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-04-18 21:42:22", "summary": "写的一个简单的自动贴合脚本，可以实现物体移动后，将物体放回原位的功能。前言本文采用标志位进行物体位置判断，设置自动贴合距离。两物体处于自动贴合距离内时，根据物体标志位的三维坐标和欧拉角，进行平移和旋转"}