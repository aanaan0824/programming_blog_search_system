{"blogid": "123438648", "writerAge": "码龄1年", "writerBlogNum": "11", "writerCollect": "98", "writerComment": "5", "writerFan": "2", "writerGrade": "2级", "writerIntegral": "152", "writerName": "小新报道啦", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123438648.jpg", "writerRankTotal": "147473", "writerRankWeekly": "747172", "writerThumb": "22", "writerVisitNum": "24422", "blog_read_count": "17992", "blog_time": "于 2022-03-12 09:44:45 发布", "blog_title": "js实现文件下载有很多种方式，本文主要介绍7种。", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p> 一、a标签下载</p>\n<pre><code class=\"language-javascript\">&lt;body&gt;\n  &lt;button onclick=\"downloadEvt('http://192.168.66.183:13666/download?name=HAP.pdf')\"&gt;a标签下载&lt;/button&gt;\n  &lt;script&gt;\n    function downloadEvt(url, fileName = '未知文件') {\n      const el = document.createElement('a');\n      el.style.display = 'none';\n      el.setAttribute('target', '_blank');\n     /**\n       * download的属性是HTML5新增的属性\n       * href属性的地址必须是非跨域的地址，如果引用的是第三方的网站或者说是前后端分离的项目(调用后台的接口)，这时download就会不起作用。\n       * 此时，如果是下载浏览器无法解析的文件，例如.exe,.xlsx..那么浏览器会自动下载，但是如果使用浏览器可以解析的文件，比如.txt,.png,.pdf....浏览器就会采取预览模式\n       * 所以，对于.txt,.png,.pdf等的预览功能我们就可以直接不设置download属性(前提是后端响应头的Content-Type: application/octet-stream，如果为application/pdf浏览器则会判断文件为 pdf ，自动执行预览的策略)\n       */\n      fileName &amp;&amp; el.setAttribute('download', fileName);\n      el.href = url;\n      console.log(el);\n      document.body.appendChild(el);\n      el.click();\n      document.body.removeChild(el);\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n​</code></pre>\n<p><strong>优点</strong>：</p>\n<ul><li> <p>可以下载txt、png、pdf等类型文件</p> </li><li> <p><code>download</code>的属性是HTML5新增的属性 href属性的地址必须是非跨域的地址，如果引用的是第三方的网站或者说是前后端分离的项目(调用后台的接口)，这时<code>download</code>就会不起作用。 此时，如果是下载浏览器无法解析的文件，例如.exe,.xlsx..那么浏览器会自动下载，但是如果使用浏览器可以解析的文件，比如.txt,.png,.pdf....浏览器就会采取预览模式；所以，对于.txt,.png,.pdf等的预览功能我们就可以直接不设置<code>download</code>属性(前提是后端响应头的<code>Content-Type: application/octet-stream</code>，如果为<code>application/pdf</code>浏览器则会判断文件为 pdf ，自动执行预览的策略)</p> </li></ul>\n<p><strong>缺点</strong>：</p>\n<ul><li> <p>a标签只能做get请求，所有url有长度限制</p> </li><li> <p>无法获取下载进度</p> </li><li> <p>无法在header中携带token做鉴权操作</p> </li><li> <p>跨域限制</p> </li><li> <p>无法判断接口是否返回成功</p> </li><li> <p>IE兼容问题</p> </li></ul>\n<h3>二、form标签下载</h3>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\9572d9489931e3adfa450c5c148203a8.png\"/></p>\n<p>图2-1</p>\n<pre><code class=\"language-javascript\">&lt;body&gt;\n  &lt;button onclick=\"inputDownloadEvt('get', 'http://192.168.66.183:13666/download', 'name', 'HAP.pdf')\"&gt;form标签下载&lt;/button&gt;\n  &lt;script&gt;\n    /**\n     * @param {String} method - 请求方法get/post\n     * @param {String} url\n     * @param {String} paramsKey - 请求参数名\n     * @param {String} paramsValue - 请求参数值\n    */\n    function inputDownloadEvt(method, url, paramsKey, paramsValue) {\n      const form = document.createElement('form');\n      form.style.display = 'none';\n      form.setAttribute('target', '_blank');\n      form.setAttribute('method', method);\n      form.setAttribute('action', url);\n      const input = document.createElement('input');\n      input.setAttribute('type','hidden');\n      // 对于get请求 最终会拼成http://192.168.66.183:13666/download?name=HAP.pdf\n      input.setAttribute('name', paramsKey);\n      input.setAttribute('value', paramsValue);\n      form.appendChild(input);\n      document.body.appendChild(form);\n      form.submit();\n      document.body.removeChild(form);\n    }\n  &lt;/script&gt;\n&lt;/body&gt;</code></pre>\n<pre>\n<strong>优点</strong></pre>\n<ul><li> <p>兼容性好，不会出现URL长度限制问题</p> </li><li> <p>form标签get和post都可以</p> </li></ul>\n<p><strong>缺点</strong></p>\n<ul><li> <p>无法获取下载进度</p> </li><li> <p>无法在header中携带token做鉴权操作</p> </li><li> <p>无法直接下载浏览器可直接预览的文件类型（txt、png、pdf会直接预览）</p> </li><li> <p>无法判断接口是否返回成功</p> </li></ul>\n<h3>三、window.open下载</h3>\n<pre><code class=\"language-javascript\">&lt;body&gt;\n  &lt;button \n    onclick=\"downloadEvt('http://192.168.66.183:13666/download?name=HAP.pdf')\"&gt;\n    window.open下载\n  &lt;/button&gt;\n\n  &lt;script&gt;\n    function downloadEvt(url) {\n      window.open(url, '_self');\n    }\n  &lt;/script&gt;\n\n&lt;/body&gt;\n​</code></pre>\n<p><strong>优点</strong></p>\n<ul><li> <p>简单方便直接</p> </li></ul>\n<p><strong>缺点</strong></p>\n<ul><li> <p>会出现URL长度限制问题</p> </li><li> <p>需要注意url编码问题</p> </li><li> <p>无法获取下载进度</p> </li><li> <p>无法在header中携带token做鉴权操作</p> </li><li> <p>无法直接下载浏览器可直接预览的文件类型（txt、png、pdf会直接预览）</p> </li><li> <p>无法判断接口是否返回成功</p> </li></ul>\n<h3>四、iframe下载</h3>\n<pre><code class=\"language-javascript\">&lt;body&gt;\n  &lt;button \n    onclick=\"downloadEvt('http://192.168.66.183:13666/download?name=HAP.pdf')\"&gt;\n    iframe下载\n  &lt;/button&gt;\n\n  &lt;script&gt;\n    // 批量下载时，动态创建a标签，会始终只下载一个文件，改为动态创建iframe标签\n    function downloadEvt(url) {\n      const iframe = document.createElement('iframe');\n      iframe.style.display = 'none';\n      iframe.src = url;\n      document.body.appendChild(iframe);\n      setTimeout(() =&gt; {\n        document.body.removeChild(iframe);\n      }, 200);\n    }\n  &lt;/script&gt;\n\n&lt;/body&gt;\n​</code></pre>\n<p><strong>优点</strong></p>\n<ul><li> <p>可以下载txt、png、pdf等类型文件</p> </li></ul>\n<p><strong>缺点</strong></p>\n<ul><li> <p>无法获取下载进度</p> </li><li> <p>无法在header中携带token做鉴权操作</p> </li><li> <p>无法判断接口是否返回成功</p> </li><li> <p>兼容、性能差</p> </li></ul>\n<h3>五、location.href下载</h3>\n<pre><code class=\"language-javascript\">&lt;body&gt;\n  &lt;button \n    onclick=\"downloadEvt('http://192.168.66.183:13666/download?name=HAP.pdf')\"&gt;\n    location.href下载\n  &lt;/button&gt;\n\n  &lt;script&gt;\n    function downloadEvt(url) {\n      window.location.href = url;\n    }\n  &lt;/script&gt;\n&lt;/body&gt;</code></pre>\n<pre>\n<strong>优点</strong></pre>\n<ul><li> <p>简单方便直接</p> </li><li> <p>可以下载大文件(G以上)</p> </li></ul>\n<p><strong>缺点</strong></p>\n<ul><li> <p>会出现URL长度限制问题</p> </li><li> <p>需要注意url编码问题</p> </li><li> <p>无法获取下载进度</p> </li><li> <p>无法在header中携带token做鉴权操作</p> </li><li> <p>无法直接下载浏览器可直接预览的文件类型（txt、png、pdf会直接预览）</p> </li><li> <p>无法判断接口是否返回成功</p> </li></ul>\n<h3>六、ajax下载（<code>Blob - 利用Blob对象生成Blob URL</code>）</h3>\n<p>如果后端需要做token验证，那么<code>a、form、iframe、window.open、location.href</code>都无法在header中携带token，这时候可以使用ajax来实现。</p>\n<pre><code class=\"language-javascript\">&lt;body&gt;\n  &lt;button onclick=\"downLoadAjaxEvt('get', 'http://192.168.66.183:13666/download?name=HAP.pdf')\"&gt;ajax下载&lt;/button&gt;\n  &lt;script&gt;\n    function downloadEvt(url, fileName = '未知文件') {\n      const el = document.createElement('a');\n      el.style.display = 'none';\n      el.setAttribute('target', '_blank');\n     /**\n       * download的属性是HTML5新增的属性\n       * href属性的地址必须是非跨域的地址，如果引用的是第三方的网站或者说是前后端分离的项目(调用后台的接口)，这时download就会不起作用。\n       * 此时，如果是下载浏览器无法解析的文件，例如.exe,.xlsx..那么浏览器会自动下载，但是如果使用浏览器可以解析的文件，比如.txt,.png,.pdf....浏览器就会采取预览模式\n       * 所以，对于.txt,.png,.pdf等的预览功能我们就可以直接不设置download属性(前提是后端响应头的Content-Type: application/octet-stream，如果为application/pdf浏览器则会判断文件为 pdf ，自动执行预览的策略)\n       */\n      fileName &amp;&amp; el.setAttribute('download', fileName);\n      el.href = url;\n      console.log(el);\n      document.body.appendChild(el);\n      el.click();\n      document.body.removeChild(el);\n    };\n​\n    // 根据header里的contenteType转换请求参数\n    function transformRequestData(contentType, requestData) {\n      requestData = requestData || {};\n      if (contentType.includes('application/x-www-form-urlencoded')) {\n        // formData格式：key1=value1&amp;key2=value2，方式二：qs.stringify(requestData, {arrayFormat: 'brackets'}) -- {arrayFormat: 'brackets'}是对于数组参数的处理\n        let str = '';\n        for (const key in requestData) {\n          if (Object.prototype.hasOwnProperty.call(requestData, key)) {\n            str += `${key}=${requestData[key]}&amp;`;\n          }\n        }\n        return encodeURI(str.slice(0, str.length - 1));\n      } else if (contentType.includes('multipart/form-data')) {\n        const formData = new FormData();\n        for (const key in requestData) {\n          const files = requestData[key];\n          // 判断是否是文件流\n          const isFile = files ? files.constructor === FileList || (files.constructor === Array &amp;&amp; files[0].constructor === File) : false;\n          if (isFile) {\n            for (let i = 0; i &lt; files.length; i++) {\n              formData.append(key, files[i]);\n            }\n          } else {\n            formData.append(key, files);\n          }\n        }\n        return formData;\n      }\n      // json字符串{key: value}\n      return Object.keys(requestData).length ? JSON.stringify(requestData) : '';\n    }\n    /**\n     * ajax实现文件下载、获取文件下载进度\n     * @param {String} method - 请求方法get/post\n     * @param {String} url\n     * @param {Object} [params] - 请求参数，{name: '文件下载'}\n     * @param {Object} [config] - 方法配置\n     */\n     function downLoadAjaxEvt(method = 'get', url, params, config) {\n      const _method = method.toUpperCase();\n      const _config = Object.assign({\n        contentType: _method === 'GET' ? 'application/x-www-form-urlencoded' : 'application/json',  // 请求头类型\n        fileName: '未知文件',                                        // 下载文件名(必填，若为空，下载下来都是txt格式)\n        async: true,                                                // 请求是否异步-true异步、false同步\n        token: 'token'                                              // 用户token\n      }, config);\n​\n      const queryParams = transformRequestData(_config.contentType, params);\n      const _url = `${url}${_method === 'GET' &amp;&amp; queryParams ? '?' + queryParams : ''}`;\n​\n      const ajax = new XMLHttpRequest();\n      ajax.open(_method, _url, _config.async);\n      ajax.setRequestHeader('Authorization', _config.token);\n      ajax.setRequestHeader('Content-Type', _config.contentType);\n      // responseType若不设置，会导致下载的文件可能打不开\n      ajax.responseType = 'blob';\n      // 获取文件下载进度\n      ajax.addEventListener('progress', (progress) =&gt; {\n        const percentage = ((progress.loaded / progress.total) * 100).toFixed(2);\n        const msg = `下载进度 ${percentage}%...`;\n        console.log(msg);\n      });\n      ajax.onload = function () {\n        if (this.status === 200 || this.status === 304) {\n          // 通过FileReader去判断接口返回是json还是文件流\n          const fileReader = new FileReader();\n          fileReader.onloadend = (e) =&gt; {\n            if (this.getResponseHeader('content-type').includes('application/json')) {\n              const result = JSON.parse(fileReader.result || '{message: 服务器出现问题，请联系管理员}');\n              alert(result.message);\n            } else {\n              // 两种解码方式，区别自行百度: decodeURIComponent/decodeURI（主要获取后缀名，否则低版本浏览器会一律识别为txt，导致下载下来的都是txt）\n              const _fileName = decodeURIComponent((this.getResponseHeader('content-disposition') || '; filename=\"未知文件\"').split(';')[1].trim().slice(9));\n              /**\n              * Blob.type一个字符串，表明该 Blob 对象所包含数据的 MIME 类型。如果类型未知，则该值为空字符串。\n              * 对于pdf：type为application/pdf  同时 a标签 不设置download属性, 可以直接预览\n              */\n              const blob = new Blob([this.response]);\n              const href = URL.createObjectURL(blob);\n              downloadEvt(href, _fileName);\n              // 释放一个之前已经存在的、通过调用 URL.createObjectURL() 创建的 URL 对象\n              URL.revokeObjectURL(href);\n            }\n          };\n          // 调用readAsText读取文件，少了readAsText将不会触发onloadend事件\n          fileReader.readAsText(this.response);\n        } else {\n          alert('服务器出现问题，请联系管理员');\n        }\n      };\n      // send(string): string：仅用于 POST 请求\n      ajax.send(queryParams);\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n​</code></pre>\n<ul><li> <p><code>responseType</code> responseType若不设置，会导致下载的文件可能打不开<code>ajax.responseType = 'blob';</code></p> </li><li> <p><code>new FileReader()</code> 1.文件下载的接口存在返回失败的情况（例如：服务器连接不上、接口报错等），对于下载失败的情况我们需要在页面上弹出失败提示，而不是将失败信息写进文件里等用户打开，这时候可以使用<code>FileReader</code>去根据响应头里的<code>content-type</code>判断接口是否返回成功； 2.如果<code>content-type</code>返回<code>application/json</code>表示文件流返回失败，此时直接在页面上弹出失败信息（图6-1）；如果是其他格式就认为文件流已经返回。</p> <p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\d036598be175f4e1cd469b26471b259b.png\"/></p> <p>图6-1</p> </li><li> <p><code>this.getResponseHeader('content-disposition')</code> 后端返回的文件名称，主要获取后缀名，否则某些浏览器会一律识别为txt，导致下载下来的都是txt</p> <p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\d7dedd1c383b5f199ca2ea48a066b121.png\"/></p> <p>图6-2</p> </li><li> <p><code>new Blob([this.response], {type: '文件类型'})</code> <a href=\"https://links.jianshu.com/go?to=http%3A%2F%2Ftools.jb51.net%2Ftable%2Fhttp_content_type%2F\" title=\"Application Type 对照表\">Application Type 对照表</a> 1.Blob.type一个字符串，表明该 Blob 对象所包含数据的 MIME 类型。如果类型未知，则该值为空字符串； 2.对于pdf：type为application/pdf 同时 a标签 不设置download属性(图6-3), 可以直接预览（图6-4）</p> <p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\2d24ad8887c6a9cc75e02c9a49e83ed3.png\"/></p> <p>图6-3</p> <p></p> <p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\b24b72781c212e2eaae1af43ad6e07e3.png\"/></p> <p>图6-4</p> </li><li> <p>axios中其实已经提供了获取文件上传和下载进度的事件，这里我使用的是原生ajax（axios雷同，只需要修改请求方法）。</p> <p></p> <p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\3e5c3669e5a794ab3ed3e7cf4524213e.png\"/></p> <p>图6-5</p> </li></ul>\n<p><strong>优点</strong></p>\n<ul><li> <p>可以下载txt、png、pdf等类型文件</p> </li><li> <p>可以在header中携带token做鉴权操作</p> </li><li> <p>可以获取文件下载进度</p> </li><li> <p>可以判断接口是否返回成功</p> </li></ul>\n<p><strong>缺点</strong></p>\n<ul><li> <p>兼容性问题，IE10以下不可用，注意Safari浏览器,官网给出 <code>Safari has a serious issue with blobs that are of the type application/octet-stream</code></p> </li><li> <p>将后端返回的文件流全部获取后才会下载</p> </li></ul>\n<h3>七、ajax下载（<code>Data URL - base64编码后的url</code>）</h3>\n<pre><code class=\"language-javascript\">&lt;body&gt;\n  &lt;button onclick=\"downLoadAjaxEvt('get', 'http://192.168.66.183:13666/download?name=HAP.pdf')\"&gt;ajax下载(base64)&lt;/button&gt;\n  &lt;script&gt;\n    function downloadEvt(url, fileName = '未知文件') {\n      const el = document.createElement('a');\n      el.style.display = 'none';\n      el.setAttribute('target', '_blank');\n      /**\n       * download的属性是HTML5新增的属性\n       * href属性的地址必须是非跨域的地址，如果引用的是第三方的网站或者说是前后端分离的项目(调用后台的接口)，这时download就会不起作用。\n       * 此时，如果是下载浏览器无法解析的文件，例如.exe,.xlsx..那么浏览器会自动下载，但是如果使用浏览器可以解析的文件，比如.txt,.png,.pdf....浏览器就会采取预览模式\n       * 所以，对于.txt,.png,.pdf等的预览功能我们就可以直接不设置download属性(前提是后端响应头的Content-Type: application/octet-stream，如果为application/pdf浏览器则会判断文件为 pdf ，自动执行预览的策略)\n       */\n      fileName &amp;&amp; el.setAttribute('download', fileName);\n      el.href = url;\n      console.log(el);\n      document.body.appendChild(el);\n      el.click();\n      document.body.removeChild(el);\n    };\n​\n    // 根据header里的contenteType转换请求参数\n    function transformRequestData(contentType, requestData) {\n      requestData = requestData || {};\n      if (contentType.includes('application/x-www-form-urlencoded')) {\n        // formData格式：key1=value1&amp;key2=value2，方式二：qs.stringify(requestData, {arrayFormat: 'brackets'}) -- {arrayFormat: 'brackets'}是对于数组参数的处理\n        let str = '';\n        for (const key in requestData) {\n          if (Object.prototype.hasOwnProperty.call(requestData, key)) {\n            str += `${key}=${requestData[key]}&amp;`;\n          }\n        }\n        return encodeURI(str.slice(0, str.length - 1));\n      } else if (contentType.includes('multipart/form-data')) {\n        const formData = new FormData();\n        for (const key in requestData) {\n          const files = requestData[key];\n          // 判断是否是文件流\n          const isFile = files ? files.constructor === FileList || (files.constructor === Array &amp;&amp; files[0].constructor === File) : false;\n          if (isFile) {\n            for (let i = 0; i &lt; files.length; i++) {\n              formData.append(key, files[i]);\n            }\n          } else {\n            formData.append(key, files);\n          }\n        }\n        return formData;\n      }\n      // json字符串{key: value}\n      return Object.keys(requestData).length ? JSON.stringify(requestData) : '';\n    }\n    /**\n     * ajax实现文件下载、获取文件下载进度\n     * @param {String} method - 请求方法get/post\n     * @param {String} url\n     * @param {Object} [params] - 请求参数，{name: '文件下载'}\n     * @param {Object} [config] - 方法配置\n     */\n     function downLoadAjaxEvt(method = 'get', url, params, config) {\n      const _method = method.toUpperCase();\n      const _config = Object.assign({\n        contentType: _method === 'GET' ? 'application/x-www-form-urlencoded' : 'application/json',  // 请求头类型\n        fileName: '未知文件',                                       // 下载文件名(必填，若为空，下载下来都是txt格式)\n        async: true,                                               // 请求是否异步-true异步、false同步\n        token: 'token'                                             // 用户token\n      }, config);\n​\n      const queryParams = transformRequestData(_config.contentType, params);\n      const _url = `${url}${_method === 'GET' &amp;&amp; queryParams ? '?' + queryParams : ''}`;\n​\n      const ajax = new XMLHttpRequest();\n      ajax.open(_method, _url, _config.async);\n      ajax.setRequestHeader('Authorization', _config.token);\n      ajax.setRequestHeader('Content-Type', _config.contentType);\n      // responseType若不设置，会导致下载的文件可能打不开\n      ajax.responseType = 'blob';\n      // 获取文件下载进度\n      ajax.addEventListener('progress', (progress) =&gt; {\n        const percentage = ((progress.loaded / progress.total) * 100).toFixed(2);\n        const msg = `下载进度 ${percentage}%...`;\n        console.log(msg);\n      });\n      ajax.onload = function () {\n        if (this.status === 200 || this.status === 304) {\n          // 通过FileReader去判断接口返回是json还是文件流\n          const fileReader = new FileReader();\n          fileReader.readAsDataURL(this.response);\n          fileReader.onload = () =&gt; {\n            if (this.getResponseHeader('content-type').includes('application/json')) {\n              alert('服务器出现问题，请联系管理员');\n            } else {\n              // 两种解码方式，区别自行百度: decodeURIComponent/decodeURI（主要获取后缀名，否则某些浏览器会一律识别为txt，导致下载下来的都是txt）\n              const _fileName = decodeURIComponent((this.getResponseHeader('content-disposition') || '; filename=\"未知文件\"').split(';')[1].trim().slice(9));\n              // 也可以用FileSaver（需提前引入https://github.com/eligrey/FileSaver.js）: saveAs(fileReader.result, _fileName);\n              downloadEvt(fileReader.result, _fileName);\n            }\n          }\n        } else {\n          alert('服务器出现问题，请联系管理员');\n        }\n      };\n      // send(string): string：仅用于 POST 请求\n      ajax.send(queryParams);\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n​</code></pre>\n<ul><li> <p><code>fileSaver</code> 网上介绍很多，可以自己百度下</p> </li></ul>\n<p><strong>优点</strong></p>\n<ul><li> <p>可以下载txt、png、pdf等类型文件</p> </li><li> <p>可以在header中携带token做鉴权操作</p> </li><li> <p>可以获取文件下载进度</p> </li><li> <p>可以判断接口是否返回成功</p> </li></ul>\n<p><strong>缺点</strong></p>\n<ul><li> <p>兼容性问题，IE10以下不可用</p> </li><li> <p>将后端返回的文件流全部获取后才会下载</p> </li></ul>\n<h3>八、大文件下载注意点</h3>\n<ul><li> <p><code>fileSaver</code> 批量下载时，总量不超过2G可以用下这个，但是每个浏览器允许下载的最大文件不一样~</p> <p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\0e8acdf25030a049471b897384b0e0a2.png\"/></p> <p>图8-1</p> </li><li> <p>ajax下载 如果后端需要对下载接口做token鉴权，此时需要使用ajax获取文件流（第六、七点），可以了解下<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fblog.csdn.net%2Fwiki_Wei%2Farticle%2Fdetails%2F85325926\" title=\"ajax文件下载原理\">ajax文件下载原理</a>。 简单来说，文件下载依赖浏览器特性。前端获取到服务器端生成的字节流，此时数据是存在于<strong>js的内存中</strong>的，是不可以直接保存在本地的，利用<code>Blob</code>对象和<code>window.URL.createObjectURL</code>对象生成一个虚拟的URL地址，然后在利用浏览器的特性进行下载。 因此对于ajax下载<strong>大文件</strong>时，会出现<strong>浏览器崩溃</strong>情况，此时可以考虑使用<strong>链接直接下载</strong>或使用<strong>分片下载</strong></p> <p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\5888be01b4eaf7f569ae953d27d94b19.png\"/></p> <p>图8-2</p> </li><li> <p>链接下载 链接下载需要后端一边去下载要打包的文件，一边把打包好的东西写入这个链接。存在的问题是，如果文件很大，那么这个链接需要一直保持，相当于这个接口一直开着没有结束；而且一旦中间出了什么问题，已经下载的东西也全部废了，因此推荐使用<strong>分片下载</strong>。</p> </li></ul>\n</div>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-03-12 09:44:45", "summary": "一、标签下载标签下载未知文件的属性是新增的属性属性的地址必须是非跨域的地址，如果引用的是第三方的网站或者说是前后端分离的项目调用后台的接口，这时就会不起作用。此时，如果是下载浏览器无法解析的文件，例如"}