{"blogid": "126687482", "writerAge": "码龄12年", "writerBlogNum": "372", "writerCollect": "612", "writerComment": "70", "writerFan": "1487", "writerGrade": "5级", "writerIntegral": "4321", "writerName": "biyezuopin", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126687482.jpg", "writerRankTotal": "4589", "writerRankWeekly": "2785", "writerThumb": "396", "writerVisitNum": "98351", "blog_read_count": "452", "blog_time": "于 2022-09-04 11:47:35 发布", "blog_title": "基于Bootstrap+Django+Python的点菜信息管理系统", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>目 录<br/> 1 引言 1<br/> 1.1课题背景 1<br/> 1.2选题意义 1<br/> 2 系统可行性分析 1<br/> 2.1 技术可行性分析 1<br/> 2.2 经济可行性分析 1<br/> 2.3 操作可行性分析 2<br/> 3系统分析 2<br/> 3.1 系统功能分析 2<br/> 3.1.1 管理员模块 2<br/> 3.1.2 用户模块 3<br/> 3.1.3 后厨模块 4<br/> 3.2 系统业务流程分析 4<br/> 3.3 系统数据流程分析 5<br/> 3.4 数据字典 6<br/> 4 系统设计 9<br/> 4.1 功能结构设计 9<br/> 4.2 数据库设计 9<br/> 4.2.1 数据库概念结构设计 9<br/> 4.2.2 将E-R图转换为关系模型 11<br/> 4.3.3 关系模式的规范化 12<br/> 4.3.4 数据库表设计 13<br/> 4.3.5 数据库表中约束设计 15<br/> 5 系统实现 16<br/> 5.1 顾客页面实现 16<br/> 5.2 后厨页面实现 18<br/> 5.3 管理员页面实现 19<br/> 6 总结 22<br/> 参考文献 24<br/> 2 系统可行性分析<br/> 2.1 技术可行性分析<br/> 点菜信息管理系统将Sqlite作为数据库，Sqlite作为开源的关系型数据库，并且具有成本低、体积小、速度快等特点。整个系统是基于Django框架搭建的，Django框架本身就已经拥有了很多基础性的功能，不需要再去重复的完成大量的编码工作，提高了程序的规范性和代码的重用性。采用Bootstrap4 + jQuery作为前端的技术支持，后台使用Python面向对象语言。由此可见，实现点菜信息管理系统在技术上是完全可行的，并且可以完成点菜信息管理系统所需要的基本功能。<br/> 2.2 经济可行性分析<br/> 从目前的社会现状来看传统的点菜模式不仅浪费时间，效率低下，而且特别耗费成本与人力。于此不同，使用点菜信息管理系统能大大降低人力的成本这样就节省了相对应的成本开销，避免人员的冗余，并且开发系统使用的工具和技术都是开源的，投入该系统的成本并不高。所以对于餐馆来说开发一个点菜信息管理系统在当前的资金投入和使用该系统降低的成本上是可以接受的，由此来看此系统从经济上来看是可行的。<br/> 2.3 操作可行性分析<br/> 该系统使用的技术都是目前大众普遍使用的，并且操作简单，业务逻辑流程条例清晰，使用方便，并且用户使用起来上手快，容易理解，不需要理解太深的东西。由此来看，该系统从操作上来看是可行的。<br/> 3系统分析<br/> 3.1 系统功能分析<br/> 该系统为点菜管理信息系统。网上点菜系统是一种可以自主选择、个性化、便捷化、特色化的点餐模式，它的大力推广使用为餐厅节约了成本，同时也解决了消费者在传统点菜时存在的不少麻烦。通过对系统的需求进行分析得出，该系统的功能模块分为三种，分别是管理员模块、用户模块、后厨模块，并且各个用户模块下对应着各自的功能实现。<br/> 3.1.1 管理员模块<br/> （1）管理员登录：对于已经存在管理员可进行登录。<br/> （2）订单信息查询：管理员可以查询系统内所有存在订单。<br/> （3）职工信息管理：管理员可以登录该系统对已经注册的职工个人信息进行增加、删除、改动、查找等操作。<br/> （4）餐桌信息管理：管理员可以对该系统对已经存在的餐桌信息进行增加、删除、改动、查找等操作。本文转载自http://www.biyezuopin.vip/onews.asp?id=15595<br/> （5）菜品信息管理：管理员可以对该系统对已经存在的菜品信息进行增加、删除、改动、查找等操作。</p>\n<pre><code>from django.shortcuts import render, redirect\nfrom django.http import HttpResponse\nfrom .models import Food, Foodtype, Order, OrderItem, Staff, Staff_Table\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.contrib.auth.decorators import login_required\nfrom django.db import connection\nfrom . import forms\nimport json\nimport datetime\n\n#\n@csrf_exempt\ndef OrderHome(request):\n    if request.method == \"GET\":\n        foodList = Food.objects.all()\n        foodTypeList = Foodtype.objects.all()\n        tableList = Staff_Table.objects.all()\n        return render(\n            request,\n            'OrderHome.html',\n            {\n                'foodList': foodList,\n                'foodTypeList': foodTypeList,\n                'tableList': tableList,\n            }\n        )\n    elif request.method == \"POST\":\n        foodList = json.loads(request.POST.get('foodList'))\n        table_id = request.POST.get('table')\n\n        # 创建订单 填写基本信息\n        new_order = Order(table_id=table_id, is_pay=False)\n        staff_in_charge = Staff_Table.objects.get(pk=table_id).staff\n        new_order.staff = staff_in_charge   # 当前桌子的负责人\n        new_order.save()\n\n        # 先 save 再获取 ID\n        order_id = new_order.ID\n        food_amount = 0\n        total_price = 0\n\n        for food in foodList:\n            curFood = Food.objects.get(pk=food['id'])\n            price = curFood.price\n            sum_price = price * food['amount']\n            curFood.amount -= food['amount']\n            curFood.save()\n\n            food_amount += food['amount']\n            total_price += sum_price\n\n            OrderItem.objects.create(\n                orderID=new_order,\n                foodID=curFood,\n                amount=food['amount'],\n                sum_price=sum_price\n            )\n        # 订单的物品总数、总价\n        new_order.food_amount = food_amount\n        new_order.total_price = total_price\n        new_order.save()\n\n        return HttpResponse(json.dumps({\n            'order_id': order_id\n        }))\n\n\n# 账单详情页\ndef QueryOrder(request, order_id):\n    try:\n        order = Order.objects.get(pk=order_id)\n    except:\n        return HttpResponse('无此订单！')\n\n    foodList = Food.objects.filter(orderitem__orderID__ID=order_id)\n\n    with connection.cursor() as cursor:\n        SELECT_COL = 'OrderSystem_food.ID ID, OrderSystem_food.title title, OrderSystem_orderitem.amount amount'\n        SELECT_COL += ', OrderSystem_orderitem.sum_price '\n        SELECT_COL += ', OrderSystem_orderitem.start_cook_time '\n        SELECT_COL += ', OrderSystem_orderitem.end_cook_time '\n        SELECT_FROM = 'OrderSystem_food, OrderSystem_orderitem '\n        SELECT_WHERE = 'OrderSystem_food.ID=OrderSystem_orderitem.foodID_id '\n        SELECT_WHERE += ' and OrderSystem_orderitem.orderID_id={0}'.format(\n            order_id)\n        cursor.execute(\n            f'select {SELECT_COL} from {SELECT_FROM} where {SELECT_WHERE}')\n        foodJsonList = dictfetchall(cursor)#封装成字典\n\n    return render(request, 'QueryOrder.html', {\n        'order': order,\n        'foodList': foodJsonList,\n    })\n\n\n# 待结账页面\ndef CheckUnpaidOrder(request):\n    # 查询当前未结账订单\n    orderList = []\n    with connection.cursor() as cursor:\n        SELECT_COL = 'ID, create_time, table_id, total_price'\n        SELECT_FROM = 'OrderSystem_order'\n        SELECT_WHERE = 'is_pay=0'   # 0 false\n        SELECT = f'select {SELECT_COL} from {SELECT_FROM} where {SELECT_WHERE}'\n        cursor.execute(SELECT)\n        orderList = dictfetchall(cursor)\n        print(orderList)\n\n    return render(request, 'CheckUnpaidOrder.html', {\n        'orderList': orderList,\n    })\n\n\n# 结账\n@csrf_exempt\ndef CheckOut(request):\n    if request.method == \"POST\":\n        order_list = json.loads(request.POST.get('order_list'))\n        print(order_list)\n        for order_data in order_list:\n            print(order_data)\n            order_id = order_data['order_id']\n            is_pay = order_data['is_pay']\n\n            if is_pay:\n                order = Order.objects.get(pk=order_id)\n                if order.is_pay == True:\n                    print(\"已经支付！\")\n                    return HttpResponse(json.dumps({\n                        'status': 'ALREADY_PAY'\n                    }))\n\n                order.is_pay = True\n                order.pay_time = datetime.datetime.now()\n                order.save()\n            else:\n                return HttpResponse(json.dumps({\n                    'status': 'NO_PAY'\n                }))\n\n        return HttpResponse(json.dumps({\n            'status': 'OK'\n        }))\n\n\n@login_required\ndef manage(request):\n    staffList = Staff.objects.all()\n    # (餐桌号 + 餐桌名字 + 负责人ID + 负责人姓名)\n    tableInfoList = []\n    with connection.cursor() as cursor:\n        SELECT_COL = ' distinct {0}_staff_table.ID table_id '#桌子id\n        SELECT_COL += ', {0}_staff_table.name table_name '#桌子名字\n        SELECT_COL += ', {0}_staff.ID staff_id '\n        SELECT_COL += ', {0}_staff.name staff_name '\n        SELECT_COL = SELECT_COL.format('OrderSystem')\n\n        SELECT_FROM = '{0}_staff_table, {0}_staff '\n        SELECT_FROM = SELECT_FROM.format('OrderSystem')\n\n        SELECT_WHERE = '{0}_staff.ID = {0}_staff_table.staff_id '\n        SELECT_WHERE = SELECT_WHERE.format('OrderSystem')\n\n        SELECT_SQL = f'select {SELECT_COL} from {SELECT_FROM} where {SELECT_WHERE}'\n        cursor.execute(SELECT_SQL)\n\n        tableInfoList = dictfetchall(cursor)\n\n    return render(request, 'manage.html', {\n        'tableInfoList': tableInfoList,\n        'staffList': staffList,\n        'user':request.user,\n    })\n\n\n@csrf_exempt\ndef getServingTableList(request):\n     # (餐桌号 + 餐桌名字 + 负责人ID + 负责人姓名)\n    servingTableList = []\n    with connection.cursor() as cursor:\n        SELECT_COL = 'distinct {0}_order.table_id table_id '\n        SELECT_COL = SELECT_COL.format('OrderSystem')\n\n        SELECT_FROM = '{0}_order '\n        SELECT_FROM = SELECT_FROM.format('OrderSystem')\n\n        SELECT_WHERE = '{0}_order.is_pay = 0 '  # false 0\n        SELECT_WHERE = SELECT_WHERE.format('OrderSystem')\n\n        SELECT_SQL = f'select {SELECT_COL} from {SELECT_FROM} where {SELECT_WHERE}'\n        SELECT_SQL += 'order by table_id'\n        cursor.execute(SELECT_SQL)\n\n        servingTableInfoList = dictfetchall(cursor)\n        for tableInfo in servingTableInfoList:\n            servingTableList.append(tableInfo['table_id'])\n\n    return HttpResponse(json.dumps({\n        'servingTableList': servingTableList,\n    }))\n\n\n@csrf_exempt\ndef getOrderItemList(request):\n    if request.method == \"POST\":\n        # 没有指定 order_id 就返回所有 order_item\n        order_id = request.POST.get('order_id')\n\n        with connection.cursor() as cursor:\n            SELECT_COL = '{0}orderitem.orderID_id order_id '\n            SELECT_COL += ',{0}order.table_id table_id '\n            SELECT_COL += ',{0}orderitem.foodID_id food_id '\n            SELECT_COL += ',{0}food.title food_name '\n            SELECT_COL += ',{0}orderitem.amount food_amount '\n            SELECT_COL += ',{0}orderitem.status status '\n            SELECT_COL = SELECT_COL.format('OrderSystem_')\n\n            SELECT_FROM = '{0}orderitem, {0}food, {0}order '\n            SELECT_FROM = SELECT_FROM.format('OrderSystem_')\n\n            SELECT_WHERE = 'food_id = {0}food.ID '\n            SELECT_WHERE += ' and {0}order.ID = order_id '\n            SELECT_WHERE += ' and {0}order.is_pay = 0 '\n            SELECT_WHERE += (' and order_id=' +\n                             order_id) if order_id != None else ''\n            SELECT_WHERE = SELECT_WHERE.format('OrderSystem_')\n\n            SELECT_SQL = f'select {SELECT_COL} from {SELECT_FROM} where {SELECT_WHERE}'\n            SELECT_SQL += 'order by table_id'\n            cursor.execute(SELECT_SQL)\n\n            orderItemList = dictfetchall(cursor)\n\n            return HttpResponse(json.dumps(orderItemList))\n\n\n# 更新餐桌表 中的 staff\n@csrf_exempt\ndef set_staff_charge_table(request):\n    if request.method == \"POST\":\n        table_id = request.POST.get(\"table_id\")\n        staff_id = request.POST.get(\"staff_id\")\n        try:\n            Staff_Table.objects.filter(pk=table_id).update(staff_id=staff_id)\n            return HttpResponse(json.dumps({\n                'status': \"OK\"\n            }))\n        except:\n            return HttpResponse(json.dumps({\n                'status': \"FAIL\"\n            }))\n\n\n# 上菜\n@csrf_exempt\ndef delive_food(request):\n    if request.method == \"POST\":\n        order_id = request.POST.get(\"order_id\")\n        food_id = request.POST.get(\"food_id\")\n        OrderItem.objects.filter(\n            orderID_id=order_id, foodID_id=food_id).update(status=3)\n        try:\n            return HttpResponse(json.dumps({\n                'status': \"OK\"\n            }))\n        except:\n            return HttpResponse(json.dumps({\n                'status': \"FAIL\"\n            }))\n\n\n# 后厨\n@login_required#标识一个视图可以被跨域访问\ndef food_supplier(request):\n    return render(request, 'FoodSupplier.html')\n\n\n# 后厨接口 接单or完成\n@csrf_exempt\ndef cook(request):\n    if request.method == \"POST\":\n        OP = request.POST.get(\"OP\")\n        order_id = request.POST.get(\"order_id\")\n        food_id = request.POST.get(\"food_id\")\n\n        orderItem = OrderItem.objects.filter(\n            orderID_id=order_id, foodID_id=food_id)\n\n        target_status = 1 if OP == \"take_order\" else 2\n\n        if(OP == \"take_order\"):\n            orderItem.update(status=1)\n            orderItem.update(start_cook_time=datetime.datetime.now())\n        else:\n            orderItem.update(status=2)\n            orderItem.update(end_cook_time=datetime.datetime.now())\n\n        orderItem.save()\n\n        return HttpResponse(json.dumps({\n            'status': 'OK',\n        }))\n\n\ndef dictfetchall(cursor):\n    '''辅助函数 数据库查询结果转换成 json/dict'''\n    columns = [col[0] for col in cursor.description]\n    return [\n        dict(zip(columns, row))\n        for row in cursor.fetchall()\n    ]\n\n\n###############################################################\n#\n#    管理\n#\n###############################################################\n\n\ndef orders(request):\n    orders = Order.objects.all()\n    return render(request, 'manage/orders.html', {\n        'orders': orders,\n    })\n@csrf_exempt\ndef staffs(request):\n    if request.method==\"GET\":\n        form = forms.StaffForm()\n        staffs = Staff.objects.all()\n        return render(request, 'manage/staffs.html', {\n            'form': form,\n            'staffs': staffs,\n        })\n    elif request.method == \"POST\":\n        name=request.POST.get('name')\n        SELECT_COL = '*'\n        SELECT_FROM='OrderSystem_staff'\n        SELECT_WHERE='OrderSystem_staff.name like'+ \"'%\"+name+ \"%'\"\n        SELECT_SQL = f'select {SELECT_COL} from {SELECT_FROM} where {SELECT_WHERE}'\n        print(SELECT_SQL,\"SQL\")\n        with connection.cursor() as cursor:\n            cursor.execute(SELECT_SQL)\n            staffs = dictfetchall(cursor)\n        print(staffs, \"SQL_res\")\n        form = forms.StaffForm()\n        #staffs = Staff.objects.all()\n        return render(request, 'manage/staffs.html', {\n            'form': form,\n            'staffs': staffs,\n        })\n        # form_back = forms.StaffForm(request.POST)\n        # if form_back.is_valid():\n        #     form_back.save()\n        #     return HttpResponse(json.dumps({\n        #         'status': 'OK',\n        #     }))\n        # else:\n        #     print(form_back.errors.as_data())\n        #     print(form_back.errors.as_json())\n        #     print(form_back.errors.as_text())\n        #     print(form_back.errors.as_ul())\n        #     return HttpResponse(json.dumps({\n        #         'status': 'FAIL',\n        #     }))\n@csrf_exempt\ndef tables(request):\n    print(request.body)\n    print(request.method,\"method\")\n    if request.method == \"GET\":\n        form = forms.Staff_TableForm()\n        with connection.cursor() as cursor:\n            SELECT_COL = ' distinct {0}_staff_table.ID table_id '\n            SELECT_COL += ', {0}_staff_table.name table_name '\n            SELECT_COL += ', {0}_staff.ID staff_id '\n            SELECT_COL += ', {0}_staff.name staff_name '\n            SELECT_COL = SELECT_COL.format('OrderSystem')\n\n            SELECT_FROM = '{0}_staff_table, {0}_staff '\n            SELECT_FROM = SELECT_FROM.format('OrderSystem')\n\n            SELECT_WHERE = '{0}_staff.ID = {0}_staff_table.staff_id '\n            SELECT_WHERE = SELECT_WHERE.format('OrderSystem')\n\n            SELECT_SQL = f'select {SELECT_COL} from {SELECT_FROM} where {SELECT_WHERE}'\n            cursor.execute(SELECT_SQL)\n\n            tables = dictfetchall(cursor)\n            #print(tables,\"table\")\n        with connection.cursor() as cursor:\n\n\n\n            cursor.execute(\n                'select ID staff_id, name staff_name from OrderSystem_staff;')\n            staffs = dictfetchall(cursor)\n        print('GET')\n        #print(staffs,\"staffs\")\n        return render(request, 'manage/tables.html', {\n            'form': form,\n            'tables': tables,\n            'staffs': staffs,\n        })\n    else:\n        name = request.POST.get('table_name')\n\n\n        with connection.cursor() as cursor:\n            SELECT_COL = ' distinct {0}_staff_table.ID table_id '\n            SELECT_COL += ', {0}_staff_table.name table_name '\n            SELECT_COL += ', {0}_staff.ID staff_id '\n            SELECT_COL += ', {0}_staff.name staff_name '\n            SELECT_COL = SELECT_COL.format('OrderSystem')\n\n            SELECT_FROM = '{0}_staff_table, {0}_staff '\n            SELECT_FROM = SELECT_FROM.format('OrderSystem')\n\n            SELECT_WHERE = '{0}_staff.ID = {0}_staff_table.staff_id AND {0}_staff_table.name like '\n            SELECT_WHERE +=  \"'%\"+name+ \"%'\"\n            SELECT_WHERE = SELECT_WHERE.format('OrderSystem')\n\n            SELECT_SQL = f'select {SELECT_COL} from {SELECT_FROM} where {SELECT_WHERE}'\n            cursor.execute(SELECT_SQL)\n            print(SELECT_SQL, \"SQL\")\n            tables = dictfetchall(cursor)\n        print(tables, \"SQL_res\")\n        form = forms.Staff_TableForm()\n        # staffs = Staff.objects.all()\n        return render(request, 'manage/tables.html', {\n            'form': form,\n            'tables': tables,\n           # 'staffs': staffs,\n        })\n@csrf_exempt\ndef add_tables(request):\n    if request.method == 'GET':\n        form = forms.Staff_TableForm()\n        table=Staff_Table.objects.all()\n        return render(request,'manage/add_tables.html',{\n            'form': form,\n        })\n    else:\n        form_back = forms.Staff_TableForm(request.POST)\n        if form_back.is_valid():\n            data = form_back.cleaned_data\n            form_back.save()\n            print(\"OK\")\n            return redirect('/manage/tables')\n        else:\n            print(form_back.errors.as_data())\n            print(form_back.errors.as_json())\n            print(form_back.errors.as_text())\n            print(form_back.errors.as_ul())\n            return HttpResponse(json.dumps({\n               'Fail To Add': 'The table number already exists, please modify it',\n            }),)\ndef update_tables(request):\n    if request.method == 'GET':\n        form = forms.Staff_TableForm()\n        ID = request.GET.get('id')\n        tables_obj = Staff_Table.objects.get(ID=ID)\n        return render(request, 'manage/update_tables.html', {\n            'form': form,\n            'table': tables_obj\n        })\n    else:\n        ID = request.POST.get('ID')\n        print(ID,'ID')\n        table_obj = Staff_Table.objects.get(ID=ID)\n        table_obj_all = Staff_Table.objects.all()\n        table_obj.ID = request.POST.get('ID')\n        table_obj.name = request.POST.get('name')\n        table_obj.staff_id = request.POST.get('staff')\n        table_obj.save()\n        return redirect('/manage/tables')\n\n\n\n\n\n@csrf_exempt\ndef foods(request):\n    if request.method == \"GET\":\n        foods = Food.objects.all()\n        food_types = Foodtype.objects.all()\n        food_form = forms.FoodForm()\n        food_type_form = forms.FoodtypeForm()\n        return render(request, 'manage/foods.html', {\n            'food_form': food_form,\n            'food_type_form': food_type_form,\n            'foods': foods,\n            'food_types': food_types,\n        })\n    elif request.method == \"POST\":\n        try:\n            name = request.POST.get('foods_name')\n            SELECT_COL = '*'\n            SELECT_FROM = 'OrderSystem_food'\n            SELECT_WHERE = 'OrderSystem_food.title like ' + \"'%\"+name+ \"%'\"\n\n            SELECT_SQL = f'select {SELECT_COL} from {SELECT_FROM} where {SELECT_WHERE}'\n\n            food_types = Foodtype.objects.all()\n            print(SELECT_SQL, \"SQL\")\n\n            with connection.cursor() as cursor:\n                cursor.execute(SELECT_SQL)\n                foods = dictfetchall(cursor)\n        except:\n            name=request.POST.get('foods_type_name')\n            SELECT_COL = '*'\n            SELECT_FROM = 'OrderSystem_foodtype'\n            SELECT_WHERE = 'OrderSystem_foodtype.name like' + \"'%\"+name+ \"%'\"\n            SELECT_SQL = f'select {SELECT_COL} from {SELECT_FROM} where {SELECT_WHERE}'\n\n            foods = Food.objects.all()\n            print(SELECT_SQL, \"SQL\")\n            with connection.cursor() as cursor:\n                cursor.execute(SELECT_SQL)\n                food_types = dictfetchall(cursor)\n        print(foods, \"SQL_res\")\n\n\n        food_form = forms.FoodForm()\n        food_type_form=forms.FoodtypeForm\n        # staffs = Staff.objects.all()\n        return render(request, 'manage/foods.html', {\n            'food_form': food_form,\n            'food_type_form': food_type_form,\n            'foods': foods,\n            'food_types': food_types,\n        })\n@csrf_exempt\ndef add_foodtype(request):\n    if request.method == 'GET':\n        food_type_form = forms.FoodtypeForm\n        return render(request,'manage/add_foodtype.html',{\n            'food_type_form': food_type_form,\n        })\n    else:\n\n        form_foodtype = forms.FoodtypeForm(request.POST)\n        if form_foodtype.is_valid():\n            data = form_foodtype.cleaned_data\n            form_foodtype.save()\n            return redirect('/manage/foods')\ndef update_foodtype(request):\n    if request.method == 'GET':\n        food_type_form = forms.FoodtypeForm\n        ID = request.GET.get('id')\n        foodtype_obj = Foodtype.objects.get(ID=ID)\n        return render(request,'manage/update_foodtype.html',{\n            'food_type_form': food_type_form,\n            'foodtype_obj':foodtype_obj\n        })\n    else:\n        ID = request.POST.get('ID')\n        foodtype_obj = Foodtype.objects.get(ID=ID)\n        foodtype_obj.name=request.POST.get('name')\n        foodtype_obj.save()\n        return redirect('/manage/foods')\n\n@csrf_exempt\ndef update_foods(request):\n    if request.method == 'GET':\n        ID = request.GET.get('id')\n        food_form = forms.FoodForm()\n        foods_obj = Food.objects.get(ID=ID)\n        return render(request, 'manage/update_foods.html', {\n            'foods_obj': foods_obj,\n            'food_form': food_form,\n        })\n    else:\n        ID = request.POST.get('ID')\n        foods_obj = Food.objects.get(ID=ID)\n        foods_obj.title = request.POST.get(\"title\")\n        foods_obj.amount = request.POST.get(\"amount\")\n        foods_obj.price = request.POST.get(\"price\")\n        foods_obj.cost_time = request.POST.get(\"cost_time\")\n        foods_obj.foodType_id = request.POST.get(\"foodType\")\n        foods_obj.save()\n        return redirect('/manage/foods')\ndef add_foods(request):\n    if request.method == 'GET':\n        food_form = forms.FoodForm()\n        return render(request, 'manage/add_foods.html', {\n            'food_form': food_form,\n        })\n\n    else:\n        form_food = forms.FoodForm(request.POST)\n        if form_food.is_valid():\n            data = form_food.cleaned_data\n            form_food.save()\n            return redirect('/manage/foods')\n\n\n@csrf_exempt\n#员工 增加\ndef add_staffs(request):\n    if request.method==\"GET\":\n        return render(request,'manage/add_staffs.html')\n    elif request.method == \"POST\":\n        form_back = forms.StaffForm(request.POST)\n        import re\n\n       # print(,\"phone\")\n        #print(form_back,\"citizenID\")\n        ret = re.match(r\"^1[35678]\\d{9}$\", form_back.data['phone'])\n        if ret:\n            print(\"匹配成功\")\n            r = r'^([1-9]\\d{5}[12]\\d{3}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])\\d{3}[0-9xX])$'\n            ret = re.match(r, form_back.data['citizenID'])\n            if ret:\n                if form_back.is_valid():\n                    form_back.save()\n\n                    form = forms.StaffForm()\n                    staffs = Staff.objects.all()\n                    return render(request, 'manage/staffs.html', {\n                        'form': form,\n                        'staffs': staffs,\n                    })\n                else:\n                    print(form_back.errors.as_data())\n                    print(form_back.errors.as_json())\n                    print(form_back.errors.as_text())\n                    print(form_back.errors.as_ul())\n                    return HttpResponse(json.dumps({\n                        'status': 'FAIL',\n                    }))\n            else:\n                return HttpResponse(json.dumps({\n                    'citizenID': 'error!',\n                }))\n        else:\n            return HttpResponse(json.dumps({\n                'phone': 'error!',\n            }))\n\n\n\n\n@csrf_exempt\n#员工 删除\ndef dark(request):\n    if request.method == \"POST\":\n        target = request.POST\n\n        table = target['table']\n        SQL = ''\n        if target['double'] == 'false':\n            ID = target['id']\n            SQL += f'delete from OrderSystem_{table} where ID={ID}'\n        elif target['double'] == 'true':\n            foodID_id = target['foodID_id']\n            orderID_id = target['orderID_id']\n            SQL += f'delete from OrderSystem_{table} where foodID_id={foodID_id} and orderID_id={orderID_id}'\n\n        print('========================================================================')\n        print(SQL)\n        print('========================================================================')\n\n        try:\n            with connection.cursor() as cursor:\n                cursor.execute(SQL)\n                print(\"True\")\n                return HttpResponse(json.dumps({\n                    'status': 'OK',\n                }))\n        #     return render(request, 'manage/staffs.html', {\n        #     'status': json.dumps([1,1])\n        # })\n        except:\n            print(\"False\")\n            # return render(request, 'manage/staffs.html', {\n            #     'status': json.dumps([0,0])\n            # })\n            return HttpResponse(json.dumps({\n               'status': 'FAIL',\n           }))\n#员工更新\n@csrf_exempt\ndef update_staffs(request):\n    if request.method=='GET':\n        ID=request.GET.get('id')\n        staffs_obj=Staff.objects.get(ID=ID)\n        return render(request, 'manage/update_staffs.html', {\n            'staffs': staffs_obj,\n        })\n    else :\n        ID=request.POST.get('ID')\n        citizenID=request.POST.get('citizenID')\n        name = request.POST.get('name')\n        gender = request.POST.get('gender')\n        born_date = request.POST.get('born_date')\n        phone = request.POST.get('phone')\n\n\n\n\n\n\n        address = request.POST.get('address')\n        staff_obj=Staff.objects.get(ID=ID)\n\n        staff_obj.name=name\n        staff_obj.citizenID = citizenID\n        staff_obj.gender = gender\n        staff_obj.born_date = born_date\n        staff_obj.phone = phone\n        staff_obj.address = address\n\n        import re\n\n        # print(,\"phone\")\n        # print(form_back,\"citizenID\")\n        ret = re.match(r\"^1[35678]\\d{9}$\", phone)\n        if ret:\n            print(\"匹配成功\")\n            r = r'^([1-9]\\d{5}[12]\\d{3}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])\\d{3}[0-9xX])$'\n            ret = re.match(r, citizenID)\n            if ret:\n               staff_obj.save()\n               return redirect('/manage/staffs')\n            else:\n                return HttpResponse(json.dumps({\n                    'citizenID': 'error!',\n                }))\n        else:\n            return HttpResponse(json.dumps({\n                'phone': 'error!',\n            }))\n\n\n\n           # staffs = dictfetchall(cursor)\n\n\n\n    #return render(request, 'manage/update_staffs.html')\n    #return render(request,'update_staffs.html')\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b225dae38f044a949c942140153ece4e.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4feb694f98f948ca9c80dde78b1f2469.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\85c735a0f7e84bc7afa150efc680f7ba.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7947777ad7c14bb1a03cc71c880e9cc3.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\264ad18955fa4b9bbde02285b408af0e.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2610575da5244088b37fccd135221a55.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\19e7afaa1f384b0e8343841738b4d0e3.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4f5c106d328c4e73939e418746391122.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\92fc86aefb524fe1af5debd04a071bb8.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e8d7451b98f046339edea8407c2d4053.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\785a258fe6fe49c48510f79381d16430.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0f13ae2b94c94b2aad7952527d6e7ae3.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 1, "php": 0, "time": "2022-09-04 11:47:35", "summary": "目录引言课题背景选题意义系统可行性分析技术可行性分析经济可行性分析操作可行性分析系统分析系统功能分析管理员模块用户模块后厨模块系统业务流程分析系统数据流程分析数据字典系统设计功能结构设计数据库设计数据"}