{"blogid": "126445737", "writerAge": "码龄163天", "writerBlogNum": "81", "writerCollect": "2746", "writerComment": "3091", "writerFan": "3590", "writerGrade": "6级", "writerIntegral": "7890", "writerName": "北极的三哈", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126445737.jpg", "writerRankTotal": "1807", "writerRankWeekly": "16", "writerThumb": "2703", "writerVisitNum": "649624", "blog_read_count": "23088", "blog_time": "已于 2022-08-21 16:07:12 修改", "blog_title": "【Python高级语法】——迭代器 （Iterator）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"iterator_0\"></a>迭代器<code>iterator</code></h1>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\55783803fb704b1fa9cc75a345ad5a9f.png\"/></p>\n<h2><a id=\"1_3\"></a>1.什么是迭代器</h2>\n<blockquote>\n<p>  迭代器是访问集合的一种方式，可以记住遍历位置的对象，迭代器从集合的第一个元素开始访问，直到所有的元素被访问完才结束，只能往往前，不能后退。</p>\n</blockquote>\n<p>可以直接作用于<code>for</code>循环的数据类型：</p>\n<ul><li> <p>一类是集合数据类型：如：<code>list</code>，<code>tuple</code>，<code>dict</code>，<code>set</code>，<code>str</code>等；</p> </li><li> <p>一类是<code>generator</code>，包括生成器和<code>yield</code>关键字的生成器函数<code>generator function</code>。</p> </li><li> <p>这些可以直接作用于<code>for</code>循环的对象统称为<code>可迭代对象</code>：<code>Iterable</code>.</p> </li></ul>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 元组</span>\nb <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 列表</span>\nc <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>  <span class=\"token comment\"># 空字典</span>\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 元组</span>\ns <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ns1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token boolean\">None</span><span class=\"token punctuation\">}</span>  <span class=\"token comment\"># 集合</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 空集合 &lt;class 'dict'&gt;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;class 'tuple'&gt;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 空集合 &lt;class 'set'&gt;</span>\n</code></pre>\n<h2><a id=\"2Iterable_27\"></a>2.<code>Iterable</code>可迭代对象判断</h2>\n<blockquote>\n<p>可以使用<code>instance()</code>判断一个对象是否是<code>Iterable</code>对象。</p>\n</blockquote>\n<p><code>instance()</code>函数</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">isinstance</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> A_tuple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown; restored from __doc__</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Return whether an object is an instance of a class or of a subclass thereof.\n    (返回一个对象是类的实例还是类的子类。)\n    \n    A tuple, as in ``isinstance(x, (A, B, ...))``, may be given as the target to\n    check against. This is equivalent to ``isinstance(x, A) or isinstance(x, B)\n    or ...`` etc.\n    \n    （一个元组，如' ' isinstance(x， (A, B，…))' '，可以被指定为目标\n\t核对。这相当于' ' isinstance(x, A)或isinstance(x, B)\n\tor ...`` etc.）\n    \"\"\"</span>\n    <span class=\"token keyword\">pass</span>\n</code></pre>\n<p><strong>代码实现：</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : iterable对象判断.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/20 22:09</span>\n\n\n<span class=\"token keyword\">from</span> collections<span class=\"token punctuation\">.</span>abc <span class=\"token keyword\">import</span> Iterable\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b85409eb574348569f4255b3a3647f44.png\"/></p>\n<blockquote>\n<p>  <code>⽣成器</code>不但可以作⽤于 <code>for</code> 循环，还可以被 <code>next()</code> 函数不断调⽤并返回下⼀个值，直到最后抛出 <code>StopIteration</code> 错误表示⽆法继续返回下⼀个值了。</p>\n</blockquote>\n<blockquote>\n<p>可以被<code>next()</code>函数调⽤并不断返回下⼀个值的对象称为<code>迭代器</code>：<code>Iterator</code>。</p>\n</blockquote>\n<blockquote>\n<p>  可以使⽤ <code>isinstance()</code> 判断⼀个对象是 否是<code>Iterator</code> 对象，这里就产生一个疑问了，生成器都是 <code>Iterator</code> 对象，那么 <code>list</code> 、 <code>dict</code> 、 <code>str</code> 是不是 <code>Iterator</code> ？为什么？。</p>\n</blockquote>\n<h2><a id=\"3Iterator_73\"></a>3.<code>Iterator</code>迭代器判断</h2>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : iterator迭代器判断.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/20 22:40</span>\n\n\n<span class=\"token keyword\">from</span> collections<span class=\"token punctuation\">.</span>abc <span class=\"token keyword\">import</span> Iterator\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Iterator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Iterator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Iterator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span> Iterator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3a97e848c8c94786895f1b787618f817.png\"/></p>\n<blockquote>\n<p>  可以得出<code>list</code> 、 <code>dict</code> 、 <code>str</code> 不是 <code>Iterator</code> ，因为<code>Pytho</code>n的 <code>Iterator</code> 对象表示的是一个数据流，<code>Iterator</code>对象可以 被 <code>next()</code> 函数调用并不断返回下一个数据，直到没有数据时抛出 <code>StopIteration</code> 错误。</p>\n</blockquote>\n<blockquote>\n<p>  可以把这个数据流看做 是一个有序序列，但我们却不能提前知道序列的长度，<code>只能</code>不断通过 <code>next()</code> 函数实现按需计算下一个数据，所以<code>Iterator</code> 的计算是惰性的，只有在需要返回下一个数据时它才会计算。</p>\n</blockquote>\n<blockquote>\n<p>  <code>Iterator</code> 甚至可以表示一个无限大的数据流，例如全体自然数。而使用<code>list</code>是永远不可能存储全体自然数的 那我们还可以通过 <code>isinstance()</code> 来判断是否是 <code>Iterator</code> 对象</p>\n</blockquote>\n<p>注意： <code>Iterator</code> 和 <code>Iterable</code> ，一个是迭代器，一个是可迭代对象</p>\n<blockquote>\n<p>  但是可以使用 <code>iter()</code> 函数将 <code>list</code> 、 <code>dict</code> 、 <code>str</code> 等 <code>Iterable</code> 变成 <code>Iterator</code>。</p>\n</blockquote>\n<p><code>iter()</code>函数<code>.py</code></p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : iter()函数.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/20 22:46</span>\n\n<span class=\"token keyword\">from</span> collections<span class=\"token punctuation\">.</span>abc <span class=\"token keyword\">import</span> Iterator\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Iterator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Iterator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Iterator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5bae01f0e3384fd7812959546b316dad.png\"/></p>\n<h2><a id=\"4_120\"></a>4.迭代器与可迭代对象</h2>\n<blockquote>\n<p>  所有可以作用于<code>for</code>循环的对象都是<code>Iterable</code>可迭代对象类型；</p>\n</blockquote>\n<blockquote>\n<p>  可以作用于<code>next（）</code>函数的对象都是<code>itreator</code>迭代器类型，他们表示一个惰性计算序列；</p>\n</blockquote>\n<blockquote>\n<p>  集合数据类型<code>list</code>，<code>dict</code>，<code>str</code>等是<code>Iterable</code>但不是<code>Iterat</code>or，不过可以通过<code>iter（）</code>函数获得一个<code>Iterator</code>对象。</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : 迭代器和可迭代对象.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/20 23:00</span>\n\n\n<span class=\"token comment\"># 迭代器  可以被next()函数调⽤并不断返回下⼀个值的对象称为迭代器：Iterator。</span>\n\n<span class=\"token keyword\">from</span> collections<span class=\"token punctuation\">.</span>abc <span class=\"token keyword\">import</span> Iterator<span class=\"token punctuation\">,</span> Iterable\n<span class=\"token comment\"># iterable 可迭代对象</span>\n<span class=\"token comment\"># iterator 迭代器</span>\n\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 元组</span>\nb <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 列表</span>\nc <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>  <span class=\"token comment\"># 空字典</span>\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 元组</span>\ns <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ns1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token boolean\">None</span><span class=\"token punctuation\">}</span>  <span class=\"token comment\"># 集合</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 空集合 &lt;class 'dict'&gt;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;class 'tuple'&gt;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 空集合 &lt;class 'set'&gt;</span>\n\n\n<span class=\"token comment\"># isinstance判断</span>\n<span class=\"token comment\"># 可作用于for循环的对象都是iterable类型</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>args<span class=\"token punctuation\">}</span></span><span class=\"token string\">对象是可迭代对象'</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>args<span class=\"token punctuation\">}</span></span><span class=\"token string\">对象不是可迭代对象'</span></span><span class=\"token punctuation\">)</span>\n\n\nfun<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 函数调用</span>\nfun<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\nfun<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\nfun<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\nfun<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'---------------------------'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 渴作用与next()函数的对象都是iterator类型，他们表示一个惰性计算的序列</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> Iterator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>args<span class=\"token punctuation\">}</span></span><span class=\"token string\">对象是可迭代器'</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>args<span class=\"token punctuation\">}</span></span><span class=\"token string\">对象不是可迭代器'</span></span><span class=\"token punctuation\">)</span>\n\n\ng <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfun1<span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 用python内置函数iter()函数 把list dict str等 iterable变成iterator迭代器</span>\nfun1<span class=\"token punctuation\">(</span><span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfun1<span class=\"token punctuation\">(</span><span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8db9042f1e64489ea08f9010606574bc.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-21 16:07:12", "summary": "迭代器在这里插入图片描述什么是迭代器迭代器是访问集合的一种方式，可以记住遍历位置的对象，迭代器从集合的第一个元素开始访问，直到所有的元素被访问完才结束，只能往往前，不能后退。可以直接作用于循环的数据类"}