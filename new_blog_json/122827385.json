{"blogid": "122827385", "writerAge": "码龄5年", "writerBlogNum": "41", "writerCollect": "535", "writerComment": "74", "writerFan": "51", "writerGrade": "4级", "writerIntegral": "1522", "writerName": "LINK稚朋", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122827385.jpg", "writerRankTotal": "20703", "writerRankWeekly": "88177", "writerThumb": "97", "writerVisitNum": "221650", "blog_read_count": "2459", "blog_time": "已于 2022-02-08 18:15:46 修改", "blog_title": "fastdds交叉编译", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p></p>\n<p>之前在虚拟机安装过fastdds，不过在真正用到项目中，一般都是使用交叉编译的。网上搜索相关的参考资料比较少，所以记录下这两天编译库踩过的坑；</p>\n<p>首先先介绍下fastdds的核心库，建议不了解的先去git了解下基础资料；做应用开发的话主要涉及到fastrtps，fastcdr两个核心库的编译；其中fastrtps库的编译依赖fastcdr，TinyXML2，asio,Foonathan_memory四个库；下面依次介绍各个库的编译安装；</p>\n<h3>1、fastcdr</h3>\n<p>fastcdr是做idl序列化和反序列化的核心库，他不依赖任何库</p>\n<p>1）下载源码</p>\n<p>        github下载源码，建议下载最新tag分支</p>\n<p><a class=\"has-card\" href=\"https://github.com/eProsima/Fast-CDR\" title=\"https://github.com/eProsima/Fast-CDR\"><span class=\"link-card-box\"><span class=\"link-title\">https://github.com/eProsima/Fast-CDR</span><span class=\"link-link\"><img alt=\"\" class=\"link-link-icon\" src=\"..\\..\\static\\image\\icon-default.png\"/>https://github.com/eProsima/Fast-CDR</span></span></a>2）修改CmakeList，在project前增加如下内容</p>\n<pre><code class=\"language-bash\">#配置C++编译器\nset(CMAKE_CXX_COMPILER C++交叉编译工具链绝对地址)\n#配置C编译器\nset(CMAKE_C_COMPILER C交叉编译工具链绝对地址)\n#配置系统路径\nset(CMAKE_SYSROOT 交叉编译工具环境)\n#配置库文件头文件搜索路径\nset(CMAKE_FIND_ROOT_PATH  交叉编译工具环境)\n\nSET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\nSET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\nSET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)</code></pre>\n<p>CmakeList中的BUILD_SHARED_LIBS 选项可配置是否生成动态库和静态库</p>\n<p>3）使用如下命令进行编译和安装</p>\n<pre><code class=\"language-bash\">#源码路径\nmkdir build\ncmake ..  -DCMAKE_INSTALL_PREFIX=安装路径\nmake\nmake install</code></pre>\n<p>经过以上步骤“安装路径”/lib下会生成fastcdr库,“安装路径”/include会生成头文件</p>\n<h3>2、TinyXML2安装</h3>\n<p>1）下载源码</p>\n<p>        github下载源码，建议下载最新tag分支</p>\n<p style=\"margin-left:0;\"><a class=\"has-card\" href=\"https://github.com/leethomason/tinyxml2\" title=\"https://github.com/leethomason/tinyxml2\"><span class=\"link-card-box\"><span class=\"link-title\">https://github.com/leethomason/tinyxml2</span><span class=\"link-link\"><img alt=\"\" class=\"link-link-icon\" src=\"..\\..\\static\\image\\icon-default.png\"/>https://github.com/leethomason/tinyxml2</span></span></a></p>\n<p>2）修改CmakeList，在project前增加如下内容 </p>\n<pre><code class=\"language-bash\">#配置C++编译器\nset(CMAKE_CXX_COMPILER C++交叉编译工具链绝对地址)\n#配置C编译器\nset(CMAKE_C_COMPILER C交叉编译工具链绝对地址)\n#配置系统路径\nset(CMAKE_SYSROOT 交叉编译工具环境)\n#配置库文件头文件搜索路径\nset(CMAKE_FIND_ROOT_PATH  交叉编译工具环境)\n\nSET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\nSET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\nSET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)</code></pre>\n<p> 3）使用如下命令进行编译和安装</p>\n<pre><code class=\"language-bash\">#源码路径\nmkdir build\ncmake ..  -DCMAKE_INSTALL_PREFIX=安装路径\nmake\nmake install</code></pre>\n<p>经过以上步骤“安装路径”/lib下会生成xml库,“安装路径”/include会生成头文件 </p>\n<h3> 3、asio安装</h3>\n<p>Asio是一个跨平台的C++库，用于网络和底层I/O编程。</p>\n<p> 1）下载源码</p>\n<p>       官网下载源码，建议下载最新发布版</p>\n<p><a class=\"has-card\" href=\"https://sourceforge.net/projects/asio/\" title=\"asio C++ library download | SourceForge.net\"><span class=\"link-card-box\"><span class=\"link-title\">asio C++ library download | SourceForge.net</span><span class=\"link-desc\">Download asio C++ library for free. asio is a cross-platform C++ library for network and low-level I/O programming that provides developers with a consistent asynchronous model using a modern C++ approach.</span><span class=\"link-link\"><img alt=\"\" class=\"link-link-icon\" src=\"..\\..\\static\\image\\logo-180x180.png\"/>https://sourceforge.net/projects/asio/</span></span></a></p>\n<p style=\"margin-left:0;\">2）修改编译选项</p>\n<p style=\"margin-left:0;\">与前面不同的是该项目可以通过configure 配置编译选项，在源码根目录使用如下命令进行配置</p>\n<pre><code class=\"language-bash\">#--host指定要交叉编译的平台，以arm-linux-gnueabihf为例\n#--prefix指定安装目录\n#--with-boost就是指明Boost库的头文件位置，下载不依赖boost的asio版本可以跳过这个选项\n./configure --host=arm-Linux-gnueabihf --prefix=asio_myir --with-boost=/usr/local/include\n\n​</code></pre>\n<p> 3）编译安装</p>\n<p>默认情况下，Asio 是一个只有头文件的库。所以这里直接</p>\n<p>make；make install</p>\n<p>将下载的头文件安装到指定路径即可</p>\n<p>经过以上步骤“安装路径”/include会生成头文件</p>\n<h3>4、Foonathan_memory安装</h3>\n<p>1）下载源码</p>\n<p>        github下载源码，建议下载最新tag分支</p>\n<p><a class=\"has-card\" href=\"https://github.com/eProsima/foonathan_memory_vendor.git\" title=\"https://github.com/eProsima/foonathan_memory_vendor.git\"><span class=\"link-card-box\"><span class=\"link-title\">https://github.com/eProsima/foonathan_memory_vendor.git</span><span class=\"link-link\"><img alt=\"\" class=\"link-link-icon\" src=\"..\\..\\static\\image\\icon-default.png\"/>https://github.com/eProsima/foonathan_memory_vendor.git</span></span></a></p>\n<p>）修改CmakeList，在project前增加如下内容</p>\n<pre><code class=\"language-bash\">#配置C++编译器\nset(CMAKE_CXX_COMPILER C++交叉编译工具链绝对地址)\n#配置C编译器\nset(CMAKE_C_COMPILER C交叉编译工具链绝对地址)\n#配置系统路径\nset(CMAKE_SYSROOT 交叉编译工具环境)\n#配置库文件头文件搜索路径\nset(CMAKE_FIND_ROOT_PATH  交叉编译工具环境)\n\nSET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\nSET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\nSET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)</code></pre>\n<p>3）使用如下命令进行编译和安装</p>\n<pre><code class=\"language-bash\">#源码路径\nmkdir build\n#关闭所有主功能外的功能\ncmake .. -DFOONATHAN_MEMORY_BUILD_EXAMPLES=OFF -DFOONATHAN_MEMORY_BUILD_TESTS=OFF -DFOONATHAN_MEMORY_BUILD_TOOLS=OFF -DCMAKE_INSTALL_PREFIX=安装路径\nmake\nmake install</code></pre>\n<p>经过以上步骤“安装路径”/lib下会生成Foonathan_memory库,“安装路径”/include会生成头文件</p>\n<h3>5、fastrtps编译安装</h3>\n<p>编译rtps库需要以上四个库全部争取安装，编译前请先检查编译工具环境下（CMAKE_FIND_ROOT_PATH）下lib和include是否存在以上四个库对应的文件，确认环境无误后进行以下步骤；</p>\n<p>1）下载源码</p>\n<p>        github下载源码，建议下载最新tag分支<a class=\"has-card\" href=\"https://github.com/eProsima/Fast-DDS.git\" title=\"GitHub - eProsima/Fast-DDS: The most complete DDS - Proven: Plenty of success cases.\"><span class=\"link-card-box\"><span class=\"link-title\">GitHub - eProsima/Fast-DDS: The most complete DDS - Proven: Plenty of success cases.</span><span class=\"link-link\"><img alt=\"\" class=\"link-link-icon\" src=\"..\\..\\static\\image\\icon-default.png\"/>https://github.com/eProsima/Fast-DDS.git</span></span></a></p>\n<p>）修改CmakeList，在project前增加如下内容</p>\n<pre><code class=\"language-bash\">#配置C++编译器\nset(CMAKE_CXX_COMPILER C++交叉编译工具链绝对地址)\n#配置C编译器\nset(CMAKE_C_COMPILER C交叉编译工具链绝对地址)\n#配置系统路径\nset(CMAKE_SYSROOT 交叉编译工具环境)\n#配置库文件头文件搜索路径\nset(CMAKE_FIND_ROOT_PATH  交叉编译工具环境)\n\nSET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\nSET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\nSET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)</code></pre>\n<p> CmakeList中的BUILD_SHARED_LIBS 选项可配置是否生成动态库和静态库</p>\n<p>3）使用如下命令进行编译和安装</p>\n<pre><code class=\"language-bash\">#源码路径\nmkdir build\ncmake ..  -DCMAKE_INSTALL_PREFIX=安装路径\nmake\nmake install</code></pre>\n<p>经过以上步骤“安装路径”/lib下会生成fastcdr库,“安装路径”/include会生成头文件</p>\n<h3>6、测试</h3>\n<p>经过以上步骤安装路径lib会存在如下几个库，本次步骤默认编译的都是静态库所以都是.a文件</p>\n<p><img alt=\"\" height=\"164\" src=\"..\\..\\static\\image\\f2abf57678f24ca1910166876bd9af72.png\" width=\"413\"/></p>\n<p> 安装路径include会存在如下几个文件夹</p>\n<p><img alt=\"\" height=\"131\" src=\"..\\..\\static\\image\\f04fc20a37b646e4b162b769d02a70ab.png\" width=\"348\"/></p>\n<p> 其中fastdds和fastrtps均为fastrtps核心库的头文件</p>\n<p>在宿主机参考fastdds的helloworld例程进行测试</p>\n<p></p>\n<p style=\"margin-left:0;\"></p>\n</div>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-02-08 18:15:46", "summary": "之前在虚拟机安装过，不过在真正用到项目中，一般都是使用交叉编译的。网上搜索相关的参考资料比较少，所以记录下这两天编译库踩过的坑；首先先介绍下的核心库，建议不了解的先去了解下基础资料；做应用开发的话主要"}