{"blogid": "122678910", "writerAge": "码龄1年", "writerBlogNum": "42", "writerCollect": "17", "writerComment": "1", "writerFan": "133", "writerGrade": "3级", "writerIntegral": "430", "writerName": "LiPing122335", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122678910.jpg", "writerRankTotal": "36952", "writerRankWeekly": "278212", "writerThumb": "8", "writerVisitNum": "31292", "blog_read_count": "1066", "blog_time": "于 2022-01-26 09:03:34 发布", "blog_title": "unity 动画控制器", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>unity 可以用两种方式控制动画</p>\n<p>1. Animation</p>\n<p>Animation an;//动画组件</p>\n<p>void Start（）</p>\n<p>{<!-- --></p>\n<p>an = GetComponent&lt;Animation&gt;(); //获取动画组件</p>\n<p>}</p>\n<p>public enum PlayerState<br/>     {<!-- --><br/>         Idle,<br/>         Fire,<br/>         Reload,<br/>         Melee <br/>     }</p>\n<p>void PlayAnimation(GameRes.PlayerState ps)<br/>     {<!-- --><br/>         switch (ps)<br/>         {<!-- --><br/>             case GameRes.PlayerState.Idle:<br/>                 an.Play(\"Idle\");<br/>                 break;<br/>             case GameRes.PlayerState.Fire:<br/>                 an.Play(\"Fire\");<br/>                 break;<br/>             case GameRes.PlayerState.Reload:<br/>                 an.Play(\"Reload\");<br/>                 break;<br/>             case GameRes.PlayerState.Melee:<br/>                 an.Play(\"Melee\");<br/>                 break;<br/>             default:<br/>                 break;<br/>         }<br/>     }</p>\n<p>2.Animator</p>\n<p>//检查是否正在播放jump动画.<br/> AnimatorStateInfo stateinfo = anim.GetCurrentAnimatorStateInfo(0);   <br/> bool playingJump = stateinfo.IsName(\"jump\");<br/> if(playingJump)<br/> {<!-- --><br/>     if(stateinfo.normalizedTime &lt; 1.0f)<br/>     {<!-- --><br/>         //正在播放<br/>     }<br/>     else<br/>     {<!-- --><br/>         //播放结束<br/>     }<br/>     <br/> }<br/> 控制播放时间</p>\n<p>Animator ator = go1.GetComponent&lt;Animator&gt;();<br/> var stateinfo = ator.GetCurrentAnimatorStateInfo(0);<br/> if(stateinfo.IsName(\"Jump\"))<br/> {<!-- --><br/>     ator.speed = 2;<br/> }<br/> 用Animator实现人物，走、跑。</p>\n<p>void Move()<br/>     {<!-- --><br/>         Vector3 dir = Vector3.zero;<br/>         if (character.isGrounded)<br/>         {<!-- --><br/>             float h = Input.GetAxis(\"Horizontal\") * speed;<br/>             float v = Input.GetAxis(\"Vertical\") * speed;<br/>             dir = new Vector3(h, 0, v);<br/>             if (Mathf.Abs(h) &gt; 0 || Mathf.Abs(v) &gt; 0&amp;&amp;po)<br/>             {<!-- --><br/>                 an.SetInteger(\"Walk\", 5);<br/>                 if (!ac.isPlaying)<br/>                 {<!-- --><br/>                     ac.PlayOneShot(Clip);<br/>                 }<br/>                 transform.rotation = Quaternion.LookRotation(new Vector3(h, 0, v));//注视旋转<br/>             }<br/>             else if (Input.GetKeyDown(KeyCode.K))<br/>             {<!-- --><br/>                 if (p)<br/>                 {<!-- --><br/>                     an.SetInteger(\"Run\", 4);<br/>                     po = false;<br/>                     if (Mathf.Abs(h) &gt; 0 || Mathf.Abs(v) &gt; 0 &amp;&amp; po == false)<br/>                     { <br/>                         transform.rotation = Quaternion.LookRotation(new Vector3(h, 0, v));//注视旋转<br/>                     }                <br/>                     p = !p;<br/>                 }<br/>                 else<br/>                 {<!-- --><br/>                     po = true;<br/>                     an.SetInteger(\"Run\", 2);<br/>                     p = !p;<br/>                 }<br/>             }<br/>             else if (Input.GetKeyDown(KeyCode.L))<br/>             {<!-- --><br/>                 if (q)<br/>                 {<!-- --><br/>                     an.SetInteger(\"Sneak\", 2);<br/>                     q = !q;<br/>                 }<br/>                 else<br/>                 {<!-- --><br/>                     an.SetInteger(\"Sneak\", 0);<br/>                     q = !q;<br/>                 }<br/>             }<br/>             else<br/>             {<!-- --><br/>                 an.SetInteger(\"Walk\", 3);<br/>             }<br/>         }<br/>         character.SimpleMove(dir);<br/>     }</p>\n<p>实现摄像机跟随 </p>\n<p> private Transform player;<br/>     public float x=4, y=5;<br/>     public float speed = 2;<br/>     void Start()<br/>     {<!-- --><br/>         //通过标签获取游戏中的对象<br/>         player = GameObject.FindWithTag(\"Player\").transform;<br/>     }<br/>     void Update()<br/>     {<!-- --><br/>         if (player != null)<br/>         {<!-- --><br/>             //计算出摄像机的目标位置，即玩家角色的位置+摄像机的偏移值<br/>             Vector3 targetPos = player.position + new Vector3(0, x, y);<br/>             //设置摄像机位置<br/>             transform.position = Vector3.Lerp(transform.position, targetPos, speed * Time.deltaTime);<br/>             //计算出摄像机面向玩家角色的旋转角度<br/>             Quaternion targetRotation = Quaternion.LookRotation(player.position - transform.position);<br/>             //设置摄像机旋转<br/>             transform.rotation = Quaternion.Slerp(transform.rotation, targetRotation, speed * Time.deltaTime);<br/>         }<br/>     }</p>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-01-26 09:03:34", "summary": "可以用两种方式控制动画动画组件获取动画组件检查是否正在播放动画正在播放播放结束控制播放时间用实现人物，走、跑。注视旋转注视旋转实现摄像机跟随通过标签获取游戏中的对象计算出摄像机的目标位置，即玩家角色的"}