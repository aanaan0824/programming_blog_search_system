{"blogid": "124094382", "writerAge": "码龄13年", "writerBlogNum": "256", "writerCollect": "269", "writerComment": "20", "writerFan": "126", "writerGrade": "5级", "writerIntegral": "2834", "writerName": "深度混淆", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124094382.jpg", "writerRankTotal": "10594", "writerRankWeekly": "33225", "writerThumb": "56", "writerVisitNum": "108367", "blog_read_count": "1941", "blog_time": "已于 2022-05-04 16:17:56 修改", "blog_title": "C#，入门教程——列表（List）的基础知识", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p><img alt=\"\" height=\"527\" src=\"..\\..\\static\\image\\a4842fced7cb49d0ad23cc83eaef8200.png\" width=\"787\"/></p>\n<p> </p>\n<p>List顾名思义就是数据列表，区别于数据数组（array）。<br/> List比数组提供强大得多！多！多！多！的功能，能存储更多！多！多！类型的数据（泛型）！<br/> List是更多数据集合（序表SortedList、链表LinkedList、堆栈Stack、队列Quene及哈希表Hashtable等）的基础。<br/> 因而，可以说：<span style=\"color:#fe2c24;\">无列表，不编程！</span></p>\n<p></p>\n<h1>一、命名空间</h1>\n<pre><code class=\"language-cs\">using System.Text;\nusing System.Linq;\nusing System.Collections;\nusing System.Collections.Generic;</code></pre>\n<p>如果代码提示错误信息，先添加上面的这些命名空间。</p>\n<pre><code class=\"language-cs\">if （入门 List ）\n{\n    本文就够了。\n}\nelse if （想精通 List ）\n{\n    请掌握 Linq 与 Lamda 表达式的基础知识。\n}\nelse \n{\n    关注我！无穷知识传给你！\n}</code></pre>\n<p></p>\n<h1>二、List的声明（定义）</h1>\n<h2>1、List声明</h2>\n<p>语法：</p>\n<pre><code class=\"language-cs\">List&lt;T&gt; tList = new List&lt;T&gt;();  </code></pre>\n<p><br/> 注：&lt;T&gt;即为泛型，可以理解为任意的数据类型（数值、类、结构体、object及其他数据体）。</p>\n<p>实例：</p>\n<pre><code class=\"language-cs\">List&lt;string&gt; stringList = new List&lt;string&gt;();\nList&lt;Classmate&gt;classmateList = new List&lt;Classmate&gt;();</code></pre>\n<h2>2、List初值</h2>\n<p>可以在声明一个List的同时，给出初值。</p>\n<pre><code class=\"language-cs\">List&lt;string&gt; stringList = new List&lt;string&gt;() { \n    \"Tom\", \"Jerry\", \"!\" \n};\nList&lt;Classmate&gt; classmateList = new List&lt;Classmate&gt;() {\n    new Classmate(\"1\", \"Tom\"), \n    new Classmate(\"2\", \"Jerry\")\n};</code></pre>\n<h2>3、数组array转为List</h2>\n<p>语法：</p>\n<pre><code class=\"language-cs\">List&lt;T&gt; tList =new List&lt;T&gt; (数据集);</code></pre>\n<p><br/> 实例：</p>\n<pre><code class=\"language-cs\">string[] stringArray = { \n    \"Tom\", \"Jerry\", \"!\"  \n};\nList&lt;string&gt; stringList = new List&lt;string&gt;(stringArray);\n//或者（Linq方法）：\nList&lt;string&gt; stringList = stringArray.ToList();\n//反之：\nstring[] stringArray = stringList.ToArray();</code></pre>\n<h1><img alt=\"\" height=\"339\" src=\"..\\..\\static\\image\\ba5517dd17e2457d86cbe3d5a75d1139.png\" width=\"779\"/></h1>\n<h1>三、List的基础功能与常用操作</h1>\n<p> </p>\n<h2>1、List的数据总数</h2>\n<p>语法：int List.Count()<br/> 实例：int count = stringList.Count();</p>\n<h2>2、清空List</h2>\n<p>语法：void List.Clear() <br/> 实例：stringList.Clear();<br/> 必要的时候清空列表是好习惯！</p>\n<h2>3、List的遍历</h2>\n<p>语法：</p>\n<pre><code class=\"language-cs\">// T的类型与mList声明时一样\nstring result = \"\";\nforeach (T element in tList)  \n{\n    result += element.ToString();\n}</code></pre>\n<p>实例（制作同学花名册）：</p>\n<pre><code class=\"language-cs\">List&lt;Classmate&gt; classmateList = new List&lt;Classmate&gt;();\n//（因个人隐私需要，此处又省略。。。）\nStringBuilder sb = new StringBuilder();\nsb.AppendLine(\"&lt;table&gt;\");\nsb.AppendLine(\"&lt;tr&gt;\");\nsb.AppendLine(\"&lt;td&gt;序号&lt;/td&gt;\");\nsb.AppendLine(\"&lt;td&gt;昵称&lt;/td&gt;\");\nsb.AppendLine(\"&lt;td&gt;姓名&lt;/td&gt;\");\nsb.AppendLine(\"&lt;td&gt;手机号&lt;/td&gt;\");\nsb.AppendLine(\"&lt;td&gt;邮箱&lt;/td&gt;\");\nsb.AppendLine(\"&lt;/tr&gt;\");\nforeach (Classmate mo in classmateList)\n{\n    sb.AppendLine(\"&lt;tr&gt;\");\n    sb.AppendLine(\"&lt;td&gt;\" + mo.Id + \"&lt;/td&gt;\");\n    sb.AppendLine(\"&lt;td&gt;\" + mo.Nickname + \"&lt;/td&gt;\");\n    sb.AppendLine(\"&lt;td&gt;\" + mo.Name + \"&lt;/td&gt;\");\n    sb.AppendLine(\"&lt;td&gt;\" + mo.Mobile + \"&lt;/td&gt;\");\n    sb.AppendLine(\"&lt;td&gt;\" + mo.Email + \"&lt;/td&gt;\");\n    sb.AppendLine(\"&lt;/tr&gt;\");\n}\nsb.AppendLine(\"&lt;/table&gt;\");</code></pre>\n<h2>4、添加一个或一组数据</h2>\n<p>语法：List.Add(T item)<br/> 语法：List.AddRange(数据集合)   <br/> 注意：狗尾续貂，数据添加在尾部；</p>\n<p>实例：</p>\n<pre><code class=\"language-cs\">List&lt;string&gt; stringList = new List&lt;string&gt;();\nstringList.Add(\"Tom\");\n\n//或：\nstring[] stringArray = { \n    \"Tom\", \"Jerry\", \"!\"  \n};\nList&lt;string&gt; firstStringList = new List&lt;string&gt;();\nfirstStringList.AddRange(stringArray);\n\n//又或：\nList&lt;string&gt; secondStringList = new List&lt;string&gt;();\n//（此处可能省略几句话。。。）\nstringList.AddRange(secondStringList);</code></pre>\n<h2><br/> 5、按指定位置添加数据</h2>\n<p>语法： Insert(int index, T item); <br/> 实例：</p>\n<pre><code class=\"language-cs\">List&lt;string&gt; stringList = new List&lt;string&gt;();\nstringList.Insert(1, \"House\");</code></pre>\n<h2><br/> 6、删除元素</h2>\n<p>① 按数据删除<br/> 语法：List.Remove(T item)<br/> ② 按位置删除<br/> 语法：List.RemoveAt(int index);   <br/> ③ 批量删除<br/> 语法：List.RemoveRange(int index, int count);<br/> ④ 按条件删除<br/> 语法：List.RemoveAll(Predicate&lt;T&gt; match)<br/> 方法：删除满足条件的所有元素。</p>\n<p>实例：</p>\n<pre><code class=\"language-cs\">stringList.Remove(\"Tom\");\nstringList.RemoveAt(0);\nstringList.RemoveRange(1, 2);\n//（Lamda表达式）\nstringList.RemoveAll(t =&gt; t.Id &gt; 10);</code></pre>\n<h2>7、判断List是否包含某个数据？</h2>\n<p>语法：List.Contains(T item)   <br/> 返回：true 或 false</p>\n<p>实例：<br/> string result = \"\";<br/> if (mList.Contains(\"Tom\"))<br/> {<!-- --><br/>     result = \"Tom is in the list\";<br/> }<br/> else<br/> {<!-- --><br/>     result = \"Tom is not in the list\";<br/> }</p>\n<h1><br/> 四、List的高级应用</h1>\n<h2><br/> 1、List排序</h2>\n<p>语法：List.Sort()<br/> 按数据的默认升序排序；<br/> stringList.Sort();</p>\n<p>这个实际上没有什么用处，强烈推荐下面的语法：<br/> 语法：<br/> tList.Sort(delegate(T a, T b) {<!-- --><br/>     return Comparer&lt;long&gt;.Default.Compare(a.Hashcode(), b.Hashcode());<br/> });</p>\n<p>实例（正序）：</p>\n<pre><code class=\"language-cs\">classmateList.Sort(delegate(Classmate a, Classmate b)) {\n    if(a.Id &gt; b.Id) {\n        return 1;\n    }\n    else {\n        return -1;\n    }\n});\n//实例（倒序）：\nclassmateList.Sort(delegate(Classmate a, Classmate b)) {\n    if(b.Id &gt; a.Id) {\n        return 1;\n    }\n    else {\n        return -1;\n    }\n});\n//实例（倒序，简约写法）：\nclassmateList.Sort(delegate(Classmate a, Classmate b)) {\n    return ((b.Id &gt; a.Id) ? 1 : -1);\n});\n//或者，实例（倒序，简约写法）：\nclassmateList.Sort(delegate(Classmate a, Classmate b)) {\n    return Comparer&lt;int&gt;.Default.Compare(b.Id, a.Id);\n});</code></pre>\n<p><span style=\"color:#956fe7;\"><strong>列表的排序是使用频率非常高的功能，应该熟练掌握！</strong></span></p>\n<h2><br/> 2、List反转</h2>\n<p>语法：List.Reverse()</p>\n<h2><br/> 3、List检索与批量检索</h2>\n<p>① List.Find方法：检索满足条件的第一个元素； <br/> 语法：public List&lt;T&gt; Find(Predicate&lt;T&gt; match);</p>\n<p>② List.FindAll方法：检索满足条件的所有元素； <br/> 语法：public List&lt;T&gt; FindAll(Predicate&lt;T&gt; match);</p>\n<p>③ List.Where方法：检索满足条件的所有元素；（类似FindAll）。<br/> 语法：public List&lt;T&gt; Where(Predicate&lt;T&gt; match);</p>\n<p>④ List.FindLast 方法：检索满足条件的最后一个元素； <br/> 语法：public T FindLast(Predicate&lt;T&gt; match);</p>\n<p>实例（推荐使用Lamda表达式）：</p>\n<pre><code class=\"language-cs\">List&lt;Classmate&gt; someClassmateList = classmateList.Find(t =&gt; t.Mobile.StartsWith(\"139\"));\nList&lt;Classmate&gt; someClassmateList = classmateList.FindAll(t =&gt; t.Mobile.StartsWith(\"139\"));\nList&lt;Classmate&gt; someClassmateList = classmateList.Where(t =&gt; t.Mobile.StartsWith(\"139\"));\nList&lt;Classmate&gt; someClassmateList = classmateList.FindLast(t =&gt; t.Mobile.StartsWith(\"139\"));</code></pre>\n<h2><br/> 4、List的片段提取</h2>\n<p>语法：List.Take(int number);<br/> 方法：获得前number个数据，构成一个数据子集；</p>\n<p>List&lt;Classmate&gt; top3List = classmateList.Take(3);</p>\n<p><strong>一般先排序，再提取！</strong></p>\n<p></p>\n<p> ——————————————————————</p>\n<p>POWER BY <a href=\"http://www.315soft.com/\" title=\"315SOFT.COM\">315SOFT.COM</a> &amp;<br/><a href=\"http://www.truffer.cn/\" title=\"TRUFFER.CN\">TRUFFER.CN</a></p>\n</div>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-05-04 16:17:56", "summary": "顾名思义就是数据列表，区别于数据数组。比数组提供强大得多！多！多！多！的功能，能存储更多！多！多！类型的数据泛型！是更多数据集合序表、链表、堆栈、队列及哈希表等的基础。因而，可以说：无列表，不编程！一"}