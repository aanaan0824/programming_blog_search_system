{"blogid": "124060870", "writerAge": "码龄4年", "writerBlogNum": "109", "writerCollect": "285", "writerComment": "25", "writerFan": "2392", "writerGrade": "4级", "writerIntegral": "1180", "writerName": "芯辰大海", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124060870.jpg", "writerRankTotal": "15668", "writerRankWeekly": "4985", "writerThumb": "63", "writerVisitNum": "113692", "blog_read_count": "1940", "blog_time": "已于 2022-08-06 15:15:21 修改", "blog_title": "c++ 计时方法clock()、chrono::high_resolution_clock、system_clock（详细举例）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>计时方法往往测试某一段代码/某个功能函数的运行时间；</p>\n<h2>clock()</h2>\n<p>常用的一种“传统”的计时方法clock()，其计时可以精确到毫秒，通过/CLOCKS_PER_SEC可将输出时间精度设置为”秒“</p>\n<pre><code>#include&lt;iostream&gt;\n#include &lt;unistd.hi&gt;\nusing namespace std;\n#include&lt;ctime&gt;\nint main()\n{\n        clock_t start = clock();     //clock()返回单位是毫秒\n        for (auto i = 0; i &lt; 1000000; i++);\n        clock_t end = clock();\n        cout &lt;&lt; \"花费了\" &lt;&lt; (double)(end - start) / CLOCKS_PER_SEC &lt;&lt; \"秒\" &lt;&lt; endl;  //返用秒为单位可以用CLOCKS_PER_SEC\n        cout &lt;&lt; \"花费了\" &lt;&lt; (double)(end - start) &lt;&lt; \"毫秒\" &lt;&lt; endl;\n        sleep(10);  //让正在执行的线程等待10毫秒\n}\n</code></pre>\n<p> 上述程序运行结果如下：</p>\n<p><img alt=\"\" height=\"49\" src=\"..\\..\\static\\image\\a1dce89857584c5496203a124fcf12ff.png\" width=\"573\"/></p>\n<p><strong>模板程序：</strong></p>\n<pre><code>#include &lt;ctime&gt;\nusing namespace std;\n \nclock_t start = clock();\n// do something...\nclock_t end   = clock();\ncout &lt;&lt; \"using\" &lt;&lt; (double)(end - start) / CLOCKS_PER_SEC &lt;&lt; \"s\" &lt;&lt; endl;</code></pre>\n<h2>std::chrono 时钟</h2>\n<ul><li>所谓时钟，是指从一个时点开始，按照某个刻度的一个计数；</li><li>std::chrono是C++11引入的日期时间处理库，其中包含3种时钟类：system_clock(系统时钟)，steady_clock(稳定时钟)，high_resolution_clock(高精度时钟)；这三个时间类都提供了<strong>rep</strong>（周期）、<strong>period</strong>（单位比率）、<strong>duration</strong>（成员类型）。这三个时钟类都提供了一个<a href=\"https://so.csdn.net/so/search?q=%E9%9D%99%E6%80%81%E6%88%90%E5%91%98&amp;spm=1001.2101.3001.7020\" title=\"静态成员\">静态成员</a>函数 <strong>now()</strong> 用于获取当前时间，该函数的返回值是一个 <strong>time_point</strong> 类型。</li><li><strong>注意：</strong> 虽然这三个时钟都很多相同的成员类型和<a href=\"https://so.csdn.net/so/search?q=%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0&amp;spm=1001.2101.3001.7020\" title=\"成员函数\">成员函数</a>，但它们是没有亲缘关系的。这三个时钟类型都是类，并非模板类。</li><li>vs为了写代码方便，预定义了几个常用的时间单位：</li></ul>\n<pre><code>typedef duration&lt;long long, nano&gt; nanoseconds; // 纳秒 \ntypedef duration&lt;long long, micro&gt; microseconds; // 微秒 \ntypedef duration&lt;long long, milli&gt; milliseconds; // 毫秒 \ntypedef duration&lt;long long&gt; seconds; // 秒 \ntypedef duration&lt;int, ratio&lt;60&gt; &gt; minutes; // 分钟 \ntypedef duration&lt;int, ratio&lt;3600&gt; &gt; hours; // 小时</code></pre>\n<h3>system_clock</h3>\n<p>不稳定的时钟；它类似Windows系统右下角那个时钟，是系统时间。这个时钟是可以自己设置的。system_clock除了now()函数外，还提供了to_time_t()静态成员函数。用于将系统时间转换成熟悉的std::time_t类型，得到了std::time_t类型的值，就可以很方便地打印当前时间了。<br/>  </p>\n<pre><code>#include&lt;iostream&gt;\n#include &lt;cstdint&gt;\n#include &lt;chrono&gt;\n#include&lt;unistd.h&gt;\nusing namespace std;\nusing namespace chrono; //chrono库一定写在std库后面，否则报错\n\nint main()\n{\n        auto start = system_clock::now();  // 精度到nanoseconds微秒,获取系统当前时间\n        for (auto i = 0; i &lt; 1000000; i++);   //do something\n        auto end = system_clock::now();\n        auto duration = duration_cast&lt;microseconds&gt;(end - start);  //duration_cast()提供在不同的时间单位之间进行转换的功能\n        cout &lt;&lt; \"花费了\" &lt;&lt; double(duration.count()) &lt;&lt; \"微秒\" &lt;&lt; endl;  //microseconds表示输出为微秒,count( )成员函数,用来返回时间\n\n        sleep(10);\n}</code></pre>\n<p></p>\n<p><strong>程序运行结果如下：</strong></p>\n<p><img alt=\"\" height=\"34\" src=\"..\\..\\static\\image\\1cfa0b6c4b634430bd2da1cea534ee62.png\" width=\"932\"/></p>\n<p><strong>模板程序：</strong></p>\n<pre><code>#include &lt;chrono&gt;   \nusing namespace std;\nusing namespace chrono;\n \nauto start = system_clock::now();\n// do something...\nauto end   = system_clock::now();\nauto duration = duration_cast&lt;microseconds&gt;(end - start);\ncout &lt;&lt;  \"using\" \n     &lt;&lt; double(duration.count()) * microseconds::period::num / microseconds::period::den \n     &lt;&lt; \"s\" &lt;&lt; endl;</code></pre>\n<h3> steady_clock：</h3>\n<p>steady_clock的刻度是1纳秒；用在需要得到时间间隔，并且这个时间间隔不会因为修改系统时间而受影响的场景；</p>\n<p>它是单调的时钟，相当于教练手中的秒表；只会增长，适合用于记录程序耗时，他表示的时钟是不能设置的。</p>\n<pre><code>auto tp1 = std::chrono::steady_clock::now();\n//do something\nauto tp2 = std::chrono::steady_clock::now();\nstd::cout &lt;&lt; std::chrono::duration_cast&lt;std::chrono::microseconds&gt;(tp2 - tp1).count() &lt;&lt; \"microseconds\" &lt;&lt; std::endl;</code></pre>\n<h3>chrono::high_resolution_clock</h3>\n<p>是当前系统能够提供的最高精度的时钟；它也是不可以修改的。相当于 steady_clock 的高精度版本。是c++11高精度时钟；主要是使用它的一个now()方法；（使用auto可以接受任何类型，称”自动类型“）；精确到纳秒；</p>\n<pre><code>#include&lt;iostream&gt;\n#include &lt;cstdint&gt;\n#include &lt;chrono&gt;\n#include&lt;unistd.h&gt;\nusing namespace std;\nusing namespace chrono;\nint main()\n{\n        auto start = std::chrono::high_resolution_clock::now();\n        for (auto i = 0; i &lt; 1000000; i++);\n        auto end = std::chrono::high_resolution_clock::now();\n        auto duration = duration_cast&lt;nanoseconds&gt;(end - start);\n        cout &lt;&lt; \"花费了\" &lt;&lt; double(duration.count()) &lt;&lt; \"纳秒\" &lt;&lt; endl;\n        sleep(10);\n}</code></pre>\n<p><strong>程序运行结果如下：</strong></p>\n<p><img alt=\"\" height=\"33\" src=\"..\\..\\static\\image\\9ff5c81063e34bea8ca11bba0e9a028b.png\" width=\"930\"/></p>\n<h3>举例：定义一个时间类（常用于工程项目中）</h3>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n#include&lt;chrono&gt;\nclass ElapsedTimer\n{\npublic:\n\tElapsedTimer(bool do_start = false)\n\t{\n\t\tif (do_start)\n\t\t\tstart();\n\t}\n\n\tvoid start()\n\t{\n\t\tm_start_point = std::chrono::high_resolution_clock::now();\n\t}\n    //ms\n\tuint64_t get_elapsed_ms()\n\t{\n\t\tauto now = std::chrono::high_resolution_clock::now();\n\t\treturn std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(now-m_start_point).count();\n\t}\n    //us\n\tuint64_t get_elapsed_us()\n\t{\n\t\tauto now = std::chrono::high_resolution_clock::now();\n\t\treturn std::chrono::duration_cast&lt;std::chrono::microseconds&gt;(now-m_start_point).count();\n\t}\n\nprivate:\n\tstd::chrono::time_point&lt;std::chrono::high_resolution_clock&gt; m_start_point;\n};\nint main(){\n\tElapsedTimer T(1);\n\tint j=0;\n\tfor(int i=0;i&lt;1000*1000;i++)\n\t{\n\t\tj++;\n\n\t}\n\tcout&lt;&lt;j&lt;&lt;endl;\n\tauto loop=T.get_elapsed_us();\n\tcout&lt;&lt;1.0*loop&lt;&lt;endl;\n\treturn 0;\n}\n</code></pre>\n<p>测试输出：其中，2394是for循环执行时间(单位us）；user时间是，整个main函数中所有程序执行完成总的运行时间；</p>\n<p><img alt=\"\" height=\"129\" src=\"..\\..\\static\\image\\07e5962d198747d89e68c130472b510e.png\" width=\"651\"/></p>\n<p> </p>\n<p></p>\n<h3></h3>\n</div>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-06 15:15:21", "summary": "计时方法往往测试某一段代码某个功能函数的运行时间；常用的一种传统的计时方法，其计时可以精确到毫秒，通过可将输出时间精度设置为秒返回单位是毫秒花费了秒返用秒为单位可以用花费了毫秒让正在执行的线程等待毫秒"}