{"blogid": "126743411", "writerAge": "码龄1年", "writerBlogNum": "512", "writerCollect": "223", "writerComment": "13", "writerFan": "9113", "writerGrade": "6级", "writerIntegral": "5413", "writerName": "web18484626332", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126743411.jpg", "writerRankTotal": "3374", "writerRankWeekly": "784", "writerThumb": "37", "writerVisitNum": "168667", "blog_read_count": "10", "blog_time": "于 2022-09-07 12:54:41 发布", "blog_title": "JVM 问题排查-可视化工具", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"JVM__2\"></a>JVM 问题排查-可视化工具</h2>\n<p><strong>jconsole</strong></p>\n<p>JConsole工具是JDK自带的可视化监控工具。查看java应用程序的运行概况、监控堆信息、永久区使用情况、类加载情况等。<br/> 命令行中输入：jconsole</p>\n<p><strong>jvisualvm</strong></p>\n<p>命令行中输入：jvisualvm<br/> Visual GC插件下载地址 ：https://visualvm.github.io/pluginscenters.html</p>\n<p>可以监控本地的java进程的CPU，类，线程等</p>\n<p><strong>在线调试Arthas</strong></p>\n<p>Arthas 是Alibaba开源的Java诊断工具，采用命令行交互模式，是排查jvm相关问题的利器。<br/> github ：https://github.com/alibaba/arthas</p>\n<p><strong>下载安装</strong><br/> curl -O https://alibaba.github.io/arthas/arthas-boot.jar<br/> java -jar arthas-boot.jar<br/> or<br/> java -jar arthas-boot.jar -h # 然后可以选择一个Java进程</p>\n<p>输入<code>dashboard</code>可查看整个进程的运行情况，线程、内存、GC、运行环境信息：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\46a9f324c87d44d3ad3fce8c961a7ef4.png\"/></p>\n<p>输入thread可以查看线程详细情况：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\52f46a8e995847749cf127902cf17844.png\"/></p>\n<p>输入 thread加上线程ID 可以查看线程堆栈：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c4527c50a570412f99577b37eaa448d8.png\"/><br/> 输入thread -b 可以查看线程死锁：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dc22712833b441d59db66f57db10786d.png\"/></p>\n<p>输入jad加类的全名可以反编译， 这样可以方便我们查看线上代码是否是正确的版本。</p>\n<p><strong>Arthas 命令集</strong></p>\n<p>基础命令：</p>\n<ul><li>help——查看命令帮助信息</li><li>cat—打印文件内容，和linux里的cat命令类似</li><li>grep——匹配查找，和linux里的grep命令类似</li><li>pwd——返回当前的工作目录，和linux命令类似</li><li>cls——清空当前屏幕区域</li><li>session——查看当前会话的信息</li><li>reset (opens new window)——重置增强类，将被 Arthas 增强过的类全部还原，Arthas 服务端关闭时会重置所有增强过的类</li><li>version——输出当前目标 Java 进程所加载的 Arthas 版本号</li><li>history——打印命令历史</li><li>quit——退出当前 Arthas 客户端，其他 Arthas 客户端不受影响</li><li>stop/shutdown——关闭 Arthas 服务端，所有 Arthas 客户端全部退出</li><li>——Arthas快捷键列表及自定义快捷键</li></ul>\n<p>jvm相关:</p>\n<ul><li>dashboard (opens new window)——当前系统的实时数据面板</li><li>thread (opens new window)——查看当前 JVM 的线程堆栈信息</li><li>jvm (opens new window)——查看当前 JVM 的信息</li><li>sysprop (opens new window)——查看和修改JVM的系统属性</li><li>sysenv (opens new window)——查看JVM的环境变量</li><li>vmoption (opens new window)——查看和修改JVM里诊断相关的option</li><li>logger (opens new window)——查看和修改logger</li><li>getstatic (opens new window)——查看类的静态属性</li><li>mbean (opens new window)——查看 Mbean 的信息</li><li>heapdump (opens new window)——dump java heap, 类似jmap命令的heap dump功能</li></ul>\n<p>class/classloader相关:</p>\n<ul><li>sc (opens new window)——查看JVM已加载的类信息</li><li>sm (opens new window)——查看已加载类的方法信息</li><li>jad (opens new window)——反编译指定已加载类的源码</li><li>mc (opens new window)——内存编绎器，内存编绎.java文件为.class文件</li><li>redefine (opens new window)——加载外部的.class文件，redefine到JVM里</li><li>dump (opens new window)——dump 已加载类的 byte code 到特定目录</li><li>classloader (opens new window)——查看classloader的继承树，urls，类加载信息，使用classloader去getResource</li></ul>\n<p>monitor/watch/trace相关:</p>\n<p>这些命令，都通过字节码增强技术来实现的，会在指定类的方法中插入一些切面来实现数据统计和观测，因此在线上、预发使用时，请尽量明确需要观测的类、方法以及条件，诊断结束要执行 shutdown 或将增强过的类执行 reset 命令</p>\n<ul><li>monitor (opens new window)——方法执行监控</li><li>watch (opens new window)——方法执行数据观测</li><li>trace (opens new window)——方法内部调用路径，并输出方法路径上的每个节点上耗时</li><li>stack (opens new window)——输出当前方法被调用的调用路径</li><li>tt (opens new window)——方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测</li></ul>\n<p><strong>内存分析MAT</strong></p>\n<p>Java堆分析器，用于查找内存泄漏 Heap Dump，称为堆转储文件，是Java进程在某个时间内的快照。<br/> 它在触发快照的时候保存了很多信息：Java对象和类信息。通常在写Heap Dump文件前会触发一次Full GC。<br/> 下载地址 ：https://www.eclipse.org/mat/downloads.php</p>\n<p><strong>获取dump文件</strong><br/> 手动：jmap -dump:format=b,file=heap.hprof 44808<br/> 自动：-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=heap.hprof</p>\n<p>Dump的信息：<br/> All Objects<br/> Class, fields, primitive values and references<br/> All Classes<br/> Classloader, name, super class, static fields<br/> Garbage Collection Roots<br/> Objects defined to be reachable by the JVM<br/> Thread Stacks and Local Variables<br/> The call-stacks of threads at the moment of the snapshot, and per-frame information about<br/> local<br/> objects</p>\n<p>使用：<br/> Histogram：可以列出内存中的对象，对象的个数及其大小<br/> Class Name:类名称，java类名<br/> Objects:类的对象的数量，这个对象被创建了多少个<br/> Shallow Heap:一个对象内存的消耗大小，不包含对其他对象的引用<br/> Retained Heap:是shallow Heap的总和，即该对象被GC之后所能回收到内存的总和</p>\n<p>右击类名—&gt;List Objects—&gt;with incoming references—&gt;列出该类的实例</p>\n<p>右击Java对象名—&gt;Merge Shortest Paths to GC Roots—&gt;exclude all …—&gt;找到GCRoot以及原因</p>\n<p>Leak Suspects：查找并分析内存泄漏的可能原因：Reports—&gt;Leak Suspects—&gt;Details<br/> Top Consumers：列出大对象</p>\n<p><strong>heaphero</strong></p>\n<p>https://heaphero.io/</p>\n<p><strong>GC日志分析</strong></p>\n<p>要想分析日志的信息，得先拿到GC日志文件才行，所以得先配置一下，根据前面参数的学习，下<br/> 面的配置很容易看懂。比如打开windows中的catalina.bat，在第一行加上</p>\n<pre><code>XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -Xloggc:$CATALINA_HOME/logs/gc.log\n</code></pre>\n<p><strong>不同收集器日志</strong><br/> （1）Parallel GC：【吞吐量优先】</p>\n<pre><code>2019-06-10T23:21:53.305+0800: 1.303: [GC (Allocation Failure)\n [PSYoungGen: 65536K[Young区回收前]-&gt;10748K[Young区回收后](76288K[Young区总大小])]\n            65536K[整个 堆回收前]-&gt;15039K[整个堆回收后](251392K[整个堆总大小]),\n            0.0113277 secs] [Times: user=0.00 sys=0.00, real=0.01 secs]\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\10c99225008a40c084a4d21fd305aba6.png\"/><br/> （2）CMS：【停顿时间优先】<br/> 参数设置：-XX:+UseConcMarkSweepGC -Xloggc:cms-gc.log<br/> 这里产生的日志格式和上面差不多。</p>\n<p>（3）G1：【停顿时间优先】<br/> 参数设置：-XX:+UseG1GC -Xloggc:g1-gc.log<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4b207132c25e4bb087a56d5e57cff5f8.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6684251d5a4643febec6be124bafe6fa.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\340790f54fd349f3aabdd6bb2b4a1c60.png\"/></p>\n<p><strong>GCViewer</strong><br/> java -jar gcviewer-1.36-SNAPSHOT.jar</p>\n<p><strong>gceasy</strong><br/> http://gceasy.io</p>\n<p><strong>gcplot</strong><br/> https://it.gcplot.com/</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 1, "time": "2022-09-07 12:54:41", "summary": "问题排查可视化工具工具是自带的可视化监控工具。查看应用程序的运行概况、监控堆信息、永久区使用情况、类加载情况等。命令行中输入：命令行中输入：插件下载地址：可以监控本地的进程的，类，线程等在线调试是开源"}