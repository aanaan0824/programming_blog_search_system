{"blogid": "125726872", "writerAge": "码龄2年", "writerBlogNum": "61", "writerCollect": "18", "writerComment": "12", "writerFan": "690", "writerGrade": "3级", "writerIntegral": "669", "writerName": "低调$(生活)", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125726872.jpg", "writerRankTotal": "26581", "writerRankWeekly": "2922", "writerThumb": "44", "writerVisitNum": "18543", "blog_read_count": "503", "blog_time": "于 2022-09-03 20:44:16 发布", "blog_title": "黑马瑞吉外卖项目开发笔记", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"-toc\" style=\"margin-left:0px;\"></p>\n<p id=\"%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%95%B4%E4%BD%93%E4%BB%8B%E7%BB%8D-toc\" style=\"margin-left:0px;\"><a href=\"#%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%95%B4%E4%BD%93%E4%BB%8B%E7%BB%8D\">软件开发整体介绍</a></p>\n<p id=\"%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B\">开发流程</a></p>\n<p id=\"%C2%A0%E8%A7%92%E8%89%B2%E5%88%86%E5%B7%A5-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E8%A7%92%E8%89%B2%E5%88%86%E5%B7%A5\"> 角色分工</a></p>\n<p id=\"%C2%A0%E8%BD%AF%E4%BB%B6%E7%8E%AF%E5%A2%83-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E8%BD%AF%E4%BB%B6%E7%8E%AF%E5%A2%83\"> 软件环境</a></p>\n<p id=\"%C2%A0%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D\"> 瑞吉外卖项目介绍</a></p>\n<p id=\"%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D-toc\" style=\"margin-left:40px;\"><a href=\"#%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D\">项目介绍</a></p>\n<p id=\"%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B%E5%B1%95%E7%A4%BA%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B%E5%B1%95%E7%A4%BA%C2%A0\">产品原型展示 </a></p>\n<p id=\"%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B%C2%A0\">技术选型 </a></p>\n<p id=\"%C2%A0%E5%8A%9F%E8%83%BD%E6%9E%B6%E6%9E%84-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E5%8A%9F%E8%83%BD%E6%9E%B6%E6%9E%84\"> 功能架构</a></p>\n<p id=\"%C2%A0%E8%A7%92%E8%89%B2-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E8%A7%92%E8%89%B2\"> 角色</a></p>\n<p id=\"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\">开发环境搭建</a></p>\n<p id=\"%E6%95%B0%E6%8D%AE%E5%BA%93%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\">数据库环境搭建</a></p>\n<p id=\"%C2%A0Maven%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0Maven%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\"> Maven环境搭建</a></p>\n<p id=\"1.%E7%9B%B4%E6%8E%A5%E5%88%9B%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE%EF%BC%88%E8%BF%99%E9%87%8C%E6%98%AF%E6%B2%A1%E6%9C%89%E7%94%A8springboot%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%EF%BC%89-toc\" style=\"margin-left:80px;\"><a href=\"#1.%E7%9B%B4%E6%8E%A5%E5%88%9B%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE%EF%BC%88%E8%BF%99%E9%87%8C%E6%98%AF%E6%B2%A1%E6%9C%89%E7%94%A8springboot%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%EF%BC%89\">1.直接创建maven项目（这里是没有用springboot快捷方式创建）</a></p>\n<p id=\"2.%E5%AF%BC%E5%85%A5pom%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:80px;\"><a href=\"#2.%E5%AF%BC%E5%85%A5pom%E6%96%87%E4%BB%B6\">2.导入pom文件</a></p>\n<p id=\"3.%E6%B7%BB%E5%8A%A0%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6application.yml-toc\" style=\"margin-left:80px;\"><a href=\"#3.%E6%B7%BB%E5%8A%A0%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6application.yml\">3.添加核心配置文件application.yml</a></p>\n<p id=\"4.%E7%BC%96%E5%86%99%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E7%B1%BB-toc\" style=\"margin-left:80px;\"><a href=\"#4.%E7%BC%96%E5%86%99%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E7%B1%BB\">4.编写项目启动类</a></p>\n<p id=\"5.%E6%B7%BB%E5%8A%A0%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90-toc\" style=\"margin-left:80px;\"><a href=\"#5.%E6%B7%BB%E5%8A%A0%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90\">5.添加前端资源</a></p>\n<p id=\"6.springboot%E9%A1%B9%E7%9B%AE%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84-toc\" style=\"margin-left:80px;\"><a href=\"#6.springboot%E9%A1%B9%E7%9B%AE%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84\">6.springboot项目基本结构</a></p>\n<p id=\"%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93\">功能开发总结</a></p>\n<p id=\"1.%E5%8A%9F%E8%83%BD%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E5%8A%9F%E8%83%BD%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93\">1.功能接口开发总结</a></p>\n<p id=\"%E2%80%8B%E7%BC%96%E8%BE%91%C2%A0%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E2%80%8B%E7%BC%96%E8%BE%91-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%80%8B%E7%BC%96%E8%BE%91%C2%A0%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E2%80%8B%E7%BC%96%E8%BE%91\">​编辑 需求分析​编辑</a></p>\n<p id=\"%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91\">代码开发</a></p>\n<p id=\"2.%E9%80%9A%E7%94%A8%E7%BB%93%E6%9E%9C%E9%9B%86-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E9%80%9A%E7%94%A8%E7%BB%93%E6%9E%9C%E9%9B%86\">2.通用结果集</a></p>\n<p id=\"3.%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F%E5%8F%8Aspringboot%E7%9B%B8%E5%85%B3%E7%9A%84%E6%B3%A8%E8%A7%A3%EF%BC%88%E5%B8%B8%E7%94%A8%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#3.%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F%E5%8F%8Aspringboot%E7%9B%B8%E5%85%B3%E7%9A%84%E6%B3%A8%E8%A7%A3%EF%BC%88%E5%B8%B8%E7%94%A8%EF%BC%89\">3.请求方式及springboot相关的注解（常用）</a></p>\n<p id=\"4.Session-toc\" style=\"margin-left:40px;\"><a href=\"#4.Session\">4.Session</a></p>\n<p id=\"5.%E8%BF%87%E6%BB%A4%E5%99%A8-toc\" style=\"margin-left:0px;\"><a href=\"#5.%E8%BF%87%E6%BB%A4%E5%99%A8\">        </a> <a href=\"#5.%E8%BF%87%E6%BB%A4%E5%99%A8\">5.过滤器</a></p>\n<p id=\"6.%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86-toc\" style=\"margin-left:40px;\"><a href=\"#6.%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86\">6.异常处理</a></p>\n<p id=\"7.md5%E5%8A%A0%E5%AF%86-toc\" style=\"margin-left:40px;\"><a href=\"#7.md5%E5%8A%A0%E5%AF%86\">7.md5加密</a></p>\n<p id=\"8.%E5%89%8D%E7%AB%AF%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92%E6%B5%81%E7%A8%8B%E7%A4%BA%E4%BE%8B-toc\" style=\"margin-left:40px;\"><a href=\"#8.%E5%89%8D%E7%AB%AF%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92%E6%B5%81%E7%A8%8B%E7%A4%BA%E4%BE%8B\">8.前端后端交互流程示例</a></p>\n<p id=\"9.%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2-toc\" style=\"margin-left:40px;\"><a href=\"#9.%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2\">9.分页查询</a></p>\n<p id=\"%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91-toc\" style=\"margin-left:80px;\"><a href=\"#%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91\">需求分析及代码开发</a></p>\n<p id=\"%C2%A0%E5%9B%BE%E7%A4%BA%E7%A4%BA%E4%BE%8B-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E5%9B%BE%E7%A4%BA%E7%A4%BA%E4%BE%8B\"> 图示示例</a></p>\n<p id=\"10.js%E5%AF%B9long%E5%9E%8B%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%A4%84%E7%90%86%E5%AF%BC%E8%87%B4%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98-toc\" style=\"margin-left:40px;\"><a href=\"#10.js%E5%AF%B9long%E5%9E%8B%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%A4%84%E7%90%86%E5%AF%BC%E8%87%B4%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98\">10.js对long型数据进行处理导致精度丢失问题</a></p>\n<p id=\"11.%E5%85%AC%E5%85%B1%E5%AD%97%E6%AE%B5%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85-toc\" style=\"margin-left:40px;\"><a href=\"#11.%E5%85%AC%E5%85%B1%E5%AD%97%E6%AE%B5%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85\">11.公共字段自动填充</a></p>\n<p id=\"%E9%9C%80%E6%B1%82%E5%BC%80%E5%8F%91-toc\" style=\"margin-left:80px;\"><a href=\"#%E9%9C%80%E6%B1%82%E5%BC%80%E5%8F%91\">需求开发</a></p>\n<p id=\"%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%C2%A0-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%C2%A0\">代码开发 </a></p>\n<p id=\"12.%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%8F%8A%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-toc\" style=\"margin-left:40px;\"><a href=\"#12.%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%8F%8A%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD\">12.文件上传及文件下载</a></p>\n<p id=\"%E7%AE%80%E8%A6%81%E4%BB%8B%E7%BB%8D-toc\" style=\"margin-left:80px;\"><a href=\"#%E7%AE%80%E8%A6%81%E4%BB%8B%E7%BB%8D\">简要介绍</a></p>\n<p id=\"%E2%80%8B%E7%BC%96%E8%BE%91%E2%80%8B%E7%BC%96%E8%BE%91-toc\" style=\"margin-left:40px;\"><a href=\"#%E2%80%8B%E7%BC%96%E8%BE%91%E2%80%8B%E7%BC%96%E8%BE%91\">​编辑​编辑</a></p>\n<p id=\"%E2%80%8B%E7%BC%96%E8%BE%91-toc\" style=\"margin-left:40px;\"><a href=\"#%E2%80%8B%E7%BC%96%E8%BE%91\">​编辑</a></p>\n<p id=\"%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91\">代码开发</a></p>\n<p id=\"13.Dto-toc\" style=\"margin-left:40px;\"><a href=\"#13.Dto\">13.Dto</a></p>\n<p id=\"13.%E7%9F%AD%E4%BF%A1%E5%8F%91%E9%80%81-toc\" style=\"margin-left:40px;\"><a href=\"#13.%E7%9F%AD%E4%BF%A1%E5%8F%91%E9%80%81\">13.短信发送</a></p>\n<p id=\"%E7%AE%80%E4%BB%8B-toc\" style=\"margin-left:80px;\"><a href=\"#%E7%AE%80%E4%BB%8B\">简介</a></p>\n<p id=\"%E6%93%8D%E4%BD%9C%E6%AD%A5%E9%AA%A4-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%93%8D%E4%BD%9C%E6%AD%A5%E9%AA%A4\">操作步骤</a></p>\n<p id=\"14.%20%E6%89%8B%E6%9C%BA%E5%8F%B7%E5%AE%9E%E7%8E%B0%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95-toc\" style=\"margin-left:40px;\"><a href=\"#14.%20%E6%89%8B%E6%9C%BA%E5%8F%B7%E5%AE%9E%E7%8E%B0%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95\">14. 手机号实现用户登录</a></p>\n<p id=\"15.%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6-toc\" style=\"margin-left:40px;\"><a href=\"#15.%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6\">15.事务控制</a></p>\n<hr id=\"hr-toc\"/>\n<h1>软件开发整体介绍</h1>\n<h2 id=\"%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B\">开发流程</h2>\n<p><img alt=\"\" height=\"666\" src=\"..\\..\\static\\image\\1fb8c14cef684095880ef1ff46317a9e.png\" width=\"1159\"/></p>\n<h2 id=\"%C2%A0%E8%A7%92%E8%89%B2%E5%88%86%E5%B7%A5\"> 角色分工</h2>\n<p><img alt=\"\" height=\"472\" src=\"..\\..\\static\\image\\2903f346ef424817aaeb7be57b1a17d4.png\" width=\"1200\"/></p>\n<h2 id=\"%C2%A0%E8%BD%AF%E4%BB%B6%E7%8E%AF%E5%A2%83\"> 软件环境</h2>\n<p><img alt=\"\" height=\"651\" src=\"..\\..\\static\\image\\efee195e932946e4a1478aaa0c0535a7.png\" width=\"1200\"/></p>\n<h1 id=\"%C2%A0%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D\"> 瑞吉外卖项目介绍</h1>\n<h2 id=\"%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D\">项目介绍</h2>\n<p><img alt=\"\" height=\"470\" src=\"..\\..\\static\\image\\1e2fd73550b849f3aa0b3a1ed35916ce.png\" width=\"1200\"/></p>\n<h2 id=\"%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B%E5%B1%95%E7%A4%BA%C2%A0\">产品原型展示 </h2>\n<p><img alt=\"\" height=\"679\" src=\"..\\..\\static\\image\\749b1755b58547d293b39cbcbcf2723f.png\" width=\"1200\"/></p>\n<h2 id=\"%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B%C2%A0\">技术选型 </h2>\n<p><img alt=\"\" height=\"550\" src=\"..\\..\\static\\image\\d8cdcbdcdcde49f0a5a7951510d1e5a8.png\" width=\"1200\"/></p>\n<h2 id=\"%C2%A0%E5%8A%9F%E8%83%BD%E6%9E%B6%E6%9E%84\"> 功能架构</h2>\n<p><img alt=\"\" height=\"532\" src=\"..\\..\\static\\image\\51cfb70cc73341509dd2c168275a5237.png\" width=\"1200\"/></p>\n<h2 id=\"%C2%A0%E8%A7%92%E8%89%B2\"> 角色</h2>\n<p><img alt=\"\" height=\"592\" src=\"..\\..\\static\\image\\9bac4644ea0f476186456874c7496b51.png\" width=\"1200\"/></p>\n<p></p>\n<h1 id=\"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\">开发环境搭建</h1>\n<h2 id=\"%E6%95%B0%E6%8D%AE%E5%BA%93%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\">数据库环境搭建</h2>\n<p><img alt=\"\" height=\"580\" src=\"..\\..\\static\\image\\2befd67dfaa94883ad69ba3eb4ddb6f3.png\" width=\"767\"/></p>\n<p> 我这里用的是Navicat图形化工具创建的，或者通过命令行创建，不过就是比较麻烦，这里就不介绍了。</p>\n<p>然后导入我们的sql脚本，我们就可以看到下面的数据库文件了。</p>\n<p><img alt=\"\" height=\"240\" src=\"..\\..\\static\\image\\fa03e3cb63844d19b93f18382c8a67cf.png\" width=\"203\"/></p>\n<p><img alt=\"\" height=\"466\" src=\"..\\..\\static\\image\\6acd5fddaad048e69783670bbf77a308.png\" width=\"596\"/></p>\n<h2 id=\"%C2%A0Maven%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\"> Maven环境搭建</h2>\n<h3 id=\"1.%E7%9B%B4%E6%8E%A5%E5%88%9B%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE%EF%BC%88%E8%BF%99%E9%87%8C%E6%98%AF%E6%B2%A1%E6%9C%89%E7%94%A8springboot%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%EF%BC%89\">1.直接创建maven项目（这里是没有用springboot快捷方式创建）</h3>\n<p><img alt=\"\" height=\"826\" src=\"..\\..\\static\\image\\3f521ddca7064d959b67d37f9b7d4bf5.png\" width=\"1200\"/></p>\n<h3 id=\"2.%E5%AF%BC%E5%85%A5pom%E6%96%87%E4%BB%B6\">2.导入pom文件</h3>\n<p>这里是我们用到的依赖</p>\n<pre><code class=\"language-XML\">&lt;dependencies&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n            &lt;scope&gt;compile&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;3.4.2&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;version&gt;1.18.20&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;\n            &lt;version&gt;1.2.76&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;commons-lang&lt;/groupId&gt;\n            &lt;artifactId&gt;commons-lang&lt;/artifactId&gt;\n            &lt;version&gt;2.6&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n            &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;1.1.23&lt;/version&gt;\n        &lt;/dependency&gt;\n\n    &lt;/dependencies&gt;</code></pre>\n<h3 id=\"3.%E6%B7%BB%E5%8A%A0%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6application.yml\">3.添加核心配置文件application.yml</h3>\n<pre><code>server:\n  port: 8080\nspring:\n  application:\n    name: reggie_take_out\n  datasource:\n    druid:\n      driver-class-name: com.mysql.cj.jdbc.Driver\n      url: jdbc:mysql://localhost:3306/reggie?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true\n      username: root\n      password: root\nmybatis-plus:\n  configuration:\n    #在映射实体或者属性时，将数据库中表名和字段名中的下划线去掉，按照驼峰命名法映射\n    map-underscore-to-camel-case: true\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n  global-config:\n    db-config:\n      id-type: ASSIGN_ID</code></pre>\n<h3 id=\"4.%E7%BC%96%E5%86%99%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E7%B1%BB\">4.编写项目启动类</h3>\n<pre><code class=\"language-java\">@Slf4j//日志\n@SpringBootApplication//项目启动类注解\npublic class ReggieApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(ReggieApplication.class,args);\n        log.info(\"项目启动成功...\");\n    }\n}</code></pre>\n<h3 id=\"5.%E6%B7%BB%E5%8A%A0%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90\">5.添加前端资源</h3>\n<p>默认情况下我们只能访问static或template下的静态资源</p>\n<p>所以我们要写配置类</p>\n<pre><code class=\"language-java\">@Slf4j\n@Configuration\npublic class WebMvcConfig extends WebMvcConfigurationSupport {\n    /**\n     * 设置静态资源映射\n     * @param registry\n     */\n    @Override\n    protected void addResourceHandlers(ResourceHandlerRegistry registry) {\n        log.info(\"开始进行静态资源映射...\");\n        registry.addResourceHandler(\"/backend/**\")\n                .addResourceLocations(\"classpath:/backend/\");\n        registry.addResourceHandler(\"/front/**\")\n                .addResourceLocations(\"classpath:/front/\");\n    }\n}</code></pre>\n<h3 id=\"6.springboot%E9%A1%B9%E7%9B%AE%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84\">6.springboot项目基本结构</h3>\n<p><img alt=\"\" height=\"736\" src=\"..\\..\\static\\image\\1a2c1585161740fb9bfd5f9494210636.png\" width=\"778\"/></p>\n<p> </p>\n<p>图中的img是我需要的，正常情况下应该放在resource下。大致结构是这样的。</p>\n<p>common包基本放置一些通用的类。config是配置类包 。controller是控制类包。dto是数据传输对象的意思，他的类跟实体类类似，但又有区别，我们放到下面再去专门讲解。entry包是实体类包，一般与数据表相对应。filter包是过滤器包。mapper是映射类包，负责实体映射。service是业务类包，包括业务接口和对应实现类。utils包是工具类包。</p>\n<h1 id=\"%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93\">功能开发总结</h1>\n<h2 id=\"1.%E5%8A%9F%E8%83%BD%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93\">1.功能接口开发总结</h2>\n<p>开发一个功能接口，我们基本需要几个简单步骤，首先对功能进行需求分析，然后我们编写需要操作的实体类（对应我们的数据表），然后创建对应的mapper，然后接着创建对应的service接口和实现类，最后创建我们的controller控制类。接着我们按需求开发即可。下面是一个登录接口开发过程</p>\n<p>下面是对应要开发的前端静态页面，我们通过F12进行调试观察。</p>\n<p></p>\n<h3 id=\"%E2%80%8B%E7%BC%96%E8%BE%91%C2%A0%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E2%80%8B%E7%BC%96%E8%BE%91\"><img alt=\"\" height=\"865\" src=\"..\\..\\static\\image\\99c41da01feb4109960c88ab936febc8.png\" width=\"1200\"/><strong> 需求分析</strong><img alt=\"\" height=\"491\" src=\"..\\..\\static\\image\\3dc8b58539c54075ad86fa3476987520.png\" width=\"1200\"/></h3>\n<p> 对应的需要操作的是employee表。下面是html中的javascript相关登录代码。我们作为后端开发人员，我们只需要看懂即可。例如handleLogin()是我们的登录方法，loginApi()是我们的发送请求接口。我们进入接口，即可查看我们要访问的地址。（从网页上用f12查看也是一样的）</p>\n<p><img alt=\"\" height=\"479\" src=\"..\\..\\static\\image\\58d724f2a25f4625a2d3ab92068dca3c.png\" width=\"979\"/></p>\n<p> 我们在写后端代码时应当返回上面几个信息，然后相应逻辑如下。</p>\n<p><img alt=\"\" height=\"704\" src=\"..\\..\\static\\image\\8c328525d45a4dba91482e67e1f25f4b.png\" width=\"1200\"/></p>\n<h3 id=\"%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91\">代码开发</h3>\n<p>首先创建了mapper，service，controller，common，entity包（我们这里用的是mybatis框架）</p>\n<p>先创建实体类</p>\n<pre><code class=\"language-java\">/**\n * 员工实体类\n */\n@Data\npublic class Employee implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    private Long id;\n\n    private String username;\n\n    private String name;\n\n    private String password;\n\n    private String phone;\n\n    private String sex;\n\n    private String idNumber;//身份证号码\n\n    private Integer status;\n\n    private LocalDateTime createTime;\n\n    private LocalDateTime updateTime;\n\n    @TableField(fill = FieldFill.INSERT)\n    private Long createUser;\n\n    @TableField(fill = FieldFill.INSERT_UPDATE)\n    private Long updateUser;\n\n}</code></pre>\n<p>再创建Mapper接口</p>\n<pre><code class=\"language-java\">@Mapper\npublic interface EmployeeMapper extends BaseMapper&lt;Employee&gt; {\n}</code></pre>\n<p>接着创建业务接口和实现类</p>\n<pre><code class=\"language-java\">public interface EmployeeService extends IService&lt;Employee&gt; {\n}\n\n@Service\npublic class EmployeeServiceImpl extends ServiceImpl&lt;EmployeeMapper, Employee&gt; implements EmployeeService {\n}</code></pre>\n<p>然后创建controller类</p>\n<pre><code class=\"language-java\">@Slf4j\n@RestController\n@RequestMapping(\"/employee\")\npublic class EmployeeController {\n\n    @Autowired\n    private EmployeeService employeeService;\n\n    /**\n     * 员工登录\n     * @param request\n     * @param employee\n     * @return\n     */\n    //@RequestBody返回json数据，并封装成employee对象，\n    // HttpServletRequest将员工id存入session\n    @PostMapping(\"/login\")\n    public R&lt;Employee&gt; login(HttpServletRequest request, @RequestBody Employee employee){\n        //将页面提交的密码进行md5加密处理\n        String password = employee.getPassword();\n        password= DigestUtils.md5DigestAsHex(password.getBytes());\n        //根据页面提交用户名来查询数据库\n        LambdaQueryWrapper&lt;Employee&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();\n        queryWrapper.eq(Employee::getUsername,employee.getUsername());\n        Employee emp = employeeService.getOne(queryWrapper);//因为用户名是唯一的\n        //如果没有查到，则返回失败结果\n        if(emp==null){\n            return R.error(\"登陆失败\");\n        }\n        //比对密码\n        if(!emp.getPassword().equals(password)){\n            return R.error(\"登陆失败\");\n        }\n        //查看员工状态，是否为禁用状态\n        if(emp.getStatus()==0){\n            return R.error(\"账号已禁用\");\n        }\n        //登陆成功，将员工id存入session\n        request.getSession().setAttribute(\"employee\",emp.getId());\n        return R.success(emp);\n    }\n}</code></pre>\n<h2 id=\"2.%E9%80%9A%E7%94%A8%E7%BB%93%E6%9E%9C%E9%9B%86\">2.通用结果集</h2>\n<p>我们这里封装了一个通用的结果集，我们返回前端的信息都是用它来封装的，方便且实用。</p>\n<p>里面的code=0或1，我们在前端都有对应的处理。我们需要注意的是在不同的前端对应的处理不同。下面是登录页面的处理。1是成功，0是失败.</p>\n<pre><strong><span style=\"color:#956fe7;\">if (String(res.code) === '1') {\n  localStorage.setItem('userInfo',JSON.stringify(res.data))\n  window.location.href= '/backend/index.html'\n} else {\n  this.$message.error(res.msg)\n  this.loading = false\n}</span></strong></pre>\n<pre><code class=\"language-java\">@Data\npublic class R&lt;T&gt; {\n\n    private Integer code; //编码：1成功，0和其它数字为失败\n\n    private String msg; //错误信息\n\n    private T data; //数据\n\n    private Map map = new HashMap(); //动态数据\n\n    public static &lt;T&gt; R&lt;T&gt; success(T object) {\n        R&lt;T&gt; r = new R&lt;T&gt;();\n        r.data = object;\n        r.code = 1;\n        return r;\n    }\n\n    public static &lt;T&gt; R&lt;T&gt; error(String msg) {\n        R r = new R();\n        r.msg = msg;\n        r.code = 0;\n        return r;\n    }\n\n    public R&lt;T&gt; add(String key, Object value) {\n        this.map.put(key, value);\n        return this;\n    }\n\n}</code></pre>\n<p></p>\n<h2 id=\"3.%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F%E5%8F%8Aspringboot%E7%9B%B8%E5%85%B3%E7%9A%84%E6%B3%A8%E8%A7%A3%EF%BC%88%E5%B8%B8%E7%94%A8%EF%BC%89\">3.请求方式及springboot相关的注解（常用）</h2>\n<pre><strong>@RequestMapping(\"/employee\")//这个我们是在类上加的（必须加）。\n参数代表该类的请求路径，可有可无。下面的是在方法上加的，注意区分。</strong></pre>\n<pre><code class=\"language-java\">查找\nget：@GetMapping\npost: @PostMapping\n删除\ndelete: @DeleteMapping\n插入，修改\nput: @PutMapping</code></pre>\n<p>他们也可加参数，例如 @PostMapping(\"/login\")，下面这三种是我们比较常用的。</p>\n<pre><code class=\"language-java\">这个是@RequestBody的一个例子，他表示我们返回的是Employee的json形式的数据。\n@PostMapping(\"/login\")\n    public R&lt;Employee&gt; login(@RequestBody Employee employee){\n}\n\n这个是@PathVariable的例子，他是映射 URL 绑定的占位符。\n通过 @PathVariable 可以将 URL 中占位符参数绑定到控制器处理方法的入参中：URL 中的 {xxx} 占位符可以通过@PathVariable(“xxx“) 绑定到操作方法的入参中。\n这种形式也可称之为REST风格。\n@GetMapping(\"/{id}\")\n    public R&lt;Employee&gt; getById(@PathVariable Long id){\n}\n\n\n这个是@RequestParam，主要用于将请求参数区域的数据映射到控制层方法的参数上。\n首先我们需要知道@RequestParam注解主要有哪些参数\n    value：请求中传入参数的名称，如果不设置后台接口的value值，则会默认为该变量名。否则在后台接口中ids将接收不到对应的数据\n    required：该参数是否为必传项。默认是true，表示请求中一定要传入对应的参数，否则会报404错误，如果设置为false时，当请求中没有此参数，将会默认为null,而对于基本数据类型的变量，则必须有值，这时会抛出空指针异常。如果允许空值，则接口中变量需要使用包装类来声明。\n    defaultValue：参数的默认值，如果请求中没有同名的参数时，该变量默认为此值。注意默认值可以使用SpEL表达式，如\"#{systemProperties[‘java.vm.version’]}\"\n@DeleteMapping\n    public R&lt;String&gt; delete(@RequestParam List&lt;Long&gt; ids){\n}\n\n@PostMapping(\"/status/{code}\")\n    public R&lt;String&gt; stopSale(@RequestParam List&lt;Long&gt; ids,@PathVariable int code){\n}</code></pre>\n<h2 id=\"4.Session\">4.Session</h2>\n<p>我们在编程中常常需要在页面间传值。这时候我们经常需要用到session。（用来存储数据）</p>\n<p></p>\n<p></p>\n<pre><code class=\"language-java\">@PostMapping(\"/login\")\npublic R&lt;Employee&gt; login(HttpServletRequest request, @RequestBody Employee employee){\n     //登陆成功，将员工id存入session\n     request.getSession().setAttribute(\"employee\",emp.getId());\n        \n     //清除session中的id\n     request.getSession().removeAttribute(\"employee\");\n}</code></pre>\n<p></p>\n<p></p>\n<h1 id=\"5.%E8%BF%87%E6%BB%A4%E5%99%A8\">5.过滤器</h1>\n<p>由于用户需要登录才能访问内部页面等需求，我们在开发中我们经常需要用到过滤器。</p>\n<p>下面是一个例子，如果未登录就访问其他页面，自动跳转至登录页面</p>\n<p><img alt=\"\" height=\"549\" src=\"..\\..\\static\\image\\48e22dca4114408f86967680ac11f001.png\" width=\"1090\"/></p>\n<pre><code class=\"language-java\">/**\n * 检查用户是否登录\n */\n@WebFilter(filterName = \"loginCheckFilter\",urlPatterns = \"/*\")\n@Slf4j\npublic class LoginCheckFilter implements Filter {\n    //路径匹配器，支持通配符\n    public static final AntPathMatcher PATH_MATCHER=new AntPathMatcher();\n\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        HttpServletRequest request=(HttpServletRequest) servletRequest;\n        HttpServletResponse response=(HttpServletResponse) servletResponse;\n        //获取本次请求uri\n        String requestURI = request.getRequestURI();\n        //定义不需要处理的请求路径\n        String[] urls=new String[]{\n                \"/employee/login\",\n                \"/employee/logout\",\n                \"/backend/**\",\n                \"/front/**\"\n        };\n        //判断本次请求是否需要处理\n        boolean check = check(urls, requestURI);\n        //放行\n        if (check){\n            filterChain.doFilter(request,response);\n            return;\n        }\n        //判断登录状态\n        if (request.getSession().getAttribute(\"employee\")!=null){\n            filterChain.doFilter(request,response);\n            return;\n        }\n        //未登录，通过输出流方式向客户端响应数据\n        response.getWriter().write(JSON.toJSONString(R.error(\"NOTLOGIN\")));\n        return;\n    }\n\n    /**\n     * 路径匹配\n     * @param urls\n     * @param requestURI\n     * @return\n     */\n    public boolean check(String[] urls,String requestURI){\n        for (String url : urls) {\n            boolean match = PATH_MATCHER.match(url, requestURI);\n            if (match){\n                return true;\n            }\n        }\n        return false;\n    }\n</code></pre>\n<p> 然后在启动类添加注解<strong>@ServletComponentScan，</strong>这样我们就开启了<strong>过滤器功能。</strong></p>\n<h2 id=\"6.%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86\"><strong>6.</strong>异常处理</h2>\n<p></p>\n<p> 我们在开发中会经常遇到各种各样的异常，这时我们经常需要设置全局异常处理和自定义异常。</p>\n<pre><code class=\"language-java\">/**\n * 全局异常处理\n */\n@ControllerAdvice(annotations = {RestController.class, Controller.class})\n@ResponseBody\n@Slf4j\npublic class GlobalExceptionHandler {\n    /**\n     * 异常处理方法\n     * @return\n     */\n    @ExceptionHandler(SQLIntegrityConstraintViolationException.class)\n    public R&lt;String&gt; exceptionHandler(SQLIntegrityConstraintViolationException ex){\n        log.error(ex.getMessage());\n        if (ex.getMessage().contains(\"Duplicate entry\")){\n            String[] s = ex.getMessage().split(\" \");\n            String msg=s[2]+\"已存在\";\n            return R.error(msg);\n        }\n        return R.error(\"未知错误\");\n    }\n    /**\n     * 异常处理方法\n     * @return\n     */\n    @ExceptionHandler(CustomerException.class)\n    public R&lt;String&gt; exceptionHandler(CustomerException ex){\n        log.error(ex.getMessage());\n        return R.error(ex.getMessage());\n    }\n}\n/**\n * 自定义业务异常类\n */\npublic class CustomerException extends RuntimeException{\n    public CustomerException(String message){\n        super(message);\n    }\n}</code></pre>\n<h2 id=\"7.md5%E5%8A%A0%E5%AF%86\">7.md5加密</h2>\n<p>我们在登录过程中处理数据时我们需要对密码进行加密，以保证账户的安全。</p>\n<p>我们经常会用到md5加密，这个是比较常用的。下面就来简要介绍一下。</p>\n<p><strong>MD5加密是一种不可逆的加密算法，不可逆加密算法的特征是加密过程中不需要使用密钥，输入明文后由系统直接经过加密算法处理成密文，这种加密后的数据是无法被解密的，只有重新输入明文，并再次经过同样不可逆的加密算法处理，得到相同的加密密文并被系统重新识别后，才能真正解密。</strong></p>\n<pre><code class=\"language-java\">下面是设置初始密码的例子。\n //设置初始密码，需要md5加密\n employee.setPassword(DigestUtils.md5DigestAsHex(\"123456\".getBytes()));\n employeeService.save(employee);\n</code></pre>\n<h2 id=\"8.%E5%89%8D%E7%AB%AF%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92%E6%B5%81%E7%A8%8B%E7%A4%BA%E4%BE%8B\">8.前端后端交互流程示例</h2>\n<p><img alt=\"\" height=\"328\" src=\"..\\..\\static\\image\\b451759910794d6cb2ccd5150c8a0792.png\" width=\"1104\"/></p>\n<h2 id=\"9.%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2\">9.分页查询</h2>\n<p>当我们需要显示的数据量庞大的时候，我们想要简洁明了的展示我们的数据，这时候分页就是我们的首选。以下是相关流程示例。（这里配置的mybatisPlus的分页插件）</p>\n<h3 id=\"%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91\">需求分析及代码开发</h3>\n<p><img alt=\"\" height=\"621\" src=\"..\\..\\static\\image\\edea33de7b6c4c76bc414483c9af384c.png\" width=\"1200\"/></p>\n<pre><code class=\"language-java\">/**\n * 配置MP的分页插件\n */\n@Configuration\npublic class MybatisPlusConfig {\n    @Bean\n    public MybatisPlusInterceptor mybatisPlusInterceptor(){\n        MybatisPlusInterceptor mybatisPlusInterceptor=new MybatisPlusInterceptor();\n        mybatisPlusInterceptor.addInnerInterceptor(new PaginationInnerInterceptor());\n        return mybatisPlusInterceptor;\n    }\n}\n    /**\n     * 员工信息分页查询\n     * @param page\n     * @param pageSize\n     * @param name\n     * @return\n     */\n    @GetMapping(\"/page\")\n    public R&lt;Page&gt; page(int page,int pageSize,String name){\n        log.info(\"page={},pageSize={},name={}\",page,pageSize,name);\n        //构造分页构造器\n        Page pageInfo=new Page(page,pageSize);\n        //构造条件构造器\n        LambdaQueryWrapper&lt;Employee&gt; queryWrapper=new LambdaQueryWrapper();\n        //添加过滤条件\n        queryWrapper.like(StringUtils.isNotEmpty(name),Employee::getName,name);\n        //添加排序条件\n        queryWrapper.orderByAsc(Employee::getUpdateTime);\n        //执行查询\n        employeeService.page(pageInfo,queryWrapper);\n        return R.success(pageInfo);\n    }</code></pre>\n<h3 id=\"%C2%A0%E5%9B%BE%E7%A4%BA%E7%A4%BA%E4%BE%8B\"> 图示示例</h3>\n<p><img alt=\"\" height=\"558\" src=\"..\\..\\static\\image\\b82788b4f0ea4cbe99b49e3e7211ec4d.png\" width=\"1200\"/></p>\n<h2></h2>\n<h2 id=\"10.js%E5%AF%B9long%E5%9E%8B%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%A4%84%E7%90%86%E5%AF%BC%E8%87%B4%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98\">10.js对long型数据进行处理导致精度丢失问题</h2>\n<p>在开发中，我们发现js对long型数据处理会导致精度丢失。</p>\n<p><strong>处理思想：</strong>在服务端给页面响应数据时进行处理，将long型数据转成String类型。</p>\n<p>下面是具体实现步骤。</p>\n<p></p>\n<p><img alt=\"\" height=\"573\" src=\"..\\..\\static\\image\\691a1965b21144979210abda6a4159b5.png\" width=\"1200\"/></p>\n<pre><code class=\"language-java\">    @PutMapping\n    //@RequestBody转换成json格式\n    public R&lt;String&gt; update(HttpServletRequest request,@RequestBody Employee employee){\n        log.info(employee.toString());\n        Long empId = (Long)request.getSession().getAttribute(\"employee\");\n        employee.setUpdateUser(empId);\n        employee.setUpdateTime(LocalDateTime.now());\n        employeeService.updateById(employee);\n        return R.success(\"员工信息修改成功\");\n    }\n/**\n * 对象映射器:基于jackson将Java对象转为json，或者将json转为Java对象\n * 将JSON解析为Java对象的过程称为 [从JSON反序列化Java对象]\n * 从Java对象生成JSON的过程称为 [序列化Java对象到JSON]\n */\npublic class JacksonObjectMapper extends ObjectMapper {\n    public static final String DEFAULT_DATE_FORMAT = \"yyyy-MM-dd\";\n    public static final String DEFAULT_DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n    public static final String DEFAULT_TIME_FORMAT = \"HH:mm:ss\";\n    public JacksonObjectMapper() {\n        super();\n        //收到未知属性时不报异常\n        this.configure(FAIL_ON_UNKNOWN_PROPERTIES, false);\n        //反序列化时，属性不存在的兼容处理\n      this.getDeserializationConfig().withoutFeatures(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n        SimpleModule simpleModule = new SimpleModule()\n                .addDeserializer(LocalDateTime.class, new LocalDateTimeDeserializer(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))\n                .addDeserializer(LocalDate.class, new LocalDateDeserializer(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))\n                .addDeserializer(LocalTime.class, new LocalTimeDeserializer(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)))\n\n                .addSerializer(BigInteger.class, ToStringSerializer.instance)\n                .addSerializer(Long.class, ToStringSerializer.instance)\n                .addSerializer(LocalDateTime.class, new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))\n                .addSerializer(LocalDate.class, new LocalDateSerializer(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))\n                .addSerializer(LocalTime.class, new LocalTimeSerializer(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)));\n        //注册功能模块 例如，可以添加自定义序列化器和反序列化器\n        this.registerModule(simpleModule);\n    }\n}\n    /**\n     * 扩展mvc框架的消息转换器\n     * @param converters\n     */\n    @Override\n    protected void extendMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) {\n        log.info(\"扩展消息转换器\");\n        //创建消息转换器对象\n        MappingJackson2HttpMessageConverter messageConverter=new MappingJackson2HttpMessageConverter();\n        //设置对象转换器\n        messageConverter.setObjectMapper(new JacksonObjectMapper());\n        //将上面的消息转换器对象追加到消息转换器容器中\n        converters.add(0,messageConverter);\n    }</code></pre>\n<h2 id=\"11.%E5%85%AC%E5%85%B1%E5%AD%97%E6%AE%B5%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85\">11.公共字段自动填充</h2>\n<h3 id=\"%E9%9C%80%E6%B1%82%E5%BC%80%E5%8F%91\">需求开发</h3>\n<p><img alt=\"\" height=\"525\" src=\"..\\..\\static\\image\\91202de8c88c4944a1de2d273b3aedfd.png\" width=\"1200\"/></p>\n<h3 id=\"%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%C2%A0\">代码开发 </h3>\n<p><img alt=\"\" height=\"311\" src=\"..\\..\\static\\image\\5348258ab36b48bcb79e3aff50190352.png\" width=\"1200\"/></p>\n<p> 由于要实现公共字段自动填充，我们就需要从session拿到一些数据，这里我们用ThreadLocal.</p>\n<p><img alt=\"\" height=\"578\" src=\"..\\..\\static\\image\\b077b72bed2949b29b31924e480d8e96.png\" width=\"1200\"/></p>\n<p><img alt=\"\" height=\"564\" src=\"..\\..\\static\\image\\a02adc8bc16c4ec08657f60b82fe8ff0.png\" width=\"1200\"/></p>\n<pre><code class=\"language-java\">/**\n * 自定义元数据对象处理器\n */\n@Component\n@Slf4j\npublic class MyMetaObjectHandler implements MetaObjectHandler {\n    /**\n     * 插入操作自动填充\n     * @param metaObject\n     */\n    @Override\n    public void insertFill(MetaObject metaObject) {\n        log.info(\"insert...\");\n        log.info(metaObject.toString());\n        metaObject.setValue(\"createTime\", LocalDateTime.now());\n        metaObject.setValue(\"updateTime\", LocalDateTime.now());\n        metaObject.setValue(\"createUser\", BaseContext.getCurrentId());\n        metaObject.setValue(\"updateUser\", BaseContext.getCurrentId());\n    }\n\n    /**\n     * 更新操作自动填充\n     * @param metaObject\n     */\n    @Override\n    public void updateFill(MetaObject metaObject) {\n        log.info(\"update...\");\n        log.info(metaObject.toString());\n\n        long id = Thread.currentThread().getId();\n        log.info(\"线程id为：{}\",id);\n\n        metaObject.setValue(\"updateTime\", LocalDateTime.now());\n        metaObject.setValue(\"updateUser\", BaseContext.getCurrentId());\n    }\n}\n\n//实体类中部分代码\n    @TableField(fill = FieldFill.INSERT)//插入时自动填充\n    private LocalDateTime createTime;\n    @TableField(fill = FieldFill.INSERT_UPDATE)//插入和更新时自动填充\n    private LocalDateTime updateTime;\n\n    @TableField(fill = FieldFill.INSERT)\n    private Long createUser;\n\n    @TableField(fill = FieldFill.INSERT_UPDATE)\n    private Long updateUser;</code></pre>\n<pre><code class=\"language-java\">/**\n * 基于ThreadLocal封装工具类，用于保存和获取当前登录用户id\n * 在每个线程内单独起作用\n */\npublic class BaseContext {\n    private static ThreadLocal&lt;Long&gt; threadLocal=new ThreadLocal&lt;&gt;();\n\n    /**\n     * 设置值\n     * @param id\n     */\n    public static void setCurrentId(Long id){\n        threadLocal.set(id);\n    }\n\n    /**\n     * 获取值\n     * @return\n     */\n    public static Long getCurrentId(){\n        return threadLocal.get();\n    }\n}</code></pre>\n<h2 id=\"12.%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%8F%8A%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD\">12.文件上传及文件下载</h2>\n<h3 id=\"%E7%AE%80%E8%A6%81%E4%BB%8B%E7%BB%8D\">简要介绍</h3>\n<h2 id=\"%E2%80%8B%E7%BC%96%E8%BE%91%E2%80%8B%E7%BC%96%E8%BE%91\"><img alt=\"\" height=\"550\" src=\"..\\..\\static\\image\\d1c3d033d7614e8aac4cf2ee304845b8.png\" width=\"1200\"/><img alt=\"\" height=\"330\" src=\"..\\..\\static\\image\\c9e748b7f8984e83908886d21fe57bb9.png\" width=\"1050\"/></h2>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p><img alt=\"\" height=\"571\" src=\"..\\..\\static\\image\\2eacd59d94bb4bf6bb5b4bbb5a5de158.png\" width=\"1200\"/></p>\n<h2 id=\"%E2%80%8B%E7%BC%96%E8%BE%91\"><img alt=\"\" height=\"340\" src=\"..\\..\\static\\image\\8416f88414d04a99af8979292b5118ec.png\" width=\"1127\"/></h2>\n<h3>代码开发</h3>\n<pre><code class=\"language-java\">/**\n * 文件上传和下载\n */\n@RestController\n@RequestMapping(\"/common\")\n@Slf4j\npublic class CommonController {\n    @Value(\"${reggie.path}\")\n    private String basePath;\n    /**\n     * 文件上传\n     * @param file\n     * @return\n     */\n    @PostMapping(\"/upload\")//名字file必须与前端一致\n    public R&lt;String&gt; upload(MultipartFile file){\n        //file是一个临时文件，需要转存到指定位置\n        log.info(file.toString());\n        //获取原始文件名\n        String originalFilename = file.getOriginalFilename();\n        String suffix=originalFilename.substring(originalFilename.lastIndexOf(\".\"));\n        //使用UUID重新生成文件名，防止文件名称重复造成文件覆盖\n        String fileName= UUID.randomUUID().toString()+suffix;\n        //创建目录对象\n        File dir=new File(basePath);\n        //判断当前目录是否存在\n        if (!dir.exists()){\n            dir.mkdirs();\n        }\n        try {\n            //将临时文件转存到指定位置\n            file.transferTo(new File(basePath+fileName));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return R.success(fileName);\n    }\n\n    /**\n     * 文件下载\n     * @param name\n     * @param response\n     */\n    @GetMapping(\"/download\")\n    public void download(String name, HttpServletResponse response){\n        try {//输入流读取文件内容\n            FileInputStream fileInputStream=new FileInputStream(new File(basePath+name));\n            //输出流，将文件写回浏览器，在浏览器展示文件内容\n            ServletOutputStream outputStream = response.getOutputStream();\n            response.setContentType(\"image/jpeg\");\n            int len=0;\n            byte[] bytes=new byte[1024];\n            while ((len=fileInputStream.read(bytes))!=-1){\n                outputStream.write(bytes,0,len);\n                outputStream.flush();\n            }\n            //关闭资源\n            outputStream.close();\n            fileInputStream.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}</code></pre>\n<h2 id=\"13.Dto\">13.Dto</h2>\n<p>数据传输对象（DTO）(Data Transfer Object)，是一种设计模式之间传输数据的软件应用系统。数据传输目标往往是<a href=\"https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E5%AF%B9%E8%B1%A1/3351868?fromModule=lemma_inlink\" title=\"数据访问对象\">数据访问对象</a>从数据库中检索数据。数据传输对象与数据交互对象或数据访问对象之间的差异是一个以不具有任何行为除了存储和检索的数据（访问和存取器）。</p>\n<p>由于我们在实际开发中实体类有时候满足不了我们的需求，比如本项目开发菜品，我们在菜品中需要口味的集合。</p>\n<p>所以这里我们既用到了口味实体，也用到了菜品实体，所以这里我们用到了dto，我们封装实体类，以得到我们想要的类。（Dish和DishFlavor分别对应一张数据表）</p>\n<pre><code class=\"language-java\">@Data\npublic class DishDto extends Dish {\n\n    private List&lt;DishFlavor&gt; flavors = new ArrayList&lt;&gt;();\n\n    private String categoryName;\n\n    private Integer copies;\n}</code></pre>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<h2></h2>\n<p></p>\n<h2 id=\"13.%E7%9F%AD%E4%BF%A1%E5%8F%91%E9%80%81\">13.短信发送</h2>\n<h3 id=\"%E7%AE%80%E4%BB%8B\">简介</h3>\n<p><img alt=\"\" height=\"580\" src=\"..\\..\\static\\image\\7e213cd194724147a8c64ce96929519e.png\" width=\"1200\"/></p>\n<p><strong>阿里云</strong></p>\n<p><img alt=\"\" height=\"285\" src=\"..\\..\\static\\image\\c8ee9bc3c6b8485d86c4d1bf43142a6f.png\" width=\"1200\"/></p>\n<h3 id=\"%E6%93%8D%E4%BD%9C%E6%AD%A5%E9%AA%A4\">操作步骤</h3>\n<p>1.添加签名</p>\n<p>2.添加模板</p>\n<p> 3.获取Assesskey</p>\n<p><img alt=\"\" height=\"239\" src=\"..\\..\\static\\image\\5351e246b14a4d7eb3b34548c1221652.png\" width=\"738\"/></p>\n<p>4.查看帮助文档，用原始java sdk测试</p>\n<p>5.用测试短信功能测试，需充值至少一块钱。（在首页我们可以找到测试接口）</p>\n<h2 id=\"14.%20%E6%89%8B%E6%9C%BA%E5%8F%B7%E5%AE%9E%E7%8E%B0%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95\">14. 手机号实现用户登录</h2>\n<p>这里我们通过session可以很简单的实现手机号登录。</p>\n<pre><code class=\"language-java\">   /**如果这里页面点击没反应，我们需要及时情理浏览器缓存\n     * 发送手机短信验证码\n     * @param user\n     * @return\n     */\n    @PostMapping(\"/sendMsg\")//json提交的要加requestbody\n    public R&lt;String&gt; sendMsg(@RequestBody User user,HttpSession httpSession){\n        //获取手机号\n        String phone=user.getPhone();\n        if (StringUtils.isNotEmpty(phone)){\n            //生成随机6位验证码\n            String code = ValidateCodeUtils.generateValidateCode(6).toString();\n            log.info(\"code={}\",code);\n            //调用api\n            SMSUtils.sendMessage(signName,templateCode,phone,code);\n            //将生成的验证码保存到session中\n            httpSession.setAttribute(phone,code);\n            return R.success(\"验证码发送成功\");\n        }\n        return R.error(\"短信发送失败\");\n    }\n\n    /**\n     * 移动端用户登录,后期设置验证码定时器\n     * @param map\n     * @param httpSession\n     * @return\n     */\n    @PostMapping(\"/login\")//json提交的要加requestbody\n    public R&lt;User&gt; login(@RequestBody Map map, HttpSession httpSession){\n        log.info(map.toString());\n        //获取手机号和验证码\n        String phone = map.get(\"phone\").toString();\n        String code = map.get(\"code\").toString();\n        //获取session验证码\n        Object codeInSession = httpSession.getAttribute(phone);\n        //比较\n        if (codeInSession!=null &amp;&amp; codeInSession.equals(code)){\n            LambdaQueryWrapper&lt;User&gt; queryWrapper=new LambdaQueryWrapper();\n            queryWrapper.eq(User::getPhone,phone);\n\n            User user = userService.getOne(queryWrapper);\n            if (user==null){\n                //判断当前手机号是否为新用户，若为新用户则自动完成注册\n                user=new User();\n                user.setPhone(phone);\n                user.setStatus(1);\n                userService.save(user);\n            }\n            httpSession.setAttribute(\"user\",user.getId());\n            return R.success(user);\n        }else if(codeInSession!=null &amp;&amp; !codeInSession.equals(code)){\n            return R.error(\"验证码错误\");\n        }\n        return R.error(\"登录失败\");\n    }</code></pre>\n<h2 id=\"15.%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6\">15.事务控制</h2>\n<p>我们只需要在业务层的方法上加上一个注解即可。他可保证事务的一致性。</p>\n<pre><code class=\"language-java\">    @Override\n    @Transactional//因为操作多张表，我们这里加入事务\n    public void saveWithFlavor(DishDto dishDto) {\n        //保存菜品的基本信息到菜品表dish\n        this.save(dishDto);\n\n        Long id = dishDto.getId();//菜品id\n        List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();\n        flavors=flavors.stream().map((item)-&gt;{\n            item.setDishId(id);\n            return item;\n        }).collect(Collectors.toList());\n        //保存菜品口味数据\n        dishFlavorService.saveBatch(flavors);\n    }</code></pre>\n<p>然后在启动类上加入@EnableTransactionManagement注解即可。</p>\n<p></p>\n<p></p>\n</div>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 1, "php": 0, "time": "2022-09-03 20:44:16", "summary": "目录软件开发整体介绍开发流程角色分工软件环境瑞吉外卖项目介绍项目介绍产品原型展示技术选型功能架构角色开发环境搭建数据库环境搭建环境搭建直接创建项目这里是没有用快捷方式创建导入文件添加核心配置文件编写项"}