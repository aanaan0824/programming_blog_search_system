{"blogid": "126629273", "writerAge": "码龄5年", "writerBlogNum": "34", "writerCollect": "150", "writerComment": "100", "writerFan": "170", "writerGrade": "3级", "writerIntegral": "597", "writerName": "热爱科技的刘同学", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126629273.jpg", "writerRankTotal": "27140", "writerRankWeekly": "430", "writerThumb": "112", "writerVisitNum": "16052", "blog_read_count": "431", "blog_time": "于 2022-08-31 20:30:27 发布", "blog_title": "【我的前端】面向 JavaScript 开发：前端必学的4种函数式编程技术", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"_JavaScript_4_0\"></a>【我的前端】面向 JavaScript 开发：前端必学的4种函数</h1>\n<p><mark>函数式编程技术</mark>是现代 Wed 开发中的热门话题。这一切都是关于将应用程序框架设计为简单功能的组合，一边写更多可扩展的代码。它允许您简单的交换任何功能而不会破坏程序的另一部分，并且更容易理解和调试程序。</p>\n<p>在本文中我们将讨论7种可用于 JavaScript 的函数式编程技术，让您更好地了解如何在Web开发项目中应用函数式编程。</p>\n<blockquote>\n<blockquote>\n<p>💖💖💖💕💕💕欢迎来到本博客💕💕💕💖💖💖</p>\n<p>🎁支持：如果觉得博主的文章写得还说得过去或者博客对您有帮助的话，可以关注一下博主，如果三连收藏支持就更好啦！这就是给予我最大的支持！</p>\n<p>🎉🎉Welcome to my blog!🎉🎉</p>\n</blockquote>\n<p>📃个人CSDN博客主页：<a href=\"https://studentliu.blog.csdn.net\">热爱科技的刘同学</a>🌈🌈🌈</p>\n</blockquote>\n<h1><a id=\"1_17\"></a>1、纯函数</h1>\n<p>如果我们发送相同的参数，纯函数会返回相同的结果。他们只是返回他们的操作结果，不看范围之外的任何东西。除了返回他们的返回值之外，纯函数不会影响任何东西。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">helloworld</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string\">'Hi ${name}'</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">helloworld</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Piumi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>副作用是函数式编程中的一个概念，当当一个函数不尽返回一个值，而且在后台更该组件时，它就会发生，当一个函数执行时，它有可能修改一些东西。最好减少副作用。这就是纯函数的一个优点，因为它的副作用很小。</p>\n<h1><a id=\"2_28\"></a>2、避免程序循环</h1>\n<p>纯函数式编程的一个显著特征是不变性。您将不得不抛弃标准的循环方法，例如for、while和do-while，以避免在变量初始化后发生变异（例如循环计数器）。<strong>相反</strong>，JavaScript提供了诸如map、filter、reduce和foreach等高阶函数抽象迭代过程。</p>\n<p>我在这里分别为foreach、map、filter和reduce各举一个例子：</p>\n<p>foreach：为数组中的每一个元素调用一个函数。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">73</span><span class=\"token punctuation\">,</span> <span class=\"token number\">84</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>addNumbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">addNumbers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numbers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    sum <span class=\"token operator\">+=</span> numbers<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>map：每个数组项映射到一个函数，函数调用的返回值帮助我们创建一个新数组，映射器函数将数组项作为输入并返回输出。</p>\n<pre><code class=\"prism language-javascript\">array<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>mapper<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>filter：根据条件过滤数组。在这种情况下，条件是一个函数，它获取数组中的每个元素并决定是否保存它，并且返回真实的布尔值。</p>\n<pre><code class=\"prism language-javascript\">array<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>reduce：将数组减少为单个值的函数。</p>\n<pre><code class=\"prism language-javascript\">array<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>reduce<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h1><a id=\"3_64\"></a>3、函数链</h1>\n<p>在JavaScript中，函数链接是一种允许在同一对象上按照顺序调用多个函数的模式。我们可以使用这种技术使用相同的对象调用多个函数，它是代码更具可读性，并减少了冗余代码的数量。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">addNumber</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">p<span class=\"token punctuation\">,</span> q</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>output <span class=\"token operator\">=</span> p <span class=\"token operator\">+</span> q<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">multiplyNumber</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>output <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>output <span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">addNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">multiplyNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>在上面的代码示例中，由于addNumber函数反映了当前的obj对象，因此返回值包含了附加的函数。我们在同一对象运行第二个函数multiplyNumber以便于它们链接在一起。</p>\n<h1><a id=\"4Currying_87\"></a>4、Currying</h1>\n<p>Currying是将多参数函数分解为一元（单参数）高阶函数序列的过程。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fsum</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Currying functions</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fsum_curry</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fsum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 12</span>\n<span class=\"token function\">fsum_curry</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 12</span>\n</code></pre>\n<p>这里柯里化的好处是记忆。我们现在可以记住函数调用中的某些参数，以便以后重用他们，而无需复制和重新计算。</p>\n<h1><a id=\"_108\"></a>结论</h1>\n<p>函数式编程在JavaScript开发人员中越来越流行，因为它简化了复杂应用程序的实用，是它们更具可读性。</p>\n<p>感谢您的阅读！学到了吗？记得点赞支持❤</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-08-31 20:30:27", "summary": "我的前端面向开发：前端必学的种函数函数式编程技术是现代开发中的热门话题。这一切都是关于将应用程序框架设计为简单功能的组合，一边写更多可扩展的代码。它允许您简单的交换任何功能而不会破坏程序的另一部分，并"}