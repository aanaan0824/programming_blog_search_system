{"blogid": "123241559", "writerAge": "码龄3年", "writerBlogNum": "15", "writerCollect": "32", "writerComment": "0", "writerFan": "1", "writerGrade": "2级", "writerIntegral": "166", "writerName": "梦一居士", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123241559.jpg", "writerRankTotal": "113593", "writerRankWeekly": "779430", "writerThumb": "8", "writerVisitNum": "13111", "blog_read_count": "6057", "blog_time": "于 2022-03-02 22:04:09 发布", "blog_title": "JS的遍历方法集合", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"24JavaScript_0\"></a>24个JavaScript循环遍历方法</h1>\n<p><a href=\"https://mp.weixin.qq.com/s/ALHYR37-hEmzNQ67bjPTog\">24个JavaScript循环遍历方法</a><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5335f843b375455b8a3461f129a3a1d6.png\"/></p>\n<h2><a id=\"__4\"></a>一 数组方法</h2>\n<h3><a id=\"1_forEach_6\"></a>1. forEach()</h3>\n<p><code>forEach</code> 方法用于调用数组的每一个元素，并将元素传递给回调函数。数组中的每一个值都会调用回调函数。</p>\n<pre><code class=\"prism language-js\"> array<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>currentValue<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>thisValue<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>该方法的第一个参数为回调函数，是必传的，它有三个参数:</p>\n<ul><li>currentValue: 必须，当前元素</li><li>index： 可选，当前元素索引值</li><li>arr： 可选，当前元素所属的数组对象</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">+</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span>item<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>该方法还可以有第二个参数，用来绑定回调函数内部this变量（前提是回调函数不是箭头函数，因为箭头函数没有this）</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//  9 8 7 6 5</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> arr1<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><font color=\"#ff0000\">注意：</font></p>\n<ul><li>forEach 方法不会改变原数组，也没有返回值</li><li>forEach无法使用break，continue跳出循环，使用return时，效果和在for循环中使用continue一致</li><li>forEach方法无法遍历对象，仅适用于数组的遍历</li></ul>\n<h3><a id=\"2_map_43\"></a>2. map()</h3>\n<p><code>map()</code> 方法会返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值 。该方法按照原始数组元素顺序依次处理元素。</p>\n<pre><code class=\"prism language-js\">array<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token function\">funciton</span><span class=\"token punctuation\">(</span>currentValue<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>thisValue<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>该方法的第一个参数为回调函数，是必传的，它有三个参数:</p>\n<ul><li>currentValue: 必须，当前元素</li><li>index： 可选，当前元素索引值</li><li>arr： 可选，当前元素所属的数组对象</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n \narr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> item <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 输出结果： [2, 3, 4]</span>\n</code></pre>\n<p>该方法的第二个参数用来绑定参数函数内部的this变量，是可选的：</p>\n<pre><code>let arr = ['a', 'b', 'c'];\n \nlet newArr=[1, 2].map(function (item) {\n    return this[item];\n}, arr)\nconsole.log(newArr)\n\n// 输出结果： ['b', 'c']\n</code></pre>\n<p>该方法还可以进行链式调用：</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n \narr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=&gt;</span> item <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=&gt;</span> item <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 输出结果： [3, 4, 5]</span>\n</code></pre>\n<p><font color=\"#ff0000\">注意：</font></p>\n<ul><li>map 方法 不会空数组进行检测</li><li>map 方法遍历数组是会返回一个新数组，<b>不会改变原数组</b></li><li>map 方法会有返回值，可以return出来，map的回调函数中支持return返回值</li><li>map 方法无法遍历对象，仅适用于数组的遍历</li></ul>\n<h3><a id=\"3_for_of_97\"></a>3. for of</h3>\n<p><code>for...of</code> 语句创建一个循环来迭代可迭代的对象，在ES6中引入的for…of 循环，以替代for…in 和forEach（），并支持新的迭代协议</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>variable <span class=\"token keyword\">of</span> iterable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    statement\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>该方法有两个参数：</p>\n<ul><li>variable：每个迭代的属性值被分配给该变量。</li><li>iterable：一个具有可枚举属性并且可以迭代的对象</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{<!-- --></span>id<span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span>id<span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span>id<span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span><span class=\"token string\">'JavaScript'</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 输出结果：{id:1, value:'hello'}  {id:2, value:'world'} {id:3, value:'JavaScript'}</span>\n</code></pre>\n<p><font color=\"#ff0000\">注意</font></p>\n<ul><li>for of 方法只会遍历当前对象的属性，不会遍历其原型链上的属性</li><li>for of 方法适用于遍历<b>数组/类数组/字符串/map/set</b> 等拥有迭代对象的集合</li><li>for of 方法不支持遍历普通对象，因为其没有迭代器对象，如果想要遍历一个对象的属性，可以用for in 方法</li><li>可以使用break continue return 来中断循环遍历</li></ul>\n<h3><a id=\"4_filter_131\"></a>4. filter()</h3>\n<p><code>filter()</code> 方法用于过滤数组，满足条件的元素会被返回，它的参数是一个回调函数，所有素组元素依次执行该函数，返回结果为true的元素会被返回，如果没有符合条件的元素，则返回空数组</p>\n<pre><code class=\"prism language-js\">array<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>currentValue<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> thisValue<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>该方法的第一个参数为回调函数，是必传的，它有三个参数：</p>\n<ul><li>currentValue：必须。当前元素的值；</li><li>index：可选。当前元素的索引值；</li><li>arr：可选。当前元素属于的数组对象。</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=&gt;</span> item <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> \n\n<span class=\"token comment\">// 输出结果：[3, 4, 5]</span>\n</code></pre>\n<p>同样，它也有第二个参数，用来绑定参数函数内部的this变量。</p>\n<p>可以使用<code>filter()</code>方法来移除数组中的undefined、null、NAN等值：</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> undefined<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>Boolean<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 输出结果：[1, 2, 3, 4]</span>\n</code></pre>\n<p><font color=\"#ff0000\">注意</font></p>\n<ul><li>filter 方法会返回一个新的数组，不会改变原数组；</li><li>filter 方法不会对空数组进行检测；</li><li>filter 方法仅适用于检测数组。</li></ul>\n<h3><a id=\"5_someevery_168\"></a>5. some()、every()</h3>\n<p><code>some()</code> 方法会对数组中的每一项进行遍历，只要有一个元素符合条件，就会返回true，且剩余的元素不会再进行检测，否则就会返回false</p>\n<p><code>every()</code> 方法会对数组中的每一项进行遍历，只有所有的元素都符合条件，才返回true，如果数组中检测到一个元素不满足，则整个表达式返回false，且剩余的元素不会再进行检测</p>\n<pre><code class=\"prism language-js\">array<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>currentValue<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>thisValue<span class=\"token punctuation\">)</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>currentValue<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>thisValue<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>两个方法的第一个参数为回调函数，是必传的，它有三个参数：</p>\n<ul><li>currentValue：必须。当前元素的值；</li><li>index：可选。当前元素的索引值；</li><li>arr：可选。当前元素属于的数组对象。</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=&gt;</span> item <span class=\"token operator\">&gt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> \n\n<span class=\"token comment\">// 输出结果：true</span>\n\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=&gt;</span> item <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n\n<span class=\"token comment\">// 输出结果：true</span>\n</code></pre>\n<p><font color=\"#ff0000\">注意</font></p>\n<ul><li>两个方法都不会改变原数组，会返回一个布尔值</li><li>两个方法都不会对空数组进行检测</li><li>两个方法都仅用于检测数组</li></ul>\n<h3><a id=\"6_reducereduceRight_203\"></a>6. reduce()、reduceRight()</h3>\n<p><code>reduce()</code> 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。reduce() 可以作为一个高阶函数，用于函数的 compose</p>\n<pre><code class=\"prism language-js\">array<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">,</span>currentValue<span class=\"token punctuation\">,</span>currentIndex<span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>initialValue<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>reduce 方法会为数组中的每一个元素依次执行回调函数，不包括数组中被删除或者从未被赋值的元素，回调函数接受四个参数</p>\n<ul><li>total： 上一次调用回调函数的返回的值，或者是提供的的初始值（initialValue）</li><li>currentValue： 当前被处理的元素</li><li>currentIndex: 当前元素的索引</li><li>arr： 当前元素所属的数组对象</li></ul>\n<p>该方法的第二个参数是initialValue，表示传递给函数的初始值（作为第一次调用callback的第一个参数）</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> pre <span class=\"token operator\">+</span> cur\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 输出结果：1 2 1</span>\n<span class=\"token comment\">//         3 3 2</span>\n<span class=\"token comment\">//         6 4 3</span>\n<span class=\"token comment\">//         [1, 2, 3, 4] 10</span>\n</code></pre>\n<p>再来加一个初始值试试：</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> prev <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 输出结果： 5 1 0</span>\n<span class=\"token comment\">//          6 2 1</span>\n<span class=\"token comment\">//          8 3 2</span>\n<span class=\"token comment\">//          11 4 3</span>\n<span class=\"token comment\">//         [1, 2, 3, 4] 15</span>\n</code></pre>\n<p>由此可以得出结论：<b>如果没有提供初始值initialValue，reduce会从索引1的地方开始执行callback方法，跳过第一个索引。如果提供了初始值initialValue，从索引0开始执行</b></p>\n<p>reduceRight() 方法和的<code>reduce()</code>用法几乎一致，只是该方法是对数组进行倒序遍历的，而<code>reduce()</code>方法是正序遍历的。</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduceRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> prev <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//5 4 3</span>\n<span class=\"token comment\">//9 3 2</span>\n<span class=\"token comment\">//12 2 1</span>\n<span class=\"token comment\">//14 1 0</span>\n<span class=\"token comment\">//[1, 2, 3, 4] 15</span>\n</code></pre>\n<p><font color=\"#ff0000\">注意</font></p>\n<ul><li>两个方法都不会改变原数组</li><li>两个方法对于空数组是不会执行回调函数的。</li></ul>\n<h3><a id=\"7_find_findIndex_275\"></a>7. find() 、findIndex()</h3>\n<p><code>find()</code> 方法返回通过函数内判断的数组的第一个元素的值。当数组中的元素在测试条件时返回true时，find（）返回符合条件的元素，之后的值不会再调用执行函数。如果没有符合条件的元素返回undefined</p>\n<p><code>findIndex()</code> 方法返回传入一个测试函数符合条件的数组<b>第一个元素位置（索引）</b>。当数组中的元素在函数条件时返回true时，findIndex（） 返回符合条件的元素的索引位置，之后的值不会再调用执行函数。如果没有符合条件的元素返回-1</p>\n<pre><code class=\"prism language-js\">array<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>currentValue<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>thisValue<span class=\"token punctuation\">)</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>currentValue<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> thisValue<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>两个方法的第一个参数为回调函数，是必传的，它有三个参数：</p>\n<ul><li>currentValue：必需。当前元素；</li><li>index：可选。当前元素的索引；</li><li>arr：可选。当前元素所属的数组对象。</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=&gt;</span> item <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> \n\n<span class=\"token comment\">// 输出结果：3</span>\n\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=&gt;</span> item <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> \n\n<span class=\"token comment\">// 输出结果：2</span>\n</code></pre>\n<p><code>find()</code>和 <code>find Index()</code> 两个方法几乎一样，只是返回结果不一样</p>\n<ul><li>find() : 返回第一个符合条件的值</li><li>findIndex() : 返回第一个符合条件值的索引值</li></ul>\n<p><font color=\"#ff0000\">注意</font></p>\n<ul><li>两个方法对于空数组，函数是不会执行的；</li><li>两个方法否不会改变原数组。</li></ul>\n<h3><a id=\"8_keys_values___entries_314\"></a>8. keys()、 values() 、 entries()</h3>\n<p>三个方法都返回一个数组的迭代对象，对象的内容不太相同：</p>\n<ul><li>keys() 返回数组的索引值；</li><li>values() 返回数组的元素；</li><li>entries() 返回数组的键值对；</li></ul>\n<pre><code class=\"prism language-js\">array<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>这三个方法都没有参数</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Orange\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mango\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> iterator1 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> iterator2 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">const</span> iterator3 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> iterator1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 输出结果： 0 1 2 3</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> iterator2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 输出结果：Banana Orange Apple Mango</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> iterator3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 输出结果：[0, 'Banana'] [1, 'Orange'] [2, 'Apple'] [3, 'Mango']</span>\n</code></pre>\n<h2><a id=\"font_colorff0000font_352\"></a><font color=\"#ff0000\">总结</font></h2>\n<table><thead><tr><th align=\"center\">方法</th><th align=\"center\">是否改变原数组</th><th align=\"center\">是否有返回值</th><th align=\"center\">特点</th></tr></thead><tbody><tr><td align=\"center\">forEach()</td><td align=\"center\">否</td><td align=\"center\">没有返回值</td><td align=\"center\"></td></tr><tr><td align=\"center\">map()</td><td align=\"center\">否</td><td align=\"center\">有</td><td align=\"center\">可链式调用</td></tr><tr><td align=\"center\">for of</td><td align=\"center\">否</td><td align=\"center\">无</td><td align=\"center\">for…of遍历具有Iterator迭代器的对象的属性，返回的是数组的元素、对象的属性值，不能遍历普通的obj对象，将异步循环变成同步循环</td></tr><tr><td align=\"center\">filter()</td><td align=\"center\">否</td><td align=\"center\">有</td><td align=\"center\">过滤数组，返回包含符合条件的元素的数组，可链式调用</td></tr><tr><td align=\"center\">every(）、some()</td><td align=\"center\">否</td><td align=\"center\">有</td><td align=\"center\">some()只要有一个是true，便返回true；而every()只要有一个是false，便返回false.</td></tr><tr><td align=\"center\">find()、findIndex()</td><td align=\"center\">否</td><td align=\"center\">有</td><td align=\"center\">find()返回的是第一个符合条件的值；findIndex()返回的是第一个返回条件的值的索引值</td></tr><tr><td align=\"center\">reduce()、reduceRight()</td><td align=\"center\">否</td><td align=\"center\">有</td><td align=\"center\">reduce()对数组正序操作；reduceRight()对数组逆序操作</td></tr><tr><td align=\"center\">keys()、values()、entries()</td><td align=\"center\">否</td><td align=\"center\">无</td><td align=\"center\">keys() 返回数组的索引值；values() 返回数组元素；entries() 返回数组的键值对。</td></tr></tbody></table>\n<h2><a id=\"__365\"></a>二 对象遍历方法</h2>\n<h3><a id=\"1_for_in_367\"></a>1. for in</h3>\n<p><code>for…in</code> 主要用于循环对象属性。循环中的代码每执行一次，就会对对象的属性进行一次操作。</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> <span class=\"token operator\">**</span> <span class=\"token keyword\">in</span> object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n 执行的代码块\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>其中两个参数：</p>\n<ul><li>var：必须。指定的变量可以是数组元素，也可以是对象的属性。</li><li>object：必须。指定迭代的的对象。</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n \n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'键名：'</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'键值：'</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//键名：a</span>\n<span class=\"token comment\">//键值： 1</span>\n<span class=\"token comment\">//键名：b</span>\n<span class=\"token comment\">//键值： 2</span>\n<span class=\"token comment\">//键名：c</span>\n<span class=\"token comment\">//键值： 3</span>\n</code></pre>\n<p><font color=\"#ff0000\">注意</font></p>\n<ul><li>for in 方法不仅会遍历当前的对象所有的可枚举属性，还会遍历其原型链上的属性</li></ul>\n<h3><a id=\"2_ObjectkeysObjectvaluesObjectentries_403\"></a>2. Object.keys()、Object.values()、Object.entries()</h3>\n<p>这三个方法都用来遍历对象，它会返回一个由给定对象的自身可枚举属性（不含继承的和Symbol属性）组成的数组，数组元素的排列顺序和正常循环遍历该对象时返回的顺序一致，这个三个元素返回的值分别如下：</p>\n<ul><li>Object.keys()：返回包含对象键名的数组；</li><li>Object.values()：返回包含对象键值的数组；</li><li>Object.entries()：返回包含对象键名和键值的数组。</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> \n  id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> \n  age<span class=\"token punctuation\">:</span> <span class=\"token number\">18</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 输出结果: ['id', 'name', 'age']</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出结果: [1, 'hello', 18]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 输出结果: [['id', 1], ['name', 'hello'], ['age', 18]</span>\n</code></pre>\n<p><font color=\"#ff0000\">注意</font></p>\n<ul><li>Object.keys() 方法返回的数组中的值都是字符串，也就是说不是字符串的key值会转化为字符串</li><li>结果数组中的属性值都是对象本身<b>可枚举的属性</b>，不包括继承来的属性</li></ul>\n<h3><a id=\"3_ObjectgetOwnPropertyNames_427\"></a>3. Object.getOwnPropertyNames()</h3>\n<p><code>Object.getOwnPropertyNames()</code>方法与<code>Object.keys()</code>类似，也是接受一个对象作为参数，返回一个数组，包含了该对象自身的所有属性名。但它能返回<strong>不可枚举的属性。</strong></p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'World'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n \nObject<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"0\", \"1\"]</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"0\", \"1\", \"length\"]</span>\n</code></pre>\n<p>这两个方法都可以用来计算对象中属性的个数</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"0\", \"1\", \"2\"]</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token comment\">// 3</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token comment\">// 3</span>\n</code></pre>\n<h3><a id=\"4_ObjectgetOwnPropertySymbols_447\"></a>4. Object.getOwnPropertySymbols()</h3>\n<p><code>Object.getOwnPropertySymbols()</code> 方法返回对象自身的 Symbol 属性组成的数组，不包括字符串属性：</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 给对象添加一个不可枚举的 Symbol 属性</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperties</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token punctuation\">[</span><span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'baz'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n  value<span class=\"token punctuation\">:</span> <span class=\"token string\">'Symbol baz'</span><span class=\"token punctuation\">,</span>\n  enumerable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">// 给对象添加一个可枚举的 Symbol 属性</span>\nobj<span class=\"token punctuation\">[</span><span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Symbol foo'</span>\n \nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertySymbols</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 输出结果：Symbol baz Symbol foo</span>\n</code></pre>\n<h3><a id=\"5_ReflectownKeys_472\"></a>5. Reflect.ownKeys()</h3>\n<p><code>Reflect.ownKeys()</code> 返回一个数组，包含对象自身的所有属性。它和Object.keys()类似，Object.keys()返回属性key，但不包括不可枚举的属性，而Reflect.ownKeys()会返回所有属性key</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n b<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">'method'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n value<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Non enumerable property\"</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n enumerable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [\"a\", \"b\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ownKeys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [\"a\", \"b\", \"method\"]</span>\n</code></pre>\n<p><font color=\"#ff0000\">注意</font></p>\n<ul><li>Object.keys() ：相当于返回对象属性数组；</li><li>Reflect.ownKeys() :相当于<code>Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj)</code></li></ul>\n<h2><a id=\"_499\"></a>总结</h2>\n<table><thead><tr><th align=\"center\">对象方法</th><th align=\"center\">遍历基本属性</th><th align=\"center\">遍历原型链</th><th align=\"center\">遍历不可枚举属性</th><th align=\"center\">遍历Symbol</th></tr></thead><tbody><tr><td align=\"center\">for in</td><td align=\"center\">是</td><td align=\"center\">是</td><td align=\"center\">否</td><td align=\"center\">否</td></tr><tr><td align=\"center\">Object.keys()</td><td align=\"center\">是</td><td align=\"center\">否</td><td align=\"center\">否</td><td align=\"center\">否</td></tr><tr><td align=\"center\">Object.getOwnPropertyNames()</td><td align=\"center\">是</td><td align=\"center\">否</td><td align=\"center\">是</td><td align=\"center\">否</td></tr><tr><td align=\"center\">Object.getOwnPropertySymbols()</td><td align=\"center\">否</td><td align=\"center\">否</td><td align=\"center\">是</td><td align=\"center\">是</td></tr><tr><td align=\"center\">Object.getOwnPropertySymbols()</td><td align=\"center\">是</td><td align=\"center\">否</td><td align=\"center\">是</td><td align=\"center\">是</td></tr></tbody></table>\n<h2><a id=\"__509\"></a>三 其他遍历方法</h2>\n<h3><a id=\"1_for_511\"></a>1. for</h3>\n<p>for循环是应该是最常见的循环方式了，它由三个表达式组成，分别是声明循环变量、判断循环条件、更新循环变量。这三个表达式用分号分隔。可以使用临时变量将数组的长度缓存起来，避免重复获取数组长度，当数组较大时优化效果会比较明显。</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在执行的时候，会先判断执行条件，再执行。for循环可以用来遍历数组，字符串，类数组，DOM节点等。可以改变原数组。</p>\n<h3><a id=\"2_while_524\"></a>2. while</h3>\n<p><code>while</code>循环中的结束条件可以是各种类型，但是最终都会转为布尔值，转换规则如下。</p>\n<ul><li>Boolean：true为真，false为假；</li><li>String：空字符串为假，所有非空字符串为真；</li><li>Number：0为假，非0数字为真；</li><li>null/Undefined/NaN：全为假；</li><li>Object：全为真。</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            \n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    num <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>while</code>和<code>for</code>一样，都是先判断，再执行。只要指定条件为 true，循环就可以一直执行代码。</p>\n<h3><a id=\"3_do__while_545\"></a>3. do / while</h3>\n<p>该方法会先执行再判断，即使初始条件不成立，<code>do/while</code>循环也至少会执行一次</p>\n<pre><code class=\"prism language-js\\\">let num = 10;\n            \ndo\n {\n    console.log(num);\n    num--;\n  }\nwhile(num &gt;= 0);\n            \nconsole.log(num); //-1\n</code></pre>\n<p><font color=\"#ff000\">不建议使用do / while来遍历数组。 </font></p>\n<h3><a id=\"4_for_await_of_564\"></a>4. for await of</h3>\n<p><code>for await...of</code>方法被称为<strong>异步迭代器</strong>，该方法是主要用来遍历异步对象。它是ES2018中引入的方法。</p>\n<p><code>for await...of</code> 语句会在异步或者同步可迭代对象上创建一个迭代循环，包括 String，Array，类数组，Map， Set和自定义的异步或者同步可迭代对象。这个语句只能在 <code>async function</code>内使用：</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Gen</span> <span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span>reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>time<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Gen</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">Gen</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">Gen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n   <span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>item<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d8217161f46a4576a41b122c694d86de.png\"/></p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Gen</span> <span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span>reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n         <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>time<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  \n<span class=\"token comment\">//   async function test () {<!-- --></span>\n    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Gen</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">Gen</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">Gen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n     <span class=\"token keyword\">for</span>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>item<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//   }</span>\n<span class=\"token comment\">//   test()</span>\n</code></pre>\n<p>输出结果：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d6cc29a2ef98446a956dec5cb0be6826.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-03-02 22:04:09", "summary": "个循环遍历方法个循环遍历方法在这里插入图片描述一数组方法方法用于调用数组的每一个元素，并将元素传递给回调函数。数组中的每一个值都会调用回调函数。该方法的第一个参数为回调函数，是必传的，它有三个参数必须"}