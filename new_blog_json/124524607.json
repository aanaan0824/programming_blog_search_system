{"blogid": "124524607", "writerAge": "码龄4年", "writerBlogNum": "2", "writerCollect": "8", "writerComment": "0", "writerFan": "3", "writerGrade": "1级", "writerIntegral": "24", "writerName": "伊人夕岸_", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124524607.jpg", "writerRankTotal": "202604", "writerRankWeekly": "424210", "writerThumb": "4", "writerVisitNum": "1494", "blog_read_count": "841", "blog_time": "于 2022-05-01 11:35:02 发布", "blog_title": "C#自定配置文件（一）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"C_0\"></a>C#自定义配置文件</h1>\n<blockquote>\n<p>.NET程序中，经常使用Config文件来配置应用程序中经常使用的值，比如数据库连接字符串。最近项目遇到一个需要配置好多节点在配置文件中的需求。为了使配置节点整洁易维护，在代码调用时也保证获取时比较直观，结合自定义配置文件专门整理了一个配置文件帮助类Demo。此篇文章主要讲述自定义配置文件的使用方法。</p>\n</blockquote>\n<hr/>\n<h3><a id=\"_6\"></a>常见配置文件使用方法</h3>\n<ul><li>直接在connectionStrings\\appSettings这两个节点中添加add节点配置 \n  <ul><li>这种方式在项目中很常见，使用简单，这里不做介绍</li></ul> </li><li>文件操作 \n  <ul><li>很多程序中（自己公司老项目），通过获取指定路径下XML\\ini\\json\\txt等文件，通过IO获取文件内容并对文件进行解析，从而获取程序需要的配置信息（不推荐）</li></ul> </li></ul>\n<h3><a id=\"_12\"></a>自定义配置文件</h3>\n<p>在App.Config(web.config)中指定其他配置文件的路径和节点。<br/> 在configSections节点下配置section节点，.NET提供自带的类型进行封装。（NameValue键值对、Dictionary字典、SingTag基础结构）。Section节点的name属性是自定义节点的名称，type是接收信息的数据类型。<br/> <strong>注意！configSections节点必须为configuration下第一个节点</strong></p>\n<blockquote>\n<p><kbd>configSections</kbd>的<kbd>name</kbd>属性为自定义配置节点的名称，<kbd>type<kbd> 为转换的类型</kbd></kbd></p>\n<p><code>ConfigurationManager.GetSection(\"name\")</code> 方法的参数是自定义配置文件节点的名称</p>\n</blockquote>\n<h4><a id=\"NameValue_20\"></a>NameValue键值对</h4>\n<p>配置语法格式：</p>\n<pre><code class=\"prism language-XML\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n&lt;configuration&gt;\n\t&lt;configSections&gt;\n\t\t&lt;!--以NameValueCollection键值对的形式返回配置节点中的信息，type值固定为System.Configuration.NameValueSectionHandler--&gt;\n\t\t&lt;section name=\"NameValueConfigNode\" type=\"System.Configuration.NameValueSectionHandler\"/&gt;\n\t&lt;/configSections&gt;\n\t&lt;!--自定义配置节点--&gt;\n\t&lt;NameValueConfigNode&gt;\n\t\t&lt;add key=\"Name一\" value=\"Value一\" /&gt;\n\t\t&lt;add key=\"Name二\" value=\"Value二\" /&gt;\n\t\t&lt;add key=\"Name三\" value=\"Value三\" /&gt;\n\t&lt;/NameValueConfigNode&gt;\n    &lt;startup&gt; \n        &lt;supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.8\" /&gt;\n    &lt;/startup&gt;\n&lt;/configuration&gt;\n</code></pre>\n<p>调用方法：这里以一个静态属性的方法获取并返回Dictionary格式（后面几种方法也采用这个方式）</p>\n<pre><code class=\"prism language-CSharp\">/// &lt;summary&gt;\n/// NameValueCollection\n/// &lt;/summary&gt;\npublic static Dictionary&lt;string, string&gt; NameValueConfigNode\n{\n    get\n    {\n        NameValueCollection nvc = (NameValueCollection)ConfigurationManager.GetSection(\"NameValueConfigNode\");\n        Dictionary&lt;string, string&gt; result = new Dictionary&lt;string,string&gt;();\n         foreach (string key in nvc.AllKeys)\n        { \n            result.Add(key, nvc[key]);\n        }\n        return result;\n    }\n}\n</code></pre>\n<h4><a id=\"Dictionary_61\"></a>Dictionary</h4>\n<p>配置文件语法格式：</p>\n<pre><code class=\"prism language-XML\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n&lt;configuration&gt;\n\t&lt;configSections&gt;\n\t\t&lt;!--以Dictionary字典的形式返回配置节点中的信息，type固定为System.Configuration.DictionarySectionHandler--&gt;\n\t\t&lt;section name=\"DictionaryConfigNode\" type=\"System.Configuration.DictionarySectionHandler\"/&gt;\n\t&lt;/configSections&gt;\n\t&lt;!--自定义配置节点--&gt;\n\t&lt;DictionaryConfigNode&gt;\n\t\t&lt;add key=\"Key一\" value=\"DictValue一\" /&gt;\n\t\t&lt;add key=\"Key二\" value=\"DictValue二\" /&gt;\n\t\t&lt;add key=\"Key三\" value=\"DictValue三\" /&gt;\n\t&lt;/DictionaryConfigNode&gt;\n    &lt;startup&gt; \n        &lt;supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.8\" /&gt;\n    &lt;/startup&gt;\n&lt;/configuration&gt;\n</code></pre>\n<p>调用方法：</p>\n<pre><code class=\"prism language-CSharp\">/// &lt;summary&gt;\n/// Dictionary\n/// &lt;/summary&gt;\npublic static Dictionary&lt;string, string&gt; DictionaryConfigNode\n{\n    get\n    {\n        IDictionary dict = (IDictionary)ConfigurationManager.GetSection(\"DictionaryConfigNode\");\n        Dictionary&lt;string, string&gt; result = new Dictionary&lt;string, string&gt;();\n        foreach (string key in dict.Keys)\n        {\n            result.Add(key, dict[key].ToString());\n        }\n        return result;\n    }\n}\n</code></pre>\n<h4><a id=\"SingTag_100\"></a>SingTag</h4>\n<p>配置文件语法格式：</p>\n<pre><code class=\"prism language-XML\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n&lt;configuration&gt;\n\t&lt;configSections&gt;\n\t\t&lt;!--基础结构处理 .config 文件中由单个 XML 标记所表示的各配置节点中的值，type固定为System.Configuration.SingleTagSectionHandler--&gt;\n\t\t&lt;section name=\"SingleTagConfigNode\" type=\"System.Configuration.SingleTagSectionHandler\" /&gt;\n\t&lt;/configSections&gt;\n\t&lt;!--自定义配置节点--&gt;\n\t&lt;!--注意，只能是单个节SingleTagSectionHandler才能处理，无论有多少个属性都能处理--&gt;\n\t&lt;SingleTagConfigNode PropertyOne=\"1\" PropertyTwo=\"2\" PropertyThree=\"3\" PropertyFour=\"4\" PropertyFive=\"5\" /&gt;\n    &lt;startup&gt; \n        &lt;supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.8\" /&gt;\n    &lt;/startup&gt;\n&lt;/configuration&gt;\n</code></pre>\n<p>调用方法：</p>\n<pre><code class=\"prism language-CSharp\">/// &lt;summary&gt;\n/// SingleTag\n/// &lt;/summary&gt;\npublic static Dictionary&lt;string, string&gt; SingleTagConfigNode\n{\n    get\n    {\n        Hashtable dict = (Hashtable)ConfigurationManager.GetSection(\"SingleTagConfigNode\");\n        Dictionary&lt;string, string&gt; result = new Dictionary&lt;string, string&gt;();\n        foreach (string key in dict.Keys)\n        {\n            result.Add(key, dict[key].ToString());\n        }\n        return result;\n    }\n}\n</code></pre>\n<p><font color=\"red\">以上程序通过控制台应用程序测试调用效果如下:</font></p>\n<p><a href=\"https://imgtu.com/i/Lsbv5T\"><img alt=\"Lsbv5T.png\" src=\"..\\..\\static\\image\\2ca6a88273bc626f9a02bf067e3b977f.png\"/></a></p>\n<h4><a id=\"_143\"></a>自定义配置文件</h4>\n<p>以上三种方法，只能读取应用程序的Web.config或者app.config中的配置信息，但是在大多数项目中，业务场景复杂，配置信息更是多到看不过来，所以如果都写在web.config或者app.config中的话，不太美观，也不易维护。</p>\n<p>那么有没有一种方法，可以根据需要，配置一个或者多个的config，并且在程序中直接调用使用的方法？ <code>（问就是有^_^）</code></p>\n<p>下面举例一种自定义配置文件的写法<br/> 配置文件写法：<br/> <kbd>&lt;configSections&gt;</kbd>节点下<kbd>&lt;section&gt;</kbd>的属性值内容与上面三个方法相同。需要注意的是自定义节点，自定义节点只需要设置configSource属性即可，属性值指向自定义配置文件的路径；<br/> <font color=\"red\">注意：路径必须要写成相对路径。</font></p>\n<pre><code class=\"prism language-XML\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n&lt;configuration&gt;\n\t&lt;configSections&gt;\n\t\t&lt;!--把MyConfigData节点的数据映射到MyConfigData类中--&gt;\n\t\t&lt;section name=\"MyConfigData\" type=\"ConsoleApplication.ConfigFiles.ConfigFile,ConsoleApplication\"/&gt;\n\t&lt;/configSections&gt;\n\t&lt;!--自定义配置节点，configSource指定自定义配置文件的路径（必须是相对路径）--&gt;\n\t&lt;MyConfigData configSource=\"ConfigFiles\\Framework.config\"/&gt;\n    &lt;startup&gt; \n        &lt;supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.8\" /&gt;\n    &lt;/startup&gt;\n&lt;/configuration&gt;\n\n</code></pre>\n<p>这是自定义的文件内容,</p>\n<pre><code class=\"prism language-XML\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n&lt;MyConfigData&gt;\n\t&lt;add key=\"Key一\" value=\"自定义文件一\" /&gt;\n\t&lt;add key=\"Key二\" value=\"自定义文件二\" /&gt;\n\t&lt;add key=\"Key三\" value=\"自定义文件三\" /&gt;\n&lt;/MyConfigData&gt;\n</code></pre>\n<p><font color=\"DarkGreen\">程序中的调用方法与上面的方式一致，这种自定义配置文件的精髓在于，不用将所有配置信息都挤在一个文件中，而是根据项目需要合理的分成多个配置，只需要在web.config或者app.config中指定文件路径即可。其他使用方法没有差别</font></p>\n<h4><a id=\"_181\"></a>自定义结构配置文件</h4>\n<p>以上方法为常用的基本配置文件的使用方法，都是使用C#提供的类型进行获取，配置文件的节点需要按照对应格式设置，C#中还有一种可以自定义配置文件格式的调用方法，Config中科自定义节点的结构，然后在程序中需要自定义一个配置文件的类，用于接收自定义配置文件的内容；<br/> 其中使用到的类型：<br/> ConfigurationSection、ConfigurationElementCollection、ConfigurationElement、ConfigurationProperty<br/> 上面介绍的几种方法基本上已经足够日常使用，此篇文章不在进行介绍自定义格式的写法，后期会根据个人情况（是否懒惰的情况），可能会补充此部分功能，有兴趣可以去了解一下。</p>\n<h3><a id=\"_187\"></a>写在最后</h3>\n<p>以上源代码已经放在Gitee上，可自行下载，<br/> <a href=\"https://gitee.com/yang-yong-666/csharp\">https://gitee.com/yang-yong-666/csharp</a><br/> 该项目还包含其他关于C#的帮助类，并且会持续更新！</p>\n<hr/>\n<p><em>个人交流QQ：1695690324</em><br/> <em><strong>原创不易，转载请注明出处</strong></em><br/> <em>博客园：<a href=\"https://www.cnblogs.com/yangyongdashen-S/\">https://www.cnblogs.com/yangyongdashen-S/</a></em><br/> <em>CSDN：<a href=\"https://blog.csdn.net/weixin_44312699?spm=1010.2135.3001.5343\">https://blog.csdn.net/weixin_44312699?spm=1010.2135.3001.5343</a></em><br/> <em>Gitee：<a href=\"https://gitee.com/yang-yong-666\">https://gitee.com/yang-yong-666</a></em><br/> <em>公众号：yi人夕岸</em></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-05-01 11:35:02", "summary": "自定义配置文件程序中，经常使用文件来配置应用程序中经常使用的值，比如数据库连接字符串。最近项目遇到一个需要配置好多节点在配置文件中的需求。为了使配置节点整洁易维护，在代码调用时也保证获取时比较直观，结"}