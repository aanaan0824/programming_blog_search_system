{"blogid": "126451751", "writerAge": "码龄1年", "writerBlogNum": "323", "writerCollect": "1759", "writerComment": "1508", "writerFan": "4474", "writerGrade": "6级", "writerIntegral": "8284", "writerName": "十八岁讨厌编程", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126451751.jpg", "writerRankTotal": "1956", "writerRankWeekly": "29", "writerThumb": "1914", "writerVisitNum": "130346", "blog_read_count": "1034", "blog_time": "已于 2022-09-03 13:03:37 修改", "blog_title": "[SpringBoot系列]消息中间件解决方案", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_1\">消息的概念</a></li><li><a href=\"#Java_33\">Java处理消息的标准规范</a></li><li><ul><li><a href=\"#JMS_42\">JMS</a></li><li><a href=\"#AMQP_78\">AMQP</a></li><li><a href=\"#MQTT_107\">MQTT</a></li><li><a href=\"#KafKa_113\">KafKa</a></li></ul>\n</li><li><a href=\"#SpringBootActiveMQ_117\">SpringBoot整合ActiveMQ</a></li><li><ul><li><a href=\"#_121\">安装</a></li><li><a href=\"#_220\">整合</a></li></ul>\n</li><li><a href=\"#SpringBootRabbitMQ_322\">SpringBoot整合RabbitMQ</a></li><li><ul><li><a href=\"#_340\">安装</a></li><li><a href=\"#direct_396\">整合(direct模型)</a></li><li><a href=\"#topic_482\">整合(topic模型)</a></li></ul>\n</li><li><a href=\"#SpringBootRocketMQ_571\">SpringBoot整合RocketMQ</a></li><li><ul><li><a href=\"#_575\">安装</a></li><li><a href=\"#_619\">整合（异步消息）</a></li></ul>\n</li><li><a href=\"#SpringBootKafka_694\">SpringBoot整合Kafka</a></li><li><ul><li><a href=\"#_696\">安装</a></li><li><a href=\"#_742\">整合</a></li></ul>\n</li><li><a href=\"#__805\">附： 消息的深度思考</a></li><li><a href=\"#_812\">附：购物订单发送手机短信案例</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>消息的概念</h1>\n<p>从广义角度来说，消息其实就是信息，但是和信息又有所不同。信息通常被定义为一组数据，<strong>而消息除了具有数据的特征之外，还有消息的来源与接收的概念</strong>。</p>\n<ul><li>发送消息的一方称为<mark>消息的生产者</mark></li><li>接收消息的一方称为<mark>消息的消费者</mark></li></ul>\n<p>对于消息的理解，初学者总认为消息内部的数据非常复杂，这是一个误区。比如我发送了一个消息，要求接受者翻译发送过去的内容。初学者会认为消息中会包含被翻译的文字，已经本次操作要执行翻译操作而不是打印操作。其实这种现象有点过度解读了，发送的消息中仅仅包含被翻译的文字，但是可以通过控制不同的人接收此消息来确认要做的事情。例如发送被翻译的文字仅到A程序，而A程序只能进行翻译操作，这样就可以发送简单的信息完成复杂的业务了，是通过接收消息的主体不同，进而执行不同的操作，而不会在消息内部定义数据的操作行为，当然如果开发者希望消息中包含操作种类信息也是可以的，只是提出消息的内容可以更简单，更单一。</p>\n<p>对于消息的生产者与消费者的工作模式，还可以将消息划分成两种模式：</p>\n<ul><li><code>同步消费</code></li><li><code>异步消息</code></li></ul>\n<p>所谓<mark>同步消息就是生产者发送完消息，等待消费者处理，消费者处理完将结果告知生产者，然后生产者继续向下执行业务</mark>。</p>\n<p>这种模式过于卡生产者的业务执行连续性，在现在的企业级开发中，上述这种业务场景通常不会采用消息的形式进行处理。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e550bf1ab67a48bd88808465d2bdadc5.png\"/></p>\n<p>所谓<mark>异步消息就是生产者发送完消息，无需等待消费者处理完毕，生产者继续向下执行其他动作</mark>。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c7b4781b2aae4c41be77ff93a71fd715.png\"/></p>\n<p>比如生产者发送了一个日志信息给日志系统，发送过去以后生产者就向下做其他事情了，无需关注日志系统的执行结果。日志系统根据接收到的日志信息继续进行业务执行，是单纯的记录日志，还是记录日志并报警，这些和生产者无关，这样生产者的业务执行效率就会大幅度提升。并且可以通过添加多个消费者来处理同一个生产者发送的消息来提高系统的高并发性，改善系统工作效率，提高用户体验。一旦某一个消费者由于各种问题宕机了，也不会对业务产生影响，提高了系统的高可用性。</p>\n<p>消息的使用场景：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7349cd5fa3f94d63bdbf071a456b7268.png\"/><br/> 比如现在浏览器客户端非常的多，那么发送的请求也非常非常的多，把这些请求一股脑地发送给服务器那么压力是非常大的。为了分担这种压力，我们可以把业务服务器拆分成若干个子服务器。当我们的业务服务器接收到请求之后，他不直接处理，而是交给后面的子服务器去做。但是这些子服务器怎么知道他们具体要做什么工作呢？这个时候我们就要借助一个桥梁(MQ)，也就是保存消息的东西。我们的业务系统将所要处理的信息发送给MQ，然后子业务系统再到MQ中去获取自己要做的工作。</p>\n<p><strong>在这个过程中所有要执行的工作最终都转换成了消息的格式存在。也就是说业务服务器会把所有接收到的请求任务转换成一个个的消息放在MQ中。</strong></p>\n<h1><a id=\"Java_33\"></a>Java处理消息的标准规范</h1>\n<p>目前企业级开发中广泛使用的消息处理技术共三大类(<mark>这三大类均是异步消息传递技术</mark>)，具体如下：</p>\n<ul><li><code>JMS</code></li><li><code>AMQP</code></li><li><code>MQTT</code></li></ul>\n<p>为什么是三大类，而不是三个技术呢？因为这些都是规范，就像JDBC技术，是个规范，开发针对规范开发，运行还要靠实现类，例如MySQL提供了JDBC的实现，最终运行靠的还是实现。并且这三类规范都是针对异步消息进行处理的，也符合消息的设计本质，处理异步的业务。对以上三种消息规范做一下普及</p>\n<h2><a id=\"JMS_42\"></a>JMS</h2>\n<p>​ JMS（Java Message Service）,这是一个规范，作用等同于JDBC规范，提供了与消息服务相关的API接口。</p>\n<p><strong>JMS消息模型</strong></p>\n<p>​ JMS规范中规范了消息有两种模型。分别是<strong>点对点模型</strong>和<strong>发布订阅模型</strong>。</p>\n<p>​ <strong>点对点模型</strong>：peer-2-peer，生产者会将消息发送到一个保存消息的容器中，通常使用队列模型，使用队列保存消息。一个队列的消息只能被一个消费者消费，或未被及时消费导致超时。这种模型下，生产者和消费者是一对一绑定的。</p>\n<p>​ <strong>发布订阅模型</strong>：publish-subscribe，生产者将消息发送到一个保存消息的容器中，也是使用队列模型来保存。但是消息可以被多个消费者消费，生产者和消费者完全独立，相互不需要感知对方的存在。</p>\n<p>​ 以上这种分类是从消息的生产和消费过程来进行区分，针对消息所包含的信息不同，还可以进行不同类别的划分。</p>\n<p><strong>JMS消息种类</strong></p>\n<p>​ 根据消息中包含的数据种类划分，可以将消息划分成6种消息。</p>\n<ul><li>TextMessage</li><li>MapMessage</li><li>BytesMessage</li><li>StreamMessage</li><li>ObjectMessage</li><li>Message （只有消息头和属性）</li></ul>\n<p>​ JMS主张不同种类的消息，消费方式不同，可以根据使用需要选择不同种类的消息。但是这一点也成为其诟病之处，后面再说。整体上来说，JMS就是典型的保守派，什么都按照J2EE的规范来，做一套规范，定义若干个标准，每个标准下又提供一大批API。</p>\n<p><code>JMS实现</code>:ActiveMQ、Redis、HornetMQ</p>\n<blockquote>\n<p>还有一些不太规范的实现，参考JMS的标准设计，但是又不完全满足其规范，例如：RabbitMQ、RocketMQ。</p>\n</blockquote>\n<h2><a id=\"AMQP_78\"></a>AMQP</h2>\n<p>​ JMS的问世为消息中间件提供了很强大的规范性支撑，但是使用的过程中就开始被人诟病，比如JMS设置的极其复杂的多种类消息处理机制。本来分门别类处理挺好的，为什么会被诟病呢？原因就在于JMS的设计是J2EE规范，站在Java开发的角度思考问题。但是现实往往是复杂度很高的。比如我有一个.NET开发的系统A，有一个Java开发的系统B，现在要从A系统给B系统发业务消息，结果两边数据格式不统一，没法操作。JMS不是可以统一数据格式吗？提供了6种数据种类，总有一款适合你啊。NO，一个都不能用。因为A系统的底层语言不是Java语言开发的，根本不支持那些对象。这就意味着如果想使用现有的业务系统A继续开发已经不可能了，必须推翻重新做使用Java语言开发的A系统。</p>\n<p>​ 这时候有人就提出说，你搞那么复杂，整那么多种类干什么？找一种大家都支持的消息数据类型不就解决这个跨平台的问题了吗？大家一想，对啊，于是AMQP孕育而生。</p>\n<p>​ 单从上面的说明中其实可以明确感知到，AMQP的出现解决的是消息传递时使用的消息种类的问题，化繁为简，但是其并没有完全推翻JMS的操作API，所以说AMQP仅仅是一种协议，规范了数据传输的格式而已。</p>\n<p>​ <code>AMQP（advanced message queuing protocol）</code>：一种协议（高级消息队列协议，也是消息代理规范），规范了网络交换的数据格式，兼容JMS操作。<br/> <strong>优点</strong></p>\n<p>​ <mark>具有跨平台性，服务器供应商，生产者，消费者可以使用不同的语言来实现</mark></p>\n<p><strong>JMS消息种类</strong></p>\n<p>​ AMQP消息种类：byte[]</p>\n<p>​ AMQP在JMS的消息模型基础上又进行了进一步的扩展，除了点对点和发布订阅的模型，开发了几种全新的消息模型，适应各种各样的消息发送。</p>\n<p><strong>AMQP消息模型</strong></p>\n<ul><li>direct exchange</li><li>fanout exchange</li><li>topic exchange</li><li>headers exchange</li><li>system exchange</li></ul>\n<p>​ 目前实现了AMQP协议的消息中间件技术也很多，而且都是较为流行的技术，例如：RabbitMQ、StormMQ、RocketMQ</p>\n<h2><a id=\"MQTT_107\"></a>MQTT</h2>\n<p>​ <code>MQTT（Message Queueing Telemetry Transport）</code>消息队列遥测传输，专为小设备设计，是物联网（IOT）生态系统中主要成分之一。由于与JavaEE企业级开发没有交集，此处不作过多的说明。</p>\n<p>​ 除了上述3种J2EE企业级应用中广泛使用的三种异步消息传递技术，还有一种技术也不能忽略，Kafka。</p>\n<h2><a id=\"KafKa_113\"></a>KafKa</h2>\n<p>​ Kafka，一种高吞吐量的分布式发布订阅消息系统，提供实时消息功能。Kafka技术并不是作为消息中间件为主要功能的产品，但是其拥有发布订阅的工作模式，也可以充当消息中间件来使用，而且目前企业级开发中其身影也不少见。</p>\n<h1><a id=\"SpringBootActiveMQ_117\"></a>SpringBoot整合ActiveMQ</h1>\n<p>ActiveMQ是MQ产品中的元老级产品，早期标准MQ产品之一，在AMQP协议没有出现之前，占据了消息中间件市场的绝大部分份额，后期因为AMQP系列产品的出现，迅速走弱，目前仅在一些线上运行的产品中出现，新产品开发较少采用。</p>\n<h2><a id=\"_121\"></a>安装</h2>\n<p>​ windows版安装包下载地址：<a href=\"https://activemq.apache.org/components/classic/download/\">https://activemq.apache.org/components/classic/download</a><a href=\"https://activemq.apache.org/components/classic/download/\">/</a></p>\n<p>​ 下载的安装包是解压缩就能使用的zip文件，解压缩完毕后会得到如下文件</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ba901ee22c8b4a90831a1800c616039f.png\"/></p>\n<p><strong>启动服务器</strong></p>\n<pre><code class=\"prism language-CMD\">activemq.bat\n</code></pre>\n<p>​ 运行bin目录下的win32或win64目录下的activemq.bat命令即可，根据自己的操作系统选择即可，默认对外服务端口61616。</p>\n<p><strong>访问web管理服务</strong></p>\n<p>​ ActiveMQ启动后会启动一个Web控制台服务，可以通过该服务管理ActiveMQ。</p>\n<pre><code class=\"prism language-CMD\">http://127.0.0.1:8161/\n</code></pre>\n<p>​ web管理服务默认端口8161，访问后可以打开ActiveMQ的管理界面，如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c03e258f804d4c33b393e61ddfd03293.png\"/></p>\n<p>​ 首先输入访问用户名和密码，初始化用户名和密码相同，均为：admin，成功登录后进入管理后台界面，如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fb568d00f2a74a6598be3ea3fddf6728.png\"/></p>\n<p>​ 看到上述界面视为启动ActiveMQ服务成功。</p>\n<blockquote>\n<p>简单的介绍一下每个栏：<br/> Queues：就是我们说的消息队列，我们存放的消息都可以在里面看到<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d51e63e914734c95b81cf3a1546687d3.png\"/><br/> 我们塞进去几个消息，有几个消息被使用都可以看到<br/> Connection里面还可以看到我们的连接：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\13496c0448e045eb9593cf9c088244e6.png\"/><br/> Topics里面有我们发布订阅的消息。(当我们使用JMS的发布订阅模型的时候)</p>\n</blockquote>\n<p><strong>启动失败</strong></p>\n<p>​ 在ActiveMQ启动时要占用多个端口，以下为正常启动信息：</p>\n<pre><code class=\"prism language-CMD\">wrapper  | --&gt; Wrapper Started as Console\nwrapper  | Launching a JVM...\njvm 1    | Wrapper (Version 3.2.3) http://wrapper.tanukisoftware.org\njvm 1    |   Copyright 1999-2006 Tanuki Software, Inc.  All Rights Reserved.\njvm 1    |\njvm 1    | Java Runtime: Oracle Corporation 1.8.0_172 D:\\soft\\jdk1.8.0_172\\jre\njvm 1    |   Heap sizes: current=249344k  free=235037k  max=932352k\njvm 1    |     JVM args: -Dactivemq.home=../.. -Dactivemq.base=../.. -Djavax.net.ssl.keyStorePassword=password -Djavax.net.ssl.trustStorePassword=password -Djavax.net.ssl.keyStore=../../conf/broker.ks -Djavax.net.ssl.trustStore=../../conf/broker.ts -Dcom.sun.management.jmxremote -Dorg.apache.activemq.UseDedicatedTaskRunner=true -Djava.util.logging.config.file=logging.properties -Dactivemq.conf=../../conf -Dactivemq.data=../../data -Djava.security.auth.login.config=../../conf/login.config -Xmx1024m -Djava.library.path=../../bin/win64 -Dwrapper.key=7ySrCD75XhLCpLjd -Dwrapper.port=32000 -Dwrapper.jvm.port.min=31000 -Dwrapper.jvm.port.max=31999 -Dwrapper.pid=9364 -Dwrapper.version=3.2.3 -Dwrapper.native_library=wrapper -Dwrapper.cpu.timeout=10 -Dwrapper.jvmid=1\njvm 1    | Extensions classpath:\njvm 1    |   [..\\..\\lib,..\\..\\lib\\camel,..\\..\\lib\\optional,..\\..\\lib\\web,..\\..\\lib\\extra]\njvm 1    | ACTIVEMQ_HOME: ..\\..\njvm 1    | ACTIVEMQ_BASE: ..\\..\njvm 1    | ACTIVEMQ_CONF: ..\\..\\conf\njvm 1    | ACTIVEMQ_DATA: ..\\..\\data\njvm 1    | Loading message broker from: xbean:activemq.xml\njvm 1    |  INFO | Refreshing org.apache.activemq.xbean.XBeanBrokerFactory$1@5f3ebfe0: startup date [Mon Feb 28 16:07:48 CST 2022]; root of context hierarchy\njvm 1    |  INFO | Using Persistence Adapter: KahaDBPersistenceAdapter[D:\\soft\\activemq\\bin\\win64\\..\\..\\data\\kahadb]\njvm 1    |  INFO | KahaDB is version 7\njvm 1    |  INFO | PListStore:[D:\\soft\\activemq\\bin\\win64\\..\\..\\data\\localhost\\tmp_storage] started\njvm 1    |  INFO | Apache ActiveMQ 5.16.3 (localhost, ID:CZBK-20210302VL-10434-1646035669595-0:1) is starting\njvm 1    |  INFO | Listening for connections at: tcp://CZBK-20210302VL:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600\njvm 1    |  INFO | Connector openwire started\njvm 1    |  INFO | Listening for connections at: amqp://CZBK-20210302VL:5672?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600\njvm 1    |  INFO | Connector amqp started\njvm 1    |  INFO | Listening for connections at: stomp://CZBK-20210302VL:61613?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600\njvm 1    |  INFO | Connector stomp started\njvm 1    |  INFO | Listening for connections at: mqtt://CZBK-20210302VL:1883?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600\njvm 1    |  INFO | Connector mqtt started\njvm 1    |  INFO | Starting Jetty server\njvm 1    |  INFO | Creating Jetty connector\njvm 1    |  WARN | ServletContext@o.e.j.s.ServletContextHandler@7350746f{/,null,STARTING} has uncovered http methods for path: /\njvm 1    |  INFO | Listening for connections at ws://CZBK-20210302VL:61614?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600\njvm 1    |  INFO | Connector ws started\njvm 1    |  INFO | Apache ActiveMQ 5.16.3 (localhost, ID:CZBK-20210302VL-10434-1646035669595-0:1) started\njvm 1    |  INFO | For help or more information please see: http://activemq.apache.org\njvm 1    |  WARN | Store limit is 102400 mb (current store usage is 0 mb). The data directory: D:\\soft\\activemq\\bin\\win64\\..\\..\\data\\kahadb only has 68936 mb of usable space. - resetting to maximum available disk space: 68936 mb\njvm 1    |  INFO | ActiveMQ WebConsole available at http://127.0.0.1:8161/\njvm 1    |  INFO | ActiveMQ Jolokia REST API available at http://127.0.0.1:8161/api/jolokia/\n</code></pre>\n<p>​ 其中占用的端口有：61616、5672、61613、1883、61614，如果启动失败，请先管理对应端口即可。以下就是某个端口占用的报错信息，可以从抛出异常的位置看出，启动5672端口时端口被占用，显示java.net.BindException: Address already in use: JVM_Bind。</p>\n<blockquote>\n<p>Windows系统中终止端口运行的操作参看<a href=\"#%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%90%AF%E5%8A%A8%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\">【命令行启动常见问题及解决方案】</a></p>\n</blockquote>\n<h2><a id=\"_220\"></a>整合</h2>\n<p>做了这么多springboot整合第三方技术，已经摸到门路了，加坐标，做配置，调接口，直接开工</p>\n<p><strong>步骤①</strong>：导入springboot整合ActiveMQ的starter</p>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-activemq<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p><strong>步骤②</strong>：配置ActiveMQ的服务器地址</p>\n<pre><code class=\"prism language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">activemq</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">broker-url</span><span class=\"token punctuation\">:</span> tcp<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span><span class=\"token number\">61616</span>\n</code></pre>\n<p><strong>步骤③</strong>：使用JmsMessagingTemplate操作ActiveMQ</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MessageServiceActivemqImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MessageService</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">JmsMessagingTemplate</span> messagingTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"待发送短信的订单已纳入处理队列，id：\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        messagingTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"order.queue.id\"</span><span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">doMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">String</span> id <span class=\"token operator\">=</span> messagingTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">receiveAndConvert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"order.queue.id\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已完成短信发送业务，id：\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>​ 发送消息需要先将消息的类型转换成字符串，然后再发送，所以是convertAndSend，定义消息发送的位置，和具体的消息内容，此处使用id作为消息内容。</p>\n<p>​ 接收消息需要先将消息接收到，然后再转换成指定的数据类型，所以是receiveAndConvert，接收消息除了提供读取的位置，还要给出转换后的数据的具体类型。</p>\n<blockquote>\n<p>convertAndSend、receiveAndConvert有多种传参形式，我们也可以不指定消息发送的位置，在配置中设定默认的消息发送位置：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f244ef6df07042bea1f718a9e6586a45.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dd2bcc52666449f8bddafeb253a45fcf.png\"/><br/> 结果：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a7b3fd566e5d44ada511e3e200acccfd.png\"/></p>\n</blockquote>\n<blockquote>\n<p>在实际情况下消息队列放入消息之后，我们是不会手动再去把消息从其中拿出来，而是消息一进入队列，就被分配到对应的子服务器中。想要实现这种效果就离不开我们的监听器。一句话：我们使用监听器来实现一有消息就消费的效果</p>\n</blockquote>\n<p><strong>步骤④</strong>：使用消息监听器(单独创建一个类)在服务器启动后，监听指定位置，当消息出现后，立即消费消息</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MessageListener</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@JmsListener</span><span class=\"token punctuation\">(</span>destination <span class=\"token operator\">=</span> <span class=\"token string\">\"order.queue.id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@SendTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"order.other.queue.id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已完成短信发送业务，id：\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"new:\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>​ 使用注解@JmsListener定义当前方法监听ActiveMQ中指定名称的消息队列。</p>\n<p><strong>如果当前消息队列处理完还需要继续向下传递当前消息到另一个队列中使用注解@SendTo即可</strong>，这样即可构造连续执行的顺序消息队列。<br/> 上面的代码我们运行完之后，会发现：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\62d10f1a6b3943c8b54eb3920bc71b30.png\"/></p>\n<p><strong>步骤⑤</strong>：切换消息模型由点对点模型到发布订阅模型，修改jms配置即可</p>\n<pre><code class=\"prism language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">activemq</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">broker-url</span><span class=\"token punctuation\">:</span> tcp<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span><span class=\"token number\">61616</span>\n  <span class=\"token key atrule\">jms</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">pub-sub-domain</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n</code></pre>\n<p>​ pub-sub-domain默认值为false，即点对点模型，修改为true后就是发布订阅模型。</p>\n<p>例如当我们使用发布订阅模型的时候，我们send几条消息，在Topics栏里面我们可以看到：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\035a731b37b84a909639c87402c5f36a.png\"/></p>\n<p><strong>总结</strong></p>\n<ol><li>springboot整合ActiveMQ提供了JmsMessagingTemplate对象作为客户端操作消息队列</li><li>操作ActiveMQ需要配置ActiveMQ服务器地址，默认端口61616</li><li>企业开发时通常使用监听器来处理消息队列中的消息，设置监听器使用注解@JmsListener</li><li>配置jms的pub-sub-domain属性可以在点对点模型和发布订阅模型间切换消息模型</li></ol>\n<h1><a id=\"SpringBootRabbitMQ_322\"></a>SpringBoot整合RabbitMQ</h1>\n<p>RabbitMQ是MQ产品中的目前较为流行的产品之一，它遵从AMQP协议。RabbitMQ的底层实现语言使用的是Erlang，所以安装RabbitMQ需要先安装Erlang。</p>\n<p><strong>Erlang安装</strong></p>\n<p>​ windows版安装包下载地址：<a href=\"https://www.erlang.org/downloads\">https</a><a href=\"https://www.erlang.org/downloads\">😕/www.erlang.org/downloads</a></p>\n<p>​ 下载完毕后得到exe安装文件，一键傻瓜式安装，安装完毕需要重启，需要重启，需要重启。</p>\n<p>​ 安装的过程中可能会出现依赖Windows组件的提示，根据提示下载安装即可，都是自动执行的，如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ef2d7f33b8bf42ccb584f4aed9aa4366.png\"/></p>\n<p>​ Erlang安装后需要配置环境变量，否则RabbitMQ将无法找到安装的Erlang。需要配置项如下，作用等同JDK配置环境变量的作用。</p>\n<ul><li>ERLANG_HOME</li><li>PATH</li></ul>\n<h2><a id=\"_340\"></a>安装</h2>\n<p>​ windows版安装包下载地址：<a href=\"https://rabbitmq.com/install-windows.html\">https://</a><a href=\"https://rabbitmq.com/install-windows.html\">rabbitmq.com/install-windows.html</a></p>\n<p>​ 下载完毕后得到exe安装文件，一键傻瓜式安装，安装完毕后会得到如下文件:<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1cada3ac19774144a7b02a10de09f3dc.png\"/></p>\n<p><strong>启动服务器</strong></p>\n<pre><code class=\"prism language-CMD\">rabbitmq-service.bat start\t\t# 启动服务\nrabbitmq-service.bat stop\t\t# 停止服务\nrabbitmqctl status\t\t\t\t# 查看服务状态\n</code></pre>\n<p>​ 运行sbin目录下的rabbitmq-service.bat命令即可，start参数表示启动，stop参数表示退出，默认对外服务端口5672。</p>\n<blockquote>\n<p>注意：启动rabbitmq的过程实际上是开启rabbitmq对应的系统服务，需要管理员权限方可执行。</p>\n</blockquote>\n<blockquote>\n<p>说明：有没有感觉5672的服务端口很熟悉？activemq与rabbitmq有一个端口冲突问题。当两者共存时，请确保另一个处于关闭状态。</p>\n</blockquote>\n<blockquote>\n<p>Tips：不喜欢命令行的小伙伴可以使用任务管理器中的服务页，找到RabbitMQ服务，使用鼠标右键菜单控制服务的启停。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a08076a3ce74427aa425cbc4d86d6b45.png\"/></p>\n<p><strong>访问web管理服务</strong></p>\n<p>​ RabbitMQ也提供有web控制台服务，但是此功能是一个插件，需要先启用才可以使用。</p>\n<pre><code class=\"prism language-CMD\">rabbitmq-plugins.bat list\t\t\t\t\t\t\t# 查看当前所有插件的运行状态\nrabbitmq-plugins.bat enable rabbitmq_management\t\t# 启动rabbitmq_management插件\n</code></pre>\n<p>​ 启动插件后可以在插件运行状态中查看是否运行，运行后通过浏览器即可打开服务后台管理界面</p>\n<pre><code class=\"prism language-CMD\">http://localhost:15672\n</code></pre>\n<p>​ web管理服务默认端口15672，访问后可以打开RabbitMQ的管理界面，如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6fd42238ce4e4b11a4c3a8ba8ed39e4d.png\"/></p>\n<p>​ 首先输入访问用户名和密码，初始化用户名和密码相同，均为：guest，成功登录后进入管理后台界面，如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c2454530a9204614af4ce867cb595a4e.png\"/></p>\n<h2><a id=\"direct_396\"></a>整合(direct模型)</h2>\n<p>​ RabbitMQ满足AMQP协议，因此不同的消息模型对应的制作不同，先使用最简单的direct模型开发。</p>\n<p><strong>步骤①</strong>：导入springboot整合amqp的starter，amqp协议默认实现为rabbitmq方案</p>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-amqp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p><strong>步骤②</strong>：配置RabbitMQ的服务器地址</p>\n<pre><code class=\"prism language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">rabbitmq</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> localhost\n    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5672</span>\n</code></pre>\n<p><strong>步骤③</strong>：初始化直连模式系统设置</p>\n<p>​ 由于RabbitMQ不同模型要使用不同的交换机，因此需要先初始化RabbitMQ相关的对象，例如队列，交换机等</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RabbitConfigDirect</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Queue</span> <span class=\"token function\">directQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"direct_queue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Queue</span> <span class=\"token function\">directQueue2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"direct_queue2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DirectExchange</span> <span class=\"token function\">directExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DirectExchange</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"directExchange\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Binding</span> <span class=\"token function\">bindingDirect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">BindingBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token function\">directQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">(</span><span class=\"token function\">directExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"direct\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Binding</span> <span class=\"token function\">bindingDirect2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">BindingBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token function\">directQueue2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">(</span><span class=\"token function\">directExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"direct2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>​ 队列Queue与直连交换机DirectExchange创建后，还需要绑定他们之间的关系Binding，这样就可以通过交换机操作对应队列。</p>\n<p><strong>步骤④</strong>：使用AmqpTemplate操作RabbitMQ</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MessageServiceRabbitmqDirectImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MessageService</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AmqpTemplate</span> amqpTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"待发送短信的订单已纳入处理队列（rabbitmq direct），id：\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        amqpTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"directExchange\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"direct\"</span><span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>​ amqp协议中的操作API接口名称看上去和jms规范的操作API接口很相似，但是传递参数差异很大。</p>\n<p><strong>步骤⑤</strong>：使用消息监听器在服务器启动后，监听指定位置，当消息出现后，立即消费消息</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MessageListener</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>queues <span class=\"token operator\">=</span> <span class=\"token string\">\"direct_queue\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已完成短信发送业务(rabbitmq direct)，id：\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>​ 使用注解@RabbitListener定义当前方法监听RabbitMQ中指定名称的消息队列。</p>\n<h2><a id=\"topic_482\"></a>整合(topic模型)</h2>\n<p><strong>步骤①</strong>：同上</p>\n<p><strong>步骤②</strong>：同上</p>\n<p><strong>步骤③</strong>：初始化主题模式系统设置</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RabbitConfigTopic</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Queue</span> <span class=\"token function\">topicQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"topic_queue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Queue</span> <span class=\"token function\">topicQueue2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"topic_queue2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TopicExchange</span> <span class=\"token function\">topicExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TopicExchange</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"topicExchange\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Binding</span> <span class=\"token function\">bindingTopic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">BindingBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token function\">topicQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">(</span><span class=\"token function\">topicExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"topic.*.id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Binding</span> <span class=\"token function\">bindingTopic2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">BindingBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token function\">topicQueue2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">(</span><span class=\"token function\">topicExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"topic.orders.*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>​ 主题模式支持routingKey匹配模式，*表示匹配一个单词，#表示匹配任意内容，这样就可以通过主题交换机将消息分发到不同的队列中，详细内容请参看RabbitMQ系列课程。</p>\n<table><thead><tr><th><strong>匹配键</strong></th><th><strong>topic.*.*</strong></th><th><strong>topic.#</strong></th></tr></thead><tbody><tr><td>topic.order.id</td><td>true</td><td>true</td></tr><tr><td>order.topic.id</td><td>false</td><td>false</td></tr><tr><td>topic.sm.order.id</td><td>false</td><td>true</td></tr><tr><td>topic.sm.id</td><td>false</td><td>true</td></tr><tr><td>topic.id.order</td><td>true</td><td>true</td></tr><tr><td>topic.id</td><td>false</td><td>true</td></tr><tr><td>topic.order</td><td>false</td><td>true</td></tr></tbody></table>\n<p><strong>步骤④</strong>：使用AmqpTemplate操作RabbitMQ</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MessageServiceRabbitmqTopicImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MessageService</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AmqpTemplate</span> amqpTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"待发送短信的订单已纳入处理队列（rabbitmq topic），id：\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        amqpTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"topicExchange\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"topic.orders.id\"</span><span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>​ 发送消息后，根据当前提供的routingKey与绑定交换机时设定的routingKey进行匹配，规则匹配成功消息才会进入到对应的队列中。</p>\n<p><strong>步骤⑤</strong>：使用消息监听器在服务器启动后，监听指定队列</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MessageListener</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>queues <span class=\"token operator\">=</span> <span class=\"token string\">\"topic_queue\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已完成短信发送业务(rabbitmq topic 1)，id：\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>queues <span class=\"token operator\">=</span> <span class=\"token string\">\"topic_queue2\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">receive2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已完成短信发送业务(rabbitmq topic 22222222)，id：\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>​ 使用注解@RabbitListener定义当前方法监听RabbitMQ中指定名称的消息队列。</p>\n<p><strong>总结</strong></p>\n<ol><li>springboot整合RabbitMQ提供了AmqpTemplate对象作为客户端操作消息队列</li><li>操作ActiveMQ需要配置ActiveMQ服务器地址，默认端口5672</li><li>企业开发时通常使用监听器来处理消息队列中的消息，设置监听器使用注解@RabbitListener</li><li>RabbitMQ有5种消息模型，使用的队列相同，但是交换机不同。交换机不同，对应的消息进入的策略也不同</li></ol>\n<h1><a id=\"SpringBootRocketMQ_571\"></a>SpringBoot整合RocketMQ</h1>\n<p>​ RocketMQ由阿里研发，后捐赠给apache基金会，目前是apache基金会顶级项目之一，也是目前市面上的MQ产品中较为流行的产品之一，它遵从AMQP协议。</p>\n<h2><a id=\"_575\"></a>安装</h2>\n<p>​ windows版安装包下载地址：<a href=\"https://rocketmq.apache.org/\">https://rocketmq.apache.org</a><a href=\"https://rocketmq.apache.org/\">/</a></p>\n<p>​ 下载完毕后得到zip压缩文件，解压缩即可使用，解压后得到如下文件</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\95027bdb8ef04eb89592069f4d66dff0.png\"/></p>\n<p>​ RocketMQ安装后需要配置环境变量，具体如下：</p>\n<ul><li>ROCKETMQ_HOME</li><li>PATH</li><li>NAMESRV_ADDR （建议）： 127.0.0.1:9876</li></ul>\n<p>​关于NAMESRV_ADDR对于初学者来说建议配置此项，也可以通过命令设置对应值，操作略显繁琐，建议配置。系统学习RocketMQ知识后即可灵活控制该项。</p>\n<p><strong>RocketMQ工作模式</strong></p>\n<p>在RocketMQ中，处理业务的服务器称为broker，生产者与消费者不是直接与broker联系的，而是通过命名服务器进行通信。broker启动后会通知命名服务器自己已经上线，这样命名服务器中就保存有所有的broker信息。当生产者与消费者需要连接broker时，通过命名服务器找到对应的处理业务的broker，因此命名服务器在整套结构中起到一个信息中心的作用。并且broker启动前必须保障命名服务器先启动。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5a146048e7d84779b3e40a58cf440f73.png\"/></p>\n<p><strong>启动服务器</strong></p>\n<pre><code class=\"prism language-CMD\">mqnamesrv\t\t# 启动命名服务器\nmqbroker\t\t# 启动broker\n</code></pre>\n<p>运行bin目录下的mqnamesrv命令即可启动命名服务器，默认对外服务端口9876。</p>\n<p>运行bin目录下的mqbroker命令即可启动broker服务器，如果环境变量中没有设置NAMESRV_ADDR则需要在运行mqbroker指令前通过set指令设置NAMESRV_ADDR的值，并且每次开启均需要设置此项。</p>\n<p><strong>测试服务器启动状态</strong></p>\n<p>​ RocketMQ提供有一套测试服务器功能的测试程序，运行bin目录下的tools命令即可使用。</p>\n<pre><code class=\"prism language-CMD\">tools org.apache.rocketmq.example.quickstart.Producer\t\t# 生产消息\ntools org.apache.rocketmq.example.quickstart.Consumer\t\t# 消费消息\n</code></pre>\n<h2><a id=\"_619\"></a>整合（异步消息）</h2>\n<p><strong>步骤①</strong>：导入springboot整合RocketMQ的starter，此坐标不由springboot维护版本</p>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.apache.rocketmq<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>rocketmq-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.2.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p><strong>步骤②</strong>：配置RocketMQ的服务器地址</p>\n<pre><code class=\"prism language-yaml\"><span class=\"token key atrule\">rocketmq</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name-server</span><span class=\"token punctuation\">:</span> localhost<span class=\"token punctuation\">:</span><span class=\"token number\">9876</span>\n  <span class=\"token key atrule\">producer</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">group</span><span class=\"token punctuation\">:</span> group_rocketmq\n</code></pre>\n<p>​ 设置默认的生产者消费者所属组group。</p>\n<p><strong>步骤③</strong>：使用RocketMQTemplate操作RocketMQ</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MessageServiceRocketmqImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MessageService</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RocketMQTemplate</span> rocketMQTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"待发送短信的订单已纳入处理队列（rocketmq），id：\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">SendCallback</span> callback <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SendCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onSuccess</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SendResult</span> sendResult<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消息发送成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消息发送失败！！！！！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        rocketMQTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">asyncSend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"order_id\"</span><span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">,</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>​ 使用asyncSend方法发送异步消息。</p>\n<p><strong>步骤④</strong>：使用消息监听器在服务器启动后，监听指定位置，当消息出现后，立即消费消息</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@RocketMQMessageListener</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"order_id\"</span><span class=\"token punctuation\">,</span>consumerGroup <span class=\"token operator\">=</span> <span class=\"token string\">\"group_rocketmq\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MessageListener</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RocketMQListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已完成短信发送业务(rocketmq)，id：\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>​ RocketMQ的监听器必须按照标准格式开发，实现RocketMQListener接口，泛型为消息类型。</p>\n<p>​ 使用注解@RocketMQMessageListener定义当前类监听RabbitMQ中指定组、指定名称的消息队列。</p>\n<p><strong>总结</strong></p>\n<ol><li>springboot整合RocketMQ使用RocketMQTemplate对象作为客户端操作消息队列</li><li>操作RocketMQ需要配置RocketMQ服务器地址，默认端口9876</li><li>企业开发时通常使用监听器来处理消息队列中的消息，设置监听器使用注解@RocketMQMessageListener</li></ol>\n<h1><a id=\"SpringBootKafka_694\"></a>SpringBoot整合Kafka</h1>\n<h2><a id=\"_696\"></a>安装</h2>\n<p>​ windows版安装包下载地址：<a href=\"https://kafka.apache.org/downloads\">https://</a><a href=\"https://kafka.apache.org/downloads\">kafka.apache.org/downloads</a></p>\n<p>​ 下载完毕后得到tgz压缩文件，使用解压缩软件解压缩即可使用，解压后得到如下文件</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\75376b7fe35c462e9b6651579df05b38.png\"/></p>\n<p>​ 建议使用windows版2.8.1版本。</p>\n<p><strong>启动服务器</strong></p>\n<p>​ kafka服务器的功能相当于RocketMQ中的broker，kafka运行还需要一个类似于命名服务器的服务。在kafka安装目录中自带一个类似于命名服务器的工具，叫做zookeeper，它的作用是注册中心 。</p>\n<pre><code class=\"prism language-CMD\">zookeeper-server-start.bat ..\\..\\config\\zookeeper.properties\t\t# 启动zookeeper\nkafka-server-start.bat ..\\..\\config\\server.properties\t\t\t\t# 启动kafka\n</code></pre>\n<p>​ 运行bin目录下的windows目录下的zookeeper-server-start命令即可启动注册中心，默认对外服务端口2181。</p>\n<p>​ 运行bin目录下的windows目录下的kafka-server-start命令即可启动kafka服务器，默认对外服务端口9092。</p>\n<p><strong>创建主题</strong></p>\n<p>​ 和之前操作其他MQ产品相似，kakfa也是基于主题操作，操作之前需要先初始化topic。</p>\n<pre><code class=\"prism language-CMD\"># 创建topic\nkafka-topics.bat --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic itheima\n# 查询topic\nkafka-topics.bat --zookeeper 127.0.0.1:2181 --list\t\t\t\t\t\n# 删除topic\nkafka-topics.bat --delete --zookeeper localhost:2181 --topic itheima\n</code></pre>\n<p><strong>测试服务器启动状态</strong></p>\n<p>​ Kafka提供有一套测试服务器功能的测试程序，运行bin目录下的windows目录下的命令即可使用。</p>\n<pre><code class=\"prism language-CMD\">kafka-console-producer.bat --broker-list localhost:9092 --topic itheima\t\t\t\t\t\t\t# 测试生产消息\nkafka-console-consumer.bat --bootstrap-server localhost:9092 --topic itheima --from-beginning\t# 测试消息消费\n</code></pre>\n<h2><a id=\"_742\"></a>整合</h2>\n<p><strong>步骤①</strong>：导入springboot整合Kafka的starter，此坐标由springboot维护版本</p>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.kafka<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-kafka<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p><strong>步骤②</strong>：配置Kafka的服务器地址</p>\n<pre><code class=\"prism language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">kafka</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">bootstrap-servers</span><span class=\"token punctuation\">:</span> localhost<span class=\"token punctuation\">:</span><span class=\"token number\">9092</span>\n    <span class=\"token key atrule\">consumer</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">group-id</span><span class=\"token punctuation\">:</span> order\n</code></pre>\n<p>​ 设置默认的生产者消费者所属组id。</p>\n<p><strong>步骤③</strong>：使用KafkaTemplate操作Kafka</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MessageServiceKafkaImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MessageService</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">KafkaTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> kafkaTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"待发送短信的订单已纳入处理队列（kafka），id：\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        kafkaTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"itheima2022\"</span><span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>​ 使用send方法发送消息，需要传入topic名称。</p>\n<p><strong>步骤④</strong>：使用消息监听器在服务器启动后，监听指定位置，当消息出现后，立即消费消息</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MessageListener</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@KafkaListener</span><span class=\"token punctuation\">(</span>topics <span class=\"token operator\">=</span> <span class=\"token string\">\"itheima2022\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token keyword\">record</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已完成短信发送业务(kafka)，id：\"</span><span class=\"token operator\">+</span><span class=\"token keyword\">record</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>​ 使用注解@KafkaListener定义当前方法监听Kafka中指定topic的消息，接收到的消息封装在对象ConsumerRecord中，获取数据从ConsumerRecord对象中获取即可。</p>\n<p><strong>总结</strong></p>\n<ol><li> <p>springboot整合Kafka使用KafkaTemplate对象作为客户端操作消息队列</p> </li><li> <p>操作Kafka需要配置Kafka服务器地址，默认端口9092</p> </li><li> <p>企业开发时通常使用监听器来处理消息队列中的消息，设置监听器使用注解@KafkaListener。接收消息保存在形参ConsumerRecord对象中</p> </li></ol>\n<h1><a id=\"__805\"></a>附： 消息的深度思考</h1>\n<p><strong>思考：为什么要设置生产者和消费者呢？</strong></p>\n<p>这就是要说到消息的意义了。信息通常就是一组数据，但是消息由于有了生产者和消费者，就出现了消息中所包含的信息可以被二次解读，生产者发送消息，可以理解为生产者发送了一个信息，也可以理解为生产者发送了一个命令；消费者接收消息，可以理解为消费者得到了一个信息，也可以理解为消费者得到了一个命令。对比一下我们会发现信息是一个基本数据，而命令则可以关联下一个行为动作，这样就可以理解为基于接收的消息相当于得到了一个行为动作，使用这些行为动作就可以组织成一个业务逻辑，进行进一步的操作。总的来说，消息其实也是一组信息，只是为其赋予了全新的含义，因为有了消息的流动，并且是有方向性的流动，带来了基于流动的行为产生的全新解读。开发者就可以基于消息的这种特殊解，将其换成代码中的指令。</p>\n<h1><a id=\"_812\"></a>附：购物订单发送手机短信案例</h1>\n<p>为了便于下面演示各种各样的消息中间件技术，我们创建一个购物过程生成订单时为用户发送短信的案例环境，模拟使用消息中间件实现发送手机短信的过程。</p>\n<p>​ 手机验证码案例需求如下：</p>\n<ul><li> <p>执行下单业务时（模拟此过程），调用消息服务，将要发送短信的订单id传递给消息中间件</p> </li><li> <p>消息处理服务接收到要发送的订单id后输出订单id（模拟发短信）</p> </li></ul>\n<p>由于不涉及数据读写，仅开发业务层与表现层，其中短信处理的业务代码独立开发，代码如下：</p>\n<p><strong>订单业务</strong></p>\n<p>​ <strong>业务层接口</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">OrderService</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>模拟传入订单id，执行下订单业务，参数为虚拟设定，实际应为订单对应的实体类</p>\n<p>​ <strong>业务层实现</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OrderService</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MessageService</span> messageService<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//一系列操作，包含各种服务调用，处理各种业务</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"订单处理开始\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//短信消息处理</span>\n        messageService<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"订单处理结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>​ 业务层转调短信处理的服务MessageService</p>\n<p>​ <strong>表现层服务</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/orders\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderController</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">OrderService</span> orderService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{id}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        orderService<span class=\"token punctuation\">.</span><span class=\"token function\">order</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>​ 表现层对外开发接口，传入订单id即可（模拟）</p>\n<p><strong>短信处理业务</strong></p>\n<p>​ <strong>业务层接口</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">MessageService</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">doMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>​ 短信处理业务层接口提供两个操作，发送要处理的订单id到消息中间件，另一个操作目前暂且设计成处理消息，实际消息的处理过程不应该是手动执行，应该是自动执行，到具体实现时再进行设计</p>\n<p>​ <strong>业务层实现</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MessageServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MessageService</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> msgList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"待发送短信的订单已纳入处理队列，id：\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        msgList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">doMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">String</span> id <span class=\"token operator\">=</span> msgList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已完成短信发送业务，id：\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>​ 短信处理业务层实现中使用集合先模拟消息队列，观察效果</p>\n<p>​ <strong>表现层服务</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/msgs\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MessageController</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MessageService</span> messageService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">doMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">String</span> id <span class=\"token operator\">=</span> messageService<span class=\"token punctuation\">.</span><span class=\"token function\">doMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>短信处理表现层接口暂且开发出一个处理消息的入口，但是此业务是对应业务层中设计的模拟接口，实际业务不需要设计此接口。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-09-03 13:03:37", "summary": "文章目录消息的概念处理消息的标准规范整合安装整合整合安装整合模型整合模型整合安装整合异步消息整合安装整合附：消息的深度思考附：购物订单发送手机短信案例消息的概念从广义角度来说，消息其实就是信息，但是和"}