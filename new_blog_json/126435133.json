{"blogid": "126435133", "writerAge": "码龄2年", "writerBlogNum": "48", "writerCollect": "669", "writerComment": "1135", "writerFan": "1942", "writerGrade": "5级", "writerIntegral": "2353", "writerName": "广龙宇", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126435133.jpg", "writerRankTotal": "8128", "writerRankWeekly": "115", "writerThumb": "618", "writerVisitNum": "1805810", "blog_read_count": "7009", "blog_time": "于 2022-08-23 07:15:03 发布", "blog_title": "【一起学Rust | 进阶篇 | thesaurus-rs库】Rust 的离线同义词库——thesaurus-rs", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\c25d1bdfde5f45a78978e3c27a3cac87.png\"/></p>\n<hr/>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_8\">前言</a></li><li><ul><li><a href=\"#_13\">后端比较</a></li></ul>\n</li><li><a href=\"#_21\">一、安装与引用</a></li><li><ul><li><a href=\"#1_WordNet_22\">1. 使用WordNet后端</a></li><li><a href=\"#2_moby_29\">2. 使用moby后端</a></li><li><a href=\"#3_buildcrate_42\">3. build下载crate</a></li></ul>\n</li><li><a href=\"#_52\">二、使用步骤</a></li><li><ul><li><a href=\"#1_53\">1.获取命令行参数</a></li><li><a href=\"#2_65\">2.取到同义词</a></li><li><ul><li><a href=\"#_86\">补充</a></li></ul>\n</li><li><a href=\"#3_129\">3.输出结果</a></li><li><a href=\"#4_148\">4.运行效果</a></li><li><a href=\"#5_159\">5.完整代码</a></li></ul>\n</li><li><a href=\"#_189\">总结</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_8\"></a>前言</h1>\n<p><code>thesaurus-rs</code>是一个完全基于Rust实现的离线的同义词库，可以使用<code>wordnet</code>和<code>moby</code>词库作为后端（白鲸和词网）。</p>\n<p>显而易见，<code>thesaurus-rs</code>就是通过你给出的一个单词，然后给出这个单词的同义词，就类似于字典。</p>\n<h2><a id=\"_13\"></a>后端比较</h2>\n<table><thead><tr><th>名称</th><th>简单示例二进制包大小</th><th>简单示例二进制包大小 (剥离)</th><th>可用词</th><th>平均同义词数</th><th>压缩字典大小</th><th>授权</th></tr></thead><tbody><tr><td>Moby</td><td>15M</td><td>11M</td><td>30159</td><td>83.287</td><td>11M</td><td>US Public Domain</td></tr><tr><td>Wordnet</td><td>6.9M</td><td>3.4M</td><td>125701</td><td>3.394</td><td>2.9M</td><td><a href=\"https://wordnet.princeton.edu/license-and-commercial-use\">Wordnet License</a></td></tr></tbody></table>\n<hr/>\n<h1><a id=\"_21\"></a>一、安装与引用</h1>\n<h2><a id=\"1_WordNet_22\"></a>1. 使用WordNet后端</h2>\n<p>将下面的crate添加到你的<code>Cargo.toml</code>文件中</p>\n<pre><code class=\"prism language-rust\">thesaurus <span class=\"token operator\">=</span> <span class=\"token string\">\"0.5\"</span>\n</code></pre>\n<h2><a id=\"2_moby_29\"></a>2. 使用moby后端</h2>\n<p>将下面的crate添加到你的<code>Cargo.toml</code>文件中</p>\n<pre><code class=\"prism language-rust\">thesaurus <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> version <span class=\"token operator\">=</span> <span class=\"token string\">\"0.5\"</span><span class=\"token punctuation\">,</span> features <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"moby\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"static\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> default_features <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>注意：这里<code>features </code>添加了两项，分别是moby和static，表明使用的是moby后端，同时也表明，默认的后端是WordNet，这里默认配置的是WordNet和static。</p>\n<hr/>\n<p><code>static</code>是个默认开启的功能，即词库词典在运行时存储在内存中。这样做的好处是初始化以后，对<code>dict</code>和<code>synonyms</code>的调用速度提升了 2.5-3 倍，同时增加了内存使用量。你可以关闭它，使用<code>default_features = false</code>，就和上方的使用方法一样。</p>\n</blockquote>\n<h2><a id=\"3_buildcrate_42\"></a>3. build下载crate</h2>\n<p>在当前项目目录终端中运行命令</p>\n<pre><code class=\"prism language-rust\">cargo build\n</code></pre>\n<p>如果你一直学习的本系列视频，则无需进行这一步。</p>\n<h1><a id=\"_52\"></a>二、使用步骤</h1>\n<h2><a id=\"1_53\"></a>1.获取命令行参数</h2>\n<p>我们使用系统自带的方式来获取命令行参数</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span>env<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>然后存储参数到变量中</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> args <span class=\"token operator\">=</span> <span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">args</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"2_65\"></a>2.取到同义词</h2>\n<p>env的arg获取的第0个参数是当前程序的程序名，第一个参数就是我们所要的单词，我们接收这个参数，并且存入word变量中，</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> word<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">match</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> word<span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">None</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token macro property\">eprintln!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"至少要包含一个单词作为参数\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token namespace\">process<span class=\"token punctuation\">::</span></span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>然后调用<code>thesaurus::synonyms</code>方法来获取同义词</p>\n<pre><code class=\"prism language-rust\">    <span class=\"token keyword\">let</span> synonyms <span class=\"token operator\">=</span> <span class=\"token namespace\">thesaurus<span class=\"token punctuation\">::</span></span><span class=\"token function\">synonyms</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>此处还可以获取词库的词量</p>\n<pre><code class=\"prism language-rust\">    <span class=\"token keyword\">let</span> num_words <span class=\"token operator\">=</span> <span class=\"token namespace\">thesaurus<span class=\"token punctuation\">::</span></span><span class=\"token function\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<h3><a id=\"_86\"></a>补充</h3>\n<p><code>thesaurus-rs</code>常用的是两个方法<code>dict</code>和<code>synonyms</code></p>\n<hr/>\n<p><code>dict</code>返回一个内部字典，是一个HashMap，其定义为下<br/> <code>pub fn dict() -&gt; HashMap&lt;String, Vec&lt;String&gt;&gt;</code></p>\n<hr/>\n<p><code>synonyms</code>需要传入一个字符串引用，返回一个单词的同义词字符串vector，其定义为下<br/> <code>pub fn synonyms(word: impl AsRef&lt;str&gt;) -&gt; Vec&lt;String&gt;</code></p>\n</blockquote>\n<p>现给出这两方法的源码</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">&gt;&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> dict<span class=\"token punctuation\">:</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">&gt;&gt;</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token attribute attr-name\">#[cfg(feature = <span class=\"token string\">\"static\"</span>)]</span>\n    dict<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DICT</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_owned</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// if we're not static...</span>\n    <span class=\"token keyword\">if</span> dict<span class=\"token punctuation\">.</span><span class=\"token function\">is_empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        dict<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token function\">parse_dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    dict\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">synonyms</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">:</span> <span class=\"token keyword\">impl</span> <span class=\"token class-name\">AsRef</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">str</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> s <span class=\"token operator\">=</span> <span class=\"token function\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">.</span><span class=\"token function\">as_ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>x<span class=\"token closure-punctuation punctuation\">|</span></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">unwrap_or_default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">dedup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">sort_by</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>a<span class=\"token punctuation\">,</span> b<span class=\"token closure-punctuation punctuation\">|</span></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    s\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"3_129\"></a>3.输出结果</h2>\n<p>在上述的步骤中我们已经获取到了所要单词的同义词，接下来使用for循环依次输出所有的同义词</p>\n<p>先对当前查询的信息进行输出，主要输出当前词库共有多少个单词，查询的单词有多少个同义词，当然你也可以不写</p>\n<pre><code class=\"prism language-rust\"><span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{num_words} 个单词被索引, 并且\\\"{word}\\\"有 {} 个同义词 ...\"</span><span class=\"token punctuation\">,</span> synonyms<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>接下来输出所有的同义词</p>\n<pre><code class=\"prism language-rust\">\t<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"以下同义词...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token operator\">&amp;</span>synonyms <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"   {x}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"4_148\"></a>4.运行效果</h2>\n<p>在终端输入命令</p>\n<pre><code class=\"prism language-rust\">cargo run good\n</code></pre>\n<p>其中<code>good</code>就是我们要查询的同义词，其运行结果如下<br/> <img alt=\"运行结果\" src=\"..\\..\\static\\image\\67e63d406e3c4e089eeeda14940d21bd.jpeg\"/></p>\n<h2><a id=\"5_159\"></a>5.完整代码</h2>\n<p>这里给出完整代码，以便于学习参考</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span>env<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> args <span class=\"token operator\">=</span> <span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">args</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> word<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">match</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> word<span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">None</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token macro property\">eprintln!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"至少要包含一个单词作为参数\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token namespace\">process<span class=\"token punctuation\">::</span></span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> synonyms <span class=\"token operator\">=</span> <span class=\"token namespace\">thesaurus<span class=\"token punctuation\">::</span></span><span class=\"token function\">synonyms</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> num_words <span class=\"token operator\">=</span> <span class=\"token namespace\">thesaurus<span class=\"token punctuation\">::</span></span><span class=\"token function\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{num_words} 个单词被索引, 并且\\\"{word}\\\"有 {} 个同义词 ...\"</span><span class=\"token punctuation\">,</span> synonyms<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"以下同义词...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token operator\">&amp;</span>synonyms <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"   {x}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h1><a id=\"_189\"></a>总结</h1>\n<p>本期学习了Rust 的离线同义词库<code>thesaurus-rs</code>，通过简单的API就可以实现离线查询单词同义词，可惜只有英文的，该库较为简单，且在用途上较为单一，除了使用简单以外真的很难找出什么优点。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-23 07:15:03", "summary": "文章目录前言后端比较一、安装与引用使用后端使用后端下载二、使用步骤获取命令行参数取到同义词补充输出结果运行效果完整代码总结前言是一个完全基于实现的离线的同义词库，可以使用和词库作为后端白鲸和词网。显而"}