{"blogid": "122977889", "writerAge": "码龄10年", "writerBlogNum": "24", "writerCollect": "16", "writerComment": "1", "writerFan": "4", "writerGrade": "2级", "writerIntegral": "382", "writerName": "五仁烧饼", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122977889.jpg", "writerRankTotal": "124197", "writerRankWeekly": "195025", "writerThumb": "5", "writerVisitNum": "57444", "blog_read_count": "2018", "blog_time": "已于 2022-02-17 12:33:10 修改", "blog_title": "Unity获取场景中物体的方法详解，以及如何获取active为false的根节点", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>下面以如下的测试场景作为例子，进行说明。<span style=\"color:#fe2c24;\">此时测试的脚本是挂载在TestNode1</span>上</p>\n<p><img alt=\"\" height=\"132\" src=\"..\\..\\static\\image\\977456ddb45943d285cc46242d37ce55.png\" width=\"307\"/></p>\n<p><strong>一、GameObject.Find(string param)</strong></p>\n<p><strong>根据名字查找</strong></p>\n<p>最常用的方法是GameObject.Find，这里参数可以填<span style=\"color:#fe2c24;\">物体的名字</span>，并且是全局搜索，与脚本所在的节点并没有关系，比如下面直接查找TestNode111和TestNode22，均可以找到对应的点</p>\n<pre><code class=\"language-cs\">            if (GameObject.Find(\"TestNode111\") != null)\n            {\n                Debug.Log(\"GameObject.Find TestNode111 true\");\n            }\n            else\n            {\n                Debug.Log(\"GameObject.Find TestNode111 false\");\n            }\n\n\n            if (GameObject.Find(\"TestNode22\") != null)\n            {\n                Debug.Log(\"GameObject.Find TestNode22 true\");\n            }\n            else\n            {\n                Debug.Log(\"GameObject.Find TestNode22 false\");\n            }</code></pre>\n<p><img alt=\"\" height=\"73\" src=\"..\\..\\static\\image\\8e51f5926dcb415facb2497086b4bdfa.png\" width=\"525\"/></p>\n<p>但是由于这个方法查找的是全局的物体，所以当物体比较多的时候会消耗较大的性能，所以不要过于频繁地调用。还有要注意的一点是，如果场景中存在同名节点的话。这里只会返回找到的第一个节点，所以要避免重名的情况。</p>\n<p>还有就是<span style=\"color:#fe2c24;\">GameObject.Find参数为物体名时，无法找到active为false的节点</span>，可以尝试将TestNode111的active设为false，可以看到这时候就无法找到这个节点了</p>\n<p><img alt=\"\" height=\"75\" src=\"..\\..\\static\\image\\7951d6240c44467b869ed125fd832b1f.png\" width=\"312\"/></p>\n<p></p>\n<p><img alt=\"\" height=\"75\" src=\"..\\..\\static\\image\\60515d76bf9c4161b061d603ef30536a.png\" width=\"453\"/></p>\n<p><strong>根据路径查找</strong></p>\n<p>参数还可以填<span style=\"color:#fe2c24;\">路径</span>，这里的路径可以是<span style=\"color:#fe2c24;\">绝对路径</span>和<span style=\"color:#fe2c24;\">相对路径</span>，通过路径来寻找节点的消耗，会比直接根据物体名称要低，节点结构还是如下</p>\n<p><img alt=\"\" height=\"71\" src=\"..\\..\\static\\image\\67465a8014be4e2eaaf8e6dd46166375.png\" width=\"258\"/></p>\n<p>绝对路径是以\"/\"开头或者物体名字开头，并且场景名称是不在这个路径里面。比如查找<span style=\"color:#fe2c24;\">TestNode111</span>这个点。</p>\n<p>绝对路径应该填GameObject.Find(<span style=\"color:#fe2c24;\">\"/TestNode1/TestNode11/TestNode111\"</span>)</p>\n<p>如果填的是GameObject.Find(\"/TestScene/TestNode1/TestNode11/TestNode111\")或者GameObject.Find(\"TestScene/TestNode1/TestNode11/TestNode111\")都是无法查找到对应节点的。</p>\n<p><span style=\"color:#fe2c24;\">相对路径的时候需要以物体的name开头，而不能以\"/\"开头</span></p>\n<p>比如GameObject.Find(\"TestNode11/TestNode111\") 查找成功</p>\n<p>而GameObject.Find(\"/TestNode111\")查找失败</p>\n<pre><code class=\"language-cs\">            if (GameObject.Find(\"TestNode11/TestNode111\") != null)\n            {\n                Debug.Log(\"GameObject.Find TestNode11/TestNode111 true\");\n            }\n            else\n            {\n                Debug.Log(\"GameObject.Find TestNode11/TestNode111 false\");\n            }\n\n            if (GameObject.Find(\"/TestNode1/TestNode11/TestNode111\") != null)\n            {\n                Debug.Log(\"GameObject.Find /TestNode1/TestNode11/TestNode111 true\");\n            }\n            else\n            {\n                Debug.Log(\"GameObject.Find /TestNode1/TestNode11/TestNode111 false\");\n            }\n\n            if (GameObject.Find(\"TestNode1/TestNode11/TestNode111\") != null)\n            {\n                Debug.Log(\"GameObject.Find TestNode1/TestNode11/TestNode111 true\");\n            }\n            else\n            {\n                Debug.Log(\"GameObject.Find TestNode1/TestNode11/TestNode111 false\");\n            }\n\n\n            if (GameObject.Find(\"TestScene/TestNode1/TestNode11/TestNode111\") != null)\n            {\n                Debug.Log(\"GameObject.Find TestScene/TestNode1/TestNode11/TestNode111 true\");\n            }\n            else\n            {\n                Debug.Log(\"GameObject.Find TestScene/TestNode1/TestNode11/TestNode111 false\");\n            }\n\n            if (GameObject.Find(\"/TestNode111\") != null)\n            {\n                Debug.Log(\"GameObject.Find /TestNode111 true\");\n            }\n            else\n            {\n                Debug.Log(\"GameObject.Find /TestNode111 false\");\n            }</code></pre>\n<p><img alt=\"\" height=\"233\" src=\"..\\..\\static\\image\\cc724d57fd9a49fa967610cb901e3d1e.png\" width=\"546\"/></p>\n<p>在<span style=\"color:#fe2c24;\">用绝对路径找active为false的时候，如果被查找的节点active为false，而父节点active为true，还是可以找到这个节点的</span>。结果如下</p>\n<p><img alt=\"\" height=\"53\" src=\"..\\..\\static\\image\\0fdd9b48fe5d471fb82ba052eaaa5039.png\" width=\"195\"/></p>\n<p> <img alt=\"\" height=\"44\" src=\"..\\..\\static\\image\\c5f6ff9e80564495ac0d383e23335e95.png\" width=\"810\"/></p>\n<p> 用相对路径查找，则无法找到active为false的节点</p>\n<p><img alt=\"\" height=\"48\" src=\"..\\..\\static\\image\\c9d950a4dab5402a8df6c44a6c1cd6ae.png\" width=\"700\"/></p>\n<p></p>\n<p>而当他的父节点active也为false的时候查找就会失败，结果如下</p>\n<p> <img alt=\"\" height=\"75\" src=\"..\\..\\static\\image\\1e5083deba8e4fe7a0187854f6ccb661.png\" width=\"301\"/></p>\n<p><img alt=\"\" height=\"51\" src=\"..\\..\\static\\image\\4403256b25b244f09629e0e66ab2a180.png\" width=\"946\"/></p>\n<p><strong>二、GameObject.FindWithTag</strong></p>\n<p>GameObject.FindWithTag的逻辑跟GameObject.Find基本相同，同样是全局查找。跟GameObject根据名字查找的功能类似，只不过查找的是根据Tag属性，而且<span style=\"color:#fe2c24;\">同样无法找到active为false的节点。</span></p>\n<p><img alt=\"\" height=\"220\" src=\"..\\..\\static\\image\\40f452d709f14184a5fc7ce8147eeab4.png\" width=\"282\"/></p>\n<p><strong> 三.Transform.Find</strong></p>\n<p>transform.Find是查找挂载脚本节点的子节点，并且只能找到孩子节点，<span style=\"color:#fe2c24;\">直接Find孙子是无法找到的</span>。如果想要找到孙子节点，就需要逐级地去调用Find函数。并且<span style=\"color:#fe2c24;\">transform.Find也可以找到active为false的节点</span>，下面是直接查找孩子节点和孙子节点的结果</p>\n<pre><code class=\"language-cs\">            if (this.transform.Find(\"TestNode11\") != null)\n            {\n                Debug.Log(\"this.transform.Find TestNode11 true\");\n            }\n            else\n            {\n                Debug.Log(\"this.transform.Find TestNode11 false\");\n            }\n\n\n            if (this.transform.Find(\"TestNode111\") != null)\n            {\n                Debug.Log(\"this.transform.Find TestNode111 true\");\n            }\n            else\n            {\n                Debug.Log(\"this.transform.Find TestNode111 false\");\n            }</code></pre>\n<p><img alt=\"\" height=\"83\" src=\"..\\..\\static\\image\\65efd91a23db4925b4d77ec5348dd981.png\" width=\"388\"/></p>\n<p><strong> 四、获取active为false的根节点的方法</strong></p>\n<p>因为transform可以通过层级关系查找active为false的节点。所以用transform.Find基本可以找到场景里的所有节点。对于不在这个Transfrom的节点树上的根节点，比如例子中的TestNode2，如果active为true，也可以直接用GameObject.Find来查找。</p>\n<p>但是这里面还包含一种特殊的情况，就是不在同一个节点树上，active为false的根节点，下图中的TestNode2是active为false的根节点。</p>\n<p><img alt=\"\" height=\"103\" src=\"..\\..\\static\\image\\ea3febc17d064101a2a8fe94ea7f1e41.png\" width=\"317\"/></p>\n<p>这时候有两种方法</p>\n<p><span style=\"color:#fe2c24;\">UnityEngine.SceneManagement.SceneManager.GetActiveScene().GetRootGameObjects()</span></p>\n<p><span style=\"color:#fe2c24;\">Resources.FindObjectsOfTypeAll(typeof(GameObject))</span></p>\n<p>代码如下</p>\n<pre><code class=\"language-cs\">            GameObject[] allRoot = UnityEngine.SceneManagement.SceneManager.GetActiveScene().GetRootGameObjects();\n            for (int i = 0; i &lt; allRoot.Length; i++)\n            {\n                if (allRoot[i].name == \"TestNode2\")\n                {\n                    Debug.Log(\"GetRootGameObjects find TestNode2 true\");\n                    break;\n                }\n            }\n\n\n            GameObject[] all = Resources.FindObjectsOfTypeAll(typeof(GameObject)) as GameObject[];\n            for (int i = 0; i &lt; all.Length; i++)\n            {\n                var item = all[i];\n                if (item.scene.isLoaded)\n                {\n                    if (item.name == \"TestNode2\")\n                    {\n                        Debug.Log(\"FindObjectsOfTypeAll find TestNode2 true\");\n                        break;\n                    }\n\n                }\n            }</code></pre>\n<p>可以看到下方的结果，两种方法都可以顺利到找到TestNode2</p>\n<p> <img alt=\"\" height=\"84\" src=\"..\\..\\static\\image\\8e9b115689724c5ebb8bd81e44269041.png\" width=\"632\"/></p>\n<p></p>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-02-17 12:33:10", "summary": "下面以如下的测试场景作为例子，进行说明。此时测试的脚本是挂载在上一、根据名字查找最常用的方法是，这里参数可以填物体的名字，并且是全局搜索，与脚本所在的节点并没有关系，比如下面直接查找和，均可以找到对应"}