{"blogid": "123542598", "writerAge": "码龄2年", "writerBlogNum": "52", "writerCollect": "1235", "writerComment": "104", "writerFan": "467", "writerGrade": "4级", "writerIntegral": "855", "writerName": "Charms@", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123542598.jpg", "writerRankTotal": "18499", "writerRankWeekly": "161353", "writerThumb": "242", "writerVisitNum": "122763", "blog_read_count": "14370", "blog_time": "已于 2022-03-17 21:39:17 修改", "blog_title": "yolov5——train.py代码【注释、详解、使用教程】", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"yolov5trainpy_0\"></a>yolov5——train.py代码【注释、详解、使用教程】</h1>\n<p></p>\n<div class=\"toc\">\n<h3>yolov5——train.py代码【注释、详解、使用教程】</h3>\n<ul><li><a href=\"#yolov5trainpy_0\">yolov5——train.py代码【注释、详解、使用教程】</a></li><li><a href=\"#_8\">前言</a></li><li><a href=\"#1_parse_opt_15\">1. parse_opt函数</a></li><li><a href=\"#2_main_112\">2. main函数</a></li><li><ul><li><a href=\"#21_main_113\">2.1 main函数——打印关键词/安装环境</a></li><li><a href=\"#22_main_126\">2.2 main函数——是否进行断点训练</a></li><li><a href=\"#23_main_158\">2.3 main函数——是否分布式训练</a></li><li><a href=\"#24_main_182\">2.4 main函数——是否进化训练/遗传算法调参</a></li></ul>\n</li><li><a href=\"#3_train_311\">3. train函数</a></li><li><ul><li><a href=\"#31_train_312\">3.1 train函数——基本配置信息</a></li><li><a href=\"#32_train_378\">3.2 train函数——模型加载/断点训练</a></li><li><a href=\"#33_train_410\">3.3 train函数——冻结训练/冻结层设置</a></li><li><a href=\"#34_trainbatchsize_423\">3.4 train函数——图片大小/batchsize设置</a></li><li><a href=\"#35_train___436\">3.5 train函数——优化器选择 / 分组优化设置</a></li><li><a href=\"#36_trainema_478\">3.6 train函数——学习率/ema/归一化/单机多卡</a></li><li><a href=\"#37_train__anchor_530\">3.7 train函数——数据加载 / anchor调整</a></li><li><a href=\"#38_train_576\">3.8 train函数——训练配置/多尺度训练/热身训练</a></li><li><a href=\"#39_train_804\">3.9 train函数——训练结束/打印信息/保存结果</a></li></ul>\n</li><li><a href=\"#4_run_841\">4. run函数</a></li><li><a href=\"#5_855\">5.全部代码注释</a></li><li><a href=\"#_1717\">使用教程</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_8\"></a>前言</h1>\n<p>最近在用yolov5参加比赛，yolov5的技巧很多，仅仅用来参加比赛，着实有点浪费，所以有必要好好学习一番，在认真学习之前，首先向yolov5的作者致敬，对了我是用的版本是v6。每每看到这些大神的作品，实在是有点惭愧，要学的太多了。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bffb5cafbc87410482cb2f1c2c087713.png\"/></p>\n<h1><a id=\"1_parse_opt_15\"></a>1. parse_opt函数</h1>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">parse_opt</span><span class=\"token punctuation\">(</span>known<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    argparse 使用方法：\n    parse = argparse.ArgumentParser()\n    parse.add_argument('--s', type=int, default=2, help='flag_int')\n    \"\"\"</span>\n    parser <span class=\"token operator\">=</span> argparse<span class=\"token punctuation\">.</span>ArgumentParser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># weights 权重的路径./weights/yolov5s.pt.... </span>\n    <span class=\"token comment\"># yolov5提供4个不同深度不同宽度的预训练权重 用户可以根据自己的需求选择下载</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--weights'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span>ROOT <span class=\"token operator\">/</span> <span class=\"token string\">'yolov5s.pt'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'initial weights path'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># cfg 配置文件（网络结构） anchor/backbone/numclasses/head，训练自己的数据集需要自己生成</span>\n    <span class=\"token comment\"># 生成方式——例如我的yolov5s_mchar.yaml 根据自己的需求选择复制./models/下面.yaml文件，5个文件的区别在于模型的深度和宽度依次递增</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--cfg'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'model.yaml path'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># data 数据集配置文件（路径） train/val/label/， 该文件需要自己生成</span>\n    <span class=\"token comment\"># 生成方式——例如我的/data/mchar.yaml 训练集和验证集的路径 + 类别数 + 类别名称</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--data'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span>ROOT <span class=\"token operator\">/</span> <span class=\"token string\">'data/coco128.yaml'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'dataset.yaml path'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># hpy超参数设置文件（lr/sgd/mixup）./data/hyps/下面有5个超参数设置文件，每个文件的超参数初始值有细微区别，用户可以根据自己的需求选择其中一个</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--hyp'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span>ROOT <span class=\"token operator\">/</span> <span class=\"token string\">'data/hyps/hyp.scratch-low.yaml'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'hyperparameters path'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># epochs 训练轮次， 默认轮次为300次</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--epochs'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># batchsize 训练批次， 默认bs=16</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--batch-size'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'total batch size for all GPUs, -1 for autobatch'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># imagesize 设置图片大小, 默认640*640</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--imgsz'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'--img'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'--img-size'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">640</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'train, val image size (pixels)'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># rect 是否采用矩形训练，默认为False</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--rect'</span><span class=\"token punctuation\">,</span> action<span class=\"token operator\">=</span><span class=\"token string\">'store_true'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'rectangular training'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># resume 是否接着上次的训练结果，继续训练</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--resume'</span><span class=\"token punctuation\">,</span> nargs<span class=\"token operator\">=</span><span class=\"token string\">'?'</span><span class=\"token punctuation\">,</span> const<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'resume most recent training'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># nosave 不保存模型  默认False(保存)  在./runs/exp*/train/weights/保存两个模型 一个是最后一次的模型 一个是最好的模型</span>\n    <span class=\"token comment\"># best.pt/ last.pt 不建议运行代码添加 --nosave </span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--nosave'</span><span class=\"token punctuation\">,</span> action<span class=\"token operator\">=</span><span class=\"token string\">'store_true'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'only save final checkpoint'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># noval 最后进行测试, 设置了之后就是训练结束都测试一下， 不设置每轮都计算mAP, 建议不设置</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--noval'</span><span class=\"token punctuation\">,</span> action<span class=\"token operator\">=</span><span class=\"token string\">'store_true'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'only validate final epoch'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># noautoanchor 不自动调整anchor, 默认False, 自动调整anchor</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--noautoanchor'</span><span class=\"token punctuation\">,</span> action<span class=\"token operator\">=</span><span class=\"token string\">'store_true'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'disable AutoAnchor'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># evolve参数进化， 遗传算法调参</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--evolve'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> nargs<span class=\"token operator\">=</span><span class=\"token string\">'?'</span><span class=\"token punctuation\">,</span> const<span class=\"token operator\">=</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'evolve hyperparameters for x generations'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># bucket谷歌优盘 / 一般用不到</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--bucket'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'gsutil bucket'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># cache 是否提前缓存图片到内存，以加快训练速度，默认False</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--cache'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> nargs<span class=\"token operator\">=</span><span class=\"token string\">'?'</span><span class=\"token punctuation\">,</span> const<span class=\"token operator\">=</span><span class=\"token string\">'ram'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'--cache images in \"ram\" (default) or \"disk\"'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># mage-weights 使用图片采样策略，默认不使用</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--image-weights'</span><span class=\"token punctuation\">,</span> action<span class=\"token operator\">=</span><span class=\"token string\">'store_true'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'use weighted image selection for training'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># device 设备选择</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--device'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'cuda device, i.e. 0 or 0,1,2,3 or cpu'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># multi-scale 多测度训练</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--multi-scale'</span><span class=\"token punctuation\">,</span> action<span class=\"token operator\">=</span><span class=\"token string\">'store_true'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'vary img-size +/- 50%%'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># single-cls 数据集是否多类/默认True</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--single-cls'</span><span class=\"token punctuation\">,</span> action<span class=\"token operator\">=</span><span class=\"token string\">'store_true'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'train multi-class data as single-class'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># optimizer 优化器选择 / 提供了三种优化器</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--optimizer'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'SGD'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Adam'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'AdamW'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">'SGD'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'optimizer'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># sync-bn:是否使用跨卡同步BN,在DDP模式使用</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--sync-bn'</span><span class=\"token punctuation\">,</span> action<span class=\"token operator\">=</span><span class=\"token string\">'store_true'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'use SyncBatchNorm, only available in DDP mode'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># workers/dataloader的最大worker数量</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--workers'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'max dataloader workers (per RANK in DDP mode)'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 保存路径 / 默认保存路径 ./runs/ train</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--project'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span>ROOT <span class=\"token operator\">/</span> <span class=\"token string\">'runs/train'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'save to project/name'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 实验名称</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--name'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">'exp'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'save to project/name'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 项目位置是否存在 / 默认是都不存在</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--exist-ok'</span><span class=\"token punctuation\">,</span> action<span class=\"token operator\">=</span><span class=\"token string\">'store_true'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'existing project/name ok, do not increment'</span><span class=\"token punctuation\">)</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--quad'</span><span class=\"token punctuation\">,</span> action<span class=\"token operator\">=</span><span class=\"token string\">'store_true'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'quad dataloader'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># cos-lr 余弦学习率</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--cos-lr'</span><span class=\"token punctuation\">,</span> action<span class=\"token operator\">=</span><span class=\"token string\">'store_true'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'cosine LR scheduler'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 标签平滑 / 默认不增强， 用户可以根据自己标签的实际情况设置这个参数，建议设置小一点 0.1 / 0.05</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--label-smoothing'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'Label smoothing epsilon'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 早停止忍耐次数 / 100次不更新就停止训练</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--patience'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'EarlyStopping patience (epochs without improvement)'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># --freeze冻结训练 可以设置 default = [0] 数据量大的情况下，建议不设置这个参数</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--freeze'</span><span class=\"token punctuation\">,</span> nargs<span class=\"token operator\">=</span><span class=\"token string\">'+'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'Freeze layers: backbone=10, first3=0 1 2'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># --save-period 多少个epoch保存一下checkpoint</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--save-period'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'Save checkpoint every x epochs (disabled if &lt; 1)'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># --local_rank 进程编号 / 多卡使用</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--local_rank'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'DDP parameter, do not modify'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Weights &amp; Biases arguments</span>\n    <span class=\"token comment\"># 在线可视化工具，类似于tensorboard工具，想了解这款工具可以查看https://zhuanlan.zhihu.com/p/266337608</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--entity'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'W&amp;B: Entity'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># upload_dataset: 是否上传dataset到wandb tabel(将数据集作为交互式 dsviz表 在浏览器中查看、查询、筛选和分析数据集) 默认False</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--upload_dataset'</span><span class=\"token punctuation\">,</span> nargs<span class=\"token operator\">=</span><span class=\"token string\">'?'</span><span class=\"token punctuation\">,</span> const<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'W&amp;B: Upload data, \"val\" option'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># bbox_interval: 设置界框图像记录间隔 Set bounding-box image logging interval for W&amp;B 默认-1   opt.epochs // 10</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--bbox_interval'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'W&amp;B: Set bounding-box image logging interval'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 使用数据的版本</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--artifact_alias'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">'latest'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'W&amp;B: Version of dataset artifact to use'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 传入的基本配置中没有的参数也不会报错# parse_args()和parse_known_args() </span>\n    <span class=\"token comment\"># parse = argparse.ArgumentParser()</span>\n    <span class=\"token comment\"># parse.add_argument('--s', type=int, default=2, help='flag_int')</span>\n    <span class=\"token comment\"># parser.parse_args() / parse_args()</span>\n    opt <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span>parse_known_args<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> known <span class=\"token keyword\">else</span> parser<span class=\"token punctuation\">.</span>parse_args<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> opt\n\n</code></pre>\n<h1><a id=\"2_main_112\"></a>2. main函数</h1>\n<h2><a id=\"21_main_113\"></a>2.1 main函数——打印关键词/安装环境</h2>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">,</span> callbacks<span class=\"token operator\">=</span>Callbacks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">############################################### 1. Checks ##################################################</span>\n    <span class=\"token keyword\">if</span> RANK <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 输出所有训练参数 / 参数以彩色的方式表现</span>\n        print_args<span class=\"token punctuation\">(</span>FILE<span class=\"token punctuation\">.</span>stem<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 检查代码版本是否更新</span>\n        check_git_status<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 检查安装是否都安装了 requirements.txt， 缺少安装包安装。</span>\n        <span class=\"token comment\"># 缺少安装包：建议使用 pip install -i https://pypi.tuna.tsinghua.edu.cn/simple -r requirements.txt</span>\n        check_requirements<span class=\"token punctuation\">(</span>exclude<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'thop'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"22_main_126\"></a>2.2 main函数——是否进行断点训练</h2>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">############################################### 2. Resume ##################################################</span>\n    <span class=\"token comment\"># 初始化可视化工具wandb,wandb使用教程看https://zhuanlan.zhihu.com/p/266337608</span>\n    <span class=\"token comment\"># 断点训练使用教程可以查看：https://blog.csdn.net/CharmsLUO/article/details/123410081</span>\n    <span class=\"token keyword\">if</span> opt<span class=\"token punctuation\">.</span>resume <span class=\"token operator\">and</span> <span class=\"token operator\">not</span> check_wandb_resume<span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">)</span> <span class=\"token operator\">and</span> <span class=\"token operator\">not</span> opt<span class=\"token punctuation\">.</span>evolve<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># resume an interrupted run</span>\n        <span class=\"token comment\"># isinstance()是否是已经知道的类型</span>\n        <span class=\"token comment\"># 如果resume是True，则通过get_lastest_run()函数找到runs为文件夹中最近的权重文件last.pt</span>\n        ckpt <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">.</span>resume <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>resume<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> get_latest_run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># specified or most recent path</span>\n        <span class=\"token comment\"># 判断是否是文件</span>\n        <span class=\"token keyword\">assert</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isfile<span class=\"token punctuation\">(</span>ckpt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ERROR: --resume checkpoint does not exist'</span>\n        <span class=\"token comment\">#  # 相关的opt参数也要替换成last.pt中的opt参数 safe_load()yaml文件加载数据</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>Path<span class=\"token punctuation\">(</span>ckpt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">/</span> <span class=\"token string\">'opt.yaml'</span><span class=\"token punctuation\">,</span> errors<span class=\"token operator\">=</span><span class=\"token string\">'ignore'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># argparse.Namespace 可以理解为字典</span>\n            opt <span class=\"token operator\">=</span> argparse<span class=\"token punctuation\">.</span>Namespace<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>yaml<span class=\"token punctuation\">.</span>safe_load<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># replace</span>\n        opt<span class=\"token punctuation\">.</span>cfg<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>weights<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>resume <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> ckpt<span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span>  <span class=\"token comment\"># reinstate</span>\n        <span class=\"token comment\"># 打印断点训练信息</span>\n        LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>f<span class=\"token string\">'Resuming training from {ckpt}'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 不使用断点训练就在加载输入的参数</span>\n        opt<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>cfg<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>hyp<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>weights<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>project <span class=\"token operator\">=</span> \\\n            check_file<span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> check_yaml<span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>cfg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> check_yaml<span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>hyp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>weights<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>project<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># checks</span>\n        <span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>cfg<span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>weights<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'either --cfg or --weights must be specified'</span>\n        <span class=\"token comment\"># opt.evolve=False,opt.name='exp'    opt.evolve=True,opt.name='evolve'</span>\n        <span class=\"token keyword\">if</span> opt<span class=\"token punctuation\">.</span>evolve<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> opt<span class=\"token punctuation\">.</span>project <span class=\"token operator\">==</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>ROOT <span class=\"token operator\">/</span> <span class=\"token string\">'runs/train'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># if default project name, rename to runs/evolve</span>\n                opt<span class=\"token punctuation\">.</span>project <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>ROOT <span class=\"token operator\">/</span> <span class=\"token string\">'runs/evolve'</span><span class=\"token punctuation\">)</span>\n            opt<span class=\"token punctuation\">.</span>exist_ok<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>resume <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">.</span>resume<span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span>  <span class=\"token comment\"># pass resume to exist_ok and disable resume</span>\n        <span class=\"token comment\"># 保存相关信息</span>\n        opt<span class=\"token punctuation\">.</span>save_dir <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>increment_path<span class=\"token punctuation\">(</span>Path<span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>project<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> opt<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> exist_ok<span class=\"token operator\">=</span>opt<span class=\"token punctuation\">.</span>exist_ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"23_main_158\"></a>2.3 main函数——是否分布式训练</h2>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># ############################################## 3.DDP mode ###############################################</span>\n    <span class=\"token comment\"># 选择设备cpu/cuda</span>\n    device <span class=\"token operator\">=</span> select_device<span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span>opt<span class=\"token punctuation\">.</span>batch_size<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 多卡训练GPU</span>\n    <span class=\"token keyword\">if</span> LOCAL_RANK <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        msg <span class=\"token operator\">=</span> <span class=\"token string\">'is not compatible with YOLOv5 Multi-GPU DDP training'</span>\n        <span class=\"token keyword\">assert</span> <span class=\"token operator\">not</span> opt<span class=\"token punctuation\">.</span>image_weights<span class=\"token punctuation\">,</span> f<span class=\"token string\">'--image-weights {msg}'</span>\n        <span class=\"token keyword\">assert</span> <span class=\"token operator\">not</span> opt<span class=\"token punctuation\">.</span>evolve<span class=\"token punctuation\">,</span> f<span class=\"token string\">'--evolve {msg}'</span>\n        <span class=\"token keyword\">assert</span> opt<span class=\"token punctuation\">.</span>batch_size <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> f<span class=\"token string\">'AutoBatch with --batch-size -1 {msg}, please pass a valid --batch-size'</span>\n        <span class=\"token keyword\">assert</span> opt<span class=\"token punctuation\">.</span>batch_size <span class=\"token operator\">%</span> WORLD_SIZE <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> f<span class=\"token string\">'--batch-size {opt.batch_size} must be multiple of WORLD_SIZE'</span>\n        <span class=\"token keyword\">assert</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>device_count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> LOCAL_RANK<span class=\"token punctuation\">,</span> <span class=\"token string\">'insufficient CUDA devices for DDP command'</span>\n        <span class=\"token comment\"># 根据编号选择设备</span>\n        <span class=\"token comment\">#使用torch.cuda.set_device()可以更方便地将模型和数据加载到对应GPU上, 直接定义模型之前加入一行代码即可</span>\n        <span class=\"token comment\"># torch.cuda.set_device(gpu_id) #单卡</span>\n        <span class=\"token comment\"># torch.cuda.set_device('cuda:'+str(gpu_ids)) #可指定多卡</span>\n        torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>set_device<span class=\"token punctuation\">(</span>LOCAL_RANK<span class=\"token punctuation\">)</span>\n        device <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">'cuda'</span><span class=\"token punctuation\">,</span> LOCAL_RANK<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 初始化多进程</span>\n        dist<span class=\"token punctuation\">.</span>init_process_group<span class=\"token punctuation\">(</span>backend<span class=\"token operator\">=</span><span class=\"token string\">\"nccl\"</span> <span class=\"token keyword\">if</span> dist<span class=\"token punctuation\">.</span>is_nccl_available<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token string\">\"gloo\"</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h2><a id=\"24_main_182\"></a>2.4 main函数——是否进化训练/遗传算法调参</h2>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">################################################ 4. Train #################################################</span>\n    <span class=\"token comment\"># 不设置evolve直接调用train训练</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> opt<span class=\"token punctuation\">.</span>evolve<span class=\"token punctuation\">:</span>\n        train<span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>hyp<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">,</span> callbacks<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 分布式训练 WORLD_SIZE=主机的数量</span>\n        <span class=\"token comment\"># 如果是使用多卡训练, 那么销毁进程组</span>\n        <span class=\"token keyword\">if</span> WORLD_SIZE <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">and</span> RANK <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">'Destroying process group... '</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 使用多卡训练, 那么销毁进程组</span>\n            dist<span class=\"token punctuation\">.</span>destroy_process_group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Evolve hyperparameters (optional)</span>\n    <span class=\"token comment\"># 遗传净化算法/一边训练一遍进化</span>\n    <span class=\"token comment\"># 了解遗传算法可以查看我的博客：</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Hyperparameter evolution metadata (mutation scale 0-1, lower_limit, upper_limit)</span>\n        <span class=\"token comment\"># 超参数列表(突变范围 - 最小值 - 最大值)</span>\n        meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'lr0'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># initial learning rate (SGD=1E-2, Adam=1E-3)</span>\n                <span class=\"token string\">'lrf'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># final OneCycleLR learning rate (lr0 * lrf)</span>\n                <span class=\"token string\">'momentum'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.98</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># SGD momentum/Adam beta1</span>\n                <span class=\"token string\">'weight_decay'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># optimizer weight decay</span>\n                <span class=\"token string\">'warmup_epochs'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># warmup epochs (fractions ok)</span>\n                <span class=\"token string\">'warmup_momentum'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.95</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># warmup initial momentum</span>\n                <span class=\"token string\">'warmup_bias_lr'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># warmup initial bias lr</span>\n                <span class=\"token string\">'box'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.02</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># box loss gain</span>\n                <span class=\"token string\">'cls'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># cls loss gain</span>\n                <span class=\"token string\">'cls_pw'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># cls BCELoss positive_weight</span>\n                <span class=\"token string\">'obj'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># obj loss gain (scale with pixels)</span>\n                <span class=\"token string\">'obj_pw'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># obj BCELoss positive_weight</span>\n                <span class=\"token string\">'iou_t'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># IoU training threshold</span>\n                <span class=\"token string\">'anchor_t'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># anchor-multiple threshold</span>\n                <span class=\"token string\">'anchors'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># anchors per output grid (0 to ignore)</span>\n                <span class=\"token string\">'fl_gamma'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># focal loss gamma (efficientDet default gamma=1.5)</span>\n                <span class=\"token string\">'hsv_h'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># image HSV-Hue augmentation (fraction)</span>\n                <span class=\"token string\">'hsv_s'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># image HSV-Saturation augmentation (fraction)</span>\n                <span class=\"token string\">'hsv_v'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># image HSV-Value augmentation (fraction)</span>\n                <span class=\"token string\">'degrees'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># image rotation (+/- deg)</span>\n                <span class=\"token string\">'translate'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># image translation (+/- fraction)</span>\n                <span class=\"token string\">'scale'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># image scale (+/- gain)</span>\n                <span class=\"token string\">'shear'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># image shear (+/- deg)</span>\n                <span class=\"token string\">'perspective'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># image perspective (+/- fraction), range 0-0.001</span>\n                <span class=\"token string\">'flipud'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># image flip up-down (probability)</span>\n                <span class=\"token string\">'fliplr'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># image flip left-right (probability)</span>\n                <span class=\"token string\">'mosaic'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># image mixup (probability)</span>\n                <span class=\"token string\">'mixup'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># image mixup (probability)</span>\n                <span class=\"token string\">'copy_paste'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>  <span class=\"token comment\"># segment copy-paste (probability)</span>\n\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>hyp<span class=\"token punctuation\">,</span> errors<span class=\"token operator\">=</span><span class=\"token string\">'ignore'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 加载yaml超参数</span>\n            hyp <span class=\"token operator\">=</span> yaml<span class=\"token punctuation\">.</span>safe_load<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># load hyps dict</span>\n            <span class=\"token keyword\">if</span> <span class=\"token string\">'anchors'</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">in</span> hyp<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># anchors commented in hyp.yaml</span>\n                hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'anchors'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n        opt<span class=\"token punctuation\">.</span>noval<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>nosave<span class=\"token punctuation\">,</span> save_dir <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> Path<span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>save_dir<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># only val/save final epoch</span>\n        <span class=\"token comment\"># ei = [isinstance(x, (int, float)) for x in hyp.values()]  # evolvable indices</span>\n        <span class=\"token comment\"># 保存进化的超参数列表</span>\n        evolve_yaml<span class=\"token punctuation\">,</span> evolve_csv <span class=\"token operator\">=</span> save_dir <span class=\"token operator\">/</span> <span class=\"token string\">'hyp_evolve.yaml'</span><span class=\"token punctuation\">,</span> save_dir <span class=\"token operator\">/</span> <span class=\"token string\">'evolve.csv'</span>\n        <span class=\"token keyword\">if</span> opt<span class=\"token punctuation\">.</span>bucket<span class=\"token punctuation\">:</span>\n            os<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span>f<span class=\"token string\">'gsutil cp gs://{opt.bucket}/evolve.csv {evolve_csv}'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># download evolve.csv if exists</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        遗传算法调参：遵循适者生存、优胜劣汰的法则，即寻优过程中保留有用的，去除无用的。\n        遗传算法需要提前设置4个参数: 群体大小/进化代数/交叉概率/变异概率\n\n        \"\"\"</span>\n\n        <span class=\"token comment\"># 默认选择进化300代</span>\n        <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>evolve<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># generations to evolve</span>\n            <span class=\"token keyword\">if</span> evolve_csv<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># if evolve.csv exists: select best hyps and mutate</span>\n                <span class=\"token comment\"># Select parent(s)</span>\n                <span class=\"token comment\"># 进化方式--single / --weight</span>\n                parent <span class=\"token operator\">=</span> <span class=\"token string\">'single'</span>  <span class=\"token comment\"># parent selection method: 'single' or 'weighted'</span>\n                <span class=\"token comment\"># 加载evolve.txt文件</span>\n                x <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>loadtxt<span class=\"token punctuation\">(</span>evolve_csv<span class=\"token punctuation\">,</span> ndmin<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> delimiter<span class=\"token operator\">=</span><span class=\"token string\">','</span><span class=\"token punctuation\">,</span> skiprows<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\"># 选取进化结果代数</span>\n                n <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># number of previous results to consider</span>\n                x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">[</span>np<span class=\"token punctuation\">.</span>argsort<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>fitness<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>n<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># top n mutations</span>\n                 <span class=\"token comment\"># 根据resluts计算hyp权重</span>\n                w <span class=\"token operator\">=</span> fitness<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> fitness<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1E</span><span class=\"token operator\">-</span><span class=\"token number\">6</span>  <span class=\"token comment\"># weights (sum &gt; 0)</span>\n                <span class=\"token comment\"># 根据不同进化方式获得base hyp</span>\n                <span class=\"token keyword\">if</span> parent <span class=\"token operator\">==</span> <span class=\"token string\">'single'</span> <span class=\"token operator\">or</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token comment\"># x = x[random.randint(0, n - 1)]  # random selection</span>\n                    x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">[</span>random<span class=\"token punctuation\">.</span>choices<span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> weights<span class=\"token operator\">=</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># weighted selection</span>\n                <span class=\"token keyword\">elif</span> parent <span class=\"token operator\">==</span> <span class=\"token string\">'weighted'</span><span class=\"token punctuation\">:</span>\n                    x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> w<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> w<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># weighted combination</span>\n\n                <span class=\"token comment\"># Mutate</span>\n                <span class=\"token comment\"># # 获取突变初始值</span>\n                mp<span class=\"token punctuation\">,</span> s <span class=\"token operator\">=</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span>  <span class=\"token comment\"># mutation probability, sigma</span>\n                npr <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random\n                npr<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                g <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>meta<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> hyp<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># gains 0-1</span>\n                ng <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>meta<span class=\"token punctuation\">)</span>\n                v <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span>ng<span class=\"token punctuation\">)</span>\n                <span class=\"token comment\"># 设置突变</span>\n                <span class=\"token keyword\">while</span> <span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># mutate until a change occurs (prevent duplicates)</span>\n                    <span class=\"token comment\"># 将突变添加到base hyp上</span>\n                    <span class=\"token comment\"># [i+7]是因为x中前7个数字为results的指标(P,R,mAP,F1,test_loss=(box,obj,cls)),之后才是超参数hyp</span>\n                    v <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>g <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>npr<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span>ng<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> mp<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> npr<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span>ng<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> npr<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> s <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip<span class=\"token punctuation\">(</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> k <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>hyp<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># plt.hist(v.ravel(), 300)</span>\n                    hyp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># mutate</span>\n\n            <span class=\"token comment\"># Constrain to limits</span>\n            <span class=\"token comment\"># 限制超参再规定范围</span>\n            <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> meta<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                hyp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>hyp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># lower limit</span>\n                hyp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>hyp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># upper limit</span>\n                hyp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>hyp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># significant digits</span>\n\n            <span class=\"token comment\"># Train mutation</span>\n            <span class=\"token comment\"># 训练 使用突变后的参超 测试其效果</span>\n            results <span class=\"token operator\">=</span> train<span class=\"token punctuation\">(</span>hyp<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">,</span> callbacks<span class=\"token punctuation\">)</span>\n            callbacks <span class=\"token operator\">=</span> Callbacks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># Write mutation results</span>\n            <span class=\"token comment\"># Write mutation results</span>\n            <span class=\"token comment\"># 将结果写入results 并将对应的hyp写到evolve.txt evolve.txt中每一行为一次进化的结果</span>\n            <span class=\"token comment\"># 每行前七个数字 (P, R, mAP, F1, test_losses(GIOU, obj, cls)) 之后为hyp</span>\n            <span class=\"token comment\"># 保存hyp到yaml文件</span>\n            print_mutation<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">,</span> hyp<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> save_dir<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>bucket<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Plot results</span>\n        <span class=\"token comment\"># 将结果可视化 / 输出保存信息</span>\n        plot_evolve<span class=\"token punctuation\">(</span>evolve_csv<span class=\"token punctuation\">)</span>\n        LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>f<span class=\"token string\">'Hyperparameter evolution finished {opt.evolve} generations\\n'</span>\n                    f<span class=\"token string\">\"Results saved to {colorstr('bold', save_dir)}\\n\"</span>\n                    f<span class=\"token string\">'Usage example: $ python train.py --hyp {evolve_yaml}'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"3_train_311\"></a>3. train函数</h1>\n<h2><a id=\"31_train_312\"></a>3.1 train函数——基本配置信息</h2>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">################################################ 1. 传入参数/基本配置 #############################################</span>\n    <span class=\"token comment\"># opt传入的参数</span>\n    save_dir<span class=\"token punctuation\">,</span> epochs<span class=\"token punctuation\">,</span> batch_size<span class=\"token punctuation\">,</span> weights<span class=\"token punctuation\">,</span> single_cls<span class=\"token punctuation\">,</span> evolve<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> cfg<span class=\"token punctuation\">,</span> resume<span class=\"token punctuation\">,</span> noval<span class=\"token punctuation\">,</span> nosave<span class=\"token punctuation\">,</span> workers<span class=\"token punctuation\">,</span> freeze <span class=\"token operator\">=</span> \\\n        Path<span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>save_dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>epochs<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>batch_size<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>weights<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>single_cls<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>evolve<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>cfg<span class=\"token punctuation\">,</span> \\\n        opt<span class=\"token punctuation\">.</span>resume<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>noval<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>nosave<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>workers<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>freeze\n\n    <span class=\"token comment\"># Directories</span>\n    w <span class=\"token operator\">=</span> save_dir <span class=\"token operator\">/</span> <span class=\"token string\">'weights'</span>  <span class=\"token comment\"># weights dir</span>\n    <span class=\"token comment\"># 新建文件夹 weights train evolve</span>\n    <span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">.</span>parent <span class=\"token keyword\">if</span> evolve <span class=\"token keyword\">else</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkdir<span class=\"token punctuation\">(</span>parents<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> exist_ok<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># make dir</span>\n    <span class=\"token comment\"># 保存训练结果的目录  如runs/train/exp*/weights/last.pt</span>\n    last<span class=\"token punctuation\">,</span> best <span class=\"token operator\">=</span> w <span class=\"token operator\">/</span> <span class=\"token string\">'last.pt'</span><span class=\"token punctuation\">,</span> w <span class=\"token operator\">/</span> <span class=\"token string\">'best.pt'</span>\n\n    <span class=\"token comment\"># Hyperparameters # isinstance()是否是已知类型</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>hyp<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>hyp<span class=\"token punctuation\">,</span> errors<span class=\"token operator\">=</span><span class=\"token string\">'ignore'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 加载yaml文件</span>\n            hyp <span class=\"token operator\">=</span> yaml<span class=\"token punctuation\">.</span>safe_load<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># load hyps dict</span>\n    <span class=\"token comment\"># 打印超参数 彩色字体</span>\n    LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>colorstr<span class=\"token punctuation\">(</span><span class=\"token string\">'hyperparameters: '</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">', '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>f<span class=\"token string\">'{k}={v}'</span> <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> hyp<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Save run settings</span>\n    <span class=\"token comment\"># 如果不使用进化训练</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> evolve<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># safe_dump() python值转化为yaml序列化</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>save_dir <span class=\"token operator\">/</span> <span class=\"token string\">'hyp.yaml'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            yaml<span class=\"token punctuation\">.</span>safe_dump<span class=\"token punctuation\">(</span>hyp<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> sort_keys<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>save_dir <span class=\"token operator\">/</span> <span class=\"token string\">'opt.yaml'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># vars(opt) 的作用是把数据类型是Namespace的数据转换为字典的形式。</span>\n            yaml<span class=\"token punctuation\">.</span>safe_dump<span class=\"token punctuation\">(</span><span class=\"token builtin\">vars</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> sort_keys<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Loggers</span>\n    data_dict <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    <span class=\"token keyword\">if</span> RANK <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        loggers <span class=\"token operator\">=</span> Loggers<span class=\"token punctuation\">(</span>save_dir<span class=\"token punctuation\">,</span> weights<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">,</span> hyp<span class=\"token punctuation\">,</span> LOGGER<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># loggers instance</span>\n        <span class=\"token keyword\">if</span> loggers<span class=\"token punctuation\">.</span>wandb<span class=\"token punctuation\">:</span>\n            data_dict <span class=\"token operator\">=</span> loggers<span class=\"token punctuation\">.</span>wandb<span class=\"token punctuation\">.</span>data_dict\n            <span class=\"token keyword\">if</span> resume<span class=\"token punctuation\">:</span>\n                weights<span class=\"token punctuation\">,</span> epochs<span class=\"token punctuation\">,</span> hyp<span class=\"token punctuation\">,</span> batch_size <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">.</span>weights<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>epochs<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>hyp<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>batch_size\n\n        <span class=\"token comment\"># Register actions</span>\n        <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> methods<span class=\"token punctuation\">(</span>loggers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            callbacks<span class=\"token punctuation\">.</span>register_action<span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> callback<span class=\"token operator\">=</span><span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>loggers<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Config 画图</span>\n    plots <span class=\"token operator\">=</span> <span class=\"token operator\">not</span> evolve  <span class=\"token comment\"># create plots</span>\n    <span class=\"token comment\"># GPU / CPU</span>\n    cuda <span class=\"token operator\">=</span> device<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'cpu'</span>\n    <span class=\"token comment\"># 随机种子</span>\n    init_seeds<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> RANK<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 存在子进程-分布式训练</span>\n    <span class=\"token keyword\">with</span> torch_distributed_zero_first<span class=\"token punctuation\">(</span>LOCAL_RANK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        data_dict <span class=\"token operator\">=</span> data_dict <span class=\"token operator\">or</span> check_dataset<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># check if None</span>\n    <span class=\"token comment\"># 训练集和验证集的位路径</span>\n    train_path<span class=\"token punctuation\">,</span> val_path <span class=\"token operator\">=</span> data_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'val'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\"># 设置类别 是否单类</span>\n    nc <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> single_cls <span class=\"token keyword\">else</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>data_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'nc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># number of classes</span>\n    <span class=\"token comment\"># 类别对应的名称</span>\n    names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'item'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> single_cls <span class=\"token operator\">and</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'names'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> data_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'names'</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># class names</span>\n    <span class=\"token comment\"># 判断类别长度和文件是否对应</span>\n    <span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> nc<span class=\"token punctuation\">,</span> f<span class=\"token string\">'{len(names)} names found for nc={nc} dataset in {data}'</span>  <span class=\"token comment\"># check</span>\n    <span class=\"token comment\"># 当前数据集是否是coco数据集(80个类别) </span>\n    is_coco <span class=\"token operator\">=</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>val_path<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">and</span> val_path<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'coco/val2017.txt'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># COCO dataset</span>\n</code></pre>\n<h2><a id=\"32_train_378\"></a>3.2 train函数——模型加载/断点训练</h2>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">################################################### 2. Model ###########################################</span>\n    <span class=\"token comment\"># 检查文件后缀是否是.pt</span>\n    check_suffix<span class=\"token punctuation\">(</span>weights<span class=\"token punctuation\">,</span> <span class=\"token string\">'.pt'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># check weights</span>\n    <span class=\"token comment\"># 加载预训练权重 yolov5提供了5个不同的预训练权重，大家可以根据自己的模型选择预训练权重</span>\n    pretrained <span class=\"token operator\">=</span> weights<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'.pt'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> pretrained<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># # torch_distributed_zero_first(RANK): 用于同步不同进程对数据读取的上下文管理器</span>\n        <span class=\"token keyword\">with</span> torch_distributed_zero_first<span class=\"token punctuation\">(</span>LOCAL_RANK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 如果本地不存在就从网站上下载</span>\n            weights <span class=\"token operator\">=</span> attempt_download<span class=\"token punctuation\">(</span>weights<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># download if not found locally</span>\n        <span class=\"token comment\"># 加载模型以及参数</span>\n        ckpt <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>weights<span class=\"token punctuation\">,</span> map_location<span class=\"token operator\">=</span><span class=\"token string\">'cpu'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># load checkpoint to CPU to avoid CUDA memory leak</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        两种加载模型的方式: opt.cfg / ckpt['model'].yaml\n        使用resume-断点训练: 选择ckpt['model']yaml创建模型, 且不加载anchor\n        使用断点训练时,保存的模型会保存anchor,所以不需要加载\n\n        \"\"\"</span>\n        model <span class=\"token operator\">=</span> Model<span class=\"token punctuation\">(</span>cfg <span class=\"token operator\">or</span> ckpt<span class=\"token punctuation\">[</span><span class=\"token string\">'model'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>yaml<span class=\"token punctuation\">,</span> ch<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> nc<span class=\"token operator\">=</span>nc<span class=\"token punctuation\">,</span> anchors<span class=\"token operator\">=</span>hyp<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'anchors'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># create</span>\n        exclude <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'anchor'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cfg <span class=\"token operator\">or</span> hyp<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'anchors'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">and</span> <span class=\"token operator\">not</span> resume <span class=\"token keyword\">else</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># exclude keys</span>\n        csd <span class=\"token operator\">=</span> ckpt<span class=\"token punctuation\">[</span><span class=\"token string\">'model'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>state_dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># checkpoint state_dict as FP32</span>\n        <span class=\"token comment\"># 筛选字典中的键值对  把exclude删除</span>\n        csd <span class=\"token operator\">=</span> intersect_dicts<span class=\"token punctuation\">(</span>csd<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">.</span>state_dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> exclude<span class=\"token operator\">=</span>exclude<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># intersect</span>\n        model<span class=\"token punctuation\">.</span>load_state_dict<span class=\"token punctuation\">(</span>csd<span class=\"token punctuation\">,</span> strict<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># load</span>\n        LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>f<span class=\"token string\">'Transferred {len(csd)}/{len(model.state_dict())} items from {weights}'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># report</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 不适用预训练权重</span>\n        model <span class=\"token operator\">=</span> Model<span class=\"token punctuation\">(</span>cfg<span class=\"token punctuation\">,</span> ch<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> nc<span class=\"token operator\">=</span>nc<span class=\"token punctuation\">,</span> anchors<span class=\"token operator\">=</span>hyp<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'anchors'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># create</span>\n</code></pre>\n<h2><a id=\"33_train_410\"></a>3.3 train函数——冻结训练/冻结层设置</h2>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">################################################ 3. Freeze/冻结训练 #########################################</span>\n    <span class=\"token comment\"># 冻结训练的网络层</span>\n    freeze <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>f<span class=\"token string\">'model.{x}.'</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span>freeze <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>freeze<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>freeze<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># layers to freeze</span>\n    <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> model<span class=\"token punctuation\">.</span>named_parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        v<span class=\"token punctuation\">.</span>requires_grad <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>  <span class=\"token comment\"># train all layers</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span>x <span class=\"token keyword\">in</span> k <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> freeze<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>f<span class=\"token string\">'freezing {k}'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 冻结训练的层梯度不更新</span>\n            v<span class=\"token punctuation\">.</span>requires_grad <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n</code></pre>\n<h2><a id=\"34_trainbatchsize_423\"></a>3.4 train函数——图片大小/batchsize设置</h2>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># Image size</span>\n    gs <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>stride<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># grid size (max stride)</span>\n    <span class=\"token comment\"># 检查图片的大小</span>\n    imgsz <span class=\"token operator\">=</span> check_img_size<span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>imgsz<span class=\"token punctuation\">,</span> gs<span class=\"token punctuation\">,</span> floor<span class=\"token operator\">=</span>gs <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># verify imgsz is gs-multiple</span>\n\n    <span class=\"token comment\"># Batch size</span>\n    <span class=\"token keyword\">if</span> RANK <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> batch_size <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># single-GPU only, estimate best batch size</span>\n        batch_size <span class=\"token operator\">=</span> check_train_batch_size<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> imgsz<span class=\"token punctuation\">)</span>\n        loggers<span class=\"token punctuation\">.</span>on_params_update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"batch_size\"</span><span class=\"token punctuation\">:</span> batch_size<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"35_train___436\"></a>3.5 train函数——优化器选择 / 分组优化设置</h2>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">############################################ 4. Optimizer/优化器 ###########################################</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    nbs = 64\n    batchsize = 16\n    accumulate = 64 / 16 = 4\n    模型梯度累计accumulate次之后就更新一次模型 相当于使用更大batch_size\n    \"\"\"</span>\n    nbs <span class=\"token operator\">=</span> <span class=\"token number\">64</span>  <span class=\"token comment\"># nominal batch size</span>\n    accumulate <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>nbs <span class=\"token operator\">/</span> batch_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># accumulate loss before optimizing</span>\n    <span class=\"token comment\"># 权重衰减参数</span>\n    hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'weight_decay'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*=</span> batch_size <span class=\"token operator\">*</span> accumulate <span class=\"token operator\">/</span> nbs  <span class=\"token comment\"># scale weight_decay</span>\n    <span class=\"token comment\"># 打印日志</span>\n    LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>f<span class=\"token string\">\"Scaled weight_decay = {hyp['weight_decay']}\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 将模型参数分为三组(weights、biases、bn)来进行分组优化</span>\n    g0<span class=\"token punctuation\">,</span> g1<span class=\"token punctuation\">,</span> g2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># optimizer parameter groups</span>\n    <span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> model<span class=\"token punctuation\">.</span>modules<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> <span class=\"token string\">'bias'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">and</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>bias<span class=\"token punctuation\">,</span> nn<span class=\"token punctuation\">.</span>Parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># bias</span>\n            g2<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>bias<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># weight (no decay)</span>\n            g0<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> <span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> <span class=\"token string\">'weight'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">and</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">,</span> nn<span class=\"token punctuation\">.</span>Parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># weight (with decay)</span>\n            g1<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 选择优化器 / 提供了三个优化器——g0</span>\n    <span class=\"token keyword\">if</span> opt<span class=\"token punctuation\">.</span>optimizer <span class=\"token operator\">==</span> <span class=\"token string\">'Adam'</span><span class=\"token punctuation\">:</span>\n        optimizer <span class=\"token operator\">=</span> Adam<span class=\"token punctuation\">(</span>g0<span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span>hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'lr0'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> betas<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'momentum'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># adjust beta1 to momentum</span>\n    <span class=\"token keyword\">elif</span> opt<span class=\"token punctuation\">.</span>optimizer <span class=\"token operator\">==</span> <span class=\"token string\">'AdamW'</span><span class=\"token punctuation\">:</span>\n        optimizer <span class=\"token operator\">=</span> AdamW<span class=\"token punctuation\">(</span>g0<span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span>hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'lr0'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> betas<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'momentum'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># adjust beta1 to momentum</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        optimizer <span class=\"token operator\">=</span> SGD<span class=\"token punctuation\">(</span>g0<span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span>hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'lr0'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> momentum<span class=\"token operator\">=</span>hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'momentum'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nesterov<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 设置优化的方式——g1 / g2</span>\n    optimizer<span class=\"token punctuation\">.</span>add_param_group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'params'</span><span class=\"token punctuation\">:</span> g1<span class=\"token punctuation\">,</span> <span class=\"token string\">'weight_decay'</span><span class=\"token punctuation\">:</span> hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'weight_decay'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># add g1 with weight_decay</span>\n    optimizer<span class=\"token punctuation\">.</span>add_param_group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'params'</span><span class=\"token punctuation\">:</span> g2<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># add g2 (biases)</span>\n    <span class=\"token comment\"># 打印log日志 优化信息</span>\n    LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>f<span class=\"token string\">\"{colorstr('optimizer:')} {type(optimizer).__name__} with parameter groups \"</span>\n                f<span class=\"token string\">\"{len(g0)} weight (no decay), {len(g1)} weight, {len(g2)} bias\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 删除变量</span>\n    <span class=\"token keyword\">del</span> g0<span class=\"token punctuation\">,</span> g1<span class=\"token punctuation\">,</span> g2\n</code></pre>\n<h2><a id=\"36_trainema_478\"></a>3.6 train函数——学习率/ema/归一化/单机多卡</h2>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">############################################ 5. Scheduler ##############################################</span>\n    <span class=\"token comment\"># 是否余弦学习率调整方式</span>\n    <span class=\"token keyword\">if</span> opt<span class=\"token punctuation\">.</span>cos_lr<span class=\"token punctuation\">:</span>\n        lf <span class=\"token operator\">=</span> one_cycle<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'lrf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> epochs<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># cosine 1-&gt;hyp['lrf']</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        lf <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> x <span class=\"token operator\">/</span> epochs<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span> <span class=\"token operator\">-</span> hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'lrf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'lrf'</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># linear</span>\n    scheduler <span class=\"token operator\">=</span> lr_scheduler<span class=\"token punctuation\">.</span>LambdaLR<span class=\"token punctuation\">(</span>optimizer<span class=\"token punctuation\">,</span> lr_lambda<span class=\"token operator\">=</span>lf<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># plot_lr_scheduler(optimizer, scheduler, epochs)</span>\n\n    <span class=\"token comment\"># EMA</span>\n    <span class=\"token comment\"># 使用EMA（指数移动平均）对模型的参数做平均, 一种给予近期数据更高权重的平均方法, 以求提高测试指标并增加模型鲁棒。</span>\n    ema <span class=\"token operator\">=</span> ModelEMA<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> RANK <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">else</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token comment\"># Resume</span>\n    start_epoch<span class=\"token punctuation\">,</span> best_fitness <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span>\n    <span class=\"token keyword\">if</span> pretrained<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Optimizer</span>\n        <span class=\"token keyword\">if</span> ckpt<span class=\"token punctuation\">[</span><span class=\"token string\">'optimizer'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">is</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            optimizer<span class=\"token punctuation\">.</span>load_state_dict<span class=\"token punctuation\">(</span>ckpt<span class=\"token punctuation\">[</span><span class=\"token string\">'optimizer'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            best_fitness <span class=\"token operator\">=</span> ckpt<span class=\"token punctuation\">[</span><span class=\"token string\">'best_fitness'</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\"># EMA</span>\n        <span class=\"token keyword\">if</span> ema <span class=\"token operator\">and</span> ckpt<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'ema'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            ema<span class=\"token punctuation\">.</span>ema<span class=\"token punctuation\">.</span>load_state_dict<span class=\"token punctuation\">(</span>ckpt<span class=\"token punctuation\">[</span><span class=\"token string\">'ema'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>state_dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            ema<span class=\"token punctuation\">.</span>updates <span class=\"token operator\">=</span> ckpt<span class=\"token punctuation\">[</span><span class=\"token string\">'updates'</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\"># Epochs</span>\n        start_epoch <span class=\"token operator\">=</span> ckpt<span class=\"token punctuation\">[</span><span class=\"token string\">'epoch'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">if</span> resume<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">assert</span> start_epoch <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> f<span class=\"token string\">'{weights} training to {epochs} epochs is finished, nothing to resume.'</span>\n        <span class=\"token keyword\">if</span> epochs <span class=\"token operator\">&lt;</span> start_epoch<span class=\"token punctuation\">:</span>\n            LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>f<span class=\"token string\">\"{weights} has been trained for {ckpt['epoch']} epochs. Fine-tuning for {epochs} more epochs.\"</span><span class=\"token punctuation\">)</span>\n            epochs <span class=\"token operator\">+=</span> ckpt<span class=\"token punctuation\">[</span><span class=\"token string\">'epoch'</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># finetune additional epochs</span>\n\n        <span class=\"token keyword\">del</span> ckpt<span class=\"token punctuation\">,</span> csd\n\n    <span class=\"token comment\"># DP mode</span>\n    <span class=\"token comment\"># DP: 单机多卡模式</span>\n    <span class=\"token keyword\">if</span> cuda <span class=\"token operator\">and</span> RANK <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>device_count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        LOGGER<span class=\"token punctuation\">.</span>warning<span class=\"token punctuation\">(</span><span class=\"token string\">'WARNING: DP not recommended, use torch.distributed.run for best DDP Multi-GPU results.\\n'</span>\n                       <span class=\"token string\">'See Multi-GPU Tutorial at https://github.com/ultralytics/yolov5/issues/475 to get started.'</span><span class=\"token punctuation\">)</span>\n        model <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>DataParallel<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># SyncBatchNorm 多卡归一化</span>\n    <span class=\"token keyword\">if</span> opt<span class=\"token punctuation\">.</span>sync_bn <span class=\"token operator\">and</span> cuda <span class=\"token operator\">and</span> RANK <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        model <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>SyncBatchNorm<span class=\"token punctuation\">.</span>convert_sync_batchnorm<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 打印信息</span>\n        LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">'Using SyncBatchNorm()'</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h2><a id=\"37_train__anchor_530\"></a>3.7 train函数——数据加载 / anchor调整</h2>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># ############################################## 6. Trainloader / 数据加载 ######################################</span>\n    <span class=\"token comment\"># 训练集数据加载</span>\n    train_loader<span class=\"token punctuation\">,</span> dataset <span class=\"token operator\">=</span> create_dataloader<span class=\"token punctuation\">(</span>train_path<span class=\"token punctuation\">,</span> imgsz<span class=\"token punctuation\">,</span> batch_size <span class=\"token operator\">//</span> WORLD_SIZE<span class=\"token punctuation\">,</span> gs<span class=\"token punctuation\">,</span> single_cls<span class=\"token punctuation\">,</span>\n                                              hyp<span class=\"token operator\">=</span>hyp<span class=\"token punctuation\">,</span> augment<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> cache<span class=\"token operator\">=</span><span class=\"token boolean\">None</span> <span class=\"token keyword\">if</span> opt<span class=\"token punctuation\">.</span>cache <span class=\"token operator\">==</span> <span class=\"token string\">'val'</span> <span class=\"token keyword\">else</span> opt<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">,</span>\n                                              rect<span class=\"token operator\">=</span>opt<span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">,</span> rank<span class=\"token operator\">=</span>LOCAL_RANK<span class=\"token punctuation\">,</span> workers<span class=\"token operator\">=</span>workers<span class=\"token punctuation\">,</span>\n                                              image_weights<span class=\"token operator\">=</span>opt<span class=\"token punctuation\">.</span>image_weights<span class=\"token punctuation\">,</span> quad<span class=\"token operator\">=</span>opt<span class=\"token punctuation\">.</span>quad<span class=\"token punctuation\">,</span>\n                                              prefix<span class=\"token operator\">=</span>colorstr<span class=\"token punctuation\">(</span><span class=\"token string\">'train: '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 标签编号最大值</span>\n    mlc <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">.</span>labels<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># max label class</span>\n    <span class=\"token comment\"># 类别总数</span>\n    nb <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>train_loader<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># number of batches</span>\n    <span class=\"token comment\"># 判断编号是否正确</span>\n    <span class=\"token keyword\">assert</span> mlc <span class=\"token operator\">&lt;</span> nc<span class=\"token punctuation\">,</span> f<span class=\"token string\">'Label class {mlc} exceeds nc={nc} in {data}. Possible class labels are 0-{nc - 1}'</span>\n\n    <span class=\"token comment\"># Process 0</span>\n    <span class=\"token comment\"># 验证集数据集加载</span>\n    <span class=\"token keyword\">if</span> RANK <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        val_loader <span class=\"token operator\">=</span> create_dataloader<span class=\"token punctuation\">(</span>val_path<span class=\"token punctuation\">,</span> imgsz<span class=\"token punctuation\">,</span> batch_size <span class=\"token operator\">//</span> WORLD_SIZE <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> gs<span class=\"token punctuation\">,</span> single_cls<span class=\"token punctuation\">,</span>\n                                       hyp<span class=\"token operator\">=</span>hyp<span class=\"token punctuation\">,</span> cache<span class=\"token operator\">=</span><span class=\"token boolean\">None</span> <span class=\"token keyword\">if</span> noval <span class=\"token keyword\">else</span> opt<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">,</span>\n                                       rect<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> rank<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> workers<span class=\"token operator\">=</span>workers <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> pad<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n                                       prefix<span class=\"token operator\">=</span>colorstr<span class=\"token punctuation\">(</span><span class=\"token string\">'val: '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\"># 没有使用断点训练</span>\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> resume<span class=\"token punctuation\">:</span>\n            labels <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">.</span>labels<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># c = torch.tensor(labels[:, 0])  # classes</span>\n            <span class=\"token comment\"># cf = torch.bincount(c.long(), minlength=nc) + 1.  # frequency</span>\n            <span class=\"token comment\"># model._initialize_biases(cf.to(device))</span>\n            <span class=\"token keyword\">if</span> plots<span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># 画出标签信息</span>\n                plot_labels<span class=\"token punctuation\">(</span>labels<span class=\"token punctuation\">,</span> names<span class=\"token punctuation\">,</span> save_dir<span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># Anchors</span>\n            <span class=\"token comment\"># 自适应anchor / anchor可以理解为程序预测的box</span>\n            <span class=\"token comment\"># 根据k-mean算法聚类生成新的锚框</span>\n            <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> opt<span class=\"token punctuation\">.</span>noautoanchor<span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># 参数dataset代表的是训练集，hyp['anchor_t']是从配置文件hpy.scratch.yaml读取的超参数 anchor_t:4.0</span>\n                <span class=\"token comment\"># 当配置文件中的anchor计算bpr（best possible recall）小于0.98时才会重新计算anchor。</span>\n                <span class=\"token comment\"># best possible recall最大值1，如果bpr小于0.98，程序会根据数据集的label自动学习anchor的尺寸</span>\n                check_anchors<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">,</span> model<span class=\"token operator\">=</span>model<span class=\"token punctuation\">,</span> thr<span class=\"token operator\">=</span>hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'anchor_t'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> imgsz<span class=\"token operator\">=</span>imgsz<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 半进度</span>\n            model<span class=\"token punctuation\">.</span>half<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># pre-reduce anchor precision</span>\n        callbacks<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token string\">'on_pretrain_routine_end'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"38_train_576\"></a>3.8 train函数——训练配置/多尺度训练/热身训练</h2>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># #################################################### 7. 训练 ###############################################</span>\n    <span class=\"token comment\"># DDP mode</span>\n    <span class=\"token comment\"># DDP：多机多卡</span>\n    <span class=\"token keyword\">if</span> cuda <span class=\"token operator\">and</span> RANK <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        model <span class=\"token operator\">=</span> DDP<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> device_ids<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>LOCAL_RANK<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> output_device<span class=\"token operator\">=</span>LOCAL_RANK<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Model attributes</span>\n    nl <span class=\"token operator\">=</span> de_parallel<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>nl  <span class=\"token comment\"># number of detection layers (to scale hyps)</span>\n    hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'box'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*=</span> <span class=\"token number\">3</span> <span class=\"token operator\">/</span> nl  <span class=\"token comment\"># scale to layers</span>\n    hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'cls'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*=</span> nc <span class=\"token operator\">/</span> <span class=\"token number\">80</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">/</span> nl  <span class=\"token comment\"># scale to classes and layers</span>\n    hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'obj'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*=</span> <span class=\"token punctuation\">(</span>imgsz <span class=\"token operator\">/</span> <span class=\"token number\">640</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">/</span> nl  <span class=\"token comment\"># scale to image size and layers</span>\n    <span class=\"token comment\"># 标签平滑</span>\n    hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'label_smoothing'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">.</span>label_smoothing\n    model<span class=\"token punctuation\">.</span>nc <span class=\"token operator\">=</span> nc  <span class=\"token comment\"># attach number of classes to model</span>\n    model<span class=\"token punctuation\">.</span>hyp <span class=\"token operator\">=</span> hyp  <span class=\"token comment\"># attach hyperparameters to model</span>\n    <span class=\"token comment\"># 从训练样本标签得到类别权重（和类别中的目标数即类别频率成反比）</span>\n    model<span class=\"token punctuation\">.</span>class_weights <span class=\"token operator\">=</span> labels_to_class_weights<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">.</span>labels<span class=\"token punctuation\">,</span> nc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> nc  <span class=\"token comment\"># attach class weights</span>\n    model<span class=\"token punctuation\">.</span>names <span class=\"token operator\">=</span> names\n\n    <span class=\"token comment\"># Start training</span>\n    t0 <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># # 获取热身迭代的次数iterations： 3</span>\n    nw <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'warmup_epochs'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> nb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># number of warmup iterations, max(3 epochs, 100 iterations)</span>\n    <span class=\"token comment\"># nw = min(nw, (epochs - start_epoch) / 2 * nb)  # limit warmup to &lt; 1/2 of training</span>\n    last_opt_step <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    <span class=\"token comment\"># # 初始化maps(每个类别的map)和results</span>\n    maps <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>nc<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># mAP per class</span>\n    results <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># P, R, mAP@.5, mAP@.5-.95, val_loss(box, obj, cls)</span>\n    <span class=\"token comment\"># 设置学习率衰减所进行到的轮次，即使打断训练，使用resume接着训练也能正常衔接之前的训练进行学习率衰减</span>\n    scheduler<span class=\"token punctuation\">.</span>last_epoch <span class=\"token operator\">=</span> start_epoch <span class=\"token operator\">-</span> <span class=\"token number\">1</span>  <span class=\"token comment\"># do not move</span>\n    <span class=\"token comment\"># 设置amp混合精度训练</span>\n    scaler <span class=\"token operator\">=</span> amp<span class=\"token punctuation\">.</span>GradScaler<span class=\"token punctuation\">(</span>enabled<span class=\"token operator\">=</span>cuda<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 早停止，不更新结束训练</span>\n    stopper <span class=\"token operator\">=</span> EarlyStopping<span class=\"token punctuation\">(</span>patience<span class=\"token operator\">=</span>opt<span class=\"token punctuation\">.</span>patience<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 初始化损失函数</span>\n    compute_loss <span class=\"token operator\">=</span> ComputeLoss<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># init loss class</span>\n    <span class=\"token comment\"># 打印信息</span>\n    LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>f<span class=\"token string\">'Image sizes {imgsz} train, {imgsz} val\\n'</span>\n                f<span class=\"token string\">'Using {train_loader.num_workers * WORLD_SIZE} dataloader workers\\n'</span>\n                f<span class=\"token string\">\"Logging results to {colorstr('bold', save_dir)}\\n\"</span>\n                f<span class=\"token string\">'Starting training for {epochs} epochs...'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 开始走起训练</span>\n    <span class=\"token keyword\">for</span> epoch <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>start_epoch<span class=\"token punctuation\">,</span> epochs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># epoch ------------------------------------------------------------------</span>\n        model<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Update image weights (optional, single-GPU only)</span>\n        <span class=\"token comment\"># opt.image_weights</span>\n        <span class=\"token keyword\">if</span> opt<span class=\"token punctuation\">.</span>image_weights<span class=\"token punctuation\">:</span>\n            <span class=\"token triple-quoted-string string\">\"\"\"\n            如果设置进行图片采样策略，\n            则根据前面初始化的图片采样权重model.class_weights以及maps配合每张图片包含的类别数\n            通过random.choices生成图片索引indices从而进行采样\n            \"\"\"</span>\n            cw <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>class_weights<span class=\"token punctuation\">.</span>cpu<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> maps<span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> <span class=\"token number\">2</span> <span class=\"token operator\">/</span> nc  <span class=\"token comment\"># class weights</span>\n            iw <span class=\"token operator\">=</span> labels_to_image_weights<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">.</span>labels<span class=\"token punctuation\">,</span> nc<span class=\"token operator\">=</span>nc<span class=\"token punctuation\">,</span> class_weights<span class=\"token operator\">=</span>cw<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># image weights</span>\n            dataset<span class=\"token punctuation\">.</span>indices <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>choices<span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> weights<span class=\"token operator\">=</span>iw<span class=\"token punctuation\">,</span> k<span class=\"token operator\">=</span>dataset<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># rand weighted idx</span>\n\n        <span class=\"token comment\"># Update mosaic border (optional)</span>\n        <span class=\"token comment\"># b = int(random.uniform(0.25 * imgsz, 0.75 * imgsz + gs) // gs * gs)</span>\n        <span class=\"token comment\"># dataset.mosaic_border = [b - imgsz, -b]  # height, width borders</span>\n\n        mloss <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> device<span class=\"token operator\">=</span>device<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># mean losses</span>\n        <span class=\"token keyword\">if</span> RANK <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            train_loader<span class=\"token punctuation\">.</span>sampler<span class=\"token punctuation\">.</span>set_epoch<span class=\"token punctuation\">(</span>epoch<span class=\"token punctuation\">)</span>\n        pbar <span class=\"token operator\">=</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>train_loader<span class=\"token punctuation\">)</span>\n        LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'%10s'</span> <span class=\"token operator\">*</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Epoch'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gpu_mem'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'box'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'obj'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cls'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'labels'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'img_size'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> RANK <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 进度条显示</span>\n            pbar <span class=\"token operator\">=</span> tqdm<span class=\"token punctuation\">(</span>pbar<span class=\"token punctuation\">,</span> total<span class=\"token operator\">=</span>nb<span class=\"token punctuation\">,</span> bar_format<span class=\"token operator\">=</span><span class=\"token string\">'{l_bar}{bar:10}{r_bar}{bar:-10b}'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># progress bar</span>\n        <span class=\"token comment\"># 梯度清零</span>\n        optimizer<span class=\"token punctuation\">.</span>zero_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>imgs<span class=\"token punctuation\">,</span> targets<span class=\"token punctuation\">,</span> paths<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> pbar<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># batch -------------------------------------------------------------</span>\n            ni <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> nb <span class=\"token operator\">*</span> epoch  <span class=\"token comment\"># number integrated batches (since train start)</span>\n            imgs <span class=\"token operator\">=</span> imgs<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">,</span> non_blocking<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">255</span>  <span class=\"token comment\"># uint8 to float32, 0-255 to 0.0-1.0</span>\n\n            <span class=\"token triple-quoted-string string\">\"\"\"\n            热身训练(前nw次迭代)\n            在前nw次迭代中, 根据以下方式选取accumulate和学习率\n            \"\"\"</span>\n            <span class=\"token comment\"># Warmup</span>\n            <span class=\"token keyword\">if</span> ni <span class=\"token operator\">&lt;=</span> nw<span class=\"token punctuation\">:</span>\n                xi <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nw<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># x interp</span>\n                <span class=\"token comment\"># compute_loss.gr = np.interp(ni, xi, [0.0, 1.0])  # iou loss ratio (obj_loss = 1.0 or iou)</span>\n                accumulate <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>interp<span class=\"token punctuation\">(</span>ni<span class=\"token punctuation\">,</span> xi<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> nbs <span class=\"token operator\">/</span> batch_size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">for</span> j<span class=\"token punctuation\">,</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>optimizer<span class=\"token punctuation\">.</span>param_groups<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token triple-quoted-string string\">\"\"\"\n                    bias的学习率从0.1下降到基准学习率lr*lf(epoch)，\n                    其他的参数学习率从0增加到lr*lf(epoch).\n                    lf为上面设置的余弦退火的衰减函数\n                    动量momentum也从0.9慢慢变到hyp['momentum'](default=0.937)\n                    \"\"\"</span>\n\n                    <span class=\"token comment\"># bias lr falls from 0.1 to lr0, all other lrs rise from 0.0 to lr0</span>\n                    x<span class=\"token punctuation\">[</span><span class=\"token string\">'lr'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>interp<span class=\"token punctuation\">(</span>ni<span class=\"token punctuation\">,</span> xi<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'warmup_bias_lr'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> j <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">[</span><span class=\"token string\">'initial_lr'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> lf<span class=\"token punctuation\">(</span>epoch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token string\">'momentum'</span> <span class=\"token keyword\">in</span> x<span class=\"token punctuation\">:</span>\n                        x<span class=\"token punctuation\">[</span><span class=\"token string\">'momentum'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>interp<span class=\"token punctuation\">(</span>ni<span class=\"token punctuation\">,</span> xi<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'warmup_momentum'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'momentum'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># Multi-scale</span>\n            <span class=\"token keyword\">if</span> opt<span class=\"token punctuation\">.</span>multi_scale<span class=\"token punctuation\">:</span>\n                <span class=\"token triple-quoted-string string\">\"\"\"\n                Multi-scale  设置多尺度训练，从imgsz * 0.5, imgsz * 1.5 + gs随机选取尺寸\n                \"\"\"</span>\n                sz <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randrange<span class=\"token punctuation\">(</span>imgsz <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> imgsz <span class=\"token operator\">*</span> <span class=\"token number\">1.5</span> <span class=\"token operator\">+</span> gs<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> gs <span class=\"token operator\">*</span> gs  <span class=\"token comment\"># size</span>\n                sf <span class=\"token operator\">=</span> sz <span class=\"token operator\">/</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>imgs<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># scale factor</span>\n                <span class=\"token keyword\">if</span> sf <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                    ns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>math<span class=\"token punctuation\">.</span>ceil<span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> sf <span class=\"token operator\">/</span> gs<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> gs <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> imgs<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># new shape (stretched to gs-multiple)</span>\n                    imgs <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>functional<span class=\"token punctuation\">.</span>interpolate<span class=\"token punctuation\">(</span>imgs<span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span>ns<span class=\"token punctuation\">,</span> mode<span class=\"token operator\">=</span><span class=\"token string\">'bilinear'</span><span class=\"token punctuation\">,</span> align_corners<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># Forward / 前向传播</span>\n            <span class=\"token keyword\">with</span> amp<span class=\"token punctuation\">.</span>autocast<span class=\"token punctuation\">(</span>enabled<span class=\"token operator\">=</span>cuda<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                pred <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span>imgs<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># forward</span>\n                <span class=\"token comment\"># # 计算损失，包括分类损失，objectness损失，框的回归损失</span>\n                <span class=\"token comment\"># loss为总损失值，loss_items为一个元组，包含分类损失，objectness损失，框的回归损失和总损失</span>\n                loss<span class=\"token punctuation\">,</span> loss_items <span class=\"token operator\">=</span> compute_loss<span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">,</span> targets<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># loss scaled by batch_size</span>\n                <span class=\"token keyword\">if</span> RANK <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token comment\"># 平均不同gpu之间的梯度</span>\n                    loss <span class=\"token operator\">*=</span> WORLD_SIZE  <span class=\"token comment\"># gradient averaged between devices in DDP mode</span>\n                <span class=\"token keyword\">if</span> opt<span class=\"token punctuation\">.</span>quad<span class=\"token punctuation\">:</span>\n                    loss <span class=\"token operator\">*=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">.</span>\n\n            <span class=\"token comment\"># Backward</span>\n            scaler<span class=\"token punctuation\">.</span>scale<span class=\"token punctuation\">(</span>loss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># Optimize  # 模型反向传播accumulate次之后再根据累积的梯度更新一次参数</span>\n            <span class=\"token keyword\">if</span> ni <span class=\"token operator\">-</span> last_opt_step <span class=\"token operator\">&gt;=</span> accumulate<span class=\"token punctuation\">:</span>\n                scaler<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span>optimizer<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># optimizer.step</span>\n                scaler<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                optimizer<span class=\"token punctuation\">.</span>zero_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> ema<span class=\"token punctuation\">:</span>\n                    ema<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span>\n                last_opt_step <span class=\"token operator\">=</span> ni\n\n            <span class=\"token comment\"># Log</span>\n            <span class=\"token keyword\">if</span> RANK <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                mloss <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>mloss <span class=\"token operator\">*</span> i <span class=\"token operator\">+</span> loss_items<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># update mean losses</span>\n                mem <span class=\"token operator\">=</span> f<span class=\"token string\">'{torch.cuda.memory_reserved() / 1E9 if torch.cuda.is_available() else 0:.3g}G'</span>  <span class=\"token comment\"># (GB)</span>\n                pbar<span class=\"token punctuation\">.</span>set_description<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%10s'</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token string\">'%10.4g'</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>\n                    f<span class=\"token string\">'{epoch}/{epochs - 1}'</span><span class=\"token punctuation\">,</span> mem<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>mloss<span class=\"token punctuation\">,</span> targets<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> imgs<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                callbacks<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token string\">'on_train_batch_end'</span><span class=\"token punctuation\">,</span> ni<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> imgs<span class=\"token punctuation\">,</span> targets<span class=\"token punctuation\">,</span> paths<span class=\"token punctuation\">,</span> plots<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>sync_bn<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> callbacks<span class=\"token punctuation\">.</span>stop_training<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span>\n            <span class=\"token comment\"># end batch ------------------------------------------------------------------------------------------------</span>\n\n        <span class=\"token comment\"># Scheduler 进行学习率衰减</span>\n        lr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">[</span><span class=\"token string\">'lr'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> optimizer<span class=\"token punctuation\">.</span>param_groups<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># for loggers</span>\n        scheduler<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> RANK <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># mAP</span>\n            callbacks<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token string\">'on_train_epoch_end'</span><span class=\"token punctuation\">,</span> epoch<span class=\"token operator\">=</span>epoch<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 将model中的属性赋值给ema</span>\n            ema<span class=\"token punctuation\">.</span>update_attr<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> include<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'yaml'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'nc'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hyp'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'names'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'stride'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'class_weights'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 判断当前的epoch是否是最后一轮</span>\n            final_epoch <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>epoch <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> epochs<span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span> stopper<span class=\"token punctuation\">.</span>possible_stop\n            <span class=\"token comment\"># notest: 是否只测试最后一轮  True: 只测试最后一轮   False: 每轮训练完都测试mAP</span>\n            <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> noval <span class=\"token operator\">or</span> final_epoch<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># Calculate mAP</span>\n                <span class=\"token triple-quoted-string string\">\"\"\"\n                测试使用的是ema（指数移动平均 对模型的参数做平均）的模型\n                results: [1] Precision 所有类别的平均precision(最大f1时)\n                         [1] Recall 所有类别的平均recall\n                         [1] map@0.5 所有类别的平均mAP@0.5\n                         [1] map@0.5:0.95 所有类别的平均mAP@0.5:0.95\n                         [1] box_loss 验证集回归损失, obj_loss 验证集置信度损失, cls_loss 验证集分类损失\n                maps: [80] 所有类别的mAP@0.5:0.95\n                \"\"\"</span>\n                results<span class=\"token punctuation\">,</span> maps<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> val<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>data_dict<span class=\"token punctuation\">,</span>\n                                           batch_size<span class=\"token operator\">=</span>batch_size <span class=\"token operator\">//</span> WORLD_SIZE <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n                                           imgsz<span class=\"token operator\">=</span>imgsz<span class=\"token punctuation\">,</span>\n                                           model<span class=\"token operator\">=</span>ema<span class=\"token punctuation\">.</span>ema<span class=\"token punctuation\">,</span>\n                                           single_cls<span class=\"token operator\">=</span>single_cls<span class=\"token punctuation\">,</span>\n                                           dataloader<span class=\"token operator\">=</span>val_loader<span class=\"token punctuation\">,</span>\n                                           save_dir<span class=\"token operator\">=</span>save_dir<span class=\"token punctuation\">,</span>\n                                           plots<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n                                           callbacks<span class=\"token operator\">=</span>callbacks<span class=\"token punctuation\">,</span>\n                                           compute_loss<span class=\"token operator\">=</span>compute_loss<span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># Update best mAP</span>\n            <span class=\"token comment\"># Update best mAP 这里的best mAP其实是[P, R, mAP@.5, mAP@.5-.95]的一个加权值</span>\n            <span class=\"token comment\"># fi: [P, R, mAP@.5, mAP@.5-.95]的一个加权值 = 0.1*mAP@.5 + 0.9*mAP@.5-.95</span>\n            fi <span class=\"token operator\">=</span> fitness<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># weighted combination of [P, R, mAP@.5, mAP@.5-.95]</span>\n            <span class=\"token keyword\">if</span> fi <span class=\"token operator\">&gt;</span> best_fitness<span class=\"token punctuation\">:</span>\n                best_fitness <span class=\"token operator\">=</span> fi\n            log_vals <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>mloss<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> lr\n            callbacks<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token string\">'on_fit_epoch_end'</span><span class=\"token punctuation\">,</span> log_vals<span class=\"token punctuation\">,</span> epoch<span class=\"token punctuation\">,</span> best_fitness<span class=\"token punctuation\">,</span> fi<span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># Save model</span>\n            <span class=\"token triple-quoted-string string\">\"\"\"\n            保存带checkpoint的模型用于inference或resuming training\n            保存模型, 还保存了epoch, results, optimizer等信息\n            optimizer将不会在最后一轮完成后保存\n            model保存的是EMA的模型\n            \"\"\"</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">not</span> nosave<span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span> <span class=\"token punctuation\">(</span>final_epoch <span class=\"token operator\">and</span> <span class=\"token operator\">not</span> evolve<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># if save</span>\n                ckpt <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'epoch'</span><span class=\"token punctuation\">:</span> epoch<span class=\"token punctuation\">,</span>\n                        <span class=\"token string\">'best_fitness'</span><span class=\"token punctuation\">:</span> best_fitness<span class=\"token punctuation\">,</span>\n                        <span class=\"token string\">'model'</span><span class=\"token punctuation\">:</span> deepcopy<span class=\"token punctuation\">(</span>de_parallel<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>half<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token string\">'ema'</span><span class=\"token punctuation\">:</span> deepcopy<span class=\"token punctuation\">(</span>ema<span class=\"token punctuation\">.</span>ema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>half<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token string\">'updates'</span><span class=\"token punctuation\">:</span> ema<span class=\"token punctuation\">.</span>updates<span class=\"token punctuation\">,</span>\n                        <span class=\"token string\">'optimizer'</span><span class=\"token punctuation\">:</span> optimizer<span class=\"token punctuation\">.</span>state_dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token string\">'wandb_id'</span><span class=\"token punctuation\">:</span> loggers<span class=\"token punctuation\">.</span>wandb<span class=\"token punctuation\">.</span>wandb_run<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token keyword\">if</span> loggers<span class=\"token punctuation\">.</span>wandb <span class=\"token keyword\">else</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token string\">'date'</span><span class=\"token punctuation\">:</span> datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isoformat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\n                <span class=\"token comment\"># Save last, best and delete</span>\n                torch<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>ckpt<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> best_fitness <span class=\"token operator\">==</span> fi<span class=\"token punctuation\">:</span>\n                    torch<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>ckpt<span class=\"token punctuation\">,</span> best<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>epoch <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">and</span> <span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>save_period <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">and</span> <span class=\"token punctuation\">(</span>epoch <span class=\"token operator\">%</span> opt<span class=\"token punctuation\">.</span>save_period <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    torch<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>ckpt<span class=\"token punctuation\">,</span> w <span class=\"token operator\">/</span> f<span class=\"token string\">'epoch{epoch}.pt'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">del</span> ckpt\n                callbacks<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token string\">'on_model_save'</span><span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">,</span> epoch<span class=\"token punctuation\">,</span> final_epoch<span class=\"token punctuation\">,</span> best_fitness<span class=\"token punctuation\">,</span> fi<span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># Stop Single-GPU</span>\n            <span class=\"token keyword\">if</span> RANK <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> stopper<span class=\"token punctuation\">(</span>epoch<span class=\"token operator\">=</span>epoch<span class=\"token punctuation\">,</span> fitness<span class=\"token operator\">=</span>fi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">break</span>\n\n            <span class=\"token comment\"># Stop DDP TODO: known issues shttps://github.com/ultralytics/yolov5/pull/4576</span>\n            <span class=\"token comment\"># stop = stopper(epoch=epoch, fitness=fi)</span>\n            <span class=\"token comment\"># if RANK == 0:</span>\n            <span class=\"token comment\">#    dist.broadcast_object_list([stop], 0)  # broadcast 'stop' to all ranks</span>\n\n        <span class=\"token comment\"># Stop DPP</span>\n        <span class=\"token comment\"># with torch_distributed_zero_first(RANK):</span>\n        <span class=\"token comment\"># if stop:</span>\n        <span class=\"token comment\">#    break  # must break all DDP ranks</span>\n</code></pre>\n<h2><a id=\"39_train_804\"></a>3.9 train函数——训练结束/打印信息/保存结果</h2>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">############################################### 8. 打印训练信息 ##########################################</span>\n    <span class=\"token keyword\">if</span> RANK <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>f<span class=\"token string\">'\\n{epoch - start_epoch + 1} epochs completed in {(time.time() - t0) / 3600:.3f} hours.'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> f <span class=\"token keyword\">in</span> last<span class=\"token punctuation\">,</span> best<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> f<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># 模型训练完后, strip_optimizer函数将optimizer从ckpt中删除</span>\n                <span class=\"token comment\"># 并对模型进行model.half() 将Float32-&gt;Float16 这样可以减少模型大小, 提高inference速度</span>\n                strip_optimizer<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># strip optimizers</span>\n                <span class=\"token keyword\">if</span> f <span class=\"token keyword\">is</span> best<span class=\"token punctuation\">:</span>\n                    LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>f<span class=\"token string\">'\\nValidating {f}...'</span><span class=\"token punctuation\">)</span>\n                    results<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> val<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>data_dict<span class=\"token punctuation\">,</span>\n                                            batch_size<span class=\"token operator\">=</span>batch_size <span class=\"token operator\">//</span> WORLD_SIZE <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n                                            imgsz<span class=\"token operator\">=</span>imgsz<span class=\"token punctuation\">,</span>\n                                            model<span class=\"token operator\">=</span>attempt_load<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>half<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                            iou_thres<span class=\"token operator\">=</span><span class=\"token number\">0.65</span> <span class=\"token keyword\">if</span> is_coco <span class=\"token keyword\">else</span> <span class=\"token number\">0.60</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># best pycocotools results at 0.65</span>\n                                            single_cls<span class=\"token operator\">=</span>single_cls<span class=\"token punctuation\">,</span>\n                                            dataloader<span class=\"token operator\">=</span>val_loader<span class=\"token punctuation\">,</span>\n                                            save_dir<span class=\"token operator\">=</span>save_dir<span class=\"token punctuation\">,</span>\n                                            save_json<span class=\"token operator\">=</span>is_coco<span class=\"token punctuation\">,</span>\n                                            verbose<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n                                            plots<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n                                            callbacks<span class=\"token operator\">=</span>callbacks<span class=\"token punctuation\">,</span>\n                                            compute_loss<span class=\"token operator\">=</span>compute_loss<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># val best model with plots</span>\n                    <span class=\"token keyword\">if</span> is_coco<span class=\"token punctuation\">:</span>\n                        callbacks<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token string\">'on_fit_epoch_end'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>mloss<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> lr<span class=\"token punctuation\">,</span> epoch<span class=\"token punctuation\">,</span> best_fitness<span class=\"token punctuation\">,</span> fi<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 回调函数</span>\n        callbacks<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token string\">'on_train_end'</span><span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">,</span> best<span class=\"token punctuation\">,</span> plots<span class=\"token punctuation\">,</span> epoch<span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span>\n        LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>f<span class=\"token string\">\"Results saved to {colorstr('bold', save_dir)}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 释放显存</span>\n    torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>empty_cache<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> results\n\n</code></pre>\n<h1><a id=\"4_run_841\"></a>4. run函数</h1>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 执行这个脚本/ 调用train函数 / 开启训练</span>\n    <span class=\"token comment\"># Usage: import train; train.run(data='coco128.yaml', imgsz=320, weights='yolov5m.pt')</span>\n    opt <span class=\"token operator\">=</span> parse_opt<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> kwargs<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># setattr() 赋值属性，属性不存在则创建一个赋值</span>\n        <span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n    main<span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> opt\n</code></pre>\n<h1><a id=\"5_855\"></a>5.全部代码注释</h1>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># YOLOv5 🚀 by Ultralytics, GPL-3.0 license</span>\n<span class=\"token triple-quoted-string string\">\"\"\"\nTrain a YOLOv5 model on a custom dataset.\n\nModels and datasets download automatically from the latest YOLOv5 release.\nModels: https://github.com/ultralytics/yolov5/tree/master/models\nDatasets: https://github.com/ultralytics/yolov5/tree/master/data\nTutorial: https://github.com/ultralytics/yolov5/wiki/Train-Custom-Data\n\nUsage:\n    $ python path/to/train.py --data coco128.yaml --weights yolov5s.pt --img 640  # from pretrained (RECOMMENDED)\n    $ python path/to/train.py --data coco128.yaml --weights '' --cfg yolov5s.yaml --img 640  # from scratch\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> argparse\n<span class=\"token keyword\">import</span> math\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">from</span> copy <span class=\"token keyword\">import</span> deepcopy\n<span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime\n<span class=\"token keyword\">from</span> pathlib <span class=\"token keyword\">import</span> Path\n\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> torch\n<span class=\"token keyword\">import</span> torch<span class=\"token punctuation\">.</span>distributed <span class=\"token keyword\">as</span> dist\n<span class=\"token keyword\">import</span> torch<span class=\"token punctuation\">.</span>nn <span class=\"token keyword\">as</span> nn\n<span class=\"token keyword\">import</span> yaml\n<span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>cuda <span class=\"token keyword\">import</span> amp\n<span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>parallel <span class=\"token keyword\">import</span> DistributedDataParallel <span class=\"token keyword\">as</span> DDP\n<span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>optim <span class=\"token keyword\">import</span> SGD<span class=\"token punctuation\">,</span> Adam<span class=\"token punctuation\">,</span> AdamW<span class=\"token punctuation\">,</span> lr_scheduler\n<span class=\"token keyword\">from</span> tqdm <span class=\"token keyword\">import</span> tqdm\n\nFILE <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nROOT <span class=\"token operator\">=</span> FILE<span class=\"token punctuation\">.</span>parents<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># YOLOv5 root directory</span>\n<span class=\"token keyword\">if</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>ROOT<span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">in</span> sys<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">:</span>\n    sys<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>ROOT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># add ROOT to PATH</span>\nROOT <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>relpath<span class=\"token punctuation\">(</span>ROOT<span class=\"token punctuation\">,</span> Path<span class=\"token punctuation\">.</span>cwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># relative</span>\n\n<span class=\"token keyword\">import</span> val  <span class=\"token comment\"># for end-of-epoch mAP</span>\n<span class=\"token keyword\">from</span> models<span class=\"token punctuation\">.</span>experimental <span class=\"token keyword\">import</span> attempt_load\n<span class=\"token keyword\">from</span> models<span class=\"token punctuation\">.</span>yolo <span class=\"token keyword\">import</span> Model\n<span class=\"token keyword\">from</span> utils<span class=\"token punctuation\">.</span>autoanchor <span class=\"token keyword\">import</span> check_anchors\n<span class=\"token keyword\">from</span> utils<span class=\"token punctuation\">.</span>autobatch <span class=\"token keyword\">import</span> check_train_batch_size\n<span class=\"token keyword\">from</span> utils<span class=\"token punctuation\">.</span>callbacks <span class=\"token keyword\">import</span> Callbacks\n<span class=\"token keyword\">from</span> utils<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> create_dataloader\n<span class=\"token keyword\">from</span> utils<span class=\"token punctuation\">.</span>downloads <span class=\"token keyword\">import</span> attempt_download\n<span class=\"token keyword\">from</span> utils<span class=\"token punctuation\">.</span>general <span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>LOGGER<span class=\"token punctuation\">,</span> check_dataset<span class=\"token punctuation\">,</span> check_file<span class=\"token punctuation\">,</span> check_git_status<span class=\"token punctuation\">,</span> check_img_size<span class=\"token punctuation\">,</span> check_requirements<span class=\"token punctuation\">,</span>\n                           check_suffix<span class=\"token punctuation\">,</span> check_yaml<span class=\"token punctuation\">,</span> colorstr<span class=\"token punctuation\">,</span> get_latest_run<span class=\"token punctuation\">,</span> increment_path<span class=\"token punctuation\">,</span> init_seeds<span class=\"token punctuation\">,</span>\n                           intersect_dicts<span class=\"token punctuation\">,</span> labels_to_class_weights<span class=\"token punctuation\">,</span> labels_to_image_weights<span class=\"token punctuation\">,</span> methods<span class=\"token punctuation\">,</span> one_cycle<span class=\"token punctuation\">,</span>\n                           print_args<span class=\"token punctuation\">,</span> print_mutation<span class=\"token punctuation\">,</span> strip_optimizer<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">from</span> utils<span class=\"token punctuation\">.</span>loggers <span class=\"token keyword\">import</span> Loggers\n<span class=\"token keyword\">from</span> utils<span class=\"token punctuation\">.</span>loggers<span class=\"token punctuation\">.</span>wandb<span class=\"token punctuation\">.</span>wandb_utils <span class=\"token keyword\">import</span> check_wandb_resume\n<span class=\"token keyword\">from</span> utils<span class=\"token punctuation\">.</span>loss <span class=\"token keyword\">import</span> ComputeLoss\n<span class=\"token keyword\">from</span> utils<span class=\"token punctuation\">.</span>metrics <span class=\"token keyword\">import</span> fitness\n<span class=\"token keyword\">from</span> utils<span class=\"token punctuation\">.</span>plots <span class=\"token keyword\">import</span> plot_evolve<span class=\"token punctuation\">,</span> plot_labels\n<span class=\"token keyword\">from</span> utils<span class=\"token punctuation\">.</span>torch_utils <span class=\"token keyword\">import</span> EarlyStopping<span class=\"token punctuation\">,</span> ModelEMA<span class=\"token punctuation\">,</span> de_parallel<span class=\"token punctuation\">,</span> select_device<span class=\"token punctuation\">,</span> torch_distributed_zero_first\n\nLOCAL_RANK <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getenv<span class=\"token punctuation\">(</span><span class=\"token string\">'LOCAL_RANK'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># https://pytorch.org/docs/stable/elastic/run.html</span>\nRANK <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getenv<span class=\"token punctuation\">(</span><span class=\"token string\">'RANK'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nWORLD_SIZE <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getenv<span class=\"token punctuation\">(</span><span class=\"token string\">'WORLD_SIZE'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">train</span><span class=\"token punctuation\">(</span>hyp<span class=\"token punctuation\">,</span>  <span class=\"token comment\"># path/to/hyp.yaml or hyp dictionary</span>\n          opt<span class=\"token punctuation\">,</span>\n          device<span class=\"token punctuation\">,</span>\n          callbacks\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">################################################ 1. 传入参数/基本配置 #############################################</span>\n    <span class=\"token comment\"># opt传入的参数</span>\n    save_dir<span class=\"token punctuation\">,</span> epochs<span class=\"token punctuation\">,</span> batch_size<span class=\"token punctuation\">,</span> weights<span class=\"token punctuation\">,</span> single_cls<span class=\"token punctuation\">,</span> evolve<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> cfg<span class=\"token punctuation\">,</span> resume<span class=\"token punctuation\">,</span> noval<span class=\"token punctuation\">,</span> nosave<span class=\"token punctuation\">,</span> workers<span class=\"token punctuation\">,</span> freeze <span class=\"token operator\">=</span> \\\n        Path<span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>save_dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>epochs<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>batch_size<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>weights<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>single_cls<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>evolve<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>cfg<span class=\"token punctuation\">,</span> \\\n        opt<span class=\"token punctuation\">.</span>resume<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>noval<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>nosave<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>workers<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>freeze\n\n    <span class=\"token comment\"># Directories</span>\n    w <span class=\"token operator\">=</span> save_dir <span class=\"token operator\">/</span> <span class=\"token string\">'weights'</span>  <span class=\"token comment\"># weights dir</span>\n    <span class=\"token comment\"># 新建文件夹 weights train evolve</span>\n    <span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">.</span>parent <span class=\"token keyword\">if</span> evolve <span class=\"token keyword\">else</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkdir<span class=\"token punctuation\">(</span>parents<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> exist_ok<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># make dir</span>\n    <span class=\"token comment\"># 保存训练结果的目录  如runs/train/exp*/weights/last.pt</span>\n    last<span class=\"token punctuation\">,</span> best <span class=\"token operator\">=</span> w <span class=\"token operator\">/</span> <span class=\"token string\">'last.pt'</span><span class=\"token punctuation\">,</span> w <span class=\"token operator\">/</span> <span class=\"token string\">'best.pt'</span>\n\n    <span class=\"token comment\"># Hyperparameters # isinstance()是否是已知类型</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>hyp<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>hyp<span class=\"token punctuation\">,</span> errors<span class=\"token operator\">=</span><span class=\"token string\">'ignore'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 加载yaml文件</span>\n            hyp <span class=\"token operator\">=</span> yaml<span class=\"token punctuation\">.</span>safe_load<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># load hyps dict</span>\n    <span class=\"token comment\"># 打印超参数 彩色字体</span>\n    LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>colorstr<span class=\"token punctuation\">(</span><span class=\"token string\">'hyperparameters: '</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">', '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>f<span class=\"token string\">'{k}={v}'</span> <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> hyp<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Save run settings</span>\n    <span class=\"token comment\"># 如果不使用进化训练</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> evolve<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># safe_dump() python值转化为yaml序列化</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>save_dir <span class=\"token operator\">/</span> <span class=\"token string\">'hyp.yaml'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            yaml<span class=\"token punctuation\">.</span>safe_dump<span class=\"token punctuation\">(</span>hyp<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> sort_keys<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>save_dir <span class=\"token operator\">/</span> <span class=\"token string\">'opt.yaml'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># vars(opt) 的作用是把数据类型是Namespace的数据转换为字典的形式。</span>\n            yaml<span class=\"token punctuation\">.</span>safe_dump<span class=\"token punctuation\">(</span><span class=\"token builtin\">vars</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> sort_keys<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Loggers</span>\n    data_dict <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    <span class=\"token keyword\">if</span> RANK <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        loggers <span class=\"token operator\">=</span> Loggers<span class=\"token punctuation\">(</span>save_dir<span class=\"token punctuation\">,</span> weights<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">,</span> hyp<span class=\"token punctuation\">,</span> LOGGER<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># loggers instance</span>\n        <span class=\"token keyword\">if</span> loggers<span class=\"token punctuation\">.</span>wandb<span class=\"token punctuation\">:</span>\n            data_dict <span class=\"token operator\">=</span> loggers<span class=\"token punctuation\">.</span>wandb<span class=\"token punctuation\">.</span>data_dict\n            <span class=\"token keyword\">if</span> resume<span class=\"token punctuation\">:</span>\n                weights<span class=\"token punctuation\">,</span> epochs<span class=\"token punctuation\">,</span> hyp<span class=\"token punctuation\">,</span> batch_size <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">.</span>weights<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>epochs<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>hyp<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>batch_size\n\n        <span class=\"token comment\"># Register actions</span>\n        <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> methods<span class=\"token punctuation\">(</span>loggers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            callbacks<span class=\"token punctuation\">.</span>register_action<span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> callback<span class=\"token operator\">=</span><span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>loggers<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Config 画图</span>\n    plots <span class=\"token operator\">=</span> <span class=\"token operator\">not</span> evolve  <span class=\"token comment\"># create plots</span>\n    <span class=\"token comment\"># GPU / CPU</span>\n    cuda <span class=\"token operator\">=</span> device<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'cpu'</span>\n    <span class=\"token comment\"># 随机种子</span>\n    init_seeds<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> RANK<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 存在子进程-分布式训练</span>\n    <span class=\"token keyword\">with</span> torch_distributed_zero_first<span class=\"token punctuation\">(</span>LOCAL_RANK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        data_dict <span class=\"token operator\">=</span> data_dict <span class=\"token operator\">or</span> check_dataset<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># check if None</span>\n    <span class=\"token comment\"># 训练集和验证集的位路径</span>\n    train_path<span class=\"token punctuation\">,</span> val_path <span class=\"token operator\">=</span> data_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'val'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\"># 设置类别 是否单类</span>\n    nc <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> single_cls <span class=\"token keyword\">else</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>data_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'nc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># number of classes</span>\n    <span class=\"token comment\"># 类别对应的名称</span>\n    names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'item'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> single_cls <span class=\"token operator\">and</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'names'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> data_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'names'</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># class names</span>\n    <span class=\"token comment\"># 判断类别长度和文件是否对应</span>\n    <span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> nc<span class=\"token punctuation\">,</span> f<span class=\"token string\">'{len(names)} names found for nc={nc} dataset in {data}'</span>  <span class=\"token comment\"># check</span>\n    <span class=\"token comment\"># 当前数据集是否是coco数据集(80个类别) </span>\n    is_coco <span class=\"token operator\">=</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>val_path<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">and</span> val_path<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'coco/val2017.txt'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># COCO dataset</span>\n\n    <span class=\"token comment\">################################################### 2. Model ###########################################</span>\n    <span class=\"token comment\"># 检查文件后缀是否是.pt</span>\n    check_suffix<span class=\"token punctuation\">(</span>weights<span class=\"token punctuation\">,</span> <span class=\"token string\">'.pt'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># check weights</span>\n    <span class=\"token comment\"># 加载预训练权重 yolov5提供了5个不同的预训练权重，大家可以根据自己的模型选择预训练权重</span>\n    pretrained <span class=\"token operator\">=</span> weights<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'.pt'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> pretrained<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># # torch_distributed_zero_first(RANK): 用于同步不同进程对数据读取的上下文管理器</span>\n        <span class=\"token keyword\">with</span> torch_distributed_zero_first<span class=\"token punctuation\">(</span>LOCAL_RANK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 如果本地不存在就从网站上下载</span>\n            weights <span class=\"token operator\">=</span> attempt_download<span class=\"token punctuation\">(</span>weights<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># download if not found locally</span>\n        <span class=\"token comment\"># 加载模型以及参数</span>\n        ckpt <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>weights<span class=\"token punctuation\">,</span> map_location<span class=\"token operator\">=</span><span class=\"token string\">'cpu'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># load checkpoint to CPU to avoid CUDA memory leak</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        两种加载模型的方式: opt.cfg / ckpt['model'].yaml\n        使用resume-断点训练: 选择ckpt['model']yaml创建模型, 且不加载anchor\n        使用断点训练时,保存的模型会保存anchor,所以不需要加载\n\n        \"\"\"</span>\n        model <span class=\"token operator\">=</span> Model<span class=\"token punctuation\">(</span>cfg <span class=\"token operator\">or</span> ckpt<span class=\"token punctuation\">[</span><span class=\"token string\">'model'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>yaml<span class=\"token punctuation\">,</span> ch<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> nc<span class=\"token operator\">=</span>nc<span class=\"token punctuation\">,</span> anchors<span class=\"token operator\">=</span>hyp<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'anchors'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># create</span>\n        exclude <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'anchor'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cfg <span class=\"token operator\">or</span> hyp<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'anchors'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">and</span> <span class=\"token operator\">not</span> resume <span class=\"token keyword\">else</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># exclude keys</span>\n        csd <span class=\"token operator\">=</span> ckpt<span class=\"token punctuation\">[</span><span class=\"token string\">'model'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>state_dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># checkpoint state_dict as FP32</span>\n        <span class=\"token comment\"># 筛选字典中的键值对  把exclude删除</span>\n        csd <span class=\"token operator\">=</span> intersect_dicts<span class=\"token punctuation\">(</span>csd<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">.</span>state_dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> exclude<span class=\"token operator\">=</span>exclude<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># intersect</span>\n        model<span class=\"token punctuation\">.</span>load_state_dict<span class=\"token punctuation\">(</span>csd<span class=\"token punctuation\">,</span> strict<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># load</span>\n        LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>f<span class=\"token string\">'Transferred {len(csd)}/{len(model.state_dict())} items from {weights}'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># report</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 不适用预训练权重</span>\n        model <span class=\"token operator\">=</span> Model<span class=\"token punctuation\">(</span>cfg<span class=\"token punctuation\">,</span> ch<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> nc<span class=\"token operator\">=</span>nc<span class=\"token punctuation\">,</span> anchors<span class=\"token operator\">=</span>hyp<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'anchors'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># create</span>\n\n    <span class=\"token comment\">################################################ 3. Freeze/冻结训练 #########################################</span>\n    <span class=\"token comment\"># 冻结训练的网络层</span>\n    freeze <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>f<span class=\"token string\">'model.{x}.'</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span>freeze <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>freeze<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>freeze<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># layers to freeze</span>\n    <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> model<span class=\"token punctuation\">.</span>named_parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        v<span class=\"token punctuation\">.</span>requires_grad <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>  <span class=\"token comment\"># train all layers</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span>x <span class=\"token keyword\">in</span> k <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> freeze<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>f<span class=\"token string\">'freezing {k}'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 冻结训练的层梯度不更新</span>\n            v<span class=\"token punctuation\">.</span>requires_grad <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token comment\"># Image size</span>\n    gs <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>stride<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># grid size (max stride)</span>\n    <span class=\"token comment\"># 检查图片的大小</span>\n    imgsz <span class=\"token operator\">=</span> check_img_size<span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>imgsz<span class=\"token punctuation\">,</span> gs<span class=\"token punctuation\">,</span> floor<span class=\"token operator\">=</span>gs <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># verify imgsz is gs-multiple</span>\n\n    <span class=\"token comment\"># Batch size</span>\n    <span class=\"token keyword\">if</span> RANK <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> batch_size <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># single-GPU only, estimate best batch size</span>\n        batch_size <span class=\"token operator\">=</span> check_train_batch_size<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> imgsz<span class=\"token punctuation\">)</span>\n        loggers<span class=\"token punctuation\">.</span>on_params_update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"batch_size\"</span><span class=\"token punctuation\">:</span> batch_size<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">############################################ 4. Optimizer/优化器 ###########################################</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    nbs = 64\n    batchsize = 16\n    accumulate = 64 / 16 = 4\n    模型梯度累计accumulate次之后就更新一次模型 相当于使用更大batch_size\n    \"\"\"</span>\n    nbs <span class=\"token operator\">=</span> <span class=\"token number\">64</span>  <span class=\"token comment\"># nominal batch size</span>\n    accumulate <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>nbs <span class=\"token operator\">/</span> batch_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># accumulate loss before optimizing</span>\n    <span class=\"token comment\"># 权重衰减参数</span>\n    hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'weight_decay'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*=</span> batch_size <span class=\"token operator\">*</span> accumulate <span class=\"token operator\">/</span> nbs  <span class=\"token comment\"># scale weight_decay</span>\n    <span class=\"token comment\"># 打印日志</span>\n    LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>f<span class=\"token string\">\"Scaled weight_decay = {hyp['weight_decay']}\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 将模型参数分为三组(weights、biases、bn)来进行分组优化</span>\n    g0<span class=\"token punctuation\">,</span> g1<span class=\"token punctuation\">,</span> g2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># optimizer parameter groups</span>\n    <span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> model<span class=\"token punctuation\">.</span>modules<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> <span class=\"token string\">'bias'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">and</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>bias<span class=\"token punctuation\">,</span> nn<span class=\"token punctuation\">.</span>Parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># bias</span>\n            g2<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>bias<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># weight (no decay)</span>\n            g0<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> <span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> <span class=\"token string\">'weight'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">and</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">,</span> nn<span class=\"token punctuation\">.</span>Parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># weight (with decay)</span>\n            g1<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 选择优化器 / 提供了三个优化器——g0</span>\n    <span class=\"token keyword\">if</span> opt<span class=\"token punctuation\">.</span>optimizer <span class=\"token operator\">==</span> <span class=\"token string\">'Adam'</span><span class=\"token punctuation\">:</span>\n        optimizer <span class=\"token operator\">=</span> Adam<span class=\"token punctuation\">(</span>g0<span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span>hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'lr0'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> betas<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'momentum'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># adjust beta1 to momentum</span>\n    <span class=\"token keyword\">elif</span> opt<span class=\"token punctuation\">.</span>optimizer <span class=\"token operator\">==</span> <span class=\"token string\">'AdamW'</span><span class=\"token punctuation\">:</span>\n        optimizer <span class=\"token operator\">=</span> AdamW<span class=\"token punctuation\">(</span>g0<span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span>hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'lr0'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> betas<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'momentum'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># adjust beta1 to momentum</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        optimizer <span class=\"token operator\">=</span> SGD<span class=\"token punctuation\">(</span>g0<span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span>hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'lr0'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> momentum<span class=\"token operator\">=</span>hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'momentum'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nesterov<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 设置优化的方式——g1 / g2</span>\n    optimizer<span class=\"token punctuation\">.</span>add_param_group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'params'</span><span class=\"token punctuation\">:</span> g1<span class=\"token punctuation\">,</span> <span class=\"token string\">'weight_decay'</span><span class=\"token punctuation\">:</span> hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'weight_decay'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># add g1 with weight_decay</span>\n    optimizer<span class=\"token punctuation\">.</span>add_param_group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'params'</span><span class=\"token punctuation\">:</span> g2<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># add g2 (biases)</span>\n    <span class=\"token comment\"># 打印log日志 优化信息</span>\n    LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>f<span class=\"token string\">\"{colorstr('optimizer:')} {type(optimizer).__name__} with parameter groups \"</span>\n                f<span class=\"token string\">\"{len(g0)} weight (no decay), {len(g1)} weight, {len(g2)} bias\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 删除变量</span>\n    <span class=\"token keyword\">del</span> g0<span class=\"token punctuation\">,</span> g1<span class=\"token punctuation\">,</span> g2\n\n    <span class=\"token comment\">############################################ 5. Scheduler ##############################################</span>\n    <span class=\"token comment\"># 是否余弦学习率调整方式</span>\n    <span class=\"token keyword\">if</span> opt<span class=\"token punctuation\">.</span>cos_lr<span class=\"token punctuation\">:</span>\n        lf <span class=\"token operator\">=</span> one_cycle<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'lrf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> epochs<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># cosine 1-&gt;hyp['lrf']</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        lf <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> x <span class=\"token operator\">/</span> epochs<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span> <span class=\"token operator\">-</span> hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'lrf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'lrf'</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># linear</span>\n    scheduler <span class=\"token operator\">=</span> lr_scheduler<span class=\"token punctuation\">.</span>LambdaLR<span class=\"token punctuation\">(</span>optimizer<span class=\"token punctuation\">,</span> lr_lambda<span class=\"token operator\">=</span>lf<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># plot_lr_scheduler(optimizer, scheduler, epochs)</span>\n\n    <span class=\"token comment\"># EMA</span>\n    <span class=\"token comment\"># 使用EMA（指数移动平均）对模型的参数做平均, 一种给予近期数据更高权重的平均方法, 以求提高测试指标并增加模型鲁棒。</span>\n    ema <span class=\"token operator\">=</span> ModelEMA<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> RANK <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">else</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token comment\"># Resume</span>\n    start_epoch<span class=\"token punctuation\">,</span> best_fitness <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span>\n    <span class=\"token keyword\">if</span> pretrained<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Optimizer</span>\n        <span class=\"token keyword\">if</span> ckpt<span class=\"token punctuation\">[</span><span class=\"token string\">'optimizer'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">is</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            optimizer<span class=\"token punctuation\">.</span>load_state_dict<span class=\"token punctuation\">(</span>ckpt<span class=\"token punctuation\">[</span><span class=\"token string\">'optimizer'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            best_fitness <span class=\"token operator\">=</span> ckpt<span class=\"token punctuation\">[</span><span class=\"token string\">'best_fitness'</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\"># EMA</span>\n        <span class=\"token keyword\">if</span> ema <span class=\"token operator\">and</span> ckpt<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'ema'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            ema<span class=\"token punctuation\">.</span>ema<span class=\"token punctuation\">.</span>load_state_dict<span class=\"token punctuation\">(</span>ckpt<span class=\"token punctuation\">[</span><span class=\"token string\">'ema'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>state_dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            ema<span class=\"token punctuation\">.</span>updates <span class=\"token operator\">=</span> ckpt<span class=\"token punctuation\">[</span><span class=\"token string\">'updates'</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\"># Epochs</span>\n        start_epoch <span class=\"token operator\">=</span> ckpt<span class=\"token punctuation\">[</span><span class=\"token string\">'epoch'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">if</span> resume<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">assert</span> start_epoch <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> f<span class=\"token string\">'{weights} training to {epochs} epochs is finished, nothing to resume.'</span>\n        <span class=\"token keyword\">if</span> epochs <span class=\"token operator\">&lt;</span> start_epoch<span class=\"token punctuation\">:</span>\n            LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>f<span class=\"token string\">\"{weights} has been trained for {ckpt['epoch']} epochs. Fine-tuning for {epochs} more epochs.\"</span><span class=\"token punctuation\">)</span>\n            epochs <span class=\"token operator\">+=</span> ckpt<span class=\"token punctuation\">[</span><span class=\"token string\">'epoch'</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># finetune additional epochs</span>\n\n        <span class=\"token keyword\">del</span> ckpt<span class=\"token punctuation\">,</span> csd\n\n    <span class=\"token comment\"># DP mode</span>\n    <span class=\"token comment\"># DP: 单机多卡模式</span>\n    <span class=\"token keyword\">if</span> cuda <span class=\"token operator\">and</span> RANK <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>device_count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        LOGGER<span class=\"token punctuation\">.</span>warning<span class=\"token punctuation\">(</span><span class=\"token string\">'WARNING: DP not recommended, use torch.distributed.run for best DDP Multi-GPU results.\\n'</span>\n                       <span class=\"token string\">'See Multi-GPU Tutorial at https://github.com/ultralytics/yolov5/issues/475 to get started.'</span><span class=\"token punctuation\">)</span>\n        model <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>DataParallel<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># SyncBatchNorm 多卡归一化</span>\n    <span class=\"token keyword\">if</span> opt<span class=\"token punctuation\">.</span>sync_bn <span class=\"token operator\">and</span> cuda <span class=\"token operator\">and</span> RANK <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        model <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>SyncBatchNorm<span class=\"token punctuation\">.</span>convert_sync_batchnorm<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 打印信息</span>\n        LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">'Using SyncBatchNorm()'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># ############################################## 6. Trainloader / 数据加载 ######################################</span>\n    <span class=\"token comment\"># 训练集数据加载</span>\n    train_loader<span class=\"token punctuation\">,</span> dataset <span class=\"token operator\">=</span> create_dataloader<span class=\"token punctuation\">(</span>train_path<span class=\"token punctuation\">,</span> imgsz<span class=\"token punctuation\">,</span> batch_size <span class=\"token operator\">//</span> WORLD_SIZE<span class=\"token punctuation\">,</span> gs<span class=\"token punctuation\">,</span> single_cls<span class=\"token punctuation\">,</span>\n                                              hyp<span class=\"token operator\">=</span>hyp<span class=\"token punctuation\">,</span> augment<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> cache<span class=\"token operator\">=</span><span class=\"token boolean\">None</span> <span class=\"token keyword\">if</span> opt<span class=\"token punctuation\">.</span>cache <span class=\"token operator\">==</span> <span class=\"token string\">'val'</span> <span class=\"token keyword\">else</span> opt<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">,</span>\n                                              rect<span class=\"token operator\">=</span>opt<span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">,</span> rank<span class=\"token operator\">=</span>LOCAL_RANK<span class=\"token punctuation\">,</span> workers<span class=\"token operator\">=</span>workers<span class=\"token punctuation\">,</span>\n                                              image_weights<span class=\"token operator\">=</span>opt<span class=\"token punctuation\">.</span>image_weights<span class=\"token punctuation\">,</span> quad<span class=\"token operator\">=</span>opt<span class=\"token punctuation\">.</span>quad<span class=\"token punctuation\">,</span>\n                                              prefix<span class=\"token operator\">=</span>colorstr<span class=\"token punctuation\">(</span><span class=\"token string\">'train: '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 标签编号最大值</span>\n    mlc <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">.</span>labels<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># max label class</span>\n    <span class=\"token comment\"># 类别总数</span>\n    nb <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>train_loader<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># number of batches</span>\n    <span class=\"token comment\"># 判断编号是否正确</span>\n    <span class=\"token keyword\">assert</span> mlc <span class=\"token operator\">&lt;</span> nc<span class=\"token punctuation\">,</span> f<span class=\"token string\">'Label class {mlc} exceeds nc={nc} in {data}. Possible class labels are 0-{nc - 1}'</span>\n\n    <span class=\"token comment\"># Process 0</span>\n    <span class=\"token comment\"># 验证集数据集加载</span>\n    <span class=\"token keyword\">if</span> RANK <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        val_loader <span class=\"token operator\">=</span> create_dataloader<span class=\"token punctuation\">(</span>val_path<span class=\"token punctuation\">,</span> imgsz<span class=\"token punctuation\">,</span> batch_size <span class=\"token operator\">//</span> WORLD_SIZE <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> gs<span class=\"token punctuation\">,</span> single_cls<span class=\"token punctuation\">,</span>\n                                       hyp<span class=\"token operator\">=</span>hyp<span class=\"token punctuation\">,</span> cache<span class=\"token operator\">=</span><span class=\"token boolean\">None</span> <span class=\"token keyword\">if</span> noval <span class=\"token keyword\">else</span> opt<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">,</span>\n                                       rect<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> rank<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> workers<span class=\"token operator\">=</span>workers <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> pad<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n                                       prefix<span class=\"token operator\">=</span>colorstr<span class=\"token punctuation\">(</span><span class=\"token string\">'val: '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\"># 没有使用断点训练</span>\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> resume<span class=\"token punctuation\">:</span>\n            labels <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">.</span>labels<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># c = torch.tensor(labels[:, 0])  # classes</span>\n            <span class=\"token comment\"># cf = torch.bincount(c.long(), minlength=nc) + 1.  # frequency</span>\n            <span class=\"token comment\"># model._initialize_biases(cf.to(device))</span>\n            <span class=\"token keyword\">if</span> plots<span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># 画出标签信息</span>\n                plot_labels<span class=\"token punctuation\">(</span>labels<span class=\"token punctuation\">,</span> names<span class=\"token punctuation\">,</span> save_dir<span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># Anchors</span>\n            <span class=\"token comment\"># 自适应anchor / anchor可以理解为程序预测的box</span>\n            <span class=\"token comment\"># 根据k-mean算法聚类生成新的锚框</span>\n            <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> opt<span class=\"token punctuation\">.</span>noautoanchor<span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># 参数dataset代表的是训练集，hyp['anchor_t']是从配置文件hpy.scratch.yaml读取的超参数 anchor_t:4.0</span>\n                <span class=\"token comment\"># 当配置文件中的anchor计算bpr（best possible recall）小于0.98时才会重新计算anchor。</span>\n                <span class=\"token comment\"># best possible recall最大值1，如果bpr小于0.98，程序会根据数据集的label自动学习anchor的尺寸</span>\n                check_anchors<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">,</span> model<span class=\"token operator\">=</span>model<span class=\"token punctuation\">,</span> thr<span class=\"token operator\">=</span>hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'anchor_t'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> imgsz<span class=\"token operator\">=</span>imgsz<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 半进度</span>\n            model<span class=\"token punctuation\">.</span>half<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># pre-reduce anchor precision</span>\n        callbacks<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token string\">'on_pretrain_routine_end'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># #################################################### 7. 训练 ###############################################</span>\n    <span class=\"token comment\"># DDP mode</span>\n    <span class=\"token comment\"># DDP：多机多卡</span>\n    <span class=\"token keyword\">if</span> cuda <span class=\"token operator\">and</span> RANK <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        model <span class=\"token operator\">=</span> DDP<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> device_ids<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>LOCAL_RANK<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> output_device<span class=\"token operator\">=</span>LOCAL_RANK<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Model attributes</span>\n    nl <span class=\"token operator\">=</span> de_parallel<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>nl  <span class=\"token comment\"># number of detection layers (to scale hyps)</span>\n    hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'box'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*=</span> <span class=\"token number\">3</span> <span class=\"token operator\">/</span> nl  <span class=\"token comment\"># scale to layers</span>\n    hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'cls'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*=</span> nc <span class=\"token operator\">/</span> <span class=\"token number\">80</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">/</span> nl  <span class=\"token comment\"># scale to classes and layers</span>\n    hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'obj'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*=</span> <span class=\"token punctuation\">(</span>imgsz <span class=\"token operator\">/</span> <span class=\"token number\">640</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">/</span> nl  <span class=\"token comment\"># scale to image size and layers</span>\n    <span class=\"token comment\"># 标签平滑</span>\n    hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'label_smoothing'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">.</span>label_smoothing\n    model<span class=\"token punctuation\">.</span>nc <span class=\"token operator\">=</span> nc  <span class=\"token comment\"># attach number of classes to model</span>\n    model<span class=\"token punctuation\">.</span>hyp <span class=\"token operator\">=</span> hyp  <span class=\"token comment\"># attach hyperparameters to model</span>\n    <span class=\"token comment\"># 从训练样本标签得到类别权重（和类别中的目标数即类别频率成反比）</span>\n    model<span class=\"token punctuation\">.</span>class_weights <span class=\"token operator\">=</span> labels_to_class_weights<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">.</span>labels<span class=\"token punctuation\">,</span> nc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> nc  <span class=\"token comment\"># attach class weights</span>\n    model<span class=\"token punctuation\">.</span>names <span class=\"token operator\">=</span> names\n\n    <span class=\"token comment\"># Start training</span>\n    t0 <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># # 获取热身迭代的次数iterations： 3</span>\n    nw <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'warmup_epochs'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> nb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># number of warmup iterations, max(3 epochs, 100 iterations)</span>\n    <span class=\"token comment\"># nw = min(nw, (epochs - start_epoch) / 2 * nb)  # limit warmup to &lt; 1/2 of training</span>\n    last_opt_step <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    <span class=\"token comment\"># # 初始化maps(每个类别的map)和results</span>\n    maps <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>nc<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># mAP per class</span>\n    results <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># P, R, mAP@.5, mAP@.5-.95, val_loss(box, obj, cls)</span>\n    <span class=\"token comment\"># 设置学习率衰减所进行到的轮次，即使打断训练，使用resume接着训练也能正常衔接之前的训练进行学习率衰减</span>\n    scheduler<span class=\"token punctuation\">.</span>last_epoch <span class=\"token operator\">=</span> start_epoch <span class=\"token operator\">-</span> <span class=\"token number\">1</span>  <span class=\"token comment\"># do not move</span>\n    <span class=\"token comment\"># 设置amp混合精度训练</span>\n    scaler <span class=\"token operator\">=</span> amp<span class=\"token punctuation\">.</span>GradScaler<span class=\"token punctuation\">(</span>enabled<span class=\"token operator\">=</span>cuda<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 早停止，不更新结束训练</span>\n    stopper <span class=\"token operator\">=</span> EarlyStopping<span class=\"token punctuation\">(</span>patience<span class=\"token operator\">=</span>opt<span class=\"token punctuation\">.</span>patience<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 初始化损失函数</span>\n    compute_loss <span class=\"token operator\">=</span> ComputeLoss<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># init loss class</span>\n    <span class=\"token comment\"># 打印信息</span>\n    LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>f<span class=\"token string\">'Image sizes {imgsz} train, {imgsz} val\\n'</span>\n                f<span class=\"token string\">'Using {train_loader.num_workers * WORLD_SIZE} dataloader workers\\n'</span>\n                f<span class=\"token string\">\"Logging results to {colorstr('bold', save_dir)}\\n\"</span>\n                f<span class=\"token string\">'Starting training for {epochs} epochs...'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 开始走起训练</span>\n    <span class=\"token keyword\">for</span> epoch <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>start_epoch<span class=\"token punctuation\">,</span> epochs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># epoch ------------------------------------------------------------------</span>\n        model<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Update image weights (optional, single-GPU only)</span>\n        <span class=\"token comment\"># opt.image_weights</span>\n        <span class=\"token keyword\">if</span> opt<span class=\"token punctuation\">.</span>image_weights<span class=\"token punctuation\">:</span>\n            <span class=\"token triple-quoted-string string\">\"\"\"\n            如果设置进行图片采样策略，\n            则根据前面初始化的图片采样权重model.class_weights以及maps配合每张图片包含的类别数\n            通过random.choices生成图片索引indices从而进行采样\n            \"\"\"</span>\n            cw <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>class_weights<span class=\"token punctuation\">.</span>cpu<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> maps<span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> <span class=\"token number\">2</span> <span class=\"token operator\">/</span> nc  <span class=\"token comment\"># class weights</span>\n            iw <span class=\"token operator\">=</span> labels_to_image_weights<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">.</span>labels<span class=\"token punctuation\">,</span> nc<span class=\"token operator\">=</span>nc<span class=\"token punctuation\">,</span> class_weights<span class=\"token operator\">=</span>cw<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># image weights</span>\n            dataset<span class=\"token punctuation\">.</span>indices <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>choices<span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> weights<span class=\"token operator\">=</span>iw<span class=\"token punctuation\">,</span> k<span class=\"token operator\">=</span>dataset<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># rand weighted idx</span>\n\n        <span class=\"token comment\"># Update mosaic border (optional)</span>\n        <span class=\"token comment\"># b = int(random.uniform(0.25 * imgsz, 0.75 * imgsz + gs) // gs * gs)</span>\n        <span class=\"token comment\"># dataset.mosaic_border = [b - imgsz, -b]  # height, width borders</span>\n\n        mloss <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> device<span class=\"token operator\">=</span>device<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># mean losses</span>\n        <span class=\"token keyword\">if</span> RANK <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            train_loader<span class=\"token punctuation\">.</span>sampler<span class=\"token punctuation\">.</span>set_epoch<span class=\"token punctuation\">(</span>epoch<span class=\"token punctuation\">)</span>\n        pbar <span class=\"token operator\">=</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>train_loader<span class=\"token punctuation\">)</span>\n        LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'%10s'</span> <span class=\"token operator\">*</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Epoch'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gpu_mem'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'box'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'obj'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cls'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'labels'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'img_size'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> RANK <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 进度条显示</span>\n            pbar <span class=\"token operator\">=</span> tqdm<span class=\"token punctuation\">(</span>pbar<span class=\"token punctuation\">,</span> total<span class=\"token operator\">=</span>nb<span class=\"token punctuation\">,</span> bar_format<span class=\"token operator\">=</span><span class=\"token string\">'{l_bar}{bar:10}{r_bar}{bar:-10b}'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># progress bar</span>\n        <span class=\"token comment\"># 梯度清零</span>\n        optimizer<span class=\"token punctuation\">.</span>zero_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>imgs<span class=\"token punctuation\">,</span> targets<span class=\"token punctuation\">,</span> paths<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> pbar<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># batch -------------------------------------------------------------</span>\n            ni <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> nb <span class=\"token operator\">*</span> epoch  <span class=\"token comment\"># number integrated batches (since train start)</span>\n            imgs <span class=\"token operator\">=</span> imgs<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">,</span> non_blocking<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">255</span>  <span class=\"token comment\"># uint8 to float32, 0-255 to 0.0-1.0</span>\n\n            <span class=\"token triple-quoted-string string\">\"\"\"\n            热身训练(前nw次迭代)\n            在前nw次迭代中, 根据以下方式选取accumulate和学习率\n            \"\"\"</span>\n            <span class=\"token comment\"># Warmup</span>\n            <span class=\"token keyword\">if</span> ni <span class=\"token operator\">&lt;=</span> nw<span class=\"token punctuation\">:</span>\n                xi <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nw<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># x interp</span>\n                <span class=\"token comment\"># compute_loss.gr = np.interp(ni, xi, [0.0, 1.0])  # iou loss ratio (obj_loss = 1.0 or iou)</span>\n                accumulate <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>interp<span class=\"token punctuation\">(</span>ni<span class=\"token punctuation\">,</span> xi<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> nbs <span class=\"token operator\">/</span> batch_size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">for</span> j<span class=\"token punctuation\">,</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>optimizer<span class=\"token punctuation\">.</span>param_groups<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token triple-quoted-string string\">\"\"\"\n                    bias的学习率从0.1下降到基准学习率lr*lf(epoch)，\n                    其他的参数学习率从0增加到lr*lf(epoch).\n                    lf为上面设置的余弦退火的衰减函数\n                    动量momentum也从0.9慢慢变到hyp['momentum'](default=0.937)\n                    \"\"\"</span>\n\n                    <span class=\"token comment\"># bias lr falls from 0.1 to lr0, all other lrs rise from 0.0 to lr0</span>\n                    x<span class=\"token punctuation\">[</span><span class=\"token string\">'lr'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>interp<span class=\"token punctuation\">(</span>ni<span class=\"token punctuation\">,</span> xi<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'warmup_bias_lr'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> j <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">[</span><span class=\"token string\">'initial_lr'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> lf<span class=\"token punctuation\">(</span>epoch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token string\">'momentum'</span> <span class=\"token keyword\">in</span> x<span class=\"token punctuation\">:</span>\n                        x<span class=\"token punctuation\">[</span><span class=\"token string\">'momentum'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>interp<span class=\"token punctuation\">(</span>ni<span class=\"token punctuation\">,</span> xi<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'warmup_momentum'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'momentum'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># Multi-scale</span>\n            <span class=\"token keyword\">if</span> opt<span class=\"token punctuation\">.</span>multi_scale<span class=\"token punctuation\">:</span>\n                <span class=\"token triple-quoted-string string\">\"\"\"\n                Multi-scale  设置多尺度训练，从imgsz * 0.5, imgsz * 1.5 + gs随机选取尺寸\n                \"\"\"</span>\n                sz <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randrange<span class=\"token punctuation\">(</span>imgsz <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> imgsz <span class=\"token operator\">*</span> <span class=\"token number\">1.5</span> <span class=\"token operator\">+</span> gs<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> gs <span class=\"token operator\">*</span> gs  <span class=\"token comment\"># size</span>\n                sf <span class=\"token operator\">=</span> sz <span class=\"token operator\">/</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>imgs<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># scale factor</span>\n                <span class=\"token keyword\">if</span> sf <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                    ns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>math<span class=\"token punctuation\">.</span>ceil<span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> sf <span class=\"token operator\">/</span> gs<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> gs <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> imgs<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># new shape (stretched to gs-multiple)</span>\n                    imgs <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>functional<span class=\"token punctuation\">.</span>interpolate<span class=\"token punctuation\">(</span>imgs<span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span>ns<span class=\"token punctuation\">,</span> mode<span class=\"token operator\">=</span><span class=\"token string\">'bilinear'</span><span class=\"token punctuation\">,</span> align_corners<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># Forward / 前向传播</span>\n            <span class=\"token keyword\">with</span> amp<span class=\"token punctuation\">.</span>autocast<span class=\"token punctuation\">(</span>enabled<span class=\"token operator\">=</span>cuda<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                pred <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span>imgs<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># forward</span>\n                <span class=\"token comment\"># # 计算损失，包括分类损失，objectness损失，框的回归损失</span>\n                <span class=\"token comment\"># loss为总损失值，loss_items为一个元组，包含分类损失，objectness损失，框的回归损失和总损失</span>\n                loss<span class=\"token punctuation\">,</span> loss_items <span class=\"token operator\">=</span> compute_loss<span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">,</span> targets<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># loss scaled by batch_size</span>\n                <span class=\"token keyword\">if</span> RANK <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token comment\"># 平均不同gpu之间的梯度</span>\n                    loss <span class=\"token operator\">*=</span> WORLD_SIZE  <span class=\"token comment\"># gradient averaged between devices in DDP mode</span>\n                <span class=\"token keyword\">if</span> opt<span class=\"token punctuation\">.</span>quad<span class=\"token punctuation\">:</span>\n                    loss <span class=\"token operator\">*=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">.</span>\n\n            <span class=\"token comment\"># Backward</span>\n            scaler<span class=\"token punctuation\">.</span>scale<span class=\"token punctuation\">(</span>loss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># Optimize  # 模型反向传播accumulate次之后再根据累积的梯度更新一次参数</span>\n            <span class=\"token keyword\">if</span> ni <span class=\"token operator\">-</span> last_opt_step <span class=\"token operator\">&gt;=</span> accumulate<span class=\"token punctuation\">:</span>\n                scaler<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span>optimizer<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># optimizer.step</span>\n                scaler<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                optimizer<span class=\"token punctuation\">.</span>zero_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> ema<span class=\"token punctuation\">:</span>\n                    ema<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span>\n                last_opt_step <span class=\"token operator\">=</span> ni\n\n            <span class=\"token comment\"># Log</span>\n            <span class=\"token keyword\">if</span> RANK <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                mloss <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>mloss <span class=\"token operator\">*</span> i <span class=\"token operator\">+</span> loss_items<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># update mean losses</span>\n                mem <span class=\"token operator\">=</span> f<span class=\"token string\">'{torch.cuda.memory_reserved() / 1E9 if torch.cuda.is_available() else 0:.3g}G'</span>  <span class=\"token comment\"># (GB)</span>\n                pbar<span class=\"token punctuation\">.</span>set_description<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%10s'</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token string\">'%10.4g'</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>\n                    f<span class=\"token string\">'{epoch}/{epochs - 1}'</span><span class=\"token punctuation\">,</span> mem<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>mloss<span class=\"token punctuation\">,</span> targets<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> imgs<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                callbacks<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token string\">'on_train_batch_end'</span><span class=\"token punctuation\">,</span> ni<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> imgs<span class=\"token punctuation\">,</span> targets<span class=\"token punctuation\">,</span> paths<span class=\"token punctuation\">,</span> plots<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>sync_bn<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> callbacks<span class=\"token punctuation\">.</span>stop_training<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span>\n            <span class=\"token comment\"># end batch ------------------------------------------------------------------------------------------------</span>\n\n        <span class=\"token comment\"># Scheduler 进行学习率衰减</span>\n        lr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">[</span><span class=\"token string\">'lr'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> optimizer<span class=\"token punctuation\">.</span>param_groups<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># for loggers</span>\n        scheduler<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> RANK <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># mAP</span>\n            callbacks<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token string\">'on_train_epoch_end'</span><span class=\"token punctuation\">,</span> epoch<span class=\"token operator\">=</span>epoch<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 将model中的属性赋值给ema</span>\n            ema<span class=\"token punctuation\">.</span>update_attr<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> include<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'yaml'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'nc'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hyp'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'names'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'stride'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'class_weights'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 判断当前的epoch是否是最后一轮</span>\n            final_epoch <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>epoch <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> epochs<span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span> stopper<span class=\"token punctuation\">.</span>possible_stop\n            <span class=\"token comment\"># notest: 是否只测试最后一轮  True: 只测试最后一轮   False: 每轮训练完都测试mAP</span>\n            <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> noval <span class=\"token operator\">or</span> final_epoch<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># Calculate mAP</span>\n                <span class=\"token triple-quoted-string string\">\"\"\"\n                测试使用的是ema（指数移动平均 对模型的参数做平均）的模型\n                results: [1] Precision 所有类别的平均precision(最大f1时)\n                         [1] Recall 所有类别的平均recall\n                         [1] map@0.5 所有类别的平均mAP@0.5\n                         [1] map@0.5:0.95 所有类别的平均mAP@0.5:0.95\n                         [1] box_loss 验证集回归损失, obj_loss 验证集置信度损失, cls_loss 验证集分类损失\n                maps: [80] 所有类别的mAP@0.5:0.95\n                \"\"\"</span>\n                results<span class=\"token punctuation\">,</span> maps<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> val<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>data_dict<span class=\"token punctuation\">,</span>\n                                           batch_size<span class=\"token operator\">=</span>batch_size <span class=\"token operator\">//</span> WORLD_SIZE <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n                                           imgsz<span class=\"token operator\">=</span>imgsz<span class=\"token punctuation\">,</span>\n                                           model<span class=\"token operator\">=</span>ema<span class=\"token punctuation\">.</span>ema<span class=\"token punctuation\">,</span>\n                                           single_cls<span class=\"token operator\">=</span>single_cls<span class=\"token punctuation\">,</span>\n                                           dataloader<span class=\"token operator\">=</span>val_loader<span class=\"token punctuation\">,</span>\n                                           save_dir<span class=\"token operator\">=</span>save_dir<span class=\"token punctuation\">,</span>\n                                           plots<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n                                           callbacks<span class=\"token operator\">=</span>callbacks<span class=\"token punctuation\">,</span>\n                                           compute_loss<span class=\"token operator\">=</span>compute_loss<span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># Update best mAP</span>\n            <span class=\"token comment\"># Update best mAP 这里的best mAP其实是[P, R, mAP@.5, mAP@.5-.95]的一个加权值</span>\n            <span class=\"token comment\"># fi: [P, R, mAP@.5, mAP@.5-.95]的一个加权值 = 0.1*mAP@.5 + 0.9*mAP@.5-.95</span>\n            fi <span class=\"token operator\">=</span> fitness<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># weighted combination of [P, R, mAP@.5, mAP@.5-.95]</span>\n            <span class=\"token keyword\">if</span> fi <span class=\"token operator\">&gt;</span> best_fitness<span class=\"token punctuation\">:</span>\n                best_fitness <span class=\"token operator\">=</span> fi\n            log_vals <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>mloss<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> lr\n            callbacks<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token string\">'on_fit_epoch_end'</span><span class=\"token punctuation\">,</span> log_vals<span class=\"token punctuation\">,</span> epoch<span class=\"token punctuation\">,</span> best_fitness<span class=\"token punctuation\">,</span> fi<span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># Save model</span>\n            <span class=\"token triple-quoted-string string\">\"\"\"\n            保存带checkpoint的模型用于inference或resuming training\n            保存模型, 还保存了epoch, results, optimizer等信息\n            optimizer将不会在最后一轮完成后保存\n            model保存的是EMA的模型\n            \"\"\"</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">not</span> nosave<span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span> <span class=\"token punctuation\">(</span>final_epoch <span class=\"token operator\">and</span> <span class=\"token operator\">not</span> evolve<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># if save</span>\n                ckpt <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'epoch'</span><span class=\"token punctuation\">:</span> epoch<span class=\"token punctuation\">,</span>\n                        <span class=\"token string\">'best_fitness'</span><span class=\"token punctuation\">:</span> best_fitness<span class=\"token punctuation\">,</span>\n                        <span class=\"token string\">'model'</span><span class=\"token punctuation\">:</span> deepcopy<span class=\"token punctuation\">(</span>de_parallel<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>half<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token string\">'ema'</span><span class=\"token punctuation\">:</span> deepcopy<span class=\"token punctuation\">(</span>ema<span class=\"token punctuation\">.</span>ema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>half<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token string\">'updates'</span><span class=\"token punctuation\">:</span> ema<span class=\"token punctuation\">.</span>updates<span class=\"token punctuation\">,</span>\n                        <span class=\"token string\">'optimizer'</span><span class=\"token punctuation\">:</span> optimizer<span class=\"token punctuation\">.</span>state_dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token string\">'wandb_id'</span><span class=\"token punctuation\">:</span> loggers<span class=\"token punctuation\">.</span>wandb<span class=\"token punctuation\">.</span>wandb_run<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token keyword\">if</span> loggers<span class=\"token punctuation\">.</span>wandb <span class=\"token keyword\">else</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token string\">'date'</span><span class=\"token punctuation\">:</span> datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isoformat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\n                <span class=\"token comment\"># Save last, best and delete</span>\n                torch<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>ckpt<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> best_fitness <span class=\"token operator\">==</span> fi<span class=\"token punctuation\">:</span>\n                    torch<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>ckpt<span class=\"token punctuation\">,</span> best<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>epoch <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">and</span> <span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>save_period <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">and</span> <span class=\"token punctuation\">(</span>epoch <span class=\"token operator\">%</span> opt<span class=\"token punctuation\">.</span>save_period <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    torch<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>ckpt<span class=\"token punctuation\">,</span> w <span class=\"token operator\">/</span> f<span class=\"token string\">'epoch{epoch}.pt'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">del</span> ckpt\n                callbacks<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token string\">'on_model_save'</span><span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">,</span> epoch<span class=\"token punctuation\">,</span> final_epoch<span class=\"token punctuation\">,</span> best_fitness<span class=\"token punctuation\">,</span> fi<span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># Stop Single-GPU</span>\n            <span class=\"token keyword\">if</span> RANK <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> stopper<span class=\"token punctuation\">(</span>epoch<span class=\"token operator\">=</span>epoch<span class=\"token punctuation\">,</span> fitness<span class=\"token operator\">=</span>fi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">break</span>\n\n            <span class=\"token comment\"># Stop DDP TODO: known issues shttps://github.com/ultralytics/yolov5/pull/4576</span>\n            <span class=\"token comment\"># stop = stopper(epoch=epoch, fitness=fi)</span>\n            <span class=\"token comment\"># if RANK == 0:</span>\n            <span class=\"token comment\">#    dist.broadcast_object_list([stop], 0)  # broadcast 'stop' to all ranks</span>\n\n        <span class=\"token comment\"># Stop DPP</span>\n        <span class=\"token comment\"># with torch_distributed_zero_first(RANK):</span>\n        <span class=\"token comment\"># if stop:</span>\n        <span class=\"token comment\">#    break  # must break all DDP ranks</span>\n\n        <span class=\"token comment\"># end epoch ----------------------------------------------------------------------------------------------------</span>\n    <span class=\"token comment\"># end training --------------------------------------------------------------------------------------------------</span>\n    <span class=\"token comment\">############################################### 8. 打印训练信息 ##########################################</span>\n    <span class=\"token keyword\">if</span> RANK <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>f<span class=\"token string\">'\\n{epoch - start_epoch + 1} epochs completed in {(time.time() - t0) / 3600:.3f} hours.'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> f <span class=\"token keyword\">in</span> last<span class=\"token punctuation\">,</span> best<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> f<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># 模型训练完后, strip_optimizer函数将optimizer从ckpt中删除</span>\n                <span class=\"token comment\"># 并对模型进行model.half() 将Float32-&gt;Float16 这样可以减少模型大小, 提高inference速度</span>\n                strip_optimizer<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># strip optimizers</span>\n                <span class=\"token keyword\">if</span> f <span class=\"token keyword\">is</span> best<span class=\"token punctuation\">:</span>\n                    LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>f<span class=\"token string\">'\\nValidating {f}...'</span><span class=\"token punctuation\">)</span>\n                    results<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> val<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>data_dict<span class=\"token punctuation\">,</span>\n                                            batch_size<span class=\"token operator\">=</span>batch_size <span class=\"token operator\">//</span> WORLD_SIZE <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n                                            imgsz<span class=\"token operator\">=</span>imgsz<span class=\"token punctuation\">,</span>\n                                            model<span class=\"token operator\">=</span>attempt_load<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>half<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                            iou_thres<span class=\"token operator\">=</span><span class=\"token number\">0.65</span> <span class=\"token keyword\">if</span> is_coco <span class=\"token keyword\">else</span> <span class=\"token number\">0.60</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># best pycocotools results at 0.65</span>\n                                            single_cls<span class=\"token operator\">=</span>single_cls<span class=\"token punctuation\">,</span>\n                                            dataloader<span class=\"token operator\">=</span>val_loader<span class=\"token punctuation\">,</span>\n                                            save_dir<span class=\"token operator\">=</span>save_dir<span class=\"token punctuation\">,</span>\n                                            save_json<span class=\"token operator\">=</span>is_coco<span class=\"token punctuation\">,</span>\n                                            verbose<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n                                            plots<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n                                            callbacks<span class=\"token operator\">=</span>callbacks<span class=\"token punctuation\">,</span>\n                                            compute_loss<span class=\"token operator\">=</span>compute_loss<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># val best model with plots</span>\n                    <span class=\"token keyword\">if</span> is_coco<span class=\"token punctuation\">:</span>\n                        callbacks<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token string\">'on_fit_epoch_end'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>mloss<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> lr<span class=\"token punctuation\">,</span> epoch<span class=\"token punctuation\">,</span> best_fitness<span class=\"token punctuation\">,</span> fi<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 回调函数</span>\n        callbacks<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token string\">'on_train_end'</span><span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">,</span> best<span class=\"token punctuation\">,</span> plots<span class=\"token punctuation\">,</span> epoch<span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span>\n        LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>f<span class=\"token string\">\"Results saved to {colorstr('bold', save_dir)}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 释放显存</span>\n    torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>empty_cache<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> results\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">parse_opt</span><span class=\"token punctuation\">(</span>known<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    parser <span class=\"token operator\">=</span> argparse<span class=\"token punctuation\">.</span>ArgumentParser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># weights 权重的路径./weights/yolov5s.pt....</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--weights'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span>ROOT <span class=\"token operator\">/</span> <span class=\"token string\">'yolov5s.pt'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'initial weights path'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># cfg 配置文件（网络结构） anchor/backbone/numclasses/head，该文件需要自己生成</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--cfg'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'model.yaml path'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># data 数据集配置文件（路径） train/val/label/， 该文件需要自己生成</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--data'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span>ROOT <span class=\"token operator\">/</span> <span class=\"token string\">'data/coco128.yaml'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'dataset.yaml path'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># hpy超参数设置文件（lr/sgd/mixup）</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--hyp'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span>ROOT <span class=\"token operator\">/</span> <span class=\"token string\">'data/hyps/hyp.scratch-low.yaml'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'hyperparameters path'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># epochs 训练轮次</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--epochs'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># batchsize 训练批次</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--batch-size'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'total batch size for all GPUs, -1 for autobatch'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># imagesize 设置图片大小</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--imgsz'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'--img'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'--img-size'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">640</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'train, val image size (pixels)'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># rect 是否采用矩形训练，默认为False</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--rect'</span><span class=\"token punctuation\">,</span> action<span class=\"token operator\">=</span><span class=\"token string\">'store_true'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'rectangular training'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># resume 是否接着上次的训练结果，继续训练</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--resume'</span><span class=\"token punctuation\">,</span> nargs<span class=\"token operator\">=</span><span class=\"token string\">'?'</span><span class=\"token punctuation\">,</span> const<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'resume most recent training'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># nosave 保存最好的模型</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--nosave'</span><span class=\"token punctuation\">,</span> action<span class=\"token operator\">=</span><span class=\"token string\">'store_true'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'only save final checkpoint'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># noval 最后进行测试</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--noval'</span><span class=\"token punctuation\">,</span> action<span class=\"token operator\">=</span><span class=\"token string\">'store_true'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'only validate final epoch'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># noautoanchor 不自动调整anchor, 默认False</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--noautoanchor'</span><span class=\"token punctuation\">,</span> action<span class=\"token operator\">=</span><span class=\"token string\">'store_true'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'disable AutoAnchor'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># evolve参数进化</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--evolve'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> nargs<span class=\"token operator\">=</span><span class=\"token string\">'?'</span><span class=\"token punctuation\">,</span> const<span class=\"token operator\">=</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'evolve hyperparameters for x generations'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># bucket谷歌优盘</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--bucket'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'gsutil bucket'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># cache 是否提前缓存图片到内存，以加快训练速度，默认False</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--cache'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> nargs<span class=\"token operator\">=</span><span class=\"token string\">'?'</span><span class=\"token punctuation\">,</span> const<span class=\"token operator\">=</span><span class=\"token string\">'ram'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'--cache images in \"ram\" (default) or \"disk\"'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># mage-weights 加载的权重文件</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--image-weights'</span><span class=\"token punctuation\">,</span> action<span class=\"token operator\">=</span><span class=\"token string\">'store_true'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'use weighted image selection for training'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># device 设备选择</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--device'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'cuda device, i.e. 0 or 0,1,2,3 or cpu'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># multi-scale 多测度训练</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--multi-scale'</span><span class=\"token punctuation\">,</span> action<span class=\"token operator\">=</span><span class=\"token string\">'store_true'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'vary img-size +/- 50%%'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># single-cls 数据集是否多类/默认True</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--single-cls'</span><span class=\"token punctuation\">,</span> action<span class=\"token operator\">=</span><span class=\"token string\">'store_true'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'train multi-class data as single-class'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># optimizer 优化器选择</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--optimizer'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'SGD'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Adam'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'AdamW'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">'SGD'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'optimizer'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># sync-bn:是否使用跨卡同步BN,在DDP模式使用</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--sync-bn'</span><span class=\"token punctuation\">,</span> action<span class=\"token operator\">=</span><span class=\"token string\">'store_true'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'use SyncBatchNorm, only available in DDP mode'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># workers/dataloader的最大worker数量</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--workers'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'max dataloader workers (per RANK in DDP mode)'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 保存路径</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--project'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span>ROOT <span class=\"token operator\">/</span> <span class=\"token string\">'runs/train'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'save to project/name'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 实验名称</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--name'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">'exp'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'save to project/name'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 项目位置是否存在</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--exist-ok'</span><span class=\"token punctuation\">,</span> action<span class=\"token operator\">=</span><span class=\"token string\">'store_true'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'existing project/name ok, do not increment'</span><span class=\"token punctuation\">)</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--quad'</span><span class=\"token punctuation\">,</span> action<span class=\"token operator\">=</span><span class=\"token string\">'store_true'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'quad dataloader'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># cos-lr 余弦学习率</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--cos-lr'</span><span class=\"token punctuation\">,</span> action<span class=\"token operator\">=</span><span class=\"token string\">'store_true'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'cosine LR scheduler'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 标签平滑</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--label-smoothing'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'Label smoothing epsilon'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 早停止忍耐次数</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--patience'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'EarlyStopping patience (epochs without improvement)'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 冻结训练次数</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--freeze'</span><span class=\"token punctuation\">,</span> nargs<span class=\"token operator\">=</span><span class=\"token string\">'+'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'Freeze layers: backbone=10, first3=0 1 2'</span><span class=\"token punctuation\">)</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--save-period'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'Save checkpoint every x epochs (disabled if &lt; 1)'</span><span class=\"token punctuation\">)</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--local_rank'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'DDP parameter, do not modify'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Weights &amp; Biases arguments</span>\n    <span class=\"token comment\"># 在线可视化工具，类似于tensorboard工具，想了解这款工具可以查看https://zhuanlan.zhihu.com/p/266337608</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--entity'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'W&amp;B: Entity'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># upload_dataset: 是否上传dataset到wandb tabel(将数据集作为交互式 dsviz表 在浏览器中查看、查询、筛选和分析数据集) 默认False</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--upload_dataset'</span><span class=\"token punctuation\">,</span> nargs<span class=\"token operator\">=</span><span class=\"token string\">'?'</span><span class=\"token punctuation\">,</span> const<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'W&amp;B: Upload data, \"val\" option'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># bbox_interval: 设置界框图像记录间隔 Set bounding-box image logging interval for W&amp;B 默认-1   opt.epochs // 10</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--bbox_interval'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'W&amp;B: Set bounding-box image logging interval'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 使用数据的版本</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--artifact_alias'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">'latest'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'W&amp;B: Version of dataset artifact to use'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 传入的基本配置中没有的参数也不会报错# parse_args()和parse_known_args() </span>\n    <span class=\"token comment\"># parse = argparse.ArgumentParser()</span>\n    <span class=\"token comment\"># parse.add_argument('--s', type=int, default=2, help='flag_int')</span>\n    <span class=\"token comment\"># parser.parse_args() / parse_args()</span>\n    opt <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span>parse_known_args<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> known <span class=\"token keyword\">else</span> parser<span class=\"token punctuation\">.</span>parse_args<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> opt\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">,</span> callbacks<span class=\"token operator\">=</span>Callbacks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">############################################### 1. Checks ##################################################</span>\n    <span class=\"token keyword\">if</span> RANK <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 输出所有训练参数 / 参数以彩色的方式表现</span>\n        print_args<span class=\"token punctuation\">(</span>FILE<span class=\"token punctuation\">.</span>stem<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 检查代码版本是否更新</span>\n        check_git_status<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 检查安装是否都安装了 requirements.txt， 缺少安装包安装。</span>\n        <span class=\"token comment\"># 缺少安装包：建议使用 pip install -i https://pypi.tuna.tsinghua.edu.cn/simple -r requirements.txt</span>\n        check_requirements<span class=\"token punctuation\">(</span>exclude<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'thop'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">############################################### 2. Resume ##################################################</span>\n    <span class=\"token comment\"># 初始化可视化工具wandb,wandb使用教程看https://zhuanlan.zhihu.com/p/266337608</span>\n    <span class=\"token comment\"># 断点训练使用教程可以查看：https://blog.csdn.net/CharmsLUO/article/details/123410081</span>\n    <span class=\"token keyword\">if</span> opt<span class=\"token punctuation\">.</span>resume <span class=\"token operator\">and</span> <span class=\"token operator\">not</span> check_wandb_resume<span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">)</span> <span class=\"token operator\">and</span> <span class=\"token operator\">not</span> opt<span class=\"token punctuation\">.</span>evolve<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># resume an interrupted run</span>\n        <span class=\"token comment\"># isinstance()是否是已经知道的类型</span>\n        <span class=\"token comment\"># 如果resume是True，则通过get_lastest_run()函数找到runs为文件夹中最近的权重文件last.pt</span>\n        ckpt <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">.</span>resume <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>resume<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> get_latest_run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># specified or most recent path</span>\n        <span class=\"token comment\"># 判断是否是文件</span>\n        <span class=\"token keyword\">assert</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isfile<span class=\"token punctuation\">(</span>ckpt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ERROR: --resume checkpoint does not exist'</span>\n        <span class=\"token comment\">#  # 相关的opt参数也要替换成last.pt中的opt参数 safe_load()yaml文件加载数据</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>Path<span class=\"token punctuation\">(</span>ckpt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">/</span> <span class=\"token string\">'opt.yaml'</span><span class=\"token punctuation\">,</span> errors<span class=\"token operator\">=</span><span class=\"token string\">'ignore'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># argparse.Namespace 可以理解为字典</span>\n            opt <span class=\"token operator\">=</span> argparse<span class=\"token punctuation\">.</span>Namespace<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>yaml<span class=\"token punctuation\">.</span>safe_load<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># replace</span>\n        opt<span class=\"token punctuation\">.</span>cfg<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>weights<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>resume <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> ckpt<span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span>  <span class=\"token comment\"># reinstate</span>\n        <span class=\"token comment\"># 打印断点训练信息</span>\n        LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>f<span class=\"token string\">'Resuming training from {ckpt}'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 不使用断点训练就在加载输入的参数</span>\n        opt<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>cfg<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>hyp<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>weights<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>project <span class=\"token operator\">=</span> \\\n            check_file<span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> check_yaml<span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>cfg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> check_yaml<span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>hyp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>weights<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>project<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># checks</span>\n        <span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>cfg<span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>weights<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'either --cfg or --weights must be specified'</span>\n        <span class=\"token comment\"># opt.evolve=False,opt.name='exp'    opt.evolve=True,opt.name='evolve'</span>\n        <span class=\"token keyword\">if</span> opt<span class=\"token punctuation\">.</span>evolve<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> opt<span class=\"token punctuation\">.</span>project <span class=\"token operator\">==</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>ROOT <span class=\"token operator\">/</span> <span class=\"token string\">'runs/train'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># if default project name, rename to runs/evolve</span>\n                opt<span class=\"token punctuation\">.</span>project <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>ROOT <span class=\"token operator\">/</span> <span class=\"token string\">'runs/evolve'</span><span class=\"token punctuation\">)</span>\n            opt<span class=\"token punctuation\">.</span>exist_ok<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>resume <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">.</span>resume<span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span>  <span class=\"token comment\"># pass resume to exist_ok and disable resume</span>\n        <span class=\"token comment\"># 保存相关信息</span>\n        opt<span class=\"token punctuation\">.</span>save_dir <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>increment_path<span class=\"token punctuation\">(</span>Path<span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>project<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> opt<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> exist_ok<span class=\"token operator\">=</span>opt<span class=\"token punctuation\">.</span>exist_ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># ############################################## 3.DDP mode ###############################################</span>\n    <span class=\"token comment\"># 选择设备cpu/cuda</span>\n    device <span class=\"token operator\">=</span> select_device<span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span>opt<span class=\"token punctuation\">.</span>batch_size<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 多卡训练GPU</span>\n    <span class=\"token keyword\">if</span> LOCAL_RANK <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        msg <span class=\"token operator\">=</span> <span class=\"token string\">'is not compatible with YOLOv5 Multi-GPU DDP training'</span>\n        <span class=\"token keyword\">assert</span> <span class=\"token operator\">not</span> opt<span class=\"token punctuation\">.</span>image_weights<span class=\"token punctuation\">,</span> f<span class=\"token string\">'--image-weights {msg}'</span>\n        <span class=\"token keyword\">assert</span> <span class=\"token operator\">not</span> opt<span class=\"token punctuation\">.</span>evolve<span class=\"token punctuation\">,</span> f<span class=\"token string\">'--evolve {msg}'</span>\n        <span class=\"token keyword\">assert</span> opt<span class=\"token punctuation\">.</span>batch_size <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> f<span class=\"token string\">'AutoBatch with --batch-size -1 {msg}, please pass a valid --batch-size'</span>\n        <span class=\"token keyword\">assert</span> opt<span class=\"token punctuation\">.</span>batch_size <span class=\"token operator\">%</span> WORLD_SIZE <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> f<span class=\"token string\">'--batch-size {opt.batch_size} must be multiple of WORLD_SIZE'</span>\n        <span class=\"token keyword\">assert</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>device_count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> LOCAL_RANK<span class=\"token punctuation\">,</span> <span class=\"token string\">'insufficient CUDA devices for DDP command'</span>\n        <span class=\"token comment\"># 根据编号选择设备</span>\n        <span class=\"token comment\">#使用torch.cuda.set_device()可以更方便地将模型和数据加载到对应GPU上, 直接定义模型之前加入一行代码即可</span>\n        <span class=\"token comment\"># torch.cuda.set_device(gpu_id) #单卡</span>\n        <span class=\"token comment\"># torch.cuda.set_device('cuda:'+str(gpu_ids)) #可指定多卡</span>\n        torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>set_device<span class=\"token punctuation\">(</span>LOCAL_RANK<span class=\"token punctuation\">)</span>\n        device <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">'cuda'</span><span class=\"token punctuation\">,</span> LOCAL_RANK<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 初始化多进程</span>\n        dist<span class=\"token punctuation\">.</span>init_process_group<span class=\"token punctuation\">(</span>backend<span class=\"token operator\">=</span><span class=\"token string\">\"nccl\"</span> <span class=\"token keyword\">if</span> dist<span class=\"token punctuation\">.</span>is_nccl_available<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token string\">\"gloo\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">################################################ 4. Train #################################################</span>\n    <span class=\"token comment\"># 不设置evolve直接调用train训练</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> opt<span class=\"token punctuation\">.</span>evolve<span class=\"token punctuation\">:</span>\n        train<span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>hyp<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">,</span> callbacks<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 分布式训练 WORLD_SIZE=主机的数量</span>\n        <span class=\"token comment\"># 如果是使用多卡训练, 那么销毁进程组</span>\n        <span class=\"token keyword\">if</span> WORLD_SIZE <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">and</span> RANK <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">'Destroying process group... '</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 使用多卡训练, 那么销毁进程组</span>\n            dist<span class=\"token punctuation\">.</span>destroy_process_group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Evolve hyperparameters (optional)</span>\n    <span class=\"token comment\"># 遗传净化算法/一边训练一遍进化</span>\n    <span class=\"token comment\"># 了解遗传算法可以查看我的博客：</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Hyperparameter evolution metadata (mutation scale 0-1, lower_limit, upper_limit)</span>\n        <span class=\"token comment\"># 超参数列表(突变范围 - 最小值 - 最大值)</span>\n        meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'lr0'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># initial learning rate (SGD=1E-2, Adam=1E-3)</span>\n                <span class=\"token string\">'lrf'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># final OneCycleLR learning rate (lr0 * lrf)</span>\n                <span class=\"token string\">'momentum'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.98</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># SGD momentum/Adam beta1</span>\n                <span class=\"token string\">'weight_decay'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># optimizer weight decay</span>\n                <span class=\"token string\">'warmup_epochs'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># warmup epochs (fractions ok)</span>\n                <span class=\"token string\">'warmup_momentum'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.95</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># warmup initial momentum</span>\n                <span class=\"token string\">'warmup_bias_lr'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># warmup initial bias lr</span>\n                <span class=\"token string\">'box'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.02</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># box loss gain</span>\n                <span class=\"token string\">'cls'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># cls loss gain</span>\n                <span class=\"token string\">'cls_pw'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># cls BCELoss positive_weight</span>\n                <span class=\"token string\">'obj'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># obj loss gain (scale with pixels)</span>\n                <span class=\"token string\">'obj_pw'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># obj BCELoss positive_weight</span>\n                <span class=\"token string\">'iou_t'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># IoU training threshold</span>\n                <span class=\"token string\">'anchor_t'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># anchor-multiple threshold</span>\n                <span class=\"token string\">'anchors'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># anchors per output grid (0 to ignore)</span>\n                <span class=\"token string\">'fl_gamma'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># focal loss gamma (efficientDet default gamma=1.5)</span>\n                <span class=\"token string\">'hsv_h'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># image HSV-Hue augmentation (fraction)</span>\n                <span class=\"token string\">'hsv_s'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># image HSV-Saturation augmentation (fraction)</span>\n                <span class=\"token string\">'hsv_v'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># image HSV-Value augmentation (fraction)</span>\n                <span class=\"token string\">'degrees'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># image rotation (+/- deg)</span>\n                <span class=\"token string\">'translate'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># image translation (+/- fraction)</span>\n                <span class=\"token string\">'scale'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># image scale (+/- gain)</span>\n                <span class=\"token string\">'shear'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># image shear (+/- deg)</span>\n                <span class=\"token string\">'perspective'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># image perspective (+/- fraction), range 0-0.001</span>\n                <span class=\"token string\">'flipud'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># image flip up-down (probability)</span>\n                <span class=\"token string\">'fliplr'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># image flip left-right (probability)</span>\n                <span class=\"token string\">'mosaic'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># image mixup (probability)</span>\n                <span class=\"token string\">'mixup'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># image mixup (probability)</span>\n                <span class=\"token string\">'copy_paste'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>  <span class=\"token comment\"># segment copy-paste (probability)</span>\n\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>hyp<span class=\"token punctuation\">,</span> errors<span class=\"token operator\">=</span><span class=\"token string\">'ignore'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 加载yaml超参数</span>\n            hyp <span class=\"token operator\">=</span> yaml<span class=\"token punctuation\">.</span>safe_load<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># load hyps dict</span>\n            <span class=\"token keyword\">if</span> <span class=\"token string\">'anchors'</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">in</span> hyp<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># anchors commented in hyp.yaml</span>\n                hyp<span class=\"token punctuation\">[</span><span class=\"token string\">'anchors'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n        opt<span class=\"token punctuation\">.</span>noval<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>nosave<span class=\"token punctuation\">,</span> save_dir <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> Path<span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>save_dir<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># only val/save final epoch</span>\n        <span class=\"token comment\"># ei = [isinstance(x, (int, float)) for x in hyp.values()]  # evolvable indices</span>\n        <span class=\"token comment\"># 保存进化的超参数列表</span>\n        evolve_yaml<span class=\"token punctuation\">,</span> evolve_csv <span class=\"token operator\">=</span> save_dir <span class=\"token operator\">/</span> <span class=\"token string\">'hyp_evolve.yaml'</span><span class=\"token punctuation\">,</span> save_dir <span class=\"token operator\">/</span> <span class=\"token string\">'evolve.csv'</span>\n        <span class=\"token keyword\">if</span> opt<span class=\"token punctuation\">.</span>bucket<span class=\"token punctuation\">:</span>\n            os<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span>f<span class=\"token string\">'gsutil cp gs://{opt.bucket}/evolve.csv {evolve_csv}'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># download evolve.csv if exists</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        遗传算法调参：遵循适者生存、优胜劣汰的法则，即寻优过程中保留有用的，去除无用的。\n        遗传算法需要提前设置4个参数: 群体大小/进化代数/交叉概率/变异概率\n\n        \"\"\"</span>\n\n        <span class=\"token comment\"># 默认选择进化300代</span>\n        <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>evolve<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># generations to evolve</span>\n            <span class=\"token keyword\">if</span> evolve_csv<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># if evolve.csv exists: select best hyps and mutate</span>\n                <span class=\"token comment\"># Select parent(s)</span>\n                <span class=\"token comment\"># 进化方式--single / --weight</span>\n                parent <span class=\"token operator\">=</span> <span class=\"token string\">'single'</span>  <span class=\"token comment\"># parent selection method: 'single' or 'weighted'</span>\n                <span class=\"token comment\"># 加载evolve.txt文件</span>\n                x <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>loadtxt<span class=\"token punctuation\">(</span>evolve_csv<span class=\"token punctuation\">,</span> ndmin<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> delimiter<span class=\"token operator\">=</span><span class=\"token string\">','</span><span class=\"token punctuation\">,</span> skiprows<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\"># 选取进化结果代数</span>\n                n <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># number of previous results to consider</span>\n                x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">[</span>np<span class=\"token punctuation\">.</span>argsort<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>fitness<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>n<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># top n mutations</span>\n                 <span class=\"token comment\"># 根据resluts计算hyp权重</span>\n                w <span class=\"token operator\">=</span> fitness<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> fitness<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1E</span><span class=\"token operator\">-</span><span class=\"token number\">6</span>  <span class=\"token comment\"># weights (sum &gt; 0)</span>\n                <span class=\"token comment\"># 根据不同进化方式获得base hyp</span>\n                <span class=\"token keyword\">if</span> parent <span class=\"token operator\">==</span> <span class=\"token string\">'single'</span> <span class=\"token operator\">or</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token comment\"># x = x[random.randint(0, n - 1)]  # random selection</span>\n                    x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">[</span>random<span class=\"token punctuation\">.</span>choices<span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> weights<span class=\"token operator\">=</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># weighted selection</span>\n                <span class=\"token keyword\">elif</span> parent <span class=\"token operator\">==</span> <span class=\"token string\">'weighted'</span><span class=\"token punctuation\">:</span>\n                    x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> w<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> w<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># weighted combination</span>\n\n                <span class=\"token comment\"># Mutate</span>\n                <span class=\"token comment\"># # 获取突变初始值</span>\n                mp<span class=\"token punctuation\">,</span> s <span class=\"token operator\">=</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span>  <span class=\"token comment\"># mutation probability, sigma</span>\n                npr <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random\n                npr<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                g <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>meta<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> hyp<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># gains 0-1</span>\n                ng <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>meta<span class=\"token punctuation\">)</span>\n                v <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span>ng<span class=\"token punctuation\">)</span>\n                <span class=\"token comment\"># 设置突变</span>\n                <span class=\"token keyword\">while</span> <span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># mutate until a change occurs (prevent duplicates)</span>\n                    <span class=\"token comment\"># 将突变添加到base hyp上</span>\n                    <span class=\"token comment\"># [i+7]是因为x中前7个数字为results的指标(P,R,mAP,F1,test_loss=(box,obj,cls)),之后才是超参数hyp</span>\n                    v <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>g <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>npr<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span>ng<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> mp<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> npr<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span>ng<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> npr<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> s <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip<span class=\"token punctuation\">(</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> k <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>hyp<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># plt.hist(v.ravel(), 300)</span>\n                    hyp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># mutate</span>\n\n            <span class=\"token comment\"># Constrain to limits</span>\n            <span class=\"token comment\"># 限制超参再规定范围</span>\n            <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> meta<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                hyp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>hyp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># lower limit</span>\n                hyp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>hyp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># upper limit</span>\n                hyp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>hyp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># significant digits</span>\n\n            <span class=\"token comment\"># Train mutation</span>\n            <span class=\"token comment\"># 训练 使用突变后的参超 测试其效果</span>\n            results <span class=\"token operator\">=</span> train<span class=\"token punctuation\">(</span>hyp<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">,</span> callbacks<span class=\"token punctuation\">)</span>\n            callbacks <span class=\"token operator\">=</span> Callbacks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># Write mutation results</span>\n            <span class=\"token comment\"># Write mutation results</span>\n            <span class=\"token comment\"># 将结果写入results 并将对应的hyp写到evolve.txt evolve.txt中每一行为一次进化的结果</span>\n            <span class=\"token comment\"># 每行前七个数字 (P, R, mAP, F1, test_losses(GIOU, obj, cls)) 之后为hyp</span>\n            <span class=\"token comment\"># 保存hyp到yaml文件</span>\n            print_mutation<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">,</span> hyp<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> save_dir<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>bucket<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Plot results</span>\n        <span class=\"token comment\"># 将结果可视化 / 输出保存信息</span>\n        plot_evolve<span class=\"token punctuation\">(</span>evolve_csv<span class=\"token punctuation\">)</span>\n        LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>f<span class=\"token string\">'Hyperparameter evolution finished {opt.evolve} generations\\n'</span>\n                    f<span class=\"token string\">\"Results saved to {colorstr('bold', save_dir)}\\n\"</span>\n                    f<span class=\"token string\">'Usage example: $ python train.py --hyp {evolve_yaml}'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 执行这个脚本/ 调用train函数 / 开启训练</span>\n    <span class=\"token comment\"># Usage: import train; train.run(data='coco128.yaml', imgsz=320, weights='yolov5m.pt')</span>\n    opt <span class=\"token operator\">=</span> parse_opt<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> kwargs<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># setattr() 赋值属性，属性不存在则创建一个赋值</span>\n        <span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n    main<span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> opt\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 接着上次训练</span>\n    <span class=\"token comment\"># python train.py --data ./data/mchar.yaml --cfg yolov5l_mchar.yaml --epochs 80 --batch-size 8 --weights ./runs/train/exp7/weights/last.pt</span>\n    opt <span class=\"token operator\">=</span> parse_opt<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    main<span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h1><a id=\"_1717\"></a>使用教程</h1>\n<p><strong>下面我把大家能使用到的参数，给大家打个样，大家可以一葫芦画瓢，根据自己的情况设置这些参数，运行代码如下</strong></p>\n<pre><code class=\"prism language-python\">python train<span class=\"token punctuation\">.</span>py <span class=\"token operator\">-</span><span class=\"token operator\">-</span>cfg yolov5l_mchar<span class=\"token punctuation\">.</span>yaml <span class=\"token operator\">-</span><span class=\"token operator\">-</span>weights <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>weights<span class=\"token operator\">/</span>yolov5s<span class=\"token punctuation\">.</span>pt  <span class=\"token operator\">-</span><span class=\"token operator\">-</span>data <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>data<span class=\"token operator\">/</span>mchar<span class=\"token punctuation\">.</span>yaml <span class=\"token operator\">-</span><span class=\"token operator\">-</span>epoch <span class=\"token number\">200</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span>batch<span class=\"token operator\">-</span>size <span class=\"token number\">8</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span>rect <span class=\"token operator\">-</span><span class=\"token operator\">-</span>noval <span class=\"token operator\">-</span><span class=\"token operator\">-</span>evolve <span class=\"token number\">300</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span>image<span class=\"token operator\">-</span>weights <span class=\"token operator\">-</span><span class=\"token operator\">-</span>multi<span class=\"token operator\">-</span>scale <span class=\"token operator\">-</span><span class=\"token operator\">-</span>optimizer Adam <span class=\"token operator\">-</span><span class=\"token operator\">-</span>cos<span class=\"token operator\">-</span>lr <span class=\"token operator\">-</span><span class=\"token operator\">-</span>freeze <span class=\"token number\">3</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span>bbox_interval <span class=\"token number\">20</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\62b589399aba4dbda8a54118f2f1c83d.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\adb613a44ae644d2a667a53ec20ff10d.png\"/><br/> <img alt=\"n\" src=\"..\\..\\static\\image\\a963c8d31aa4451d990f80e827e583fe.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-17 21:39:17", "summary": "代码注释、详解、使用教程代码注释、详解、使用教程代码注释、详解、使用教程前言函数函数函数打印关键词安装环境函数是否进行断点训练函数是否分布式训练函数是否进化训练遗传算法调参函数函数基本配置信息函数模型"}