{"blogid": "122797549", "writerAge": "码龄2年", "writerBlogNum": "46", "writerCollect": "69", "writerComment": "58", "writerFan": "462", "writerGrade": "3级", "writerIntegral": "653", "writerName": "怎样让大排不硬", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122797549.jpg", "writerRankTotal": "26016", "writerRankWeekly": "21494", "writerThumb": "124", "writerVisitNum": "21605", "blog_read_count": "6391", "blog_time": "已于 2022-03-31 22:03:36 修改", "blog_title": "什么是泛型？", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E4%B8%80%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E6%B3%9B%E5%9E%8B-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E6%B3%9B%E5%9E%8B\">一、什么是泛型</a></p>\n<p id=\"%E4%BA%8C%E3%80%81%E6%B3%9B%E5%9E%8B%E6%96%B9%E6%B3%95-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81%E6%B3%9B%E5%9E%8B%E6%96%B9%E6%B3%95\">二、泛型方法</a></p>\n<p id=\"%E4%B8%89%E3%80%81%E6%B3%9B%E5%9E%8B%E6%8E%A5%E5%8F%A3-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%89%E3%80%81%E6%B3%9B%E5%9E%8B%E6%8E%A5%E5%8F%A3\">三、泛型接口</a></p>\n<p id=\"%E5%9B%9B%E3%80%81%E9%80%9A%E9%85%8D%E7%AC%A6-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%9B%9B%E3%80%81%E9%80%9A%E9%85%8D%E7%AC%A6\">四、通配符</a></p>\n<p id=\"4.1%E3%80%81%E9%80%9A%E9%85%8D%E7%AC%A6-toc\" style=\"margin-left:40px;\"><a href=\"#4.1%E3%80%81%E9%80%9A%E9%85%8D%E7%AC%A6\">4.1、通配符</a></p>\n<p id=\"4.2%E3%80%81%E4%B8%8A%E9%99%90%E9%80%9A%E9%85%8D%E7%AC%A6-toc\" style=\"margin-left:40px;\"><a href=\"#4.2%E3%80%81%E4%B8%8A%E9%99%90%E9%80%9A%E9%85%8D%E7%AC%A6\">4.2、上限通配符</a></p>\n<p id=\"4.3%E3%80%81%E4%B8%8B%E9%99%90%E9%80%9A%E9%85%8D%E7%AC%A6-toc\" style=\"margin-left:40px;\"><a href=\"#4.3%E3%80%81%E4%B8%8B%E9%99%90%E9%80%9A%E9%85%8D%E7%AC%A6\">4.3、下限通配符</a></p>\n<p id=\"4.4%E3%80%81%E7%B1%BB%E5%9E%8B%E6%93%A6%E9%99%A4-toc\" style=\"margin-left:40px;\"><a href=\"#4.4%E3%80%81%E7%B1%BB%E5%9E%8B%E6%93%A6%E9%99%A4\">4.4、类型擦除</a></p>\n<p></p>\n<hr id=\"hr-toc\"/>\n<h1 id=\"%E4%B8%80%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E6%B3%9B%E5%9E%8B\">一、什么是泛型</h1>\n<blockquote>\n<p>泛型：就是指在类定义时不会设置类中的属性或方法参数的具体类型，而是在类使用时（创建对象）再进行类型的定义。会在编译期检查类型是否错误。</p>\n</blockquote>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"132\" src=\"..\\..\\static\\image\\101412155b854d98891f6c0facdfde7f.png\" width=\"350\"/></p>\n<p>类声明后的&lt;&gt;中这个T被称为类型参数，用于指代任意类型，实际上这个T只是个代表，写什么都可以。表示此时的value1，value2都是在类定义时没有明确类型，只有在使用时才告知编译器类型。出于规范，类型参数用单个的大写字母来代替，常见如下：</p>\n<ul><li>T：代表任意类</li><li>E：表示Element的意思，或是异常</li><li>K：与V搭配使用</li><li>V：与K搭配使用</li></ul>\n<p style=\"text-align:center;\">泛型的使用：</p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"236\" src=\"..\\..\\static\\image\\013313deadbc436bb31daec16836083e.png\" width=\"464\"/></p>\n<p style=\"text-align:center;\">若此时value1和value2的类型不一定相同，就定义多个类型参数：</p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"342\" src=\"..\\..\\static\\image\\0c2a0a364850419aaa79381392e211af.png\" width=\"476\"/></p>\n<p><strong>注意</strong>：非静态内部类会复用外部类的泛型参数，静态内部类不会复用外部类的泛型参数。 </p>\n<h1 id=\"%E4%BA%8C%E3%80%81%E6%B3%9B%E5%9E%8B%E6%96%B9%E6%B3%95\">二、泛型方法</h1>\n<p>此处的泛型方法指的是有自己的类型参数</p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"192\" src=\"..\\..\\static\\image\\6d5708d4cbf544a38d4c03a85b17d7ef.png\" width=\"505\"/></p>\n<p>泛型方法始终以自己的类型参数为准，和类中的类型参数无关：</p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"256\" src=\"..\\..\\static\\image\\97d8709c676e4dfdade09cb45deb9159.png\" width=\"507\"/></p>\n<p>为了避免混淆，一般定义泛型方法时，尽量避免使用类中使用过的类型参数字母：</p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"202\" src=\"..\\..\\static\\image\\cfb8e4ede94d4233a9d08f1f94725e9f.png\" width=\"521\"/></p>\n<h1 id=\"%E4%B8%89%E3%80%81%E6%B3%9B%E5%9E%8B%E6%8E%A5%E5%8F%A3\">三、泛型接口</h1>\n<p style=\"text-align:center;\"> 泛型接口：</p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"100\" src=\"..\\..\\static\\image\\ee9b9f0e47464e0686527c87a34f3067.png\" width=\"369\"/></p>\n<p>子类在实现接口时有两种选择，①要么继续保留泛型，②要么定义子类时明确类型 </p>\n<p style=\"text-align:center;\">①保留泛型</p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"170\" src=\"..\\..\\static\\image\\b658bbfb45c54606a70b90071a60cfbb.png\" width=\"514\"/></p>\n<p style=\"text-align:center;\">②定义子类时明确类型</p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"162\" src=\"..\\..\\static\\image\\d489b7b8e8ad470e83647a5d8b2b3f61.png\" width=\"534\"/></p>\n<h1 id=\"%E5%9B%9B%E3%80%81%E9%80%9A%E9%85%8D%E7%AC%A6\">四、通配符</h1>\n<h2 id=\"4.1%E3%80%81%E9%80%9A%E9%85%8D%E7%AC%A6\"><strong>4.1、通配符</strong></h2>\n<p>&lt;?&gt; 一般用在方法参数，表示可以接受该类所有类型的泛型变量。</p>\n<p>例如：</p>\n<p class=\"img-center\"><img alt=\"\" height=\"510\" src=\"..\\..\\static\\image\\6f519977f4904939b5b1546876355efa.png\" width=\"574\"/></p>\n<p><strong>注意</strong>：&lt;?&gt;只能调用对象的getter方法来获取属性，由于此时根本无法确定传入对象的类型，因此无法调用对象的setter来设置值。 </p>\n<h2 id=\"4.2%E3%80%81%E4%B8%8A%E9%99%90%E9%80%9A%E9%85%8D%E7%AC%A6\"><strong>4.2、上限通配符</strong></h2>\n<p>&lt;? extends 类&gt; 表示?可以指代任何类型，但是该类型必须是后面类的子类。</p>\n<p>例如：</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\bba290d5681b480ba748801a51fed5c1.png\"/></p>\n<p>此时表示?&lt;=Number，此时？可以是Number类本身，或者Number的子类，除此之外其他类型都不可以。</p>\n<p><strong>注意</strong>：？表示可以接收Number及其子类，但是子类之间不能互相转换，所以上限通配符仍然不能调用对象的setter方法设置一个具体的属性值。</p>\n<p>extends可以用在泛型类的定义上：</p>\n<p>此时T可以指代任意Number类及其子类的类型。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\9d2b49e2c0384c7e96be4a1bbb1b0ce6.png\"/></p>\n<h2 id=\"4.3%E3%80%81%E4%B8%8B%E9%99%90%E9%80%9A%E9%85%8D%E7%AC%A6\"><strong>4.3、下限通配符</strong></h2>\n<p>&lt;? super 类&gt; 此时？表示可以指代任意类型，但是该类型必须是后面类的父类。</p>\n<p>例如：</p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"523\" src=\"..\\..\\static\\image\\60dbd709289a45c992f6fc4cdad308f4.png\" width=\"624\"/></p>\n<p>此时表示？必须是String及其父类，所有此时？只能指代String或Object。</p>\n<p><strong>注意</strong>：下限通配符可以调用对象的setter方法设置一个具体的属性值，无论？是什么类型，规定好的下限类型一定可以通过向上转型变为父类。 </p>\n<h2 id=\"4.4%E3%80%81%E7%B1%BB%E5%9E%8B%E6%93%A6%E9%99%A4\">4.4、类型擦除</h2>\n<p>类型擦除：所有泛型类型参数，若没有设置泛型上限，则编译之后统一擦除为Object类型，若设置了泛型上限，则编译之后统一擦除为相应的泛型上限。</p>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-31 22:03:36", "summary": "目录一、什么是泛型二、泛型方法三、泛型接口四、通配符、通配符、上限通配符、下限通配符、类型擦除一、什么是泛型泛型：就是指在类定义时不会设置类中的属性或方法参数的具体类型，而是在类使用时创建对象再进行类"}