{"blogid": "122683671", "writerAge": "码龄3年", "writerBlogNum": "319", "writerCollect": "37807", "writerComment": "30434", "writerFan": "55947", "writerGrade": "9级", "writerIntegral": "94985", "writerName": "孤寒者", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122683671.jpg", "writerRankTotal": "18", "writerRankWeekly": "96", "writerThumb": "20037", "writerVisitNum": "4649559", "blog_read_count": "25513", "blog_time": "已于 2022-02-11 22:49:29 修改", "blog_title": "1.Python简介&&开发环境配置&&工具准备", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录：</h3>\n<ul><li><a href=\"#0Python_2\">0.Python是什么</a></li><li><a href=\"#1Python_14\">1.Python开发环境配置</a></li><li><ul><li><a href=\"#11_WindowsPython_18\">1.1 Windows安装Python解释器</a></li><li><a href=\"#12_Windowspycharm_80\">1.2 Windows安装pycharm开发工具</a></li><li><a href=\"#13_LinuxPython_108\">1.3 Linux系统中搭建Python开发环境</a></li></ul>\n</li><li><a href=\"#2_Python_276\">2. 各种Python解释器</a></li><li><ul><li><a href=\"#21_CPython_284\">2.1 CPython</a></li><li><a href=\"#22_IPython_290\">2.2 IPython</a></li><li><a href=\"#23_PyPy_296\">2.3 PyPy</a></li><li><a href=\"#24_Jython_302\">2.4 Jython</a></li><li><a href=\"#25_IronPython_306\">2.5 IronPython</a></li><li><a href=\"#26__310\">2.6 说明</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"0Python_2\"></a>0.Python是什么</h1>\n<p>Python语言创始人为吉多·范罗苏姆（Guido van Rossum）称龟叔（创始人肯定得知道的）。</p>\n<p>Python 是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本编程语言。</p>\n<ul><li> <p>Python是一种<font color=\"red\">解释型</font>语言：这意味着开发过程中没有了编译这个环节，而是在运行时通过解析器将源代码一行行解析成机器码；但是像C,C++等则是编译型语言，它们通过编译器将所有的源代码一次性编译成二进制指令，生成一个可执行的程序。解析型语言相对于编译型语言的好处就是<font color=\"Blue\">天然具有跨平台的特点，可移植性较好，只要有解释环境，就可在不同的操作系统上运行</font>（我们伟大的Python是能够运行在所有主要的操作系统中的哦！）</p> </li><li> <p>Python是一种<font color=\"red\">交互式</font>语言：这意味着我们人可以和它进行交互式编程哦（就像两个人面对面对话一般）</p> </li><li> <p>Python是<font color=\"red\">面向对象</font>语言：这意味着Python支持面向对象的风格或代码封装在对象的编程技术（面向对象也是像Python这类高级语言所普遍具有的一大特点哦）。</p> </li></ul>\n<h1><a id=\"1Python_14\"></a>1.Python开发环境配置</h1>\n<p>孤寒者为大家详细演示Windows和Linux流程，mac系统和Windows下操作类似哦~</p>\n<h2><a id=\"11_WindowsPython_18\"></a>1.1 Windows安装Python解释器</h2>\n<p>  真实在Windows上安装过Python的小伙伴会发现在 Windows 上安装Python真的和安装普通软件一样简单，我们只需要在官网下载个安装包，然后猛击“下一步”就可以了（真的秒~）！</p>\n<p>Python 安装包官网下载地址：<a href=\"https://www.python.org/downloads/\">https://www.python.org/downloads/</a></p>\n<p><strong>第一步：点击首页的Downloads，并在下拉框中选择Windows</strong></p>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\9d3f24fc614e4b0cad50be3e7851abea.png\"/></p>\n<p><strong>第二步：选择指定版本</strong></p>\n<p>  此处我选择的是最新版本，但是如果你因为项目对Python版本有特定要求的话，可以此界面下滑选择需要的版本下载！</p>\n<p>  需要插一嘴的是，为了防止你们下错而死在了安装上，简单对此界面一些前缀后缀进行说明（认真看看你下的是不是你想要的）：</p>\n<table><thead><tr><th>前后缀</th><th>含义</th></tr></thead><tbody><tr><td>64-bit</td><td>64位的Python安装程序（现在的电脑一般都是64bit的）</td></tr><tr><td>32-bit</td><td>32位的Python安装程序</td></tr><tr><td>Windows embeddable package</td><td>.zip格式的绿色免安装版本，可直接嵌入（集成）到其他的应用程序中</td></tr><tr><td>Windows installer</td><td>.exe格式的可执行程序，这是完整的离线安装包（就选这个，别想了！）</td></tr></tbody></table>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\f47fa4040e884573b3e786f45ed8266c.png\"/></p>\n<p><strong>第三步：下拉到最下面然后点击就在下载了哦</strong><br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\6612dbec6a46449da3dd659c1d733423.png\"/></p>\n<p><strong>第四步：双击下载的.exe文件就正式开始安装Python了</strong></p>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\f8821abe2a93498f9f1be5686baaf388.png\"/></p>\n<p>（<font color=\"Blue\">友情提示：</font>一定要勾选Add Python 3.10 to PATH，这样的话Python命令工具所在的目录就会自动添加到系统环境变量中，就不需要你手动添加python系统环境变量啦，在执行Python命令时也不需要指定完整路径了！）</p>\n<p>Python 支持两种安装方式，默认安装和自定义安装：</p>\n<ul><li>默认安装会勾选所有组件，并安装在 C 盘；</li><li>自定义安装可以手动选择要安装的组件，并可自定义其安装位置。（正经人肯定选这个，我也推荐选这个，不然你啥东西都安C盘里，电脑会变卡哦~而且大家以后不管安装啥都看一眼安装路径，建议自定义哦！）</li></ul>\n<p>①点击Customize installation进入下一步，选择要安装的组件，建议保持默认即可，也就是全部勾选；</p>\n<p>②点击“Next”，选择安装目录（这就是自定义Python的安装路径，自己找个盘放哦~）</p>\n<p>③最后点击“Install”，静候一会就安装好啦！</p>\n<p><strong>In the end：测试是否安装OK</strong></p>\n<p>“win+r”打开Windows的命令行程序，输入python命令，如果出现下图所示则证明安装OK哦！<br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\e8352f6482d54060b467e351f3260ba9.png\"/></p>\n<p>按下ctrl+z并输入回车，或者输入 exit() 命令即可退出交互式编程环境，回到 Windows 命令行程序。</p>\n<h2><a id=\"12_Windowspycharm_80\"></a>1.2 Windows安装pycharm开发工具</h2>\n<p>非常强烈推荐大家使用Pycharm工具进行python代码的编写和调试！</p>\n<p>官方下载链接：<a href=\"https://www.jetbrains.com/pycharm/download/\">https://www.jetbrains.com/pycharm/download/</a></p>\n<p>进入页面我们会发现pycharm有专业版和社区版两种，专业版需要购买才能使用（如果你是学生的话，可以进行学生认证也免费哦~）；所以我们就来使用社区版的（不要担心没用到专业版会导致啥付费功能没用到之类的，我说实在话日常的python开发社区版完全够用！）</p>\n<p>点击下图所指Download即可下载：</p>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\2c97ed9de8e84e6e9df92f1ead6c8ffb.png\"/><br/> 安装包下载完之后双击进行安装，一直Next即可，如果出现下图进行选择性勾选：<br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\c5eb0988edfc4789943d92135339cfdf.png\"/><br/> 安装完成后，双击运行我们的pycharm，下图是问我们用不用导入设置（第一次用肯定是没得）<br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\2b23252c3faf47f38e57eae1df10b690.png\"/><br/> 点击OK后我们选择打开一个新项目（New Project）：<br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\8f814d04254f40cba9707f600a63919c.png\"/>并为项目指定刚刚下载的Python解释器路径：<br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\d32a6c928a904c82afaa7a6e4212f576.png\"/>打开就发现可以使用了哦~<br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\f9f89c83dbb14dc5bb5f7fd94d362a9b.png\"/></p>\n<p><strong>小福利：很多人可能因为第一次用的话，都是英文不适应，所以下面就教大家如何汉化pycharm！</strong></p>\n<p>左上角File-&gt;settings：<br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\11477af3c9384f0ba8ed2fd5745aff00.png\"/><br/> 重启就OK啦！<br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\4cc32a46a36a489693866a23ffcb728f.png\"/></p>\n<h2><a id=\"13_LinuxPython_108\"></a>1.3 Linux系统中搭建Python开发环境</h2>\n<p>  在大多数Linux计算机中都是默认安装了Python。而且默认Python版本是2.x，比如你再Linux计算机中打开终端窗口输入python，会显示2.x版本；但其实一般也都自带的有python3，在终端窗口输入python3即可。</p>\n<p>  如果你想更换Linux默认Python版本为3.x版本，可参见本文：<a href=\"https://gu-han-zhe.blog.csdn.net/article/details/117432825\">《ubuntu-20.04-desktop-amd64.iso巧方法（起别名）设置python命令指向python3.8》</a></p>\n<p>如果你的Linux计算机不知道啥原因没有Python环境，那么下面教大家两种在Linux中安装Python的方法：</p>\n<p><strong>第一种方法：使用一个由第三方维护的PPA软件源deadsnakes 来安装所需要的Python版本</strong></p>\n<p><code>sudo add-apt-repository ppa:deadsnakes/ppa</code></p>\n<p><code>sudo apt-get update</code></p>\n<p><code>sudo apt-get install python3.7</code></p>\n<p>如果提示add-apt-repository命令不存在的话，安装 <code>software-properties-common</code> 这个软件包。</p>\n<p><strong>第二种方法：安装MiniAnaconda</strong><br/> 上<a href=\"https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/\">添加链接描述</a>查找合适的版本，我选择：</p>\n<pre><code class=\"prism language-powershell\">wget https:<span class=\"token operator\">/</span><span class=\"token operator\">/</span>mirrors<span class=\"token punctuation\">.</span>tuna<span class=\"token punctuation\">.</span>tsinghua<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>cn<span class=\"token operator\">/</span>anaconda<span class=\"token operator\">/</span>miniconda<span class=\"token operator\">/</span>Miniconda3<span class=\"token operator\">-</span> py37_4<span class=\"token punctuation\">.</span>9<span class=\"token punctuation\">.</span>2<span class=\"token operator\">-</span>Linux<span class=\"token operator\">-</span>x86_64<span class=\"token punctuation\">.</span>sh\n</code></pre>\n<p>几秒钟后下载完毕，开始安装：</p>\n<pre><code class=\"prism language-powershell\">sh Miniconda3<span class=\"token operator\">-</span>py37_4<span class=\"token punctuation\">.</span>9<span class=\"token punctuation\">.</span>2<span class=\"token operator\">-</span>Linux<span class=\"token operator\">-</span>x86_64<span class=\"token punctuation\">.</span>sh\n</code></pre>\n<p>安装的提示过程中，所有需要输入yes或no的，我都输入yes，其他的直接回车用默认：</p>\n<p><img src=\"..\\..\\static\\image\\df83bb3e4ae2430e8ddf0a6bb567762c.png\" width=\"70%\"/><img src=\"..\\..\\static\\image\\00e2f50170f747179ec9506a99be776a.png\" width=\"70%\"/><br/> 上面是安装过程中的一些关键信息，次要信息已经省略。可以看到最终会提示，安装会在重启shell后生<br/> 效并自动激活miniconda，如果我们不希望自动激活可以在重启后执行：</p>\n<pre><code class=\"prism language-powershell\">conda config <span class=\"token operator\">--</span><span class=\"token function\">set</span> auto_activate_base false \n</code></pre>\n<p>手动激活只需要输入 conda activate 命令即可：</p>\n<pre><code class=\"prism language-powershell\">Last login: Sat Jan 23 19:37:05 2021 <span class=\"token keyword\">from</span> 113<span class=\"token punctuation\">.</span>90<span class=\"token punctuation\">.</span>235<span class=\"token punctuation\">.</span>123 Welcome to Alibaba Cloud Elastic Compute Service <span class=\"token operator\">!</span> \n<span class=\"token namespace\">[root@iZwz986uvm9yvhm7184f84Z ~]</span><span class=\"token comment\"># conda activate (base) </span>\n<span class=\"token namespace\">[root@iZwz986uvm9yvhm7184f84Z ~]</span><span class=\"token comment\">#</span>\n</code></pre>\n<p>到这就OK了！</p>\n<p><strong>第三种方法：通过安装包安装</strong>（不建议用，比较老旧的方法了。用第一种和第二种方法不香么！）</p>\n<p><strong>1. 安装依赖环境</strong></p>\n<p><code>yum install -y make gcc</code></p>\n<p><code>yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel</code></p>\n<p>python安装之前需要一些必要的模块，如openssl,readline等。</p>\n<p>  如果没有这些模块后来使用会出现一些问题，比如没有openssl则不支持ssl相关的功能，并且pip3在安装模块的时候会直接报错；没有readline则python交互式界面删除键和方向键都无法正常使用，至于需要什么模块在make完之后python会给出提示，通过提示进行安装即可装全，下面是需要提前预装的依赖：</p>\n<p><code>yum -y install zlib zlib-devel</code></p>\n<p><code>yum -y install bzip2 bzip2-devel</code></p>\n<p><code>yum -y install ncurses ncurses-devel</code></p>\n<p><code>yum -y install readline readline-devel</code></p>\n<p><code>yum -y install openssl openssl-devel</code></p>\n<p><code>yum -y install openssl-static</code></p>\n<p><code>yum -y install xz lzma xz-devel</code></p>\n<p><code>yum -y install sqlite sqlite-devel</code></p>\n<p><code>yum -y install gdbm gdbm-devel</code></p>\n<p><code>yum -y install tk tk-devel</code></p>\n<p><code>yum -y install libffi libffi-devel</code></p>\n<p><strong>2. 下载Python3安装包</strong></p>\n<p><code>wget https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz</code></p>\n<p>可以在 <a href=\"https://www.python.org/ftp/python/\">https://www.python.org/ftp/python/</a>选择要安装的版本</p>\n<p><strong>3. 解压安装包</strong></p>\n<p><code>tar -zxvf Python-3.7.4.tgz</code></p>\n<p>或</p>\n<p><code>tar -xvJf Python-3.7.4.tar.xz</code></p>\n<p><strong>4. 进入解压后的目录，编译安装</strong>（编译安装前需要安装编译器 <strong>yum</strong> <strong>install</strong> <strong>gcc</strong>）个人习惯安装在**/usr/local/python3**（具体安装位置看个人喜好）</p>\n<p><code>cd Python-3.7.4</code></p>\n<p><code>mkdir -p /usr/local/python3</code></p>\n<p><code>./configure --prefix=/usr/local/python3</code></p>\n<p>执行完configure命令后，会生成一个 Makefile 文件，这个 Makefile主要是被下一步的 make 命令所使用（ Linux 需要按照Makefile 所指定的顺序来构建 (build) 程序组件）。</p>\n<p><code>make&amp;make install</code></p>\n<p>&amp;表示同时执行2步， make实际就是编译源代码，并生成执行文件。make install实际上是把生成的执行文件拷贝到之前configure命令指定的目录/usr/local/python3下。</p>\n<p><u>到这里安装已经结束，下面是配置环境：</u></p>\n<p><strong>1. 建立python3的软链接</strong></p>\n<p><code>ln -s /usr/local/python3/bin/python3 /usr/bin/python3</code></p>\n<p><code>ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3</code></p>\n<p><strong>2. 检查 Python3 是否正常可用：</strong></p>\n<p><code>python3 -V</code></p>\n<p><strong>3. 额外配置：</strong></p>\n<p><code>./configure --prefix=/usr/local/python3 --enable-shared CFLAGS=-fPIC</code></p>\n<p>  加上–enable-shared和-fPIC，可以将python3的动态链接库编译出来，默认情况编译完lib下面只有python3.xm.a这样的文件，</p>\n<p>python本身可以正常使用，但是如果编译第三方库需要python接口的比如caffe等，则会报错；所以这里建议按照以下方式配置，另外如果openssl不使用系统yum安装的，而是使用自己编译的比较新的版本可以使用–with-openssl=/usr/local/openssl这种方式指定，后面目录为openssl实际安装的目录，另外编译完还要将openssl的lib目录加入ld运行时目录中即可。</p>\n<p><strong>4.Linux环境变量配置</strong></p>\n<p><strong>将xxx加入PATH</strong></p>\n<p><code>vim /etc/profile</code></p>\n<p>然后在文件末尾添加</p>\n<p><code>export PATH=$PATH:xxx</code></p>\n<p>按ESC，输入:wq回车退出。</p>\n<p>修改完后，还需要让这个环境变量在配置信息中生效，执行命令：</p>\n<p><code>source /etc/profile</code></p>\n<p>可以让profile文件立即生效。</p>\n<p>或修改用户环境变量</p>\n<p><code>**vi ~/.bashrc**</code></p>\n<h1><a id=\"2_Python_276\"></a>2. 各种Python解释器</h1>\n<p>  认识一下各种各样的Python解释器，在适当的场景使用适当的解释器，可以起到事半功倍的效果哦~</p>\n<p>  当我们编写Python代码时，我们得到的是一个包含Python代码的以.py为扩展名的文本文件。要运行代码，就需要Python解释器去执行.py文件。</p>\n<p>  由于整个Python语言从规范到解释器都是开源的，所以理论上，只要水平够高，任何人都可以编写Python解释器来执行Python代码（当然难度很大）。事实上，确实存在多种Python解释器。</p>\n<h2><a id=\"21_CPython_284\"></a>2.1 CPython</h2>\n<p>  一个官方版本的解释器：CPython。这个解释器是用C语言开发的，所以叫CPython。在命令行下运行python就是启动CPython解释器。</p>\n<p>【CPython是使用最广的Python解释器】</p>\n<h2><a id=\"22_IPython_290\"></a>2.2 IPython</h2>\n<p>  IPython是基于CPython之上的一个交互式解释器，也就是说，IPython只是在交互方式上有所增强，但是执行Python代码的功能和CPython是完全一样的。好比很多国产浏览器虽然外观不同，但内核其实都是调用了IE。</p>\n<p>【CPython用&gt;&gt;&gt;作为提示符，而IPython用In [序号]:作为提示符】</p>\n<h2><a id=\"23_PyPy_296\"></a>2.3 PyPy</h2>\n<p>  PyPy是另一个Python解释器，它的目标是执行速度。PyPy采用JIT技术，对Python代码进行动态编译（注意不是解释），所以可以显著提高Python代码的执行速度。</p>\n<p>  绝大部分Python代码都可以在PyPy下运行，但是PyPy和CPython有一些是不同的，这就导致相同的Python代码在两种解释器下执行可能会有不同的结果。如果你的代码要放到PyPy下执行，就需要了解PyPy和CPython的不同点。</p>\n<h2><a id=\"24_Jython_302\"></a>2.4 Jython</h2>\n<p>  Jython是运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行。</p>\n<h2><a id=\"25_IronPython_306\"></a>2.5 IronPython</h2>\n<p>  IronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。</p>\n<h2><a id=\"26__310\"></a>2.6 说明</h2>\n<p>  Python的解释器很多，但使用最广泛的还是CPython。如果要和Java或.Net平台交互，最好的办法不是用Jython或IronPython，而是通过网络调用来交互，确保各程序之间的独立性。</p>\n<hr/>\n<blockquote>\n<p>  有句话说的很好——一个人可以走的很快，一群人才能走的更远。这句话适用于任何地方，我也强烈建议大家在学习Python的时候和更多的小伙伴们报团一起学习！大家时不时的互相分享一下自己的小创作/请教一些自己琢磨不明白的小bug/或者一起聊聊每天的所得所感所悟…用正向激励促使自己持续学习，就好像你打游戏连胜了会一直玩下去一样。<br/>   在编程这个行业最忌讳的就是闭门造车，所以本博主组建的有群聊，想要认真学Python的可以加微：QQis1915344876，和群友们一起交流学习~</p>\n</blockquote>\n<p> </p>\n<p><span id=\"jump99\"></span></p>\n<center>\n  👇🏻可通过点击下面——&gt;关注本人运营\n <strong>公众号</strong>👇🏻\n</center>\n<p></p>\n<center>\n<font size=\"1\">【这里也有加入我们Python大家庭的方式哦---&gt;互相学习&amp;&amp;共同进步（非诚勿扰）】</font>\n</center>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 1, "csharp": 0, "python": 1, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-02-11 22:49:29", "summary": "目录：是什么开发环境配置安装解释器安装开发工具系统中搭建开发环境各种解释器说明是什么语言创始人为吉多范罗苏姆称龟叔创始人肯定得知道的。是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本编程语言"}