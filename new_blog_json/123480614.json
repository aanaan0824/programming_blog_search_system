{"blogid": "123480614", "writerAge": "码龄2年", "writerBlogNum": "5", "writerCollect": "22", "writerComment": "0", "writerFan": "5", "writerGrade": "1级", "writerIntegral": "62", "writerName": "Miracle sir", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123480614.jpg", "writerRankTotal": "181053", "writerRankWeekly": "403334", "writerThumb": "9", "writerVisitNum": "10265", "blog_read_count": "5693", "blog_time": "已于 2022-03-14 17:20:42 修改", "blog_title": "Vue父子组件传值", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>提示：文章写完后，目录可以自动生成，如何生成可参考右边的帮助文档</p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_7\">前言</a></li><li><a href=\"#Vue_14\">一、Vue父子传值的方法</a></li><li><a href=\"#_21\">二、方法详解</a></li><li><ul><li><a href=\"#1props__emit_22\">1.props / $emit</a></li><li><a href=\"#2parent__children_127\">2.$parent / children</a></li><li><a href=\"#3ref_151\">3.$ref</a></li></ul>\n</li><li><a href=\"#_174\">总结</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_7\"></a>前言</h1>\n<p>例如：Vue的学习是路阻且艰的，这是一个系列文章，帮助vue的新手可以快速上路，创建的自己的项目，该系列文章主要讲解作者在vue学习之路上，创建项目中最重要的知识，因为笔者水平有限，希望大家多多指正，该系列文章旨在让大家感受vue的便捷，详细学习vue希望大家多多观看官方文档.</p>\n<hr/>\n<h1><a id=\"Vue_14\"></a>一、Vue父子传值的方法</h1>\n<p>我们在Vue项目进行父子传值主要有以下三种方法：<br/> (1) props / $emit<br/> (2) $parent / children<br/> (3) $ref<br/> 在观看方法详解时大家先创建一个父组件parent.vue和一个子组件child.vue并完成父子组件的注册</p>\n<h1><a id=\"_21\"></a>二、方法详解</h1>\n<h2><a id=\"1props__emit_22\"></a>1.props / $emit</h2>\n<p><strong><strong>⼦组件中通过定义props接收⽗组件中通过v-bind绑定的数据</strong></strong></p>\n<p><em><strong>父传子</strong></em></p>\n<p>首先在父组件中定义一个示例data</p>\n<pre><code class=\"prism language-c\">import child from <span class=\"token string\">'./child.vue'</span> \n    export <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n        name<span class=\"token punctuation\">:</span><span class=\"token string\">'parent'</span><span class=\"token punctuation\">,</span>\n        components<span class=\"token punctuation\">:</span><span class=\"token punctuation\">{<!-- --></span>\n            child\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">{<!-- --></span>\n                parentdata<span class=\"token punctuation\">:</span><span class=\"token string\">\"This is the first word from parent\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在父组件中使用子组件时用v-bind定义一个属性并将父组件的parentdata传入</p>\n<pre><code class=\"prism language-c\"><span class=\"token operator\">&lt;</span>child <span class=\"token punctuation\">:</span>parentdata<span class=\"token operator\">=</span><span class=\"token string\">\"parentdata\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>child<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>在子组件中使用props接收传入的属性，并可以直接使用</p>\n<pre><code class=\"prism language-c\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span>parentdata<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n    export <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n        name<span class=\"token punctuation\">:</span><span class=\"token string\">\"child\"</span><span class=\"token punctuation\">,</span>\n        props<span class=\"token punctuation\">:</span><span class=\"token punctuation\">{<!-- --></span>\n            parentdata<span class=\"token punctuation\">:</span><span class=\"token punctuation\">{<!-- --></span>\n                type<span class=\"token punctuation\">:</span>String<span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>观看结果：<br/> <img alt=\"父组件传入子组件的值就被显示出来了\" src=\"..\\..\\static\\image\\9508fcdfbbf843f09ac0da7174ae78de.png\"/>父组件传入子组件的值就被显示出来了</p>\n<p><em><strong>子传父</strong></em></p>\n<p>首先在子组件中定义一个事件，并且使用emit发送给父组件，在示例中子组件使用的click事件触发发送自定义事件(sendmsg)</p>\n<pre><code class=\"prism language-c\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"childmsg\"</span><span class=\"token operator\">&gt;</span>点我试试<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n    export <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n        name<span class=\"token punctuation\">:</span><span class=\"token string\">\"child\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">{<!-- --></span>\n                msg<span class=\"token punctuation\">:</span><span class=\"token string\">\"This is the first word from child\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        methods<span class=\"token punctuation\">:</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">childmsg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                this<span class=\"token punctuation\">.</span>$<span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sendmsg'</span><span class=\"token punctuation\">,</span>this<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><em><strong>emit使用方法</strong></em><br/> this.$emit(‘自定义事件名’,所需要传的值)</p>\n<p>在父组件中需要定义方法(getmsg)接受自定义事件(sendmsg)：</p>\n<pre><code class=\"prism language-c\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>child <span class=\"token punctuation\">:</span>parentdata<span class=\"token operator\">=</span><span class=\"token string\">\"parentdata\"</span> @sendmsg<span class=\"token operator\">=</span><span class=\"token string\">\"getmsg\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>child<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n    import child from <span class=\"token string\">'./child.vue'</span> \n    export <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n        name<span class=\"token punctuation\">:</span><span class=\"token string\">'parent'</span><span class=\"token punctuation\">,</span>\n        components<span class=\"token punctuation\">:</span><span class=\"token punctuation\">{<!-- --></span>\n            child\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        methods<span class=\"token punctuation\">:</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">getmsg</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>在定义方法时直接在函数中设置形参接受子组件传入的值（getmsg(val)）<br/> 在控制台就可以看见打印结果This is the first word from child</p>\n<h2><a id=\"2parent__children_127\"></a>2.$parent / children</h2>\n<p>在使用这个方法时，大家可以先在父组件中打印出来$children,帮助大家理解<br/> 代码如下</p>\n<pre><code class=\"prism language-c\"><span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">.</span>$children<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>可以看到，子组件被打印出来了</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\04704a7c7ea449efad4c4b37006f89bb.png\"/><br/> 只要找到组件对象对应的属性，就可使用</p>\n<pre><code class=\"prism language-c\"><span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">.</span>$children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>可以看到结果<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8ee8aa93dd9e4dc88fd06061c9fbabdb.png\"/><br/> <strong>注意，这种方法不仅可以调用数据，也可以使用子组件的方法！（但不可以直接调用，这个接下来的文章再说）</strong></p>\n<p><em><strong>如果是子组件使用父组件的数据，可以同样的流程</strong></em></p>\n<h2><a id=\"3ref_151\"></a>3.$ref</h2>\n<p>ref可以让父组件更加便利地取到想要的子组件，其中原理和第二种方法相同，都是取到组件对象</p>\n<p><em>在父组件中定义ref</em></p>\n<pre><code class=\"prism language-c\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>child ref<span class=\"token operator\">=</span><span class=\"token string\">\"childselected\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>child<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><em>在父组件中取值：</em></p>\n<pre><code class=\"prism language-c\"><span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>childselected<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>可以看到相同的结果：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fe4d591703504fb2ba16eb7950f8b5a5.png\"/></p>\n<hr/>\n<h1><a id=\"_174\"></a>总结</h1>\n<p>***本篇主要讲解了Vue项目中父子组件传值的三种方法：<br/> <em><strong>props/$emit<br/> 子组件通过v-bind接收父组件的值<br/> 父组件通过接收emit发送的事件接收子组件的值<br/> $parent/children<br/> 直接获取组件对象来取值<br/> $ref<br/> 定义属性名获取组件对象值</strong></em></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-14 17:20:42", "summary": "提示：文章写完后，目录可以自动生成，如何生成可参考右边的帮助文档文章目录前言一、父子传值的方法二、方法详解总结前言例如：的学习是路阻且艰的，这是一个系列文章，帮助的新手可以快速上路，创建的自己的项目，"}