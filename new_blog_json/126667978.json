{"blogid": "126667978", "writerAge": "码龄9年", "writerBlogNum": "78", "writerCollect": "102", "writerComment": "29", "writerFan": "13", "writerGrade": "4级", "writerIntegral": "1175", "writerName": "aaaak_", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126667978.jpg", "writerRankTotal": "17192", "writerRankWeekly": "13059", "writerThumb": "38", "writerVisitNum": "60308", "blog_read_count": "320", "blog_time": "于 2022-09-02 17:43:51 发布", "blog_title": "数仓架构演进", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_10_20_0\"></a>数仓 1.0 ,2.0</h2>\n<p>1.Lambda架构</p>\n<p>Lambda将数据处理流分为在线分析和离线分析两条不同的处理路径，两条路径互相独立，互不影响。</p>\n<blockquote>\n<p>离线分析处理T+1数据，使用Hive/Spark处理大数据量，不可变数据，数据一般存储在HDFS等系统上。如果遇到数据更新，需要overwrite整张表或整个分区，成本比较高。</p>\n</blockquote>\n<blockquote>\n<p>在线分析处理实时数据，使用Flink/Spark Streaming处理流式数据，分析处理秒级或分钟级流式数据，数据保存在Kafka或定期（分钟级）保存到HDFS中。​</p>\n</blockquote>\n<p>该套方案存在以下缺点：</p>\n<p><strong>同一套指标可能需要开发两份代码来进行在线分析和离线分析，维护复杂。<br/> 数据应用查询指标时可能需要同时查询离线数据和在线数据，开发复杂。<br/> 同时部署批处理和流式计算两套引擎，运维复杂。<br/> 数据更新需要overwrite整张表或分区，成本高。</strong></p>\n<p>2.Kappa架构</p>\n<p>随着在线分析业务越来越多，Lambda架构的弊端就越来越明显，增加一个指标需要在线离线分别开发，维护困难，离线指标可能和在线指标对不齐，部署复杂，组件繁多。于是Kappa架构应运而生。</p>\n<blockquote>\n<p>Kappa架构使用一套架构处理在线数据和离线数据，使用同一套引擎同时处理在线和离线数据，数据存储在消息队列上。</p>\n</blockquote>\n<p>Kappa架构也有一定的局限：</p>\n<p><strong>流式计算引擎批处理能力较弱，处理大数据量性能较弱。<br/> 数据存储使用消息队列，消息队列对数据存储有有效性限制，历史数据无法回溯。<br/> 数据时序可能乱序，可能对部分在时序要求方面比较严格的应用造成数据错误。<br/> 数据应用需要从消息队列中取数，需要开发适配接口，开发复杂。</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c9cad798ac3e44718b998debbcaee2c3.png\"/></p>\n<h3><a id=\"_33\"></a>离线处理</h3>\n<p>典型应用如数据清理，特点是处理数据量大，耗时长。</p>\n<p>核心组件选择为：</p>\n<p><code>MapReduce + Hive，或者Spark + Spark SQL。</code></p>\n<p>数据流动为：</p>\n<p><code>流式数据/文件/数据库 -&gt; flume/第三方ETL -&gt; HDFS -&gt; Yarn -&gt; Spark -&gt; Spark SQL -&gt; 数据仓库；</code></p>\n<p>或者</p>\n<p><code>流式数据/文件/数据库 -&gt; flume/第三方ETL -&gt; HDFS-&gt; Yarn -&gt; MapReduce -&gt; Hive -&gt; 数据仓库 （较老）</code></p>\n<h3><a id=\"_50\"></a>实时流处理</h3>\n<p>典型应用如银行实时风控，特点是响应要求实时，数据不落盘（硬盘）。</p>\n<p>核心组件选择：</p>\n<p><code>Flink，或者Spark Streaming。 某些情况需要缓存数据时使用Kafka组件，处理完结果可以放在redis（内存数据库）中暂时存储，供上层应用使用。</code></p>\n<p>数据流动为：</p>\n<p><code>实时流/实时文件/数据库 -&gt; flume/第三方ETL -&gt; Kafka -&gt; Flink/Spark Streaming -&gt; redis/Kafka -&gt; 实时应用</code></p>\n<p>注意，这里不会使用HDFS，因为数据不落盘。</p>\n<h3><a id=\"_63\"></a>实时检索</h3>\n<p>典型应用如查询一个人的购买记录，特点是响应基本实时（1s）,但是不支持负责查询。</p>\n<p>核心组件选择：</p>\n<p><code>ES/Hbase/Solr。</code></p>\n<p>数据流动为：</p>\n<p><code>流式数据/文件/数据库 -&gt; flume/第三方ETL -&gt; HDFS -&gt; Yarn -&gt; ES/Hbase/Solr -&gt; 检索。</code></p>\n<p><img alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-WSZq1yYe-1662111756805)(/images/1/293/2.png)]\" src=\"..\\..\\static\\image\\e0c2031c49c14227b9bcaf389ff5d739.png\"/></p>\n<h2><a id=\"30_79\"></a>数仓3.0</h2>\n<p>计算引擎做到了批流一体的统一，就可以做到SQL统一</p>\n<p>1 基于数据湖的实时数仓</p>\n<blockquote>\n<p>针对Lambda架构和Kappa架构的缺陷，业界基于数据湖开发了Iceberg, Hudi, DeltaLake这些数据湖技术，使得数仓支持ACID, Update/Delete，数据Time Travel, Schema Evolution等特性，使得数仓的时效性从小时级提升到分钟级，数据更新也支持部分更新，大大提高了数据更新的性能。兼具流式计算的实时性和批计算的吞吐量，支持的是近实时的场景。</p>\n</blockquote>\n<p>以上方案中其中基于数据湖的应用最广，但数据湖模式无法支撑更高的秒级实时性，也无法直接对外提供数据服务，需要搭建其他的数据服务组件，系统较为复杂。基于此背景下，部分业务开始使用Doris来承接，业务数据分析师需要对Doris与数据湖中的数据进行联邦分析。</p>\n<p><code>实时流/实时文件/数据库 -&gt; Flink/Spark Streaming -&gt; cdc -&gt; Hudi/Iceberg -&gt; Doris/ClickHouse/StarRocks/Presto/Apache Kylin</code></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\db001a6d427d46bebb020d6f18290cef.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 0, "time": "2022-09-02 17:43:51", "summary": "数仓架构将数据处理流分为在线分析和离线分析两条不同的处理路径，两条路径互相独立，互不影响。离线分析处理数据，使用处理大数据量，不可变数据，数据一般存储在等系统上。如果遇到数据更新，需要整张表或整个分区"}