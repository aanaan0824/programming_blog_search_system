{"blogid": "124590939", "writerAge": "码龄2年", "writerBlogNum": "35", "writerCollect": "441", "writerComment": "130", "writerFan": "128", "writerGrade": "3级", "writerIntegral": "535", "writerName": "June vinvin", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124590939.jpg", "writerRankTotal": "28921", "writerRankWeekly": "11293", "writerThumb": "70", "writerVisitNum": "42493", "blog_read_count": "6582", "blog_time": "已于 2022-05-07 13:19:19 修改", "blog_title": "YOLOv5-6.1添加注意力机制（SE、CBAM、ECA、CA）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#0__1\">0. 添加方法</a></li><li><a href=\"#1_SE_9\">1. SE</a></li><li><ul><li><a href=\"#11_SE_14\">1.1 SE</a></li><li><a href=\"#12_C3SE_49\">1.2 C3-SE</a></li></ul>\n</li><li><a href=\"#2_CBAM_95\">2. CBAM</a></li><li><ul><li><a href=\"#21_CBAM_99\">2.1 CBAM</a></li><li><a href=\"#22_C3CBAM_153\">2.2 C3-CBAM</a></li></ul>\n</li><li><a href=\"#3_ECA_183\">3. ECA</a></li><li><ul><li><a href=\"#31_ECA_187\">3.1 ECA</a></li><li><a href=\"#32_C3ECA_219\">3.2 C3-ECA</a></li></ul>\n</li><li><a href=\"#4_CA_253\">4. CA</a></li><li><ul><li><a href=\"#41_CA_257\">4.1 CA</a></li><li><a href=\"#42_C3CA_310\">4.2 C3-CA</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"0__1\"></a>0. 添加方法</h1>\n<p>主要步骤：<br/> （1）在<code>models/common.py</code>中注册注意力模块<br/> （2）在<code>models/yolo.py</code>中的<code>parse_model</code>函数中添加注意力模块<br/> （3）修改配置文件<code>yolov5s.yaml</code><br/> （4）运行<code>yolo.py</code>进行验证<br/> 各个注意力机制模块的添加方法类似，各注意力模块的修改参照SE。<br/> 本文添加注意力完整代码：<a href=\"https://github.com/double-vin/yolov5_attention\">https://github.com/double-vin/yolov5_attention</a></p>\n<h1><a id=\"1_SE_9\"></a>1. SE</h1>\n<p><a href=\"https://arxiv.org/pdf/1709.01507.pdf\">Squeeze-and-Excitation Networks</a><br/> <a href=\"https://github.com/hujie-frank/SENet\">https://github.com/hujie-frank/SENet</a><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\acd73415fecd4e5b91397be7e550d808.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ae3b81b8aa334ca581642395db207d22.png\"/></p>\n<h2><a id=\"11_SE_14\"></a>1.1 SE</h2>\n<ol><li>在<code>models/common.py</code>中注册SE模块</li></ol>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SE</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">,</span> ratio<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>SE<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#c*1*1</span>\n        self<span class=\"token punctuation\">.</span>avgpool <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>AdaptiveAvgPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>l1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">,</span> c1 <span class=\"token operator\">//</span> ratio<span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>l2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span>c1 <span class=\"token operator\">//</span> ratio<span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>sig <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sigmoid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>avgpool<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>l1<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>l2<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>sig<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">.</span>expand_as<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n</code></pre>\n<ol start=\"2\"><li>在<code>models/yolo.py</code>中的<code>parse_model</code>函数中添加SE模块<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\aaf46ec051e844208331e3e0cb85556f.png\"/></li><li>修改配置文件<code>yolov5s.yaml</code>。<br/> 添加注意力的两种方法：一是在backbone的最后一层添加注意力；二是将backbone中的C3全部替换。<br/> 这里使用第一种，第二种见下文中的<code>C3SE</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\96096c456cbe49fd9307fd204d4e4381.png\"/><br/> <strong>注意</strong>：SE添加至第9层，第9层之后所有的编号都要+1，则：<br/> 1&gt;<code>两个Concat</code>的from系数分别由[-1, 14]，[-1, 10]改为[-1, 15]，[-1, 11]<br/> 2&gt;<code>Detect</code>的from系数由[17, 20, 23]改为[18,21,24]<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\38d886ce99b74d5cb2b935c8497bc0ea.png\"/></li><li>验证：运行<code>yolo.py</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6c72770636274eb49206c3daaec2888c.png\"/></li></ol>\n<h2><a id=\"12_C3SE_49\"></a>1.2 C3-SE</h2>\n<ol><li>在<code>models/common.py</code>中注册C3SE模块：</li></ol>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SEBottleneck</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Standard bottleneck</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">,</span> shortcut<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> g<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> e<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> ratio<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># ch_in, ch_out, shortcut, groups, expansion</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        c_ <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>c2 <span class=\"token operator\">*</span> e<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># hidden channels</span>\n        self<span class=\"token punctuation\">.</span>cv1 <span class=\"token operator\">=</span> Conv<span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">,</span> c_<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>cv2 <span class=\"token operator\">=</span> Conv<span class=\"token punctuation\">(</span>c_<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> g<span class=\"token operator\">=</span>g<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>add <span class=\"token operator\">=</span> shortcut <span class=\"token keyword\">and</span> c1 <span class=\"token operator\">==</span> c2\n        <span class=\"token comment\"># self.se=SE(c1,c2,ratio)</span>\n        self<span class=\"token punctuation\">.</span>avgpool <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>AdaptiveAvgPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>l1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">,</span> c1 <span class=\"token operator\">//</span> ratio<span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>l2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span>c1 <span class=\"token operator\">//</span> ratio<span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>sig <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sigmoid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x1 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>cv2<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>cv1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>avgpool<span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>l1<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>l2<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>sig<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        out <span class=\"token operator\">=</span> x1 <span class=\"token operator\">*</span> y<span class=\"token punctuation\">.</span>expand_as<span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># out=self.se(x1)*x1</span>\n        <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> out <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>add <span class=\"token keyword\">else</span> out\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C3SE</span><span class=\"token punctuation\">(</span>C3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># C3 module with SEBottleneck()</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">,</span> n<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> shortcut<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> g<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> e<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> shortcut<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n        c_ <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>c2 <span class=\"token operator\">*</span> e<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># hidden channels</span>\n        self<span class=\"token punctuation\">.</span>m <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>SEBottleneck<span class=\"token punctuation\">(</span>c_<span class=\"token punctuation\">,</span> c_<span class=\"token punctuation\">,</span> shortcut<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ol start=\"2\"><li>在<code>models/yolo.py</code>中的<code>parse_model</code>函数中添加C3SE模块<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8964399cb2154fbfa390928c6957dddf.png\"/></li><li>修改配置文件<code>yolov5s.yaml</code>。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a3d3672bd907438db86535789ebd3ea1.png\"/></li><li>验证：运行<code>yolo.py</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1560fc6f595c448ca522b9e7ad4d93db.png\"/></li></ol>\n<h1><a id=\"2_CBAM_95\"></a>2. CBAM</h1>\n<p><a href=\"https://arxiv.org/pdf/1807.06521.pdf\">《CBAM: Convolutional Block Attention Module》</a><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\48abd9ba9f714cab903cfa729785de6c.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\db51c2d316fa4bc4965981b2921a0ea1.png\"/></p>\n<h2><a id=\"21_CBAM_99\"></a>2.1 CBAM</h2>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ChannelAttention</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> in_planes<span class=\"token punctuation\">,</span> ratio<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>ChannelAttention<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>avg_pool <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>AdaptiveAvgPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>max_pool <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>AdaptiveMaxPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>f1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>in_planes<span class=\"token punctuation\">,</span> in_planes <span class=\"token operator\">//</span> ratio<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>f2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>in_planes <span class=\"token operator\">//</span> ratio<span class=\"token punctuation\">,</span> in_planes<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>sigmoid <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sigmoid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        avg_out <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>f2<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>f1<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>avg_pool<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        max_out <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>f2<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>f1<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>max_pool<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        out <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>sigmoid<span class=\"token punctuation\">(</span>avg_out <span class=\"token operator\">+</span> max_out<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> out\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SpatialAttention</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>SpatialAttention<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">assert</span> kernel_size <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'kernel size must be 3 or 7'</span>\n        padding <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token keyword\">if</span> kernel_size <span class=\"token operator\">==</span> <span class=\"token number\">7</span> <span class=\"token keyword\">else</span> <span class=\"token number\">1</span>\n        <span class=\"token comment\"># (特征图的大小-算子的size+2*padding)/步长+1</span>\n        self<span class=\"token punctuation\">.</span>conv <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span>padding<span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>sigmoid <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sigmoid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 1*h*w</span>\n        avg_out <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> dim<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> keepdim<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        max_out<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> dim<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> keepdim<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>avg_out<span class=\"token punctuation\">,</span> max_out<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dim<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#2*h*w</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#1*h*w</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>sigmoid<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CBAM</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># CSP Bottleneck with 3 convolutions</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">,</span> ratio<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># ch_in, ch_out, number, shortcut, groups, expansion</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>CBAM<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>channel_attention <span class=\"token operator\">=</span> ChannelAttention<span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">,</span> ratio<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>spatial_attention <span class=\"token operator\">=</span> SpatialAttention<span class=\"token punctuation\">(</span>kernel_size<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        out <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>channel_attention<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> x\n        <span class=\"token comment\"># c*h*w</span>\n        <span class=\"token comment\"># c*h*w * 1*h*w</span>\n        out <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>spatial_attention<span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> out\n        <span class=\"token keyword\">return</span> out\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b16c43a6334048ab93af4060d6f6fed9.png\"/></p>\n<h2><a id=\"22_C3CBAM_153\"></a>2.2 C3-CBAM</h2>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CBAMBottleneck</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Standard bottleneck</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">,</span> shortcut<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> g<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> e<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>ratio<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># ch_in, ch_out, shortcut, groups, expansion</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>CBAMBottleneck<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        c_ <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>c2 <span class=\"token operator\">*</span> e<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># hidden channels</span>\n        self<span class=\"token punctuation\">.</span>cv1 <span class=\"token operator\">=</span> Conv<span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">,</span> c_<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>cv2 <span class=\"token operator\">=</span> Conv<span class=\"token punctuation\">(</span>c_<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> g<span class=\"token operator\">=</span>g<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>add <span class=\"token operator\">=</span> shortcut <span class=\"token keyword\">and</span> c1 <span class=\"token operator\">==</span> c2\n        self<span class=\"token punctuation\">.</span>channel_attention <span class=\"token operator\">=</span> ChannelAttention<span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">,</span> ratio<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>spatial_attention <span class=\"token operator\">=</span> SpatialAttention<span class=\"token punctuation\">(</span>kernel_size<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#self.cbam=CBAM(c1,c2,ratio,kernel_size)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x1 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>cv2<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>cv1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        out <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>channel_attention<span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> x1\n        <span class=\"token comment\"># print('outchannels:{}'.format(out.shape))</span>\n        out <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>spatial_attention<span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> out\n        <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> out <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>add <span class=\"token keyword\">else</span> out\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C3CBAM</span><span class=\"token punctuation\">(</span>C3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># C3 module with CBAMBottleneck()</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">,</span> n<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> shortcut<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> g<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> e<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> shortcut<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n        c_ <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>c2 <span class=\"token operator\">*</span> e<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># hidden channels</span>\n        self<span class=\"token punctuation\">.</span>m <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>CBAMBottleneck<span class=\"token punctuation\">(</span>c_<span class=\"token punctuation\">,</span> c_<span class=\"token punctuation\">,</span> shortcut<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\978adb5d95c5457e8d0030aeb73a1ee7.png\"/></p>\n<h1><a id=\"3_ECA_183\"></a>3. ECA</h1>\n<p><a href=\"https://arxiv.org/abs/1910.03151\">《ECA-Net: Efficient Channel Attention for Deep Convolutional Neural Networks》</a><br/> <a href=\"https://github.com/BangguWu/ECANet\">https://github.com/BangguWu/ECANet</a><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5593eb3ff0f5443aa2433f949190c05a.png\"/></p>\n<h2><a id=\"31_ECA_187\"></a>3.1 ECA</h2>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ECA</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Constructs a ECA module.\n    Args:\n        channel: Number of channels of the input feature map\n        k_size: Adaptive selection of kernel size\n    \"\"\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">,</span> k_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>ECA<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>avg_pool <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>AdaptiveAvgPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv1d<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span>k_size<span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>k_size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>sigmoid <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sigmoid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># feature descriptor on the global spatial information</span>\n        y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>avg_pool<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># print(y.shape,y.squeeze(-1).shape,y.squeeze(-1).transpose(-1, -2).shape)</span>\n        <span class=\"token comment\"># Two different branches of ECA module</span>\n        <span class=\"token comment\"># 50*C*1*1</span>\n        <span class=\"token comment\"># 50*C*1</span>\n        <span class=\"token comment\"># 50*1*C</span>\n        y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>unsqueeze<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Multi-scale information fusion</span>\n        y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>sigmoid<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">.</span>expand_as<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\900ac1ad8c684da189c09d9429b142bd.png\"/></p>\n<h2><a id=\"32_C3ECA_219\"></a>3.2 C3-ECA</h2>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ECABottleneck</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Standard bottleneck</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">,</span> shortcut<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> g<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> e<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> ratio<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> k_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># ch_in, ch_out, shortcut, groups, expansion</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        c_ <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>c2 <span class=\"token operator\">*</span> e<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># hidden channels</span>\n        self<span class=\"token punctuation\">.</span>cv1 <span class=\"token operator\">=</span> Conv<span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">,</span> c_<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>cv2 <span class=\"token operator\">=</span> Conv<span class=\"token punctuation\">(</span>c_<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> g<span class=\"token operator\">=</span>g<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>add <span class=\"token operator\">=</span> shortcut <span class=\"token keyword\">and</span> c1 <span class=\"token operator\">==</span> c2\n        <span class=\"token comment\"># self.eca=ECA(c1,c2)</span>\n        self<span class=\"token punctuation\">.</span>avg_pool <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>AdaptiveAvgPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv1d<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span>k_size<span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>k_size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>sigmoid <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sigmoid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x1 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>cv2<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>cv1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># out=self.eca(x1)*x1</span>\n        y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>avg_pool<span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>unsqueeze<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>sigmoid<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n        out <span class=\"token operator\">=</span> x1 <span class=\"token operator\">*</span> y<span class=\"token punctuation\">.</span>expand_as<span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> out <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>add <span class=\"token keyword\">else</span> out\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C3ECA</span><span class=\"token punctuation\">(</span>C3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># C3 module with ECABottleneck()</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">,</span> n<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> shortcut<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> g<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> e<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> shortcut<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n        c_ <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>c2 <span class=\"token operator\">*</span> e<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># hidden channels</span>\n        self<span class=\"token punctuation\">.</span>m <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ECABottleneck<span class=\"token punctuation\">(</span>c_<span class=\"token punctuation\">,</span> c_<span class=\"token punctuation\">,</span> shortcut<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\609cc29979f34b48bc4440ec5ab9528c.png\"/></p>\n<h1><a id=\"4_CA_253\"></a>4. CA</h1>\n<p><a href=\"https://arxiv.org/pdf/2103.02907.pdf\">Coordinate Attention for Efficient Mobile Network Design</a><br/> <a href=\"https://github.com/Andrew-Qibin/CoordAttention\">https://github.com/Andrew-Qibin/CoordAttention</a><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6e4d9bfb8adb4b058ab7b465ee1cefe5.png\"/></p>\n<h2><a id=\"41_CA_257\"></a>4.1 CA</h2>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">h_sigmoid</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>h_sigmoid<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU6<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span>inplace<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">6</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">h_swish</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>h_swish<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>sigmoid <span class=\"token operator\">=</span> h_sigmoid<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span>inplace<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>sigmoid<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CoordAtt</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> inp<span class=\"token punctuation\">,</span> oup<span class=\"token punctuation\">,</span> reduction<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>CoordAtt<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>pool_h <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>AdaptiveAvgPool2d<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>pool_w <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>AdaptiveAvgPool2d<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        mip <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> inp <span class=\"token operator\">//</span> reduction<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>inp<span class=\"token punctuation\">,</span> mip<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>bn1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>mip<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>act <span class=\"token operator\">=</span> h_swish<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv_h <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>mip<span class=\"token punctuation\">,</span> oup<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv_w <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>mip<span class=\"token punctuation\">,</span> oup<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        identity <span class=\"token operator\">=</span> x\n        n<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">,</span> w <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># c*1*W</span>\n        x_h <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>pool_h<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># c*H*1</span>\n        <span class=\"token comment\"># C*1*h</span>\n        x_w <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>pool_w<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>permute<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x_h<span class=\"token punctuation\">,</span> x_w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dim<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># C*1*(h+w)</span>\n        y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv1<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>bn1<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>act<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n        x_h<span class=\"token punctuation\">,</span> x_w <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>h<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dim<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        x_w <span class=\"token operator\">=</span> x_w<span class=\"token punctuation\">.</span>permute<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        a_h <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv_h<span class=\"token punctuation\">(</span>x_h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sigmoid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        a_w <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv_w<span class=\"token punctuation\">(</span>x_w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sigmoid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        out <span class=\"token operator\">=</span> identity <span class=\"token operator\">*</span> a_w <span class=\"token operator\">*</span> a_h\n        <span class=\"token keyword\">return</span> out\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\35201244d14648d58289443641605436.png\"/></p>\n<h2><a id=\"42_C3CA_310\"></a>4.2 C3-CA</h2>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CABottleneck</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Standard bottleneck</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">,</span> shortcut<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> g<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> e<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> ratio<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># ch_in, ch_out, shortcut, groups, expansion</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        c_ <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>c2 <span class=\"token operator\">*</span> e<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># hidden channels</span>\n        self<span class=\"token punctuation\">.</span>cv1 <span class=\"token operator\">=</span> Conv<span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">,</span> c_<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>cv2 <span class=\"token operator\">=</span> Conv<span class=\"token punctuation\">(</span>c_<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> g<span class=\"token operator\">=</span>g<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>add <span class=\"token operator\">=</span> shortcut <span class=\"token keyword\">and</span> c1 <span class=\"token operator\">==</span> c2\n        <span class=\"token comment\"># self.ca=CoordAtt(c1,c2,ratio)</span>\n        self<span class=\"token punctuation\">.</span>pool_h <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>AdaptiveAvgPool2d<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>pool_w <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>AdaptiveAvgPool2d<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        mip <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> c1 <span class=\"token operator\">//</span> ratio<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">,</span> mip<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>bn1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>mip<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>act <span class=\"token operator\">=</span> h_swish<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv_h <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>mip<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv_w <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>mip<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x1<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>cv2<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>cv1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        n<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">,</span> w <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># c*1*W</span>\n        x_h <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>pool_h<span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># c*H*1</span>\n        <span class=\"token comment\"># C*1*h</span>\n        x_w <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>pool_w<span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>permute<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x_h<span class=\"token punctuation\">,</span> x_w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dim<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># C*1*(h+w)</span>\n        y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv1<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>bn1<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>act<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n        x_h<span class=\"token punctuation\">,</span> x_w <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>h<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dim<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        x_w <span class=\"token operator\">=</span> x_w<span class=\"token punctuation\">.</span>permute<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        a_h <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv_h<span class=\"token punctuation\">(</span>x_h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sigmoid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        a_w <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv_w<span class=\"token punctuation\">(</span>x_w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sigmoid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        out <span class=\"token operator\">=</span> x1 <span class=\"token operator\">*</span> a_w <span class=\"token operator\">*</span> a_h\n\n        <span class=\"token comment\"># out=self.ca(x1)*x1</span>\n        <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> out <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>add <span class=\"token keyword\">else</span> out\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C3CA</span><span class=\"token punctuation\">(</span>C3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># C3 module with CABottleneck()</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">,</span> n<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> shortcut<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> g<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> e<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> shortcut<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n        c_ <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>c2 <span class=\"token operator\">*</span> e<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># hidden channels</span>\n        self<span class=\"token punctuation\">.</span>m <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>CABottleneck<span class=\"token punctuation\">(</span>c_<span class=\"token punctuation\">,</span> c_<span class=\"token punctuation\">,</span>shortcut<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\12e86a9859954880a045768ba4cf686a.png\"/><br/> Tips：添加注意力的位置不局限，可以尝试各种排列组合<br/> 参考：<br/> <a href=\"https://blog.csdn.net/weixin_43694096/article/details/124443059?spm=1001.2014.3001.5502\">多种注意力介绍</a><br/> <a href=\"https://www.bilibili.com/video/BV1kS4y1c7Bm?spm_id_from=333.999.0.0\">添加注意力视频讲解</a><br/> <a href=\"https://mp.weixin.qq.com/s?__biz=MzA4MjY4NTk0NQ==&amp;mid=2247484531&amp;idx=1&amp;sn=625065862b28608428acb21da3330717&amp;chksm=9f80bee5a8f737f399f0f564883337154dd8ca3ad5c246c85a86a88b0ac8ede7bf59ffc04554&amp;token=897871599&amp;lang=zh_CN#rd\">添加CBAM</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-05-07 13:19:19", "summary": "目录添加方法添加方法主要步骤：在中注册注意力模块在中的函数中添加注意力模块修改配置文件运行进行验证各个注意力机制模块的添加方法类似，各注意力模块的修改参照。本文添加注意力完整代码：在这里插入图片描述在"}