{"blogid": "123879847", "writerAge": "码龄2年", "writerBlogNum": "14", "writerCollect": "63", "writerComment": "3", "writerFan": "293", "writerGrade": "2级", "writerIntegral": "178", "writerName": "H `K", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123879847.jpg", "writerRankTotal": "86245", "writerRankWeekly": "214841", "writerThumb": "33", "writerVisitNum": "43675", "blog_read_count": "14608", "blog_time": "于 2022-03-31 18:14:32 发布", "blog_title": "如何创建springboot项目", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_0\"></a>前言</h2>\n<p>本片博客记录快速创建springboot工程的两种方式。一种是使用maven创建，一种是使用spring initializr创建。开发环境JDK1.8、IDEA、maven。</p>\n<h3><a id=\"SpringBoot__2\"></a>SpringBoot 优点</h3>\n<ul><li>可快速构建spring应用</li><li>直接嵌入tomcat、jetty、undenrtow服务器（无须部署war文件）</li><li>提供依赖启动器（starter）简化构建配置</li><li>极大程度的自动化配置Spring和第三方库</li><li>提供生产就绪功能，例如指标监控检测、外部检测</li><li>极少代码生成和XML配置</li></ul>\n<h2><a id=\"mavenSpring_Boot_10\"></a>使用maven创建Spring Boot项目</h2>\n<h4><a id=\"_12\"></a>第一步：</h4>\n<p>首先在左上角的file-&gt;new-&gt;project（如果是新安装的IDEA需要配置maven仓库，当然idea自己也会帮你配置，但是好像在C盘，并且可能会出现一些错误提示问题，如果不介意然可以使用，但是还是建议使用自己的maven仓库创建，直接点击new project），然后出现下面图片显示，选择maven项目，点击next。到下一个界面。<br/> <img alt=\"image\" src=\"..\\..\\static\\image\\a23bb1ebaeeaf290f9520c6b47bad40e.png\"/></p>\n<h4><a id=\"_15\"></a>第二步：</h4>\n<p>这个界面的name就是你的项目名，location就是你项目的地址路径，groupid一般是你网址域名倒着写，例如com.hjk.www那反过来就是www.hjk.com,这一般是公司定义的，我们可以自己命名。<br/> <img alt=\"image\" src=\"..\\..\\static\\image\\4fd2a29d30db8acde13b21c6fdd0668a.png\"/></p>\n<h4><a id=\"_18\"></a>第三步：</h4>\n<p>然后我们找到pom.xml文件，在里面添加两个依赖，添加依赖你的maven仓库如果没有这个包是会报错的，然后我们点击一个类似刷新的图标idea就会加载相关的包了，我们等它加载完，第一次加载应该会等很长时间，我们耐心等待一下。如果在加载完成之后你的parent的那个依赖会爆红，可能是应为你的仓库是idea的默认C盘那个仓库，建议换成自己的。这个报错的原因好像是那个仓库下载的是基础包，没有这个parent的包！<br/> <img alt=\"image\" src=\"..\\..\\static\\image\\a7ceea65bb265c4f1e33403372744a2d.png\"/></p>\n<h4><a id=\"_21\"></a>第四步：</h4>\n<p>最后我们查看一下我们所导入的包都有什么，点击右边的maven-&gt;dependencies查看<br/> <img alt=\"image\" src=\"..\\..\\static\\image\\6cf928e26bd51c067c5c06a636549e7e.png\"/></p>\n<h4><a id=\"_24\"></a>第五步：</h4>\n<p>我们创建一个主程序启动类<br/> 我们在学mvc是常常都是有几个包（dao、service、controller）我们在写springboot项目时也是差不多的，这里我们在dao包的同级目录下创建一个主程序类。<br/> <img alt=\"image\" src=\"..\\..\\static\\image\\2c89633e7952f5265491482ccb39cbc8.png\"/></p>\n<p>代码：</p>\n<pre><code>package com.hjk;\n\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class springbootParent {\n\n    public static void main(String[] args) {\n    SpringApplication.run(springbootParent.class,args);\n    }\n}\n\n</code></pre>\n<h4><a id=\"controller_46\"></a>最后我们创建一个controller测试一下</h4>\n<p>在controller包里面创建一个HelloController类</p>\n<pre><code>package com.hjk.controller;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class HelloController {\n\n    @GetMapping(\"/hello\")\n    public String hello(){\n        return \"hello SpringBoot\";\n    }\n}\n</code></pre>\n<p>运行springbootParent类，然后访问\"http://localhost:8080/hello\" 然后就能在这个界面看到字符串输出了。</p>\n<h3><a id=\"html_65\"></a>与html联系</h3>\n<p>我们怎么通过controller去访问html界面呢，<br/> 首先我们把thymeleaf依赖导入pom.xml</p>\n<pre><code>       &lt;dependency&gt;\n            &lt;groupId&gt;org.thymeleaf&lt;/groupId&gt;\n            &lt;artifactId&gt;thymeleaf-spring5&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.thymeleaf.extras&lt;/groupId&gt;\n            &lt;artifactId&gt;thymeleaf-extras-java8time&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n</code></pre>\n<p>然后我们把HelloController改一下。因为上面我们用的是@RestController注解，返回的是一个json字符串，不会被spring解析，那是适用于传数据使用，我们需要使用@Controller注解进行页面的跳转。</p>\n<pre><code>package com.hjk.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\npublic class HelloController {\n\n    @GetMapping(\"/hello\")\n    public String hello(){\n        return \"hello\";\n    }\n    @RequestMapping(\"/a\")\n    public String index(){\n        return \"index\";\n    }\n}\n</code></pre>\n<p>然后再resources文件夹下，建立这样的结构<br/> <img alt=\"image\" src=\"..\\..\\static\\image\\81018c16a63a73bd8266a94de8fae339.png\"/></p>\n<p>页面里面写什么无所谓。<br/> 然后我们重新启动项目，通过访问\"http://localhost:8080/hello\" 和\"http://localhost:8080/a“ 可以跳转到页面。我们可以看到，注解里面写的是url路径，return后面的是需要跳转的页面名。</p>\n<h4><a id=\"_105\"></a>解释点</h4>\n<table><thead><tr><th>注解</th><th>解释</th></tr></thead><tbody><tr><td>@Controller</td><td>把用户提交来的请求通过对URL的匹配，分配个不同的接收器，再进行处理，然后向用户返回结果</td></tr><tr><td>@ResponseBody</td><td>将方法返回值绑定到 Web 响应主体</td></tr><tr><td>@RestController</td><td>@ResponseBody和@Controller组合注解，用于返回JSON字符串</td></tr><tr><td>@RequestMapping</td><td>用来处理请求地址映射的注解</td></tr><tr><td>@GetMapping</td><td>等价于@RequestMapping(value = “”,method = RequestMethod.GET)就是使用Get方法提交</td></tr></tbody></table>\n<h2><a id=\"Spring_initializr_116\"></a>使用Spring initializr快速创建</h2>\n<p>使用maven创建还是比较麻烦的，我们使用Spring initiallizr创建。</p>\n<h4><a id=\"_118\"></a>第一步：</h4>\n<p>右上角file-&gt;new-&gt;project–&gt;spring initializr-&gt;next,这种方式1是在联网情况下创建的，defaule就是springboot的默认网址。<br/> <img alt=\"image\" src=\"..\\..\\static\\image\\5da0881b9e3e1200514d8786f6d0e9b5.png\"/></p>\n<h4><a id=\"_122\"></a>第二步：</h4>\n<p>点击完next之后可以看到这个界面有Group组名，Artifact项目名。java version java版本，description项目描述，package包名。然后点击next</p>\n<p><img alt=\"image\" src=\"..\\..\\static\\image\\ae711f06c5aac4898f118e70f9bdd9b4.png\"/></p>\n<h4><a id=\"_126\"></a>第三步：</h4>\n<p>在这个界面我们可以选择springboot版本，和直接加入依赖，我们在这里直接加入web依赖spring web和Template的Thymeleaf依赖，点上对勾后可以在最右边里看到你选择的依赖。然后点击next。<br/> <img alt=\"image\" src=\"..\\..\\static\\image\\eb74e344d78adb1c35f555fe4479d47f.png\"/></p>\n<h4><a id=\"_130\"></a>第四步：</h4>\n<p>之前设置完了，在这里可以直接点击finish，这样就创建了一个sprigboot项目。<br/> <img alt=\"image\" src=\"..\\..\\static\\image\\15dee68b073e7ebed82f82ac3a85b7d3.png\"/><br/> 我们可以看到我们的项目结构，很多springboot都帮我们创建了。<br/> <img alt=\"image\" src=\"..\\..\\static\\image\\8fea66560012ea4015bd11ceb51e412b.png\"/></p>\n<h4><a id=\"_135\"></a>最后</h4>\n<p>我们和上面一样，创建HelloController类，并且在templates里面创建一个hello.html文件。<br/> HelloController代码</p>\n<pre><code>package com.hjk.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n@Controller\npublic class HelloController {\n\n    @GetMapping(\"/hello\")\n    public String hello(){\n        return \"hello\";\n    }\n}\n</code></pre>\n<p>最后运行程序，访问\"http://localhost:8080/hello\" ，成功;</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-03-31 18:14:32", "summary": "前言本片博客记录快速创建工程的两种方式。一种是使用创建，一种是使用创建。开发环境、、。优点可快速构建应用直接嵌入、、服务器无须部署文件提供依赖启动器简化构建配置极大程度的自动化配置和第三方库提供生产就"}