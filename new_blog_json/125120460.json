{"blogid": "125120460", "writerAge": "码龄7年", "writerBlogNum": "134", "writerCollect": "314", "writerComment": "37", "writerFan": "100", "writerGrade": "5级", "writerIntegral": "2949", "writerName": "MAXLZ", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125120460.jpg", "writerRankTotal": "7110", "writerRankWeekly": "16641", "writerThumb": "68", "writerVisitNum": "165457", "blog_read_count": "2715", "blog_time": "已于 2022-06-19 13:59:40 修改", "blog_title": "【vue-router源码】二、createWebHistory、createWebHashHistory、createMemoryHistory源码解析", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"vuerouer_0\"></a>【vue-rouer源码】系列文章</h1>\n<ol><li><a href=\"https://blog.csdn.net/qq_33635385/article/details/125120585\">【vue-router源码】一、router.install解析</a></li><li>【vue-router源码】二、createWebHistory、createWebHashHistory、createMemoryHistory源码解析</li><li><a href=\"https://blog.csdn.net/qq_33635385/article/details/125138706\">【vue-router源码】三、理解Vue-router中的Matcher</a></li><li><a href=\"https://blog.csdn.net/qq_33635385/article/details/125155697\">【vue-router源码】四、createRouter源码解析</a></li><li><a href=\"https://blog.csdn.net/qq_33635385/article/details/125158829\">【vue-router源码】五、router.addRoute、router.removeRoute、router.hasRoute、router.getRoutes源码分析</a></li><li><a href=\"https://blog.csdn.net/qq_33635385/article/details/125175571\">【vue-router源码】六、router.resolve源码解析</a></li><li><a href=\"https://blog.csdn.net/qq_33635385/article/details/125182307\">【vue-router源码】七、router.push、router.replace源码解析</a></li><li><a href=\"https://blog.csdn.net/qq_33635385/article/details/125197101\">【vue-router源码】八、router.go、router.back、router.forward源码解析</a></li><li><a href=\"https://blog.csdn.net/qq_33635385/article/details/125214733\">【vue-router源码】九、全局导航守卫的实现</a></li><li><a href=\"https://blog.csdn.net/qq_33635385/article/details/125241677\">【vue-router源码】十、isReady源码解析</a></li><li><a href=\"https://blog.csdn.net/qq_33635385/article/details/125247533\">【vue-router源码】十一、onBeforeRouteLeave、onBeforeRouteUpdate源码分析</a></li><li><a href=\"https://blog.csdn.net/qq_33635385/article/details/125254615\">【vue-router源码】十二、useRoute、useRouter、useLink源码分析</a></li><li><a href=\"https://blog.csdn.net/qq_33635385/article/details/125278430\">【vue-router源码】十三、RouterLink源码分析</a></li><li><a href=\"https://blog.csdn.net/qq_33635385/article/details/125305338\">【vue-router源码】十四、RouterView源码分析</a></li></ol>\n<hr/>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#vuerouer_0\">【vue-rouer源码】系列文章</a></li><li><a href=\"#_21\">前言</a></li><li><a href=\"#_28\">使用</a></li><li><a href=\"#createWebHistory_39\">createWebHistory</a></li><li><a href=\"#createWebHashHistory_370\">createWebHashHistory</a></li><li><a href=\"#createMemoryHistory_391\">createMemoryHistory</a></li><li><a href=\"#_505\">总结</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_21\"></a>前言</h1>\n<p>【vue-router源码】系列文章将带你从0开始了解<code>vue-router</code>的具体实现。该系列文章源码参考<code>vue-router v4.0.15</code>。<br/> 源码地址：<a href=\"https://github.com/vuejs/router\">https://github.com/vuejs/router</a><br/> 阅读该文章的前提是你最好了解<code>vue-router</code>的基本使用，如果你没有使用过的话，可通过<a href=\"https://router.vuejs.org/\">vue-router官网</a>学习下。</p>\n<p>在<code>vue-router 4.x</code>中创建<code>router</code>时，需要使用<code>createWebHistory</code>、<code>createWebHashHistory</code>、<code>createMemoryHistory</code>中的一个创建一个<code>history</code>，这篇文章将就这三个函数进行解析。</p>\n<h1><a id=\"_28\"></a>使用</h1>\n<pre><code class=\"prism language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> createWebHistory<span class=\"token punctuation\">,</span> createRouter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span>\n\n<span class=\"token keyword\">const</span> routerHistory <span class=\"token operator\">=</span> <span class=\"token function\">createWebHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n\thistory<span class=\"token operator\">:</span> routerHistory<span class=\"token punctuation\">,</span>\n\troutes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"createWebHistory_39\"></a>createWebHistory</h1>\n<p><code>createWebHistory</code>源码所处位置：<code>src/history/html5.ts</code>。<br/> 首先来看<code>createWebHistory</code>的参数，函数可以接受一个<code>base</code>字符串可选参数，该参数提供了一个基础路径。<br/> 在<code>createWebHistory</code>中首先会调用<code>normalizeBase</code>函数对传入的<code>base</code>进行标准化。</p>\n<pre><code class=\"prism language-ts\">base <span class=\"token operator\">=</span> <span class=\"token function\">normalizeBase</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>来看下<code>base</code>标准化的过程：</p>\n<pre><code class=\"prism language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">normalizeBase</span><span class=\"token punctuation\">(</span>base<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>base<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  \t<span class=\"token comment\">// 浏览其环境下尝试获取base标签的href属性</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isBrowser<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">const</span> baseEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'base'</span><span class=\"token punctuation\">)</span>\n      base <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>baseEl <span class=\"token operator\">&amp;&amp;</span> baseEl<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'href'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">'/'</span>\n      <span class=\"token comment\">// 去除htttp(s)://xxx/，如https://example.com/folder/ --&gt; /folder/</span>\n      base <span class=\"token operator\">=</span> base<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\w+:\\/\\/[^\\/]+</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n      base <span class=\"token operator\">=</span> <span class=\"token string\">'/'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 确保base的前导/</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">&amp;&amp;</span> base<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span> base <span class=\"token operator\">=</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">+</span> base\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">removeTrailingSlash</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>如果没有配置<code>base</code>的话，在浏览器环境下会尝试获取<code>&lt;base&gt;</code>标签的<code>href</code>属性作为<code>base</code>，如果没有<code>&lt;base&gt;</code>标签或<code>&lt;base&gt;</code>标签的<code>href</code>属性没有值，<code>base</code>取<code>/</code>，然后又对<code>base</code>进行了<code>reaplce(/^\\w+:\\/\\/[^\\/]+/, '')</code>操作，该操作是去除<code>base</code>的<code>http(s)://xxx</code>部分（如果<code>base</code>是<code>https://example.com/floder/child</code>，<code>base</code>最终会变成<code>/floder/child</code>）；非浏览器环境下，<code>base</code>直接取<code>/</code>。在最后会将<code>base</code>的末尾<code>/</code>去除，然后返回<code>base</code>，这样做的目的是后续我们可以通过<code>base + fullPath</code>的形式建立一个<code>href</code>。</p>\n<p><code>base</code>标准化后，会声明一个<code>historyNavigation</code>和<code>historyListeners</code>变量：</p>\n<pre><code class=\"prism language-ts\"><span class=\"token keyword\">const</span> historyNavigation <span class=\"token operator\">=</span> <span class=\"token function\">useHistoryStateNavigation</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> historyListeners <span class=\"token operator\">=</span> <span class=\"token function\">useHistoryListeners</span><span class=\"token punctuation\">(</span>\n  base<span class=\"token punctuation\">,</span>\n  historyNavigation<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span>\n  historyNavigation<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">,</span>\n  historyNavigation<span class=\"token punctuation\">.</span>replace\n<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>这两个变量是什么呢？接下来看下<code>useHistoryStateNavigation()</code>、<code>useHistoryListeners()</code>的实现。</p>\n<p>先看<code>useHistoryStateNavigation</code>:</p>\n<pre><code class=\"prism language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">useHistoryStateNavigation</span><span class=\"token punctuation\">(</span>base<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 获取window.history、window.location</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span> history<span class=\"token punctuation\">,</span> location <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> window\n\n  <span class=\"token keyword\">const</span> currentLocation<span class=\"token operator\">:</span> ValueContainer<span class=\"token operator\">&lt;</span>HistoryLocation<span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    value<span class=\"token operator\">:</span> <span class=\"token function\">createCurrentLocation</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> historyState<span class=\"token operator\">:</span> ValueContainer<span class=\"token operator\">&lt;</span>StateEntry<span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> value<span class=\"token operator\">:</span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 如果history.state是空的，构建一条新的历史记录</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>historyState<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">changeLocation</span><span class=\"token punctuation\">(</span>\n      currentLocation<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n        back<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        current<span class=\"token operator\">:</span> currentLocation<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n        forward<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        position<span class=\"token operator\">:</span> history<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        replaced<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        scroll<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 修改历史记录</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">changeLocation</span><span class=\"token punctuation\">(</span>\n    to<span class=\"token operator\">:</span> HistoryLocation<span class=\"token punctuation\">,</span>\n    state<span class=\"token operator\">:</span> StateEntry<span class=\"token punctuation\">,</span>\n    replace<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n  <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> hashIndex <span class=\"token operator\">=</span> base<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 获取url，作为history.replaceState/pushState的参数</span>\n    <span class=\"token comment\">// 如果hashIndex &gt; -1，url = `{location.host &amp;&amp; document.querySelector('base') ? base : base字符串#及后面字符}${to}`</span>\n    <span class=\"token comment\">// 否则 url = `${location.protocol}//${location.host}${base}${to}`</span>\n    <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span>\n      hashIndex <span class=\"token operator\">&gt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n        <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>host <span class=\"token operator\">&amp;&amp;</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'base'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">?</span> base\n            <span class=\"token operator\">:</span> base<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>hashIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> to\n        <span class=\"token operator\">:</span> <span class=\"token function\">createBaseLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> base <span class=\"token operator\">+</span> to\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token comment\">// 利用history.replaceState/pushState修改历史记录</span>\n      history<span class=\"token punctuation\">[</span>replace <span class=\"token operator\">?</span> <span class=\"token string\">'replaceState'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'pushState'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// historyState更新为最新的历史记录</span>\n      historyState<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> state\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">// 如果历史记录修改过程中报错，则使用location.reaplce/assign导航到对应url</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error with push/replace State'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      location<span class=\"token punctuation\">[</span>replace <span class=\"token operator\">?</span> <span class=\"token string\">'replace'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'assign'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>to<span class=\"token operator\">:</span> HistoryLocation<span class=\"token punctuation\">,</span> data<span class=\"token operator\">?</span><span class=\"token operator\">:</span> HistoryState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> state<span class=\"token operator\">:</span> StateEntry <span class=\"token operator\">=</span> <span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      history<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span>\n      <span class=\"token function\">buildState</span><span class=\"token punctuation\">(</span>\n        historyState<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>back<span class=\"token punctuation\">,</span>\n        to<span class=\"token punctuation\">,</span>\n        historyState<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>forward<span class=\"token punctuation\">,</span>\n        <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      data<span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// 因为是replace操作，所以position不变</span>\n      <span class=\"token punctuation\">{<!-- --></span> position<span class=\"token operator\">:</span> historyState<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>position <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">changeLocation</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 修改当前历史为to</span>\n    currentLocation<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> to\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>to<span class=\"token operator\">:</span> HistoryLocation<span class=\"token punctuation\">,</span> data<span class=\"token operator\">?</span><span class=\"token operator\">:</span> HistoryState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> currentState <span class=\"token operator\">=</span> <span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>      historyState<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n      history<span class=\"token punctuation\">.</span>state <span class=\"token keyword\">as</span> Partial<span class=\"token operator\">&lt;</span>StateEntry<span class=\"token operator\">&gt;</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n        forward<span class=\"token operator\">:</span> to<span class=\"token punctuation\">,</span>\n        scroll<span class=\"token operator\">:</span> <span class=\"token function\">computeScrollPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__ <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>history<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">history.state seems to have been manually replaced without preserving the necessary values. Make sure to preserve existing history state if you are manually calling history.replaceState:\\n\\n</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n          <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">history.replaceState(history.state, '', url)\\n\\n</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n          <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You can find more information at https://next.router.vuejs.org/guide/migration/#usage-of-history-state.</span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 第一次changeLocation，使用replace刷新当前历史，目的是记录当前页面的滚动位置</span>\n    <span class=\"token function\">changeLocation</span><span class=\"token punctuation\">(</span>currentState<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">,</span> currentState<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> state<span class=\"token operator\">:</span> StateEntry <span class=\"token operator\">=</span> <span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">buildState</span><span class=\"token punctuation\">(</span>currentLocation<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// push操作，历史记录的position+1</span>\n      <span class=\"token punctuation\">{<!-- --></span> position<span class=\"token operator\">:</span> currentState<span class=\"token punctuation\">.</span>position <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      data\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 第二次跳转，跳转到需要跳转的位置</span>\n    <span class=\"token function\">changeLocation</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    currentLocation<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> to\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span>\n    location<span class=\"token operator\">:</span> currentLocation<span class=\"token punctuation\">,</span>\n    state<span class=\"token operator\">:</span> historyState<span class=\"token punctuation\">,</span>\n\n    push<span class=\"token punctuation\">,</span>\n    replace<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这个函数接收一个<code>base</code>参数，返回一个对象。这个对象中有四个属性：</p>\n<ul><li><code>location</code>：一个包含<code>value</code>属性的对象，<code>value</code>值是<code>createCurrentLocation()</code>方法的返回值。那么这个<code>value</code>是什么呢？看下<code>createCurrentLocation</code>做了什么。<br/> <code>createCurrentLocation</code>的作用是通过<code>window.location</code>创建一个规范化的<code>history location</code>，方法接收两个参数：经过标准化的<code>base</code>字符串和一个<code>window.location</code>对象</li></ul>\n<pre><code class=\"prism language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">createCurrentLocation</span><span class=\"token punctuation\">(</span>\n  base<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  location<span class=\"token operator\">:</span> Location\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> HistoryLocation <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span> pathname<span class=\"token punctuation\">,</span> search<span class=\"token punctuation\">,</span> hash <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> location\n  <span class=\"token comment\">// allows hash bases like #, /#, #/, #!, #!/, /#!/, or even /folder#end</span>\n  <span class=\"token comment\">// 从base中获取#的索引</span>\n  <span class=\"token keyword\">const</span> hashPos <span class=\"token operator\">=</span> base<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 如果base中包含#</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hashPos <span class=\"token operator\">&gt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 如果hash包含base中的#后面部分，slicePos为base中#及后面字符串的的长度，否则为1</span>\n    <span class=\"token keyword\">let</span> slicePos <span class=\"token operator\">=</span> hash<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>hashPos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">?</span> base<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>hashPos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length\n      <span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token comment\">// 从location.hash中获取path，/#add, #add</span>\n    <span class=\"token keyword\">let</span> pathFromHash <span class=\"token operator\">=</span> hash<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>slicePos<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 在开头加上/，形成/#的格式</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pathFromHash<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> pathFromHash <span class=\"token operator\">=</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">+</span> pathFromHash\n    <span class=\"token comment\">// stripBase(pathname, base)：将pathname去除base部分</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">stripBase</span><span class=\"token punctuation\">(</span>pathFromHash<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 如果base中不包含#，把pathname中的base部分删除</span>\n  <span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">stripBase</span><span class=\"token punctuation\">(</span>pathname<span class=\"token punctuation\">,</span> base<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> path <span class=\"token operator\">+</span> search <span class=\"token operator\">+</span> hash\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>可以看到<code>createCurrentLocation</code>其实就是获取<code>window.location</code>相对<code>base</code>的<code>location</code>。举几个例子（以下几个例子的<code>base</code>都经过标准化）：如果<code>window.location.pathname</code>为<code>/a/b/c</code>，<code>base</code>为<code>/a</code>，那么通过<code>createCurrentLocation</code>得到的<code>location</code>为<code>/b/c</code>；如果是有<code>hash</code>的情况，<code>window.location.hash</code>为<code>#/a/b/c</code>，<code>base</code>为<code>#/a</code>，那么通过<code>createCurrentLocation</code>得到的<code>location</code>为<code>/b/c</code>；<code>window.location.hash</code>为<code>#/a/b/c</code>，<code>base</code>为<code>#</code>，那么通过<code>createCurrentLocation</code>得到的<code>location</code>为<code>/a/b/c</code>。</p>\n<ul><li><code>state</code>：一个包含<code>value</code>属性的对象，<code>value</code>存储的是当前的<code>history.state</code></li><li><code>push</code>：向历史记录中添加一条记录。在<code>push</code>过程中你会发现调用了两次<code>changeLocation</code>，在第一次调用<code>changeLocation</code>时，目的是为了记录当前页面在的滚动位置，如果使用<code>history.back()</code>或浏览器回退/前进按钮回到这个页面，页面会滚动到对应位置，为了不再历史栈中保存新的记录，第一次记录使用的<code>reaplceState</code>替换当前历史记录。第二次调用<code>changeLocation</code>是会跳转到需要跳转的位置。</li><li><code>reaplce</code>：替换当前历史记录。</li></ul>\n<p>接下来看下<code>useHistoryListeners</code>方法：</p>\n<pre><code class=\"prism language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">useHistoryListeners</span><span class=\"token punctuation\">(</span>\n  base<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  historyState<span class=\"token operator\">:</span> ValueContainer<span class=\"token operator\">&lt;</span>StateEntry<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n  currentLocation<span class=\"token operator\">:</span> ValueContainer<span class=\"token operator\">&lt;</span>HistoryLocation<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n  replace<span class=\"token operator\">:</span> RouterHistory<span class=\"token punctuation\">[</span><span class=\"token string\">'replace'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">let</span> listeners<span class=\"token operator\">:</span> NavigationCallback<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> teardowns<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> pauseState<span class=\"token operator\">:</span> HistoryLocation <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n\n  <span class=\"token keyword\">const</span> popStateHandler<span class=\"token operator\">:</span> <span class=\"token function-variable function\">PopStateListener</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n    state<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    state<span class=\"token operator\">:</span> StateEntry <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> to <span class=\"token operator\">=</span> <span class=\"token function\">createCurrentLocation</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> from<span class=\"token operator\">:</span> HistoryLocation <span class=\"token operator\">=</span> currentLocation<span class=\"token punctuation\">.</span>value\n    <span class=\"token keyword\">const</span> fromState<span class=\"token operator\">:</span> StateEntry <span class=\"token operator\">=</span> historyState<span class=\"token punctuation\">.</span>value\n    <span class=\"token keyword\">let</span> delta <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      currentLocation<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> to\n      historyState<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> state\n\n      <span class=\"token comment\">// 如果暂停监听了，则直接return，同时pauseState赋为null</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pauseState <span class=\"token operator\">&amp;&amp;</span> pauseState <span class=\"token operator\">===</span> from<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        pauseState <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n        <span class=\"token keyword\">return</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// 计算移动步数</span>\n      delta <span class=\"token operator\">=</span> fromState <span class=\"token operator\">?</span> state<span class=\"token punctuation\">.</span>position <span class=\"token operator\">-</span> fromState<span class=\"token punctuation\">.</span>position <span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// 执行监听函数列表</span>\n    listeners<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>listener <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token function\">listener</span><span class=\"token punctuation\">(</span>currentLocation<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n        delta<span class=\"token punctuation\">,</span>\n        type<span class=\"token operator\">:</span> NavigationType<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">,</span>\n        direction<span class=\"token operator\">:</span> delta\n          <span class=\"token operator\">?</span> delta <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span>\n            <span class=\"token operator\">?</span> NavigationDirection<span class=\"token punctuation\">.</span>forward\n            <span class=\"token operator\">:</span> NavigationDirection<span class=\"token punctuation\">.</span>back\n          <span class=\"token operator\">:</span> NavigationDirection<span class=\"token punctuation\">.</span><span class=\"token builtin\">unknown</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">pauseListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    pauseState <span class=\"token operator\">=</span> currentLocation<span class=\"token punctuation\">.</span>value\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>callback<span class=\"token operator\">:</span> NavigationCallback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    listeners<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">teardown</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> listeners<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&gt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> listeners<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    teardowns<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>teardown<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> teardown\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">beforeUnloadListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span> history <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> window\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>history<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n    <span class=\"token comment\">// 当页面关闭时记录页面滚动位置</span>\n    history<span class=\"token punctuation\">.</span><span class=\"token function\">replaceState</span><span class=\"token punctuation\">(</span>\n      <span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> history<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span> scroll<span class=\"token operator\">:</span> <span class=\"token function\">computeScrollPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">''</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> teardown <span class=\"token keyword\">of</span> teardowns<span class=\"token punctuation\">)</span> <span class=\"token function\">teardown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    teardowns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popstate'</span><span class=\"token punctuation\">,</span> popStateHandler<span class=\"token punctuation\">)</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'beforeunload'</span><span class=\"token punctuation\">,</span> beforeUnloadListener<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popstate'</span><span class=\"token punctuation\">,</span> popStateHandler<span class=\"token punctuation\">)</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'beforeunload'</span><span class=\"token punctuation\">,</span> beforeUnloadListener<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span>\n    pauseListeners<span class=\"token punctuation\">,</span>\n    listen<span class=\"token punctuation\">,</span>\n    destroy<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>useHistoryListeners</code>方法接收四个参数：<code>base</code>（标准化的<code>base</code>）、<code>historyState</code>、<code>currentLocation</code>、<code>replace</code>（后三个参数来自<code>useHistoryStateNavigation</code>的返回值）。<br/> 在<code>useHistoryListeners</code>中，会监听<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/popstate_event\">popstate</a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/beforeunload_event\">beforeunload</a>。</p>\n<p><code>useHistoryListeners</code>同样返回一个对象，该对象包含三个属性：</p>\n<ul><li><code>pauseListeners</code>：一个暂停监听的函数。</li><li><code>listen</code>：接收一个回调函数，并返回一个删除监听的函数。该回调函数会被加入<code>listeners</code>数组中，并向<code>teardowns</code>数组中添加卸载函数。</li><li><code>destroy</code>：销毁函数，清空<code>listeners</code>与<code>teardowns</code>，移除<code>popstate</code>、<code>beforeunload</code>监听。</li></ul>\n<p>现在我们知道了<code>useHistoryStateNavigation</code>、<code>useHistoryListeners</code>的实现后。现在我们回到<code>createWebHistory</code>中，创建完<code>historyNavigation</code>、<code>historyListeners</code>之后，紧跟着声明一个go函数。该函数接收两个变量：<code>delta</code>历史记录移动的步数，triggerListeners是否触发监听。</p>\n<pre><code class=\"prism language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">go</span><span class=\"token punctuation\">(</span>delta<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> triggerListeners <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>triggerListeners<span class=\"token punctuation\">)</span> historyListeners<span class=\"token punctuation\">.</span><span class=\"token function\">pauseListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  history<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span>delta<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>最后创建一个<code>routerHistory</code>对象，并将其返回。</p>\n<pre><code class=\"prism language-ts\"><span class=\"token keyword\">const</span> routerHistory<span class=\"token operator\">:</span> RouterHistory <span class=\"token operator\">=</span> <span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    location<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    base<span class=\"token punctuation\">,</span>\n    go<span class=\"token punctuation\">,</span>\n    createHref<span class=\"token operator\">:</span> <span class=\"token function\">createHref</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  historyNavigation<span class=\"token punctuation\">,</span>\n  historyListeners\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 拦截routerHistory.location，使routerHistory.location返回当前路由地址</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>routerHistory<span class=\"token punctuation\">,</span> <span class=\"token string\">'location'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n  enumerable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> historyNavigation<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 拦截routerHistory.state，使routerHistory.state返回当前的的history.state</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>routerHistory<span class=\"token punctuation\">,</span> <span class=\"token string\">'state'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n  enumerable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> historyNavigation<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">return</span> routerHistory\n</code></pre>\n<h1><a id=\"createWebHashHistory_370\"></a>createWebHashHistory</h1>\n<p><code>createWebHashHistory</code>利用<code>createWebHashHistory</code>实现。</p>\n<pre><code class=\"prism language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createWebHashHistory</span><span class=\"token punctuation\">(</span>base<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RouterHistory <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 对于使用文件协议打开的页面location.host是空字符串，这时的base为''</span>\n  <span class=\"token comment\">// 也就是说在使用文件协议打开页面时，设置了base是不生效的，因为base始终是''</span>\n  base <span class=\"token operator\">=</span> location<span class=\"token punctuation\">.</span>host <span class=\"token operator\">?</span> base <span class=\"token operator\">||</span> location<span class=\"token punctuation\">.</span>pathname <span class=\"token operator\">+</span> location<span class=\"token punctuation\">.</span>search <span class=\"token operator\">:</span> <span class=\"token string\">''</span>\n  <span class=\"token comment\">// 允许中间的#: `/base/#/app`</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> base <span class=\"token operator\">+=</span> <span class=\"token string\">'#'</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__ <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#/'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">A hash base must end with a \"#\":\\n\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>base<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" should be \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>base<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>\n        <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">#.*$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'#'</span>\n      <span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\".</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">createWebHistory</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"createMemoryHistory_391\"></a>createMemoryHistory</h1>\n<p><code>createMemoryHistory</code>会创建一个基于内存历史记录，主要用来处理SSR。</p>\n<pre><code class=\"prism language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createMemoryHistory</span><span class=\"token punctuation\">(</span>base<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RouterHistory <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 用户存储监听函数的数组</span>\n  <span class=\"token keyword\">let</span> listeners<span class=\"token operator\">:</span> NavigationCallback<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token comment\">// 使用一个队列维护历史记录</span>\n  <span class=\"token keyword\">let</span> queue<span class=\"token operator\">:</span> HistoryLocation<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">START</span><span class=\"token punctuation\">]</span>\n  <span class=\"token comment\">// 当前历史记录在队列中的位置</span>\n  <span class=\"token keyword\">let</span> position<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token comment\">// base标准化</span>\n  base <span class=\"token operator\">=</span> <span class=\"token function\">normalizeBase</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 设置记录</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">setLocation</span><span class=\"token punctuation\">(</span>location<span class=\"token operator\">:</span> HistoryLocation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    position<span class=\"token operator\">++</span>\n    <span class=\"token comment\">// 队列长度等于position时，直接push</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>position <span class=\"token operator\">===</span> queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token comment\">// 当历史记录在队列中的非末尾位置时，删除position及之后的记录，然后再push</span>\n      <span class=\"token comment\">// 如果某一刻处在非结尾的历史记录时，这时要进行push或reqlace操作，此时position之后的记录就会失效</span>\n      queue<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">)</span>\n      queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 触发监听</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">triggerListeners</span><span class=\"token punctuation\">(</span>\n    to<span class=\"token operator\">:</span> HistoryLocation<span class=\"token punctuation\">,</span>\n    from<span class=\"token operator\">:</span> HistoryLocation<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span> direction<span class=\"token punctuation\">,</span> delta <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> Pick<span class=\"token operator\">&lt;</span>NavigationInformation<span class=\"token punctuation\">,</span> <span class=\"token string\">'direction'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'delta'</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> info<span class=\"token operator\">:</span> NavigationInformation <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n      direction<span class=\"token punctuation\">,</span>\n      delta<span class=\"token punctuation\">,</span>\n      type<span class=\"token operator\">:</span> NavigationType<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> callback <span class=\"token keyword\">of</span> listeners<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> routerHistory<span class=\"token operator\">:</span> RouterHistory <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    location<span class=\"token operator\">:</span> <span class=\"token constant\">START</span><span class=\"token punctuation\">,</span>\n    state<span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    base<span class=\"token punctuation\">,</span>\n    createHref<span class=\"token operator\">:</span> <span class=\"token function\">createHref</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token comment\">// 移除queue中索引为position的记录，并将position--</span>\n      queue<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>position<span class=\"token operator\">--</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// 在setLocation会对position重新++操作，所以position会恢复要之前的值</span>\n      <span class=\"token function\">setLocation</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> data<span class=\"token operator\">?</span><span class=\"token operator\">:</span> HistoryState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token function\">setLocation</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      listeners<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> listeners<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&gt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> listeners<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      listeners <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n      queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">START</span><span class=\"token punctuation\">]</span>\n      position <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">go</span><span class=\"token punctuation\">(</span>delta<span class=\"token punctuation\">,</span> shouldTrigger <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">const</span> from <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>location\n      <span class=\"token comment\">// go的方向。delta &lt; 0 为 back，相反为 forward</span>\n      <span class=\"token keyword\">const</span> direction<span class=\"token operator\">:</span> NavigationDirection <span class=\"token operator\">=</span>\n        delta <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> NavigationDirection<span class=\"token punctuation\">.</span>back <span class=\"token operator\">:</span> NavigationDirection<span class=\"token punctuation\">.</span>forward\n      <span class=\"token comment\">// go之后所处的position：Math.min(position + delta, queue.length - 1)保证了position&lt;=queue.length - 1, 如果position + delta超出了数组最大索引，就取最大索引</span>\n      <span class=\"token comment\">// Math.max(0, Math.min(position + delta, queue.length - 1))进一步保证了position&gt;=0，如果position + delta &lt; 0, 则取0</span>\n      position <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">+</span> delta<span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// 根据shouldTrigger决定是否触发监听函数</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shouldTrigger<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">triggerListeners</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n          direction<span class=\"token punctuation\">,</span>\n          delta<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>routerHistory<span class=\"token punctuation\">,</span> <span class=\"token string\">'location'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n    enumerable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> queue<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__TEST__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    routerHistory<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">changeURL</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">const</span> from <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>location\n      queue<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>position<span class=\"token operator\">++</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">triggerListeners</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n        direction<span class=\"token operator\">:</span> NavigationDirection<span class=\"token punctuation\">.</span><span class=\"token builtin\">unknown</span><span class=\"token punctuation\">,</span>\n        delta<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> routerHistory\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>和<code>createWebHistory</code>、<code>createWebHashHistory</code>一样，<code>createMemoryHistory</code>同样返回一个<code>RouterHistory</code>类型的对象。与前面两个方法不同的是，<code>createMemoryHistory</code>维护一个队列<code>queue</code>和一个<code>position</code>，来保证历史记录存储的正确性。</p>\n<h1><a id=\"_505\"></a>总结</h1>\n<p><code>createWebHistory</code>、<code>createWebHashHistory</code>中通过<code>window.history.state</code>来管理历史记录，；而<code>createMemoryHistory</code>是通过维护一个队列和一个位置来实现对路由记录的管理，这也保证了在SSR中<code>vue-router</code>能够正常进行。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-06-19 13:59:40", "summary": "源码系列文章源码一、解析源码二、、、源码解析源码三、理解中的源码四、源码解析源码五、、、、源码分析源码六、源码解析源码七、、源码解析源码八、、、源码解析源码九、全局导航守卫的实现源码十、源码解析源码十"}