{"blogid": "125069987", "writerAge": "码龄14年", "writerBlogNum": "634", "writerCollect": "2514", "writerComment": "212", "writerFan": "387", "writerGrade": "7级", "writerIntegral": "11652", "writerName": "wohu1104", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125069987.jpg", "writerRankTotal": "1130", "writerRankWeekly": "4377", "writerThumb": "592", "writerVisitNum": "801832", "blog_read_count": "1423", "blog_time": "已于 2022-07-01 16:32:58 修改", "blog_title": "gdb 笔记（06）— 查看当前函数参数、查看结构体/类的值、查看数组的值", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night-eighties\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"1__0\"></a>1. 查看当前函数参数</h1>\n<p>当程序在函数中暂停后，即可查看函数的参数。语法如下：</p>\n<pre><code class=\"prism language-shell\">info args\n</code></pre>\n<p>或者</p>\n<pre><code class=\"prism language-shell\">i args\n</code></pre>\n<p>使用示例</p>\n<pre><code class=\"prism language-shell\"><span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span> b fun_test\nBreakpoint <span class=\"token number\">1</span> at 0x969: <span class=\"token function\">file</span> demo.cpp, line <span class=\"token number\">6</span>.\n<span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span> r\nStarting program: /home/wohu/cppProject/book_debug/chapter_3.1/demo \nret is <span class=\"token number\">8</span>\n\nBreakpoint <span class=\"token number\">1</span>, fun_test <span class=\"token punctuation\">(</span>a<span class=\"token operator\">=</span><span class=\"token number\">10</span>, <span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span>0x555555554b21 <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span> at demo.cpp:6\n<span class=\"token number\">6</span>\t    printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"a is %d, str is %s<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>, a, str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span> info args\na <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nstr <span class=\"token operator\">=</span> 0x555555554b21 <span class=\"token string\">\"test\"</span>\n<span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span> i args\na <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nstr <span class=\"token operator\">=</span> 0x555555554b21 <span class=\"token string\">\"test\"</span>\n<span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"2__27\"></a>2. 查看/修改变量的值</h1>\n<p>在程序命中断点时，可以查看变量的值。这个变量可以是全局变量，也可以是局部变量，而且当前上下文能够访问的变量都可以查看。语法如下：</p>\n<pre><code class=\"prism language-shell\">print 变量名 \n<span class=\"token comment\"># 或者</span>\np 变量名\n</code></pre>\n<p>如果要修改查看到的变量值，可以使用下述命令：</p>\n<pre><code class=\"prism language-shell\">print 变量名<span class=\"token operator\">=</span>值\n</code></pre>\n<p>即如果要改变 <code>x</code> 变量的值，将它修改为 20，可以使用命令 <code>p x=20</code> 。对于结构体或者类对象，也可以使用这种方式修改成员的值，例如 <code>p test-&gt;x=30</code> 、<code>p node.ID=100</code> 等。</p>\n<p>完整示例过程</p>\n<pre><code class=\"prism language-shell\"><span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span> p a\n<span class=\"token variable\">$1</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span> p str\n<span class=\"token variable\">$2</span> <span class=\"token operator\">=</span> 0x555555554b21 <span class=\"token string\">\"test\"</span>\n<span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span> p x <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\nNo symbol <span class=\"token string\">\"x\"</span> <span class=\"token keyword\">in</span> current context.\n<span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span> p a <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n<span class=\"token variable\">$3</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n<span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span> c\nContinuing.\na is <span class=\"token number\">20</span>, str is <span class=\"token builtin class-name\">test</span>\n\nBreakpoint <span class=\"token number\">1</span>, fun_test <span class=\"token punctuation\">(</span>a<span class=\"token operator\">=</span><span class=\"token number\">10</span>, <span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span>0x555555554b21 <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span> at demo.cpp:6\n<span class=\"token number\">6</span>\t    printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"a is %d, str is %s<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>, a, str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span> \n</code></pre>\n<h2><a id=\"21_gdb_58\"></a>2.1 使用gdb内嵌函数</h2>\n<p>在使用 <code>print</code> 或者 <code>p</code> 命令时，可以直接使用 <code>gdb</code> 内嵌的一些函数（比如 <code>C</code> 函数），比如 <code>sizeof</code> 、<code>strcmp</code> 等，也可以使用一些常见的表达式。当使用内嵌函数时，通常不是查看某个变量的值，而是进行一些计算或者比较等操作。这样，就可以实时地查看一些信息。</p>\n<p>比如，想了解 <code>long</code> 在 <code>Linux gcc</code> 下占用几个字节长度、某个结构体所占用的空间大小等，都可以使用<code>sizeof</code> 来计算。比如可以直接使用 <code>p sizeof(long)</code> 、<code>p sizeof(NODE)</code> 等。</p>\n<pre><code class=\"prism language-shell\"><span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span> p sizeof<span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$4</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n<span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span> p sizeof<span class=\"token punctuation\">(</span>long<span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$5</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span>\n<span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span> p sizeof<span class=\"token punctuation\">(</span>void*<span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$6</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span>\n<span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span> p <span class=\"token number\">12</span> <span class=\"token operator\">==</span> <span class=\"token number\">12</span>\n<span class=\"token variable\">$7</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n</code></pre>\n<h2><a id=\"22__72\"></a>2.2 查看结构体/类的值</h2>\n<p><img alt=\"1\" src=\"..\\..\\static\\image\\b81813078ad640e99c8915d987eeb3ff.png\"/><br/> 当命中第38行的断点时，可以查看 <code>new_node</code> 的值。由于 <code>new_node</code> 是一个指针，因此可以查看这个指针本身，也可以查看其成员的值，如图所示。</p>\n<p><img alt=\"56\" src=\"..\\..\\static\\image\\e358c59a2bbc472282dab7793fcd4912.png\"/><br/> 但是我们会发现，要查看结构体各个成员的值比较麻烦，因为这个结构体有 3 个数据成员，所以使用了3 次 <code>p</code> 命令。查看 <code>new_node</code> 结构体更加方便的方式是直接查看这个结构体的对象值，而不是<code>new_node</code> 指针本身。也就是说，在查看 <code>new_node</code> 指针指向的内容的值时，使用 <code>p *new_node</code> 可以显示整个结构体的成员信息，如图所示。</p>\n<p><img alt=\"57\" src=\"..\\..\\static\\image\\e142b41b91f1487e96fa4b3b80d8217a.png\"/><br/> 我们还可以删除上图中显示的空字符，使显示更美观。在 <code>gdb</code> 中输入 <code>set print null-stop</code> 命令，设置字符串的显示规则，即遇到结束符时停止显示。通过设置之后，再次执行 <code>p *new_node</code> 命令，Name部分不会再显示空字符，如图所示。</p>\n<p><img alt=\"58\" src=\"..\\..\\static\\image\\23ee6816a78d4ab5ae0d98362807d499.png\"/><br/> 如果结构体的成员比较多，这种显示仍然会杂乱无章，不方便查看每一个成员的数据，也就是说还不够漂亮（pretty）。<code>gdb</code> 还提供了一个使显示更加漂亮的选项，命令为 <code>set print pretty</code> 。设置之后，我们再次使用 <code>p *new_node</code> 命令来查看，结果如图所示。<br/> <img alt=\"59\" src=\"..\\..\\static\\image\\7a595c1a47ff4ea4aa2c4751247462c9.png\"/><br/> 类变量也可以使用 <code>p</code> 命令来显示，只要设置了 <code>print pretty</code> ，显示出来的类成员也与结构体成员相同，如图所示。<br/> <img alt=\"60\" src=\"..\\..\\static\\image\\131474241e0745b7a5b863bd12e66872.png\"/></p>\n<h2><a id=\"23__87\"></a>2.3 查看数组</h2>\n<p>同样，使用 <code>print</code> 或者 <code>p</code> 命令也可以查看数组的信息。<br/> <img alt=\"256\" src=\"..\\..\\static\\image\\2462f843d2f84bdca041e51c1621c417.png\"/>启动调试后，为print_arr_test函数设置断点，在该函数中查看两个数组iarr和strarr的值，如图所示。<br/> <img alt=\"61\" src=\"..\\..\\static\\image\\eae088c481744f6295e8c848f320ca5d.png\"/><br/> 该显示的问题与查看结构体的问题相同，即不太美观。在执行 <code>set print pretty</code> 命令后，数组的显示效果并没有改善。控制数组显示的命令为 <code>set print array on</code> ，其中 <code>on</code> 可以省略，默认情况下为 <code>off</code> ，因此在 <code>gdb</code> 中执行 <code>set print array</code> 命令，以便能够在显示数组时更方便查看，如图所示。<br/> <img alt=\"655\" src=\"..\\..\\static\\image\\ff01bf2eae9843ee9531f63e33baeccb.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-07-01 16:32:58", "summary": "查看当前函数参数当程序在函数中暂停后，即可查看函数的参数。语法如下：或者使用示例查看修改变量的值在程序命中断点时，可以查看变量的值。这个变量可以是全局变量，也可以是局部变量，而且当前上下文能够访问的变"}