{"blogid": "119153350", "writerAge": "码龄5年", "writerBlogNum": "336", "writerCollect": "2682", "writerComment": "207", "writerFan": "4945", "writerGrade": "6级", "writerIntegral": "6114", "writerName": "顾道长生'", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_119153350.jpg", "writerRankTotal": "3415", "writerRankWeekly": "9009", "writerThumb": "519", "writerVisitNum": "413477", "blog_read_count": "5212", "blog_time": "于 2021-07-27 21:12:50 发布", "blog_title": "c++枚举", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\238628065214988360.jpg\"/></p>\n<h1><a id=\"_2\"></a>一、枚举类型的定义</h1>\n<p>枚举类型的定义：<strong>枚举类型</strong>(enumeration)是 C++ 中的一种派生数据类型，它是由用户定义的若干枚举常量的集合。<br/> 定义格式：枚举类型的定义格式为：<code>enum &lt;类型名&gt; {&lt;枚举常量表&gt;};</code></p>\n<p>例如：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">color_set1</span> <span class=\"token punctuation\">{<!-- --></span>RED<span class=\"token punctuation\">,</span> BLUE<span class=\"token punctuation\">,</span> WHITE<span class=\"token punctuation\">,</span> BLACK<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义枚举类型color_set1</span>\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">week</span> <span class=\"token punctuation\">{<!-- --></span>Sun<span class=\"token punctuation\">,</span> Mon<span class=\"token punctuation\">,</span> Tue<span class=\"token punctuation\">,</span> Wed<span class=\"token punctuation\">,</span> Thu<span class=\"token punctuation\">,</span> Fri<span class=\"token punctuation\">,</span> Sat<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义枚举类型week</span>\n</code></pre>\n<h1><a id=\"_13\"></a>二、枚举声明</h1>\n<ol><li> <p>枚举类型定义与变量声明分开</p> <p>如：</p> <pre><code class=\"prism language-cpp\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Suit</span> <span class=\"token punctuation\">{<!-- --></span> Diamonds<span class=\"token punctuation\">,</span> Hearts<span class=\"token punctuation\">,</span> Clubs<span class=\"token punctuation\">,</span> Spades <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">enum</span> <span class=\"token class-name\">Suit</span> a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">enum</span> <span class=\"token class-name\">Suit</span> b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">;</span>\n</code></pre> <p>变量<code>a,b,c</code>的类型都定义为枚举类型<code>enum Suit</code>。</p> </li><li> <p>枚举类型定义与变量声明同时进行<br/> 如：</p> <pre><code class=\"prism language-cpp\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Suit</span> <span class=\"token punctuation\">{<!-- --></span> Diamonds<span class=\"token punctuation\">,</span> Hearts<span class=\"token punctuation\">,</span> Clubs<span class=\"token punctuation\">,</span> Spades <span class=\"token punctuation\">}</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//此处类型名可以省略，如以下的声明也是可以的。</span>\n\t<span class=\"token keyword\">enum</span> <span class=\"token punctuation\">{<!-- --></span> Diamonds<span class=\"token punctuation\">,</span> Hearts<span class=\"token punctuation\">,</span> Clubs<span class=\"token punctuation\">,</span> Spades <span class=\"token punctuation\">}</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">;</span>\n</code></pre> </li><li> <p>用<code>typedef</code>先将枚举类型定义为别名，再利用别名进行变量的声明<br/> 有以下几种方式：</p> <pre><code class=\"prism language-cpp\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Suit</span> <span class=\"token punctuation\">{<!-- --></span> Diamonds<span class=\"token punctuation\">,</span> Hearts<span class=\"token punctuation\">,</span> Clubs<span class=\"token punctuation\">,</span> Spades <span class=\"token punctuation\">}</span>Suit<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Suit</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Suit</span> b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">;</span>\n</code></pre> <pre><code class=\"prism language-cpp\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">enum</span><span class=\"token punctuation\">{<!-- --></span> Diamonds<span class=\"token punctuation\">,</span> Hearts<span class=\"token punctuation\">,</span> Clubs<span class=\"token punctuation\">,</span> Spades <span class=\"token punctuation\">}</span>Suit<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Suit</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Suit</span> b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">;</span>\n</code></pre> <pre><code class=\"prism language-cpp\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Suit</span> <span class=\"token punctuation\">{<!-- --></span> Diamonds<span class=\"token punctuation\">,</span> Hearts<span class=\"token punctuation\">,</span> Clubs<span class=\"token punctuation\">,</span> Spades <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Suit</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Suit</span> b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">;</span>\n</code></pre> </li></ol>\n<blockquote>\n<p>注意： 同一程序中不能定义同类型名的枚举类型；不同枚举类型的枚举元素不能同名。<br/> 枚举变量的值只能取枚举常量表中所列的值，就是整型数的一个子集。 枚举变量占用内存的大小与整型数相同。<br/> 枚举型可以隐式的转换为<code>int</code>型，int型不能隐式的转换为枚举型。<br/> 枚举变量只能参与赋值和关系运算以及输出操作，参与运算时用其本身的整数值。</p>\n</blockquote>\n<h1><a id=\"__66\"></a>三、 使用枚举类型的变量</h1>\n<h2><a id=\"31__68\"></a>3.1 对枚举型的变量赋值。</h2>\n<p>实例将枚举类型的赋值与基本数据类型的赋值进行了对比：<br/> <strong>方法一</strong>：先声明变量，再对变量赋值</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token comment\">/* 定义枚举类型 */</span>\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">DAY</span> <span class=\"token punctuation\">{<!-- --></span> MON<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> TUE<span class=\"token punctuation\">,</span> WED<span class=\"token punctuation\">,</span> THU<span class=\"token punctuation\">,</span> FRI<span class=\"token punctuation\">,</span> SAT<span class=\"token punctuation\">,</span> SUN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">/* 使用基本数据类型声明变量，然后对变量赋值 */</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">;</span>\n    \n    x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    y <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    z <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">/* 使用枚举类型声明变量，再对枚举型变量赋值 */</span>\n    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">DAY</span> yesterday<span class=\"token punctuation\">,</span> today<span class=\"token punctuation\">,</span> tomorrow<span class=\"token punctuation\">;</span>\n    \n    yesterday <span class=\"token operator\">=</span> MON<span class=\"token punctuation\">;</span>\n    today     <span class=\"token operator\">=</span> TUE<span class=\"token punctuation\">;</span>\n    tomorrow  <span class=\"token operator\">=</span> WED<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d %d \\n\"</span><span class=\"token punctuation\">,</span> yesterday<span class=\"token punctuation\">,</span> today<span class=\"token punctuation\">,</span> tomorrow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>方法二</strong>：声明变量的同时赋初值</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token comment\">/* 定义枚举类型 */</span>\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">DAY</span> <span class=\"token punctuation\">{<!-- --></span> MON<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> TUE<span class=\"token punctuation\">,</span> WED<span class=\"token punctuation\">,</span> THU<span class=\"token punctuation\">,</span> FRI<span class=\"token punctuation\">,</span> SAT<span class=\"token punctuation\">,</span> SUN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nitn <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">/* 使用基本数据类型声明变量同时对变量赋初值 */</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> z<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* 使用枚举类型声明变量同时对枚举型变量赋初值 */</span>\n    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">DAY</span> yesterday <span class=\"token operator\">=</span> MON<span class=\"token punctuation\">,</span> \n                        today <span class=\"token operator\">=</span> TUE<span class=\"token punctuation\">,</span>\n                   tomorrow <span class=\"token operator\">=</span> WED<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d %d \\n\"</span><span class=\"token punctuation\">,</span> yesterday<span class=\"token punctuation\">,</span> today<span class=\"token punctuation\">,</span> tomorrow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>方法三</strong>：定义类型的同时声明变量，然后对变量赋值。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token comment\">/* 定义枚举类型，同时声明该类型的三个变量，它们都为全局变量 */</span>\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">DAY</span> <span class=\"token punctuation\">{<!-- --></span> MON<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> TUE<span class=\"token punctuation\">,</span> WED<span class=\"token punctuation\">,</span> THU<span class=\"token punctuation\">,</span> FRI<span class=\"token punctuation\">,</span> SAT<span class=\"token punctuation\">,</span> SUN <span class=\"token punctuation\">}</span> yesterday<span class=\"token punctuation\">,</span> today<span class=\"token punctuation\">,</span> tomorrow<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 定义三个具有基本数据类型的变量，它们都为全局变量 */</span>\n<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">/* 对基本数据类型的变量赋值 */</span>\n    x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  y <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>  z <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">/* 对枚举型的变量赋值 */</span>\n    yesterday <span class=\"token operator\">=</span> MON<span class=\"token punctuation\">;</span>\n    today     <span class=\"token operator\">=</span> TUE<span class=\"token punctuation\">;</span>\n    tomorrow  <span class=\"token operator\">=</span> WED<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d %d \\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出：10 20 30</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d %d \\n\"</span><span class=\"token punctuation\">,</span> yesterday<span class=\"token punctuation\">,</span> today<span class=\"token punctuation\">,</span> tomorrow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出：1 2 3</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>方法四</strong>：类型定义，变量声明，赋初值同时进行。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token comment\">/* 定义枚举类型，同时声明该类型的三个变量，并赋初值。它们都为全局变量 */</span>\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">DAY</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    MON<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \n    TUE<span class=\"token punctuation\">,</span>\n    WED<span class=\"token punctuation\">,</span>\n    THU<span class=\"token punctuation\">,</span>\n    FRI<span class=\"token punctuation\">,</span>\n    SAT<span class=\"token punctuation\">,</span>\n    SUN \n<span class=\"token punctuation\">}</span>\nyesterday <span class=\"token operator\">=</span> MON<span class=\"token punctuation\">,</span> today <span class=\"token operator\">=</span> TUE<span class=\"token punctuation\">,</span> tomorrow <span class=\"token operator\">=</span> WED<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 定义三个具有基本数据类型的变量，并赋初值。它们都为全局变量 */</span>\n<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> z <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d %d \\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出：10 20 30</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d %d \\n\"</span><span class=\"token punctuation\">,</span> yesterday<span class=\"token punctuation\">,</span> today<span class=\"token punctuation\">,</span> tomorrow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出：1 2 3</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"32__174\"></a>3.2 对枚举型的变量赋整数值时，需要进行类型转换</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">DAY</span> <span class=\"token punctuation\">{<!-- --></span> MON<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> TUE<span class=\"token punctuation\">,</span> WED<span class=\"token punctuation\">,</span> THU<span class=\"token punctuation\">,</span> FRI<span class=\"token punctuation\">,</span> SAT<span class=\"token punctuation\">,</span> SUN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">DAY</span> yesterday<span class=\"token punctuation\">,</span> today<span class=\"token punctuation\">,</span> tomorrow<span class=\"token punctuation\">;</span>\n\n    yesterday <span class=\"token operator\">=</span> TUE<span class=\"token punctuation\">;</span>\n    today <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">enum</span> <span class=\"token class-name\">DAY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>yesterday <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//类型转换</span>\n    tomorrow <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">enum</span> <span class=\"token class-name\">DAY</span><span class=\"token punctuation\">)</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//类型转换</span>\n    <span class=\"token comment\">//tomorrow = 3; //错误</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d %d \\n\"</span><span class=\"token punctuation\">,</span> yesterday<span class=\"token punctuation\">,</span> today<span class=\"token punctuation\">,</span> tomorrow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出：2 3 30</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"33__194\"></a>3.3 使用枚举型变量</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token keyword\">enum</span>\n<span class=\"token punctuation\">{<!-- --></span> \n    BELL          <span class=\"token operator\">=</span> <span class=\"token string\">'\\a'</span><span class=\"token punctuation\">,</span>\n    BACKSPACE <span class=\"token operator\">=</span> <span class=\"token string\">'\\b'</span><span class=\"token punctuation\">,</span>\n    HTAB         <span class=\"token operator\">=</span> <span class=\"token string\">'\\t'</span><span class=\"token punctuation\">,</span>\n    RETURN      <span class=\"token operator\">=</span> <span class=\"token string\">'\\r'</span><span class=\"token punctuation\">,</span>\n    NEWLINE    <span class=\"token operator\">=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">,</span> \n    VTAB         <span class=\"token operator\">=</span> <span class=\"token string\">'\\v'</span><span class=\"token punctuation\">,</span>\n    SPACE       <span class=\"token operator\">=</span> <span class=\"token string\">' '</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">BOOLEAN</span> <span class=\"token punctuation\">{<!-- --></span> FALSE <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> TRUE <span class=\"token punctuation\">}</span> match_flag<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> count_of_letter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> count_of_space <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"I'm Ely efod\"</span><span class=\"token punctuation\">;</span>\n\n    match_flag <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> str<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> SPACE <span class=\"token operator\">!=</span> str<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>\n            count_of_letter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            match_flag <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">enum</span> <span class=\"token class-name\">BOOLEAN</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            count_of_space<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %d times %c\"</span><span class=\"token punctuation\">,</span> match_flag <span class=\"token operator\">?</span> <span class=\"token string\">\"match\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"not match\"</span><span class=\"token punctuation\">,</span> count_of_space<span class=\"token punctuation\">,</span> NEWLINE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count of letters: %d %c%c\"</span><span class=\"token punctuation\">,</span> count_of_letter<span class=\"token punctuation\">,</span> NEWLINE<span class=\"token punctuation\">,</span> RETURN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-bash\">输出：\nmatch <span class=\"token number\">2</span> <span class=\"token builtin class-name\">times</span>\ncount of letters: <span class=\"token number\">10</span>\nPress any key to <span class=\"token builtin class-name\">continue</span>\n</code></pre>\n<h1><a id=\"_244\"></a>四、综合实例</h1>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">Season</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    spring<span class=\"token punctuation\">,</span> summer<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> fall<span class=\"token operator\">=</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span> winter\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">enum</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Monday<span class=\"token punctuation\">,</span> Tuesday<span class=\"token punctuation\">,</span> Wednesday<span class=\"token punctuation\">,</span> Thursday<span class=\"token punctuation\">,</span> Friday<span class=\"token punctuation\">,</span> Saturday<span class=\"token punctuation\">,</span> Sunday\n<span class=\"token punctuation\">}</span>\nWeekday<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">/* Season */</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \\n\"</span><span class=\"token punctuation\">,</span> spring<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d, %c \\n\"</span><span class=\"token punctuation\">,</span> summer<span class=\"token punctuation\">,</span> summer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100, d</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \\n\"</span><span class=\"token punctuation\">,</span> fall<span class=\"token operator\">+</span>winter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 193</span>\n\n    Season mySeason<span class=\"token operator\">=</span>winter<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>winter<span class=\"token operator\">==</span>mySeason<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mySeason is winter \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// mySeason is winter</span>\n    \n    <span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">==</span>summer<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x is equal to summer\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// x is equal to summer</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d bytes\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>spring<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4 bytes</span>\n\n    <span class=\"token comment\">/* Weekday */</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sizeof Weekday is: %d \\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Weekday<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//sizeof Weekday is: 4</span>\n\n    Weekday today <span class=\"token operator\">=</span> Saturday<span class=\"token punctuation\">;</span>\n    Weekday tomorrow<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>today <span class=\"token operator\">==</span> Monday<span class=\"token punctuation\">)</span>\n        tomorrow <span class=\"token operator\">=</span> Tuesday<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        tomorrow <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Weekday<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>today <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//remember to convert from int to Weekday</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>重要提示 枚举变量可以直接输出，但不能直接输入。如：<code>cout &gt;&gt; color3;</code> //非法 不能直接将常量赋给枚举变量。如：<br/> <code>color1=1</code>; //非法 不同类型的枚举变量之间不能相互赋值。如： <code>color1=color3</code>; //非法<br/> 枚举变量的输入输出一般都采用switch语句将其转换为字符或字符串；枚举类型数据的其他处理也往往应用<code>switch</code>语句，以保证程序的合法性和可读性。</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-07-27 21:12:50", "summary": "在这里插入图片描述一、枚举类型的定义枚举类型的定义：枚举类型是中的一种派生数据类型，它是由用户定义的若干枚举常量的集合。定义格式：枚举类型的定义格式为：类型名枚举常量表例如：定义枚举类型定义枚举类型二"}