{"blogid": "124780920", "writerAge": "码龄2年", "writerBlogNum": "6", "writerCollect": "76", "writerComment": "16", "writerFan": "8", "writerGrade": "2级", "writerIntegral": "144", "writerName": "WayneLJL", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124780920.jpg", "writerRankTotal": "96444", "writerRankWeekly": "695667", "writerThumb": "34", "writerVisitNum": "5078", "blog_read_count": "1564", "blog_time": "于 2022-05-15 12:53:44 发布", "blog_title": "基于PHP、Mysql的电影院售票系统", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h2> 一、系统特色</h2>\n<h3>（一）、系统角色</h3>\n<p>        分为<strong>用户端</strong>、<strong>管理员端</strong>以及<strong>游客端</strong>三大参与者。如下图所示：</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\9434e493694d4bbd9f7ad2b262da2655.png\"/></p>\n<h3>（二）、系统特色</h3>\n<p>        1.可以使用PHPExecl插件来批量读取本地存储中的execl表格进行添加电影信息，也可以反操作下载数据库中的电影信息以表格的方式读取出来；</p>\n<p>        2.大量使用Php嵌入JavaScript以及Html的格式化语句；</p>\n<p>        3.采用时间戳与定时器，设置电影过时间则不可购买的效果。</p>\n<h2><strong>二、需求分析</strong></h2>\n<p>        1.关于用户，即包括游客、普通用户和管理员三个角色的注册、登录与修改删除，并加以后台数据化管理；</p>\n<p>        2.关于电影与影院的增删改查，管理员可以根据当前情况进行实时分析，确认是否有该电影或影院的存在；</p>\n<p>        3.关于放映计划安排的增删改查，管理员可以根据电影ID与影院ID进行多表查询；</p>\n<p>        4.关于座位的订购，用户可以根据放映安排编号对每一部电影、每一个影院、每一个影厅的不同情况进行分别操作；</p>\n<p>        5.关于用户订票的查询，用户可以通过查询个人信息界面进行添加与删除；</p>\n<p>        6.管理员可以查询到所有用户、电影、影院、放映安排与座位订购的信息；</p>\n<p>        7.所有角色都可以根据信息界面修改自己的用户名与密码，或者查看系统电影资讯。</p>\n<h2>三、总体设计</h2>\n<h3>（一）、概念设计</h3>\n<p>        根据电影院管理的设计理念，将上述需求分析阶段得到的功能需求进行分析、总结、归纳，得到该管理系统的实体以及实体属性，并在这里采用E-R图的方式抽象成信息结构即概念模型，其中根据实体间联系，如下图所示：</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\7011cbff1c274afdb1ae99bc5e94e3a9.png\"/></p>\n<h3>（二）、逻辑设计</h3>\n<p>关系模式(关系模型)</p>\n<p>1.用户(用户ID，用户名，密码，用户头像路径)；</p>\n<p>2.管理员(管理员ID，管理员姓名，密码)；</p>\n<p>3.电影(电影ID，电影中文名，电影英文名，上映时间，清晰度，国籍，电影描述，电影封面图片路径，海报图片路径，主演人员，电影类型)；</p>\n<p>4.影院(影院ID，影院名称，影院类型，影院地址，影院距离，影院最低消费)；</p>\n<p>5.放映安排(放映安排ID，起止时间，放映版本，价格，影厅ID，影院ID，电影ID)；</p>\n<p>6.座位(座位ID，用户ID，放映安排ID，座位行数，座位列数)；</p>\n<h3>（三）、物理设计</h3>\n<p>        通过关系模型，我们能进一步确立实体间的相互关系，从而方便我们进行下一步操作，按照存储结构和存取方法我们构成了数据库物理结构，这里主要根据我们总结得出的关系模型，进行表结构的建立，做出具体表格结构示意图，由于系统结构庞大，表格体现选择以电影信息表的部分典型字段为例，如下所示：</p>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\"><tbody><tr><td> <p>字段名</p> </td><td> <p>数据类型</p> </td><td> <p>长度</p> </td><td> <p>是否允许null值</p> </td><td> <p>约束</p> </td><td> <p>备注</p> </td></tr><tr><td> <p>movie_id</p> </td><td> <p>Int</p> </td><td> <p>20</p> </td><td> <p>否</p> </td><td> <p>主键</p> </td><td> <p>电影编号</p> </td></tr><tr><td> <p>movie_name</p> </td><td> <p>Char</p> </td><td> <p>100</p> </td><td> <p>否</p> </td><td> <p>无</p> </td><td> <p>电影名称</p> </td></tr><tr><td> <p>movie_type</p> </td><td> <p>Char</p> </td><td> <p>100</p> </td><td> <p>否</p> </td><td> <p>无</p> </td><td> <p>电影类型</p> </td></tr><tr><td> <p>movie_definition</p> </td><td> <p>Char</p> </td><td> <p>100</p> </td><td> <p>否</p> </td><td> <p>无</p> </td><td> <p>电影清晰度</p> </td></tr><tr><td> <p>movie_time</p> </td><td> <p>Char</p> </td><td> <p>100</p> </td><td> <p>否</p> </td><td> <p>无</p> </td><td> <p>电影上映时间</p> </td></tr><tr><td> <p>movie_image</p> </td><td> <p>Char</p> </td><td> <p>100</p> </td><td> <p>否</p> </td><td> <p>无</p> </td><td> <p>电影封面图片</p> </td></tr></tbody></table>\n<p>        根据上述的需求分析，以及功能的确认与设计，我们这里采用架构的理解模式，即在正式开始功能实现之前，对整体架构有一个模型似的认识，对每一个分区的实现效果进行区分，方便后期对项目制作时间的可行性分配，因此，这里我们采用常和数据库E-R图配套出线的总体设计图，来展示后面对过程中每一分区的功能实现。</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\73102a0b5892499d835d011a64016e77.png\"/></p>\n<h2>四、详细设计</h2>\n<h3>（一）、游客界面的设计</h3>\n<p>        这里未登录的游客可以查看首页信息，而如若想跳转其他信息界面则会提示先登录后跳转到登录界面。</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\435574e06d5644cebdad75182dfd9c31.png\"/></p>\n<p></p>\n<h3>（二）、用户界面设计</h3>\n<h3>1.登录与注册界面的设计 </h3>\n<p>        注册界面与登录界面采用两个盒子模型div进行嵌套，根据用户点击不同的模块进行动态切换，从一定程度上，大大减少了代码量的冗余，而对于前端背景的设置，我继续结合之前学期对HTML5的学习，使用video控件切入了动态视频作为登录界面的前端效果，并为其设置一个调节透明度opacity遮罩层后的画布，增加高科技效果。</p>\n<div class=\"csdn-video-box\">\n<iframe allowfullscreen=\"true\" data-mediaembed=\"csdn\" id=\"PFQuzh3r-1652583033104\" src=\"https://live.csdn.net/v/embed/208375\"></iframe>\n<p>Home</p>\n</div>\n<p>         对于后端PHP的开发，这里我利用mysqli_num_rows的方法对查询结果集的数据进行了统计，以此来达到用户输入数据与系统数据库匹配的效果，注意这里的mysqli_affect_rows是对上一次查询结果所影响行数的统计，需要严格区分，随后我们调用SESSION进行传值，嵌套script语句跳转到相应的界面。部分截图如下所示：</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\9e684564a61445868840a89e848a1636.png\"/></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\23d5f1cc46824b57a069a90945ce157d.png\"/></p>\n<p>        由 上图可以看出，用户在注册时还需填写自己的安全问题，以防止忘记密码后进行核对。若点击登录界面的忘记密码，则跳转至账号输入界面，答对安全问题后即可重新修改密码，部分代码如下所示：</p>\n<pre><code class=\"language-php\"> &lt;?php\n                                        require_once '../process/connect.php';\n                                        require_once '../process/functions.php';\n                                        if (isset($_GET['username'])){\n                                            $sql= \"select * from user_message where user_name='{$_GET['username']}'\";\n                                            $userMsg = selectOne($link,$sql);\n                                            $password = $userMsg['password'];\n                                            echo \"&lt;script&gt;\";\n                                            echo \"var username = document.getElementById('myusername');\";\n                                            echo \"var mypassword = document.getElementById('mypassword');\";\n                                            echo \"var li1 = document.getElementById('li1');\";\n                                            echo \"var li2 = document.getElementById('li2');\";\n                                            echo \"li1.setAttribute('class','gtco-second');\";\n                                            echo \"li2.setAttribute('class','active gtco-first');\";\n                                            echo \"var div1 = document.getElementById('mydiv1');\";\n                                            echo \"var div2 = document.getElementById('mydiv2');\";\n                                            echo \"div1.setAttribute('class','tab-content-inner');\";\n                                            echo \"div2.setAttribute('class','tab-content-inner active');\";\n                                            echo \"username.value={$_GET['username']};\";\n                                            echo \"mypassword.value={$userMsg['password']};\";\n                                            echo \"&lt;/script&gt;\";\n                                        }\n                                        ?&gt;</code></pre>\n<h3>2.主界面的设计       </h3>\n<p>        经过用户登录，首先跳转到的界面应该是对电影整体信息的一个展示，这里的前端编写，我才用了Chinaz与商业信息的一部分模板，调用script中的setTimeout函数，对每一页的信息进行循环展示，这里由于为了更好的体现电影院前端系统的可视化效果，我又在后面设置了script代码中的经典案例——手风琴效果，来体现电影的相关信息，从而在一定程度上使界面科技感更加酷炫。代码展示如下：</p>\n<pre><code class=\"language-html\">&lt;header class=\"slider\"&gt;\n    &lt;div class=\"main-slider\"&gt;\n        &lt;div class=\"swiper-wrapper\"&gt;\n            &lt;?php\n            foreach ($movies as $movie) {\n                ?&gt;\n                &lt;div class=\"swiper-slide\"&gt;\n                    &lt;div class=\"slide-inner bg-image\" data-background=\"&lt;?php echo $movie['movie_image']; ?&gt;\"&gt;\n                        &lt;div class=\"container\" data-swiper-parallax=\"200\"&gt;\n                            &lt;h6 class=\"tagline\"&gt;新上映 NewFashion&lt;/h6&gt;\n                            &lt;h2 class=\"name\"&gt;&lt;?php echo $movie['movie_name']; ?&gt;&lt;br&gt;\n                                &lt;strong&gt;&lt;?php echo $movie['movie_ename']; ?&gt;&lt;/strong&gt;&lt;/h2&gt;\n                            &lt;ul class=\"features\"&gt;\n                                &lt;li&gt;\n                                    &lt;div class=\"year\"&gt;&lt;?php echo $movie['movie_time']; ?&gt;&lt;/div&gt;\n                                &lt;/li&gt;\n                                &lt;li&gt;\n\n                                    &lt;div class=\"hd\"&gt;&lt;?php echo strrev(substr(strrev($movie['movie_definition']), 2)); ?&gt;\n                                        &lt;b&gt;&lt;?php echo substr($movie['movie_definition'], -2); ?&gt;&lt;/b&gt;&lt;/div&gt;\n                                &lt;/li&gt;\n                                &lt;li&gt;\n                                    &lt;div class=\"tags\"&gt;&lt;?php echo $movie['movie_country']; ?&gt;&lt;/div&gt;\n                                &lt;/li&gt;\n                            &lt;/ul&gt;\n                            &lt;p class=\"description\"&gt;&lt;?php echo $movie['movie_description']; ?&gt;\n                            &lt;/p&gt;\n                            &lt;a href=\"movie-single.html\" class=\"play-btn\"&gt;详情信息&lt;/a&gt;&lt;/div&gt;\n                        &lt;!-- end container --&gt;\n                    &lt;/div&gt;\n                    &lt;!-- end slide-inner --&gt;\n                &lt;/div&gt;\n                &lt;!-- end swiper-slide --&gt;\n            &lt;?php } ?&gt;\n        &lt;/div&gt;\n        &lt;!-- end swiper-wrapper --&gt;\n        &lt;div class=\"swiper-pagination\"&gt;&lt;/div&gt;\n        &lt;!-- end swiper-pagination --&gt;\n    &lt;/div&gt;\n    &lt;!-- end main-slider --&gt;\n&lt;/header&gt;\n&lt;!-- end slider --&gt;</code></pre>\n<p>        对于后端PHP代码的实现，这里对第一个定时器滑动模板，使用了查找全部movie数据表的信息，为了体现每一部电影的具体信息，从而进一步吸引大众，而对于下部分的手风琴展示效果，则使用了limit限制语句，限制了movie数据表信息的输出，从而达到最佳的可视化效果。</p>\n<div class=\"csdn-video-box\">\n<iframe allowfullscreen=\"true\" data-mediaembed=\"csdn\" id=\"RYpfynBH-1652586702308\" src=\"https://live.csdn.net/v/embed/208389\"></iframe>\n<p>MyHome -</p>\n</div>\n<p>        接着，便是对每个界面都有的右上角信息栏的设计，这里利用了很多模板寻找灵感，最终采用了HTML5的新标签i作为展示载体，并设置它的border-radious属性为50%，硬性规划个人信息头像的展示方式，接着便是普通文本节点的输入，实现效果为，若传递用户SESSION值，则根据传入的用户ID进行信息查找，将用户头像与用户名展示在一旁，并可选择退出登录，而若未检测到值，则显示用户登录。需要注意的是，这里对前端效果的展示尤为精确，即为了更大程度的贴近生活，我想看到的细节在于，如何在检测到信息后，只有新增添的退出登录有a标签的链接，而用户名身上则不加其余操作，这里对于script代码的体现便在于DOM元素的获取以及createElement、append方法的使用。如何在指定盒子内创建我们需要的元素节点显得尤为重要。部分代码如下：</p>\n<pre><code class=\"language-php\">&lt;?php\nrequire_once '../process/connect.php';\nrequire_once '../process/functions.php';\n$selectSql = \"select * from movie_message\";\n$movies = selectAll($link, $selectSql);\n$selectSql8 = \"select * from movie_message limit 4\";\n$movies2 = selectAll($link, $selectSql8);\nif(isset($_SESSION[\"user_id\"])){\n    $user_id=$_SESSION[\"user_id\"];\n    $selectSql1=\"select * from user_message where user_id = {$user_id}\";\n    $user_Msg=selectOne($link,$selectSql1);\n}\n?&gt;</code></pre>\n<h3>3.电影资讯界面的设计 </h3>\n<p>        根据我们平常订购电影票使用的美团平台、猫眼平台、万达小程序等多个线上管理系统的了解，对于电影订购的模式大致分为两种，即根据电影信息进行查找和根据影院信息进行查找。这里我们先模拟根据电影的类型进行选票的过程，通过对其余模板的分析，我发现，使用类型筛选作为整体电影筛选的实现效果可以更加还原现实生活中的种种情况，更加方便用户对自己喜好的电影进行范围的进一步缩小。</p>\n<p>        例如，若类型存在，则判断国家信息，进而判断年份信息，而在类型存在的if大括号内仍需继续判断每种信息是否存在的情况，若不存在，则需要一并调用变量值，这里我额外设置了三个href的值，分别对应三个多选框内的属性，点到哪个则传递哪个的字段值，需要注意的是，一部分值的查找，若等号右侧为0，则默认查找全部语句，而另一部分字段则需要右侧为字段名本身，不同的查找效果需要进行简单区分，具体实现效果如下图所示：     </p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\f316f4a9e850437f89030ff3059ff07b.png\"/>   </p>\n<p>         部分代码实现如下：</p>\n<pre><code class=\"language-php\">if(isset($_GET[\"type\"])){\n    $href1=\"?type=\".$_GET[\"type\"].\"&amp;\";\n    $href2=\"?\";\n    $href3=\"?type=\".$_GET[\"type\"].\"&amp;\";\n    $search_type = $_GET[\"type\"];\n    if(isset($_GET[\"country\"])){\n        $href2=\"?country=\".$_GET[\"country\"].\"&amp;\";\n        $href3=\"?type=\".$_GET[\"type\"].\"&amp;\".\"country=\".$_GET[\"country\"].\"&amp;\";\n        $search_country = $_GET[\"country\"];\n        if(isset($_GET[\"time\"])){\n            $href2=\"?country=\".$_GET[\"country\"].\"&amp;\".\"time=\".$_GET['time'].\"&amp;\";\n            $href1=\"?type=\".$_GET[\"type\"].\"&amp;\".\"time=\".$_GET['time'].\"&amp;\";\n            $search_time = $_GET[\"time\"];\n            $selectSql3 = \"select * from movie_message where movie_country = '{$search_country}' and movie_type = '{$search_type}' and movie_time='{$search_time}'\";\n        }else{\n            $search_time = \"movie_time\";\n            $selectSql3 = \"select * from movie_message where movie_country = '{$search_country}' and movie_type = '{$search_type}'\";\n        }\n    }else{\n        $href2=\"?\";\n        $href3=\"?type=\".$_GET[\"type\"].\"&amp;\";\n        $search_country = 0;\n        $search_type = $_GET[\"type\"];\n        if(isset($_GET[\"time\"])){\n            $href2=\"?time=\".$_GET['time'].\"&amp;\";\n            $href1=\"?type=\".$_GET[\"type\"].\"&amp;\".\"time=\".$_GET['time'].\"&amp;\";\n            $search_time = $_GET[\"time\"];\n            $selectSql3 = \"select * from movie_message where movie_type = '{$search_type}' and movie_time='{$search_time}'\";\n        }else{\n            $search_time = \"movie_time\";\n            $selectSql3 = \"select * from movie_message where movie_type = '{$search_type}'\";\n        }\n    }\n}elseif(isset($_GET[\"country\"])){\n    $href1=\"?\";\n    $href2=\"?country=\".$_GET[\"country\"].\"&amp;\";\n    $href3=\"?country=\".$_GET[\"country\"].\"&amp;\";\n    $search_type = 0;\n    $search_country = $_GET[\"country\"];\n    if(isset($_GET[\"time\"])){\n        $href2=\"?country=\".$_GET[\"country\"].\"&amp;\".\"time=\".$_GET['time'].\"&amp;\";\n        $href1=\"?time=\".$_GET['time'].\"&amp;\";\n        $search_time = $_GET[\"time\"];\n        $selectSql3 = \"select * from movie_message where movie_country = '{$search_country}' and movie_time='{$search_time}'\";\n    }else{\n        $search_time = \"movie_time\";\n        $selectSql3 = \"select * from movie_message where movie_country = '{$search_country}'\";\n    }\n}elseif(isset($_GET[\"time\"])){\n    $href3=\"?\";\n    $href2=\"?time=\".$_GET[\"time\"].\"&amp;\";\n    $href1=\"?time=\".$_GET[\"time\"].\"&amp;\";\n    $search_type = 0;\n    $search_time = $_GET[\"time\"];\n    if(isset($_GET[\"country\"])){\n        $href2=\"?time=\".$_GET[\"time\"].\"&amp;\".\"country=\".$_GET['country'].\"&amp;\";\n        $href3=\"?time=\".$_GET['time'].\"&amp;\";\n        $search_country = $_GET[\"country\"];\n        $selectSql3 = \"select * from movie_message where movie_country = '{$search_country}' and movie_time='{$search_time}'\";\n    }else{\n        $search_country = 0;\n        $selectSql3 = \"select * from movie_message where movie_time = '{$search_time}'\";\n    }\n}else{\n    $href1=\"?\";\n    $href2=\"?\";\n    $href3=\"?\";\n    $search_type = 0;\n    $search_country = 0;\n    $search_time = \"movie_time\";\n    $selectSql3 = \"select * from movie_message\";\n}\n$typeMegs = selectAll($link,$selectSql3);\nif(isset($_SESSION[\"user_id\"])){\n    $user_id=$_SESSION[\"user_id\"];\n    $selectSql1=\"select * from user_message where user_id = {$user_id}\";\n    $user_Msg=selectOne($link,$selectSql1);\n}\n</code></pre>\n<p>        整体展示效果如下所示：</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\3451060342bd4c1b821907983aa3e78d.png\"/></p>\n<h3>4.电影购票+放映安排+选票界面的设计</h3>\n<p>        这里对于影院信息的设计，我依旧延续了电影信息筛选界面的三重多选框，即根据不同的_GET传值，对展示信息进行不断的多次筛选，最终实现用户想要看到的小范围效果，此处的前端模板，我选用了猫眼电影的模板信息，即利用我们Python学到的爬虫技术，对网页模板进行爬取，将最终的前端效果设置其CSS样式，达到所需要的信息模式。而这里的选座购票按钮则继续使用了a标签的href属性的链接方式传递_GET请求，跳转到放映安排playtime界面，并向其传递电影的编号与影厅的编号信息。</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\1e08646cefd24391929a13b592d1e4f8.png\"/></p>\n<p>        通过影院的选择，跳转到放映安排即影厅的选择界面，并传值。 </p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\792da5afef834f3fb17e0ceb40d09c50.png\"/></p>\n<p>        这里引入了开始第一种选择电影的方式，及根据电影直接跳选至影院信息选择界面的情况，则会直接向该放映安排界面传入一个电影ID值，那么，该界面的信息则会根据这个_GET传值重新设置界面信息，而该页面的处理是对最终电影票订票界面的最终审查，会根据放映安排的编号，查出放映的厅号、起止时间、放映版本、票价与放映安排的编号并进行按钮的值传递。具体代码如下：</p>\n<pre><code class=\"language-php\">&lt;?php\nrequire_once '../process/connect.php';\nrequire_once '../process/functions.php';\nif(isset($_GET['movie_id'])){\n    $myId = $_GET['movie_id'];\n}elseif(isset($_GET['id'])) {\n    $myId = $_GET['id'];\n}else{\n    $myId = 1;\n}\n\n\n$selectSql3 = \"select * from movie_message where movie_id = {$myId}\";\n$movies = selectOne($link, $selectSql3);\n$selectSql1 = \"select * from movie_message\";\n$cinema_name=$_GET[\"cinema_name\"];\n$selectSql4 = \"select * from cinema_message where cinema_name = '{$cinema_name}'\";\n$cinema_message=selectOne($link,$selectSql4);\n$movieMegs = selectAll($link,$selectSql1);\n$selectSql2 = \"select * from playtime_message where movie_id = {$myId} and cinema_id= {$cinema_message['cinema_id']}\";\n$playtimeMegs = selectAll($link,$selectSql2);\n$movie_id=$_GET['movie_id'];\n$_SESSION[\"movie_name\"]=$movies[\"movie_name\"];\n$_SESSION[\"movie_image\"]=$movies[\"movie_show\"];\n$_SESSION[\"cinema_name\"]=$_GET[\"cinema_name\"];\n$user_id=$_SESSION[\"user_id\"];\n$selectSql1=\"select * from user_message where user_id = {$user_id}\";\n$user_Msg=selectOne($link,$selectSql1);\n//echo \"&lt;pre&gt;\";\n//print_r($_GET);\n//echo \"&lt;/pre&gt;\"\n?&gt;</code></pre>\n<p>        最后是对电影院座位的选择，这里对于展示栏，这里通过不断的a标签罗列，对每一个a标签设置了背景图片，并设置其id、name与value值以方便后期PHP代码的添加，为模拟电影院的内部设置，这里我也充分使用HTML的盒子模型，首先对每一种座位信息进行了注释，也标记了荧幕与中心线的划分效果。接着是对右边信息栏的设计，这里我仅仅采用ul-li的列表标签进行一一输出。</p>\n<p>        在前端样式设计完毕后，就是对后台数据的分析处理了，这里我们将功能一个个实现，首先是对用户的座位选定能够实现循环点击循环变色，本来是想到了JavaScript中曾学到的toggle方法，但尝试多次未果，最终采用赋初值的方式，让一个标定值也参与循环，并在循环中实现累加操作，进而根据它的值来判断座位的样式改变，接着便是对右侧信息栏座位信息的即时性变化的设计，这里我考虑到与三重多选框类似的情况，比如用户在选座后，可以不按选票的顺序进行取消，那么怎么根据信息实时性准确的显示出我们点击的座椅位置呢？这里我采用自己设置其value值的一个笨方法，对每一个座椅实例化，即规定其每一个的onclick方法中对信息输出的元素节点中添加的文本节点的值 。</p>\n<div class=\"csdn-video-box\">\n<iframe allowfullscreen=\"true\" data-mediaembed=\"csdn\" id=\"lusKWYe0-1652586716084\" src=\"https://live.csdn.net/v/embed/208395\"></iframe>\n<p>Tickets</p>\n</div>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\614be72ed8d24d719f7d0846ccd4f1f1.png\"/></p>\n<p>         具体代码展示如下：</p>\n<pre><code class=\"language-php\">&lt;?php\nrequire_once '../process/connect.php';\nrequire_once '../process/functions.php';\n$userID=$_SESSION['user_id'];\n$playtime_id=$_GET['playtime_id'];\n$selectSql = \"select * from seat_message where playtime_id={$playtime_id} and user_id = {$userID}\";\n$seatMegs = selectAll($link,$selectSql);\n$image=$_SESSION['movie_image'];\n$movie_name=$_SESSION[\"movie_name\"];\n$movie_hall=$_GET[\"moviehall_id\"];\n$cinema_name=$_SESSION[\"cinema_name\"];\n$language=$_GET[\"language\"];\n$start_time=$_GET['start_time'];\n$price=$_GET['price'];\n$_SESSION[\"playtime_id\"]=$playtime_id;\n$user_id=$_SESSION[\"user_id\"];\n$selectSql1=\"select * from user_message where user_id = {$user_id}\";\n$user_Msg=selectOne($link,$selectSql1);\n\nif(isset($_GET['flag'])){\n    $playtime_id=$_GET['playtime_id'];\n    $selectSql = \"select * from playtime_message where playtime_id={$playtime_id}\";\n    $playtimeMegs = selectOne($link,$selectSql);\n    $selectSql2 = \"select * from movie_message where movie_id={$playtimeMegs['movie_id']}\";\n    $movieMegs = selectOne($link,$selectSql2);\n    $image=$movieMegs['movie_image'];\n    $movie_name=$movieMegs[\"movie_name\"];\n    $movie_hall=$playtimeMegs[\"moviehall_id\"];\n    $cinema_name=$_SESSION[\"cinema_name\"];\n    $language=$playtimeMegs[\"language\"];\n    $start_time=$playtimeMegs['begin_time'];\n    $price=$playtimeMegs['price'];\n}\n\n?&gt;</code></pre>\n<p>         可实现同步更改。</p>\n<h3>5.个人信息界面的设计</h3>\n<p>        首先查找出用户的单条记录与座位订购的全部信息，使用foreach语句对信息进行输出，接着便是对input中type属性为file文件类型的操作进行处理，即调用move_uploaded_file函数对传入的文本路径信息进行保存。最后就是对已订座椅信息的操作，删除操作仅是_GET传值的方式，对传入的座椅编号进行where子句的确认并进行Sql语句执行，而座椅信息修改这里便需要传入一个标记量。</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\97a459e9f2f049de8530fb61b673c325.png\"/></p>\n<p>        如若用户需要修改，则可以点击按钮重新跳转至选票界面。</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\043a7e52176c40f9b963e68cb5698bb7.png\"/></p>\n<p>         具体代码展示如下：</p>\n<pre><code class=\"language-php\"> &lt;?php\n                if (!isset($_SESSION[\"username\"])) {\n                    echo \"用户登录\";\n                    echo \"&lt;script&gt;\";\n                    echo \"var i1 = document.createElement('i');\";\n                    echo \"i1.setAttribute('class','lni lni-user');\";\n                    echo \"var myOut = document.getElementById('myOut');\";\n                    echo \"myOut.append(i1);\";\n                    echo \"&lt;/script&gt;\";\n                } else {\n                    echo $_SESSION[\"username\"];\n                    echo \"&lt;script&gt;\";\n                    echo \"var myUsername=document.getElementById('myUsername');\";\n                    echo \"myUsername.removeAttribute('href');\";\n                    echo \"var a1 = document.createElement('a');\";\n                    echo \"var txt1 = document.createTextNode('退出登录');\";\n                    echo \"var myOut = document.getElementById('myOut');\";\n                    echo \"a1.append(txt1);\";\n                    echo \"myOut.append(a1);\";\n                    echo \"a1.href='../process/logout.php';\";\n                    echo \"var i1 = document.createElement('i');\";\n                    echo \"var img1 = document.createElement('img');\";\n                    echo \"img1.setAttribute('src','\".$user_Msg['user_image'].\"');\";\n                    echo \"img1.style.borderRadius='50%';\";\n                    echo \"img1.style.height='100%';\";\n                    echo \"img1.style.width='100%';\";\n                    echo \"img1.style.paddingBottom='3px';\";\n                    echo \"img1.style.marginTop='-4px';\";\n                    echo \"var myOut = document.getElementById('myOut');\";\n                    echo \"i1.append(img1);\";\n                    echo \"myOut.append(i1);\";\n                    echo \"&lt;/script&gt;\";\n                }\n                ?&gt;</code></pre>\n<h3>（三）、管理员界面设计 </h3>\n<p>1. 与用户的登录界面一致，这里管理员根据信息在数据库检索正确后将进入管理员界面，对于管理员界面的前端设计，我采用了script中的抽屉模型，总共分为六大模块，这里一方面为了减少代码冗余，另一方面为了进一步体现封装思想，对每一部分的信息都采用了盒子模型进行包装，并设置了其id值，利用script语句中DOM元素对节点的获取，使用控件充分利用display属性的block与none进行部分的隐藏与展示。</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\481b370e76084b4f801d5015406d1c8a.png\"/></p>\n<p>        这里可以对用户、管理员、电影、影院、放映时间以及购座信息分别进行增删改查，具体代码展示如下：</p>\n<pre><code class=\"language-php\">foreach ($_POST as $key =&gt; $value)\n{\n//    echo \"$value\".\"&lt;br&gt;\";\n    $value=str_replace('座','',$value);\n    $array=explode('排', $value);\n//    echo $array[0].\"&lt;br&gt;\";\n//    echo $array[1].\"&lt;br&gt;\";\n    $line=$array[0];\n    $column=$array[1];\n    if($_SESSION['flag']==\"insert\"){\n        $insertSql = \"insert into seat_message(seat_line,seat_column,user_id,playtime_id) values('{$line}','{$column}',{$userid},{$playtime_id})\";\n        $result = mysqli_query($link,$insertSql);\n        if(!$result){\n            echo mysqli_error($link);\n            exit();\n        }\n    }else{\n        $insertSql = \"insert into seat_message(seat_line,seat_column,user_id,playtime_id) values('{$line}','{$column}',{$userid},{$playtime_id})\";\n        $result = mysqli_query($link,$insertSql);\n        if(!$result){\n            echo mysqli_error($link);\n            exit();\n        }\n    }\n}</code></pre>\n<p> 2.导入Excel与下载Excel的操作</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\fd340d5eb91849f69018bafa86153bb6.png\"/></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\6af5ca70838f46278236b23d72d51674.png\"/></p>\n<p>        首先是对已存在的表的信息对数据库的录入，在导入相关文件后，我们首先创建文件输入流，并载入文件路径信息，获取该表格的总行数与总列数，随后在判断表内确实存在数据后，通过工作表中自带的getCellByColumnAndRow方法对二维数组中的数据进行获取并输出存储，最后调用字符串对sql语句中的字段名与值进行拼接后执行存入。</p>\n<p>        接着是对已存在表信息的输出，这里相当于是一个置反性质的操作，我们首先需要通过数据库查询出我们需要导出的表格信息，接着根据自定义的表格实例，通过setCellValue方法对数据进行输出并设置给Excel表格的相应位置。 代码部分展示如下：</p>\n<pre><code class=\"language-php\">$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader('Xlsx');\n$reader-&gt;setReadDataOnly(TRUE);\n$spreadsheet = $reader-&gt;load('movies.xlsx'); \n$worksheet = $spreadsheet-&gt;getActiveSheet();\n$highestRow = $worksheet-&gt;getHighestRow(); \n$highestColumn = $worksheet-&gt;getHighestColumn(); \n$highestColumnIndex = \\PhpOffice\\PhpSpreadsheet\\Cell\\Coordinate::columnIndexFromString($highestColumn);\n</code></pre>\n<p><strong>注意：</strong></p>\n<p>        <strong>利用phpspreadsheet插件对Excel表格的信息与Mysql数据库连接后，进行录入与导出，首先在实现功能之前，在经过我查阅大量资料后，我发现原本可以灵活使用于Phostorm中的PHPExcel插件在版本7.0之后便被弃用了，由phpspreadsheet插件替代，而利用我们php中自带的命令提示行terminal中的命令composer进行安装时，会发现版本不兼容，这里我们需要调整php.in文件中的gb属性，将其权限放开后，便可以成功安装。</strong></p>\n<pre><code class=\"language-php\">$fileName = $_FILES['excel'][\"name\"];\n//临时路径\n$tempName = $_FILES['excel'][\"tmp_name\"];\n//第一个参数是临时路径，\nmove_uploaded_file($tempName,$fileName);\n\nrequire 'D:\\xmapp\\htdocs\\vendor\\autoload.php';\ninclude('../process/connect.php'); //连接数据库\n\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader('Xlsx');\n$reader-&gt;setReadDataOnly(TRUE);\n$spreadsheet = $reader-&gt;load('movies.xlsx'); //载入excel表格\n\n$worksheet = $spreadsheet-&gt;getActiveSheet();\n$highestRow = $worksheet-&gt;getHighestRow(); // 总行数\n$highestColumn = $worksheet-&gt;getHighestColumn(); // 总列数\n$highestColumnIndex = \\PhpOffice\\PhpSpreadsheet\\Cell\\Coordinate::columnIndexFromString($highestColumn); // e.g. 5\n\n$lines = $highestRow - 2;\nif ($lines &lt;= 0) {\n    exit('Excel表格中没有数据');\n}\n\n$sql = \"INSERT INTO `movie_message` (`movie_name`, `movie_ename`, `movie_time`, `movie_definition`,`movie_country`,`movie_description`,`movie_image`,`movie_show`,`movie_type`,`movie_role`) VALUES \";\n\nfor ($row = 3; $row &lt;= $highestRow; ++$row) {\n    $moviename = $worksheet-&gt;getCellByColumnAndRow(1, $row)-&gt;getValue(); //姓名\n    $movieename = $worksheet-&gt;getCellByColumnAndRow(2, $row)-&gt;getValue(); //语文\n    $movietime = $worksheet-&gt;getCellByColumnAndRow(3, $row)-&gt;getValue(); //数学\n    $moviedefinition = $worksheet-&gt;getCellByColumnAndRow(4, $row)-&gt;getValue(); //外语\n    $moviecountry = $worksheet-&gt;getCellByColumnAndRow(5, $row)-&gt;getValue(); //外语\n    $moviedescription = $worksheet-&gt;getCellByColumnAndRow(6, $row)-&gt;getValue(); //外语\n    $movieimage = $worksheet-&gt;getCellByColumnAndRow(7, $row)-&gt;getValue(); //外语\n    $movieshow = $worksheet-&gt;getCellByColumnAndRow(8, $row)-&gt;getValue(); //外语\n    $movietype = $worksheet-&gt;getCellByColumnAndRow(9, $row)-&gt;getValue(); //外语\n    $movierole = $worksheet-&gt;getCellByColumnAndRow(10, $row)-&gt;getValue(); //外语\n\n    $sql .= \"('$moviename','$movieename','$movietime','$moviedefinition','$moviecountry','$moviedescription','$movieimage','$movieshow','$movietype','$movierole'),\";\n}\n$sql = rtrim($sql, \",\"); //去掉最后一个,号\ntry {\n    $link-&gt;query($sql);\n    echo 'OK';\n} catch (Exception $e) {\n    echo $e-&gt;getMessage();\n}</code></pre>\n<p></p>\n<p>        至此，该电影院信息查询管理系统的基本功能与界面展示完毕。如对您有所帮助，望留下宝贵一赞！谢谢！</p>\n<p>        需源码 请私信 <strong>扣扣 1092644308</strong></p>\n<p></p>\n<p></p>\n<p></p>\n</div>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 1, "javascript": 1, "java": 0, "sql": 1, "php": 1, "time": "2022-05-15 12:53:44", "summary": "一、系统特色一、系统角色分为用户端、管理员端以及游客端三大参与者。如下图所示：二、系统特色可以使用插件来批量读取本地存储中的表格进行添加电影信息，也可以反操作下载数据库中的电影信息以表格的方式读取出来"}