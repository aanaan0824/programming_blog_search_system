{"blogid": "124111789", "writerAge": "码龄8年", "writerBlogNum": "316", "writerCollect": "954", "writerComment": "910", "writerFan": "3347", "writerGrade": "6级", "writerIntegral": "5513", "writerName": "自己的九又四分之三站台", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124111789.jpg", "writerRankTotal": "3257", "writerRankWeekly": "2234", "writerThumb": "794", "writerVisitNum": "264873", "blog_read_count": "2033", "blog_time": "于 2022-04-11 22:44:52 发布", "blog_title": "C#开源Excel组件使用说明", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>前文我们说了CSharp中四种开源操作Excel的组件，其中包括NPOI、Aspose.Cells for .NET、EPPlus、MiniExcel。本文来详细的讲解一下四种开源组件操作Excel的代码和效率比对</p>\n<h1><a id=\"1_Demo_2\"></a>1. Demo代码框架和数据说明</h1>\n<h2><a id=\"11_Demo_4\"></a>1.1. Demo代码框架</h2>\n<h3><a id=\"111_Demo_6\"></a>1.1.1. Demo代码思路：</h3>\n<p>主题思路为以下几条内容：</p>\n<ul><li> <p>从表中读取数据并将数据写入到Excel中</p>\n<ul><li>\n<ol><li>使用不同的数据体量写入到Excel中</li></ol> </li><li>\n<ol start=\"2\"><li>同时也测试将数据按每一个单页最大为50000行数据，测试大数据量数据</li></ol> </li></ul> </li><li> <p>读取Excel中的数据,测试不同的数据量，测试打开的方式是否会出现OOM问题。而读取之后的信息不使用内存记录，只是取出来即可。</p> </li><li> <p>测试Excel的特殊功能是否支持，比如：</p>\n<ul><li>\n<ol><li>合并单元格</li></ol> </li><li>\n<ol start=\"2\"><li>单元格样式</li></ol> </li><li>\n<ol start=\"3\"><li>公式计算</li></ol> </li><li>\n<ol start=\"4\"><li>插入图</li></ol> </li></ul> </li></ul>\n<h3><a id=\"112__21\"></a>1.1.2. 代码框架</h3>\n<ol><li>代码使用.NetFramework4.8的控制台应用程序，设置不同数据量级别的集合，并将其写入到Excel中。</li><li>上述的四种操作Excel的开源组件都通过Nuget获取。</li></ol>\n<ul><li>NPOI</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ab8af0b195b04eecace6680e5258bcef.png\"/></p>\n<ul><li>Aspose.Cells for .NET</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\28fd0278b7ff4dc9b1a95f36e97bebb8.png\"/></p>\n<ul><li>EPPlus</li></ul>\n<p>https://github.com/JanKallman/EPPlus/wiki/Formula-Calculation</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\24a19379e0994c878a2bc5bf7435c314.png\"/></p>\n<ul><li>MiniExcel</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cc8d9940ebd04228b03900ec57e29578.png\"/></p>\n<p>以下为代码引用结果</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9b20a3e43e7f446496bf381273ed0b09.png\"/></p>\n<h3><a id=\"113__54\"></a>1.1.3. 代码</h3>\n<pre><code class=\"prism language-C#\">using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace ConsoleReadWriteExcel\n{\n    internal class Program\n    {\n        private static string OutputExcelFolderPath = @\"C:\\Users\\HTHT\\Desktop\\caogao\\导出文件夹\";\n        private static string InputExcelFolderPath = @\"C:\\Users\\HTHT\\Desktop\\caogao\\导出文件夹\";\n\n        static void Main(string[] args)\n        {\n            EPPlus_ExcelHelper.EPPlus_ExcelHelperLicenseContext();\n            //WriteData2ExcelDemo();\n            ReadData4ExcelDemo();\n            Console.ReadKey(); ;\n        }\n\n        #region ReadData4ExcelDemo\n        private static void ReadData4ExcelDemo()\n        {\n            ReadData4Excel(1000);\n            ReadData4Excel(10000);\n            ReadData4Excel(50000);\n            ReadData4Excel(100000);\n            ReadData4Excel(200000);\n            ReadData4Excel(500000);\n            ReadData4Excel(1000000);\n            Console.WriteLine(\"-------------------------***********************-------------------------\");\n            Console.WriteLine(\"读取Excel完成...\");\n            Console.WriteLine(\"-------------------------***********************-------------------------\");\n        }\n\n        private static void ReadData4Excel(int dataCount)\n        {\n            Console.Write($\"| {dataCount} |\");\n\n            SimpleUseReadExcel(dataCount, ReadData4Excel4NPOI);\n\n            SimpleUseReadExcel(dataCount, ReadData4Excel4AsposeCell);\n\n            SimpleUseReadExcel(dataCount, ReadData4Excel4EPPlus);\n\n            SimpleUseReadExcel(dataCount, ReadData4Excel4MiniExcel);\n\n            Console.WriteLine();\n        }\n\n        private static void ReadData4Excel4MiniExcel(int dataCount)\n        {\n            string strOutputExcelPath = System.IO.Path.Combine(InputExcelFolderPath, \"MiniExcel\", $\"导出数据_{dataCount}.xlsx\");\n\n            MiniExcel_ExcelHelper pMiniExcel_ExcelHelper = new MiniExcel_ExcelHelper();\n            pMiniExcel_ExcelHelper.ReadData(strOutputExcelPath);\n        }\n\n        private static void ReadData4Excel4EPPlus(int dataCount)\n        {\n            string strOutputExcelPath = System.IO.Path.Combine(InputExcelFolderPath, \"EPPlus\", $\"导出数据_{dataCount}.xlsx\");\n\n            EPPlus_ExcelHelper pEPPlus_ExcelHelper = new EPPlus_ExcelHelper();\n            pEPPlus_ExcelHelper.ReadData(ReadData, strOutputExcelPath, 1, 1);\n        }\n\n        private static void ReadData4Excel4AsposeCell(int dataCount)\n        {\n            string strOutputExcelPath = System.IO.Path.Combine(InputExcelFolderPath, \"AsposeCell\", $\"导出数据_{dataCount}.xls\");\n\n            AsposeCell_ExcelHelper pAsposeCell_ExcelHelper = new AsposeCell_ExcelHelper(strOutputExcelPath);\n            pAsposeCell_ExcelHelper.GetData(ReadData, 0, 0);\n\n        }\n\n        public static bool ReadData(List&lt;object&gt; ListRangeObjValue, bool IsColumn)\n        {\n            return true;\n        }\n\n\n        private  static void ReadData4Excel4NPOI(int dataCount)\n        {\n            string strOutputExcelPath = System.IO.Path.Combine(InputExcelFolderPath, \"NPOI\", $\"导出数据_{dataCount}.xlsx\");\n\n            NPOI_ExcelHelper pNPOI_ExcelHelper = new NPOI_ExcelHelper(strOutputExcelPath);\n            pNPOI_ExcelHelper.ReadExcel(strOutputExcelPath,1,0);\n\n        }\n\n\n        /// &lt;summary&gt;\n        /// 数据结构的简单使用\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"action\"&gt;&lt;/param&gt;\n        public static void SimpleUseReadExcel(int dataCount, Action&lt;int&gt; action)\n        {\n            Stopwatch sw = new Stopwatch();\n            sw.Start();\n            try\n            {\n                action(dataCount);\n                sw.Stop();\n                TimeSpan ts2 = sw.Elapsed;\n\n                //显示程序的内存占用信息\n                ShowProcessInfoTabel();\n\n                显示程序的耗时信息\n                //Console.Write($\"   {ts2.TotalSeconds} s  |\");\n            }\n            catch (Exception ex)\n            {\n                sw.Stop();\n\n                //显示程序的耗时信息\n                Console.Write($\"   {ex.Message}  |\");\n            }\n        }\n        #endregion\n\n        #region WriteData2ExcelDemo\n        private static void WriteData2ExcelDemo()\n        {\n            System.IO.Directory.Delete(OutputExcelFolderPath, true);\n            WriteData2Excel(1000);\n            WriteData2Excel(10000);\n            WriteData2Excel(50000);\n            WriteData2Excel(100000);\n            WriteData2Excel(200000);\n            WriteData2Excel(500000);\n            WriteData2Excel(1000000);\n            Console.WriteLine(\"-------------------------***********************-------------------------\");\n            Console.WriteLine(\"导出Excel完成...\");\n            Console.WriteLine(\"-------------------------***********************-------------------------\");\n        }\n\n        private static void WriteData2Excel(int dataCount)\n        {\n            string strDemoModelExcel = System.IO.Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @\"Config\\Demo.xlsx\");\n            List&lt;string&gt; listData = new List&lt;string&gt;();\n            for (int i = 0; i &lt; dataCount; i++)\n            {\n                listData.Add($\"导出数据到Excel文件中_{i}\");\n            }\n            Console.Write($\"| {dataCount} |\");\n\n            SimpleUseWriteExcel(strDemoModelExcel, listData, WriteData2Excel4NPOI);\n\n            SimpleUseWriteExcel(strDemoModelExcel, listData, WriteData2Excel4AsposeCell);\n\n            SimpleUseWriteExcel(strDemoModelExcel, listData, WriteData2Excel4EPPlus);\n\n            SimpleUseWriteExcel(strDemoModelExcel, listData, WriteData2Excel4MiniExcel);\n\n            Console.WriteLine();\n        }\n\n        private static void WriteData2Excel4MiniExcel(string strDemoModelExcel, List&lt;string&gt; listData)\n        {\n            string strOutputExcelPath = System.IO.Path.Combine(OutputExcelFolderPath, \"MiniExcel\", $\"导出数据_{listData.Count}.xlsx\");\n            if (!System.IO.Directory.Exists(System.IO.Path.GetDirectoryName(strOutputExcelPath)))\n            {\n                System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(strOutputExcelPath));\n            }\n            MiniExcel_ExcelHelper pMiniExcel_ExcelHelper = new MiniExcel_ExcelHelper();\n            pMiniExcel_ExcelHelper.SaveExcel(strOutputExcelPath, listData);\n        }\n\n        private static void WriteData2Excel4EPPlus(string strDemoModelExcel, List&lt;string&gt; listData)\n        {\n            string strOutputExcelPath = System.IO.Path.Combine(OutputExcelFolderPath, \"EPPlus\", $\"导出数据_{listData.Count}.xlsx\");\n            if (!System.IO.Directory.Exists(System.IO.Path.GetDirectoryName(strOutputExcelPath)))\n            {\n                System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(strOutputExcelPath));\n            }\n            System.IO.File.Copy(strDemoModelExcel, strOutputExcelPath, true);\n            EPPlus_ExcelHelper pEPPlus_ExcelHelper = new EPPlus_ExcelHelper();\n            pEPPlus_ExcelHelper.SaveExcel(strOutputExcelPath, listData);\n        }\n\n        private static void WriteData2Excel4AsposeCell(string strDemoModelExcel, List&lt;string&gt; listData)\n        {\n            string strOutputExcelPath = System.IO.Path.Combine(OutputExcelFolderPath, \"AsposeCell\", $\"导出数据_{listData.Count}.xls\");\n            if (!System.IO.Directory.Exists(System.IO.Path.GetDirectoryName(strOutputExcelPath)))\n            {\n                System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(strOutputExcelPath));\n            }\n            System.IO.File.Copy(strDemoModelExcel, strOutputExcelPath, true);\n            AsposeCell_ExcelHelper pAsposeCell_ExcelHelper = new AsposeCell_ExcelHelper(strOutputExcelPath);\n            pAsposeCell_ExcelHelper.WriteExcel(0, listData);\n            pAsposeCell_ExcelHelper.Save();\n        }\n\n        private static void WriteData2Excel4NPOI(string strDemoModelExcel, List&lt;string&gt; listData)\n        {\n            string strOutputExcelPath = System.IO.Path.Combine(OutputExcelFolderPath, \"NPOI\", $\"导出数据_{listData.Count}.xlsx\");\n            if (!System.IO.Directory.Exists(System.IO.Path.GetDirectoryName(strOutputExcelPath)))\n            {\n                System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(strOutputExcelPath));\n            }\n            System.IO.File.Copy(strDemoModelExcel, strOutputExcelPath, true);\n            NPOI_ExcelHelper pNPOI_ExcelHelper = new NPOI_ExcelHelper(strOutputExcelPath);\n            pNPOI_ExcelHelper.WriteExcel(0, listData);\n            pNPOI_ExcelHelper.SaveXlsxChange(strOutputExcelPath);\n        }\n\n        /// &lt;summary&gt;\n        /// 数据结构的简单使用\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"action\"&gt;&lt;/param&gt;\n        public static void SimpleUseWriteExcel(string strPhaseInfo, List&lt;string&gt; listData, Action&lt;string,List&lt;string&gt;&gt; action)\n        {\n            Stopwatch sw = new Stopwatch();\n            sw.Start();\n            action(strPhaseInfo, listData);\n            sw.Stop();\n            TimeSpan ts2 = sw.Elapsed;\n            显示程序的内存占用信息\n            //ShowProcessInfoTabel();\n            \n            //显示程序的耗时信息\n            Console.Write($\"   {ts2.TotalSeconds} s  |\");\n        }\n        #endregion\n\n        private static int MB_DIV = 1024 * 1024;\n        /// &lt;summary&gt;\n        /// 显示程序的内存占用信息\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"strPhaseInfo\"&gt;&lt;/param&gt;\n        public static void ShowProcessInfoTabel()\n        {\n            var name = Process.GetCurrentProcess().ProcessName;\n            PerformanceCounter curpcp = new PerformanceCounter(\"Process\", \"Working Set - Private\", name);\n            PerformanceCounter curtime = new PerformanceCounter(\"Process\", \"% Processor Time\", name);\n            Console.Write($\"   {curpcp.NextValue() / MB_DIV}  |\");\n\n            //实时分析内存至关重要\n            GC.Collect();\n\n            Application.DoEvents();\n        }\n    }\n}\n</code></pre>\n<h2><a id=\"12__307\"></a>1.2. 数据说明</h2>\n<p>加载指定个数的List数据写入到Excel中</p>\n<pre><code class=\"prism language-C#\">\nprivate static void WriteData2Excel(int dataCount)\n{\n    ....\n    List&lt;string&gt; listData = new List&lt;string&gt;();\n    for (int i = 0; i &lt; dataCount; i++)\n    {\n        listData.Add($\"导出数据到Excel文件中_{i}\");\n    }\n    ....\n}\n</code></pre>\n<h1><a id=\"2__325\"></a>2. 使用场景</h1>\n<h2><a id=\"21_Excel100w_327\"></a>2.1. 写入Excel(最大测试数据量100w)</h2>\n<h3><a id=\"211_s_329\"></a>2.1.1. 时间复杂度随数据变化表(单位秒s)</h3>\n<table><thead><tr><th>数量</th><th>NPOI</th><th>AsposeCell</th><th>EPPlus</th><th>MiniExcel</th></tr></thead><tbody><tr><td>1000</td><td>0.655017 s</td><td>3.3880952 s</td><td>0.5505515 s</td><td>0.0799069 s</td></tr><tr><td>10000</td><td>0.6553409 s</td><td>0.0792955 s</td><td>0.2258814 s</td><td>0.4185034 s</td></tr><tr><td>50000</td><td>3.9576648 s</td><td>0.3697489 s</td><td>0.9928818 s</td><td>1.2196221 s</td></tr><tr><td>100000</td><td>4.3536023 s</td><td>0.5724796 s</td><td>2.0721173 s</td><td>2.4347283 s</td></tr><tr><td>200000</td><td>8.50407 s</td><td>1.3098775 s</td><td>4.0333762 s</td><td>4.8701496 s</td></tr><tr><td>500000</td><td>22.2753958 s</td><td>2.8274853 s</td><td>10.5082423 s</td><td>12.2345609 s</td></tr><tr><td>1000000</td><td>45.3316621 s</td><td>6.1340543 s</td><td>21.8507034 s</td><td>25.1136424 s</td></tr></tbody></table>\n<h3><a id=\"212_MB_341\"></a>2.1.2. 空间复杂度随数据变化表(单位MB)</h3>\n<table><thead><tr><th>数量</th><th>NPOI</th><th>AsposeCell</th><th>EPPlus</th><th>MiniExcel</th></tr></thead><tbody><tr><td>1000</td><td>25.76563</td><td>27.04688</td><td>28.57422</td><td>29.11719</td></tr><tr><td>10000</td><td>50.0625</td><td>36.01953</td><td>36.82813</td><td>39.96484</td></tr><tr><td>50000</td><td>127.0039</td><td>79.07422</td><td>40.37891</td><td>57.02734</td></tr><tr><td>100000</td><td>237.3555</td><td>114.6094</td><td>50.47266</td><td>83.75</td></tr><tr><td>200000</td><td>449.0469</td><td>191.8789</td><td>70.65625</td><td>137.7734</td></tr><tr><td>500000</td><td>981.5508</td><td>428.0078</td><td>155.4609</td><td>320.4336</td></tr><tr><td>1000000</td><td>1942.848</td><td>527.793</td><td>324.6563</td><td>657.3281</td></tr></tbody></table>\n<h2><a id=\"22_Excel_353\"></a>2.2. 读取Excel</h2>\n<h3><a id=\"221_s_355\"></a>2.2.1. 时间复杂度随数据变化表(单位秒s)</h3>\n<table><thead><tr><th>数量</th><th>NPOI</th><th>AsposeCell</th><th>EPPlus</th><th>MiniExcel</th></tr></thead><tbody><tr><td>1000</td><td>0.317878 s</td><td>0.4092103 s</td><td>0.1444332 s</td><td>0.1053007 s</td></tr><tr><td>10000</td><td>0.9976334 s</td><td>0.0674619 s</td><td>0.2152765 s</td><td>0.457786 s</td></tr><tr><td>50000</td><td>5.9264671 s</td><td>0.1819693 s</td><td>0.8495237 s</td><td>1.5807224 s</td></tr><tr><td>100000</td><td>10.4264675 s</td><td>0.2611479 s</td><td>1.9973989 s</td><td>3.1554743 s</td></tr><tr><td>200000</td><td>21.0787552 s</td><td>0.3267718 s</td><td>3.3810386 s</td><td>6.3185499 s</td></tr><tr><td>500000</td><td>55.867668 s</td><td>0.7786071 s</td><td>7.9100544 s</td><td>15.2742102 s</td></tr><tr><td>1000000</td><td>OOM</td><td>1.772818 s</td><td>17.7469745 s</td><td>31.9800223 s</td></tr></tbody></table>\n<h3><a id=\"222_MB_367\"></a>2.2.2. 空间复杂度随数据变化表(单位MB)</h3>\n<table><thead><tr><th>数量</th><th>NPOI</th><th>AsposeCell</th><th>EPPlus</th><th>MiniExcel</th></tr></thead><tbody><tr><td>1000</td><td>26.58984</td><td>27.29688</td><td>28.48047</td><td>29.44922</td></tr><tr><td>10000</td><td>87.02344</td><td>35.41797</td><td>40.04688</td><td>39.5</td></tr><tr><td>50000</td><td>340.7305</td><td>51.49609</td><td>65.78906</td><td>63.10547</td></tr><tr><td>100000</td><td>674.832</td><td>74.82422</td><td>104.2539</td><td>97.94141</td></tr><tr><td>200000</td><td>1340.066</td><td>113.4141</td><td>181.9219</td><td>167.75</td></tr><tr><td>500000</td><td>1788.254</td><td>216.7305</td><td>419.707</td><td>381.0391</td></tr><tr><td>1000000</td><td>OOM</td><td>454.9883</td><td>654.3984</td><td>578.8906</td></tr></tbody></table>\n<h2><a id=\"23_Excel_379\"></a>2.3. Excel特殊功能</h2>\n<table><thead><tr><th>特殊功能</th><th>NPOI</th><th>AsposeCell</th><th>EPPlus</th><th>MiniExcel</th></tr></thead><tbody><tr><td>合并单元格</td><td>True</td><td>True</td><td>True</td><td>暂时没有发现</td></tr><tr><td>单元格样式</td><td>True</td><td>True</td><td>True</td><td>暂时没有发现</td></tr><tr><td>公式计算</td><td>True</td><td>True</td><td>True</td><td>暂时没有发现</td></tr><tr><td>插入图</td><td>True</td><td>True</td><td>True</td><td>暂时没有发现</td></tr></tbody></table>\n<ol><li>AsposeCell合并单元格</li></ol>\n<p>https://blog.csdn.net/u010104384/article/details/108123728</p>\n<ol start=\"2\"><li>AsposeCell设置单元格样式</li></ol>\n<p>https://wenku.baidu.com/view/52e34c10f211f18583d049649b6648d7c1c708d0.html</p>\n<ol start=\"3\"><li>AsposeCell公式计算</li></ol>\n<pre><code class=\"prism language-C#\">XlsSaveOptions saveOpt = new XlsSaveOptions();\nCurrentWorkBook.CalculateFormula(true);\n</code></pre>\n<ol start=\"4\"><li>AsposeCell插入图表</li></ol>\n<p>https://blog.csdn.net/qq_46035189/article/details/119966058</p>\n<ol start=\"5\"><li>EPPlus 合并单元格</li></ol>\n<pre><code class=\"prism language-C#\">ws.Cells[\"A1:C1\"].Merge = true;\n</code></pre>\n<pre><code class=\"prism language-C#\">public static string GetMegerValue(ExcelWorksheet wSheet, int row, int column)\n{\n    string range = wSheet.MergedCells[row, column];\n    if (range == null)\n        if (wSheet.Cells[row, column].Value != null)\n            return wSheet.Cells[row, column].Value.ToString();\n        else\n            return \"\";\n    object value =\n        wSheet.Cells[(new ExcelAddress(range)).Start.Row, (new ExcelAddress(range)).Start.Column].Value;\n    if (value != null)\n        return value.ToString();\n    else\n        return \"\";\n}\n</code></pre>\n<ol start=\"6\"><li>EPPlus 设置单元格样式</li></ol>\n<p>https://wenku.baidu.com/view/5061cae50f22590102020740be1e650e52eacfd9.html</p>\n<ol start=\"7\"><li>EPPlus 公式计算</li></ol>\n<pre><code class=\"prism language-C#\">// RowCount、ColumnCount 整数，分别是行计数器、列计数器\nThisCell = Worksheet.Cells[RowCount, ColumnCount];\nstring StartCell = Worksheet.Cells[4, ColumnCount].Address;\nstring EndCell = Worksheet.Cells[(RowCount - 1), ColumnCount].Address;\nFormula = String.Format(\"=SUM({0}:{1})\", StartCell, EndCell);\nThisCell.Formula = Formula;\n\nstring cell = Worksheet.Cells[1, 1].Address;\n</code></pre>\n<ol start=\"8\"><li>EPPlus 插入图表</li></ol>\n<p>https://www.cnblogs.com/miaosha5s/p/13168868.html?ivk_sa=1024320u</p>\n<h1><a id=\"3__452\"></a>3. 附件代码</h1>\n<pre><code class=\"prism language-C#\">using NPOI.SS.UserModel;\nusing NPOI.XSSF.Streaming;\nusing NPOI.XSSF.UserModel;\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace ConsoleReadWriteExcel\n{\n    public class NPOI_ExcelHelper\n    {\n        public NPOI_ExcelHelper()\n        {\n        }\n\n        public NPOI_ExcelHelper(string strFilePath)\n        {\n            Open(strFilePath, 0);\n            CurrentSheet = CurrentExcelWorkbook.GetSheetAt(CurrentExcelWorkbook.ActiveSheetIndex);\n        }\n\n\n\n        #region Property\n        /// &lt;summary&gt;\n        /// 当前Excel操作文档\n        /// &lt;/summary&gt;\n        public IWorkbook CurrentExcelWorkbook\n        {\n            get;\n            private set;\n        }\n\n        /// &lt;summary&gt;\n        /// 当前Excel操作Sheet\n        /// &lt;/summary&gt;\n        public ISheet CurrentSheet\n        {\n            get;\n            private set;\n        }\n\n        /// &lt;summary&gt;\n        /// 当前操作中的异常Exception\n        /// &lt;/summary&gt;\n        public Exception CurrentException { get; set; }\n\n        private IFont _CurrentFont = null;\n        /// &lt;summary&gt;\n        /// 当前的字体\n        /// &lt;/summary&gt;\n        public IFont CurrentFont\n        {\n            get\n            {\n                if (_CurrentFont == null &amp;&amp; CurrentExcelWorkbook != null)\n                {\n                    _CurrentFont = CurrentExcelWorkbook.CreateFont();\n                }\n                return _CurrentFont;\n            }\n            private set\n            {\n                _CurrentFont = value;\n            }\n        }\n\n        private ICellStyle _CurrentCellStyle = null;\n        /// &lt;summary&gt;\n        /// 当前的单元格样式\n        /// &lt;/summary&gt;\n        public ICellStyle CurrentCellStyle\n        {\n            get\n            {\n                if (_CurrentCellStyle == null &amp;&amp; CurrentExcelWorkbook != null)\n                {\n                    _CurrentCellStyle = CurrentExcelWorkbook.CreateCellStyle();\n                }\n                return _CurrentCellStyle;\n            }\n            set\n            {\n                _CurrentCellStyle = value;\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 得到当前Sheet页的行数\n        /// &lt;/summary&gt;\n        public int CurrentSheetRow\n        {\n            get\n            {\n                return CurrentSheet == null ? 0 : CurrentSheet.PhysicalNumberOfRows;\n            }\n        }\n        private int sheetNum = -1;\n        /// &lt;summary&gt;\n        /// 得到当前Sheet页最大单元格数\n        /// &lt;/summary&gt;\n        public int CurrentSheetColumn\n        {\n            get\n            {\n                if (sheetNum &lt; 0)\n                {\n                    sheetNum = 0;\n                    if (CurrentSheet != null)\n                    {\n                        for (int i = 0; i &lt; CurrentSheet.PhysicalNumberOfRows; i++)\n                        {\n                            int colNum = GetRowColNum(i);\n                            if (colNum &gt; sheetNum)\n                            {\n                                sheetNum = colNum;\n                            }\n                        }\n                    }\n                }\n\n                return sheetNum;\n            }\n        }\n\n        public int GetRowColNum(int rowIndex)\n        {\n            int colNum = 0;\n            if (CurrentSheet != null &amp;&amp; rowIndex &gt;= 0)\n            {\n                IRow pRow = CurrentSheet.GetRow(rowIndex);\n                if (pRow != null)\n                {\n                    colNum = pRow.LastCellNum;\n                }\n            }\n            return colNum;\n        }\n        #endregion\n\n        /// &lt;summary&gt;\n        /// 打开Excel中的Sheet页（索引）\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"strFilePath\"&gt;&lt;/param&gt;\n        /// &lt;param name=\"SheetIndex\"&gt;&lt;/param&gt;\n        /// &lt;param name=\"IsBigOperation\"&gt;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public bool Open(string strFilePath, int SheetIndex, bool IsBigOperation = false)\n        {\n            CurrentExcelWorkbook = OpenFile(strFilePath, IsBigOperation);\n            try\n            {\n                CurrentSheet = CurrentExcelWorkbook.GetSheetAt(SheetIndex);\n            }\n            catch (Exception ex)\n            {\n                CurrentException = ex;\n                return false;\n            }\n            return true;\n        }\n\n        /// &lt;summary&gt;\n        /// 打开Excel文件\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"strFilePath\"&gt;&lt;/param&gt;\n        /// &lt;param name=\"isBigOperation\"&gt;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        private IWorkbook OpenFile(string strFilePath, bool isBigOperation)\n        {\n            try\n            {\n                using (FileStream fs = new FileStream(strFilePath, FileMode.Open, FileAccess.Read))\n                {\n                    IWorkbook workbook = null;\n                    if (isBigOperation)\n                    {\n                        XSSFWorkbook pXSSFWorkbook = new XSSFWorkbook(fs);\n                        workbook = new SXSSFWorkbook(pXSSFWorkbook, 1000);\n                    }\n                    else\n                    {\n                        workbook = WorkbookFactory.Create(fs);\n                    }\n                    return workbook;\n                }\n            }\n            catch (Exception ex)\n            {\n                CurrentException = ex;\n                return null;\n            }\n        }\n\n\n        /// &lt;summary&gt;\n        /// 写Excel\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"startRowIndex\"&gt;&lt;/param&gt;\n        /// &lt;param name=\"pTable\"&gt;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public bool WriteExcel(int startRowIndex, List&lt;string&gt; listData)\n        {\n            try\n            {\n                ISheet sheet = CurrentExcelWorkbook.GetSheetAt(0);\n                for (int i = 0; i &lt; listData.Count; i++)\n                {\n                    IRow pRow = sheet.CreateRow(startRowIndex);\n                    for (int j = 0; j &lt; 5; j++)\n                    {\n                        pRow.CreateCell(j).SetCellValue(listData[i].ToString());\n                    }\n                    startRowIndex++;\n                }\n                return true;\n            }\n            catch (Exception ex)\n            {\n                return false;\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 保存Xlsx格式修改\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"strExcelFilePath\"&gt;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public bool SaveXlsxChange(string strExcelFilePath)\n        {\n            try\n            {\n                using (var file = new FileStream(strExcelFilePath, FileMode.Create, FileAccess.Write))\n                {\n                    CurrentExcelWorkbook.Write(file);\n                    file.Close();\n                }\n\n                return true;\n            }\n            catch (Exception ex)\n            {\n                return false;\n            }\n        }\n        \n        \n        /// &lt;summary&gt;\n         /// 读取Excel文件内容转换为DataSet,列名依次为 \"c0\"……c[columnlength-1]\n         /// &lt;/summary&gt;\n         /// &lt;param name=\"FileName\"&gt;文件绝对路径&lt;/param&gt;\n         /// &lt;param name=\"startRow\"&gt;数据开始行数(1为第一行)&lt;/param&gt;\n         /// &lt;param name=\"StrartCol\"&gt;每列的数据类型&lt;/param&gt;\n         /// &lt;returns&gt;&lt;/returns&gt;\n        public DataTable ReadExcel(string FileName, int startRow, int StrartCol)\n        {\n            int ertime = 0;\n            int intime = 0;\n            DataTable dt = new DataTable(Path.GetFileName(FileName));\n            DataRow dr;\n            StringBuilder sb = new StringBuilder();\n            NpoiDataType[] ColumnDataType = null;\n            string ColName = \"ColName\";\n            using (FileStream stream = new FileStream(@FileName, FileMode.Open, FileAccess.Read))\n            {\n\n                IWorkbook workbook = WorkbookFactory.Create(stream);  //使用接口，自动识别excel2003/2007格式\n                ISheet sheet = workbook.GetSheetAt(0);//得到里面第一个sheet\n                int sheetNum = workbook.NumberOfSheets;\n                int j;\n                IRow row;\n                #region ColumnDataType赋值\n                if (ColumnDataType == null || ColumnDataType.Length &lt;= 0)\n                {\n                    row = sheet.GetRow(startRow - 1);//得到第i行\n                    ColumnDataType = new NpoiDataType[row.LastCellNum + 30 - StrartCol];\n                    for (int i = StrartCol; i &lt; ColumnDataType.Length; i++)\n                    {\n                        ICell hs = row.GetCell(i);\n                        ColumnDataType[i - StrartCol] = GetCellDataType(hs);\n                    }\n                }\n                #endregion\n                for (j = StrartCol; j &lt; ColumnDataType.Length; j++)\n                {\n                    row = sheet.GetRow(startRow - 1);//得到第i行\n                    Type tp = GetDataTableType(ColumnDataType[j]);\n                    string strColumnName = string.Format(\"{0}{1}\", ColName, j); ;\n                    dt.Columns.Add(strColumnName, tp);\n                }\n\n                Dictionary&lt;int, int&gt; dic = new Dictionary&lt;int, int&gt;();\n                List&lt;int&gt; startCols = new List&lt;int&gt;();\n                List&lt;int&gt; endCols = new List&lt;int&gt;();\n                int RowCout = sheet.PhysicalNumberOfRows &gt; sheet.LastRowNum ? sheet.PhysicalNumberOfRows : sheet.LastRowNum;\n                for (int k = 0; k &lt;= RowCout; k++)\n                {\n                    row = sheet.GetRow(k);\n                    if (row == null) continue;\n                    int start = 0, end = 0;\n                    for (int i = 0; i &lt; row.Cells.Count; i++)\n                    {\n                        if (!string.IsNullOrEmpty(row.Cells[i].ToString()))\n                        {\n                            start = i;\n                            break;\n                        }\n                    }\n                    startCols.Add(start);\n                    for (int i = 0; i &lt; row.Cells.Count; i++)\n                    {\n                        if (!string.IsNullOrEmpty(row.Cells[i].ToString()))\n                        {\n                            end = row.Cells[i].ColumnIndex;\n                        }\n                    }\n                    endCols.Add(end);\n                }\n                int Start_Col = 9999, End_Col = 0;\n                for (int i = 0; i &lt; startCols.Count; i++)\n                {\n                    int s = startCols[i], e = endCols[i];\n                    if (s &lt; Start_Col)\n                        Start_Col = s;\n                    if (e &gt; End_Col)\n                        End_Col = e;\n                }\n\n                for (int i = startRow; i &lt;= RowCout; i++)\n                {\n                    row = sheet.GetRow(i);//得到第i行\n                    if (row == null) continue;\n                    try\n                    {\n                        dr = dt.NewRow();\n\n                        for (j = StrartCol; j &lt; ColumnDataType.Length; j++)\n                        {\n                            dr[j - StrartCol] = GetCellData(row, j);\n                        }\n                        dt.Rows.Add(dr);\n                        intime++;\n                    }\n\n                    catch (Exception ex)\n                    {\n                        ertime++;\n                        sb.Append(string.Format(\"第{0}行出错：{1}\\r\\n\", i + 1, ex.Message));\n                        continue;\n                    }\n                }\n                for (int i = dt.Columns.Count - 1; i &gt; End_Col - StrartCol; i--)\n                {\n                    dt.Columns.RemoveAt(i);\n                }\n                if (Start_Col &gt; 0)\n                {\n                    for (int l = Start_Col - 1; l &gt;= 0; l--)\n                    {\n                        dt.Columns.RemoveAt(l);\n                    }\n                }\n            }\n            return dt;\n        }\n\n        /// &lt;summary&gt;\n        /// 读Excel-根据NpoiDataType创建的DataTable列的数据类型\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"datatype\"&gt;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        private Type GetDataTableType(NpoiDataType datatype)\n        {\n            Type tp = typeof(string);//Type.GetType(\"System.String\")\n            switch (datatype)\n            {\n                case NpoiDataType.Bool:\n                    tp = typeof(bool);\n                    break;\n                case NpoiDataType.Datetime:\n                    tp = typeof(DateTime);\n                    break;\n                case NpoiDataType.Numeric:\n                    tp = typeof(double);\n                    break;\n                case NpoiDataType.Error:\n                    tp = typeof(string);\n                    break;\n                case NpoiDataType.Blank:\n                    tp = typeof(string);\n                    break;\n            }\n            return tp;\n        }\n\n        /// &lt;summary&gt;\n        /// 获取单元格数据类型\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"hs\"&gt;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        private NpoiDataType GetCellDataType(ICell hs)\n        {\n            NpoiDataType dtype = NpoiDataType.String;\n            return dtype;\n        }\n\n\n        /// &lt;summary&gt;\n        /// 读Excel-得到不同数据类型单元格的数据\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"datatype\"&gt;数据类型&lt;/param&gt;\n        /// &lt;param name=\"row\"&gt;数据中的一行&lt;/param&gt;\n        /// &lt;param name=\"column\"&gt;哪列&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        private object GetCellData(IRow row, int column)\n        {\n            ICell cell = row.GetCell(column);\n            if (cell != null)\n            {\n                if (cell == null)\n                {\n                    return \"\";\n                }\n                CellType datatype = cell.CellType;\n                switch (datatype)\n                {\n                    case CellType.String:\n                        try { return cell.StringCellValue; }\n                        catch (Exception ex)\n                        {\n                            return \"\";\n                        }\n                    case CellType.Boolean:\n                        try { return cell.BooleanCellValue; }\n                        catch (Exception ex)\n                        {\n                            return cell.StringCellValue;\n                        }\n                    case CellType.Numeric:\n                        decimal d;\n                        string strValue = cell.ToString();\n\n                        if (System.Decimal.TryParse(strValue, out d))\n                        {\n                            return d;\n                        }\n                        else\n                        {\n                            try { return cell.DateCellValue; }\n                            catch (Exception ex)\n                            {\n                                return cell.StringCellValue;\n                            }\n                        }\n                    case CellType.Formula:\n                        try\n                        {\n                            return cell.NumericCellValue;\n                        }\n                        catch (Exception)\n                        {\n                            try\n                            {\n                                return cell.StringCellValue;\n                            }\n                            catch (Exception ex)\n                            {\n                                return \"\";\n                            }\n                        }\n                    case CellType.Error:\n                        try\n                        {\n                            return cell.ErrorCellValue;\n                        }\n                        catch (Exception ex)\n                        {\n                            return cell.StringCellValue;\n                        }\n                    case CellType.Blank:\n                        try\n                        {\n                            return cell.StringCellValue;\n                        }\n                        catch (Exception ex)\n                        {\n                            return \"\";\n                        }\n                    default:\n                        return \"\";\n                }\n            }\n            else\n            {\n                return \"\";\n            }\n        }\n    }\n\n\n\n    /// &lt;summary&gt;\n    /// 枚举(Excel单元格数据类型)\n    /// &lt;/summary&gt;\n    public enum NpoiDataType\n    {\n        /// &lt;summary&gt;\n        /// 字符串类型-值为1\n        /// &lt;/summary&gt;\n        String,\n        /// &lt;summary&gt;\n        /// 布尔类型-值为2\n        /// &lt;/summary&gt;\n        Bool,\n        /// &lt;summary&gt;\n        /// 时间类型-值为3\n        /// &lt;/summary&gt;\n        Datetime,\n        /// &lt;summary&gt;\n        /// 数字类型-值为4\n        /// &lt;/summary&gt;\n        Numeric,\n        /// &lt;summary&gt;\n        /// 复杂文本类型-值为5\n        /// &lt;/summary&gt;\n        Richtext,\n        /// &lt;summary&gt;\n        /// 空白\n        /// &lt;/summary&gt;\n        Blank,\n        /// &lt;summary&gt;\n        /// 错误\n        /// &lt;/summary&gt;\n        Error\n    }\n}\n</code></pre>\n<pre><code class=\"prism language-C#\">using Aspose.Cells;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace ConsoleReadWriteExcel\n{\n    public class AsposeCell_ExcelHelper\n    {\n        public AsposeCell_ExcelHelper() { }\n\n        public AsposeCell_ExcelHelper(string excelPath)\n        {\n            Open(excelPath, 0);\n            CurrentSheet = CurrentWorkBook.Worksheets[CurrentWorkBook.Worksheets.ActiveSheetIndex];\n        }\n\n        private Exception _CurrentException = null;\n        /// &lt;summary&gt;\n        /// Excel操作异常\n        /// &lt;/summary&gt;\n        public Exception CurrentException\n        {\n            get\n            {\n                return _CurrentException;\n            }\n            set\n            {\n                _CurrentException = value;\n            }\n        }\n        /// &lt;summary&gt;\n        /// 当前操作的excel\n        /// &lt;/summary&gt;\n        public Workbook CurrentWorkBook\n        {\n            get;\n            private set;\n        }\n        /// &lt;summary&gt;\n        /// 当前操作的Sheet\n        /// &lt;/summary&gt;\n        public Worksheet CurrentSheet\n        {\n            get;\n            private set;\n        }\n\n        public int CurrentSheetColumn\n        {\n            get\n            {\n                int colNum = 0;\n                if (CurrentSheet != null)\n                {\n                    colNum = CurrentSheet.Cells.MaxColumn + 1;\n                }\n                return colNum;\n            }\n        }\n\n        public int CurrentSheetRow\n        {\n            get\n            {\n                int rowNum = 0;\n                if (CurrentSheet != null)\n                {\n                    rowNum = CurrentSheet.Cells.Rows.Count;\n                }\n                return rowNum;\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 打开Excel指定Sheet索引\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"strFilePath\"&gt;&lt;/param&gt;\n        /// &lt;param name=\"SheetIndex\"&gt;&lt;/param&gt;\n        /// &lt;param name=\"IsBigOperation\"&gt;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public bool Open(string strFilePath, int SheetIndex, bool IsBigOperation = false)\n        {\n            try\n            {\n                CurrentWorkBook = new Workbook(strFilePath);\n                CurrentSheet = CurrentWorkBook.Worksheets[SheetIndex];\n                return true;\n            }\n            catch (Exception ex)\n            {\n                CurrentException = ex;\n                return false;\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 保存当前Excel\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public bool Save()\n        {\n            try\n            {\n                if (CurrentWorkBook != null)\n                {\n                    if (!string.IsNullOrEmpty(CurrentWorkBook.FileName))\n                    {\n                        string filePath = CurrentWorkBook.FileName;\n                        XlsSaveOptions saveOpt = new XlsSaveOptions();\n                        CurrentWorkBook.CalculateFormula(true);\n                        saveOpt.CreateDirectory = true;\n                        CurrentWorkBook.Save(filePath, saveOpt);\n                        return true;\n                    }\n                }\n                return false;\n            }\n            catch (Exception ex)\n            {\n                CurrentException = ex;\n                return false;\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 写Excel\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"startRowIndex\"&gt;&lt;/param&gt;\n        /// &lt;param name=\"pTable\"&gt;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public bool WriteExcel(int startRowIndex, List&lt;string&gt; listData)\n        {\n            try\n            {\n\n                for (int i = 0; i &lt; listData.Count; i++)\n                {\n                    for (int j = 0; j &lt; 5; j++)\n                    {\n                        CurrentSheet.Cells[i, j].PutValue(listData[i].ToString());\n                    }\n                }\n\n                return true;\n            }\n            catch (Exception ex)\n            {\n                CurrentException = ex;\n                return false;\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 按行读取指定范围单元格值\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"pReadDataDelegate\"&gt;&lt;/param&gt;\n        /// &lt;param name=\"StartRowIndex\"&gt;&lt;/param&gt;\n        /// &lt;param name=\"StartColumnIndex\"&gt;&lt;/param&gt;\n        public void GetData(ReadDataDelegate pReadDataDelegate, int StartRowIndex, int StartColumnIndex)\n        {\n            if (CurrentSheet != null)\n            {\n                int rowMax = CurrentSheet.Cells.MaxRow + 1;\n                int colMax = CurrentSheet.Cells.MaxColumn + 1;\n                for (int i = StartRowIndex; i &lt; CurrentSheet.Cells.Rows.Count; i++)\n                {\n                    List&lt;object&gt; readDatas = new List&lt;object&gt;();\n                    for (int j = StartColumnIndex; j &lt; CurrentSheet.Cells.Columns.Count; j++)\n                    {\n                        readDatas.Add(CurrentSheet.Cells.Rows[i][j].Value);\n                    }\n                    pReadDataDelegate.Invoke(readDatas, false);\n                }\n            }\n        }\n    }\n}\n\n</code></pre>\n<pre><code class=\"prism language-C#\">using OfficeOpenXml;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace ConsoleReadWriteExcel\n{\n    public class EPPlus_ExcelHelper\n    {\n        public static void EPPlus_ExcelHelperLicenseContext()\n        {\n            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;\n        }\n\n        public void SaveExcel(string strExcelPath,List&lt;string&gt; listData)\n        {\n            using (var package = new ExcelPackage(new FileInfo(strExcelPath)))\n            {\n                ExcelWorksheet worksheet = package.Workbook.Worksheets[0];\n                for (int i = 0; i &lt; listData.Count; i++)\n                {\n                    for (int j = 0; j &lt; 5; j++)\n                    {\n                        worksheet.Cells[i+1, j+1].Value=listData[i].ToString();\n                    }\n                }\n\n                package.Save();//保存excel\n            }\n        }\n\n        public void ReadData(ReadDataDelegate pReadDataDelegate, string path, int StartRowIndex, int StartColumnIndex)\n        {\n            var fs = new FileStream(path, FileMode.Open, FileAccess.Read);\n            var excel = new ExcelPackage(fs);\n            var worksheet = excel.Workbook.Worksheets[0];\n\n            var row = worksheet.Dimension.End.Row;\n            var col = worksheet.Dimension.End.Column;\n\n            for (var i = StartRowIndex; i &lt;= row; i++)\n            {\n                List&lt;object&gt; readDatas = new List&lt;object&gt;();\n                for (var j = StartColumnIndex; j &lt;= col; j++)\n                {\n                    readDatas.Add(worksheet.Cells[i, j].Value);\n                }\n                pReadDataDelegate.Invoke(readDatas, false);\n            }\n        }\n    }\n}\n\n</code></pre>\n<pre><code class=\"prism language-C#\">using MiniExcelLibs;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace ConsoleReadWriteExcel\n{\n    public class MiniExcel_ExcelHelper\n    {\n        public void SaveExcel(string strExcelPath, List&lt;string&gt; listData)\n        {\n            var values = new List&lt;Dictionary&lt;string, object&gt;&gt;();\n\n            foreach (var item in listData)\n            {\n                Dictionary&lt;string, object&gt; dic = new Dictionary&lt;string, object&gt;();\n                for (int i = 0; i &lt; 5; i++)\n                {\n                    dic.Add($\"Column{i + 1}\", item);\n                }\n                values.Add(dic);\n            }\n            MiniExcel.SaveAs(strExcelPath, values);\n        }\n\n        internal IEnumerable&lt;UserAccount&gt; ReadData(string strOutputExcelPath)\n        {\n            var rows = MiniExcel.Query&lt;UserAccount&gt;(strOutputExcelPath);\n            int count = rows.Count(a =&gt; true);\n            return rows;\n        }\n    }\n\n    class UserAccount\n    {\n        public string Column1 { get; set; }\n        public string Column2 { get; set; }\n        public string Column3 { get; set; }\n        public string Column4 { get; set; }\n        public string Column5 { get; set; }\n    }\n}\n\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace ConsoleReadWriteExcel\n{\n    public class MiniExcel_ExcelHelper\n    {\n        public void SaveExcel(string strExcelPath, List&lt;string&gt; listData)\n        {\n            var values = new List&lt;Dictionary&lt;string, object&gt;&gt;();\n\n            foreach (var item in listData)\n            {\n                Dictionary&lt;string, object&gt; dic = new Dictionary&lt;string, object&gt;();\n                for (int i = 0; i &lt; 5; i++)\n                {\n                    dic.Add($\"Column{i + 1}\", item);\n                }\n                values.Add(dic);\n            }\n            MiniExcel.SaveAs(strExcelPath, values);\n        }\n\n        internal IEnumerable&lt;UserAccount&gt; ReadData(string strOutputExcelPath)\n        {\n            var rows = MiniExcel.Query&lt;UserAccount&gt;(strOutputExcelPath);\n            int count = rows.Count(a =&gt; true);\n            return rows;\n        }\n    }\n\n    class UserAccount\n    {\n        public string Column1 { get; set; }\n        public string Column2 { get; set; }\n        public string Column3 { get; set; }\n        public string Column4 { get; set; }\n        public string Column5 { get; set; }\n    }\n}\n\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-04-11 22:44:52", "summary": "前文我们说了中四种开源操作的组件，其中包括、、、。本文来详细的讲解一下四种开源组件操作的代码和效率比对代码框架和数据说明代码框架代码思路：主题思路为以下几条内容：从表中读取数据并将数据写入到中使用不同"}