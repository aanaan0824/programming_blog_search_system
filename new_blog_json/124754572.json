{"blogid": "124754572", "writerAge": "码龄2年", "writerBlogNum": "172", "writerCollect": "257", "writerComment": "15", "writerFan": "31", "writerGrade": "5级", "writerIntegral": "2014", "writerName": "散一世繁华，颠半世琉璃", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124754572.jpg", "writerRankTotal": "10230", "writerRankWeekly": "4953", "writerThumb": "270", "writerVisitNum": "136409", "blog_read_count": "3951", "blog_time": "于 2022-05-14 09:11:13 发布", "blog_title": "Dom4j解析XML（详解）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"1XML_0\"></a>1.XML解析的方式介绍</h2>\n<p>在日常开发中常见的XML解析方式有如下两种：</p>\n<h3><a id=\"1DOM_2\"></a>1.DOM解析</h3>\n<p>DOM解析要求解析器将整个XML文件全部加载到内存中，生成一个Document对象。<br/> 1.优点：元素和元素之间保留结构，关系，可以针对元素进行增删改查操作。<br/> 2.缺点：如果XML文件过大，可能会导致内存溢出。</p>\n<h3><a id=\"2SAX_6\"></a>2.SAX解析</h3>\n<p>SAX解析是一种更加高效的解析方式。它是逐行扫描，边扫描边解析，并且以时间驱动的方式进行具体的解析，每解析一行都会触发一个事件。<br/> 1.优点：不会出现内存溢出的问题，可以处理大文件。<br/> 2.缺点：只能读，不能写。</p>\n<h3><a id=\"3XML_10\"></a>3.常见的解析XML类库</h3>\n<p>解析器就是根据不同的解析方式提供具体的实现，为了方便开发人员来解析XML，有一些方便操作的类库。具体如下所示：<br/> 1.dom4j:比较简单的XML解析类库；<br/> 2.Jsoup：功能强大的DOM方式解析的类库，尤其对HTML的解析更加方便，<strong>所以可以使用Jsoup来爬取网页的数据。</strong></p>\n<h2><a id=\"2dom4jXML_14\"></a>2.使用dom4j解析XML</h2>\n<h3><a id=\"1Maven_15\"></a>1.创建普通的Maven项目</h3>\n<p>打开IDEA编译器，在导航栏选择<strong>文件</strong>，接下来点击<strong>新建</strong> ，然后选择项目。点击后出现如图所示的界面：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9d8c660fb2f94397af3d07221cf448f2.png\"/><br/> 选择创建一个普通的Maven项目，<strong>直接点击下一步即可</strong>。接下来自定义项目的名称，位置以及工作坐标。具体如下所示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2f18a0e0a4f543d88a42eac41d24bb98.png\"/><br/> 点击完成后，IDEA便开始加载项目。</p>\n<h3><a id=\"2dom4j_21\"></a>2.导入dom4j的依赖</h3>\n<p>在加载后的项目下，找到pom.xml文件，将依赖导入其中，具体依赖如下所示：</p>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.dom4j<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>dom4j<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.1.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<h3><a id=\"3dom4juserxml_32\"></a>3.使用dom4j解析user.xml</h3>\n<p>使用dom4j解析user.xml的步骤如下所示：<br/> 在项目的resource目录下创建user.xml文件；<br/> 在下面user.xml文件中，users是根标签，根标签是全局唯一的；<br/> 在根标签下有两个user子标签，每一个user子标签都有两个属性，一个是country，另一个是source；在user标签下同样有三个子标签，分别是id，name以及password标签，具体如下所示：<br/> <strong>1.编写user.xml文件</strong></p>\n<pre><code class=\"prism language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span>\n<span class=\"token comment\">&lt;!--文档声明\n    XML的文档声明是可选的，也就是可以不写，但是日常生活开发中大家都会写\n    XML文档声明如果写了,它必须放在XML文档的第一行第一列,必须以&lt;?xml开头 以?&gt;结尾,而且必须包含两个属性\n    一个是version,表示XML的版本\n    一个是encoding,表示XML的编码\n--&gt;</span>\n<span class=\"token comment\">&lt;!--\n    元素是XML的重要组成部分，元素也被称为标签\n    每个XML文件必须要有一个根标签\n    标签有开始标签和结束标签组成,开始标签和结束标签可以写标签,也可以是文本字符串\n    标签可以嵌套使用,但是不能随便嵌套\n    标签名必须准守命名规则和命名规范\n--&gt;</span>\n<span class=\"token comment\">&lt;!--\n    属性是标签的组成部分，属性只能定义在开始标签中，不能定义在结束标签中\n    属性定义的格式:属性名=属性值，属性值需要使用\"\"包含起来\n    开始标签中可以定义多个属性，但是多个属性的属性名不能相同\n    属性名必须准守命名规则和命名规范\n--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>users</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>user</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10001<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">country</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Chinese<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">source</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Android<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">&gt;</span></span>10001<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>admin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>password</span><span class=\"token punctuation\">&gt;</span></span>111111<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>password</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>user</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>user</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10002<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">country</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Chinese<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">source</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ios<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">&gt;</span></span>10002<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>tony<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>password</span><span class=\"token punctuation\">&gt;</span></span>666666<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>password</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>user</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>users</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p><strong>2.创建解析器对象</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//创建解析器对象</span>\n        <span class=\"token class-name\">SAXReader</span> saxReader<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SAXReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>3.使用解析器对象读取XML文档生成Document对象</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//根据user.xml文档生成Document对象</span>\n<span class=\"token class-name\">Document</span> document <span class=\"token operator\">=</span> saxReader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dom4jParseUserXmlTest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>4.根据Document对象获取XML的元素（标签）信息</strong><br/> Dom4j的常用API说明:</p>\n<table><thead><tr><th>方法</th><th>操作</th></tr></thead><tbody><tr><td>Element getRootElement();</td><td>获取XML文件的根节点</td></tr><tr><td>String getName();</td><td>返回标签的名称</td></tr><tr><td>List &lt; Element &gt; elements();</td><td>获取标签所有的子标签</td></tr><tr><td>String arrtributeVallue(String name) ;</td><td>获取指定属性名称的属性值</td></tr><tr><td>String getText();</td><td>获取标签的文本</td></tr><tr><td>String elementText(String name);</td><td>获取指定名称的子标签的文本，返回子标签文本的值</td></tr></tbody></table>\n<p>具体的Dom4j解析的具体测试代码如下所示：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>dom4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Document</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>dom4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DocumentException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>dom4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>dom4j<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SAXReader</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dom4jParseUserXmlTest</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//创建解析器对象</span>\n        <span class=\"token class-name\">SAXReader</span> saxReader<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SAXReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Document</span> document <span class=\"token operator\">=</span> saxReader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dom4jParseUserXmlTest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Element</span> rootElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getRootElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.-------&gt;users.xml文件的根节点的名字是:\"</span><span class=\"token operator\">+</span>rootElement<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2.-------&gt;获取根标签users的子标签列表\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">&gt;</span></span> usersSubElementList <span class=\"token operator\">=</span> rootElement<span class=\"token punctuation\">.</span><span class=\"token function\">elements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Element</span> userElement <span class=\"token operator\">:</span> usersSubElementList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users标签的子标签的名字是\"</span><span class=\"token operator\">+</span> userElement<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users标签的子标签的id属性值是\"</span><span class=\"token operator\">+</span> userElement<span class=\"token punctuation\">.</span><span class=\"token function\">attributeValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users标签的子标签的country属性值是\"</span><span class=\"token operator\">+</span> userElement<span class=\"token punctuation\">.</span><span class=\"token function\">attributeValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"country\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3.-------&gt;获取user的子标签列表\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">&gt;</span></span> userSubElementList <span class=\"token operator\">=</span> userElement<span class=\"token punctuation\">.</span><span class=\"token function\">elements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Element</span> userSubElement <span class=\"token operator\">:</span> userSubElementList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user标签下的子标签名为:\"</span><span class=\"token operator\">+</span>userSubElement<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user标签下的子标签文本是:\"</span><span class=\"token operator\">+</span>userSubElement<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">//获取users标签的第一个user标签</span>\n            <span class=\"token class-name\">Element</span> firstUserElement <span class=\"token operator\">=</span> rootElement<span class=\"token punctuation\">.</span><span class=\"token function\">element</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//第一个user标签的子标签password的文本内容</span>\n            <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> firstUserElement<span class=\"token punctuation\">.</span><span class=\"token function\">attributeValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DocumentException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"3dom4jXPathXML_137\"></a>3.dom4j结合XPath解析XML</h2>\n<h3><a id=\"1Dom4jXPath_138\"></a>1.Dom4j集成XPath</h3>\n<p>在pom.xml导入Xpath对应的依赖即可，具体如下所示：</p>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>jaxen<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>jaxen<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.2.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<h3><a id=\"2Dom4jXPathAPI_147\"></a>2.Dom4j提供基于XPath的API</h3>\n<table><thead><tr><th>方法</th><th>操作</th></tr></thead><tbody><tr><td>Node selectSingleNode(String xpathExpression);</td><td>根据XPath表达式获取单个标签(元素/节点)</td></tr><tr><td>List &lt; Node &gt; selectNodes(String xpathExpression)</td><td>根据XPath表达式获取多个标签(元素/节点)</td></tr></tbody></table>\n<h3><a id=\"3XPath_152\"></a>3.XPath的语法</h3>\n<p><strong>绝对路径表示方式：</strong><br/> 以/开头的路径表示绝对路径，绝对路径是从根元素开始写。例如 <strong>/元素/子元素/子子元素……</strong>；<br/> <strong>相对路径的表达方式：</strong><br/> 相对于当前节点的元素继续查找的节点，不以/开头，<strong>…/表示上一个元素</strong>，<strong>./表示当前元素</strong>；<br/> <strong>全文搜索路径方式：</strong><br/> 例如//子元素，//子元素//子子元素，//子元素/子子元素。<br/> <strong>注意：</strong><br/> //表示无论中间有多少层，直接获取所有子元素所有满足条件的元素<br/> /表示只找一层<br/> <strong>谓语（条件筛选形式）</strong><br/> 例如 ： //元素[@attr1=value]</p>\n<p>具体对应的每一种方式的Java测试程序如下所示：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>dom4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Document</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>dom4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DocumentException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>dom4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>dom4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>dom4j<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SAXReader</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dom4jXPathParseUserXmlTest</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">SAXReader</span> saxReader<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SAXReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Document</span> document<span class=\"token operator\">=</span> saxReader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dom4jXPathParseUserXmlTest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//拿到第一个用户的密码</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.------&gt;使用绝对路径方式来查找元素\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Element</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">)</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">selectSingleNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users/user/password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2.------&gt;使用相对路径查找元素\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//element是当前获取的password元素</span>\n            <span class=\"token class-name\">Element</span> name <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">)</span> element<span class=\"token punctuation\">.</span><span class=\"token function\">selectSingleNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第一个用户的姓名为\"</span><span class=\"token operator\">+</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3.------&gt;使用全局搜索的方式\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//获取所有的id元素的文本</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">&gt;</span></span> idNodeList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">selectNodes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"//id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node <span class=\"token operator\">:</span> idNodeList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">Element</span> idElement<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">)</span> node<span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>idElement<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4.------&gt;谓语形式\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//获取id=10002的用户信息</span>\n            <span class=\"token class-name\">Element</span> idElement <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">)</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">selectSingleNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"//user[@id='10002']\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">&gt;</span></span> elements <span class=\"token operator\">=</span> idElement<span class=\"token punctuation\">.</span><span class=\"token function\">elements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Element</span> element1 <span class=\"token operator\">:</span> elements<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>element1<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"=\"</span><span class=\"token operator\">+</span>element1<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DocumentException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-05-14 09:11:13", "summary": "解析的方式介绍在日常开发中常见的解析方式有如下两种：解析解析要求解析器将整个文件全部加载到内存中，生成一个对象。优点：元素和元素之间保留结构，关系，可以针对元素进行增删改查操作。缺点：如果文件过大，可"}