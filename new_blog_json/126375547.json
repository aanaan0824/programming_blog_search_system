{"blogid": "126375547", "writerAge": "码龄2年", "writerBlogNum": "70", "writerCollect": "3155", "writerComment": "3023", "writerFan": "12179", "writerGrade": "6级", "writerIntegral": "8027", "writerName": "程序猿追", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126375547.jpg", "writerRankTotal": "1707", "writerRankWeekly": "74", "writerThumb": "2788", "writerVisitNum": "110940", "blog_read_count": "625", "blog_time": "已于 2022-09-05 11:30:38 修改", "blog_title": "Servlet 架构思路（MVC）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p class=\"img-center\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/ebf56577e58a4d55a674c4616280b205.gif#pic_center\"/></p>\n<p>这几天在做一个前后端分离的一个项目，采用的是 MVC 模式，对于 MVC 网上的教程杂乱无章，也没有写的较详细的，所以写了此文，本文作为一个分享文，分享本人在学习中遇到的问题以及一些自个认为好用的小技巧。</p>\n<p></p>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E7%BB%93%E6%9E%84-toc\" style=\"margin-left:0px;\"><a href=\"#%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E7%BB%93%E6%9E%84\">目录下的结构</a></p>\n<p id=\"%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:0px;\"><a href=\"#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">配置文件</a></p>\n<p id=\"Dao%20%E5%B1%82-toc\" style=\"margin-left:0px;\"><a href=\"#Dao%20%E5%B1%82\">Dao 层</a></p>\n<p id=\"Service%20%E5%B1%82-toc\" style=\"margin-left:0px;\"><a href=\"#Service%20%E5%B1%82\">Service 层</a></p>\n<p id=\"Control%20%E5%B1%82-toc\" style=\"margin-left:0px;\"><a href=\"#Control%20%E5%B1%82\">Control 层</a></p>\n<p id=\"Model%20%E5%B1%82-toc\" style=\"margin-left:0px;\"><a href=\"#Model%20%E5%B1%82\">Model 层</a></p>\n<p id=\"lib%20%E5%AF%BC%E5%8C%85-toc\" style=\"margin-left:0px;\"><a href=\"#lib%20%E5%AF%BC%E5%8C%85\">lib 导包</a></p>\n<p id=\"web.xml%20%E9%85%8D%E7%BD%AE-toc\" style=\"margin-left:0px;\"><a href=\"#web.xml%20%E9%85%8D%E7%BD%AE\">web.xml 配置</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h1 id=\"%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E7%BB%93%E6%9E%84\">目录下的结构</h1>\n<pre><code>config\n    jdbc.properties\nsrc\n    com.xxx\n        user(一般与项目名挂钩)\n            control\n                UserServlet.java\n            dao\n                impl\n                    UserDao.java\n            IUserDao.java\n            model\n                User.java\n            service\n                impl\n                    UserService.java\n            IUserService.java\n        util\n            JdbcUtil.java\nweb\n    web-inf\n        web.xml\n        lib\n            xxx.jar\n    xxx.jsp</code></pre>\n<p class=\"img-center\"><img alt=\"\" height=\"567\" src=\"..\\..\\static\\image\\d3af72a1b80c4bafba26c8d76a18b671.png\" width=\"320\"/></p>\n<h1 id=\"%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">配置文件</h1>\n<p>jdbc.properties : 开发中获得连接的4个参数（驱动、URL、用户名、密码）通常都存在配置文件中，方便后期维护，程序如果需要更换数据库，只需要修改配置文件即可。</p>\n<p><strong>oracle 版</strong></p>\n<pre><code>username=itxzw\npassword=123456\ndriver=oracle.jdbc.OracleDriver\nurl=jdbc:oracle:thin:@localhost:1521:orcl</code></pre>\n<p><strong>mysql 版</strong></p>\n<pre><code>driver=com.mysql.cj.jdbc.Driver\nurl=jdbc:mysql://localhost:3306/db1?serverTimezone=Hongkong&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false\n\n\n或\nurl=jdbc:mysql://localhost/db1?useSSL=false&amp;CharacterEncoding=UTF-8&amp;server=TUC\nuser=root\npassword=123456\n</code></pre>\n<p><strong>JdbcUtil.java</strong></p>\n<p>里面存放的是对连接 DB 的一些配置文件，可以减少代码量</p>\n<pre><code class=\"language-java\">public class JdbcUtil {\n    public static String username;\n    public static String password;\n    public static String driver;\n    public static String url;\n\n    static {\n        // -1.读取配置文件\n        InputStream is = JdbcUtil.class.getClassLoader().getResourceAsStream(\"jdbc.properties\");\n        Properties pro = new Properties();\n        try {\n            pro.load(is);\n            username = pro.getProperty(\"username\");\n            password = pro.getProperty(\"password\");\n            driver = pro.getProperty(\"driver\");\n            url = pro.getProperty(\"url\");\n\n            // 0.加载驱动\n            Class.forName(driver);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static Connection getConnection(){\n        // 1.连接数据库\n        Connection conn = null;\n        try {\n            conn = DriverManager.getConnection(url, username, password);\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n        return conn;\n    }\n\n    public static void close(ResultSet rs, Statement stmt,Connection conn){\n        // 5.关闭连接\n        try {\n            if(rs!=null){\n                rs.close();\n            }\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }finally {\n            try {\n                if (stmt!=null){\n                    stmt.close();\n                }\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }finally {\n\n                try {\n                    if (conn!=null){\n                        conn.close();\n                    }\n                } catch (SQLException throwables) {\n                    throwables.printStackTrace();\n                }\n            }\n        }\n    }\n\n\n}\n</code></pre>\n<h1 id=\"Dao%20%E5%B1%82\">Dao 层</h1>\n<p>dao 里面存放的是对 DB 进行操作的一些代码</p>\n<p>IUserDao.java 里面存放的是对 DB 进行操作的一些代码的接口</p>\n<pre><code class=\"language-java\">public interface IUserDao {\n\n    // 添加用户\n    public boolean add(User user);\n\n    // 查询\n    public User query(User user);\n\n    // 根据名字查询\n    public User queryUserByName(String name);\n\n\n    // 根据ID_NUMBER查\n    public User queryUserByNumber(String number);\n}</code></pre>\n<p>UserDao.java 里面的就是实现 IUserDao.java 的代码，对 DB 进行操作</p>\n<pre><code class=\"language-java\">public class UserDao implements IUserDao {\n    @Override\n    public boolean add(User user) {\n\n        …………\n        return user;\n    }\n\n    @Override\n    public User query(User user) {\n        Connection conn = null;\n        PreparedStatement stmt = null;\n        ResultSet rs = null;\n        User loginuser = null;\n        try {\n            // 1.连接数据库\n            conn = JdbcUtil.getConnection();\n            // 2.获取Statement对象：将sql语句传给数据库服务器执行\n            String sql = \"select * from T_USER where USERNAME = ? and PASSWORD = ?\";\n            stmt = conn.prepareStatement(sql);\n            // 2.5.注入参数\n            stmt.setString(1,user.getUsername());\n            stmt.setString(2,user.getPassword());\n\n            // 3.执行sql，获取返回结果\n            rs = stmt.executeQuery();\n\n            // 4.处理结果集\n\n            if(rs.next()){\n                Integer id = rs.getBigDecimal(\"id\")==null?null:rs.getBigDecimal(\"id\").intValue();\n                String un = rs.getString(\"username\");\n                String password = rs.getString(\"password\");\n                Integer sex = rs.getString(\"sex\")==null?null:rs.getBigDecimal(\"sex\").intValue();\n                String idNumber = rs.getString(\"ID_NUMBER\");\n                String tel = rs.getString(\"tel\");\n                String addr = rs.getString(\"addr\");\n                Integer type = rs.getString(\"type\")==null?null:rs.getBigDecimal(\"type\").intValue();\n                loginuser = new User(id,un,password,sex,idNumber,tel,addr,type);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }finally {\n            JdbcUtil.close(rs,stmt,conn);\n        }\n        return loginuser;\n    }\n\n    @Override\n    public User queryUserByName(String name) {\n\n        …………\n        return user;\n    }\n\n    @Override\n    public User queryUserByNumber(String number) {\n\n        …………\n        return user;\n    }\n}\n</code></pre>\n<p>里面就是对 DB 进行增删改查等操作</p>\n<h1 id=\"Service%20%E5%B1%82\">Service 层</h1>\n<p>IUserService.java 里面存放的是实现 UserService.java 里面的接口</p>\n<pre><code class=\"language-java\">public interface IUserService {\n\n    // 添加用户\n    public boolean register(User user);\n\n    // 登录\n    public User login(User user);\n\n    // 根据名字查询\n    public User queryUserByName(String name);\n\n\n    // 根据ID_NUMBER查\n    public User queryUserByNumber(String number);\n\n}</code></pre>\n<p>UserService.java 里面存放的是实现 IUserService.java 接口里面的方法，申明一个 Dao 的成员，然后使用该 Dao 成员调用 Dao 里面的方法。</p>\n<pre><code class=\"language-java\">public class UserService implements IUserService {\n\n    private UserDao userDao;\n\n    public void setUserDao(UserDao userDao) {\n        this.userDao = userDao;\n    }\n    public UserDao getUserDao() {\n        return userDao;\n    }\n\n\n    @Override\n    public boolean register(User user) {\n        User user1 = userDao.queryUserByName(user.getUsername());\n        if (user1!=null) return false;\n        User user2 = userDao.queryUserByNumber(user.getIdNumber());\n        if (user2!=null) return false;\n        return userDao.add(user);\n    }\n\n    @Override\n    public User login(User user) {\n        return userDao.query(user);\n    }\n\n    @Override\n    public User queryUserByName(String name) {\n        return userDao.queryUserByName(name);\n    }\n\n    @Override\n    public User queryUserByNumber(String number) {\n        return userDao.queryUserByNumber(number);\n    }\n}</code></pre>\n<h1 id=\"Control%20%E5%B1%82\">Control 层</h1>\n<p>control 里面存放的是 Servlet，与界面（view）、service进行交互。</p>\n<pre><code class=\"language-java\">public class UserServlet extends HttpServlet {\n    private UserService userService;\n\n    @Override\n    public void init() throws ServletException {\n        userService = new UserService();\n        UserDao userDao = new UserDao();\n        userService.setUserDao(userDao);\n    }\n\n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n         doPost(req,resp);\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        request.setCharacterEncoding(\"UTF-8\");\n\n        String action = request.getParameter(\"action\");\n        if(\"LOGIN\".equalsIgnoreCase(action)){\n            login(request,response);\n        }else if (\"REGISTER\".equalsIgnoreCase(action)){\n            register(request,response);\n        }else{\n            response.sendRedirect(\"/a1/day02/fade.jsp\");\n        }\n    }\n\n    public void login(HttpServletRequest request, HttpServletResponse response)throws ServletException, IOException{\n        String username = request.getParameter(\"username\");\n        String password = request.getParameter(\"password\");\n        User u = new User();\n        u.setUsername(username);\n        u.setPassword(password);\n\n        User loginuser = userService.login(u);\n        if(loginuser!=null){\n            response.sendRedirect(\"/a1/day02/success.jsp\");\n        }else{\n            response.sendRedirect(\"/a1/day02/login.jsp\");\n        }\n\n    }\n\n    public void register(HttpServletRequest request, HttpServletResponse response)throws ServletException, IOException{\n\n\n        String[] hobbys = request.getParameterValues(\"hobby\");\n        String un = request.getParameter(\"username\");\n        String password = request.getParameter(\"password\");\n        String usersex = request.getParameter(\"sex\");\n        Integer sex = usersex==null?null:Integer.parseInt(usersex);\n        String idNumber = request.getParameter(\"id_number\");\n        String tel = request.getParameter(\"tel\");\n        String addr = request.getParameter(\"addr\");\n\n        String usertype = request.getParameter(\"type\");\n        Integer type = usertype==null?null:Integer.parseInt(usertype);\n\n\n        response.setContentType(\"text/html;charset=UTF-8\");\n        response.getWriter().println(\"哈哈\");\n        \n\n    }\n\n}\n</code></pre>\n<p>Servlet生命周期 init 只会执行一次，申明 Service 层的对象一般只申明一次，以后项目上云了，如果有成千上万的人来访问你的网页，执行一次就创建一个 Service ，非常的浪费，所以为了减少内存的使用就把 Service 放入到 init 里面。</p>\n<h1 id=\"Model%20%E5%B1%82\">Model 层</h1>\n<p>里面存放的是实体类，对成员的 getter 与 setter 方法，有参无参的构造函数，重写toString等方法。</p>\n<pre><code class=\"language-java\">public class User {\n\n    private int id;\n    private String username;\n    private String password;\n    private int sex;\n    private String id_number;\n    private String tel;\n    private String addr;\n    private int type;\n\n    public User() {\n    }\n\n    public User(int id, String username, String password, int sex, String id_number, String tel, String addr, int type) {\n        this.id = id;\n        this.username = username;\n        this.password = password;\n        this.sex = sex;\n        this.id_number = id_number;\n        this.tel = tel;\n        this.addr = addr;\n        this.type = type;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public int getSex() {\n        return sex;\n    }\n\n    public void setSex(int sex) {\n        this.sex = sex;\n    }\n\n    public String getId_number() {\n        return id_number;\n    }\n\n    public void setId_number(String id_number) {\n        this.id_number = id_number;\n    }\n\n    public String getTel() {\n        return tel;\n    }\n\n    public void setTel(String tel) {\n        this.tel = tel;\n    }\n\n    public String getAddr() {\n        return addr;\n    }\n\n    public void setAddr(String addr) {\n        this.addr = addr;\n    }\n\n    public int getType() {\n        return type;\n    }\n\n    public void setType(int type) {\n        this.type = type;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"id=\" + id +\n                \", username='\" + username + '\\'' +\n                \", password='\" + password + '\\'' +\n                \", sex=\" + sex +\n                \", id_number='\" + id_number + '\\'' +\n                \", tel='\" + tel + '\\'' +\n                \", addr='\" + addr + '\\'' +\n                \", type=\" + type +\n                '}';\n    }\n}</code></pre>\n<p>或者用 lombok.jar 就可以不用写getter 与 setter 方法，有参无参的构造函数，重写toString等方法。</p>\n<pre><code class=\"language-java\">@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@ToString\npublic class User {\n\n  private Integer id;\n  private String username;\n  private String password;\n  private Integer sex;\n  private String idNumber;\n  private String tel;\n  private String addr;\n  private Integer type;\n\n}</code></pre>\n<h1 id=\"lib%20%E5%AF%BC%E5%8C%85\">lib 导包</h1>\n<p>lib 里面存放的是导入的一些 .jar 包。</p>\n<p>xxx.jsp</p>\n<p>这个不用多讲，有一点需要注意的是，from 的 action 的位置与你的 web.xml 文件对应的。</p>\n<h1 id=\"web.xml%20%E9%85%8D%E7%BD%AE\">web.xml 配置</h1>\n<p>web.xml文件是用来初始化配置信息:比如Welcome页面、servlet、servlet-mapping、filter、listener、启动加载级别等。 每个xml文件都有定义它书写规则的Schema文件,也就是说javaEE的定义web.xml所对应的xml Schema文件中定义了多少种标签元素,web.xml中就可以出现它所定义的标签元素,也就具备哪些特定的功能。</p>\n<pre><code>    &lt;servlet&gt;\n        &lt;servlet-name&gt;UserServlet&lt;/servlet-name&gt;\n        &lt;servlet-class&gt;com.itxzw.user.control.UserServlet&lt;/servlet-class&gt;\n    &lt;/servlet&gt;\n\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;UserServlet&lt;/servlet-name&gt;\n        &lt;url-pattern&gt;/userServlet&lt;/url-pattern&gt;\n    &lt;/servlet-mapping&gt;</code></pre>\n<p><img alt=\"\" height=\"334\" src=\"..\\..\\static\\image\\fc0648ff8707477cb46dbccc865091af.png\" width=\"817\"/></p>\n<p><strong> servlet-mapping</strong></p>\n<p>servlet映射 端口映射过程就如同:你家在一个小区里B栋2410室,你朋友来找你,找到小区门口,不知道你住哪层哪号?就问守门的保安,保安很客气的告诉了他你家详细门牌,所以你朋友很轻松的找到了你家。</p>\n<p><strong>url-pattern</strong></p>\n<p>其实 url-pattern 就是说的 url 模式,就是容器在查找时根据这个模式来找到具体的servlet来执行。</p>\n<p><strong>servlet-name</strong></p>\n<p>Servlet程序起一个别名,一般是类名,作用是告诉服务器,当前配置的地址给哪个Servlet程序使用</p>\n<p><strong>servlet-class</strong></p>\n<p>java web开发中请求转发的类，就是你的类在你包下的地址。</p>\n<p></p>\n<blockquote>\n<p><strong> 不积跬步无以至千里，趁年轻，使劲拼，给未来的自己一个交代！向着明天更好的自己前进吧！</strong></p>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" height=\"152\" src=\"https://img-blog.csdnimg.cn/02bed6ae9d27419b804c4605db6cee66.gif\" width=\"270\"/></p>\n</blockquote>\n<p></p>\n</div>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-09-05 11:30:38", "summary": "这几天在做一个前后端分离的一个项目，采用的是模式，对于网上的教程杂乱无章，也没有写的较详细的，所以写了此文，本文作为一个分享文，分享本人在学习中遇到的问题以及一些自个认为好用的小技巧。目录目录下的结构"}