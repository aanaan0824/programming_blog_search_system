{"blogid": "122715577", "writerAge": "码龄3年", "writerBlogNum": "27", "writerCollect": "278", "writerComment": "21", "writerFan": "74", "writerGrade": "3级", "writerIntegral": "573", "writerName": "youhahhhh", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122715577.jpg", "writerRankTotal": "109395", "writerRankWeekly": "91325", "writerThumb": "76", "writerVisitNum": "45837", "blog_read_count": "15926", "blog_time": "已于 2022-01-27 17:33:19 修改", "blog_title": "python实现随机森林", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"1__0\"></a>1. 随机森林的介绍</h2>\n<p>随机森林就是通过集成学习的思想将多棵树集成的一种算法，它的基本单元是决策树，而它的本质属于机器学习的一大分支——集成学习（Ensemble Learning）方法。随机森林的名称中有两个关键词，一个是“随机”，一个就是“森林”。“森林”我们很好理解，一棵叫做树，那么成百上千棵就可以叫做森林了，这样的比喻还是很贴切的，其实这也是随机森林的主要思想–集成思想的体现。“随机”的含义我们会在下边部分讲到。</p>\n<p>其实从直观角度来解释，每棵决策树都是一个分类器（假设现在针对的是分类问题），那么对于一个输入样本，N棵树会有N个分类结果。而随机森林集成了所有的分类投票结果，将投票次数最多的类别指定为最终的输出，这就是一种最简单的 Bagging 思想。</p>\n<p>随机森林中有许多的分类树。如果要将一个输入样本进行分类，需要将输入样本输入到每棵树中进行分类。打个形象的比喻：森林中召开会议，讨论某个动物到底是老鼠还是松鼠，每棵树都要独立地发表自己对这个问题的看法，也就是每棵树都要投票。该动物到底是老鼠还是松鼠，要依据投票情况来确定，获得票数最多的类别就是森林的分类结果。森林中的每棵树都是独立的，99.9%不相关的树做出的预测结果涵盖所有的情况，这些预测结果将会彼此抵消。少数优秀的树的预测结果将会超脱于芸芸“噪音”，做出一个好的预测。将若干个弱分类器的分类结果进行投票选择，从而组成一个强分类器，这就是随机森林bagging的思想（关于bagging的一个有必要提及的问题：bagging的代价是不用单棵决策树来做预测，具体哪个变量起到重要作用变得未知，所以bagging改进了预测准确率但损失了解释性。）</p>\n<p>有了树我们就可以分类了，那么问题来了，<strong>森林中的每棵树是怎么生成的呢</strong>？</p>\n<h3><a id=\"11__9\"></a>1.1 随机森林中“树”的生成</h3>\n<p>每棵树的按照如下规则生成：</p>\n<ol><li> <p>如果训练集大小为N，对于每棵树而言，随机且有放回地从训练集中的抽取N个训练样本（这种采样方式称为bootstrap sample方法），作为该树的训练集；从这里我们可以知道：每棵树的训练集都是不同的，而且里面包含重复的训练样本（理解这点很重要）。</p> <p><strong>这里有两个问题：</strong></p>\n<blockquote>\n<p>Problem1 ： <strong>为什么要随机抽样训练集？</strong><br/> 如果不进行随机抽样，每棵树的训练集都一样，那么最终训练出的树分类结果也是完全一样的，这样的话完全没有bagging的必要；</p>\n</blockquote>\n<blockquote>\n<p>Problem2： <strong>为什么要有放回地抽样？</strong></p>\n<ul><li>如果不放回抽样，每棵树用的样本完全不同，结果是有偏的，基学习器之间的相似性小，投票结果差，模型偏差大</li><li>如果不抽样，基学习器用所有样本，那么模型的泛化能力弱，基学习器之前相似性太大差异性太小，模型的偏差大</li></ul>\n</blockquote> </li><li> <p>如果每个样本的特征维度为M，指定一个常数m&lt;&lt;M，随机地从M个特征中选取m个特征子集，每次树进行分裂时，从这m个特征中选择最优的；</p> </li><li> <p>每棵树都尽最大程度的生长，并且没有剪枝过程。</p> </li></ol>\n<p>一开始我们提到的随机森林中的“随机”就是指的这里的两个随机性。两个随机性的引入对随机森林的分类性能至关重要。由于它们的引入，使得随机森林不容易陷入过拟合，并且具有很好得抗噪能力（比如：对缺省值不敏感）。</p>\n<h3><a id=\"12__28\"></a>1.2 随机森林分类效果（错误率）的影响因素：</h3>\n<p><strong>随机森林分类效果（错误率）与两个因素有关：</strong></p>\n<ul><li>森林中任意两棵树的相关性：相关性越大，错误率越大；</li><li>森林中每棵树的分类能力：每棵树的分类能力越强，整个森林的错误率越低。</li></ul>\n<p>减小特征选择个数m，树的相关性和分类能力也会相应的降低；增大m，两者也会随之增大。所以关键问题是如何选择最优的m（或者是范围），这也是随机森林唯一的一个参数。</p>\n<h3><a id=\"13_oob_error_36\"></a>1.3 袋外错误率（oob error）</h3>\n<p>上面我们提到，构建随机森林的关键问题就是如何选择最优的m，要解决这个问题主要依据计算袋外错误率oob error（out-of-bag error）。</p>\n<p>随机森林有一个重要的优点就是，没有必要对它进行交叉验证或者用一个独立的测试集来获得误差的一个无偏估计。它可以在内部进行评估，也就是说在生成的过程中就可以对误差建立一个无偏估计。</p>\n<p>在构建每棵树时，我们对训练集使用了不同的bootstrap sample（随机且有放回地抽取）。所以对于每棵树而言（假设对于第k棵树），大约有1/3的训练实例没有参与第k棵树的生成，它们称为第k棵树的oob样本。</p>\n<p>而这样的采样特点就允许我们进行oob估计，它的计算方式如下：</p>\n<p>（note：以样本为单位）</p>\n<p>1）对每个样本，计算它作为oob样本的树对它的分类情况（约1/3的树）；</p>\n<p>2）然后以简单多数投票作为该样本的分类结果；</p>\n<p>3）最后用误分个数占样本总数的比率作为随机森林的oob误分率。</p>\n<h2><a id=\"2__53\"></a>2. 随机森林工作原理解释的一个例子</h2>\n<h3><a id=\"21__55\"></a>2.1 问题描述</h3>\n<blockquote>\n<p><strong>描述</strong>：根据已有的训练集已经生成了对应的随机森林，随机森林如何利用某一个人的年龄（Age）、性别（Gender）、教育情况（Highest Educational Qualification）、工作领域（Industry）以及住宅地（Residence）共5个字段来预测他的收入层次。<br/> <strong>收入层次</strong> :<br/> Band 1 : Below $40,000<br/> Band 2: $40,000 – 150,000<br/> Band 3: More than $150,000</p>\n</blockquote>\n<blockquote>\n<p>随机森林中每一棵树都可以看做是一棵CART（分类回归树），这里假设森林中有5棵CART树，总特征个数N=5，我们取m=1（这里假设每个CART树对应一个不同的特征）。</p>\n</blockquote>\n<p><img alt=\"**CART 1 : Variable Age**\" src=\"..\\..\\static\\image\\5e99714b37784dc2a2cbc02ddda12cef.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a04bdd0c8ad1450fb6403c498dae8823.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1cb54de22a354e21be535b904a749f92.png\"/></p>\n<h3><a id=\"22__68\"></a>2.2 具体问题</h3>\n<p><strong>我们要预测的某个人的信息如下：</strong></p>\n<ol><li>Age : 35 years ;</li><li>Gender : Male ;</li><li>Highest Educational Qualification : Diploma holder;</li><li>Industry : Manufacturing;</li><li>Residence : Metro.</li></ol>\n<p>根据这个人的5个相关信息，可判断其收入层次为？</p>\n<h3><a id=\"23__79\"></a>2.3 得出结论</h3>\n<p>根据这五棵CART树的分类结果，我们可以针对这个人的信息建立收入层次的分布情况：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\954ce5737adc45ffbd293392d7f3a547.png\"/><br/> 最后，我们得出结论，这个人的收入层次70%是一等，大约24%为二等，6%为三等，所以最终认定该人属于一等收入层次（小于$40,000）。</p>\n<h2><a id=\"3_python_85\"></a>3. 随机森林实现（用python）</h2>\n<p><strong>问题</strong>：如何衡量住房指标的主要影响因素所占的比重？</p>\n<h3><a id=\"31__87\"></a>3.1 数据集来源</h3>\n<p><a href=\"https://download.csdn.net/download/qq_45067943/78131985\">住房数据集</a></p>\n<h3><a id=\"32__89\"></a>3.2 代码</h3>\n<h4><a id=\"321_90\"></a>3.2.1一些可以了解的参数</h4>\n<p>要了解<code>sklearn.ensemble.RandomForestRegressor</code>每个参数的意义，我们需要从函数定义入手，具体介绍还得看官网介绍：</p>\n<pre><code class=\"prism language-python\">sklearn<span class=\"token punctuation\">.</span>ensemble<span class=\"token punctuation\">.</span>RandomForestRegressor<span class=\"token punctuation\">(</span>\nn_estimators<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> \t\t\t\t<span class=\"token comment\"># 树的棵树，默认是100</span>\ncriterion<span class=\"token operator\">=</span><span class=\"token string\">'mse'</span><span class=\"token punctuation\">,</span> \t\t\t\t\t<span class=\"token comment\"># 默认“ mse”，衡量质量的功能，可选择“mae”。</span>\nmax_depth<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> \t\t\t\t\t<span class=\"token comment\"># 树的最大深度。</span>\nmin_samples_split<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> \t\t\t\t<span class=\"token comment\"># 拆分内部节点所需的最少样本数：</span>\nmin_samples_leaf<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \t\t\t\t<span class=\"token comment\"># 在叶节点处需要的最小样本数。</span>\nmin_weight_fraction_leaf<span class=\"token operator\">=</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> \t\t<span class=\"token comment\"># 在所有叶节点处的权重总和中的最小加权分数。</span>\nmax_features<span class=\"token operator\">=</span><span class=\"token string\">'auto'</span><span class=\"token punctuation\">,</span> \t\t\t\t<span class=\"token comment\"># 寻找最佳分割时要考虑的特征数量。</span>\nmax_leaf_nodes<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> \t\t\t\t<span class=\"token comment\"># 以最佳优先方式生长具有max_leaf_nodes的树。</span>\nmin_impurity_decrease<span class=\"token operator\">=</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> \t\t\t<span class=\"token comment\"># 如果节点分裂会导致杂质的减少大于或等于该值，则该节点将被分裂。</span>\nmin_impurity_split<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> \t\t\t<span class=\"token comment\"># 提前停止树木生长的阈值。</span>\nbootstrap<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> \t\t\t\t\t<span class=\"token comment\"># 建立树木时是否使用bootstrap抽样。 如果为False，则将整个数据集用于构建每棵决策树。</span>\noob_score<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> \t\t\t\t\t<span class=\"token comment\"># 是否使用out-of-bag样本估算未过滤的数据的R2。</span>\nn_jobs<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> \t\t\t\t\t\t<span class=\"token comment\"># 并行运行的Job数目。</span>\nrandom_state<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> \t\t\t\t\t<span class=\"token comment\"># 控制构建树时样本的随机抽样</span>\nverbose<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> \t\t\t\t\t\t\t<span class=\"token comment\"># 在拟合和预测时控制详细程度。</span>\nwarm_start<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> \t\t\t\t\t<span class=\"token comment\"># 设置为True时，重复使用上一个解决方案，否则，只需拟合一个全新的森林。</span>\nccp_alpha<span class=\"token operator\">=</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\nmax_samples<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\t\t\t\t\t<span class=\"token comment\"># 如果bootstrap为True，则从X抽取以训练每个决策树。</span>\n\n</code></pre>\n<h4><a id=\"322__114\"></a>3.2.2 核心代码部分</h4>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>ensemble <span class=\"token keyword\">import</span> RandomForestRegressor\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>model_selection <span class=\"token keyword\">import</span> train_test_split\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>metrics <span class=\"token keyword\">import</span> r2_score\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>metrics <span class=\"token keyword\">import</span> mean_squared_error\n\n<span class=\"token comment\">#导入数据集</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'E:\\\\随机森林\\\\test_py住房\\\\housing.data.txt'</span><span class=\"token punctuation\">,</span>sep<span class=\"token operator\">=</span><span class=\"token string\">'\\s+'</span><span class=\"token punctuation\">)</span>\n                 \n<span class=\"token comment\"># 输出数据预览</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#自变量（该数据集的前13项）</span>\nX <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>values \n\n<span class=\"token comment\">#因变量（该数据集的最后1项，即第14项）</span>\ny <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>values\n\nX_train<span class=\"token punctuation\">,</span> X_test<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">,</span> y_test <span class=\"token operator\">=</span> train_test_split<span class=\"token punctuation\">(</span>\n    X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> test_size<span class=\"token operator\">=</span><span class=\"token number\">0.6</span><span class=\"token punctuation\">,</span> random_state<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 评估回归性能</span>\n<span class=\"token comment\"># criterion ：</span>\n<span class=\"token comment\"># 回归树衡量分枝质量的指标，支持的标准有三种：</span>\n<span class=\"token comment\"># 1）输入\"mse\"使用均方误差mean squared error(MSE)，父节点和叶子节点之间的均方误差的差额将被用来作为特征选择的标准，</span>\n<span class=\"token comment\"># 这种方法通过使用叶子节点的均值来最小化L2损失</span>\n<span class=\"token comment\"># 2）输入“friedman_mse”使用费尔德曼均方误差，这种指标使用弗里德曼针对潜在分枝中的问题改进后的均方误差</span>\n<span class=\"token comment\"># 3）输入\"mae\"使用绝对平均误差MAE（mean absolute error），这种指标使用叶节点的中值来最小化L1损失</span>\n\n<span class=\"token comment\">#此处使用mse</span>\nforest <span class=\"token operator\">=</span> RandomForestRegressor<span class=\"token punctuation\">(</span>n_estimators<span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n                               criterion<span class=\"token operator\">=</span><span class=\"token string\">'mse'</span><span class=\"token punctuation\">,</span>\n                               random_state<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                               n_jobs<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nforest<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">)</span>\ny_train_pred <span class=\"token operator\">=</span> forest<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">)</span>\ny_test_pred <span class=\"token operator\">=</span> forest<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MSE train: %.3f, test: %.3f'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>\n        mean_squared_error<span class=\"token punctuation\">(</span>y_train<span class=\"token punctuation\">,</span> y_train_pred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        mean_squared_error<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> y_test_pred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'R^2 train: %.3f, test: %.3f'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>\n        r2_score<span class=\"token punctuation\">(</span>y_train<span class=\"token punctuation\">,</span> y_train_pred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        r2_score<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> y_test_pred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"prism language-python\"> CRIM    ZN  INDUS  CHAS    NOX     RM   AGE     DIS  RAD    TAX  \\\n<span class=\"token number\">0</span>  <span class=\"token number\">0.00632</span>  <span class=\"token number\">18.0</span>   <span class=\"token number\">2.31</span>     <span class=\"token number\">0</span>  <span class=\"token number\">0.538</span>  <span class=\"token number\">6.575</span>  <span class=\"token number\">65.2</span>  <span class=\"token number\">4.0900</span>    <span class=\"token number\">1</span>  <span class=\"token number\">296.0</span>   \n<span class=\"token number\">1</span>  <span class=\"token number\">0.02731</span>   <span class=\"token number\">0.0</span>   <span class=\"token number\">7.07</span>     <span class=\"token number\">0</span>  <span class=\"token number\">0.469</span>  <span class=\"token number\">6.421</span>  <span class=\"token number\">78.9</span>  <span class=\"token number\">4.9671</span>    <span class=\"token number\">2</span>  <span class=\"token number\">242.0</span>   \n<span class=\"token number\">2</span>  <span class=\"token number\">0.02729</span>   <span class=\"token number\">0.0</span>   <span class=\"token number\">7.07</span>     <span class=\"token number\">0</span>  <span class=\"token number\">0.469</span>  <span class=\"token number\">7.185</span>  <span class=\"token number\">61.1</span>  <span class=\"token number\">4.9671</span>    <span class=\"token number\">2</span>  <span class=\"token number\">242.0</span>   \n<span class=\"token number\">3</span>  <span class=\"token number\">0.03237</span>   <span class=\"token number\">0.0</span>   <span class=\"token number\">2.18</span>     <span class=\"token number\">0</span>  <span class=\"token number\">0.458</span>  <span class=\"token number\">6.998</span>  <span class=\"token number\">45.8</span>  <span class=\"token number\">6.0622</span>    <span class=\"token number\">3</span>  <span class=\"token number\">222.0</span>   \n<span class=\"token number\">4</span>  <span class=\"token number\">0.06905</span>   <span class=\"token number\">0.0</span>   <span class=\"token number\">2.18</span>     <span class=\"token number\">0</span>  <span class=\"token number\">0.458</span>  <span class=\"token number\">7.147</span>  <span class=\"token number\">54.2</span>  <span class=\"token number\">6.0622</span>    <span class=\"token number\">3</span>  <span class=\"token number\">222.0</span>   \n\n   PTRATIO       B  LSTAT  MEDV  \n<span class=\"token number\">0</span>     <span class=\"token number\">15.3</span>  <span class=\"token number\">396.90</span>   <span class=\"token number\">4.98</span>  <span class=\"token number\">24.0</span>  \n<span class=\"token number\">1</span>     <span class=\"token number\">17.8</span>  <span class=\"token number\">396.90</span>   <span class=\"token number\">9.14</span>  <span class=\"token number\">21.6</span>  \n<span class=\"token number\">2</span>     <span class=\"token number\">17.8</span>  <span class=\"token number\">392.83</span>   <span class=\"token number\">4.03</span>  <span class=\"token number\">34.7</span>  \n<span class=\"token number\">3</span>     <span class=\"token number\">18.7</span>  <span class=\"token number\">394.63</span>   <span class=\"token number\">2.94</span>  <span class=\"token number\">33.4</span>  \n<span class=\"token number\">4</span>     <span class=\"token number\">18.7</span>  <span class=\"token number\">396.90</span>   <span class=\"token number\">5.33</span>  <span class=\"token number\">36.2</span>  \nMSE train<span class=\"token punctuation\">:</span> <span class=\"token number\">1.933</span><span class=\"token punctuation\">,</span> test<span class=\"token punctuation\">:</span> <span class=\"token number\">13.609</span>\nR<span class=\"token operator\">^</span><span class=\"token number\">2</span> train<span class=\"token punctuation\">:</span> <span class=\"token number\">0.977</span><span class=\"token punctuation\">,</span> test<span class=\"token punctuation\">:</span> <span class=\"token number\">0.840</span>\n</code></pre>\n<h4><a id=\"323__184\"></a>3.2.3 变量重要性及其可视化</h4>\n<p>通过变量重要性评价，可以删除那些不重要的变量，并且性能不会受到影响。另外，如果我们使用不同的机器学习方法（例如支持向量机），则可以将随机森林特征重要性用作一种特征选择方法。</p>\n<p>为了量化整个随机森林中所有变量对模型的贡献，我们可以查看变量的相对重要性。 Skicit-learn中返回的重要性表示包含特定变量可以提高预测。 重要性的实际计算超出了本文的范围，这里仅对模型输出重要性数值进行使用。</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># Get numerical feature importances</span>\nimportances <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>forest<span class=\"token punctuation\">.</span>feature_importances_<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>importances<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Saving feature names for later use</span>\nfeature_list <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>columns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span>\n\nfeature_importances <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>feature<span class=\"token punctuation\">,</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>importance<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> feature<span class=\"token punctuation\">,</span> importance <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>feature_list<span class=\"token punctuation\">,</span> importances<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># Sort the feature importances by most important first</span>\nfeature_importances <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>feature_importances<span class=\"token punctuation\">,</span> key <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> reverse <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Print out the feature and importances </span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>feature_importances<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">[</span><span class=\"token number\">0.040066920510444685</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0015561538993528526</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.01045073058081698</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.000895935306995048</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.010459068115914133</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.259747948545512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.019742528892980764</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.06524483886639866</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.004290355906371658</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.019780228992956887</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.011624227035179726</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.01186651010741281</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5442745532396639</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'LSTAT'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.544</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'RM'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'DIS'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.065</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'CRIM'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.04</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'AGE'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.02</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'TAX'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.02</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'PTRATIO'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.012</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.012</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'INDUS'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'NOX'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'RAD'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.004</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'ZN'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.002</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'CHAS'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token comment\"># Set the style</span>\n<span class=\"token comment\"># plt.style.use('fivethirtyeight')</span>\n<span class=\"token comment\"># list of x locations for plotting</span>\nx_values <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>importances<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x_values<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Make a bar chart</span>\nplt<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span>x_values<span class=\"token punctuation\">,</span> importances<span class=\"token punctuation\">,</span> orientation <span class=\"token operator\">=</span> <span class=\"token string\">'vertical'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Tick labels for x axis</span>\nplt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span>x_values<span class=\"token punctuation\">,</span> feature_list<span class=\"token punctuation\">,</span>rotation<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Axis labels and title</span>\nplt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Importance'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> plt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Variable'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> plt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Variable Importances'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>运行结果：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ab72a76d0c014cdbb07608252a328315.png\"/><br/> <strong>至此</strong>，可以观察得出，特征”<strong>LSTAT</strong>“所占最终决策的<strong>比重最大</strong>，其次是”RM“…</p>\n<h4><a id=\"324__231\"></a>3.2.4 随机森林的可视化结构图</h4>\n<p>运行如下代码， 从结构化可以看到mse逐渐减小。</p>\n<p>这里一共是14层树。其中X[0], X[1], X[2], X[3], X[4]…分别为对应的自变量。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>pipeline <span class=\"token keyword\">import</span> Pipeline\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>decomposition <span class=\"token keyword\">import</span> PCA\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>preprocessing <span class=\"token keyword\">import</span> StandardScaler\n\npipe <span class=\"token operator\">=</span> Pipeline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scaler'</span><span class=\"token punctuation\">,</span> StandardScaler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'reduce_dim'</span><span class=\"token punctuation\">,</span> PCA<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                 <span class=\"token punctuation\">(</span><span class=\"token string\">'regressor'</span><span class=\"token punctuation\">,</span> forest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\npipe<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">)</span>\nypipe <span class=\"token operator\">=</span> pipe<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">from</span> six <span class=\"token keyword\">import</span> StringIO\n<span class=\"token keyword\">from</span> IPython<span class=\"token punctuation\">.</span>display <span class=\"token keyword\">import</span> Image\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>tree <span class=\"token keyword\">import</span> export_graphviz\n<span class=\"token keyword\">import</span> pydotplus\n<span class=\"token keyword\">import</span> os\n\ndot_data <span class=\"token operator\">=</span> StringIO<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nexport_graphviz<span class=\"token punctuation\">(</span>pipe<span class=\"token punctuation\">.</span>named_steps<span class=\"token punctuation\">[</span><span class=\"token string\">'regressor'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>estimators_<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                out_file<span class=\"token operator\">=</span>dot_data<span class=\"token punctuation\">)</span>\ngraph <span class=\"token operator\">=</span> pydotplus<span class=\"token punctuation\">.</span>graph_from_dot_data<span class=\"token punctuation\">(</span>dot_data<span class=\"token punctuation\">.</span>getvalue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ngraph<span class=\"token punctuation\">.</span>write_png<span class=\"token punctuation\">(</span><span class=\"token string\">'tree.png'</span><span class=\"token punctuation\">)</span>\nImage<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">.</span>create_png<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>运行结果：<img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\1b76ad7dc98445c087fa0b1f3d25a2b9.png\"/></p>\n<p>参考：<br/> <a href=\"https://blog.csdn.net/qq_34106574/article/details/82016442\">【机器学习】 随机森林（Random Forest）</a><br/> <a href=\"https://blog.csdn.net/wokaowokaowokao12345/article/details/109441753\">用Python实现随机森林回归</a></p>\n<p></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-01-27 17:33:19", "summary": "随机森林的介绍随机森林就是通过集成学习的思想将多棵树集成的一种算法，它的基本单元是决策树，而它的本质属于机器学习的一大分支集成学习方法。随机森林的名称中有两个关键词，一个是随机，一个就是森林。森林我们"}