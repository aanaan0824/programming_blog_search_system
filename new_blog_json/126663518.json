{"blogid": "126663518", "writerAge": "码龄14年", "writerBlogNum": "67", "writerCollect": "44", "writerComment": "15", "writerFan": "14", "writerGrade": "3级", "writerIntegral": "715", "writerName": "隐形喷火龙", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126663518.jpg", "writerRankTotal": "26708", "writerRankWeekly": "54533", "writerThumb": "16", "writerVisitNum": "156746", "blog_read_count": "269", "blog_time": "于 2022-09-02 15:44:29 发布", "blog_title": "极简idea下git操作（一）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>git是现今公司项目中用的最多的代码版本管理工具，而idea是java中用的最多的开发工具，idea就像一把瑞士军刀，里面集成了很多开箱即用的功能，其中就包括了git,今天我们来记录下平时开发中常用的git操作。</p>\n<h1>从代码库中拉项目</h1>\n<p>我们刚进入公司的时候，项目经理会提供项目的git账号和项目地址，我们需要通过这个地址来拉项目代码。</p>\n<p>在idea的开始界面，或者项目中的VCS菜单下面，有个Get from Version Control,点击后有个弹框，输入git地址就能拉项目了，如果是第一次拉会提示输入账号密码</p>\n<p><img alt=\"\" height=\"355\" src=\"..\\..\\static\\image\\c2392297072f439986cf7ea309dae064.png\" width=\"340\"/></p>\n<p> <img alt=\"\" height=\"176\" src=\"..\\..\\static\\image\\4abd16dc3ac940f18e6bc18abcd19203.png\" width=\"565\"/></p>\n<h1>三板斧--commit, pull,push</h1>\n<p>现在你有项目代码了，可以开始愉快的写代码了，等你开发完功能，就需要上传代码了，这时就要用到git三板斧了，也是你日常使用中最常用的三个功能，commit-把代码提交到本地仓库,pull-拉取远程仓库代码到本地，push-把本地代码提交到远程仓库,每次提交都按照这个顺序来执行就行了</p>\n<p><img alt=\"\" height=\"416\" src=\"..\\..\\static\\image\\6ec5831e60544083ad85c388c5d65432.png\" width=\"567\"/></p>\n<p> </p>\n<h1>上传本地项目到空白仓库</h1>\n<p>有时候，还没有建git仓库，我们就开始写代码了，等git仓库建好后，我们如何把写好的代码放入呢？这边提供一个傻瓜式操作方式，先通过上面的方式把代码拉到一个新的目录，在这个新的目录中会发现.git文件夹，把这个.git文件夹拷贝到你的项目目录中，然后就可以执行三板斧了,commit-pull-push,那个新的目录可以删掉，后续还是在你的项目目录中开发,需要注意的是要在文件夹的查看中把隐藏项目勾选上</p>\n<p><img alt=\"\" height=\"28\" src=\"..\\..\\static\\image\\5e2585eafbac4ff2ac397af0a0d89f79.png\" width=\"164\"/></p>\n<p> <img alt=\"\" height=\"92\" src=\"..\\..\\static\\image\\7f2bf34604a94618b4e141ca01efebdb.png\" width=\"135\"/></p>\n<h1> 头疼的冲突</h1>\n<p>对于新手来说，最害怕遇到的就是代码冲突，在开发的时候让每个人负责单独的功能可以尽量减少冲突，当然遇到冲突也不要怕，静下心来慢慢合并就行了。</p>\n<p>下面我们来模拟下冲突的场景。</p>\n<p>原始代码:</p>\n<pre><code class=\"language-java\">public class App {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n}</code></pre>\n<p>A修改后的代码:</p>\n<pre><code class=\"language-java\">public class App {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!我是A!\");\n    }\n}</code></pre>\n<p>B修改后的代码</p>\n<pre><code class=\"language-java\">public class App {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!我是B！\");\n    }\n}</code></pre>\n<p>这时A去PULL代码就会提示冲突</p>\n<p><img alt=\"\" height=\"208\" src=\"..\\..\\static\\image\\4cae16b8ac68438e981afacd1641319d.png\" width=\"592\"/></p>\n<p> 上面写明了哪些文件有冲突，A可以选择accept yours，就是完全用A的代码，抛弃B的代码，accept theirs表示抛弃 A的代码用B的代码，merge表示手动合并</p>\n<p>这个界面被你关掉了也不用紧张，在下面菜单的Version Control点resolve仍然能弹出来</p>\n<p><img alt=\"\" height=\"335\" src=\"..\\..\\static\\image\\56dfa9e44e9f4e99a24e273f22656a57.png\" width=\"481\"/></p>\n<p> 点merge后弹出以下界面</p>\n<p><img alt=\"\" height=\"396\" src=\"..\\..\\static\\image\\a87b72070d504528b189e01a90b8cd7d.png\" width=\"1200\"/></p>\n<p>左边 Changes from dev表示本地dev分支的代码，也就是A的,右边Change from origin/dev表示远程dev分支的代码，也就是B的,中间result表示合并后的代码,</p>\n<p>我们把A和B的代码合并下，结果如下</p>\n<p><img alt=\"\" height=\"292\" src=\"..\\..\\static\\image\\687fa026153e477a910648648745b0c1.png\" width=\"497\"/></p>\n<p> 然后点右下角的Apply就结束合并了</p>\n<p>这时冲突解决，继续三板斧commit,pull,push，就可以了</p>\n</div>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-09-02 15:44:29", "summary": "是现今公司项目中用的最多的代码版本管理工具，而是中用的最多的开发工具，就像一把瑞士军刀，里面集成了很多开箱即用的功能，其中就包括了今天我们来记录下平时开发中常用的操作。从代码库中拉项目我们刚进入公司的"}