{"blogid": "123263006", "writerAge": "码龄5年", "writerBlogNum": "429", "writerCollect": "83358", "writerComment": "10758", "writerFan": "263900", "writerGrade": "9级", "writerIntegral": "51336", "writerName": "哪 吒", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123263006.jpg", "writerRankTotal": "47", "writerRankWeekly": "2", "writerThumb": "22467", "writerVisitNum": "3855503", "blog_read_count": "20920", "blog_time": "已于 2022-04-07 12:55:48 修改", "blog_title": "JavaScript看这一篇就够了，简单全面一发入魂", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><ul><li><a href=\"#JavaScript_1\">一、什么是JavaScript</a></li><li><ul><li><a href=\"#1DOM_2\">1、DOM</a></li><li><a href=\"#2BOM_7\">2、BOM</a></li></ul>\n</li><li><a href=\"#HTMLJavaScript_20\">二、HTML中的JavaScript</a></li><li><ul><li><a href=\"#1script_21\">1、script标签</a></li><li><a href=\"#2_23\">2、标签位置</a></li><li><a href=\"#3_26\">3、延迟执行脚本</a></li><li><a href=\"#4_30\">4、动态加载脚本</a></li><li><a href=\"#5JavaScriptHTML_39\">5、将JavaScript代码独立于HTML的好处</a></li></ul>\n</li><li><a href=\"#_43\">三、语言基础</a></li><li><ul><li><a href=\"#1_44\">1、严格区分大小写</a></li><li><a href=\"#2ECMAScript_45\">2、ECMAScript中的语句推荐以分号结尾</a></li></ul>\n</li><li><a href=\"#varletconst_50\">四、对比var与let、const</a></li><li><a href=\"#_62\">五、对象池管理</a></li><li><a href=\"#_85\">六、变量、作用域、内存</a></li><li><ul><li><a href=\"#16_87\">1、原始值6种数据类型</a></li><li><a href=\"#2_94\">2、原始值和引用值特点</a></li><li><a href=\"#3_101\">3、执行上下文</a></li><li><a href=\"#4JavaScript_111\">4、JavaScript垃圾回收</a></li></ul>\n</li><li><a href=\"#mapAPI_119\">七、map基础API</a></li><li><ul><li><a href=\"#1set_120\">1、set()方法添加键值对</a></li><li><a href=\"#2gethas_121\">2、get()和has()进行查询</a></li><li><a href=\"#3deleteclear_122\">3、delete()和clear()进行删除</a></li><li><a href=\"#4sizemap_123\">4、size获取map获取键值对数量</a></li></ul>\n</li><li><a href=\"#_124\">八、顺序与迭代</a></li><li><a href=\"#ObjectMap_162\">九、Object和Map到底有什么区别？</a></li><li><ul><li><a href=\"#1_163\">1、内存占用</a></li><li><a href=\"#2_165\">2、插入性能</a></li><li><a href=\"#3_167\">3、查找速度</a></li><li><a href=\"#4_169\">4、删除性能</a></li></ul>\n</li><li><a href=\"#Set_172\">十、Set</a></li><li><ul><li><a href=\"#1API_173\">1、基础API</a></li><li><a href=\"#2_179\">2、顺序与迭代</a></li></ul>\n</li><li><a href=\"#_201\">十一、什么是生成器</a></li><li><ul><li><a href=\"#1_202\">1、生成器简介</a></li><li><a href=\"#2yield_214\">2、通过yield中断执行</a></li><li><a href=\"#3_220\">3、生成器作为默认迭代器</a></li><li><a href=\"#4_222\">4、提前终止生成器</a></li><li><a href=\"#5_226\">5、生成器小结</a></li></ul>\n</li><li><a href=\"#_231\">十二、原型链</a></li><li><ul><li><a href=\"#1_233\">1、构造函数、原型、实例三者的关系？</a></li><li><a href=\"#2_235\">2、盗用构造函数</a></li><li><a href=\"#3_238\">3、组合继承</a></li><li><a href=\"#80_244\">```为什么80%的码农做不了架构师？&gt;&gt;&gt;```</a></li><li><a href=\"#Java__httpsblogcsdnnetguorui_javaarticledetails120098618_245\">[Java专栏目录 | 点击这里](https://blog.csdn.net/guorui_java/article/details/120098618)</a></li></ul>\n</li><li><a href=\"#1024Java_249\">十三、关注公众号哪吒编程，回复1024，获取Java学习资料，还有不定期的送书活动</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"JavaScript_1\"></a>一、什么是JavaScript</h2>\n<h3><a id=\"1DOM_2\"></a>1、DOM</h3>\n<p>文档对象模型（DOM,Document Object Model）是一个应用编程接口（API），用于在HTML中使用扩展的HTML。DOM将整个页面抽象为一组分层节点。<br/> DOM通过创建表示文档的树，让开发者可以随心所欲的控制网页的内容和结构。使用DOM API可以轻松地删除、添加、替换、修改节点。<br/> 对浏览器而言，DOM就是使用ECMAScript实现的，如今已经成为JavaScript语言的一大组成部分。<br/> 言而言之，DOM提供与网页内容交互的方法和接口。</p>\n<h3><a id=\"2BOM_7\"></a>2、BOM</h3>\n<p>IE3和Netscape Navigator3提供了浏览器对象模型（BOM）API，用于支持访问和操作浏览器的窗口。使用BOM，开发者可以操控浏览器显示页面之外的部分。<br/> BOM的能力展示：</p>\n<ol><li>弹出新浏览器窗口的能力；</li><li>移动、缩放和关闭浏览器窗口的能力；</li><li>navigator对象，提供关于浏览器的详尽信息；</li><li>location对象，提供浏览器加载页面的详尽信息；</li><li>screen对象，提供关于用户屏幕分辨率的详尽信息；</li><li>performance对象，提供浏览器内存占用、导航行为和时间统计的详尽信息；</li><li>对cookie的支持；</li><li>其它自定义对象，如XMLHttpRequest和IE的ActiveXObject。<br/> 简而言之，BOM提供与浏览器交互的方法和接口。</li></ol>\n<h2><a id=\"HTMLJavaScript_20\"></a>二、HTML中的JavaScript</h2>\n<h3><a id=\"1script_21\"></a>1、script标签</h3>\n<p><code>&lt;script&gt;</code>标签有8大属性，可以包含来自外部域的JavaScript文件，<code>&lt;script&gt;</code>的src属性可以是一个完整的URL，并且这个URL指向的资源可以跟包含它的HTML页面不在同一个域中，浏览器解析这个资源时，会想src属性指定的路径发送一个GET请求，以取得相应资源，这个初始的请求不受浏览器同源策略限制，但返回并被执行的JavaScript则受限制。当然，这个请求仍然受父页面HTTP/HTTPS协议的限制。</p>\n<h3><a id=\"2_23\"></a>2、标签位置</h3>\n<p>过去，所有的<code>&lt;script&gt;</code>标签都放在head标签中，这就意味着所有JavaScript代码都要下载、解析和解释完成后，才能开始渲染页面（页面在浏览器解析到<code>&lt;body&gt;</code>标签的起始标签时开始渲染）。对于需要很多JavaScript的页面，会导致页面渲染的明显延迟，在此期间浏览器窗口完全空白。<br/> 为了解决这个问题，现代Web应用程序通常将所有JavaScript引用放在<code>&lt;body&gt;</code>元素中的页面内容后面。</p>\n<h3><a id=\"3_26\"></a>3、延迟执行脚本</h3>\n<p>正常情况下，JavaScript的代码是书序执行的。<br/> <code>defer</code>脚本会延迟到整个页面都解析完毕后再运行，只适用于外部脚步。<br/> <code>async</code>脚本与<code>defer</code>脚本类似，都是只适用于外部脚本，但<code>async</code>脚本并不能保证按照它们出现的次序执行。</p>\n<h3><a id=\"4_30\"></a>4、动态加载脚本</h3>\n<p>JavaScript可以通过向DOM中动态添加script元素同样可以加载指定的脚本，只要创建一个script元素并将其添加到DOM即可。</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nscript<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">'nezha.js'</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>默认情况下，以这种方式创建的<code>&lt;script&gt;</code>标签都以异步方式加载，相当于加了<code>async</code>标签。</p>\n<h3><a id=\"5JavaScriptHTML_39\"></a>5、将JavaScript代码独立于HTML的好处</h3>\n<ol><li>可维护性</li><li>缓存。浏览器会根据特定的设置缓存所有外部链接的JavaScript文件，这意味着如果两个页面都用到同一个JavaScript文件，则该文件只需加载一次，这最终意味着页面加载更快。</li></ol>\n<h2><a id=\"_43\"></a>三、语言基础</h2>\n<h3><a id=\"1_44\"></a>1、严格区分大小写</h3>\n<h3><a id=\"2ECMAScript_45\"></a>2、ECMAScript中的语句推荐以分号结尾</h3>\n<ol><li>加分号有助于防止省略造成的问题</li><li>避免输入内容不完整</li><li>便于开发者通过删除空行来压缩代码（如果没有结尾的分号，只删除空行，则会导致语法错误）</li><li>加分号有助于提升性性能，因为解析器会尝试在合适的位置补上分号以纠正语法错误。</li></ol>\n<h2><a id=\"varletconst_50\"></a>四、对比var与let、const</h2>\n<ol><li>let不具备声明提升，var具备声明提升</li><li>let声明的范围是块作用域，而var声明的范围是函数作用域。</li><li>let是ES6才引入的声明关键字</li><li>for循环中的let声明</li><li>const与let很相似，最大的区别是const必须初始化，且不能再次赋值。</li></ol>\n<p>结语：</p>\n<ol><li>不使用var，有了let和const，大多数开发者会发现自己不再需要var了，限制自己只使用let和const，有助于提升代码质量，因为变量有了明确的作用域、声明位置、以及不变的值。</li><li>const优先，let次之。使用const声明可以让浏览器运行时强制保持变量不变，也可以让静态代码分析工具提前发现不合法的赋值操作。</li></ol>\n<h2><a id=\"_62\"></a>五、对象池管理</h2>\n<p>通过创建对象池管理一组可回收的对象，应用程序可以向这个对象池请求一个对象、设置其属性，使用他，然后<br/> 在操作完成后再把它交还给对象池，因为没有对象初始化，垃圾回收探测刽发现兑现更替，因此垃圾回收程序就不会频繁调用了。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> v1 <span class=\"token operator\">=</span> vectorPool<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> v2 <span class=\"token operator\">=</span> vectorPool<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> v3 <span class=\"token operator\">=</span> vectorPool<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nv1<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\nv2<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span>\nv2<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">addVector</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span>v2<span class=\"token punctuation\">,</span>v3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nvectorPool<span class=\"token punctuation\">.</span><span class=\"token function\">free</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvectorPool<span class=\"token punctuation\">.</span><span class=\"token function\">free</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvectorPool<span class=\"token punctuation\">.</span><span class=\"token function\">free</span><span class=\"token punctuation\">(</span>v3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>由于数组是动态可变的，当创建一个大小为100的数组，使用时发现不够大，引擎会删除这个数组，然后创建一个新的，<br/> 垃圾回收程序会看到这个删除操作，然后很快的就来收一次垃圾，要避免这种动态分配操作。</p>\n<h2><a id=\"_85\"></a>六、变量、作用域、内存</h2>\n<p>JavaScript变量可以保存两种类型的值：原始值和引用值。</p>\n<h3><a id=\"16_87\"></a>1、原始值6种数据类型</h3>\n<ol><li>Undefined</li><li>Null</li><li>Boolean</li><li>Number</li><li>String</li><li>Symbol</li></ol>\n<h3><a id=\"2_94\"></a>2、原始值和引用值特点</h3>\n<ol><li>原始值大小固定，保存在栈内存中</li><li>从一个变量到另一个变量复制原始值，会创建该值得第二个副本</li><li>引用值是对象，存储在堆内存中</li><li>包含引用值的变量实际上只包含指向相应对象的一个指针，而不是对象本身</li><li>从一个变量到另一个变量复制引用值，只会复制指针，因此结果是两个变量都指向同一个对象</li><li><code>typeof</code>操作费可以确定值的原始类型，<code>instanceof</code>操作符用于确保值得引用类型</li></ol>\n<h3><a id=\"3_101\"></a>3、执行上下文</h3>\n<p>任何变量都存在于某个执行上下文中（也称为作用域）。这个上下文（作用域）决定了变量的生命周期，以及它们可以访问代码的哪些部分。<br/> 执行上下文可以总结如下：</p>\n<ol><li>执行上下文分为 ① 全局上下文、② 函数上下文、③ 块级上下文</li><li>代码执行流每进入一个新上下文，都会创建一个作用域链，用于搜索变量和函数</li><li>函数或块的局部上下文不仅可以访问自己作用域内的变量，也可以访问任何包含上下文乃至全局上下文的变量</li><li>全局上下文只能访问全局上下文中的变量和函数，不能直接访问局部上下文中的任何数据</li><li>变量的执行上下文用于确定什么时候释放内存</li></ol>\n<h3><a id=\"4JavaScript_111\"></a>4、JavaScript垃圾回收</h3>\n<p>JavaScript是使用垃圾回收的编程语言，开发者不需要操心内存分配和回收。</p>\n<ol><li>离开作用域的值会被自动标记为可回收，然后在垃圾回收期间被删除</li><li>主流的垃圾回收算法是标记算法，即先给当前不使用的值加上标记，再回来回收它们的内存</li><li>引用计数是另一种垃圾回收策略，需要记录值被引用了多少次。JavaScript引擎不再使用这种算法，但某些旧版本的IE仍然会受这种算法的影响，原因是JavaScript会访问非原生JavaScript对象（如DOM对象）。</li><li>引用计数在代码中循环引用时会出现问题</li><li>解除变量的引用不仅可以消除循环引用，而且对垃圾回收也有帮助。为促进内存回收，全局对象、全局对象的属性和循环引用都应该在不需要时解除引用。</li></ol>\n<h2><a id=\"mapAPI_119\"></a>七、map基础API</h2>\n<h3><a id=\"1set_120\"></a>1、set()方法添加键值对</h3>\n<h3><a id=\"2gethas_121\"></a>2、get()和has()进行查询</h3>\n<h3><a id=\"3deleteclear_122\"></a>3、delete()和clear()进行删除</h3>\n<h3><a id=\"4sizemap_123\"></a>4、size获取map获取键值对数量</h3>\n<h2><a id=\"_124\"></a>八、顺序与迭代</h2>\n<p>与Object的主要差异是，map实例会维护键值对的插入顺序，可以根据插入顺序执行迭代操作。<br/> 映射实例可以通过迭代器<code>Iterator</code>，能以插入顺序生成<code>[key,value]</code>形式的数组，可以通过<code>entries()</code>方法，或者<code>Symbol.iterator</code>属性，它引用<code>entries()</code>取得这个迭代器。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n\t<span class=\"token punctuation\">[</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"哪吒\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">[</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"18\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> x <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//[id,1]</span>\n<span class=\"token comment\">//[name,哪吒]</span>\n<span class=\"token comment\">//[age,18]</span>\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> x <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//[id,1]</span>\n<span class=\"token comment\">//[name,哪吒]</span>\n<span class=\"token comment\">//[age,18]</span>\n\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token punctuation\">,</span>key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> -&gt; </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>val<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//id -&gt; 1</span>\n<span class=\"token comment\">//name -&gt; 哪吒</span>\n<span class=\"token comment\">//age -&gt; 18</span>\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> v <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"ObjectMap_162\"></a>九、Object和Map到底有什么区别？</h2>\n<h3><a id=\"1_163\"></a>1、内存占用</h3>\n<p>给定固定大小内存的情况下，Map一般会比Object多存储50%的键值对。</p>\n<h3><a id=\"2_165\"></a>2、插入性能</h3>\n<p>插入Map一般会稍微快一点。</p>\n<h3><a id=\"3_167\"></a>3、查找速度</h3>\n<p>相差无几。</p>\n<h3><a id=\"4_169\"></a>4、删除性能</h3>\n<p>Map的删除性能完胜Object。<br/> 综上四点，选择Map显然是更好地选择。</p>\n<h2><a id=\"Set_172\"></a>十、Set</h2>\n<h3><a id=\"1API_173\"></a>1、基础API</h3>\n<ol><li>添加add()</li><li>查询has()</li><li>获取数量size</li><li>删除delete()</li><li>清空clear()</li></ol>\n<h3><a id=\"2_179\"></a>2、顺序与迭代</h3>\n<p>Set会维护值插入时的顺序，因此支持按顺序迭代。<br/> 集合实例可以提供一个迭代器Iterator，能以插入顺序生成集合内容。可以通过values()方法及其别名方法keys()，或者Symbol.iterator属性，他引用values()，取得这个迭代器。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"哪吒\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"云韵\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"比比东\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>keys <span class=\"token operator\">===</span> s<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>values <span class=\"token operator\">===</span> s<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span>\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value <span class=\"token keyword\">of</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value <span class=\"token keyword\">of</span> s<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>因为values()是默认迭代器，所以可以直接对集合实例使用扩展操作，把集合转为数组：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"哪吒\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"云韵\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"比比东\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[\"哪吒\",\"云韵\",\"比比东\"]</span>\n</code></pre>\n<h2><a id=\"_201\"></a>十一、什么是生成器</h2>\n<h3><a id=\"1_202\"></a>1、生成器简介</h3>\n<p>生成器是ECMAScript6新增的一个极为灵活的结构，拥有在一个函数块内暂停和恢复代码执行的能力。这种新能力具有较深远的影响，比如，使用生成器可以自定义迭代器和实现协程。<br/> 生成器的形式是一个函数，函数名称前面加一个星号*，表示它是一个生成器。只要是可以定义函数的地方，就可以定义生成器。<br/> 调用生成器函数会产生一个生成器对象，生成器对象一开始处于暂停执行（suspended）状态。与迭代器相似，生成器对象也实现了Iterator接口，因此具有next()方法。调用这个方法会让生成器开始或恢复执行。<br/> next()方法的返回值类似于迭代器，有一个done属性和一个value属性。函数体为空的生成器函数中间不会停留，调用一次next()就会让生成器到达<code>done:true</code>状态。<br/> value属性是生成器函数的返回值，默认值为undefined，可以通过生成器函数的返回值指定：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token operator\">*</span> <span class=\"token function\">generatorFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">'哪吒编程'</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>生成器函数只会在初次调用next()方法之后开始执行。</p>\n<h3><a id=\"2yield_214\"></a>2、通过yield中断执行</h3>\n<p>yield关键字可以让生成器停止和开始执行，也是生成器最有用的地方，生成器函数在遇到yield关键字之前会正常执行。遇到这个关键字之后，执行器会停止，函数作用域的状态会被保留。停止执行的生成器函数只能通过在生成器对象上调用next()方法来恢复执行。</p>\n<ol><li>生成器对象作为可迭代对象</li><li>使用yield实现输入和输出</li><li>产生可迭代对象</li><li>使用yield*实现递归算法</li></ol>\n<h3><a id=\"3_220\"></a>3、生成器作为默认迭代器</h3>\n<p>因为生成器对象实现了Iterable接口，而且生成器函数和默认迭代器被调用之后都产生迭代器，所以生成器格外适合作为默认迭代器。</p>\n<h3><a id=\"4_222\"></a>4、提前终止生成器</h3>\n<p>1、使用return()终止生成器<br/> 2、使用throw()<br/> throw()方法会在暂停的时候提供一个错误注入到生成器对象中。如果错误未被处理，生成器就会关闭。不过如果生成器函数内部处理了这个错误，生成器就不会关闭，还可以恢复执行。</p>\n<h3><a id=\"5_226\"></a>5、生成器小结</h3>\n<p>迭代是一种所有编程语言中都可以看到的模式。ECMASCript正式支持迭代模式并引入两个新的语言特性：迭代器和生成器。<br/> 迭代器是一个可以由任意对象实现的接口，支持连续获取对象产出的每一个值。任何实现<code>Iterable</code>接口的对象都有一个<code>Symbol.iterator</code>属性，这个属性引用默认迭代器。默认迭代器就像一个迭代器工厂，也就是一个函数，调用之后会产生一个实现<code>Iterator</code>接口的对象。<br/> 迭代器必须通过连续调用<code>next()</code>方法才能连续获取值，这个方法返回一个<code>IteratorObject</code>。这个对象包含一个<code>done</code>属性和一个<code>value</code>属性。前者时刻一个布尔值，表示十分还有更多值可以访问；后者包含迭代器返回的当前值。这个接口可以通过手动反复调用<code>next()</code>方法来消费，也可以通过原生消费者，比如<code>for</code>循环来自动消费。<br/> 生成器是一种特殊的函数，调用之后会返回一个生成器对象。生成器对象实现了<code>Iterable</code>接口，因此可用在任何消费可迭代对象的地方。生成器的独特之处在于支持<code>yield</code>关键字，这个关键字能够暂停执行生成器函数。使用<code>yield</code>关键字还可以通过<code>next()</code>方法接收输入和产生输出。在加上星号之后，<code>yield</code>关键字可以将跟在后面的可迭代对象序列化为一连串值。</p>\n<h2><a id=\"_231\"></a>十二、原型链</h2>\n<p>ECMA-262把原型链定义为ECMAScript的主要继承方式。其基本思想就是通过原型继承多个引用类型的属性和方法。</p>\n<h3><a id=\"1_233\"></a>1、构造函数、原型、实例三者的关系？</h3>\n<p>每个构造函数都有一个原型对象，原型有一个属性指回构造函数，而实例有一个内部指针指向原型。如果原型是另一个类型的实例呢？那就意味着这个原型本身有一个内部指针指向另一个原型，相应地另一个原型也有一个指针指向另一个构造函数，这样就在实例和原型之间构造了一条原型链。</p>\n<h3><a id=\"2_235\"></a>2、盗用构造函数</h3>\n<p>为了解决原型链包含引用值导致的继承问题，引入了盗用构造函数的概念。基本思路很简单，在子类构造函数中调用父类构造函数，因为毕竟函数就是在特定上下文中执行代码的简单对象，所以可以使用apply()或call()方法，重新创建上下文执行构造函数。<br/> 相比于使用原型链，盗用构造函数的一个优点就是可以在子类构造函数中向父类构造函数传参。</p>\n<h3><a id=\"3_238\"></a>3、组合继承</h3>\n<p>组合继承综合了原型链和盗用构造函数，将两者的优点集中了起来，基本的思路是使用原型链继承原型上的属性和方法，而通过盗用构造函数继承实例属性。这样既可以把方法定义在原型上以实现重用，又可以让每个实例都有自己的属性。<br/> 组合继承也保留了instanceof操作符和isPrototypeOf()方法识别合成对象的能力。</p>\n<br/>\n<h3><a id=\"80_244\"></a><code>为什么80%的码农做不了架构师？&gt;&gt;&gt;</code></h3>\n<h3><a id=\"Java__httpsblogcsdnnetguorui_javaarticledetails120098618_245\"></a><a href=\"https://blog.csdn.net/guorui_java/article/details/120098618\">Java专栏目录 | 点击这里</a></h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\542f9b55259b4c43a650c7c7e50da02c.png\"/></p>\n<h2><a id=\"1024Java_249\"></a>十三、关注公众号哪吒编程，回复1024，获取Java学习资料，还有不定期的送书活动</h2>\n<ol><li>JavaScript从入门到精通</li><li>Go语言从基础到中台微服务实战开发</li><li>微信小程序开发从入门到实战</li><li>C++从入门到精通</li></ol>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cbff89cad31c4abc9fc8514922d73b97.png\"/></p>\n<blockquote>\n<p>🍅 作者简介：哪吒，CSDN2021博客之星亚军🏆、新星计划导师✌、博客专家💪<br/><br/></p>\n<p>🍅 哪吒多年工作总结：<a href=\"https://blog.csdn.net/guorui_java/article/details/120098618\">Java学习路线总结，搬砖工逆袭Java架构师</a> <br/><br/></p>\n<p>🍅 <strong>关注公众号【哪吒编程】，回复1024</strong>，获取Java学习路线思维导图、大厂面试真题、加入万粉计划交流群、一起学习进步</p>\n</blockquote>\n<br/>\n<p>下一篇：<a href=\"https://blog.csdn.net/guorui_java/article/details/106917601\">Vue基础知识总结 1：Vue入门</a></p>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/516194181a9e4e168355c2290d07bc10.gif#pic_center\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 1, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-04-07 12:55:48", "summary": "目录一、什么是、、二、中的、标签、标签位置、延迟执行脚本、动态加载脚本、将代码独立于的好处三、语言基础、严格区分大小写、中的语句推荐以分号结尾四、对比与、五、对象池管理六、变量、作用域、内存、原始值种"}