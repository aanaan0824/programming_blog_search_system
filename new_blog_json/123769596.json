{"blogid": "123769596", "writerAge": "码龄1年", "writerBlogNum": "27", "writerCollect": "176", "writerComment": "50", "writerFan": "70", "writerGrade": "2级", "writerIntegral": "349", "writerName": "beyond951", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123769596.jpg", "writerRankTotal": "42469", "writerRankWeekly": "17410", "writerThumb": "39", "writerVisitNum": "43405", "blog_read_count": "2157", "blog_time": "已于 2022-03-27 11:27:01 修改", "blog_title": "三维重建之条纹投影结构光（二）——四步相移+三频外差法", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p><span style=\"color:#1a439c;\"><strong>        接上文：</strong></span></p>\n<h1 id=\"articleContentId\"><a class=\"link-info has-card\" href=\"https://blog.csdn.net/beyond951/article/details/123361852?spm=1001.2014.3001.5501\" title=\"三维重建之条纹投影结构光（一）\"><span class=\"link-card-box\"><span class=\"link-title\">三维重建之条纹投影结构光（一）</span><span class=\"link-link\"><img alt=\"\" class=\"link-link-icon\" src=\"..\\..\\static\\image\\icon-default.png\"/>https://blog.csdn.net/beyond951/article/details/123361852?spm=1001.2014.3001.5501</span></span></a></h1>\n<p><span style=\"color:#1a439c;\"><strong>        针对上文思路进行验证，本篇博客主要对相位进行求解，首先，对上面博客的理论进行复述，然后包括相位主值的计算和相位展开。</strong></span></p>\n<h1><span style=\"color:#511b78;\"><strong>四步相移+三频外差理论推导</strong></span></h1>\n<h2><span style=\"color:#1c7892;\"><strong>相位主值求取—四步相移法</strong></span></h2>\n<p><strong>        <span style=\"color:#1a439c;\">通过一帧变形条纹 图样是很难得到高精度的相位Φ(ｘ,ｙ)，需要采用相移算法来准确测定相位。对条纹 图进行相移的方法有很多 ，比较常用的是N帧满周期等间距相移法 。投影 的正弦条纹每隔一个光栅周期的1／N 移动一次 ，并产生相应的光强函数 ，In(x,y)，此时正弦条纹的相位对应移动2π/N。四步相移算法 ，每次的相移增量为 π/2，故可以得到相应的四幅变形条纹图，这里假设In(x,y)(n=1,2,3,4) 代表第n幅图像光强 ，则：</span></strong></p>\n<p class=\"img-center\"><img alt=\"\" height=\"124\" src=\"..\\..\\static\\image\\297e23ccc96e46aeb5697564cec82a6e.png\" width=\"392\"/></p>\n<p><strong>         <span style=\"color:#1a439c;\">由上面可以计算得到的相位函数Φ(ｘ,ｙ)为</span></strong></p>\n<p class=\"img-center\"><img alt=\"\" height=\"59\" src=\"..\\..\\static\\image\\bbf1782722c54e3ba4150716f79839a7.png\" width=\"264\"/></p>\n<p>        <span style=\"color:#1a439c;\"><strong> 由于是通过反正切 函数计算相位信息，因此所得的相位值都是被截断在(-π,π]区间内的不连续相位。 为 了得到连续 的相位分布 ，需要进行相位展开。采用三频外差方法进行相位展开。</strong></span></p>\n<h2><span style=\"color:#1c7892;\"><strong>相位展开—三频外差法</strong></span></h2>\n<p><strong>       <span style=\"color:#1a439c;\"> 三频外差法是一种时间相位展开方法 ，它是在三频展开法的基础上改进而来。通过投射三种不同频率的条纹图到物体表面，拍摄得到一组受物体表面调制的条纹图序列 ，然后将每点的相位沿时间序列独立进行展开 ，可以从原理上避免误差的传播。</span></strong></p>\n<p><span style=\"color:#1a439c;\">        <strong>投影三套条纹周期数t=s-√s,s,s+√s+1的条纹图，由四步相移得到三幅截断相位图。之后进行两次外差，可以看出，第一次外差得到数目为(√s,√ s+1)的条纹图，再进行一次外差得到条纹周期数为 1的条纹图，其中外差即对应像素点相位相减。</strong></span></p>\n<p><span style=\"color:#1a439c;\"><strong>        </strong><strong>首先定义展开运算符U[</strong><strong>Φ1,Φ2</strong><strong>]如下：</strong></span></p>\n<p class=\"img-center\"><img alt=\"\" height=\"48\" src=\"..\\..\\static\\image\\046cafd6dfeb42b78ef58ba2b5507b12.png\" width=\"281\"/></p>\n<p>         <span style=\"color:#1a439c;\"><strong>其中NINT(·)为四舍五入取整运算。</strong></span></p>\n<p><span style=\"color:#1a439c;\">       <strong> 然后外差得到的条纹周期数为1的相位分布等同于Φw(1)等同于已展开的相位Φu(1)，以它为起始相位逐级向上进行相位展开：</strong></span></p>\n<p class=\"img-center\"><img alt=\"\" height=\"34\" src=\"..\\..\\static\\image\\ee1d8ba303bf4b25996ec1c36c00d737.png\" width=\"278\"/></p>\n<p><strong>        <span style=\"color:#1a439c;\">其中v=√s表示不同外差级次的倍率，而k逐级去2、3。通过最小二乘法对展开相位进行拟合，计算得到的斜率表示为</span>：</strong></p>\n<p class=\"img-center\"><img alt=\"\" height=\"68\" src=\"..\\..\\static\\image\\d6556f882a6c481fb005eeb620a3bfd2.png\" width=\"136\"/></p>\n<p><strong>        <span style=\"color:#1a439c;\">再将斜率乘以最大投影条纹数，即可得到最终的展开相位ΔΦ。</span></strong></p>\n<p class=\"img-center\"><img alt=\"\" height=\"27\" src=\"..\\..\\static\\image\\5a4cee2e12db4a19a1143737a72c2103.png\" width=\"116\"/></p>\n<p>         <span style=\"color:#1a439c;\"><strong>综上上述，复述完毕，上代码。</strong></span></p>\n<h1><span style=\"color:#511b78;\"><strong>代码实现</strong></span></h1>\n<h2><span style=\"color:#1c7892;\"><strong>相位主值求取—四步相移法</strong></span></h2>\n<pre><code class=\"language-cpp\">//*****************四步相移法求解图像的相位主值******************//\n//本次实验采用四步相移法+三频外差法\n//输入输出：输入位十二张图片；输出为三张不同频率的主值图\nvector&lt;Mat&gt; FringeStructuredLight::SolveThePhase(vector&lt;Mat&gt; srcVec)\n{\n\tvector&lt;Mat&gt; tempVec;\n\tif (srcVec.size() % 4 != 0)\n\t{\n\t\treturn tempVec;\n\t}\n\telse\n\t{\n\t\tfor (int i = 0; i &lt; srcVec.size(); i+=4)\n\t\t{\n\t\t\tint row = srcVec[i].rows;\n\t\t\tint col = srcVec[i].cols;\n\t\t\tMat tempPhase = Mat::zeros(srcVec[i].size(), CV_32FC1);\n\t\t\tfloat a, b;\n\t\t\tfor (int k = 0; k &lt; row; k++)\n\t\t\t{\n\t\t\t\tuchar *r1 = srcVec[i].ptr&lt;uchar&gt;(k);\n\t\t\t\tuchar *r2 = srcVec[i + 1].ptr&lt;uchar&gt;(k);\n\t\t\t\tuchar *r3 = srcVec[i + 2].ptr&lt;uchar&gt;(k);\n\t\t\t\tuchar *r4 = srcVec[i + 3].ptr&lt;uchar&gt;(k);\n\t\t\t\tfloat *ph = tempPhase.ptr&lt;float&gt;(k);\n\t\t\t\tfor (int j = 0; j &lt; col; j++)\n\t\t\t\t{\n\t\t\t\t\ta = r1[j] - r3[j];\n\t\t\t\t\tb = r4[j] - r2[j];\n\t\t\t\t\tph[j] = atan2(a, b);\n\t\t\t\t}\n\t\t\t}\n\t\t\ttempVec.push_back(tempPhase);\n\t\t}\n\t\treturn tempVec;\n\t}\n}</code></pre>\n<h2><span style=\"color:#1c7892;\"><strong>相位展开—三频外差法</strong></span></h2>\n<pre><code class=\"language-cpp\">//*****************三频外差法对四步相移法求的相位进行展开******************//\n//本次实验采用四步相移法+三频外差法\n//输入输出：输入位三张主值相位图片；输出为相位的展开图\nMat FringeStructuredLight::UnwrappedPhase(vector&lt;Mat&gt; srcVec)\n{\n\tMat unwrapPhase;\n\tdouble wrapPhase12, wrapPhase23, wrapPhase123;\n\tdouble unPH12, unPH23, unPH123, unPH1, unPH2, unPH3;\n\tint f1 = 00, f2 = 00, f3 = 00, f12 = 0, f23 = 0, f123 = 0;\n\tunwrapPhase = Mat::zeros(srcVec[0].size(), CV_32FC1);\n\tfor (int i = 0; i &lt; srcVec[0].rows; i++)\n\t{\n\t\tfloat * un1 = srcVec[0].ptr&lt;float&gt;(i);\n\t\tfloat * un2 = srcVec[1].ptr&lt;float&gt;(i);\n\t\tfloat * un3 = srcVec[2].ptr&lt;float&gt;(i);\n\t\tfloat * ph = unwrapPhase.ptr&lt;float&gt;(i);\n\t\tfor (int j = 0; j &lt; srcVec[0].cols; j++)\n\t\t{\n\t\t\t//核心代码，硬核加密\n\t\t}\n\t}\n\treturn unwrapPhase;\n}</code></pre>\n<h2><strong><span style=\"color:#1c7892;\">main函数</span></strong></h2>\n<pre><code class=\"language-cpp\">int main()\n{\n\t//********声明一些变量存储相位图和高度**********//\n\tvector&lt;Mat&gt; heightPhase;\n\tvector&lt;double&gt; height;\n\t//********计算参考平面的相位**********//\n\tstring filePath_h0 = \"D:*.bmp\";\n\tvector&lt;Mat&gt; imgVec_h0 = Api.ReadImg(filePath_h0);\n\t//********对文件路径下的十二副图计算三组主值相位**********//\n\tvector&lt;Mat&gt; mainPhaseVec_h0 = Api.SolveThePhase(imgVec_h0);\n\t//********相位展开**********//\n\tMat unwrapPhase_h0 = Api.UnwrappedPhase(mainPhaseVec_h0);\n\treturn 0;\n}</code></pre>\n<h2><strong><span style=\"color:#1c7892;\">ReadImg函数</span></strong></h2>\n<pre><code class=\"language-cpp\">//*****************读取文件夹里面的图片******************//\nvector&lt;Mat&gt; FringeStructuredLight::ReadImg(std::string filepath)\n{\n\tvector&lt;Mat&gt; tempVec;\n\tstd::vector&lt;cv::String&gt; image_files;\n\tglob(filepath, image_files);\n\t//最后一张图不读\n\tfor (int i = 0; i &lt; image_files.size()-1; i++)\n\t{\n\t\tMat temp = imread(image_files[i]);\n\t\ttempVec.push_back(temp);\n\t}\n\treturn tempVec;\n}</code></pre>\n<h1><strong><span style=\"color:#511b78;\">效果展示</span></strong></h1>\n<p><span style=\"color:#511b78;\">   </span><span style=\"color:#1a439c;\">     <strong>四步相移+三频外差一共十二副图，因此四步相移法相位主值求取后有三幅图，三频外差最后得到相位展开图。</strong></span></p>\n<h2><strong><span style=\"color:#1c7892;\">主值求取结果</span></strong></h2>\n<p style=\"text-align:center;\"><span style=\"color:#1c7892;\"><img alt=\"\" src=\"..\\..\\static\\image\\4d1d6b17211c4976b5eb7e5112ae11e3.png\"/></span></p>\n<p style=\"text-align:center;\"> <img alt=\"\" src=\"..\\..\\static\\image\\4a86db79630c496882cfa8d141281405.png\"/></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\88c3b471c33e49cca90e44a3a0f93e28.png\"/></p>\n<h2><strong> <span style=\"color:#1c7892;\">相位展开结果</span></strong></h2>\n<p style=\"text-align:center;\"><span style=\"color:#1c7892;\"><img alt=\"\" src=\"..\\..\\static\\image\\32aad674d34248568afcef69cbc06369.png\"/></span></p>\n<p style=\"text-align:center;\"> <img alt=\"\" src=\"..\\..\\static\\image\\cc0468be41ed432496cce778747c14c6.png\"/></p>\n<p>         <strong><span style=\"color:#511b78;\">上面将展开相位图通过halcon进行展示。下一步展开相高模型的标定。</span></strong></p>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-27 11:27:01", "summary": "接上文：三维重建之条纹投影结构光一三维重建之条纹投影结构光一针对上文思路进行验证，本篇博客主要对相位进行求解，首先，对上面博客的理论进行复述，然后包括相位主值的计算和相位展开。四步相移三频外差理论推导"}