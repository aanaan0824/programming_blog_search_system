{"blogid": "122125733", "writerAge": "码龄7年", "writerBlogNum": "2", "writerCollect": "2", "writerComment": "0", "writerFan": "0", "writerGrade": "1级", "writerIntegral": "27", "writerName": "刘绍偈", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122125733.jpg", "writerRankTotal": "267578", "writerRankWeekly": "160178", "writerThumb": "0", "writerVisitNum": "1679", "blog_read_count": "850", "blog_time": "于 2021-12-24 15:03:07 发布", "blog_title": "QT6 调用 RUST Dll 笔记", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>QT6 绘制交互界面，rust 用来实现复杂逻辑，是一种兼顾开发效率、高安全性、高运行速度、低耦合的开发方式。但是，目前相关教程多基于老版本的 QT ，或是仅仅在谈 QT6 与 C\\C++ 之间的动态链接库开发。经综合多处教程，加之实测运行，得到如下方案，仅记录以备忘。</p>\n<h2><a id=\"_2\"></a>一、无参数和返回值的调用方法</h2>\n<h3><a id=\"RUST__3\"></a>（一）RUST 部分</h3>\n<p>在IDE中创建rust的库项目，命名为：rust_dll_call_by_c，删除lib.rs下所有自动生成的代码，写入自己需要的函数：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">//lib.rs</span>\n<span class=\"token attribute attr-name\">#[no_mangle]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">extern</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">my_print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is my rust dll print.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><strong>代码解释：</strong></p>\n<ol><li>#[no_mangle] 字面意思是不要熨平。实际作用是不要在编译时改动函数名（my_print），以便调用ddl 的其他语言代码能够按照名称找到函数。</li><li>pub extern 是向外暴露函数的关键字。</li></ol>\n</blockquote>\n<p>在Cargo.toml文件中加入以下代码：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token punctuation\">[</span>lib<span class=\"token punctuation\">]</span>\nname<span class=\"token operator\">=</span><span class=\"token string\">\"rust_dll_call_by_c\"</span>\n<span class=\"token keyword\">crate</span><span class=\"token operator\">-</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"cdylib\"</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<blockquote>\n<p><strong>代码解释：</strong> crate-type = [“cdylib”] 是生成 dll 的关键。</p>\n</blockquote>\n<p>这时，直接构建RUST，即可生成rust_dll_call_by_c.dll文件：<br/> <img alt=\"rust构建后的项目结构\" src=\"..\\..\\static\\image\\dfc2ca24d3fb433b8daa94ea23add0bc.png\"/></p>\n<h3><a id=\"_QT6__30\"></a>（二） QT6 部分</h3>\n<p>在qt creator中新建一个对话框项目，命名为：qt_call_rust_dll，自动生成的QT项目结构如下：<br/> <img alt=\"自动生成的QT目录结构\" src=\"..\\..\\static\\image\\3f9be01b2cdc4901bb0bc6bbabf098a6.png\"/><br/> 直接点击构建按钮，即可在项目路径外生成一个构建目录如下：<br/> <img alt=\"项目目录和构建目录\" src=\"..\\..\\static\\image\\500b03deae6f416a811b0a56385a0538.png\"/><br/> 将rust_dll_call_by_c.dll文件，拷贝至build-qt_call_rust_dll-Desktop_Qt_6_2_2_MSVC2019_64bit-Debug目录中的Debug文件夹下，如图：<br/> <img alt=\"拷贝DLL文件后的构建目录下文件\" src=\"..\\..\\static\\image\\471b201f02dd420ea8a913fdcf6dd3ca.png\"/><br/> 在头文件dialog.h中添加如下代码：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QLibrary&gt;</span></span>\n</code></pre>\n<p>在界面设计视图拖拽一个pushButton控件，显示文字改为：调用rust编写的DLL（无参数无返回值），控件名改为：pushButton_without_arg_void，之后在控件上右键转到槽。<br/> <img alt=\"界面设计视图编辑后效果\" src=\"..\\..\\static\\image\\10b14cb461594a7088783c1af921392a.png\"/><br/> 在该按钮的click槽方法中写入调用DLL逻辑如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">Dialog</span><span class=\"token operator\">::</span><span class=\"token function\">on_pushButton_without_arg_void_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    QLibrary <span class=\"token function\">rust_lib</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rust_dll_call_by_c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 定义DLL库名称</span>\n\n    rust_lib<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                                 <span class=\"token comment\">// 加载DLL库</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rust_lib<span class=\"token punctuation\">.</span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>                       <span class=\"token comment\">// 判断是否加载成功</span>\n        <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"加载rust库成功\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">auto</span> rust_fn <span class=\"token operator\">=</span> rust_lib<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my_print\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定位并解析DLL库中的目标函数</span>\n        <span class=\"token function\">rust_fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                                   <span class=\"token comment\">// 运行目标函数</span>\n        rust_lib<span class=\"token punctuation\">.</span><span class=\"token function\">unload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                           <span class=\"token comment\">// 用完卸载DLL</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"加载rust库失败\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><strong>代码解释：</strong> 调用DLL分五步：</p>\n<ol><li>初始化一个 QLibrary 实例 rust_lib，并指明 dll 名称 rust_dll_call_by_c。*（注意：此处不用加.dll后缀）</li><li>调用 load 方法 加载库，并用 isLoaded 方法判断是否成功加载，分情况处理</li><li>调用 resolve 方法，实现 my_print 函数的自动定位和解析，并返回 rust_fn 作为 QT 中可以使用的函数名</li><li>使用函数 rust_fn</li><li>调用 unload 方法卸载DLL，释放内存。</li></ol>\n</blockquote>\n<p>点击运行代码，点击按钮，输出如下：<br/> <img alt=\"调用成功\" src=\"..\\..\\static\\image\\a9de93e7bf634cd4a5e8c9205af4a66f.png\"/></p>\n<h2><a id=\"DLL_73\"></a>有参数和返回值的DLL调用</h2>\n<h3><a id=\"RUST__74\"></a>（一）RUST 部分</h3>\n<p>在lib.rs文件中加入一下代码：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>os<span class=\"token punctuation\">::</span>raw<span class=\"token punctuation\">::</span></span>c_int<span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[no_mangle]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">extern</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">my_add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> c_int<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> c_int<span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span> c_int<span class=\"token punctuation\">{<!-- --></span>\n    a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><strong>代码解释：</strong> 引入C底层类型：<br/> rust编写的DLL在qt6调用时，如果存在形参和返回值，则形参和返回值的类型，既不能直接使用rust类型，也不能使用qt6的类型，必须采用一个”交集“类型——C-ABI。这种底层类型在rust的标准库中已经定义在 std::os::raw 路径下，直接引入使用即可。</p>\n</blockquote>\n<p>重新构建RUST，生成dll文件，拷贝dll到QT的构建目录下。</p>\n<h3><a id=\"QT6__91\"></a>（一）QT6 部分</h3>\n<p>添加一个按钮，命名为：pushButton_with_arg_return，转到槽。<br/> <img alt=\"添加一个按钮\" src=\"..\\..\\static\\image\\b8edba79a3444123901a2519e55460ab.png\"/><br/> 在槽函数中实现调用DLL逻辑：</p>\n<pre><code class=\"prism language-rust\">void <span class=\"token class-name\">Dialog</span><span class=\"token punctuation\">::</span><span class=\"token function\">on_pushButton_with_arg_return_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">QLibrary</span> <span class=\"token function\">rust_lib</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rust_dll_call_by_c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义DLL库名称</span>\n\n    rust_lib<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                         <span class=\"token comment\">// 加载DLL库</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rust_lib<span class=\"token punctuation\">.</span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>               <span class=\"token comment\">// 判断是否加载成功</span>\n        <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"加载rust库成功\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 强制转换解析后的my_add函数类型为Fun1类型</span>\n        <span class=\"token class-name\">Fun1</span> rust_my_add <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Fun1</span><span class=\"token punctuation\">)</span>rust_lib<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my_add\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定位并解析DLL库中的目标函数</span>\n        <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">rust_my_add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\">// 运行目标函数</span>\n        rust_lib<span class=\"token punctuation\">.</span><span class=\"token function\">unload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                                   <span class=\"token comment\">// 用完卸载DLL</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"加载rust库失败\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><strong>代码解释：</strong> 注意强制转换函数类型：<br/> my_add 函数解析后，QT 并不知道这个函数的形参和返回值的类型，因此也无法使用这个函数。这时，就要定义这个函数在 QT 中的“签名”，然后用这个函数签名强制转换解析后的函数为自定义的 Fun1 类型。下面，我们来定义这个 Fun1 类型。</p>\n</blockquote>\n<p>在 Dialog.h 文件中插入如下代码：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Fun1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>点击运行代码，弹出对话框如下：<br/> <img alt=\"两个按钮的对话框\" src=\"..\\..\\static\\image\\dabeb1af78e74fdfb77f06353aa14095.png\"/><br/> 点击按钮 “调用rust编写的DLL（有参数有返回值）”，输入如下：<br/> <img alt=\"有参数返回值调用DLL\" src=\"..\\..\\static\\image\\57e785571fc64d4eb864e654370a380c.png\"/></p>\n<hr/>\n<p><em>2021年12月24日</em></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-12-24 15:03:07", "summary": "绘制交互界面，用来实现复杂逻辑，是一种兼顾开发效率、高安全性、高运行速度、低耦合的开发方式。但是，目前相关教程多基于老版本的，或是仅仅在谈与之间的动态链接库开发。经综合多处教程，加之实测运行，得到如下"}