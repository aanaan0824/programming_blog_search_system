{"blogid": "126318928", "writerAge": "码龄100天", "writerBlogNum": "124", "writerCollect": "1175", "writerComment": "1770", "writerFan": "1158", "writerGrade": "6级", "writerIntegral": "5052", "writerName": "林有酒", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126318928.jpg", "writerRankTotal": "3492", "writerRankWeekly": "55", "writerThumb": "1202", "writerVisitNum": "21346", "blog_read_count": "273", "blog_time": "于 2022-08-15 09:00:00 发布", "blog_title": "【TypeScript】介绍和环境搭建的详细步骤", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#TypeScript_1\">TypeScript的邂逅</a></li><li><ul><li><a href=\"#TypeScript_5\">认识TypeScript</a></li><li><a href=\"#TypeScript_29\">TypeScript特点</a></li><li><a href=\"#_65\">大前端发展趋势</a></li></ul>\n</li><li><a href=\"#TypeScript_88\">TypeScript的环境</a></li><li><ul><li><a href=\"#TypeScript_91\">TypeScript编译环境</a></li><li><a href=\"#TypeScript_129\">TypeScript运行环境</a></li><li><ul><li><a href=\"#_webpack_151\">方式一： webpack配置</a></li><li><a href=\"#tsnode_277\">方式二：安装ts-node</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"TypeScript_1\"></a>TypeScript的邂逅</h2>\n<blockquote>\n<p>虽然我们已经知道TypeScript是干什么的了，也知道它解决了什么样的问题，但是我们还是需要全面的来认识一下TypeScript到底是什么？</p>\n</blockquote>\n<h3><a id=\"TypeScript_5\"></a>认识TypeScript</h3>\n<p><strong>我们来看一下TypeScript在GitHub和官方上对自己的定义</strong>：</p>\n<blockquote>\n<p>GitHub说法： TypeScript is a superset of JavaScript that compiles to clean JavaScript output.</p>\n<p>TypeScript官网： TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.</p>\n<p>这两个地方的意思是差不多的, 翻译过来： TypeScript是拥有类型的<font color=\"red\">JavaScript超集</font>, 它可以编译成<font color=\"red\">普通、干净、完整</font>的JavaScript代码。</p>\n</blockquote>\n<p><strong>怎么理解上面的话呢？</strong></p>\n<blockquote>\n<p>我们可以将TypeScript理解成<font color=\"red\">加强版的JavaScript</font>。</p>\n<p>JavaScript所拥有的特性， TypeScript全部都是支持的，并且它紧随ECMAScript的标准，所以ES6、 ES7、 ES8等新语法标准，它都是支持的；</p>\n<p>并且在语言层面上，不仅仅增加了类型约束，而且包括一些<font color=\"red\">语法的扩展</font>，比如枚举类型（ Enum）、元组类型（ Tuple）等；</p>\n<p>TypeScript在实现新特性的同时，总是保持和ES标准的同步甚至是领先；</p>\n<p>并且TypeScript最终会被编译成JavaScript代码，所以你并不需要担心它的兼容性问题，在编译时也不需要借助于Babel这样的工具；</p>\n<p>所以，我们可以把TypeScript理解成更加强大的JavaScript，不仅让JavaScript更加安全，而且给它带来了诸多好用的好用特性；</p>\n</blockquote>\n<h3><a id=\"TypeScript_29\"></a>TypeScript特点</h3>\n<blockquote>\n<p>官方对TypeScript有几段特点的描述，我觉得非常到位（虽然有些官方，了解一下），我们一起来分享一下</p>\n</blockquote>\n<p><strong>始于JavaScript，归于JavaScript</strong></p>\n<blockquote>\n<p>TypeScript从今天数以百万计的JavaScript开发者所熟悉的语法和语义开始。使用现有的JavaScript代码，包括流行的JavaScript库， 并从JavaScript代码中调用TypeScript代码；</p>\n<p>TypeScript可以编译出纯净、 简洁的JavaScript代码，并且可以运行在任何浏览器上、 Node.js环境中和任何支持ECMAScript 3（或 更高版本）的JavaScript引擎中；</p>\n</blockquote>\n<p><strong>TypeScript是一个强大的工具，用于构建大型项目</strong></p>\n<blockquote>\n<p>类型允许JavaScript开发者在开发JavaScript应用程序时使用高效的开发工具和常用操作比如静态检查和代码重构；</p>\n<p>类型是可选的，类型推断让一些类型的注释使你的代码的静态验证有很大的不同。类型让你定义软件组件之间的接口和洞察现有JavaScript库的行为；</p>\n</blockquote>\n<p><strong>拥有先进的 JavaScript</strong></p>\n<blockquote>\n<p>TypeScript提供最新的和不断发展的JavaScript特性，包括那些来自2015年的ECMAScript和未来的提案中的特性，比如异步功能和 Decorators，以帮助建立健壮的组件；</p>\n<p>这些特性为高可信应用程序开发时是可用的，但是会被编译成简洁ECMAScript3(或更新版本)的JavaScript；</p>\n</blockquote>\n<p><strong>正是因为有这些特性， TypeScript目前已经在很多地方被应用</strong>：</p>\n<blockquote>\n<p>Angular源码在很早就使用TypeScript来进行了重写，并且开发Angular也需要掌握TypeScript；</p>\n<p>Vue3源码也采用了TypeScript进行重写，在前面阅读源码时我们看到大量TypeScript的语法；</p>\n<p>包括目前已经变成最流行的编辑器VSCode也是使用TypeScript来完成的；</p>\n<p>包括在React中已经使用的ant-design的UI库，也大量使用TypeScript来编写；</p>\n<p>目前公司非常流行Vue3+TypeScript、 React+TypeScript的开发模式；</p>\n<p>包括小程序开发，也是支持TypeScript的；</p>\n</blockquote>\n<h3><a id=\"_65\"></a>大前端发展趋势</h3>\n<p><strong>目前我们前端要学习的东西也是越来越多, 各种框架的学习, 现在还要学习TS</strong></p>\n<blockquote>\n<p>node的作者在18年是开发一个新的框架deno时, 有人曾在GitHub上提交这样一个issue</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1c718c698b9c46149b8de5589f04bcc4.png\"/></p>\n<p><strong>大前端是一群最能或者说最需要折腾的开发者</strong>：</p>\n<blockquote>\n<p>客户端开发者：从Android到iOS，或者从iOS到Android，到RN，甚至现在越来越多的客户端开发者接触前端 相关知识（ Vue、 React、 Angular、小程序）；</p>\n<p>前端开发者：从jQuery到AngularJS，到三大框架并行： Vue、 React、 Angular，还有小程序，甚至某些前端开发现在也要接触客户端开发（比如RN、 Flutter）；</p>\n<p>目前又面临着不仅仅学习ES6、7、8等新的特性，还要学习TypeScript；</p>\n<p>新框架的出现，我们又需要学习新框架的特性，比如vue3.x、 react18等等；</p>\n</blockquote>\n<p><strong>但是每一样技术的出现都会让人惊喜，因为他必然是解决了之前技术的某一个痛点的，而TypeScript真是解决了 JavaScript存在的很多设计缺陷，尤其是关于类型检测的</strong>。</p>\n<p><strong>并且从开发者长远的角度来看，学习TypeScript有助于我们前端程序员培养类型思维，这种思维方式对于完成大型项目尤为重要</strong>。</p>\n<h2><a id=\"TypeScript_88\"></a>TypeScript的环境</h2>\n<hr/>\n<h3><a id=\"TypeScript_91\"></a>TypeScript编译环境</h3>\n<p><strong>在前面我们提到过， TypeScript最终会被编译成JavaScript来运行，所以我们需要搭建对应的环境</strong>：</p>\n<blockquote>\n<p>我们需要在电脑上安装TypeScript，这样就可以通过TypeScript的Compiler将其编译成JavaScript；</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fbfa55b6244d4d1ab7d510546ce60b00.png\"/></p>\n<p><strong>TypeScript代码无法直接跑在浏览器上, 需要编译成JavaScript代码才能运行在浏览器上, 那么这个编译的过程需要谁来来完成呢?</strong></p>\n<blockquote>\n<p>有两个工具可以帮助我们转换:</p>\n<ol><li>tsc: TypeScript Compiler</li><li>babel: babel中有一个preset插件</li></ol>\n<p>目前我们使用官方的tsc工具</p>\n</blockquote>\n<p><strong>首先, 我们需要通过npm, 先进行全局的安装</strong>：</p>\n<blockquote>\n<p>安装命令: <code>npm install typescript -g</code></p>\n<p>查看版本: <code>tsc --version</code></p>\n</blockquote>\n<p><strong>【演示】tsc的使用, 例如我们编写一些TS代码</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2eff3011c27640d89fbf47c41eeae360.png\"/></p>\n<p><strong>在终端中敲命令: <code>tsc 文件名</code></strong></p>\n<blockquote>\n<p>输入完成后会生成一个相同名称的js代码</p>\n<p>再在浏览器或者node环境中运行js代码即可</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\133fba4e58e2485390e06c306f79896b.png\"/></p>\n<h3><a id=\"TypeScript_129\"></a>TypeScript运行环境</h3>\n<p><strong>如果我们每次为了查看TypeScript代码的运行效果，都需要经过这两个步骤的话就太繁琐了</strong>：</p>\n<blockquote>\n<p>第一步：通过tsc编译TypeScript到JavaScript代码；</p>\n<p>第二步：在浏览器或者Node环境下运行JavaScript代码；</p>\n</blockquote>\n<p><strong>是否可以简化这样的步骤呢？</strong></p>\n<blockquote>\n<p>比如编写了TypeScript之后可以直接运行在浏览器上？</p>\n<p>比如编写了TypeScript之后，直接通过node的命令来执行？</p>\n</blockquote>\n<p><strong>上面我提到的两种方式，可以通过两个解决方案来完成</strong>：</p>\n<blockquote>\n<p>方式一：通过webpack，配置本地的TypeScript编译环境和开启一个本地服务，可以直接运行在浏览器上；</p>\n<p>方式二：通过ts-node库，为TypeScript的运行提供执行环境, ts-node会做两件事情: 帮你做编译; 帮你运行在node中；</p>\n</blockquote>\n<hr/>\n<h4><a id=\"_webpack_151\"></a>方式一： webpack配置</h4>\n<p><strong>在项目中Vue-cli会自动帮助我们配置好TS环境, 某些特殊情况下我们也需要自己进行配置</strong></p>\n<blockquote>\n<p>注意：这里可能需要大家对npm和webpack有一些简单的了解，不会非常复杂（如果完全不懂，按照我给出的步骤来做即可，后续自己进行一些知识的补充）</p>\n</blockquote>\n<p><strong>步骤一: 通过npm来初始化package.json文件</strong>: <code>npm init</code></p>\n<blockquote>\n<p>输入完成后, 全部敲回车即可</p>\n</blockquote>\n<p><strong>步骤二: 本地安装webpack和webpack-cli</strong>: <code>npm install webpack webpack-cli -D</code></p>\n<blockquote>\n<p>在package.json中添加一个脚本</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5200b0cac0d2482798646e0bc4916c6e.png\"/></p>\n<ul><li>创建一个webpack.config.js文件</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"development\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src/main.ts\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"./dist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bundle.js\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>步骤三: 安装ts-loader和typescript</strong>: <code>npm install ts-loader typescript -D</code></p>\n<blockquote>\n<p>本地安装的原因:</p>\n<ul><li>因为我们之后是通过webpack进行编译我们的TypeScript代码的，并不是通过tsc来完成的。（tsc使用的是全局安装的TypeScript依赖）</li><li>那么webpack会在本地去查找TypeScript的依赖，所以我们是需要本地依赖TypeScript的；</li></ul>\n</blockquote>\n<ul><li>再在webpack.config.js文件中配置匹配规则</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"development\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src/main.ts\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"./dist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bundle.js\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">extensions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\".ts\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.ts$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'ts-loader'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><strong>步骤四: 初始化tsconfig.json文件</strong>: <code>tsc --init</code></p>\n<blockquote>\n<p>会自动生成一个tsconfig.json文件, 此时已经可以将ts文件编译成js文件</p>\n</blockquote>\n<p><strong>步骤五: 搭建本地服务器</strong>: <code>npm install webpack-dev-server -D</code></p>\n<blockquote>\n<p>安装后, 再在package.json中配置一个脚本</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\324d46b1d90042d48202391308d2753d.png\"/></p>\n<ul><li>我们还需要一个index.html作为模板</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8075fda15d4f4667acb0cf50b4f6864c.png\"/></p>\n<ul><li>安装<code>npm install html-webpack-plugin -D</code>在webpack.config.js中配置模板, 最终webpack.config.js中配置如下</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"development\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src/main.ts\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"./dist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bundle.js\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">devServer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">extensions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\".ts\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".js\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".cjs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".json\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.ts$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'ts-loader'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./index.html\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>此时我们直接编写的main.ts文件, 就会直接运行在浏览器上</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f460f41db5934bb98b1131af50d0c020.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ab840b5c78c7415a8471151d8bf96b74.png\"/></p>\n<hr/>\n<h4><a id=\"tsnode_277\"></a>方式二：安装ts-node</h4>\n<blockquote>\n<p>安装命令: <code>npm install ts - node -g</code></p>\n<p>安装命令: <code>npm install ts - node -g</code></p>\n<p>另外ts-node需要依赖 tslib 和 @types/node 两个包, 也需要安装一下：<code>npm install tslib @types/node -g</code></p>\n<p>现在，我们可以直接通过 ts-node 来运行TypeScript的代码：<code>ts - node 文件名</code></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\286b803ec8214c7599703d1f0f50f33e.png\"/></p>\n<p><strong>TS的语法学习中, 我会采用方式二, 在后续项目中采用方式一</strong></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-08-15 09:00:00", "summary": "文章目录的邂逅认识特点大前端发展趋势的环境编译环境运行环境方式一：配置方式二：安装的邂逅虽然我们已经知道是干什么的了，也知道它解决了什么样的问题，但是我们还是需要全面的来认识一下到底是什么？认识我们来"}