{"blogid": "125739267", "writerAge": "码龄1年", "writerBlogNum": "45", "writerCollect": "2171", "writerComment": "2260", "writerFan": "3899", "writerGrade": "6级", "writerIntegral": "5996", "writerName": "懒羊羊.java", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125739267.jpg", "writerRankTotal": "3004", "writerRankWeekly": "190", "writerThumb": "2066", "writerVisitNum": "45777", "blog_read_count": "1203", "blog_time": "已于 2022-09-01 21:52:12 修改", "blog_title": "【MyBatis】初识这一优秀的持久层框架", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>学习目录</h3>\n<ul><li><a href=\"#_1\">前言</a></li><li><ul><li><a href=\"#MyBatis_6\">MyBatis简介</a></li><li><a href=\"#_10\">快速入门</a></li><li><a href=\"#_102\">映射文件</a></li><li><a href=\"#sqlresultMap_104\">sql片段与resultMap（🏳️‍🌈）</a></li><li><a href=\"#MyBatis_127\">MyBatis的增删改查</a></li><li><ul><li><a href=\"#1_128\">1.添加操作</a></li><li><a href=\"#2_149\">2.修改操作</a></li><li><a href=\"#3_168\">3.删除操作</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>前言</h1>\n<p>传统的JDBC操作数据库都是通过写一个java类，在类中调用接口下的API执行相应的SQL，<font color=\"red\"><strong>存在大量的硬编码</strong></font>。试想，若是开发一个日活度高的系统，那SQL的变动的非常大，就要我们去相应的类中修改Java代码，特别是进行查询操作时需要我们手动将结果集封装到实体类中，造成后期维护压力山大<br/> <strong>总而言之，缺点多多</strong></p>\n<blockquote>\n<p>🏳️‍🌈给大家推荐一个<font color=\"green\"><strong>Java面试刷题网站牛客网</strong></font>，懒羊羊祝你早日成神：<a href=\"https://www.nowcoder.com/link/pc_csdncpt_lyy_java\">Java刷题面试宝藏网站</a></p>\n</blockquote>\n<h2><a id=\"MyBatis_6\"></a>MyBatis简介</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4998ee1db8d9459582f3297becdc107b.png\"/><br/> mybatis是一个优秀的<font color=\"red\"><strong>基于java的持久层框架</strong></font>，它内部封装了jdbc，使开发者只需要关注sql语句本身，而不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程。mybatis通过xml或注解的方式将要执行的各种statement配置起来，并通过java对象和statement中sql的动态参数进行映射生成最终执行的sql语句<br/> 最后mybatis框架执行sql并将结果映射为java对象并返回。采用ORM思想解决了实体和数据库映射的问题，对jdbc进行了封装，屏蔽了jdbc api底层访问细节，使我们不用与jdbc api打交道，就可以完成对数据库的持久化操作</p>\n<h2><a id=\"_10\"></a>快速入门</h2>\n<p>下面的配置文件在MyBatis的官网里都有，自己去复制过来粘贴到IDEA中更改对应的信息即可，<strong>我写出来的目的是为了保证文章的顺序流畅</strong>（大家莫烦~）<br/> <strong>1.导入MyBatis相关坐标</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">&gt;</span></span>mysql<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">&gt;</span></span>mysql<span class=\"token operator\">-</span>connector<span class=\"token operator\">-</span>java<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">&gt;</span></span><span class=\"token number\">8.0</span><span class=\"token number\">.29</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">&gt;</span></span>org<span class=\"token punctuation\">.</span>mybatis<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">&gt;</span></span>mybatis<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">&gt;</span></span><span class=\"token number\">3.5</span><span class=\"token number\">.10</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><strong>2.数据库中建立相应的数据表，并编写一个表中字段对应的（Brand）实体类</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fe85975742374c67b25522f2622a86d3.png\"/><br/> <strong>3.编写BrandMapper映射文件</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>xml version<span class=\"token operator\">=</span><span class=\"token string\">\"1.0\"</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span> <span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>DOCTYPE mapper\n        PUBLIC <span class=\"token string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span>\n        <span class=\"token string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>mapper namespace<span class=\"token operator\">=</span><span class=\"token string\">\"mapper.BrandMapper\"</span><span class=\"token operator\">&gt;</span>\n<span class=\"token comment\">//Mapper代理开发：</span>\n<span class=\"token comment\">//定义与SQL映射文件同名的Mapper接口，</span>\n<span class=\"token comment\">//并且将Mapper接口和SQL映射文件放置在同一目录下</span>\n<span class=\"token comment\">//设置SQL映射文件的namespace属性为Mapper接口全限定名</span>\n<span class=\"token comment\">//在Mapper接口中定义方法，方法名就是SQL映射文件中sql语句的id，并保持参数类型和返回值类型一致</span>\n    <span class=\"token operator\">&lt;</span>select id<span class=\"token operator\">=</span><span class=\"token string\">\"selAll\"</span> resultType<span class=\"token operator\">=</span><span class=\"token string\">\"sqlTest.Brand\"</span><span class=\"token operator\">&gt;</span>\n        select <span class=\"token operator\">*</span> from mybatis<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>select<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>mapper<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><strong>4.编写封装查询结果对象的接口</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BrandMapper</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Brand</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">selAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>5编写Mybatis核心配置文件</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>xml version<span class=\"token operator\">=</span><span class=\"token string\">\"1.0\"</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span> <span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>DOCTYPE configuration\n        PUBLIC <span class=\"token string\">\"-//mybatis.org//DTD Config 3.0//EN\"</span>\n        <span class=\"token string\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"</span><span class=\"token operator\">&gt;</span>\n<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>configuration<span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>typeAliases<span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token keyword\">package</span> <span class=\"token namespace\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"sqlTest\"</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>typeAliases<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>environments <span class=\"token keyword\">default</span><span class=\"token operator\">=</span><span class=\"token string\">\"development\"</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>environment id<span class=\"token operator\">=</span><span class=\"token string\">\"development\"</span><span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>transactionManager type<span class=\"token operator\">=</span><span class=\"token string\">\"JDBC\"</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>dataSource type<span class=\"token operator\">=</span><span class=\"token string\">\"POOLED\"</span><span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>数据库连接信息<span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>property name<span class=\"token operator\">=</span><span class=\"token string\">\"driver\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>property name<span class=\"token operator\">=</span><span class=\"token string\">\"url\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"jdbc:mysql://localhost:3306/pyq?useSSL=false\"</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>property name<span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"root\"</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>property name<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"284650\"</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dataSource<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>environment<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>environments<span class=\"token operator\">&gt;</span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>mappers<span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token operator\">&lt;</span>mapper resource<span class=\"token operator\">=</span><span class=\"token string\">\"mapper/userMapper.xml\"</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>mapper resource<span class=\"token operator\">=</span><span class=\"token string\">\"mapper/BrandMapper.xml\"</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>mappers<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>configuration<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><strong>6.编写测试类，通过MyBatis实现查询功能</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MybatisDemo3</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token comment\">//加载mybatis的核心配置文件,获取sqlSessionFactory</span>\n        <span class=\"token class-name\">String</span> resource <span class=\"token operator\">=</span> <span class=\"token string\">\"mybatis-config.xml\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">InputStream</span> inputStream <span class=\"token operator\">=</span> <span class=\"token class-name\">Resources</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//获取sqlSession工厂对象</span>\n        <span class=\"token class-name\">SqlSessionFactory</span> sqlSessionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>inputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//获取sqlSession对象,来执行sql</span>\n        <span class=\"token class-name\">SqlSession</span> sqlSession <span class=\"token operator\">=</span> sqlSessionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//获取BrandMapper接口的代理对象</span>\n        <span class=\"token class-name\">BrandMapper</span> brandMapper <span class=\"token operator\">=</span> sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BrandMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Brand</span><span class=\"token punctuation\">&gt;</span></span> brands <span class=\"token operator\">=</span>brandMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>brands<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//释放资源</span>\n        sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>一顿操作下来好像也没有简单多少，其实不然，初次编写的配置文件都是持久化的属性，以后的变更只需要在<strong>接口里写出相应的方法即可</strong>，避免了大量的硬编码</p>\n<h2><a id=\"_102\"></a>映射文件</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b00e086278d8411188d03b2bc6d7908c.png\"/></p>\n<h2><a id=\"sqlresultMap_104\"></a>sql片段与resultMap（🏳️‍🌈）</h2>\n<p>在进行查询操作时，<font color=\"red\"><strong>为了解决SQL表中字段名称和实体类中的属性名不一致导致的不能自动封装（查出为null）的问题</strong></font>，我们可以通过\"起别名\"也可以通过SQL片段来对查询的数据进行定义修改，统一重复的操作<br/> 比如，在遇到表中的字段名称不符合实体类中驼峰命名的规范时、要对查询的数据进行范围限定时都可以通过sql片段来实现，就像这样：</p>\n<pre><code class=\"prism language-java\"> <span class=\"token operator\">&lt;</span>sql id<span class=\"token operator\">=</span><span class=\"token string\">\"cut\"</span><span class=\"token operator\">&gt;</span>\n         bracd_name as bracdName<span class=\"token punctuation\">,</span>company_name as compantName\n <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>sql<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>select id<span class=\"token operator\">=</span><span class=\"token string\">\"selAll\"</span> resultType<span class=\"token operator\">=</span><span class=\"token string\">\"sqlTest.Brand\"</span><span class=\"token operator\">&gt;</span>\n        select <span class=\"token operator\">&lt;</span>include refid<span class=\"token operator\">=</span><span class=\"token string\">\"cut\"</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span> from mybatis<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>select<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>通过SQL片段实现了所谓的范围查询，单表重复起别名工作的统一，但是针对多次不同的查询范围我们需要多次定义SQL片段（不灵活），这也不是一件简单的事<br/> 于是resultMap帮我们解决了这个问题：</p>\n<pre><code class=\"prism language-xml\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resultMap</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rm<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>brand<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bracd_name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bracdName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>company_name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>companyName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resultMap</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selAll<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultMap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rm<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        select * from mybatis;\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>通过id来设置唯一标识，type来指定映射类型，把表的列名column和实体类的属性名通过result进行映射，在我们的SQL中直接查询所有即可，进行不同的查询操作也不需要重复定义片段或者取别名，就变得十分简单</p>\n<h2><a id=\"MyBatis_127\"></a>MyBatis的增删改查</h2>\n<h3><a id=\"1_128\"></a>1.添加操作</h3>\n<p>编写Mapper接口，写出添加的方法：</p>\n<pre><code class=\"prism language-java\">     <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Brand</span> brand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>配置SQL映射文件：</p>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>insert</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>add<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">&gt;</span></span>\n        insert into mybatis(bracd_name,company_name,ordered,description,status)\n        values (#{bracdName},#{companyName},#{ordered},#{description},#{status});\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>insert</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mapper</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>执行方法:</p>\n<pre><code class=\"prism language-java\"> <span class=\"token class-name\">SqlSession</span> sqlSession <span class=\"token operator\">=</span> sqlSessionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">BrandMapper</span> brandMapper <span class=\"token operator\">=</span> sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BrandMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  brandMapper<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>brand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"2_149\"></a>2.修改操作</h3>\n<p>编写Mapper接口，写出修改的方法：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Brand</span> brand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>编写映射文件:</p>\n<pre><code class=\"prism language-xml\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>update</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>update<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">parameterType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sqlTest.Brand<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        update mybatis set bracd_name=#{bracdName},company_name=#{companyName},ordered=#{ordered},description=#{description},status=#{status}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>update</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>执行方法：</p>\n<pre><code class=\"prism language-java\"> <span class=\"token class-name\">SqlSession</span> sqlSession <span class=\"token operator\">=</span> sqlSessionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">BrandMapper</span> brandMapper <span class=\"token operator\">=</span> sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BrandMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> count<span class=\"token operator\">=</span> brandMapper<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>brand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"3_168\"></a>3.删除操作</h3>\n<p>编写Mapper接口，写出删除方法：</p>\n<pre><code class=\"prism language-java\">     <span class=\"token keyword\">void</span> <span class=\"token function\">deleteid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Brand</span> brand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>编写映射文件：</p>\n<pre><code class=\"prism language-xml\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>delete</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>deleteid<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">parameterType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>brand<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            delete from mybatis where id=#{id}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>delete</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>执行方法：</p>\n<pre><code class=\"prism language-java\"> <span class=\"token class-name\">SqlSession</span> sqlSession <span class=\"token operator\">=</span> sqlSessionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">BrandMapper</span> brandMapper <span class=\"token operator\">=</span> sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BrandMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> count<span class=\"token operator\">=</span> brandMapper<span class=\"token punctuation\">.</span><span class=\"token function\">deleteid</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>以上就是对MyBtias的初识，后面还有很多高级功能等待整理</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-09-01 21:52:12", "summary": "学习目录前言简介快速入门映射文件片段与的增删改查添加操作修改操作删除操作前言传统的操作数据库都是通过写一个类，在类中调用接口下的执行相应的，存在大量的硬编码。试想，若是开发一个日活度高的系统，那的变动"}