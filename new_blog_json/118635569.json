{"blogid": "118635569", "writerAge": "码龄5年", "writerBlogNum": "69", "writerCollect": "5422", "writerComment": "193", "writerFan": "1714", "writerGrade": "5级", "writerIntegral": "1818", "writerName": "偶像java练习生", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_118635569.jpg", "writerRankTotal": "1338132", "writerRankWeekly": "85200", "writerThumb": "780", "writerVisitNum": "228013", "blog_read_count": "193913", "blog_time": "于 2021-07-11 22:16:37 发布", "blog_title": "面试被问到HashMap 底层原理?看完这边文章绝对不慌！", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_0\"></a>快速入门</h2>\n<p>存储：put 方法 put(key,value)<br/> 查询 : get 方法 get(key)<br/> java 代码如下</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>HashMap<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> class App {\n\n   <span class=\"token keyword\">public</span> static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> {\n       Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span>String<span class=\"token operator\">&gt;</span> map <span class=\"token operator\">=</span> new HashMap<span class=\"token operator\">&lt;&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       map<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"刘一\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"刘一\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       map<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"陈二\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"陈二\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       map<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       map<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       map<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       map<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"Money\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"我是猴哥Money老师\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       System<span class=\"token punctuation\">.</span><span class=\"token keyword\">out</span><span class=\"token punctuation\">.</span>println<span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"Money\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   }\n}\n<span class=\"token comment\">//输出结果：我是猴哥Money老师</span>\n</code></pre>\n<hr/>\n<h2><a id=\"_25\"></a>技术的本质，底层结构</h2>\n<p><strong>程序是等于我们的数据结构和算法</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210710152038670.png\"/></p>\n<p>HashMap 其实就是做存储的，做存储的就是数据结构</p>\n<ul><li>在JDK7 : HashMap 是由 数组，链表 组成的</li><li>在JDK8: HashMap 是由 数组，链表，红黑树 组成的</li></ul>\n<p>存储是按上面的规则存储的，那查询是怎么查的了</p>\n<ul><li>算法：哈希算法</li></ul>\n<h2><a id=\"HashMap__37\"></a>既然要了解HashMap 的组成，就谈谈它的结构组成</h2>\n<hr/>\n<ol><li>首先我们来说下数组，数组在java 中是怎么定义的了</li></ol>\n<pre><code class=\"prism language-java\">    <span class=\"token comment\">//数组：采用一段连续的存储单元来存储数据的</span>\n    <span class=\"token comment\">//数组的特点: 查询时间复杂度:0(1) ,删除,插入,时间负责度0(N),总结：查询块，插入慢</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//数组的定义：初始化长度为10，数据类型Integer ,</span>\n        <span class=\"token class-name\">Integer</span> integer<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//指定下标，复制</span>\n        integer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//指定下标，复制</span>\n        integer<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//指定下标，复制</span>\n        integer<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//指定下标，复制</span>\n        integer<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">400</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 输出结果：400</span>\n</code></pre>\n<p>数组结构如图：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210710153049733.png\"/><br/> 查询： 时间复杂度 0（1）,查询非常快的<br/> 删除，插入 ：时间复杂度0（N） 非常慢的，效率没有查询那么快</p>\n<hr/>\n<p><strong>为什么查询快，插入，删除慢了？</strong></p>\n<p>查询快</p>\n<ul><li>是因为我们数组了都有一个序号,如图，0,1,2,3,4,5,… ，如果要找到下标为3的数据值, 这些序号其实就是他们的下标地址，可以理解为他们 的一个下标索引，这个下标是连续的，是自增的，所以我们立马可以确定3个这个位置，根据这个索引3 找到它对应的节点。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210710154115524.png\"/></li></ul>\n<p>插入，删除慢</p>\n<ul><li>假如我现在要出入一个Monkey 的数据，插入到3和4之间，如图</li><li><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210710154322602.png\"/><br/> 存在这个位置我们是没有下标的，则我们的下标4 则要移到 Monkey 那个位置，5下标 就移到4那个位置，如图：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210710154444935.png\"/><br/> 类似，我们后面的下标都要向左移动，这样我后面的数据是不是要做很大的改动，这样时间复杂度则为0（N），这样就保证了我们数组的连续性，同理删除的话如图：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2021071015471055.png\"/><br/> 数组后面数据的下标，都要还原成之前插入前的下标，后面的节点都要改变，这样我们可以看出，这就是数组，删除，插入 为什么这么慢！<br/> 除非是插入，删除，数组的最后一个元素，大家懂了吗？还不懂那就私聊！</li></ul>\n<p><strong>扩充：</strong><br/> 大家知道我们java 哪一个类，底层用的就是数组？<br/> 在我们的java.util 包下面有一个ArrayList 类，如图<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210710155421188.png\"/><br/> 怎么验证了？<br/> 我们查看它的add 方法</p>\n<pre><code class=\"prism language-sql\">   <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token keyword\">add</span><span class=\"token punctuation\">(</span>E var1<span class=\"token punctuation\">)</span> {\n        this<span class=\"token punctuation\">.</span>ensureCapacityInternal<span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">.</span>size <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        this<span class=\"token punctuation\">.</span>elementData<span class=\"token punctuation\">[</span>this<span class=\"token punctuation\">.</span>size<span class=\"token operator\">+</span><span class=\"token operator\">+</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> var1<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    }\n</code></pre>\n<p><strong>如果面试被问到ArrayList 的特性，直接回答 查询快，插入，删除慢</strong></p>\n<hr/>\n<h2><a id=\"HashMap__97\"></a>为什么HashMap 用到数组存储了，还要用到链表了？</h2>\n<p><strong>谈谈什么是链表？</strong><br/> 在java 中是这么定义的：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">node</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>sun<span class=\"token punctuation\">.</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>bcel<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>generic<span class=\"token punctuation\">.</span></span>IMPDEP1<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//链表：链表是一种物理存储单元上非连续，非顺序的存储结构</span>\n    <span class=\"token comment\">//特点: 插入，删除时间复杂度0(1) 查找遍历时间复杂度0(N) 总结：插入快,查询慢</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Node</span> head <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"monkey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"刘一\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//输出结果:</span>\n<span class=\"token comment\">//monkey</span>\n<span class=\"token comment\">//张三</span>\n<span class=\"token comment\">//刘一</span>\n</code></pre>\n<p>链表：链表是一种物理存储单元上非连续，非顺序的存储结构,如图：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210710161704224.png\"/><br/> 为什么它插入，删除快，查询慢了？<br/> 删除 某个节点，只需要上一个节点 head.next =null<br/> 插入 某个几点，只需要上一个节点 head.next 指向插入的节点，插入的节点指向下一个节点<br/> 查询某个节点：链表查询都要通过头节点，比如我们要查‘刘一’，我们则要先查头monkey,再查张三，再查到刘一，<br/> 虽然只有3个节点，但是我们要查到刘一要查三次，把整个链表都遍历了一次，所以查询慢！<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210710162116290.png\"/><br/> <strong>扩充</strong><br/> 在我们java 中，哪一个util 类采用的链表来实现的?<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210710162528342.png\"/><br/> 我们来查看它的add 方法</p>\n<pre><code class=\"prism language-java\">   <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> var1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">linkLast</span><span class=\"token punctuation\">(</span>var1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//看上面有一个linkLast,如下:</span>\n\n   <span class=\"token keyword\">void</span> <span class=\"token function\">linkLast</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> var1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">LinkedList<span class=\"token punctuation\">.</span>Node</span> var2 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>last<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">LinkedList<span class=\"token punctuation\">.</span>Node</span> var3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList<span class=\"token punctuation\">.</span>Node</span><span class=\"token punctuation\">(</span>var2<span class=\"token punctuation\">,</span> var1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">LinkedList<span class=\"token punctuation\">.</span>Node</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>last <span class=\"token operator\">=</span> var3<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>var2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>first <span class=\"token operator\">=</span> var3<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            var2<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> var3<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token operator\">++</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">++</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>modCount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//看上面有一个Node,如下:</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">E</span> item<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">LinkedList<span class=\"token punctuation\">.</span>Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">&gt;</span></span> next<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">LinkedList<span class=\"token punctuation\">.</span>Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">&gt;</span></span> prev<span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LinkedList<span class=\"token punctuation\">.</span>Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">&gt;</span></span> var1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span> var2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">LinkedList<span class=\"token punctuation\">.</span>Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">&gt;</span></span> var3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>item <span class=\"token operator\">=</span> var2<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> var3<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> var1<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\t  <span class=\"token comment\">//上面有一个next,有一个prev </span>\n\t  <span class=\"token comment\">//这是一个双向链表</span>\n</code></pre>\n<p>双向链表如图: 类似与分页，上一页，下一页，下面的对象也可以获取上面对象的数据（head.prev）<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210710162845876.png\"/><br/> 现在大家都已经了解JDK7 HashMap 数据结构了，开始了解下算法！</p>\n<hr/>\n<h2><a id=\"_187\"></a>哈希算法</h2>\n<p>那么HashMap 是怎么去存储的了？他是如何将数据放到我们的数组和链表上的？<br/> 用的就是哈希算法，你们知道哈希算法的底层是怎么实现的？<br/> 哈希表</p>\n<p>什么是哈希算法？<br/> 哈希算法（也叫散列），就是把任意长度值（key）通过散列算法变换成固定长度的key(地址)， 通过这个地址进行访问的数据结构，<br/> 它通过把关键码值映射到表中一个位置来访问记录，以加快查找速度。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210710210507171.png\"/><br/> 例如图中的John Smith 通过散列算法变换成固定长度的key:152 （永远是152），然后通过152 变成John Smith 是不可能的，哈希算法是不可逆的。<br/> HashCode: 通过字符串算出它的ascii 码，进行mod(取模)，算出哈希表中的下标<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210710211024819.png\"/><br/> 代码如下：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AsciiCode</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">char</span> c <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token string\">\"lies\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> c<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//输出结果：</span>\n<span class=\"token comment\">//l:108</span>\n<span class=\"token comment\">//i:105</span>\n<span class=\"token comment\">//e:101</span>\n<span class=\"token comment\">//s:115</span>\n</code></pre>\n<ol><li>将 lies 算出来的ascii 码相加</li><li>然后除以10 取模（为什么取模不直接存储 429了 ）<br/> <strong>为什么取模不直接存储 429了？</strong><br/> //数组是采用一段连续的存储单元来存储数据的，那存lies 数据将如图：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210710212050117.png\"/><br/> 如果你要存lies 则需要300 个这样的内存空间，所以我们取模为10，算出来的值为 9，则节省了很多空间，我们取模的目的就是节省内存空间！</li></ol>\n<p><strong>如果我们取模会出现什么问题</strong><br/> 会出现hash 冲突(碰撞)的一个问题,</p>\n<p><strong>什么是hash冲突</strong></p>\n<ol><li>lies 的值通过ascii 码计算的总和为 429</li><li>foes 的值通过ascii 码计算的总和也为 429<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210710213505786.png\"/><br/> 两个单词取模后的值都是 9 ，则lies 会存在下标为9 的这个位置，foes 也存在下标为9 的这个位置，而数组存在同一个下标下面是会覆盖的（上面代码讲数组的时候Intergers[9]=400,会覆盖Intergers[9]=2 的值，最终Intergers[9] =400）,同样我们先存的是lies 后存的是foes,则lies<br/> 将会被覆盖，lies 和foes 是不同的key, 我们HashMap 是可以存这两个值的，为什么没有被覆盖了？这个地方就叫做哈希碰撞！</li></ol>\n<p><strong>Hash冲突怎么解决了</strong><br/> 我们用链表来解决这个问题, 链表是有一个指针的，我们可以让这个lies 指向这个foes,我们让foes 去匹配下标为9 的这个节点，如果匹配lies 不相等，则去匹配下一个节点foes,最终就会找到这个foes,这就是我们hash 算法底层的原理及解决冲突。</p>\n<hr/>\n<h2><a id=\"JDK7_HashMapHashMap_240\"></a>不调用JDK7 的HashMap,自己手动写一个HashMap</h2>\n<pre><code class=\"prism language-java\">\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token comment\">//Map&lt;String,String&gt; map = new HashMap&lt;&gt;();</span>\n        <span class=\"token class-name\">App</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"刘一\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"刘一\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"陈二\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"陈二\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Money\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"我是猴哥Money老师\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//System.out.println(map.get(\"Money\"));</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key:%s:::::::::::::::;::hash值:%s:::::::::::::::::::存储位置:%s\\r\\n\"</span><span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//输出结果:</span>\n<span class=\"token comment\">//    key:刘一:::::::::::::::;::hash值:671464:::::::::::::::::::存储位置:4</span>\n<span class=\"token comment\">//    key:陈二:::::::::::::::;::hash值:1212740:::::::::::::::::::存储位置:5</span>\n<span class=\"token comment\">//    key:张三:::::::::::::::;::hash值:774889:::::::::::::::::::存储位置:4</span>\n<span class=\"token comment\">//    key:李四:::::::::::::::;::hash值:842061:::::::::::::::::::存储位置:6</span>\n<span class=\"token comment\">//    key:王五:::::::::::::::;::hash值:937065:::::::::::::::::::存储位置:0</span>\n<span class=\"token comment\">//    key:Monkey:::::::::::::::;::hash值:-1984628749:::::::::::::::::::存储位置:4</span>\n</code></pre>\n<ul><li>我们多次运行，运行的结果还是这样，这就是hash 算法的一个特点：<mark>它是一个幂等性的一个算法</mark></li></ul>\n<p><strong>模拟我们是怎么存值的</strong><br/> 我们一组数据就是 key,value , 可以用string,int 来存吗？这里显然不能，我们一般存这种值一般用对象来存值，我在这里随便命名用个Object或者叫Entry 对象，其实我们还要存另外两个值？（hash和next），当发生hash 冲突的时候（存储位置4） next 可以指向下一个节点，hash 值是用来比较的,比较hashCode 值是否相等！</p>\n<ul><li>存取结构图如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210710221919953.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210710222131184.png\"/></li></ul>\n<p>上面的图形结构，我们就知道如何存数据了！</p>\n<p><strong>那我们该如何取数据了？</strong><br/> -假如我们要取‘刘一’ 的值</p>\n<ol><li>我们通过get(key) 方法获取数据的模，然后根据key,与hashCode 的值去比较下标为4 的key 和hashCode,查看是否相等，如果不相等我们通过next 方法比较下一个节点的数据，直到 key 与hashCode 对比的值都相等，此时，获取value的值就是当前key 所对应的value!</li></ol>\n<h2><a id=\"HashMap__284\"></a>HashMap 底层如何实现的了？我们用写源码的方式验证</h2>\n<p><strong>模拟java HashMap</strong></p>\n<blockquote>\n<p>定义一个Map 接口</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * 自己手动定义Map\n * @param &lt;K&gt;\n * @param &lt;V&gt;\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token class-name\">V</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> k<span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">V</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">interface</span>  <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token class-name\">K</span> <span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">V</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>定义一个实现Map 的HashMap</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">sun<span class=\"token punctuation\">.</span>management<span class=\"token punctuation\">.</span>snmp<span class=\"token punctuation\">.</span>jvmmib<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JvmRTInputArgsTableMeta</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 自己定义HashMap\n * @param &lt;K&gt;\n * @param &lt;V&gt;\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token comment\">//存储元素对象</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> table<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//扩容初始化</span>\n    <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//初始化存储元素对象大小</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>table <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 1.通过key hash 算法算出hash值,然后取模\n     * 2.取模后就有对应的index 数组下标,然后存储对象&lt;Entry&gt;\n     * 3.判断当前对象是否为空，如果空，直接存储，\n     * 4.如果不为空，我们就要用到next 链表\n     * 5.返回当前这个节点\n     * @param k\n     * @param v\n     * @return\n     */</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> k<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> entry <span class=\"token operator\">=</span> table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span>entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token comment\">//刘一，陈二，李四，王五 就开始存在这个entry,每个entry 对象则存储到了对应table 中</span>\n           table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token comment\">//冲突了，张三，Monkey</span>\n           table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">return</span> table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//HashMap 底层用到的是移位的操作，性能高很多 &gt;&gt;,我们这里就直接取模</span>\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span>k<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//Math.abs(index);</span>\n        <span class=\"token keyword\">return</span> index<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token operator\">?</span>index<span class=\"token operator\">:</span><span class=\"token operator\">-</span>index<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 1.通过 key 进行hash 运算，取模，找到数组对应的下标 index\n     * 2.判断当前对象是否为空,如果不为空\n     * 3.判断是否相等，如果不相等\n     * 4.判断next 是否为空，如果不为空，\n     * 5.再判断相等，知道相等为止，或者为空为止\n     * 6.然后返回\n     *\n     *\n     *\n     * @param k\n     * @return\n     */</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//如果没有存储数据那size 为0，也不用查了，直接返回null</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> entry <span class=\"token operator\">=</span> <span class=\"token function\">findValue</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//通过index 找打这个对象</span>\n        <span class=\"token keyword\">return</span> entry<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token operator\">?</span><span class=\"token keyword\">null</span><span class=\"token operator\">:</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     *\n     * @param entry\n     * @param k 查询刘一\n     * @return\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">findValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> entry<span class=\"token punctuation\">,</span><span class=\"token class-name\">K</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//存的可能是数值类型，也可能是字符串类型</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> k <span class=\"token operator\">==</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> entry<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//如果不相等，估计这个节点是个链表，判断它next 数据是否匹配</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//用到递归，在链表里面一直查询这个k,值是否相等</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">findValue</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{<!-- --></span>\n\n         <span class=\"token comment\">//存四个值</span>\n        <span class=\"token class-name\">K</span> k<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">V</span> v<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> next<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> k<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> v<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>k <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>v <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hash <span class=\"token operator\">=</span> hash<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">K</span> <span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> k<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>定义一个测试类</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Monkey\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"我是moneky老师\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"东山再起\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"东山再起是位好同学\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Monkey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"东山再起\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//输出结果:</span>\n<span class=\"token comment\">//我是moneky老师</span>\n<span class=\"token comment\">//东山再起是位好同学</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>查看到测试结果，我们就能看到HashMap ，是怎么存储的，和获取值的！</p>\n<p><strong>但是JDK8 用的是红黑树，为什么了？</strong><br/> 举个代码的例子</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>sun<span class=\"token punctuation\">.</span>xml<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>ws<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>wsdl<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WSDLOutput</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Monkey\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span><span class=\"token string\">\"我是moneky老师\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>可以看到这个map 的size 只有16，却存了很多的数据：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210711213105573.png\"/><br/> 容量不够，我们就只能把这个数据放到链表上，链表无线延长，这种hash冲突是十分严重的，而链表的特性是查询慢，而链表又无线延长，我们查询链表末端的数据，这样性能就很低了，<mark>所以JDK8 就用红黑树了！</mark></p>\n<p>总结：解决链表过长查询效率过低的问题</p>\n<hr/>\n<h2><a id=\"_485\"></a>什么情况下用红黑树?</h2>\n<p>前提条件<br/> 阈值 8</p>\n<blockquote>\n<p>HashMap 类下面有个这个：</p>\n</blockquote>\n<pre><code class=\"prism language-java\">  <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> TREEIFY_THRESHOLD <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>为什么要阈值 是8 了？</p>\n<p>因为红黑叔插入慢，他要判断小中大（也就是左边的小于右边的），而链表插入快，删除快，但是为什么是 8 不是 6了？<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210711215528473.png\"/></p>\n<p>我要去百度一下，有哪位大佬知道可以跟我讲下？</p>\n<p>觉得文章不错，扫码有红包，支持一下创作吧<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6c06fe85712e403cb71c5ff41c409fe8.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2021-07-11 22:16:37", "summary": "快速入门存储：方法查询方法代码如下刘一刘一陈二陈二张三张三李四李四王五王五我是猴哥老师输出结果：我是猴哥老师技术的本质，底层结构程序是等于我们的数据结构和算法在这里插入图片描述其实就是做存储的，做存储"}