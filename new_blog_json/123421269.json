{"blogid": "123421269", "writerAge": "码龄5年", "writerBlogNum": "11", "writerCollect": "42", "writerComment": "2", "writerFan": "6", "writerGrade": "3级", "writerIntegral": "432", "writerName": "阁下贵姓", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123421269.jpg", "writerRankTotal": "110648", "writerRankWeekly": "189429", "writerThumb": "9", "writerVisitNum": "32031", "blog_read_count": "2084", "blog_time": "已于 2022-03-11 14:58:05 修改", "blog_title": "数据权限、功能权限", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>权限思路：</p>\n<p>1.菜单的添加/修改。<br/> 2.组织结构的添加/修改。<br/> 3.岗位/角色的添加/修改，添加岗位/角色时，将菜单和按钮权限绑定到岗位/角色中（功能权限），再绑定菜单的同时，把每个菜单包含的组织机构关联到菜单中（数据权限）。</p>\n<p><img alt=\"\" height=\"203\" src=\"..\\..\\static\\image\\85f9b970367f4519ae258c932c3ffb08.png\" width=\"391\"/></p>\n<p> </p>\n<p></p>\n<pre><code class=\"language-php\">//id代表菜单id            \n//rangeType=1 代表自己id  2代表二级部门直属部门id  3代表组织机构id           \n            $params['permission'] = \"[{\"id\":1,\"dataRange\":{\"rangeId\":\"#\",\"rangeType\":1}},{\"id\":2,\"dataRange\":{\"rangeId\":\"@\",\"rangeType\":2}},{\"id\":3,\"dataRange\":{\"rangeId\":\"1,2,4\",\"rangeType\":3}}]\";\n\n            $permission = json_decode(html_entity_decode($params['permission']), true);\n            //提取菜单id\n            $menuItemIds = array_column($permission,'id');\n                //转为字符串\n            $params['menu_item_ids'] = implode(',',$menuItemIds);\n\n            //添加角色/岗位\n            $result[] = M('t_role')-&gt;add($params);\n            $roleId = M('t_role')-&gt;getLastInsID();\n\n            $roleMenuItem = [];\n            foreach ($params['permission'] as $k =&gt; $v) {\n                $roleMenuItem[$k]['role_id'] = $roleId;\n                $roleMenuItem[$k]['menu_item_id'] = $v['id'];\n\n                //本部门数据权限\n                if ($v['dataRange']['rangeType'] == 2) {\n                    $roleMenuItem[$k]['org_ids'] = $v['dataRange']['rangeId'];\n                    $roleMenuItem[$k]['org_department_ids'] = $newDepartId;\n                } elseif ($v['dataRange']['rangeType'] == 3) {\n                    //查询所有二级部门\n                    $departmentList = [];\n                    $where = [];\n                    $where['id'] = ['in', $v['dataRange']['rangeId']];\n                    $orgList = M('t_org')-&gt;field('id,org_level')-&gt;where($where)-&gt;select();\n                    foreach ($orgList as $item) {\n                        if ($item['org_level'] != 4) {\n                            $orgId = $item['id'];\n                            $childrenOrgList = M('t_org')-&gt;field('id')-&gt;where(\"FIND_IN_SET($orgId,path)\")-&gt;where(['org_level' =&gt; 4])-&gt;select();\n                            //所有二级部门id组\n                            $childrenOrgIds = array_column($childrenOrgList,'id');\n                            //合并\n                            if ($childrenOrgIds !== null) {\n                                $departmentList = array_merge($departmentList,$childrenOrgIds);\n                            }\n                        } else {\n                            $departmentList[] = $item['id'];\n                        }\n                    }\n\n                    //去重\n                    $departmentList = array_unique($departmentList);\n                    //转为字符串\n                    $departmentStr = implode(',', $departmentList);\n\n                    $roleMenuItem[$k]['org_ids'] = $v['dataRange']['rangeId'];\n                    $roleMenuItem[$k]['org_department_ids'] = $departmentStr;\n                } else {\n                    //本人数据权限\n                    $roleMenuItem[$k]['org_ids'] = $v['dataRange']['rangeId'];\n                    $roleMenuItem[$k]['org_department_ids'] = $userId;\n                }\n            }\n\n            if ($roleMenuItem) {\n                $result[] = M('t_role_menu_item')-&gt;addAll($roleMenuItem);\n            }</code></pre>\n<p></p>\n<p>4.菜单权限：当用户绑定岗位/角色时，根据岗位/角色中的拥有的菜单来展示当前登录用户的菜单列表和列表中所拥有的按钮（添加，编辑，删除，导出等）权限。</p>\n<p>5.数据域权限：根据用户岗位/角色获取到所有的菜单，然后根据每个列表菜单获取拥有的组织结构，此处有三种情况：</p>\n<p>    5-1.当用户菜单的组织机构为#时，代表自己，也就是这个列表只显示自己的数据。<br/>     5-2.当用户菜单的组织机构为@时，代表自己的二级部门，也就是这个列表显示自己部门所有的数据。<br/>     5-3.当用户菜单的组织机构为所选的二级部门id时，也就是这个列表显示选择部门所有的数据。</p>\n<p>6.所有用到数据权限的表都需要加上create_uid(添加人id) 和 org_id(添加人二级部门id，直属部门id)，例如：订单表，客户表等。</p>\n<p>使用的表：</p>\n<pre><code class=\"language-sql\">CREATE TABLE `t_user` (\n  `id` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,\n  `login_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '用户登录名',\n  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '用户名称',\n  `org_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '二级部门id',\n  `new_post_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '岗位id',\n  `role_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '角色id',\n  `password` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '登录密码',\n  PRIMARY KEY (`id`) USING BTREE,\n  KEY `index_org_id` (`org_id`) USING BTREE,\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 ROW_FORMAT=DYNAMIC COMMENT='系统用户表';</code></pre>\n<pre><code class=\"language-sql\">CREATE TABLE `t_role` (\n  `id` int unsigned NOT NULL AUTO_INCREMENT,\n  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '角色/岗位名称',\n  `type` char(5) NOT NULL COMMENT '权限类型:post岗位,role角色',\n  `menu_item_ids` longtext CHARACTER SET utf8 COLLATE utf8_general_ci COMMENT '菜单id',\n  `memo` text COMMENT '备注',\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb3 ROW_FORMAT=DYNAMIC COMMENT='角色/岗位表';</code></pre>\n<pre><code class=\"language-sql\">CREATE TABLE `t_menu_item` (\n  `id` int NOT NULL AUTO_INCREMENT,\n  `caption` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT '' COMMENT '菜单标题',\n  `router` char(30) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT '' COMMENT '菜单路由',\n  `full_router` char(100) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT '' COMMENT '菜单全路由',\n  `fid` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT '' COMMENT '功能id',\n  `parent_id` int DEFAULT '0' COMMENT '上级菜单的id',\n  `is_has_sub_menu` tinyint DEFAULT '1' COMMENT '是否有下级菜单  0=否 1=是',\n  `is_button` tinyint DEFAULT '0' COMMENT '是否是按钮  0=否 1=是',\n  `show_order` int DEFAULT '0' COMMENT '菜单显示次序',\n  `show_status` tinyint(1) DEFAULT '1' COMMENT '显示:1是 0否',\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE=InnoDB AUTO_INCREMENT=10008 DEFAULT CHARSET=utf8mb3 ROW_FORMAT=DYNAMIC COMMENT='主菜单';</code></pre>\n<p> t_role_menu_item：角色下包含多少菜单，每个菜单包含那些组织机构</p>\n<pre><code class=\"language-sql\">CREATE TABLE `t_role_menu_item` (\n  `role_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '角色/岗位id',\n  `menu_item_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '菜单id',\n  `org_ids` longtext COMMENT '组织机构id组 #代表自己  @代表自己部门 其他情况代表组织机构id',\n  `org_department_ids` longtext COMMENT '组织机构二级部门id组或自己用户id'\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 ROW_FORMAT=DYNAMIC COMMENT='角色拥有的菜单';</code></pre>\n<pre><code class=\"language-sql\">CREATE TABLE `t_org` (\n  `id` int unsigned NOT NULL AUTO_INCREMENT,\n  `full_name` varchar(1000) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '组织机构全路径名称',\n  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '组织机构名称',\n  `parent_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '上级组织机构的id',\n  `org_level` tinyint NOT NULL DEFAULT '1' COMMENT '组织机构等级 1=集团 2=公司 3=部门 4=二级部门',\n  `path` longtext COMMENT '所有上级id',\n  `show_status` tinyint DEFAULT '1' COMMENT '展示状态 1=展示 0=隐藏',\n  PRIMARY KEY (`id`) USING BTREE,\n  KEY `index_org_code` (`org_code`),\n  KEY `index_parent_id` (`parent_id`),\n  KEY `org_level` (`org_level`)\n) ENGINE=InnoDB AUTO_INCREMENT=42 DEFAULT CHARSET=utf8mb3 ROW_FORMAT=DYNAMIC COMMENT='组织机构';</code></pre>\n<p> t_org_post：组织机构下包含那些岗位：</p>\n<pre><code class=\"language-sql\">CREATE TABLE `t_org_post` (\n  `id` int unsigned NOT NULL AUTO_INCREMENT,\n  `org_id` varchar(255) NOT NULL COMMENT '组织机构id',\n  `role_id` varchar(255) NOT NULL COMMENT '岗位权限id',\n  PRIMARY KEY (`id`),\n  KEY `index_ids` (`org_id`,`role_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=48 DEFAULT CHARSET=utf8mb3 COMMENT='组织机构岗位关联表';</code></pre>\n<p>根据用户岗位/角色权限获取菜单列表（功能权限）：</p>\n<pre><code class=\"language-php\">/**\n     * 登录后获取用户菜单列表\n     */\n    public function getUserMenuItem($params)\n    {\n\n        $userId = $params['userId'];\n\n        //系统管理员拥有所有菜单权限\n//        if ($userId == DemoConst::ADMIN_USER_ID) {\n//            //根据菜单id获取菜单列表\n//            $menuItemList = $this-&gt;_getMenuItem('');\n//            return $menuItemList;\n//        }\n\n        //根据用户id查询 用户拥有的角色/岗位\n        $roleList = M('t_role_user')-&gt;field('role_id')-&gt;where(['user_id' =&gt; $userId])-&gt;select();\n        if (!$roleList) {\n            return [];\n        }\n\n        //提取所有角色/岗位id\n        $roleIds = array_column($roleList, 'role_id');\n\n        //根据角色获取 角色拥有的菜单\n        $where = [];\n        $where['role_id'] = ['in', $roleIds];\n        $roleMenuItem = M('t_role_menu_item')-&gt;field('menu_item_id')-&gt;where($where)-&gt;select();\n        if (!$roleMenuItem) {\n            return [];\n        }\n\n        //提取所有菜单id\n        $roleMenuItemIds = array_column($roleMenuItem, 'menu_item_id');\n\n        //菜单去重\n        $roleMenuItemIds = array_unique($roleMenuItemIds);\n\n        //根据菜单id获取菜单列表\n        $menuItemList = $this-&gt;_getMenuItem($roleMenuItemIds);\n\n        return $menuItemList;\n    }\n\n\n    /**\n     * 根据菜单id获取菜单列表\n     */\n    public function _getMenuItem($menuItemIds)\n    {\n        //获取一级菜单\n        $where = [];\n        $where['parent_id'] = 0;\n        $where['show_status'] = 1;\n        if ($menuItemIds) {\n            $where['id'] = ['in', $menuItemIds];\n        }\n        $menu = M('t_menu_item')-&gt;where($where)-&gt;order('show_order asc')-&gt;select();\n\n        $index = 0;\n        $data = [];\n        foreach ($menu as $item) {\n            $children = $this-&gt;_mainMenuItemsInternal($item['id'], $menuItemIds);\n            if (!empty($children)) {\n                $data[$index]['id'] = $item['id'];\n                $data[$index]['caption'] = $item['caption'];\n                $data[$index]['router'] = $item['router'];\n                $data[$index]['full_router'] = $item['full_router'];\n                $data[$index]['is_has_sub_menu'] = $item['is_has_sub_menu'];\n                $data[$index]['is_button'] = $item['is_button'];\n                $data[$index]['fid'] = trim($item['fid']);\n                $data[$index]['parentId'] = $item['parent_id'];\n                $data[$index]['createUid'] = $item['create_uid'];\n                $data[$index]['createTime'] = $item['create_time'];\n                $data[$index][\"children\"] = $children;\n                $index++;\n            } else {\n                $data[$index]['id'] = $item['id'];\n                $data[$index]['caption'] = $item['caption'];\n                $data[$index]['router'] = $item['router'];\n                $data[$index]['full_router'] = $item['full_router'];\n                $data[$index]['is_has_sub_menu'] = $item['is_has_sub_menu'];\n                $data[$index]['is_button'] = $item['is_button'];\n                $data[$index]['fid'] = trim($item['fid']);\n                $data[$index]['parentId'] = $item['parent_id'];\n                $data[$index]['createUid'] = $item['create_uid'];\n                $data[$index]['createTime'] = $item['create_time'];\n                $index++;\n            }\n        }\n        return $data;\n    }\n\n\n    /**\n     * 获取子菜单\n     * @param $parentId\n     * @param $db\n     * @return array\n     */\n    private function _mainMenuItemsInternal($parentId, $menuItemIds)\n    {\n        $result = array();\n        $where = [];\n        $where['parent_id'] = $parentId;\n        $where['show_status'] = 1;\n        //$where['is_button'] = 0;\n        if ($menuItemIds) {\n            $where['id'] = ['in', $menuItemIds];\n        }\n        $menu = M('t_menu_item')-&gt;where($where)-&gt;order('show_order asc')-&gt;select();\n        // 第二级菜单\n        $index = 0;\n        foreach ($menu as $item) {\n            //递归调用获取子菜单\n            $children = $this-&gt;_mainMenuItemsInternal($item['id'], $menuItemIds);\n            $result[$index][\"id\"] = $item[\"id\"];\n            $result[$index][\"caption\"] = $item[\"caption\"];\n            $result[$index][\"router\"] = $item[\"router\"];\n            $result[$index]['full_router'] = $item['full_router'];\n            $result[$index]['is_has_sub_menu'] = $item['is_has_sub_menu'];\n            $result[$index]['is_button'] = $item['is_button'];\n            $result[$index][\"fid\"] = trim($item[\"fid\"]);\n            $result[$index][\"parentId\"] = $item[\"parent_id\"];\n            $result[$index][\"createUid\"] = $item[\"create_uid\"];\n            $result[$index][\"createTime\"] = $item[\"create_time\"];\n            $result[$index][\"children\"] = $children;\n            $index++;\n        }\n        return $result;\n    }</code></pre>\n<p> 根据用户岗位/角色权限获取列表数据（数据权限）：</p>\n<pre><code class=\"language-php\">/**\n     * 获取用户当前菜单数据域\n     * @param string $userId 用户id\n     * @param string $fid 菜单id\n     */\n    public static function getUserDataRange($userId, $fid)\n    {\n        //当同时存在部门数据域和个人数据域时 使用 or 连接sql语句\n        /*\n         *\n            $dataOrg = DataOrgDAO::getUserDataRange('0E33BBD6-A024-11EC-B8B1-00163E184054',601);\n            TP中写法：\n\n            数据域条件\n            $whereA = [];\n            $whereA['create_uid'] = $dataOrg['create_uid'];\n            $whereA['org_id'] = ['in',$dataOrg['org_id']];\n            $whereA['_logic'] = 'or';\n\n            列表原有条件\n            $where = [];\n            $where['ref'] = '1';\n            $where['customer_id'] = '2';\n            $where['_complex'] = $whereA;\n\n            M('t_offer_bill')-&gt;where($where)-&gt;select();\n\n\n            原生sql中写法：\n            $sql .= \" and (create_uid = '%s' or org_id in ({$dataOrg['org_id_1']})) \";\n            $queryParam[] = \"{$dataOrg['create_uid']}\";\n\n         * */\n\n        //所有列表都有个人数据域条件\n        $result['create_uid'] = $userId;\n        $result['org_id'] = '';\n\n        //根据用户id查询 用户拥有的角色/岗位\n        $roleList = M('t_role_user')-&gt;field('role_id')-&gt;where(['user_id' =&gt; $userId])-&gt;select();\n        if (!$roleList) {\n            return $result;\n        }\n\n        //提取所有角色/岗位id\n        $roleIds = array_column($roleList, 'role_id');\n\n        //根据角色获取 角色拥有的数据域\n        $where = [];\n        $where['menu_item_id'] = $fid;\n        $where['org_ids'] = ['neq', '#'];\n        $where['role_id'] = ['in', $roleIds];\n        $roleMenuItem = M('t_role_menu_item')-&gt;field('org_department_ids')-&gt;where($where)-&gt;select();\n        if (!$roleMenuItem) {\n            return $result;\n        }\n\n        //提取所有二级部门id\n        $orgIds = array_column($roleMenuItem,'org_department_ids');\n\n        //去重\n        $orgIds = array_unique($orgIds);\n\n        //转为字符串\n        $orgIdsStr = implode(',',$orgIds);\n\n        //转为数组\n        $orgIdsArr = explode(',',$orgIdsStr);\n\n        $orgIds_1 = '';\n        //拼接字符串\n        foreach ($orgIdsArr as $v) {\n            $orgIds_1 .= \",'\".$v.\"'\";\n        }\n\n        $orgIds_1 = trim($orgIds_1,',');\n\n        //TP框架使用  格式为：1,2,3,4,5,6,7  例如：  $where['org_id'] = ['in',$orgIdsStr]\n        $result['org_id'] = $orgIdsStr;\n        //原生sql语句使用  格式为：'1','2','3','4','5','6','7' 例如：  $sql .= \" and org_id in ({$orgIds_1}) \";\n        $result['org_id_1'] = $orgIds_1;\n\n        return $result;\n    }</code></pre>\n<p></p>\n</div>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 1, "time": "2022-03-11 14:58:05", "summary": "权限思路：菜单的添加修改。组织结构的添加修改。岗位角色的添加修改，添加岗位角色时，将菜单和按钮权限绑定到岗位角色中功能权限，再绑定菜单的同时，把每个菜单包含的组织机构关联到菜单中数据权限。代表菜单代表"}