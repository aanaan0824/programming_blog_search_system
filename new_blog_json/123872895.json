{"blogid": "123872895", "writerAge": "码龄4年", "writerBlogNum": "77", "writerCollect": "354", "writerComment": "45", "writerFan": "37", "writerGrade": "4级", "writerIntegral": "1409", "writerName": "托尼沙滩裤", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123872895.jpg", "writerRankTotal": "15449", "writerRankWeekly": "161472", "writerThumb": "119", "writerVisitNum": "136241", "blog_read_count": "6050", "blog_time": "已于 2022-03-31 15:20:44 修改", "blog_title": "前端技术实现文件预览（word、excel、pdf、ppt、mp4、图片、文本）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<div class=\"rich_media_content\" id=\"js_content\">\n<h2>前言</h2>\n<p>因为业务需要，很多文件需要在前端实现预览，今天就来了解一下吧。</p>\n<p>Demo地址[1]：https://zhuye1993.github.io/file-view/dist/index.html</p>\n<h2>实现方案</h2>\n<p>找了网上的实现方案，效果看起来不错，放在下面的表格里，里面有一些是可以直接通过npm在vue中引入使用。</p>\n<section>\n<table><thead><tr><th>文档格式</th><th>老的开源组件</th><th>替代开源组件</th></tr></thead><tbody><tr><td>word（docx）</td><td>mammoth</td><td>docx-preview(npm)</td></tr><tr><td>powerpoint（pptx）</td><td>pptxjs</td><td>pptxjs改造开发</td></tr><tr><td>excel（xlsx）</td><td>sheetjs、handsontable</td><td>exceljs(npm)、handsontable(npm)(npm)</td></tr><tr><td>pdf（pdf）</td><td>pdfjs</td><td>pdfjs(npm)</td></tr><tr><td>图片</td><td>jquery.verySimpleImageViewer</td><td>v-viewer(npm)</td></tr></tbody></table>\n</section>\n<h2>docx文件实现前端预览</h2>\n<h3>代码实现</h3>\n<ul class=\"list-paddingleft-1\"><li>\n<section>\n    首先npm i docx-preview\n   </section></li><li>\n<section>\n    引入renderAsync方法\n   </section></li><li>\n<section>\n    将blob数据流传入方法中，渲染word文档\n   </section></li></ul>\n<pre><code>import { defaultOptions, renderAsync } from \"docx-preview\";<br/>renderAsync(buffer, document.getElementById(\"container\"), null,<br/>options: {<!-- --><br/>       className: string = \"docx\", // 默认和文档样式类的类名/前缀<br/>       inWrapper: boolean = true, // 启用围绕文档内容渲染包装器<br/>       ignoreWidth: boolean = false, // 禁止页面渲染宽度<br/>       ignoreHeight: boolean = false, // 禁止页面渲染高度<br/>       ignoreFonts: boolean = false, // 禁止字体渲染<br/>       breakPages: boolean = true, // 在分页符上启用分页<br/>       ignoreLastRenderedPageBreak: boolean = true,//禁用lastRenderedPageBreak元素的分页<br/>       experimental: boolean = false, //启用实验性功能（制表符停止计算）<br/>       trimXmlDeclaration: boolean = true, //如果为真，xml声明将在解析之前从xml文档中删除<br/>       debug: boolean = false, // 启用额外的日志记录<br/>   }<br/>);<br/><br/>复制代码<br/></code></pre>\n<h3>实现效果</h3>\n</div>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6b0ef416f8794ee883d148cc4f4ff7c4.png\"/></p>\n<h2>pdf实现前端预览</h2>\n<h3>代码实现</h3>\n<ul class=\"list-paddingleft-1\"><li>\n<section>\n   首先npm i pdfjs-dist\n  </section></li><li>\n<section>\n   设置PDFJS.GlobalWorkerOptions.workerSrc的地址\n  </section></li><li>\n<section>\n   通过PDFJS.getDocument处理pdf数据，返回一个对象pdfDoc\n  </section></li><li>\n<section>\n   通过pdfDoc.getPage单独获取第1页的数据\n  </section></li><li>\n<section>\n   创建一个dom元素，设置元素的画布属性\n  </section></li><li>\n<section>\n   通过page.render方法，将数据渲染到画布上\n  </section></li></ul>\n<pre><code>import * as PDFJS from \"pdfjs-dist/legacy/build/pdf\";<br/>// 设置pdf.worker.js文件的引入地址<br/>PDFJS.GlobalWorkerOptions.workerSrc = require(\"pdfjs-dist/legacy/build/pdf.worker.entry.js\");<br/>// data是一个ArrayBuffer格式，也是一个buffer流的数据<br/>PDFJS.getDocument(data).promise.then(pdfDoc=&gt;{<!-- --><br/>    const numPages = pdfDoc.numPages; // pdf的总页数<br/>    // 获取第1页的数据<br/>    pdfDoc.getPage(1).then(page =&gt;{<!-- --><br/>     // 设置canvas相关的属性<br/>     const canvas = document.getElementById(\"the_canvas\");<br/>     const ctx = canvas.getContext(\"2d\");<br/>     const dpr = window.devicePixelRatio || 1;<br/>     const bsr =<br/>       ctx.webkitBackingStorePixelRatio ||<br/>       ctx.mozBackingStorePixelRatio ||<br/>       ctx.msBackingStorePixelRatio ||<br/>       ctx.oBackingStorePixelRatio ||<br/>       ctx.backingStorePixelRatio ||<br/>       1;<br/>     const ratio = dpr / bsr;<br/>     const viewport = page.getViewport({ scale: 1 });<br/>     canvas.width = viewport.width * ratio;<br/>     canvas.height = viewport.height * ratio;<br/>     canvas.style.width = viewport.width + \"px\";<br/>     canvas.style.height = viewport.height + \"px\";<br/>     ctx.setTransform(ratio, 0, 0, ratio, 0, 0);<br/>     const renderContext = {<!-- --><br/>       canvasContext: ctx,<br/>       viewport: viewport,<br/>     };<br/>     // 数据渲染到canvas画布上<br/>     page.render(renderContext);<br/>    })<br/>})<br/><br/>复制代码<br/></code></pre>\n<h3>实现效果</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fb0a8d7de5d84371907fd3e855483935.png\"/></p>\n<h2>excel实现前端预览</h2>\n<h3>代码实现</h3>\n<ul class=\"list-paddingleft-1\"><li>\n<section>\n   下载exceljs、handsontable的库\n  </section></li><li>\n<section>\n   通过exceljs读取到文件的数据\n  </section></li><li>\n<section>\n   通过workbook.getWorksheet方法获取到每一个工作表的数据，将数据处理成一个二维数组的数据\n  </section></li><li>\n<section>\n   引入@handsontable/vue的组件HotTable\n  </section></li><li>\n<section>\n   通过settings属性，将一些配置参数和二维数组数据传入组件，渲染成excel样式，实现预览\n  </section></li></ul>\n<pre><code>// 加载excel的数据<br/>（new ExcelJS.Workbook().xlsx.load(buffer)).then(workbook=&gt;{<!-- --><br/>   // 获取excel的第一页的数据<br/>   const ws = workbook.getWorksheet(1);<br/>   // 获取每一行的数据<br/>   const data = ws.getRows(1, ws.actualRowCount);<br/> })<br/> <br/> <br/>// 渲染页面<br/>import { HotTable } from \"@handsontable/vue\";<br/>&lt;hot-table  :settings=\"hotSettings\"&gt;&lt;/hot-table&gt;<br/>hotSettings = {<!-- --><br/>   language: \"zh-CN\",<br/>   readOnly: true,<br/>   data: this.data,<br/>   cell: this.cell,<br/>   mergeCells: this.merge,<br/>   colHeaders: true,<br/>   rowHeaders: true,<br/>   height: \"calc(100vh - 107px)\",<br/>   // contextMenu: true,<br/>   // manualRowMove: true,<br/>   // 关闭外部点击取消选中时间的行为<br/>   outsideClickDeselects: false,<br/>   // fillHandle: {<!-- --><br/>   //   direction: 'vertical',<br/>   //   autoInsertRow: true<br/>   // },<br/>   // afterSelectionEnd: this.afterSelectionEnd,<br/>   // bindRowsWithHeaders: 'strict',<br/>   licenseKey: \"non-commercial-and-evaluation\"<br/>}<br/>复制代码<br/></code></pre>\n<h3>实现效果</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2159683bf01b4f39a1ddb1e38729a042.png\"/></p>\n<h2>pptx的前端预览</h2>\n<p>主要是通过jszip库，加载二进制文件，再经过一些列处理处理转换实现预览效果，实现起来比较麻烦，就不贴代码了，感兴趣的可以下载代码查看。</p>\n<h3>实现效果</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7867fcf2b6954c1d9bcd0e33d490b8e0.png\"/><br/> 最后：https://github.com/zhuye1993/file-view</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-31 15:20:44", "summary": "前言因为业务需要，很多文件需要在前端实现预览，今天就来了解一下吧。地址：实现方案找了网上的实现方案，效果看起来不错，放在下面的表格里，里面有一些是可以直接通过在中引入使用。文档格式老的开源组件替代开源"}