{"blogid": "124166228", "writerAge": "码龄4年", "writerBlogNum": "9", "writerCollect": "17", "writerComment": "3", "writerFan": "2", "writerGrade": "1级", "writerIntegral": "95", "writerName": "988yun", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124166228.jpg", "writerRankTotal": "134864", "writerRankWeekly": "985357", "writerThumb": "2", "writerVisitNum": "16607", "blog_read_count": "4693", "blog_time": "已于 2022-04-30 10:36:58 修改", "blog_title": "C语言学习之for循环", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>一、for 循环基本结构形式：</p>\n<p>基本结构：</p>\n<pre><code class=\"language-cpp\">for(表达式1;表达式2;表达式3){语句块}</code></pre>\n<p><img alt=\"\" class=\"right\" height=\"321\" src=\"..\\..\\static\\image\\a786eb44f61a4fee82866524c1e2c35b.png\" width=\"252\"/>     进入for循环，①首先执行<span style=\"color:#be191c;\">表达式1，表达式1</span>是也是初始化语句。②接着执行<span style=\"color:#4da8ee;\">表达式2</span>，如果<span style=\"color:#4da8ee;\">表达式2</span>的条件是真（或说<span style=\"color:#4da8ee;\">表达式2</span>条件成立）就执行for循环内部的语句块，语句块执行完成后自动执行<span style=\"color:#ed7976;\">表达式3</span>（一般是是自增或自减）③<span style=\"color:#ed7976;\">表达式3</span>执行完成后，返回判断<span style=\"color:#4da8ee;\">表达式2</span>的条件是否成立。如果是真继续第②步的操作，如果不成立则跳出循环体。for循环如果不带{}那么会执行最近的语句块。</p>\n<p></p>\n<p>例： 求1~100整数之间所有数的和</p>\n<pre><code class=\"language-cpp\">#include&lt;stdio.h&gt;\nvoid main()\n{\n\tint i, sum=0;\t  //初始化i和sum \nfor(i=1;i&lt;=100;i++){  //注意for内部的分号 \n\tsum=sum+i;\n\t}\n\tprintf(\"%d\",sum);\n}</code></pre>\n<p>二、for循环二层嵌套</p>\n<pre><code class=\"language-cpp\">#include&lt;stdio.h&gt;\nvoid main()//打印乘法口诀表 ，for循环的嵌套 \n{\n/* 精典的99乘法口诀表控制程序*/ \nint i,j;\t\t\t\t\t//初始化变量i、j -----------------------------①\nfor(i=1;i&lt;=9;i++){\t\t\t//控制显示列，(外圈循环的次数 )----------------②\n\t\tfor(j=1;j&lt;=i;j++){\t//控制每一行显示的个数 可以给本行的i改成9试试看--③\n\t\t\tprintf(\"%d*%d=%d \\t\",i,j,j*i); //打印算式---------------------④\n\t\t}\n\t\tprintf(\"\\n\"); \t\t                //打印外层的换行---------------⑤\n\t}\n}\n</code></pre>\n<p>上面一个例子是99乘法口诀表：</p>\n<p>①首先初始化变量i和j</p>\n<p>②控制外层的循环，首先给i赋值为1，i&lt;=9成立，执行③的for循环体</p>\n<p>③语句（控制每一行乘法的个数，执行j次循环）第1次循环时(i=1)那么j也是1,就执行1次④printf函数，然后跳出③的for循环体，执行⑤换行程序；------第9次循环时(i=9)那么j也是9,就执行9次④printf函数，然后跳出③的for循环体，执行⑤换行程序；</p>\n<p>可以给i和j换成不同值测试，看看打印出的效果如下图</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\e5bcddd0ca3c4e749532e4046085fa1f.png\"/></p>\n<p> for循环可以多层嵌套，但是工作中以二层嵌套居多，多层嵌套程序的可读性变差。可以将二层嵌套分解为单层嵌套：先是外层for循环②执行一次，内层for循环③执行j次，执行完成后跳出内层循环；外层循环执行第二次，内存循环执行j次，执行完成后跳出内层循环，重复此操作；直到外层循环i次执行完毕，跳出整个大循环 </p>\n<p style=\"text-align:center;\">嵌套图解</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\6b81ee02af36453baa4a8f4c1fa0cea9.png\"/></p>\n<p> 例1：求出 1！+2！+3！+…+n！的和。</p>\n<pre><code class=\"language-cpp\">#include&lt;stdio.h&gt;\nvoid main(){\n/*1、求出 1！+2！+3！+…+n！的和  n！=1*2*3*/\nint n ; //存储1!+2!+3!+…+n!中n的值\nint i, j; //循环变量\nint y = 1;//用于计算每个数的阶乘初始化 \nunsigned long sum=0;\nprintf(\"请输入n的值:\");\nscanf(\"%d\", &amp;n); \nfor(i=1;i&lt;=n;i++){\t\t\t//控制阶层的加法，\n\t\tfor(j=1;j&lt;=i;j++){\t//计算单个阶层 n! （n!=n*(n-1)） \n\t\t\ty=y*j;\n\t\t\tprintf(\"内循环 %d 次 \\t\",y); \n\t\t}\n\tsum=sum+y;\n\ty=1;      //这句很关键，为下一个循环初始化y \n\tprintf(\"外循环 %d 次和是 %d \\n\",i,sum); \t\n\t}\n}\n</code></pre>\n<p> 输出结果</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\e7df2df7fa914afa8d2f80ef0a8ce5e4.png\"/></p>\n<p></p>\n<p>友情提示：技术交流及代码分享QQ群号码：255864236</p>\n<p></p>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-04-30 10:36:58", "summary": "一、循环基本结构形式：基本结构：表达式表达式表达式语句块进入循环，首先执行表达式，表达式是也是初始化语句。接着执行表达式，如果表达式的条件是真或说表达式条件成立就执行循环内部的语句块，语句块执行完成后"}