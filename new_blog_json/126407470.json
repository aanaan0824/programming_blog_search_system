{"blogid": "126407470", "writerAge": "码龄5年", "writerBlogNum": "1171", "writerCollect": "4274", "writerComment": "1013", "writerFan": "99890", "writerGrade": "8级", "writerIntegral": "33420", "writerName": "IT利刃出鞘", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126407470.jpg", "writerRankTotal": "155", "writerRankWeekly": "181", "writerThumb": "16623", "writerVisitNum": "2010142", "blog_read_count": "13", "blog_time": "于 2022-09-06 18:29:44 发布", "blog_title": "ElasticSearch--分片和副本--原理", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>原文网址：<a href=\"https://knife.blog.csdn.net/article/details/126407470\" title=\"ElasticSearch--分片和副本--原理_IT利刃出鞘的博客-CSDN博客\">ElasticSearch--分片和副本--原理_IT利刃出鞘的博客-CSDN博客</a></p>\n<h1>简介</h1>\n<p><strong>说明</strong></p>\n<p>        本文介绍ES的分片和副本的原理。</p>\n<h1><strong>什么是分片</strong></h1>\n<p>        Elasticsearch集群允许系统存储的数据量超过单机容量，这是通过shard实现的。在一个索引index中，数据（document）被分片处理（sharding）到多个分片上。也就是说：每个分片都保存了全部数据中的一部分。</p>\n<p>        一个分片是一个 Lucene 的实例，它本身就是一个完整的搜索引擎。文档被存储到分片内，但应用程序直接与索引而不是与分片进行交互。</p>\n<h1><strong>什么是副本</strong></h1>\n<p><strong>说明</strong></p>\n<p>        为了解决访问压力过大时单机无法处理所有请求的问题，Elasticsearch集群引入了副本策略replica。副本策略对index中的每个分片创建冗余的副本。</p>\n<p>副本的作用如下：</p>\n<p>1. 提高系统容错性</p>\n<p>        当分片所在的机器宕机时，Elasticsearch可以使用其副本进行恢复，从而避免数据丢失。</p>\n<p>2. 提高ES查询效率</p>\n<p>        处理查询时，ES会把副本分片和主分片公平对待，将查询请求负载均衡到副本分片和主分片。</p>\n<p><strong>副本分片是越多越好吗？</strong></p>\n<p>答案当然是 no ，原因有以下两点：</p>\n<p>（1）多个 replica 可以提升搜索操作的吞吐量和性能，但是如果只是在相同节点数目的集群上增加更多的副本分片并不能提高性能，因为每个分片从节点上获得的资源会变少，这个时候你就需要增加更多的硬件资源来提升吞吐量。</p>\n<p>（2）更多的副本分片数提高了数据冗余量，保证了数据的完整性，但是根据上边主副分片之间的交互原理可知，分片间的数据同步会占用一定的网络带宽，影响效率，所以索引的分片数和副本数也不是越多越好。</p>\n<h1>设置分片与副本的方法</h1>\n<p>创建索引的命令：</p>\n<pre><code>PUT /my_temp_index\n{\n    \"settings\": {\n        \"number_of_shards\" :   5,\n        \"number_of_replicas\" : 1\n    }\n}</code></pre>\n<ul><li>number_of_shards \n  <ul><li>每个索引的主分片数，默认值是 5 。</li><li>这个配置在索引创建后不能修改。这里和索引分片的算法有关，因为索引通过取模算法判断分到哪个分片，如果改变了主分片数就无法正常查询之前的索引。</li></ul></li><li>number_of_replicas \n  <ul><li>每个主分片的副本数，默认值是 1 。</li><li>这个配置可以修改。</li></ul></li></ul>\n<h1>分片示例</h1>\n<p><strong>示例1：启动2个ES节点。创建5个分片，1个副本</strong></p>\n<p>结果如下：</p>\n<p><img alt=\"\" height=\"316\" src=\"..\\..\\static\\image\\74210712577142e4b3299eb739d293b1.png\" width=\"954\"/></p>\n<p>也就是：</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\806747e693fc449787b425dd325ac8a8.png\"/></p>\n<p>         上图中，黄色的代表主分片，绿色的是副本。可以发现，分片与其副本不在同一个节点内。这是非常合理的，因为副本本来就是主分片的备胎，当主分片节点挂了，另外一个节点的副本将会充当主分片，如果它们在同一个节点内，副本将发挥不到作用。</p>\n<p><strong>示例2：启动3个ES节点。创建5个分片，1个副本</strong></p>\n<p class=\"img-center\"><img alt=\"\" height=\"387\" src=\"..\\..\\static\\image\\43292075f742469b9128383f0be06ff7.png\" width=\"1042\"/></p>\n<h1>分片的路由原理</h1>\n<p>见 ：<a href=\"https://knife.blog.csdn.net/article/details/126426450\" title=\"ElasticSearch--分片的路由原理_IT利刃出鞘的博客-CSDN博客\">ElasticSearch--分片的路由原理_IT利刃出鞘的博客-CSDN博客</a></p>\n<p></p>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-06 18:29:44", "summary": "原文网址：分片和副本原理利刃出鞘的博客博客分片和副本原理利刃出鞘的博客博客简介说明本文介绍的分片和副本的原理。什么是分片集群允许系统存储的数据量超过单机容量，这是通过实现的。在一个索引中，数据被分片处"}