{"blogid": "124348814", "writerAge": "码龄5年", "writerBlogNum": "198", "writerCollect": "884", "writerComment": "42", "writerFan": "462", "writerGrade": "5级", "writerIntegral": "2191", "writerName": "明如正午", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124348814.jpg", "writerRankTotal": "8850", "writerRankWeekly": "3509", "writerThumb": "156", "writerVisitNum": "161885", "blog_read_count": "2584", "blog_time": "已于 2022-04-22 19:01:16 修改", "blog_title": "C#【必备技能篇】VS2019 使用C/C++ 生成DLL 文件，并用 C/C++、C#调用DLL", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_7\">前言</a></li><li><a href=\"#dll_15\">一、生成dll</a></li><li><ul><li><a href=\"#CDLL_16\">新建项目-C++-动态链接库(DLL)</a></li><li><a href=\"#CC_19\">项目-右键-属性-C/C++-预编译头：不使用预编译头。</a></li><li><a href=\"#CCC_22\">项目-右键-属性-C/C++-高级：编译为：C。（也可以不更改，默认就好）</a></li><li><a href=\"#chch_26\">删除原有所有.c、.h文件，新建.c、.h文件</a></li></ul>\n</li><li><a href=\"#CCdll_77\">二、C/C++调用dll</a></li><li><ul><li><a href=\"#DLLDebug_78\">将生成的DLL文件拷贝到项目目录的Debug下</a></li><li><a href=\"#VCdlllib_81\">项目右键-属性-VC++目录-库目录-将.dll和.lib所在文件夹目录写入库目录中</a></li><li><a href=\"#C_87\">C++源代码:</a></li><li><a href=\"#_135\">运行结果:</a></li></ul>\n</li><li><a href=\"#Cdll_138\">三、C#调用dll</a></li><li><ul><li><a href=\"#DLLCDebug_140\">将生成的DLL文件拷贝到C#项目目录的Debug下</a></li><li><a href=\"#C_143\">C#源代码:</a></li><li><a href=\"#_176\">运行结果：</a></li></ul>\n</li><li><a href=\"#_180\">补充：</a></li><li><ul><li><a href=\"#libdll_181\">.lib和.dll的区别</a></li><li><a href=\"#DLL_193\">调用DLL</a></li></ul>\n</li><li><a href=\"#_204\">总结</a></li><li><a href=\"#_208\">本文源码链接</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_7\"></a>前言</h1>\n<p>在C#开发软件的过程中，要经常调用C/C++生成的dll，本文主要介绍用C/C++生成dll的步骤，以及用C/C++、C#两种语言实现dll的引用实现。本文使用的IDE是VS2019，文章通过具体实例进行讲解，大家可以跟着自己动手进行测试。</p>\n<hr/>\n<h1><a id=\"dll_15\"></a>一、生成dll</h1>\n<h2><a id=\"CDLL_16\"></a>新建项目-C+±动态链接库(DLL)</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6fd71b958958421e921f5c93d39fdc90.png\"/></p>\n<h2><a id=\"CC_19\"></a>项目-右键-属性-C/C+±预编译头：不使用预编译头。</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4f029dbe56e141df8caf05427c97d712.png\"/></p>\n<h2><a id=\"CCC_22\"></a>项目-右键-属性-C/C+±高级：编译为：C。（也可以不更改，默认就好）</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c6f69e2e8b2c4dc999de9437e4281a1b.png\"/></p>\n<h2><a id=\"chch_26\"></a>删除原有所有.c、.h文件，新建.c、.h文件</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\87dbbba22aaa41c397bc6ee48e0cb3ac.png\"/></p>\n<ul><li>Mydll.c文件代码如下：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"Mydll.h\"</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test_print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"测试输出的内容是：%s\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">test_sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<ul><li>Mydll.h文件代码如下：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token function\">_declspec</span><span class=\"token punctuation\">(</span>dllexport<span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">_declspec</span><span class=\"token punctuation\">(</span>dllexport<span class=\"token punctuation\">)</span> <span class=\"token keyword\">int</span> <span class=\"token function\">test_sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>特别说明：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\61ac81e326cb4055b65a12bf8addb098.png\"/><br/> <mark><strong>如果上图写错的话，则在depends.exe或dumpbin.exe(VS自带)中无法查看C/C++生成的DLL中的函数</strong></mark></p>\n<p><strong>dumpbin.exe的使用方法：</strong><br/> dumpbin.exe路径：【C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\VC\\Tools\\MSVC\\14.16.27023\\bin\\Hostx86\\x86】（说明：不同版本的VS，只需更改2017为相应版本号）</p>\n<p>定位到上述的路径，然后在文件路径中输入cmd， 定位到路径下。<br/> 执行命令：dumpbin.exe -exports “xxx.dll”（dll的路径）</p>\n<p><strong>depends.exe下查找dll的函数名：</strong><br/> 使用depends.exe打开一个dll文件【注：下图中打开的文件是C/C++随便生成的dll，不要看！】<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9905804230c84606b50fb5d308b62578.png\"/></p>\n<ul><li>生成.dll和.lib文件：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0bf196f437a84413bd3e948b05748431.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\acd864a191584e2ba4c7289aeb464831.png\"/></li></ul>\n<h1><a id=\"CCdll_77\"></a>二、C/C++调用dll</h1>\n<h2><a id=\"DLLDebug_78\"></a>将生成的DLL文件拷贝到项目目录的Debug下</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\63b30dc290a94f10af2379626c0dfd7d.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bc6ac586d3d348e4afbc4b2cc43e0fe6.png\"/></p>\n<h2><a id=\"VCdlllib_81\"></a>项目右键-属性-VC++目录-库目录-将.dll和.lib所在文件夹目录写入库目录中</h2>\n<p>项目-资源文件右键添加现有项-将.lib添加进去 或者 直接#pragma comment(lib,“Dll1.lib”)（本方法可省略此步）</p>\n<h2><a id=\"C_87\"></a>C++源代码:</h2>\n<p>需要使用三个函数：<strong>LoadLibraryA，GetProcAddress</strong>和<strong>FreeLibrary</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>test_print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>test_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n\tHMODULE <span class=\"token keyword\">module</span> <span class=\"token operator\">=</span> <span class=\"token function\">LoadLibraryA</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dll1.dll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error load\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\ttest_print <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test_print\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ttest_sum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test_sum\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>test_print <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">test_print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输出测试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> \n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"function p_test_print can not excute\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">int</span> sum_result<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>test_sum <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tsum_result <span class=\"token operator\">=</span> <span class=\"token function\">test_sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">234</span><span class=\"token punctuation\">,</span> <span class=\"token number\">432</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"求和结果是：%d\\n\"</span><span class=\"token punctuation\">,</span> sum_result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> \n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"function p_test_print can not excute\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">FreeLibrary</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"_135\"></a>运行结果:</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\13cbc54054ef4dd891785f9c47479e56.png\"/></p>\n<h1><a id=\"Cdll_138\"></a>三、C#调用dll</h1>\n<h2><a id=\"DLLCDebug_140\"></a>将生成的DLL文件拷贝到C#项目目录的Debug下</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5aa5028974e945f09a901e89ba518d4d.png\"/></p>\n<h2><a id=\"C_143\"></a>C#源代码:</h2>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*引入C/C++生成的dll时需要添加*/</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>InteropServices</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">ConsoleApp2</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DllImport</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dll1.dll\"</span><span class=\"token punctuation\">,</span> EntryPoint <span class=\"token operator\">=</span> <span class=\"token string\">\"test_sum\"</span><span class=\"token punctuation\">,</span> CallingConvention <span class=\"token operator\">=</span> CallingConvention<span class=\"token punctuation\">.</span>Cdecl<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">extern</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">test_sum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> a <span class=\"token operator\">=</span> <span class=\"token number\">234</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">432</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}+{1}={2}\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token function\">test_sum</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\91191b2655f84d4f85c04753d0b23a82.png\"/></p>\n<h2><a id=\"_176\"></a>运行结果：</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bbab3727afd6473ab57aa84aed237679.png\"/></p>\n<h1><a id=\"_180\"></a>补充：</h1>\n<h2><a id=\"libdll_181\"></a>.lib和.dll的区别</h2>\n<p>引用网上的资料：</p>\n<p>(1)<strong>lib是编译时需要的，dll是运行时需要的</strong>。<br/> 如果要完成源代码的编译，有lib就够了。<br/> <strong>如果要使动态连接的程序运行起来，有dll就够了。</strong><br/> 在开发和调试阶段，当然最好都有。</p>\n<p>(2)一般的动态库程序有lib文件和dll文件。lib文件是必须在编译期就连接到应用程序中的，而dll文件是运行期才会被调用的。**如果有dll文件，那么对应的lib文件一般是一些索引信息，具体的实现在dll文件中。**如果只有lib文件，那么这个lib文件是静态编译出来的，索引和实现都在其中。静态编译的lib文件有好处：给用户安装时就不需要再挂动态库了。但也有缺点，就是导致应用程序比较大，而且失去了动态库的灵活性，在版本升级时，同时要发布新的应用程序才行。</p>\n<p>(3)在动态库的情况下，有两个文件，一个是引入库（.LIB）文件，一个是DLL文件，引入库文件包含被DLL导出的函数的名称和位置，DLL包含实际的函数和数据，应用程序使用LIB文件链接到所需要使用的DLL文件，库中的函数和数据并不复制到可执行文件中，因此在应用程序的可执行文件中，存放的不是被调用的函数代码，而是DLL中所要调用的函数的内存地址，这样当一个或多个应用程序运行时再把程序代码和被调用的函数代码链接起来，从而节省了内存资源。从上面的说明可以看出，<strong>DLL文件必须随应用程序一起发行，否则应用程序将会产生错误。</strong></p>\n<h2><a id=\"DLL_193\"></a>调用DLL</h2>\n<p>引入dll的方法：</p>\n<p>1、LoadLibray 一般是动态加载DLL时（不需要对应的头文件和LIB）。动态调用方式是由编程者用API函数加载和卸载DLL来达到调用DLL的目的，使用上较为复杂，但是<mark>能更加有效的使用内存</mark>，是编制大型应用程序时的重要方式。<strong>（本文采用）</strong></p>\n<p>2、#pragma comment 一般是静态加载DLL时（对应的头文件、DLL和LIB缺一不可，并且生产的EXE没有找到DLL文件就会导致“应用程序初始化失败”）。静态调用方式由编译系统完成对DLL的加载和应用程序时DLL卸载的编码，<mark>简单实用但不灵活</mark>。</p>\n<p>3、#import指令用于从一个类型库中结合信息。该类型库的内容被转换为C++类，主要用于描述COM界面。</p>\n<h1><a id=\"_204\"></a>总结</h1>\n<p>以上就是关于用C/C++ 生成dll，并用C/C++和C#调用dll的学习，希望对大家有帮助。</p>\n<h1><a id=\"_208\"></a>本文源码链接</h1>\n<p><a href=\"https://download.csdn.net/download/sinat_40003796/85202652\">https://download.csdn.net/download/sinat_40003796/85202652</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 1, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-04-22 19:01:16", "summary": "文章目录前言一、生成新建项目动态链接库项目右键属性预编译头：不使用预编译头。项目右键属性高级：编译为：。也可以不更改，默认就好删除原有所有、文件，新建、文件二、调用将生成的文件拷贝到项目目录的下项目右"}