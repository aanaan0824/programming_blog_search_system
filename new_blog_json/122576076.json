{"blogid": "122576076", "writerAge": "码龄6年", "writerBlogNum": "35", "writerCollect": "359", "writerComment": "28", "writerFan": "27", "writerGrade": "3级", "writerIntegral": "599", "writerName": "前端报刊", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122576076.jpg", "writerRankTotal": "140928", "writerRankWeekly": "86735", "writerThumb": "87", "writerVisitNum": "58582", "blog_read_count": "7933", "blog_time": "已于 2022-01-19 15:47:17 修改", "blog_title": "Vue中watch(监听器)的用法详解（通俗易懂，简单明了）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<blockquote>\n<p>官方解释：一个对象，键是需要观察的表达式，值是对应回调函数。值也可以是方法名，或者包含选项的对象。Vue 实例将会在实例化时调用 watch，遍历 watch 对象的每一个 属性。</p>\n</blockquote>\n<p>示例：</p>\n<div>\n<blockquote>\n<pre><code>&lt;template&gt;\n\t&lt;el-card class=\"box-card\"&gt;&lt;el-input v-model=\"name\" style=\"width: 30%;\"&gt;&lt;/el-input&gt;&lt;/el-card&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n\tdata() {\n\t\treturn {\n\t\t\tname: '123'\n\t\t};\n\t}\n};\n&lt;/script&gt;\n\n&lt;style&gt;&lt;/style&gt;\n</code></pre>\n</blockquote>\n</div>\n<blockquote>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\5f74152c69284f4b8605af1b060046e4.png\"/></p>\n</blockquote>\n<p><strong>第一种：常规用法</strong></p>\n<p>（1）把要监听的name值看作方法名，来进行监听。【第一种写法】</p>\n<blockquote>\n<pre><code>&lt;template&gt;\n\t&lt;el-card class=\"box-card\"&gt;&lt;el-input v-model=\"name\" style=\"width: 30%;\"&gt;&lt;/el-input&gt;&lt;/el-card&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n\tdata() {\n\t\treturn {\n\t\t\tname: '123'\n\t\t};\n\t},\n\twatch: {\n\t\tname(newVal, oldVal) {\n\t\t\tconsole.log('newVal', newVal);// 1234\n\t\t\tconsole.log('oldVal', oldVal);// 123\n\t\t}\n\t}\n};\n&lt;/script&gt;\n\n&lt;style&gt;&lt;/style&gt;\n</code></pre>\n</blockquote>\n<blockquote>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\abd033009599428b8cad4969bfbc517b.png\"/></p>\n</blockquote>\n<p>（2）把要监听的name值看作对象，利用hanler方法来进行监听。【第二种写法】</p>\n<blockquote>\n<pre><code>&lt;template&gt;\n\t&lt;el-card class=\"box-card\"&gt;&lt;el-input v-model=\"name\" style=\"width: 30%;\"&gt;&lt;/el-input&gt;&lt;/el-card&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n\tdata() {\n\t\treturn {\n\t\t\tname: '123'\n\t\t};\n\t},\n\twatch: {\n\t\tname:{\n\t\t\thandler(newVal,oldVal){\n\t\t\t\tconsole.log('newVal',newVal); // 1234\n\t\t\t\tconsole.log('oldVal',oldVal); // 123\n\t\t\t}\n\t\t}\n\t}\n};\n&lt;/script&gt;\n\n&lt;style&gt;&lt;/style&gt;\n</code></pre>\n</blockquote>\n<blockquote>\n<p>以上两种写法是watch监听器的普通用法，这种用法有一个特点，就是当值第一次绑定的时候，不会执行监听函数，只有当值发生改变时才会执行。如果我们需要在最初绑定值的时侯，也执行监听函数，则就需要用到immediate属性。</p>\n<p>下面，我们就往高级一点的用法上讲。</p>\n</blockquote>\n<p><strong>第二种：高级用法</strong></p>\n<p>比如，当父组件向子组件动态传值时，子组件props首次获取到父组件传来的默认值时，也需要执行函数，此时就需要将immediate属性设置为true，结合handler方法使用。</p>\n<p>当设置immediate属性为true时，无论值是否发生改变，时刻都会监听；</p>\n<p>当设置immediate属性为false时，常规用法，只有值发生改变才会监听。</p>\n<blockquote>\n<pre><code>&lt;template&gt;\n\t&lt;el-card class=\"box-card\"&gt;&lt;el-input v-model=\"name\" style=\"width: 30%;\"&gt;&lt;/el-input&gt;&lt;/el-card&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n\tdata() {\n\t\treturn {\n\t\t\tname: '123'\n\t\t};\n\t},\n\twatch: {\n\t\tname: {\n\t\t\thandler(newVal, oldVal) {\n\t\t\t\tconsole.log('newVal', newVal);\n\t\t\t\tconsole.log('oldVal', oldVal);\n\t\t\t},\n\t\t\timmediate: true\n\t\t}\n\t}\n};\n&lt;/script&gt;\n\n&lt;style&gt;&lt;/style&gt;\n</code></pre>\n</blockquote>\n<p><strong>立即执行：</strong></p>\n<blockquote>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\060c3d83514047e08d08ecc35cb0c823.png\"/></p>\n</blockquote>\n<p><strong> 值改变时：</strong></p>\n<blockquote>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\46ddef1ac7e94ac583f4ddf9e2cf6f67.png\"/></p>\n</blockquote>\n<p><strong>第三种：超高级用法（deep 深度监听）</strong></p>\n<p>（1）监听普通变量的变化可以使用以上两种方法，但是要监听变量值是某对象的时候，则不起作用。</p>\n<p>例如，我们监听form对象内部属性的变化，是监听不到的。</p>\n<blockquote>\n<pre><code>&lt;template&gt;\n\t&lt;el-card class=\"box-card\"&gt;&lt;el-input v-model=\"form.name\" style=\"width: 30%;\"&gt;&lt;/el-input&gt;&lt;/el-card&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n\tdata() {\n\t\treturn {\n\t\t\tform: {\n\t\t\t\tname: '123'\n\t\t\t}\n\t\t};\n\t},\n\twatch: {\n\t\tform: {\n\t\t\thandler(newVal, oldVal) {\n\t\t\t\tconsole.log('newVal', newVal);\n\t\t\t\tconsole.log('oldVal', oldVal);\n\t\t\t}\n\t\t}\n\t}\n};\n&lt;/script&gt;\n\n&lt;style&gt;&lt;/style&gt;\n</code></pre>\n</blockquote>\n<blockquote>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\a89e72dbdad14e90aa661fb481ca80f9.png\"/></p>\n</blockquote>\n<p>则，从结果来看，我们没有看到任何的输出打印，所以普通的watch方法无法监听到对象内部属性的变化。</p>\n<p>那么，我们该怎么办才能监听到对象内部属性的变化呢？</p>\n<p>watch方法提供了一个deep属性（深度监听），该属性可以监听到对象内部属性的改变。</p>\n<blockquote>\n<pre><code>&lt;template&gt;\n\t&lt;el-card class=\"box-card\"&gt;&lt;el-input v-model=\"form.name\" style=\"width: 30%;\"&gt;&lt;/el-input&gt;&lt;/el-card&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n\tdata() {\n\t\treturn {\n\t\t\tform: {\n\t\t\t\tname: '123'\n\t\t\t}\n\t\t};\n\t},\n\twatch: {\n\t\tform: {\n\t\t\thandler(newVal, oldVal) {\n\t\t\t\tconsole.log('newVal', newVal);\n\t\t\t\tconsole.log('oldVal', oldVal);\n\t\t\t},\n\t\t\tdeep: true\n\t\t}\n\t}\n};\n&lt;/script&gt;\n\n&lt;style&gt;&lt;/style&gt;\n</code></pre>\n</blockquote>\n<blockquote>\n<p> <img alt=\"\" src=\"..\\..\\static\\image\\b0ca4436001f4abf872fbc644bcf93d3.png\"/></p>\n</blockquote>\n<blockquote>\n<p>设置deep: true 则可以监听到form的变化，如果form有较多属性的话，此时会给form的所有属性都会加上这个监听器，每个属性值的变化都会执行handler。 </p>\n<p>当deep属性值为true时，就可以监听到对象属性内部的改变；</p>\n<p>当deep属性值为false时，则监听不到。</p>\n</blockquote>\n<p>（2）如果只需要监听对象中的某一个属性值时，我们可以使用：<strong>字符串的形式监听对象属性</strong>，</p>\n<p>这个监听过程，不需要使用deep去深度监听，就可以监听对象中某个属性的变化。</p>\n<blockquote>\n<pre><code>&lt;template&gt;\n\t&lt;el-card class=\"box-card\"&gt;&lt;el-input v-model=\"form.name\" style=\"width: 30%;\"&gt;&lt;/el-input&gt;&lt;/el-card&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n\tdata() {\n\t\treturn {\n\t\t\tform: {\n\t\t\t\tname: '123'\n\t\t\t}\n\t\t};\n\t},\n\twatch: {\n\t\t'form.name': {\n\t\t\thandler(newVal, oldVal) {\n\t\t\t\tconsole.log('newVal', newVal);\n\t\t\t\tconsole.log('oldVal', oldVal);\n\t\t\t}\n\t\t}\n\t}\n};\n&lt;/script&gt;\n\n&lt;style&gt;&lt;/style&gt;\n</code></pre>\n</blockquote>\n<blockquote>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\458a7d7ff51a4bab988ac288d3bb6c09.png\"/></p>\n</blockquote>\n<p> 第四种：扩展（监听数组）</p>\n<p>（1）（一维、多维）数组的变化不需要深度监听</p>\n<blockquote>\n<pre><code>&lt;template&gt;\n\t&lt;el-card class=\"box-card\"&gt;&lt;el-input v-model=\"name\" @input=\"inputFn\" style=\"width: 30%;\"&gt;&lt;/el-input&gt;&lt;/el-card&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n\tdata() {\n\t\treturn {\n\t\t\tname: '123',\n\t\t\tarr1: [1, 2, 3],\n\t\t\tarr2: [1, 2, 3, [4, 5]]\n\t\t};\n\t},\n\twatch: {\n\t\tarr1(newVal, oldVal) {\n\t\t\tconsole.log('newVal1', newVal);\n\t\t\tconsole.log('oldVal1', oldVal);\n\t\t},\n\t\tarr2(newVal, oldVal) {\n\t\t\tconsole.log('newVal2', newVal);\n\t\t\tconsole.log('oldVal2', oldVal);\n\t\t}\n\t},\n\tmethods: {\n\t\tinputFn(e) {\n\t\t\tthis.arr1.push(e);\n\t\t\tthis.arr2.push(e);\n\t\t}\n\t}\n};\n&lt;/script&gt;\n\n&lt;style&gt;&lt;/style&gt;\n</code></pre>\n</blockquote>\n<blockquote>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\1e97bf4c526c4e65b2c55d30d2e1e101.png\"/></p>\n</blockquote>\n<p> （2）数组对象中对象属性变化监测需要使用deep:true深度监听，多少层内产生变化都可以监测到。</p>\n<blockquote>\n<pre><code>&lt;template&gt;\n\t&lt;el-card class=\"box-card\"&gt;&lt;el-input v-model=\"name\" @input=\"inputFn\" style=\"width: 30%;\"&gt;&lt;/el-input&gt;&lt;/el-card&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n\tdata() {\n\t\treturn {\n\t\t\tname: '123',\n\t\t\tarr1: [\n\t\t\t\t{\n\t\t\t\t\tid: 1,\n\t\t\t\t\tsex: 11\n\t\t\t\t}\n\t\t\t],\n\t\t\tarr2: [\n\t\t\t\t{\n\t\t\t\t\tid: 2,\n\t\t\t\t\tsex: 22,\n\t\t\t\t\tlist: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: 3,\n\t\t\t\t\t\t\tsex: 33\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t},\n\twatch: {\n\t\tarr1: {\n\t\t\thandler(newVal, oldVal) {\n\t\t\t\tconsole.log('newVal1', newVal);\n\t\t\t\tconsole.log('oldVal1', oldVal);\n\t\t\t},\n\t\t\tdeep: true\n\t\t},\n\t\tarr2: {\n\t\t\thandler(newVal, oldVal) {\n\t\t\t\tconsole.log('newVal2', newVal);\n\t\t\t\tconsole.log('oldVal2', oldVal);\n\t\t\t},\n\t\t\tdeep: true\n\t\t}\n\t},\n\tmethods: {\n\t\tinputFn(e) {\n\t\t\tthis.arr1[0].sex = e;\n\t\t\tthis.arr2[0].list[0].sex = e;\n\t\t}\n\t}\n};\n&lt;/script&gt;\n\n&lt;style&gt;&lt;/style&gt;\n</code></pre>\n</blockquote>\n<blockquote>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\19529f0eb1b94faba226787faf169707.png\"/></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\bb95290130d944ed98fc99242c49597e.png\"/> <img alt=\"\" src=\"..\\..\\static\\image\\76bc867ecf564f148d235d760cf19486.png\"/></p>\n</blockquote>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-01-19 15:47:17", "summary": "官方解释：一个对象，键是需要观察的表达式，值是对应回调函数。值也可以是方法名，或者包含选项的对象。实例将会在实例化时调用，遍历对象的每一个属性。示例：第一种：常规用法把要监听的值看作方法名，来进行监听"}