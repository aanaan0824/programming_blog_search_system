{"blogid": "121769508", "writerAge": "码龄5年", "writerBlogNum": "35", "writerCollect": "936", "writerComment": "267", "writerFan": "6054", "writerGrade": "4级", "writerIntegral": "1489", "writerName": "在下马农", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_121769508.jpg", "writerRankTotal": "91635", "writerRankWeekly": "8454", "writerThumb": "476", "writerVisitNum": "90983", "blog_read_count": "5519", "blog_time": "于 2022-01-02 14:21:47 发布", "blog_title": "C++ vector所有操作，你真的掌握vector了吗？两万总结带你干穿vector", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<h2><a id=\"font_size__5_color__black_font_0\"></a><font color=\"black\" size=\"5\">📋 前言</font></h2>\n<ul><li><font color=\"black\" size=\"4\">🖱 博客主页：<a href=\"https://blog.csdn.net/mataojie\">在下马农的碎碎念</a></font></li><li><font color=\"black\" size=\"4\">✍ 本文由在下马农原创，首发于CSDN</font></li><li><font color=\"black\" size=\"4\">📆 首发时间：2022/01/02</font></li><li><font color=\"black\" size=\"4\">📅 最近更新时间：2022/01/02</font></li><li><font color=\"black\" size=\"4\">🤵 此马非凡马，房星本是星。向前敲瘦骨，犹自带铜声。</font></li><li><font color=\"black\" size=\"4\">📇 系列文章目录: 暂无</font></li><li><font color=\"black\" size=\"4\">🙏作者水平有限，如发现错误，请留言轰炸哦！万分感谢！</font></li><li><font color=\"black\" size=\"4\">🤗码字不易 欢迎关注🔎点赞👍收藏⭐️留言📝</font></li></ul>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\141988d116c64076a89ecf31af7452bf.png\"/></p>\n<blockquote>\n<p><font color=\"green\" size=\"4\">五岁时，妈妈告诉我，人生的关键在于快乐。上学后，人们问我长大了要做什么，我写下“快乐”。他们告诉我，我理解错了题目，我告诉他们，他们理解错了人生。——约翰·列侬</font></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\17949371c4c343a6aadc8c3f86c78df5.png\"/></p>\n<p><strong><font color=\"gray\" size=\"5\">以下是正文</font></strong><br/> </p>\n<div class=\"toc\">\n<h3>Vector目录</h3>\n<ul><li><ul><li><a href=\"#font_size__5_color__black_font_0\"><font color=\"black\" size=\"5\">📋 前言</font></a></li><li><a href=\"#font_size__5_1Vector_20\"><font size=\"5\"> 1、Vector介绍</font></a></li><li><a href=\"#font_size__5_2Vector_28\"><font size=\"5\"> 2、Vector定义和初始化</font></a></li><li><a href=\"#font_size__5_3Vector_60\"><font size=\"5\"> 3、Vector的迭代器</font></a></li><li><a href=\"#font_size__5_4Vector_146\"><font size=\"5\"> 4、Vector大小(容量)相关方法</font></a></li><li><ul><li><a href=\"#font_size__4_41_size_147\"><font size=\"4\"> 4.1 size()——元素个数</font></a></li><li><a href=\"#font_size__4_42_max_size_176\"><font size=\"4\"> 4.2 max_size()——最多能容纳元素个数：</font></a></li><li><a href=\"#font_size__4_43__resizenvectorn_196\"><font size=\"4\"> 4.3 resize(n)——改变vector容量为n</font></a></li><li><a href=\"#font_size__4_44_capacityvector_238\"><font size=\"4\"> 4.4 capacity()——当前分配给vector的容量大小</font></a></li><li><a href=\"#font_size__4_45_emptyvector_294\"><font size=\"4\"> 4.5 empty()——检查vector是否为空</font></a></li><li><a href=\"#font_size__4_46_reservenvectorn_321\"><font size=\"4\"> 4.6 reserve(n)——要求vector至少能容纳n个元素</font></a></li><li><a href=\"#font_size__4_47_shrink_to_fitvectorfont_color__red__C11_358\"><font size=\"4\"> 4.7 shrink_to_fit()——要求vector减小容量已适应元素个数<font color=\"red\"> 【C++11】</font></font></a></li></ul>\n</li><li><a href=\"#font_size__5_5Vector_383\"><font size=\"5\"> 5、Vector常用操作</font></a></li><li><ul><li><a href=\"#font_size__4_51_push_backvector_384\"><font size=\"4\"> 5.1 push_back()——添加元素（vector尾部)</font></a></li><li><a href=\"#font_size__4_52_pop_backVector_426\"><font size=\"4\"> 5.2 pop_back()——删除Vector元素</font></a></li><li><a href=\"#font_size__4_53_atVector_459\"><font size=\"4\"> 5.3 at()——访问Vector元素</font></a></li><li><a href=\"#font_size__4_54_frontbackVector_487\"><font size=\"4\"> 5.4 front()和back()——访问Vector头尾元素</font></a></li><li><a href=\"#font_size__4_55_assignVector_511\"><font size=\"4\"> 5.5 assign()——指定Vector元素</font></a></li><li><a href=\"#font_size__4_56__insert_604\"><font size=\"4\"> 5.6 insert()——添加元素（任意位置）</font></a></li><li><a href=\"#font_size__4_57__erase_645\"><font size=\"4\"> 5.7 erase()——删除元素（任意位置）</font></a></li><li><a href=\"#font_size__4_58_clear_732\"><font size=\"4\"> 5.8 clear()——清空元素</font></a></li><li><a href=\"#font_size__4_59_swap_773\"><font size=\"4\"> 5.9 swap()——交换元素</font></a></li><li><a href=\"#font_size__4_510_emplacefont_color__red_C11_825\"><font size=\"4\"> 5.10 emplace()——插入元素<font color=\"red\"> 【C++11】</font></font></a></li><li><a href=\"#font_size__4_511_emplace_backvectorfont_color__red__C11_875\"><font size=\"4\"> 5.11 emplace_back()——在vector尾部插入元素<font color=\"red\"> 【C++11】</font></font></a></li></ul>\n</li><li><a href=\"#font_size__5_6_911\"><font size=\"5\"> 6、总结</font></a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"font_size__5_1Vector_20\"></a><font size=\"5\"> 1、Vector介绍</font></h2>\n<blockquote>\n<p><font color=\"black\" size=\"3\">Vector是一种可以<mark>改变长度</mark>的序列化容器。<br/> 与数组相同的是Vector也使用一段连续的内存空间来存储元素，因此Vector的元素也可以使用与数组类似的下标来访问。<br/> 但是，不同于数组，Vector的大小是可以动态改变的，当我们向容器中添加或删除元素时，容器会自动改变大小。<br/> Vector是C++ 标准模板库的一部分，因此，想要使用Vector，需要在程序中包含头文件<mark>vector</mark></font></p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector&gt;</span></span>\n</code></pre>\n<h2><a id=\"font_size__5_2Vector_28\"></a><font size=\"5\"> 2、Vector定义和初始化</font></h2>\n<p><strong>格式：</strong><br/> 包含头文件vector之后，我们可以使用下边的格式定义vector：</p>\n<pre><code class=\"prism language-c\">std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>object_type<span class=\"token operator\">&gt;</span> variable_name<span class=\"token punctuation\">;</span>\n</code></pre>\n<p><code>object_type</code>规定了vector中可以存放哪种类型的元素。<br/> <code>variable_name</code>为vector名。</p>\n<p><strong>方式：</strong> 定义Vector的常用方式如下所示：</p>\n<pre><code class=\"prism language-c\">vector<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">&gt;</span> v1<span class=\"token punctuation\">;</span> \t\t\t\t<span class=\"token comment\">//v1是一个空vector,可存储元素类型为T，执行默认初始化</span>\nvector<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">&gt;</span> <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//v2中包含v1中的所有元素</span>\nvector<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">&gt;</span> v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//等价于v2(v1)</span>\nvector<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">&gt;</span> <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//v3中有n个元素，并且值都为value</span>\nvector<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">&gt;</span> <span class=\"token function\">v4</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//v4包含了n个重复执行了值初始化的对象</span>\nvector<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">&gt;</span> v5<span class=\"token punctuation\">{<!-- --></span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//v5包含大括号中的所有元素</span>\nvector<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">&gt;</span> v6 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>；\t<span class=\"token comment\">//等价于v5{a,b,c....}</span>\n</code></pre>\n<blockquote>\n<p><font size=\"3\"> ❗❗❗ 注：<mark>最常用的方式是先定义一个空的vector,在需要的时候再一一向vector中添加元素</mark></font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\nusing std<span class=\"token operator\">::</span>vector<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> vector1<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// vector1保存int类型对象</span>\n    vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span> vector2<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// vector2保存vector类型对象</span>\n    <span class=\"token comment\">// vector&lt;ClassType&gt; vector3\t// vector3保存自定义类型ClassType类型对象</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上边的例子中，创建了几个存储不同元素类型的空vector，vector定义时不需要指定长度。</p>\n<h2><a id=\"font_size__5_3Vector_60\"></a><font size=\"5\"> 3、Vector的迭代器</font></h2>\n<blockquote>\n<p><font color=\"black\" size=\"4\">vector中的迭代器包括以下几个，分别为：</font></p>\n<ul><li><font color=\"black\" size=\"4\"><code>vector.begin()</code>：指向vector首元素的迭代器</font></li><li><font color=\"black\" size=\"4\"><code>vector.end()</code>：指向vector尾元素下一个位置的迭代器</font></li><li><font color=\"black\" size=\"4\"><code>vector.rbegin()</code>：指向vector尾元素的反向迭代器，即rbegin()指向尾元素，rbegin-1指向倒数第二个元素</font></li><li><font color=\"black\" size=\"4\"><code>vector.rend()</code>：指向vector头元素前一个位置的反向迭代器，即rend()指向头元素前一个位置元素，rbegin-1指向第一个元素</font></li><li><font color=\"black\" size=\"4\"><code>vector.cbegin()</code>：指向vector首元素的迭代器</font></li><li><font color=\"black\" size=\"4\"><code>vector.cend()</code>：指向vector尾元素下一个位置的迭代器</font></li><li><font color=\"black\" size=\"4\"><code>vector.crbegin()</code>：指向vector尾元素的反向迭代器</font></li><li><font color=\"black\" size=\"4\"><code>vector.crend()</code>：指向vector头元素前一个位置的反向迭代器<br/> 专门画了一张示意图，清晰展示各个迭代器：</font></li></ul>\n</blockquote>\n<blockquote>\n<p><img alt=\"vector迭代器\" src=\"..\\..\\static\\image\\a3fdd3ae54af4d11b43331705308a15c.png\"/></p>\n</blockquote>\n<blockquote>\n<p><font color=\"black\" size=\"4\">代码示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>vector<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 初始化vector为1-4</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        test<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"初始化后vector为： \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// vector.begin()为指向vector头元素的迭代器</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator begin_iterator <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"begin() 指向的元素：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>begin_iterator <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// vector.end()为指向vector尾元素后一个位置的迭代器，则test.end()-1指向尾元素</span>\n    <span class=\"token keyword\">auto</span> end_iterator <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"end()-1 指向的元素：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>end_iterator <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// vector.rbegin()为指向尾元素的迭代器，即反向(r)的头(begin)迭代器</span>\n    <span class=\"token keyword\">auto</span> rbegin_iterator <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"rbegin() 指向的元素：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>rbegin_iterator <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// vector.rend()为指向头元素的前一个位置的迭代器，即反向(r)尾(end)迭代器，则test.rend()-1指向头元素</span>\n    <span class=\"token keyword\">auto</span> rend_iterator <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"rend()-1 指向的元素：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>rend_iterator <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// vector.cbegin()为指向vector头元素的const迭代器，与begin()不同的是返回迭代器类型为vector&lt;int&gt;::const_iterator</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>const_iterator cbegin_iterator <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"cbegin() 指向的元素：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>cbegin_iterator <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// vector.cend()为指向vector尾元素下一个位置的const迭代器，与end()不同的是返回迭代器类型为vector&lt;int&gt;::const_iterator</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>const_iterator cend_iterator <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"cend()-1 指向的元素：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>cend_iterator<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// vector.crbegin()为指向尾元素的const迭代器，即反向(r)的const(c)头(begin)迭代器</span>\n    <span class=\"token keyword\">auto</span> crbegin_iterator <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">crbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"crbegin() 指向的元素： \"</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>crbegin_iterator<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// vector.crend()为指向头元素下一个位置的const迭代器，即反向(r)的const(c)尾(end)迭代器</span>\n    <span class=\"token keyword\">auto</span> crend_iterator <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">crend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"crend()-1 指向的元素： \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>crend_iterator<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">初始化后vector为： 1 2 3 4<br/> begin() 指向的元素：1<br/> end()-1 指向的元素：4<br/> rbegin() 指向的元素：4<br/> rend()-1 指向的元素：1<br/> cbegin() 指向的元素：1<br/> cend()-1 指向的元素：4<br/> crbegin() 指向的元素： 4<br/> crend()-1 指向的元素： 1</font></p>\n</blockquote>\n<h2><a id=\"font_size__5_4Vector_146\"></a><font size=\"5\"> 4、Vector大小(容量)相关方法</font></h2>\n<h3><a id=\"font_size__4_41_size_147\"></a><font size=\"4\"> 4.1 size()——元素个数</font></h3>\n<blockquote>\n<p><font color=\"black\" size=\"4\">要想知道vector中有多少元素，使用vector.size()方法，作用是返回Vector中元素的个数。示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>vector<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 初始化test</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        test<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"初始化后的test为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span>num<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> sizeOftest <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\ntest中的元素个数为：\"</span><span class=\"token operator\">&lt;&lt;</span> sizeOftest<span class=\"token punctuation\">;</span>    \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">初始化后的test为：1 2 3 4 5<br/> test中的元素个数为：5</font></p>\n</blockquote>\n<h3><a id=\"font_size__4_42_max_size_176\"></a><font size=\"4\"> 4.2 max_size()——最多能容纳元素个数：</font></h3>\n<blockquote>\n<p><font color=\"black\" size=\"4\">要想知道vector最多可以有多少元素，使用vector.max_size()方法，作用是返回Vector中最多能容纳元素个数。示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>vector<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> sizeOftest <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\ntest中最多能容纳的元素个数为：\"</span><span class=\"token operator\">&lt;&lt;</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">max_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">test中最多能容纳的元素个数为：4611686018427387903</font></p>\n</blockquote>\n<h3><a id=\"font_size__4_43__resizenvectorn_196\"></a><font size=\"4\"> 4.3 resize(n)——改变vector容量为n</font></h3>\n<blockquote>\n<p><font color=\"black\" size=\"4\">如果想要改变vector的size,使用vector.resize(n)方法，将vector的size改为n。示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\nusing std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\nusing std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\nusing std<span class=\"token operator\">::</span>vector<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 初始化test</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        test<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"初始化后的test为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> sizeOftest <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\ntest中的元素个数为：\"</span> <span class=\"token operator\">&lt;&lt;</span> sizeOftest<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// resize test 为10</span>\n    test<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> sizeAfterResize <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\nresize test后test的元素个数为：\"</span> <span class=\"token operator\">&lt;&lt;</span> sizeAfterResize<span class=\"token punctuation\">;</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\nresize()后的test为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">初始化后的test为：1 2 3 4 5<br/> test中的元素个数为：5<br/> resize test后test的元素个数为：10<br/> resize()后的test为：1 2 3 4 5 0 0 0 0 0</font></p>\n</blockquote>\n<h3><a id=\"font_size__4_44_capacityvector_238\"></a><font size=\"4\"> 4.4 capacity()——当前分配给vector的容量大小</font></h3>\n<blockquote>\n<p><font color=\"black\" size=\"4\">要想知道当前分配给vector的容量大小，即vector达到多少个元素后会触发扩容，使用vector.capacity()方法，作用是返回当前分配给vector的容量大小。示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>vector<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 初始化test = [1,2,3,4,5,6,7,8,9,10]</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        test<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"test中的元素个数为：\"</span> <span class=\"token operator\">&lt;&lt;</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\ntest当前被分配的容量为：\"</span> <span class=\"token operator\">&lt;&lt;</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n==========================================\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">test中的元素个数为：1<br/> test当前被分配的容量为：1<br/> ==========================================<br/> test中的元素个数为：2<br/> test当前被分配的容量为：2<br/> ==========================================<br/> test中的元素个数为：3<br/> test当前被分配的容量为：4<br/> ==========================================<br/> test中的元素个数为：4<br/> test当前被分配的容量为：4<br/> ==========================================<br/> test中的元素个数为：5<br/> test当前被分配的容量为：8<br/> ==========================================<br/> test中的元素个数为：6<br/> test当前被分配的容量为：8<br/> ==========================================<br/> test中的元素个数为：7<br/> test当前被分配的容量为：8<br/> ==========================================<br/> test中的元素个数为：8<br/> test当前被分配的容量为：8<br/> ==========================================<br/> test中的元素个数为：9<br/> test当前被分配的容量为：16<br/> ==========================================<br/> test中的元素个数为：10<br/> test当前被分配的容量为：16<br/> ==========================================</font></p>\n</blockquote>\n<blockquote>\n<p><font size=\"4\"><mark>通过每次新增一个元素后观察capacity的变化，可以发现vector当前容量不够容纳新的元素，就会把容量扩大为原来的两倍。</mark></font></p>\n</blockquote>\n<h3><a id=\"font_size__4_45_emptyvector_294\"></a><font size=\"4\"> 4.5 empty()——检查vector是否为空</font></h3>\n<blockquote>\n<p><font color=\"black\" size=\"4\">想要检查vector是否为空，使用vector.empty()方法，如果为空返回true,否则返回false。示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>vector<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test<span class=\"token punctuation\">;</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"添加元素前test.isempty() = \"</span> <span class=\"token operator\">&lt;&lt;</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        test<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n添加元素后test.isempty() = \"</span> <span class=\"token operator\">&lt;&lt;</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">添加元素前test.isempty() = 1<br/> 添加元素后test.isempty() = 0</font></p>\n</blockquote>\n<h3><a id=\"font_size__4_46_reservenvectorn_321\"></a><font size=\"4\"> 4.6 reserve(n)——要求vector至少能容纳n个元素</font></h3>\n<blockquote>\n<p><font color=\"black\" size=\"4\">要求vector至少能容纳n各元素，此时有两种情况，如果此时vector容量小于n，则容量会被扩大到n;如果此时容量大于n,则容量不变。示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>vector<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 要求test中至少能容纳10个元素</span>\n    test<span class=\"token punctuation\">.</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\nreserve后test.size() = \"</span> <span class=\"token operator\">&lt;&lt;</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\nreserve后test.capacity() = \"</span> <span class=\"token operator\">&lt;&lt;</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test1<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 向test1中添加7个元素，根据前文经验，此时test1元素个数应为7，容量应为8</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        test1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\nreserve前test1.capacity() = \"</span> <span class=\"token operator\">&lt;&lt;</span> test1<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 要求test1中至少能容纳4个元素</span>\n    test1<span class=\"token punctuation\">.</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\nreserve后test1.capacity() = \"</span> <span class=\"token operator\">&lt;&lt;</span> test1<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><font color=\"green\" size=\"3\"><mark>test没有添加元素，初始容量为0,<code>test.reserve(10)</code>要求test容量至少为10，则test容量被扩大到10；<br/> test1添加了7个元素，容量被扩大到8。<code>test1.reserve(4)</code>要求test容量至少为4，则test容量不变；</mark></font></p>\n</blockquote>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">reserve后test.size() = 0<br/> reserve后test.capacity() = 10<br/> reserve前test1.capacity() = 8<br/> reserve后test1.capacity() = 8</font></p>\n</blockquote>\n<h3><a id=\"font_size__4_47_shrink_to_fitvectorfont_color__red__C11_358\"></a><font size=\"4\"> 4.7 shrink_to_fit()——要求vector减小容量已适应元素个数<font color=\"red\"> 【C++11】</font></font></h3>\n<blockquote>\n<p><font color=\"black\" size=\"4\">让vector尽可能减小容量以适配size，意思就是让capacity缩小到size。示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>vector<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        test<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\nshrink_to_fit前test.capacity() = \"</span> <span class=\"token operator\">&lt;&lt;</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    test<span class=\"token punctuation\">.</span><span class=\"token function\">shrink_to_fit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\nshrink_to_fit后test.capacity() = \"</span> <span class=\"token operator\">&lt;&lt;</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">shrink_to_fit前test.capacity() = 16<br/> shrink_to_fit后test.capacity() = 9</font></p>\n</blockquote>\n<h2><a id=\"font_size__5_5Vector_383\"></a><font size=\"5\"> 5、Vector常用操作</font></h2>\n<h3><a id=\"font_size__4_51_push_backvector_384\"></a><font size=\"4\"> 5.1 push_back()——添加元素（vector尾部)</font></h3>\n<blockquote>\n<p><font color=\"black\" size=\"4\">向vector中添加元素，使用<code>push_back()</code>方法，作用是向vector尾部添加一个元素。示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector&gt;</span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>vector<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"初始化的Vector: \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span>num<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    test<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 向test尾部添加元素6</span>\n    test<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 向test尾部添加元素7</span>\n    test<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 向test尾部添加元素8</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"添加元素后的Vector: \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span>num<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">初始化的Vector: 1 2 3 4 5<br/> 添加元素后的Vector: 1 2 3 4 5 6 7 </font></p>\n</blockquote>\n<p><font size=\"4\">❗❗<strong>注意点</strong>❗❗</font></p>\n<blockquote>\n<p>✅ 可以使用下标访问vector的元素，如使用test[0] 访问test的第一个元素，会得到1<br/> 🈲 不可以使用下标添加元素，如当前有8个元素，不可以用test[8] = 9，这种方式添加第九个元素。<br/> 📣 使用push_back()方法添加元素最为常用，初次之外，还可以使用<code>insert()</code>方法和<code>emplace()</code>方法</p>\n</blockquote>\n<h3><a id=\"font_size__4_52_pop_backVector_426\"></a><font size=\"4\"> 5.2 pop_back()——删除Vector元素</font></h3>\n<blockquote>\n<p><font color=\"black\" size=\"4\">删除vector中的元素，使用<code>pop_back()</code>方法，作用是删除vector尾部的一个元素。示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector&gt;</span></span>\n\nusing std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\nusing std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\nusing std<span class=\"token operator\">::</span>vector<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 初始化后</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"初始化的 Vector: \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 删除vector最后一个元素</span>\n    test<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 删除后</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n删除元素的 Vector: \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">初始化的 Vector: 1 2 3 4 5<br/> 删除元素的 Vector: 1 2 3 4</font></p>\n</blockquote>\n<h3><a id=\"font_size__4_53_atVector_459\"></a><font size=\"4\"> 5.3 at()——访问Vector元素</font></h3>\n<blockquote>\n<p><font color=\"black\" size=\"4\">使用元素的索引来访问Vector中的元素，在vector中，可以使用<code>vector.at(index)</code>或者<code>vector[index]</code>访问索引为index的元素，示例代码如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector&gt;</span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>vector<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    \n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"test索引为0的元素\"</span><span class=\"token operator\">&lt;&lt;</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"test索引为1元素\"</span><span class=\"token operator\">&lt;&lt;</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"test索引为2元素\"</span><span class=\"token operator\">&lt;&lt;</span> test<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">test索引为0的元素1<br/> test索引为1元素2<br/> test索引为2元素3</font></p>\n</blockquote>\n<p><font size=\"4\">🔱<strong>两种访问方法的优劣</strong>🔱<br/> <font color=\"red\" size=\"4\">虽然使用 <code>vector.at(index)</code>和<code>vector[index]</code>的方式都能访问索引为index的元素，但是，如果此元素不存在，即索引越界时， <code>vector.at(index)</code>会抛出一个异常，但是<code>vector[index]</code>会返回一个垃圾值,因此，最好使用<code>vector.at(index)</code>。</font></font></p>\n<h3><a id=\"font_size__4_54_frontbackVector_487\"></a><font size=\"4\"> 5.4 front()和back()——访问Vector头尾元素</font></h3>\n<p><font color=\"red\" size=\"4\"> ❤<strong>front()返回vector第一个元素，back()返回vector最后一个元素</strong>❤</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\"> 示例如下：</font></p>\n</blockquote>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>vector<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 初始化test为【1，2，3，4，5】</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        test<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"test的第一个元素为：\"</span> <span class=\"token operator\">&lt;&lt;</span>test<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"test的最后一个元素为：\"</span> <span class=\"token operator\">&lt;&lt;</span>test<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">test的第一个元素为：1<br/> test的最后一个元素为：5</font></p>\n</blockquote>\n<h3><a id=\"font_size__4_55_assignVector_511\"></a><font size=\"4\"> 5.5 assign()——指定Vector元素</font></h3>\n<p><font color=\"red\" size=\"4\"> ❤<strong>assign的作用就是用新的元素替换vector中旧的元素</strong>❤</font></p>\n<p><font size=\"4\"> <strong>用法一：<code>vector.assign(num,value)</code></strong></font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">这种用法会用num个value填充vector，如果操作前vector中有其他元素，会被覆盖掉。示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector&gt;</span></span>\n\nusing std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\nusing std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\nusing std<span class=\"token operator\">::</span>vector<span class=\"token punctuation\">;</span>\nusing std<span class=\"token operator\">::</span>string<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> test <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"rabbit\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 初始化</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"初始化的 Vector: \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>string animal <span class=\"token operator\">:</span> test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> animal <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 指定vector元素，2个\"sheep\"</span>\n    test<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"sheep\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 指定元素后</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n指定元素的 Vector: \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>string animal <span class=\"token operator\">:</span> test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> animal <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">初始化的 Vector: dog cat rabbit<br/> 指定元素的 Vector: sheep sheep</font></p>\n</blockquote>\n<hr/>\n<p><font size=\"4\"> <strong>用法二：<code>vector.assign(iterator1,iterator2)</code></strong></font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">这种用法会用两个迭代器iterator1和iterator2之间的元素覆盖vector的元素，迭代器可以是原来vector的迭代器，也可以是其他vector的迭代器，注意区间是左闭右开[iterator1,iterator2)，即iterator1指向的元素在区间内，iterator2指向的元素不在区间内，iterator2可以是vector.end。</font></p>\n</blockquote>\n<p><font size=\"4\"> <strong>用法三：<code>vector.assign(address1,address2)</code></strong></font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">这种用法会用两个数组元素地址address1和address2之间的元素覆盖vector的元素，注意区间仍是左闭右开[*address1,*address2)，即address1指向的元素在区间内，address2指向的元素不在区间内。用法2和用法3示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector&gt;</span></span>\n\nusing std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\nusing std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\nusing std<span class=\"token operator\">::</span>vector<span class=\"token punctuation\">;</span>\nusing std<span class=\"token operator\">::</span>string<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> test <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"rabbit\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"pig\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"fish\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 初始化</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"初始化的 Vector: \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>string animal <span class=\"token operator\">:</span> test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> animal <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator it<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// begin()返回指向vector第一个元素的迭代器，end()返回指向vector最后一个元素后边一位的迭代器，详细介绍见下文迭代器章节</span>\n    it <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 指定vector元素，it+1指向cat,end-1指向fish\"</span>\n    <span class=\"token comment\">// 用[it+1,end-1)之间元素覆盖旧的元素</span>\n    test<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>test<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 使用迭代器指定元素后</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n使用迭代器指定元素的 Vector: \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>string animal <span class=\"token operator\">:</span> test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> animal <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 使用数组元素地址指定vector元素</span>\n    string mystrs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"bird\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"snack\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"dragon\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    test<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>mystrs<span class=\"token punctuation\">,</span>mystrs<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n使用数组元素地址指定元素的 Vector: \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>string animal <span class=\"token operator\">:</span> test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> animal <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\"> 初始化的 Vector: dog cat rabbit pig fish<br/> 使用迭代器指定元素的 Vector: cat rabbit pig<br/> 使用数组元素地址指定元素的 Vector: bird snack</font></p>\n</blockquote>\n<h3><a id=\"font_size__4_56__insert_604\"></a><font size=\"4\"> 5.6 insert()——添加元素（任意位置）</font></h3>\n<blockquote>\n<p><font color=\"black\" size=\"4\">向vector中添加元素，使用<code>insert(iterator,value)</code>方法，作用是向iterator迭代器指向元素的前边添加一个元素value。示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector&gt;</span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>vector<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>string<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 初始化</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"初始化的 Vector: \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator it<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// begin返回指向vector第一个元素的迭代器</span>\n    it <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// it指向vector第一个元素，则把9插入到1之前</span>\n    test<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n插入元素后的 Vector: \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\"> 初始化的 Vector: 1 2 3 4 5<br/> 插入元素后的 Vector: 9 1 2 3 4 5</font></p>\n</blockquote>\n<h3><a id=\"font_size__4_57__erase_645\"></a><font size=\"4\"> 5.7 erase()——删除元素（任意位置）</font></h3>\n<p><font color=\"red\" size=\"4\"> ❤<strong>erase的作用就是根据传入的迭代器删除vector中的元素,参数为一个迭代器，只删除迭代器指向的元素；参数为两个迭代器，删除两个迭代器之间的元素</strong>❤</font></p>\n<p><font size=\"4\"> 1️⃣**用法一：<code>vector.erase(iterator)</code>**1️⃣</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">这种用法会删除迭代器iterator指向的元素。示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector&gt;</span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>vector<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test <span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// initial vector</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        test<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 初始化后的vector:</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"初始化后的vector: \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span>num<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 使用erase擦除一个元素</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator it<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// test.begin()指向第一个元素，加二后指向第三个元素</span>\n    it <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    test<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 擦除元素后的vector：</span>\n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n擦除元素后的vector：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">初始化后的vector: 1 2 3 4 5 6 7 8<br/> 擦除元素后的vector：1 2 4 5 6 7 8</font></p>\n</blockquote>\n<hr/>\n<p><font size=\"4\"> 2️⃣**用法二：<code>vector.erase(iterator1,iterator2)</code>**2️⃣</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">这种用法会删除迭代器iterator1指向的元素到iterator2指向元素之间的元素，包括iterator1指向的元素但不包括iterator2指向的元素，即擦除[iterator1,iterator2)。示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector&gt;</span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>vector<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test <span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// initial vector</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        test<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 初始化后的vector:</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"初始化后的vector: \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span>num<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 使用erase擦除一个元素</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator it1<span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator it2<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// test.begin()指向第1个元素，加1后指向第2个元素</span>\n    it1 <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// test.begin()指向第1个元素，加5后指向第6个元素</span>\n    it2 <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    test<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it1<span class=\"token punctuation\">,</span>it2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 擦除元素后的vector：</span>\n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n擦除元素后的vector：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">初始化后的vector: 1 2 3 4 5 6 7 8<br/> 擦除元素后的vector：1 6 7 8</font></p>\n</blockquote>\n<h3><a id=\"font_size__4_58_clear_732\"></a><font size=\"4\"> 5.8 clear()——清空元素</font></h3>\n<p><font color=\"red\" size=\"4\"> ❤<strong>clear的作用就是清空vector中的所有元素</strong>❤</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"4\">清空vector中所有元素，使用<code>clear()</code>方法。示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector&gt;</span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>vector<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test <span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// initial vector</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        test<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 初始化后的vector:</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"初始化后的vector: \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span>num<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 使用clear清空vector</span>\n    test<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 清空元素后的vector：</span>\n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\nvector.size() = \"</span><span class=\"token operator\">&lt;&lt;</span>test<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n清空元素后的vector：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">初始化后的vector: 1 2 3 4 5 6 7 8<br/> vector.size() = 0<br/> 清空元素后的vector：</font></p>\n</blockquote>\n<h3><a id=\"font_size__4_59_swap_773\"></a><font size=\"4\"> 5.9 swap()——交换元素</font></h3>\n<p><font color=\"red\" size=\"4\"> ❤<strong>swap的作用就是交换两个vector的元素</strong>❤</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"4\">交换两个vector的元素，使用<code>swap()</code>方法，<code>vector1.swap(vector2)</code>,两个vector存储的元素类型必须相同，元素个数可以不同。示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector&gt;</span></span>\n\nusing std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\nusing std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\nusing std<span class=\"token operator\">::</span>vector<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test1 <span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test2 <span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// initial vector</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        test1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">14</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        test2<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 初始化后的vector:</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"初始化后的test1: \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> test1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span>num<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n初始化后的test2: \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> test2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span>num<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 使用swap交换test1和test2</span>\n    test1<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>test2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 交换元素后的test1：</span>\n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n交换元素后的test1：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> test1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n交换元素后的test2：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> test2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">初始化后的test1: 1 2 3 4 5 6 7 8<br/> 初始化后的test2: 10 11 12 13 14<br/> 交换元素后的test1：10 11 12 13 14<br/> 交换元素后的test2：1 2 3 4 5 6 7 8</font></p>\n</blockquote>\n<h3><a id=\"font_size__4_510_emplacefont_color__red_C11_825\"></a><font size=\"4\"> 5.10 emplace()——插入元素<font color=\"red\"> 【C++11】</font></font></h3>\n<blockquote>\n<p><font color=\"black\" size=\"4\">向vector中添加元素，使用<code>emplace(iterator,value)</code>方法，作用是向iterator迭代器指向元素的前边添加一个元素value。返回一个迭代器，指向新添加的元素。示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>vector<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 初始化test为【1，2，3，4，5】</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        test<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"初始化后的test为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 向begin()指向元素之前插入一个元素，返回迭代器it指向新元素</span>\n    <span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">emplace</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n使用emplace在test.begin()前插入元素后的test为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 在上边插入的新元素100前插入元素</span>\n    test<span class=\"token punctuation\">.</span><span class=\"token function\">emplace</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n使用emplace在100前插入元素后的test为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 在test尾部插入元素，即test.end()的前边</span>\n    test<span class=\"token punctuation\">.</span><span class=\"token function\">emplace</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n使用emplace在test.end()前(即test尾部)插入元素后的test为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">初始化后的test为：1 2 3 4 5<br/> 使用emplace在test.begin()前插入元素后的test为：100 1 2 3 4 5<br/> 使用emplace在100前插入元素后的test为：200 100 1 2 3 4 5<br/> 使用emplace在test.end()前插入元素后的test为：200 100 1 2 3 4 5 300</font></p>\n</blockquote>\n<h3><a id=\"font_size__4_511_emplace_backvectorfont_color__red__C11_875\"></a><font size=\"4\"> 5.11 emplace_back()——在vector尾部插入元素<font color=\"red\"> 【C++11】</font></font></h3>\n<blockquote>\n<p><font color=\"black\" size=\"4\">向vector中添加元素，使用<code>emplace_back(iterator,value)</code>方法，作用是向vector尾部添加一个元素value。示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>vector<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 初始化test为【1，2，3，4，5】</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        test<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"初始化后的test为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 向test尾部插入一个元素</span>\n    test<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n向test尾部插入一个元素后的test为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">初始化后的test为：1 2 3 4 5<br/> 向test尾部插入一个元素后的test为：1 2 3 4 5 100</font></p>\n</blockquote>\n<h2><a id=\"font_size__5_6_911\"></a><font size=\"5\"> 6、总结</font></h2>\n<p>Vector所有方法总结如下：</p>\n<table><thead><tr><th align=\"center\">方法名</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td align=\"center\">begin()</td><td>指向vector首元素的迭代器</td><td><code>vector&lt;Type&gt;::iterator</code></td></tr><tr><td align=\"center\">end()</td><td>指向vector尾元素下一个位置的迭代器</td><td><code>vector&lt;Type&gt;::iterator</code></td></tr><tr><td align=\"center\">rbegin()</td><td>指向vector尾元素的反向迭代器，即rbegin()指向尾元素，rbegin-1指向倒数第二个元素</td><td><code>vector&lt;Type&gt;::iterator</code></td></tr><tr><td align=\"center\">rend()</td><td>指向vector头元素前一个位置的反向迭代器，即rend()指向头元素前一个位置元素，rbegin-1指向第一个元素</td><td><code>vector&lt;Type&gt;::iterator</code></td></tr><tr><td align=\"center\">cbegin()</td><td>指向vector头元素的const迭代器，与begin()不同的是返回迭代器类型为vector::const_iterator</td><td><code>vector&lt;Type&gt;::const_iterator</code></td></tr><tr><td align=\"center\">cend()</td><td>指向vector尾元素下一个位置的const迭代器，与end()不同的是返回迭代器类型为vector::const_iterator</td><td><code>vector&lt;Type&gt;::const_iterator</code></td></tr><tr><td align=\"center\">crbegin()</td><td>指向尾元素的const迭代器，即反向®的const©头(begin)迭代器</td><td><code>vector&lt;Type&gt;::const_iterator</code></td></tr><tr><td align=\"center\">crend()</td><td>指向头元素下一个位置的const迭代器，即反向®的const©尾(end)迭代器</td><td><code>Vector&lt;Type&gt;::const_iterator</code></td></tr><tr><td align=\"center\">size()</td><td>返回vector中元素个数</td><td>-</td></tr><tr><td align=\"center\">max_size()</td><td>返回vector中最多能容纳元素个数</td><td>-</td></tr><tr><td align=\"center\">resize(n)</td><td>改变vector的大小为n</td><td>如果n比当前vector中元素个数大，则填充默认值</td></tr><tr><td align=\"center\">capacity()</td><td>当前分配给vector的容量大小</td><td>-</td></tr><tr><td align=\"center\">empty()</td><td>判断vector是否为空</td><td>-</td></tr><tr><td align=\"center\">reserve(n)</td><td>改变当前vecotr所分配空间的大小capacity为n</td><td>如果当前capacity大于n，则不变</td></tr><tr><td align=\"center\">shrink_to_fit()</td><td>改变当前vecotr所分配空间的大小为size()</td><td>-</td></tr><tr><td align=\"center\">push_back()</td><td>在vector的最后添加一个数据</td><td>-</td></tr><tr><td align=\"center\">pop_back()</td><td>去掉vector的最后一个数据</td><td>-</td></tr><tr><td align=\"center\">at(i)</td><td>得到编号位置i的数据</td><td>-</td></tr><tr><td align=\"center\">front()</td><td>得到vector头元素的引用</td><td>-</td></tr><tr><td align=\"center\">back()</td><td>得到vector的最后一个元素的引用</td><td>-</td></tr><tr><td align=\"center\">assign()</td><td>用新的元素替换vector中旧的元素</td><td>-</td></tr><tr><td align=\"center\">insert()</td><td>添加元素（任意位置）</td><td>-</td></tr><tr><td align=\"center\">erase()</td><td>删除元素（任意位置）</td><td>-</td></tr><tr><td align=\"center\">clear()</td><td>清空vector中的所有元素</td><td>-</td></tr><tr><td align=\"center\">swap()</td><td>交换两个vector的元素</td><td>-</td></tr><tr><td align=\"center\">emplace()</td><td>向vector中添加元素</td><td>-</td></tr><tr><td align=\"center\">emplace_back()</td><td>在vector尾部插入元素</td><td>-</td></tr></tbody></table>\n<blockquote>\n<p>结语： 本文详细总结了vector容器的一些方法，包括vector使用，vector初始化，vector迭代器，vector所有操作。<br/> vector begin(); vector end(); vector rbegin(); vector rend(); vector cbegin(); vector cend(); vector crbegin(); vector crend(); vector size(); vector max_size(); vector resize(n);vector capacity(); vector empty(); vector reserve(n); vector shrink_to_fit(); vector push_back(); vector pop_back() ;vector at(i);vector front(); vector back(); vector assign(); vector insert(); vector erase(); vector clear(); vector swap(); vector emplace(); vector emplace_back();<br/> 希望大家看完后能对vector的掌握更加深刻。<br/> 欢迎关注🔎点赞👍收藏⭐️留言📝</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-01-02 14:21:47", "summary": "前言博客主页：在下马农的碎碎念本文由在下马农原创，首发于首发时间：最近更新时间：此马非凡马，房星本是星。向前敲瘦骨，犹自带铜声。系列文章目录暂无作者水平有限，如发现错误，请留言轰炸哦！万分感谢！码字不"}