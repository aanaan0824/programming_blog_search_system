{"blogid": "123758874", "writerAge": "码龄13年", "writerBlogNum": "42", "writerCollect": "113", "writerComment": "13", "writerFan": "34", "writerGrade": "3级", "writerIntegral": "710", "writerName": "rockyou666", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123758874.jpg", "writerRankTotal": "46013", "writerRankWeekly": "88861", "writerThumb": "42", "writerVisitNum": "56025", "blog_read_count": "7662", "blog_time": "已于 2022-04-01 22:12:58 修改", "blog_title": "C++学习之路(一)：搭建C++开发环境", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_1\">前言</a></li><li><a href=\"#WindowsC_3\">一.Windows平台下C++环境搭建</a></li><li><ul><li><a href=\"#11_Visual_Studio_5\">1.1 Visual Studio安装</a></li><li><a href=\"#12_C_17\">1.2 创建C++项目</a></li></ul>\n</li><li><a href=\"#LinuxC_46\">二.Linux平台下C++环境搭建</a></li><li><ul><li><a href=\"#21__48\">2.1 安装编译工具</a></li><li><a href=\"#22_cmake_61\">2.2 cmake脚本编写</a></li></ul>\n</li><li><a href=\"#_119\">结束</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>前言</h1>\n<p>在学习Android源码过程中，特别在Framework及其更加底层中，常常遇到一些C++代码，导致对于Android源码一直一知半解；再一方面，NDK开发也会遇到一些C++的库，现在正好趁假期好好学习下C++。废话不多说，现在开始~(学习教程来自于前艺电(EA)游戏引擎工程师Cherno的C++教程<a href=\"https://www.youtube.com/c/TheChernoProject\">The Cherno(科学上网)</a>，B站上有不少该视频的翻译，在此感谢Cherno和翻译者的无私贡献~)</p>\n<h1><a id=\"WindowsC_3\"></a>一.Windows平台下C++环境搭建</h1>\n<p>在Windwos下开发一般是在VS Code和Visual Studio，这里先说下Visual Studio的搭建</p>\n<h2><a id=\"11_Visual_Studio_5\"></a>1.1 Visual Studio安装</h2>\n<p>Visual Studio的官方地址：<a href=\"https://visualstudio.microsoft.com/\">Visual Studio</a><br/> 通过上面的链接找到下载选项，然后选择\"Community\"版本，也就是所谓的社区版本。<br/> <img alt=\"Visual Studio\" src=\"..\\..\\static\\image\\066b425728c546c4b107fac3e5fc2d1c.png\"/></p>\n<p>这时候会下载一个Visual Studio的下载器，点击后自动下载安装，安装完毕实际上是一个Visual Studio Installer程序，你需要通过该程序安装你的Visual Studio，打开Visual Studio Installer，可以看到如下所示：<br/> <img alt=\"Visual Studio Installer\" src=\"..\\..\\static\\image\\e49a5e34430344619ad7d53ccf1ee0ff.png\"/><br/> 由于主要关注C++的学习，这里我们选择<strong>使用C++的桌面开发</strong>，选择之后，这里有个非常重要的选项就是<strong>安装位置</strong>，因为Visual Studio会默认选择在C盘安装，可能导致C盘容量不足。<br/> <img alt=\"安装路径\" src=\"..\\..\\static\\image\\617b83bf828c474582b6fbe1e04327e4.png\"/><br/> 我选择安装在D盘，IDE，下载缓存，共享组件工具和SDK最好都设置一下。</p>\n<p>再点击安装，安装Visual Studio 2022(这里我已经安装过了，所以没有显示安装按钮)。再等待一段时间之后就安装完成，然后就可以创建项目了。</p>\n<h2><a id=\"12_C_17\"></a>1.2 创建C++项目</h2>\n<p>打开Visual Studio 2022后依次点击 文件，新建，项目，如下图：<br/> <img alt=\"新建项目\" src=\"..\\..\\static\\image\\f2ad08c9d2ab41539f45b68a9f9d07cc.png\"/><br/> 新建项目后你会看到如下界面：<br/> <img alt=\"创建新项目\" src=\"..\\..\\static\\image\\ec30c0b2e11942b48d855a61f9bbfa20.png\"/><br/> 选择空项目，点击\"下一步\"，进入\"配置新项目\"界面<br/> <img alt=\"配置新项目\" src=\"..\\..\\static\\image\\77d25256de4242f782875e562d6339db.png\"/><br/> 填写好项目名称和项目位置，点击创建按钮，下面开始创建源文件，如下图：<br/> <img alt=\"新建项\" src=\"..\\..\\static\\image\\eac8adac39754e569cd0482c734ec1ae.png\"/><br/> 选择<strong>新建项</strong>之后选择**C++文件(.cpp)**命名好cpp文件名称，如下图：<br/> <img alt=\"添加新项\" src=\"..\\..\\static\\image\\9d0364e659674312bdd3c7ceeb1a64a7.png\"/><br/> 点击添加后，你会在左边\"解决方案\"中的源文件中看到Main.cpp，到这里就可以愉快的撸代码了。测试代码如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\n\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"hello world !\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上面的代码就是经典的输出\"hello world\"代码，点击文件上面的绿色的三角形，执行运行程序。<br/> <img alt=\"运行\" src=\"..\\..\\static\\image\\044e94da056148299a91717cf77d094f.png\"/><br/> 运行结果：<br/> <img alt=\"hello world!\" src=\"..\\..\\static\\image\\9e42fcbf6ed74f8ea10b763a004c38ea.png\"/><br/> 到此，我们完全的完成了IDE从安装到编写和运行的全过程。</p>\n<h1><a id=\"LinuxC_46\"></a>二.Linux平台下C++环境搭建</h1>\n<p>上面完成了在Windwos下C++环境搭建，接下来开始在Linux下搭建C++。我用的操作系统是Ubuntu版本16.04。</p>\n<h2><a id=\"21__48\"></a>2.1 安装编译工具</h2>\n<p>搭建C++编译环境需要用到g++，cmake，vim，通过apt-get命令将其下载并且安装。</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> cmake g++ <span class=\"token function\">vim</span>\n</code></pre>\n<p>有些时候在安装的时候可能需要管理员权限，所以在apt-get命令前面加上了sudo。使用以下命令查看是否安装完成。</p>\n<pre><code class=\"prism language-bash\">g++ -v\n<span class=\"token function\">vim</span> -v\ncmake -version\n</code></pre>\n<h2><a id=\"22_cmake_61\"></a>2.2 cmake脚本编写</h2>\n<p>当以上的软件安装完成后，可以利用cmake来编译C++了。我在home目录下创建一个project，再在project文件夹下创建src，用来存放C++文件，同时创建CMakeLists.txt文件。<br/> CMakeLists.txt文件：</p>\n<pre><code class=\"prism language-shell\"><span class=\"token comment\"># cmake的最低(高)版本的要求</span>\nCMAKE_MINIMUM_REQUIRED<span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span>\n\nproject <span class=\"token punctuation\">(</span>project<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># PROJECT_SOURCE_DIR CMakeLists.txt的所在目录路径</span>\n<span class=\"token comment\"># 设置library输出目录</span>\n<span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span>CMAKE_LIBRARY_OUTPUT_DIRECTORY <span class=\"token string\">\"<span class=\"token variable\">${PROJECT_SOURCE_DIR}</span>/output\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 设置可执行文件输出目录</span>\n<span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span>CMAKE_RUNTIME_OUTPUT_DIRECTORY <span class=\"token string\">\"<span class=\"token variable\">${PROJECT_SOURCE_DIR}</span>/output\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 设置C++编译选项</span>\n<span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span>CMAKE_CXX_FLAGS <span class=\"token string\">\"<span class=\"token variable\">${CMAKE_CXX_FLAGS}</span> -Wall -std=c++14\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 自定义变量，设置PROJECT_SOURCE_DIR/src</span>\n<span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span>SOURCE_PATH <span class=\"token string\">\"<span class=\"token variable\">${PROJECT_SOURCE_DIR}</span>/src\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 打印语句</span>\nmessage<span class=\"token punctuation\">(</span>STATUS <span class=\"token string\">\"C++ output path  <span class=\"token variable\">${CMAKE_RUNTIME_OUTPUT_DIRECTORY}</span>\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 打印语句</span>\nmessage<span class=\"token punctuation\">(</span>STATUS <span class=\"token string\">\"C++ options <span class=\"token variable\">${CMAKE_CXX_FLAGS}</span>\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 告知cmake源文件是SOURCE_PATH目录下后缀名为.cpp的文件</span>\n<span class=\"token function\">file</span> <span class=\"token punctuation\">(</span>GLOB source_files <span class=\"token string\">\"<span class=\"token variable\">${SOURCE_PATH}</span>/*.cpp\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 生成可执行的hello文件</span>\nadd_executable<span class=\"token punctuation\">(</span>hello <span class=\"token variable\">${source_files}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 生成so动态链接库，Android NDK开发用的比较多</span>\n<span class=\"token comment\">#add_library(hello SHARED ${source_files})</span>\n</code></pre>\n<p>然后在src目录下创建main.cpp，输入代码：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\n\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"hello world !\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这样就写好了cmake和C++文件，接下来就是实行cmake命令<br/> 命令如下：</p>\n<pre><code class=\"prism language-shell\">cmake <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">make</span>\n</code></pre>\n<p>输入命令之后会在CMakeLists.txt当前目录下生成output，在output目录中找到hello文件，使用<code>./output/hello</code>或者<code>./hello</code>执行，打印出\"hello world !\"</p>\n<h1><a id=\"_119\"></a>结束</h1>\n<p>Windwos平台上利用\"宇宙第一IDE\"Visual Studio，开发C++，同时方便调试，Linux平台上利用cmake脚本编译C++。后面的C++开发还是以Visual Studio为主，学习C++的核心语法。<br/> 至于Linux平台下的C++开发，后续会考虑vim加上各种插件来做为IDE。同时由于cmake和NDK开发的关系，后面会系统的学习cmake脚本。共勉之~</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-04-01 22:12:58", "summary": "文章目录前言一平台下环境搭建安装创建项目二平台下环境搭建安装编译工具脚本编写结束前言在学习源码过程中，特别在及其更加底层中，常常遇到一些代码，导致对于源码一直一知半解；再一方面，开发也会遇到一些的库，"}