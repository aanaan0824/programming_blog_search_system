{"blogid": "121871998", "writerAge": "码龄3年", "writerBlogNum": "47", "writerCollect": "242", "writerComment": "11", "writerFan": "29", "writerGrade": "4级", "writerIntegral": "1185", "writerName": "lei_gentle", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_121871998.jpg", "writerRankTotal": "42873", "writerRankWeekly": "281135", "writerThumb": "70", "writerVisitNum": "82288", "blog_read_count": "18494", "blog_time": "已于 2022-04-25 11:11:12 修改", "blog_title": "序列化和反序列化", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>我以前确实对序列化，乃至现在也是不是很熟悉，有时候查找资料，但依旧懵懵懂懂，不过还好遇到一个博主，确定写的挺好的，链接会放再底部</p>\n<p>废话不多说，先看官网定义：</p>\n<p>序列化 (Serialization)是将对象的状态信息转换为可以存储或传输的形式的过程。在序列化期间，对象将其当前状态写入到临时或持久性存储区。以后，可以通过从存储区中读取或反序列化对象的状态，重新创建该对象。</p>\n<p>序列化主要有两个用途</p>\n<ul><li>把对象的字节序列永久保存到硬盘上，通常存放在一个文件中（序列化对象）</li><li>在网络上传送对象的字节序列（网络传输对象）</li></ul>\n<p>实际上就是将数据持久化，防止一直存储在内存当中，消耗内存资源。而且序列化后也能更好的便于网络运输何传播</p>\n<ul><li>序列化：将java对象转换为字节序列</li><li>反序列化：把字节序列回复为原先的java对象</li></ul>\n<h3><a id=\"_18\"></a>对象如何序列化？</h3>\n<p>java目前没有一个关键字是直接定义一个所谓的“可持久化”对象</p>\n<p>对象的持久化和反持久化需要靠程序员在代码里手动<strong>显式地</strong>进行序列化和反序列化还原的动作。</p>\n<p>举个例子，假如我们要对<code>Student</code>类对象序列化到一个名为<code>student.txt</code>的文本文件中，然后再通过文本文件反序列化成<code>Student</code>类对象：</p>\n<p>按我的理解就是序列化：将一个对象转化为一种格式，能够更好的传输和电脑理解。</p>\n<p>反序列化是转换过来，便于人们观看的。</p>\n<p>先写一个实体类</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Serializable</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> score<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Student{\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\", age=\"</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span>\n                <span class=\"token string\">\", score=\"</span> <span class=\"token operator\">+</span> score <span class=\"token operator\">+</span>\n                <span class=\"token char\">'}'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//getter、setter省略</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>然后填写一个测试类</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> test01 <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>  <span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"linko\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span> <span class=\"token number\">18</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">setScore</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1000</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">ObjectOutputStream</span> objectOutputStream <span class=\"token operator\">=</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"student.txt\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        objectOutputStream<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span> student <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        objectOutputStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"序列化成功！已经生成student.txt文件\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==============================================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span>  <span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">ObjectInputStream</span> objectInputStream <span class=\"token operator\">=</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"student.txt\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span> objectInputStream<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        objectInputStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"反序列化结果为：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> student <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果：</p>\n<p><img alt=\"image-20211211111125205\" src=\"..\\..\\static\\image\\0c2cbd7d081ab726c55fdcbc280327c1.png\"/></p>\n<h3><a id=\"Serializable_95\"></a><code>Serializable</code>接口的作用</h3>\n<p>这时候我们来看下Serializable接口，这时候我们点进去，会发现这个接口是个空接口，并没有包含任何方法</p>\n<p><img alt=\"image-20211211111237128\" src=\"..\\..\\static\\image\\0d8d9f9acc77b518cf256b3d059f9854.png\"/></p>\n<p>我们会感觉这个接口没什么用，那这时我们不继承Serializable接口，运行一下试试</p>\n<p><img alt=\"image-20211211111501118\" src=\"..\\..\\static\\image\\a801228583870c08ac84ae6a8a98fac4.png\"/></p>\n<p>这时候我们会看到这个错误，<code>java.io.NotSerializableException</code>报出了没有序列化异常</p>\n<p>然后我们按照错误提示，由源码一直跟到<code>ObjectOutputStream</code>的<code>writeObject0()</code>方法底层（虽然我看不懂</p>\n<p><img alt=\"image-20211211112104380\" src=\"..\\..\\static\\image\\60a6ff9be77948f42e70b6f1744892b6.png\"/></p>\n<p>如果一个对象既不是<strong>字符串</strong>、<strong>数组</strong>、<strong>枚举</strong>，而且也没有实现<code>Serializable</code>接口的话，在序列化时就会抛出<code>NotSerializableException</code>异常！</p>\n<p>说的太好了哭，强烈推荐底部链接的那个博主</p>\n<p>他一说我就大概知道懂什么意思了。</p>\n<p>先说说<code>instanceof</code>，它是用来测试一个对象是否为一个类的实例</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">// remaining cases</span>\n<span class=\"token comment\">//判断这个obj对象是否是String类</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">writeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">,</span> unshared<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//判断这个obj对象是否是数组</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cl<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">writeArray</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">,</span> unshared<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//判断这个obj对象是否是枚举</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">writeEnum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">,</span> unshared<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//判断这个obj对象是否是实现序列化</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Serializable</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">writeOrdinaryObject</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">,</span> unshared<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//否则就报错</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//报错是否由有扩展信息，详细信息可以观看源码</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>extendedDebugInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NotSerializableException</span><span class=\"token punctuation\">(</span>\n            cl<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span> debugInfoStack<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NotSerializableException</span><span class=\"token punctuation\">(</span>cl<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>所以<code>Serializable</code>接口只是一个做标记用的</p>\n<p>它告诉代码只要是实现了<code>Serializable</code>接口的类都是可以被序列化的！然而真正的序列化动作不需要靠它完成。</p>\n<h3><a id=\"serialVersionUID_151\"></a><code>serialVersionUID</code>号有何用？</h3>\n<p>在我们写项目的时候，我们会经常看到这么这么一个语句。</p>\n<p>定义一个名为<code>serialVersionUID</code>的字段</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">4392658638228508589L</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>为什么有这句话呢，为什么要搞一个名为**<code>serialVersionUID</code>**的序列号</p>\n<p>继续做一个简单实验，依旧是上面的<code>Student</code>类，然后我们先不写序列号。然后在<code>Student</code>中添加一个字段，并添加序列号</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">4392658638228508589L</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> score<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> studentId<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>然后再次序列化和反序列化一下</p>\n<p>再然后我们拿刚才已经序列化好的<code>student.txt</code>文件，然后试着反序列化一下。</p>\n<p>在<code>test01</code>测试类中,我们将主函数的序列化调用的函数给删掉，再把序列号给删掉</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//serialize();</span>\n    <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们会发现报错了。太长了，没能截屏出来</p>\n<p>它说序列号不一致</p>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">Exception</span> in thread <span class=\"token string\">\"main\"</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>InvalidClassException</span><span class=\"token operator\">:</span> <span class=\"token class-name\"><span class=\"token namespace\">demo01<span class=\"token punctuation\">.</span></span>Student</span><span class=\"token punctuation\">;</span> local <span class=\"token keyword\">class</span> incompatible<span class=\"token operator\">:</span> stream classdesc serialVersionUID <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">4392658638228508589</span><span class=\"token punctuation\">,</span> local <span class=\"token keyword\">class</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2825960062149872719</span>\n\tat <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>ObjectStreamClass</span><span class=\"token punctuation\">.</span><span class=\"token function\">initNonProxy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectStreamClass</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">616</span><span class=\"token punctuation\">)</span>\n\tat <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>ObjectInputStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">readNonProxyDesc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">1843</span><span class=\"token punctuation\">)</span>\n\tat <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>ObjectInputStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">readClassDesc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">1713</span><span class=\"token punctuation\">)</span>\n\tat <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>ObjectInputStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">readOrdinaryObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n\tat <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>ObjectInputStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">readObject0</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">1535</span><span class=\"token punctuation\">)</span>\n\tat <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>ObjectInputStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">422</span><span class=\"token punctuation\">)</span>\n\tat demo01<span class=\"token punctuation\">.</span>test01<span class=\"token punctuation\">.</span><span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span>test01<span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span>\n\tat demo01<span class=\"token punctuation\">.</span>test01<span class=\"token punctuation\">.</span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span>test01<span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">41</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>从这几个地方我们可以看出几个重要的信息</p>\n<ul><li><strong>serialVersionUID是序列化前后的唯一标识符</strong></li><li><strong>默认如果没有人为显式定义过<code>serialVersionUID</code>，那编译器会为它自动声明一个！</strong></li></ul>\n<p><strong>第1个问题：</strong> <code>serialVersionUID</code>序列化ID，可以看成是序列化和反序列化过程中的“暗号”，在反序列化时，JVM会把字节流中的序列号ID和被序列化类中的序列号ID做比对，只有两者一致，才能重新反序列化，否则就会报异常来终止反序列化的过程。</p>\n<p>所以，为了<code>serialVersionUID</code>的确定性，写代码时还是建议，凡是<code>implements Serializable</code>的类，都最好人为显式地为它声明一个<code>serialVersionUID</code>明确值！</p>\n<p>当然，如果不想手动赋值，你也可以借助IDE的自动添加功能，比如我使用的<code>IntelliJ IDEA</code>，按<code>alt + enter</code>就可以为类自动生成和添加<code>serialVersionUID</code>字段，十分方便；</p>\n<h3><a id=\"_215\"></a>两种特殊情况</h3>\n<ul><li>凡是被<code>static</code>修饰的字段是不会被序列化的</li><li><s>凡是被<code>transient</code>修饰符修饰的字段也是不会被序列化的</s> 更正：经过@Programming_artist同学的修正和参考这位作者<a href=\"https://zhuanlan.zhihu.com/p/284345618\">Java中关键字transient解析</a>，这里不能一概而论。只有实现<code>Serializable</code>接口，被<code>transient</code>修饰符修饰的字段也是不会被序列化的 。后面详细解释一下</li></ul>\n<p>对于第一个，因为序列化保存的是对象的状态而非类的状态，所以会忽略<code>static</code>静态域。</p>\n<p>对于第二个，就需要了解<code>transient</code>修饰符的作用了（在实现<code>Serializable</code>接口的情况下</p>\n<p>如果在序列化某个类的对象时，就是不希望某个字段被序列化（比如这个字段存放的是隐私值，如：<code>密码</code>等），那这时就可以用<code>transient</code>修饰符来修饰该字段。</p>\n<p>比如在之前定义的<code>Student</code>类中，加入一个<strong>密码字段</strong>，但是不希望序列化到<code>txt</code>文本，则可以：</p>\n<p><img alt=\"image-20211211130118972\" src=\"..\\..\\static\\image\\9eeb72ed71d530ba84cd6aa7ef471c31.png\"/><br/> jvm是通过<code>Serializable</code>这个标识来实现序列化的，那么我们是否可以自己自定义是否决定序列化呢？答案是可以的，java给我们提供了<code>Externalizable</code>接口，让我们自己实现。<br/> <img alt=\"image-20220425105816374\" src=\"..\\..\\static\\image\\058ddcfbd1e4e30588b0f8379f374d03.png\"/><br/> 从实现的接口上看，它是继承了<code>Serializable</code>接口,但使用这个接口，需要实现<code>writeExternal</code>以及<code>readExternal</code>这两个方法，来自己实现序列化和反序列化。<br/> 实现的过程中，需要自己指定需要序列化的成员变量，此时，<strong>static和transient关键词都是不生效的</strong>，因为你重写了序列化中的方法。感觉这个static验证也可以再多写点（<s>有时间再更呜</s><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\78c637cbf1dd45af8ffc972eb53e3c92.png\"/><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e94d41129d0d48b7934881b8218140a2.png\"/></p>\n<h3><a id=\"_234\"></a>约束性加持（后面两个有时间再更）</h3>\n<p>从上面的过程可以看出，序列化和反序列化是有漏洞的，因为序列化和反序列化是有中间过程的，如果别人拿到中间字节流，然后加以伪造或篡改，那反序列化出来的对象就有一定风险了。</p>\n<h3><a id=\"_242\"></a>单例模式增强</h3>\n<p><a href=\"https://mp.weixin.qq.com/s/0EfIUB9E-0Oh_Clwuxswuw\">分享链接</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-04-25 11:11:12", "summary": "我以前确实对序列化，乃至现在也是不是很熟悉，有时候查找资料，但依旧懵懵懂懂，不过还好遇到一个博主，确定写的挺好的，链接会放再底部废话不多说，先看官网定义：序列化是将对象的状态信息转换为可以存储或传输的"}