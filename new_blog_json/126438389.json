{"blogid": "126438389", "writerAge": "码龄2年", "writerBlogNum": "23", "writerCollect": "102", "writerComment": "325", "writerFan": "1323", "writerGrade": "3级", "writerIntegral": "783", "writerName": "柿子__", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126438389.jpg", "writerRankTotal": "21708", "writerRankWeekly": "3173", "writerThumb": "198", "writerVisitNum": "9178", "blog_read_count": "1201", "blog_time": "已于 2022-08-21 14:19:58 修改", "blog_title": "C++综合项目-boost搜索引擎", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_1\">一.项目简介</a></li><li><ul><li><a href=\"#11__3\">1.1 项目背景</a></li><li><a href=\"#12__10\">1.2 相关技术和库</a></li><li><ul><li><a href=\"#121__12\">1.2.1 正排索引</a></li><li><a href=\"#122__25\">1.2.2 倒排索引</a></li><li><a href=\"#123__53\">1.2.3 相关库</a></li></ul>\n</li><li><a href=\"#13__63\">1.3 搜索引擎的原理简述</a></li></ul>\n</li><li><a href=\"#__78\">二. 项目的实现过程</a></li><li><ul><li><a href=\"#21_boost_80\">2.1 下载boost文档库</a></li><li><ul><li><a href=\"#211_82\">2.1.1下载</a></li><li><a href=\"#212__92\">2.1.2 解压</a></li><li><a href=\"#213__105\">2.1.3 将文档拷贝到代码目录</a></li></ul>\n</li><li><a href=\"#22__123\">2.2 解析文档</a></li><li><ul><li><a href=\"#221__125\">2.2.1 整体框架</a></li><li><a href=\"#222_boost_166\">2.2.2 安装boost库</a></li><li><a href=\"#223_parsercpp_173\">2.2.3 parser.cpp的实现</a></li><li><a href=\"#225_Parsercpp_366\">2.2.5 编译Parser.cpp的命令</a></li><li><a href=\"#226__372\">2.2.6 运行结果</a></li></ul>\n</li><li><a href=\"#23__377\">2.3 建立索引</a></li><li><ul><li><a href=\"#231__379\">2.3.1 整体框架</a></li><li><a href=\"#332__cppjieba_445\">3.3.2 安装cppjieba分词库</a></li><li><ul><li><a href=\"#3321_cppjieba_447\">3.3.2.1 cppjieba安装</a></li><li><a href=\"#3322_cppjieba_460\">3.3.2.2 cppjieba使用</a></li></ul>\n</li><li><a href=\"#333_indexhpp_506\">3.3.3 index.hpp的实现</a></li></ul>\n</li><li><a href=\"#24__716\">2.4 搜索模块</a></li><li><ul><li><a href=\"#241__718\">2.4.1 整体框架</a></li><li><a href=\"#242_jsoncpp_754\">2.4.2 安装jsoncpp</a></li><li><ul><li><a href=\"#2421_jsoncpp_756\">2.4.2.1 安装jsoncpp</a></li><li><a href=\"#2422_jsoncpp_763\">2.4.2.2 使用jsoncpp</a></li></ul>\n</li><li><a href=\"#243_searcherhpp_795\">2.4.3 searcher.hpp的实现</a></li></ul>\n</li><li><a href=\"#25__917\">2.5 服务模块</a></li><li><ul><li><a href=\"#251_httplib_919\">2.5.1 安装httplib</a></li><li><a href=\"#252_gccg_929\">2.5.2 升级gcc/g++版本</a></li><li><a href=\"#253_httplib_951\">2.5.3 httplib的使用</a></li><li><a href=\"#254_servercpp_977\">2.5.4 server.cpp的实现</a></li><li><a href=\"#255__1013\">2.5.5 编译命令</a></li><li><a href=\"#256_indexhtml_1019\">2.5.6 index.html文件</a></li><li><a href=\"#257__1216\">2.5.7 运行结果</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>一.项目简介</h1>\n<h2><a id=\"11__3\"></a>1.1 项目背景</h2>\n<blockquote>\n<p>我们平时在用浏览器搜索时，服务器给我们返回的分别是跟搜索关键字相关的一个个网站信息，网站信息分别包括网站的标题，网站内容的简述，和该网站的url。在点击标题后，会跳转到对应链接的页面。平时我们用的搜索引擎，比如说百度，谷歌等等，他们都是搜索全网的信息的，我们项目做的是一个小范围的搜索引擎，一个用boost库实现的boost站内搜索。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d6c117d8156a440ea2b4d02515ea17a9.png\"/></p>\n<h2><a id=\"12__10\"></a>1.2 相关技术和库</h2>\n<h3><a id=\"121__12\"></a>1.2.1 正排索引</h3>\n<p><strong>正排索引：从通过文档ID找到文档内容</strong></p>\n<blockquote>\n<p><strong>文档1：</strong> 我喜欢用C/C++写代码</p>\n<p><strong>文档2：</strong> 我喜欢阅读典籍</p>\n</blockquote>\n<table><thead><tr><th align=\"center\">文档ID</th><th>文档内容</th></tr></thead><tbody><tr><td align=\"center\">文档1</td><td>我喜欢用C/C++写代码</td></tr><tr><td align=\"center\">文档2</td><td>我喜欢阅读典籍</td></tr></tbody></table>\n<h3><a id=\"122__25\"></a>1.2.2 倒排索引</h3>\n<p><strong>倒排索引：通过关键字联系到相关的文档ID</strong></p>\n<blockquote>\n<p><strong>文档1：</strong> 我喜欢用C/C++写代码</p>\n<p><strong>文档2：</strong> 我喜欢阅读典籍</p>\n</blockquote>\n<p><strong>分词：</strong></p>\n<blockquote>\n<p><strong>文档1：</strong> 我 | 喜欢 | 用 | C | C++ | C/C++ | 写 | 代码 | 写代码</p>\n<p><strong>文档2：</strong> 我 | 喜欢 | 阅读 | 典籍</p>\n</blockquote>\n<table><thead><tr><th align=\"center\">关键字</th><th></th></tr></thead><tbody><tr><td align=\"center\">我</td><td>文档1，文档2</td></tr><tr><td align=\"center\">喜欢</td><td>文档1，文档2</td></tr><tr><td align=\"center\">用</td><td>文档1</td></tr><tr><td align=\"center\">C</td><td>文档1</td></tr><tr><td align=\"center\">C++</td><td>文档1</td></tr><tr><td align=\"center\">C/C++</td><td>文档1</td></tr><tr><td align=\"center\">写</td><td>文档1</td></tr><tr><td align=\"center\">代码</td><td>文档1</td></tr><tr><td align=\"center\">写代码</td><td>文档1</td></tr><tr><td align=\"center\">阅读</td><td>文档2</td></tr><tr><td align=\"center\">典籍</td><td>文档2</td></tr></tbody></table>\n<h3><a id=\"123__53\"></a>1.2.3 相关库</h3>\n<blockquote>\n<p><strong>cppjieba：</strong> 提供分词的相关接口</p>\n<p><strong>boost：</strong> 提供在当前目录下遍历所有子目录文件的迭代器</p>\n<p><strong>Jsoncpp：</strong> 提供可以将格式化的数据和json字符串相互转换的接口</p>\n<p><strong>cpp-httplib：</strong> 提供http相关接口</p>\n</blockquote>\n<h2><a id=\"13__63\"></a>1.3 搜索引擎的原理简述</h2>\n<blockquote>\n<p><strong>第一步：</strong> 我们需要去boost官网下载boost库，这个库里面包含boost官网的所有文档的html文件。</p>\n<p><strong>第二步：</strong> 我们写一个解析程序从一个个html文件的源码中提取标题、内容和url，将他们保存到硬盘的一个data.txt文件中。</p>\n<p><strong>第三步：</strong> 读取data.txt文件，建立正排和倒排索引，提供索引的接口来获取正排和倒排数据</p>\n<p><strong>第四步：</strong> 写一个html页面，提供给用户一个搜索功能。</p>\n<p><strong>一次访问过程：</strong> 当用户通过浏览器向服务器发送搜索信息时，服务器会根据搜索的关键字获取对应倒排数据，然后通过倒排数据找到正排ID，从而找到正排的文档内容。然后构建出网页的标题，简述（内容的一部分），url，通过json字符串响应回去，然后在用户的浏览器显示出一个个网页信息。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5022ff3816c84724a95b9e28108af236.png\"/></p>\n<h1><a id=\"__78\"></a>二. 项目的实现过程</h1>\n<h2><a id=\"21_boost_80\"></a>2.1 下载boost文档库</h2>\n<h3><a id=\"211_82\"></a>2.1.1下载</h3>\n<pre><code class=\"prism language-c++\">// 链接：https://www.boost.org/users/download/  \n// 如果网络比较卡大家可以私信我给网盘链接\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b742f68541654f13b2068fca9d6acc77.png\"/></p>\n<h3><a id=\"212__92\"></a>2.1.2 解压</h3>\n<pre><code class=\"prism language-shell\"><span class=\"token comment\"># 关于拷贝文件：怎么把文件从windows拷贝Linux大家可以在网上搜一下教程</span>\n<span class=\"token comment\"># 我是在代码的目录建一个tool目录，专门放解压包的</span>\n\n<span class=\"token comment\"># 解压命令（大家如果下的版本不一样记得把1_80_0换成你们下的版本）</span>\n<span class=\"token function\">tar</span> -zxf boost_1_80_0.tar.gz \n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\19a58dff9d1d47e3875c6622e0436860.png\"/></p>\n<h3><a id=\"213__105\"></a>2.1.3 将文档拷贝到代码目录</h3>\n<pre><code class=\"prism language-shell\"><span class=\"token comment\"># 因为boost库的文档有20000多个，为了减轻代码调试阶段服务器的压力，我们只拷贝部分的html文件</span>\n<span class=\"token comment\"># 我在调试阶段只拷贝了boost_1_80_0/doc/html目录下的.html（不包括子目录的）</span>\n\n<span class=\"token comment\"># 第一步：在代码的目录建一个boost_1_80_0/doc/html目录</span>\n<span class=\"token function\">mkdir</span> -p boost_1_80_0/doc/html  <span class=\"token comment\"># -p选项可以递归创建目录</span>\n\n<span class=\"token comment\"># 第二步：然后在代码的目录下执行下面命令</span>\n<span class=\"token function\">cp</span> -rf tool/boost_1_80_0/doc/html/*.html boost_1_80_0/doc/html/\n\n<span class=\"token comment\"># 通过tree命令查看就可以发现后缀为.html的文件被我们复制过去了（没有安装tree的大家可以安装一下）</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b52ed623e1124ecfb14c1ae48c835de8.png\"/></p>\n<h2><a id=\"22__123\"></a>2.2 解析文档</h2>\n<h3><a id=\"221__125\"></a>2.2.1 整体框架</h3>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> src_path <span class=\"token operator\">=</span> <span class=\"token string\">\"./boost_1_80_0\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// html文档的根目录</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dest_path <span class=\"token operator\">=</span> <span class=\"token string\">\"./data.txt\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 保存数据的文件路径</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">DocInfo</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    std<span class=\"token double-colon punctuation\">::</span>string title<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 标题</span>\n    std<span class=\"token double-colon punctuation\">::</span>string conent<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 内容</span>\n    std<span class=\"token double-colon punctuation\">::</span>string url<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 链接</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">void</span> <span class=\"token function\">EnumFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> src_path<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> files_path<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Parser</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> files_path<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>DocInfo<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> doc_list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>DocInfo<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> doc_list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> dest_path<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 一. 枚举所有html文件</span>\n    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&gt;</span> files_path<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">EnumFile</span><span class=\"token punctuation\">(</span>src_path<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>files_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 二. 读取文件，解析出标题、内容、url</span>\n    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>DocInfo<span class=\"token operator\">&gt;</span> doc_list<span class=\"token punctuation\">;</span> \n    <span class=\"token function\">Parser</span><span class=\"token punctuation\">(</span>files_path<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>doc_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 三. 保存解析出来的信息</span>\n    <span class=\"token function\">Save</span><span class=\"token punctuation\">(</span>doc_list<span class=\"token punctuation\">,</span> dest_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"222_boost_166\"></a>2.2.2 安装boost库</h3>\n<pre><code class=\"prism language-shell\"><span class=\"token comment\"># 枚举文件的时候我们需要用到boost库，下面是安装命令</span>\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> -y boost-devel\n</code></pre>\n<h3><a id=\"223_parsercpp_173\"></a>2.2.3 parser.cpp的实现</h3>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// Parser.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/filesystem.hpp&gt;</span>  <span class=\"token comment\">// sudo yum install -y boost-devel下载boost库</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream&gt;</span>  <span class=\"token comment\">// for ifstream ofstream</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> src_path <span class=\"token operator\">=</span> <span class=\"token string\">\"./boost_1_80_0\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// html文档的根目录</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dest_path <span class=\"token operator\">=</span> <span class=\"token string\">\"./data.txt\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 保存数据的文件路径</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">DocInfo</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    std<span class=\"token double-colon punctuation\">::</span>string title<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 标题</span>\n    std<span class=\"token double-colon punctuation\">::</span>string conent<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 内容</span>\n    std<span class=\"token double-colon punctuation\">::</span>string url<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 链接</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">void</span> <span class=\"token function\">EnumFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> src_path<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> files_path<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">namespace</span> fs <span class=\"token operator\">=</span> boost<span class=\"token double-colon punctuation\">::</span>filesystem<span class=\"token punctuation\">;</span>\n    fs<span class=\"token double-colon punctuation\">::</span>path <span class=\"token function\">root_path</span><span class=\"token punctuation\">(</span>src_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 设置html文档的根目录，后面递归是在这个跟目录遍历的</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fs<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span>root_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> src_path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"is not exists!\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 递归的目录/文件迭代器</span>\n    fs<span class=\"token double-colon punctuation\">::</span>recursive_directory_iterator end<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 定义一个空的迭代器，用来判断遍历是否结束</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>fs<span class=\"token double-colon punctuation\">::</span>recursive_directory_iterator <span class=\"token function\">it</span><span class=\"token punctuation\">(</span>root_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> end<span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 排除扩展名不是.html的文件</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it<span class=\"token operator\">-&gt;</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">extension</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\".html\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> \n        files_path<span class=\"token operator\">-&gt;</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">-&gt;</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token function\">ParserTitle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> read_data<span class=\"token punctuation\">,</span> DocInfo<span class=\"token operator\">*</span> doc<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// &lt;title&gt;I am title!&lt;/title&gt;  我们需要提取的是I am title这部分的数据</span>\n    size_t start <span class=\"token operator\">=</span> read_data<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;title&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 注意这里找到位置仅仅是&lt;title&gt;的开头位置</span>\n    start <span class=\"token operator\">+=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;/title&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 我们需要越过&lt;title&gt;的长度才到达标题的开头I的位置</span>\n    size_t end <span class=\"token operator\">=</span> read_data<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;/title&gt;\"</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 找到&lt;/title&gt;的开头，也就是我们标题的结尾位置</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">==</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token double-colon punctuation\">::</span>npos <span class=\"token operator\">||</span> end <span class=\"token operator\">==</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token double-colon punctuation\">::</span>npos <span class=\"token operator\">||</span> start <span class=\"token operator\">&gt;</span> end<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    doc<span class=\"token operator\">-&gt;</span>title <span class=\"token operator\">=</span> read_data<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">ParserContent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> read_data<span class=\"token punctuation\">,</span> DocInfo<span class=\"token operator\">*</span> doc<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 状态机</span>\n    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">status</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        LABLE<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 标签状态</span>\n        CONTENT  <span class=\"token comment\">// 内容状态</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    status s <span class=\"token operator\">=</span> LABLE<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 开始为标签状态</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> ch <span class=\"token operator\">:</span> read_data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// &lt;p&gt;&lt;h3&gt;For Test&lt;/h3&gt;&lt;/p&gt;，像这里我们需要的内容是For Test</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>LABLE <span class=\"token operator\">==</span> s<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">'&gt;'</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">{<!-- --></span>\n                s <span class=\"token operator\">=</span> CONTENT<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> \n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">'&lt;'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                s <span class=\"token operator\">=</span> LABLE<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> \n            <span class=\"token punctuation\">{<!-- --></span>\n                doc<span class=\"token operator\">-&gt;</span>conent <span class=\"token operator\">+=</span> ch<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token function\">ParserUrl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> file<span class=\"token punctuation\">,</span> DocInfo<span class=\"token operator\">*</span> doc<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// ./boost_1_80_0/doc/html/about.html 我们本地html的相对路径</span>\n    <span class=\"token comment\">// https://www.boost.org/doc/libs/1_80_0/doc/html/about.html  // boost官方库的链接</span>\n\t<span class=\"token comment\">// 我们的目标就是将本地的路径拼接成boost官方库的链接</span>\n\t<span class=\"token comment\">// 我们可以https://www.boost.org/doc/libs/ + 1_80_0/doc/html/about.html这样拼接</span>\n\tdoc<span class=\"token operator\">-&gt;</span>url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://www.boost.org/doc/libs/\"</span><span class=\"token punctuation\">;</span>\n    size_t pos <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1_80_0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token double-colon punctuation\">::</span>npos <span class=\"token operator\">==</span> pos<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    doc<span class=\"token operator\">-&gt;</span>url <span class=\"token operator\">+=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 拼接</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Parser</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> files_path<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>DocInfo<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> doc_list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    DocInfo doc<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> file <span class=\"token operator\">:</span> files_path<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        std<span class=\"token double-colon punctuation\">::</span>ifstream <span class=\"token function\">in</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>ios<span class=\"token double-colon punctuation\">::</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">is_open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> file <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" open failed!\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 一行一行读取，最后放到一个大的字符串read_data里面</span>\n        std<span class=\"token double-colon punctuation\">::</span>string line<span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>string read_data<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span> \n            read_data <span class=\"token operator\">+=</span> line<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 1. 解析标题</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">ParserTitle</span><span class=\"token punctuation\">(</span>read_data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 2. 解析内容</span>\n        <span class=\"token function\">ParserContent</span><span class=\"token punctuation\">(</span>read_data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n        <span class=\"token comment\">// 3. 拼接url</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">ParserUrl</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        doc_list<span class=\"token operator\">-&gt;</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 将doc转换成右值，减少拷贝</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token function\">Save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>DocInfo<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> doc_list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> dest_path<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 我们保存的格式是title\\3content\\3url\\ntitle\\3</span>\n    <span class=\"token comment\">// 也就是用\\3将title、content、url分开，用\\n将每个文档的数据分开</span>\n    \n    <span class=\"token comment\">// 将所有文档信息保存到一个字符串里面</span>\n    std<span class=\"token double-colon punctuation\">::</span>string save_str<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> doc <span class=\"token operator\">:</span> doc_list<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        save_str <span class=\"token operator\">+=</span> doc<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">;</span>\n        save_str <span class=\"token operator\">+=</span> <span class=\"token char\">'\\3'</span><span class=\"token punctuation\">;</span>\n        save_str <span class=\"token operator\">+=</span> doc<span class=\"token punctuation\">.</span>conent<span class=\"token punctuation\">;</span>\n        save_str <span class=\"token operator\">+=</span> <span class=\"token char\">'\\3'</span><span class=\"token punctuation\">;</span>\n        save_str <span class=\"token operator\">+=</span> doc<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">;</span>\n        save_str <span class=\"token operator\">+=</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    std<span class=\"token double-colon punctuation\">::</span>ofstream <span class=\"token function\">out</span><span class=\"token punctuation\">(</span>dest_path<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>ios<span class=\"token double-colon punctuation\">::</span>out <span class=\"token operator\">|</span> std<span class=\"token double-colon punctuation\">::</span>ios<span class=\"token double-colon punctuation\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">is_open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> dest_path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" open failed!\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    out<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>save_str<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> save_str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 一. 枚举所有html文件</span>\n    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&gt;</span> files_path<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">EnumFile</span><span class=\"token punctuation\">(</span>src_path<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>files_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 二. 读取文件，解析出标题、内容、url</span>\n    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>DocInfo<span class=\"token operator\">&gt;</span> doc_list<span class=\"token punctuation\">;</span> \n    <span class=\"token function\">Parser</span><span class=\"token punctuation\">(</span>files_path<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>doc_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 三. 保存解析出来的信息</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">Save</span><span class=\"token punctuation\">(</span>doc_list<span class=\"token punctuation\">,</span> dest_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Save erro!\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"225_Parsercpp_366\"></a>2.2.5 编译Parser.cpp的命令</h3>\n<pre><code class=\"prism language-shell\">g++ -o parser parser.cpp -std<span class=\"token operator\">=</span>c++11 -lboost_system -lboost_filesystem\n</code></pre>\n<h3><a id=\"226__372\"></a>2.2.6 运行结果</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2627b8d113c14df2a9c56097db7b1201.png\"/></p>\n<h2><a id=\"23__377\"></a>2.3 建立索引</h2>\n<h3><a id=\"231__379\"></a>2.3.1 整体框架</h3>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_map&gt;</span></span>\n\n<span class=\"token keyword\">namespace</span> bt_index \n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">DocInfo</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        std<span class=\"token double-colon punctuation\">::</span>string title<span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>string content<span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>string url<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">uint32_t</span> doc_id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">InvertedElem</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">uint32_t</span> doc_id<span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>string word<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">index</span> \n    <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">// 成员变量</span>\n        std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>DocInfo<span class=\"token operator\">&gt;</span> forward_list<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 保存正排索引的数据</span>\n        std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>InvertedElem<span class=\"token operator\">&gt;&gt;</span> inverted_list<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 保存倒排索引的数据</span>\n        <span class=\"token keyword\">static</span> index<span class=\"token operator\">*</span> instance<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指向单例对象的指针</span>\n        <span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>mutex mtx<span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        \t<span class=\"token comment\">// 1. 建立倒排和正排索引</span>\n            <span class=\"token keyword\">bool</span> <span class=\"token function\">BuildIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> data_path<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n        \n        \t<span class=\"token comment\">// 2. 获取索引信息</span>\n            DocInfo<span class=\"token operator\">*</span> <span class=\"token function\">GetForwardIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">uint32_t</span><span class=\"token operator\">&amp;</span> doc_id<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n            std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>InvertedElem<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> <span class=\"token function\">GetInvetedIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> word<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>  \n        \n        \t<span class=\"token comment\">// 3. 获取单例</span>\n            <span class=\"token keyword\">static</span> index<span class=\"token operator\">*</span> <span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">~</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> index<span class=\"token operator\">&amp;</span> ind<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\n        index<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> index<span class=\"token operator\">&amp;</span> ind<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\n\t\t\n        <span class=\"token comment\">// 建立正排索引</span>\n        DocInfo<span class=\"token operator\">*</span> <span class=\"token function\">BuildForwardIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> line<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n        \n        <span class=\"token comment\">// 建立倒排索引</span>\n        <span class=\"token keyword\">bool</span> <span class=\"token function\">BuildInvertedIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> DocInfo<span class=\"token operator\">&amp;</span> doc<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 静态成员变量的初始化</span>\n    index<span class=\"token operator\">*</span> index<span class=\"token double-colon punctuation\">::</span>instance <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>mutex index<span class=\"token double-colon punctuation\">::</span>mtx<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"332__cppjieba_445\"></a>3.3.2 安装cppjieba分词库</h3>\n<h4><a id=\"3321_cppjieba_447\"></a>3.3.2.1 cppjieba安装</h4>\n<pre><code class=\"prism language-shell\"><span class=\"token comment\"># cppjieba是一个用来分词的库</span>\n<span class=\"token function\">tar</span> -zxf cppjieba.tgz  <span class=\"token comment\"># 解压命令</span>\n\n<span class=\"token comment\"># 为了能够正常使用这个库我们还需要将deps目录下的limonp复制一份到include/cppjieba目录下</span>\n<span class=\"token function\">cp</span> -rf deps/limonp/ include/cppjieba  <span class=\"token comment\"># 复制的命令，注意这条命令是在解压出来的cppjieba目录下执行的 </span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a55f94e679474147a8cdea81d491edf0.png\"/></p>\n<h4><a id=\"3322_cppjieba_460\"></a>3.3.2.2 cppjieba使用</h4>\n<p><strong>建立软链接</strong></p>\n<pre><code class=\"prism language-shell\"><span class=\"token comment\"># 首先是在代码所在目录（我的是newboost）建立软链接，方便使用</span>\n<span class=\"token function\">ln</span> -s tool/cppjieba/dict ./dict  \n<span class=\"token function\">ln</span> -s tool/cppjieba/include/cppjieba/ ./cppjieba \n</code></pre>\n<p><strong>测试代码</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"cppjieba/Jieba.hpp\"</span>  <span class=\"token comment\">// 我的cppjieba已经软链接到当前目录了</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> DICT_PATH <span class=\"token operator\">=</span> <span class=\"token string\">\"./dict/jieba.dict.utf8\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> HMM_PATH <span class=\"token operator\">=</span> <span class=\"token string\">\"./dict/hmm_model.utf8\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> USER_DICT_PATH <span class=\"token operator\">=</span> <span class=\"token string\">\"./dict/user.dict.utf8\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> IDF_PATH <span class=\"token operator\">=</span> <span class=\"token string\">\"./dict/idf.utf8\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> STOP_WORD_PATH <span class=\"token operator\">=</span> <span class=\"token string\">\"./dict/stop_words.utf8\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    cppjieba<span class=\"token double-colon punctuation\">::</span>Jieba <span class=\"token function\">jieba</span><span class=\"token punctuation\">(</span>DICT_PATH<span class=\"token punctuation\">,</span> HMM_PATH<span class=\"token punctuation\">,</span> USER_DICT_PATH<span class=\"token punctuation\">,</span> IDF_PATH<span class=\"token punctuation\">,</span> STOP_WORD_PATH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> words<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 接收切分的词</span>\n    string s<span class=\"token punctuation\">;</span>\n    s <span class=\"token operator\">=</span> <span class=\"token string\">\"小明硕士毕业于中国科学院计算所\"</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"原句：\"</span> <span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    jieba<span class=\"token punctuation\">.</span><span class=\"token function\">CutForSearch</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"分词后：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> word <span class=\"token operator\">:</span> words<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> word <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" | \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>运行结果</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ee9fd9c4c46b4f4a9dcabc6fbb4845d5.png\"/></p>\n<h3><a id=\"333_indexhpp_506\"></a>3.3.3 index.hpp的实现</h3>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_map&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream&gt;</span>  <span class=\"token comment\">// for ifstream</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/algorithm/string.hpp&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"cppjieba/Jieba.hpp\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;mutex&gt;</span></span>\n\n<span class=\"token comment\">// cppjieba分词想要用到的字典库</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> DICT_PATH <span class=\"token operator\">=</span> <span class=\"token string\">\"./dict/jieba.dict.utf8\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> HMM_PATH <span class=\"token operator\">=</span> <span class=\"token string\">\"./dict/hmm_model.utf8\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> USER_DICT_PATH <span class=\"token operator\">=</span> <span class=\"token string\">\"./dict/user.dict.utf8\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> IDF_PATH <span class=\"token operator\">=</span> <span class=\"token string\">\"./dict/idf.utf8\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> STOP_WORD_PATH <span class=\"token operator\">=</span> <span class=\"token string\">\"./dict/stop_words.utf8\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 解析好的数据路径</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> data_path <span class=\"token operator\">=</span> <span class=\"token string\">\"./data.txt\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> bt_index \n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">DocInfo</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        std<span class=\"token double-colon punctuation\">::</span>string title<span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>string content<span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>string url<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">uint32_t</span> doc_id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">InvertedElem</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">uint32_t</span> doc_id<span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>string word<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">jieba_util</span> \n    <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">static</span> cppjieba<span class=\"token double-colon punctuation\">::</span>Jieba jieba<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">CutString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> word_list<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                jieba<span class=\"token punctuation\">.</span><span class=\"token function\">CutForSearch</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>word_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    cppjieba<span class=\"token double-colon punctuation\">::</span>Jieba jieba_util<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">jieba</span><span class=\"token punctuation\">(</span>DICT_PATH<span class=\"token punctuation\">,</span> HMM_PATH<span class=\"token punctuation\">,</span> USER_DICT_PATH<span class=\"token punctuation\">,</span> IDF_PATH<span class=\"token punctuation\">,</span> STOP_WORD_PATH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    \n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">index</span> \n    <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">// 成员变量</span>\n        std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>DocInfo<span class=\"token operator\">&gt;</span> forward_list<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 保存正排索引的数据</span>\n        std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>InvertedElem<span class=\"token operator\">&gt;&gt;</span> inverted_list<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 保存倒排索引的数据</span>\n        <span class=\"token keyword\">static</span> index<span class=\"token operator\">*</span> instance<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指向单例对象的指针</span>\n        <span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>mutex mtx<span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n            <span class=\"token comment\">// 获取正排索引数据</span>\n            DocInfo<span class=\"token operator\">*</span> <span class=\"token function\">GetForwardIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">uint32_t</span><span class=\"token operator\">&amp;</span> doc_id<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>doc_id <span class=\"token operator\">&lt;</span> forward_list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>forward_list<span class=\"token punctuation\">[</span>doc_id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span> \n                <span class=\"token punctuation\">{<!-- --></span>\n                    std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"out of range!\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// 获取倒排拉链</span>\n            std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>InvertedElem<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> <span class=\"token function\">GetInvetedIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> word<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> inverted_list<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inverted_list<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> it<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"have not found\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span> \n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>it<span class=\"token operator\">-&gt;</span>second<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// 建立正排和倒排拉链</span>\n            <span class=\"token keyword\">bool</span> <span class=\"token function\">BuildIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> data_path<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                std<span class=\"token double-colon punctuation\">::</span>ifstream <span class=\"token function\">in</span><span class=\"token punctuation\">(</span>data_path<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>ios<span class=\"token double-colon punctuation\">::</span>in <span class=\"token operator\">|</span> std<span class=\"token double-colon punctuation\">::</span>ios<span class=\"token double-colon punctuation\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">is_open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> data_path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" open failed!\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                std<span class=\"token double-colon punctuation\">::</span>string line<span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    DocInfo<span class=\"token operator\">*</span> doc <span class=\"token operator\">=</span> <span class=\"token function\">BuildForwardIndex</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span> <span class=\"token operator\">==</span> doc<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">else</span> \n                    <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token function\">BuildInvertedIndex</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                in<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n           \n            <span class=\"token comment\">// 获取单例</span>\n            <span class=\"token keyword\">static</span> index<span class=\"token operator\">*</span> <span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">// 双重判断，避免获取单例之后还继续上锁，提高效率</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span> <span class=\"token operator\">==</span> instance<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    mtx<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span> <span class=\"token operator\">==</span> instance<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{<!-- --></span>\n                        instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    mtx<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">~</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> index<span class=\"token operator\">&amp;</span> ind<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\n        index<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> index<span class=\"token operator\">&amp;</span> ind<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 建立正排索引</span>\n        DocInfo<span class=\"token operator\">*</span> <span class=\"token function\">BuildForwardIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> line<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n             DocInfo doc<span class=\"token punctuation\">;</span>\n             std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&gt;</span> result<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 用来接收切分好的数据</span>\n\n             <span class=\"token comment\">// 当有多个'\\3'出现时，token_compress_on可以过滤多余的空行</span>\n             boost<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">is_any_of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span>token_compress_on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             \n             <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">{<!-- --></span>\n                 std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"split erro!\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n                 <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">}</span>\n\n             doc<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n             doc<span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n             doc<span class=\"token punctuation\">.</span>url <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n             doc<span class=\"token punctuation\">.</span>doc_id <span class=\"token operator\">=</span> forward_list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 用forward_list的数组下标做doc_id</span>\n             forward_list<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>forward_list<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 建立倒排索引</span>\n        <span class=\"token keyword\">bool</span> <span class=\"token function\">BuildInvertedIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> DocInfo<span class=\"token operator\">&amp;</span> doc<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n             <span class=\"token keyword\">struct</span> <span class=\"token class-name\">cnt</span> \n             <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">int</span> title_cnt<span class=\"token punctuation\">;</span> \n                <span class=\"token keyword\">int</span> content_cnt<span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            \n             std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">,</span> cnt<span class=\"token operator\">&gt;</span> cnt_map<span class=\"token punctuation\">;</span>\n\n             <span class=\"token comment\">// 切分标题</span>\n             std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&gt;</span> title_words<span class=\"token punctuation\">;</span>\n             jieba_util<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CutString</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>title_words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 分词</span>\n             <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> word <span class=\"token operator\">:</span> title_words<span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> tmp_cnt <span class=\"token operator\">=</span> cnt_map<span class=\"token punctuation\">[</span>word<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                tmp_cnt<span class=\"token punctuation\">.</span>title_cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">}</span>\n             \n             std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&gt;</span> content_words<span class=\"token punctuation\">;</span>\n             jieba_util<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CutString</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>content_words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> word <span class=\"token operator\">:</span> content_words<span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">{<!-- --></span>\n                 <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> tmp_cnt <span class=\"token operator\">=</span> cnt_map<span class=\"token punctuation\">[</span>word<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                 tmp_cnt<span class=\"token punctuation\">.</span>content_cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">}</span>\n\n             <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> pair <span class=\"token operator\">:</span> cnt_map<span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">{<!-- --></span>\n                 InvertedElem elem<span class=\"token punctuation\">;</span>\n                 elem<span class=\"token punctuation\">.</span>doc_id <span class=\"token operator\">=</span> doc<span class=\"token punctuation\">.</span>doc_id<span class=\"token punctuation\">;</span>\n                 elem<span class=\"token punctuation\">.</span>word <span class=\"token operator\">=</span> pair<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n                 <span class=\"token comment\">// 在标题出现权重加10，内容加1，因为标题出现的会在内容重复出现，所以出现在标题加9就好了</span>\n                 elem<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">=</span> pair<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>title_cnt <span class=\"token operator\">*</span> <span class=\"token number\">9</span> <span class=\"token operator\">+</span> pair<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>content_cnt <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                 inverted_list<span class=\"token punctuation\">[</span>pair<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 静态成员变量的初始化</span>\n    index<span class=\"token operator\">*</span> index<span class=\"token double-colon punctuation\">::</span>instance <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>mutex index<span class=\"token double-colon punctuation\">::</span>mtx<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"24__716\"></a>2.4 搜索模块</h2>\n<h3><a id=\"241__718\"></a>2.4.1 整体框架</h3>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once </span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"index.hpp\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm&gt;</span>  <span class=\"token comment\">// for sort</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;jsoncpp/json/json.h&gt;</span></span>\n<span class=\"token keyword\">namespace</span> bt_searcher\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">InvertedElems</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">uint32_t</span> doc_id<span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&gt;</span> words<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">InvertedElems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">weight</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">searcher</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n        bt_index<span class=\"token double-colon punctuation\">::</span>index<span class=\"token operator\">*</span> index<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n        <span class=\"token comment\">// 初始化</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">InitSearcher</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> data_path<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 提供搜索，获取倒排和正排索引数据</span>\n        <span class=\"token keyword\">bool</span> <span class=\"token function\">Searcher</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> input<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">*</span> json_str<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"242_jsoncpp_754\"></a>2.4.2 安装jsoncpp</h3>\n<h4><a id=\"2421_jsoncpp_756\"></a>2.4.2.1 安装jsoncpp</h4>\n<pre><code class=\"prism language-shell\"><span class=\"token comment\"># 安装命令</span>\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> -y jsoncpp-devel\n</code></pre>\n<h4><a id=\"2422_jsoncpp_763\"></a>2.4.2.2 使用jsoncpp</h4>\n<p><strong>代码</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;jsoncpp/json/json.h&gt;</span> </span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>   \n    Json<span class=\"token double-colon punctuation\">::</span>Value root<span class=\"token punctuation\">;</span>\n    root<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"李华\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 可以看成是一种key-value结构</span>\n    root<span class=\"token punctuation\">[</span><span class=\"token string\">\"ID\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"0001\"</span><span class=\"token punctuation\">;</span>\n    Json<span class=\"token double-colon punctuation\">::</span>FastWriter write<span class=\"token punctuation\">;</span>\n    string json_str <span class=\"token operator\">=</span> write<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 将root对象转换成字符串</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> json_str <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>编译</strong></p>\n<pre><code class=\"prism language-shell\">g++ demo.cpp -ljsoncpp  <span class=\"token comment\"># 需要链接josncpp的动态库</span>\n</code></pre>\n<p><strong>运行结果</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fbd1801efb9c4710abd53f064226e8f8.png\"/></p>\n<h3><a id=\"243_searcherhpp_795\"></a>2.4.3 searcher.hpp的实现</h3>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once </span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"index.hpp\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm&gt;</span>  <span class=\"token comment\">// for sort</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;jsoncpp/json/json.h&gt;</span></span>\n<span class=\"token keyword\">namespace</span> bt_searcher\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 将word变成数组，因为搜索的关键字中可能有多个关键字对应一个文档</span>\n    <span class=\"token comment\">// 为了使文档只出现一次，我们将所以倒排拉链的文档都去重</span>\n    <span class=\"token comment\">// 相同文档的将权重加起来，把映射这个文档的关键字填写到数组里面</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">InvertedElems</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">uint32_t</span> doc_id<span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&gt;</span> words<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">InvertedElems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">weight</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">searcher</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n        bt_index<span class=\"token double-colon punctuation\">::</span>index<span class=\"token operator\">*</span> index<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n        <span class=\"token comment\">// 初始化</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">InitSearcher</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> data_path<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 1. 获取单例</span>\n            index <span class=\"token operator\">=</span> bt_index<span class=\"token double-colon punctuation\">::</span>index<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"获取单例成功\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 2. 建立索引</span>\n            index<span class=\"token operator\">-&gt;</span><span class=\"token function\">BuildIndex</span><span class=\"token punctuation\">(</span>data_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"建立索引成功\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 提供搜索，获取倒排和正排索引数据</span>\n        <span class=\"token keyword\">bool</span> <span class=\"token function\">Searcher</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> input<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">*</span> json_str<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 将输入的关键字进行分词</span>\n            std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&gt;</span> words<span class=\"token punctuation\">;</span>\n            bt_index<span class=\"token double-colon punctuation\">::</span>jieba_util<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CutString</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\">// 获取倒排索引</span>\n            std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>InvertedElems<span class=\"token operator\">&gt;</span> inverted_list_all<span class=\"token punctuation\">;</span>  \n            std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">uint32_t</span><span class=\"token punctuation\">,</span> InvertedElems<span class=\"token operator\">&gt;</span> tokens_map<span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> word <span class=\"token operator\">:</span> words<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> word <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n                std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>bt_index<span class=\"token double-colon punctuation\">::</span>InvertedElem<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> inverted_list <span class=\"token operator\">=</span> index<span class=\"token operator\">-&gt;</span><span class=\"token function\">GetInvetedIndex</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span> <span class=\"token operator\">==</span> inverted_list<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> elem <span class=\"token operator\">:</span> <span class=\"token operator\">*</span>inverted_list<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    InvertedElems<span class=\"token operator\">&amp;</span> item <span class=\"token operator\">=</span> tokens_map<span class=\"token punctuation\">[</span>elem<span class=\"token punctuation\">.</span>doc_id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    item<span class=\"token punctuation\">.</span>doc_id <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">.</span>doc_id<span class=\"token punctuation\">;</span>\n                    item<span class=\"token punctuation\">.</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">.</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    item<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">+=</span> elem<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> pair <span class=\"token operator\">:</span> tokens_map<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    inverted_list_all<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// 排序</span>\n            std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>inverted_list_all<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> inverted_list_all<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> InvertedElems<span class=\"token operator\">&amp;</span> e1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> InvertedElems<span class=\"token operator\">&amp;</span> e2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">return</span> e1<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">&gt;</span> e2<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\">// 获取正排索引,将数据写入json字符串里面</span>\n            Json<span class=\"token double-colon punctuation\">::</span>Value root<span class=\"token punctuation\">;</span>\n            \n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> InvertedElems<span class=\"token operator\">&amp;</span> elem <span class=\"token operator\">:</span> inverted_list_all<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                bt_index<span class=\"token double-colon punctuation\">::</span>DocInfo<span class=\"token operator\">*</span> doc <span class=\"token operator\">=</span> index<span class=\"token operator\">-&gt;</span><span class=\"token function\">GetForwardIndex</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">.</span>doc_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                Json<span class=\"token double-colon punctuation\">::</span>Value item<span class=\"token punctuation\">;</span>\n                item<span class=\"token punctuation\">[</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> doc<span class=\"token operator\">-&gt;</span>title<span class=\"token punctuation\">;</span>\n                item<span class=\"token punctuation\">[</span><span class=\"token string\">\"desc\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">GetDescribe</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">.</span>words<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> doc<span class=\"token operator\">-&gt;</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                item<span class=\"token punctuation\">[</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> doc<span class=\"token operator\">-&gt;</span>url<span class=\"token punctuation\">;</span>\n                root<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            Json<span class=\"token double-colon punctuation\">::</span>FastWriter write<span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">*</span>json_str <span class=\"token operator\">=</span> write<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n        std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">GetDescribe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> word<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> content<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 我们想要截取的描述是这个词的前50字节到这个词的后100个字节</span>\n            size_t start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// start和end先设置一个默认值</span>\n            size_t end <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            size_t pos <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token double-colon punctuation\">::</span>npos <span class=\"token operator\">==</span> pos<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"erro!!!\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> \n\n            <span class=\"token comment\">// 调整start和end的位置</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&gt;</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                start <span class=\"token operator\">=</span> pos <span class=\"token operator\">-</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">+</span> <span class=\"token number\">100</span> <span class=\"token operator\">&lt;</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                end <span class=\"token operator\">=</span> pos <span class=\"token operator\">+</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            std<span class=\"token double-colon punctuation\">::</span>string str <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            str <span class=\"token operator\">+=</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"25__917\"></a>2.5 服务模块</h2>\n<h3><a id=\"251_httplib_919\"></a>2.5.1 安装httplib</h3>\n<pre><code class=\"prism language-shell\"><span class=\"token comment\"># 下载0.7.15版本的zip，传到我们的云服务器或者虚拟机解压</span>\n<span class=\"token comment\"># https://github.com/yhirose/cpp-httplib/tags?after=v0.8.3  </span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0086a34ea8ea49ff92d1d8ceb479114c.png\"/></p>\n<h3><a id=\"252_gccg_929\"></a>2.5.2 升级gcc/g++版本</h3>\n<pre><code class=\"prism language-shell\"><span class=\"token comment\"># httplib需要比较新的编译器去编译，我们要把gcc/g++升级成比较新的</span>\n<span class=\"token comment\"># 本次项目的编译器是升级到7.3.1 httplib用的是0.7.15版本</span>\n<span class=\"token comment\"># 查看gcc/g++版本</span>\ngcc -v\ng++ -v\n\n<span class=\"token comment\"># 安装scl工具</span>\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> centos-release-scl scl-utils-build\n\n<span class=\"token comment\"># 升级gcc/g++</span>\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> -y devtoolset-7-gcc devtoolset-7-gcc-c++\n\n<span class=\"token comment\"># 临时开启scl</span>\nscl <span class=\"token builtin class-name\">enable</span> devtoolset-7 <span class=\"token function\">bash</span>  <span class=\"token comment\"># 开启后，再查看gcc/g++版本就变成7.3.1了</span>\n\n<span class=\"token comment\"># 设置开机自动开启scl</span>\n<span class=\"token function\">vim</span> ~/.bash_profile <span class=\"token comment\"># scl enable devtoolset-7 bash 将这条命令添加的最后</span>\n</code></pre>\n<h3><a id=\"253_httplib_951\"></a>2.5.3 httplib的使用</h3>\n<p><strong>代码</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// 编译时需要添加 -lpthread选项</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"httplib.h\"</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>   \n    httplib<span class=\"token double-colon punctuation\">::</span>Server server<span class=\"token punctuation\">;</span>\n    server<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/s\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> httplib<span class=\"token double-colon punctuation\">::</span>Request<span class=\"token operator\">&amp;</span> req<span class=\"token punctuation\">,</span> httplib<span class=\"token double-colon punctuation\">::</span>Response<span class=\"token operator\">&amp;</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">set_content</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/plain; charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0.0.0.0\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8081</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>运行截图</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\22b9b4b18d114cda9762119c31bb298d.png\"/></p>\n<h3><a id=\"254_servercpp_977\"></a>2.5.4 server.cpp的实现</h3>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"searcher.hpp\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"index.hpp\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"httplib.h\"</span></span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> html_root <span class=\"token operator\">=</span> <span class=\"token string\">\"./html\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 1. 创建对象，进行搜索初始化</span>\n    bt_searcher<span class=\"token double-colon punctuation\">::</span>searcher search<span class=\"token punctuation\">;</span>\n    search<span class=\"token punctuation\">.</span><span class=\"token function\">InitSearcher</span><span class=\"token punctuation\">(</span>data_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    httplib<span class=\"token double-colon punctuation\">::</span>Server server<span class=\"token punctuation\">;</span>\n    server<span class=\"token punctuation\">.</span><span class=\"token function\">set_base_dir</span><span class=\"token punctuation\">(</span>html_root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 设置网页的根目录</span>\n    \n    <span class=\"token comment\">// http://192.168.1.10:8081/s?word=hello  </span>\n    <span class=\"token comment\">// s?后面跟的是搜索参数， word就是一个搜索关键字</span>\n    server<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/s\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>search<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> httplib<span class=\"token double-colon punctuation\">::</span>Request<span class=\"token operator\">&amp;</span> req<span class=\"token punctuation\">,</span> httplib<span class=\"token double-colon punctuation\">::</span>Response<span class=\"token operator\">&amp;</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>req<span class=\"token punctuation\">.</span><span class=\"token function\">has_param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"word\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"收到请求，客户端没有带参数\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">set_content</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"必须要有搜索关键字\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/plain;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            std<span class=\"token double-colon punctuation\">::</span>string json_str<span class=\"token punctuation\">;</span>\n            std<span class=\"token double-colon punctuation\">::</span>string word <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">get_param_value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"word\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 获取搜索关键字的值</span>\n            search<span class=\"token punctuation\">.</span><span class=\"token function\">Searcher</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>json_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">set_content</span><span class=\"token punctuation\">(</span>json_str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0.0.0.0\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8081</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"255__1013\"></a>2.5.5 编译命令</h3>\n<pre><code class=\"prism language-shell\">g++ -o server server.cpp -std<span class=\"token operator\">=</span>c++11 -ljsoncpp -lpthread\n</code></pre>\n<h3><a id=\"256_indexhtml_1019\"></a>2.5.6 index.html文件</h3>\n<pre><code class=\"prism language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://code.jquery.com/jquery-2.1.1.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>boost 搜索引擎<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token style\"><span class=\"token language-css\">\n        <span class=\"token comment\">/* 去掉网页中的所有的默认内外边距，html的盒子模型 */</span>\n        <span class=\"token selector\">*</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">/* 设置外边距 */</span>\n            <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">/* 设置内边距 */</span>\n            <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">/* 将我们的body内的内容100%和html的呈现吻合 */</span>\n        <span class=\"token selector\">html,\n        body</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">/* 类选择器.container */</span>\n        <span class=\"token selector\">.container</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">/* 设置div的宽度 */</span>\n            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 800px<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">/* 通过设置外边距达到居中对齐的目的 */</span>\n            <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0px auto<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">/* 设置外边距的上边距，保持元素和网页的上部距离 */</span>\n            <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">/* 复合选择器，选中container 下的 search */</span>\n        <span class=\"token selector\">.container .search</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">/* 宽度与父标签保持一致 */</span>\n            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">/* 高度设置为52px */</span>\n            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 52px<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">/* 先选中input标签， 直接设置标签的属性，先要选中， input：标签选择器*/</span>\n        <span class=\"token comment\">/* input在进行高度设置的时候，没有考虑边框的问题 */</span>\n        <span class=\"token selector\">.container .search input</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">/* 设置left浮动 */</span>\n            <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">/* 设置边框属性：边框的宽度，样式，颜色 */</span>\n            <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 2px solid gray<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">/* 去掉input输入框的有边框 */</span>\n            <span class=\"token property\">border-right</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">/* 设置内边距，默认文字不要和左侧边框紧挨着 */</span>\n            <span class=\"token property\">padding-left</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">/* 设置input内部的字体的颜色和样式 */</span>\n            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #CCC<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">/* 先选中button标签， 直接设置标签的属性，先要选中， button：标签选择器*/</span>\n        <span class=\"token selector\">.container .search button</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">/* 设置left浮动 */</span>\n            <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 54px<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">/* 设置button的背景颜色，#4e6ef2 */</span>\n            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #4e4ef2<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">border</span><span class=\"token punctuation\">:</span>2px solid #4e6ef2<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">/* 设置button中的字体颜色 */</span>\n            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #FFF<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">/* 设置字体的大小 */</span>\n            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 19px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span>Georgia<span class=\"token punctuation\">,</span> <span class=\"token string\">'Times New Roman'</span><span class=\"token punctuation\">,</span> Times<span class=\"token punctuation\">,</span> serif<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token selector\">.container .result</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token selector\">.container .result .item</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token selector\">.container .result .item a</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">/* 设置为块级元素，单独站一行 */</span>\n            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">/* a标签的下划线去掉 */</span>\n            <span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">/* 设置a标签中的文字的字体大小 */</span>\n            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">/* 设置字体的颜色 */</span>\n            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #4e6ef2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token selector\">.container .result .item a:hover</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> underline<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token selector\">.container .result .item p</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 5px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 16px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span><span class=\"token string\">'Lucida Sans'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Lucida Sans Regular'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Lucida Grande'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Lucida Sans Unicode'</span><span class=\"token punctuation\">,</span> Geneva<span class=\"token punctuation\">,</span> Verdana<span class=\"token punctuation\">,</span> sans-serif<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token selector\">.container .result .item i</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">/* 设置为块级元素，单独站一行 */</span>\n            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">/* 取消斜体风格 */</span>\n            <span class=\"token property\">font-style</span><span class=\"token punctuation\">:</span> normal<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>search<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>请输入搜索关键字<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">Search</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>搜索一下<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>result<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token comment\">&lt;!-- 动态生成网页内容 --&gt;</span>\n            <span class=\"token comment\">&lt;!-- &lt;div class=\"item\"&gt;\n                &lt;a href=\"#\"&gt;这是标题&lt;/a&gt;\n                &lt;p&gt;这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要&lt;/p&gt;\n                &lt;i&gt;https://search.gitee.com/?skin=rec&amp;type=repository&amp;q=cpp-httplib&lt;/i&gt;\n            &lt;/div&gt;\n            &lt;div class=\"item\"&gt;\n                &lt;a href=\"#\"&gt;这是标题&lt;/a&gt;\n                &lt;p&gt;这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要&lt;/p&gt;\n                &lt;i&gt;https://search.gitee.com/?skin=rec&amp;type=repository&amp;q=cpp-httplib&lt;/i&gt;\n            &lt;/div&gt;\n            &lt;div class=\"item\"&gt;\n                &lt;a href=\"#\"&gt;这是标题&lt;/a&gt;\n                &lt;p&gt;这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要&lt;/p&gt;\n                &lt;i&gt;https://search.gitee.com/?skin=rec&amp;type=repository&amp;q=cpp-httplib&lt;/i&gt;\n            &lt;/div&gt;\n            &lt;div class=\"item\"&gt;\n                &lt;a href=\"#\"&gt;这是标题&lt;/a&gt;\n                &lt;p&gt;这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要&lt;/p&gt;\n                &lt;i&gt;https://search.gitee.com/?skin=rec&amp;type=repository&amp;q=cpp-httplib&lt;/i&gt;\n            &lt;/div&gt;\n            &lt;div class=\"item\"&gt;\n                &lt;a href=\"#\"&gt;这是标题&lt;/a&gt;\n                &lt;p&gt;这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要这是摘要&lt;/p&gt;\n                &lt;i&gt;https://search.gitee.com/?skin=rec&amp;type=repository&amp;q=cpp-httplib&lt;/i&gt;\n            &lt;/div&gt; --&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n        <span class=\"token keyword\">function</span> <span class=\"token function\">Search</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 是浏览器的一个弹出框</span>\n            <span class=\"token comment\">// alert(\"hello js!\");</span>\n            <span class=\"token comment\">// 1. 提取数据, $可以理解成就是JQuery的别称</span>\n            <span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".container .search input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"query = \"</span> <span class=\"token operator\">+</span> query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//console是浏览器的对话框，可以用来进行查看js数据</span>\n\n            <span class=\"token comment\">//2. 发起http请求,ajax: 属于一个和后端进行数据交互的函数，JQuery中的</span>\n            $<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/s?word=\"</span> <span class=\"token operator\">+</span> query<span class=\"token punctuation\">,</span>\n                <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">BuildHtml</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">function</span> <span class=\"token function\">BuildHtml</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 获取html中的result标签</span>\n            <span class=\"token keyword\">let</span> result_lable <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".container .result\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 清空历史搜索结果</span>\n            result_lable<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">let</span> elem <span class=\"token keyword\">of</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">// console.log(elem.title);</span>\n                <span class=\"token comment\">// console.log(elem.url);</span>\n                <span class=\"token keyword\">let</span> a_lable <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;a&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> elem<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">href</span><span class=\"token operator\">:</span> elem<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span>\n                    <span class=\"token comment\">// 跳转到新的页面</span>\n                    <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token string\">\"_blank\"</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">let</span> p_lable <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;p&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> elem<span class=\"token punctuation\">.</span>desc\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">let</span> i_lable <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;i&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> elem<span class=\"token punctuation\">.</span>url\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">let</span> div_lable <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;div&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">\"item\"</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                a_lable<span class=\"token punctuation\">.</span><span class=\"token function\">appendTo</span><span class=\"token punctuation\">(</span>div_lable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                p_lable<span class=\"token punctuation\">.</span><span class=\"token function\">appendTo</span><span class=\"token punctuation\">(</span>div_lable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                i_lable<span class=\"token punctuation\">.</span><span class=\"token function\">appendTo</span><span class=\"token punctuation\">(</span>div_lable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                div_lable<span class=\"token punctuation\">.</span><span class=\"token function\">appendTo</span><span class=\"token punctuation\">(</span>result_lable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p><strong>注意，index.html需要放在你的网页根目录上，我的网络根目录是代码目录下的html目录</strong></p>\n<h3><a id=\"257__1216\"></a>2.5.7 运行结果</h3>\n<p><strong>启动服务器</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\61dbb06422a0499284e6329872813e12.png\"/></p>\n<p><strong>浏览器访问</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dc1673dfde294f0ab0b32f13a8ce7da7.png\"/></p>\n<p><strong>搜索结果</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a5c54bc4b19140fe9ca753807b9622b7.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 1, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-08-21 14:19:58", "summary": "文章目录一项目简介项目背景相关技术和库正排索引倒排索引相关库搜索引擎的原理简述二项目的实现过程下载文档库下载解压将文档拷贝到代码目录解析文档整体框架安装库的实现编译的命令运行结果建立索引整体框架安装分"}