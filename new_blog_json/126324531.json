{"blogid": "126324531", "writerAge": "码龄1年", "writerBlogNum": "108", "writerCollect": "9463", "writerComment": "5182", "writerFan": "23624", "writerGrade": "7级", "writerIntegral": "16276", "writerName": "热爱编程的小白白", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126324531.jpg", "writerRankTotal": "549", "writerRankWeekly": "28", "writerThumb": "6442", "writerVisitNum": "229738", "blog_read_count": "1153", "blog_time": "已于 2022-08-17 16:31:35 修改", "blog_title": "【SSM框架】搭建MyBatis", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E4%BA%8C%E3%80%81%E6%90%AD%E5%BB%BAMyBatis-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81%E6%90%AD%E5%BB%BAMyBatis\">搭建MyBatis</a></p>\n<p id=\"1%E3%80%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83-toc\" style=\"margin-left:40px;\"><a href=\"#1%E3%80%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83\">1、开发环境</a></p>\n<p id=\"2%E3%80%81%E5%88%9B%E5%BB%BAmaven%E5%B7%A5%E7%A8%8B-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81%E5%88%9B%E5%BB%BAmaven%E5%B7%A5%E7%A8%8B\">2、创建maven工程</a></p>\n<p id=\"3%E3%80%81%E5%88%9B%E5%BB%BAMyBatis%E7%9A%84%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:40px;\"><a href=\"#3%E3%80%81%E5%88%9B%E5%BB%BAMyBatis%E7%9A%84%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">3、创建MyBatis的核心配置文件</a></p>\n<p id=\"4%E3%80%81%E5%88%9B%E5%BB%BAmapper%E6%8E%A5%E5%8F%A3-toc\" style=\"margin-left:40px;\"><a href=\"#4%E3%80%81%E5%88%9B%E5%BB%BAmapper%E6%8E%A5%E5%8F%A3\">4、创建mapper接口</a></p>\n<p id=\"5%E3%80%81%E5%88%9B%E5%BB%BAMyBatis%E7%9A%84%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:40px;\"><a href=\"#5%E3%80%81%E5%88%9B%E5%BB%BAMyBatis%E7%9A%84%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6\">5、创建MyBatis的映射文件</a></p>\n<p id=\"%C2%A06%E3%80%81%E9%80%9A%E8%BF%87junit%E6%B5%8B%E8%AF%95%E5%8A%9F%E8%83%BD-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A06%E3%80%81%E9%80%9A%E8%BF%87junit%E6%B5%8B%E8%AF%95%E5%8A%9F%E8%83%BD\"> 6、通过junit测试功能</a></p>\n<p id=\"7%E3%80%81%E5%8A%A0%E5%85%A5log4j%E6%97%A5%E5%BF%97%E5%8A%9F%E8%83%BD-toc\" style=\"margin-left:40px;\"><a href=\"#7%E3%80%81%E5%8A%A0%E5%85%A5log4j%E6%97%A5%E5%BF%97%E5%8A%9F%E8%83%BD\">7、加入log4j日志功能</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<p></p>\n<blockquote>\n<p>🍓个人主页：<a href=\"https://blog.csdn.net/Javascript_tsj?type=blog\" title=\"个人主页\">个人主页</a></p>\n<p>🍒系列专栏：<a href=\"https://blog.csdn.net/javascript_tsj/category_11957185.html?spm=1001.2014.3001.5482\" title=\"SSM框架\">SSM框架</a></p>\n<p>💬推荐一款模拟面试、刷题神器，从基础到大厂面试题👉<a href=\"https://www.nowcoder.com/link/pc_csdncpt_xbb_java\" title=\"点击跳转刷题网站进行注册学习\">点击跳转刷题网站进行注册学习</a></p>\n</blockquote>\n<p></p>\n<h1 id=\"%E4%BA%8C%E3%80%81%E6%90%AD%E5%BB%BAMyBatis\"><span style=\"color:#ff9900;\"><strong>搭建</strong><strong>MyBatis </strong></span></h1>\n<h2 id=\"1%E3%80%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83\"><span style=\"color:#4da8ee;\"><strong>1</strong><strong>、开发环境 </strong></span></h2>\n<p>IDE：idea 2019.2</p>\n<p>构建工具：maven 3.5.4</p>\n<p>MySQL版本：MySQL 5.7</p>\n<p>MyBatis版本：MyBatis 3.5.7</p>\n<blockquote>\n<p>MySQL不同版本的注意事项</p>\n<p>1、驱动类driver-class-name</p>\n<p>MySQL 5版本使用jdbc5驱动，驱动类使用：com.mysql.jdbc.Driver</p>\n<p>MySQL 8版本使用jdbc8驱动，驱动类使用：com.mysql.cj.jdbc.Driver</p>\n<p>2、连接地址url</p>\n<p>MySQL 5版本的url：</p>\n<p>jdbc:mysql://localhost:3306/ssm</p>\n<p>MySQL 8版本的url：</p>\n<p>jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC</p>\n<p>否则运行测试用例报告如下错误：</p>\n<p>java.sql.SQLException: The server time zone value 'ÖÐ¹ú±ê×¼Ê±¼ä' is unrecognized or</p>\n<p>represents more</p>\n</blockquote>\n<h2 id=\"2%E3%80%81%E5%88%9B%E5%BB%BAmaven%E5%B7%A5%E7%A8%8B\"><span style=\"color:#4da8ee;\"><strong>2</strong><strong>、创建</strong><strong>maven</strong><strong>工程 </strong></span></h2>\n<p id=\"a%3E%E6%89%93%E5%8C%85%E6%96%B9%E5%BC%8F%EF%BC%9Ajar\"><strong>a&gt;</strong><strong>打包方式：</strong><strong>jar </strong></p>\n<p id=\"b%3E%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96\"><strong>b&gt;</strong><strong>引入依赖</strong></p>\n<pre><code>  &lt;dependencies&gt; &lt;!-- Mybatis核心 --&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.mybatis&lt;/groupId&gt;\n      &lt;artifactId&gt;mybatis&lt;/artifactId&gt;\n      &lt;version&gt;3.5.7&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;!-- junit测试 --&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;junit&lt;/groupId&gt;\n      &lt;artifactId&gt;junit&lt;/artifactId&gt;\n      &lt;version&gt;4.12&lt;/version&gt;\n      &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n    &lt;!-- MySQL驱动 --&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;mysql&lt;/groupId&gt;\n      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n      &lt;version&gt;5.1.3&lt;/version&gt;\n    &lt;/dependency&gt;\n  &lt;/dependencies&gt;\n</code></pre>\n<h2 id=\"3%E3%80%81%E5%88%9B%E5%BB%BAMyBatis%E7%9A%84%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span style=\"color:#4da8ee;\"><strong>3</strong><strong>、创建</strong><strong>MyBatis</strong><strong>的核心配置文件 </strong></span></h2>\n<blockquote>\n<p>习惯上命名为mybatis-config.xml，这个文件名仅仅只是建议，并非强制要求。将来整合Spring之后，这个配置文件可以省略，所以大家操作时可以直接复制、粘贴。</p>\n<p>核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息</p>\n<p>核心配置文件存放的位置是src/main/resources目录下</p>\n</blockquote>\n<p><img alt=\"\" height=\"547\" src=\"..\\..\\static\\image\\2146535636564387adf761933607f2d5.png\" width=\"611\"/></p>\n<p></p>\n<p>提示:</p>\n<p><strong>下面的  username 和 password 为mysql的账号密码   根据自身实际情况进行改写  </strong></p>\n<p></p>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;\n&lt;configuration&gt;\n    &lt;!--设置连接数据库的环境--&gt;\n    &lt;environments default=\"development\"&gt;\n        &lt;environment id=\"development\"&gt;\n            &lt;transactionManager type=\"JDBC\"/&gt;\n            &lt;dataSource type=\"POOLED\"&gt;\n                &lt;property name=\"driver\" value=\"com.mysql.jdbc.Driver\"/&gt;\n                &lt;property name=\"url\" value=\"jdbc:mysql://localhost:3306/ssm? serverTimezone=UTC\"/&gt;\n                &lt;property name=\"username\" value=\"root\"/&gt;\n                &lt;property name=\"password\" value=\"root\"/&gt;\n            &lt;/dataSource&gt;\n        &lt;/environment&gt;\n    &lt;/environments&gt;\n    &lt;!--引入映射文件--&gt;\n    &lt;mappers&gt;\n        &lt;mapper resource=\"mappers/UserMapper.xml\"/&gt;\n    &lt;/mappers&gt;\n&lt;/configuration&gt;</code></pre>\n<h2 id=\"4%E3%80%81%E5%88%9B%E5%BB%BAmapper%E6%8E%A5%E5%8F%A3\"><span style=\"color:#4da8ee;\"><strong>4</strong><strong>、创建</strong><strong>mapper</strong><strong>接口 </strong></span></h2>\n<p></p>\n<blockquote>\n<p>MyBatis中的mapper接口相当于以前的dao。但是区别在于，mapper仅仅是接口，我们不需要提供实现类。</p>\n</blockquote>\n<p>先创建用户类 类中属性 与 数据库中的字段对应 </p>\n<p><img alt=\"\" height=\"737\" src=\"..\\..\\static\\image\\e06d3dd082ab466e82d46676f726d56d.png\" width=\"1200\"/></p>\n<p></p>\n<p> User类里面的代码:</p>\n<pre><code class=\"language-java\">public class User {\n    private  Integer id;\n    private  String username;\n    private  String password;\n    private  Integer age;\n    private  String sex;\n    private  String email;\n\n    public User() {\n    }\n\n    public User(Integer id, String username, String password, Integer age, String sex, String email) {\n        this.id = id;\n        this.username = username;\n        this.password = password;\n        this.age = age;\n        this.sex = sex;\n        this.email = email;\n    }\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    public String getSex() {\n        return sex;\n    }\n\n    public void setSex(String sex) {\n        this.sex = sex;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"id=\" + id +\n                \", username='\" + username + '\\'' +\n                \", password='\" + password + '\\'' +\n                \", age=\" + age +\n                \", sex='\" + sex + '\\'' +\n                \", email='\" + email + '\\'' +\n                '}';\n    }\n}\n</code></pre>\n<p>创建UserMapper接口</p>\n<p><img alt=\"\" height=\"706\" src=\"..\\..\\static\\image\\7763dae5321943e79350b27c91f7ae3d.png\" width=\"1200\"/></p>\n<p></p>\n<pre><code class=\"language-java\">public interface UserMapper { \n/*** 添加用户信息 */ \nint insertUser(); }</code></pre>\n<h2 id=\"5%E3%80%81%E5%88%9B%E5%BB%BAMyBatis%E7%9A%84%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6\"><span style=\"color:#4da8ee;\"><strong>5</strong><strong>、创建</strong><strong>MyBatis</strong><strong>的映射文件 </strong></span></h2>\n<p>相关概念：<strong>ORM</strong>（<strong>O</strong>bject <strong>R</strong>elationship <strong>M</strong>apping）对象关系映射。</p>\n<p><strong>对象</strong>：Java的实体类对象</p>\n<p><strong>关系</strong>：关系型数据库</p>\n<p><strong>映射</strong>：二者之间的对应关系</p>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\"><tbody><tr><td><strong>Java</strong><strong>概念</strong></td><td><strong>数据库概念</strong></td></tr><tr><td>类</td><td>表</td></tr><tr><td>属性</td><td>字段/列</td></tr><tr><td>对象</td><td>记录/行</td></tr></tbody></table>\n<p></p>\n<blockquote>\n<p>1、映射文件的命名规则：</p>\n<p>表所对应的实体类的类名+Mapper.xml</p>\n<p>例如：表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml</p>\n<p>因此一个映射文件对应一个实体类，对应一张表的操作</p>\n<p>MyBatis映射文件用于编写SQL，访问以及操作表中的数据</p>\n<p>MyBatis映射文件存放的位置是src/main/resources/mappers目录下</p>\n<p>2、 MyBatis中可以面向接口操作数据，要保证两个一致：</p>\n<p>a&gt;mapper接口的全类名和映射文件的命名空间（namespace）保持一致</p>\n<p>b&gt;mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致</p>\n</blockquote>\n<p><img alt=\"\" height=\"773\" src=\"..\\..\\static\\image\\8b271c089e8f424db18b608e4b399031.png\" width=\"1200\"/></p>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;\n&lt;mapper namespace=\"com.atguigu.mybatis.mapper.UserMapper\"&gt;\n    &lt;!--int insertUser();--&gt;\n    &lt;insert id=\"insertUser\"&gt; insert into t_user values(null,'张三','123',23,'女','11111@qq.com') &lt;/insert&gt;\n&lt;/mapper&gt;</code></pre>\n<h2 id=\"%C2%A06%E3%80%81%E9%80%9A%E8%BF%87junit%E6%B5%8B%E8%AF%95%E5%8A%9F%E8%83%BD\"><span style=\"color:#4da8ee;\"> <strong>6</strong><strong>、通过</strong><strong>junit</strong><strong>测试功能</strong></span></h2>\n<pre><code class=\"language-XML\">import java.io.IOException;\nimport java.io.InputStream;\n\npublic class MybatisTest {\n    @Test\n    public void testInsert() throws IOException {\n\n//读取MyBatis的核心配置文件\n        InputStream is = Resources.getResourceAsStream(\"mybatis-config.xml\");\n//创建SqlSessionFactoryBuilder对象\n        SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();\n//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象\n        SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(is);\n//创建SqlSession对象，此时通过SqlSession对象所操作的sql都必须手动提交或回滚事务\n//SqlSession sqlSession = sqlSessionFactory.openSession();\n//创建SqlSession对象，此时通过SqlSession对象所操作的sql都会自动提交\n\n        SqlSession sqlSession = sqlSessionFactory.openSession(true);\n//通过代理模式创建UserMapper接口的代理实现类对象\n        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);\n//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配 映射文件中的SQL标签，并执行标签中的SQL语句\n        int result = userMapper.insertUser();\n        System.out.println(result);\n//sqlSession.commit();\n    }\n\n}\n</code></pre>\n<p><strong> 运行一下，控制台 输出了1  表明添加成功。</strong></p>\n<p><img alt=\"\" height=\"751\" src=\"..\\..\\static\\image\\4d6e32f390db41dcbf108d3494e3bd57.png\" width=\"1200\"/><strong> 打开表，发现数据添加成功。</strong></p>\n<p><img alt=\"\" height=\"517\" src=\"..\\..\\static\\image\\811e24655e7d4569a94b507f7537c06c.png\" width=\"1200\"/></p>\n<p></p>\n<blockquote>\n<ul><li>SqlSession：代表Java程序和<strong>数据库</strong>之间的<strong>会话</strong>。（HttpSession是Java程序和浏览器之间的会话）</li><li>SqlSessionFactory：是“生产”SqlSession的“工厂”。</li><li>工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象。</li></ul>\n</blockquote>\n<h2 id=\"7%E3%80%81%E5%8A%A0%E5%85%A5log4j%E6%97%A5%E5%BF%97%E5%8A%9F%E8%83%BD\"><span style=\"color:#4da8ee;\"><strong>7</strong><strong>、加入</strong><strong>log4j</strong><strong>日志功能 </strong></span></h2>\n<p id=\"a%3E%E5%8A%A0%E5%85%A5%E4%BE%9D%E8%B5%96\"><strong>a&gt;</strong><strong>加入依赖</strong></p>\n<pre><code class=\"language-XML\">&lt;!-- log4j日志 --&gt; \n&lt;dependency&gt; \n&lt;groupId&gt;log4j&lt;/groupId&gt; \n&lt;artifactId&gt;log4j&lt;/artifactId&gt; \n&lt;version&gt;1.2.17&lt;/version&gt; \n&lt;/dependency&gt;</code></pre>\n<p> <strong>b&gt;</strong><strong>加入</strong><strong>log4j</strong><strong>的配置文件</strong></p>\n<blockquote>\n<p>log4j的配置文件名为log4j.xml，存放的位置是src/main/resources目录下</p>\n</blockquote>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt; &lt;!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\"&gt;\n&lt;log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\"&gt;\n    &lt;appender name=\"STDOUT\" class=\"org.apache.log4j.ConsoleAppender\"&gt;\n        &lt;param name=\"Encoding\" value=\"UTF-8\"/&gt;\n        &lt;layout class=\"org.apache.log4j.PatternLayout\"&gt;\n            &lt;param name=\"ConversionPattern\" value=\"%-5p %d{MM-dd HH:mm:ss,SSS} %m (%F:%L) \\n\"/&gt;\n        &lt;/layout&gt;\n    &lt;/appender&gt;\n    &lt;logger name=\"java.sql\"&gt;\n        &lt;level value=\"debug\"/&gt;\n    &lt;/logger&gt;\n    &lt;logger name=\"org.apache.ibatis\"&gt;\n        &lt;level value=\"info\"/&gt;\n    &lt;/logger&gt;\n    &lt;root&gt;\n        &lt;level value=\"debug\"/&gt;\n        &lt;appender-ref ref=\"STDOUT\"/&gt;\n    &lt;/root&gt;\n&lt;/log4j:configuration&gt;</code></pre>\n<p>效果：</p>\n<p> <img alt=\"\" height=\"307\" src=\"..\\..\\static\\image\\ca6429b12c3c4137a458bf26ac9abfba.png\" width=\"1200\"/></p>\n<p> <img alt=\"\" height=\"179\" src=\"..\\..\\static\\image\\f7cb0d5df8434bcd83931498b28c3c9f.png\" width=\"837\"/></p>\n<p></p>\n<blockquote>\n<p><strong>日志的级别 </strong></p>\n<p>FATAL(致命)&gt;ERROR(错误)&gt;WARN(警告)&gt;INFO(信息)&gt;DEBUG(调试)</p>\n<p>从左到右打印的内容越来越详细</p>\n</blockquote>\n</div>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 1, "php": 0, "time": "2022-08-17 16:31:35", "summary": "目录搭建、开发环境、创建工程、创建的核心配置文件、创建接口、创建的映射文件、通过测试功能、加入日志功能个人主页：个人主页个人主页系列专栏：框架框架推荐一款模拟面试、刷题神器，从基础到大厂面试题点击跳转"}