{"blogid": "124550703", "writerAge": "码龄1年", "writerBlogNum": "32", "writerCollect": "1138", "writerComment": "1413", "writerFan": "1483", "writerGrade": "5级", "writerIntegral": "3861", "writerName": "人间一凡夫", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124550703.jpg", "writerRankTotal": "5123", "writerRankWeekly": "182", "writerThumb": "1148", "writerVisitNum": "87088", "blog_read_count": "3089", "blog_time": "已于 2022-05-04 20:28:24 修改", "blog_title": "【带你了解C++标准库为何在八大链表结构中选择了它】双向循环带头链表的实质性操作", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/5480b90d75e84c1e8ec56fd7f525ce88.gif#pic_center\"/></p>\n<h1><a id=\"_3\"></a>文章目录</h1>\n<ul><li><a href=\"#d1\">🚀八大链表结构为何选择了它</a></li><li><a href=\"#d2\">🚀初始化和打印</a></li><li><a href=\"#d3\">🚀尾插和尾删</a></li><li><a href=\"#d4\">🚀头插和头删</a></li><li><a href=\"#d5\">🚀查找和插入</a></li><li><a href=\"#d6\">🚀删除和销毁</a></li><li><a href=\"#d11\">🚀小结</a></li></ul>\n<p><a href=\"#d10\">✨链表功能动画演示</a><br/> <a href=\"#d7\">✨逻辑实现text.c</a><br/> <a href=\"#d8\">✨头文件List.h</a><br/> <a href=\"#d9\">✨函数实现List.c</a></p>\n<hr/>\n<h2><a id=\"div_idd1div_27\"></a>\n<div id=\"d1\">\n  🚀八大链表结构为何选择了它\n  <div></div>\n</div></h2>\n<p>C++的STL库选择的最终链表结构为<font color=\"#DC44\" face=\"“黑体”\" size=\"5\">双向循环带头链表</font><br/> 为什么选择了它呢，是因为它的结构更优，虽然形式看似复杂，但的它便利性相比其他链表好得多</p>\n<table><tbody><tr><td bgcolor=\"yellowgreen\">C++标准库中把list设计为带头节点的双向循环链表是很合理的，不信你往后看它的操作实现过程相比于单链表来说有多简单，当然你也可以用其他的六种结果来对比，结果一定是双向循环带头链表更胜一筹</td></tr></tbody></table>\n<table><tbody><tr><td bgcolor=\"yellowgreen\">认识八种链表的类型</td></tr></tbody></table>\n<ol><li>单向带头非循环链表</li><li>单向不带头循环链表</li><li>单向不带头非循环链表</li><li>双向带头循环链表</li><li>双向带头非循环链表</li><li>双向不带头循环链表</li><li>双向不带头非循环链表</li><li>双向循环带头链表✨</li></ol>\n<blockquote>\n<p>一些链表图示<br/> <img alt=\"这里是引用\" src=\"..\\..\\static\\image\\5ad43c8789ed48dfa1b5e43cc60af506.png\"/></p>\n<p><font color=\"#0099ff\" face=\"“黑体”\" size=\"3\">常用的两类链表结构</font><br/> 我们在<a href=\"https://blog.csdn.net/dongming8886/article/details/124398233\">单链表的一系列操作</a>中讲过单链表是在一些OJ题的常考题</p>\n<p>单链表只能单向循环链表<br/> 循环双向链表就是一个环形，可以逆时针走，可以顺时针走，而双向链表是一个链，只能双向遍历。<img alt=\"这里是引用\" src=\"..\\..\\static\\image\\8504184265b749249aeaca1042611167.png\"/></p>\n</blockquote>\n<h2><a id=\"div_idd2div_54\"></a>\n<div id=\"d2\">\n  🚀初始化和打印\n  <div></div>\n</div></h2>\n<p><strong>初始化</strong></p>\n<blockquote>\n<p>我们的<strong>双向循环链表</strong>采用的是<font color=\"#DC44\" face=\"“黑体”\" size=\"3\">带哨兵位的头结点</font>，它的初始化为了避免要传二级指针，可以<font color=\"#DC44\" face=\"“黑体”\" size=\"4\">设置用返回值的函数</font>带回地址<br/> 下面一张图再次带你认识<font color=\"#FFA500\" face=\"“黑体”\" size=\"4\">带哨兵位</font>的头结点和<font color=\"#FFA500\" face=\"“黑体”\" size=\"4\">不带哨兵位</font>的头结点区别</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fc3dc83a7ba34e60823da1644a3bd534.png\"/><br/> 要注意<font color=\"#DC44\" face=\"“黑体”\" size=\"5\">双向循环带头链表</font>的初始化跟单链表有所区别，双向循环链表是<font color=\"#DC44\" face=\"“黑体”\" size=\"4\">不会指向NULL</font>的，它没有节点的时候是下面的这种形式&gt;</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c1ef3768a2474fb6bd73264057204e6b.png\"/><br/> 其实就是自己的头和尾都指向自己，这才能体现它的循环结构</p>\n</blockquote>\n<blockquote>\n<p>在初始的时候是需要创建新节点作为头结点的，而且后续的头插，尾插等等都需要创建新节点，为了避免重复操作，直接建立一个BuyListNode函数用来创建新节点</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//创建新节点</span>\nLTNode<span class=\"token operator\">*</span> <span class=\"token function\">BuyListNode</span><span class=\"token punctuation\">(</span>LTDateType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tLTNode<span class=\"token operator\">*</span> newNode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newNode <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tnewNode<span class=\"token operator\">-&gt;</span>date <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\tnewNode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tnewNode<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> newNode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//初始化</span>\nLTNode<span class=\"token operator\">*</span> <span class=\"token function\">ListInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tLTNode<span class=\"token operator\">*</span> phead <span class=\"token operator\">=</span> <span class=\"token function\">BuyListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tphead<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> phead<span class=\"token punctuation\">;</span>\n\tphead<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> phead<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">return</span> phead<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//用一个指针接收地址</span>\nLTNode<span class=\"token operator\">*</span> list <span class=\"token operator\">=</span> <span class=\"token function\">ListInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>打印</strong></p>\n<blockquote>\n<p>打印过程图解<br/> <img alt=\"这里是引用\" src=\"..\\..\\static\\image\\b1116fc261b947a781520d1730a8f48d.png\"/></p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//打印</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListPrint</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tLTNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> phead<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> phead<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> cur<span class=\"token operator\">-&gt;</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"div_idd3div_123\"></a>\n<div id=\"d3\">\n  🚀尾插和尾删\n  <div></div>\n</div></h2>\n<p><strong>尾插</strong></p>\n<blockquote>\n<p><font color=\"#DC44\" face=\"“黑体”\" size=\"4\">双向循环带头</font>链表的 <font color=\"#DC44\" face=\"“黑体”\" size=\"4\">尾插</font>实在比单链表简单得多了，因为它是循环双向链表，你看 <font color=\"#DC44\" face=\"“黑体”\" size=\"4\">尾节点</font>的next不就指向<font color=\"#DC44\" face=\"“黑体”\" size=\"4\">头结点</font>的phead吗，那<font color=\"#DC44\" face=\"“黑体”\" size=\"4\">头结点</font>的prev不就指向<font color=\"#DC44\" face=\"“黑体”\" size=\"4\">尾节点</font>吗<br/> 是不是就直接省去了像单链表哪样遍历链表找尾的过程，直接将<font color=\"#32CD32\" face=\"“黑体”\" size=\"3\">时间复杂度优化到O(1)</font><br/> 那找到尾之后的操作就是连接节点之间的关系，比较简单，直接看图理解<br/> <img alt=\"这里是引用\" src=\"..\\..\\static\\image\\9fb2570570fa4df2b0a4d094094899a1.png\"/></p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//尾插</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListPushBack</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">,</span>LTDateType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//新节点</span>\n\tLTNode<span class=\"token operator\">*</span> newNode <span class=\"token operator\">=</span> <span class=\"token function\">BuyListNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//找尾</span>\n\tLTNode<span class=\"token operator\">*</span> tail <span class=\"token operator\">=</span> phead<span class=\"token operator\">-&gt;</span>prev<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//连接</span>\n\ttail<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n\tnewNode<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">;</span>\n\tnewNode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> phead<span class=\"token punctuation\">;</span>\n\tphead<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>尾删</strong></p>\n<blockquote>\n<p><font color=\"#DC44\" face=\"“黑体”\" size=\"4\"> 尾删</font>也不难，同样的找尾步骤，注意的是要记录好尾节点的前一个节点，让它来当新的尾节点</p>\n<p><font color=\"#0099ff\" face=\"“黑体”\" size=\"5\">动画演示&gt;</font><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/8f21b1c088ff4f0bb73bca6db3315058.gif#pic_center\"/></p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//尾删</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListPopBack</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">!=</span> phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tLTNode<span class=\"token operator\">*</span> tail <span class=\"token operator\">=</span> phead<span class=\"token operator\">-&gt;</span>prev<span class=\"token punctuation\">;</span>\n\tLTNode<span class=\"token operator\">*</span> tailPrev <span class=\"token operator\">=</span> tail<span class=\"token operator\">-&gt;</span>prev<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>tail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ttailPrev<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> phead<span class=\"token punctuation\">;</span>\n\tphead<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> tailPrev<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"div_idd4div_173\"></a>\n<div id=\"d4\">\n  🚀头插和头删\n  <div></div>\n</div></h2>\n<p><strong>头插</strong></p>\n<blockquote>\n<p><font color=\"#DC44\" face=\"“黑体”\" size=\"4\"> 头插</font>要注意的是不是在哨兵位的头前面插入，而是在哨兵位的头结点的后一个插入，因为哨兵位只是是不存放有效数据的，但它一定是在最前的</p>\n<p><font color=\"#0099ff\" face=\"“黑体”\" size=\"5\">动画演示&gt;</font><br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/1ac9c908dd824fd4a4e7fd81fcf01731.gif#pic_center\"/></p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//头插</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListPushFront</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">,</span> LTDateType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tLTNode<span class=\"token operator\">*</span> newNode <span class=\"token operator\">=</span> <span class=\"token function\">BuyListNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//连接</span>\n\tLTNode<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> phead<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\tphead<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n\tnewNode<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> phead<span class=\"token punctuation\">;</span>\n\n\tnewNode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n\tnext<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>头删</strong></p>\n<blockquote>\n<p><font color=\"#DC44\" face=\"“黑体”\" size=\"4\"> 头删</font>也是像尾删一样要记录好要删节点的下一个节点</p>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/2a642ac960644e92b392c1df99667df1.gif#pic_center\"/></p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//头删</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListPopFront</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//链表为空</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">!=</span> phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tLTNode<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> phead<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\tLTNode<span class=\"token operator\">*</span> nextNext <span class=\"token operator\">=</span> next<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tphead<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> nextNext<span class=\"token punctuation\">;</span>\n\tnextNext<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> phead<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"div_idd5div_222\"></a>\n<div id=\"d5\">\n  🚀查找和插入\n  <div></div>\n</div></h2>\n<p><strong>查找</strong></p>\n<blockquote>\n<p><font color=\"#DC44\" face=\"“黑体”\" size=\"4\"> 查找</font>就是遍历链表，跟单链表一样的操作，找到了就返回改节点的地址，找不到就返回NULL</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//查找</span>\nLTNode<span class=\"token operator\">*</span> <span class=\"token function\">ListFind</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">,</span> LTDateType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tLTNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> phead<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> phead<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>date <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> cur<span class=\"token punctuation\">;</span>\n\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><strong>插入</strong></p>\n<blockquote>\n<p><font color=\"#0099ff\" face=\"“黑体”\" size=\"5\">插入是往该数据的前一个位置插入</font><br/> <font color=\"#DC44\" face=\"“黑体”\" size=\"4\"> 插入</font>就跟单链表的操作大大不同了， <font color=\"#DC44\" face=\"“黑体”\" size=\"4\"> 双向循环带头链表</font>的插入比起<font color=\"#DC44\" face=\"“黑体”\" size=\"4\"> 单链表</font>来说是非常容易的，你把你要在哪个位置插入的指针传给它，它可以直接找到 <font color=\"#DC44\" face=\"“黑体”\" size=\"4\">前一个节点</font>，而单链表却没有这个性质</p>\n<blockquote>\n<p>插入功能是和查找功能搭配使用的，用之前先用查找获取把该数据的指针，然后传给插入函数<br/> 那你们想想，如果我把<font color=\"#FF0044\" face=\"“黑体”\" size=\"4\">phead的指针</font>传给插入函数，那phead的前一个不就是尾节点吗，那不就是相当于<font color=\"#FF0044\" face=\"“黑体”\" size=\"4\">尾插</font>吗，同样如果我们把<font color=\"#FF0044\" face=\"“黑体”\" size=\"4\">phead的next</font>传给插入函数，哪不就是相当于<font color=\"#FF0044\" face=\"“黑体”\" size=\"4\">头插</font>吗！！<br/> 所以我们的头插和尾插是不是可以改造成这样子<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4570563a71254eb0a72870e5a5d35574.png\"/><br/> 这样之后我们写头插和尾插就省去了很大时间</p>\n</blockquote>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//插入</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListInsert</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">,</span> LTDateType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tLTNode<span class=\"token operator\">*</span> newNode <span class=\"token operator\">=</span> <span class=\"token function\">BuyListNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\tLTNode<span class=\"token operator\">*</span> posPrev <span class=\"token operator\">=</span> pos<span class=\"token operator\">-&gt;</span>prev<span class=\"token punctuation\">;</span>\n\n\tposPrev<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n\tnewNode<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> posPrev<span class=\"token punctuation\">;</span>\n\tnewNode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span>\n\tpos<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"div_idd6div_272\"></a>\n<div id=\"d6\">\n  🚀删除和销毁\n  <div></div>\n</div></h2>\n<p><strong>删除</strong></p>\n<blockquote>\n<p><font color=\"#DC44\" face=\"“黑体”\" size=\"4\"> 删除</font>也是搭配查找函数一起使用，把要的地址传过去即可删除</p>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/509f8bbddb164d19bb0a7273f104fdae.gif#pic_center\"/></p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//删除</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListErase</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tLTNode<span class=\"token operator\">*</span> posPrev <span class=\"token operator\">=</span> pos<span class=\"token operator\">-&gt;</span>prev<span class=\"token punctuation\">;</span>\n\tLTNode<span class=\"token operator\">*</span> posNext <span class=\"token operator\">=</span> pos<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\n\tposPrev<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> posNext<span class=\"token punctuation\">;</span>\n\tposNext<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> posPrev<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>销毁</strong></p>\n<blockquote>\n<p><font color=\"#DC44\" face=\"“黑体”\" size=\"4\">销毁</font>就是遍历链表一个一个的free即可</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//销毁链表</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListDestroy</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tLTNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> phead<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> phead<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tLTNode<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcur <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//记得最后把销毁链表，还要把list置空</span>\n\t<span class=\"token function\">ListDestroy</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tlist <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"div_idd11div_319\"></a>\n<div id=\"d11\">\n  🚀小结\n  <div></div>\n</div></h2>\n<table><tbody><tr><td bgcolor=\"yellowgreen\">如果你动手实操了，一定感受到双向循环链表中的一些操作实现是不用考虑像单链表那样的分情况讨论，比如单链表在实现头插的时候不就是要分链表为空和不为空的情况吗，而它却不必考虑这些顾虑，还有很多区别于其他链表的优势，只能你自己去一 一感受！！</td></tr></tbody></table>\n<h1><a id=\"div_idd10div_323\"></a>\n<div id=\"d10\">\n  ✨链表功能动画演示\n  <div></div>\n</div></h1>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/d02379af5ccd45929ced16f86684f278.gif#pic_center\"/></p>\n<h2><a id=\"div_idd7textcdiv_326\"></a>\n<div id=\"d7\">\n  ✨逻辑实现text.c\n  <div></div>\n</div></h2>\n<table><tbody><tr><td bgcolor=\"gold\">text.c为工程整体逻辑实现</td></tr></tbody></table>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*******************************\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"       1.尾插   2.尾删         \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"       3.头插   4.头删         \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"       5.插入   6查找          \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"       7.删除   -1.退出        \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"       8.打印                  \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*******************************\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" 请选择&gt;:   \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Textmenu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tLTNode<span class=\"token operator\">*</span> list <span class=\"token operator\">=</span> <span class=\"token function\">ListInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> input <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tLTDateType x1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tLTNode<span class=\"token operator\">*</span> pos <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>input <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要尾插的数据，以-1为结束\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>x1 <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token function\">ListPushBack</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"尾插成功\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">ListPopBack</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"尾删成功\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要头插的数据，以-1为结束\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>x1 <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token function\">ListPushFront</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"头插成功\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">ListPopFront</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"头删成功\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入你要在哪里个数据前插入&gt;:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t pos<span class=\"token operator\">=</span> <span class=\"token function\">ListFind</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t\t <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入你要插入的数据&gt;:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t <span class=\"token function\">ListInsert</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"插入成功\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t <span class=\"token punctuation\">}</span>\n\t\t\t <span class=\"token keyword\">else</span>\n\t\t\t <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无此数据\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t <span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入你要查找的数据\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tpos<span class=\"token operator\">=</span><span class=\"token function\">ListFind</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d的地址为%p\\n\"</span><span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"链表没有此数据\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入你要删除的数据\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tpos <span class=\"token operator\">=</span> <span class=\"token function\">ListFind</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token function\">ListErase</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除成功\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"链表中没有此数据\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"链表数据为：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ListPrint</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"退出成功\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无此选项，请重新输入！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//记得最后把销毁链表，还要把list置空</span>\n\t<span class=\"token function\">ListDestroy</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tlist <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">Textmenu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"div_idd8Listhdiv_450\"></a>\n<div id=\"d8\">\n  ✨头文件List.h\n  <div></div>\n</div></h2>\n<table><tbody><tr><td bgcolor=\"gold\">List.h为工程头文件（头文件和函数声明）</td></tr></tbody></table>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;assert.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> LTDateType<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tLTDateType date<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> prev<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>LTNode<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//初始化</span>\nLTNode<span class=\"token operator\">*</span> <span class=\"token function\">ListInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//打印</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListPrint</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//创建新节点</span>\nLTNode<span class=\"token operator\">*</span> <span class=\"token function\">BuyListNode</span><span class=\"token punctuation\">(</span>LTDateType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//尾插</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListPushBack</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">,</span> LTDateType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//尾删</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListPopBack</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//头插</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListPushFront</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">,</span> LTDateType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//头删</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListPopFront</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//查找,找到返回对应数据地址，找不到返回NULL</span>\nLTNode<span class=\"token operator\">*</span> <span class=\"token function\">ListFind</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">,</span> LTDateType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//插入，在pos位置之前插入</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListInsert</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">,</span> LTDateType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//删除指定位置</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListErase</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//销毁链表</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListDestroy</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<h2><a id=\"div_idd9Listcdiv_504\"></a>\n<div id=\"d9\">\n  ✨函数实现List.c\n  <div></div>\n</div></h2>\n<table><tbody><tr><td bgcolor=\"gold\">List.c为工程源文件（函数实现）</td></tr></tbody></table>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"List.h\"</span></span>\n\n<span class=\"token comment\">//初始化</span>\nLTNode<span class=\"token operator\">*</span> <span class=\"token function\">ListInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tLTNode<span class=\"token operator\">*</span> phead <span class=\"token operator\">=</span> <span class=\"token function\">BuyListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tphead<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> phead<span class=\"token punctuation\">;</span>\n\tphead<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> phead<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">return</span> phead<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//打印</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListPrint</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tLTNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> phead<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> phead<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> cur<span class=\"token operator\">-&gt;</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//尾插</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListPushBack</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">,</span>LTDateType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//新节点</span>\n\t<span class=\"token comment\">//LTNode* newNode = BuyListNode(x);</span>\n\t<span class=\"token comment\">//找尾</span>\n\t<span class=\"token comment\">//LTNode* tail = phead-&gt;prev;</span>\n\t<span class=\"token comment\">//连接</span>\n\t<span class=\"token comment\">//tail-&gt;next = newNode;</span>\n\t<span class=\"token comment\">//newNode-&gt;prev = tail;</span>\n\t<span class=\"token comment\">//newNode-&gt;next = phead;</span>\n\t<span class=\"token comment\">//phead-&gt;prev = newNode;</span>\n\t\n\t<span class=\"token comment\">//可用插入函数代替尾插</span>\n\t<span class=\"token function\">ListInsert</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//尾删</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListPopBack</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">!=</span> phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//LTNode* tail = phead-&gt;prev;</span>\n\t<span class=\"token comment\">//LTNode* tailPrev = tail-&gt;prev;</span>\n\t<span class=\"token comment\">//free(tail);</span>\n\t<span class=\"token comment\">//tailPrev-&gt;next = phead;</span>\n\t<span class=\"token comment\">//phead-&gt;prev = tailPrev;</span>\n\n\t<span class=\"token comment\">//可用删除函数代替尾删</span>\n\t<span class=\"token function\">ListErase</span><span class=\"token punctuation\">(</span>phead<span class=\"token operator\">-&gt;</span>prev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//头插</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListPushFront</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">,</span> LTDateType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tLTNode<span class=\"token operator\">*</span> newNode <span class=\"token operator\">=</span> <span class=\"token function\">BuyListNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//连接</span>\n\tLTNode<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> phead<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\tphead<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n\tnewNode<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> phead<span class=\"token punctuation\">;</span>\n\n\tnewNode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n\tnext<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//可用插入函数代替头插</span>\n\t<span class=\"token comment\">//ListInsert(phead-&gt;next, x);</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//头删</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListPopFront</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//链表为空</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">!=</span> phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tLTNode<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> phead<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\tLTNode<span class=\"token operator\">*</span> nextNext <span class=\"token operator\">=</span> next<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tphead<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> nextNext<span class=\"token punctuation\">;</span>\n\tnextNext<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> phead<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//可用删除函数代替头删</span>\n\t<span class=\"token comment\">//ListErase(phead-&gt;next);</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//查找</span>\nLTNode<span class=\"token operator\">*</span> <span class=\"token function\">ListFind</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">,</span> LTDateType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tLTNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> phead<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> phead<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>date <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> cur<span class=\"token punctuation\">;</span>\n\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//插入</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListInsert</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">,</span> LTDateType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tLTNode<span class=\"token operator\">*</span> newNode <span class=\"token operator\">=</span> <span class=\"token function\">BuyListNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\tLTNode<span class=\"token operator\">*</span> posPrev <span class=\"token operator\">=</span> pos<span class=\"token operator\">-&gt;</span>prev<span class=\"token punctuation\">;</span>\n\n\tposPrev<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n\tnewNode<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> posPrev<span class=\"token punctuation\">;</span>\n\tnewNode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span>\n\tpos<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//删除</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListErase</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tLTNode<span class=\"token operator\">*</span> posPrev <span class=\"token operator\">=</span> pos<span class=\"token operator\">-&gt;</span>prev<span class=\"token punctuation\">;</span>\n\tLTNode<span class=\"token operator\">*</span> posNext <span class=\"token operator\">=</span> pos<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\n\tposPrev<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> posNext<span class=\"token punctuation\">;</span>\n\tposNext<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> posPrev<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//创建新节点</span>\nLTNode<span class=\"token operator\">*</span> <span class=\"token function\">BuyListNode</span><span class=\"token punctuation\">(</span>LTDateType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tLTNode<span class=\"token operator\">*</span> newNode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newNode <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tnewNode<span class=\"token operator\">-&gt;</span>date <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\tnewNode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tnewNode<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> newNode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//销毁链表</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListDestroy</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tLTNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> phead<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> phead<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tLTNode<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcur <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-05-04 20:28:24", "summary": "在这里插入图片描述文章目录八大链表结构为何选择了它初始化和打印尾插和尾删头插和头删查找和插入删除和销毁小结链表功能动画演示逻辑实现头文件函数实现八大链表结构为何选择了它的库选择的最终链表结构为黑体双向"}