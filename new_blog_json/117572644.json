{"blogid": "117572644", "writerAge": "码龄2年", "writerBlogNum": "132", "writerCollect": "14257", "writerComment": "2434", "writerFan": "5488", "writerGrade": "6级", "writerIntegral": "8828", "writerName": "生命是有光的", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_117572644.jpg", "writerRankTotal": "1488", "writerRankWeekly": "3713", "writerThumb": "3408", "writerVisitNum": "652329", "blog_read_count": "44690", "blog_time": "已于 2022-08-21 14:50:23 修改", "blog_title": "C++期末复习超详细总结知识点（期末冲刺）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"0c_1\"></a>0、c++期末总结</h1>\n<blockquote>\n<h2><a id=\"2022821_3\"></a>更新时间：2022年8月21日</h2>\n<ul><li>pdf版下面评论置顶有链接</li></ul>\n</blockquote>\n<ol><li>重点已经用黑体和高亮表示，属于记忆理解部分,可收藏使用</li></ol>\n<ul><li class=\"task-list-item\"><input checked=\"true\" class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> 后面考完找时间分享下<code>c++面向对象程序设计课后习题答案(谭浩强版)</code>与<code>C++题库</code>刷题部分！</li><li class=\"task-list-item\"><input checked=\"true\" class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> 题库与答案链接：<a href=\"https://download.csdn.net/download/Augenstern_QXL/20011036?spm=1001.2014.3001.5501\">题库与答案链接（已失效，置顶评论有习题）</a>，设置为0积分下载，如果还不可下载请下方留邮箱，虽然各个学校情况各异，但是知识点是一样的，而且基本高校内C++考的也基本都是这些，大差不差吧~</li></ul>\n<blockquote>\n<h2><a id=\"pdf_12\"></a>更新一下：习题和笔记pdf版均在置顶评论，自取</h2>\n</blockquote>\n<ol start=\"2\"><li>学校考试一般比较简单，更多在于概念和语法的考察，包括一些细节知识点在选择判断等。</li><li><strong>是根据老师的PPT与自己所学进行总结的</strong>，<strong>基本不涉及偏难怪知识点</strong>，<strong>重点是为了期末考试。</strong></li><li>全文长10400多字，基本可以囊括90%的考试知识点</li><li>个人感觉知识掌握了就是多做做习题，毕竟考试偏应试，想提高分请一定多做题！！！！</li><li><strong>想打印的伙伴可以下方留言邮箱，看到会发pdf打印版。</strong></li><li>考试加油！！！！</li><li>只是知识点总结，请一定要理解记忆，由于博主这学期也要考，时间有限，难免有不全有误之处，望谅解。</li><li>最后祝大家考试加油！</li></ol>\n<p>10.时间充足者可以按如下顺序学习，更有利于掌握。</p>\n<ul><li><a href=\"https://blog.csdn.net/Augenstern_QXL/article/details/117249021\">《黑马程序员》C++基础入门(一)</a></li><li><a href=\"https://blog.csdn.net/Augenstern_QXL/article/details/117253955\">《黑马程序员》通讯录管理系统实战</a></li><li><a href=\"https://blog.csdn.net/Augenstern_QXL/article/details/116982366\">《黑马程序员》通讯录管理系统源码</a></li><li><a href=\"https://blog.csdn.net/Augenstern_QXL/article/details/117253730?spm=1001.2014.3001.5501\">《黑马程序员》C++核心编程(二)</a></li><li><a href=\"https://blog.csdn.net/Augenstern_QXL/article/details/117262608\">《黑马程序员》职工管理系统实战</a></li><li><a href=\"https://download.csdn.net/download/Augenstern_QXL/19080725?spm=1001.2014.3001.5501\">《黑马程序员》职工管理系统源码</a></li><li><a href=\"https://blog.csdn.net/Augenstern_QXL/article/details/117253848\">《黑马程序员》C++提高编程(三)</a></li><li><a href=\"https://blog.csdn.net/Augenstern_QXL/article/details/117332122\">《黑马程序员》演讲比赛管理系统实战</a></li><li><a href=\"https://download.csdn.net/download/Augenstern_QXL/19129382\">《黑马程序员》演讲比赛管理系统源码</a></li><li><a href=\"https://download.csdn.net/download/Augenstern_QXL/19129406?spm=1001.2014.3001.5501\">《黑马程序员》演讲比赛管理系统成品</a></li></ul>\n<h2><a id=\"01_41\"></a>0.1、程序的构成</h2>\n<ol><li><strong>一个C++程序可以由一个程序单位或多个程序单位构成</strong>。每一个程序单位作为一个文件。在程序编译时，编译系统分别对各个文件进行编译，因此，一个文件是一个编译单元。</li></ol>\n<h2><a id=\"02_47\"></a>0.2、程序的编写与实践</h2>\n<ol><li>用高级语言编写的程序称为“源程序”，C++的源程序是以<code>.cpp</code>作为后缀的</li><li>对源程序(.cpp)进行编译 ➡ 目标程序(.obj) ➡ 二进制文件(.exe)</li><li>编写C++程序一般需要经过的几个步骤是：<strong>编辑➡编译➡连接➡调试</strong></li></ol>\n<h1><a id=\"1_53\"></a>1、数据类型</h1>\n<h2><a id=\"11_55\"></a>1.1、整型</h2>\n<p><strong>作用</strong>：整型变量表示的是<mark>整数类型</mark>的数据</p>\n<ul><li>int - 占4个字节</li><li>unsigned int - 无符号整型，占4个字节</li></ul>\n<h2><a id=\"12sizeof_62\"></a>1.2、sizeof关键字</h2>\n<p><strong>作用</strong>：利用sizeof关键字可以<mark>统计数据类型所占内存大小</mark></p>\n<h2><a id=\"13_66\"></a>1.3、浮点型</h2>\n<p><strong>作用</strong>：用于<mark>表示小数</mark></p>\n<p>浮点型变量分为两种：</p>\n<ol><li>单精度float ➡占4个字节，提供6位有效数组</li><li>双精度double ➡占8个字节，提供15位有效数字</li></ol>\n<h2><a id=\"14_77\"></a>1.4、数值型常量</h2>\n<h3><a id=\"141_79\"></a>1.4.1数值常量</h3>\n<p>一个整型常量可以用3种不同的方式表示：</p>\n<ol><li>十进制整数。如1357,-432，0等</li><li>八进制整数。在常数的开头加一个数字0，就表示这是以八进制数形式表示的常数。</li><li>十六进制整数。在常数的开头加一个数字0和一个英文字母X(或x)，就表示这是以十六进制数形式表示的常数</li></ol>\n<h3><a id=\"142_87\"></a>1.4.2浮点数的表示方法</h3>\n<p>一个浮点数可以用两种不同的方式表示：</p>\n<ol><li>十进制小数形式。如21.456,-7.98等。</li><li>指数形式(即浮点形式)</li></ol>\n<h2><a id=\"15_96\"></a>1.5、字符型常量</h2>\n<p><strong>作用</strong>：字符型变量用于显示单个字符</p>\n<p><strong>语法：</strong><code>char ch = 'a';</code></p>\n<blockquote>\n<p>注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p>\n</blockquote>\n<blockquote>\n<p>注意2：单引号内只能有一个字符，不可以是字符串</p>\n</blockquote>\n<ul><li> <p>C和C++中字符型变量只占用<mark>1个字节</mark>。</p> </li><li> <p>字符常量只能包括一个字符，如<code>′AB′</code> 是不合法的</p> </li><li> <p>字符常量区分大小写字母，如<code>′A′</code>和<code>′a′</code>是两个不同的字符常量</p> </li><li> <p>字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元</p> </li></ul>\n<h2><a id=\"16_112\"></a>1.6、字符串型常量</h2>\n<p><strong>作用</strong>：用于表示一串字符</p>\n<p><strong>两种风格</strong></p>\n<ol><li><strong>C风格字符串</strong>： <code>char 变量名[] = \"字符串值\"</code></li></ol>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">char</span> str1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>注意：C风格的字符串要用双引号括起来</p>\n</blockquote>\n<ol start=\"2\"><li><strong>C++风格字符串</strong>： <code>string 变量名 = \"字符串值\"</code></li></ol>\n<pre><code class=\"prism language-c\">string str <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>注意：C++风格字符串，需要加入头文件==#include&lt;string&gt;==</p>\n<p>字符串常量为双引号</p>\n</blockquote>\n<hr/>\n<p><strong>常考</strong>：字符串 <code>\"abc\"</code> 在内存中占几个字节？</p>\n<p>答：<strong>占4个字节，而不是3个字节，编译系统会在字符串最后自动加一个<code>′＼0′</code>作为字符串结束标志。但<code>′＼0′</code>并不是字符串的一部分，它只作为字符串的结束标志</strong></p>\n<hr/>\n<p><strong>常考</strong>: 字符串常量<code>″abc＼n″</code>包含几个字符?</p>\n<p>答：<strong>不是5个而是4个字符，其中<code>“＼n”</code>是一个转义字符,但它在内存中占5个字节</strong></p>\n<h2><a id=\"17bool_154\"></a>1.7、布尔类型bool</h2>\n<p><strong>作用</strong>：布尔数据类型代表真或假的值</p>\n<p>bool类型只有两个值：</p>\n<ul><li>true — 真（本质是1）</li><li>false — 假（本质是0）</li></ul>\n<p>bool类型占<mark>1个字节</mark>大小</p>\n<h2><a id=\"18_167\"></a>1.8、数据的输入输出</h2>\n<p><strong>关键字</strong>：cin、cout</p>\n<p><strong>语法：</strong> <code>cin &gt;&gt; 变量1&gt;&gt;变量2&gt;&gt;....&gt;&gt;变量n </code>、<code>cout&lt;&lt;表达式1&lt;&lt;表达式2&lt;&lt;...&lt;&lt;表达式n</code></p>\n<pre><code class=\"prism language-cpp\">cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">;</span>     <span class=\"token comment\">//错误，不能一次插入多项</span>\ncout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">+</span>b<span class=\"token operator\">+</span>c<span class=\"token punctuation\">;</span>     <span class=\"token comment\">//正确，这是一个表达式，作为一项</span>\n\ncin<span class=\"token operator\">&gt;&gt;</span>a<span class=\"token operator\">&gt;&gt;</span>b<span class=\"token operator\">&gt;&gt;</span>c<span class=\"token operator\">&gt;&gt;</span>d<span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"19_182\"></a>1.9、变量命名规则</h2>\n<ul><li>C++<mark>规定标识符只能由字母、数字和下划线3种字符组成，且第一个字符必须为字母或下划线</mark></li><li>不能是关键字</li><li>区分大小写</li></ul>\n<h2><a id=\"110_190\"></a>1.10、局部变量</h2>\n<ul><li>在一个<mark>函数内部定义的变量</mark>是局部变量，它只在本函数范围内有效，也就是说只有在本函数内才能使用它们，在此函数以外是不能使用这些变量的</li><li>形参也是局部变量</li></ul>\n<h2><a id=\"111_196\"></a>1.11、全局变量</h2>\n<ul><li>在<mark>函数之外定义的变量</mark>是外部变量，称为全局变量</li></ul>\n<h1><a id=\"2_206\"></a>2、运算符</h1>\n<h2><a id=\"21_208\"></a>2.1、算数运算符</h2>\n<table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>+</td><td>正号</td><td>+3</td><td>3</td></tr><tr><td>-</td><td>负号</td><td>-3</td><td>-3</td></tr><tr><td>+</td><td>加</td><td>10 + 5</td><td>15</td></tr><tr><td>-</td><td>减</td><td>10 - 5</td><td>5</td></tr><tr><td>*</td><td>乘</td><td>10 * 5</td><td>50</td></tr><tr><td>/</td><td>除</td><td>10 / 5</td><td>2</td></tr><tr><td>%</td><td>取模(取余)</td><td>10 % 3</td><td>1</td></tr><tr><td>++</td><td>前置递增</td><td>a=2; b=++a;</td><td>a=3; b=3;</td></tr><tr><td>++</td><td>后置递增</td><td>a=2; b=a++;</td><td>a=3; b=2;</td></tr><tr><td>–</td><td>前置递减</td><td>a=2; b=–a;</td><td>a=1; b=1;</td></tr><tr><td>–</td><td>后置递减</td><td>a=2; b=a–;</td><td>a=1; b=2;</td></tr></tbody></table>\n<p><strong>注意</strong>：</p>\n<ul><li><strong>两个整数相除结果依然是整数（这里不进行四舍五入，直接舍去小数点后面数字）</strong></li><li><strong>C++中两个小数可以相除</strong></li><li><strong>运算的两个数中有一个数为float型数据，则运算的结果是double型，因为C++在运算时对所有float型数据都按double型数据处理</strong></li><li><strong>只有整型变量可以进行取模运算，两个小数不可以取模</strong></li><li><strong>在除法运算中，除数不能为0</strong></li><li><strong>取模运算时，除数也不能为0</strong></li></ul>\n<p><strong>常考：</strong></p>\n<ul><li> <p><strong>前置后置运算符单独使用没有什么区别</strong></p> </li><li> <p><strong>前置递增先对变量进行++，再计算表达式</strong></p> </li><li> <p><strong>后置递增先计算表达式，后对变量进行++</strong></p> </li><li> <p><strong>请详细看下方代码并理解</strong></p> </li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//递增</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token comment\">//后置递增</span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\ta<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//等价于a = a + 1</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 11</span>\n\n\t<span class=\"token comment\">//前置递增</span>\n\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">++</span>b<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 11</span>\n\n\t<span class=\"token comment\">//区别</span>\n\t<span class=\"token comment\">//前置递增先对变量进行++，再计算表达式</span>\n\t<span class=\"token keyword\">int</span> a2 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> b2 <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>a2 <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> b2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//110</span>\n\n\t<span class=\"token comment\">//后置递增先计算表达式，后对变量进行++</span>\n\t<span class=\"token keyword\">int</span> a3 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> b3 <span class=\"token operator\">=</span> a3<span class=\"token operator\">++</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> b3 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//100</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"22_272\"></a>2.2、赋值运算符</h2>\n<p><strong>作用</strong>：用于将表达式的值赋给变量</p>\n<ul><li>请详细看表格即可</li></ul>\n<table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>a=2; b=3;</td><td>a=2; b=3;</td></tr><tr><td>+=</td><td>加等于</td><td>a=0; a+=2;</td><td>a=2;</td></tr><tr><td>-=</td><td>减等于</td><td>a=5; a-=3;</td><td>a=2;</td></tr><tr><td>*=</td><td>乘等于</td><td>a=2; a*=2;</td><td>a=4;</td></tr><tr><td>/=</td><td>除等于</td><td>a=4; a/=2;</td><td>a=2;</td></tr><tr><td>%=</td><td>模等于</td><td>a=3; a%2;</td><td>a=1;</td></tr></tbody></table>\n<h2><a id=\"23_291\"></a>2.3、比较运算符</h2>\n<p><strong>作用</strong>：用于表达式的比较，并返回一个真值或假值</p>\n<ul><li>请详细看表格即可</li></ul>\n<table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>==</td><td>相等于</td><td>4 == 3</td><td>0</td></tr><tr><td>!=</td><td>不等于</td><td>4 != 3</td><td>1</td></tr><tr><td>&lt;</td><td>小于</td><td>4 &lt; 3</td><td>0</td></tr><tr><td>&gt;</td><td>大于</td><td>4 &gt; 3</td><td>1</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>4 &lt;= 3</td><td>0</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>4 &gt;= 1</td><td>1</td></tr></tbody></table>\n<blockquote>\n<p>注意：C和C++ 语言的比较运算中， <mark>“真”用数字“1”来表示， “假”用数字“0”来表示。</mark></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210613211812142.png\"/></p>\n<h2><a id=\"24_312\"></a>2.4、逻辑运算符</h2>\n<p><strong>作用</strong>：用于根据表达式的值返回真值或假值</p>\n<ul><li>请详细看表格即可</li></ul>\n<table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>!</td><td>非</td><td>!a</td><td>如果a为假，则!a为真； 如果a为真，则!a为假。</td></tr><tr><td>&amp;&amp;</td><td>与</td><td>a &amp;&amp; b</td><td>如果a和b都为真，则结果为真，否则为假。</td></tr><tr><td>||</td><td>或</td><td>a || b</td><td>如果a和b有一个为真，则结果为真，二者都为假时，结果为假。</td></tr></tbody></table>\n<ul><li><code>!</code>非为三者中运算符最高的</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210613211759282.png\"/></p>\n<h1><a id=\"3_332\"></a>3、流程结构</h1>\n<h2><a id=\"31_334\"></a>3.1、选择结构</h2>\n<h3><a id=\"311if_336\"></a>3.1.1、if语句</h3>\n<ul><li>if语句较为简单，常常搭配else使用，且可以嵌套使用</li></ul>\n<h3><a id=\"312_342\"></a>3.1.2、三目运算符</h3>\n<p><strong>作用：</strong> 通过三目运算符实现简单的判断</p>\n<p><strong>语法：</strong><code>表达式1 ? 表达式2 ：表达式3</code></p>\n<p>如果表达式1的值为真，执行表达式2，并返回表达式2的结果；</p>\n<p>如果表达式1的值为假，执行表达式3，并返回表达式3的结果。</p>\n<ul><li><strong>此处常出程序阅读题！！！！</strong></li></ul>\n<h3><a id=\"313switch_356\"></a>3.1.3、switch语句</h3>\n<p><strong>作用</strong>：执行多条件分支语句</p>\n<p><strong>语法</strong>：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>表达式<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token keyword\">case</span> 结果<span class=\"token number\">1</span>：执行语句<span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">case</span> 结果<span class=\"token number\">2</span>：执行语句<span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>执行语句<span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>switch语句中表达式类型只能是<strong>整型</strong>或者<strong>字符型</strong></li><li>case里如果没有break，那么程序会一直向下执行</li></ul>\n<h2><a id=\"32_383\"></a>3.2、循环结构</h2>\n<h3><a id=\"321while_385\"></a>3.2.1、while</h3>\n<p><strong>作用</strong>：满足循环条件，执行循环语句</p>\n<p><strong>语法：</strong><code> while(循环条件){ 循环语句 }</code></p>\n<p><strong>解释：</strong><mark>只要循环条件的结果为真，就执行循环语句</mark></p>\n<h3><a id=\"322dowhile_395\"></a>3.2.2、do…while</h3>\n<p><strong>作用：</strong> 满足循环条件，执行循环语句</p>\n<p><strong>语法：</strong> <code>do{ 循环语句 } while(循环条件);</code></p>\n<p><strong>注意</strong>：与while的区别在于<mark>do…while会先执行一次循环语句</mark>，再判断循环条件（这里常考两者区别，记住无论怎样，do…while都会必然执行一次循环语句）</p>\n<h3><a id=\"323for_405\"></a>3.2.3、for</h3>\n<ul><li><strong>for循环中的表达式，要用分号进行分隔</strong></li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"33_425\"></a>3.3、跳转语句</h2>\n<h3><a id=\"331break_427\"></a>3.3.1、break</h3>\n<p><strong>作用</strong>: 用于跳出<mark>选择结构</mark>或者<mark>循环结构</mark></p>\n<h3><a id=\"332continue_431\"></a>3.3.2、continue</h3>\n<p><strong>作用</strong>：在<mark>循环语句</mark>中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p>\n<blockquote>\n<p>注意：continue并没有使整个循环终止，而break会跳出循环</p>\n</blockquote>\n<h1><a id=\"4_441\"></a>4、数组</h1>\n<p>数组：所谓数组，就是一个<mark>集合</mark>，存放<mark>相同类型</mark>的<mark>数据元素</mark></p>\n<ul><li>数组中的每个<mark>数据元素都是相同的数据类型</mark></li><li>数组是由<mark>连续的内存</mark>位置组成的</li></ul>\n<h2><a id=\"41_450\"></a>4.1、一维数组</h2>\n<p>一维数组定义的三种方式：</p>\n<ol><li><code>数据类型 数组名[ 数组长度 ];</code>(常用，了解其余两种即可)</li><li><code>数据类型 数组名[ 数组长度 ] = { 值1，值2 ...};</code></li><li><code>数据类型 数组名[ ] = { 值1，值2 ...};</code></li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> score<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> score2<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">70</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> score3<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">70</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li><strong>数组中下标是从0开始索引</strong></li><li><strong>在对全部数组元素赋初值时，可以不指定数组长度</strong></li><li>直接打印数组名，可以查看数组所占内存的首地址</li><li>对数组名进行sizeof，可以获取整个数组占内存空间的大小</li><li>以上三种方式并不要求都会，但是需要都见过，防止在程序改错中乱改</li></ul>\n<h3><a id=\"411_470\"></a>4.1.1、一维数组初始化</h3>\n<ol><li>在定义数组时分别对数组元素赋予初值。例如</li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span>，<span class=\"token number\">1</span>，<span class=\"token number\">2</span>，<span class=\"token number\">3</span>，<span class=\"token number\">4</span>，<span class=\"token number\">5</span>，<span class=\"token number\">6</span>，<span class=\"token number\">7</span>，<span class=\"token number\">8</span>，<span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ol start=\"2\"><li>可以只给一部分元素赋值。例如</li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>   \n</code></pre>\n<ol start=\"3\"><li>如果想使一个数组中全部元素值为1，可以写成</li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span>，<span class=\"token number\">1</span>，<span class=\"token number\">1</span>，<span class=\"token number\">1</span>，<span class=\"token number\">1</span>，<span class=\"token number\">1</span>，<span class=\"token number\">1</span>，<span class=\"token number\">1</span>，<span class=\"token number\">1</span>，<span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span>］<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误写法,不能给数组整体赋初值</span>\n</code></pre>\n<ol start=\"4\"><li>在对<mark>全部数组元素赋初值时</mark>，可以不指定数组长度</li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span>，<span class=\"token number\">2</span>，<span class=\"token number\">3</span>，<span class=\"token number\">4</span>，<span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 可以写成</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span>，<span class=\"token number\">2</span>，<span class=\"token number\">3</span>，<span class=\"token number\">4</span>，<span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"42_503\"></a>4.2、二维数组</h2>\n<p>二维数组定义的四种方式：</p>\n<ol><li><code>数据类型 数组名[ 行数 ][ 列数 ];</code></li><li><code>数据类型 数组名[ 行数 ][ 列数 ] = { {数据1，数据2 } ，{数据3，数据4 } };</code></li><li><code>数据类型 数组名[ 行数 ][ 列数 ] = { 数据1，数据2，数据3，数据4};</code></li><li><code> 数据类型 数组名[ ][ 列数 ] = { 数据1，数据2，数据3，数据4};</code></li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> arr2<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> arr3<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">int</span> arr4<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>以上4种定义方式，利用<mark>第二种更加直观，提高代码的可读性</mark></li><li><strong>如果对全部元素赋初值，定义数组时对第一维的长度可以不指定，但是第二维的长度不能省略</strong></li></ul>\n<h2><a id=\"43_529\"></a>4.3、字符数组</h2>\n<ul><li>用来存放字符数据的数组是字符数组，字符数组中的一个元素存放一个字符</li></ul>\n<p><strong>定义</strong>：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>′I′<span class=\"token punctuation\">,</span>′ ′<span class=\"token punctuation\">,</span>′a′<span class=\"token punctuation\">,</span>′m′<span class=\"token punctuation\">,</span>′ ′<span class=\"token punctuation\">,</span>′h′<span class=\"token punctuation\">,</span>′a′<span class=\"token punctuation\">,</span>′p′<span class=\"token punctuation\">,</span>′p′<span class=\"token punctuation\">,</span>′y′<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>赋值</strong>：</p>\n<p>只能对字符数组的元素赋值，而不能用赋值语句对整个数组赋值</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nc<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>′C′<span class=\"token punctuation\">,</span>′h′<span class=\"token punctuation\">,</span>′i′<span class=\"token punctuation\">,</span>′n′<span class=\"token punctuation\">,</span>′a′<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">//错误，不能对整个数组一次赋值</span>\nC<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>′C′<span class=\"token punctuation\">;</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>′h′<span class=\"token punctuation\">;</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>′i′<span class=\"token punctuation\">;</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>′n′<span class=\"token punctuation\">;</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>′a′<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//对数组元素赋值，正确</span>\n\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\na<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>                                   <span class=\"token comment\">//错误，不能对整个数组整体赋值</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>                          <span class=\"token comment\">//正确，引用数组元素 </span>\n</code></pre>\n<h2><a id=\"44_555\"></a>4.4、字符串函数</h2>\n<ul><li> <p>字符串连接函数 <code>strcat</code></p> </li><li> <p>字符串复制函数 <code>strcpy</code></p> </li><li> <p>字符串比较函数 <code>strcmp</code></p> </li><li> <p>字符串长度函数 <code>strlen</code></p> </li></ul>\n<h1><a id=\"5_565\"></a>5、函数</h1>\n<p><strong>作用</strong>：将一段经常使用的代码封装起来，减少重复代码</p>\n<h2><a id=\"51_569\"></a>5.1、函数定义</h2>\n<p>函数的定义一般主要有5个步骤：</p>\n<p>1、返回值类型</p>\n<p>2、函数名</p>\n<p>3、参数表列</p>\n<p>4、函数体语句</p>\n<p>5、return 表达式</p>\n<p><strong>语法：</strong></p>\n<pre><code class=\"prism language-cpp\">返回值类型 函数名 （参数列表）\n<span class=\"token punctuation\">{<!-- --></span>\n\n       函数体语句\n\n       <span class=\"token keyword\">return</span>表达式\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>返回值类型 ：一个函数可以返回一个值。在函数定义中</li><li>函数名：给函数起个名称</li><li>参数列表：使用该函数时，传入的数据</li><li>函数体语句：花括号内的代码，函数内需要执行的语句</li><li>return表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据</li></ul>\n<p><strong>示例</strong>：定义一个加法函数，实现两个数相加</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//函数定义</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"52_615\"></a>5.2、函数调用</h2>\n<p><strong>功能</strong>：使用定义好的函数</p>\n<p><strong>语法：</strong><code> 函数名（参数）</code></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li> <p><strong>函数定义里小括号内称为形参，函数调用时传入的参数称为实参</strong></p> </li><li> <p>例如此处的<code>num1,num2</code> 为形参，<code>10,20</code>为实参</p> </li><li> <p><strong>函数不能嵌套定义但是可以嵌套调用</strong>（常考）</p> </li></ul>\n<h2><a id=\"53_633\"></a>5.3、函数声明</h2>\n<ul><li>函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//声明可以多次，定义只能一次</span>\n<span class=\"token comment\">//声明</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//定义</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">&gt;</span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"54_671\"></a>5.4、值传递</h2>\n<ul><li>所谓<mark>值传递</mark>，即<mark>单向传递</mark>，就是函数调用时<mark>实参将数值传入给形参</mark>，而不能由<mark>形参传回来给实参</mark>。</li><li>值传递时，<mark>如果形参发生改变，并不会影响实参</mark>（值传递时，形参是修饰不了实参的），请务必理解并记住，此处因篇幅就不进行讲解了！</li></ul>\n<h2><a id=\"55_678\"></a>5.5、函数默认参数</h2>\n<p>在C++中，函数的形参列表中的形参是可以有默认值的。</p>\n<p>语法：<code> 返回值类型 函数名 （参数= 默认值）{}</code></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值</span>\n<span class=\"token comment\">//2. 如果函数声明有默认值，函数实现的时候就不能有默认参数</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ret = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ret = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li><strong>如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值</strong></li><li><strong>如果函数声明有默认值，函数实现的时候就不能有默认参数</strong></li></ul>\n<h2><a id=\"56_712\"></a>5.6、函数占位参数</h2>\n<p>C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p>\n<p><strong>语法：</strong> <code>返回值类型 函数名 (数据类型){}</code></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//函数占位参数 ，占位参数也可以有默认参数</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"this is func\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//占位参数必须填补</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"57_733\"></a>5.7、函数重载</h2>\n<p><strong>作用</strong>：函数名可以相同，提高复用性</p>\n<p><strong>函数重载满足条件：</strong></p>\n<ul><li>函数名称相同</li><li>函数参数<strong>类型不同</strong> 或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong></li></ul>\n<p><strong>注意:</strong> <mark>函数的返回值不可以作为函数重载的条件</mark></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//函数重载需要函数都在同一个作用域下</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func 的调用！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func (int a) 的调用！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func (double a)的调用！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func (int a ,double b) 的调用！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> a <span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func (double a ,int b)的调用！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//函数返回值不可以作为函数重载条件</span>\n<span class=\"token comment\">//int func(double a, int b)</span>\n<span class=\"token comment\">//{<!-- --></span>\n<span class=\"token comment\">//\tcout &lt;&lt; \"func (double a ,int b)的调用！\" &lt;&lt; endl;</span>\n<span class=\"token comment\">//}</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.14</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"58_788\"></a>5.8、重载运算符规则</h2>\n<p>C++中有以下五个运算符不能重载</p>\n<table><thead><tr><th>成员访问运算符</th><th>成员指针访问运算符</th><th>域运算符</th><th>长度运算符</th><th>条件运算符</th></tr></thead><tbody><tr><td>.</td><td>.*</td><td>：：</td><td>sizeof</td><td>？：</td></tr></tbody></table>\n<p><strong>重载运算符规则</strong>：</p>\n<ol><li><mark>重载不能改变运算符运算对象（即操作数）的个数</mark></li><li><mark>重载不能改变运算符的优先级别</mark></li><li><mark>重载不能改变运算符的结合性</mark></li><li>运算符重载函数可以是<mark>类的成员函数</mark>，也可以是<mark>类的友元函数</mark>，还可以是既非类的成员函数也不是友元函数的普通函数</li></ol>\n<hr/>\n<p>什么时候应该用成员函数方式，什么时候应该用友元函数方式？二者有何区别呢？（）</p>\n<ul><li><mark>一般将单目运算符重载为成员函数，将双目运算符（二元运算符）重载为友元函数</mark>\n<ul><li>重载为类的成员函数 - <code>operator</code> 函数有一个参数</li><li>重载为类的友元函数 - <code>operator</code> 函数有两个参数</li><li>只能将重载 <code>“&gt;&gt;”</code> （流插入运算符）和<code>“&lt;&lt;”</code> （流提取运算符）的函数作为<strong>友元函数</strong>或者普通函数重载，而不能将它们定义为成员函数，因为参数为两个</li><li><strong>类型转换运算符只能作为成员函数重载</strong></li></ul> </li></ul>\n<p>单目运算符：只有一个操作数，如 !，-(负号)，&amp;，*，++，–</p>\n<p>双目运算符：*，/，%，+，-，==，!=，&lt;,&gt;,&lt;=,&gt;=,&amp;&amp;，||</p>\n<h2><a id=\"59_818\"></a>5.9、内联函数</h2>\n<ul><li>指定内置函数的方法很简单，只需在函数首行的左端加一个关键字<strong>inline</strong>即可。</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>使用内置函数可以节省运行时间</li><li>只有那些规模较小而又被频繁调用的简单函数，才适合于声明为inline函数。</li></ul>\n<h2><a id=\"510_831\"></a>5.10、函数模板</h2>\n<p><strong>语法：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n函数声明或定义\n</code></pre>\n<p><strong>解释：</strong></p>\n<p>template — 声明创建模板</p>\n<p>typename — 表面其后面的符号是一种数据类型，可以用class代替</p>\n<p>T — 通用的数据类型，名称可以替换，通常为大写字母</p>\n<p><strong>只适用于函数体相同、函数的参数个数相同而类型不同的情况，如果参数的个数不同，则不能用函数模板。</strong></p>\n<h1><a id=\"6_852\"></a>6、指针</h1>\n<p><strong>指针的作用：</strong> 可以通过指针间接访问内存</p>\n<h2><a id=\"61_858\"></a>6.1、指针变量</h2>\n<p>指针变量定义语法： <code>数据类型 * 变量名；</code></p>\n<ul><li>请看下方代码示例，理解指针变量的定义与使用，期末一般不会出太难指针的题，但是基本用法一定要会！！</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token comment\">//1、指针的定义</span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//定义整型变量a</span>\n\t\n\t<span class=\"token comment\">//指针定义语法： 数据类型 * 变量名 ;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//指针变量赋值</span>\n\tp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">//指针指向变量a的地址</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//打印数据a的地址</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//打印指针变量p</span>\n    <span class=\"token comment\">//0073F8BC</span>\n    <span class=\"token comment\">//0073F8BC</span>\n\n\t<span class=\"token comment\">//2、指针的使用</span>\n\t<span class=\"token comment\">//通过*操作指针变量指向的内存</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"*p = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// *p = 10</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>指针变量和普通变量的区别</p>\n<ul><li>普通变量存放的是数据,指针变量存放的是地址</li><li>指针变量可以通过\" * \"操作符，操作指针变量指向的内存空间，这个过程称为解引用</li></ul>\n<blockquote>\n<p>总结1： 我们可以通过 &amp; 符号 获取变量的地址</p>\n</blockquote>\n<blockquote>\n<p>总结2：利用指针可以记录地址</p>\n</blockquote>\n<blockquote>\n<p>总结3：对指针变量解引用，可以操作指针指向的内存</p>\n</blockquote>\n<blockquote>\n<p>总结4：所有指针类型在32位操作系统下是4个字节（了解）</p>\n</blockquote>\n<h2><a id=\"62const_908\"></a>6.2、const修饰指针</h2>\n<p>const修饰指针有三种情况</p>\n<ol><li>const修饰指针 — 常量指针</li><li>const修饰常量 — 指针常量</li><li>const既修饰指针，又修饰常量</li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//const修饰的是指针，指针指向可以改，指针指向的值不可以更改</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span> \n\tp1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">//正确</span>\n\t<span class=\"token comment\">//*p1 = 100;  报错</span>\n\t\n\n\t<span class=\"token comment\">//const修饰的是常量，指针指向不可以改，指针指向的值可以更改</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> p2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//p2 = &amp;b; //错误</span>\n\t<span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//正确</span>\n\n    <span class=\"token comment\">//const既修饰指针又修饰常量</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> p3 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//p3 = &amp;b; //错误</span>\n\t<span class=\"token comment\">//*p3 = 100; //错误</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>    \n</code></pre>\n<blockquote>\n<p>技巧：看const右侧紧跟着的是指针还是常量, 是指针就是常量指针，是常量就是指针常量</p>\n</blockquote>\n<h2><a id=\"63_948\"></a>6.3、指针和数组</h2>\n<p><strong>作用</strong>：利用指针访问数组中元素</p>\n<ul><li>C++规定，<mark>数组名就是数组的起始地址</mark></li><li><mark>数组的指针就是数组的起始地址</mark></li><li>数组名可以作函数的实参和形参，传递的是<mark>数组的地址</mark></li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//指向数组的指针</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"第一个元素： \"</span> <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> \t\t<span class=\"token comment\">//1</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"指针访问第一个元素： \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t  <span class=\"token comment\">//1</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//利用指针遍历数组</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tp<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"64_981\"></a>6.4、指针和函数</h2>\n<p><strong>作用</strong>：利用指针作函数参数，可以修改实参的值（<strong>地址传递</strong>）</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//值传递</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n\ta <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span> \n\tb <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//地址传递</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>p1<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>p2<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">swap1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 值传递不会改变实参</span>\n\n\t<span class=\"token function\">swap2</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//地址传递会改变实参</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b = \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t <span class=\"token comment\">// 等价于 int *p = a;\t</span>\n<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \t     <span class=\"token comment\">// 等价于 a[0] = 1;</span>\n<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\t\t <span class=\"token comment\">// 等价于 a[1] = 2;</span>\n<span class=\"token comment\">// 所以 *(p+1) = a[1]; *(p+2) = a[2];</span>\n</code></pre>\n<ul><li>C++规定， p+1 指向数组的 下一个元素</li></ul>\n<hr/>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 用数组名作形参，因为接收的是地址，所以可以不指定具体的元素个数</span>\n    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 形参数组</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 实参数组</span>\n    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 形参指针</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p>\n</blockquote>\n<h2><a id=\"64_1063\"></a>6.4、返回指针值的函数</h2>\n<ul><li>返回指针值的函数简称指针函数。</li><li>定义指针函数的一般形式为：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// 类型名 * 函数名（参数列表）</span>\n<span class=\"token keyword\">int</span>  <span class=\"token operator\">*</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h1><a id=\"7_1075\"></a>7、引用</h1>\n<p><strong>作用</strong>： 给变量起别名</p>\n<p><strong>语法：</strong> <code>数据类型 &amp;别名 = 原名</code></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b = \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 10</span>\n    <span class=\"token comment\">// 10</span>\n\n\tb <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b = \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 100</span>\n    <span class=\"token comment\">// 100</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"71_1105\"></a>7.1、引用注意事项</h2>\n<ul><li> <p><strong>引用必须初始化</strong></p> <pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误，引用必须初始化</span>\n</code></pre> </li><li> <p><strong>在声明一个引用后，不能再使之作为另一变量的引用</strong></p> </li></ul>\n<h2><a id=\"72_1121\"></a>7.2、引用做函数参数</h2>\n<p><strong>作用</strong>：函数传参时，可以利用引用的技术让形参修饰实参</p>\n<p><strong>优点</strong>：可以简化指针修改实参</p>\n<ul><li><strong>通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单</strong></li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//1. 值传递</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">mySwap01</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n\ta <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n\tb <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//2. 地址传递</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">mySwap02</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>a <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>b <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//参数：把地址传进去，用指针接收</span>\n\n<span class=\"token comment\">//3. 引用传递</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">mySwap03</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n\ta <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n\tb <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//参数：别名，下面的a是上面的a的别名，用别名操作修改可原名操作修改是一样的</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 值传递，形参不会修饰实参</span>\n\t<span class=\"token function\">mySwap01</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a:\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" b:\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// a:10 b:20</span>\n\n    <span class=\"token comment\">// 地址传递，形参会修饰实参</span>\n\t<span class=\"token function\">mySwap02</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a:\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" b:\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// a:20 b:10</span>\n\n    <span class=\"token comment\">// 引用传递，形参会修饰实参</span>\n\t<span class=\"token function\">mySwap03</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a:\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" b:\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// a:20 b:10</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"73_1180\"></a>7.3、引用做函数返回值</h2>\n<p>作用：引用是可以作为函数的返回值存在的</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//数据类型后加&amp;，相当于用引用的方式返回 </span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 必须使用静态变量,需加 static 关键字</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ref2 <span class=\"token operator\">=</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"8_1202\"></a>8、类和对象</h1>\n<h2><a id=\"81structclass_1204\"></a>8.1、struct和class区别</h2>\n<p>在C++中 struct和class唯一的<strong>区别</strong>就在于 <strong>默认的访问权限不同</strong></p>\n<p>区别：</p>\n<ul><li>struct 默认权限为公共</li><li>class 默认权限为私有</li></ul>\n<h2><a id=\"81_1215\"></a>8.1、构造函数和析构函数</h2>\n<ul><li>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。</li><li>析构函数：主要作用在于对象<strong>销毁前</strong>系统自动调用，执行一些清理工作。</li></ul>\n<hr/>\n<p><strong>构造函数语法：</strong><code>类名(){}</code>（<strong>构造和析构很容易出选择题，特点要记住</strong>）</p>\n<ol><li>构造函数，没有返回值也不写void</li><li>构造函数的名字必须与类名相同</li><li>构造函数可以有参数，因此可以发生重载</li><li>程序在调用对象时候会自动调用构造函数，无须手动调用,而且只会调用一次（构造函数不需用户调用，也不能被用户调用）</li></ol>\n<hr/>\n<p><strong>析构函数语法：</strong> <code>~类名(){}</code></p>\n<ol><li>析构函数，没有返回值也不写void</li><li>函数名称与类名相同,在名称前加上符号<code> ~</code></li><li>析构函数不可以有参数，因此不可以发生重载</li><li>程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次</li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">//构造函数</span>\n\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person的构造函数调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//析构函数</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person的析构函数调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tPerson p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//在栈上的数据，test01()执行完毕后，释放这个对象</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\n\t<span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"83_1272\"></a>8.3、构造函数分类与调用</h2>\n<p>构造函数按参数分为： 有参构造和无参构造</p>\n<p>调用方式：括号法</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">//无参（默认）构造函数</span>\n\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"无参构造函数!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//有参构造函数</span>\n\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tage <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"有参构造函数!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//析构函数</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"析构函数!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//2、构造函数的调用</span>\n<span class=\"token comment\">//调用无参构造函数</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tPerson p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//调用无参构造函数</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//调用有参的构造函数</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token comment\">// 括号法，常用</span>\n\tPerson <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>尽管在一个类中可以包含多个构造函数，但是对于每一个对象来说，建立对象时只执行其中一个构造函数，并非每个构造函数都被执行</li></ul>\n<h2><a id=\"84_1314\"></a>8.4、初始化列表</h2>\n<ul><li>C++提供了初始化列表语法，用来初始化属性</li></ul>\n<p><strong>语法：</strong><code>构造函数()：属性1(值1),属性2（值2）... {}</code></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token comment\">传统方式初始化</span>\n\t<span class=\"token comment\">//Person(int a, int b, int c) {<!-- --></span>\n\t<span class=\"token comment\">//\tm_A = a;</span>\n\t<span class=\"token comment\">//\tm_B = b;</span>\n\t<span class=\"token comment\">//\tm_C = c;</span>\n\t<span class=\"token comment\">//}</span>\n\n\t<span class=\"token comment\">//初始化列表方式初始化</span>\n\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">m_A</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_B</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_C</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">PrintPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"mA:\"</span> <span class=\"token operator\">&lt;&lt;</span> m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"mB:\"</span> <span class=\"token operator\">&lt;&lt;</span> m_B <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"mC:\"</span> <span class=\"token operator\">&lt;&lt;</span> m_C <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> m_B<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> m_C<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\tPerson <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tp<span class=\"token punctuation\">.</span><span class=\"token function\">PrintPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"85_1357\"></a>8.5、类对象作为类成员</h2>\n<p>C++类中的成员可以是另一个类的对象，我们称该成员为 <strong>对象成员</strong></p>\n<p>例如：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    A a；\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>B类中有对象A作为成员，A为对象成员</li><li>那么当创建B对象时，A与B的构造和析构的顺序是谁先谁后？ \n  <ul><li><strong>先调用对象成员的构造，再调用本类构造(如上例中，先调用A的构造函数)</strong></li><li><strong>析构顺序与构造相反</strong></li></ul> </li></ul>\n<h2><a id=\"86_1378\"></a>8.6、静态成员</h2>\n<p>静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员</p>\n<p>静态成员分为：</p>\n<ul><li>静态成员变量 \n  <ul><li>所有对象共享同一份数据</li><li>在编译阶段分配内存</li><li><mark>类内声明，类外初始化</mark></li></ul> </li><li>静态成员函数 \n  <ul><li>所有对象共享同一个函数</li><li>静态成员函数只能访问静态成员变量<br/> **示例1 **：静态成员变量</li></ul> </li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span> <span class=\"token comment\">//静态成员变量</span>\n\n\t<span class=\"token comment\">//静态成员变量特点：</span>\n\t<span class=\"token comment\">//1 在编译阶段分配内存</span>\n\t<span class=\"token comment\">//2 类内声明，类外初始化</span>\n\t<span class=\"token comment\">//3 所有对象共享同一份数据</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> m_B<span class=\"token punctuation\">;</span> <span class=\"token comment\">//静态成员变量也是有访问权限的</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> Person<span class=\"token double-colon punctuation\">::</span>m_A <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> Person<span class=\"token double-colon punctuation\">::</span>m_B <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//静态成员变量两种访问方式</span>\n\n\t<span class=\"token comment\">//1、通过对象</span>\n\tPerson p1<span class=\"token punctuation\">;</span>\n\tp1<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p1.m_A = \"</span> <span class=\"token operator\">&lt;&lt;</span> p1<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\tPerson p2<span class=\"token punctuation\">;</span>\n\tp2<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p1.m_A = \"</span> <span class=\"token operator\">&lt;&lt;</span> p1<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//共享同一份数据</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p2.m_A = \"</span> <span class=\"token operator\">&lt;&lt;</span> p2<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//2、通过类名</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"m_A = \"</span> <span class=\"token operator\">&lt;&lt;</span> Person<span class=\"token double-colon punctuation\">::</span>m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\">//cout &lt;&lt; \"m_B = \" &lt;&lt; Person::m_B &lt;&lt; endl; //私有权限访问不到</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>示例2</strong>：静态成员函数</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token comment\">//静态成员函数特点：</span>\n\t<span class=\"token comment\">//1 程序共享一个函数</span>\n\t<span class=\"token comment\">//2 静态成员函数只能访问静态成员变量</span>\n\t\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tm_A <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//m_B = 100; //错误，不可以访问非静态成员变量</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span> <span class=\"token comment\">//静态成员变量</span>\n\t<span class=\"token keyword\">int</span> m_B<span class=\"token punctuation\">;</span> <span class=\"token comment\">// </span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token comment\">//静态成员函数也是有访问权限的</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func2调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> Person<span class=\"token double-colon punctuation\">::</span>m_A <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//静态成员变量两种访问方式</span>\n\n\t<span class=\"token comment\">//1、通过对象</span>\n\tPerson p1<span class=\"token punctuation\">;</span>\n\tp1<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//2、通过类名</span>\n\t<span class=\"token class-name\">Person</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\">//Person::func2(); //私有权限访问不到</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"87const_1507\"></a>8.7、const修饰成员函数</h2>\n<p><strong>常函数：</strong></p>\n<ul><li>成员函数后加const后我们称为这个函数为<strong>常函数</strong></li><li>常函数内不可以修改成员属性</li></ul>\n<p><strong>常对象：</strong></p>\n<ul><li>声明对象前加const称该对象为常对象</li><li>常对象只能调用常函数</li></ul>\n<h2><a id=\"88const_1521\"></a>8.8、const型数据小结</h2>\n<table><thead><tr><th>形式</th><th>含义</th></tr></thead><tbody><tr><td>Time const t1</td><td>t1 是常对象，其值在任何情况下都不能改变</td></tr><tr><td>void Time：：fun() const</td><td>fun 是 Time类中的常成员函数，可以引用，但不能修改本类中的数据成员</td></tr><tr><td>Time * const p</td><td>p 是指向Time对象的常指针，P的值不能改变</td></tr><tr><td>const Time *p</td><td>p是指向 Time 类常对象的指针，其指向的类对象的值不能通过指针来改变</td></tr><tr><td>Time &amp;t1 = t；</td><td>t1是Time类对象t的引用，二者指向同一段内存空间</td></tr></tbody></table>\n<h1><a id=\"9_1533\"></a>9、继承</h1>\n<p>继承的好处：<mark>可以减少重复的代码</mark></p>\n<p>继承的语法：<code>class 子类 : 继承方式 父类</code></p>\n<p><code>class A : public B; </code></p>\n<p>A 类称为子类 或 派生类</p>\n<p>B 类称为父类 或 基类</p>\n<h2><a id=\"91_1547\"></a>9.1、继承方式</h2>\n<p><strong>继承方式一共有三种：</strong></p>\n<ul><li>公共继承</li><li>保护继承</li><li>私有继承</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210613211841262.png\"/></p>\n<p>简单的说：</p>\n<ul><li>公共继承：基类的公用成员和保护成员在派生类中保持原有访问属性，其私有成员仍为基类私有。</li><li>私有继承：基类的公用成员和保护成员在派生类中成了私有成员。其私有成员仍为基类私有</li><li>保护继承：基类的公用成员和保护成员在派生类中成了保护成员，其私有成员仍为基类私有。</li></ul>\n<h2><a id=\"92_1567\"></a>9.2、构造和析构函数</h2>\n<ul><li> <p>构造函数的主要作用是对数据成员初始化</p> </li><li> <p>派生类是不能继承基类的析构函数，也需要通过派生类的析构函数去调用基类的析构函数</p> </li><li> <p><strong>继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</strong></p> </li></ul>\n<h2><a id=\"93_1579\"></a>9.3、不能继承</h2>\n<ul><li>C++中，不能被派生类继承的是：<code>构造函数</code></li></ul>\n<h2><a id=\"94_1585\"></a>9.4、继承特点</h2>\n<p>单继承：一个派生类只从一个基类派生</p>\n<p>多继承：一个派生类有两个或多个基类的称为多重继承</p>\n<h1><a id=\"10_1593\"></a>10、多态</h1>\n<p>多态性是指具有<strong>不同功能的函数</strong>可以用<strong>同一个函数名</strong>，这样就<strong>可以用一个函数名调用不同内容的函数</strong></p>\n<p>多态分为两类</p>\n<ul><li>静态多态: 函数重载 和 运算符重载属于静态多态，复用函数名</li><li>动态多态: 派生类和虚函数（virtual function）实现运行时多态</li></ul>\n<h2><a id=\"101_1604\"></a>10.1、虚函数</h2>\n<p><strong>什么是虚函数？</strong></p>\n<ul><li>在基类用 <code>virtual</code> 声明成员函数为虚函数</li></ul>\n<p><strong>虚函数的作用</strong>：</p>\n<ul><li>虚函数的作用是<mark>允许在派生类中重新定义与基类同名的函数，并且可以通过基类指针或引用来访问基类和派生类中的同名函数</mark></li></ul>\n<p><strong>虚函数的使用方法</strong>：</p>\n<ul><li>在基类用 <code>virtual</code> 声明成员函数为虚函数。这样就可以在派生类中重新定义此函数，为它赋予新的功能，并能方便地被调用 \n  <ul><li>在类外定义虚函数时，不必再加<code>virtual</code></li></ul> </li><li>在<mark>派生类中</mark>重新定义此函数，要求函数名、函数类型、函数参数个数和类型全部与基类的虚函数相同，并根据派生类的需要重新定义函数体</li></ul>\n<p>C++规定，当一个成员函数被声明为虚函数后，其派生类中的同名函数都自动成为虚函数。因此在派生类重新声明该虚函数时，可以加virtual，也可以不加，但习惯上一般在每一层声明该函数时都加virtual，使程序更加清晰</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">//Speak函数就是虚函数</span>\n\t<span class=\"token comment\">//函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"动物在说话\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Animal</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"小猫在说话\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Animal</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"小狗在说话\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//我们希望传入什么对象，那么就调用什么对象的函数</span>\n<span class=\"token comment\">//如果函数地址在编译阶段就能确定，那么静态联编</span>\n<span class=\"token comment\">//如果函数地址在运行阶段才能确定，就是动态联编</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">DoSpeak</span><span class=\"token punctuation\">(</span>Animal <span class=\"token operator\">&amp;</span> animal<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tanimal<span class=\"token punctuation\">.</span><span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//多态满足条件： </span>\n<span class=\"token comment\">//1、有继承关系</span>\n<span class=\"token comment\">//2、子类重写父类中的虚函数</span>\n<span class=\"token comment\">//多态使用：</span>\n<span class=\"token comment\">//父类指针或引用指向子类对象</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tCat cat<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">DoSpeak</span><span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\tDog dog<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">DoSpeak</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>多态满足条件</p>\n<ul><li>有继承关系</li><li>子类重写父类中的虚函数</li></ul>\n<ol start=\"2\"><li><strong>纯虚函数</strong></li></ol>\n<ul><li> <p>纯虚函数是在声明虚函数时被“初始化”为0的函数。声明纯虚函数的一般形式是</p> <pre><code class=\"prism language-c++\">virtual 函数类型 函数名 (参数表列) =0;\n</code></pre> </li><li> <p><strong>纯虚函数没有函数体</strong></p> </li><li> <p>最后面的 <code>=0</code> ，并不表示函数返回值为0，它只告诉编译系统<code>“老子是纯虚函数”</code></p> </li><li> <p>纯虚函数只有函数的名字而不具备函数的功能，不能被调用</p> </li></ul>\n<ol start=\"3\"><li><strong>抽象类</strong></li></ol>\n<ul><li> <p>凡是包含纯虚函数的类都是抽象类</p> </li><li> <p>一个基类如果包含一个或一个以上纯虚函数，就是抽象基类。抽象基类不能也不必要定义对象、</p> </li></ul>\n<h1><a id=\"11_1728\"></a>11、文件操作</h1>\n<p>C++中对文件操作需要包含头文件 <mark>&lt; fstream &gt;</mark></p>\n<p><strong>文件类型分为两种</strong>：</p>\n<ol><li><strong>文本文件</strong> - 文件以文本的<strong>ASCII码</strong>形式存储在计算机中</li><li><strong>二进制文件</strong> - 文件以文本的<strong>二进制</strong>形式存储在计算机中，用户一般不能直接读懂它们</li></ol>\n<p><strong>操作文件的三大类</strong>:</p>\n<ol><li>ofstream：写操作</li><li>ifstream： 读操作</li><li>fstream ： 读写操作</li></ol>\n<h2><a id=\"111_1747\"></a>11.1、文本文件</h2>\n<h4><a id=\"511_1749\"></a>5.1.1写文件</h4>\n<p>写文件步骤如下：</p>\n<ol><li> <p>包含头文件</p> <p>#include &lt;fstream&gt;</p> </li><li> <p>创建流对象</p> <p>ofstream ofs;</p> </li><li> <p>打开文件</p> <p>ofs.open(“文件路径”,打开方式);</p> </li><li> <p>写数据</p> <p>ofs &lt;&lt; “写入的数据”;</p> </li><li> <p>关闭文件</p> <p>ofs.close();</p> </li></ol>\n<p>文件打开方式：</p>\n<table><thead><tr><th>打开方式</th><th>解释</th></tr></thead><tbody><tr><td>ios::in</td><td>为读文件而打开文件</td></tr><tr><td>ios::out</td><td>为写文件而打开文件</td></tr><tr><td>ios::ate</td><td>初始位置：文件尾</td></tr><tr><td>ios::app</td><td>追加方式写文件</td></tr><tr><td>ios::trunc</td><td>如果文件存在先删除，再创建</td></tr><tr><td>ios::binary</td><td>二进制方式</td></tr></tbody></table>\n<p><strong>注意：</strong> 文件打开方式可以配合使用，利用|操作符</p>\n<p>**例如：**用二进制方式写文件 <code>ios::binary | ios:: out</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream&gt;</span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tofstream ofs<span class=\"token punctuation\">;</span>\n\tofs<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tofs <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"姓名：张三\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tofs <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"性别：男\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tofs <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"年龄：18\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\tofs<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>总结：</p>\n<ul><li>文件操作必须包含头文件 fstream</li><li>读文件可以利用 ofstream ，或者fstream类</li><li>打开文件时候需要指定操作文件的路径，以及打开方式</li><li>利用&lt;&lt;可以向文件中写数据</li><li>操作完毕，要关闭文件</li></ul>\n<h4><a id=\"512_1845\"></a>5.1.2读文件</h4>\n<p>读文件与写文件步骤相似，但是读取方式相对于比较多</p>\n<p>读文件步骤如下：</p>\n<ol><li> <p>包含头文件</p> <p>#include &lt;fstream&gt;</p> </li><li> <p>创建流对象</p> <p>ifstream ifs;</p> </li><li> <p>打开文件并判断文件是否打开成功</p> <p>ifs.open(“文件路径”,打开方式);</p> </li><li> <p>读数据</p> <p>四种方式读取</p> </li><li> <p>关闭文件</p> <p>ifs.close();</p> </li></ol>\n<p><strong>示例：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tifstream ifs<span class=\"token punctuation\">;</span>\n\tifs<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ifs<span class=\"token punctuation\">.</span><span class=\"token function\">is_open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"文件打开失败\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">//第一种方式</span>\n\t<span class=\"token comment\">//char buf[1024] = { 0 };</span>\n\t<span class=\"token comment\">//while (ifs &gt;&gt; buf)</span>\n\t<span class=\"token comment\">//{<!-- --></span>\n\t<span class=\"token comment\">//\tcout &lt;&lt; buf &lt;&lt; endl;</span>\n\t<span class=\"token comment\">//}</span>\n\n\t<span class=\"token comment\">//第二种</span>\n\t<span class=\"token comment\">//char buf[1024] = { 0 };</span>\n\t<span class=\"token comment\">//while (ifs.getline(buf,sizeof(buf)))</span>\n\t<span class=\"token comment\">//{<!-- --></span>\n\t<span class=\"token comment\">//\tcout &lt;&lt; buf &lt;&lt; endl;</span>\n\t<span class=\"token comment\">//}</span>\n\n\t<span class=\"token comment\">//第三种</span>\n\t<span class=\"token comment\">//string buf;</span>\n\t<span class=\"token comment\">//while (getline(ifs, buf))</span>\n\t<span class=\"token comment\">//{<!-- --></span>\n\t<span class=\"token comment\">//\tcout &lt;&lt; buf &lt;&lt; endl;</span>\n\t<span class=\"token comment\">//}</span>\n\n\t<span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=</span> ifs<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tifs<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>总结：</p>\n<ul><li>读文件可以利用 ifstream ，或者fstream类</li><li>利用is_open函数可以判断文件是否打开成功</li><li>close 关闭文件</li></ul>\n<h3><a id=\"52__1955\"></a>5.2 二进制文件</h3>\n<p>以二进制的方式对文件进行读写操作</p>\n<p>打开方式要指定为 <mark>ios::binary</mark></p>\n<h4><a id=\"521__1963\"></a>5.2.1 写文件</h4>\n<p>二进制方式写文件主要利用流对象调用成员函数write</p>\n<p>函数原型 ：<code>ostream&amp; write(const char * buffer,int len);</code></p>\n<p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">char</span> m_Name<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> m_Age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//二进制文件  写文件</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//1、包含头文件</span>\n\n\t<span class=\"token comment\">//2、创建输出流对象</span>\n\tofstream <span class=\"token function\">ofs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"person.txt\"</span><span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>out <span class=\"token operator\">|</span> ios<span class=\"token double-colon punctuation\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">//3、打开文件</span>\n\t<span class=\"token comment\">//ofs.open(\"person.txt\", ios::out | ios::binary);</span>\n\n\tPerson p <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"张三\"</span>  <span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//4、写文件</span>\n\tofs<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//5、关闭文件</span>\n\tofs<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>总结：</p>\n<ul><li>文件输出流对象 可以通过write函数，以二进制方式写数据</li></ul>\n<h4><a id=\"522__2030\"></a>5.2.2 读文件</h4>\n<p>二进制方式读文件主要利用流对象调用成员函数read</p>\n<p>函数原型：<code>istream&amp; read(char *buffer,int len);</code></p>\n<p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p>\n<p>示例：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">char</span> m_Name<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> m_Age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tifstream <span class=\"token function\">ifs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"person.txt\"</span><span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>in <span class=\"token operator\">|</span> ios<span class=\"token double-colon punctuation\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ifs<span class=\"token punctuation\">.</span><span class=\"token function\">is_open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"文件打开失败\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tPerson p<span class=\"token punctuation\">;</span>\n\tifs<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"姓名： \"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">.</span>m_Name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 年龄： \"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">.</span>m_Age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>文件输入流对象 可以通过read函数，以二进制方式读数据</li></ul>\n<h1><a id=\"12_2085\"></a>12、输入输出流</h1>\n<ul><li> <p>标准输出流：cout 、cerr、clog</p> </li><li> <p>cerr、clog流对象都是标准错误流，都是在终端显示器上显示出错信息</p> </li><li> <p>标准输入流：cin、get、getline</p> </li><li> <p>get函数读入一个字符，getline读入一行字符</p> </li><li> <p>eof函数：文件结束</p> </li><li> <p>peek函数：peek函数的作用是观测下一个字符。</p> </li><li> <p>putback函数：其作用是将前面用get或getline函数从输入流中读取的字符ch返回到输入流，插入到当前指针位置，以供后面读取</p> </li><li> <p>ignore函数：函数作用是跳过输入流中n个字符，或在遇到指定的终止字符时提前结束</p> </li></ul>\n<h1><a id=\"13_2099\"></a>13、异常</h1>\n<p>C++处理异常的机制是由3个部分组成的，即<strong>检查(try)、抛出(throw)和捕捉(catch)</strong>。</p>\n<p>命名空间的作用是<strong>建立一些互相分隔的作用域，把一些全局实体分隔开来，以免产生名字冲突</strong></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-21 14:50:23", "summary": "、期末总结更新时间：年月日版下面评论置顶有链接重点已经用黑体和高亮表示，属于记忆理解部分可收藏使用后面考完找时间分享下面向对象程序设计课后习题答案谭浩强版与题库刷题部分！题库与答案链接：题库与答案链接"}