{"blogid": "124627006", "writerAge": "码龄5年", "writerBlogNum": "94", "writerCollect": "62", "writerComment": "13", "writerFan": "9", "writerGrade": "4级", "writerIntegral": "1055", "writerName": "DotNeter-Hpf", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124627006.jpg", "writerRankTotal": "25695", "writerRankWeekly": "45750", "writerThumb": "47", "writerVisitNum": "39556", "blog_read_count": "1946", "blog_time": "于 2022-05-07 11:17:19 发布", "blog_title": "SqlSugar 5.联表查询", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><ul><li><a href=\"#_1\">用到的几个实体类</a></li><li><a href=\"#1Join_53\">1.Join用法</a></li><li><ul><li><a href=\"#11_1_55\">1.1 语法糖1</a></li><li><ul><li><a href=\"#111__58\">1.1.1 表和表的连接</a></li><li><a href=\"#112_Queryable___78\">1.1.2 表和Queryable的连接 (主表左连了一个由子查询组合的表)</a></li><li><a href=\"#113_Queryable__96\">1.1.3 Queryable和表的连接 (以一个子查询为主表关联其他表)</a></li></ul>\n</li><li><a href=\"#12_2_114\">1.2 语法糖2</a></li><li><a href=\"#13_3_131\">1.3 语法糖3</a></li></ul>\n</li><li><a href=\"#2Where_145\">2.Where用法</a></li><li><a href=\"#3OrderBy_152\">3.OrderBy用法</a></li><li><a href=\"#4GroupBy_159\">4.GroupBy用法</a></li><li><a href=\"#5Select_166\">5.Select用法</a></li><li><ul><li><a href=\"#51__179\">5.1 返回匿名对象</a></li><li><ul><li><ul><li><a href=\"#511__181\">5.1.1 一个一个字段赋值</a></li><li><a href=\"#512___184\">5.1.2 自动主表赋值 表.*</a></li></ul>\n</li></ul>\n</li><li><a href=\"#52__207\">5.2 返回到新类</a></li><li><a href=\"#53__211\">5.3 自动映射机制</a></li><li><a href=\"#54__228\">5.4 更多用法</a></li></ul>\n</li><li><a href=\"#6Full_Join_233\">6.Full Join用法</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h3><a id=\"_1\"></a>用到的几个实体类</h3>\n<p><code>使用 CodeFirst 创建表</code></p>\n<pre><code>public class Custom\n    {\n        [SugarColumn(IsPrimaryKey = true, IsIdentity = true)]\n        public int Id { get; set; }\n        \n        public string Name { get; set; }\n    }\n    \n    \npublic class Order\n    {\n        [SugarColumn(IsPrimaryKey = true, IsIdentity = true)]\n        public int Id { get; set; }\n        \n        public string Name { get; set; }\n        \n        public decimal Price { get; set; }\n        \n        [SugarColumn(IsNullable = true)]\n        \n        public DateTime CreateTime { get; set; }\n        \n        [SugarColumn(IsNullable = true)]\n        public int CustomId { get; set; }\n    }\n    \n\npublic class OrderDetail\n    {\n        [SqlSugar.SugarColumn(IsPrimaryKey = true, IsIdentity = true)]\n        public int ItemId { get; set; }\n        \n        public int OrderId { get; set; }\n        \n        public decimal? Price { get; set; }\n        \n        [SqlSugar.SugarColumn(IsNullable = true)]\n        public DateTime? CreateTime { get; set; }\n        \n        [SugarColumn(IsIgnore = true)]\n        public Order Order { get; set; }\n    }\n    \n    \npublic class ViewOrder : Order\n    {\n        public string CustomName { get; set; }\n    }\n</code></pre>\n<h3><a id=\"1Join_53\"></a>1.Join用法</h3>\n<h4><a id=\"11_1_55\"></a>1.1 语法糖1</h4>\n<p><code>优点：好理解，五个表以内的联表比较推荐 </code></p>\n<h5><a id=\"111__58\"></a>1.1.1 表和表的连接</h5>\n<pre><code>List&lt;ViewOrder&gt; list = db.Queryable&lt;Order&gt;()\n                .LeftJoin&lt;Custom&gt;((o, cus) =&gt; o.CustomId == cus.Id) //若是多个条件 用 &amp;&amp;\n                .LeftJoin&lt;OrderDetail&gt;((o, cus, oritem) =&gt; o.Id == oritem.OrderId)\n                 .Where((o, cus, oritem) =&gt; o.Id == 4 &amp;&amp; oritem.Price == 50)\n                .Select((o, cus) =&gt; new ViewOrder { Id = o.Id, CustomName =cus.Name })\n                .ToList();\n                \n            //    SELECT  `o`.`Id` AS `Id` , `cus`.`Name` AS `CustomName`  FROM `Order` o\n            //    Left JOIN `Custom` cus ON( `o`.`CustomId` = `cus`.`Id` )  \n            //    Left JOIN `OrderDetail` oritem ON( `o`.`Id` = `oritem`.`OrderId` )   \n            //    WHERE( `o`.`Id` = '4')\n</code></pre>\n<p><code>若将 .Select((o, cus) =&gt; new ViewOrder { Id = o.Id, CustomName =cus.Name }) 修改成.Select((o, cus) =&gt; new ViewOrder()) 那就是查询所有字段</code></p>\n<h5><a id=\"112_Queryable___78\"></a>1.1.2 表和Queryable的连接 (主表左连了一个由子查询组合的表)</h5>\n<pre><code>var rightQueryable = db.Queryable&lt;Custom&gt;()\n                .LeftJoin&lt;OrderDetail&gt;((c, o) =&gt; c.Id == o.ItemId)\n                .Select(c =&gt; c);\n\nvar list = db.Queryable&lt;Order&gt;()\n               .LeftJoin(rightQueryable, (o, r) =&gt; o.CustomId == r.Id)\n               .Where(o=&gt;o.Id==4)\n               .Select(o =&gt; o)\n               .ToList();\n\n\n//SELECT o.* FROM `Order` o \n//Left JOIN(SELECT c.*FROM `Custom` c Left JOIN `OrderDetail` o ON( `c`.`Id` = `o`.`ItemId` )   ) r ON ( `o`.`CustomId` = `r`.`Id` )\n//WHERE( `o`.`Id` = '4')\n</code></pre>\n<h5><a id=\"113_Queryable__96\"></a>1.1.3 Queryable和表的连接 (以一个子查询为主表关联其他表)</h5>\n<pre><code>var queryable = db.Queryable&lt;Order&gt;();\n\nvar list = db.Queryable(queryable)\n            .LeftJoin&lt;Custom&gt;((o, c) =&gt; o.CustomId == c.Id)\n            .LeftJoin&lt;OrderDetail&gt;((o, c, od) =&gt; o.Id == od.OrderId).Select(o =&gt; o)\n            .Where(o =&gt; o.Id == 4)\n            .ToList();\n            \n//SELECT o.* FROM  \n//(SELECT * FROM  (SELECT `Id`,`Name`,`Price`,`CreateTime`,`CustomId` FROM `Order`  ) t ) o \n//Left JOIN `Custom` c ON ( `o`.`CustomId` = `c`.`Id` )  \n//Left JOIN `OrderDetail` od ON ( `o`.`Id` = `od`.`OrderId` )   \n//WHERE ( `o`.`Id` = '4' )\n</code></pre>\n<h4><a id=\"12_2_114\"></a>1.2 语法糖2</h4>\n<ul><li><code>优点：五个表以上用这种方式比较快捷</code></li><li><code>缺点：不能套子查询( leftjoin(queryable) )</code></li></ul>\n<pre><code>var list = db.Queryable&lt;Order, Custom, OrderDetail&gt;((o, c, od) =&gt; new JoinQueryInfos(\n            JoinType.Left, o.CustomId == c.Id,\n            JoinType.Left, o.Id == od.OrderId\n            ))\n            .Select((o, c, od) =&gt; new { Id = o.Id, Name = o.Name, Cname = c.Name, Price = od.Price, CreateTime = od.CreateTime})\n            .ToList();\n\n//SELECT  `o`.`Id` AS `Id` , `o`.`Name` AS `Name` , `c`.`Name` AS `Cname` , `od`.`Price` AS `Price` , `od`.`CreateTime` AS `CreateTime`  FROM `Order` o\n//Left JOIN `Custom` c ON( `o`.`CustomId` = `c`.`Id` )  \n//Left JOIN `OrderDetail` od ON( `o`.`Id` = `od`.`OrderId` )\n</code></pre>\n<h4><a id=\"13_3_131\"></a>1.3 语法糖3</h4>\n<ul><li>‘inner join 可以用这种方式’</li></ul>\n<pre><code> var list = db.Queryable&lt;Order, Custom, OrderDetail&gt;((o, c, od) =&gt; o.CustomId == c.Id &amp;&amp; o.Id == od.OrderId)\n               .Select((o, c, od) =&gt; new { Id = o.Id, Name = o.Name, Cname = c.Name, Price = od.Price, CreateTime = od.CreateTime })\n               .ToList();\n               \n//SELECT  `o`.`Id` AS `Id` , `o`.`Name` AS `Name` , `c`.`Name` AS `Cname` , `od`.`Price` AS `Price` , `od`.`CreateTime` AS `CreateTime`  \n//FROM `Order` o  ,`Custom`  c ,`OrderDetail`  od\n//WHERE(( `o`.`CustomId` = `c`.`Id` ) AND( `o`.`Id` = `od`.`OrderId` ))\n</code></pre>\n<h3><a id=\"2Where_145\"></a>2.Where用法</h3>\n<p><code>注意：写在 Select() 之前</code></p>\n<pre><code>.Where(o =&gt; o.Id == 4)\n.Where((o, cus, oritem) =&gt; o.Id == 4 &amp;&amp; oritem.Price == 50)\n</code></pre>\n<h3><a id=\"3OrderBy_152\"></a>3.OrderBy用法</h3>\n<p><code>注意：写在 Select() 之前</code></p>\n<pre><code>.OrderBy(st =&gt; st.StudentId) \n.OrderBy((st, sc) =&gt; sc.SchoolId, OrderByType.Desc)\n</code></pre>\n<h3><a id=\"4GroupBy_159\"></a>4.GroupBy用法</h3>\n<p><code>注意：写在 Select() 之前</code></p>\n<pre><code>.GroupBy(it =&gt; it.Name)\n.GroupBy((st, sc) =&gt; sc.SchoolId)\n</code></pre>\n<h3><a id=\"5Select_166\"></a>5.Select用法</h3>\n<p><code>连表必须加上 Select 不然会查询出重复列而报错，一般 Select() 写在 ToList() 之前</code></p>\n<p><strong>基础用法</strong></p>\n<pre><code>//新类\n.Select((o,i)=&gt;new 类名{Id=o.Id,Name=o.Name,SchoolName=i.Name}).ToList();\n\n//匿名对象\n.Select((o,i)=&gt;new {Id=o.Id,Name=o.Name,SchoolName=i.Name}).ToList();\n</code></pre>\n<h4><a id=\"51__179\"></a>5.1 返回匿名对象</h4>\n<h6><a id=\"511__181\"></a>5.1.1 一个一个字段赋值</h6>\n<p><code>参考 \"1.2 语法糖2\" 中 Select的写法</code></p>\n<h6><a id=\"512___184\"></a>5.1.2 自动主表赋值 表.*</h6>\n<ul><li><code> o.Id是表的任意一个属性， SelectAll是查询全部 o.*</code></li><li><code>.SelectAll等同于SqlFunc.GetSelfAndAutoFill是个语法糖</code></li></ul>\n<pre><code> var list = db.Queryable&lt;Order, Custom, OrderDetail&gt;((o, c, od) =&gt; new \n        JoinQueryInfos(\n                JoinType.Left, o.CustomId == c.Id,\n                JoinType.Left, o.Id == od.OrderId\n                ))\n                 .Select((o, c, od) =&gt; new { \n                 d = o.Id.SelectAll(), \n                 CName = c.Name, \n                 Time = od.CreateTime })\n                .ToList();\n                \n//SELECT o.*, `c`.`Name` AS `CName` , `od`.`CreateTime` AS `Time`  FROM `Order` o\n//Left JOIN `Custom` c ON ( `o`.`CustomId` = `c`.`Id` )\n//Left JOIN `OrderDetail` od ON ( `o`.`Id` = `od`.`OrderId` )\n</code></pre>\n<h4><a id=\"52__207\"></a>5.2 返回到新类</h4>\n<p><code>参考 \"1.1.1 表和表的连接\" 中 Select的写法</code></p>\n<h4><a id=\"53__211\"></a>5.3 自动映射机制</h4>\n<p><code>Select用的是自动填充这样使用方便，高并发的地方还是写成上面那种方式</code></p>\n<pre><code>var list = db.Queryable&lt;Order, Custom, OrderDetail&gt;((o, c, od) =&gt; new \n        JoinQueryInfos(\n                JoinType.Left, o.CustomId == c.Id,\n                JoinType.Left, o.Id == od.OrderId\n                ))\n                 .Select&lt;ViewOrder&gt;()\n                .ToList();\n\n//SELECT c.`Name` AS `CustomName`,o.`Id` AS `Id`,o.`Name` AS `Name`,o.`Price` AS `Price`,o.`CreateTime` AS `CreateTime`,o.`CustomId` AS `CustomId` \n//FROM `Order` o\n//Left JOIN `Custom` c ON( `o`.`CustomId` = `c`.`Id` )  \n//Left JOIN `OrderDetail` od ON( `o`.`Id` = `od`.`OrderId` )\n</code></pre>\n<h4><a id=\"54__228\"></a>5.4 更多用法</h4>\n<ul><li><code>Select用法太多，这篇文章主要讲联表查询</code></li><li><a href=\"https://www.donet5.com/Home/Doc?typeId=1186\">更多用法看官网</a></li></ul>\n<h3><a id=\"6Full_Join_233\"></a>6.Full Join用法</h3>\n<p><a href=\"https://www.donet5.com/home/Doc?typeId=1185\">文档参考：联表查询</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 0, "time": "2022-05-07 11:17:19", "summary": "文章目录用到的几个实体类用法语法糖表和表的连接表和的连接主表左连了一个由子查询组合的表和表的连接以一个子查询为主表关联其他表语法糖语法糖用法用法用法用法返回匿名对象一个一个字段赋值自动主表赋值表返回到"}