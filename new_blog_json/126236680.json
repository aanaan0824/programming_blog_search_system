{"blogid": "126236680", "writerAge": "码龄1年", "writerBlogNum": "91", "writerCollect": "6699", "writerComment": "12541", "writerFan": "13071", "writerGrade": "7级", "writerIntegral": "19618", "writerName": "微凉秋意", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126236680.jpg", "writerRankTotal": "415", "writerRankWeekly": "1", "writerThumb": "7505", "writerVisitNum": "122056", "blog_read_count": "1113", "blog_time": "已于 2022-08-18 15:19:56 修改", "blog_title": "【Rust指南】配置加速Cargo下载、更新依赖库|利用随机数编写Rust猜数游戏", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2264389a7f2a4480b965f3b615803f55.png\"/><br/> </p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#emspemsp_2\">  前言</a></li><li><a href=\"#CargoVSC_6\">一、Cargo配置问题与VSC的实用插件下载</a></li><li><ul><li><a href=\"#1Cargocratesio_7\">1、解决Cargo拉取crates.io非常慢的问题</a></li><li><a href=\"#2VSCRust_21\">2、VSC自动管理Rust项目的实用插件</a></li></ul>\n</li><li><a href=\"#Rust__26\">二、编写Rust 的猜数游戏</a></li><li><ul><li><a href=\"#1_27\">1、抓取随机数的依赖库</a></li><li><a href=\"#2rand_33\">2、使用rand包并编写源代码</a></li><li><a href=\"#3Rust_65\">3、Rust语法学习</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"emspemsp_2\"></a>  前言</h1>\n<p>  上篇Rust指南文章讲解了使用Cargo工具创建Rust项目的方法并编写讲解了该语言的输入输出格式。那么今天详细的教大家如何将Cargo<strong>自动更新依赖库</strong>的网址从国外改到国内镜像，这样无疑加快了开发的效率，而且更改完成后会举一个猜数游戏的例子，让大家轻松掌握更多Rust语法。</p>\n<hr/>\n<h1><a id=\"CargoVSC_6\"></a>一、Cargo配置问题与VSC的实用插件下载</h1>\n<h2><a id=\"1Cargocratesio_7\"></a>1、解决Cargo拉取crates.io非常慢的问题</h2>\n<ol><li>在电脑上找到<code>.cargo</code>文件夹<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f2f51c74f4754a17b1a21679700b9ffd.png\"/></li><li>进入.cargo文件夹并创建<code>config</code>文件（一定要按照图示操作）<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\88cae7463cee4d08bb08cf2dc10c252e.png\"/></li><li>使用vsc打开config文件，粘贴以下代码：</li></ol>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ff287cd48759455dadf267d634fabb75.png\"/></p>\n<blockquote>\n<p><strong>[source.crates-io]</strong><br/> <strong>replace-with = ‘ustc’<br/></strong><br/> <strong>[source.ustc]</strong><br/> <strong>registry = “git://mirrors.ustc.edu.cn/crates.io-index”</strong><br/> 最后记得保存哦，快捷键：<code>ctrl+s</code></p>\n</blockquote>\n<h2><a id=\"2VSCRust_21\"></a>2、VSC自动管理Rust项目的实用插件</h2>\n<ol><li>管理配置文件：<code>TOML Language Support</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2c45eeb485f84563a4b1890c6271d674.png\"/></li><li>Rust包管理：<code>crates</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b622a5d37e8b4c44b061b68499a98a20.png\"/></li></ol>\n<h1><a id=\"Rust__26\"></a>二、编写Rust 的猜数游戏</h1>\n<h2><a id=\"1_27\"></a>1、抓取随机数的依赖库</h2>\n<p><em>Rust标准库里并没有生成随机数的包，因此需要利用Cargo工具拉取<code>crates.io</code>里的rand包：</em></p>\n<ul><li>使用Cargo新建Rust 项目并在<code>Cargo.toml</code>的依赖标签下使用rand=“0.3.14”，开始会报错，稍等片刻Cargo会将该库拉取到该项目并可以在<code>Cargo.lock</code>文件中查看具体信息。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8d47483e37fa48dabbb7220455029408.png\"/></li><li>Cargo.lock里存放已经拉取的依赖信息<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4463fe163a7b46f1a213331e240c0ac7.png\"/></li></ul>\n<h2><a id=\"2rand_33\"></a>2、使用rand包并编写源代码</h2>\n<p><em>猜数游戏源码：</em></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span>io<span class=\"token punctuation\">,</span> <span class=\"token namespace\">cmp<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Ordering</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">rand<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Rng</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"****猜数小程序****\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> symth <span class=\"token operator\">=</span><span class=\"token namespace\">rand<span class=\"token punctuation\">::</span></span><span class=\"token function\">thread_rng</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">gen_range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// println!(\"神秘数字为：{}\",symth);</span>\n    <span class=\"token keyword\">loop</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入你猜的数字：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> guess <span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token function\">stdin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">read_line</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> guess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> guess<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token operator\">=</span> guess<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"转换错误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       \n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你猜的数字为：{}\"</span><span class=\"token punctuation\">,</span>guess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">match</span> guess<span class=\"token punctuation\">.</span><span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span> symth<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Ordering</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Less</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Too small !\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">Ordering</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Greater</span><span class=\"token operator\">=&gt;</span><span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Too big !\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">Ordering</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Equal</span><span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"you win !\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> \n</code></pre>\n<p><em>运行效果：</em></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cddb1b0f5ebd4eb8b9cdcaf04ee0ebb9.png\"/></p>\n<h2><a id=\"3Rust_65\"></a>3、Rust语法学习</h2>\n<p><em><strong>解析源码中的 生成随机数、数据类型转换、match和 loop 的含义及使用</strong></em></p>\n<ol><li>利用rand包生成随机数</li></ol>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> symth <span class=\"token operator\">=</span><span class=\"token namespace\">rand<span class=\"token punctuation\">::</span></span><span class=\"token function\">thread_rng</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">gen_range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>调用<code>rand</code>包里的<code>thread_rng()</code>中的<code>gen_range()</code>方法返回一个随机数并赋值给定义的常量symth</p>\n<ul><li>gen_range()参数列表输入两个参数，第一个是随机数的最小值，第二个数是最大值</li><li>区间是前开后闭的，上面代码随机数取值范围就是1~100。</li></ul>\n</blockquote>\n<ol start=\"2\"><li>类型转换</li></ol>\n<pre><code class=\"prism language-rust\"> <span class=\"token keyword\">let</span> guess<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token operator\">=</span> guess<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"转换错误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>这里可以看到我又定义了一个<code>guess</code>变量，在Rust语言里可以定义重名的变量，但这时候前面定义重名变量就会被隐藏(具体隐藏规则在后面文章会讲)这行代码中第一个guess是新变量，第二个guessd的隐藏变量，依然是字符串类型。</p>\n<ul><li><code>trim()</code>函数可以去掉字符串的空白以及换行(我们输入完毕需要按下回车，trim可以将其去掉)；</li><li><code>parse()</code>函数会把变量解析成一个对应的数据类型，而Rust中的整型有<code>i32</code>、<code>u32</code>、<code>i64</code>等，因此我给前面的guess后面加上<code>:u32</code>，这样parse()函数就可以把字符串解析为u32的整型</li><li><code>expect()</code>函数在上文有讲过，属于会返回Result类的枚举，有遗忘的朋友可以翻阅上篇博文</li></ul>\n</blockquote>\n<ol start=\"3\"><li>match分支</li></ol>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">match</span> guess<span class=\"token punctuation\">.</span><span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span> symth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token class-name\">Ordering</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Less</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">...</span><span class=\"token punctuation\">...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><code>match</code>是Rust中十分常用的分支语句，<code>Ordering</code>是一个枚举类型，含有三个变体，match与其联用，根据枚举的返回结果来执行对于的分支语句。<code>cmp()</code>是Rust里的一个用来比较的方法，参数列表里传入的就是上面生成的随机数。</p>\n<ul><li>Ordering类型的三个变体为：<code>Less</code>、<code>Greater</code>和<code>Equal</code>，分别代表小于、大于和等于</li><li>cmp和Ordering使用前需要从标准库引入：<code>use std::cmp::Ordering</code>；</li></ul>\n</blockquote>\n<ol start=\"4\"><li>loop循环</li></ol>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">loop</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token punctuation\">...</span><span class=\"token punctuation\">...</span>\n\t<span class=\"token class-name\">Ordering</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Equal</span><span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"you win !\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><code>loop</code>在Rust里是一个死循环，可以配合<code>Ordering</code>和<code>break</code>关键字来控制流程并跳出循环。</p>\n</blockquote>\n<hr/>\n<p><code>有关Cargo配置和Rust猜数游戏的内容到此结束，下一篇博客我们不见不散！</code></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-18 15:19:56", "summary": "在这里插入图片描述文章目录前言一、配置问题与的实用插件下载、解决拉取非常慢的问题、自动管理项目的实用插件二、编写的猜数游戏、抓取随机数的依赖库、使用包并编写源代码、语法学习前言上篇指南文章讲解了使用工"}