{"blogid": "123464993", "writerAge": "码龄6年", "writerBlogNum": "21", "writerCollect": "324", "writerComment": "695", "writerFan": "1370", "writerGrade": "4级", "writerIntegral": "1516", "writerName": "XY枫晨", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123464993.jpg", "writerRankTotal": "13186", "writerRankWeekly": "60848", "writerThumb": "560", "writerVisitNum": "17233", "blog_read_count": "1546", "blog_time": "已于 2022-03-13 20:11:40 修改", "blog_title": "C语言指针进阶-全面分析C指针重难点逐一突破(中篇)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>大家好，我是枫晨~，很抱歉这篇文章距离前篇这间隔了很久的时间，这段时间内我对指针反反复复的总结和思考，声怕自己理解不到位写出的文章也是没有条理，然后就是开启了新的系列大厂典例，会带着大家以复习知识点的方式刷一刷以往大厂或者常见的一些题型。</p>\n</blockquote>\n<p>注：这篇文章全面分析C语言中指针重难点，并且是基于前篇基础上完成的，如果你指针进阶（前篇）还没有接触，请看完<u><a href=\"https://blog.csdn.net/qq_36935038/article/details/123299211?spm=1001.2014.3001.5501\">前篇</a></u>再返回这里。</p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_7\">一、数组参数、指针参数</a></li><li><ul><li><a href=\"#1_11\">1.一维数组传参</a></li><li><a href=\"#2_66\">2.二维数组传参</a></li><li><a href=\"#3_99\">3.一级指针传参</a></li><li><a href=\"#4_150\">4.二级指针传参</a></li></ul>\n</li><li><a href=\"#_207\">二、函数指针</a></li><li><ul><li><a href=\"#1_211\">1.如何获取数组地址？</a></li><li><a href=\"#2Add_232\">2.如何存储Add函数的地址？</a></li><li><a href=\"#3_253\">3.如何使用函数指针？</a></li><li><a href=\"#4_313\">4.趣题分析</a></li></ul>\n</li><li><a href=\"#_328\">三、函数指针数组</a></li><li><ul><li><a href=\"#_349\">函数指针数组的应用----计算器</a></li></ul>\n</li><li><a href=\"#_481\">四、指向函数指针数组的指针</a></li></ul>\n</div>\n<br/>\n<img alt=\"img\" src=\"https://img-blog.csdnimg.cn/img_convert/006b89ebfbca9f8dd1a28b0f7838f00a.gif\"/>\n<p></p>\n<h1><a id=\"_7\"></a>一、数组参数、指针参数</h1>\n<blockquote>\n<p>写代码调用函数时会将**【数组】<strong>或者</strong>【指针】**或者一个变量传递给函数，那函数的参数该如何设计呢？</p>\n</blockquote>\n<h2><a id=\"1_11\"></a>1.一维数组传参</h2>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//代码1</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr2<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//请问如何设计test和test2函数的参数？</span>\n</code></pre>\n<p><strong>①test函数参数形参设计</strong><br/> Ⅰ.参数写成数组形式<br/> <code>void test(int arr[10])</code><br/> <code>void test(int arr[]);</code><br/> <code>void test(int arr[100])</code></p>\n<blockquote>\n<p>以上函数参数均为正确：<br/> 第一种的写法直观，一眼就可以分辨出从是一个怎样的数组传递给test函数；<br/> 第二种写法比较直观，可以告诉别人main函数传了一个数组过来；<br/> 第三种写法只能说是正确，但是绝对不要去这么写，因为有可能误导他人；</p>\n</blockquote>\n<p><font color=\"HotPink\"><strong>有人就问了，为什么三种写法都正确？耐心看完Ⅱ后给你解答</strong></font></p>\n<p>Ⅱ.形参写成指针</p>\n<p><code>void test（int *p)</code></p>\n<blockquote>\n<p>为什么参数可以写成指针的形式呢？，在主函数中，<strong>test（arr) 其中</strong>的<font color=\"LightSkyBlue\"><strong>arr</strong></font>代表的是<font color=\"LightPink\"><strong>数组首元素的地址</strong></font>，所以在函数的形参部分我们可以使用指针来接收这个数组的地址。在之前的文章中我们也有反复强调过这个。</p>\n</blockquote>\n<blockquote>\n<p><strong>既然test（arr）中arr是一个地址，那为什么可以写成Ⅰ的那三种形式呢？</strong><br/> 原因在于设计c语言的设计者为了人们在学习时可以更加好的理解指针，更容易上手，减少学习成本，从函数中传递一个数组，那函数的形参写成一个数组不是让人一看就懂么，所以函数的形参也就可以写成一个数组的形式，更好的让学习者理解，<font color=\"OrangeRed\"><strong>但！本质上应该是应该指针来接受这个数组的地址！</strong></font></p>\n</blockquote>\n<p><strong>②test2函数参数形参设计</strong><br/> Ⅰ.参数写成数组形式<br/> <code>void test2（int *arr2[20])</code><br/> <code>void test2（int *arr2[])</code><br/> <code>void test2（int *arr2[30])</code></p>\n<blockquote>\n<p>以上函数参数均为正确：<br/> 第一种的写法直观，一眼就可以分辨出从是一个怎样的数组传递给test函数；<br/> 第二种写法比较直观，可以告诉别人main函数传了一个数组过来；<br/> 第三种写法只能说是正确，但是绝对不要去这么写，因为有可能误导他人；</p>\n</blockquote>\n<p>Ⅱ.形参写成指针<br/> <code>void test2(int **parr2)</code></p>\n<blockquote>\n<p>对于形参写成指针，我们首先要分析传递过来的数组是一个什么样的类型，从能写成函数参数的指针类型.<img alt=\"image-20220313081121039\" src=\"..\\..\\static\\image\\af18aa51444f847c73f78b43df3940e6.png\"/></p>\n<p>通过图片分析，int *arr[20]数组中存储的都是<strong>一级指针指针类型的数据</strong>，所以在test2函数参数中，我们要使用一个<font color=\"LightSalmon\"><strong>二级指针</strong></font>去接受一级指针的地址；</p>\n</blockquote>\n<h2><a id=\"2_66\"></a>2.二维数组传参</h2>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//代码2</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//请问如何设计test函数的参数？</span>\n</code></pre>\n<p>Ⅰ.形参写成数组形式</p>\n<p><code>void test(int arr[3][5])</code><br/> <code>void test(int arr[][5])</code></p>\n<blockquote>\n<p>以上函数参数均为正确：<br/> 第一种的写法直观，一眼就可以分辨出从是一个怎样的几行几列的二维数组传递给test函数；<br/> 第二种写法比较直观，可以告诉别人main函数传了一个5列的二维数组数组过来；<br/> <strong>绝对不允许写成<code>void test（int arr[][])</code>这样是绝对错误的！！！，<font color=\"LightSeaGreen\">二维数组只能省略行数，但是无论什么情况都不能省略列数！</font></strong></p>\n</blockquote>\n<p>Ⅱ.形参写成指针<br/> <code>void test（int (*pa)[5])</code></p>\n<p>函数参数写成数组指针形式接受，具体解析在**<a href=\"https://blog.csdn.net/qq_36935038/article/details/123299211?spm=1001.2014.3001.5501\">指针进阶（前篇）</a>**已经特别详细的分析过。</p>\n<blockquote>\n<p>具体地址–》<a href=\"https://blog.csdn.net/qq_36935038/article/details/123299211?spm=1001.2014.3001.5501\">指针进阶(前篇）</a>—》实战运用（②数组指针在二维数组中的应用）</p>\n</blockquote>\n<hr/>\n<blockquote>\n<p>总结：test在传递数组名字的时候，传递的是数组名的地址，但是为了初学者和程序员更加清晰的看程序传入的是什么，因此c语言设计者允许在这样的写法；对初学者的使用更加友好</p>\n</blockquote>\n<h2><a id=\"3_99\"></a>3.一级指针传参</h2>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//Ⅰ、已知主函数实参，求函数形参</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//p是一级指针</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//如何设计test函数的参数？</span>\n</code></pre>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//test函数参数设计</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//打印arr数组内容</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ptr<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<p>如果已知函数参数，可以传递什么给test函数？</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//Ⅱ、已知函数形参，求主函数实参</span>\n<span class=\"token keyword\">void</span> test（<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//....</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//解答：</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token comment\">//（ ）括号可以填哪些呢？</span>\n    <span class=\"token comment\">//1.变量地址和一级指针名</span>\n     <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>pa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"4_150\"></a>4.二级指针传参</h2>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//Ⅰ、已知主函数实参，求函数形参</span>\n<span class=\"token keyword\">int</span> main\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">char</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>ppa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>pa<span class=\"token punctuation\">;</span><span class=\"token comment\">//ppa就是一个二级指针</span>\n    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>ppa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//如何设计test函数的参数？</span>\n</code></pre>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//test函数参数设计</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> ppa<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//....</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>如果已知函数参数，可以传递什么给test函数？</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">Ⅱ、已知函数形参，求主函数实参</span>\n<span class=\"token keyword\">void</span> test（<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>ppa<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//....</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//解答：</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//一级指针地址</span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>pa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//二级指针</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ppa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>pa<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>ppa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//指针数组</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>parr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>parr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>总结：</p>\n<p>如果一个函数的参数是二级指针，那实参可以是什么？<br/> 1.一级指针地址；<br/> 2.二级指针<br/> 3.指针数组</p>\n</blockquote>\n<hr/>\n<h1><a id=\"_207\"></a>二、函数指针</h1>\n<blockquote>\n<p>函数指针：指向函数的指针</p>\n</blockquote>\n<h2><a id=\"1_211\"></a>1.如何获取数组地址？</h2>\n<pre><code class=\"prism language-c\">\n<span class=\"token keyword\">int</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>Add<span class=\"token punctuation\">)</span>；<span class=\"token comment\">//利用&amp;取出函数的地址</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span>Add<span class=\"token punctuation\">)</span>；<span class=\"token comment\">//如果不用&amp;也可以取得Add函数的地址</span>\n       \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"image-20220313081216776\" src=\"..\\..\\static\\image\\23066d3bfddd2c36b3eb3c88100be0b9.png\"/></p>\n<blockquote>\n<p>总结：&amp;Add和Add都可以取得Add函数的地址，意义是相同的</p>\n</blockquote>\n<h2><a id=\"2Add_232\"></a>2.如何存储Add函数的地址？</h2>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//先回顾数组指针</span>\n    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>parr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//函数指针和数组指针相似</span>\n    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pAdd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Add<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"image-20220313081444667\" src=\"..\\..\\static\\image\\075b3383c04ab4e12414abec59a1b029.png\"/></p>\n<h2><a id=\"3_253\"></a>3.如何使用函数指针？</h2>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pAdd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Add<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//正常调用函数</span>\n    ret <span class=\"token operator\">=</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//使用函数指针</span>\n    ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pAdd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"image-20220313081957348\" src=\"..\\..\\static\\image\\1c2a87c9160c09b8a1aea3a8210618f8.png\"/></p>\n<blockquote>\n<p>刚刚不是说Add也代表函数的地址么？那pAdd也代表的Add函数地址，为什么Add不需要解应用，但是pAdd需要，如果不解应用可以使用吗？</p>\n</blockquote>\n<p>验证:</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pAdd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Add<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//解引用使用函数指针</span>\n    ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pAdd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//直接使用函数指针</span>\n    ret <span class=\"token operator\">=</span> <span class=\"token function\">pAdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"image-20220313082403311\" src=\"..\\..\\static\\image\\e765c78ecbc6bb9da6f15142c925fbfa.png\"/></p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//错误的使用方法</span>\nret <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">pAdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//err,这样的用法是错误的！</span>\n</code></pre>\n<blockquote>\n<p>总结：<br/> 使用函数指针，既可以加*进行解应用，也可以直接使用函数指针调用函数<br/> 其中 * 是否使用对函数指针调用函数无太大的影响<br/> <font color=\"Cyan\"><strong>但是如果使用了 * 必须带上括号<code>（*pAdd）(2,3)</code></strong></font></p>\n</blockquote>\n<hr/>\n<h2><a id=\"4_313\"></a>4.趣题分析</h2>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//代码1 </span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//代码2</span>\n<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>没错，这两个代码就是之前在blink里面的那俩题，现在就带你们手把手分析~</p>\n</blockquote>\n<p><img alt=\"image-20220313191258166\" src=\"..\\..\\static\\image\\78f55b3eaf140bb1844c7fdea3c7f738.png\"/></p>\n<p><img alt=\"image-20220313192309291\" src=\"..\\..\\static\\image\\653d9110f1ffcc0969fd2719cee4489f.png\"/></p>\n<h1><a id=\"_328\"></a>三、函数指针数组</h1>\n<p>话不多说，直接上写法：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//首先看看指针数组</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//函数指针数组</span>\n    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//1.pf先与[]结合，代表这是一个数组；</span>\n    <span class=\"token comment\">//2.去掉pf[4]，剩余int (*)(int,int)为数组的类型--函数指针类型</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_349\"></a>函数指针数组的应用----计算器</h2>\n<p>Ⅰ.定义加减乘除函数</p>\n<pre><code class=\"prism language-c\">\n<span class=\"token keyword\">int</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">-</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">Mul</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">Div</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">/</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Ⅱ.计算器主体</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"************************\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"****1.Add    2.Sub******\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"****3.Mul    4.Div******\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"****0.exit        ******\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"************************\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> input <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">do</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请选择:&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"退出程序\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n\t\t\tret <span class=\"token operator\">=</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入两个数:&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n\t\t\tret <span class=\"token operator\">=</span> <span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入两个数:&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n\t\t\tret <span class=\"token operator\">=</span> <span class=\"token function\">Mul</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入两个数:&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span>\n\t\t\tret <span class=\"token operator\">=</span> <span class=\"token function\">Div</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入两个数:&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入错误，重新输入:&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>虽然实现了，但是太过于冗余了这样的写法，这时我们可以应用函数指针数组;<br/> Ⅲ.利用函数指针数组简化</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"************************\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"****1.Add    2.Sub******\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"****3.Mul    4.Div******\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"****0.exit        ******\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"************************\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> input <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">do</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请选择:&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//为了下标更好的对于菜单内容，所以下标为0的位置放置了0</span>\n\t\t<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pfarr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>Add<span class=\"token punctuation\">,</span>Sub<span class=\"token punctuation\">,</span>Mul<span class=\"token punctuation\">,</span>Div <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input <span class=\"token operator\">&gt;=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> input<span class=\"token operator\">&lt;=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入两个数:&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tret <span class=\"token operator\">=</span> pfarr<span class=\"token punctuation\">[</span>input<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"重新输入\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_481\"></a>四、指向函数指针数组的指针</h1>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//函数指针</span>\n    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Add<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//函数指针数组</span>\n    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pfarr<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//指向函数指针数组的指针</span>\n    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>pfarr<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"image-20220313195823441\" src=\"..\\..\\static\\image\\4fddd821e604e13b96a1240cde655230.png\"/></p>\n<hr/>\n<blockquote>\n<p>今天的内容特别丰富，明天紧接着还有指针进阶的应用部分，非常抱歉将近5天没有发文章，这段时间我没有停止脚步，仍然在学习新知识，对于指针这部分，为了文章能够写的更加清晰，我特此花费许多时间去整理大纲！</p>\n</blockquote>\n<p>谢谢大家的支持，指针知识部分的介绍还剩下最后一部分-<strong>回调函数</strong>-也将在近期更新完毕！</p>\n<blockquote>\n<p>惯例：图片一张，激起你的斗志！！！</p>\n</blockquote>\n<p><img alt=\"img-16471730913764ae10102f8ccf5d826feecc78e4cafc7\" src=\"..\\..\\static\\image\\71053f968f3420d1b8d725fe3a39bb7a.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-13 20:11:40", "summary": "大家好，我是枫晨，很抱歉这篇文章距离前篇这间隔了很久的时间，这段时间内我对指针反反复复的总结和思考，声怕自己理解不到位写出的文章也是没有条理，然后就是开启了新的系列大厂典例，会带着大家以复习知识点的方"}