{"blogid": "124925375", "writerAge": "码龄124天", "writerBlogNum": "3", "writerCollect": "1", "writerComment": "0", "writerFan": "1", "writerGrade": "1级", "writerIntegral": "30", "writerName": "XHeineken", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124925375.jpg", "writerRankTotal": "189016", "writerRankWeekly": "1258728", "writerThumb": "0", "writerVisitNum": "996", "blog_read_count": "572", "blog_time": "于 2022-05-23 14:25:00 发布", "blog_title": "C#常用的加密算法之一 MD5", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"C_MD5_1\"></a>C#常用的加密算法之一 MD5</h1>\n<h2><a id=\"_2\"></a>参考文章</h2>\n<ol><li><a href=\"https://blog.csdn.net/Oliver_xpl/article/details/90214896?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165327618016781483721732%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165327618016781483721732&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-90214896-null-null.142%5Ev10%5Epc_search_result_control_group,157%5Ev4%5Econtrol&amp;utm_term=md5&amp;spm=1018.2226.3001.4187\">MD5加密概述，原理及实现</a></li><li><a href=\"https://blog.csdn.net/chinaherolts2008/article/details/122568658\">C#常用的加密算法：MD5、Base64、SHA1、SHA256、HmacSHA256、DES、AES、RSA</a></li></ol>\n<h2><a id=\"MD5_7\"></a>MD5概述</h2>\n<p>MD5消息摘要算法，属Hash算法一类。MD5算法对输入任意长度的消息进行运行，产生一个128位的消息摘要(32位的数字字母混合码)。</p>\n<h2><a id=\"MD5_9\"></a>MD5特点</h2>\n<ol><li>不可逆，相同数据的MD5值肯定一样，不同数据的MD5值不一样<br/> 一个MD5理论上的确是可能对应无数多个原文的，因为MD5是有限多个的而原文可以是无数多个。比如主流使用的MD5将任意长度的“字节串映射为一个128bit的大整数。也就是一共有2<sup>128种可能，大概是3.4*10</sup>38，这个数字是有限多个的，而但是世界上可以被用来加密的原文则会有无数的可能性</li><li>压缩性：任意长度的数据，算出的MD5值长度都是固定的(相当于超损压缩)。</li><li>容易计算：从原数据计算出MD5值很容易。</li><li>抗修改性：对原数据进行任何改动，哪怕只修改1个字节，所得到的MD5值都有很大区别。</li></ol>\n<h2><a id=\"MD5_17\"></a>MD5原理</h2>\n<p>请参考：<a href=\"https://blog.csdn.net/Oliver_xpl/article/details/90214896?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165327618016781483721732%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165327618016781483721732&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-90214896-null-null.142%5Ev10%5Epc_search_result_control_group,157%5Ev4%5Econtrol&amp;utm_term=md5&amp;spm=1018.2226.3001.4187\">MD5加密概述，原理及实现</a></p>\n<h2><a id=\"C_MD5_20\"></a>C# 关于MD5的一些使用</h2>\n<p>引用的命名空间</p>\n<pre><code>using System;\n\nusing System.IO;\n\nusing System.Security.Cryptography;\n\nusing System.Text;\n\n\n</code></pre>\n<p>方法</p>\n<pre><code>    #region MD5加密解密\n\n    /// &lt;summary&gt;\n\n    /// 16位MD5加密\n\n    /// &lt;/summary&gt;\n\n    /// &lt;param name=\"source\"&gt;需要加密的明文字符串&lt;/param&gt;\n\n    /// &lt;returns&gt;&lt;/returns&gt;\n\n    public static string MD5Encrypt16(string source)\n\n    {\n\n        var md5 = new MD5CryptoServiceProvider();\n\n        string cipherText = \nBitConverter.ToString(md5.ComputeHash(Encoding.Default.GetBytes(source)), 4, 8);\n\n        cipherText = cipherText.Replace(\"-\", \"\");\n\n        return cipherText;\n\n    }\n\n\n\n    /// &lt;summary&gt;\n\n    /// 32位MD5加密\n\n    /// &lt;/summary&gt;\n\n    /// &lt;param name=\"source\"&gt;需要加密的明文字符串&lt;/param&gt;\n\n    /// &lt;returns&gt;32位MD5加密密文字符串&lt;/returns&gt;\n\n    public static string MD5Encrypt32(string source)\n\n    {\n\n        string rule = \"\";\n\n        MD5 md5 = MD5.Create();\n\n        byte[] s = md5.ComputeHash(Encoding.UTF8.GetBytes(source));\n\n        // 通过使用循环，将字节类型的数组转换为字符串，此字符串是常规字符格式化所得\n\n        for (int i = 0; i &lt; s.Length; i++)\n\n        { \n\n            rule = rule + s[i].ToString(\"x2\"); // 将得到的字符串使用十六进制类型格式。格式后的字符是小写的字母，如果使用大写（X）则格式后的字符是大写字符 \n\n        }\n\n\n\n        return rule;\n\n    }\n\n\n\n    /// &lt;summary&gt;\n\n    /// 64位MD5加密\n\n    /// &lt;/summary&gt;\n\n    /// &lt;param name=\"source\"&gt;需要加密的明文字符串&lt;/param&gt;\n\n    /// &lt;returns&gt;64位MD5加密密文字符串&lt;/returns&gt;\n\n    public static string MD5Encrypt64(string source)\n\n    {\n\n        MD5 md5 = MD5.Create();                         \n\n        byte[] s = md5.ComputeHash(Encoding.UTF8.GetBytes(source));\n\n\n\n        return Convert.ToBase64String(s);\n\n    }\n\n\n\n    /// &lt;summary&gt;\n\n    ///  Md5密钥加密\n\n    /// &lt;/summary&gt;\n\n    /// &lt;param name=\"pToEncrypt\"&gt;要加密的string字符串&lt;/param&gt;\n\n    /// &lt;param name=\"keys\"&gt;秘钥&lt;/param&gt;\n\n    /// &lt;returns&gt;&lt;/returns&gt;\n\n    public static string Md5Encrypt_Key(string pToEncrypt, string keys)\n\n    {\n\n        DESCryptoServiceProvider des = new DESCryptoServiceProvider();\n\n        byte[] inputByteArray = Encoding.Default.GetBytes(pToEncrypt);\n\n\n\n        if(keys.Length != 8)\n\n        {\n\n            return \"key必须为8位\";\n\n        }\n\n\n\n        des.Key = Encoding.ASCII.GetBytes(keys);\n\n        des.IV = Encoding.ASCII.GetBytes(keys);\n\n        MemoryStream ms = new MemoryStream();\n\n        CryptoStream cs = new CryptoStream(ms, des.CreateEncryptor(), \nCryptoStreamMode.Write);\n\n        cs.Write(inputByteArray, 0, inputByteArray.Length);\n\n        cs.FlushFinalBlock();\n\n        StringBuilder ret = new StringBuilder();\n\n        foreach (byte b in ms.ToArray())\n\n        {\n\n            ret.AppendFormat(\"{0:X2}\", b);\n\n        }\n\n        var s = ret.ToString();\n\n\n\n        return s;\n\n    }\n\n\n\n    /// &lt;summary&gt;\n\n    ///  Md5解密\n\n    /// &lt;/summary&gt;\n\n    /// &lt;param name=\"pToDecrypt\"&gt;解密string&lt;/param&gt;\n\n    /// &lt;param name=\"keys\"&gt;秘钥&lt;/param&gt;\n\n    /// &lt;returns&gt;&lt;/returns&gt;\n\n    public static string Md5Decrypt(string pToDecrypt, string keys)\n\n    {\n\n        DESCryptoServiceProvider des = new DESCryptoServiceProvider();\n\n        byte[] inputByteArray = new byte[pToDecrypt.Length / 2];\n\n        for (int x = 0; x &lt; pToDecrypt.Length / 2; x++)\n\n        {\n\n            int i = (Convert.ToInt32(pToDecrypt.Substring(x * 2, 2), 16));\n\n            inputByteArray[x] = (byte)i;\n\n        }\n\n        des.Key = Encoding.ASCII.GetBytes(keys);\n\n        des.IV = Encoding.ASCII.GetBytes(keys);\n\n        MemoryStream ms = new MemoryStream();\n\n        CryptoStream cs = new CryptoStream(ms, des.CreateDecryptor(), \nCryptoStreamMode.Write);\n\n        cs.Write(inputByteArray, 0, inputByteArray.Length);\n\n        try\n\n        {\n\n            cs.FlushFinalBlock();\n\n        }\n\n        catch (Exception)\n\n        {\n\n            return \"无效秘钥\";\n\n        }\n\n        \n\n        return Encoding.Default.GetString(ms.ToArray());\n\n    }\n\n\n\n    /// &lt;summary&gt;\n\n    /// MD5流加密\n\n    /// &lt;/summary&gt;\n\n    /// &lt;param name=\"inputStream\"&gt;输入流&lt;/param&gt;\n\n    /// &lt;returns&gt;&lt;/returns&gt;\n\n    public static string GenerateMD5(Stream inputStream)\n\n    {\n\n        using (MD5 mi = MD5.Create())\n\n        {\n\n            byte[] newBuffer = mi.ComputeHash(inputStream);\n\n            StringBuilder sb = new StringBuilder();\n\n            for (int i = 0; i &lt; newBuffer.Length; i++)\n\n            {\n\n                sb.Append(newBuffer[i].ToString(\"x2\"));\n\n            }\n\n            return sb.ToString();\n\n        }\n\n    }\n\n\n\n    #endregion\n\n\n</code></pre>\n<p>测试<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f87cf12a0baf4ab29c661449a9e81d60.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-05-23 14:25:00", "summary": "常用的加密算法之一参考文章加密概述，原理及实现常用的加密算法：、、、、、、、概述消息摘要算法，属算法一类。算法对输入任意长度的消息进行运行，产生一个位的消息摘要位的数字字母混合码。特点不可逆，相同数据"}