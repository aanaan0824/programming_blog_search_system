{"blogid": "119858238", "writerAge": "码龄3年", "writerBlogNum": "45", "writerCollect": "3980", "writerComment": "542", "writerFan": "1436", "writerGrade": "5级", "writerIntegral": "2698", "writerName": "零陵上将军_xdr", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_119858238.jpg", "writerRankTotal": "6918", "writerRankWeekly": "15533", "writerThumb": "1519", "writerVisitNum": "95407", "blog_read_count": "43957", "blog_time": "于 2021-08-23 15:51:55 发布", "blog_title": "超详细的MySQL三万字总结", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#MySQL_8\">MySQL基础</a></li><li><ul><li><a href=\"#_9\">数据库的介绍</a></li><li><ul><li><a href=\"#_10\">数据库概述</a></li><li><ul><li><a href=\"#_11\">数据的存储方式</a></li><li><a href=\"#_20\">数据库的概念</a></li><li><a href=\"#_29\">常见数据库排行榜</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_46\">数据库的安装与卸载</a></li><li><ul><li><a href=\"#_53\">数据库的安装</a></li><li><a href=\"#_97\">数据库的卸载</a></li></ul>\n</li><li><a href=\"#_107\">数据库服务的启动与登录</a></li><li><ul><li><a href=\"#Windows__113\">Windows 服务方式启动</a></li><li><a href=\"#DOS__117\">DOS 命令方式启动</a></li><li><a href=\"#_128\">控制台连接数据库</a></li><li><a href=\"#SQLyog__146\">SQLyog 图形化工具——客户端</a></li><li><a href=\"#_SQLyog__150\">使用 SQLyog 登录数据库</a></li><li><a href=\"#_152\">数据库管理系统</a></li><li><a href=\"#_155\">数据库管理系统、数据库和表的关系</a></li></ul>\n</li><li><a href=\"#SQL__161\">SQL 的概念</a></li><li><ul><li><a href=\"#_SQL_162\">什么是 SQL</a></li><li><a href=\"#SQL__165\">SQL 作用</a></li><li><a href=\"#SQL__172\">SQL 语句分类</a></li><li><a href=\"#MySQL__180\">MySQL 的语法</a></li></ul>\n</li><li><a href=\"#DDL__193\">DDL 操作数据库</a></li><li><ul><li><a href=\"#_194\">创建数据库</a></li><li><ul><li><ul><li><a href=\"#_195\">创建数据库的几种方式</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_229\">查看数据库</a></li><li><a href=\"#_244\">修改数据库</a></li><li><a href=\"#_258\">删除数据库</a></li><li><a href=\"#_265\">使用数据库</a></li></ul>\n</li><li><a href=\"#DDL__279\">DDL 操作表结构</a></li><li><ul><li><a href=\"#_280\">创建表</a></li><li><a href=\"#MySQL__300\">MySQL 数据类型</a></li><li><a href=\"#_324\">查看表</a></li><li><a href=\"#_358\">快速创建一个表结构相同的表</a></li><li><a href=\"#_372\">删除表</a></li><li><a href=\"#_396\">修改表结构</a></li></ul>\n</li><li><a href=\"#DML__435\">DML 操作表中的数据</a></li><li><ul><li><a href=\"#_438\">插入记录</a></li><li><a href=\"#_481\">蠕虫复制</a></li><li><ul><li><a href=\"#_482\">什么是蠕虫复制</a></li></ul>\n</li><li><a href=\"#_499\">更新表记录</a></li><li><a href=\"#_530\">删除表记录</a></li></ul>\n</li><li><a href=\"#DQL__570\">DQL 查询表中的数据</a></li><li><ul><li><a href=\"#_579\">简单查询</a></li><li><a href=\"#_605\">指定列的别名进行查询</a></li><li><a href=\"#_633\">清除重复值</a></li><li><a href=\"#_651\">查询结果参与运算</a></li><li><a href=\"#_680\">条件查询</a></li><li><ul><li><a href=\"#_693\">运算符</a></li><li><a href=\"#_743\">逻辑运算符</a></li><li><a href=\"#in__762\">in 关键字</a></li><li><a href=\"#_779\">范围查询</a></li><li><a href=\"#like__791\">like 关键字</a></li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#MySQL__814\">MySQL 表的约束与数据库设计</a></li><li><ul><li><a href=\"#DQL__815\">DQL 查询语句</a></li><li><ul><li><a href=\"#_816\">排序</a></li><li><a href=\"#_846\">聚合函数</a></li><li><a href=\"#_899\">分组</a></li><li><a href=\"#limit__934\">limit 语句</a></li></ul>\n</li><li><a href=\"#_965\">数据库备份和还原</a></li><li><ul><li><a href=\"#_966\">备份的应用场景</a></li><li><a href=\"#_969\">备份与还原的语句</a></li><li><a href=\"#_992\">图形化界面备份与还原</a></li></ul>\n</li><li><a href=\"#_1003\">数据库表的约束</a></li><li><ul><li><a href=\"#_1004\">数据库约束的概述</a></li><li><a href=\"#_1017\">主键约束</a></li><li><a href=\"#_1108\">唯一约束</a></li><li><a href=\"#_1135\">非空约束</a></li><li><a href=\"#_1159\">默认值</a></li><li><a href=\"#_1182\">外键约束</a></li></ul>\n</li><li><a href=\"#_1385\">表与表之间的关系</a></li><li><ul><li><a href=\"#_1386\">表关系的概念</a></li><li><a href=\"#_1394\">一对多</a></li><li><a href=\"#_1398\">多对多</a></li><li><a href=\"#_1403\">一对一</a></li></ul>\n</li><li><a href=\"#_1414\">数据库设计</a></li><li><ul><li><a href=\"#_1415\">数据规范化</a></li><li><a href=\"#1NF_1425\">1NF</a></li><li><a href=\"#2NF_1437\">2NF</a></li><li><a href=\"#3NF_1477\">3NF</a></li><li><a href=\"#_1499\">三大范式小结</a></li></ul>\n</li></ul>\n</li><li><a href=\"#MySQL__1508\">MySQL 多表查询与事务的操作</a></li><li><ul><li><a href=\"#_1509\">表连接查询</a></li><li><ul><li><a href=\"#_1510\">什么是多表查询</a></li><li><a href=\"#_1551\">内连接查询</a></li><li><a href=\"#_1588\">外链接查询</a></li><li><a href=\"#_1612\">子查询</a></li></ul>\n</li><li><a href=\"#_1662\">事务</a></li><li><ul><li><a href=\"#_1663\">事务的基本介绍</a></li><li><a href=\"#_1739\">事务的四大特征</a></li><li><a href=\"#_1749\">事务的隔离级别</a></li></ul>\n</li><li><a href=\"#DCL_1785\">DCL</a></li><li><ul><li><a href=\"#_1790\">管理用户</a></li><li><a href=\"#_1837\">权限管理</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"MySQL_8\"></a>MySQL基础</h1>\n<h2><a id=\"_9\"></a>数据库的介绍</h2>\n<h3><a id=\"_10\"></a>数据库概述</h3>\n<h4><a id=\"_11\"></a>数据的存储方式</h4>\n<p>Java 中创建对象： Student s = new Student(1, “张三”) 存在内存中<br/> 学习了 Java IO 流：把数据保存到文件中。</p>\n<table><thead><tr><th>存储位置</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>内存</td><td>速度快</td><td>不能永久保存，数据是临时状态。</td></tr><tr><td>文件</td><td>数据可以永久保存</td><td>操作数据不方便，查询某个数据。</td></tr><tr><td>数据库</td><td>(1)、 数据可以永久保存 （2)、 查询速度快 （3)、 对数据的管理方便</td><td>占用资源，需要购买。</td></tr></tbody></table>\n<h4><a id=\"_20\"></a>数据库的概念</h4>\n<p>什么是数据库</p>\n<blockquote>\n<ol><li>存储数据的仓库</li><li>本质上是一个文件系统，还是以文件的方式存在服务器的电脑上的。</li><li>所有的关系型数据库都可以使用通用的 SQL<br/> 语句进行管理 DBMS DataBase Management System</li></ol>\n</blockquote>\n<h4><a id=\"_29\"></a>常见数据库排行榜</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8f8ad0c53006430f8b47bfd52858a953.png\"/></p>\n<p><strong>MySQL</strong>：开源免费的数据库，小型的数据库，已经被 Oracle 收购了。MySQL6.x 版本也开始收费。后来 Sun公司收购了 MySQL，而 Sun 公司又被 Oracle 收购。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d46b67a8bb034fa0bdd8a090dfdba3df.png\"/><br/> <strong>Oracle</strong>：收费的大型数据库，Oracle 公司的产品。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\697b65ae8cec4c37a75fabd3590a4041.png\"/><br/> <strong>DB2</strong> ：IBM 公司的数据库产品,收费的。常应用在银行系统中。</p>\n<p><strong>SQL Server</strong>：MicroSoft 公司收费的中型的数据库。C#、.net 等语言常使用。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0716458bece94d209e279acdd75cb456.png\"/></p>\n<p><strong>SQLite</strong>: 嵌入式的小型数据库，应用在手机端，如：Android。</p>\n<h2><a id=\"_46\"></a>数据库的安装与卸载</h2>\n<p>安装过程分成两个部分：</p>\n<ol><li>文件解压和复制过程，默认的安装目录：</li><li>安装好以后必须对 MySQL 服务器进行配置<br/> 在 mysql 中管理员的名字。</li></ol>\n<p>下载地址：<a href=\"https://download.csdn.net/download/qq_45771939/21446730?spm=1001.2014.3001.5503\">https://download.csdn.net/download/qq_45771939/21446730?spm=1001.2014.3001.5503</a></p>\n<h3><a id=\"_53\"></a>数据库的安装</h3>\n<ol><li> <p>打开下载的 mysql 安装文件双击解压缩，运行“mysql-5.5.40-win64.msi”。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a76937494d2c441c9c98d53133aab3a5.png\"/><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\244f1cdca59c497cbb5d6da20fa40ed1.png\"/></p> </li><li> <p>选择安装类型，有“Typical（默认）”、“Complete（完全）”、“Custom（用户自定义）”三个选项，选择“Custom”， 按“next”键继续。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3218226a27d2496191ba4c83f1609aa2.png\"/></p> </li><li> <p>点选“Browse”，手动指定安装目录。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9682476a9b8a4943b319146a75c44e63.png\"/>4. 填上安装目录，我的是“d:\\Program Files (x86)\\MySQL\\MySQL Server 5.0”，按“OK”继续。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\217fe556567045e194a8df8a103b736a.png\"/></p> </li><li> <p>确认一下先前的设置，如果有误，按“Back”返回重做。按“Install”开始安装。<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3caebeff19fb4d0ea046f7658607df87.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\30e4d421d80445469f78c1df7063fb16.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7941cf21b3a94ad198a75bba3b65e668.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2a53db02224847cfae6bee1ef9f002c6.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d258a8bfb9bb47c7950403e16c00aa0f.png\"/></p> </li><li> <p>正在安装中，请稍候，直到出现下面的界面, 则完成 MYSQL 的安装。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4217ef50a5ec419289bb00782dd7e0b9.png\"/><br/> 数据库安装好了还需要对数据库进行配置才能使用 MYSQL 的配置。</p> </li><li> <p>安装完成了，出现如下界面将进入 mysql 配置向导。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f90d032974014c8bb26b4b47de23d547.png\"/></p> </li><li> <p>选择配置方式，“Detailed Configuration（手动精确配置）”、“Standard Configuration（标准配置）”，我们选择“Detailed Configuration”，方便熟悉配置过程。</p> </li></ol>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e319067412d0463c97a289eb8abbe967.png\"/><br/> 8. 选择服务器类型，“Developer Machine（开发测试类，mysql 占用很少资源）”、“Server Machine（服务器类型，mysql 占用较多资源）”、“Dedicated MySQL Server Machine（专门的数据库服务器，mysql 占用所有可用资源）<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\29625d662c1740d4942daddafecfcc9a.png\"/><br/> 9. 选择mysql数据库的大致用途，“Multifunctional Database（通用多功能型，好）”、“Transactional Database Only（服务器类型，专注于事务处理，一般）”、“Non-Transactional Database Only（非事务处理型，较简单，主要做一些监控、记数用，对 MyISAM 数据类型的支持仅限于 non-transactional），按“Next”继续。<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5cf3bea637f94142a90d23d9d99ae07e.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7c057ef9a67c4a0195492e4a69e6e176.png\"/>11. 选择网站并发连接数，同时连接的数目Decision Supportt(DSS)/OLAP（20个左右）”、“Online Transaction<br/> Processing(OLTP)（500 个左右）”、“Manual Setting（手动设置，自己输一个数）”。<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d15eb848404344c0a6d6d2c8204798c2.png\"/></p>\n<ol start=\"12\"><li>是否启用 TCP/IP 连接，设定端口，如果不启用，就只能在自己的机器上访问 mysql 数据库了，在这个页面上，您还可以选择“启用标准模式”（Enable Strict Mode），这样 MySQL 就不会允许细小的语法错误。如果是新手，建议您取消标准模式以减少麻烦。但熟悉 MySQL 以后，尽量使用标准模式，因为它可以降低有害数据进入数据库的可能性。按“Next”继续。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\be27bba126564729ab1acefe2396a171.png\"/></li><li>就是对 mysql 默认数据库语言编码进行设置（重要），一般选 UTF-8，按 “Next”继续。<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4a187f2552684fa5868c3d3a880513f0.png\"/></li><li>选择是否将 mysql 安装为 windows 服务，还可以指定 Service Name（服务标识名称），是否将 mysql 的 bin目录加入到 Windows PATH（加入后，就可以直接使用 bin 下的文件，而不用指出目录名，比如连接，“mysql.exe -uusername -ppassword;”就可以了，不用指出 mysql.exe 的完整地址，很方便），我这里全部打上了勾，Service Name 不变。按“Next”继续。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ce65ee6c085e4532a55f01126e7e8175.png\"/></li><li>询问是否要修改默认 root 用户（超级管理）的密码。“Enable root access from remote machines（是否允许 root 用户在其它的机器上登陆，如果要安全，就不要勾上，如果要方便，就勾上它）”。最后“CreateAn Anonymous Account（新建一个匿名用户，匿名用户可以连接数据库，不能操作数据，包括查询）”，一般就不用勾了，设置完毕，按“Next”继续。<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\adbd69c6a48c4f3ba9fe3ca7ef3e10cf.png\"/></li><li>确认设置无误，按“Execute”使设置生效，即完成 MYSQL 的安装和配置。<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8ea7043e427c4be6b93d5139d7dfb720.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ceba58713e9d48fd88ef2c31007f4846.png\"/><br/> 注意：设置完毕，按“Finish”后有一个比较常见的错误，就是不能“Start service”，一般出现在以前有安装 mysql的服务器上，解决的办法，先保证以前安装的 mysql 服务器彻底卸载掉了；不行的话，检查是否按上面一步所说，之前的密码是否有修改，照上面的操作；如果依然不行，将 mysql 安装目录下的 data 文件夹备份，然后删除，在安装完成后，将安装生成的 data 文件夹删除，备份的 data 文件夹移回来，再重启 mysql 服务就可以了，这种情况下，可能需要将数据库检查一下，然后修复一次，防止数据出错。</li></ol>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9ff68fa7965d4f77a6d6a5aa248f5d1b.png\"/></p>\n<h3><a id=\"_97\"></a>数据库的卸载</h3>\n<ol><li>停止 window 的 MySQL 服务。 找到“此电脑”-&gt; “管理”-&gt; “服务”，停止 MySQL 后台服务。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c48fcf92e4bb492a80dd7fa2bfacd388.png\"/></li><li>卸载 MySQL 安装程序。找到“控制面板”-&gt; “程序和功能”，卸载 MySQL 程序。<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3fd9c8eefe7e4a8db564b171a9383391.png\"/></li><li>删除 MySQL 安装目录下的所有文件。</li><li>\n<ol start=\"4\"><li>删除 c 盘 ProgramDate 目录中关于 MySQL 的目录。路径为：C:\\ProgramData\\MySQL(是隐藏文件,需要显示<br/> 出来)。</li></ol> </li></ol>\n<h2><a id=\"_107\"></a>数据库服务的启动与登录</h2>\n<p>MySQL 服务器启动方式有两种：</p>\n<ol><li>通过服务的方式自动启动</li><li>手动启动的方式</li></ol>\n<h3><a id=\"Windows__113\"></a>Windows 服务方式启动</h3>\n<p>找到“此电脑”-&gt; “管理”-&gt; “服务”，点击启动。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6219fb7b79474df3a1ecb4ab9f95bbfb.png\"/></p>\n<h3><a id=\"DOS__117\"></a>DOS 命令方式启动</h3>\n<p>使用管理员打开cmd</p>\n<pre><code class=\"prism language-java\">net start mysql <span class=\"token operator\">:</span> 启动mysql的服务\nnet stop mysql<span class=\"token operator\">:</span>关闭mysql服务\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\93bb79a1e7554b3a902f875424bbc0e8.png\"/></p>\n<h3><a id=\"_128\"></a>控制台连接数据库</h3>\n<p>MySQL 是一个需要账户名密码登录的数据库，登陆后使用，它提供了一个默认的 root 账号，使用安装时设置的密码即可登录<br/> 4.3.1 登录格式</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">// 方式一</span>\nmysql <span class=\"token operator\">-</span>u 用户名 <span class=\"token operator\">-</span>p 密码\n<span class=\"token comment\">// 方式二</span>\nmysql <span class=\"token operator\">-</span>hip 地址 <span class=\"token operator\">-</span>u 用户名 <span class=\"token operator\">-</span>p 密码\n<span class=\"token comment\">// 方式三</span>\nmysql <span class=\"token operator\">--</span>host<span class=\"token operator\">=</span>ip 地址 <span class=\"token operator\">--</span>user<span class=\"token operator\">=</span>用户名 <span class=\"token operator\">--</span>password<span class=\"token operator\">=</span>密码\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bfe423ad0fd64601ae8c434b68b3c031.png\"/><br/> 退出 MySQL：</p>\n<pre><code class=\"prism language-java\">quit 或 exit\n</code></pre>\n<h3><a id=\"SQLyog__146\"></a>SQLyog 图形化工具——客户端</h3>\n<p>SQLyog 是业界著名的 Webyog 公司出品的一款简洁高效、功能强大的图形化 MySQL 数据库管理工具。使用SQLyog 可以快速直观地让您从世界的任何角落通过网络来维护远端的 MySQL 数据库。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\96748305770a429c96189d9597965b56.png\"/></p>\n<h3><a id=\"_SQLyog__150\"></a>使用 SQLyog 登录数据库</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6c1a3c9132394aafb338ab67d56ac5fb.png\"/></p>\n<h3><a id=\"_152\"></a>数据库管理系统</h3>\n<p><strong>数据库管理系统（DataBase Management System，DBMS）</strong>：指一种操作和管理数据库的大型软件，用于建立、使用和维护数据库，对数据库进行统一管理和控制，以保证数据库的安全性和完整性。用户通过数据库管理系统访问数据库中表内的数据。</p>\n<h3><a id=\"_155\"></a>数据库管理系统、数据库和表的关系</h3>\n<p>数据库管理程序(DBMS)可以管理多个数据库，一般开发人员会针对每一个应用创建一个数据库。为保存应用中实体的数据，一般会在数据库创建多个表，以保存程序中实体 User 的数据。<br/> 数据库管理系统、数据库和表的关系如图所示：<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f1eda577f17c4a29ac833646c9f8d640.png\"/></p>\n<h2><a id=\"SQL__161\"></a>SQL 的概念</h2>\n<h3><a id=\"_SQL_162\"></a>什么是 SQL</h3>\n<p>Structured Query Language 结构化查询语言</p>\n<h3><a id=\"SQL__165\"></a>SQL 作用</h3>\n<p>1、是一种所有关系型数据库的查询规范，不同的数据库都支持。<br/> 2、 通用的数据库操作语言，可以用在不同的数据库中。<br/> 3、不同的数据库 SQL 语句有一些区别</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3f8d09832bee4b1c96beb2abb34cc654.png\"/></p>\n<h3><a id=\"SQL__172\"></a>SQL 语句分类</h3>\n<p>1、Data Definition Language (<strong>DDL</strong> 数据定义语言) 如：建库，建表<br/> 2、Data Manipulation Language(<strong>DML</strong> 数据操纵语言)，如：对表中的记录操作增删改<br/> 3、Data Query Language(<strong>DQL</strong> 数据查询语言)，如：对表中的查询操作<br/> 4、Data Control Language(<strong>DCL</strong> 数据控制语言)，如：对用户权限的设置</p>\n<h3><a id=\"MySQL__180\"></a>MySQL 的语法</h3>\n<p>1、每条语句以分号结尾，如果在 SQLyog 中不是必须加的。<br/> 2、SQL 中不区分大小写，关键字中认为大写和小写是一样的<br/> 3、3 种注释：</p>\n<table><thead><tr><th>注释的语法</th><th>说明</th></tr></thead><tbody><tr><td>–空格</td><td>单行注释</td></tr><tr><td>/* */</td><td>多行注释</td></tr><tr><td>#</td><td>这是 mysql 特有的注释方式</td></tr></tbody></table>\n<h2><a id=\"DDL__193\"></a>DDL 操作数据库</h2>\n<h3><a id=\"_194\"></a>创建数据库</h3>\n<h5><a id=\"_195\"></a>创建数据库的几种方式</h5>\n<p>创建数据库</p>\n<pre><code class=\"prism language-java\">CREATE DATABASE 数据库名<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>判断数据库是否已经存在，不存在则创建数据库</p>\n<pre><code class=\"prism language-java\">CREATE DATABASE IF NOT EXISTS 数据库名<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>创建数据库并指定字符集</p>\n<pre><code class=\"prism language-java\">CREATE DATABASE 数据库名 CHARACTER SET 字符集<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>案例：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 直接创建数据库 db1</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> db1<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 判断是否存在，如果不存在则创建数据库 db2</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span> db2<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 创建数据库并指定字符集为 gbk</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> db3 <span class=\"token keyword\">character</span> <span class=\"token keyword\">set</span> gbk<span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_229\"></a>查看数据库</h3>\n<p>查看所有的数据库</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">show</span> <span class=\"token keyword\">databases</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>查看某个数据库的定义信息</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">show</span> <span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> db3<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">show</span> <span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> db1<span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_244\"></a>修改数据库</h3>\n<p>修改数据库默认的字符集</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">DATABASE</span> 数据库名 <span class=\"token keyword\">CHARACTER</span> <span class=\"token keyword\">SET</span> 字符集<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>将 db3 数据库的字符集改成 utf8</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">alter</span> <span class=\"token keyword\">database</span> db3 <span class=\"token keyword\">character</span> <span class=\"token keyword\">set</span> utf8<span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_258\"></a>删除数据库</h3>\n<p>删除数据库的语法</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">DATABASE</span> 数据库名<span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_265\"></a>使用数据库</h3>\n<p>查看正在使用的数据库</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DATABASE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">--使用的一个 mysql 中的全局函数</span>\n</code></pre>\n<p>使用/切换数据库</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">USE</span> 数据库名<span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"DDL__279\"></a>DDL 操作表结构</h2>\n<h3><a id=\"_280\"></a>创建表</h3>\n<p>创建表的格式</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> 表名 <span class=\"token punctuation\">(</span>\n字段名 <span class=\"token number\">1</span> 字段类型 <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n字段名 <span class=\"token number\">2</span> 字段类型 <span class=\"token number\">2</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>关键字说明：</p>\n<table><thead><tr><th>创建表的关键字</th><th>说明</th></tr></thead><tbody><tr><td>CREATE</td><td>创建</td></tr><tr><td>TABLE</td><td>表</td></tr></tbody></table>\n<h3><a id=\"MySQL__300\"></a>MySQL 数据类型</h3>\n<p>常使用的数据类型如下：</p>\n<table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>int</td><td>整型</td></tr><tr><td>double</td><td>浮点型</td></tr><tr><td>varchar</td><td>字符串型</td></tr><tr><td>date</td><td>日期类型</td></tr></tbody></table>\n<p>创建 student 表包含 id,name,birthday 字段</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> student <span class=\"token punctuation\">(</span>\nid <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 整数</span>\nname <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 字符串</span>\nbirthday <span class=\"token keyword\">date</span> <span class=\"token comment\">-- 生日，最后没有逗号</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_324\"></a>查看表</h3>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">TABLES</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>查看表结构</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">DESC</span> 表名<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>查看创建表的 SQL 语句</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> 表名<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>查看 db1 数据库中的所有表</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">use</span> db1<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">show</span> <span class=\"token keyword\">tables</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>查看 student 的创建表 SQL 语句</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">show</span> <span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> student<span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_358\"></a>快速创建一个表结构相同的表</h3>\n<p>语法</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> 新表名 <span class=\"token operator\">LIKE</span> 旧表名<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>创建 s1 表，s1 表结构和 student 表结构相同</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 创建一个 s1 的表与 student 结构相同</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> s1 <span class=\"token operator\">like</span> student<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">desc</span> s1<span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_372\"></a>删除表</h3>\n<p>直接删除表</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> 表名<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>判断表是否存在，如果存在则删除表</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> 表名<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>案例：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 直接删除表 s1 表</span>\n<span class=\"token keyword\">drop</span> <span class=\"token keyword\">table</span> s1<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 判断表是否存在并删除 s1 表</span>\n<span class=\"token keyword\">drop</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">exists</span> <span class=\"token punctuation\">`</span><span class=\"token keyword\">create</span><span class=\"token punctuation\">`</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_396\"></a>修改表结构</h3>\n<p>添加表列 ADD</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 表名 <span class=\"token keyword\">ADD</span> 列名 类型<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>修改列类型 MODIFY</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 表名 <span class=\"token keyword\">MODIFY</span> 列名 新的类型<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>修改列名 CHANGE</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 表名 CHANGE 旧列名 新列名 类型<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>删除列 DROP</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 表名 <span class=\"token keyword\">DROP</span> 列名<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>修改表名</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">RENAME</span> <span class=\"token keyword\">TABLE</span> 表名 <span class=\"token keyword\">TO</span> 新表名<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>修改字符集 character set</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 表名 <span class=\"token keyword\">character</span> <span class=\"token keyword\">set</span> 字符集<span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"DML__435\"></a>DML 操作表中的数据</h2>\n<p>用于对表中的记录进行增删改操作</p>\n<h3><a id=\"_438\"></a>插入记录</h3>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">INTO</span><span class=\"token punctuation\">]</span> 表名 <span class=\"token punctuation\">[</span>字段名<span class=\"token punctuation\">]</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span>字段值<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>插入全部字段：</p>\n<p>所有的字段名都写出来</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> 表名 <span class=\"token punctuation\">(</span>字段名 <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 字段名 <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> 字段名 <span class=\"token number\">3</span>…<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span>值 <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 值 <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> 值 <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>不写字段名</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> 表名 <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span>值 <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 值 <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> 值 <span class=\"token number\">3</span>…<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>插入部分数据</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> 表名 <span class=\"token punctuation\">(</span>字段名 <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 字段名 <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span>值 <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 值 <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>案例：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 插入所有的列，向学生表中</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> student <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>sex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'孙悟空'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> student <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>sex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'孙悟饭'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>insert 的注意事项：</p>\n<ol><li>插入的数据应与字段的数据类型相同</li><li>数据的大小应在列的规定范围内，例如：不能将一个长度为 80 的字符串加入到长度为 40 的列中。</li><li>在 values 中列出的数据位置必须与被加入的列的排列位置相对应。在 mysql 中可以使用 value，但不建议使<br/> 用，功能与 values 相同。</li><li>字符和日期型数据应包含在单引号中。MySQL 中也可以使用双引号做为分隔符。</li><li>不指定列或使用 null，表示插入空值。</li></ol>\n<h3><a id=\"_481\"></a>蠕虫复制</h3>\n<h4><a id=\"_482\"></a>什么是蠕虫复制</h4>\n<p>将一张已经存在的表中的数据复制到另一张表中。</p>\n<p>语法格式<br/> 将表名 2 中的所有的列复制到表名 1 中</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> 表名 <span class=\"token number\">1</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> 表名 <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>只复制部分列</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> 表名 <span class=\"token number\">1</span><span class=\"token punctuation\">(</span>列 <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 列 <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">SELECT</span> 列 <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 列 <span class=\"token number\">2</span> <span class=\"token keyword\">FROM</span> student<span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_499\"></a>更新表记录</h3>\n<p>语法格式：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">UPDATE</span> 表名 <span class=\"token keyword\">SET</span> 列名<span class=\"token operator\">=</span>值 <span class=\"token punctuation\">[</span><span class=\"token keyword\">WHERE</span> 条件表达式<span class=\"token punctuation\">]</span>\n</code></pre>\n<p>不带条件修改数据</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">UPDATE</span> 表名 <span class=\"token keyword\">SET</span> 字段名<span class=\"token operator\">=</span>值<span class=\"token punctuation\">;</span> <span class=\"token comment\">--修改所有的行</span>\n</code></pre>\n<p>带条件修改数据</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">UPDATE</span> 表名 <span class=\"token keyword\">SET</span> 字段名<span class=\"token operator\">=</span>值 <span class=\"token keyword\">WHERE</span> 字段名<span class=\"token operator\">=</span>值<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>案例：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 不带条件修改数据，将所有的性别改成女</span>\n<span class=\"token keyword\">update</span> student <span class=\"token keyword\">set</span> sex <span class=\"token operator\">=</span> <span class=\"token string\">'女'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 带条件修改数据，将 id 号为 2 的学生性别改成男</span>\n<span class=\"token keyword\">update</span> student <span class=\"token keyword\">set</span> sex<span class=\"token operator\">=</span><span class=\"token string\">'男'</span> <span class=\"token keyword\">where</span> id<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 一次修改多个列，把 id 为 3 的学生，年龄改成 26 岁，address 改成北京</span>\n<span class=\"token keyword\">update</span> student <span class=\"token keyword\">set</span> age<span class=\"token operator\">=</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span> address<span class=\"token operator\">=</span><span class=\"token string\">'北京'</span> <span class=\"token keyword\">where</span> id<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_530\"></a>删除表记录</h3>\n<p>语法格式：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> 表名 <span class=\"token punctuation\">[</span><span class=\"token keyword\">WHERE</span> 条件表达式<span class=\"token punctuation\">]</span>\n</code></pre>\n<p>不带条件删除数据</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> 表名<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>带条件删除数据</p>\n<pre><code class=\"prism language-sql\">带条件删除数据\n</code></pre>\n<p>使用 truncate 删除表中所有记录</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">TRUNCATE</span> <span class=\"token keyword\">TABLE</span> 表名<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>truncate 和 delete 的区别：<br/> truncate 相当于删除表的结构，再创建一张表。</p>\n<p>案例：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 带条件删除数据，删除 id 为 1 的记录</span>\n<span class=\"token keyword\">delete</span> <span class=\"token keyword\">from</span> student <span class=\"token keyword\">where</span> id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 不带条件删除数据,删除表中的所有数据</span>\n<span class=\"token keyword\">delete</span> <span class=\"token keyword\">from</span> student<span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"DQL__570\"></a>DQL 查询表中的数据</h2>\n<p>查询不会对数据库中的数据进行修改.只是一种显示数据的方式。</p>\n<p>语法：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SELECT</span> 列名 <span class=\"token keyword\">FROM</span> 表名 <span class=\"token punctuation\">[</span><span class=\"token keyword\">WHERE</span> 条件表达式<span class=\"token punctuation\">]</span>\n</code></pre>\n<h3><a id=\"_579\"></a>简单查询</h3>\n<p>使用*表示所有列</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> 表名<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>查询所有的学生：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>查询指定列的数据,多个列之间以逗号分隔</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SELECT</span> 字段名 <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 字段名 <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> 字段名 <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">FROM</span> 表名<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>查询 student 表中的 name 和 age 列</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">select</span> name<span class=\"token punctuation\">,</span>age <span class=\"token keyword\">from</span> student<span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_605\"></a>指定列的别名进行查询</h3>\n<p>使用别名的好处： 显示的时候使用新的名字，并不修改表的结构。</p>\n<p>语法：<br/> 1、对列指定别名</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SELECT</span> 字段名<span class=\"token number\">1</span>  <span class=\"token keyword\">AS</span> 别名<span class=\"token punctuation\">,</span> 字段名 <span class=\"token number\">2</span> <span class=\"token keyword\">AS</span> 别名<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">FROM</span> 表名<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>2、对列和表同时指定别名</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SELECT</span> 字段名<span class=\"token number\">1</span> <span class=\"token keyword\">AS</span> 别名<span class=\"token punctuation\">,</span> 字段名<span class=\"token number\">2</span> <span class=\"token keyword\">AS</span> 别名<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">FROM</span> 表名 <span class=\"token keyword\">AS</span> 表别名<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>案例：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 使用别名</span>\n<span class=\"token keyword\">select</span> name <span class=\"token keyword\">as</span> 姓名<span class=\"token punctuation\">,</span>age <span class=\"token keyword\">as</span> 年龄 <span class=\"token keyword\">from</span> student<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 表使用别名</span>\n<span class=\"token keyword\">select</span> st<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> 姓名<span class=\"token punctuation\">,</span>age <span class=\"token keyword\">as</span> 年龄 <span class=\"token keyword\">from</span> student <span class=\"token keyword\">as</span> st\n</code></pre>\n<h3><a id=\"_633\"></a>清除重复值</h3>\n<p>查询指定列并且结果不出现重复数据</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span> 字段名 <span class=\"token keyword\">FROM</span> 表名<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>案例：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 查询学生来至于哪些地方</span>\n<span class=\"token keyword\">select</span> address <span class=\"token keyword\">from</span> student<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 去掉重复的记录</span>\n<span class=\"token keyword\">select</span> <span class=\"token keyword\">distinct</span> address <span class=\"token keyword\">from</span> student<span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_651\"></a>查询结果参与运算</h3>\n<p>某列数据和固定值运算：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SELECT</span> 列名<span class=\"token number\">1</span> <span class=\"token operator\">+</span> 固定值 <span class=\"token keyword\">FROM</span> 表名<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>某列数据和其他列数据参与运算：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SELECT</span> 列名<span class=\"token number\">1</span> <span class=\"token operator\">+</span> 列名<span class=\"token number\">2</span> <span class=\"token keyword\">FROM</span> 表名<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>案例：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">--添加数学，英语成绩列,给每条记录添加对应的数学和英语成绩，查询的时候将数学和英语的成绩相加</span>\n\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 给所有的数学加 5 分</span>\n<span class=\"token keyword\">select</span> math<span class=\"token operator\">+</span><span class=\"token number\">5</span> <span class=\"token keyword\">from</span> student<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 查询 math + english 的和</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>math<span class=\"token operator\">+</span>english<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> 总成绩 <span class=\"token keyword\">from</span> student<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- as 可以省略</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>math<span class=\"token operator\">+</span>english<span class=\"token punctuation\">)</span> 总成绩 <span class=\"token keyword\">from</span> student<span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_680\"></a>条件查询</h3>\n<p>为什么要条件查询:<br/> 如果没有查询条件，则每次查询所有的行。实际应用中，一般要指定查询的条件。对记录进行过滤。</p>\n<p>条件查询的语法:</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SELECT</span> 字段名 <span class=\"token keyword\">FROM</span> 表名 <span class=\"token keyword\">WHERE</span> 条件<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">--流程：取出表中的每条数据，满足条件的记录就返回，不满足条件的记录不返回</span>\n</code></pre>\n<h4><a id=\"_693\"></a>运算符</h4>\n<table><thead><tr><th>比较运算符</th><th>说明</th></tr></thead><tbody><tr><td>&gt;、&lt;、&lt;=、&gt;=、=、&lt;&gt;</td><td>&lt;&gt;在 SQL 中表示不等于，在 mysql 中也可以使用!= 没有==</td></tr><tr><td>BETWEEN…AND</td><td>在一个范围之内，如：between 100 and 200相当于条件在 100 到 200 之间，包头又包尾</td></tr><tr><td>IN(集合)</td><td>集合表示多个值，使用逗号分隔</td></tr><tr><td>LIKE ’ %’</td><td>模糊查询</td></tr><tr><td>IS NULL</td><td>查询某一列为 NULL 的值，注：不能写=NULL</td></tr></tbody></table>\n<p>案例：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token operator\">-</span> 创建表示表\n<span class=\"token operator\">-</span> <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> student3 <span class=\"token punctuation\">(</span>\n id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 编号</span>\n name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 姓名</span>\n age <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 年龄</span>\n sex <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 性别</span>\n address <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 地址</span>\n math <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 数学</span>\n english <span class=\"token keyword\">int</span> <span class=\"token comment\">-- 英语</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> student3<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span>NAME<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>sex<span class=\"token punctuation\">,</span>address<span class=\"token punctuation\">,</span>math<span class=\"token punctuation\">,</span>english<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> \n<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'孙悟空'</span><span class=\"token punctuation\">,</span><span class=\"token number\">55</span><span class=\"token punctuation\">,</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'杭州'</span><span class=\"token punctuation\">,</span><span class=\"token number\">66</span><span class=\"token punctuation\">,</span><span class=\"token number\">78</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'琪琪'</span><span class=\"token punctuation\">,</span><span class=\"token number\">55</span><span class=\"token punctuation\">,</span><span class=\"token string\">'女'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'深圳'</span><span class=\"token punctuation\">,</span><span class=\"token number\">98</span><span class=\"token punctuation\">,</span><span class=\"token number\">87</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">'孙悟饭'</span><span class=\"token punctuation\">,</span><span class=\"token number\">35</span><span class=\"token punctuation\">,</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'香港'</span><span class=\"token punctuation\">,</span><span class=\"token number\">56</span><span class=\"token punctuation\">,</span><span class=\"token number\">77</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'布尔玛'</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token string\">'女'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'成都'</span><span class=\"token punctuation\">,</span><span class=\"token number\">76</span><span class=\"token punctuation\">,</span><span class=\"token number\">65</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">'孙悟天'</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'北京'</span><span class=\"token punctuation\">,</span><span class=\"token number\">86</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token string\">'弗利萨'</span><span class=\"token punctuation\">,</span><span class=\"token number\">572</span><span class=\"token punctuation\">,</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'香港'</span><span class=\"token punctuation\">,</span><span class=\"token number\">85</span><span class=\"token punctuation\">,</span><span class=\"token number\">97</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小芳'</span><span class=\"token punctuation\">,</span><span class=\"token number\">21</span><span class=\"token punctuation\">,</span><span class=\"token string\">'女'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'香港'</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'贝吉塔'</span><span class=\"token punctuation\">,</span><span class=\"token number\">62</span><span class=\"token punctuation\">,</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'郑州'</span><span class=\"token punctuation\">,</span><span class=\"token number\">56</span><span class=\"token punctuation\">,</span><span class=\"token number\">65</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token string\">'魔人布欧'</span><span class=\"token punctuation\">,</span><span class=\"token number\">432</span><span class=\"token punctuation\">,</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'武汉'</span><span class=\"token punctuation\">,</span><span class=\"token number\">83</span><span class=\"token punctuation\">,</span><span class=\"token number\">75</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token string\">'贝比'</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'广州'</span><span class=\"token punctuation\">,</span><span class=\"token number\">95</span><span class=\"token punctuation\">,</span><span class=\"token number\">63</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">-- 查询 math 分数大于 80 分的学生</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student3 <span class=\"token keyword\">where</span> math<span class=\"token operator\">&gt;</span><span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 查询 english 分数小于或等于 80 分的学生</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student3 <span class=\"token keyword\">where</span> english <span class=\"token operator\">&lt;=</span><span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 查询 age 等于 20 岁的学生</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student3 <span class=\"token keyword\">where</span> age <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 查询 age 不等于 20 岁的学生，注：不等于有两种写法</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student3 <span class=\"token keyword\">where</span> age <span class=\"token operator\">&lt;&gt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student3 <span class=\"token keyword\">where</span> age <span class=\"token operator\">!=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4><a id=\"_743\"></a>逻辑运算符</h4>\n<table><thead><tr><th>逻辑运算符</th><th>说明</th></tr></thead><tbody><tr><td>and</td><td>或 &amp;&amp; 与，SQL 中建议使用前者，后者并不通用。</td></tr><tr><td>or</td><td>或<code>||</code></td></tr><tr><td>not</td><td>或 ! 非</td></tr></tbody></table>\n<p>案例：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 查询 age 大于 35 且性别为男的学生(两个条件同时满足)</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student3 <span class=\"token keyword\">where</span> age<span class=\"token operator\">&gt;</span><span class=\"token number\">35</span> <span class=\"token operator\">and</span> sex<span class=\"token operator\">=</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 查询 age 大于 35 或性别为男的学生(两个条件其中一个满足)</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student3 <span class=\"token keyword\">where</span> age<span class=\"token operator\">&gt;</span><span class=\"token number\">35</span> <span class=\"token operator\">or</span> sex<span class=\"token operator\">=</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 查询 id 是 1 或 3 或 5 的学生</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student3 <span class=\"token keyword\">where</span> id<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">or</span> id<span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token operator\">or</span> id<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4><a id=\"in__762\"></a>in 关键字</h4>\n<p>语法：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SELECT</span> 字段名 <span class=\"token keyword\">FROM</span> 表名 <span class=\"token keyword\">WHERE</span> 字段 <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span>数据 <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 数据 <span class=\"token number\">2.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>案例：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 查询 id 是 1 或 3 或 5 的学生</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student3 <span class=\"token keyword\">where</span> id <span class=\"token operator\">in</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 查询 id 不是 1 或 3 或 5 的学生</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student3 <span class=\"token keyword\">where</span> id <span class=\"token operator\">not</span> <span class=\"token operator\">in</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4><a id=\"_779\"></a>范围查询</h4>\n<p>语法：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token operator\">BETWEEN</span> 值<span class=\"token number\">1</span> <span class=\"token operator\">AND</span> 值<span class=\"token number\">2</span>\n</code></pre>\n<p>查询 english 成绩大于等于 75，且小于等于 90 的学生</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student3 <span class=\"token keyword\">where</span> english <span class=\"token operator\">between</span> <span class=\"token number\">75</span> <span class=\"token operator\">and</span> <span class=\"token number\">90</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4><a id=\"like__791\"></a>like 关键字</h4>\n<p>语法:</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> 表名 <span class=\"token keyword\">WHERE</span> 字段名 <span class=\"token operator\">LIKE</span> <span class=\"token string\">'通配符字符串'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>MySQL 通配符：</p>\n<table><thead><tr><th>通配符</th><th>说明</th></tr></thead><tbody><tr><td>%</td><td>匹配任意多个字符串</td></tr><tr><td>_</td><td>匹配一个字符</td></tr></tbody></table>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 查询姓孙的学生</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student3 <span class=\"token keyword\">where</span> name <span class=\"token operator\">like</span> <span class=\"token string\">'孙%'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student3 <span class=\"token keyword\">where</span> name <span class=\"token operator\">like</span> <span class=\"token string\">'孙'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 查询姓名中包含'布'字的学生</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student3 <span class=\"token keyword\">where</span> name <span class=\"token operator\">like</span> <span class=\"token string\">'%布%'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 查询姓贝，且姓名有两个字的学生</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student3 <span class=\"token keyword\">where</span> name <span class=\"token operator\">like</span> <span class=\"token string\">'贝_'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h1><a id=\"MySQL__814\"></a>MySQL 表的约束与数据库设计</h1>\n<h2><a id=\"DQL__815\"></a>DQL 查询语句</h2>\n<h3><a id=\"_816\"></a>排序</h3>\n<pre><code class=\"prism language-sql\">通过 <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> 子句，可以将查询出的结果进行排序<span class=\"token punctuation\">(</span>排序只是显示方式，不会影响数据库中数据的顺序<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">SELECT</span> 字段名 <span class=\"token keyword\">FROM</span> 表名 <span class=\"token keyword\">WHERE</span> 字段<span class=\"token operator\">=</span>值 <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> 字段名 <span class=\"token punctuation\">[</span><span class=\"token keyword\">ASC</span><span class=\"token operator\">|</span><span class=\"token keyword\">DESC</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">ASC</span>: 升序，默认值\n<span class=\"token keyword\">DESC</span>: 降序\n</code></pre>\n<p>单列排序：只按某一个字段进行排序。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 查询所有数据,使用年龄降序排序</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> age <span class=\"token keyword\">desc</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>组合排序：同时对多个字段进行排序，如果第 1 个字段相等，则按第 2 个字段排序，依次类推。</p>\n<p>组合排序语法：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SELECT</span> 字段名 <span class=\"token keyword\">FROM</span> 表名 <span class=\"token keyword\">WHERE</span> 字段<span class=\"token operator\">=</span>值 <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> 字段名 <span class=\"token number\">1</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">ASC</span><span class=\"token operator\">|</span><span class=\"token keyword\">DESC</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> 字段名 <span class=\"token number\">2</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">ASC</span><span class=\"token operator\">|</span><span class=\"token keyword\">DESC</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 查询所有数据,在年龄降序排序的基础上，如果年龄相同再以数学成绩升序排序</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> age <span class=\"token keyword\">desc</span><span class=\"token punctuation\">,</span> math <span class=\"token keyword\">asc</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_846\"></a>聚合函数</h3>\n<p>之前我们做的查询都是横向查询，它们都是根据条件一行一行的进行判断，而使用聚合函数查询是纵向查询，它是对一列的值进行计算，然后返回一个结果值。聚合函数会忽略空值 NULL。</p>\n<p>五个聚合函数：</p>\n<table><thead><tr><th>SQL 中的聚合函数</th><th>作用</th></tr></thead><tbody><tr><td>max(列名)</td><td>求这一列的最大值</td></tr><tr><td>min(列名)</td><td>求这一列的最小值</td></tr><tr><td>avg(列名)</td><td>求这一列的平均值</td></tr><tr><td>count(列名)</td><td>统计这一列有多少条记录</td></tr><tr><td>sum(列名)</td><td>对这一列求总和</td></tr></tbody></table>\n<p>语法：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SELECT</span> 聚合函数<span class=\"token punctuation\">(</span>列名<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> 表名<span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 查询学生总数</span>\n<span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> 总人数 <span class=\"token keyword\">from</span> student<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> 总人数 <span class=\"token keyword\">from</span> student<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>统计null：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 查询 id 字段，如果为 null，则使用 0 代替</span>\n<span class=\"token keyword\">select</span> ifnull<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> student<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>ifnull<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> student<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>案例：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 查询年龄大于 20 的总数</span>\n<span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> student <span class=\"token keyword\">where</span> age<span class=\"token operator\">&gt;</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 查询数学成绩总分</span>\n<span class=\"token keyword\">select</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">)</span> 总分 <span class=\"token keyword\">from</span> student<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 查询数学成绩平均分</span>\n<span class=\"token keyword\">select</span> <span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">)</span> 平均分 <span class=\"token keyword\">from</span> student<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 查询数学成绩最高分</span>\n<span class=\"token keyword\">select</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">)</span> 最高分 <span class=\"token keyword\">from</span> student<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 查询数学成绩最低分</span>\n<span class=\"token keyword\">select</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">)</span> 最低分 <span class=\"token keyword\">from</span> student<span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_899\"></a>分组</h3>\n<p>分组查询是指使用 GROUP BY 语句对查询信息进行分组，相同数据作为一组</p>\n<p>语法：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SELECT</span> 字段 <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>字段 <span class=\"token number\">2.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">FROM</span> 表名 <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> 分组字段 <span class=\"token punctuation\">[</span><span class=\"token keyword\">HAVING</span> 条件<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>GROUP BY 将分组字段结果中相同内容作为一组，并且返回每组的第一条数据，所以单独分组没什么用处。分组的目的就是为了统计，一般分组会跟聚合函数一起使用。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 按性别进行分组，求男生和女生数学的平均分</span>\n<span class=\"token keyword\">select</span> sex<span class=\"token punctuation\">,</span> <span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> student3 <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> sex<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>使用having查询年龄大于 25 岁的人，按性别分组，统计每组的人数，并只显示性别人数大于 2 的数据：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 对分组查询的结果再进行过滤</span>\n<span class=\"token keyword\">SELECT</span> sex<span class=\"token punctuation\">,</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> student3 <span class=\"token keyword\">WHERE</span> age <span class=\"token operator\">&gt;</span> <span class=\"token number\">25</span> <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> sex <span class=\"token keyword\">having</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<table><thead><tr><th>子名</th><th>作用</th></tr></thead><tbody><tr><td>where 子句</td><td>1、对查询结果进行分组前，将不符合 where 条件的行去掉，即在分组之前过滤数据，即先过滤再分组。2、 where 后面不可以使用聚合函数</td></tr><tr><td>having 子句</td><td>1、 having 子句的作用是筛选满足条件的组，即在分组之后过滤数据，即先分组再过滤。2、 having 后面可以使用聚合函数</td></tr></tbody></table>\n<h3><a id=\"limit__934\"></a>limit 语句</h3>\n<p>limit 的作用：<br/> LIMIT 是限制的意思，所以 LIMIT 的作用就是限制查询记录的条数。</p>\n<p>LIMIT 语法格式：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">LIMIT</span> <span class=\"token keyword\">offset</span><span class=\"token punctuation\">,</span>length\n<span class=\"token comment\">--offset：起始行数，从 0 开始计数，如果省略，默认就是 0</span>\n<span class=\"token comment\">--length： 返回的行数</span>\n</code></pre>\n<p>案例：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> student3<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span>NAME<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>sex<span class=\"token punctuation\">,</span>address<span class=\"token punctuation\">,</span>math<span class=\"token punctuation\">,</span>english<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token string\">'唐僧'</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'长安'</span><span class=\"token punctuation\">,</span><span class=\"token number\">87</span><span class=\"token punctuation\">,</span><span class=\"token number\">78</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token string\">'孙悟空'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'花果山'</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">66</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token string\">'猪八戒'</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'高老庄'</span><span class=\"token punctuation\">,</span><span class=\"token number\">58</span><span class=\"token punctuation\">,</span><span class=\"token number\">78</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span><span class=\"token string\">'沙僧'</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'流沙河'</span><span class=\"token punctuation\">,</span><span class=\"token number\">77</span><span class=\"token punctuation\">,</span><span class=\"token number\">88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token string\">'白骨精'</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token string\">'女'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'白虎岭'</span><span class=\"token punctuation\">,</span><span class=\"token number\">66</span><span class=\"token punctuation\">,</span><span class=\"token number\">66</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token string\">'蜘蛛精'</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token string\">'女'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'盘丝洞'</span><span class=\"token punctuation\">,</span><span class=\"token number\">88</span><span class=\"token punctuation\">,</span><span class=\"token number\">88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- 查询学生表中数据，从第 3 条开始显示，显示 6 条。</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student3 <span class=\"token keyword\">limit</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- 最后如果不够 5 条，有多少显示多少</span>\n</code></pre>\n<h2><a id=\"_965\"></a>数据库备份和还原</h2>\n<h3><a id=\"_966\"></a>备份的应用场景</h3>\n<p>在服务器进行数据传输、数据存储和数据交换，就有可能产生数据故障。比如发生意外停机或存储介质损坏。这时，如果没有采取数据备份和数据恢复手段与措施，就会导致数据的丢失，造成的损失是无法弥补与估量的。</p>\n<h3><a id=\"_969\"></a>备份与还原的语句</h3>\n<p>备份格式： DOS 下，未登录的时候。这是一个可执行文件 exe，在 bin 文件夹。</p>\n<pre><code class=\"prism language-sql\">mysqldump <span class=\"token operator\">-</span>u 用户名 <span class=\"token operator\">-</span>p 密码 数据库 <span class=\"token operator\">&gt;</span> 文件的路径\n</code></pre>\n<p>还原格式：mysql 中的命令，需要登录后才可以操作</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">USE</span> 数据库；\nSOURCE 导入文件的路径<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>案例：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 备份 day21 数据库中的数据到 d:\\a.sql 文件中</span>\nmysqldump <span class=\"token operator\">-</span>uroot <span class=\"token operator\">-</span>proot day21 <span class=\"token operator\">&gt;</span> d:<span class=\"token comment\">//a.sql</span>\n\n<span class=\"token comment\">--还原</span>\n<span class=\"token keyword\">use</span> day21<span class=\"token punctuation\">;</span>\nsource d:<span class=\"token comment\">//a.sql;</span>\n</code></pre>\n<h3><a id=\"_992\"></a>图形化界面备份与还原</h3>\n<p>备份数据库中的数据</p>\n<ol><li>选中数据库，右键 ”备份/导出”</li><li>指定导出路径，保存成.sql 文件即可<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f5ca6dbf2da14b55834b73f7ee2320a7.png\"/></li></ol>\n<p>还原数据库中的数据</p>\n<ol><li>删除数据库</li><li>数据库列表区域右键“执行 SQL 脚本”， 指定要执行的 SQL 文件，执行即可<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1e44e96ae5c1489692e7c948a53c9ce4.png\"/></li></ol>\n<h2><a id=\"_1003\"></a>数据库表的约束</h2>\n<h3><a id=\"_1004\"></a>数据库约束的概述</h3>\n<p>约束的作用：<br/> 对表中的数据进行限制，保证数据的正确性、有效性和完整性。一个表如果添加了约束，不正确的数据将无法插入到表中。约束在创建表的时候添加比较合适。</p>\n<p>约束种类：</p>\n<table><thead><tr><th>约束名</th><th>约束关键字</th></tr></thead><tbody><tr><td>主键</td><td>primary key</td></tr><tr><td>唯一</td><td>unique</td></tr><tr><td>非空</td><td>not null</td></tr><tr><td>外键</td><td>foreign key</td></tr><tr><td>检查约束</td><td>check （ 注：mysql 不支持）</td></tr></tbody></table>\n<h3><a id=\"_1017\"></a>主键约束</h3>\n<p>主键的作用：<br/> 用来唯一标识数据库中的每一条记录</p>\n<p>哪个字段应该作为表的主键？<br/> 通常不用业务字段作为主键，单独给每张表设计一个 id 的字段，把 id 作为主键。<strong>主键是给数据库和程序使用的，不是给最终的客户使用的。所以主键有没有含义没有关系，只要不重复，非空就行。</strong></p>\n<p>创建主键：<br/> 主键关键字： primary key</p>\n<p>主键的特点：</p>\n<ol><li>非空 not null</li><li>唯一</li></ol>\n<p>创建主键方式：</p>\n<ol><li>在创建表的时候给字段添加主键</li></ol>\n<pre><code class=\"prism language-sql\">字段名 字段类型 <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span>\n</code></pre>\n<ol start=\"2\"><li>在已有表中添加主键</li></ol>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 表名 <span class=\"token keyword\">ADD</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">(</span>字段名<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>案例：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 创建表学生表 st5, 包含字段(id, name, age)将 id 做为主键</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> st5 <span class=\"token punctuation\">(</span>\n id <span class=\"token keyword\">int</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- id 为主键</span>\n name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n age <span class=\"token keyword\">int</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">desc</span> st5<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 插入重复的主键值</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> st5 <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'关羽'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 错误代码： 1062 Duplicate entry '1' for key 'PRIMARY'</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> st5 <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'关云长'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> st5<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 插入 NULL 的主键值, Column 'id' cannot be null</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> st5 <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'关云长'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 删除 st5 表的主键</span>\n<span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> st5 <span class=\"token keyword\">drop</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 添加主键</span>\n<span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> st5 <span class=\"token keyword\">add</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>主键自增：<br/> 主键如果让我们自己添加很有可能重复,我们通常希望在每次插入新记录时,数据库自动生成主键字段的值。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">AUTO_INCREMENT</span> 表示自动增长<span class=\"token punctuation\">(</span>字段类型必须是整数类型<span class=\"token punctuation\">)</span>\n</code></pre>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 插入数据</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> st6 <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'孙权'</span><span class=\"token punctuation\">,</span><span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> st6 <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'孙策'</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 另一种写法</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> st6 <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span><span class=\"token string\">'孙坚'</span><span class=\"token punctuation\">,</span><span class=\"token number\">36</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> st6<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>修改自增长的默认值起始值<br/> 默认地 AUTO_INCREMENT 的开始值是 1，如果希望修改起始值,请使用下列 SQL 语法</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> 表名<span class=\"token punctuation\">(</span>\n列名 <span class=\"token keyword\">int</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">AUTO_INCREMENT</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token operator\">=</span>起始值<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>案例：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 指定起始值为 1000</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> st4 <span class=\"token punctuation\">(</span>\n id <span class=\"token keyword\">int</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span>\n name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">auto_increment</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> st4 <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'孔明'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> st4<span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_1108\"></a>唯一约束</h3>\n<p>什么是唯一约束： 表中某一列不能出现重复的值。</p>\n<p>唯一约束的基本格式：</p>\n<pre><code class=\"prism language-sql\">字段名 字段类型 <span class=\"token keyword\">UNIQUE</span>\n</code></pre>\n<p>案例：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 创建学生表 st7, 包含字段(id, name),name 这一列设置唯一约束,不能出现同名的学生</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> st7 <span class=\"token punctuation\">(</span>\n id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>\n name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unique</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- 添加一个同名的学生</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> st7 <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> st7<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- Duplicate entry '张三' for key 'name'</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> st7 <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 重复插入多个 null </span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> st7 <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> st7 <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_1135\"></a>非空约束</h3>\n<p>什么是非空约束：某一列不能为 null。</p>\n<p>非空约束的基本语法格式：</p>\n<pre><code class=\"prism language-sql\">字段名 字段类型 <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span>\n</code></pre>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 创建表学生表 st8, 包含字段(id,name,gender)其中 name 不能为 NULL</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> st8 <span class=\"token punctuation\">(</span>\nid <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>\nname <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span>\ngender <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- 添加一条记录其中姓名不赋值</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> st8 <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'张三疯'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> st8<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- Column 'name' cannot be null</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> st8 <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_1159\"></a>默认值</h3>\n<p>语法：</p>\n<pre><code class=\"prism language-sql\">字段名 字段类型 <span class=\"token keyword\">DEFAULT</span> 默认值\n</code></pre>\n<p>案例：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 创建一个学生表 st9，包含字段(id,name,address)， 地址默认值是广州</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> st9 <span class=\"token punctuation\">(</span>\n id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>\n name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n address <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">'广州'</span> <span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- 添加一条记录,使用默认地址</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> st9 <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'李四'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> st9<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> st9 <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'李白'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 添加一条记录,不使用默认地址</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> st9 <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'李四光'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'深圳'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_1182\"></a>外键约束</h3>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> emp <span class=\"token punctuation\">(</span>\nid <span class=\"token keyword\">INT</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span>\nNAME <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\nage <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span>\ndep_name <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\ndep_location <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 添加数据</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> emp <span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> dep_name<span class=\"token punctuation\">,</span> dep_location<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'研发部'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'广州'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> emp <span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> dep_name<span class=\"token punctuation\">,</span> dep_location<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'研发部'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'广州'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> emp <span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> dep_name<span class=\"token punctuation\">,</span> dep_location<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'王五'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'研发部'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'广州'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> emp <span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> dep_name<span class=\"token punctuation\">,</span> dep_location<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'老王'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'销售部'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'深圳'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> emp <span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> dep_name<span class=\"token punctuation\">,</span> dep_location<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'大王'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'销售部'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'深圳'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> emp <span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> dep_name<span class=\"token punctuation\">,</span> dep_location<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'小王'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'销售部'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'深圳'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>以上数据表的缺点:</p>\n<ol><li>数据冗余</li><li>后期还会出现增删改的问题</li></ol>\n<p>解决方案:</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 解决方案：分成 2 张表</span>\n<span class=\"token comment\">-- 创建部门表(id,dep_name,dep_location)</span>\n<span class=\"token comment\">-- 一方，主表</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> department<span class=\"token punctuation\">(</span>\nid <span class=\"token keyword\">int</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span>\ndep_name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\ndep_location <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 创建员工表(id,name,age,dep_id)</span>\n<span class=\"token comment\">-- 多方，从表</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> employee<span class=\"token punctuation\">(</span>\nid <span class=\"token keyword\">int</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span>\nname <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\nage <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>\ndep_id <span class=\"token keyword\">int</span> <span class=\"token comment\">-- 外键对应主表的主键</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- 添加 2 个部门</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> department <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'研发部'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'广州'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'销售部'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'深圳'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> department<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 添加员工,dep_id 表示员工所在的部门</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> employee <span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> dep_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> employee <span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> dep_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> employee <span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> dep_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'王五'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> employee <span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> dep_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'老王'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> employee <span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> dep_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'大王'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> employee <span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> dep_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'小王'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> employee<span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p><strong>问题</strong>：当我们在 employee 的 dep_id<br/> 里面输入不存在的部门,数据依然可以添加.但是并没有对应的部门，实际应用中不能出现这种情况。employee 的 dep_id 中的数据只能是<br/> department 表中存在的 id</p>\n<p><strong>目标</strong>: 需要约束 dep_id 只能是 department 表中已经存在 id</p>\n<p><strong>解决方式</strong>: 使用外键约束</p>\n</blockquote>\n<p>什么是外键约束:</p>\n<p>什么是外键：在从表中与主表主键对应的那一列，如：员工表中的 dep_id<br/> 主表： 一方，用来约束别人的表<br/> 从表： 多方，被别人约束的表</p>\n<p>创建约束的语法：<br/> 1、新建表时增加外键：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token punctuation\">[</span><span class=\"token keyword\">CONSTRAINT</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>外键约束名称<span class=\"token punctuation\">]</span> <span class=\"token keyword\">FOREIGN</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">(</span>外键字段名<span class=\"token punctuation\">)</span> <span class=\"token keyword\">REFERENCES</span> 主表名<span class=\"token punctuation\">(</span>主键字段名<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>2、已有表增加外键：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 从表 <span class=\"token keyword\">ADD</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">CONSTRAINT</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>外键约束名称<span class=\"token punctuation\">]</span> <span class=\"token keyword\">FOREIGN</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>外键字段名<span class=\"token punctuation\">)</span> <span class=\"token keyword\">REFERENCES</span> 主表<span class=\"token punctuation\">(</span>主键字段名<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>案例：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 1) 删除副表/从表 employee</span>\n<span class=\"token keyword\">drop</span> <span class=\"token keyword\">table</span> employee<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 2) 创建从表 employee 并添加外键约束 emp_depid_fk</span>\n<span class=\"token comment\">-- 多方，从表</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> employee<span class=\"token punctuation\">(</span>\nid <span class=\"token keyword\">int</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span>\nname <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\nage <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>\ndep_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 外键对应主表的主键</span>\n<span class=\"token comment\">-- 创建外键约束</span>\n<span class=\"token keyword\">constraint</span> emp_depid_fk <span class=\"token keyword\">foreign</span> <span class=\"token keyword\">key</span> <span class=\"token punctuation\">(</span>dep_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">references</span> department<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- 3) 正常添加数据</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> employee <span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> dep_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> employee <span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> dep_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> employee <span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> dep_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'王五'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> employee <span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> dep_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'老王'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> employee <span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> dep_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'大王'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> employee <span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> dep_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'小王'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> employee<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 4) 部门错误的数据添加失败</span>\n<span class=\"token comment\">-- 插入不存在的部门</span>\n<span class=\"token comment\">-- Cannot add or update a child row: a foreign key constraint fails</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> employee <span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> dep_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'老张'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>删除外键:</p>\n<p>语法：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 从表 <span class=\"token keyword\">drop</span> <span class=\"token keyword\">foreign</span> <span class=\"token keyword\">key</span> 外键名称<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>案例：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 删除 employee 表的 emp_depid_fk 外键</span>\n<span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> employee <span class=\"token keyword\">drop</span> <span class=\"token keyword\">foreign</span> <span class=\"token keyword\">key</span> emp_depid_fk<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 在 employee 表情存在的情况下添加外键</span>\n<span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> employee <span class=\"token keyword\">add</span> <span class=\"token keyword\">constraint</span> emp_depid_fk\n<span class=\"token keyword\">foreign</span> <span class=\"token keyword\">key</span> <span class=\"token punctuation\">(</span>dep_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">references</span> department<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>外键的级联：</strong><br/> 出现新的问题</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> employee<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> department<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 要把部门表中的 id 值 2，改成 5，能不能直接更新呢？</span>\n<span class=\"token comment\">-- Cannot delete or update a parent row: a foreign key constraint fails</span>\n<span class=\"token keyword\">update</span> department <span class=\"token keyword\">set</span> id<span class=\"token operator\">=</span><span class=\"token number\">5</span> <span class=\"token keyword\">where</span> id<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 要删除部门 id 等于 1 的部门, 能不能直接删除呢？</span>\n<span class=\"token comment\">-- Cannot delete or update a parent row: a foreign key constraint fails</span>\n<span class=\"token keyword\">delete</span> <span class=\"token keyword\">from</span> department <span class=\"token keyword\">where</span> id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>什么是级联操作：<br/> 在修改和删除主表的主键时，同时更新或删除副表的外键值，称为级联操作。</p>\n<table><thead><tr><th>级联操作语法</th><th>描述</th></tr></thead><tbody><tr><td>ON UPDATE CASCADE</td><td>级联更新，只能是创建表的时候创建级联关系。更新主表中的主键，从表中的外键列也自动同步更新</td></tr><tr><td>ON DELETE CASCADE</td><td>级联删除</td></tr></tbody></table>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 删除 employee 表，重新创建 employee 表，添加级联更新和级联删除</span>\n<span class=\"token keyword\">drop</span> <span class=\"token keyword\">table</span> employee<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> employee<span class=\"token punctuation\">(</span>\nid <span class=\"token keyword\">int</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span>\nname <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\nage <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>\ndep_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 外键对应主表的主键</span>\n<span class=\"token comment\">-- 创建外键约束</span>\n<span class=\"token keyword\">constraint</span> emp_depid_fk <span class=\"token keyword\">foreign</span> <span class=\"token keyword\">key</span> <span class=\"token punctuation\">(</span>dep_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">references</span>\n department<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">update</span> <span class=\"token keyword\">cascade</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">delete</span> <span class=\"token keyword\">cascade</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- 再次添加数据到员工表和部门表</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> employee <span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> dep_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> employee <span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> dep_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> employee <span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> dep_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'王五'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> employee <span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> dep_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'老王'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> employee <span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> dep_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'大王'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> employee <span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> dep_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'小王'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 删除部门表？能不能直接删除？</span>\n<span class=\"token keyword\">drop</span> <span class=\"token keyword\">table</span> department<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 把部门表中 id 等于 1 的部门改成 id 等于 10</span>\n<span class=\"token keyword\">update</span> department <span class=\"token keyword\">set</span> id<span class=\"token operator\">=</span><span class=\"token number\">10</span> <span class=\"token keyword\">where</span> id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> employee<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> department<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 删除部门号是 2 的部门</span>\n<span class=\"token keyword\">delete</span> <span class=\"token keyword\">from</span> department <span class=\"token keyword\">where</span> id<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>数据约束小结：</p>\n<table><thead><tr><th>约束名</th><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>主键</td><td>primary key</td><td>1、唯一 2、非空</td></tr><tr><td>默认</td><td>default</td><td>如果一列没有值，使用默认值</td></tr><tr><td>非空</td><td>not null</td><td>这一列必须有值</td></tr><tr><td>唯一</td><td>unique</td><td>这一列不能有重复值</td></tr><tr><td>外键</td><td>foreign key</td><td>主表中主键列，在从表中外键列</td></tr></tbody></table>\n<h2><a id=\"_1385\"></a>表与表之间的关系</h2>\n<h3><a id=\"_1386\"></a>表关系的概念</h3>\n<p>现实生活中，实体与实体之间肯定是有关系的，比如：老公和老婆，部门和员工，老师和学生等。那么我们在设计表的时候，就应该体现出表与表之间的这种关系！</p>\n<p>表与表之间的三种关系</p>\n<ol><li>一对多：最常用的关系 部门和员工</li><li>多对多：学生选课表 和 学生表， 一门课程可以有多个学生选择，一个学生选择多门课程</li><li>一对一：相对使用比较少。员工表 简历表， 公民表 护照表</li></ol>\n<h3><a id=\"_1394\"></a>一对多</h3>\n<p>一对多（1:n） 例如：班级和学生，部门和员工，客户和订单，分类和商品<br/> 一对多建表原则: 在从表(多方)创建一个字段,字段作为外键指向主表(一方)的主键.</p>\n<h3><a id=\"_1398\"></a>多对多</h3>\n<p>多对多（m:n） 例如：老师和学生，学生和课程，用户和角色<br/> 多对多关系建表原则: 需要创建第三张表，中间表中至少两个字段，这两个字段分别作为外键指向各自一方的主键。</p>\n<h3><a id=\"_1403\"></a>一对一</h3>\n<p>一对一（1:1） 在实际的开发中应用不多.因为一对一可以创建成一张表。<br/> 两种建表原则：</p>\n<table><thead><tr><th>一对一的建表原则</th><th>说明</th></tr></thead><tbody><tr><td>外键唯一</td><td>主表的主键和从表的外键（唯一），形成主外键关系，外键唯一 UNIQUE</td></tr><tr><td>外键是主键</td><td>主表的主键和从表的主键，形成主外键关系</td></tr></tbody></table>\n<h2><a id=\"_1414\"></a>数据库设计</h2>\n<h3><a id=\"_1415\"></a>数据规范化</h3>\n<p>什么是范式：<br/> 好的数据库设计对数据的存储性能和后期的程序开发，都会产生重要的影响。建立科学的，规范的数据库就需要满足一些规则来优化数据的设计和存储，这些规则就称为范式。</p>\n<p><strong>三大范式</strong>：<br/> 目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。<br/> 满足最低要求的范式是第一范式（1NF）。在第一范式的基础上进一步满足更多规范要求的称为第二范式（2NF），其余范式以次类推。一般说来，数据库只需满足第三范式(3NF）就行了。</p>\n<h3><a id=\"1NF_1425\"></a>1NF</h3>\n<p>概念：<br/> 数据库表的每一列都是不可分割的原子数据项，不能是集合、数组等非原子数据项。即表中的某个列有多个值时，必须拆分为不同的列。简而言之，第一范式每一列不可再拆分，称为原子性。</p>\n<p>学生课程表：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d79cae53406a4389904d9eab70c328ea.png\"/><br/> 存在的问题：<br/> 1.存在非常严重的数据冗余(重复)：姓名、系名、系主任<br/> 2.数据添加存在问题：添加新开设的系和系主任时，数据不合法<br/> 3.数据删除存在问题：张无忌同学毕业了，删除数据，会将系的数据一起删除。</p>\n<h3><a id=\"2NF_1437\"></a>2NF</h3>\n<p>概念：<br/> 在满足第一范式的前提下，表中的每一个字段都完全依赖于主键。<br/> 所谓完全依赖是指不能存在仅依赖主键一部分的列。简而言之，第二范式就是在第一范式的基础上所有列完全依赖于主键列。当存在一个复合主键包含多个主键列的时候，才会发生不符合第二范式的情况。比如有一个主键有两个列，不能存在这样的属性，它只依赖于其中一个列，这就是不符合第二范式。<br/> 第二范式的特点：</p>\n<ol><li>一张表只描述一件事情。</li><li>表中的每一列都完全依赖于主键</li></ol>\n<p>学生课程表：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5fd54d37720f4b6997a31fe0f5a5994e.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\274be5a2a665438e8d1214d2620a92fb.png\"/></p>\n<p>存在的问题：<br/> 1.（已经被解决）<br/> 2.数据添加存在问题：添加新开设的系和系主任时，数据不合法<br/> 3.数据删除存在问题：张无忌同学毕业了，删除数据，会将系的数据一起删除。</p>\n<h3><a id=\"3NF_1477\"></a>3NF</h3>\n<p>概念：<br/> 在满足第二范式的前提下，表中的每一列都直接依赖于主键，而不是通过其它的列来间接依赖于主键。<br/> 简而言之，第三范式就是所有列不依赖于其它非主键列，也就是在满足 2NF 的基础上，任何非主列不得传递依赖于主键。所谓传递依赖，指的是如果存在\"A → B → C\"的决定关系，则 C 传递依赖于 A。因此，满足第三范<br/> 式的数据库表应该不存在如下依赖关系：主键列 → 非主键列 x → 非主键列 y</p>\n<p>学生信息表：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\75e9f1a0e43543f1b246c9f2ad6a1f20.png\"/></p>\n<h3><a id=\"_1499\"></a>三大范式小结</h3>\n<table><thead><tr><th>范式</th><th>特点</th></tr></thead><tbody><tr><td>1NF</td><td>原子性：表中每列不可再拆分。</td></tr><tr><td>2NF</td><td>不产生局部依赖，一张表只描述一件事情</td></tr><tr><td>3NF</td><td>不产生传递依赖，表中每一列都直接依赖于主键。而不是通过其它列间接依赖于主键。</td></tr></tbody></table>\n<h1><a id=\"MySQL__1508\"></a>MySQL 多表查询与事务的操作</h1>\n<h2><a id=\"_1509\"></a>表连接查询</h2>\n<h3><a id=\"_1510\"></a>什么是多表查询</h3>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\"># 创建部门表</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> dept<span class=\"token punctuation\">(</span>\n id <span class=\"token keyword\">int</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span>\n name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> dept <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'开发部'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">'市场部'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">'财务部'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\"># 创建员工表</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> emp <span class=\"token punctuation\">(</span>\n id <span class=\"token keyword\">int</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span>\n name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n gender <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 性别</span>\n salary <span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 工资</span>\n join_date <span class=\"token keyword\">date</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 入职日期</span>\n dept_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>\n <span class=\"token keyword\">foreign</span> <span class=\"token keyword\">key</span> <span class=\"token punctuation\">(</span>dept_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">references</span> dept<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 外键，关联部门表(部门表的主键) ) </span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> emp<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>gender<span class=\"token punctuation\">,</span>salary<span class=\"token punctuation\">,</span>join_date<span class=\"token punctuation\">,</span>dept_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'孙悟空'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'男\n'</span><span class=\"token punctuation\">,</span><span class=\"token number\">7200</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2013-02-24'</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> emp<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>gender<span class=\"token punctuation\">,</span>salary<span class=\"token punctuation\">,</span>join_date<span class=\"token punctuation\">,</span>dept_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'猪八戒'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'男\n'</span><span class=\"token punctuation\">,</span><span class=\"token number\">3600</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2010-12-02'</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> emp<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>gender<span class=\"token punctuation\">,</span>salary<span class=\"token punctuation\">,</span>join_date<span class=\"token punctuation\">,</span>dept_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'唐僧'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span><span class=\"token number\">9000</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2008-\n08-08'</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> emp<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>gender<span class=\"token punctuation\">,</span>salary<span class=\"token punctuation\">,</span>join_date<span class=\"token punctuation\">,</span>dept_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'白骨精'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'女\n'</span><span class=\"token punctuation\">,</span><span class=\"token number\">5000</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2015-10-07'</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> emp<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>gender<span class=\"token punctuation\">,</span>salary<span class=\"token punctuation\">,</span>join_date<span class=\"token punctuation\">,</span>dept_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'蜘蛛精'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'女\n'</span><span class=\"token punctuation\">,</span><span class=\"token number\">4500</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2011-03-14'</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>多表查询的作用：<br/> 比如：我们想查询孙悟空的名字和他所在的部门的名字，则需要使用多表查询。<br/> 如果一条 SQL 语句查询多张表，因为查询结果在多张不同的表中。每张表取 1 列或多列。</p>\n<p><strong>笛卡尔积</strong>：</p>\n<ol><li>有两个集合A,B .取这两个集合的所有组成情况。</li><li>要完成多表查询，需要消除无用的数据</li></ol>\n<p>多表查询的分类:</p>\n<h3><a id=\"_1551\"></a>内连接查询</h3>\n<ol><li>隐式内连接：使用where条件消除无用数据<br/> 例子：</li></ol>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 查询所有员工信息和对应的部门信息</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp<span class=\"token punctuation\">,</span>dept <span class=\"token keyword\">WHERE</span> emp<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>dept_id<span class=\"token punctuation\">`</span> <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 查询员工表的名称，性别。部门表的名称</span>\n<span class=\"token keyword\">SELECT</span> emp<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>emp<span class=\"token punctuation\">.</span>gender<span class=\"token punctuation\">,</span>dept<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">FROM</span> emp<span class=\"token punctuation\">,</span>dept <span class=\"token keyword\">WHERE</span> emp<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>dept_id<span class=\"token punctuation\">`</span> <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\n<span class=\"token keyword\">SELECT</span> \n\t\tt1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 员工表的姓名</span>\n\t\tt1<span class=\"token punctuation\">.</span>gender<span class=\"token punctuation\">,</span><span class=\"token comment\">-- 员工表的性别</span>\n\t\tt2<span class=\"token punctuation\">.</span>name <span class=\"token comment\">-- 部门表的名称</span>\n<span class=\"token keyword\">FROM</span>\n\t\temp t1<span class=\"token punctuation\">,</span>\n\t\tdept t2\n<span class=\"token keyword\">WHERE</span> \n\t\tt1<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>dept_id<span class=\"token punctuation\">`</span> <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ol start=\"2\"><li>显式内连接：<br/> 语法： select 字段列表 from 表名1 [inner] join 表名2 on 条件<br/> 例如：</li></ol>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> dept <span class=\"token keyword\">ON</span> emp<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>dept_id<span class=\"token punctuation\">`</span> <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">;</span>\t\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">JOIN</span> dept <span class=\"token keyword\">ON</span> emp<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>dept_id<span class=\"token punctuation\">`</span> <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">;</span>\t\n</code></pre>\n<ol start=\"3\"><li>内连接查询：<br/> 1. 从哪些表中查询数据<br/> 2. 条件是什么<br/> 3. 查询哪些字段</li></ol>\n<h3><a id=\"_1588\"></a>外链接查询</h3>\n<ol><li>左外连接：<br/> 语法：</li></ol>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">select</span> 字段列表 <span class=\"token keyword\">from</span> 表<span class=\"token number\">1</span> <span class=\"token keyword\">left</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">outer</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">join</span> 表<span class=\"token number\">2</span> <span class=\"token keyword\">on</span> 条件；\n</code></pre>\n<p>查询的是左表所有数据以及其交集部分。</p>\n<p>例子：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 查询所有员工信息，如果员工有部门，则查询部门名称，没有部门，则不显示部门名称</span>\n<span class=\"token keyword\">SELECT</span> \tt1<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>t2<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span> <span class=\"token keyword\">FROM</span> emp t1 <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> dept t2 <span class=\"token keyword\">ON</span> t1<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>dept_id<span class=\"token punctuation\">`</span> <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ol start=\"2\"><li>右外连接：<br/> 语法：select 字段列表 from 表1 right [outer] join 表2 on 条件；<br/> 查询的是右表所有数据以及其交集部分。<br/> 例子：</li></ol>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SELECT</span> \t<span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> dept t2 <span class=\"token keyword\">RIGHT</span> <span class=\"token keyword\">JOIN</span> emp t1 <span class=\"token keyword\">ON</span> t1<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>dept_id<span class=\"token punctuation\">`</span> <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_1612\"></a>子查询</h3>\n<p>概念：查询中嵌套查询，称嵌套查询为子查询。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 查询工资最高的员工信息</span>\n<span class=\"token comment\">-- 1 查询最高的工资是多少 9000</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> emp<span class=\"token punctuation\">;</span>\n\t\t\t\t\n<span class=\"token comment\">-- 2 查询员工信息，并且工资等于9000的</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> emp<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>salary<span class=\"token punctuation\">`</span> <span class=\"token operator\">=</span> <span class=\"token number\">9000</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\n<span class=\"token comment\">-- 一条sql就完成这个操作。子查询</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> emp<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>salary<span class=\"token punctuation\">`</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> emp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>子查询不同情况</strong><br/> 1. 子查询的结果是单行单列的：<br/> 子查询可以作为条件，使用运算符去判断。 运算符： &gt; &gt;= &lt; &lt;= =</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 查询员工工资小于平均工资的人</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> emp<span class=\"token punctuation\">.</span>salary <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> emp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ol start=\"2\"><li>子查询的结果是多行单列的：<br/> 子查询可以作为条件，使用运算符in来判断</li></ol>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 查询'财务部'和'市场部'所有的员工信息</span>\n<span class=\"token keyword\">SELECT</span> id <span class=\"token keyword\">FROM</span> dept <span class=\"token keyword\">WHERE</span> NAME <span class=\"token operator\">=</span> <span class=\"token string\">'财务部'</span> <span class=\"token operator\">OR</span> NAME <span class=\"token operator\">=</span> <span class=\"token string\">'市场部'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> dept_id <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">OR</span> dept_id <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 子查询</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> dept_id <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> id <span class=\"token keyword\">FROM</span> dept <span class=\"token keyword\">WHERE</span> NAME <span class=\"token operator\">=</span> <span class=\"token string\">'财务部'</span> <span class=\"token operator\">OR</span> NAME <span class=\"token operator\">=</span> <span class=\"token string\">'市场部'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ol start=\"3\"><li>子查询的结果是多行多列的：<br/> 子查询可以作为一张虚拟表参与查询</li></ol>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 查询员工入职日期是2011-11-11日之后的员工信息和部门信息</span>\n<span class=\"token comment\">-- 子查询</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> dept t1 <span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> emp<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>join_date<span class=\"token punctuation\">`</span> <span class=\"token operator\">&gt;</span> <span class=\"token string\">'2011-11-11'</span><span class=\"token punctuation\">)</span> t2\n<span class=\"token keyword\">WHERE</span> t1<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">.</span>dept_id<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\n<span class=\"token comment\">-- 普通内连接</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp t1<span class=\"token punctuation\">,</span>dept t2 <span class=\"token keyword\">WHERE</span> t1<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>dept_id<span class=\"token punctuation\">`</span> <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span> <span class=\"token operator\">AND</span> t1<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>join_date<span class=\"token punctuation\">`</span> <span class=\"token operator\">&gt;</span>  <span class=\"token string\">'2011-11-11'</span>\n</code></pre>\n<h2><a id=\"_1662\"></a>事务</h2>\n<h3><a id=\"_1663\"></a>事务的基本介绍</h3>\n<ol><li> <p>概念：<br/> 如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败。</p> </li><li> <p>操作：</p> </li></ol>\n<blockquote>\n<ol><li>开启事务： start transaction;<br/> 2. 回滚：rollback;<br/> 3. 提交：commit;</li></ol>\n</blockquote>\n<ol start=\"3\"><li>例子：</li></ol>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> account <span class=\"token punctuation\">(</span>\n\t\t\tid <span class=\"token keyword\">INT</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span>\n\t\t\tNAME <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\tbalance <span class=\"token keyword\">DOUBLE</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 添加数据</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> account <span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">,</span> balance<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'zhangsan'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'lisi'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> account<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">UPDATE</span> account <span class=\"token keyword\">SET</span> balance <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 张三给李四转账 500 元</span>\n\t\t\t\n<span class=\"token comment\">-- 0. 开启事务</span>\n<span class=\"token keyword\">START</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 1. 张三账户 -500</span>\n\t\t\t\n<span class=\"token keyword\">UPDATE</span> account <span class=\"token keyword\">SET</span> balance <span class=\"token operator\">=</span> balance <span class=\"token operator\">-</span> <span class=\"token number\">500</span> <span class=\"token keyword\">WHERE</span> NAME <span class=\"token operator\">=</span> <span class=\"token string\">'zhangsan'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 2. 李四账户 +500</span>\n<span class=\"token comment\">-- 出错了...</span>\n<span class=\"token keyword\">UPDATE</span> account <span class=\"token keyword\">SET</span> balance <span class=\"token operator\">=</span> balance <span class=\"token operator\">+</span> <span class=\"token number\">500</span> <span class=\"token keyword\">WHERE</span> NAME <span class=\"token operator\">=</span> <span class=\"token string\">'lisi'</span><span class=\"token punctuation\">;</span>\n\t\t\t\n<span class=\"token comment\">-- 发现执行没有问题，提交事务</span>\n<span class=\"token keyword\">COMMIT</span><span class=\"token punctuation\">;</span>\n\t\t\t\n<span class=\"token comment\">-- 发现出问题了，回滚事务</span>\n<span class=\"token keyword\">ROLLBACK</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ol start=\"4\"><li> <p>MySQL数据库中事务默认自动提交</p> <p>事务提交的两种方式：<br/> 1、自动提交：<br/> mysql就是自动提交的<br/> 一条DML(增删改)语句会自动提交一次事务。<br/> 2、手动提交：<br/> Oracle 数据库默认是手动提交事务<br/> 需要先开启事务，再提交</p> </li></ol>\n<p>修改事务的默认提交方式：<br/> 1、查看事务的默认提交方式：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SELECT</span> @<span class=\"token variable\">@autocommit</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 1 代表自动提交  0 代表手动提交</span>\n</code></pre>\n<p>2、 修改默认提交方式：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">set</span> @<span class=\"token variable\">@autocommit</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_1739\"></a>事务的四大特征</h3>\n<pre><code>\t1. 原子性：是不可分割的最小操作单位，要么同时成功，要么同时失败。\n\t2. 持久性：当事务提交或回滚后，数据库会持久化的保存数据。\n\t3. 隔离性：多个事务之间。相互独立。\n\t4. 一致性：事务操作前后，数据总量不变\n</code></pre>\n<h3><a id=\"_1749\"></a>事务的隔离级别</h3>\n<p>概念：多个事务之间隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。</p>\n<p>存在问题：<br/> 1. 脏读：一个事务，读取到另一个事务中没有提交的数据<br/> 2. 不可重复读(虚读)：在同一个事务中，两次读取到的数据不一样。<br/> 3. 幻读：一个事务操作(DML)数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改。</p>\n<p>隔离级别：<br/> 1. read uncommitted：读未提交<br/> 产生的问题：脏读、不可重复读、幻读<br/> 2. read committed：读已提交 （Oracle）<br/> 产生的问题：不可重复读、幻读<br/> 3. repeatable read：可重复读 （MySQL默认）<br/> 产生的问题：幻读<br/> 4. serializable：串行化<br/> 可以解决所有的问题</p>\n<p>注意：隔离级别从小到大安全性越来越高，但是效率越来越低<br/> 数据库查询隔离级别：<br/> select @@tx_isolation;<br/> 数据库设置隔离级别：<br/> set global transaction isolation level 级别字符串;</p>\n<p>案例：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">set</span> <span class=\"token keyword\">global</span> <span class=\"token keyword\">transaction</span> <span class=\"token keyword\">isolation</span> <span class=\"token keyword\">level</span> <span class=\"token keyword\">read</span> <span class=\"token keyword\">uncommitted</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">start</span> <span class=\"token keyword\">transaction</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 转账操作</span>\n<span class=\"token keyword\">update</span> account <span class=\"token keyword\">set</span> balance <span class=\"token operator\">=</span> balance <span class=\"token operator\">-</span> <span class=\"token number\">500</span> <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">update</span> account <span class=\"token keyword\">set</span> balance <span class=\"token operator\">=</span> balance <span class=\"token operator\">+</span> <span class=\"token number\">500</span> <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"DCL_1785\"></a>DCL</h2>\n<p>DBA：数据库管理员</p>\n<p>DCL：管理用户，授权</p>\n<h3><a id=\"_1790\"></a>管理用户</h3>\n<p>1.添加用户：<br/> 语法：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">USER</span> <span class=\"token string\">'用户名'</span><span class=\"token variable\">@'主机名'</span> IDENTIFIED <span class=\"token keyword\">BY</span> <span class=\"token string\">'密码'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>2.删除用户：<br/> 语法：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">USER</span> <span class=\"token string\">'用户名'</span><span class=\"token variable\">@'主机名'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>3.修改用户密码：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">UPDATE</span> <span class=\"token keyword\">USER</span> <span class=\"token keyword\">SET</span> PASSWORD <span class=\"token operator\">=</span> PASSWORD<span class=\"token punctuation\">(</span><span class=\"token string\">'新密码'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">WHERE</span> <span class=\"token keyword\">USER</span> <span class=\"token operator\">=</span> <span class=\"token string\">'用户名'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">UPDATE</span> <span class=\"token keyword\">USER</span> <span class=\"token keyword\">SET</span> PASSWORD <span class=\"token operator\">=</span> PASSWORD<span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">WHERE</span> <span class=\"token keyword\">USER</span> <span class=\"token operator\">=</span> <span class=\"token string\">'lisi'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SET</span> PASSWORD <span class=\"token keyword\">FOR</span> <span class=\"token string\">'用户名'</span><span class=\"token variable\">@'主机名'</span> <span class=\"token operator\">=</span> PASSWORD<span class=\"token punctuation\">(</span><span class=\"token string\">'新密码'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SET</span> PASSWORD <span class=\"token keyword\">FOR</span> <span class=\"token string\">'root'</span><span class=\"token variable\">@'localhost'</span> <span class=\"token operator\">=</span> PASSWORD<span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>mysql中忘记了root用户的密码？</p>\n<pre><code>\t\t\t\t1. cmd -- &gt; net stop mysql 停止mysql服务\n\t\t\t\t\t* 需要管理员运行该cmd\n\t\t\t\t2. 使用无验证方式启动mysql服务： mysqld --skip-grant-tables\n\t\t\t\t3. 打开新的cmd窗口,直接输入mysql命令，敲回车。就可以登录成功\n\t\t\t\t4. use mysql;\n\t\t\t\t5. update user set password = password('你的新密码') where user = 'root';\n\t\t\t\t6. 关闭两个窗口\n\t\t\t\t7. 打开任务管理器，手动结束mysqld.exe 的进程\n\t\t\t\t8. 启动mysql服务\n\t\t\t\t9. 使用新密码登录。\n</code></pre>\n<ol start=\"4\"><li> <p>查询用户：<br/> – 1. 切换到mysql数据库<br/> USE myql;<br/> – 2. 查询user表<br/> SELECT * FROM USER;</p> <pre><code> \t\t* 通配符： % 表示可以在任意主机使用用户登录数据库\n</code></pre> </li></ol>\n<h3><a id=\"_1837\"></a>权限管理</h3>\n<pre><code>\t\t1. 查询权限：\n</code></pre>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 查询权限</span>\n\t\t\t\t<span class=\"token keyword\">SHOW</span> GRANTS <span class=\"token keyword\">FOR</span> <span class=\"token string\">'用户名'</span><span class=\"token variable\">@'主机名'</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">SHOW</span> GRANTS <span class=\"token keyword\">FOR</span> <span class=\"token string\">'lisi'</span><span class=\"token variable\">@'%'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>2.授予权限：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 授予权限</span>\n<span class=\"token keyword\">grant</span> 权限列表 <span class=\"token keyword\">on</span> 数据库名<span class=\"token punctuation\">.</span>表名 <span class=\"token keyword\">to</span> <span class=\"token string\">'用户名'</span><span class=\"token variable\">@'主机名'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 给张三用户授予所有权限，在任意数据库任意表上</span>\n<span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">ON</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">TO</span> <span class=\"token string\">'zhangsan'</span><span class=\"token variable\">@'localhost'</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>3.撤销权限：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 撤销权限：</span>\n<span class=\"token keyword\">revoke</span> 权限列表 <span class=\"token keyword\">on</span> 数据库名<span class=\"token punctuation\">.</span>表名 <span class=\"token keyword\">from</span> <span class=\"token string\">'用户名'</span><span class=\"token variable\">@'主机名'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">REVOKE</span> <span class=\"token keyword\">UPDATE</span> <span class=\"token keyword\">ON</span> db3<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>account<span class=\"token punctuation\">`</span> <span class=\"token keyword\">FROM</span> <span class=\"token string\">'lisi'</span><span class=\"token variable\">@'%'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2021-08-23 15:51:55", "summary": "文章目录基础数据库的介绍数据库概述数据的存储方式数据库的概念常见数据库排行榜数据库的安装与卸载数据库的安装数据库的卸载数据库服务的启动与登录服务方式启动命令方式启动控制台连接数据库图形化工具客户端使用"}