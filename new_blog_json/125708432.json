{"blogid": "125708432", "writerAge": "码龄14年", "writerBlogNum": "10", "writerCollect": "2", "writerComment": "0", "writerFan": "9", "writerGrade": "2级", "writerIntegral": "112", "writerName": "解决方案专家", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125708432.jpg", "writerRankTotal": "101422", "writerRankWeekly": "103611", "writerThumb": "0", "writerVisitNum": "3014", "blog_read_count": "1052", "blog_time": "于 2022-07-10 17:49:32 发布", "blog_title": "C#项目实战WebApi框架搭建以及部署WebApi服务器的几种方式", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>1. Api接口的定义：<br/> API应用程序编程接口是一些预先定义的接口，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。<br/> 操作系统想了一个很好的办法，它预先把这些复杂的操作写在一个函数里面，编译成一个组件（一般是动态链接库），随操作系统一起发布，并配上说明文档，程序员只需要简单地调用这些函数就可以完成复杂的工作，让编程变得简单有趣。这些封装好的函数，就叫做API(Application Programming Interface)，即应用程序编程接口。简单的来说，就是别人写好的代码，或者编译好的程序，封装成标准接口服务，提供给你使用， 就叫做API。使用了别人代码服务（或者程序）中的某个函数、类、对象，就叫做API接口调用。<br/>  <br/> 2. WebApi的定义：<br/> Web: 网站网页。<br/> Api: 接口，应用程序编程接口，开发人员封装的属性和方法。<br/> WebAPI: 提供给不同客户端（跨平台客户端）调用网页的应用程序编程接口。<br/> Web API，一般指基于HTTP协议的编程接口，接口一般定义为HTTP或HTTPS：请求方法、请求路径、参数、响应数据格式、响应HTTP Code等。至于HTTP Server，可以用Java、.Net、Nodejs等各种框架实现，Http Server属于Web API的实现，有时候也会指Web Service接口。<br/>  <br/> 3. 使用WebAPI的场景与前景：<br/> Web API最重要的是可以构建面向各种客户端的服务。另外与WCF REST Service不同在于，Web API利用Http协议的各个方面来表达服务，例如：URI/Request/Content Format，因此就省掉很多配置。<br/> MSFramework.WebApi服务端开发框架应用<br/>  <img alt=\"\" height=\"168\" src=\"..\\..\\static\\image\\7605845c0d2d431a884a6d8918a79ee8.png\" width=\"421\"/></p>\n<p>                                 HTTP://POST和Get 以及Response</p>\n<p><img alt=\"\" height=\"250\" src=\"..\\..\\static\\image\\3dc1120b5e644e469a17899f5244cc55.png\" width=\"566\"/><br/> 4. WebAPI功能：<br/> 支持基于Http Verb (GET, POST, PUT, DELETE)的CRUD (create, retrieve, update, delete)操作<br/> 通过不同的http动作表达不同的含义，这样就不需要暴露多个API来支持这些基本操作。<br/> 请求的回复通过Http Status Code表达不同含义，并且客户端可以通过Accept Header来与服务器协商格式，例如你希望服务器返回JSON格式还是XML格式。 <br/> 请求的回复格式支持 JSON，XML，并且可以扩展添加其他格式。WebApi服务器支持Self-Hosting、IIS服务以及Windows Service Hosting三种承载服务方式。<br/> 支持大多数MVC功能，例如Routing/Controller/Action Result/Dependency Injection。<br/>  <br/>  <br/>  <br/> 5. WebAPI接口搭建三种承载(Hosting)方式<br/> A、C# ASP.NET WebApi服务器搭建详解 - IIS服务承载（IIS 服务）<br/> B、C# ASP.NET WebApi服务器搭建详解 - 自承载（Self Hosting） <br/> C、C# ASP.NET WebApi服务器搭建详解 - Win服务承载（Windows Service 服务）<br/>  <br/> 6. WebAPI服务器部署，Self Hosting + IIS服务 + Win服务 <br/> 6.1 部署Self Hosting WebApi服务 <br/> 将MSFramework.WebAPI.Demo.SelfHosting项目设为启动项目，直接运行即可。<br/> MSFramework.WebAPI.Demo.SelfHosting项目是个可以直接运行的控制台应用程序。<br/>  <img alt=\"\" height=\"65\" src=\"..\\..\\static\\image\\aa8458e2b57c49ac866335a8abe3d858.png\" width=\"460\"/><br/> 贴图图片-ASPNETWebApi服务器搭建详解部署selfhosting服务<br/>  <br/>  <br/> 6.2 部署IIS承载的WebApi服务 <br/> 在MSFramework.WebAPI.Demo.IISHosting项目点右键【发布】，弹出发布Web对话框，Publish method 选择【File System】文件系统。<br/> ASPNETWebApi服务器搭建详解部署IIS服务<br/>  <br/> 发布文件到一个目录，将目录文件部署到IIS服务器，参考下文。<br/>   <img alt=\"\" height=\"194\" src=\"..\\..\\static\\image\\9fa5b992e1b44e78b959871e83744759.png\" width=\"413\"/><br/>  <br/> 6.3 部署Windows服务承载的WebApi服务器 <br/> 在debug目录下建立一个用于安装win服务的批处理命令程序，如：_安装服务.bat，以管理员身份运行即可安装。<br/>  _安装服务.bat<br/> dos command:<br/> path c:\\windows\\system32;<br/> path %SystemRoot%\\Microsoft.NET\\Framework\\v4.0.30319;<br/> echo \"开始卸载服务***************************\"<br/> installutil.exe /u %~d0%~p0MSFramework.WebAPI.Demo.WinServiceHosting.exe<br/> echo \"开始安装服务**************************\"<br/> installutil.exe %~d0%~p0MSFramework.WebAPI.Demo.WinServiceHosting.exe<br/> echo \"设置服务自动启动*********************\"<br/> sc config MSFramework.WebAPI.Demo.WinServiceHosting start= auto<br/> Net Start MSFramework.WebAPI.Demo.WinServiceHosting<br/> pause;</p>\n<p> </p>\n<p> </p>\n<p>ASPNETWebApi服务器搭建详解win服务承载108<br/>  <br/>  <br/> 安装完成，打开Windows服务管理器，查看服务状态。<br/>  <br/>  <br/> ASPNETWebApi服务器搭建详解win服务承载109<br/>  <br/>  <br/> C# ASP.NET WebApi服务器搭建详解 - Win服务承载（Windows Service 服务）<br/>  <br/>  <br/>  <br/>  <br/> .NET WebApi开发框架|MVC框架|后端框架|服务端框架-标准版V1.0<br/>  <br/> 适用开发 适用开发：快速构建支持多种客户端的服务端程序，支持APP、B/S、C/S跨平台移动终端等。<br/> 运行平台 运行平台：Windows + .NET Framework 4.5+.NetCore3.1<br/> 开发工具 开发工具：Visual Studio 2019+，C#语言<br/> 数据库 数据库：Microsoft SQLServer 2016+(支持多数据库：Oracle/MySql)</p>\n<p>WebApi服务端开发框架<br/>  <br/>  <br/>  <br/> 7. MSFramework.WebAPI服务端开发框架专业版V1.0 《体系架构图》 <br/> WebApi服务端开发框架-架构图<br/>  <br/>  MSFramework.WebApi 封装多个通用功能，为搭建Web服务端软件提供强大的技术支持。 客户端请求以命令形式传递到服务端的API接口，命令也就是请求的数据包，包含有请求编号、数据签名以及提交的业务数据。服务端接收到请求，首先要进行数据格式分析以及安全检查，比如数据签名、用户令牌或用户账号信息等。检查通过后，系统自动将请求传递到命令处理处理程序，系统将拒绝非法请求，抛出异常或返回错误回应信息给客户端。<br/>  命令处理层即业务逻辑层，主要负责数据校验和提取业务数据，将Request的数据（JSON或XML）文本内容转换为实体对象，最后传递到数据访问层提交到数据库。 数据访问层是整个逻辑处理的最后一个流程，负责将数据模型持久化到数据库。数据层使用开发框架内置的数据更新机制，根据表结构模型自动生成SQL脚本，无论是提交单条或批量数据，无需手工编写SQL脚本，系统自动实现数据的持久化。框架支持其他数据模型，如Entity Framework等。 <br/>  <br/> 8. MSFramework.WebAPI服务端开发框架成功案例<br/> C#.NET webapi开发框架成功案例-管家APP项目：<br/> C#.NET webapi开发框架成功案例-TMS系统APP项目<br/> MSFramework webapi服务端框架成功案例-银行底层支付系统+收银助手客户端<br/> MSFramework webapi服务端框架开发微信支付接口成功案例<br/> webapi开发框架成功案例：车货匹配类微信小程序<br/> webapi服务端开发框架成功案例-对接三方支付平台连连支付C#.NET<br/> C#.NET webapi开发框架成功案例-物流行业TMS系统+APP+微信小程序<br/> C#.NET webapi开发框架成功案例-物流行业系统对接卡车系统<br/> webapi开发框架应用电商微信小程序成功案例</p>\n</div>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-07-10 17:49:32", "summary": "接口的定义：应用程序编程接口是一些预先定义的接口，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。操作系统想了一个很好的办法，它预先把这"}