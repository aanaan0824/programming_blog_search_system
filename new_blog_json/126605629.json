{"blogid": "126605629", "writerAge": "码龄6年", "writerBlogNum": "129", "writerCollect": "208", "writerComment": "104", "writerFan": "15", "writerGrade": "5级", "writerIntegral": "1673", "writerName": "CaptainCats", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126605629.jpg", "writerRankTotal": "12252", "writerRankWeekly": "10017", "writerThumb": "80", "writerVisitNum": "99808", "blog_read_count": "320", "blog_time": "已于 2022-09-02 08:53:30 修改", "blog_title": "晦涩难懂的hashmap源代码-put方法解析", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>晦涩难懂的hashmap源代码-put方法解析</h3>\n<ul><li><a href=\"#_7\">底层数组</a></li><li><a href=\"#hash_14\">hash冲突</a></li><li><a href=\"#_17\">链表节点</a></li><li><a href=\"#_28\">红黑树</a></li><li><a href=\"#_34\">计算数组下标</a></li><li><a href=\"#put_79\">put源代码</a></li></ul>\n</div>\n<br/> 在我的分类专栏’hash’中，有关于位运算、hash计算、红黑树的文章，\n<br/> 如果这些还不太了解，可以去看看：\n<a href=\"https://blog.csdn.net/qq_35549286/category_11954065.html?spm=1001.2014.3001.5482\">hash</a>。\n<p></p>\n<p>jdk版本：jdk1.8.0_171。</p>\n<p>hashmap是用于key-value键值对处理的数据类型。</p>\n<h1><a id=\"_7\"></a>底层数组</h1>\n<p>hashmap底层是一个数组，<br/> 数组的特点是随机访问的效率高。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\965e04e0897b4bc2b0ef41cdf13c7775.png\"/><br/> hashmap通过散列函数将key转换为索引，即数组下标，<br/> 来确定元素在数组中的存放位置。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bd142a0587a741929c24a62df0d2f41e.png\"/></p>\n<h1><a id=\"hash_14\"></a>hash冲突</h1>\n<p>散列函数计算得到的hash值，可能会存在重复的情况，<br/> 这个时候该怎么办呢？</p>\n<h1><a id=\"_17\"></a>链表节点</h1>\n<p>什么是链表节点？就是下图这样子：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7f79ccb511aa42a290cedfdbecb8af81.png\"/><br/> hashmap是一个数组，数组中存放的是链表节点node，也叫桶即bucket。</p>\n<p>put的时候，<br/> 会对key进行hash计算得到一个index，再根据index确定数组中的位置，<br/> 如果位置上已经有了元素，即hash冲突的时候，<br/> 就插入到该链表尾部节点的next引用上。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8ca447de4b7c445486b96888420a9747.png\"/></p>\n<h1><a id=\"_28\"></a>红黑树</h1>\n<p>如果在某个位置上的链表的长度超过了7，<br/> 会转换为红黑树。</p>\n<p>太长会影响查询效率。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\67f06f8e630842f08b91f008d58cd861.png\"/></p>\n<h1><a id=\"_34\"></a>计算数组下标</h1>\n<p>如何根据key计算数组下标？</p>\n<p>1、<br/> 得到扰动后的key的hashcode，h：<br/> (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);<br/> 将hashcode与hashcode&gt;&gt;&gt;16进行异或运算，<br/> hashcode&gt;&gt;&gt;16是为了将高低位的特征混合，实现更均匀的散列，减少碰撞的几率。</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * Computes key.hashCode() and spreads (XORs) higher bits of hash\n * to lower.  Because the table uses power-of-two masking, sets of\n * hashes that vary only in bits above the current mask will\n * always collide. (Among known examples are sets of Float keys\n * holding consecutive whole numbers in small tables.)  So we\n * apply a transform that spreads the impact of higher bits\n * downward. There is a tradeoff between speed, utility, and\n * quality of bit-spreading. Because many common sets of hashes\n * are already reasonably distributed (so don't benefit from\n * spreading), and because we use trees to handle large sets of\n * collisions in bins, we just XOR some shifted bits in the\n * cheapest possible way to reduce systematic lossage, as well as\n * to incorporate impact of the highest bits that would otherwise\n * never be used in index calculations because of table bounds.\n */</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> h<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>2、<br/> 取模：<br/> i = (n - 1) &amp; hash<br/> n是hashmap底层数组的长度，hash是上一步得到的h，<br/> ((n - 1) &amp; hash) = (hash % (n - 1))，前提需要n=2的x次方，<br/> 用位移运算是因为效率更高，<br/> 这也是为什么hashmap的容量必须得是2的幂。</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * The default initial capacity - MUST be a power of two.\n */</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> DEFAULT_INITIAL_CAPACITY <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// aka 16</span>\n\n</code></pre>\n<h1><a id=\"put_79\"></a>put源代码</h1>\n<p>都在注释里。</p>\n<p>put</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * Associates the specified value with the specified key in this map.\n * If the map previously contained a mapping for the key, the old\n * value is replaced.\n *\n * @param key key with which the specified value is to be associated\n * @param value value to be associated with the specified key\n * @return the previous value associated with &lt;tt&gt;key&lt;/tt&gt;, or\n *         &lt;tt&gt;null&lt;/tt&gt; if there was no mapping for &lt;tt&gt;key&lt;/tt&gt;.\n *         (A &lt;tt&gt;null&lt;/tt&gt; return can also indicate that the map\n *         previously associated &lt;tt&gt;null&lt;/tt&gt; with &lt;tt&gt;key&lt;/tt&gt;.)\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">putVal</span><span class=\"token punctuation\">(</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>返回null或被覆盖的value</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * Implements Map.put and related methods\n *\n * @param hash hash for key\n * @param key the key\n * @param value the value to put\n * @param onlyIfAbsent if true, don't change existing value\n * @param evict if false, the table is in creation mode.\n * @return previous value, or null if none\n */</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">V</span> <span class=\"token function\">putVal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> onlyIfAbsent<span class=\"token punctuation\">,</span>\n\t\t\t   <span class=\"token keyword\">boolean</span> evict<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab<span class=\"token punctuation\">;</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> p<span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// table如果为null、为空，则调用resize()扩容，这个table就是hashmap的底层数组。</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\tn <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tab <span class=\"token operator\">=</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 根据key计算得到的数组下标位置上没有元素，通过newNode创建一个Node放在这个位置上。</span>\n\t<span class=\"token comment\">// hash是(h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)扰动后的hashcode，(n - 1) &amp; hash]是取模。</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> hash<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\t\ttab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">newNode</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 下标上存在元素</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">// e：旧元素</span>\n\t\t<span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> e<span class=\"token punctuation\">;</span> <span class=\"token class-name\">K</span> k<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 旧元素hash等于新元素hash，且旧key等于新key。</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash <span class=\"token operator\">&amp;&amp;</span>\n\t\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token comment\">// 准备覆盖旧元素</span>\n\t\t\te <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 旧元素是树节点，添加树节点元素。</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">)</span>\n\t\t\te <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">putTreeVal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> tab<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 旧元素是链表节点</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> binCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>binCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token comment\">// 将新元素插入到链表尾部</span>\n\t\t\t\t\tp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token function\">newNode</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token comment\">// 链表长度超过了7，转换为红黑树。</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>binCount <span class=\"token operator\">&gt;=</span> TREEIFY_THRESHOLD <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -1 for 1st</span>\n\t\t\t\t\t\t<span class=\"token function\">treeifyBin</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash <span class=\"token operator\">&amp;&amp;</span>\n\t\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token comment\">// 准备覆盖旧元素</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token comment\">// 遍历链表下一个节点</span>\n\t\t\t\tp <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">// map中key重复</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">// existing mapping for key</span>\n\t\t\t<span class=\"token class-name\">V</span> oldValue <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// onlyIfAbsent传进来的是false，意思是允许覆盖旧值或旧值为null。</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>onlyIfAbsent <span class=\"token operator\">||</span> oldValue <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token comment\">// 覆盖旧元素</span>\n\t\t\t\te<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// hashmap的实现这一步什么都没有做</span>\n\t\t\t<span class=\"token function\">afterNodeAccess</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> oldValue<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">++</span>modCount<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 是否要扩容</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>size <span class=\"token operator\">&gt;</span> threshold<span class=\"token punctuation\">)</span> <span class=\"token comment\">// threshold = 数组长度 * 负载因子（0.75）</span>\n\t\t<span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// hashmap的实现，这一步什么都没有做。</span>\n\t<span class=\"token function\">afterNodeInsertion</span><span class=\"token punctuation\">(</span>evict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><strong>Refs：</strong><br/> 冰棍hfv：<a href=\"https://blog.csdn.net/weixin_51201930/article/details/122716035\">我用两万字详细总结HashMap(JDK1.8)底层原理</a><br/> Code_BinBin：<a href=\"https://blog.csdn.net/weixin_43145539/article/details/117229298\">JDK1.8HashMap底层实现原理</a><br/> 码农小白猿：<a href=\"https://blog.csdn.net/xadasss/article/details/116793267\">通俗易懂Hashmap源码解析</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-09-02 08:53:30", "summary": "晦涩难懂的源代码方法解析底层数组冲突链表节点红黑树计算数组下标源代码在我的分类专栏中，有关于位运算、计算、红黑树的文章，如果这些还不太了解，可以去看看：。版本：。是用于键值对处理的数据类型。底层数组底"}