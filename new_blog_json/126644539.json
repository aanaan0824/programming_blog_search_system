{"blogid": "126644539", "writerAge": "码龄22天", "writerBlogNum": "53", "writerCollect": "6", "writerComment": "4", "writerFan": "3", "writerGrade": "3级", "writerIntegral": "616", "writerName": "小圆-", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126644539.jpg", "writerRankTotal": "36810", "writerRankWeekly": "6965", "writerThumb": "10", "writerVisitNum": "1662", "blog_read_count": "162", "blog_time": "于 2022-09-01 15:41:37 发布", "blog_title": "什么是生成器 — 一篇文章让你看懂", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h4><a id=\"___0\"></a>嗨嗨，我是小圆 ~ 今天来给大家讲讲什么是生成器</h4>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\4d47b8d62f284f67b016e365262fab21.jpeg\"/></p>\n<p><mark>生成器</mark>是 Python 初级开发者最难理解的概念之一，虽被认为是 Python 编程中的高级技能，但在各种项目中可以随处见到生成器的身影，你得不得去理解它、使用它、甚至爱上它。</p>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\dda1c1678e144d738cffa996ded54dfe.jpeg\"/></p>\n<p>提到生成器，总不可避免地要把迭代器拉出来对比着讲，生成器就是一个在行为上和迭代器非常类似的对象，如果把迭代器比作 Android 系统，那么生成器就是 iOS，二者功能上差不多，但是生成器更优雅。</p>\n<h1><a id=\"_10\"></a>什么是迭代器</h1>\n<p>顾名思义，迭代器就是用于迭代操作（for 循环）的对象，它像列表一样可以迭代获取其中的每一个元素，任何实现了 <strong>next</strong> 方法<br/> （python2 是 next）的对象都可以称为迭代器。</p>\n<p>它与列表的区别在于，构建迭代器的时候，不像列表把所有元素一次性加载到内存，而是以一种延迟计算（lazy evaluation）方式返回元素，这正是它的优点。比如列表含有中一千万个整数，需要占超过400M的内存，而迭代器只需要几十个字节的空间。因为它并没有把所有元素装载到内存中，而是等到调用 next 方法时候才返回该元素（call by need 的方式），本质上 for 循环就是不断地调用迭代器的next方法。</p>\n<p>以斐波那契数列为例来实现一个迭代器：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Fib</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        self<span class=\"token punctuation\">.</span>cur <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        self<span class=\"token punctuation\">.</span>n <span class=\"token operator\">=</span> n\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__iter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__next__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>n <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            value <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>cur\n            self<span class=\"token punctuation\">.</span>cur <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>cur <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>prev\n            self<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> value\n            self<span class=\"token punctuation\">.</span>n <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">return</span> value\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> StopIteration<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nf <span class=\"token operator\">=</span> Fib<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]</span>\n</code></pre>\n<h1><a id=\"_41\"></a>什么是生成器</h1>\n<p>知道迭代器之后，就可以正式进入生成器的话题了。普通函数用 return 返回一个值，和 Java 等其他语言是一样的，然而在 Python 中还有一种函数，用关键字 yield 来返回值，这种函数叫生成器函数，函数被调用时会返回一个生成器对象，生成器本质上还是一个迭代器，也是用在迭代操作中，因此它有和迭代器一样的特性，唯一的区别在于实现方式上不一样，后者更加简洁</p>\n<p>最简单的生成器函数：</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">def</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">yield</span> n<span class=\"token operator\">*</span><span class=\"token number\">2</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> func\n<span class=\"token operator\">&lt;</span>function func at <span class=\"token number\">0x00000000029F6EB8</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> g <span class=\"token operator\">=</span> func<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> g\n<span class=\"token operator\">&lt;</span>generator <span class=\"token builtin\">object</span> func at <span class=\"token number\">0x0000000002908630</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>func 就是一个生成器函数，调用该函数时返回对象就是生成器 g ，这个生成器对象的行为和迭代器是非常相似的，可以用在 for 循环等场景中。注意 yield 对应的值在函数被调用时不会立刻返回，而是调用next方法时（本质上 for 循环也是调用 next 方法）才返回</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> g <span class=\"token operator\">=</span> func<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span>\n<span class=\"token number\">10</span>\n\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> g <span class=\"token operator\">=</span> func<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> g<span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token number\">10</span>\n</code></pre>\n<p>那为什么要用生成器呢？显然，用生成器在逼格上要比迭代器高几个等级，它没有那么多冗长代码了，而且性能上一样的高效，为什么不用呢？来看看用生成器实现斐波那契数列有多简单。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    prev<span class=\"token punctuation\">,</span> curr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">while</span> n <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">yield</span> curr\n        prev<span class=\"token punctuation\">,</span> curr <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">,</span> curr <span class=\"token operator\">+</span> prev\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> fib<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]</span>\n</code></pre>\n<h3><a id=\"_81\"></a>生成器表达式</h3>\n<p>生成器表达式与列表推导式长的非常像，但是它俩返回的对象不一样，前者返回生成器对象，后者返回列表对象。</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> g <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span><span class=\"token number\">2</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token builtin\">type</span> <span class=\"token string\">'generator'</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> l <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token operator\">*</span><span class=\"token number\">2</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token builtin\">type</span> <span class=\"token string\">'list'</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>好了，这篇文章分享到这里就结束了 ~</p>\n<h5><a id=\"__92\"></a>我是小圆，我们下篇文章见 ~</h5>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8a6543ae4fe240db8710405fea66a4b8.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-09-01 15:41:37", "summary": "嗨嗨，我是小圆今天来给大家讲讲什么是生成器请添加图片描述生成器是初级开发者最难理解的概念之一，虽被认为是编程中的高级技能，但在各种项目中可以随处见到生成器的身影，你得不得去理解它、使用它、甚至爱上它。"}