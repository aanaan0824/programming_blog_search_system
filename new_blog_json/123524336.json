{"blogid": "123524336", "writerAge": "码龄4年", "writerBlogNum": "159", "writerCollect": "371", "writerComment": "80", "writerFan": "104", "writerGrade": "5级", "writerIntegral": "1823", "writerName": "\"dandan\"不能定义", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123524336.jpg", "writerRankTotal": "16123", "writerRankWeekly": "161203", "writerThumb": "102", "writerVisitNum": "89037", "blog_read_count": "3508", "blog_time": "于 2022-03-16 17:33:45 发布", "blog_title": "C#上位机（串口工具）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><strong>1.窗体设计</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a65b9ece2dd14f6e89eeb03d3104c4a9.png\"/></p>\n<blockquote>\n<p>注意：<br/> 1.上述窗体用到了按钮、Radio、Panel、GroupBox、TextBox、SerialPorts、ComboBox等控件，组件。<br/> 2.对于Panel、GroupBox控件，需要先插入。再插入其他控件。其中Panel一般是为了将Radio进行组合而使用。GroupBox是为了更明显的显示界面给用户。<br/> 3.其中TextBox一般只能横向拉伸，不能纵向拉伸，选择TsxtBox框上的黑色三角符号，然后勾选“MultiLine”之后，即可进行上下左右拉伸。其中为了让其出现滚动条可以在属性中选择“ScrollBars”。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3462d5c379d64a60af1b4913c9eb6963.png\"/><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8b43ae7a49c049fb973f23a361146360.png\"/></p>\n</blockquote>\n<p><strong>2.窗体函数事件</strong><br/> <strong>2.1 窗体函数中直接进行初始化和设置</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//窗体事件</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Form1_Load</span><span class=\"token punctuation\">(</span>object sender<span class=\"token punctuation\">,</span> EventArgs e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//对端口进行设置</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcomboBox1<span class=\"token punctuation\">.</span>Items<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"COM\"</span><span class=\"token operator\">+</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//对串口号、波特率进行默认值设置</span>\n\tcomboBox1<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"COM1\"</span><span class=\"token punctuation\">;</span>\n\tcomboBox2<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"4800\"</span><span class=\"token punctuation\">;</span>\n\tradioButton1<span class=\"token punctuation\">.</span>Checked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//函数中选择发送模式 为“数值”发送模式。 radioButton1为单选按钮属性（name）名字</span>\n\tradioButton3<span class=\"token punctuation\">.</span>Checked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//函数中选择接收模式 为“数值”接收模式。 radioButton3为单选按钮属性（name）名字</span>\n\tbutton1<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"打开串口\"</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//确保 “打开串口”按键文本属性为 “打开串口”</span>\n\tbutton2<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"关闭串口\"</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//确保 “关闭串口”按键文本属性为 “关闭串口”</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7bbb2a077344445eadfabe2a4303d6e0.png\"/></p>\n<blockquote>\n<p>主要是进行窗体初始化设置，下拉框设置，选择发送模式 和接收模式设置为“数值”模式。</p>\n</blockquote>\n<p><strong>2.2 在窗体函数中，只进行初始化，其他工作封装在一个函数中。</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//窗体事件</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Form1_Load</span><span class=\"token punctuation\">(</span>object sender<span class=\"token punctuation\">,</span> EventArgs e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">Updata_Serialport_Name</span><span class=\"token punctuation\">(</span>comboBox1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//调用更新可用串口函数，comboBox1为 端口 组合框名字</span>\n\t\n\t<span class=\"token comment\">/*//对端口进行设置\n\tfor (int i = 1; i &lt; 20; i++)\n\t{\n\t\tcomboBox1.Items.Add(\"COM\"+ i.ToString());\n\t}*/</span>\n\t<span class=\"token comment\">//对串口号、波特率进行默认值设置</span>\n\tcomboBox1<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"COM1\"</span><span class=\"token punctuation\">;</span>\n\tcomboBox2<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"4800\"</span><span class=\"token punctuation\">;</span>\n\tradioButton1<span class=\"token punctuation\">.</span>Checked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//函数中选择发送模式 为“数值”发送模式。 radioButton1为单选按钮属性（name）名字</span>\n\tradioButton3<span class=\"token punctuation\">.</span>Checked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//函数中选择接收模式 为“数值”接收模式。 radioButton3为单选按钮属性（name）名字</span>\n\tbutton1<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"打开串口\"</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//确保 “打开串口”按键文本属性为 “打开串口”</span>\n\tbutton2<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"关闭串口\"</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//确保 “关闭串口”按键文本属性为 “关闭串口”</span>\n\n\t<span class=\"token comment\">//必须手动添加处理串口数据接收</span>\n\t<span class=\"token comment\">//serialPort1.DataReceived += new  EventHandler(this.Port_DataReceived);//SerialDataReceived </span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*用户自定义更新可用串口函数*/</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Updata_Serialport_Name</span><span class=\"token punctuation\">(</span>ComboBox MycomboBox<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//System.IO.Ports.SerialPort.GetPortNames()函数功能为获取计算机所有可用串口，以字符串数组形式输出</span>\n\tstring<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ArryPort <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>Ports<span class=\"token punctuation\">.</span>SerialPort<span class=\"token punctuation\">.</span><span class=\"token function\">GetPortNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//定义字符串数组，数组名为 ArryPort，将可用的串口信息存放在字符串中</span>\n\tMycomboBox<span class=\"token punctuation\">.</span>Items<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">//清除当前组合框下拉菜单内容                  </span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ArryPort<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tMycomboBox<span class=\"token punctuation\">.</span>Items<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>ArryPort<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//将所有的可用串口号添加到端口对应的组合框中</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>注意：<br/> 1.System.IO.Ports.SerialPort.GetPortNames()函数功能为获取计算机所有可用串口，以字符串数组形式输出。可简写为SerialPort.GetPortNames()。但要加using System.IO.Ports;命名空间<br/> 2.MycomboBox.Items.Add(）在MycomboBox控件下添加下拉信息。<br/> 3.Updata_Serialport_Name()该函数类似于串口扫描函数。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5ff8361f4896472bbcf643b032e4fc76.png\"/><br/> <strong>3.串口数据信息接收,字符和数值两种模式进行处理</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//串口数据信息接收</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Port_DataReceived</span><span class=\"token punctuation\">(</span>object sender<span class=\"token punctuation\">,</span> SerialDataReceivedEventArgs e<span class=\"token punctuation\">)</span><span class=\"token comment\">//SerialDataReceived </span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token comment\">//接收方式为字符模式，字符方式读</span>\n<span class=\"token comment\">//Checked:获取或设置一个值，该值指示是否已选中控件。</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>radioButton3<span class=\"token punctuation\">.</span>Checked<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//字符串方式读缓冲区中的数据</span>\n\tstring str <span class=\"token operator\">=</span> serialPort1<span class=\"token punctuation\">.</span><span class=\"token function\">ReadExisting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//把读取的数据添加至接收区。AppendText():向文本框的当前文本追加文本。</span>\n\ttextBox2<span class=\"token punctuation\">.</span><span class=\"token function\">AppendText</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//接收方式为数值模式，数值方式读</span>\n<span class=\"token keyword\">else</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tbyte data<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//ReadByte()从 System.IO.Ports.SerialPort 输入缓冲区中同步读取一个字节。返回：强制转换为 System.Int32 的字节；或者，如果已读取到流的末尾，则为 -1。</span>\n\t<span class=\"token comment\">//因为函数ReadByte()的返回值为int，因此要转换强制转换为byte。</span>\n\tdata <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>byte<span class=\"token punctuation\">)</span>serialPort1<span class=\"token punctuation\">.</span><span class=\"token function\">ReadByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//Convert.ToString() 将 8 位无符号整数的值转换为其等效的指定基数的字符串表示形式。</span>\n\t<span class=\"token comment\">// 参数: </span>\n\t<span class=\"token comment\">// value:要转换的 8 位无符号整数。</span>\n\t<span class=\"token comment\">// toBase:返回值的基数，必须是 2、8、10 或 16。</span>\n\t<span class=\"token comment\">// 返回结果: 以 toBase 为基数的 value 的字符串表示形式。</span>\n\t<span class=\"token comment\">//转换为大写十六进制字符串</span>\n\tstring str <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToUpper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//对单个值，进行补0</span>\n\ttextBox2<span class=\"token punctuation\">.</span><span class=\"token function\">AppendText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"0\"</span> <span class=\"token operator\">+</span> str <span class=\"token operator\">:</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/*\n\tif (str.Length == 1)\n\t{\n\t\tstr = \"0\" + str;\n\t}\n\telse\n\t{\n\t\tstr = str;\n\t}\n\ttextBox2.AppendText(\"0x\" + str);\n\t */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>注意：<br/> 1.Checked:获取或设置一个值，该值指示是否已选中控件。<br/> 2.AppendText():向文本框的当前文本追加文本。<br/> 3.ReadByte()从 System.IO.Ports.SerialPort 输入缓冲区中同步读取一个字节。返回：强制转换为 System.Int32 的字节；或者，如果已读取到流的末尾，则为 -1。<br/> 4.Convert.ToString() 将 8 位无符号整数的值转换为其等效的指定基数的字符串表示形式。<br/> <em>参数:</em><br/> 4.1 value:要转换的 8 位无符号整数。<br/> 4.2 toBase:返回值的基数，必须是 2、8、10 或 16。<br/> <em>返回结果:</em><br/> 以 toBase 为基数的 value 的字符串表示形式。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f8d9f4a4c886420c8442bed838d0ba61.png\"/></p>\n</blockquote>\n<p><strong>4.打开按钮</strong></p>\n<pre><code class=\"prism language-c\">private <span class=\"token keyword\">void</span> <span class=\"token function\">button1_Click</span><span class=\"token punctuation\">(</span>object sender<span class=\"token punctuation\">,</span> EventArgs e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\ttry\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//在打开串口之前获取串口号和波特率</span>\n\t\tserialPort1<span class=\"token punctuation\">.</span>PortName <span class=\"token operator\">=</span> comboBox1<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//转换为10进制，10可省略</span>\n\t\tserialPort1<span class=\"token punctuation\">.</span>BaudRate <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToInt32</span><span class=\"token punctuation\">(</span>comboBox2<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//打开串口</span>\n\t\tserialPort1<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//打开串口按钮不可用，变成灰色</span>\n\t\tbutton1<span class=\"token punctuation\">.</span>Enabled <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//关闭串口按钮可用。</span>\n\t\tbutton2<span class=\"token punctuation\">.</span>Enabled <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcatch\n\t<span class=\"token punctuation\">{<!-- --></span> \n\t\tMessageBox<span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"端口错误，请检查串口\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"打开串口错误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n   \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>打开按钮后，打开按钮图标变灰色，不可用。关闭按钮图标可用。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5208ffcba5ca4f39a14a6fd85247ab91.png\"/></p>\n<p><strong>5.关闭按钮</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">button2_Click</span><span class=\"token punctuation\">(</span>object sender<span class=\"token punctuation\">,</span> EventArgs e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">try</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//关闭串口</span>\n\t\tserialPort1<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//打开串口按钮可用</span>\n\t\tbutton1<span class=\"token punctuation\">.</span>Enabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//关闭串口按钮不可用，变成灰色</span>\n\t\tbutton2<span class=\"token punctuation\">.</span>Enabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">catch</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//一般关闭串口不出错，此处对程序不进行处理</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>关闭按钮后，关闭按钮图标变灰色，不可用。打开按钮图标可用。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\06522c4079d744cd97694fa63e328390.png\"/></p>\n</blockquote>\n<p><strong>6.发送按钮，实现串口的发送功能，从字符和数值两个模式进行撰写。</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">button3_Click</span><span class=\"token punctuation\">(</span>object sender<span class=\"token punctuation\">,</span> EventArgs e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tbyte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> byte<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// IsOpen :获取一个值，该值指示 System.IO.Ports.SerialPort 对象的打开或关闭状态。</span>\n\t<span class=\"token comment\">// 返回结果: 如果串行端口已打开，则为 true；否则为 false。 默认值为 false。</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>serialPort1<span class=\"token punctuation\">.</span>IsOpen<span class=\"token punctuation\">)</span><span class=\"token comment\">//串口打开</span>\n\t<span class=\"token punctuation\">{<!-- --></span> \n\t\t<span class=\"token comment\">//发送框不能为空</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>textBox1<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span> \n\t\t\t<span class=\"token comment\">//发送模式为字符模式</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>radioButton1<span class=\"token punctuation\">.</span>Checked<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">try</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token comment\">//将发送的数据存在于缓冲区</span>\n\t\t\t\t\tserialPort1<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>textBox1<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>Exception err<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tMessageBox<span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"串口数据写入错误\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"发送错误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">//发送模式为数值模式</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">try</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token comment\">//文本数据长度</span>\n\t\t\t\t\t<span class=\"token keyword\">int</span> dataLength <span class=\"token operator\">=</span> textBox1<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token comment\">//判断本本个数是奇数还是偶数</span>\n\t\t\t\t\t<span class=\"token keyword\">int</span> dataRemain <span class=\"token operator\">=</span> textBox1<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token comment\">//(dataLength - dataRemain)/2 十六进制发送时，看有几个字节。</span>\n\n\t\t\t\t\t<span class=\"token comment\">//处理前length-1个数据</span>\n\t\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>dataLength <span class=\"token operator\">-</span> dataRemain<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t<span class=\"token comment\">// Substring(): </span>\n\t\t\t\t\t\t<span class=\"token comment\">// 从此实例检索子字符串。 子字符串从指定的字符位置开始且具有指定的长度。</span>\n\t\t\t\t\t\t<span class=\"token comment\">// 参数: </span>\n\t\t\t\t\t\t<span class=\"token comment\">//   startIndex:</span>\n\t\t\t\t\t\t<span class=\"token comment\">//     此实例中子字符串的起始字符位置（从零开始）。</span>\n\t\t\t\t\t\t<span class=\"token comment\">//   length:</span>\n\t\t\t\t\t\t<span class=\"token comment\">//     子字符串中的字符数。</span>\n\t\t\t\t\t\t<span class=\"token comment\">// 返回结果: </span>\n\t\t\t\t\t\t<span class=\"token comment\">//     与此实例中在 startIndex 处开头、长度为 length 的子字符串等效的一个字符串，如果 startIndex 等于此实例的长度且 length</span>\n\t\t\t\t\t\t<span class=\"token comment\">//     为零，则为 System.String.Empty。</span>\n\t\t\t\t\t\tdata<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToByte</span><span class=\"token punctuation\">(</span>textBox1<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将获取的数值转换为十六进制每两位两位存入data[0]这个字节中</span>\n\n\t\t\t\t\t\t<span class=\"token comment\">//Convert.ToByte(): </span>\n\t\t\t\t\t\t<span class=\"token comment\">//将指定基数的数字的字符串表示形式转换为等效的 8 位无符号整数。</span>\n\t\t\t\t\t\t<span class=\"token comment\">// 参数: </span>\n\t\t\t\t\t\t<span class=\"token comment\">//   value:</span>\n\t\t\t\t\t\t<span class=\"token comment\">//     包含要转换的数字的字符串。</span>\n\t\t\t\t\t\t<span class=\"token comment\">//   fromBase:</span>\n\t\t\t\t\t\t<span class=\"token comment\">//     value 中数字的基数，它必须是 2、8、10 或 16。</span>\n\t\t\t\t\t\t<span class=\"token comment\">// 返回结果: </span>\n\t\t\t\t\t\t<span class=\"token comment\">//     与 value 中数字等效的 8 位无符号整数，如果 value 为 null，则为 0（零）。</span>\n\n\t\t\t\t\t\tserialPort1<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//循环发送每一个字节，如abc则发0xab</span>\n\n\t\t\t\t\t\t<span class=\"token comment\">// Write(data, 0, 1): </span>\n\t\t\t\t\t\t<span class=\"token comment\">// 使用缓冲区的数据将指定数量的字节写入串行端口。</span>\n\t\t\t\t\t\t<span class=\"token comment\">// 参数: </span>\n\t\t\t\t\t\t<span class=\"token comment\">//   buffer:</span>\n\t\t\t\t\t\t<span class=\"token comment\">//     包含要写入端口的数据的字节数组。</span>\n\t\t\t\t\t\t<span class=\"token comment\">//   offset:</span>\n\t\t\t\t\t\t<span class=\"token comment\">//     buffer 参数中从零开始的字节偏移量，从此处开始将字节复制到端口。</span>\n\t\t\t\t\t\t<span class=\"token comment\">//   count:</span>\n\t\t\t\t\t\t<span class=\"token comment\">//     要写入的字节数。</span>\n\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t\t\t<span class=\"token comment\">//处理奇数个数据的最后一位</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>textBox1<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>   \n\t\t\t\t\t\t<span class=\"token comment\">//将最后一位转换为十六进制数据存入data中。</span>\n\t\t\t\t\t\tdata<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToByte</span><span class=\"token punctuation\">(</span>textBox1<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span>textBox1<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>Length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token comment\">//发送最后一位</span>\n\t\t\t\t\t\tserialPort1<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>Exception err<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tMessageBox<span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送数据错误\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"发送错误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>注意：</p>\n<ol><li><strong>Substring():</strong><br/> 从此实例检索子字符串。 子字符串从指定的字符位置开始且具有指定的长度。<br/> <strong>参数:</strong><br/> startIndex：此实例中子字符串的起始字符位置（从零开始）。<br/> length：子字符串中的字符数。<br/> <strong>返回结果:</strong><br/> 与此实例中在 startIndex 处开头、长度为 length 的子字符串等效的一个字符串，如果 startIndex 等于此实例的长度且 length为零，则为 System.String.Empty。</li></ol>\n</blockquote>\n<blockquote>\n<p>2.<strong>Convert.ToByte():</strong><br/> 将指定基数的数字的字符串表示形式转换为等效的 8 位无符号整数。<br/> <strong>参数:</strong><br/> value：包含要转换的数字的字符串。<br/> fromBase：value 中数字的基数，它必须是 2、8、10 或 16。<br/> <strong>返回结果:</strong><br/> 与 value 中数字等效的 8 位无符号整数，如果 value 为 null，则为 0（零）。</p>\n</blockquote>\n<blockquote>\n<p>3.<strong>Write(data, 0, 1):</strong><br/> 使用缓冲区的数据将指定数量的字节写入串行端口。<br/> <strong>参数:</strong><br/> buffer：包含要写入端口的数据的字节数组。<br/> offset：buffer 参数中从零开始的字节偏移量，从此处开始将字节复制到端口。<br/> count：要写入的字节数。</p>\n</blockquote>\n<blockquote>\n<p>4.<strong>IsOpen :</strong><br/> 获取一个值，该值指示 System.IO.Ports.SerialPort 对象的打开或关闭状态。<br/> <strong>返回结果:</strong><br/> 如果串行端口已打开，则为 true；否则为 false。 默认值为 false。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c45025692ac9402dacd846a37dc4f380.png\"/><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ec8975248f554523bdc449bc94d001ac.png\"/><br/> <strong>7.文本框，将滚动条调整至当前位置</strong></p>\n</blockquote>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">textBox1_TextChanged</span><span class=\"token punctuation\">(</span>object sender<span class=\"token punctuation\">,</span> EventArgs e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//将滚动条调整至当前位置。</span>\n\ttextBox1<span class=\"token punctuation\">.</span><span class=\"token function\">ScrollToCaret</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">textBox2_TextChanged</span><span class=\"token punctuation\">(</span>object sender<span class=\"token punctuation\">,</span> EventArgs e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\ttextBox2<span class=\"token punctuation\">.</span><span class=\"token function\">ScrollToCaret</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>8.清空接收文本</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">button4_Click</span><span class=\"token punctuation\">(</span>object sender<span class=\"token punctuation\">,</span> EventArgs e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n     textBox2<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>9.运行结果</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2128ee5f395845049403d4ffe1e67828.png\"/><br/> 往期链接：</p>\n<p>1.<a href=\"https://blog.csdn.net/weixin_42536748/article/details/123504124\">C#上位机（简单实现串口发送）</a>.<br/> 2.<a href=\"https://blog.csdn.net/weixin_42536748/article/details/123501173\">C#上位机（定时器计数）</a>.</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-16 17:33:45", "summary": "窗体设计在这里插入图片描述注意：上述窗体用到了按钮、、、、、、等控件，组件。对于、控件，需要先插入。再插入其他控件。其中一般是为了将进行组合而使用。是为了更明显的显示界面给用户。其中一般只能横向拉伸，"}