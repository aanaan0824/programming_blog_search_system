{"blogid": "122771208", "writerAge": "码龄17年", "writerBlogNum": "255", "writerCollect": "609", "writerComment": "61", "writerFan": "110", "writerGrade": "6级", "writerIntegral": "6162", "writerName": "alwaysrun", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122771208.jpg", "writerRankTotal": "2892", "writerRankWeekly": "16183", "writerThumb": "99", "writerVisitNum": "401819", "blog_read_count": "2803", "blog_time": "已于 2022-02-02 18:46:21 修改", "blog_title": "[C++]-日志记录库SPDLog简介", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#spdlog_3\">spdlog库</a></li><li><ul><li><a href=\"#sink_23\">日志记录槽sink</a></li><li><a href=\"#logger_33\">日志记录器logger</a></li><li><a href=\"#pattern_44\">输出格式pattern</a></li><li><ul><li><a href=\"#_108\">对齐方式</a></li><li><a href=\"#_118\">截断</a></li></ul>\n</li><li><a href=\"#fmt_128\">字符串格式化fmt</a></li><li><ul><li><a href=\"#Format_Specification_144\">Format Specification</a></li></ul>\n</li></ul>\n</li><li><a href=\"#spdlog_211\">spdlog使用</a></li><li><ul><li><a href=\"#_234\">异常处理</a></li><li><a href=\"#logger_248\">logger</a></li><li><ul><li><a href=\"#_267\">基础用法</a></li><li><a href=\"#stdout_297\">stdout日志</a></li><li><a href=\"#_314\">文件日志</a></li><li><ul><li><a href=\"#_316\">基本文件</a></li><li><a href=\"#_335\">循环文件</a></li><li><a href=\"#_350\">每日文件</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_365\">示例</a></li></ul>\n</li></ul>\n</div>\n<br/> spdlog是一款开源的、快速的日志库。\n<p></p>\n<h1><a id=\"spdlog_3\"></a>spdlog库</h1>\n<p>spdlog是基于C++11实现的一款纯头文件的日志管理库（git地址：https://github.com/gabime/spdlog，API说明：https://spdlog.docsforge.com/v1.x/1.quickstart/）：</p>\n<ul><li>配置特别简单，仅包含头文件即可；</li><li>写日志方式简单明了；</li><li>可实现自动按日期创建日志文件/定时创建日志文件；</li><li>可自定义日志格式；</li><li>可以输出当前输出日志所在的文件及函数；</li><li>可自定义文档大小；</li><li>可将不同级别的信息输出到不同日志文件；</li><li>多平台等。</li></ul>\n<p>spdlog中各对象都分为多线程与单线程版本：</p>\n<ul><li><code>*_st</code>：单线程版本，不用加锁，效率更高。</li><li><code>*_mt</code>：多线程版本，用于多线程程序是线程安全的。</li></ul>\n<h2><a id=\"sink_23\"></a>日志记录槽sink</h2>\n<p>spdlog定义了几种sinks用于不同场景（也可自定义）下的日志输出，sink中主要包含：</p>\n<ul><li><code>set_pattern(const std::string&amp;)</code>：设置日志输出的内容格式。</li><li><code>set_level(level_enum)</code>： 设置日志输出的最低等级。</li><li><code>log(log_msg)</code>：由logger自动调用，外部不会主动调用。</li></ul>\n<h2><a id=\"logger_33\"></a>日志记录器logger</h2>\n<p>一个logger对象中存储有多个<em>sink</em>，当调用<em>logger</em>的日志输出函数时，<em>logger</em>会调用自身存储的所有<em>sink</em>对象的log(log_msg) 函数进行输出。logger中主要包括：</p>\n<ul><li><code>set_pattern(const std::string&amp;)</code>：设置logger包含的所有sink的日志输出内容格式。</li><li><code>set_level(level_enum)</code>：设置logger日志输出最低等级，如果logger包含的sink没有设置日志等级的话，则会为其设置日志等级。</li><li><code>log(level_enum level,log_msg content)</code>：按照level等级进行输出content，logger其中日志输出最低等级小于或等于level的sink会进行执行输出操作。</li><li><code>trace(content,arg1,arg2…)</code>：按照trace等级进行输出，输出内容由content与后面的参数格式化而成。同类的函数还包括：debug/info/warn…。</li></ul>\n<h2><a id=\"pattern_44\"></a>输出格式pattern</h2>\n<p>通过<code>set_pattern</code>可设定日志格式，如<code>set_pattern(\"[%Y-%m-%d %H:%M:%S.%e][%l](%@): %v\");</code></p>\n<p>输出标记flag：</p>\n<table><thead><tr><th>flag</th><th align=\"left\">meaning</th><th align=\"left\">example</th></tr></thead><tbody><tr><td><code>%v</code></td><td align=\"left\">日志内容</td><td align=\"left\">“my log test content”</td></tr><tr><td><code>%t</code></td><td align=\"left\">线程ID</td><td align=\"left\">“123”</td></tr><tr><td><code>%P</code></td><td align=\"left\">进程ID</td><td align=\"left\">“234”</td></tr><tr><td><code>%n</code></td><td align=\"left\">记录器Logger名</td><td align=\"left\">“basicLogger”</td></tr><tr><td><code>%l</code></td><td align=\"left\">日志级别</td><td align=\"left\">“debug”, “info”, etc</td></tr><tr><td><code>%L</code></td><td align=\"left\">日志级别简称</td><td align=\"left\">“D”, “I”, etc</td></tr><tr><td><code>%a</code></td><td align=\"left\">星期几（简称）</td><td align=\"left\">“Thu”</td></tr><tr><td><code>%A</code></td><td align=\"left\">星期几</td><td align=\"left\">“Thursday”</td></tr><tr><td><code>%b</code></td><td align=\"left\">月份简称</td><td align=\"left\">“Aug”</td></tr><tr><td><code>%B</code></td><td align=\"left\">月份</td><td align=\"left\">“August”</td></tr><tr><td><code>%c</code></td><td align=\"left\">日期时间</td><td align=\"left\">“Thu Aug 23 15:35:46 2014”</td></tr><tr><td><code>%C</code></td><td align=\"left\">年（两位）</td><td align=\"left\">“14”</td></tr><tr><td><code>%Y</code></td><td align=\"left\">年</td><td align=\"left\">“2014”</td></tr><tr><td><code>%D</code> <code>%x</code></td><td align=\"left\">日期简写</td><td align=\"left\">“08/23/14”</td></tr><tr><td><code>%m</code></td><td align=\"left\">月份（数字）</td><td align=\"left\">“11”</td></tr><tr><td><code>%d</code></td><td align=\"left\">日（数组）</td><td align=\"left\">“29”</td></tr><tr><td><code>%H</code></td><td align=\"left\">小时（24制）</td><td align=\"left\">“23”</td></tr><tr><td><code>%I</code></td><td align=\"left\">小时（12制）</td><td align=\"left\">“11”</td></tr><tr><td><code>%M</code></td><td align=\"left\">分钟</td><td align=\"left\">“59”</td></tr><tr><td><code>%S</code></td><td align=\"left\">秒</td><td align=\"left\">“58”</td></tr><tr><td><code>%e</code></td><td align=\"left\">毫秒</td><td align=\"left\">“678”</td></tr><tr><td><code>%f</code></td><td align=\"left\">微秒</td><td align=\"left\">“056789”</td></tr><tr><td><code>%F</code></td><td align=\"left\">纳秒</td><td align=\"left\">“256789123”</td></tr><tr><td><code>%p</code></td><td align=\"left\">AM/PM</td><td align=\"left\">“AM”</td></tr><tr><td><code>%r</code></td><td align=\"left\">时间（12制）</td><td align=\"left\">“02:55:02 pm”</td></tr><tr><td><code>%R</code></td><td align=\"left\">时分（24制）</td><td align=\"left\">“23:55”</td></tr><tr><td><code>%T</code> <code>%X</code></td><td align=\"left\">时间（24制）</td><td align=\"left\">“23:55:59”</td></tr><tr><td><code>%z</code></td><td align=\"left\">时区（偏移）</td><td align=\"left\">“+02:00”</td></tr><tr><td><code>%E</code></td><td align=\"left\">epoch（秒）</td><td align=\"left\">“1528834770”</td></tr><tr><td><code>%%</code></td><td align=\"left\">百分号</td><td align=\"left\">“%”</td></tr><tr><td><code>%+</code></td><td align=\"left\">默认格式</td><td align=\"left\">“[2014-10-31 23:46:59.678] [mylogger] [info] Some message”</td></tr><tr><td><code>%^</code></td><td align=\"left\">start color range (can be used only once)</td><td align=\"left\">“[mylogger] [info(green)] Some message”</td></tr><tr><td><code>%$</code></td><td align=\"left\">end color range (for example <code>%^[+++]%$ %v</code>) (can be used only once)</td><td align=\"left\">[+++] Some message</td></tr><tr><td><code>%@</code></td><td align=\"left\">文件名与行数</td><td align=\"left\">my_file.cpp:123</td></tr><tr><td><code>%s</code></td><td align=\"left\">文件名</td><td align=\"left\">my_file.cpp</td></tr><tr><td><code>%g</code></td><td align=\"left\">文件名（含路径）</td><td align=\"left\">/some/dir/my_file.cpp</td></tr><tr><td><code>%#</code></td><td align=\"left\">行数</td><td align=\"left\">123</td></tr><tr><td><code>%!</code></td><td align=\"left\">函数名</td><td align=\"left\">my_func</td></tr><tr><td><code>%o</code></td><td align=\"left\">相对上一条记录的时间间隔（毫秒）</td><td align=\"left\">456</td></tr><tr><td><code>%i</code></td><td align=\"left\">相对上一条记录的时间间隔（微秒）</td><td align=\"left\">456</td></tr><tr><td><code>%u</code></td><td align=\"left\">相对上一条记录的时间间隔（纳秒）</td><td align=\"left\">11456</td></tr><tr><td><code>%O</code></td><td align=\"left\">相对上一条记录的时间间隔（秒）</td><td align=\"left\">4</td></tr></tbody></table>\n<p>日志输出中要携带文件名、行数或函数名时，必须使用<code>SPDLOG_LOGGER_*</code>宏，且要激活对应的级别（哪些级别以上的日志会被记录）：</p>\n<pre><code class=\"prism language-c++\">// 记录INFO及以上级别日志\n#define SPDLOG_ACTIVE_LEVEL SPDLOG_LEVEL_INFO\n#include \"spdlog/spdlog.h\"\n\nSPDLOG_LOGGER_INFO(myLogger, \"Support for floats {:03.2f}\", 1.23456);\nSPDLOG_LOGGER_WARN(myLogger, \"Easy padding in numbers like {:08d}\", 12);\n</code></pre>\n<h3><a id=\"_108\"></a>对齐方式</h3>\n<p>每个flag都可携带对齐方式（最多支持64字符），</p>\n<table><thead><tr><th>align</th><th>meaning</th><th>example</th><th>result</th></tr></thead><tbody><tr><td><code>%&lt;width&gt;&lt;flag&gt;</code></td><td>右对齐</td><td><code>%8l</code></td><td>\" info\"</td></tr><tr><td><code>%-&lt;width&gt;&lt;flag&gt;</code></td><td>左对齐</td><td><code>%-8l</code></td><td>\"info \"</td></tr><tr><td><code>%=&lt;width&gt;&lt;flag&gt;</code></td><td>居中</td><td><code>%=8l</code></td><td>\" info \"</td></tr></tbody></table>\n<h3><a id=\"_118\"></a>截断</h3>\n<p>通过！可设定对应输出的最大长度：</p>\n<table><thead><tr><th>align</th><th>meaning</th><th>example</th><th>result</th></tr></thead><tbody><tr><td><code>%&lt;width&gt;!&lt;flag&gt;</code></td><td>右对齐且截断</td><td><code>%3!l</code></td><td>“inf”</td></tr><tr><td><code>%-&lt;width&gt;!&lt;flag&gt;</code></td><td>左对齐且截断</td><td><code>%-2!l</code></td><td>“in”</td></tr><tr><td><code>%=&lt;width&gt;!&lt;flag&gt;</code></td><td>居中且截断</td><td><code>%=1!l</code></td><td>“i”</td></tr></tbody></table>\n<h2><a id=\"fmt_128\"></a>字符串格式化fmt</h2>\n<p>spdlog中字符串格式化使用fmt（https://github.com/fmtlib/fmt）库。</p>\n<p>格式化方式：<code>{ [arg_id] [: (format_spec | chrono_format_spec)] }</code></p>\n<ul><li> <p>arg_id：参数标识；</p>\n<ul><li>忽略（为空时），依次对应每一个参数；</li><li>索引（数字，从0开始），引用第几个索引；</li><li>名称，命名参数；</li></ul> </li><li> <p>format_spec：参数格式化方式（类型、对齐、填充等）；</p> </li></ul>\n<h3><a id=\"Format_Specification_144\"></a>Format Specification</h3>\n<p>格式化符说明：</p>\n<pre><code>format_spec ::=  [[fill]align][sign][\"#\"][\"0\"][width][\".\" precision][\"L\"][type]\nfill        ::=  &lt;a character other than '{' or '}'&gt;\nalign       ::=  \"&lt;\" | \"&gt;\" | \"^\" // 左、右、居中对齐\nsign        ::=  \"+\" | \"-\" | \" \"\nwidth       ::=  integer | {[arg_id]} // 宽度：数字或指定的参数\nprecision   ::=  integer | {[arg_id]} // 精度：数字或指定的参数\ntype        ::=  \"a\" | \"A\" | \"b\" | \"B\" | \"c\" | \"d\" | \"e\" | \"E\" | \"f\" | \"F\" \n                 | \"g\" | \"G\" | \"o\" | \"p\" | \"s\" | \"x\" | \"X\"\n</code></pre>\n<p><code>#</code>不同的转换下有不同的意义：</p>\n<ul><li>整数时，表示前面添加进制前缀，如0x, 0b等；</li><li>浮点数时：总是有小数点（即使没有小数部分）；</li></ul>\n<p><code>L</code>只对数字有效，根据本地设置来输出：如，</p>\n<pre><code>auto s = fmt::format(std::locale(\"en_US.UTF-8\"), \"{:L}\", 1234567890);\n// s == \"1,234,567,890\"\n</code></pre>\n<p>格式化类型：</p>\n<table><thead><tr><th align=\"left\">type</th><th align=\"left\">meaning</th></tr></thead><tbody><tr><td align=\"left\">s</td><td align=\"left\">字符串</td></tr><tr><td align=\"left\">c</td><td align=\"left\">字符</td></tr><tr><td align=\"left\">b/B</td><td align=\"left\">二进制</td></tr><tr><td align=\"left\">d</td><td align=\"left\">数字（十进制）</td></tr><tr><td align=\"left\">o</td><td align=\"left\">八进制</td></tr><tr><td align=\"left\">x/X</td><td align=\"left\">十六进制</td></tr><tr><td align=\"left\">a/A</td><td align=\"left\">十六进制浮点数（p表示指数）</td></tr><tr><td align=\"left\">e/E</td><td align=\"left\">科学计数</td></tr><tr><td align=\"left\">f/F</td><td align=\"left\">浮点数（包括NAN，INF），固定小数位数输出</td></tr><tr><td align=\"left\">g/G</td><td align=\"left\">浮点数输出</td></tr><tr><td align=\"left\">p</td><td align=\"left\">指针</td></tr></tbody></table>\n<p>示例：</p>\n<pre><code>fmt::format(\"{:*^30}\", \"centered\");  // use '*' as a fill char\n// Result: \"***********centered***********\"\n\nfmt::format(\"{:#04x}\", 0);\n// Result: \"0x00\"\n\nfmt::print(\n  \"┌{0:─^{2}}┐\\n\"\n  \"│{1: ^{2}}│\\n\"\n  \"└{0:─^{2}}┘\\n\", \"\", \"Hello, world!\", 20);\n┌────────────────────┐\n│   Hello, world!    │\n└────────────────────┘\n</code></pre>\n<h1><a id=\"spdlog_211\"></a>spdlog使用</h1>\n<p>spdlog默认日志输出级别是INFO。</p>\n<p>默认情况下，日志是同步模式的，可通过以下方法开启异步模式：</p>\n<pre><code class=\"prism language-c++\">size_t q_size = 4096; //queue size must be power of 2\nspdlog::set_async_mode(q_size);\n</code></pre>\n<p>在异步模式下，日志先存入队列（队列占用的内存 = 设置的队列大小 * slot的大小， 64位系统下slot大小为104字节。），再由工作者线程从队列中取出并输出。当队列满时，会根据设定策略处理：</p>\n<ul><li> <p>阻塞新来的日志，直到队列中有剩余空间（默认处理方式）；</p> </li><li> <p>丢弃新来的日志，需要如下设定策略：</p> <pre><code>spdlog::set_async_mode(q_size, spdlog::async_overflow_policy::discard_log_msg);\n</code></pre> </li></ul>\n<h2><a id=\"_234\"></a>异常处理</h2>\n<p>当输出日志时发生异常时，spdlog会向std::err 打印一条语句，为了避免输出的异常语句刷屏，打印频率被限制在每分钟一条。可通过set_error_handler来设定异常处理函数：</p>\n<pre><code>    //can be set globaly or per logger(logger-&gt;set_error_handler(..))\n    spdlog::set_error_handler([](const std::string&amp; msg)\n    {\n        std::cerr &lt;&lt; \"my err handler: \" &lt;&lt; msg &lt;&lt; std::endl;\n    });\n</code></pre>\n<h2><a id=\"logger_248\"></a>logger</h2>\n<p>默认情况下，spdlog的默认logger为输出到stdout：</p>\n<pre><code class=\"prism language-c++\">#    ifdef _WIN32\n    auto color_sink = std::make_shared&lt;sinks::wincolor_stdout_sink_mt&gt;();\n#    else\n    auto color_sink = std::make_shared&lt;sinks::ansicolor_stdout_sink_mt&gt;();\n#    endif\n</code></pre>\n<p>在使用完logger后，要关闭掉以释放（否则无再建立同名logger）</p>\n<pre><code class=\"prism language-c++\">spdlog::drop_all();\t// 关闭所有logger\nspd::drop(\"basic_logger\"); // 关闭指定logger\n</code></pre>\n<h3><a id=\"_267\"></a>基础用法</h3>\n<p>spdlog中使用<code>{}</code>（里面可指定格式）作为格式化符</p>\n<p>以下方式把日志输出到默认logger上：</p>\n<pre><code class=\"prism language-c++\">//#define SPDLOG_ACTIVE_LEVEL SPDLOG_LEVEL_DEBUG\n#include \"spdlog/spdlog.h\"\n\nint main() \n{\n    spdlog::info(\"{:&lt;30}\", \"left aligned\");    \n    spdlog::warn(\"Easy padding in numbers like {:08d}\", 12);\n    spdlog::error(\"Some error message with arg: {}\", 1);    \n    spdlog::critical(\"Support for int: {0:d};  hex: {0:x};  oct: {0:o}; bin: {0:b}\", 42);\n    \n    spdlog::set_level(spdlog::level::debug); // Set global log level to debug\n    spdlog::debug(\"This message should be displayed..\");    \n    \n    // change log pattern\n    spdlog::set_pattern(\"[%H:%M:%S %z] [%n] [%^---%L---%$] [thread %t] %v\");\n    \n    // Compile time log levels\n    // define SPDLOG_ACTIVE_LEVEL to desired level\n    SPDLOG_TRACE(\"Some trace message with param {}\", 42);\n    SPDLOG_DEBUG(\"Some debug message\");\n}\n</code></pre>\n<h3><a id=\"stdout_297\"></a>stdout日志</h3>\n<p>以彩色方式输出到标准输出设备上：</p>\n<pre><code class=\"prism language-c++\">#include \"spdlog/spdlog.h\"\n#include \"spdlog/sinks/stdout_color_sinks.h\"\n\nvoid stdout_example()\n{\n    // create color multi threaded logger\n    auto console = spdlog::stdout_color_mt(\"console\");    \n    auto err_logger = spdlog::stderr_color_mt(\"stderr\");    \n    spdlog::get(\"console\")-&gt;info(\"loggers can be retrieved from a global registry using the spdlog::get(logger_name)\");\n}\n</code></pre>\n<h3><a id=\"_314\"></a>文件日志</h3>\n<h4><a id=\"_316\"></a>基本文件</h4>\n<p>最简单的日志文件：</p>\n<pre><code class=\"prism language-c++\">#include \"spdlog/sinks/basic_file_sink.h\"\nvoid basic_logfile_example()\n{\n    try \n    {\n        auto logger = spdlog::basic_logger_mt(\"basic_logger\", \"logs/basic-log.txt\");\n    }\n    catch (const spdlog::spdlog_ex &amp;ex)\n    {\n        std::cout &lt;&lt; \"Log init failed: \" &lt;&lt; ex.what() &lt;&lt; std::endl;\n    }\n}\n</code></pre>\n<h4><a id=\"_335\"></a>循环文件</h4>\n<p>日志文件超过指定大小后，自动生成一个新的；并且只保留最多指定数量的日志文件：</p>\n<pre><code class=\"prism language-c++\">#include \"spdlog/sinks/rotating_file_sink.h\"\nvoid rotating_example()\n{\n    // Create a file rotating logger with 5mb size max and 3 rotated files\n    auto max_size = 1024*1024 * 5;\n    auto max_files = 3;\n    auto logger = spdlog::rotating_logger_mt(\"some_logger_name\", \"logs/rotating.txt\", max_size, max_files);\n}\n</code></pre>\n<h4><a id=\"_350\"></a>每日文件</h4>\n<p>每天指定时间生成一个新的日志文件：</p>\n<pre><code class=\"prism language-c++\">#include \"spdlog/sinks/daily_file_sink.h\"\nvoid daily_example()\n{\n    // Create a daily logger - a new file is created every day on 2:30am\n    auto logger = spdlog::daily_logger_mt(\"daily_logger\", \"logs/daily.txt\", 2, 30);\n}\n</code></pre>\n<h2><a id=\"_365\"></a>示例</h2>\n<p>设定默认日志记录文件并在不同地方获取使用：</p>\n<pre><code class=\"prism language-c++\">#define SPDLOG_ACTIVE_LEVEL SPDLOG_LEVEL_INFO\n\n#include \"spdlog/spdlog.h\"\n#include \"spdlog/sinks/rotating_file_sink.h\"\n\n\nvoid writeLog(int n) {\n    for (int i = 0; i &lt; n; ++i) {\n        // 获取logger后输出日志\n        auto myLogger = spdlog::get(\"baseLogger\");\n        myLogger-&gt;info(\"{}: Hello, {}!\", i + 1, \"World\");\n        myLogger-&gt;info(\"Welcome to spdlog!\");\n        myLogger-&gt;error(\"Some error message with arg: {}\", 1);\n\n        // 带文件名与行号的日志输出\n        SPDLOG_LOGGER_INFO(myLogger, \"Support for floats {:03.2f}\", 1.23456);\n        SPDLOG_LOGGER_WARN(myLogger, \"Easy padding in numbers like {:08d}\", 12);\n\n        // 输出到默认日志中\n        spdlog::critical(\"Support for int: {0:d};  hex: {0:x};  oct: {0:o}; bin: {0:b}\", 42);\n        spdlog::error(\"Some error message with arg: {}\", 1);\n        spdlog::warn(\"Easy padding in numbers like {:08d}\", 12);\n        spdlog::info(\"Support for floats {:03.2f}\", 1.23456);\n    }\n}\n\nvoid testSPDLog() {\n    // 设定日志最大100k，且最多保留10个\n    auto myLogger = spdlog::rotating_logger_mt(\"baseLogger\", \"logs/basic.log\", 1024 * 100, 10);\n    spdlog::set_default_logger(myLogger);\n    myLogger-&gt;set_pattern(\"[%Y-%m-%d %H:%M:%S.%e][%l](%@): %v\"); // 非通过宏输出的日志%@输出为空\n    myLogger-&gt;set_level(spdlog::level::info);\n\n    myLogger-&gt;info(\"Hello, {}!\", \"World\");\n\n    writeLog(10);\n}\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-02-02 18:46:21", "summary": "文章目录库日志记录槽日志记录器输出格式对齐方式截断字符串格式化使用异常处理基础用法日志文件日志基本文件循环文件每日文件示例是一款开源的、快速的日志库。库是基于实现的一款纯头文件的日志管理库地址：，说明"}