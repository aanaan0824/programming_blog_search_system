{"blogid": "126597099", "writerAge": "码龄99天", "writerBlogNum": "176", "writerCollect": "2299", "writerComment": "180", "writerFan": "774", "writerGrade": "5级", "writerIntegral": "3008", "writerName": "Mdc_stdio", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126597099.jpg", "writerRankTotal": "5961", "writerRankWeekly": "245", "writerThumb": "1072", "writerVisitNum": "144592", "blog_read_count": "1426", "blog_time": "于 2022-08-30 09:37:20 发布", "blog_title": "【毕业设计】基于单片机的手势检测识别系统 - arduino 物联网嵌入式", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#0__5\">0 前言</a></li><li><a href=\"#1__27\">1 简介</a></li><li><a href=\"#2__29\">2 主要器件</a></li><li><a href=\"#3__36\">3 实现效果</a></li><li><a href=\"#4__44\">4 设计原理</a></li><li><a href=\"#5__86\">5 部分核心代码</a></li><li><a href=\"#5__350\">5 最后</a></li></ul>\n</div>\n<p></p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"0__5\"></a>0 前言</h1>\n<p>🔥 这两年开始毕业设计和毕业答辩的要求和难度不断提升，传统的毕设题目缺少创新和亮点，往往达不到毕业答辩的要求，这两年不断有学弟学妹告诉学长自己做的项目系统达不到老师的要求。</p>\n<p>为了大家能够顺利以及最少的精力通过毕设，学长分享优质毕业设计项目，今天要分享的是</p>\n<p>🚩 <strong>基于单片机的手势检测识别系统</strong></p>\n<p>🥇学长这里给一个题目综合评分(每项满分5分)</p>\n<ul><li>难度系数：4分</li><li>工作量：4分</li><li>创新点：3分</li></ul>\n<p>🧿 <strong>选题指导, 项目分享：</strong></p>\n<p><a href=\"https://gitee.com/dancheng-senior/project-sharing-1/blob/master/%E6%AF%95%E8%AE%BE%E6%8C%87%E5%AF%BC/README.md\">https://gitee.com/dancheng-senior/project-sharing-1/blob/master/%E6%AF%95%E8%AE%BE%E6%8C%87%E5%AF%BC/README.md</a></p>\n<br/>\n<h1><a id=\"1__27\"></a>1 简介</h1>\n<h1><a id=\"2__29\"></a>2 主要器件</h1>\n<ul><li>Arduino Nano R3</li><li>PIR传感器</li><li>OLED显示模块（128X64）</li><li>热阵列传感器</li></ul>\n<h1><a id=\"3__36\"></a>3 实现效果</h1>\n<p><strong>成品展示</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\30a1a974c995450fb3b43145314b597d.png\" width=\"500\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/a1eeef34bf5d400caa5a57325c7e6aeb.gif#pic_center\" width=\"600\"/></p>\n<h1><a id=\"4__44\"></a>4 设计原理</h1>\n<p><strong>PIR传感器：</strong></p>\n<p>PIR传感器：一种电子传感器，测量从其视野内的物体辐射的红外(IR)光。最常用于基于PIR的运动检测器。所有温度高于绝对零度的物体都会以辐射的形式放出热能，通常这种辐射对人眼来说是不可见的，因为它是以红外波长辐射，但它可以被为此目的设计的电子设备检测到。</p>\n<p>在这种情况下，术语“无源”指的是这样一个事实，即PIR设备不产生或辐射用于检测目的的能量。它们完全通过探测物体发射或反射的红外辐射来工作，它们不能探测或测量热量。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\25e1a9c1a90e43d6b7b4c51fe90884fa.png\"/><br/> <strong>TPA81：</strong></p>\n<p>热电堆阵列，检测2微米~22微米内的红外线（辐射热的波长）<br/> 同时测量8个相邻点的温度<br/> 控制伺服系统来平移模块并建立热成像<br/> 检测2米(6英尺)范围内的蜡烛火焰，不受环境光影响<br/> Arduino IDE</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\61fe8879d46646edb3101718f853becb.png\"/><br/> <strong>电路图：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\de6f04a822fe44c1a21f094e7e4be18f.png\"/><br/> 如果想使用8个PIR传感器，应将8个单个PIR传感器连接到Arduino板上，并逐个读取它们<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\58a970b6eb6143c18bbd25395bf1f6b9.png\"/><br/> <strong>软件部分</strong></p>\n<p>运行Arduino板步骤：</p>\n<ul><li>在www.arduino.cc/en/Main/Software下载操作系统软件，并按照说明安装集成开发环境软件</li><li>运行Arduino IDE，清除文本编辑器，在文本编辑器中复制下面的代码</li><li>导航至草图并包含库(从以下链接下载库)，点击添加压缩库并添加库</li><li>在工具和电路板中选择电路板，选择Arduino Nano</li><li>将Arduino连接到电脑，并在工具和端口中设置通讯端口</li><li>按上传(箭头符号)按钮</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2b5b4417ef5347ef9075ac46a6e928b6.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cf8b93d1faa8425fbe8991ba02d802d5.png\"/><br/> 运行此代码后，在 Arduino IDE 中打开串行终端并查看 TPA81 感应到的 8 阵列温度。每行的第一个数字属于总温度。</p>\n<p>要手动定义手势，需知道手部温度，并将其设置为偏移量。</p>\n<p>将偏移量设置为 29 度，上传以下一代码查看在 TPA81 前的手部动作。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a804a6edaed241a9ab3b77de7c4ea168.png\"/></p>\n<h1><a id=\"5__86\"></a>5 部分核心代码</h1>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Wire.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;TPA81.h&gt;</span></span>\n\n<span class=\"token comment\">// Create new TPA81 instance</span>\nTPA81 tpa<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  Serial<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token number\">9600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// You need to begin the Wire library to use TPA81 library</span>\n  Wire<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">loop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// Print temperature light</span>\n  Serial<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>tpa<span class=\"token punctuation\">.</span><span class=\"token function\">getAmbient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Serial<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Print all temperature point</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    Serial<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>tpa<span class=\"token punctuation\">.</span><span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Serial<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  Serial<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> Signal816<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span> PROGMEM <span class=\"token operator\">=</span> <span class=\"token comment\">//mobie signal</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token number\">0xFE</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x92</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x0A</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x54</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x2A</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x38</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xAA</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x12</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xAA</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x12</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xAA</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x12</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xAA</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x12</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xAA</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> Msg816<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span> PROGMEM <span class=\"token operator\">=</span>  <span class=\"token comment\">//message</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token number\">0x1F</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xF8</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x08</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x18</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x18</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x14</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x28</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x13</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xC8</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x08</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x08</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x1F</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xF8</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> Bat816<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span> PROGMEM <span class=\"token operator\">=</span> <span class=\"token comment\">//batery</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token number\">0x0F</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xFE</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x30</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x26</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xDA</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x26</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xDA</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x26</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xDA</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x26</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xDA</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x30</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x0F</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xFE</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> Bluetooth88<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> PROGMEM <span class=\"token operator\">=</span> <span class=\"token comment\">// bluetooth</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token number\">0x18</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x54</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x32</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x1C</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x1C</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x32</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x54</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x18</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> GPRS88<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> PROGMEM <span class=\"token operator\">=</span> <span class=\"token comment\">//GPRS</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token number\">0xC3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x99</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x24</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x2C</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x24</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x99</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xC3</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> Alarm88<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> PROGMEM <span class=\"token operator\">=</span> <span class=\"token comment\">//alram</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token number\">0xC3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xBD</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x42</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x52</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x4E</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x42</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x3C</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xC3</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">digitalWrite</span><span class=\"token punctuation\">(</span>OLED_DC<span class=\"token punctuation\">,</span> LOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SPIWrite</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>cmd<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">SPIWrite</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> bufferLength<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> bufferLength<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        SPI<span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">SSD1306_begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token function\">pinMode</span><span class=\"token punctuation\">(</span>OLED_RST<span class=\"token punctuation\">,</span> OUTPUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">pinMode</span><span class=\"token punctuation\">(</span>OLED_DC<span class=\"token punctuation\">,</span> OUTPUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">pinMode</span><span class=\"token punctuation\">(</span>OLED_CS<span class=\"token punctuation\">,</span> OUTPUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    SPI<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    SPI<span class=\"token punctuation\">.</span><span class=\"token function\">setClockDivider</span><span class=\"token punctuation\">(</span>SPI_CLOCK_DIV128<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">digitalWrite</span><span class=\"token punctuation\">(</span>OLED_CS<span class=\"token punctuation\">,</span> LOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">digitalWrite</span><span class=\"token punctuation\">(</span>OLED_RST<span class=\"token punctuation\">,</span> HIGH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">digitalWrite</span><span class=\"token punctuation\">(</span>OLED_RST<span class=\"token punctuation\">,</span> LOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">digitalWrite</span><span class=\"token punctuation\">(</span>OLED_RST<span class=\"token punctuation\">,</span> HIGH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">command</span><span class=\"token punctuation\">(</span>SSD1306_DISPLAYOFF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">command</span><span class=\"token punctuation\">(</span>SSD1306_SETDISPLAYCLOCKDIV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                              <span class=\"token comment\">// the suggested ratio 0x80</span>\n    \n    <span class=\"token function\">command</span><span class=\"token punctuation\">(</span>SSD1306_SETMULTIPLEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x3F</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">command</span><span class=\"token punctuation\">(</span>SSD1306_SETDISPLAYOFFSET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                               <span class=\"token comment\">// no offset</span>\n    <span class=\"token function\">command</span><span class=\"token punctuation\">(</span>SSD1306_SETSTARTLINE <span class=\"token operator\">|</span> <span class=\"token number\">0x0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// line #0</span>\n    <span class=\"token function\">command</span><span class=\"token punctuation\">(</span>SSD1306_CHARGEPUMP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>VCCSTATE <span class=\"token operator\">==</span> SSD1306_EXTERNALVCC<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0x10</span> <span class=\"token operator\">:</span> <span class=\"token number\">0x14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">command</span><span class=\"token punctuation\">(</span>SSD1306_MEMORYMODE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                              <span class=\"token comment\">// 0x0 act like ks0108</span>\n    \n    <span class=\"token function\">command</span><span class=\"token punctuation\">(</span>SSD1306_SEGREMAP <span class=\"token operator\">|</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">command</span><span class=\"token punctuation\">(</span>SSD1306_COMSCANDEC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">command</span><span class=\"token punctuation\">(</span>SSD1306_SETCOMPINS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// TODO - calculate based on _rawHieght ?</span>\n    <span class=\"token function\">command</span><span class=\"token punctuation\">(</span>SSD1306_SETCONTRAST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>VCCSTATE <span class=\"token operator\">==</span> SSD1306_EXTERNALVCC<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0x9F</span> <span class=\"token operator\">:</span> <span class=\"token number\">0xCF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">command</span><span class=\"token punctuation\">(</span>SSD1306_SETPRECHARGE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>VCCSTATE <span class=\"token operator\">==</span> SSD1306_EXTERNALVCC<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0x22</span> <span class=\"token operator\">:</span> <span class=\"token number\">0xF1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">command</span><span class=\"token punctuation\">(</span>SSD1306_SETVCOMDETECT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">command</span><span class=\"token punctuation\">(</span>SSD1306_DISPLAYALLON_RESUME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">command</span><span class=\"token punctuation\">(</span>SSD1306_NORMALDISPLAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">command</span><span class=\"token punctuation\">(</span>SSD1306_DISPLAYON<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">SSD1306_clear</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span><span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> WIDTH <span class=\"token operator\">*</span> HEIGHT <span class=\"token operator\">/</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tbuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">SSD1306_pixel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> color<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span><span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&gt;</span> WIDTH <span class=\"token operator\">||</span> y <span class=\"token operator\">&gt;</span> HEIGHT<span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span>\n        buffer<span class=\"token punctuation\">[</span>x<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">/</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>WIDTH<span class=\"token punctuation\">]</span> <span class=\"token operator\">|=</span> <span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">%</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        buffer<span class=\"token punctuation\">[</span>x<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">/</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>WIDTH<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">%</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">SSD1306_char1616</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> y<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> chChar<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span><span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token class-name\">uint8_t</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">uint8_t</span> chTemp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y0 <span class=\"token operator\">=</span> y<span class=\"token punctuation\">,</span> chMode <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tchTemp <span class=\"token operator\">=</span> <span class=\"token function\">pgm_read_byte</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Font1612<span class=\"token punctuation\">[</span>chChar <span class=\"token operator\">-</span> <span class=\"token number\">0x30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tchMode <span class=\"token operator\">=</span> chTemp <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x80</span><span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n\t\t\t<span class=\"token function\">SSD1306_pixel</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> chMode<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tchTemp <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\ty<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> y0<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\ty <span class=\"token operator\">=</span> y0<span class=\"token punctuation\">;</span>\n\t\t\t\tx<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">SSD1306_char</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> acsii<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> mode<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span><span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> y0<span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> acsii <span class=\"token operator\">-</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>size<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">==</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">)</span>temp <span class=\"token operator\">=</span> <span class=\"token function\">pgm_read_byte</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Font1206<span class=\"token punctuation\">[</span>ch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> temp <span class=\"token operator\">=</span> <span class=\"token operator\">~</span><span class=\"token function\">pgm_read_byte</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Font1206<span class=\"token punctuation\">[</span>ch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> \n        <span class=\"token punctuation\">{<!-- --></span>            \n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">)</span>temp <span class=\"token operator\">=</span> <span class=\"token function\">pgm_read_byte</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Font1608<span class=\"token punctuation\">[</span>ch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> temp <span class=\"token operator\">=</span> <span class=\"token operator\">~</span><span class=\"token function\">pgm_read_byte</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Font1608<span class=\"token punctuation\">[</span>ch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span> <span class=\"token function\">SSD1306_pixel</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token function\">SSD1306_pixel</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            temp <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            y<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">-</span>y0<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> size<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                y <span class=\"token operator\">=</span> y0<span class=\"token punctuation\">;</span>\n                x<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">SSD1306_string</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pString<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> Size<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> Mode<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span><span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pString <span class=\"token operator\">!=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>       \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>WIDTH <span class=\"token operator\">-</span> Size <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            y <span class=\"token operator\">+=</span> Size<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>HEIGHT <span class=\"token operator\">-</span> Size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                y <span class=\"token operator\">=</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token function\">SSD1306_char</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pString<span class=\"token punctuation\">,</span> Size<span class=\"token punctuation\">,</span> Mode<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        x <span class=\"token operator\">+=</span> Size <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        pString<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">SSD1306_char3216</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> y<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> chChar<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span><span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">uint8_t</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">uint8_t</span> chTemp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y0 <span class=\"token operator\">=</span> y<span class=\"token punctuation\">,</span> chMode <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        chTemp <span class=\"token operator\">=</span> <span class=\"token function\">pgm_read_byte</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Font3216<span class=\"token punctuation\">[</span>chChar <span class=\"token operator\">-</span> <span class=\"token number\">0x30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            chMode <span class=\"token operator\">=</span> chTemp <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x80</span><span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n            <span class=\"token function\">SSD1306_pixel</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> chMode<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            chTemp <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            y<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> y0<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                y <span class=\"token operator\">=</span> y0<span class=\"token punctuation\">;</span>\n                x<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">SSD1306_bitmap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> x<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint8_t</span> y<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>pBmp<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> chWidth<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> chHeight<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span><span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token class-name\">uint8_t</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> byteWidth <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>chWidth <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">&lt;</span> chHeight<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span>chWidth<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">pgm_read_byte</span><span class=\"token punctuation\">(</span>pBmp <span class=\"token operator\">+</span> j <span class=\"token operator\">*</span> byteWidth <span class=\"token operator\">+</span> i <span class=\"token operator\">/</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">128</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&amp;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token function\">SSD1306_pixel</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> i<span class=\"token punctuation\">,</span>y <span class=\"token operator\">+</span> j<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\t\t\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">SSD1306_display</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span><span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">command</span><span class=\"token punctuation\">(</span>SSD1306_COLUMNADDR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">//cloumn start address</span>\n\t<span class=\"token function\">command</span><span class=\"token punctuation\">(</span>WIDTH <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//cloumn end address</span>\n\t<span class=\"token function\">command</span><span class=\"token punctuation\">(</span>SSD1306_PAGEADDR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">//page atart address</span>\n\t<span class=\"token function\">command</span><span class=\"token punctuation\">(</span>PAGES <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//page end address</span>\n    <span class=\"token function\">digitalWrite</span><span class=\"token punctuation\">(</span>OLED_DC<span class=\"token punctuation\">,</span> HIGH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SPIWrite</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> WIDTH <span class=\"token operator\">*</span> HEIGHT <span class=\"token operator\">/</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<br/>\n<h1><a id=\"5__350\"></a>5 最后</h1>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-30 09:37:20", "summary": "文章目录前言简介主要器件实现效果设计原理部分核心代码最后前言这两年开始毕业设计和毕业答辩的要求和难度不断提升，传统的毕设题目缺少创新和亮点，往往达不到毕业答辩的要求，这两年不断有学弟学妹告诉学长自己做"}