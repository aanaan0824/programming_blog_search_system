{"blogid": "126438153", "writerAge": "码龄1年", "writerBlogNum": "32", "writerCollect": "295", "writerComment": "904", "writerFan": "458", "writerGrade": "5级", "writerIntegral": "1852", "writerName": "南猿北者", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126438153.jpg", "writerRankTotal": "10642", "writerRankWeekly": "475", "writerThumb": "639", "writerVisitNum": "11539", "blog_read_count": "431", "blog_time": "已于 2022-08-24 21:24:21 修改", "blog_title": "C++核心编程（一）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atelier-sulphurpool-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_6\">前言</a></li><li><a href=\"#_13\">一、内存四区</a></li><li><ul><li><a href=\"#_16\">程序运行前：</a></li><li><ul><li><a href=\"#_18\">代码区</a></li><li><a href=\"#_22\">全局区</a></li></ul>\n</li><li><a href=\"#_26\">程序运行之后：</a></li><li><ul><li><a href=\"#_27\">栈区</a></li><li><a href=\"#_38\">堆区</a></li><li><ul><li><a href=\"#new_41\">new的基本语法</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_110\">内存四区的意义</a></li></ul>\n</li><li><a href=\"#_112\">二、引用</a></li><li><ul><li><a href=\"#_122\">引用的注意事项</a></li><li><a href=\"#_146\">引用作为函数参数和返回值</a></li><li><a href=\"#_199\">引用作为函数返回值</a></li></ul>\n</li><li><a href=\"#_223\">三、函数提高</a></li><li><ul><li><a href=\"#_224\">函数默认参数</a></li><li><ul><li><a href=\"#_233\">注意事项</a></li></ul>\n</li><li><a href=\"#_245\">函数占位参数</a></li><li><a href=\"#_252\">函数重载</a></li><li><ul><li><a href=\"#_295\">函数重载注意事项</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_339\">四、类和对象</a></li><li><ul><li><a href=\"#_347\">封装的意义</a></li><li><a href=\"#_379\">访问权限</a></li><li><a href=\"#classstruct_389\">class和struct</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_6\"></a>前言</h1>\n<p>记录一下C++基本语法</p>\n<hr/>\n<h1><a id=\"_13\"></a>一、内存四区</h1>\n<p>C++程序在执行时将内存分为四个区域；</p>\n<h2><a id=\"_16\"></a>程序运行前：</h2>\n<p>在程序编译后，生成了.exe文件，未执行该程序前分为两个区域：</p>\n<h3><a id=\"_18\"></a>代码区</h3>\n<p>1、存放cpu执行的机器指令；<br/> 2、代码区是共享的，共享的目的是针对频繁被执行的程序，只需要在内存中存在一份即可；<br/> 3、代码区是只读的，使其只读的原因是防止程序意外地修改了它的指令；</p>\n<h3><a id=\"_22\"></a>全局区</h3>\n<p>1、全局变量和静态变量、const修饰的全局变量存放于此；<br/> 2、全局区还包括：常量区、字符常量和其它常量也存在于此，该区域只可读；<br/> 3、该区域的数据在程序执行玩过后，由操作系统进行释放；</p>\n<h2><a id=\"_26\"></a>程序运行之后：</h2>\n<h3><a id=\"_27\"></a>栈区</h3>\n<p>1、存放函数的参数、局部变量，由编译器自动分配释放；<br/> 2、注意事项：不要放回局部变量的地址，栈区开辟的空间由编译器自动释放；<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\69cf1950e02c437dade4aa5fc6c0f9e2.png\"/><br/> 我们看一看运行结果：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f002b6de9b7f433fae6475142496ab4f.png\"/><br/> 明明是同一块空间，为什么访问出来的值确不一样了？<br/> 主要是应为a的空间是在fun函数上开辟的，随着fun调用结束，fun函数栈帧也就销毁了，a又是依赖fun’函数的函数栈帧“存活”的，栈帧都没了，a的空间也就理应呗操作系统回收，不在属于你，你也就无权访问了；因此，我们在返回a的地址时，虽然能找到这块空间，但是如果我们硬是强行访问他，就会造成非法访问，编译器会报警告；当然编译器为了防止你的误操作，在我们返回栈上开辟的空间的地址的时候，我们暂时不会去修改这块空间的值，这也是我们第一次*p去访问a能得到的结果，但是第二次及后面的多次去访问就不行了，这是因为编译器认为你第一次已经访问了这块空间，已经把想要的数据拿到了，所在接下来他就会把这块空间的数据给清除了，拿去给操作系统使用；这也是为什么第二次打印的时候时乱码，也是为什么<strong>不要返回局部变量的地址的原因；</strong></p>\n<h3><a id=\"_38\"></a>堆区</h3>\n<p>1、由程序员分配释放，若程序员不释放，则在程序结束后由操作系统来回收<br/> 2、在C++中主要利用new这个关键字来向堆区申请空间；</p>\n<h4><a id=\"new_41\"></a>new的基本语法</h4>\n<p>在C++中new的基本语法就是<br/> new+类型+（初始值）；<br/> 接下来我们来实战看看；<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4e02b60ded864b4da65fbc04a3b6a4c9.png\"/><br/> 当然我们也可以用花括号的方式来初始化所开辟的空间：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\035036929c8440db8912782cbfcf7565.png\"/></p>\n<p>当然这个初始值可要可不要；<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7087ddc9be264cd5bd2cd77e8105c8a4.png\"/><br/> 如果你带了括号，而没有给括号里面给值，默认用0来初始化；<br/> 如果你没有括号那一部分，那么就是随机值；</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7022ebb0516545d6bb498bd3da3c6b24.png\"/><br/> 当然我们也可以用new来开辟一段连续的空间：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\86cfad6eca284a90845063f21d05bba5.png\"/></p>\n<p>对于数组来说，赋值的话，只能用花括号来赋值，不能用圆括号；<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\044057ed089b4980a3fee993cec41ced.png\"/><br/> 不能用圆括号对数组进行赋值：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\34c59dcc5c544f6381ea656d267ee187.png\"/></p>\n<p>如果不赋值的话，就是随机值；<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\83cf7f41d1d24301880ded7cc259173d.png\"/><br/> 对于new所开辟的空间，我们不必再像C语言那样判断一下，返回的指针是不是空指针，因为如果开辟的空间太大了，编译器是会抛出异常报错的；<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8ea99bbcbea54bbeac1547882c1b5fb4.png\"/><br/> 当然既然我们开辟了空间就得释放啊！<br/> C++给我们提供了delete关键字，用于释放所开辟的空间：<br/> 语法：delete+地址<br/> 如果开辟的是块连续的空间我们就得delete+[ ]+首地址；（告诉编译器我要释放的是一块连续的空间）<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\725cf1cdfa1e4dbdbfcca76a86787d8b.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6e921f54389842c8911d7b0f7fd3c107.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0b6fcd6433cd4f6295ac4722449cc1d2.png\"/><br/> <strong>释放数组：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2b9b90f93298448bb630c4cc71659db7.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5eb349e14bdb4c3eba89eab00ef83dc1.png\"/><br/> 既然了解了这四大区，接下来我们再从<strong>地址的方面</strong>了解一下这四大区：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> g_a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> g_b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"全局区:\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>g_a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>g_b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span><span class=\"token string\">\"abcd\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"栈区：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> arr <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"堆区:\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> p1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> p2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> p3 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d0c61514369b45c3a5152c0bffb74c90.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4a9b109f6acf4c2bb23e9904a98cca0c.png\"/></p>\n<p>我们从地址上就可以看出来其实这几个区隔的比较远，通过多组结果我么发现，全局区的数据集中在一起，栈区的数据集中再一起，堆区的数据也是集中在一起的，我们发现这些数据的存储方式是那么的有顺序，这更加证明了这几个区的存在；</p>\n<h2><a id=\"_110\"></a>内存四区的意义</h2>\n<p>不同区域存放的数据，赋予不同的生命周期，给我们最大的灵活编程；</p>\n<h1><a id=\"_112\"></a>二、引用</h1>\n<p>在C++中存在引用这个东西，这是个什么东西呢，简单来说就是取别名：<br/> 比如：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\91a3255e7c5c439dafe0ee3d7188f77e.png\"/><br/> 这块空间本名叫a但是我们还可以给这块空间取个别名叫做b，以后呢我们说b和a都是代表着同一块空间；<br/> 引用的基本语法：<br/> 类型+&amp;+别名=原名；<br/> 具体看看：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f46d64ffc2ec4ce79f84a8b50169e58a.png\"/><br/> 既然都是表示的同一块空间，那么我们自然也就能对这块空间进行修改：</p>\n<h2><a id=\"_122\"></a>引用的注意事项</h2>\n<p>1、引用必须赋初值；<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f5d99a7413d144c3aa73b200f1e83040.png\"/><br/> 2、所赋的初值必须是一块合法的空间，不能是常量；<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c374ad85510345468fbca53da93cbffd.png\"/><br/> 3、类型必须一样<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2b61e33634524300988e1b77a32fc3cb.png\"/><br/> 类型不一样编译器会报错；<br/> 4、const 修饰的别名<br/> 表示这块空间里面的值不能被修改，只能可读<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8064da3ecb4a41989c93fcc85c3d7076.png\"/><br/> 5、别名一旦取号过后，就不能更改；<br/> 别名只能表示一块空间，不能表示多块空间：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\636aa4065d72412387c26b22f82f90b4.png\"/></p>\n<p>b我原本是a的别名，那么现在我又用b来表示c的别名，对不起，编译器不允许，语法也不支持；也就表面在同一个作用域下，同一个别名只能作用于一块空间，不能重复利用；<br/> 这里也就谈到了引用的本质</p>\n<pre><code class=\"prism language-cpp\">\n<span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>b<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span><span class=\"token comment\">//本质就是int *const b=&amp;a//const限制了其指向不可被更改，这也就解释了为啥别名一旦取名成功就不能更改引用的对象了；</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>c<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//本质就是int tmp=10;const int &amp;c=tmp;//这些都是编译器在编译时自动做的一些转换；</span>\n</code></pre>\n<h2><a id=\"_146\"></a>引用作为函数参数和返回值</h2>\n<p>我们先分别用<br/> 1、值传递<br/> 2、址传递<br/> 3、引用传递<br/> 来实现一下两个数的交换：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Swap1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token comment\">//值传递</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n\ta <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n\tb <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Swap2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span><span class=\"token comment\">//址传递</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>a <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>b <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Swap3</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token comment\">//引用传递</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n\tm <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n\tn <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//引用作为参数</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Swap1交换之前a=\"</span> <span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"b=\"</span> <span class=\"token operator\">&lt;&lt;</span>b<span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Swap1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Swap1交换之后a=\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b=\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\ta <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Swap2交换之前a=\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b=\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Swap2</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Swap2交换之后a=\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b=\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\n\ta <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Swap3交换之前a=\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b=\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Swap3</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Swap3交换之后a=\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b=\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\61bbabc4af0243a68fe52c7f93669bce.png\"/><br/> 首先值传递和址传递没问题；<br/> 我们重点来讨论一下引用传递；<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8db421b2bfce4eb2b096da761bf86f2c.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\29bb045a0d9e4ef698f26e6d4819da56.png\"/><br/> 我们传参的时候，就是将a的别名取名为m，b的别名取为n这没问题吧，那么我们的m，n与a，b是不是表示的是同一块空间，我们对同一块空间进行操作自然也就会交换两个变量之间的值；</p>\n<h2><a id=\"_199\"></a>引用作为函数返回值</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">19</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> ret <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\081dc9f2ee2c480ba6d7ed54f7caf888.png\"/><br/> 我们可以知道b变量是在全局区上的，因为前面又static修饰，b是一个静态变量；<br/> 生命周期也就是伴随程序消亡；<br/> 引用做返回值，我们可以理解为返回的是改变量的名字；<br/> 我们接收的时候既可以用引用的方式接收，也可以用int来接收，二者都没有错误；<br/> 前者的意思就是将b取别名；后者是使用的b的内容；<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\489ab327124b439e8bac26e0cd217346.png\"/><br/> 当然既然是这样的话，我们的返回值，还可以做左值来操作：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dd64b284792e4441997b00b347c7e064.png\"/></p>\n<h1><a id=\"_223\"></a>三、函数提高</h1>\n<h2><a id=\"_224\"></a>函数默认参数</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e190ea1c83ed4c88bb8dd6d125d5a781.png\"/><br/> 我们知道这是正常的函数调用；<br/> 那么我们可不可以在调用Add函数的时候，不传递参数直接调用呢？<br/> 这肯定是不行的；<br/> 但是如果我们给了参数一个默认参数似乎就可以了；<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\710df19aa0c548d3ac209536d07547b0.png\"/><br/> 其中给参数赋值的操作叫做函数默认参数，就是只要给定了默认参数，那么我们对应的参数，如果在没有传值的情况下，就会使用默认参数：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7e3c721ebb7d41c2ac48d6006712afad.png\"/></p>\n<h3><a id=\"_233\"></a>注意事项</h3>\n<p>1、从哪里开始的默认参数，那么从左往右都必须拥有默认参数：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f1080196c4244b74852dcd1bfd092258.png\"/><br/> 比如我们从z开始写的默认参数，那么从z开始从左往右的所有参数都必须写默认参数，否则编译器将会报错；<br/> 2、函数声明和函数定义的时候，默认参数只能存在在其中一个；函数定义时有了默认参数，函数声明时就不能有默认参数；函数声明时有了默认参数，函数定义时就不能有默认参数；<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1ad409dbb39b4e5da2d3c93120f5bf90.png\"/><br/> 或者：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d74bf0b5e3a2488194cf5ef3103020db.png\"/></p>\n<p>错误写法：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3c4852a137cf41d2afed767d4789457c.png\"/><br/> 因为我声明时候的默认参数和定义时候的默认参数不一样，就会产生歧义，编译器就会不知道按照那个默认参数来执行；就算我们声明和定义的默认参数一样，编译器还是会报错，就是为了从根上断绝这种错误的写法！！！声明和定义只能存在于其中一个！！！；</p>\n<h2><a id=\"_245\"></a>函数占位参数</h2>\n<p>故名思意就是占个位置使的：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b019e58f0e23463983e5cb7495208822.png\"/><br/> 我们传参的时候必须给这个位置传递一个参数，尽管这个参数没有用上，就是必须传，不传就给你报错；<br/> 当然我们可以给这个占位参数给个默认参数：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b76f9d6ecf2340118ef41df047258dbb.png\"/><br/> 似乎变得更没用了🐵🐵🐵，目前阶段的确是没用，随着后期学习我们再来开发其进一步功能！！！</p>\n<h2><a id=\"_252\"></a>函数重载</h2>\n<p><strong>作用：</strong> 函数名可以相同，提高复用性；<br/> <strong>函数重载满足条件：</strong><br/> 1、同一个作用域下；<br/> 2、函数名称相同；<br/> 3、参数不同（参数类型不同、顺序不同、个数不同等）<br/> 示例：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//1</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"fun()\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token comment\">//2</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"fun(int a)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token comment\">//3</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"fun(int a,int b)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span> b<span class=\"token punctuation\">)</span><span class=\"token comment\">//4</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"fun(int a,double b)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> <span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token comment\">//5</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"fun(double b,int a)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//调用函数3</span>\n\t<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//调用函数2</span>\n\t<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//调用函数4</span>\n\t<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//调用函数1</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_295\"></a>函数重载注意事项</h3>\n<p>注意在设计重载函数的时候，确保唯一性，避免引发歧义：<br/> 比如</p>\n<pre><code class=\"prism language-cpp\">\n <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"fun()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"fun(int n=0)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>首先语法上没有错误，也满足函数重载的条件：<br/> 那么如果我们调用fun( );实际上是会去调用那个呢，这样写的目的是无参，还是我想使用默认参数？这样就会引发歧义，编译器不知道执行那个，就会报错；<br/> 但是如果你是这样调用fun（1）；这样就明确了，我们会去调用下面一个函数，编译器也不会报错；<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bc060fb8543a49b2b24f48bd73c657df.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4d1148bd6601404490289377611fc511.png\"/><br/> 我们在设计重载函数的时候，应该避免这样设计，尽量避免歧义的出现；<br/> 参数为引用：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"fun(int &amp;b)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"fun(const int &amp;b)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这也满足函数重再的条件吧，一个为int，一个为const int；<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\99212ce9b9c2461e94b2f6031ee8ecdf.png\"/><br/> 那我们在调用的时候，好像掉哪一个都可以，好像又引发歧义了，但是事实并不是如此；<br/> 对于第一个fun函数接受的是可访问可修改的，而我们穿过去的也是可访问，可修改的；第二个是只可访问，不可修改，编译器觉得调用第一个更好一些，自然也就不会发生歧义，尽管我们可以调用第二个，但是在编译器看来，自然是第一个更全面，更好；<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\451eed82152f48d796117e2f7b7ee6de.png\"/><br/> 如果我们传的是一个常量？<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b1c35c4557af491c86c5e55f552f041e.png\"/><br/> 自然也就调用第二个；为什么？<br/> int &amp;b=10；是非法操作，自然不可能；<br/> const int &amp;b=10；合法操作，自然可以；</p>\n<h1><a id=\"_339\"></a>四、类和对象</h1>\n<p>C++面向对象的三大特性：封装、继承、多态；<br/> C++认为万事万物皆为对象，对象上有其属性和行为；</p>\n<p>人可以作为对象，属性有姓名、年龄、身高、体重…行为有走、跑、跳、吃饭、唱歌…<br/> 车也可以作为对象，属性有轮胎、方向盘、车灯…行为有载人、放音乐、放空调…</p>\n<p><strong>具有相同性质的对象，我们可以抽象称为类，人属于人类,车属于车类；</strong></p>\n<h2><a id=\"_347\"></a>封装的意义</h2>\n<p>封装是C+ +面向对象三大特性之一</p>\n<p>封装的意义:<br/> ●将属性和行为作为一个整体，表现生活中的事物<br/> ●将属性和行为加以权限控制<br/> 封装意义一:<br/> 在设计类的时候，属性和行为写在一-起， 表现事物<br/> 语法：class 类名（访问权限：属性：行为）<br/> 示例：<br/> 设计一个学生类，并展示其姓名学号</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">students</span><span class=\"token comment\">//一个类的完整形式：</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><span class=\"token comment\">//权限（默认是私有）</span>\n\tstring name<span class=\"token punctuation\">;</span>\n\tstring sex<span class=\"token punctuation\">;</span>\n\tstring num<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//属性</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">showMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"姓名:\"</span> <span class=\"token operator\">&lt;&lt;</span> name<span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"性别:\"</span> <span class=\"token operator\">&lt;&lt;</span> sex <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"年龄:\"</span> <span class=\"token operator\">&lt;&lt;</span> age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"学号:\"</span> <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token comment\">//行为</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b260d9abd8bb438a9f575f412064edb7.png\"/></p>\n<h2><a id=\"_379\"></a>访问权限</h2>\n<p><strong>class默认访问权限是私有；</strong></p>\n<p><strong>public：</strong> 公共权限：类内可以访问，类外也可以访问；<br/> <strong>private:</strong> 私有权限：类内可以访问，类外不可以访问；<br/> <strong>protected：</strong> 保护权限：类内可以访问，类外不可以访问；</p>\n<p>虽然私有权限和公共权限似乎是相同的，但是随着我们深入的学习，我们会发现之间的区别的；<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0dd0f54d457247c984a444a1e9835c7f.png\"/><br/> 随着我们权限的设置，性别，年龄等属性我们再类外也就无法访问；</p>\n<h2><a id=\"classstruct_389\"></a>class和struct</h2>\n<p>其实从class的访问上我们可以看出和struct完全一样，那么struct可不可以用来表示类呢？<br/> 当然可以；<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5ef0e9a5bbe94010bb84769535cffa57.png\"/></p>\n<p>那么岂不是于class没有任何区别了？<br/> 那到不是，struct默认权限是公共；<br/> class默认权限是私有；<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\caa30323d23a4614a52b0e9ef4a5004e.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-24 21:24:21", "summary": "文章目录前言一、内存四区程序运行前：代码区全局区程序运行之后：栈区堆区的基本语法内存四区的意义二、引用引用的注意事项引用作为函数参数和返回值引用作为函数返回值三、函数提高函数默认参数注意事项函数占位参"}