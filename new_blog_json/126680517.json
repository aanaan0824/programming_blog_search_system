{"blogid": "126680517", "writerAge": "码龄3年", "writerBlogNum": "207", "writerCollect": "244", "writerComment": "10", "writerFan": "41", "writerGrade": "5级", "writerIntegral": "2321", "writerName": "ONE_Day|", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126680517.jpg", "writerRankTotal": "10216", "writerRankWeekly": "2125", "writerThumb": "229", "writerVisitNum": "69231", "blog_read_count": "97", "blog_time": "于 2022-09-03 18:06:29 发布", "blog_title": "STC15单片机-通过EEPROM恢复PWM亮度", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"EEPROMPWM_0\"></a>通过EEPROM实现掉电后恢复PWM灯亮度</h2>\n<h3><a id=\"EEPROM_2\"></a>EEPROM介绍</h3>\n<p>EEPROM (Electrically Erasable Programmable Read-Only Memory)，电可擦除可编程只读存储器，一种掉电后数据不丢失的存储芯片。</p>\n<p>EEPROM 可以在电脑上或专用设备上擦除已有信息，重新编程。一般用在即插即用</p>\n<h3><a id=\"EEPROM_8\"></a>EEPROM的发展</h3>\n<h4><a id=\"ROM_10\"></a>ROM：</h4>\n<p>在微机的发展初期，BIOS都存放在ROM（Read Only Memory，只读存储器）中。ROM内部的资料是在ROM的制造工序中，在工厂里用特殊的方法被烧录进去的，<strong>其中的内容只能读不能改，一旦烧录进去，用户只能验证写入的资料是否正确，不能再作任何修改</strong>。如果发现资料有任何错误，则只有舍弃不用，重新订做一份。ROM是在生产线上生产的，由于成本高，一般只用在大批量应用的场合。</p>\n<h4><a id=\"PROM_14\"></a>PROM:</h4>\n<p>由于ROM制造和升级的不便，后来人们发明了PROM（Programmable ROM，可编程ROM）。最初从工厂中制作完成的PROM内部并没有资料，<strong>用户可以用专用的编程器将自己的资料写入，但是这种机会只有一次，一旦写入后也无法修改</strong>，若是出了错误，已写入的芯片只能报废。PROM的特性和ROM相同，但是其成本比ROM高，而且写入资料的速度比ROM的量产速度要慢，一般只适用于少量需求的场合或是ROM量产前的验证。</p>\n<h4><a id=\"EPROM_18\"></a>EPROM:</h4>\n<p>EPROM（Erasable Programmable ROM，可擦除可编程ROM）<strong>芯片可重复擦除和写入</strong>，解决了PROM芯片只能写入一次的弊端。EPROM芯片有一个很明显的特征，在其正面的陶瓷封装上，开有一个玻璃窗口，透过该窗口，可以看到其内部的集成电路，<strong>紫外线透过该孔照射内部芯片就可以擦除其内的数据，完成芯片擦除的操作要用到EPROM擦除器</strong>。EPROM内资料的写入要用专用的编程器，并且往芯片中写内容时必须要加一定的编程电压（VPP=12~24V，随不同的芯片型号而定）。EPROM的型号是以27开头的，如27C020(8*256K)是一片2M Bits容量的EPROM芯片。EPROM芯片在写入资料后，还要以不透光的贴纸或胶布把窗口封住，以免受到周围的紫外线照射而使资料受损。</p>\n<h4><a id=\"EEPROM_22\"></a>EEPROM:</h4>\n<p>由于EPROM操作的不便，后来出主板上BIOS ROM芯片大部分都采用EEPROM（Electrically Erasable Programmable ROM，电可擦除可编程ROM）。<strong>EEPROM的擦除不需要借助于其它设备，它是以电子信号来修改其内容的，而且是以Byte为最小修改单位，不必将资料全部洗掉才能写入，彻底摆脱了EPROM Eraser和编程器的束缚</strong>。EEPROM在写入数据时，仍要利用一定的编程电压，此时，只需用厂商提供的专用刷新程序就可以轻而易举地改写内容，所以，它属于双电压芯片。借助于EEPROM芯片的双电压特性，可以使BIOS具有良好的防毒功能，在升级时，把跳线开关打至“on”的位置，即给芯片加上相应的编程电压，就可以方便地升级；平时使用时，则把跳线开关打至“off”的位置，防止CIH类的病毒对BIOS芯片（BIOS是Basic Input Output System的缩写，意思是基本输入输出系统，是用于计算机开机过程中各种硬件设备的初始化和检测的芯片，容量是1M或2M甚至8M。）的非法修改。所以，仍有不少主板采用EEPROM作为BIOS芯片并作为自己主板的一大特色 。</p>\n<h3><a id=\"STC15EEPROM_26\"></a>STC15系列单片机EEPROM的应用</h3>\n<p>STC15系列单片机内部集成了大容量的EEPROM，其与程序空间是分开的。利用ISP/IAP技术可将内部Data Flash当EEPROM，擦写次数在10万次以上。EEPROM可分为若干个扇区，<strong>每个扇区包含512字节</strong>。使用时，建议同一次修改的数据放在同一个扇区，不是同一次修改的数据放在不同的扇区，不一定要用满。数据存储器的擦除操作是按扇区进行的。</p>\n<p>EEPROM可用于保存一些需要在应用过程中修改并且掉电不丢失的参数数据。在用户程序中，可以对EEPROM进行字节读/字节编程/扇区擦除操作。在工作电压VCC偏低时，建议不要进行EEPROM/IAP操作。</p>\n<h3><a id=\"IAPEEPROM_32\"></a>IAP及EEPROM新增特殊功能寄存器介绍</h3>\n<p>要使用到IAP对EEPROM进行操作，则需要配置以下的寄存器，除了PCON可以通过烧录软件STC-ISP进行选择而不需要编程配置，寄存器的详细用法可看数据手册</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f64e616738c748cbbddefa978a00b8eb.png\"/></p>\n<h3><a id=\"EEPROM_41\"></a>EEPROM扇区默认数据</h3>\n<p>数据手册说到：</p>\n<ol><li>3个基本命令----字节读，字节编程，扇区擦除</li><li>字节编程：将“1”写成“1”或“0”，将“0”写成“0”。如果某字节是FFH，才可对其进行字节编程。如果该字节不是FFH，则须先将整个扇区擦除，因为只有“扇区擦除”才可以将“0”变为“1”。</li><li>扇区擦除：只有“扇区擦除”才可能将“0”擦除为“1”。</li></ol>\n<p>所以扇区内如果从来没有被写入的话，<strong>默认的数据是FFH</strong>，因为只有为1，才能通过字节编程将其改变为1或0，就得到自己想写入的数据，如果本来是0的话，就只能被写成0，无法写入自己的数据；</p>\n<p>在写入数据之前，都要擦除一次扇区</p>\n<h3><a id=\"EEPROM_55\"></a>EEPROM空间大小及地址</h3>\n<p>手上开发板的型号是STC15L2K32S2，字节数是29K，扇区数58个，起始地址：0000h，结束地址：73FFh</p>\n<p>数据手册中介绍完不同型号的EEPROM空间大小后，就有扇区的地址分布图</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4c947c5efee9416bb74a132508d33145.png\"/></p>\n<h3><a id=\"_66\"></a>程序</h3>\n<h4><a id=\"_68\"></a>文件结构</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5bdfd9ebd1bc40e8b6fe61f012e9e12c.png\"/></p>\n<p>main.c -&gt; 主函数文件，包含 main 函数等；</p>\n<p>Public.c -&gt; 公共函数文件，包含 Delay 延时函数等；</p>\n<p>Sys_init -&gt; 系统初始化函数，包含 GPIO 初始化函数等；</p>\n<p>LED.c -&gt; LED 外设函数，包含 LED 打开、关闭函数等；</p>\n<p>Timer0.c -&gt; 定时器函数，包含定时器初始化，中断函数等；</p>\n<p>KEY1.c -&gt; 按键 1 函数，包含按键检测，中断函数等；</p>\n<p>KEY2.c -&gt; 按键 2 函数，包含按键状态机检测函数等；</p>\n<p><strong>PWM.c -&gt; PWM 初始化、亮度调节、占空比储存与恢复函数等；</strong></p>\n<p><strong>IAP.c -&gt; 字节读、字节写、扇区擦除等函数。</strong></p>\n<h4><a id=\"_93\"></a>程序思路</h4>\n<p>1.占空比备份检测到按键 2 有动作，调整占空比改变 PWM 灯亮度后，备份占空比。</p>\n<p>2.占空比恢复，亮度恢复上电进行 PWM 初始化时，恢复占空比，恢复亮度。</p>\n<h4><a id=\"IAPh_101\"></a>IAP.h</h4>\n<p>主要是宏定义要存储占空比的扇区地址，后面备份时用到的写入次数，以及结构体，包含IAP操作的函数指针</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">__IAP_H_</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">__IAP_H_</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IAP_PWM_DUTY_ADDR</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x0000</span>  </span><span class=\"token comment\">//PWM占空比存储地址，使用第一个扇区</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IAP_CNT</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">10</span>   </span><span class=\"token comment\">//写入字节的最大次数</span></span>\n\n<span class=\"token comment\">//定义结构体类型</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">uint8_t</span> ucIAP_Flag<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//IAP操作标志位</span>\n    <span class=\"token class-name\">uint8_t</span> ucIAP_Cnt<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//IAP操作计数</span>\n    <span class=\"token class-name\">uint8_t</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>IapReadByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span>    <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>IapProgramByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">uint8_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span>    <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>IapEraseSector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>IAP_t<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* extern variables-----------------------------------------------------------*/</span>\n<span class=\"token keyword\">extern</span> IAP_t IAP<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* extern function prototypes-------------------------------------------------*/</span> \n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token comment\">/********************************************************\n  End Of File\n********************************************************/</span>\n</code></pre>\n<h4><a id=\"IAPc_133\"></a>IAP.c</h4>\n<p>通过IAP对EEPROM的操作，分别是读取一个字节，写入一个字节和擦除扇区，寄存器的参数根据数据手册来配置，数据手册这一章节的最后也有示例代码</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">/* Includes ------------------------------------------------------------------*/</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;main.h&gt;</span></span>\n\n<span class=\"token comment\">/* Private define-------------------------------------------------------------*/</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CMD_IDLE</span>        <span class=\"token expression\"><span class=\"token number\">0</span>     </span><span class=\"token comment\">//空闲、待机模式，无IAP操作</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CMD_READ</span>        <span class=\"token expression\"><span class=\"token number\">1</span>     </span><span class=\"token comment\">//IAP字节读命令</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CMD_PROGRAM</span>     <span class=\"token expression\"><span class=\"token number\">2</span>     </span><span class=\"token comment\">//IAP字节编程命令</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CMD_ERASE</span>       <span class=\"token expression\"><span class=\"token number\">3</span>     </span><span class=\"token comment\">//IAP扇区擦除命令</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ENABLE_IAP</span>      <span class=\"token expression\"><span class=\"token number\">0x83</span>  </span><span class=\"token comment\">//使能IAP，设置CPU等待时间</span></span>\n<span class=\"token comment\">/* Private variables----------------------------------------------------------*/</span>\n<span class=\"token keyword\">static</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token function\">IapReadByte</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span> addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">IapProgramByte</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span> addr<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint8_t</span> dat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">IapEraseSector</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span> addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* Public variables-----------------------------------------------------------*/</span>\nIAP_t IAP <span class=\"token operator\">=</span> \n<span class=\"token punctuation\">{<!-- --></span>\n  FALSE<span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  IapReadByte<span class=\"token punctuation\">,</span>\n  IapProgramByte<span class=\"token punctuation\">,</span>\n  IapEraseSector\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* Private function prototypes------------------------------------------------*/</span>\n\n<span class=\"token comment\">/*\n* @name   IapIdle\n* @brief  关闭IAP\n* @param  None\n* @retval None   \n*/</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">IapIdle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n  IAP_CONTR <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">//关闭IAP功能</span>\n  IAP_CMD   <span class=\"token operator\">=</span> CMD_IDLE<span class=\"token punctuation\">;</span>     <span class=\"token comment\">//清除命令寄存器，MS1和MS0为0，待机模式，无ISP操作</span>\n  IAP_TRIG  <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">//清除触发寄存器</span>\n  IAP_ADDRH <span class=\"token operator\">=</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">//将地址设置到非IAP地区</span>\n  IAP_ADDRL <span class=\"token operator\">=</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n* @name   IapReadByte\n* @brief  读取一个字节\n* @param  addr：要读取字节的地址\n* @retval uint8_t：返回读到的字节数据\n*/</span>\n<span class=\"token keyword\">static</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token function\">IapReadByte</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span> addr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token class-name\">uint8_t</span> dat<span class=\"token punctuation\">;</span>\n  IAP_CONTR <span class=\"token operator\">=</span> ENABLE_IAP<span class=\"token punctuation\">;</span>       <span class=\"token comment\">//使能IAP，最高位IAPEN置1，并设置CPU等待时间</span>\n  IAP_CMD   <span class=\"token operator\">=</span> CMD_READ<span class=\"token punctuation\">;</span>         <span class=\"token comment\">//设置IAP命令，对EEPROM区进行字节读</span>\n  IAP_ADDRL <span class=\"token operator\">=</span> addr<span class=\"token punctuation\">;</span>             <span class=\"token comment\">//设置IAP读取的低地址，IAP_ADDRL只会存储addr的低8位</span>\n  IAP_ADDRH <span class=\"token operator\">=</span> addr <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">//设置IAP读取的高地址，将addr右移8位，则将低8位全部移出去了，剩下了高8位，赋给IAP_ADDRH</span>\n  IAP_TRIG  <span class=\"token operator\">=</span> <span class=\"token number\">0x5a</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">//按数据手册说法要写触发命令</span>\n  IAP_TRIG  <span class=\"token operator\">=</span> <span class=\"token number\">0xa5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">_nop_</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                      <span class=\"token comment\">//等待操作完成</span>\n  dat <span class=\"token operator\">=</span> IAP_DATA<span class=\"token punctuation\">;</span>               <span class=\"token comment\">//读数据</span>\n  <span class=\"token function\">IapIdle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">//关闭IAP功能，该函数可以不调用，只是出于安全考虑而使用，后面函数同理</span>\n  <span class=\"token keyword\">return</span> dat<span class=\"token punctuation\">;</span>                   <span class=\"token comment\">//返回读取到的数据</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*\n* @name   IapProgramByte\n* @brief  写入一个字节\n* @param  addr：要被写入的地址\n* @param  dat：写入的数据\n* @retval None   \n*/</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">IapProgramByte</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span> addr<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint8_t</span> dat<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n  IAP_CONTR <span class=\"token operator\">=</span> ENABLE_IAP<span class=\"token punctuation\">;</span>       <span class=\"token comment\">//使能IAP，最高位IAPEN置1，并设置CPU等待时间</span>\n  IAP_CMD   <span class=\"token operator\">=</span> CMD_PROGRAM<span class=\"token punctuation\">;</span>      <span class=\"token comment\">//设置IAP命令，对EEPROM区进行字节编程</span>\n  IAP_ADDRL <span class=\"token operator\">=</span> addr<span class=\"token punctuation\">;</span>             <span class=\"token comment\">//设置IAP写入的低地址</span>\n  IAP_ADDRH <span class=\"token operator\">=</span> addr <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">//设置IAP写入到高地址</span>\n  IAP_DATA  <span class=\"token operator\">=</span> dat<span class=\"token punctuation\">;</span>              <span class=\"token comment\">//写入数据</span>\n  IAP_TRIG  <span class=\"token operator\">=</span> <span class=\"token number\">0x5a</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">//写触发命令</span>\n  IAP_TRIG  <span class=\"token operator\">=</span> <span class=\"token number\">0xa5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">_nop_</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                      <span class=\"token comment\">//等待操作完成</span>\n  <span class=\"token function\">IapIdle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">//关闭IAP功能</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*\n* @name   IapEraseSector\n* @brief  扇区擦除（每扇区为512字节）\n* @param  addr：要擦除的扇区地址\n* @retval None   \n*/</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">IapEraseSector</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span> addr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n  IAP_CONTR <span class=\"token operator\">=</span> ENABLE_IAP<span class=\"token punctuation\">;</span>       <span class=\"token comment\">//使能IAP，最高位IAPEN置1，并设置CPU等待时间</span>\n  IAP_CMD   <span class=\"token operator\">=</span> CMD_ERASE<span class=\"token punctuation\">;</span>        <span class=\"token comment\">//设置IAP命令，对EEPROM区进行扇区擦除</span>\n  IAP_ADDRL <span class=\"token operator\">=</span> addr<span class=\"token punctuation\">;</span>             <span class=\"token comment\">//设置IAP擦除扇区的低地址</span>\n  IAP_ADDRH <span class=\"token operator\">=</span> addr <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">//设置IAP擦除扇区的高地址</span>\n  IAP_TRIG  <span class=\"token operator\">=</span> <span class=\"token number\">0x5a</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">//写触发命令</span>\n  IAP_TRIG  <span class=\"token operator\">=</span> <span class=\"token number\">0xa5</span><span class=\"token punctuation\">;</span>         \n  <span class=\"token function\">_nop_</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                      <span class=\"token comment\">//等待操作完成</span>\n  <span class=\"token function\">IapIdle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">//关闭IAP功能</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/********************************************************\n  End Of File\n********************************************************/</span>\n</code></pre>\n<h4><a id=\"PWMh_239\"></a>PWM.h</h4>\n<p>在结构体内增加了两个函数指针，分别是通过IAP备份占空比和恢复占空比</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">__PWM_H_</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">__PWM_H_</span></span>\n\n<span class=\"token comment\">//定义表示占空比的枚举类型</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">enum</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Duty_0      <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    Duty_20     <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n    Duty_40     <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span>\n    Duty_60     <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span>\n    Duty_80     <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span>\n    Duty_100    <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">100</span>\n<span class=\"token punctuation\">}</span>PWM_Value_t<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//定义结构体类型</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> \n<span class=\"token punctuation\">{<!-- --></span>\n  PWM_Value_t Duty<span class=\"token punctuation\">;</span>                           <span class=\"token comment\">//PWM占空比</span>\n  <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>PWM_Init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                         <span class=\"token comment\">//PWM初始化</span>\n  <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>PWM_LED_Adjust_Brightness<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">//调整PWM亮度</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>IAP_Duty_Backup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">uint8_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//通过IAP备份占空比</span>\n  <span class=\"token class-name\">uint8_t</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>IAP_Duty_Restore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">//通过IAP恢复占空比</span>\n<span class=\"token punctuation\">}</span>PWM_t<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* extern variables-----------------------------------------------------------*/</span>\n<span class=\"token keyword\">extern</span> PWM_t PWM<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* extern function prototypes-------------------------------------------------*/</span> \n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token comment\">/********************************************************\n  End Of File\n********************************************************/</span>\n</code></pre>\n<h4><a id=\"PWMc_279\"></a>PWM.c</h4>\n<p>将设置占空比的CCAP0H和CCAP0L赋值部分写成一个函数，在PWM初始化后和按键调整灯亮度函数最后调用该函数设置PWM；新增两个函数，分别是通过IAP备份占空比和恢复占空比，所用到的函数实现在IAP.c源文件中</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">/* Includes ------------------------------------------------------------------*/</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;main.h&gt;</span></span>\n\n<span class=\"token comment\">/* Private define-------------------------------------------------------------*/</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CCP_S1</span>  <span class=\"token expression\">BIT5</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CCP_S0</span>  <span class=\"token expression\">BIT4   </span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EPC0H</span>   <span class=\"token expression\">BIT1</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EPC0L</span>   <span class=\"token expression\">BIT0</span></span>\n<span class=\"token comment\">/* Private variables----------------------------------------------------------*/</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">PWM_Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">PWM_LED_Adjust_Brightness</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">PWM_Duty_Set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> PWM_Duty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">IAP_Backup</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span> IAP_Addr<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint8_t</span> IAP_Data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token function\">IAP_Restore</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span> IAP_Addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* Public variables-----------------------------------------------------------*/</span>\nPWM_t PWM <span class=\"token operator\">=</span> \n<span class=\"token punctuation\">{<!-- --></span>\n  Duty_20<span class=\"token punctuation\">,</span>\n  PWM_Init<span class=\"token punctuation\">,</span>\n  PWM_LED_Adjust_Brightness<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/*初始化的函数名跟函数指针名不一样，这是因为这两个函数当作通用函数，其他文件也能使用，\n  函数指针的名字仅拿来当PWM备份占空比使用*/</span>\n  IAP_Backup<span class=\"token punctuation\">,</span>               \n  IAP_Restore\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* Private function prototypes------------------------------------------------*/</span>\n\n<span class=\"token comment\">/*\n* @name   PWM_Init\n* @brief  PWM初始化\n* @param  None\n* @retval None   \n*/</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">PWM_Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//选择管脚，因为开发板的PWM灯接到了P3.5口</span>\n    <span class=\"token comment\">//将BIT5的CCP_S1清0，BIT4的CCP_S0置1，即可将CCP切换到P3.5管脚</span>\n    AUXR1 <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>CCP_S1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    AUXR1 <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span>CCP_S0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//CCON里都是一些标志位，全置0即可</span>\n    <span class=\"token comment\">/*CMOD 的BIT7置0，设置空闲模式下PAC计数器继续工作;BIT3、BIT2、BIT1置为110，\n    系统时钟6分频，SYSclk/6*/</span>\n    CCON <span class=\"token operator\">=</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">;</span>\n    CMOD <span class=\"token operator\">=</span> <span class=\"token number\">0x0C</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//用于保存PCA装载值的16位计数器都清零</span>\n    CL <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    CH <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//BIT6置1，允许比较器功能；BIT1置1，允许CCP0脚用作脉宽调节输出</span>\n    <span class=\"token comment\">//PCA_PWM0的BIT7和BIT6置0，使模块工作于8位PWM模式，BIT1和BIT0的EPC0H和EPC0L清0</span>\n    CCAPM0 <span class=\"token operator\">=</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">;</span>\n    PCA_PWM0 <span class=\"token operator\">=</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//恢复占空比</span>\n    PWM<span class=\"token punctuation\">.</span>Duty <span class=\"token operator\">=</span> PWM<span class=\"token punctuation\">.</span><span class=\"token function\">IAP_Duty_Restore</span><span class=\"token punctuation\">(</span>IAP_PWM_DUTY_ADDR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//设置占空比</span>\n    <span class=\"token function\">PWM_Duty_Set</span><span class=\"token punctuation\">(</span>PWM<span class=\"token punctuation\">.</span>Duty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n    CR <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n* @name   PWM_LED_Adjust_Brightness\n* @brief  PWM灯调整亮度\n* @param  None\n* @retval None   \n*/</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">PWM_LED_Adjust_Brightness</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>KEY2<span class=\"token punctuation\">.</span>KEY_Flag <span class=\"token operator\">==</span> TRUE<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//单击 亮度 0-20-40-60-80-100-0 循环调节</span>\n        <span class=\"token comment\">//双击 亮度 100</span>\n        <span class=\"token comment\">//长按 亮度 0</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>KEY2<span class=\"token punctuation\">.</span>Click <span class=\"token operator\">==</span> TRUE<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>PWM<span class=\"token punctuation\">.</span>Duty<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n              <span class=\"token keyword\">case</span> Duty_0<span class=\"token operator\">:</span>    PWM<span class=\"token punctuation\">.</span>Duty <span class=\"token operator\">=</span> Duty_20<span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">case</span> Duty_20<span class=\"token operator\">:</span>   PWM<span class=\"token punctuation\">.</span>Duty <span class=\"token operator\">=</span> Duty_40<span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">case</span> Duty_40<span class=\"token operator\">:</span>   PWM<span class=\"token punctuation\">.</span>Duty <span class=\"token operator\">=</span> Duty_60<span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">case</span> Duty_60<span class=\"token operator\">:</span>   PWM<span class=\"token punctuation\">.</span>Duty <span class=\"token operator\">=</span> Duty_80<span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">case</span> Duty_80<span class=\"token operator\">:</span>   PWM<span class=\"token punctuation\">.</span>Duty <span class=\"token operator\">=</span> Duty_100<span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">case</span> Duty_100<span class=\"token operator\">:</span>  PWM<span class=\"token punctuation\">.</span>Duty <span class=\"token operator\">=</span> Duty_0<span class=\"token punctuation\">;</span>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> PWM<span class=\"token punctuation\">.</span>Duty <span class=\"token operator\">=</span> Duty_0<span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//检测双击</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>KEY2<span class=\"token punctuation\">.</span>Double_Click <span class=\"token operator\">==</span> TRUE<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n          PWM<span class=\"token punctuation\">.</span>Duty <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//检测长按</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>KEY2<span class=\"token punctuation\">.</span>Press <span class=\"token operator\">==</span> TRUE<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n          PWM<span class=\"token punctuation\">.</span>Duty <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//设置占空比，调整亮度</span>\n        <span class=\"token function\">PWM_Duty_Set</span><span class=\"token punctuation\">(</span>PWM<span class=\"token punctuation\">.</span>Duty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">//标志位清零</span>\n        KEY2<span class=\"token punctuation\">.</span>KEY_Flag     <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span>\n        KEY2<span class=\"token punctuation\">.</span>Click        <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span>\n        KEY2<span class=\"token punctuation\">.</span>Double_Click <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span>\n        KEY2<span class=\"token punctuation\">.</span>Press        <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//备份占空比</span>\n        PWM<span class=\"token punctuation\">.</span><span class=\"token function\">IAP_Duty_Backup</span><span class=\"token punctuation\">(</span>IAP_PWM_DUTY_ADDR<span class=\"token punctuation\">,</span>PWM<span class=\"token punctuation\">.</span>Duty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n* @name   PWM_Duty_Set\n* @brief  PWM灯调整亮度\n* @param  None\n* @retval None   \n*/</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">PWM_Duty_Set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> PWM_Duty<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token class-name\">uint8_t</span>  Temp_Value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/*初始化时PWM.Duty的值为Duty_20，单击按下后，进入该switch语句\n  PWM.Duty 被修改为Duty_40，占空比变量Temp_Value被赋值153，然后\n  跳出switch语句，后面对CCAP0H赋值，输出占空比\n  下次再单击按键，进入switch，匹配case Duty_40，所以PWM.Duty会\n  再次被改变为Duty_60，占空比输出102即60%*/</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>PWM_Duty<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">case</span> Duty_0<span class=\"token operator\">:</span>    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> Duty_20<span class=\"token operator\">:</span>   Temp_Value <span class=\"token operator\">=</span> <span class=\"token number\">204</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> Duty_40<span class=\"token operator\">:</span>   Temp_Value <span class=\"token operator\">=</span> <span class=\"token number\">153</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> Duty_60<span class=\"token operator\">:</span>   Temp_Value <span class=\"token operator\">=</span> <span class=\"token number\">102</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> Duty_80<span class=\"token operator\">:</span>   Temp_Value <span class=\"token operator\">=</span> <span class=\"token number\">51</span><span class=\"token punctuation\">;</span>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> Duty_100<span class=\"token operator\">:</span>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> PWM_Duty <span class=\"token operator\">=</span> Duty_0<span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">//亮度调节</span>\n  <span class=\"token comment\">//占空比为0%，全输出低电平，PWM灯灭</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>PWM<span class=\"token punctuation\">.</span>Duty <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    PCA_PWM0 <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span>EPC0H<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    CCAP0H <span class=\"token operator\">=</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">;</span>\n\n    PCA_PWM0 <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span>EPC0L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//置1则表示9位数，加上CCAP0L最大去到511</span>\n    CCAP0L <span class=\"token operator\">=</span> CCAP0H<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">//占空比为100%，全输出高电平，PWM灯全亮</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>PWM<span class=\"token punctuation\">.</span>Duty <span class=\"token operator\">==</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    PCA_PWM0 <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>EPC0H<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    CCAP0H <span class=\"token operator\">=</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">;</span>\n    PCA_PWM0 <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>EPC0L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    CCAP0L <span class=\"token operator\">=</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">else</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//根据Temp_Value设置的值修改占空比</span>\n    PCA_PWM0 <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>EPC0H<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//~0000 0010  -&gt;  1111 1101\t即让EPC0H为0</span>\n    CCAP0H <span class=\"token operator\">=</span> Temp_Value<span class=\"token punctuation\">;</span>\n    PCA_PWM0 <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>EPC0L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//因为上一步将BIT0，即EPC0L位置1了，所以也让该位清0后，CCAP0H再赋值给CCAP0L</span>\n    CCAP0L <span class=\"token operator\">=</span> CCAP0H<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n* @name   IAP_Backup\n* @brief  通过IAP备份\n* @param  IAP_Addr：备份地址\n* @param  IAP_Data：备份数据\n* @retval None   \n*/</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">IAP_Backup</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span> IAP_Addr<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint8_t</span> IAP_Data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n  IAP<span class=\"token punctuation\">.</span>ucIAP_Cnt <span class=\"token operator\">=</span> IAP_CNT<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//写入的次数，多次写入都失败的话，单片机会死机的，所以要保证次数</span>\n\t\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>IAP<span class=\"token punctuation\">.</span>ucIAP_Cnt<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    IAP<span class=\"token punctuation\">.</span><span class=\"token function\">IapEraseSector</span><span class=\"token punctuation\">(</span>IAP_Addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//写数据前要把扇区擦除</span>\n    IAP<span class=\"token punctuation\">.</span><span class=\"token function\">IapProgramByte</span><span class=\"token punctuation\">(</span>IAP_Addr<span class=\"token punctuation\">,</span>IAP_Data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//写入数据</span>\n    IAP<span class=\"token punctuation\">.</span>ucIAP_Flag <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span>          <span class=\"token comment\">//假如写成功了</span>\n    \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>IAP<span class=\"token punctuation\">.</span><span class=\"token function\">IapReadByte</span><span class=\"token punctuation\">(</span>IAP_Addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> IAP_DATA<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n      IAP<span class=\"token punctuation\">.</span>ucIAP_Flag <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span>       <span class=\"token comment\">//不成功</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//判断是否写成功</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>IAP<span class=\"token punctuation\">.</span>ucIAP_Flag <span class=\"token operator\">==</span> TRUE<span class=\"token punctuation\">)</span>    <span class=\"token comment\">//若写成功，则退出循环</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n* @name   IAP_Restore\n* @brief  通过IAP恢复\n* @param  IAP_Addr：恢复地址\n* @retval 恢复值   \n*/</span>\n<span class=\"token keyword\">static</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token function\">IAP_Restore</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span> IAP_Addr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">//考虑产品稳定性，定义了两个变量，读两次</span>\n  <span class=\"token class-name\">uint16_t</span> Read_IAP_Para1<span class=\"token punctuation\">,</span>Read_IAP_Para2<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">uint8_t</span> IAP_Data <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">//从EEPROM读取数据</span>\n  Read_IAP_Para1 <span class=\"token operator\">=</span> IAP<span class=\"token punctuation\">.</span><span class=\"token function\">IapReadByte</span><span class=\"token punctuation\">(</span>IAP_Addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Read_IAP_Para2 <span class=\"token operator\">=</span> IAP<span class=\"token punctuation\">.</span><span class=\"token function\">IapReadByte</span><span class=\"token punctuation\">(</span>IAP_Addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//判断两次读取是否一致</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Read_IAP_Para1 <span class=\"token operator\">==</span> Read_IAP_Para2<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Read_IAP_Para1 <span class=\"token operator\">!=</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//如果读出来不是FF说明之前已经有备份</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n      IAP_Data <span class=\"token operator\">=</span> Read_IAP_Para1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n      IAP_DATA <span class=\"token operator\">=</span> Duty_0<span class=\"token punctuation\">;</span>        <span class=\"token comment\">//从来就没备份写入过数据，就让灯灭</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">//两次读取不一致</span>\n  <span class=\"token keyword\">else</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    IAP_Data <span class=\"token operator\">=</span> Duty_0<span class=\"token punctuation\">;</span>          <span class=\"token comment\">//让PWM灯灭，也可以做其他处理，比如重启</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> IAP_Data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/********************************************************\n  End Of File\n********************************************************/</span>\n</code></pre>\n<h3><a id=\"_524\"></a>数据手册中给出的要注意的细节</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\70d8ce3976874570870e0dc25d271fe2.png\"/></p>\n<p>扇区擦除，没有字节擦除，只有扇区擦除，512字节/扇区,每个扇区用得越少越方便;</p>\n<p>如果要对某个扇区进行擦除，而其中有些字节的内容需要保留，则需将其先读到单片机内部的RAM中保存，再将该扇区擦除，然后将须保留的数据写回该扇区，所以每个扇区中用的字节数越少越好，操作起来越灵活方便；</p>\n<p>扇区中任意一个字节的地址都是该扇区的地址，无需求出首地址.</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-03 18:06:29", "summary": "通过实现掉电后恢复灯亮度介绍，电可擦除可编程只读存储器，一种掉电后数据不丢失的存储芯片。可以在电脑上或专用设备上擦除已有信息，重新编程。一般用在即插即用的发展：在微机的发展初期，都存放在，只读存储器中"}