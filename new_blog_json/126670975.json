{"blogid": "126670975", "writerAge": "码龄1年", "writerBlogNum": "40", "writerCollect": "1538", "writerComment": "2916", "writerFan": "1308", "writerGrade": "6级", "writerIntegral": "5621", "writerName": "命由己造～", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126670975.jpg", "writerRankTotal": "2939", "writerRankWeekly": "117", "writerThumb": "1891", "writerVisitNum": "50059", "blog_read_count": "1367", "blog_time": "已于 2022-09-04 13:06:14 修改", "blog_title": "【C++】内存管理", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>内存管理</h3>\n<ul><li><a href=\"#cc_5\">一、c/c++的内存分布</a></li><li><ul><li><a href=\"#11_cc_6\">1.1 c/c++内存区域划分图</a></li><li><a href=\"#12__8\">1.2 各个区域的功能</a></li><li><a href=\"#13_mallocrealloccalloc__14\">1.3 malloc/realloc/calloc 的区别？❗️❗️</a></li></ul>\n</li><li><a href=\"#newdelete_19\">二、new和delete</a></li><li><ul><li><a href=\"#21__20\">2.1 内置类型使用</a></li><li><a href=\"#22__42\">2.2 自定义类型使用</a></li></ul>\n</li><li><a href=\"#_89\">三、处理错误</a></li><li><a href=\"#operator_new__operator_delete_132\">四、operator new 和 operator delete</a></li><li><a href=\"#new_140\">五、定位new</a></li><li><a href=\"#mallocfreenewdelete_169\">六、malloc/free和new/delete的区别❗️❗️</a></li><li><a href=\"#_179\">七、内存泄漏</a></li><li><ul><li><a href=\"#71__180\">7.1 什么是内存泄漏？</a></li><li><a href=\"#72__182\">7.2 内存泄漏的危害</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<blockquote>\n<p><strong>给大家推荐一个超级好用的刷面试题神器：<a href=\"https://www.nowcoder.com/link/pc_csdncpt_myjz_jzsf\">牛客网</a>，里面涵盖了各个领域的面试题库，还有大厂真题哦！<br/> 各种语言的编程题都有，并且很多公司都用这个网站来笔试，赶紧来刷题吧！！！</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d41307951086403caf84ef63c165ba6a.png\"/></p>\n</blockquote>\n<h1><a id=\"cc_5\"></a>一、c/c++的内存分布</h1>\n<h2><a id=\"11_cc_6\"></a>1.1 c/c++内存区域划分图</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/932c4c145ef147ecbba6eb85bd88e558.webp#pic_center\"/></p>\n<h2><a id=\"12__8\"></a>1.2 各个区域的功能</h2>\n<blockquote>\n<p><strong>栈：</strong> 非静态局部变量 / 函数参数 / 返回值 / 函数调用建立栈帧 等等，<strong>向下增长</strong>。<br/> <strong>堆：</strong> 按需要申请和释放空间，<strong>向上增长</strong>。<br/> <strong>数据段：</strong> 静态区，存储全局数据和静态数据。<br/> <strong>代码段：</strong> 常量区，可执行的 代码 / 只读常量，指令也在这里。</p>\n</blockquote>\n<h2><a id=\"13_mallocrealloccalloc__14\"></a>1.3 malloc/realloc/calloc 的区别？❗️❗️</h2>\n<blockquote>\n<p><font color=\"#0000dd\">malloc 堆上动态开辟空间<br/> calloc 堆上动态开辟空间 + 初始化为0 （相当于malloc + memset）<br/> realloc 针对已经有的空间进行扩容 （原地扩容或异地扩容）</font></p>\n</blockquote>\n<hr/>\n<h1><a id=\"newdelete_19\"></a>二、new和delete</h1>\n<h2><a id=\"21__20\"></a>2.1 内置类型使用</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//c语言</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tp1 <span class=\"token operator\">=</span> p2 <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//c++</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">delete</span> p3<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> p4<span class=\"token punctuation\">;</span>\n\tp3 <span class=\"token operator\">=</span> p4 <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们可以看到new和delete在对内置类型跟c语言的malloc和free没有区别。<font color=\"#dd0000\">他们的区别体现在自定义类型上。</font></p>\n<h2><a id=\"22__42\"></a>2.2 自定义类型使用</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span> <span class=\"token function\">_a</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token operator\">~</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"~A()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tA<span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>A<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tp1 <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tA<span class=\"token operator\">*</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> A<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">delete</span> p2<span class=\"token punctuation\">;</span>\n\tp2 <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font color=\"#0000dd\">通过调试可以发现当我们<br/> 使用new的时候会 <strong>在堆上申请空间 + 调用构造函数初始化</strong><br/> 使用delete的时候会 <strong>调用析构函数 + 释放空间</strong></font></p>\n<p><mark>delete 清理的是new出来的空间，如果空间里含有堆区的空间，要自己在析构函数销毁</mark></p>\n<p><font color=\"#dd0000\">new / delete 和 new[] / delete[] 要匹配使用</font></p>\n<p>补充一点，数组的初始化可以这么写：</p>\n<pre><code class=\"prism language-cpp\">A<span class=\"token operator\">*</span> p4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> A<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这里要把构造函数写成默认构造函数。</p>\n<hr/>\n<h1><a id=\"_89\"></a>三、处理错误</h1>\n<p><strong>c语言：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//c语言</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> INT_MAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"malloc fail\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font color=\"#dd0000\">在面对对象的语言一般处理错误的方式是抛异常，使用try - catch</font></p>\n<p><strong>C++</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">try</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>INT_MAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>output</strong></p>\n<blockquote>\n<p><font color=\"#dd0000\"><strong>bad allocation</strong></font></p>\n</blockquote>\n<hr/>\n<h1><a id=\"operator_new__operator_delete_132\"></a>四、operator new 和 operator delete</h1>\n<p>其实<code>operator new</code>就是<code>malloc</code>的封装，平常判断malloc是否成功需要判断指针是否为NULL，而<code>operator new</code>可以直接抛异常，<font color=\"#dd0000\">但不会调用构造函数初始化</font><br/><br/> 而<code>operator delete</code>最终还是调用free，跟<code>operator new</code>一样，也是free的封装，可以抛异常处理错误。</p>\n<blockquote>\n<p><code>operator new</code>是<code>new</code>的时候变成指令自己调用的<mark>new Stack = call operator new + call Stack构造函数</mark></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b4ea218d32894b0cba6f55369137a738.png\"/></p>\n<hr/>\n<h1><a id=\"new_140\"></a>五、定位new</h1>\n<p><strong>定位new表达式是在已分配的原始内存空间中调用构造函数初始化一个对象</strong>。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t_a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"A(int n = 5)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> _a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tA<span class=\"token operator\">*</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>A<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//new(a)A;</span>\n\t<span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>使用场景：</strong></p>\n<blockquote>\n<p>定位new表达式在实际中一般是配合内存池使用。因为内存池分配出的内存没有初始化，所以如果是自定义类型的对象，需要使用new的定义表达式进行显示调构造函数进行初始化</p>\n</blockquote>\n<hr/>\n<h1><a id=\"mallocfreenewdelete_169\"></a>六、malloc/free和new/delete的区别❗️❗️</h1>\n<p><strong>malloc/free和new/delete的共同点是：都是从堆上申请空间，并且需要用户手动释放。不同的地方是：</strong></p>\n<blockquote>\n<p>&lt;1&gt; malloc和free是函数，<mark>new和delete是操作符</mark><br/> &lt;2&gt; malloc申请的空间不会初始化，new可以初始化<br/> &lt;3&gt; malloc申请空间时，需要手动计算空间大小并传递，new只需在其后跟上空间的类型即可<br/> &lt;4&gt; malloc的返回值为void*, 在使用时必须强转，new不需要，因为new后跟的是空间的类型<br/> &lt;5&gt; malloc申请空间失败时，返回的是NULL，因此使用时必须判空，new不需要，但是new需要捕获异常<br/> &lt;6&gt; 申请自定义类型对象时，malloc/free只会开辟空间，不会调用构造函数与析构函数，而new在申请空间后会调用构造函数完成对象的初始化，delete在释放空间前会调用析构函数完成空间中资源的清理</p>\n</blockquote>\n<hr/>\n<h1><a id=\"_179\"></a>七、内存泄漏</h1>\n<h2><a id=\"71__180\"></a>7.1 什么是内存泄漏？</h2>\n<blockquote>\n<p><strong>动态申请的内存如果不使用也不释放就会造成内存泄漏，造成内存的浪费</strong></p>\n</blockquote>\n<h2><a id=\"72__182\"></a>7.2 内存泄漏的危害</h2>\n<blockquote>\n<p><mark>长期运行的程序</mark>出现内存泄漏，影响很大，如操作系统、后台服务等等，出现内存泄漏会导致响应越来越慢，最终卡死。</p>\n</blockquote>\n<hr/>\n<hr/>\n<p><font color=\"#0000dd\"><strong>纸上得来终觉浅，绝知此事要躬行。</strong><a href=\"https://www.nowcoder.com/link/pc_csdncpt_myjz_jzsf\">来刷题巩固吧</a></font></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-04 13:06:14", "summary": "内存管理一、的内存分布内存区域划分图各个区域的功能的区别？二、和内置类型使用自定义类型使用三、处理错误四、和五、定位六、和的区别七、内存泄漏什么是内存泄漏？内存泄漏的危害给大家推荐一个超级好用的刷面试"}