{"blogid": "121948276", "writerAge": "码龄2年", "writerBlogNum": "58", "writerCollect": "32", "writerComment": "43", "writerFan": "34", "writerGrade": "3级", "writerIntegral": "669", "writerName": "蔚说", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_121948276.jpg", "writerRankTotal": "41742", "writerRankWeekly": "373573", "writerThumb": "49", "writerVisitNum": "19205", "blog_read_count": "2638", "blog_time": "于 2021-12-15 16:44:06 发布", "blog_title": "C#-winform基础-事件弹窗", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"Cwinform_0\"></a>C#-winform基础<mark>事件弹窗</mark></h1>\n<h2><a id=\"1winformwinform_2\"></a>1.winform应用程序是一种智能客户端技术，我们可以使用winform应用程序。</h2>\n<p><strong>帮助我们获得信息或者传输信息等。</strong><br/> <strong>实用简单控件介绍：</strong></p>\n<h2><a id=\"_7\"></a>属性</h2>\n<p>name：在后台要获得前台的控件对象，需要使用name属性<br/> visible：指示一个控件是否可用。<br/> Enabled：指示一个控件是否可用。</p>\n<h2><a id=\"_13\"></a>事件</h2>\n<p>注册事件<br/> 触发事件</p>\n<p>在Main函数当中创建的窗体对象，我们称之为这个窗体应用程序的主窗体。<br/> 主窗体：关掉主窗体整个程序就停掉了。<br/> 一般如按钮之类的我就不介绍了<br/> ContextMenuStrip:右键菜单栏拖进界面<br/> 绑定你需要的控件就可以<br/> 绑定方法如图：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b0fd756aed0a4acdba76fd2d6d601772.jpg\"/><br/> 我綁定了界面，所以右击界面都会弹出右键菜单功能</p>\n<h2><a id=\"_26\"></a>弹出窗体</h2>\n<p>按钮唤起下一个窗口，最后一个关闭所有的窗体，如图：<br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/1689d2b387c045738eb959b0ae5203e0.PNG?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6JSa6K-0,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\"/><br/> 代码实现：</p>\n<pre><code class=\"prism language-csharp\"> <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">button1_Click</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Form3</span> form <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Form3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            form<span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>可以成功唤起下一个窗体，同样方法创建对象，然后关闭主窗口<br/> 但是以下不能关闭所有的窗体，<mark>因为主窗口对象在main函数里创建在form3又创建一个新的所以对他操作是自娱自乐</mark></p>\n<pre><code class=\"prism language-csharp\"> <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Form3_Click</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Form1</span> form <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Form1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            form<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>我们必须获得当前主窗体的对象</strong><br/> 声明一个静态类 整一个静态字段 存储form1对象让全局可以使用</p>\n<pre><code class=\"prism language-csharp\">   <span class=\"token keyword\">class</span> <span class=\"token class-name\">test</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Form1</span> _frTest<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>存储Form11对象放到字段里</strong></p>\n<pre><code class=\"prism language-csharp\"> <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Form1_Load</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            test<span class=\"token punctuation\">.</span>_frTest <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>关闭直接调用test</strong></p>\n<pre><code class=\"prism language-csharp\">        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">button1_Click</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            test<span class=\"token punctuation\">.</span>_frTest<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_73\"></a>单选多选</h2>\n<p>单选：radioButton<br/> 多选：checkBox<br/> groupBox容器：存放按钮<br/> checked：指示这个控件是否处于选中状态。<br/> 默认情况下，在一个窗体中只能有一个单选按钮被选中，可以使用groupBox容器进行分组。<br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/46be68acd97f40378f675afe38fd8c21.PNG?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6JSa6K-0,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\"/></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">button1_Click</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name <span class=\"token operator\">=</span> txtname<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span><span class=\"token function\">Trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> pwd <span class=\"token operator\">=</span> txtpwd<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rdoStudent<span class=\"token punctuation\">.</span>Checked<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"student\"</span> <span class=\"token operator\">&amp;&amp;</span> pwd <span class=\"token operator\">==</span> <span class=\"token string\">\"student\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    MessageBox<span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登录成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    MessageBox<span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登陆失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    txtname<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    txtpwd<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"teacher\"</span><span class=\"token operator\">&amp;&amp;</span> pwd <span class=\"token operator\">==</span><span class=\"token string\">\"teacher\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    MessageBox<span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"老师登录成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    MessageBox<span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登陆失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    txtname<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    txtpwd<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-12-15 16:44:06", "summary": "基础事件弹窗应用程序是一种智能客户端技术，我们可以使用应用程序。帮助我们获得信息或者传输信息等。实用简单控件介绍：属性：在后台要获得前台的控件对象，需要使用属性：指示一个控件是否可用。：指示一个控件是"}