{"blogid": "126608683", "writerAge": "码龄1年", "writerBlogNum": "90", "writerCollect": "3588", "writerComment": "4127", "writerFan": "7832", "writerGrade": "7级", "writerIntegral": "10734", "writerName": "努力的小鳴人", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126608683.jpg", "writerRankTotal": "1123", "writerRankWeekly": "110", "writerThumb": "3737", "writerVisitNum": "195774", "blog_read_count": "876", "blog_time": "于 2022-08-31 08:45:29 发布", "blog_title": "Git从入门到项目实战，一篇文章吃透Git", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/6df56f0347074ab49c2ecc1f230a40e4.gif#pic_center\"/><br/> <strong><code>博主今天刚学完Git就来总结笔记了，Git好强大，不愧是目前世界上最先进的分布式版本控制系统</code></strong></p>\n<center>\n<b>✨即使再小的帆也能远航✨</b>\n</center>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0449fcd2feea46bc8411c7770cec9263.jpeg\"/><br/> </p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#Git_7\">🔎Git</a></li><li><a href=\"#_11\">版本控制</a></li><li><ul><li><a href=\"#_26\">🔥常见版本控制工具</a></li><li><a href=\"#_37\">🔥版本控制分类</a></li><li><ul><li><a href=\"#_38\">👌本地版本控制</a></li><li><a href=\"#_41\">👌集中版本控制</a></li><li><a href=\"#_46\">👌分布式版本控制</a></li><li><ul><li><a href=\"#Git_SVN__54\">🎈Git 与SVN 的区别</a></li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#Git_60\">Git下载与安装</a></li><li><a href=\"#Git_87\">Git基本知识</a></li><li><ul><li><a href=\"#Linux_88\">🔥常用命令(Linux)</a></li><li><a href=\"#_132\">🔥分支</a></li><li><a href=\"#_182\">🔥三个区域</a></li><li><ul><li><a href=\"#_185\">👌工作区</a></li><li><a href=\"#_189\">👌暂存区</a></li><li><a href=\"#_193\">👌仓库</a></li></ul>\n</li></ul>\n</li><li><a href=\"#gitee_209\">码云gitee</a></li><li><ul><li><a href=\"#gitee_210\">🔥gitee的使用</a></li><li><a href=\"#SSH_223\">🔥配置SSH公钥</a></li><li><a href=\"#_241\">🔥操作远端仓库</a></li></ul>\n</li><li><a href=\"#IDEAGit_281\">IDEA集成Git</a></li><li><ul><li><a href=\"#_293\">🔥添加到暂存区方法</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"Git_7\"></a>🔎Git</h1>\n<blockquote>\n<p><code>Git 诞生于一个极富纷争大举创新的年代</code>，Linux 内核开源项目有着为数众广的参与者。绝大多数的 Linux内核维护工作都花在了提交补丁和保存归档的繁琐事务上(1991－2002年间)。到 2002年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码，后与BitKeeper出现矛盾终止合作，迫使Linux 开源社区(特别贡献 Linux 的缔造者 Linus Torvalds)基于使用 BitKeeper时的经验教训，用时<strong>两周</strong>开发出自己的版本系统也就是<strong>Git</strong></p>\n</blockquote>\n<h1><a id=\"_11\"></a>版本控制</h1>\n<ol><li> <p><mark>概念</mark><br/> 版本控制是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术</p> </li><li> <p><mark>特点</mark><br/> ●<strong>实现跨区域多人协同开发</strong><br/> ●<strong>追踪和记载一个或者多个文件的历史记录</strong><br/> ●组织和保护你的源代码和文档<br/> ●统计工作量<br/> ●<strong>并行开发、提高开发效率</strong><br/> ●<strong>跟踪记录整个软件的开发过程</strong><br/> ●减轻开发人员的负担，节省时间，同时降低人为错误的影响</p> </li></ol>\n<p>版本控制多<strong>适用于管理多人协同开发的项目技术</strong>，在我们平时开发过程中有很多协同问题，比如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题，在我们的生活和笔记中用一个版本控制器会大大提高我们的效率</p>\n<hr/>\n<h2><a id=\"_26\"></a>🔥常见版本控制工具</h2>\n<p>目前主流的<strong>版本控制器</strong>有如下：<br/> ● <strong><code>Git</code></strong><br/> ● <strong>SVN</strong>（Subversion）<br/> ● <strong>CVS</strong>（Concurrent Versions System）<br/> ● <strong>VSS</strong>（Micorosoft Visual SourceSafe）<br/> ● <strong>TFS</strong>（Team Foundation Server）<br/> ● <strong>Visual Studio Online</strong></p>\n<p>还有很多很多版本控制产品：<em>Perforce、Rational ClearCase、RCS、Serena Dimention、SVK、<em>BitKeeper</em>、Monotone、Bazaar、Mercurial、SourceGear Vault）</em>，<strong>现在影响力最大且使用最广泛的是Git与SVN</strong></p>\n<hr/>\n<h2><a id=\"_37\"></a>🔥版本控制分类</h2>\n<h3><a id=\"_38\"></a>👌本地版本控制</h3>\n<p><strong>记录下本地每次文件(或版本、补丁文件)的更新，适合个人使用，版本控制工具：<code>RCS</code></strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7ae87d81009248d6a39118d399c53eac.png\"/></p>\n<h3><a id=\"_41\"></a>👌集中版本控制</h3>\n<p><strong>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改</strong><br/> <strong>版本控制工具：<code>SVN、CVS、VSS</code></strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c3c3670ae5004358baf47f376789834b.png\"/><br/> 用户的本地只有自己以前所同步的版本，<strong>如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作</strong>。且所有数据都保存在单一的服务器上，有<strong>很大的风险</strong>这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份</p>\n<h3><a id=\"_46\"></a>👌分布式版本控制</h3>\n<p><strong>所有版本信息仓库全部同步到本地的每个用户，用户可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push到相应的服务器或其他用户</strong>。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这<strong>增加了本地存储空间的占用</strong></p>\n<p><mark>它不会因为服务器损坏或者网络问题，造成不能工作的情况</mark></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fdc9b5872ed749f8a987a39c854ea358.png\"/></p>\n<hr/>\n<h4><a id=\"Git_SVN__54\"></a>🎈Git 与SVN 的区别</h4>\n<p><strong>Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库</strong>，工作的时候不需要联网了，协同的方法：如自己在电脑上更改文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。Git可以直接看到更新的代码和文件<br/> <mark>Git是目前世界上最先进的分布式版本控制系统</mark></p>\n<p><strong>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而工作时用的是自己的电脑，所以要从中央服务器得到最新的版本后再工作</strong>，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，<em>对网络带宽要求较高</em></p>\n<hr/>\n<h1><a id=\"Git_60\"></a>Git下载与安装</h1>\n<blockquote>\n<p><font color=\"#D2691E\"><strong>🎁温馨提示：</strong></font> 一般在下载都很慢，可以在镜像网站中下载就舒服多了<br/> <mark>淘宝镜像网站</mark>：<a href=\"http://npm.taobao.org/mirrors/git-for-windows/\">http://npm.taobao.org/mirrors/git-for-windows/</a><br/>  <br/> <strong>到最下面下载最新版本就行</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\11884b71f32b44ad8c179d557288144a.png\"/><br/>  <br/> <strong>选择适合自己的位数</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7ebd3b6de4234f04904ceacc63c15b3d.png\"/></p>\n</blockquote>\n<hr/>\n<p>打开 <mark>git 官网</mark> &gt;&gt; <a href=\"https://git-scm.com/\">https://git-scm.com/</a><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\da3044feb92a4ff0aa6217d7c5bab126.png\"/><br/> <strong>选择自己需要的版本</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d7b9acf86e27430989c43c5140d3637b.png\"/><br/> 下载完成后，双击安装：<mark><strong>无脑式下一步next</strong></mark> 即可<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b745e3067d9447b696ba3dda699e0b2a.png\"/><br/>  <br/> 下载完成后<br/> <strong>在开始菜单中</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0df8184422234c8ab58dc07e279b3447.png\"/></p>\n<p><strong>Git Bash</strong>：Unix与Linux风格的命令行，使用最多，推荐最多<br/> <strong>Git CMD</strong>：Windows风格的命令行<br/> <strong>Git GUI</strong>：图形界面的Git</p>\n<hr/>\n<h1><a id=\"Git_87\"></a>Git基本知识</h1>\n<h2><a id=\"Linux_88\"></a>🔥常用命令(Linux)</h2>\n<table><thead><tr><th align=\"center\">命令</th><th>作用</th></tr></thead><tbody><tr><td align=\"center\"><strong>cd</strong></td><td><strong>改变目录</strong></td></tr><tr><td align=\"center\"><strong>cd . .</strong></td><td><strong>回退到上一个目录</strong></td></tr><tr><td align=\"center\"><strong>pwd</strong></td><td><strong>显示当前所在的目录路径</strong></td></tr><tr><td align=\"center\">ls(ll)</td><td>列出当前目录中的所有文件</td></tr><tr><td align=\"center\"><strong>touch</strong></td><td><strong>新建一个文件</strong></td></tr><tr><td align=\"center\">rm</td><td>删除一个文件</td></tr><tr><td align=\"center\"><strong>mkdir:</strong></td><td><strong>新建一个目录(文件夹)</strong></td></tr><tr><td align=\"center\"><strong>rm -r</strong></td><td><strong>删除一个文件夹</strong></td></tr><tr><td align=\"center\"><mark>rm -rf /</mark></td><td><mark>切勿在Linux中尝试，会删除电脑中全部文件</mark></td></tr><tr><td align=\"center\">mv</td><td>移动文件, mv 文件名 目标文件夹，须保证文件和目标文件夹在同一目录下</td></tr><tr><td align=\"center\">reset</td><td>重新初始化终端/清屏</td></tr><tr><td align=\"center\"><strong>clear</strong></td><td><strong>清屏</strong></td></tr><tr><td align=\"center\">history</td><td>查看命令历史</td></tr><tr><td align=\"center\">help</td><td>帮助</td></tr><tr><td align=\"center\">exit</td><td>退出</td></tr><tr><td align=\"center\">#</td><td>表示注释</td></tr></tbody></table>\n<p><mark>查看配置</mark></p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">git</span> config -l\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\121bc4c05da54a3bb16422f945e70dd7.png\"/><br/> 查看不同级别的配置文件：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\">#查看系统config</span>\n<span class=\"token function\">git</span> config --system --list\n　　\n<span class=\"token comment\">#查看当前用户（global）配置</span>\n<span class=\"token function\">git</span> config --global  --list\n</code></pre>\n<p><mark>设置用户名与邮箱</mark><br/> 必要的<br/> 设置一次就行了</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">git</span> config --global user.name <span class=\"token string\">\"名称\"</span>\n<span class=\"token function\">git</span> config --global user.email <span class=\"token string\">\"邮箱\"</span>\n</code></pre>\n<hr/>\n<h2><a id=\"_132\"></a>🔥分支</h2>\n<p><strong>分支就是从开发主线分离进行重大bug的修改，开发新功能，以免影响开发主线</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\25cba5c33f68412591da08bc10722990.png\"/></p>\n<p><code>查看本地分支</code></p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">git</span> branch\n</code></pre>\n<p><code>查看远程分支</code></p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">git</span> branch -r\n</code></pre>\n<p><code>创建本地分支</code><br/> 依旧在当前分支</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">git</span> branch 分支名\n</code></pre>\n<p><code>切换分支</code></p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">git</span> checkout 分支名\n</code></pre>\n<p><code>创建并切换分支</code></p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">git</span> checkout -b 分支名\n</code></pre>\n<p><code>合并分支</code></p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">git</span> merge 分支名称\n</code></pre>\n<p><code>删除分支</code><br/> 不能删除当前分支，应切换到其他分支再删除需删除的分支</p>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 删除，可能会删除失败</span>\n<span class=\"token function\">git</span> branch -d 分支名\n<span class=\"token comment\"># 强制删除分支</span>\n<span class=\"token function\">git</span> branch -D 分支名 \n</code></pre>\n<blockquote>\n<p><font color=\"#D2691E\"><strong>🎁分支冲突：</strong></font><br/> 如果同一个文件在合并分支时都被修改了则会引起冲突：<strong>解决办法是我们可以修改冲突文件后重新提交，中进行选择要保留他的代码还是你的代码</strong><br/> <font color=\"#D2691E\"><strong>🎁主分支：</strong></font><br/> 主分支master应非常稳定，用来发布新版本，<strong>一般情况下不允许在上面工作</strong>，工作一般情况下在新建的dev分支上工作，工作完后dev分支代码稳定后可以合并到主分支master上来</p>\n</blockquote>\n<hr/>\n<h2><a id=\"_182\"></a>🔥三个区域</h2>\n<p>关系图<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6dd14d1508b3494db952f0a69da5a9ca.png\"/></p>\n<h3><a id=\"_185\"></a>👌工作区</h3>\n<p><strong><code>Working Directory</code></strong><br/> 平时存放项目代码的地方</p>\n<h3><a id=\"_189\"></a>👌暂存区</h3>\n<p><strong><code>Stage/Index</code></strong><br/> 用于临时存放你的改动，保存即将提交到文件列表信息</p>\n<h3><a id=\"_193\"></a>👌仓库</h3>\n<p><strong><code>Git Directory</code></strong><br/> 存放数据的位置以及提交到所有版本的数据</p>\n<p><em>如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域</em></p>\n<p>git管理的文件有三种状态：<strong>已修改（modified）,已暂存（staged）,已提交(committed)</strong></p>\n<p><mark>个人本地仓库的搭建</mark><br/> 选中一个文件夹，在<strong>git bash</strong>中运行<br/> 创建全新的个人仓库</p>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 在当前目录新建一个Git代码库</span>\n$ <span class=\"token function\">git</span> init\n</code></pre>\n<hr/>\n<h1><a id=\"gitee_209\"></a>码云gitee</h1>\n<h2><a id=\"gitee_210\"></a>🔥gitee的使用</h2>\n<p>国内好用的远程仓库<br/> 用github很慢，不方便，这个也一样</p>\n<p><mark>官网</mark> &gt;&gt; <a href=\"https://gitee.com/\">https://gitee.com/</a><br/> 注册并登录后</p>\n<p><mark>新建仓库</mark><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\df18a8a430b346f5b3f4c456c9cb720d.png\"/><br/> <mark>填写好信息即可创建</mark><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d5cd60782fde488abdfbc305be2aec33.png\"/><br/> <mark>之后复制下图中的链接就可以在本地克隆远端仓库的代码文件了</mark><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\68c4a2d3232149a3a3faf58ef4f4e686.png\"/></p>\n<h2><a id=\"SSH_223\"></a>🔥配置SSH公钥</h2>\n<p>在C盘用户名下文件夹 <strong><code>.ssh</code></strong> 右键，点击下图<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\79d16db8b02e4946814d182cd3e5d292.png\"/><br/> <mark>输入</mark><br/> <strong><code>ssh-keygen -t rsa</code></strong><br/> 不断回车至下图 (按默认信息，不用管)<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4be3d3e2c72b4bd6830199d04fe95331.png\"/></p>\n<p>检验是否配置成功<br/> **<code>ssh -T git@gitee.com</code>**出现下图就是成功<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1020e3bbb2294f6cbe44dfff92e67b7d.png\"/><br/> 成功后<mark>会在 .ssh 中生成两个文件</mark><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7c6e829ff65a40ecac964f50634c846f.png\"/><br/> <mark>点击框选的文件，并复制里面的内容（密钥），粘贴到下图</mark><br/> <strong>复制的时候尽量不要用 Ctrl+C</strong><br/> <em>在个人设置中</em><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9a97a2e19df744c5a026c9a28d4d2787.png\"/><br/> 点击确定绑定成功</p>\n<h2><a id=\"_241\"></a>🔥操作远端仓库</h2>\n<p><code>绑定远程仓库地址</code></p>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 远端名称，默认是origin;仓库路径，从远端服务器获取此URL</span>\n<span class=\"token function\">git</span> remote <span class=\"token function\">add</span> <span class=\"token operator\">&lt;</span>远端名称<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span>仓库路径<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><code>查看远程仓库</code></p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">git</span> remote\n</code></pre>\n<p><code>从仓库推送远程仓库</code></p>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># -f 表示强制覆盖</span>\n<span class=\"token comment\"># --set-upstream推送到远端的同时并建立起和远端分支的关联关系</span>\n<span class=\"token function\">git</span> push <span class=\"token punctuation\">[</span>-f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>--set-upstream<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>远端名称<span class=\"token punctuation\">[</span>本地分支名<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>远端分支名<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p>若远程分支名和本地分支名相同，则可以只写本地分支：<code>git push origin master</code></p>\n<p><code>查看本地分支与远程分支关系</code></p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">git</span> branch -vv\n</code></pre>\n<p><code>克隆远端仓库</code></p>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 克隆一个项目和它的整个代码包括版本信息</span>\n$ <span class=\"token function\">git</span> clone <span class=\"token comment\">#链接</span>\n</code></pre>\n<p><code>从远程仓库抓取</code><br/> 将仓库的更新都抓取到本地，不会进行合并</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">git</span> fetch<span class=\"token punctuation\">[</span>remote name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>branch name<span class=\"token punctuation\">]</span>\n</code></pre>\n<p><code>从远程仓库拉取</code><br/> 将远端仓库的修改拉到本地并自动进行合并</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">git</span> pull<span class=\"token punctuation\">[</span>remote name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>branch name<span class=\"token punctuation\">]</span>\n</code></pre>\n<h1><a id=\"IDEAGit_281\"></a>IDEA集成Git</h1>\n<p>idea绑定Git两种方法：<br/> 第一种：把远程仓库克隆过来的文件夹(已经绑定了远端仓库)中的所有东西拷贝到目标项目中<br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\f042e77a994744b49863a0acdfbb5adc.png\"/></p>\n<p>第二种：创建项目时在远程仓库克隆过来的文件夹下创建<br/> 这个创建完成之后<br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\c40dd3f40f5848b9a52613c0c823998b.png\"/><br/> idea左侧文件的颜色<br/> 红色：选中状态<br/> 绿色：被添加到暂存区了(新版IDEA会自动添加到暂存区)</p>\n<h2><a id=\"_293\"></a>🔥添加到暂存区方法</h2>\n<p>1.<mark>右键目标文件</mark><br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\c2080e9618354113817af626d0064fd8.png\"/><br/> 2. <mark>IDEA下方 Terminal 输入命令</mark><br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\0b6444bbd1724c6ba3d8754c22b2e614.png\"/><br/> 3. <mark>点击IDEA右上角绿色箭头</mark><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\db8b8b7b28704b50a3cd3688d1003679.png\"/><br/> 勾选你想提交的文件就行<br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\dbf23609ab6e46339a462f6c8b4b3b32.png\"/></p>\n<hr/>\n<p><strong><code>Git是目前世界上最先进的分布式版本控制系统，学了一天收获也不少，有什么问题欢迎wx哦~</code></strong></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-31 08:45:29", "summary": "在这里插入图片描述博主今天刚学完就来总结笔记了，好强大，不愧是目前世界上最先进的分布式版本控制系统即使再小的帆也能远航在这里插入图片描述目录版本控制常见版本控制工具版本控制分类本地版本控制集中版本控制"}