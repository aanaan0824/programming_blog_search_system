{"blogid": "126634128", "writerAge": "码龄97天", "writerBlogNum": "50", "writerCollect": "34", "writerComment": "5", "writerFan": "62", "writerGrade": "3级", "writerIntegral": "523", "writerName": "LogosTR_", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126634128.jpg", "writerRankTotal": "32100", "writerRankWeekly": "4544", "writerThumb": "16", "writerVisitNum": "28038", "blog_read_count": "693", "blog_time": "于 2022-09-03 23:18:35 发布", "blog_title": "【深度学习】Python 快速入门", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>零基础学Python</h3>\n<ul><li><a href=\"#1_IPythonJupyter_1\">1. IPython和Jupyter笔记本</a></li><li><ul><li><a href=\"#11_Jupyter__10\">1.1 Jupyter 安装</a></li><li><a href=\"#12_Jupyter__29\">1.2 Jupyter 常用操作</a></li></ul>\n</li><li><a href=\"#2__31\">2. 变量</a></li><li><a href=\"#_48\">运算符</a></li><li><ul><li><a href=\"#31__49\">3.1 算术运算符</a></li><li><a href=\"#32__51\">3.2 关系运算符</a></li><li><a href=\"#33__53\">3.3 位运算符</a></li></ul>\n</li><li><a href=\"#4__55\">4. 内置函数</a></li><li><ul><li><a href=\"#41__56\">4.1 数值函数</a></li><li><a href=\"#42__106\">4.2 用户输入</a></li><li><a href=\"#43__120\">4.3 打印输出</a></li><li><a href=\"#44__158\">4.4 格式化输出</a></li></ul>\n</li><li><a href=\"#5__190\">5 数据结构</a></li><li><ul><li><a href=\"#51__191\">5.1 列表</a></li><li><ul><li><a href=\"#511__207\">5.1.1 索引</a></li><li><a href=\"#512__254\">5.1.2 切片</a></li><li><a href=\"#513__283\">5.1.3 列表的内置函数</a></li><li><a href=\"#514_406\">5.1.4</a></li></ul>\n</li><li><a href=\"#52__448\">5.2 元组</a></li><li><ul><li><a href=\"#521__476\">5.2.1 将一个元组映射到另一个元组</a></li><li><a href=\"#522__483\">5.2.2 元组内置函数</a></li></ul>\n</li><li><a href=\"#53__500\">5.3 集合</a></li><li><ul><li><a href=\"#531__517\">5.3.1 内置函数</a></li></ul>\n</li><li><a href=\"#54__569\">5.4 字符串</a></li><li><ul><li><a href=\"#541__589\">5.4.1 内置函数</a></li></ul>\n</li><li><a href=\"#55__706\">5.5 字典</a></li><li><ul><li><a href=\"#551__729\">5.5.1 内置函数</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"1_IPythonJupyter_1\"></a>1. IPython和Jupyter笔记本</h1>\n<p>Jupyter notebook 是一种 Web 应用，它能让用户将说明文本、数学方程、代码和可视化内容全部组合到一个易于共享的文档中，非常方便研究和教学，让编写、阅读变得一目了然。Jupyter notebook特别适合做科学计算、数据处理，其用途可以包括数据清理和探索、可视化、机器学习和大数据分析。其具有以下特点：</p>\n<ul><li>编程时具有语法高亮、缩进、tab补全的功能；</li><li>可直接通过浏览器运行代码，同时在代码块下方展示运行结果；</li><li>以富媒体格式展示计算结果，富媒体格式包括：HTML，LaTeX，PNG，SVG等；</li><li>对代码编写说明文档或语句时，支持Markdown语法；</li><li>支持使用LaTeX编写数学性说明。</li></ul>\n<h2><a id=\"11_Jupyter__10\"></a>1.1 Jupyter 安装</h2>\n<p>安装Jupyter最简单的方法就是使用 Anaconda，其发行版附带了 Jupyter Notebook。在 conda 环境下安装 Jupyter Notebook 可以使用：</p>\n<pre><code class=\"prism language-bash\">conda <span class=\"token function\">install</span> jupyter\n</code></pre>\n<p>当然，也可以通过 pip 来安装：</p>\n<pre><code class=\"prism language-bash\">pip <span class=\"token function\">install</span> jupyter\n</code></pre>\n<p>安装后便可在终端中输入以下命令启动：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># jupyter notebook</span>\n\n或者\n<span class=\"token comment\"># jupyter-notebook</span>\n</code></pre>\n<h2><a id=\"12_Jupyter__29\"></a>1.2 Jupyter 常用操作</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20b009f1accf46db8a52009c9be51bd6.png\"/></p>\n<h1><a id=\"2__31\"></a>2. 变量</h1>\n<p>用于表示某物或值的名称称为变量。在Python中，可以声明变量并为其赋值，如下所示：</p>\n<pre><code class=\"prism language-python\">x <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\ny <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\nxy <span class=\"token operator\">=</span> <span class=\"token string\">'Hey'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">,</span> xy<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#输出：7 Hey</span>\n</code></pre>\n<p>多变量可以被赋予相同的名字。</p>\n<pre><code class=\"prism language-python\">x <span class=\"token operator\">=</span> y <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#输出：1 1</span>\n</code></pre>\n<h1><a id=\"_48\"></a>运算符</h1>\n<h2><a id=\"31__49\"></a>3.1 算术运算符</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b82435517ec54b7387c8587504c7bef1.png\"/></p>\n<h2><a id=\"32__51\"></a>3.2 关系运算符</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0914499f07374de997abf3ca4427dd10.png\"/></p>\n<h2><a id=\"33__53\"></a>3.3 位运算符</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b686a10498c64025860eeff814248e3a.png\"/></p>\n<h1><a id=\"4__55\"></a>4. 内置函数</h1>\n<h2><a id=\"41__56\"></a>4.1 数值函数</h2>\n<p>round( ) 函数将输入值四舍五入到指定的位数或最接近的整数。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span><span class=\"token number\">5.6231</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span><span class=\"token number\">4.55892</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 6</span>\n<span class=\"token comment\"># 4.56</span>\n</code></pre>\n<p>complex( ) 被用来定义一个复数 abs( ) 输出相同的绝对值。</p>\n<pre><code class=\"prism language-python\">c <span class=\"token operator\">=</span><span class=\"token builtin\">complex</span><span class=\"token punctuation\">(</span><span class=\"token string\">'5+2j'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 5.385164807134504</span>\n</code></pre>\n<p>divmod(x,y) 输出商和余数在元组的格式(商，余数)。</p>\n<pre><code class=\"prism language-python\"><span class=\"token builtin\">divmod</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># (4, 1)</span>\n</code></pre>\n<p>如果第一个参数是该类的实例，isinstance( ) 则返回True。还可以同时检查多个类。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># True</span>\n<span class=\"token comment\"># False</span>\n<span class=\"token comment\"># True</span>\n</code></pre>\n<p>pow(x,y,z) 可以被用来找到幂函数<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        \n         x\n        \n        \n         y\n        \n       \n      \n      \n       x^y\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.6644em;\"><span class=\"\" style=\"top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0359em;\">y</span></span></span></span></span></span></span></span></span></span></span></span>也可以找到第三个指定数字的mod值，即:(<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        \n         x\n        \n        \n         y\n        \n       \n      \n      \n       x^y\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.6644em;\"><span class=\"\" style=\"top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0359em;\">y</span></span></span></span></span></span></span></span></span></span></span></span> % z)。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 27</span>\n<span class=\"token comment\"># 2</span>\n</code></pre>\n<p>range( ) 函数输出指定范围的整数。它还可以用于通过指定特定范围内的两个数字之间的差来生成一个序列，元素以列表的形式返回。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">27</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [0, 1, 2]</span>\n<span class=\"token comment\"># [2, 3, 4, 5, 6, 7, 8]</span>\n<span class=\"token comment\"># [2, 10, 18, 26]</span>\n</code></pre>\n<h2><a id=\"42__106\"></a>4.2 用户输入</h2>\n<p>input( ) 接受输入并以字符串的形式保存。</p>\n<pre><code class=\"prism language-python\">abc <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Type something here and it will be stored in variable abc \\t\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Type something here and it will be stored in variable abc \t此处我们键入10</span>\n</code></pre>\n<p>查看输入的10的类型：</p>\n<pre><code class=\"prism language-python\"><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>abc<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># str 字符串类型</span>\n</code></pre>\n<h2><a id=\"43__120\"></a>4.3 打印输出</h2>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Hello World</span>\n</code></pre>\n<p>在Python中，单引号、双引号和三引号用于表示字符串：</p>\n<ul><li>大部分情况下单引号用于声明一个字符；</li><li>声明一行时使用双引号，声明段落/多行时使用三引号。</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hey'</span><span class=\"token punctuation\">)</span>\na <span class=\"token operator\">=</span> 'line1\\\nline2\\\n\\\n'\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#Hey</span>\n<span class=\"token comment\">#line1line2</span>\n</code></pre>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token triple-quoted-string string\">\"\"\"My name is Rajath Kumar M.P.\n\nI love Python.\"\"\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># My name is Rajath Kumar M.P.</span>\n<span class=\"token comment\"># </span>\n<span class=\"token comment\"># I love Python.</span>\n</code></pre>\n<p>字符串连接是两个字符串的“加法”。注意，在连接时，字符串之间不会有空格：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span> <span class=\"token operator\">+</span> string1 <span class=\"token operator\">+</span> string2<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># HelloWorld!</span>\n</code></pre>\n<h2><a id=\"44__158\"></a>4.4 格式化输出</h2>\n<pre><code class=\"prism language-bash\">- %s -<span class=\"token operator\">&gt;</span> string\n- %d -<span class=\"token operator\">&gt;</span> Integer\n- %f -<span class=\"token operator\">&gt;</span> Float\n- %o -<span class=\"token operator\">&gt;</span> Octal\n- %x -<span class=\"token operator\">&gt;</span> Hexadecimal\n- %e -<span class=\"token operator\">&gt;</span> exponential\n</code></pre>\n<p>用于print函数本身内部的转换：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Actual Number = %d\"</span> <span class=\"token operator\">%</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Float of the number = %f\"</span> <span class=\"token operator\">%</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Octal equivalent of the number = %o\"</span> <span class=\"token operator\">%</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hexadecimal equivalent of the number = %x\"</span> <span class=\"token operator\">%</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exponential equivalent of the number = %e\"</span> <span class=\"token operator\">%</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Actual Number = 18</span>\n<span class=\"token comment\"># Float of the number = 18.000000</span>\n<span class=\"token comment\"># Octal equivalent of the number = 22</span>\n<span class=\"token comment\"># Hexadecimal equivalent of the number = 12</span>\n<span class=\"token comment\"># Exponential equivalent of the number = 1.800000e+01</span>\n</code></pre>\n<p>当引用多个变量时使用圆括号：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello %s %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>string1<span class=\"token punctuation\">,</span>string2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Hello World !</span>\n</code></pre>\n<h1><a id=\"5__190\"></a>5 数据结构</h1>\n<h2><a id=\"51__191\"></a>5.1 列表</h2>\n<p>列表是最常用的数据结构。可以把它看作用方括号括起来的数据序列，数据之间用逗号分隔。这些数据都可以通过调用其索引值来访问。list的声明只需将变量等同于[ ]或list即可。</p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># &lt;class 'list'&gt;</span>\n</code></pre>\n<p>可以直接将数据序列分配给列表x，如下所示：</p>\n<pre><code class=\"prism language-python\">x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'peach'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># ['apple', 'orange', 'peach']</span>\n</code></pre>\n<h3><a id=\"511__207\"></a>5.1.1 索引</h3>\n<p>在Python中，索引从0开始。因此，现在包含两个元素的列表x的apple索引值为0,orange索引值为1。</p>\n<pre><code class=\"prism language-python\">x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 'apple'</span>\n</code></pre>\n<p>索引也可以按照相反的顺序进行。这是最后一个可以被首先访问的元素。这里，索引从-1开始。因此，索引-1对应是橙色，索引-2对应的是苹果。</p>\n<pre><code class=\"prism language-python\">x<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 'peach'</span>\n</code></pre>\n<p>声明两个列表x和y每一个包含自己的数据。现在，这两个列表可以再一次被放入另一个也具有自己的数据的列表z中。列表中的这个列表被称为嵌套列表，这就是数组的声明方式，我们将在后面看到。这是和很多其他计算机语言不同的地方，不要求列表的元素是相同类型，因此编程的时候会非常方便，这也是为什么Python对人类比较友好。</p>\n<pre><code class=\"prism language-python\">x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'peach'</span><span class=\"token punctuation\">]</span>\ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'carrot'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'potato'</span><span class=\"token punctuation\">]</span>\nz  <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span> <span class=\"token string\">'Test'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [['apple', 'orange', 'peach'], ['carrot', 'potato'], 'Test']</span>\n\nz<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 'orange'</span>\n</code></pre>\n<p>如何获得嵌套列表中的某个元素？让我们在上述嵌套列表中获得数据’apple’为例：</p>\n<ul><li>首先在索引为0处，有一个列表<code>['apple','orange'] </code>而在索引为1处有另外一个列表<code>['carrot','potato'] </code>;</li><li>因此z[0] 应该给我们第一个包含’apple’的列表。</li></ul>\n<pre><code class=\"prism language-python\">z1 <span class=\"token operator\">=</span> z<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>z1<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># ['apple', 'orange', 'peach']</span>\n</code></pre>\n<p>现在观察z1并不是一个嵌套列表，因此为了获得’apple’，z1的索引应该为0。</p>\n<pre><code class=\"prism language-python\">z1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 'apple'</span>\n</code></pre>\n<p>在python中，你可以通过每次并排写索引值来访问“apple”，而不是像上面那样做：</p>\n<pre><code class=\"prism language-python\">z<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 'apple'</span>\n</code></pre>\n<h3><a id=\"512__254\"></a>5.1.2 切片</h3>\n<p>索引只限于访问单个元素，而切片则是访问列表内的一系列数据。换句话说，切片返回的是一个列表。</p>\n<p>切片是通过定义切片列表中需要的父列表中的第一个元素和最后一个元素（不包含，即左闭右开）的索引值来完成的。它被写成<code>parentlist[a: b]</code>，其中a,b是父列表的索引值。如果a或b未定义，则认为该索引值是a未定义时的第一个值，以及b未定义时的最后一个值。</p>\n<pre><code class=\"prism language-python\">num <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># [3, 2, 3]</span>\n<span class=\"token comment\"># [2, 3, 2, 3, 4, 5, 6, 7, 8, 9]</span>\n<span class=\"token comment\"># [2, 3, 2, 3, 4, 5, 6, 7, 8, 9]</span>\n<span class=\"token comment\"># [2, 3, 2, 3, 4, 5, 6, 7, 8, 9]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># [2, 3, 2, 3]</span>\n<span class=\"token comment\"># [4, 5, 6, 7, 8, 9]</span>\n</code></pre>\n<p>还可以使用固定长度或步长对父列表进行切片：</p>\n<pre><code class=\"prism language-python\">num<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">9</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># [2, 3, 6]</span>\n</code></pre>\n<h3><a id=\"513__283\"></a>5.1.3 列表的内置函数</h3>\n<p>列表的长度或者列表中元素的数量：</p>\n<pre><code class=\"prism language-python\"><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>min( ) 和 max( ) 给出列表中的最大值和最小值：</p>\n<pre><code class=\"prism language-python\"><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>列表拼接：</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># [1, 2, 3, 5, 4, 7]</span>\n</code></pre>\n<p>判断列表中是否存在特定的元素：</p>\n<pre><code class=\"prism language-python\">names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Earth'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Air'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Fire'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Water'</span><span class=\"token punctuation\">]</span>\n<span class=\"token string\">'Fir'</span> <span class=\"token keyword\">in</span> names\n<span class=\"token comment\"># False</span>\n<span class=\"token string\">'Fire'</span> <span class=\"token keyword\">in</span> names\n<span class=\"token comment\"># True</span>\n<span class=\"token string\">'fire'</span> <span class=\"token keyword\">in</span> names\n<span class=\"token comment\"># False</span>\n</code></pre>\n<p>字符串转化为列表：</p>\n<pre><code class=\"prism language-python\"><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># ['h', 'e', 'l', 'l', 'o']</span>\n</code></pre>\n<p>append( ) 被用来在列表的最后添加一个元素：</p>\n<pre><code class=\"prism language-python\">lst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\nlst<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [1, 1, 4, 8, 7, 1]</span>\n</code></pre>\n<p>count( ) 用于计算列表中出现的特定元素的数量：</p>\n<pre><code class=\"prism language-python\">lst<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 3</span>\n</code></pre>\n<p>append( ) 函数也可以被用来在末尾添加一整个列表：</p>\n<pre><code class=\"prism language-python\">lst1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span>\nlst<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>lst1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [1, 1, 4, 8, 7, 1, [5, 4, 2, 8]]</span>\n</code></pre>\n<p>列表拼接：</p>\n<pre><code class=\"prism language-python\">lst<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>lst1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p>index( ) 被用来找到一个特殊元素的索引值，注意如果有许多个元素具有相同的值那么元素第一个索引值会被返回：</p>\n<pre><code class=\"prism language-python\">lst<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 0</span>\n</code></pre>\n<p>insert(x,y) 用于在指定的索引值x处插入元素y。append( ) 函数使得它只能插在最后。</p>\n<pre><code class=\"prism language-python\">lst<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [1, 1, 4, 8, 7, 'name', 1, [5, 4, 2, 8], 5, 4, 2, 8]</span>\n</code></pre>\n<p>pop( ) 函数返回列表中的最后一个元素。这类似于堆栈的操作。因此，说列表可以作为堆栈使用是正确的。</p>\n<pre><code class=\"prism language-python\">lst<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>可以指定索引值来弹出与该索引值对应的元素：</p>\n<pre><code class=\"prism language-python\">lst<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [1, 1, 8, 7, 'Python', 1, [5, 4, 2, 8], 5, 4, 2]</span>\n</code></pre>\n<p>使用remove() 函数通过值来删除元素：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [1, 1, 8, 7, 'Python', 1, 5]</span>\nlst<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">'Python'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [1, 1, 8, 7, 1, 5]</span>\n</code></pre>\n<p>reverse() 函数反转列表中出现的所有元素：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [1, 1, 5]</span>\nlst<span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [5, 1, 1]</span>\n</code></pre>\n<p>sort( ) 去按升序排列元素：</p>\n<pre><code class=\"prism language-python\">lst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\nlst<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [1, 4, 8, 8, 10]</span>\n</code></pre>\n<p>对于降序，因为默认情况下反向条件为False。因此，将其更改为True将按降序排列元素。</p>\n<pre><code class=\"prism language-python\">lst<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [10, 8, 8, 4, 1]</span>\n</code></pre>\n<h3><a id=\"514_406\"></a>5.1.4</h3>\n<p>大多数新的python程序员都会犯这个错误，即对象的赋值和拷贝的差异。考虑以下的例子：</p>\n<pre><code class=\"prism language-python\">lista<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nlistb <span class=\"token operator\">=</span> lista <span class=\"token comment\"># 对象赋值</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>listb<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [2, 1, 4, 3]</span>\n</code></pre>\n<p>这里，我们声明了一个列表，lista = [2,1,4,3]。通过赋值将该列表复制到listb，并复制该列表。现在我们对lista执行一些随机操作。</p>\n<pre><code class=\"prism language-python\">lista<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lista<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [2, 1, 4]</span>\nlista<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lista<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [2, 1, 4, 9]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>listb<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [2, 1, 4, 9]</span>\n</code></pre>\n<p>虽然没有对listb执行任何操作，但它也发生了变化。这是因为您将lista、listb指向相同的内存空间。</p>\n<p><strong>复制列表</strong>：</p>\n<pre><code class=\"prism language-python\">lista <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nlistb <span class=\"token operator\">=</span> lista<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>listb<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [2, 1, 4, 3]</span>\n\nlista<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lista<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [2, 1, 4]</span>\nlista<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lista<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [2, 1, 4, 9]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>listb<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [2, 1, 4, 3]</span>\n</code></pre>\n<h2><a id=\"52__448\"></a>5.2 元组</h2>\n<p>元组与列表相似，但唯一大的区别是列表中的元素可以更改，而元组中的元素不能更改。</p>\n<p><strong>定义元组：</strong></p>\n<pre><code class=\"prism language-python\">tup <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntup2 <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>声明元组时可以分配值。它接受一个列表作为输入并将其转换为元组，或者接受一个字符串并将其转换为元组：</p>\n<pre><code class=\"prism language-python\">tup3 <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tup3<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># (1, 2, 3)</span>\ntup4 <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tup4<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># ('H', 'e', 'l', 'l', 'o')</span>\n</code></pre>\n<p>元组遵循与列表相同的索引和切片：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tup3<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 2</span>\ntup5 <span class=\"token operator\">=</span> tup4<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tup5<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># ('H', 'e', 'l')</span>\n</code></pre>\n<h3><a id=\"521__476\"></a>5.2.1 将一个元组映射到另一个元组</h3>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'alpha'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'beta'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'gamma'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># alpha beta gamma</span>\n</code></pre>\n<h3><a id=\"522__483\"></a>5.2.2 元组内置函数</h3>\n<p>count() 函数计算元组中存在的指定元素的数量：</p>\n<pre><code class=\"prism language-python\">d <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token string\">'RajathKumarMP'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># ('R', 'a', 'j', 'a', 't', 'h', 'K', 'u', 'm', 'a', 'r', 'M', 'P')</span>\nd<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 3</span>\n</code></pre>\n<p>index() 函数返回指定元素的索引。如果元素数量大于1，则返回该指定元素的第一个元素的索引：</p>\n<pre><code class=\"prism language-python\">d<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 1</span>\n</code></pre>\n<h2><a id=\"53__500\"></a>5.3 集合</h2>\n<p>集合主要用于消除序列/列表中的重复数字。它还用于执行一些标准的集合操作。</p>\n<p>set被声明为set()，它将初始化一个空集。set([sequence])也可以被执行来声明一个包含元素的集合：</p>\n<pre><code class=\"prism language-python\">set1 <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nset0 <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>set0<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># {1, 2, 3, 4}</span>\n\nset1 <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># {1, 2, 3, 4}</span>\n</code></pre>\n<p>重复两次的元素2,3只会出现一次。因此在一个集合中，每个元素都是不同的。</p>\n<h3><a id=\"531__517\"></a>5.3.1 内置函数</h3>\n<pre><code class=\"prism language-python\">set1 <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nset2 <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>union( ) 函数返回一个并集合，该集合包含两个集合的所有元素，但是没有重复：</p>\n<pre><code class=\"prism language-python\">set1<span class=\"token punctuation\">.</span>union<span class=\"token punctuation\">(</span>set2<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># {1, 2, 3, 4, 5}</span>\n</code></pre>\n<p>add() 将向集合中添加一个特定的元素：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># {0, 1, 2, 3}</span>\nset1<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># {0, 1, 2, 3}</span>\n</code></pre>\n<p>intersection( ) 函数输出一个交集合，该集合包含两个集合中的所有元素：</p>\n<pre><code class=\"prism language-python\">set1<span class=\"token punctuation\">.</span>intersection<span class=\"token punctuation\">(</span>set2<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># {2, 3}</span>\n</code></pre>\n<p>difference( ) 函数输出一个集合，其中包含在set1中而不在set2中的元素：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># {0, 1, 2, 3}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>set2<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># {2, 3, 4, 5}</span>\nset1<span class=\"token punctuation\">.</span>difference<span class=\"token punctuation\">(</span>set2<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># {0, 1}</span>\n</code></pre>\n<p>remove( ) 函数从集合中删除指定值的元素：</p>\n<pre><code class=\"prism language-python\">set1<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># {1, 3}</span>\n</code></pre>\n<p>clear( ) 用于清除所有元素并将其设置为空集:</p>\n<pre><code class=\"prism language-python\">set1<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># set()</span>\n</code></pre>\n<h2><a id=\"54__569\"></a>5.4 字符串</h2>\n<p>字符串是基于文本的有序数据，用单/双/三重引号括起来表示。</p>\n<pre><code class=\"prism language-python\">String0 <span class=\"token operator\">=</span> <span class=\"token string\">'Taj Mahal is beautiful'</span>\nString1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Taj Mahal is beautiful\"</span>\nString2 <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">'''Taj Mahal\nis\nbeautiful'''</span>\n</code></pre>\n<p>字符串索引和分段类似于前面详细解释过的列表：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>String0<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># M</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>String0<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Mahal is beautiful</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>String0<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 1</span>\n</code></pre>\n<h3><a id=\"541__589\"></a>5.4.1 内置函数</h3>\n<p>find( ) 函数返回要在字符串中找到的给定数据的索引值，返回的索引值是输入数据中第一个元素的索引。如果没有找到它，它返回 -1。请注意不要将返回的-1与反向索引值混淆：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>String0<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Taj Mahal is beautiful</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>String0<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'al'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 7</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>String0<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'am'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># -1</span>\n</code></pre>\n<p>capitalize( ) 用于将字符串中的第一个元素大写：</p>\n<pre><code class=\"prism language-python\">String3 <span class=\"token operator\">=</span> <span class=\"token string\">'observe the first letter in this sentence. can you change this sentence'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>String3<span class=\"token punctuation\">.</span>capitalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Observe the first letter in this sentence. can you change this sentence</span>\n</code></pre>\n<p>center( ) 用于通过指定字段宽度将字符串居中对齐：</p>\n<pre><code class=\"prism language-python\">String0<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">(</span><span class=\"token number\">70</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># '                        Taj Mahal is beautiful                        '</span>\n</code></pre>\n<p>zfill( ) 通过指定字段宽度来填充零：</p>\n<pre><code class=\"prism language-python\">String0<span class=\"token punctuation\">.</span>zfill<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># '00000000Taj Mahal is beautiful'</span>\n</code></pre>\n<p>index( ) 和 find( ) 函数的工作方式相同，唯一的区别在于 find( ) 返回’-1’，当输入元素在字符串中没有找到，但是index( ) 函数会抛出一个ValueError。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>String0<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token string\">'Taj'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 0</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>String0<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token string\">'Mahal'</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 4</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>String0<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token string\">'Mahal'</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>endswith( ) 函数用于检查给定字符串是否以作为输入的特定字符结尾：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>String0<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># False</span>\n<span class=\"token comment\"># 指定开始和停止索引值。指定开始和停止索引值。</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>String0<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'M'</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># True</span>\n</code></pre>\n<p>count( ) 函数计算给定字符串中的字符数。也可以指定开始和停止索引或将其留空：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>String0<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 4</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>String0<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 2</span>\n</code></pre>\n<p>join( ) 函数在输入字符串的元素之间添加一个字符：</p>\n<pre><code class=\"prism language-python\"><span class=\"token string\">'a'</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># '1a2a3'</span>\n</code></pre>\n<p>'123’是输入字符串而字符’a’被添加在每一个元素之间。</p>\n<p>join( ) 函数也可以被用来将列表转化为字符串：</p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>String0<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># ['T', 'a', 'j', ' ', 'M', 'a', 'h', 'a', 'l', ' ', 'i', 's', ' ', 'b', 'e', 'a', 'u', 't', 'i', 'f', 'u', 'l']</span>\nb <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Taj Mahal is beautiful</span>\n</code></pre>\n<p>split( ) 函数被用来将一个字符串转化为列表：</p>\n<pre><code class=\"prism language-python\">c <span class=\"token operator\">=</span> <span class=\"token string\">\" /i/s/ /b/e/a/u/t/i/f/u/l\"</span>\nd <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [' ', 'i', 's', ' ', 'b', 'e', 'a', 'u', 't', 'i', 'f', 'u', 'l']</span>\n</code></pre>\n<p>lower( ) 将任何大写字母转换为小写字母：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>String0<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Taj Mahal is beautiful</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>String0<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># taj mahal is beautiful</span>\n</code></pre>\n<p>upper( ) 将任何小写字母转换为大写字母：</p>\n<pre><code class=\"prism language-python\">String0<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 'TAJ MAHAL IS BEAUTIFUL'</span>\n</code></pre>\n<p>replace( ) 函数将该元素替换为另一个元素：</p>\n<pre><code class=\"prism language-python\">String0<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'Taj Mahal'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Bengaluru'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 'Bengaluru is beautiful'</span>\n</code></pre>\n<p>strip( ) 函数用于从右端和左端删除不需要的元素：</p>\n<pre><code class=\"prism language-python\">f <span class=\"token operator\">=</span> <span class=\"token string\">'    hello      '</span>\nf<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'hello'</span>\n</code></pre>\n<p>lstrip( ) 和 rstrip( ) 函数具有与strip函数相同的功能，但唯一的区别是lstrip() 只删除左边的内容，而rstrip() 只删除右边的内容：</p>\n<pre><code class=\"prism language-python\">f <span class=\"token operator\">=</span> <span class=\"token string\">'   ***----hello---*******     '</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>lstrip<span class=\"token punctuation\">(</span><span class=\"token string\">' *'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>hello<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">**</span><span class=\"token operator\">**</span><span class=\"token operator\">**</span><span class=\"token operator\">*</span>   \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>rstrip<span class=\"token punctuation\">(</span><span class=\"token string\">' *'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token operator\">**</span><span class=\"token operator\">*</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>hello<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n</code></pre>\n<h2><a id=\"55__706\"></a>5.5 字典</h2>\n<p>定义词典：</p>\n<pre><code class=\"prism language-python\">d0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\nd1 <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nd0<span class=\"token punctuation\">[</span><span class=\"token string\">'One'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nd0<span class=\"token punctuation\">[</span><span class=\"token string\">'OneTwo'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">12</span> \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d0<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'One'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'OneTwo'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p>zip( ) 可以合并多个列表成一个元组，配和dict()使用可以声明字典：</p>\n<pre><code class=\"prism language-python\">names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'One'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Two'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Three'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Four'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Five'</span><span class=\"token punctuation\">]</span>\nnumbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\nd2 <span class=\"token operator\">=</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">,</span>numbers<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>d2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'One'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Two'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Three'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Four'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Five'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"551__729\"></a>5.5.1 内置函数</h3>\n<p>clear( ) 清空字典：</p>\n<pre><code class=\"prism language-python\">a1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">}</span>\na1<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># {}</span>\n</code></pre>\n<p>values( ) 返回了一个包含字典中所有赋值的列表：</p>\n<pre><code class=\"prism language-python\">a1<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># dict_values([1, 2, 3, 4, 5])</span>\n</code></pre>\n<p>keys( ) 返回包含赋值的所有索引或键：</p>\n<pre><code class=\"prism language-python\">a1<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># dict_keys(['One', 'Two', 'Three', 'Four', 'Five'])</span>\n</code></pre>\n<p>items() 返回一个列表，但是字典中的每个元素都是列表中的一个元组，<code>在这里插入代码片</code>与使用zip函数得到的结果相同：</p>\n<pre><code class=\"prism language-python\">a1<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> a1<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[%6s] %d\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>pop() 函数用于删除特定的元素，并且这个删除的元素可以被分配给一个新的变量：</p>\n<pre><code class=\"prism language-python\">a2 <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token string\">'One'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-03 23:18:35", "summary": "零基础学和笔记本安装常用操作变量运算符算术运算符关系运算符位运算符内置函数数值函数用户输入打印输出格式化输出数据结构列表索引切片列表的内置函数元组将一个元组映射到另一个元组元组内置函数集合内置函数字符"}