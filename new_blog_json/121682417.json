{"blogid": "121682417", "writerAge": "码龄4年", "writerBlogNum": "266", "writerCollect": "433", "writerComment": "111", "writerFan": "243", "writerGrade": "5级", "writerIntegral": "3118", "writerName": "超悠閒", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_121682417.jpg", "writerRankTotal": "47881", "writerRankWeekly": "43171", "writerThumb": "152", "writerVisitNum": "169308", "blog_read_count": "1441", "blog_time": "于 2021-12-02 17:37:24 发布", "blog_title": "Rust 构建 Wasm 模块", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"Rust__Wasm__0\"></a>Rust 构建 Wasm 模块</h1>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#Rust__Wasm__0\">Rust 构建 Wasm 模块</a></li><li><a href=\"#_4\">正文</a></li><li><ul><li><a href=\"#1__8\">1. 安装</a></li><li><ul><li><a href=\"#11__Rustup__Rust_12\">1.1 使用 Rustup 安装 Rust</a></li><li><a href=\"#12__wasmpack_63\">1.2 安装 wasm-pack</a></li><li><a href=\"#13_CLion__73\">1.3 CLion 配置</a></li></ul>\n</li><li><a href=\"#2__Rust_to_Wasm__91\">2. 手动构建 Rust to Wasm 项目</a></li><li><ul><li><a href=\"#21__95\">2.1 创建项目</a></li><li><a href=\"#22__Cargotoml_107\">2.2 配置文件 Cargo.toml</a></li><li><a href=\"#23____133\">2.3 模块导出函数 &amp; 打包</a></li><li><a href=\"#24__173\">2.4 前端项目展示</a></li></ul>\n</li><li><a href=\"#3__wasmpack__194\">3. 使用 wasm-pack 模版构建</a></li><li><ul><li><a href=\"#31__202\">3.1 配置文件补全</a></li><li><a href=\"#32____215\">3.2 模块导出函数 &amp; 打包</a></li><li><a href=\"#33__wasmtoolwasmpackplugin__247\">3.3 前端 @wasm-tool/wasm-pack-plugin 插件</a></li><li><a href=\"#34__wasm____288\">3.4 引入 wasm 模块 &amp; 运行效果</a></li></ul>\n</li><li><a href=\"#4__305\">4. 小结</a></li></ul>\n</li><li><a href=\"#_311\">其他资源</a></li><li><ul><li><a href=\"#_313\">参考连接</a></li><li><a href=\"#_325\">完整代码示例</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_4\"></a>正文</h1>\n<p>今天来给大家介绍如何使用 Rust 构建 Wasm 模块</p>\n<h2><a id=\"1__8\"></a>1. 安装</h2>\n<p>第一部分是相关依赖安装</p>\n<h3><a id=\"11__Rustup__Rust_12\"></a>1.1 使用 Rustup 安装 Rust</h3>\n<p>首先是安装 Rust 的部分，如果读者使用 <code>brew install rust</code> 直接安装 Rust 模块的话，建议还是删掉重新使用 Rustup 安装完整工具链hh（由于我们的 Wasm 编译相当于是一个独立的跨平台编译目标，因此必须使用完整的 rustup 工具链，否则后面的构建过程会失败）</p>\n<ul><li>官方推荐安装方式</li></ul>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">curl</span> --proto <span class=\"token string\">'=https'</span> --tlsv1.2 -sSf https://sh.rustup.rs <span class=\"token operator\">|</span> <span class=\"token function\">sh</span>\n</code></pre>\n<p>或是你比较喜欢使用 Homebrew 的话也可以用 Homebrew 来安装</p>\n<ul><li>Homebrew</li></ul>\n<pre><code class=\"prism language-bash\">brew <span class=\"token function\">install</span> rustup\n</code></pre>\n<p>然后下面再执行命令来进行环境变量初始化</p>\n<ul><li>初始化环境变量</li></ul>\n<pre><code class=\"prism language-bash\"><span class=\"token builtin class-name\">source</span> ~/.cargo/env\n</code></pre>\n<p>或是你可以把下面的路径加入到你的 <code>~/.zshrc</code> 或是 <code>~/.bash_profile</code> 里面</p>\n<pre><code class=\"prism language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$HOME</span>/.cargo/bin:<span class=\"token environment constant\">$PATH</span>\n</code></pre>\n<p>最后在终端里面测试一下是否安装成功</p>\n<pre><code class=\"prism language-bash\">% rustup --version\nrustup <span class=\"token number\">1.24</span>.3 <span class=\"token punctuation\">(</span>ce5817a94 <span class=\"token number\">2021</span>-05-31<span class=\"token punctuation\">)</span>\ninfo: This is the version <span class=\"token keyword\">for</span> the rustup toolchain manager, not the rustc compiler.\ninfo: The currently active <span class=\"token variable\"><span class=\"token variable\">`</span>rustc<span class=\"token variable\">`</span></span> version is <span class=\"token variable\"><span class=\"token variable\">`</span>rustc <span class=\"token number\">1.56</span>.1 <span class=\"token punctuation\">(</span>59eed8a2a <span class=\"token number\">2021</span>-11-01<span class=\"token punctuation\">)</span><span class=\"token variable\">`</span></span>\n</code></pre>\n<pre><code class=\"prism language-bash\">% rustc --version\nrustc <span class=\"token number\">1.56</span>.1 <span class=\"token punctuation\">(</span>59eed8a2a <span class=\"token number\">2021</span>-11-01<span class=\"token punctuation\">)</span>\n</code></pre>\n<pre><code class=\"prism language-bash\">% cargo --version\ncargo <span class=\"token number\">1.56</span>.0 <span class=\"token punctuation\">(</span>4ed5d137b <span class=\"token number\">2021</span>-10-04<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"12__wasmpack_63\"></a>1.2 安装 wasm-pack</h3>\n<p>第二个重要的工具是一个团队针对 Rust 对于 Wasm 的支持开发一个全面的 wasm-pack 工具，我们可以使用 <code>cargo</code> 进行安装</p>\n<pre><code class=\"prism language-bash\">% cargo <span class=\"token function\">install</span> wasm-pack\n% wasm-pack --version\nwasm-pack <span class=\"token number\">0.10</span>.1\n</code></pre>\n<h3><a id=\"13_CLion__73\"></a>1.3 CLion 配置</h3>\n<p>最后我们使用的 IDE 是 CLion，先安装 Rust 插件然后配置 Rust 工具链路径</p>\n<p>创建项目之前可以先在 里面配置工具链路径（当然要先安装好 Rust 插件啦）</p>\n<ul><li>插件安装：<code>Preference &gt; Plugins 搜寻 Rust</code></li></ul>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\1099cd18ba598fa4f9cc64bbaa79dc4b.png\"/></p>\n<ul><li>Rust 工具链路径配置：<code>Preference &gt; Language &amp; Frameworks &gt; Rust</code>\n<ul><li>Toolchain location：<code>~/.cargo/bin</code></li><li>Standard Library：<code>~/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust</code></li></ul> </li></ul>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\212af045c203736aec2b12722c37c3e4.png\"/></p>\n<p>通常选好第一个第二个它会自动补全的</p>\n<h2><a id=\"2__Rust_to_Wasm__91\"></a>2. 手动构建 Rust to Wasm 项目</h2>\n<p>接下来第一种我们先尝试直接使用刚才安装好的工具手动构建一个 Rust to Wasm 项目</p>\n<h3><a id=\"21__95\"></a>2.1 创建项目</h3>\n<p>创建项目的部分我们直接使用 <code>cargo</code> 提供的默认选项</p>\n<pre><code class=\"prism language-bash\">cargo new --lib manual\n</code></pre>\n<p>或是使用 CLion 提供的等价图形化选项</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\52254f0f8e43d7bd0ebb3bdbaf4c9481.png\"/></p>\n<h3><a id=\"22__Cargotoml_107\"></a>2.2 配置文件 Cargo.toml</h3>\n<p>创建好项目之后我们先不急着写代码，先配置好 <code>Cargo.toml</code> 文件配置</p>\n<ul><li><code>/manual/Cargo.toml</code></li></ul>\n<pre><code class=\"prism language-toml\">[package]\nname = \"rust_wasm\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[lib]\ncrate-type = [\"cdylib\"]\n\n[dependencies]\nwasm-bindgen = \"0.2.78\"\n\n[package.metadata.wasm-pack.profile.release]\nwasm-opt = false\n</code></pre>\n<p>首先指定构建目标 <code>crate-type = [\"cdylib\"]</code>，然后记得关闭 <code>wasm-opt = false</code></p>\n<h3><a id=\"23____133\"></a>2.3 模块导出函数 &amp; 打包</h3>\n<p>接下来就是库模块的主入口写一个导出函数</p>\n<ul><li><code>/manual/src/lib.rs</code></li></ul>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">wasm_bindgen<span class=\"token punctuation\">::</span>prelude<span class=\"token punctuation\">::</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[wasm_bindgen]</span>\n<span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">alert</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute attr-name\">#[wasm_bindgen]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">greet</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token macro property\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[manulaRustModule] Hello, {}!\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>加上 <code>#[wasm_bindgen]</code> 等下打包的时候才会被编译为导出函数</p>\n<p>下面我们就可以配置打包命令了</p>\n<ul><li>CLion 执行命令</li></ul>\n<p>使用 CLion 的话选择 wasm-pack 命令</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\29bbcee59fc566836cf22c8e1718c5c2.png\"/></p>\n<ul><li>命令行</li></ul>\n<p>如果你是使用命令行的话，则是运行下面的指令</p>\n<pre><code class=\"prism language-bash\">wasm-pack build --target web\n</code></pre>\n<p>本质上我们就是要使用 <code>--target web</code> 打包成 Web 浏览器能直接读取的方式</p>\n<h3><a id=\"24__173\"></a>2.4 前端项目展示</h3>\n<p>针对第一种方式，由于 wasm-pack 默认打包成了 ESM 模块，我们使用 webpack 来支持一下 ESM，简单的 webpack 配置我们就先不提了，所以我们直接看主入口</p>\n<ul><li><code>/index.js</code></li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> manualRustModule <span class=\"token keyword\">from</span> <span class=\"token string\">'./manual/pkg/rust_wasm'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'manulaRustModule'</span><span class=\"token punctuation\">,</span> manualRustModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmanualRustModule<span class=\"token punctuation\">.</span><span class=\"token function\">default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  manualRustModule<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token string\">'superfree'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>结果</li></ul>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\0fe293388707d76e0ce618b23cc98a0e.png\"/></p>\n<p>我们可以看到由于我们直接使用 <code>wasm-pack --target web</code> 的打包方式，所以我们导出的模块使用 <code>default</code> 方法进行初始化然后调用模块下的 <code>greet</code> 方法</p>\n<h2><a id=\"3__wasmpack__194\"></a>3. 使用 wasm-pack 模版构建</h2>\n<p>前面的方法还是比较琐碎的，接下来第二种方法我们可以直接使用 wasm-pack 提供的模版创建项目</p>\n<p>更偷懒的我们直接使用 CLion 提供的安装选项哈</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\84d9f78001d93b6c997ebeee4d6eb594.png\"/></p>\n<h3><a id=\"31__202\"></a>3.1 配置文件补全</h3>\n<p>创建好模版之后，我们还是要稍微修改一下配置文件，否则打包的时候老是警告hh</p>\n<ul><li><code>/pack_template/Cargo.toml</code></li></ul>\n<pre><code class=\"prism language-toml\">[package.metadata.wasm-pack.profile.release]\nwasm-opt = false\n</code></pre>\n<p>一样是关闭 <code>wasm-opt = false</code> 来避免打包错误</p>\n<h3><a id=\"32____215\"></a>3.2 模块导出函数 &amp; 打包</h3>\n<p>导出函数的部分其实写法也是差不多</p>\n<ul><li><code>/pack_template/src/lib.rs</code></li></ul>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">utils</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">wasm_bindgen<span class=\"token punctuation\">::</span>prelude<span class=\"token punctuation\">::</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// When the `wee_alloc` feature is enabled, use `wee_alloc` as the global</span>\n<span class=\"token comment\">// allocator.</span>\n<span class=\"token attribute attr-name\">#[cfg(feature = <span class=\"token string\">\"wee_alloc\"</span>)]</span>\n<span class=\"token attribute attr-name\">#[global_allocator]</span>\n<span class=\"token keyword\">static</span> <span class=\"token constant\">ALLOC</span><span class=\"token punctuation\">:</span> <span class=\"token namespace\">wee_alloc<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">WeeAlloc</span> <span class=\"token operator\">=</span> <span class=\"token namespace\">wee_alloc<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">WeeAlloc</span><span class=\"token punctuation\">::</span><span class=\"token constant\">INIT</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[wasm_bindgen]</span>\n<span class=\"token keyword\">extern</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">alert</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute attr-name\">#[wasm_bindgen]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">greet</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token macro property\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[packTemplateModule] Hello {}!\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>打包则是直接使用默认的 <code>wasm-pack build</code> 就可以了，默认采用的是 <code>--target bundler</code>，也就是打包成适合 webpack 或其他打包工具适合的导入方式</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\3e4a3f9986c5dd15b482a4729ec6178d.png\"/></p>\n<h3><a id=\"33__wasmtoolwasmpackplugin__247\"></a>3.3 前端 @wasm-tool/wasm-pack-plugin 插件</h3>\n<p>打包成功之后，我们前端也要做出相应的改变，引入 <code>@wasm-tool/wasm-pack-plugin</code> 插件，来对 Rust 项目进行初始化</p>\n<ul><li><code>webpack.config.js</code></li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> webpack <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> WasmPackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@wasm-tool/wasm-pack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  mode<span class=\"token operator\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span>\n  entry<span class=\"token operator\">:</span> <span class=\"token string\">'./index.js'</span><span class=\"token punctuation\">,</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n      template<span class=\"token operator\">:</span> <span class=\"token string\">'./public/index.html'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">WasmPackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n      crateDirectory<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'pack_template'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Have this example work in Edge which doesn't ship `TextEncoder` or</span>\n    <span class=\"token comment\">// `TextDecoder` at this time.</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>ProvidePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n      TextDecoder<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'text-encoding'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'TextDecoder'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      TextEncoder<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'text-encoding'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'TextEncoder'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  experiments<span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    asyncWebAssembly<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这里有几个注意点</p>\n<ol><li>使用 <code>WasmPackPlugin</code> 配置 Rust 项目根目录 <code>crateDirectory: path.resolve(__dirname, 'pack_template')</code></li><li>开启 <code>experiments.asyncWebAssembly: true</code> 选项</li></ol>\n<h3><a id=\"34__wasm____288\"></a>3.4 引入 wasm 模块 &amp; 运行效果</h3>\n<p>最后直接引入 wasm 代码</p>\n<ul><li><code>index.js</code></li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> packTemplateModule <span class=\"token keyword\">from</span> <span class=\"token string\">'./pack_template/pkg'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'packTemplateModule'</span><span class=\"token punctuation\">,</span> packTemplateModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npackTemplateModule<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token string\">'superfree'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>来看看运行效果</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\e6eabcc119a3a0dfbd4c87c6983201f3.png\"/></p>\n<h2><a id=\"4__305\"></a>4. 小结</h2>\n<p>尝试完 Rust to Wasm 的支持之后，不得不说体验上是比 C++ &amp; emscription 的体验要好很多（传送门：<a href=\"https://blog.csdn.net/weixin_44691608/article/details/120649157\">WASM 初探: JS 调用 C 模块</a>）</p>\n<p>wasm-pack 团队的努力让我们可以轻松使用 Rust 来编写 wasm 模块，同时直接默认支持前端工具链的 bundler，可以说是非常契合前端工程化</p>\n<h1><a id=\"_311\"></a>其他资源</h1>\n<h2><a id=\"_313\"></a>参考连接</h2>\n<table><thead><tr><th>Title</th><th>Link</th></tr></thead><tbody><tr><td>安裝 Rust - Rust</td><td><a href=\"https://www.rust-lang.org/zh-TW/tools/install\">https://www.rust-lang.org/zh-TW/tools/install</a></td></tr><tr><td>Quickstart - Hello wasm-pack!</td><td><a href=\"https://rustwasm.github.io/docs/wasm-pack/quickstart.html\">https://rustwasm.github.io/docs/wasm-pack/quickstart.html</a></td></tr><tr><td>Introduction - The wasm-bindgen Guide</td><td><a href=\"https://rustwasm.github.io/docs/wasm-bindgen/introduction.html\">https://rustwasm.github.io/docs/wasm-bindgen/introduction.html</a></td></tr><tr><td>Compiling from Rust to WebAssembly - MDN</td><td><a href=\"https://developer.mozilla.org/en-US/docs/WebAssembly/Rust_to_wasm\">https://developer.mozilla.org/en-US/docs/WebAssembly/Rust_to_wasm</a></td></tr><tr><td>no prebuilt wasm-opt binaries error #913 - Github issue</td><td><a href=\"https://github.com/rustwasm/wasm-pack/issues/913\">https://github.com/rustwasm/wasm-pack/issues/913</a></td></tr><tr><td>使用 Rust 编写更快的 React 组件</td><td><a href=\"https://mp.weixin.qq.com/s/QcnZn-_SefY2ysIz1SLX0w\">https://mp.weixin.qq.com/s/QcnZn-_SefY2ysIz1SLX0w</a></td></tr><tr><td>WASM 初探: JS 调用 C 模块</td><td><a href=\"https://blog.csdn.net/weixin_44691608/article/details/120649157\">https://blog.csdn.net/weixin_44691608/article/details/120649157</a></td></tr></tbody></table>\n<h2><a id=\"_325\"></a>完整代码示例</h2>\n<p><a href=\"https://github.com/superfreeeee/Blog-code/tree/main/back_end/rust/rust_wasm\">https://github.com/superfreeeee/Blog-code/tree/main/back_end/rust/rust_wasm</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-12-02 17:37:24", "summary": "构建模块文章目录构建模块正文安装使用安装安装配置手动构建项目创建项目配置文件模块导出函数打包前端项目展示使用模版构建配置文件补全模块导出函数打包前端插件引入模块运行效果小结其他资源参考连接完整代码示例"}