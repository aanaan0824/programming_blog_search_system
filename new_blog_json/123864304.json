{"blogid": "123864304", "writerAge": "码龄8年", "writerBlogNum": "4", "writerCollect": "67", "writerComment": "4", "writerFan": "9", "writerGrade": "1级", "writerIntegral": "60", "writerName": "寒冰-SY", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123864304.jpg", "writerRankTotal": "171833", "writerRankWeekly": "1073062", "writerThumb": "16", "writerVisitNum": "18105", "blog_read_count": "13943", "blog_time": "于 2022-03-31 11:33:24 发布", "blog_title": "23种设计模式概述", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>设计模式共有23种，创建型模式5种，结构型模式7种，行为型模式11种，本章只做概念性说明。</p>\n<h1><a id=\"__1\"></a>（一） 创建型模式</h1>\n<h2><a id=\"01__2\"></a>01 工厂模式</h2>\n<p><strong>定义</strong>：又叫做静态工厂方法，定义一个用于创建对象的接口，让子类决定实例化哪一个类，工厂模式使得一个类的实例化延迟到子类。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fe3cc82df44f4ad8a106668066708ae9.png\"/></p>\n<h2><a id=\"02__6\"></a>02 抽象工厂模式</h2>\n<p><strong>定义</strong>：提供一个创建系列相关或相互依赖对象的接口，而无需指定他们具体的类。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4f6cee63c43e479dbfad1590e3a68bf7.png\"/></p>\n<h2><a id=\"03__9\"></a>03 原型模式</h2>\n<p>定义：用原型实例指定创建对象的种类，并通过拷贝这些原型创建新的对象。<br/> 适用场景：相似对象，只是对象属性有差异，通过对象的深复制或浅复制构建新对象，直接应用；</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5ce0bb80de7a40ec88d74a7b7b78b296.png\"/></p>\n<h2><a id=\"04__14\"></a>04 单例模式</h2>\n<p><strong>定义</strong>：保证一个类只有一个实例，并提供一个访问它的全局访问点。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\77e75eb639ba49d383aa37ee14c18a4f.png\"/></p>\n<h2><a id=\"05__20\"></a>05 建造者模式</h2>\n<p><strong>定义</strong>：将一个复杂对象的构建与他的表示分离，使得同样的过程可以创建不同的表示。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6734129b19474f76b85444607b1cba94.png\"/></p>\n<h1><a id=\"_23\"></a>（二）结构型模式</h1>\n<h2><a id=\"01__24\"></a>01 适配器模式</h2>\n<p><strong>定义</strong>：将一个类的接口转换成客户希望的另外一个接口。该模式使得原本接口不兼容而不能一起工作的类可以一起工作。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\47fbff4d63554961a0fecf9e5a431497.png\"/></p>\n<h2><a id=\"02__27\"></a>02 桥接模式</h2>\n<p><strong>定义</strong>：将抽象部分与他的实现分离，使得他们都可以独立的变化。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\37dbfefc5be941e08e0db0286eaced43.png\"/></p>\n<h2><a id=\"03__31\"></a>03 组合模式</h2>\n<p><strong>定义</strong>：将对象组合成树形结构以表示“整体-部分”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e5b74c2aaecb464b8381d2a73570b6c0.png\"/></p>\n<h2><a id=\"04__35\"></a>04 装饰模式</h2>\n<p><strong>定义</strong>：动态的给一个对象添加一些额外的职责。就增加功能来说，装饰模式比生成子类更加灵活。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\47c2ecdb66c5412eb6fd495b031c8efa.png\"/></p>\n<h2><a id=\"05__39\"></a>05 外观模式</h2>\n<p><strong>定义</strong>：为子系统种的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得子系统更加容易使用。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6bb99ec0daee44aeb8a123002e1dc025.png\"/></p>\n<h2><a id=\"06__43\"></a>06 享元模式</h2>\n<p><strong>定义</strong>：为运用共享技术有效地支持大量细粒度的对象。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c675c0cc81a24f69ab0db05a13225b46.png\"/></p>\n<h2><a id=\"07__47\"></a>07 代理模式</h2>\n<p><strong>定义</strong>：为其他对象提供一种代理以控制对这个对象的访问。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\200ce1a3902d42e6a67f7c607176e08b.png\"/></p>\n<h1><a id=\"_50\"></a>（三）行为型模式</h1>\n<h2><a id=\"01__51\"></a>01 观察者模式</h2>\n<p><strong>定义</strong>：定义对象间一种一对多的依赖关系，当一个对象的状态发生变化时，所有依赖于它的对象都得到通知并被自动更新。<br/> <strong>场景案例</strong>：消息中心、订阅处理等。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cad094618e2749c4994aa3d82ff2f29f.png\"/></p>\n<h2><a id=\"02__55\"></a>02 模板方法模式</h2>\n<p><strong>定义</strong>：定义一个操作算法骨架，而讲一些步骤延迟到子类种，模板方法使得子类可以不改变一个子算法的结构，而重定义该算法的某些特定步骤。<br/> <strong>场景案例</strong>：算法设计，算法流程固定的。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ae6a759807b745098bc44ec3466beff9.png\"/></p>\n<h2><a id=\"03__59\"></a>03 命令模式</h2>\n<p><strong>定义</strong>：将一个请求封装为一个对象，从而可以使你可用不同的请求对客户进行参数化；可以对请求排队或记录请求日志，以及支持可撤销的操作。<br/> <strong>场景案例</strong>：饭店点餐系统<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\41511da9b9ef49aa9bf3fca60d9ca391.png\"/></p>\n<h2><a id=\"04__64\"></a>04 状态模式</h2>\n<p><strong>定义</strong>：允许一个对象在其内部状态改变时改变它的行为，让对象看起来似乎修改了它的类。<br/> <strong>场景案例</strong>：状态多分支。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0120b301c7de461a84313ae0149c2460.png\"/></p>\n<h2><a id=\"05__69\"></a>05 职责链模式</h2>\n<p><strong>定义</strong>：使多个对象都有机会处理请求，从而避免请求的发送者与接受者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。<br/> <strong>场景案例</strong>：简单流程，如审批、请销假、待办等。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7e69420754f74b2f937bf8061b5fcfc8.png\"/></p>\n<h2><a id=\"06__73\"></a>06 解释器模式</h2>\n<p><strong>定义</strong>：给定一个语言，定义他的文法的一种表示，并定义个解释器，这个解释器使用该表示来解释语句种的句子。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\72c488446eab4167b4d367983e30b978.png\"/></p>\n<h2><a id=\"07__76\"></a>07 中介者模式</h2>\n<p><strong>定义</strong>：用一个中介对象来封装一系列对象交互。中介者使得各对象不需要显示的相互交互，从而使其耦合松散，而且可以独立的改变他们之间的交互。<br/> <strong>场景案例</strong>：房屋中介交易。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\03719ddbfcd64a82a6a859273df64228.png\"/></p>\n<h2><a id=\"08__80\"></a>08 访问者模式</h2>\n<p><strong>定义</strong>：表示一个作用于某对象结构种的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e41d91982296406fa3f61165e029ff87.png\"/></p>\n<h2><a id=\"09__83\"></a>09 策略模式</h2>\n<p><strong>定义</strong>：定义一些列算法，把他们一个个封装起来，并且使他们可以相互替换。本模式使得算法可以独立于使用它的客户而变化。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4def7a55c0ec420984b5e1ef3d6d7bb5.png\"/></p>\n<h2><a id=\"10__87\"></a>10 备忘录模式</h2>\n<p><strong>定义</strong>：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象外保存这个状态。这样以后就可以将该对象恢复到原先保存的状态。<br/> <strong>场景案例</strong>：游戏进度存档、文件保存回档等。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ee6ee8738a964c1287f34060fed63dd2.png\"/></p>\n<h2><a id=\"11__91\"></a>11 迭代器模式</h2>\n<p><strong>定义</strong>：提供一种方法顺序访问一个聚合对象种的各个元素，而又不许暴露该对象的内部表示。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8ae81a00d5514ba0a35a075cb49ed006.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-31 11:33:24", "summary": "设计模式共有种，创建型模式种，结构型模式种，行为型模式种，本章只做概念性说明。一创建型模式工厂模式定义：又叫做静态工厂方法，定义一个用于创建对象的接口，让子类决定实例化哪一个类，工厂模式使得一个类的实"}