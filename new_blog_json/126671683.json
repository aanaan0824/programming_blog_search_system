{"blogid": "126671683", "writerAge": "码龄1年", "writerBlogNum": "452", "writerCollect": "2386", "writerComment": "2985", "writerFan": "1318", "writerGrade": "7级", "writerIntegral": "11386", "writerName": "YZL40514131", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126671683.jpg", "writerRankTotal": "1160", "writerRankWeekly": "98", "writerThumb": "2646", "writerVisitNum": "209626", "blog_read_count": "190", "blog_time": "于 2022-09-04 08:48:12 发布", "blog_title": "python——装饰器深入研究（一）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e6b44d23e78f45298faab17eb6f09566.png\"/></p>\n<h1><a id=\"_2\"></a>一、装饰器解释</h1>\n<h2><a id=\"1_3\"></a>1、装饰器属于设计模式的一种：装饰器模式</h2>\n<h2><a id=\"2_4\"></a>2、符合开放封闭原则</h2>\n<p><font color=\"#FF0000\" size=\"4\">开放：对拓展开放<br/> 封闭：对修改封闭</font></p>\n<h2><a id=\"3_7\"></a>3、装饰器用来做什么？</h2>\n<p>可以在不修改功能函数内部代码的情况下，给功能函数进行拓展新的功能</p>\n<h2><a id=\"4_10\"></a>4、装饰器怎么定义：</h2>\n<p>1、闭包实现<br/> 2、类实现<br/> 3、普通函数<br/> <font color=\"#FF0000\" size=\"4\">只要是可调用的对象（加括号就能调用），都可以作为装饰器,通过callable内置函数进行判断</font></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">runc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\nres<span class=\"token operator\">=</span><span class=\"token builtin\">callable</span><span class=\"token punctuation\">(</span>runc<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"_24\"></a>二、采用闭包形式执行</h1>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">fun_work</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">fun_test</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'开始执行'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b不能为0'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'结束执行'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> fun_test\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    res <span class=\"token operator\">=</span> a <span class=\"token operator\">/</span> b\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a除B的结果为:'</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n\nwork<span class=\"token operator\">=</span>fun_work<span class=\"token punctuation\">(</span>work<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">#todo 执行函数</span>\n</code></pre>\n<h2><a id=\"_44\"></a>执行逻辑：</h2>\n<blockquote>\n<p><strong>1、将函数work作为参数传递到fun_work函数中，返回fun_test<br/> <font color=\"#FF0000\" size=\"4\">2、把fun_test返回值用所传参数同名的变量work去接收</font><br/> 3、调用work()，执行fun_test(<code>*args,**kwargs</code>)方法</strong></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\73a329d976b24cbcadf68385dd094862.png\"/></p>\n<h1><a id=\"_51\"></a>三、采用装饰器执行</h1>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">fun_work1</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">fun_test1</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'开始执行'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b不能为0'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'结束执行'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> fun_test1\n\n<span class=\"token decorator annotation punctuation\">@fun_work1</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    res <span class=\"token operator\">=</span> a <span class=\"token operator\">/</span> b\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a除B的结果为:'</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n\nwork<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#todo 执行函数</span>\n</code></pre>\n<h2><a id=\"_72\"></a>执行逻辑：</h2>\n<blockquote>\n<p><font color=\"#1E90FF\" size=\"4\"><strong><strong>1、@fun_work1 ：表示调用装饰器fun_work1函数<br/> 2、把被装饰器装饰的函数work传递到fun_work1中<br/> 3、并且把返回的结果（fun_test1）传给与函数同名的变量work<br/> 4、@fun_work1这行代码相当于work=fun_work1(work)<br/> 5、调用work()===执行fun_test1()</strong></strong></font></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\713d2a54287e45ba83952840066d06ba.png\"/></p>\n<h1><a id=\"_82\"></a>四、闭包实现最简单装饰器的框架</h1>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>    <span class=\"token comment\">#func用来接收被装饰器装饰的函数名称</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">#函数执行前的功能拓展代码</span>\n        func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#函数执行后的功能拓展代码</span>\n\n    <span class=\"token keyword\">return</span> inner\n\n<span class=\"token decorator annotation punctuation\">@outer</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\nwork<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t\t<span class=\"token comment\">#执行work()：也就是执行inner()</span>\n</code></pre>\n<h1><a id=\"_102\"></a>五、装饰器装饰带有参数的函数</h1>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a-b的值为:'</span><span class=\"token punctuation\">,</span>a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span>\n        func<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a*b的值为:'</span><span class=\"token punctuation\">,</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> inner\n\n\n<span class=\"token decorator annotation punctuation\">@outer</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a+b的值为:'</span><span class=\"token punctuation\">,</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span>\n\nwork<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"_120\"></a>传参流程图</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\30a69154c02049c39a7e7079bdae89bf.png\"/></p>\n<h1><a id=\"_123\"></a>六、装饰器如何做到通用，可以装饰参数个数多个的函数？</h1>\n<h2><a id=\"_124\"></a>通用装饰器的写法，一定要会</h2>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n        <span class=\"token comment\">#函数执行前的功能拓展代码</span>\n        res<span class=\"token operator\">=</span>func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\">#函数执行后的功能拓展代码</span>\n        <span class=\"token keyword\">return</span> res\n    \n    <span class=\"token keyword\">return</span> inner\n\n\n<span class=\"token decorator annotation punctuation\">@outer</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'a+b+c的值为:{}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token operator\">+</span>c<span class=\"token punctuation\">)</span>\n\nres<span class=\"token operator\">=</span>work<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"_147\"></a>七、被装饰器装饰的函数有返回值，怎么解决？</h1>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a-b的值为:'</span><span class=\"token punctuation\">,</span>a<span class=\"token operator\">-</span>b<span class=\"token punctuation\">)</span>\n        res<span class=\"token operator\">=</span>func<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a*b的值为:'</span><span class=\"token punctuation\">,</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res\n    <span class=\"token keyword\">return</span> inner\n\n\n<span class=\"token decorator annotation punctuation\">@outer</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'a+b的值为:{}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span>\n\nres<span class=\"token operator\">=</span>work<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"_168\"></a>八、装饰器装饰类</h1>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">decorator</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>            <span class=\"token comment\">#item接收TestDemo</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n        <span class=\"token comment\">#功能拓展</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{}实例化了一个对象'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        result<span class=\"token operator\">=</span>item<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#功能拓展</span>\n\n        <span class=\"token keyword\">return</span> result\n\n    <span class=\"token keyword\">return</span> wrapper\n\n\n<span class=\"token decorator annotation punctuation\">@decorator</span>      <span class=\"token comment\">#TestDemo=decorator(TestDemo)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestDemo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>TestDemo<span class=\"token punctuation\">)</span>         <span class=\"token comment\">#&lt;function decorator.&lt;locals&gt;.wrapper at 0x000001E84F9E99D0&gt;</span>\n\nobj<span class=\"token operator\">=</span>TestDemo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nobj1<span class=\"token operator\">=</span>TestDemo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nobj2<span class=\"token operator\">=</span>TestDemo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\t\t\t<span class=\"token comment\">#&lt;__main__.TestDemo object at 0x000002826039B0A0&gt;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"_199\"></a>执行逻辑：</h2>\n<blockquote>\n<p><font color=\"#1E90FF\" size=\"4\"><strong>1、@decorator：将类TestDemo作为参数传递给装饰器decorator中————————》decorator(TestDemo)<br/> 2、并且将decorator(TestDemo)用和传递给装饰器同名的参数TestDemo作为变量——————》TestDemo=decorator(TestDemo)<br/> 3、TestDemo()：调用TestDemo相当于调用wrapper方法<br/> 4、result=item(<code>*args,**kwargs</code>)——————》item表示TestDemo类，初始化一个item对象，result是对象名称<br/> 5、调用TestDemo()——————》调用wrapper方法返回result——————》需要接收返回值：obj=TestDemo()，obj就是实例化的对象</strong></font></p>\n</blockquote>\n<h1><a id=\"_207\"></a>九、带参数的装饰器</h1>\n<h2><a id=\"1pytest_208\"></a>案例1：用pytest做自动化测试时用到装饰器</h2>\n<pre><code class=\"prism language-python\"><span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>mark<span class=\"token punctuation\">.</span>parametrize</span><span class=\"token punctuation\">(</span><span class=\"token string\">'item'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span><span class=\"token number\">44</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_demo</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"item\"</span><span class=\"token punctuation\">,</span>item<span class=\"token punctuation\">)</span>\n</code></pre>\n<blockquote>\n<p><strong><code>@pytest.mark.parametrize('item',[11,22,33,44])</code>的执行逻辑：<br/> 先调用函数，将整体的返回值作为装饰器，装饰test_demo函数</strong></p>\n</blockquote>\n<p>即</p>\n<blockquote>\n<p><strong><code>@pytest.mark.parametrize('item',[11,22,33,44])</code><br/> 等于<br/> <code>result=pytest.mark.parametrize('item',[11,22,33,44])</code><br/> <code>@result</code><br/> 执行语句：<code>test_demo=result(test_demo)</code></strong></p>\n</blockquote>\n<h2><a id=\"2_228\"></a>案例2：实现带参数的装饰器</h2>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n        res<span class=\"token operator\">=</span>func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> res\n\n    <span class=\"token keyword\">return</span> inner\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">kobe</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">,</span>sex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> outer\t\t\t<span class=\"token comment\">#必须返回装饰器函数名称</span>\n\n<span class=\"token decorator annotation punctuation\">@kobe</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token string\">'aa'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------work------------:\"</span><span class=\"token punctuation\">)</span>\n\n\nwork<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"_252\"></a>执行逻辑示意图</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\84f09e8338f94b3c9867178d12718e38.png\"/></p>\n<h3><a id=\"_254\"></a>缺点：</h3>\n<blockquote>\n<p><strong>没办法获得装饰器中的参数age,sex</strong></p>\n</blockquote>\n<h2><a id=\"3_258\"></a>案例3：实现带参数的装饰器最终版（模板）</h2>\n<blockquote>\n<p><strong><font color=\"#FF0000\" size=\"4\">最外层的参数，是装饰器的参数<br/> 中间层的参数：接收被装饰的函数<br/> 最里层的参数：接收的是被装饰器装饰的函数调用时传递的参数</font></strong></p>\n</blockquote>\n<blockquote>\n<p><strong><font color=\"#FF0000\" size=\"4\">@kobe(18,‘aa’)等同于work=kobe(18,‘aa’)(work)</font></strong></p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">kobe</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">,</span>sex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#todo 最外层的参数，是装饰器的参数</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">#todo 中间层的参数：接收被装饰的函数</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\">#todo 最里层的参数：接收的是被装饰器函数调用时传递的参数</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'装饰器拓展前的功能代码age'</span><span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span>\n            res <span class=\"token operator\">=</span> func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'装饰器拓展前的功能代码sex'</span><span class=\"token punctuation\">,</span> sex<span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">return</span> res\n\n        <span class=\"token keyword\">return</span> inner\n    <span class=\"token keyword\">return</span> outer\n\n<span class=\"token decorator annotation punctuation\">@kobe</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token string\">'aa'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------work------------:\"</span><span class=\"token punctuation\">)</span>\n\n\nwork<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"_289\"></a>执行结果：</h3>\n<p>装饰器拓展前的功能代码age 18<br/> ------------work------------:<br/> 装饰器拓展前的功能代码sex aa<br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/375b7eb104ab4020b53055726796063d.webp#pic_center\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-04 08:48:12", "summary": "在这里插入图片描述一、装饰器解释、装饰器属于设计模式的一种：装饰器模式、符合开放封闭原则开放：对拓展开放封闭：对修改封闭、装饰器用来做什么？可以在不修改功能函数内部代码的情况下，给功能函数进行拓展新的"}