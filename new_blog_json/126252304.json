{"blogid": "126252304", "writerAge": "码龄2年", "writerBlogNum": "93", "writerCollect": "5029", "writerComment": "5452", "writerFan": "4922", "writerGrade": "7级", "writerIntegral": "13517", "writerName": "一名不会打字的程序员", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126252304.jpg", "writerRankTotal": "786", "writerRankWeekly": "73", "writerThumb": "5253", "writerVisitNum": "78795", "blog_read_count": "768", "blog_time": "于 2022-08-09 17:32:24 发布", "blog_title": "JavaScript 基础知识| 数据类型|类型转换", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/f7f5e8f696074d79bb7c7cfaab2ea5d2.gif#pic_center\"/></p>\n<blockquote>\n<p>🐧<strong>主页详情</strong>：<a href=\"https://blog.csdn.net/weixin_51568389?spm=1011.2435.3001.5343\">Choice~的个人主页</a><br/> 📢<strong>作者简介</strong>：🏅物联网领域创作者🏅 and 🏅阿里专家博主🏅 and 🏅华为云享专家🏅<br/> ✍️<strong>人生格言</strong>：最慢的步伐不是跬步，而是徘徊；最快的脚步不是冲刺，而是坚持。<br/> 🧑‍💻<strong>人生目标</strong>：成为一名合格的程序员，做未完成的梦：实现财富自由。<br/> 🚩<strong>技术方向</strong>：NULL<br/> 👻如果觉得博主的文章还不错的话，请三连支持一下博主哦<br/> 💬给大家介绍一个我一直在用的求职刷题收割offe👉<a href=\"https://www.nowcoder.com/link/pc_csdncpt_choice_js\">点击进入网站</a><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6210ee6e3d2b4720a246dca2c127478e.png\"/></p>\n</blockquote>\n<h1><a id=\"_12\"></a>数据类型</h1>\n<p>JavaScript 中的值都具有特定的类型。例如，字符串或数字。</p>\n<p>在 JavaScript 中有 8 种基本的数据类型（译注：7 种原始类型和 1 种引用类型）。在这里，我们将对它们进行大体的介绍，在下一章中，我们将详细讨论它们。</p>\n<p>我们可以将任何类型的值存入变量。例如，一个变量可以在前一刻是个字符串，下一刻就存储一个数字：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 没有错误</span>\n<span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\nmessage <span class=\"token operator\">=</span> <span class=\"token number\">123456</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>允许这种操作的编程语言，例如 JavaScript，被称为“动态类型”（dynamically typed）的编程语言，意思是虽然编程语言中有不同的数据类型，但是你定义的变量并不会在定义后，被限制为某一数据类型。</p>\n<h2><a id=\"Number__28\"></a>Number 类型</h2>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\nn <span class=\"token operator\">=</span> <span class=\"token number\">12.345</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><em>number</em> 类型代表整数和浮点数。</p>\n<p>数字可以有很多操作，比如，乘法 <code>*</code>、除法 <code>/</code>、加法 <code>+</code>、减法 <code>-</code> 等等。</p>\n<p>除了常规的数字，还包括所谓的“特殊数值（“special numeric values”）”也属于这种类型：<code>Infinity</code>、<code>-Infinity</code> 和 <code>NaN</code>。</p>\n<ul><li> <p><code>Infinity</code> 代表数学概念中的 <a href=\"https://en.wikipedia.org/wiki/Infinity\">无穷大</a> ∞。是一个比任何数字都大的特殊值。</p> <p>我们可以通过除以 0 来得到它：</p> <pre><code class=\"prism language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Infinity</span>\n</code></pre> <p>或者在代码中直接使用它：</p> <pre><code class=\"prism language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token number\">Infinity</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Infinity</span>\n</code></pre> </li><li> <p><code>NaN</code> 代表一个计算错误。它是一个不正确的或者一个未定义的数学操作所得到的结果，比如：</p> <pre><code class=\"prism language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"not a number\"</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN，这样的除法是错误的</span>\n</code></pre> <p><code>NaN</code> 是粘性的。任何对 <code>NaN</code> 的进一步数学运算都会返回 <code>NaN</code>：</p> <pre><code class=\"prism language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token number\">NaN</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">NaN</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"not a number\"</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\n</code></pre> <p>所以，如果在数学表达式中有一个 <code>NaN</code>，会被传播到最终结果（只有一个例外：<code>NaN ** 0</code> 结果为 <code>1</code>）。</p> </li></ul>\n<blockquote>\n<p>ℹ️<strong>数学运算是安全的</strong></p>\n<p>在 JavaScript 中做数学运算是安全的。我们可以做任何事：除以 0，将非数字字符串视为数字，等等。</p>\n<p>脚本永远不会因为一个致命的错误（“死亡”）而停止。最坏的情况下，我们会得到 <code>NaN</code> 的结果。</p>\n<p>特殊的数值属于 “number” 类型。当然，对“特殊的数值”这个词的一般认识是，它们并不是数字。</p>\n<p>我们将在 【数字类型】一节中学习数字的更多细节。</p>\n</blockquote>\n<h2><a id=\"BigInt__81\"></a>BigInt 类型</h2>\n<p>在 JavaScript 中，“number” 类型无法表示大于 <code>(253-1)</code>（即 <code>9007199254740991</code>），或小于 <code>-(253-1)</code> 的整数。这是其内部表示形式导致的技术限制。</p>\n<p>在大多数情况下，这个范围就足够了，但有时我们需要很大的数字，例如用于加密或微秒精度的时间戳。</p>\n<p><code>BigInt</code> 类型是最近被添加到 JavaScript 语言中的，用于表示任意长度的整数。</p>\n<p>可以通过将 <code>n</code> 附加到整数字段的末尾来创建 <code>BigInt</code> 值。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 尾部的 \"n\" 表示这是一个 BigInt 类型</span>\n<span class=\"token keyword\">const</span> bigInt <span class=\"token operator\">=</span> <span class=\"token number\">1234567890123456789012345678901234567890n</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>由于很少需要 <code>BigInt</code> 类型的数字，我们在这没有对其进行讲解，我们在单独的章节 <a href=\"https://zh.javascript.info/bigint\">BigInt</a> 中专门对其进行了介绍。当你需要使用那样的大数字的时候，可以去阅读该章节。</p>\n<blockquote>\n<p>ℹ️<strong>兼容性问题</strong></p>\n<p>目前 Firefox/Chrome/Edge/Safari 已经支持 <code>BigInt</code> 了，但 IE 还没有。</p>\n<p>你可以查看 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt#Browser_compatibility\"><em>MDN</em> BigInt 兼容性表</a> 以了解哪些版本的浏览器已经支持 BigInt 了。</p>\n</blockquote>\n<h2><a id=\"String__104\"></a>String 类型</h2>\n<p>JavaScript 中的字符串必须被括在引号里。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">'Single quotes are ok too'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> phrase <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">can embed another </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>str<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>在 JavaScript 中，有三种包含字符串的方式。</p>\n<ol><li>双引号：<code>\"Hello\"</code>.</li><li>单引号：<code>'Hello'</code>.</li><li>反引号：<code>Hello</code>.</li></ol>\n<p>双引号和单引号都是“简单”引用，在 JavaScript 中两者几乎没有什么差别。</p>\n<p>反引号是 <strong>功能扩展</strong> 引号。它们允许我们通过将变量和表达式包装在 <code>${…}</code> 中，来将它们嵌入到字符串中。例如：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 嵌入一个变量</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hello, John!</span>\n\n<span class=\"token comment\">// 嵌入一个表达式</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">the result is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// the result is 3</span>\n</code></pre>\n<p><code>${…}</code> 内的表达式会被计算，计算结果会成为字符串的一部分。可以在 <code>${…}</code> 内放置任何东西：诸如名为 <code>name</code> 的变量，或者诸如 <code>1 + 2</code> 的算数表达式，或者其他一些更复杂的。</p>\n<p>需要注意的是，这仅仅在反引号内有效，其他引号不允许这种嵌入。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"the result is ${1 + 2}\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// the result is ${1 + 2}（使用双引号则不会计算 ${…} 中的内容）</span>\n</code></pre>\n<p>我们会在 【字符串】 一节中学习字符串的更多细节。</p>\n<blockquote>\n<p>ℹ️<strong>JavaScript 中没有 *character* 类型。</strong></p>\n<p>在一些语言中，单个字符有一个特殊的 “character” 类型，在 C 语言和 Java 语言中被称为 “char”。</p>\n<p>在 JavaScript 中没有这种类型。只有一种 <code>string</code> 类型，一个字符串可以包含零个（为空）、一个或多个字符。</p>\n</blockquote>\n<h2><a id=\"Boolean__150\"></a>Boolean 类型（逻辑类型）</h2>\n<p>boolean 类型仅包含两个值：<code>true</code> 和 <code>false</code>。</p>\n<p>这种类型通常用于存储表示 yes 或 no 的值：<code>true</code> 意味着 “yes，正确”，<code>false</code> 意味着 “no，不正确”。</p>\n<p>比如：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> nameFieldChecked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// yes, name field is checked</span>\n<span class=\"token keyword\">let</span> ageFieldChecked <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// no, age field is not checked</span>\n</code></pre>\n<p>布尔值也可作为比较的结果：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> isGreater <span class=\"token operator\">=</span> <span class=\"token number\">4</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> isGreater <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true（比较的结果是 \"yes\"）</span>\n</code></pre>\n<p>更详细的内容将会在 【逻辑运算符】 一节中介绍。</p>\n<h2><a id=\"null__173\"></a>null 值</h2>\n<p>特殊的 <code>null</code> 值不属于上述任何一种类型。</p>\n<p>它构成了一个独立的类型，只包含 <code>null</code> 值：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>相比较于其他编程语言，JavaScript 中的 <code>null</code> 不是一个“对不存在的 <code>object</code> 的引用”或者 “null 指针”。</p>\n<p>JavaScript 中的 <code>null</code> 仅仅是一个代表“无”、“空”或“值未知”的特殊值。</p>\n<p>上面的代码表示 <code>age</code> 是未知的。</p>\n<h2><a id=\"undefined__189\"></a>undefined 值</h2>\n<p>特殊值 <code>undefined</code> 和 <code>null</code> 一样自成类型。</p>\n<p><code>undefined</code> 的含义是 <code>未被赋值</code>。</p>\n<p>如果一个变量已被声明，但未被赋值，那么它的值就是 <code>undefined</code>：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> age<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 弹出 \"undefined\"</span>\n</code></pre>\n<p>从技术上讲，可以显式地将 <code>undefined</code> 赋值给变量：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 将值修改为 undefined</span>\nage <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"undefined\"</span>\n</code></pre>\n<p>……但是不建议这样做。通常，使用 <code>null</code> 将一个“空”或者“未知”的值写入变量中，而 <code>undefined</code> 则保留作为未进行初始化的事物的默认初始值。</p>\n<h2><a id=\"Object__Symbol__216\"></a>Object 类型和 Symbol 类型</h2>\n<p><code>object</code> 类型是一个特殊的类型。</p>\n<p>其他所有的数据类型都被称为“原始类型”，因为它们的值只包含一个单独的内容（字符串、数字或者其他）。相反，<code>object</code> 则用于储存数据集合和更复杂的实体。</p>\n<p>因为它非常重要，所以我们对其进行单独讲解。在充分学习了原始类型后，我们将会在 【对象】一章中介绍 <code>object</code>。</p>\n<p><code>symbol</code> 类型用于创建对象的唯一标识符。我们在这里提到 <code>symbol</code> 类型是为了完整性，但我们要在学完 <code>object</code> 类型后再学习它。</p>\n<h2><a id=\"typeof__226\"></a>typeof 运算符</h2>\n<p><code>typeof</code> 运算符返回参数的类型。当我们想要分别处理不同类型值的时候，或者想快速进行数据类型检验时，非常有用。</p>\n<p>对 <code>typeof x</code> 的调用会以字符串的形式返回数据类型：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span> <span class=\"token comment\">// \"undefined\"</span>\n\n<span class=\"token keyword\">typeof</span> <span class=\"token number\">0</span> <span class=\"token comment\">// \"number\"</span>\n\n<span class=\"token keyword\">typeof</span> <span class=\"token number\">10n</span> <span class=\"token comment\">// \"bigint\"</span>\n\n<span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// \"boolean\"</span>\n\n<span class=\"token keyword\">typeof</span> <span class=\"token string\">\"foo\"</span> <span class=\"token comment\">// \"string\"</span>\n\n<span class=\"token keyword\">typeof</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"symbol\"</span>\n\n<span class=\"token keyword\">typeof</span> Math <span class=\"token comment\">// \"object\"  (1)</span>\n\n<span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">// \"object\"  (2)</span>\n\n<span class=\"token keyword\">typeof</span> alert <span class=\"token comment\">// \"function\"  (3)</span>\n</code></pre>\n<p>最后三行可能需要额外的说明：</p>\n<ol><li><code>Math</code> 是一个提供数学运算的内建 <code>object</code>。我们会在 【数字类型】 一节中学习它。此处仅作为一个 <code>object</code> 的示例。</li><li><code>typeof null</code> 的结果为 <code>\"object\"</code>。这是官方承认的 <code>typeof</code> 的错误，这个问题来自于 JavaScript 语言的早期阶段，并为了兼容性而保留了下来。<code>null</code> 绝对不是一个 <code>object</code>。<code>null</code> 有自己的类型，它是一个特殊值。<code>typeof</code> 的行为在这里是错误的。</li><li><code>typeof alert</code> 的结果是 <code>\"function\"</code>，因为 <code>alert</code> 在 JavaScript 语言中是一个函数。我们会在下一章学习函数，那时我们会了解到，在 JavaScript 语言中没有一个特别的 “function” 类型。函数隶属于 <code>object</code> 类型。但是 <code>typeof</code> 会对函数区分对待，并返回 <code>\"function\"</code>。这也是来自于 JavaScript 语言早期的问题。从技术上讲，这种行为是不正确的，但在实际编程中却非常方便。</li></ol>\n<blockquote>\n<p>ℹ️**<code>typeof(x)</code> 语法**</p>\n<p>你可能还会遇到另一种语法：<code>typeof(x)</code>。它与 <code>typeof x</code> 相同。</p>\n<p>简单点说：<code>typeof</code> 是一个操作符，不是一个函数。这里的括号不是 <code>typeof</code> 的一部分。它是数学运算分组的括号。</p>\n<p>通常，这样的括号里包含的是一个数学表达式，例如 <code>(2 + 2)</code>，但这里它只包含一个参数 <code>(x)</code>。从语法上讲，它们允许在 <code>typeof</code> 运算符和其参数之间不打空格，有些人喜欢这样的风格。</p>\n<p>有些人更喜欢用 <code>typeof(x)</code>，尽管 <code>typeof x</code> 语法更为常见。</p>\n</blockquote>\n<h2><a id=\"_268\"></a>总结</h2>\n<p>JavaScript 中有八种基本的数据类型（译注：前七种为基本数据类型，也称为原始类型，而 <code>object</code> 为复杂数据类型）。</p>\n<ul><li><code>number</code> 用于任何类型的数字：整数或浮点数，在 <code>±(253-1)</code> 范围内的整数。</li><li><code>bigint</code> 用于任意长度的整数。</li><li><code>string</code> 用于字符串：一个字符串可以包含 0 个或多个字符，所以没有单独的单字符类型。</li><li><code>boolean</code> 用于 <code>true</code> 和 <code>false</code>。</li><li><code>null</code> 用于未知的值 —— 只有一个 <code>null</code> 值的独立类型。</li><li><code>undefined</code> 用于未定义的值 —— 只有一个 <code>undefined</code> 值的独立类型。</li><li><code>symbol</code> 用于唯一的标识符。</li><li><code>object</code> 用于更复杂的数据结构。</li></ul>\n<p>我们可以通过 <code>typeof</code> 运算符查看存储在变量中的数据类型。</p>\n<ul><li>通常用作 <code>typeof x</code>，但 <code>typeof(x)</code> 也可行。</li><li>以字符串的形式返回类型名称，例如 <code>\"string\"</code>。</li><li><code>typeof null</code> 会返回 <code>\"object\"</code> —— 这是 JavaScript 编程语言的一个错误，实际上它并不是一个 <code>object</code>。</li></ul>\n<p>在接下来的章节中，我们将重点介绍原始类型值，当你掌握了原始数据类型后，我们将继续学习 <code>object</code>。</p>\n<h2><a id=\"_289\"></a>✅任务</h2>\n<h3><a id=\"_291\"></a>字符串的引号</h3>\n<p>重要程度: 5</p>\n<p>下面的脚本会输出什么？</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Ilya\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span><span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ?</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span><span class=\"token string\">\"name\"</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ?</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ?</span>\n</code></pre>\n<p><em>解决方案</em></p>\n<p>反引号将包装在 <code>${...}</code> 中的表达式嵌入到了字符串。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Ilya\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 表达式为数字 1</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span><span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hello 1</span>\n\n<span class=\"token comment\">// 表达式是一个字符串 \"name\"</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span><span class=\"token string\">\"name\"</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hello name</span>\n\n<span class=\"token comment\">// 表达式是一个变量，嵌入进去了。</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hello Ilya</span>\n</code></pre>\n<h1><a id=\"alertprompt__confirm_324\"></a>交互：alert、prompt 和 confirm</h1>\n<p>由于我们将使用浏览器作为我们的演示环境，让我们看几个与用户交互的函数：<code>alert</code>，<code>prompt</code> 和<code>confirm</code>。</p>\n<h2><a id=\"alert_328\"></a>alert</h2>\n<p>这个我们前面已经看到过了。它会显示一条信息，并等待用户按下 “OK”。</p>\n<p>例如：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>弹出的这个带有信息的小窗口被称为 <strong>模态窗</strong>。“modal” 意味着用户不能与页面的其他部分（例如点击其他按钮等）进行交互，直到他们处理完窗口。在上面示例这种情况下 —— 直到用户点击“确定”按钮。</p>\n<h2><a id=\"prompt_340\"></a>prompt</h2>\n<p><code>prompt</code> 函数接收两个参数：</p>\n<pre><code class=\"prism language-javascript\">result <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>浏览器会显示一个带有文本消息的模态窗口，还有 input 框和确定/取消按钮。</p>\n<ul><li> <p><code>title</code></p> <p>显示给用户的文本</p> </li><li> <p><code>default</code></p> <p>可选的第二个参数，指定 input 框的初始值。</p> </li></ul>\n<blockquote>\n<p>ℹ️<strong>语法中的方括号 <code>[...]</code></strong></p>\n<p>上述语法中 <code>default</code> 周围的方括号表示该参数是可选的，不是必需的。</p>\n</blockquote>\n<p>访问者可以在提示输入栏中输入一些内容，然后按“确定”键。然后我们在 <code>result</code> 中获取该文本。或者他们可以按取消键或按 Esc 键取消输入，然后我们得到 <code>null</code> 作为 <code>result</code>。</p>\n<p><code>prompt</code> 将返回用户在 <code>input</code> 框内输入的文本，如果用户取消了输入，则返回 <code>null</code>。</p>\n<p>举个例子：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'How old are you?'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You are </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> years old!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// You are 100 years old!</span>\n</code></pre>\n<p>⚠️<strong>IE 浏览器会提供默认值</strong></p>\n<p>第二个参数是可选的。但是如果我们不提供的话，Internet Explorer 会把 <code>\"undefined\"</code> 插入到 prompt。</p>\n<p>我们可以在 Internet Explorer 中运行下面这行代码来看看效果：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> test <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>所以，为了 prompt 在 IE 中有好的效果，我们建议始终提供第二个参数：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> test <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Test\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;-- 用于 IE 浏览器</span>\n</code></pre>\n<h2><a id=\"confirm_390\"></a>confirm</h2>\n<p>语法：</p>\n<pre><code class=\"prism language-javascript\">result <span class=\"token operator\">=</span> <span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span>question<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><code>confirm</code> 函数显示一个带有 <code>question</code> 以及确定和取消两个按钮的模态窗口。</p>\n<p>点击确定返回 <code>true</code>，点击取消返回 <code>false</code>。</p>\n<p>例如：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> isBoss <span class=\"token operator\">=</span> <span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Are you the boss?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> isBoss <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果“确定”按钮被按下，则显示 true</span>\n</code></pre>\n<h2><a id=\"_410\"></a>总结</h2>\n<p>我们学习了与用户交互的 3 个浏览器的特定函数：</p>\n<ul><li> <p><code>alert</code></p> <p>显示信息。</p> </li><li> <p><code>prompt</code></p> <p>显示信息要求用户输入文本。点击确定返回文本，点击取消或按下 Esc 键返回 <code>null</code>。</p> </li><li> <p><code>confirm</code></p> <p>显示信息等待用户点击确定或取消。点击确定返回 <code>true</code>，点击取消或按下 Esc 键返回 <code>false</code>。</p> </li></ul>\n<p>这些方法都是模态的：它们暂停脚本的执行，并且不允许用户与该页面的其余部分进行交互，直到窗口被解除。</p>\n<p>上述所有方法共有两个限制：</p>\n<ol><li>模态窗口的确切位置由浏览器决定。通常在页面中心。</li><li>窗口的确切外观也取决于浏览器。我们不能修改它。</li></ol>\n<p>这就是简单的代价。还有其他一些方式可以显示更漂亮的窗口，并与用户进行更丰富的交互，但如果“花里胡哨”不是非常重要，那使用本节讲的这些方法也挺好。</p>\n<h2><a id=\"_435\"></a>✅任务</h2>\n<h3><a id=\"_437\"></a>创建一个简单的页面</h3>\n<p>重要程度: 4</p>\n<p>创建一个要求用户输入 <code>name</code>，并通过浏览器窗口对键入的内容进行输出的 web 页面。</p>\n<p><a href=\"alert-prompt-confirm#\">运行 demo</a></p>\n<p><em>解决方案</em></p>\n<p>JavaScript 代码：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"What is your name?\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>整个页面的代码：</p>\n<pre><code class=\"prism language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"What is your name?\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<h1><a id=\"_476\"></a>类型转换</h1>\n<p>大多数情况下，运算符和函数会自动将赋予它们的值转换为正确的类型。</p>\n<p>比如，<code>alert</code> 会自动将任何值都转换为字符串以进行显示。算术运算符会将值转换为数字。</p>\n<p>在某些情况下，我们需要将值显式地转换为我们期望的类型。</p>\n<blockquote>\n<p>ℹ️<strong>对象还未纳入讨论中</strong></p>\n<p>在本章中，我们不会讨论 object 类型。目前，我们将只学习原始类型。</p>\n<p>之后，在我们学习完 object 类型后，我们会在 【对象 — 原始值转换】一章中学习对象 — 原始值转换。</p>\n</blockquote>\n<h2><a id=\"_490\"></a>字符串转换</h2>\n<p>当我们需要一个字符串形式的值时，就会进行字符串转换。</p>\n<p>比如，<code>alert(value)</code> 将 <code>value</code> 转换为字符串类型，然后显示这个值。</p>\n<p>我们也可以显式地调用 <code>String(value)</code> 来将 <code>value</code> 转换为字符串类型：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// boolean</span>\n\nvalue <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 现在，值是一个字符串形式的 \"true\"</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string</span>\n</code></pre>\n<p>字符串转换最明显。<code>false</code> 变成 <code>\"false\"</code>，<code>null</code> 变成 <code>\"null\"</code> 等。</p>\n<h2><a id=\"_508\"></a>数字型转换</h2>\n<p>在算术函数和表达式中，会自动进行 number 类型转换。</p>\n<p>比如，当把除法 <code>/</code> 用于非 number 类型：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"6\"</span> <span class=\"token operator\">/</span> <span class=\"token string\">\"2\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3, string 类型的值被自动转换成 number 类型后进行计算</span>\n</code></pre>\n<p>我们也可以使用 <code>Number(value)</code> 显式地将这个 <code>value</code> 转换为 number 类型。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string</span>\n\n<span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 变成 number 类型 123</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span>\n</code></pre>\n<p>当我们从 string 类型源（如文本表单）中读取一个值，但期望输入一个数字时，通常需要进行显式转换。</p>\n<p>如果该字符串不是一个有效的数字，转换的结果会是 <code>NaN</code>。例如：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"an arbitrary string instead of a number\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN，转换失败</span>\n</code></pre>\n<p>number 类型转换规则：</p>\n<table><thead><tr><th align=\"left\">值</th><th align=\"left\">变成……</th></tr></thead><tbody><tr><td align=\"left\"><code>undefined</code></td><td align=\"left\"><code>NaN</code></td></tr><tr><td align=\"left\"><code>null</code></td><td align=\"left\"><code>0</code></td></tr><tr><td align=\"left\"><code>true 和 false</code></td><td align=\"left\"><code>1</code> and <code>0</code></td></tr><tr><td align=\"left\"><code>string</code></td><td align=\"left\">去掉首尾空格后的纯数字字符串中含有的数字。如果剩余字符串为空，则转换结果为 <code>0</code>。否则，将会从剩余字符串中“读取”数字。当类型转换出现 error 时返回 <code>NaN</code>。</td></tr></tbody></table>\n<p>例子：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"   123   \"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 123</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123z\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// NaN（从字符串“读取”数字，读到 \"z\" 时出现错误）</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 1</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 0</span>\n</code></pre>\n<p>请注意 <code>null</code> 和 <code>undefined</code> 在这有点不同：<code>null</code> 变成数字 <code>0</code>，<code>undefined</code> 变成 <code>NaN</code>。</p>\n<p>大多数数学运算符也执行这种转换，我们将在下一节中进行介绍。</p>\n<h2><a id=\"_561\"></a>布尔型转换</h2>\n<p>布尔（boolean）类型转换是最简单的一个。</p>\n<p>它发生在逻辑运算中（稍后我们将进行条件判断和其他类似的东西），但是也可以通过调用 Boolean(value) 显式地进行转换。</p>\n<p>转换规则如下：</p>\n<ul><li>直观上为“空”的值（如 <code>0</code>、空字符串、<code>null</code>、<code>undefined</code> 和 <code>NaN</code>）将变为 <code>false</code>。</li><li>其他值变成 <code>true</code>。</li></ul>\n<p>比如：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n</code></pre>\n<p>⚠️<strong>请注意：包含 0 的字符串 <code>\"0\"</code> 是 <code>true</code></strong></p>\n<p>一些编程语言（比如 PHP）视 <code>\"0\"</code> 为 <code>false</code>。但在 JavaScript 中，非空的字符串总是 <code>true</code>。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 空白，也是 true（任何非空字符串都是 true）</span>\n</code></pre>\n<h2><a id=\"_591\"></a>总结</h2>\n<p>有三种常用的类型转换：转换为 string 类型、转换为 number 类型和转换为 boolean 类型。</p>\n<p><strong>字符串转换</strong> —— 转换发生在输出内容的时候，也可以通过 <code>String(value)</code> 进行显式转换。原始类型值的 string 类型转换通常是很明显的。</p>\n<p><strong>数字型转换</strong> —— 转换发生在进行算术操作时，也可以通过 <code>Number(value)</code> 进行显式转换。</p>\n<p>数字型转换遵循以下规则：</p>\n<table><thead><tr><th align=\"left\">值</th><th align=\"left\">变成……</th></tr></thead><tbody><tr><td align=\"left\"><code>undefined</code></td><td align=\"left\"><code>NaN</code></td></tr><tr><td align=\"left\"><code>null</code></td><td align=\"left\"><code>0</code></td></tr><tr><td align=\"left\"><code>true / false</code></td><td align=\"left\"><code>1 / 0</code></td></tr><tr><td align=\"left\"><code>string</code></td><td align=\"left\">“按原样读取”字符串，两端的空白会被忽略。空字符串变成 <code>0</code>。转换出错则输出 <code>NaN</code>。</td></tr></tbody></table>\n<p><strong>布尔型转换</strong> —— 转换发生在进行逻辑操作时，也可以通过 <code>Boolean(value)</code> 进行显式转换。</p>\n<p>布尔型转换遵循以下规则：</p>\n<table><thead><tr><th align=\"left\">值</th><th align=\"left\">变成……</th></tr></thead><tbody><tr><td align=\"left\"><code>0</code>, <code>null</code>, <code>undefined</code>, <code>NaN</code>, <code>\"\"</code></td><td align=\"left\"><code>false</code></td></tr><tr><td align=\"left\">其他值</td><td align=\"left\"><code>true</code></td></tr></tbody></table>\n<p>上述的大多数规则都容易理解和记忆。人们通常会犯错误的值得注意的例子有以下几个：</p>\n<ul><li>对 <code>undefined</code> 进行数字型转换时，输出结果为 <code>NaN</code>，而非 <code>0</code>。</li><li>对 <code>\"0\"</code> 和只有空格的字符串（比如：<code>\" \"</code>）进行布尔型转换时，输出结果为 <code>true</code>。</li></ul>\n<p>我们在本小节没有讲 object 类型的转换。在我们学习完更多关于 JavaScript 的基础知识后，我们会在专门介绍 object 的章节 【对象 — 原始值转换】中详细讲解 object 类型转换。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 1, "time": "2022-08-09 17:32:24", "summary": "在这里插入图片描述主页详情：的个人主页作者简介：物联网领域创作者阿里专家博主华为云享专家人生格言：最慢的步伐不是跬步，而是徘徊；最快的脚步不是冲刺，而是坚持。人生目标：成为一名合格的程序员，做未完成的"}