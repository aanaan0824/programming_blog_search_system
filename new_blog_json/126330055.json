{"blogid": "126330055", "writerAge": "码龄1年", "writerBlogNum": "43", "writerCollect": "1846", "writerComment": "2943", "writerFan": "2177", "writerGrade": "6级", "writerIntegral": "6934", "writerName": "敲代码の流川枫", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126330055.jpg", "writerRankTotal": "2211", "writerRankWeekly": "65", "writerThumb": "2428", "writerVisitNum": "29464", "blog_read_count": "715", "blog_time": "于 2022-08-14 16:00:11 发布", "blog_title": "JavaSE——String类常用方法详解（玩转字符串）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p><img alt=\"ced485cbb11e458d81a746890b32cf3f.gif\" src=\"https://img-blog.csdnimg.cn/ced485cbb11e458d81a746890b32cf3f.gif\"/></p>\n<blockquote>\n<p>作者：<span style=\"color:#faa572;\">敲代码の流川枫</span></p>\n<p>博客主页：<a href=\"https://blog.csdn.net/chenchenchencl?spm=1011.2421.3001.5343\" title=\"流川枫的博客\">流川枫的博客</a></p>\n<p>专栏：<a href=\"https://blog.csdn.net/chenchenchencl/category_11932758.html\" title=\"和我一起学java\">和我一起学java</a></p>\n<p>语录：<span style=\"color:#faa572;\">Stay hungry stay foolish</span></p>\n<p><span style=\"color:#faa572;\">工欲善其事必先利其器，给大家介绍一款超牛的斩获大厂offer利器——牛客网</span></p>\n<p><span style=\"color:#faa572;\"><a href=\"https://www.nowcoder.com/link/pc_csdncpt_qdmdlcf_c\" title=\"点击免费注册和我一起刷题吧\">点击免费注册和我一起刷题吧</a>  </span></p>\n</blockquote>\n<p id=\"main-toc\"><strong>文章目录</strong></p>\n<p id=\"1.1%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%B8%B8%E7%94%A8%E6%9E%84%E9%80%A0-toc\" style=\"margin-left:0px;\"><a href=\"#1.1%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%B8%B8%E7%94%A8%E6%9E%84%E9%80%A0\">1. 字符串的常用构造</a></p>\n<p id=\"1.2%20String%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%AF%94%E8%BE%83-toc\" style=\"margin-left:0px;\"><a href=\"#1.2%20String%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%AF%94%E8%BE%83\">2. String对象的比较</a></p>\n<p id=\"1.2.1%20%3D%3D%E6%AF%94%E8%BE%83%E6%98%AF%E5%90%A6%E5%BC%95%E7%94%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1-toc\" style=\"margin-left:40px;\"><a href=\"#1.2.1%20%3D%3D%E6%AF%94%E8%BE%83%E6%98%AF%E5%90%A6%E5%BC%95%E7%94%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1\">1. ==比较是否引用同一个对象</a></p>\n<p id=\"1.2.2%C2%A0boolean%20equals(Object%20anObject)%E6%96%B9%E6%B3%95%EF%BC%9A%E6%8C%89%E7%85%A7%E5%AD%97%E5%85%B8%E5%BA%8F%E6%AF%94%E8%BE%83-toc\" style=\"margin-left:40px;\"><a href=\"#1.2.2%C2%A0boolean%20equals%28Object%20anObject%29%E6%96%B9%E6%B3%95%EF%BC%9A%E6%8C%89%E7%85%A7%E5%AD%97%E5%85%B8%E5%BA%8F%E6%AF%94%E8%BE%83\">2. boolean equals(Object anObject)方法：按照字典序比较</a></p>\n<p id=\"1.2.3%C2%A0int%20compareTo(String%20s)%E6%96%B9%E6%B3%95%3A%20%E6%8C%89%E7%85%A7%E5%AD%97%E5%85%B8%E5%BA%8F%E8%BF%9B%E8%A1%8C%E6%AF%94%E8%BE%83-toc\" style=\"margin-left:40px;\"><a href=\"#1.2.3%C2%A0int%20compareTo%28String%20s%29%E6%96%B9%E6%B3%95%3A%20%E6%8C%89%E7%85%A7%E5%AD%97%E5%85%B8%E5%BA%8F%E8%BF%9B%E8%A1%8C%E6%AF%94%E8%BE%83\">3. int compareTo(String s)方法: 按照字典序进行比较</a></p>\n<p id=\"1.2.4%C2%A0int%20compareToIgnoreCase(String%20str)%E6%96%B9%E6%B3%95-toc\" style=\"margin-left:40px;\"><a href=\"#1.2.4%C2%A0int%20compareToIgnoreCase%28String%20str%29%E6%96%B9%E6%B3%95\">4. int compareToIgnoreCase(String str)方法</a></p>\n<p id=\"1.3%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE-toc\" style=\"margin-left:0px;\"><a href=\"#1.3%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE\">3. 字符串查找</a></p>\n<p id=\"char%20charAt(int%20index)-toc\" style=\"margin-left:40px;\"><a href=\"#char%20charAt%28int%20index%29\">char charAt(int index)</a></p>\n<p id=\"%C2%A0int%20indexOf(int%20ch)-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0int%20indexOf%28int%20ch%29\">int indexOf(int ch)</a></p>\n<p id=\"int%20indexOf(int%20ch%2C%20int%20fromIndex)-toc\" style=\"margin-left:40px;\"><a href=\"#int%20indexOf%28int%20ch%2C%20int%20fromIndex%29\">int indexOf(int ch, int fromIndex)</a></p>\n<p id=\"int%20indexOf(String%20str)-toc\" style=\"margin-left:40px;\"><a href=\"#int%20indexOf%28String%20str%29\">int indexOf(String str)</a></p>\n<p id=\"int%20indexOf(String%20str%2C%20int%20fromIndex)-toc\" style=\"margin-left:40px;\"><a href=\"#int%20indexOf%28String%20str%2C%20int%20fromIndex%29\">int indexOf(String str, int fromIndex)</a></p>\n<p id=\"int%20lastIndexOf(int%20ch)-toc\" style=\"margin-left:40px;\"><a href=\"#int%20lastIndexOf%28int%20ch%29\">int lastIndexOf(int ch)</a></p>\n<p id=\"int%20lastIndexOf(int%20ch%2C%20int%20fromIndex)-toc\" style=\"margin-left:40px;\"><a href=\"#int%20lastIndexOf%28int%20ch%2C%20int%20fromIndex%29\">int lastIndexOf(int ch, int fromIndex)</a></p>\n<p id=\"int%20lastIndexOf(String%20str)-toc\" style=\"margin-left:40px;\"><a href=\"#int%20lastIndexOf%28String%20str%29\">int lastIndexOf(String str)</a></p>\n<p id=\"int%20lastIndexOf(String%20str%2C%20int%20fromIndex)-toc\" style=\"margin-left:40px;\"><a href=\"#int%20lastIndexOf%28String%20str%2C%20int%20fromIndex%29\">int lastIndexOf(String str, int fromIndex)</a></p>\n<p id=\"1.4%20%E8%BD%AC%E5%8C%96-toc\" style=\"margin-left:0px;\"><a href=\"#1.4%20%E8%BD%AC%E5%8C%96\">4. 转化</a></p>\n<p id=\"1.%20%E6%95%B0%E5%80%BC%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E5%8C%96-toc\" style=\"margin-left:40px;\"><a href=\"#1.%20%E6%95%B0%E5%80%BC%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E5%8C%96\">1. 数值和字符串转化</a></p>\n<p id=\"2.%20%E5%A4%A7%E5%B0%8F%E5%86%99%E8%BD%AC%E6%8D%A2-toc\" style=\"margin-left:40px;\"><a href=\"#2.%20%E5%A4%A7%E5%B0%8F%E5%86%99%E8%BD%AC%E6%8D%A2\">2. 大小写转换</a></p>\n<p id=\"3.%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%95%B0%E7%BB%84%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#3.%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%95%B0%E7%BB%84%C2%A0\">3. 字符串转数组 </a></p>\n<p id=\"4.%20%E6%A0%BC%E5%BC%8F%E5%8C%96-toc\" style=\"margin-left:40px;\"><a href=\"#4.%20%E6%A0%BC%E5%BC%8F%E5%8C%96\">4. 格式化</a></p>\n<p id=\"1.5%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9B%BF%E6%8D%A2-toc\" style=\"margin-left:0px;\"><a href=\"#1.5%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9B%BF%E6%8D%A2\">5. 字符串替换</a></p>\n<p id=\"%C2%A01.%E6%9B%BF%E6%8D%A2%E6%89%80%E6%9C%89%E7%9A%84%E6%8C%87%E5%AE%9A%E5%86%85%E5%AE%B9-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A01.%E6%9B%BF%E6%8D%A2%E6%89%80%E6%9C%89%E7%9A%84%E6%8C%87%E5%AE%9A%E5%86%85%E5%AE%B9\"> 1.替换所有的指定内容</a></p>\n<p id=\"2.%E6%9B%BF%E6%8D%A2%E9%A6%96%E4%B8%AA%E5%86%85%E5%AE%B9-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E6%9B%BF%E6%8D%A2%E9%A6%96%E4%B8%AA%E5%86%85%E5%AE%B9\">2.替换首个内容</a></p>\n<p id=\"1.6%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%86%E5%88%86-toc\" style=\"margin-left:0px;\"><a href=\"#1.6%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%86%E5%88%86\">6. 字符串拆分</a></p>\n<p id=\"1.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%85%A8%E9%83%A8%E6%8B%86%E5%88%86%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%85%A8%E9%83%A8%E6%8B%86%E5%88%86%C2%A0\">1.字符串全部拆分 </a></p>\n<p id=\"2.%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BB%A5%E6%8C%87%E5%AE%9A%E7%9A%84%E6%A0%BC%E5%BC%8F%EF%BC%8C%E6%8B%86%E5%88%86%E4%B8%BAlimit%E7%BB%84-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BB%A5%E6%8C%87%E5%AE%9A%E7%9A%84%E6%A0%BC%E5%BC%8F%EF%BC%8C%E6%8B%86%E5%88%86%E4%B8%BAlimit%E7%BB%84\">2.字符串以指定的格式，拆分为limit组</a></p>\n<p id=\"3.%20%E2%80%9C.%E2%80%9D%E5%88%86%E5%89%B2-toc\" style=\"margin-left:40px;\"><a href=\"#3.%20%E2%80%9C.%E2%80%9D%E5%88%86%E5%89%B2\">3. “.”分割</a></p>\n<p id=\"1.7%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%AA%E5%8F%96-toc\" style=\"margin-left:0px;\"><a href=\"#1.7%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%AA%E5%8F%96\">7. 字符串截取</a></p>\n<p id=\"1.%E4%BB%8E%E6%8C%87%E5%AE%9A%E7%B4%A2%E5%BC%95%E6%88%AA%E5%8F%96%E5%88%B0%E7%BB%93%E5%B0%BE-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E4%BB%8E%E6%8C%87%E5%AE%9A%E7%B4%A2%E5%BC%95%E6%88%AA%E5%8F%96%E5%88%B0%E7%BB%93%E5%B0%BE\">1.从指定索引截取到结尾</a></p>\n<p id=\"2.%E6%88%AA%E5%8F%96%E9%83%A8%E5%88%86%E5%86%85%E5%AE%B9-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E6%88%AA%E5%8F%96%E9%83%A8%E5%88%86%E5%86%85%E5%AE%B9\">2.截取部分内容</a></p>\n<p id=\"1.8%20String%20trim()-toc\" style=\"margin-left:0px;\"><a href=\"#1.8%20String%20trim%28%29\">8. String trim()</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h1 id=\"1.1%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%B8%B8%E7%94%A8%E6%9E%84%E9%80%A0\">1. 字符串的常用构造</h1>\n<blockquote>\n<p>1.使用常量构造</p>\n<p>2.使用newString构造</p>\n<p>3.使用字符数组构造</p>\n</blockquote>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n        //1\n        String str1 = \"hello\";\n        System.out.println(str1);\n        //2\n        String str2 = new String(\"hello\");\n        System.out.println(str2);\n        //3\n        char[] chars = {'h','e','l','l','o'};\n        System.out.println(chars);\n    }\n}\n</code></pre>\n<p><img alt=\"\" height=\"319\" src=\"..\\..\\static\\image\\e28c9912643d4b25ab96213f9d43deeb.png\" width=\"1037\"/></p>\n<p> 其它方法使用时参考：<a class=\"link-info\" href=\"https://docs.oracle.com/javase/8/docs/api/index.html\" title=\"字符串官方文档\">字符串官方文档</a> </p>\n<p><strong>字符串是不能被继承的</strong>，下面是String类源码</p>\n<p><img alt=\"\" height=\"427\" src=\"..\\..\\static\\image\\bde05a3fa6d940198780ce71dc0ba1c3.png\" width=\"1141\"/></p>\n<p> value是一个char类型数组，字符串实际存储在char类型的数组中，且字符串结尾没有/0</p>\n<p><img alt=\"\" height=\"458\" src=\"..\\..\\static\\image\\272e75b6751949d88dd7f835538db873.png\" width=\"875\"/></p>\n<blockquote>\n<p>  因此<strong>String是引用类型，内部并不存储字符串本身</strong>，看一个例子：</p>\n</blockquote>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n\n        String str1 = new String(\"hello\");\n\n        String str2 = new String(\"world\");\n\n        String str3 = str1;\n        System.out.println(str3);\n    }\n}\n</code></pre>\n<p>str1和str2引用的是不同对象str1和str3引用的是同一对象 </p>\n<p><img alt=\"\" height=\"526\" src=\"..\\..\\static\\image\\6422209512314032bbb89971eceb2ccc.png\" width=\"1083\"/></p>\n<p><img alt=\"\" height=\"228\" src=\"..\\..\\static\\image\\7a454367e9994cc7a71d7840b277705e.png\" width=\"830\"/></p>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n\n        String str1 = new String(\"hello\");\n\n        String str2 = new String(\"hello\");\n        \n        System.out.println(str1==str2);\n\n        System.out.println(str1.equals(str2));\n\n    }\n}\n</code></pre>\n<p><img alt=\"\" height=\"172\" src=\"..\\..\\static\\image\\b458c0efafe94d86bc261f6eaaa9e228.png\" width=\"989\"/></p>\n<p> 因为String类是引用类型，所以就算字符串内容一样，它们也不相等，要想比较它们是否相等，要通过对象调用方法来比较</p>\n<blockquote>\n<p>在Java中，\"\"引起来的也是String类的对象</p>\n</blockquote>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n        System.out.println(\"hello\".toString());\n\n    }\n}\n</code></pre>\n<p>可以调用toString()等方法 </p>\n<p><img alt=\"\" height=\"165\" src=\"..\\..\\static\\image\\326bff71418c4700af74b367706b4036.png\" width=\"832\"/></p>\n<h1 id=\"1.2%20String%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%AF%94%E8%BE%83\">2. String对象的比较</h1>\n<h2 id=\"1.2.1%20%3D%3D%E6%AF%94%E8%BE%83%E6%98%AF%E5%90%A6%E5%BC%95%E7%94%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1\">1. ==比较是否引用同一个对象</h2>\n<p>对于基本类型变量，比较的是两个变量中存储的值是否相同</p>\n<p>对于引用类型变量，比较的是两个引用变量引用的是否为同一个对象</p>\n<p>如上文提到的</p>\n<h2 id=\"1.2.2%C2%A0boolean%20equals(Object%20anObject)%E6%96%B9%E6%B3%95%EF%BC%9A%E6%8C%89%E7%85%A7%E5%AD%97%E5%85%B8%E5%BA%8F%E6%AF%94%E8%BE%83\">2. boolean equals(Object anObject)方法：按照字典序比较</h2>\n<p>字典序：字符大小的顺序</p>\n<p><img alt=\"\" height=\"321\" src=\"..\\..\\static\\image\\98b9896ce79b48afb5c8290f328acef5.png\" width=\"807\"/></p>\n<p> String类重写了父类Object中equals方法，Object中equals默认按照==比较</p>\n<p>重写之后的比较逻辑：</p>\n<pre><code> public boolean equals(Object anObject) {\n\n        //1. 先检测this和anObject是否为同一个对象比较，如果是返回true\n\n        if (this == anObject) {\n            return true;\n        }\n\n        //2. 检测anObject是否为String类型的对象，如果是继续比较，否则返回false\n\n        if (anObject instanceof String) {\n\n            //向下转型\n\n            String anotherString = (String)anObject;\n            int n = value.length;\n\n        //3. this和anObject两个字符串的长度是否相同，是继续比较，否则返回false\n\n            if (n == anotherString.value.length) {\n                char v1[] = value;\n                char v2[] = anotherString.value;\n                int i = 0;\n\n                //4. 按照字典序，从前往后逐个字符进行比较\n\n                while (n-- != 0) {\n                    if (v1[i] != v2[i])\n                        return false;\n                    i++;\n                }\n                return true;\n            }\n        }\n        return false;\n    }</code></pre>\n<h2 id=\"1.2.3%C2%A0int%20compareTo(String%20s)%E6%96%B9%E6%B3%95%3A%20%E6%8C%89%E7%85%A7%E5%AD%97%E5%85%B8%E5%BA%8F%E8%BF%9B%E8%A1%8C%E6%AF%94%E8%BE%83\">3. int compareTo(String s)方法: 按照字典序进行比较</h2>\n<p>equals返回的是boolean类型，而<strong>compareTo返回的是int类型</strong></p>\n<blockquote>\n<p>比较方式：</p>\n<p>1. 先按照字典次序大小比较，如果出现不等的字符，直接返回这两个字符的大小差值</p>\n<p>2. 如果前k个字符相等(k为两个字符长度最小值)，返回值两个字符串长度差值</p>\n</blockquote>\n<p>看一个例子： </p>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n\n        String str1 = new String(\"hello\");\n\n        String str2 = new String(\"hello\");\n\n        int ret = str1.compareTo(str2);\n        if(ret&gt;0){\n            System.out.println(\"str1&gt;str2\");\n        } else if (ret==0) {\n            System.out.println(\"str1=str2\");\n        }\n        else {\n            System.out.println(\"str1&lt;str2\");\n        }\n\n    }\n\n}\n</code></pre>\n<p><img alt=\"\" height=\"202\" src=\"..\\..\\static\\image\\72dc3b28e361462ba88b4790e3a6ce2b.png\" width=\"1143\"/></p>\n<p> 源码：</p>\n<pre><code>public int compareTo(String anotherString) {\n        int len1 = value.length;\n        int len2 = anotherString.value.length;\n        int lim = Math.min(len1, len2);\n        char v1[] = value;\n        char v2[] = anotherString.value;\n\n        int k = 0;\n        while (k &lt; lim) {\n            char c1 = v1[k];\n            char c2 = v2[k];\n            if (c1 != c2) {\n                return c1 - c2;\n            }\n            k++;\n        }\n        return len1 - len2;\n    }\n</code></pre>\n<p><img alt=\"\" height=\"357\" src=\"..\\..\\static\\image\\153306d5ec3f46beb19183d266ece7e3.png\" width=\"984\"/></p>\n<h2 id=\"1.2.4%C2%A0int%20compareToIgnoreCase(String%20str)%E6%96%B9%E6%B3%95\">4. int compareToIgnoreCase(String str)方法</h2>\n<p>与compareTo方式相同，但是忽略大小写比较 </p>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n\n        String s1 = new String(\"abc\");\n        String s2 = new String(\"ac\");\n        String s3 = new String(\"ABc\");\n        String s4 = new String(\"abcdef\");\n        System.out.println(s1.compareToIgnoreCase(s2)); //不同输出字符差值-1\n        System.out.println(s1.compareToIgnoreCase(s3)); //相同输出0\n        System.out.println(s1.compareToIgnoreCase(s4)); //前k个字符完全相同，输出长度差值-3\n        \n    }\n}\n</code></pre>\n<p><img alt=\"\" height=\"223\" src=\"..\\..\\static\\image\\8fe0a9b2c70c4ead9e35e03340896255.png\" width=\"853\"/></p>\n<h1 id=\"1.3%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE\">3. 字符串查找</h1>\n<p>String类提供的常用查找的方法：</p>\n<h2 id=\"char%20charAt(int%20index)\">char charAt(int index)</h2>\n<p>返回index位置上字符，如果index为负数或者越界，抛出IndexOutOfBoundsException异常</p>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n        String s1 = new String(\"abcdef\");\n        for (int i= 0;  i&lt; s1.length(); i++) {\n            System.out.println(s1.charAt(i));\n        }\n    }\n}</code></pre>\n<p><img alt=\"\" height=\"321\" src=\"..\\..\\static\\image\\19379c08e5054da6a39b2e2d3f1356f7.png\" width=\"902\"/></p>\n<h2 id=\"%C2%A0int%20indexOf(int%20ch)\"> int indexOf(int ch)</h2>\n<p>返回ch第一次出现的位置，没有返回-1</p>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n        String s1 = new String(\"abcdef\");\n\n        System.out.println(s1.indexOf('c'));\n    }\n}\n</code></pre>\n<h3 id=\"%E2%80%8B%E7%BC%96%E8%BE%91\"><img alt=\"\" height=\"200\" src=\"..\\..\\static\\image\\7ddb4c90b51b47479c6b27be313fb528.png\" width=\"865\"/></h3>\n<h2 id=\"int%20indexOf(int%20ch%2C%20int%20fromIndex)\">int indexOf(int ch, int fromIndex)</h2>\n<p>从fromIndex位置开始找ch第一次出现的位置，没有返回-1</p>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n        String s1 = new String(\"abcdecf\");\n\n        System.out.println(s1.indexOf('c',3));\n    }\n}\n</code></pre>\n<p><img alt=\"\" height=\"210\" src=\"..\\..\\static\\image\\65b304ff5fbf4d58aa250279c72a1efc.png\" width=\"932\"/></p>\n<h2 id=\"int%20indexOf(String%20str)\">int indexOf(String str)</h2>\n<p>返回str第一次出现的位置，没有返回-1</p>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n        String s1 = new String(\"abcdecf\");\n\n        System.out.println(s1.indexOf(\"cde\"));\n    }\n}</code></pre>\n<h3><img alt=\"\" height=\"197\" src=\"..\\..\\static\\image\\84182c090de2410687491f6b1e5d86c1.png\" width=\"797\"/></h3>\n<h2 id=\"int%20indexOf(String%20str%2C%20int%20fromIndex)\">int indexOf(String str, int fromIndex)</h2>\n<p>从fromIndex位置开始找str第一次出现的位置，没有返回-1</p>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n        String s1 = new String(\"abcdecf\");\n\n        System.out.println(s1.indexOf(\"cde\",3));\n    }\n}\n</code></pre>\n<h3><img alt=\"\" height=\"193\" src=\"..\\..\\static\\image\\d39ad476ab14489399dc0818135f2ab1.png\" width=\"866\"/></h3>\n<h2 id=\"int%20lastIndexOf(int%20ch)\">int lastIndexOf(int ch)</h2>\n<p>从后往前找，返回ch第一次出现的位置，没有返回-1</p>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n        String s1 = new String(\"abcdecf\");\n\n        System.out.println(s1.lastIndexOf(\"c\"));\n    }\n}\n</code></pre>\n<h3><img alt=\"\" height=\"184\" src=\"..\\..\\static\\image\\fb7a7916c2cd4b61901c6b7f44b026db.png\" width=\"835\"/></h3>\n<h2 id=\"int%20lastIndexOf(int%20ch%2C%20int%20fromIndex)\">int lastIndexOf(int ch, int fromIndex)</h2>\n<p>从fromIndex位置开始找，从后往前找ch第一次出现的位置，没有返回-1</p>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n        String s1 = new String(\"abcdecf\");\n\n        System.out.println(s1.lastIndexOf(\"c\",4));\n    }\n}\n</code></pre>\n<p><img alt=\"\" height=\"151\" src=\"..\\..\\static\\image\\6ee5d8c4bec648c3b82c6a87f7ec3dcd.png\" width=\"923\"/></p>\n<h2 id=\"int%20lastIndexOf(String%20str)\">int lastIndexOf(String str)</h2>\n<p>从后往前找，返回str第一次出现的位置，没有返回-1</p>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n        String s1 = new String(\"abcdecf\");\n\n        System.out.println(s1.lastIndexOf(\"abc\"));\n    }\n}\n</code></pre>\n<h3><img alt=\"\" height=\"219\" src=\"..\\..\\static\\image\\c1042e2bb2384b6ea260bb2cb1d3199a.png\" width=\"849\"/></h3>\n<h2 id=\"int%20lastIndexOf(String%20str%2C%20int%20fromIndex)\">int lastIndexOf(String str, int fromIndex)</h2>\n<p>从fromIndex位置开始找，从后往前找str第一次出现的位置，没有返回-1</p>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n        String s1 = new String(\"abcdecf\");\n\n        System.out.println(s1.lastIndexOf(\"abc\",4));\n    }\n}\n</code></pre>\n<p><img alt=\"\" height=\"186\" src=\"..\\..\\static\\image\\8a6dd1b8a882485c98e9fe22fa87919e.png\" width=\"743\"/></p>\n<h1 id=\"1.4%20%E8%BD%AC%E5%8C%96\">4. 转化</h1>\n<h2 id=\"1.%20%E6%95%B0%E5%80%BC%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E5%8C%96\">1. 数值和字符串转化</h2>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n        String s1 = String.valueOf(123);\n\n        System.out.println(s1);\n    }\n}\n</code></pre>\n<p><img alt=\"\" height=\"199\" src=\"..\\..\\static\\image\\02b7efc511144f1f9e94c70613375758.png\" width=\"895\"/></p>\n<p> <img alt=\"\" height=\"429\" src=\"..\\..\\static\\image\\641f86ca8f1f456da213c05f3ddd0139.png\" width=\"991\"/></p>\n<p> 可以看到有很多重载的方法供我们使用，可以将很多不同类型的数值转换为字符串</p>\n<h2 id=\"2.%20%E5%A4%A7%E5%B0%8F%E5%86%99%E8%BD%AC%E6%8D%A2\">2. 大小写转换</h2>\n<blockquote>\n<p>toUpperCase()</p>\n<p>toLowerCase(）</p>\n</blockquote>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n        String s1 = \"hellO嗨\";\n        String ret = s1.toUpperCase();\n        System.out.println(ret);\n    }\n}\n</code></pre>\n<p><img alt=\"\" height=\"195\" src=\"..\\..\\static\\image\\fa3803f368c84ff5bf483f7a78ae5fb1.png\" width=\"864\"/></p>\n<p>toUpperCase() 只会将小写转换成大写，其它都不变，toLowerCase(）也是如此</p>\n<h2 id=\"3.%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%95%B0%E7%BB%84%C2%A0\">3. 字符串转数组 </h2>\n<blockquote>\n<p>toCharArray()</p>\n</blockquote>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n        String str1 = \"abcdef\";\n        char[] chars = str1.toCharArray();\n        System.out.println(Arrays.toString(chars));\n    }\n}\n</code></pre>\n<h3><img alt=\"\" height=\"192\" src=\"..\\..\\static\\image\\e7de0b1106d04172a791f49d29d43750.png\" width=\"796\"/></h3>\n<p> 数组转字符串</p>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n\n        char[] chars = {'h','e','l','l','o'};\n        String s1 = new String(chars);\n        System.out.println(s1);\n    }\n}</code></pre>\n<h3><img alt=\"\" height=\"192\" src=\"..\\..\\static\\image\\bbc11a1971204b59b60d613682210385.png\" width=\"810\"/></h3>\n<h2 id=\"4.%20%E6%A0%BC%E5%BC%8F%E5%8C%96\">4. 格式化</h2>\n<blockquote>\n<p>String.format()</p>\n</blockquote>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n\n        String s = String.format(\"%d-%d-%d\",2022,8,14);\n        System.out.println(s);\n    }\n}\n</code></pre>\n<h2><img alt=\"\" height=\"192\" src=\"..\\..\\static\\image\\61c236ee46914922a9d410143d7e549a.png\" width=\"776\"/></h2>\n<h1 id=\"1.5%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9B%BF%E6%8D%A2\">5. 字符串替换</h1>\n<p><strong>注意事项: 由于字符串是不可变对象, 替换不修改当前字符串, 而是产生一个新的字符串</strong></p>\n<p>使用一个的字符串替换已有的字符串数据，方法：</p>\n<blockquote>\n<p>1.String replaceAll(String regex, String replacement) </p>\n<p>2.String replaceFirst(String regex, String replacement)</p>\n</blockquote>\n<h2 id=\"%C2%A01.%E6%9B%BF%E6%8D%A2%E6%89%80%E6%9C%89%E7%9A%84%E6%8C%87%E5%AE%9A%E5%86%85%E5%AE%B9\"> 1.替换所有的指定内容</h2>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n\n        String s = \"abcadeafagf\";\n        String ret = s.replaceAll(\"a\",\"c\");\n        System.out.println(s);\n        System.out.println(ret);\n    }\n}\n</code></pre>\n<p> <img alt=\"\" height=\"225\" src=\"..\\..\\static\\image\\0d82beb3ae0740ca90ac596aa170469b.png\" width=\"828\"/></p>\n<p> 可以看出替换字符串后原字符串是不变的，替换后需要一个新的字符串接收</p>\n<h2 id=\"2.%E6%9B%BF%E6%8D%A2%E9%A6%96%E4%B8%AA%E5%86%85%E5%AE%B9\">2.替换首个内容</h2>\n<pre><code>\npublic class Test {\n    public static void main(String[] args) {\n\n        String s = \"abcadeafagf\";\n        String ret = s.replaceFirst(\"a\",\"c\");\n        System.out.println(s);\n        System.out.println(ret);\n    }\n}\n</code></pre>\n<p><img alt=\"\" height=\"224\" src=\"..\\..\\static\\image\\272fcf8b89ff4606808c484fce457414.png\" width=\"852\"/></p>\n<h1 id=\"1.6%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%86%E5%88%86\">6. 字符串拆分</h1>\n<p>将一个完整的字符串按照指定的分隔符划分为若干个子字符串</p>\n<blockquote>\n<p>String[] split(String regex)</p>\n<p>String[] split(String regex, int limit)</p>\n</blockquote>\n<h2 id=\"1.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%85%A8%E9%83%A8%E6%8B%86%E5%88%86%C2%A0\">1.字符串全部拆分 </h2>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n\n        String s = \"hello world hello\";\n        String[] ret = s.split(\" \");\n        System.out.println(s);\n        System.out.println(Arrays.toString(ret));\n    }\n}\n</code></pre>\n<h3><img alt=\"\" height=\"245\" src=\"..\\..\\static\\image\\1aa0d556622c49f19b8821e9e4bb1a0c.png\" width=\"831\"/></h3>\n<h2 id=\"2.%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BB%A5%E6%8C%87%E5%AE%9A%E7%9A%84%E6%A0%BC%E5%BC%8F%EF%BC%8C%E6%8B%86%E5%88%86%E4%B8%BAlimit%E7%BB%84\">2.字符串以指定的格式，拆分为limit组</h2>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n\n        String s = \"hello world hello\";\n        String[] ret = s.split(\" \",2);\n        System.out.println(s);\n        System.out.println(Arrays.toString(ret));\n    }\n}\n</code></pre>\n<p><img alt=\"\" height=\"227\" src=\"..\\..\\static\\image\\c0b3bd2c0b834a2a930d5089b073c6cd.png\" width=\"824\"/></p>\n<h2 id=\"3.%20%E2%80%9C.%E2%80%9D%E5%88%86%E5%89%B2\">3. “.”分割</h2>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n\n        String s = \"hello.world.hello\";\n        String[] ret = s.split(\".\");\n        System.out.println(s);\n        System.out.println(Arrays.toString(ret));\n    }\n}\n</code></pre>\n<p><img alt=\"\" height=\"232\" src=\"..\\..\\static\\image\\00e9d3a5bc894ae192b8ade6143c7fe1.png\" width=\"760\"/></p>\n<blockquote>\n<p> 正常使用split(\".\")进行分割，我们发现打印数组是空的，说明没有分割成功</p>\n<p>原因：\".\"需要转义，添加\"\\\\.\"后，可以分割</p>\n</blockquote>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n\n        String s = \"hello.world.hello\";\n        String[] ret = s.split(\"\\\\.\");\n        System.out.println(s);\n        System.out.println(Arrays.toString(ret));\n    }\n}\n</code></pre>\n<p><img alt=\"\" height=\"231\" src=\"..\\..\\static\\image\\af825b23432d482bbc0add7dd2809bd2.png\" width=\"855\"/></p>\n<blockquote>\n<p>总结：</p>\n<p>1. 字符\"|\",\"*\",\"+\"都得加上转义字符，前面加上\"\\\\\"</p>\n<p>2. 而如果是\"\\\"，那么就得写成\"\\\\\\\\\"</p>\n<p>3. 如果一个字符串中有多个分隔符，可以用\"|\"作为连字符，即s.split(\"=|&amp;\");是通过=和&amp;分割s字符串</p>\n</blockquote>\n<h1 id=\"1.7%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%AA%E5%8F%96\">7. 字符串截取</h1>\n<blockquote>\n<p>String substring(int beginIndex)</p>\n<p>String substring(int beginIndex, int endIndex)</p>\n</blockquote>\n<h2 id=\"1.%E4%BB%8E%E6%8C%87%E5%AE%9A%E7%B4%A2%E5%BC%95%E6%88%AA%E5%8F%96%E5%88%B0%E7%BB%93%E5%B0%BE\">1.从指定索引截取到结尾</h2>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n\n        String s = \"hello world\";\n        String ret = s.substring(5);\n        System.out.println(s);\n        System.out.println(ret);\n    }\n}\n</code></pre>\n<p><img alt=\"\" height=\"233\" src=\"..\\..\\static\\image\\84aee053e4fb4f2eb50735327b36c5c1.png\" width=\"805\"/></p>\n<h2 id=\"2.%E6%88%AA%E5%8F%96%E9%83%A8%E5%88%86%E5%86%85%E5%AE%B9\">2.截取部分内容</h2>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n\n        String s = \"hello world\";\n        String ret = s.substring(0,5);\n        System.out.println(s);\n        System.out.println(ret);\n    }\n}</code></pre>\n<h2><img alt=\"\" height=\"226\" src=\"..\\..\\static\\image\\9870fbb853314cfbb9d5d2b08819df5a.png\" width=\"810\"/></h2>\n<blockquote>\n<p> 总结：</p>\n<p>1. 索引从0开始</p>\n<p>2. 注意前闭后开区间的写法, substring(0, 5) 表示包含 0 号下标的字符, 不包含 5 号下标</p>\n</blockquote>\n<h1 id=\"1.8%20String%20trim()\">8. String trim()</h1>\n<blockquote>\n<p>功能：去掉字符串中的左右空格,保留中间空格</p>\n</blockquote>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n\n        String s = \"   hello world    \";\n        String ret = s.trim();\n        System.out.println(s);\n        System.out.println(ret);\n    }\n}</code></pre>\n<p><img alt=\"\" height=\"232\" src=\"..\\..\\static\\image\\93c3c80cd39f4ff581609eaca23cb44f.png\" width=\"815\"/></p>\n<blockquote>\n<p> 总结：</p>\n<p>我们注意到，大多数的String类方法都不是直接操作原字符串，都会返回一个新的字符串</p>\n</blockquote>\n<blockquote>\n<p><span style=\"color:#faa572;\"><strong>“ 本期的分享就到这里了， 记得给博主一个三连哈，你的支持是我创作的最大动力！</strong></span></p>\n</blockquote>\n<p><img alt=\"ced485cbb11e458d81a746890b32cf3f.gif\" src=\"https://img-blog.csdnimg.cn/ced485cbb11e458d81a746890b32cf3f.gif\"/></p>\n</div>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-08-14 16:00:11", "summary": "作者：敲代码流川枫博客主页：流川枫的博客流川枫的博客专栏：和我一起学和我一起学语录：工欲善其事必先利其器，给大家介绍一款超牛的斩获大厂利器牛客网点击免费注册和我一起刷题吧点击免费注册和我一起刷题吧文章"}