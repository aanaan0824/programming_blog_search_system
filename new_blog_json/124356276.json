{"blogid": "124356276", "writerAge": "码龄2年", "writerBlogNum": "4", "writerCollect": "10", "writerComment": "3", "writerFan": "6", "writerGrade": "2级", "writerIntegral": "196", "writerName": "Magic Automaton", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124356276.jpg", "writerRankTotal": "113265", "writerRankWeekly": "524720", "writerThumb": "6", "writerVisitNum": "7917", "blog_read_count": "2035", "blog_time": "于 2022-04-23 00:30:15 发布", "blog_title": "Unity自定义Attribute实现下拉菜单场景选择", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>前几天看<a href=\"https://www.bilibili.com/video/BV19a411i7Tw\">麦扣视频</a>里提到一个在Inspector可以把场景选择由输字符串改变为下拉菜单的功能，挺实用的，然后就想自己写一下。</p>\n<p>因为之前对自定义编辑器这方面内容经验不是很多，而自定义attribute更是没有涉及过，所以还是走了不少弯路的……其实最主要的还是反射啊attribute啊这些语法没有深入了解过……</p>\n<h1>需求</h1> 首先明确一下需要做到什么。 \n<p>从视频里可以看到，麦扣导入了一个dll，然后就可以用一个[SceneName]的attribute来修饰string，从而让其在inspector中以下拉菜单的形式进行选择。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\836ad6a218f14472bd46e4093b70ed8b.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4a26087a211041a6a3049391f78079ab.png\"/><br/> 这样的功能主要包括两个部分的内容：自定义attribute、获取场景名称。</p>\n<h1>实现</h1> 我在实现的时候整体分为四个部分：首先是怎么自定义出attribute；然后是怎么获取所有场景的名称；最后是怎么让attribute把值反馈回字段，最后的最后是修复一些bug（实际上是完善功能）。 \n<h2>定义attribute</h2>\n<p>其实定义attribute还是比较简单的，而且网上也有很多资料，这里就贴一下代码吧。</p>\n<p>代码包括两部分：定义部分和编辑器扩展部分。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">AttributeUsage</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>AttributeTargets<span class=\"token punctuation\">.</span>Field<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SceneName</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">PropertyAttribute</span></span>\n<span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//就这些，标签就能用了。虽然现在还不起任何作用。</span>\n</code></pre>\n<p>然后，为了在编辑器中得到下拉菜单的效果，编写编辑器扩展部分。同时为了方便之后存储和读取数据，在SceneName类中定义selected和name两个变量，分别表示下拉菜单中选中的场景序号和场景名称。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">//SceneName类</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">AttributeUsage</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>AttributeTargets<span class=\"token punctuation\">.</span>Field<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SceneName</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">PropertyAttribute</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> _selected<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> _name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> selected <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> _selected<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{<!-- --></span> _selected <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> name <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> _name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{<!-- --></span> _name <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">//SceneNameEditor类</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEditor</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CustomPropertyDrawer</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">SceneName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SceneNameEditor</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">PropertyDrawer</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnGUI</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Rect</span> position<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SerializedProperty</span> property<span class=\"token punctuation\">,</span> <span class=\"token class-name\">GUIContent</span> label<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">SceneName</span> sceneName <span class=\"token operator\">=</span> attribute <span class=\"token keyword\">as</span> <span class=\"token class-name\">SceneName</span><span class=\"token punctuation\">;</span>\n        sceneName<span class=\"token punctuation\">.</span>selected <span class=\"token operator\">=</span> EditorGUI<span class=\"token punctuation\">.</span><span class=\"token function\">Popup</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span> sceneName<span class=\"token punctuation\">.</span>selected<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sceneName<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> scenes<span class=\"token punctuation\">[</span>sceneName<span class=\"token punctuation\">.</span>selected<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>注意：编辑器扩展部分代码需要放在Editor文件夹内。</p>\n<p>上边两个脚本就可以实现在inspector里以下拉菜单形式选择字符串了。</p>\n<p>完成这部分之后，就可以开始考虑如何获取场景名称列表了。</p>\n<h2>获取场景</h2>\n<p>EditorBuildSettings.scenes这一变量的值正是build settings中的场景列表。所以用它来获取场景名称的列表是非常合适的。</p>\n<p>但是有一个问题，它存储的是EditorBuildingSettingsScene类型的数据，而通过它只能获得path，也就是场景路径。所以现在的问题就是，将场景路径转换为场景名称。</p>\n<p>我们只需要从路径中裁剪出场景名即可。</p>\n<p>由于路径都是以“/”为分隔符，以“.unity”结尾的，所以可以方便地处理出场景名称。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">//SceneNameEditor类</span>\n    <span class=\"token return-type class-name\">GUIContent<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token function\">GetSceneNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">GUIContent<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> g <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GUIContent</span><span class=\"token punctuation\">[</span>EditorBuildSettings<span class=\"token punctuation\">.</span>scenes<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>g<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> splitResult <span class=\"token operator\">=</span> EditorBuildSettings<span class=\"token punctuation\">.</span>scenes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token char\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> nameWithSuffix <span class=\"token operator\">=</span> splitResult<span class=\"token punctuation\">[</span>splitResult<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GUIContent</span><span class=\"token punctuation\">(</span>nameWithSuffix<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nameWithSuffix<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token string\">\".unity\"</span><span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> g<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这段代码里我返回了GUIContent类型的数据……这是因为，前边用到的Popup函数有一个使用GUIContent类型数据作为参数的重载。为了用那个重载，我就改用GUIContent类型了。（其实我也不太清楚它和string在这里有什么区别……好像效果上没有差别）</p>\n<p>下面是更改后的SceneNameEditor类：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">//SceneNameEditor类</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEditor</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CustomPropertyDrawer</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">SceneName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SceneNameEditor</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">PropertyDrawer</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">GUIContent<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> scenes<span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\">GUIContent<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token function\">GetSceneNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">GUIContent<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> g <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GUIContent</span><span class=\"token punctuation\">[</span>EditorBuildSettings<span class=\"token punctuation\">.</span>scenes<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>g<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> splitResult <span class=\"token operator\">=</span> EditorBuildSettings<span class=\"token punctuation\">.</span>scenes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token char\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> nameWithSuffix <span class=\"token operator\">=</span> splitResult<span class=\"token punctuation\">[</span>splitResult<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GUIContent</span><span class=\"token punctuation\">(</span>nameWithSuffix<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nameWithSuffix<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token string\">\".unity\"</span><span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> g<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnGUI</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Rect</span> position<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SerializedProperty</span> property<span class=\"token punctuation\">,</span> <span class=\"token class-name\">GUIContent</span> label<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">SceneName</span> sceneName <span class=\"token operator\">=</span> attribute <span class=\"token keyword\">as</span> <span class=\"token class-name\">SceneName</span><span class=\"token punctuation\">;</span>\n        scenes <span class=\"token operator\">=</span> <span class=\"token function\">GetSceneNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sceneName<span class=\"token punctuation\">.</span>selected <span class=\"token operator\">=</span> EditorGUI<span class=\"token punctuation\">.</span><span class=\"token function\">Popup</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">,</span> sceneName<span class=\"token punctuation\">.</span>selected<span class=\"token punctuation\">,</span> scenes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sceneName<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> scenes<span class=\"token punctuation\">[</span>sceneName<span class=\"token punctuation\">.</span>selected<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>现在就可以在inspector中得到一个可以选择场景名称的下拉菜单了。</p>\n<h2>反馈attribute存储的值</h2>\n<p>这一步我卡了最长时间……看了不少反射、attribute之类的内容，然后发现好像不太好弄……</p>\n<p>我的想法是，总要有个可以和被修饰字段之间产生联系的变量吧，不可能没什么联系就说attribute修饰了某个字段吧。</p>\n<p>然后就找到了attribute和fieldInfo两个变量。</p>\n<p>它俩确实记录了和哪个对象、哪个变量产生了联系，但要获取具体是哪个对象，感觉不好办。</p>\n<p>直到最后我才意识到OnGUI还有个property参数…… 它记录了是哪个对象用到了这个attribute。然后就比较简单了，用fieldInfo的SetValue方法即可设置数值。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">//SceneNameEditor类</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEditor</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CustomPropertyDrawer</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">SceneName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SceneNameEditor</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">PropertyDrawer</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">GUIContent<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> scenes<span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\">GUIContent<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token function\">GetSceneNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">GUIContent<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> g <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GUIContent</span><span class=\"token punctuation\">[</span>EditorBuildSettings<span class=\"token punctuation\">.</span>scenes<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>g<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> splitResult <span class=\"token operator\">=</span> EditorBuildSettings<span class=\"token punctuation\">.</span>scenes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token char\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> nameWithSuffix <span class=\"token operator\">=</span> splitResult<span class=\"token punctuation\">[</span>splitResult<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GUIContent</span><span class=\"token punctuation\">(</span>nameWithSuffix<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nameWithSuffix<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token string\">\".unity\"</span><span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> g<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnGUI</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Rect</span> position<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SerializedProperty</span> property<span class=\"token punctuation\">,</span> <span class=\"token class-name\">GUIContent</span> label<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">SceneName</span> sceneName <span class=\"token operator\">=</span> attribute <span class=\"token keyword\">as</span> <span class=\"token class-name\">SceneName</span><span class=\"token punctuation\">;</span>\n        scenes <span class=\"token operator\">=</span> <span class=\"token function\">GetSceneNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sceneName<span class=\"token punctuation\">.</span>selected <span class=\"token operator\">=</span> EditorGUI<span class=\"token punctuation\">.</span><span class=\"token function\">Popup</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">,</span> sceneName<span class=\"token punctuation\">.</span>selected<span class=\"token punctuation\">,</span> scenes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sceneName<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> scenes<span class=\"token punctuation\">[</span>sceneName<span class=\"token punctuation\">.</span>selected<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">;</span>\n        fieldInfo<span class=\"token punctuation\">.</span><span class=\"token function\">SetValue</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">.</span>serializedObject<span class=\"token punctuation\">.</span>targetObject<span class=\"token punctuation\">,</span> sceneName<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这样就可以把值反馈回用attribute修饰的字段了。</p>\n<h2>但是……</h2>\n<p>把脚本挂到物体上然后看了看效果后，突然发现这样还不行：attribute会被删除和重新创建。这样一来，每当attribute被重新创建之后，就会导致被标记的内容恢复到默认值。</p>\n<p>于是我考虑到在OnGUI里首先用字段已有的值来更新attribute内的存储值。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">//SceneNameEditor类</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEditor</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CustomPropertyDrawer</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">SceneName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SceneNameEditor</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">PropertyDrawer</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">GUIContent<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> scenes<span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\">GUIContent<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token function\">GetSceneNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">GUIContent<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> g <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GUIContent</span><span class=\"token punctuation\">[</span>EditorBuildSettings<span class=\"token punctuation\">.</span>scenes<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>g<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> splitResult <span class=\"token operator\">=</span> EditorBuildSettings<span class=\"token punctuation\">.</span>scenes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token char\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> nameWithSuffix <span class=\"token operator\">=</span> splitResult<span class=\"token punctuation\">[</span>splitResult<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GUIContent</span><span class=\"token punctuation\">(</span>nameWithSuffix<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nameWithSuffix<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token string\">\".unity\"</span><span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> g<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnGUI</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Rect</span> position<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SerializedProperty</span> property<span class=\"token punctuation\">,</span> <span class=\"token class-name\">GUIContent</span> label<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">SceneName</span> sceneName <span class=\"token operator\">=</span> attribute <span class=\"token keyword\">as</span> <span class=\"token class-name\">SceneName</span><span class=\"token punctuation\">;</span>\n        scenes <span class=\"token operator\">=</span> <span class=\"token function\">GetSceneNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sceneName<span class=\"token punctuation\">.</span>selected <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        sceneName<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> scenes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\"></span>\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> cntString <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">)</span>fieldInfo<span class=\"token punctuation\">.</span><span class=\"token function\">GetValue</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">.</span>serializedObject<span class=\"token punctuation\">.</span>targetObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>scenes<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>scenes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>cntString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                sceneName<span class=\"token punctuation\">.</span>selected <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                sceneName<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> cntString<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//</span>\n        sceneName<span class=\"token punctuation\">.</span>selected <span class=\"token operator\">=</span> EditorGUI<span class=\"token punctuation\">.</span><span class=\"token function\">Popup</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">,</span> sceneName<span class=\"token punctuation\">.</span>selected<span class=\"token punctuation\">,</span> scenes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sceneName<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> scenes<span class=\"token punctuation\">[</span>sceneName<span class=\"token punctuation\">.</span>selected<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">;</span>\n        fieldInfo<span class=\"token punctuation\">.</span><span class=\"token function\">SetValue</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">.</span>serializedObject<span class=\"token punctuation\">.</span>targetObject<span class=\"token punctuation\">,</span> sceneName<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上边用“/”框起来的就是做了改动的内容。效果还可以，但是当然，时间开销会增加不少……（目前自己做的东西，还是能跑为第一追求）</p>\n<h2>结束了吗？</h2>\n<p>我也以为结束了。</p>\n<p>但是在测试的时候，发现如果在inspector中修改字段值之后退出工程再重进，并不会保存。</p>\n<p>举个例子，假如上次打开编辑器，我把一个字段从scene1改成了scene2，那么在重新打开的时候，它可能还是scene1。</p>\n<p>多次测试+查询资料，发现是这样一回事：自定义编辑器可能不会使场景变dirty，也就是不会让场景知道自己已经做了修改但还没保存。也就是说，需要让编辑器知道自己已经“脏”了，才会使修改可以被保存。</p>\n<p>因此目前来说，最终版代码如下：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">//SceneNameEditor类</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEditor</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CustomPropertyDrawer</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">SceneName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SceneNameEditor</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">PropertyDrawer</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">GUIContent<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> scenes<span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\">GUIContent<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token function\">GetSceneNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">GUIContent<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> g <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GUIContent</span><span class=\"token punctuation\">[</span>EditorBuildSettings<span class=\"token punctuation\">.</span>scenes<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>g<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> splitResult <span class=\"token operator\">=</span> EditorBuildSettings<span class=\"token punctuation\">.</span>scenes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token char\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> nameWithSuffix <span class=\"token operator\">=</span> splitResult<span class=\"token punctuation\">[</span>splitResult<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GUIContent</span><span class=\"token punctuation\">(</span>nameWithSuffix<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nameWithSuffix<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token string\">\".unity\"</span><span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> g<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnGUI</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Rect</span> position<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SerializedProperty</span> property<span class=\"token punctuation\">,</span> <span class=\"token class-name\">GUIContent</span> label<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">SceneName</span> sceneName <span class=\"token operator\">=</span> attribute <span class=\"token keyword\">as</span> <span class=\"token class-name\">SceneName</span><span class=\"token punctuation\">;</span>\n        scenes <span class=\"token operator\">=</span> <span class=\"token function\">GetSceneNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> cntString <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">)</span>fieldInfo<span class=\"token punctuation\">.</span><span class=\"token function\">GetValue</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">.</span>serializedObject<span class=\"token punctuation\">.</span>targetObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sceneName<span class=\"token punctuation\">.</span>selected <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        sceneName<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> scenes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>scenes<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>scenes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>cntString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                sceneName<span class=\"token punctuation\">.</span>selected <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                sceneName<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> cntString<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        sceneName<span class=\"token punctuation\">.</span>selected <span class=\"token operator\">=</span> EditorGUI<span class=\"token punctuation\">.</span><span class=\"token function\">Popup</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">,</span> sceneName<span class=\"token punctuation\">.</span>selected<span class=\"token punctuation\">,</span> scenes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sceneName<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> scenes<span class=\"token punctuation\">[</span>sceneName<span class=\"token punctuation\">.</span>selected<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">;</span>\n        fieldInfo<span class=\"token punctuation\">.</span><span class=\"token function\">SetValue</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">.</span>serializedObject<span class=\"token punctuation\">.</span>targetObject<span class=\"token punctuation\">,</span> sceneName<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">///</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>GUI<span class=\"token punctuation\">.</span>changed<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            EditorUtility<span class=\"token punctuation\">.</span><span class=\"token function\">SetDirty</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">.</span>serializedObject<span class=\"token punctuation\">.</span>targetObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>到此为止，我没有发现有其他什么bug。所以上边的就是目前的最终版代码（SceneName类开始已经写好，后来没有修改）。</p>\n<p>在使用的时候，只需要为string类型的字段标上一个[SceneName]即可通过下拉菜单选择场景名。</p>\n<p>如果有朋友发现最终版的代码仍然有漏洞，欢迎批评指正。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-04-23 00:30:15", "summary": "前几天看麦扣视频里提到一个在可以把场景选择由输字符串改变为下拉菜单的功能，挺实用的，然后就想自己写一下。因为之前对自定义编辑器这方面内容经验不是很多，而自定义更是没有涉及过，所以还是走了不少弯路的其实"}