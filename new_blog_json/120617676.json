{"blogid": "120617676", "writerAge": "码龄2年", "writerBlogNum": "92", "writerCollect": "4271", "writerComment": "2079", "writerFan": "11429", "writerGrade": "6级", "writerIntegral": "7760", "writerName": "十叶知秋", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_120617676.jpg", "writerRankTotal": "3315", "writerRankWeekly": "14198", "writerThumb": "2831", "writerVisitNum": "93492", "blog_read_count": "12466", "blog_time": "于 2021-10-10 21:10:11 发布", "blog_title": "【C语言进阶】玩转指针——指针的高阶玩法！", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_9\">前言</a></li><li><a href=\"#_25\">一、字符指针</a></li><li><a href=\"#_85\">二、指针数组和数组指针</a></li><li><ul><li><a href=\"#1_102\">1.指针数组</a></li><li><a href=\"#2_164\">2.数组指针</a></li><li><ul><li><a href=\"#21_165\">2.1.数组指针是什么？</a></li><li><a href=\"#22_241\">2.2.&amp;数组名和数组名的区别</a></li><li><a href=\"#23_286\">2.3.数组指针的使用</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_329\">三、数组参数与指针参数</a></li><li><ul><li><a href=\"#1_336\">1.一维数组参数</a></li><li><a href=\"#2_369\">2.二维数组参数</a></li><li><a href=\"#3_410\">3.一级指针传参</a></li><li><a href=\"#4_473\">4.二级指针传参</a></li></ul>\n</li><li><a href=\"#_499\">四、函数指针</a></li><li><a href=\"#_581\">五、函数指针数组</a></li><li><a href=\"#_592\">六、指向函数指针数组的指针</a></li><li><a href=\"#_615\">七、回调函数</a></li><li><a href=\"#_657\">总结</a></li></ul>\n</div>\n<p></p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_9\"></a>前言</h1>\n<p>指针第一篇，万人浏览：<br/> <a href=\"https://blog.csdn.net/weixin_46913665/article/details/120402568\">【C语言】玩转指针——关于指针，你需要掌握的基础知识！</a></p>\n<p>指针的主题，我们在初级阶段的《指针》章节已经接触过了，我们知道了指针的概念：</p>\n<p>1.指针就是个变量，用来存放地址，地址唯一标识一块内存空间。<br/> 2. 指针的大小是固定的4/8个字节（32位平台/64位平台）。<br/> 3. 指针是有类型，指针的类型决定了指针的±整数的步长，指针解引用操作的时候的权限。<br/> 4. 指针的运算</p>\n<p>这个章节，我们继续探讨指针的高级主题</p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_25\"></a>一、字符指针</h1>\n<p>在指针的类型中我们知道有一种指针类型为字符指针 char* 。</p>\n<p>思考以下代码，pc和p分别指向何方？</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token string\">'www'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pc <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>ch<span class=\"token punctuation\">;</span><span class=\"token comment\">//pc是指向一个字符变量的</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token string\">\"hello boy\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"hello boy\"是一个常量字符串</span>\n\t<span class=\"token comment\">//上面表达式的作用是：把常量字符串“hello bit”的第一个字符h的地址赋给p(指向首字符地址)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dd3ad338dbe04bed861382dddbf70bf9.png\"/><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f5945f0d4499408e95b9fa9e012c5fe9.png\"/>【注意】</p>\n<blockquote>\n<p>代码 char* pstr = “hello bit.”; 特别容易让同学以为是把字符串 hello boy 放到字符指针<br/> p里了，但是/本质是把字符串 hello boy首字符的地址放到了p中。</p>\n</blockquote>\n<p>思考下面代码，输出的是什么？</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> str1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello boy.\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> str2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello boy.\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//两个字符数组，独立开辟空间。</span>\n\t<span class=\"token comment\">//数组名是数组首元素地址</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str3 <span class=\"token operator\">=</span> <span class=\"token string\">\"hello boy.\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str4 <span class=\"token operator\">=</span> <span class=\"token string\">\"hello boy.\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//二者都是指向常量字符串，（常量字符串，是不能修改的）</span>\n\t<span class=\"token comment\">//二者指向的是同一个地址</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str1 <span class=\"token operator\">==</span> str2<span class=\"token punctuation\">)</span><span class=\"token comment\">//比较两个数组的地址，肯定不相等</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1 and str2 are same\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1 and str2 are not same\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str3 <span class=\"token operator\">==</span> str4<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str3 and str4 are same\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str3 and str4 are not same\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\873dfac18a4e4650a46320406d1f2900.png\"/><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5890f87f07fc42949a5e9233872013ad.png\"/></p>\n<p>所以结果如下图<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\41a09aae36014ddf99613689752ffdfa.png\"/></p>\n<h1><a id=\"_85\"></a>二、指针数组和数组指针</h1>\n<p>指针数组是指针还是数组？<br/> 答案是：数组。</p>\n<p>数组指针是指针还是数组？<br/> 答案是：指针。</p>\n<p>举个例子：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p1<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//指针数组</span>\n<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//数组指针</span>\n</code></pre>\n<p>二者形式很相似，那么我们如何区分呢？</p>\n<h2><a id=\"1_102\"></a>1.指针数组</h2>\n<p>【指针数组】</p>\n<blockquote>\n<p>首先它是一个数组，数组的元素都是指针，数组占多少个字节由数组本身 决定。它是“储存指针的数组”的简称。</p>\n</blockquote>\n<p>指针数组是数组元素为指针的数组(例如 int *p[5],定义了p[0],p[1],p[2],p[3],p[4]五个指针)，其本质为数组。</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这里涉及到一个优先级的问题。</p>\n<p>我们知道数组下标的优先级比取值运算符的优先级高。所以，p先被定义为具有5个元素的数组。它的类型是int*，所以它是指向整型变量的指针。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\778383903257492b88606c21f7547299.png\"/>【结论】指针数组是一个数组，每个数组元素存放一个指针变量。</p>\n<p>指针数组如何初始化呢？</p>\n<pre><code class=\"prism language-c\">\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//char *arr[5];//arr是存放字符指针的数组</span>\n\t<span class=\"token comment\">//int * arr2[4];//arr2是存放整型指针的数组</span>\n\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span>\n\t                <span class=\"token comment\">//int* int* int* int*</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> arr2<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>d <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//arr2就是整型指针的数组</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>arr2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//取出第一个地址的内容</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d15d19663959446f9d6348682ca9515c.png\"/>数组指针中&amp;a，&amp;b,&amp;c,&amp;d分别指向10，20，30，40<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\643a4e0804eb4cd593dd298e2576d824.png\"/>大家有没发现，如果这样定义的话，会有些繁琐。<br/> 所以我们可以采用以下的方法：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token string\">\"abcedf\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bcedfg\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hehe\"</span> <span class=\"token punctuation\">,</span><span class=\"token string\">\"hhh\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\41ae25cfba0843e8a1ef732344001bca.png\"/><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\250d25f52231473e8b1f0a32c8321402.png\"/></p>\n<h2><a id=\"2_164\"></a>2.数组指针</h2>\n<h3><a id=\"21_165\"></a>2.1.数组指针是什么？</h3>\n<p>【数组指针】</p>\n<blockquote>\n<p>首先它是一个指针，它指向一个数组。在 32 位系统下永远是占 4 个字节，<br/> 至于它指向的数组占多少字节，不知道。它是“指向数组的指针”的简称。</p>\n</blockquote>\n<p>数组指针是指向数组地址的指针，其本质为<strong>指针</strong>。</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>在上面代码中，圆括号和数组下标位于同一优先级队列，所以从左到右执行。</p>\n<p>因此，p先被定义为一个指针变量，后边[5]表示的是一个具有5个元素的数组，p指向的就是这个数组。</p>\n<p>由于指针变量的类型事实上就是它所指向的元素的类型，所以这个int定义数组元素的类型为整型。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ddfa944cdeee4c9a9f3c60c4c5865782.png\"/><br/> 通过下面一个例子来加深理解</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span>pi<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span><span class=\"token comment\">//整型的地址存放到整型指针中</span>\n\t<span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pc<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>ch<span class=\"token punctuation\">;</span><span class=\"token comment\">//字符的地址存放在字符指针中</span>\n\n\n\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span><span class=\"token comment\">//arr-是数组首元素的地址</span>\n\n\t<span class=\"token comment\">//int* parr[10]; //这样写是数组</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>parr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">;</span><span class=\"token comment\">//取出的是数组的地址,应该存放到数组指针中</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>那么我们如何进行初始化呢？</p>\n<p>我们在学习指针的时候，是将指针指向数组名，因为数组名是数组首元素地址，知道了第一个元素的地址，后面的元素就可知道。如下：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8c9893fa70fd4acb841a041d8da254b5.png\"/>所以，上面的指针p是一个指向整型变量的指针，它并不是指向数组的指针。而数组指针，才是指向数组的指针。</p>\n<p>所以，在初始化的时候，应该将数组的地址传递给数组指针，而不是传递数组第一个元素的地址。它们值虽然相同，但含义不一样。</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d0a77f4e5ebd455db7820e25fffeee11.png\"/></p>\n<h3><a id=\"22_241\"></a>2.2.&amp;数组名和数组名的区别</h3>\n<p>我们以arr和&amp;arr来举例说明：</p>\n<blockquote>\n<p>a,&amp;a 的值是一样的。<br/> 但意思不一样，<br/> a 是数组首元素的首地址，也就是 a[0]的首地址。<br/> &amp;a 是数组的首地址，表示的是数组的地址。</p>\n</blockquote>\n<p>例如：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\756f6fb430c4402bae0491341d0354e1.png\"/>可以看到，它们的值是一样的。<br/> 但是，如果它们+1呢？<br/> 如下：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arr = %p\\n\"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;arr= %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">//+1看看</span>\n <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arr+1 = %p\\n\"</span><span class=\"token punctuation\">,</span> arr<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;arr+1= %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\196daa122806450bad83c78f60655702.png\"/>可以看到，+1后的结果就不一样了。<br/> 那么为什么呢？</p>\n<blockquote>\n<p>a 是<strong>数组首元素</strong>的首地址，也就是 a[0]的 首地址。<br/> &amp;a 是<strong>数组</strong>的首地址。<br/> a+1 是数组下一元素的首地址，即 a[1]的首地址。<br/> &amp;a+1 是下一 个数组的首地址。</p>\n</blockquote>\n<h3><a id=\"23_286\"></a>2.3.数组指针的使用</h3>\n<blockquote>\n<p>数组指针指向的是数组，存放的是数组的地址</p>\n</blockquote>\n<p>那怎么使用，举个例子：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">;</span><span class=\"token comment\">//把数组arr的地址赋值给数组指针变量p</span>\n    <span class=\"token comment\">//这里*先与p结合，再与 [ ] 结合，由于上面定义的数组是int类型，所以取地址的类型也是int类型。</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>来看下面代码，思考我们如何利用数组指针打印我们想要的结果呢？</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>parr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sz<span class=\"token punctuation\">)</span><span class=\"token comment\">//传上来地址，用数组指针接受</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> sz<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//以下3种方式都能打印</span>\n\t\t<span class=\"token comment\">//printf(\"%d \", parr[0][i]);//把一维数组当成二维数组，[0]表示第一行，[i]表示遍历元素</span>\n\t\t<span class=\"token comment\">//printf(\"%d \", (*(parr + 0))[i]);//*(parr + 0)解引用首元素地址</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>parr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//(*parr) 相当于 parr指向的数组的数组名</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> sz <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&amp;arr把数组的首元素地址传上去函数</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\875c64fe71834dde909c24bf288d1550.png\"/></p>\n<h1><a id=\"_329\"></a>三、数组参数与指针参数</h1>\n<p>我们都知道参数分为形参和实参。</p>\n<blockquote>\n<p>形参是指声明或定义函数时的参数<br/> 实参是在调用函数时主调函数传递过来的实际值。</p>\n</blockquote>\n<h2><a id=\"1_336\"></a>1.一维数组参数</h2>\n<p>一维数组传参是怎样的呢?<br/> 我们先来看一个例子：</p>\n<p>请大家思考一下，下面能否传参成功？</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//ok?</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//ok?</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">)</span><span class=\"token comment\">//ok?</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//ok?</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>arr<span class=\"token punctuation\">)</span><span class=\"token comment\">//ok?</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr2<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\53ce42a1ee3b48bc8cee2fc06e27d347.png\"/></p>\n<h2><a id=\"2_369\"></a>2.二维数组参数</h2>\n<p>二维数组的传参跟一维数组类似。</p>\n<p>举个例子：<br/> 同样思考能否传参成功？</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//ok？</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//ok？</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//ok？</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//总结：二维数组传参，函数形参的设计只能省略第一个[]的数字。</span>\n<span class=\"token comment\">//因为对一个二维数组，可以不知道有多少行，但是必须知道一行多少元素。</span>\n<span class=\"token comment\">//这样才方便运算。</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">)</span><span class=\"token comment\">//ok？</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//ok？</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//ok？</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>arr<span class=\"token punctuation\">)</span><span class=\"token comment\">//ok？</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2b6830bf44e345e1a440070ffc57f1d8.png\"/></p>\n<h2><a id=\"3_410\"></a>3.一级指针传参</h2>\n<p>首先，用一级指针传参，那就用一级指针接收</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sz<span class=\"token punctuation\">)</span> <span class=\"token comment\">//一级指针接收int* p</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>sz<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n\t <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n\t <span class=\"token keyword\">int</span> sz <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">//一级指针p，传给函数</span>\n\t <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>那如果我们用一级指针接收传过来的参数，我们的参数可以是什么样的形式呢？</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token comment\">//可以接收什么？</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//怎样传给函数？</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>其实我们可以有下面的方式：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//传地址上去可以</span>\n\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//传个数组名过去可以</span>\n\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//传个指针也可以</span>\n\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//传空指针也行，考虑清楚，因为传空指针就是传0，并且空指针不能解引用，不支持访问空间</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"4_473\"></a>4.二级指针传参</h2>\n<p>如果是二级指针怎么传参呢？</p>\n<p>同样的，我们可以有下面的方法。</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>ppa<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> ppa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>pa<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span>ppa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_499\"></a>四、函数指针</h1>\n<p>函数指针是是什么？</p>\n<p>我们说，数组指针就是数组的指针。是指向数组的指针。<br/> 同理</p>\n<blockquote>\n<p>函数指针就是函数的指针。它是一个指针，指向一个函数</p>\n</blockquote>\n<p>我们思考一下下面三个代码：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>fun1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> p1<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token operator\">*</span><span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> p1<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">fun3</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> p1<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>什么意思？</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>fun1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> p1<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> p1<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//fun2是函数名，p1，p2 是参数，其类型为 char *型，函数的返回值为 char *类型。</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span> <span class=\"token function\">fun3</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> p1<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//与 第二个表达式相比，唯一不同的就是函数的返回值类型为 char**，是个二级指针。</span>\n</code></pre>\n<p>那么第一个代码是什么意思？<br/> 这里 fun1 不是什么函数名，而是一个<br/> 指针变量，它指向一个函数。这个函数有两个指针类型的参数，函数的返回值也是一个指针。</p>\n<p>那么我们如何使用函数指针呢？</p>\n<pre><code class=\"prism language-c\">\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> p2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\ti <span class=\"token operator\">=</span> <span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> p1<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> p2<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpf <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>fun<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"aa\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>我们使用指针的时候，需要通过钥匙（“*”）来取其指向的内存里面的值，函数指针使用也如此。通过用(*pf)取出存在这个地址上的函数，然后调用它。</p>\n</blockquote>\n<p>给函数指针赋值时，可以用&amp;fun 或直接用函数名 fun。这是因为函数名被编译之后其实就是一个地址，所以这里两种用法没有本质的差别。</p>\n<p>接下来看一下下面这个代码什么意思？</p>\n<pre><code class=\"prism language-c\"><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>\n</code></pre>\n<p>第一步：void(*) ()，可以明白这是一个函数指针类型。这个函数没有参数，没有返回值。</p>\n<p>第二步：(void(*) ())0，这是将 0 强制转换为函数指针类型，0 是一个地址，也就是说一个函数存在首地址为 0 的一段区域内。</p>\n<p>第三步：(<em>(void(</em>) ())0)，这是取 0 地址开始的一段内存里面的内容，其内容就是保存在首地址为 0 的一段区域内的函数。</p>\n<p>第四步：(<em>(void(</em>) ())0)()，这是函数调用。</p>\n<h1><a id=\"_581\"></a>五、函数指针数组</h1>\n<blockquote>\n<p>把函数的地址存到一个数组中，那这个数组就叫函数指针数组</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//一个函数指针数组，pf为数组名，类型是char*(*)()</span>\n<span class=\"token comment\">//pf先于[3]结合，说明是一个数组，数组内存储了3个指向函数的指针</span>\n<span class=\"token comment\">//指针再与*结合，说明是一个函数指针数组</span>\n</code></pre>\n<h1><a id=\"_592\"></a>六、指向函数指针数组的指针</h1>\n<p>看起来很复杂，其实仔细分析也不难。</p>\n<p>这里的函数指针数组指针不就是一个指针嘛。只不过这个指针指向一个数组，这个数组里面存的都是指向函数的指针。仅此而已。（套娃）</p>\n<p>那如何定义呢？下面代码介绍</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token comment\">//函数指针pfun</span>\n <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pfun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> test<span class=\"token punctuation\">;</span>\n <span class=\"token comment\">//函数指针的数组pfunArr</span>\n <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pfunArr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n pfunArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> test<span class=\"token punctuation\">;</span>\n <span class=\"token comment\">//指向函数指针数组pfunArr的指针ppfunArr</span>\n <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ppfunArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>pfunArr<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_615\"></a>七、回调函数</h1>\n<p>根据维基百科的解释：</p>\n<blockquote>\n<p>把一段可执行的代码像参数传递那样传给其他代码，而这段代码会在某个时刻被调用执行，这就叫做回调。如果代码立即被执行就称为同步回调，如果在之后晚点的某个时间再执行，则称之为异步回调</p>\n</blockquote>\n<p>比如：<br/> 函数 F1 调用函数 F2 的时候，函数 F1 通过参数给函数 F2 传递了另外一个函数 F3 的指针，在函数 F2 执行的过程中，函数F2 调用了函数 F3，这个动作就叫做回调（Callback），而先被当做指针传入、后面又被回调的函数 F3 就是回调函数。</p>\n<p>举个例子：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">-</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Cale</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//通过指针传地址</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">pf</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//Cale(Add);</span>\n\t<span class=\"token function\">Cale</span><span class=\"token punctuation\">(</span>Sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//调用函数</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_657\"></a>总结</h1>\n<font color=\"#999AAA\"> 本文断断续续写了好几天，一是自己本身半桶水都没有，很多知识限于理论，不能实践。二是高阶指针确实难理解，就算现在写完了，理解依旧不透彻。参考了《C语言深度剖析》一书，如果大家想更加深入理解的话，建议去找这本书看看，收获会更多。 </font>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-10-10 21:10:11", "summary": "文章目录前言一、字符指针二、指针数组和数组指针指针数组数组指针数组指针是什么？数组名和数组名的区别数组指针的使用三、数组参数与指针参数一维数组参数二维数组参数一级指针传参二级指针传参四、函数指针五、函"}