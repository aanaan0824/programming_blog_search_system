{"blogid": "124511804", "writerAge": "码龄1年", "writerBlogNum": "12", "writerCollect": "59", "writerComment": "7", "writerFan": "513", "writerGrade": "2级", "writerIntegral": "141", "writerName": "小鹏杂货铺lefx", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124511804.jpg", "writerRankTotal": "91795", "writerRankWeekly": "82324", "writerThumb": "14", "writerVisitNum": "11590", "blog_read_count": "1868", "blog_time": "已于 2022-05-01 18:22:39 修改", "blog_title": "STM32的HAL库的IIC OLED驱动", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>        目前IICOLED屏幕是初学者常用的外设，本文将介绍STM32F407（所有STM32都大同小异）方面的oled驱动，下一篇文章将会介绍linux的IIC驱动。       </p>\n<p>OLED启动主要分为以下几步：</p>\n<pre><code>①屏幕初始化\n②开启屏幕显示\n③清屏（不清屏的话屏幕将会出现一片雪花）\n④发送要显示的字符串、数字、汉字等\n</code></pre>\n<h1>一、工程建立</h1>\n<p>首先利用Stm32CubeMX软件建立工程，因屏幕是i2c通信因此此工程只配置i2c和时钟即可。</p>\n<p>时钟配置：</p>\n<p>        <img alt=\"\" height=\"264\" src=\"..\\..\\static\\image\\cdd86ad43c7f4ef7ab18cf148a8d0e2d.png\" width=\"957\"/></p>\n<p> <img alt=\"\" height=\"799\" src=\"..\\..\\static\\image\\1a6fd743aef24c7080d3adf36d2ae788.png\" width=\"1123\"/></p>\n<p>i2c配置，本次选用的为i2c1：</p>\n<p>        <img alt=\"\" height=\"809\" src=\"..\\..\\static\\image\\589098661aee457c8eb42a1cbcc67499.png\" width=\"957\"/></p>\n<p>然后生成工程即可。</p>\n<h2>二、代码编写</h2>\n<p>oled有写命令和写数据两种操作，写命令为配置某项功能时使用，写数据为向oled写显示内容时使用。具体实现代码如下：oled屏地址一般为0x78（可以根据屏幕后面有一电阻，看电阻连接0x78还是0x7A）。</p>\n<pre><code class=\"language-cpp\">//写命令\nvoid OLED_WR_CMD(uint8_t cmd)\n{\n\tHAL_I2C_Mem_Write(&amp;hi2c1 ,0x78,0x00,I2C_MEMADD_SIZE_8BIT,&amp;cmd,1,0x100);\n}\n//写数据\nvoid OLED_WR_DATA(uint8_t data)\n{\n\tHAL_I2C_Mem_Write(&amp;hi2c1 ,0x78,0x40,I2C_MEMADD_SIZE_8BIT,&amp;data,1,0x100);\n}</code></pre>\n<p>①屏幕初始化部分</p>\n<p>       网上有各种各样的初始化代码，这个一个是匹配我手上的oled屏幕的配置，如果驱动不成功，可以试一下其他的初始化代码。</p>\n<pre><code class=\"language-cpp\">void WriteCmd()\n{\n    OLED_WR_CMD(0xAE);//--turn off oled panel\n\tOLED_WR_CMD(0x00);//---set low column address\n\tOLED_WR_CMD(0x10);//---set high column address\n\tOLED_WR_CMD(0x40);//--set start line address  Set Mapping RAM Display Start Line \n\tOLED_WR_CMD(0x81);//--set contrast control register\n\tOLED_WR_CMD(0xCF);// Set SEG Output Current Brightness\n\tOLED_WR_CMD(0xA1);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常\n\tOLED_WR_CMD(0xC8);//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常\n\tOLED_WR_CMD(0xA6);//--set normal display\n\tOLED_WR_CMD(0xA8);//--set multiplex ratio(1 to 64)\n\tOLED_WR_CMD(0x3f);//--1/64 duty\n\tOLED_WR_CMD(0xD3);//-set display offset\tShift Mapping RAM Counter (0x00~0x3F)\n\tOLED_WR_CMD(0x00);//-not offset\n\tOLED_WR_CMD(0xd5);//--set display clock divide ratio/oscillator frequency\n\tOLED_WR_CMD(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec\n\tOLED_WR_CMD(0xD9);//--set pre-charge period\n\tOLED_WR_CMD(0xF1);//Set Pre-Charge as 15 Clocks &amp; Discharge as 1 Clock\n\tOLED_WR_CMD(0xDA);//--set com pins hardware configuration\n\tOLED_WR_CMD(0x12);\n\tOLED_WR_CMD(0xDB);//--set vcomh\n\tOLED_WR_CMD(0x40);//Set VCOM Deselect Level\n\tOLED_WR_CMD(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)\n\tOLED_WR_CMD(0x02);//\n\tOLED_WR_CMD(0x8D);//--set Charge Pump enable/disable\n\tOLED_WR_CMD(0x14);//--set(0x10) disable\n\tOLED_WR_CMD(0xA4);// Disable Entire Display On (0xa4/0xa5)\n\tOLED_WR_CMD(0xA6);// Disable Inverse Display On (0xa6/a7) \n\tOLED_Clear();\n\tOLED_WR_CMD(0xAF);\n}</code></pre>\n<p> ②开启屏幕显示</p>\n<pre><code class=\"language-cpp\">//开启OLED显示    \nvoid OLED_Display_On(void)\n{\n\tOLED_WR_CMD(0X8D);  //SET DCDC命令\n\tOLED_WR_CMD(0X14);  //DCDC ON\n\tOLED_WR_CMD(0XAF);  //DISPLAY ON\n}\n\n//关闭OLED显示     \nvoid OLED_Display_Off(void)\n{\n\tOLED_WR_CMD(0X8D);  //SET DCDC命令\n\tOLED_WR_CMD(0X10);  //DCDC OFF\n\tOLED_WR_CMD(0XAE);  //DISPLAY OFF\n}\t\t</code></pre>\n<p></p>\n<p></p>\n<p>③清屏操作：</p>\n<pre><code>void OLED_Clear()\n{\n\tuint8_t i,n;\t\t    \n\tfor(i=0;i&lt;8;i++)  \n\t{  \n\t\tOLED_WR_CMD(0xb0+i);\n\t\tOLED_WR_CMD (0x00); \n\t\tOLED_WR_CMD (0x10); \n\t\tfor(n=0;n&lt;128;n++)\n\t\t\tOLED_WR_DATA(0x00);\n\t} \n}</code></pre>\n<p>④配置显示内容：</p>\n<p>其中F8x16和F6x8是自己添加的字符库。</p>\n<pre><code class=\"language-cpp\">/*\n输入内容为oled屏幕的显示坐标，要显示的字符、字符大小\n*/\nvoid OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t Char_Size)\n{      \t\n\tunsigned char c=0,i=0;\t\n\t\tc=chr-' ';//得到偏移后的值\t\t\t\n\t\tif(x&gt;128-1){x=0;y=y+2;}\n\t\tif(Char_Size ==16)\n\t\t\t{\n\t\t\tOLED_Set_Pos(x,y);\t\n\t\t\tfor(i=0;i&lt;8;i++)\n\t\t\tOLED_WR_DATA(F8x16[c*16+i]);\n\t\t\tOLED_Set_Pos(x,y+1);\n\t\t\tfor(i=0;i&lt;8;i++)\n\t\t\tOLED_WR_DATA(F8x16[c*16+i+8]);\n\t\t\t}\n\t\t\telse {\t\n\t\t\t\tOLED_Set_Pos(x,y);\n\t\t\t\tfor(i=0;i&lt;6;i++)\n\t\t\t\tOLED_WR_DATA(F6x8[c][i]);\n\t\t\t\t\n\t\t\t}\n}\n\n//显示一个字符号串\nvoid OLED_ShowString(uint8_t x,uint8_t y,uint8_t *chr,uint8_t Char_Size)\n{\n\tunsigned char j=0;\n\twhile (chr[j]!='\\0')\n\t{\t\tOLED_ShowChar(x,y,chr[j],Char_Size);\n\t\t\tx+=8;\n\t\tif(x&gt;120){x=0;y+=2;}\n\t\t\tj++;\n\t}\n}\n\n\nunsigned char Hzk[][16]=\n{\n\n {0x00,0x80,0xC0,0xBC,0x84,0x84,0x84,0xF4,0x82,0x82,0x83,0x82,0x80,0xC0,0x80,0x00},\n {0x00,0x40,0x20,0x10,0x0C,0x40,0x80,0x7F,0x00,0x00,0x04,0x08,0x30,0x60,0x00,0x00},\n\n {0x00,0xFE,0x22,0xFE,0x00,0xFE,0x22,0xFE,0x00,0xFC,0x06,0x55,0x84,0x7E,0x04,0x00},\n {0x40,0x3F,0x02,0x3F,0x40,0x3F,0x42,0x7F,0x10,0x13,0x12,0x12,0x5A,0x92,0x7E,0x00},\n};\n\n//显示汉字\n//hzk 用取模软件得出的数组\nvoid OLED_ShowCHinese(uint8_t x,uint8_t y,uint8_t no)\n{      \t\t\t    \n\tuint8_t t,adder=0;\n\tOLED_Set_Pos(x,y);\t\n    for(t=0;t&lt;16;t++)\n\t\t{\n\t\t\t\tOLED_WR_DATA(Hzk[2*no][t]);\n\t\t\t\tadder+=1;\n     }\t\n\t\tOLED_Set_Pos(x,y+1);\t\n    for(t=0;t&lt;16;t++)\n\t\t\t{\t\n\t\t\t\tOLED_WR_DATA(Hzk[2*no+1][t]);\n\t\t\t\tadder+=1;\n      }\t\t\t\t\t\n}\n\n//水平滚动\nvoid OLED_ver_scroll()\n{\n  OLED_WR_CMD(0x2e);//关滚动\n  OLED_WR_CMD(0x27);//29向右，2a向左\n  OLED_WR_CMD(0x00);//A:空字节\n  OLED_WR_CMD(0x02);//B:水平起始页\n  OLED_WR_CMD(0x07);//C:水平滚动速度\n  OLED_WR_CMD(0x03);//D:水平结束页\n  OLED_WR_CMD(0x00);//E:每次垂直滚动位移\n  OLED_WR_CMD(0xFF);//E:每次垂直滚动位移\n  OLED_WR_CMD(0x2f);//开滚动\n  \n}</code></pre>\n<p>主函数为：</p>\n<pre><code class=\"language-cpp\">int main(void)\n{\n  HAL_Init();\n  SystemClock_Config();\n  MX_GPIO_Init();\n  MX_I2C1_Init();\n  HAL_Delay(500);\n  OLED_Display_On();\n  uint8_t A[]=\"hellow world !!!!\";\n  uint8_t B[]=\"hellow world !!\";\n  OLED_Init();\n  HAL_Delay(500);\n  OLED_Display_On();pei\n  OLED_Clear();\n\n  /*OLED_ShowString(0,0,A,sizeof(A));\n\tOLED_ShowString(0,4,A,sizeof(B));*/\n  OLED_ShowCHinese(0,2,0);\n  OLED_ShowCHinese(16,2,1);\n  OLED_ver_scroll();\n\n  while (1)\n  {\n   \n  }\n}</code></pre>\n<p>至此就可以实现OLED的简单驱动了，下一期将会更新此olde屏幕在linux系统上的驱动配置。</p>\n<p>本人并称开源思想以下我将附上我的代码希望大家多读点赞收藏支持。如失效，请及时与我联系</p>\n<p>链接：https://pan.baidu.com/s/1_CTN0VSClB4VggR8OyRIcA <br/> 提取码：lpfx</p>\n<p></p>\n<p>创作不易，未经许可禁止转载</p>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-05-01 18:22:39", "summary": "目前屏幕是初学者常用的外设，本文将介绍所有都大同小异方面的驱动，下一篇文章将会介绍的驱动。启动主要分为以下几步：屏幕初始化开启屏幕显示清屏不清屏的话屏幕将会出现一片雪花发送要显示的字符串、数字、汉字等"}