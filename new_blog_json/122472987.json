{"blogid": "122472987", "writerAge": "码龄3年", "writerBlogNum": "131", "writerCollect": "164", "writerComment": "31", "writerFan": "101", "writerGrade": "4级", "writerIntegral": "1296", "writerName": "南风number", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122472987.jpg", "writerRankTotal": "18669", "writerRankWeekly": "42295", "writerThumb": "30", "writerVisitNum": "54458", "blog_read_count": "3915", "blog_time": "于 2022-02-21 15:50:44 发布", "blog_title": "PHP-laravel框架一1", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"Laravel_0\"></a>一、Laravel简介</h1>\n<h2><a id=\"1_1\"></a>1、简介</h2>\n<p>Laravel是一套简洁、优雅的PHP WEB开发框架（PHP Web Framework），具有富于表达性且简洁的语法，Laravel是易于理解且强大的，它提供了强大的工具用以开发大型，健壮的应用，例如具有自动验证、路由、Session、缓存、数据库迁移工具、单元测试等常用的工具和功能</p>\n<p>官网：<a href=\"https://laravel.com/\">https://laravel.com/</a><br/> 中文官网：<a href=\"http://www.golaravel.com/\">http://www.golaravel.com/</a><br/> 中文社区：<a href=\"https://laravel-china.org/\">https://laravel-china.org/</a><br/> Laravel框架的广告语：<br/> <strong>为 WEB 艺术家创造的 PHP 框架</strong></p>\n<p>目前大部分的框架公共的特点（了解）：<br/> （1）单入口，所有的请求必须从单入口开始，主要是便于管理（统一的参数过滤）<br/> （2）MVC的思想（分层思想，主要是为了协同开发，实现后期的维护方便）<br/> （3）ORM操作数据库（Object Relations Model，关联模型）：AR模式<br/> 注意：Laravel框架有一个特点，所有的URL访问都必须事先定好路由规则。</p>\n<h2><a id=\"2_18\"></a>2、开发环境配置与要求</h2>\n<p>Laravel框架的运行对环境是有严格要求的。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\139ec9349d714894a4685549495c11ff.png\"/><br/> php.ini配置文件需要开启的扩展：<br/> extension=php_openssl.dll<br/> extension=php_pdo_mysql.dll<br/> extension=php_mbstring.dll<br/> extension=php_fileinfo.dll（验证码代码依赖需要该扩展）<br/> extension=php_curl.dll（主要用于请求的发送）</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3d750e317974419fadfbe2ffcebc61ec.png\"/><br/> httpd.conf配置文件需要开启的模块:<br/> LoadModule deflate_module modules/mod_deflate.so<br/> LoadModule rewrite_module modules/mod_rewrite.so</p>\n<p>如果php的版本不满足基本要求需要升级，则有2个方法可供使用：<br/> a. 使用带有符合要求的php版本的集成环境替换当前环境（phpstudy），如当前数据库的数据仍需要，则需要备份下数据库，在装好新的环境之后导入备份的数据库；<br/> b. apache、mysql不做任何替换操作，单独的下载符合要求的版本php，替换原先低版本的php；<br/> c. 建议php使用php7+版本</p>\n<h2><a id=\"3PHP_38\"></a>3、PHP的注意事项（重要）</h2>\n<p>①在php安装好之后需要将php.exe的位置的目录添加到环境变量中去（如果之前有加过别的版本的php环境变量则需要删除掉）；<br/> ②得确保在添加环境变量之后，通过命令“php -v”运行得到的结果中php版本号与实际运行的版本号一致；</p>\n<p>将PHP加入环境变量（目录）：<br/> 命令行PHP版本检测运行结果（如果使用集成环境，则要求命令行显示php版本要与集成环境的版本一致）：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7063787fb3b3429590ccb5b951f35c6c.png\"/></p>\n<h2><a id=\"4composer_45\"></a>4、composer介绍</h2>\n<h3><a id=\"1composer_46\"></a>（1）什么是composer</h3>\n<p>composer英文单词意思：音乐指挥者<br/> composer是PHP中用来管理依赖（dependency）关系的工具，你可以在自己的项目中声明所依赖的外部工具库（libraries）,composer会帮您安装这些依赖的库文件。<br/> 一句话，composer是一个工具，是为php项目准备的软件管家。<br/> 工作原理：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\59ad0b9fef7b4231bab9df4612df1240.png\"/><br/> 如上图，composer可以去packagist应用市场 里边下载软件，但是该市场只给返回软件的地址，对应的软件都是在github里边存储的，最终下载的软件是从github返回的。<br/> https://packagist.org</p>\n<p>官方网站：<a href=\"https://getcomposer.org\">https://getcomposer.org</a><br/> 下载地址：<a href=\"https://getcomposer.org/download/\">https://getcomposer.org/download/</a><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4efe7c03e1e746389bf9f05ba9d2492d.png\"/></p>\n<h3><a id=\"2composer_58\"></a>（2）composer安装使用</h3>\n<p>注意前提条件：<br/> 开启PHP中openssl扩展。<br/> 安装composer需要明确php.exe的文件路径。<br/> 安装 composer需要联网</p>\n<p>①运行composer安装程序<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bac02db3246446a98d55bb87eaaec17e.png\"/></p>\n<p>②直接下一步<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5fbd6d08bacd47ff95be6b79cf463b9d.png\"/><br/> ③选择需要使用的php所在路径（如果显示不正确，可以点击浏览自行选择）<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1261b2482f31465f9e3e49ac26a243de.png\"/><br/> ④代理设置（默认不设置代理）<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a598b2269fb648418a0beb8862fa8828.png\"/><br/> ⑤直接下一步<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ef50c2865bd440a3be4c74548db57557.png\"/><br/> ⑥继续下一步<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cca6ef09178c40179af13cc029c3bb52.png\"/><br/> ⑦完成安装<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ee93e86895284fe0964c5264c0428600.png\"/><br/> 安装完成后，进入到命令提示符（cmd）,运行“composer”，如果出现如下提示，则安装完成。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c71b217488684ae4be76ec8d229a9d0b.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4710acd66cc74bcf814bb202879cc82f.png\"/></p>\n<h3><a id=\"3composerlaravel_82\"></a>（3）使用composer方式部署laravel项目</h3>\n<p>第一步：切换镜像（软件下载地址）为国内镜像【建议】<br/> 镜像官网：<br/> https://developer.aliyun.com/composer</p>\n<p>通过composer可以去packagist.org市场 和 github代码库 下载功能代码<br/> 但是packagist和github对应的服务器都部署在国外。<br/> 这时“镜像”应运而生，其是把存储在packagist和github等外国服务器上的全部内容定期(更新比较及时，几分钟的延迟)同步到国内服务器里边，使得广大开发者可以不用绕远到外国，相反在自己国家就可以把软件更新到自己的项目中，方便了composer的使用。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\438df1759f134e5384dc3e8874820f98.png\"/><br/> 给composer配置镜像：<br/> 修改 composer 的全局配置文件（推荐方式）<br/> #composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b8ff4fb5e8034aac8f353411ebdab22b.png\"/><br/> 第二步：composer部署laravel项目【重点】。<br/> #composer create-project laravel/laravel --prefer-dist ./<br/> 命令含义：<br/> composer：表示需要执行composer<br/> create-project：表示需要通过composer创建一个项目<br/> laravel/laravel：创建一个Laravel项目<br/> –prefer-dist：表示强制使用压缩包方式下载（省时间）<br/> ./或者其他名称：表示项目需要创建的路径【在创建项目的时候一定要确保路径目录为空】<br/> 例如：需要创建一个Laravel项目<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\82cea79c5e4542a795866bddd1ec07ca.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\698e5fbede074c64af46e0d8e6720075.png\"/><br/> 上述命令默认安装的是当前镜像网站中最新的版本：5.5.28。</p>\n<p>比如创建一个名为shop的laravel项目<br/> #composer create-project laravel/laravel --prefer-dist shop<br/> 运行composer的时候需要注意，在什么地方运行（命令行的当前工作路径）composer则就会在什么地方创建项目。</p>\n<p>注意，如果要下载其他版本，比如5.4版本中最新版本号（用<em>表示），可以使用这个命令<br/> #composer create-project laravel/laravel=5.4.</em> --prefer-dist ./<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3049be4b1b9e450596ee3b81d918192c.png\"/><br/> #composer create-project laravel/laravel=5.5.28 --prefer-dist ./ 指定版本</p>\n<h2><a id=\"5_119\"></a>5、目录结构分析</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6cb8cf9072ee407095516b72fc247e7a.png\"/><br/> （1）app目录：项目的核心目录，主要用于存放核心代码，也包括控制器、模型、中间件。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a013777a6aa44440a8fba0e65a288a5b.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8ea4653566dc4c1fb39a1eb7bb3198ba.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\00929cdfa2ba4665a7c983b8007a394c.png\"/><br/> （2）bootstrap目录，laravel启动目录<br/> （3）config目录，项目的配置目录，主要存放配置文件，比如数据库的配置<br/> app.php：全局配置文件，在后期开发的时候需要频繁的使用这个配置文件；<br/> auth.php：用户登录时候需要用到的用户认证模块的配置文件；<br/> database.php：数据库的配置文件；<br/> filesystems.php：文件系统（如文件存储等）的配置文件；<br/> （4）database目录，数据迁移目录<br/> factories：存放一些工厂模式需要用的一些文件；<br/> migrations：迁移，存放的是迁移文件（创建/删除/修改数据表操作的类文件）；<br/> seeds：播种、种子，存放的是种子（填充器）文件（模拟向数据表中写入数据的操作类<br/> （5）public目录，项目的入口文件和系统的静态资源目录（css,img,js,uploads）<br/> 后期使用的外部静态文件（js、css、图片等）都需要放到Public目录下<br/> 并且后期的网站的根目录也是这个目录（apache的documentroot目录为该目录路径）</p>\n<p>（6）resources目录，存放视图文件，还有就是语言包文件的目录<br/> language：存储语言包的目录；<br/> views：视图文件存储目录；</p>\n<p>（7）routes目录，是定义路由的目录，web.php是定义路由的文件<br/> （8）storage目录，主要是存放缓存文件和日志文件，注意，如果在linux环境下，该目录需要有可写权限。（后期用户上传文件如果存在本地则也在storage下）</p>\n<p>app：保存用户上传文件的路径；<br/> framework：框架自带的文件存储目录；<br/> logs：框架的日志文件存储位置；<br/> （9）vendor目录，主要是存放第三方的类库文件，laravel思想主要是共同的开发，不要重复的造轮子（例如，里面可能存在验证码类，上传类，邮件类），该目录还存放laravel框架的源码。注意如果要使用composer软件管理的，composer下载的类库都是存放在该目录下面的。<br/> （10）.env文件：主要是设置一些系统相关的环境配置文件信息。config目录里面的文件配置内容一般都是读取该文件里面的配置信息（config里面的配置项的值基本都是来自.env文件）。</p>\n<p>（11）artisan脚手架文件，主要用于生成的代码的（自动生成），比如生成控制器，模型文件等。</p>\n<p>执行命令：#php artisan 需要执行的指令<br/> 要求1：php必须添加环境变量，并且保证版本；<br/> 要求2：artisan必须存在命令行当前的工作路径下；</p>\n<p>（12）composer.json依赖包配置文件<br/> 声明当前需要的软件依赖，但是不能删除，composer需要使用。</p>\n<p>需要重点掌握的目录（频繁使用）</p>\n<table><thead><tr><th>目录</th><th>作用</th></tr></thead><tbody><tr><td>app</td><td>保存模型文件（默认）</td></tr><tr><td>app/Http/Controllers</td><td>app/Http/Controllers</td></tr><tr><td>resources/views</td><td>保存视图文件</td></tr><tr><td>config</td><td>配置文件目录</td></tr><tr><td>routes</td><td>存放路由文件</td></tr><tr><td>database/migrations</td><td>存放数据库迁移文件（操作数据表结构）</td></tr><tr><td>database/seeds</td><td>存放数据库种子文件（模拟测试数据）</td></tr></tbody></table>\n<h2><a id=\"6_172\"></a>6、启动方式</h2>\n<p>方式一：Laravel框架提供了更简单的方式启动项目（相比配置apache）<br/> 执行命令：#php artisan serve</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a9ab0fb1851c428299b2e34cb4623c1b.png\"/><br/> 不推荐使用：<br/> ①能够跑php代码，但是不启动数据库。<br/> ②该方式启动后，如果修改了项目的配置.env的话，则需要重新启动才会生效。<br/> ③如果使用命令行方式进行启动，则如果想继续访问页面，需要命令行不能关闭。<br/> 方式二：使用 wamp或lamp环境（常见）<br/> 虚拟主机配置：（虚拟主机 ≠ 虚拟机）</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5f68921e5eef4ce0814af5eaa4ffa1e0.png\"/><br/> 通过浏览器测试访问：<br/> http://i-lynn.cn/<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\aca224c65eb643d59f0660e2629bbdbd.png\"/></p>\n<h1><a id=\"Laravel_189\"></a>二、Laravel入门使用（路由）</h1>\n<p>什么是路由：将用户的请求按照事先规划的方案提交给指定的控制器或者功能函数来进行处理.【通俗的讲，路由就是访问地址形式】<br/> 在博客中，当我们在URL地址中，传递p（平台）、c（控制器）、a（方法）三个参数时，系统会自动跳转到指定模型中指定控制器的指定方法，这些处理过程都是由框架自动完成的。但是，在Laravel框架中，其并没有指定固定参数，其路由必须要手工进行配置。</p>\n<h2><a id=\"1_192\"></a>1、路由配置文件位置</h2>\n<p>路由文件在routes/web.php。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9bb5444e6f02405baae190de74f67716.png\"/><br/> 后续我们自己定义的路由都需要在该文件中去声明。</p>\n<h2><a id=\"2routeswebphp_196\"></a>2、routes\\web.php配置文件中配置路由（重点）</h2>\n<p>（1）默认根路由<br/> 问题：为什么当我们在浏览器中访问虚拟域名http://域名时，如何显示Laravel5？<br/> 答：原因是在路由文件web.php中，其已经定义好了一个路由，这个路由称之为“根路由”，一般用于访问网站的首页。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\204532779d81404596a6a83253926fbb.png\"/></p>\n<p>（2）路由定义格式：<br/> Route::请求方式（‘请求的URL’, 匿名函数或控制器响应的方法）<br/> 比如请求域名下根目录<br/> Route::get(’/’,function(){return ‘hello world’;});<br/> 函数的返回值，就是请求的响应。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3a98a4e00e0047bf80e84b4443c0b6d3.png\"/><br/> 页面上的显示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0cb39018d9154cada54d8ab6ce61798f.png\"/><br/> 又比如请求：http://域名/home地址则路由写成：<br/> Route::get(’/home’,function(){return ‘您当前访问的是/home地址’;});<br/> 显示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1a9f5aca5e2d401f9d420058c5d2ebca.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9dfe962cb95d491eb7c9ca874c244a58.png\"/><br/> 注意：路由地址中的第一个“/”可以不写（包括“根路由”）。</p>\n<p>如果还有更多的路由需要去定义，则仿照上述的形式语法继续编写即可。但是只要需要访问，则必须需要定义路由。<br/> 如果路由错误或者没有定义则会看到以下错误页面（以Laravel5.4.30为准）<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1fc0f5f4e36e451f8b0d06284ad991ab.png\"/><br/> 如果是5.5以后的版本，则提示如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\486badd3473c40a3a2b8a6297e64c2a9.png\"/><br/> （3）请求方式有哪些？<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3f01bebde20d436f80117b987e4689f2.png\"/><br/> 如果要解决“”这样的问题，则需要下面的两个方法解决：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4ec73337fa1c4871ae8af150e29d5940.png\"/><br/> 常见的四个方法：<br/> get方法：表示匹配请求类型为get的请求；<br/> post方法：表示匹配请求类型为post的请求；<br/> macth方法：表示匹配用户指定的几个请求类型（通过第一个参数去指定）的请求；<br/> 语法：Route::match([‘get’,’post’,’…’]，<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        u\n       \n       \n        r\n       \n       \n        l\n       \n       \n        ，\n       \n      \n      \n       url，\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right: 0.01968em;\">l</span><span class=\"mord cjk_fallback\">，</span></span></span></span></span>calback);<br/> any方法：表示匹配路由所支持的全部请求类型；</p>\n<p>如果路由方法与实际的请求类型不一致，则会报错<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6a88a1a3fc7d4d689427a34a02de690f.png\"/><br/> 在5.5及以后的版本中报错如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d8a8b05745be4b75b9b51fe3e51999c0.png\"/></p>\n<h2><a id=\"3_237\"></a>3、路由参数</h2>\n<p>使用路由需要public目录下.htaccess文件设置apache重写路由</p>\n<pre><code class=\"prism language-php\"><span class=\"token operator\">&lt;</span>IfModule mod_rewrite<span class=\"token operator\">.</span>c<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>IfModule mod_negotiation<span class=\"token operator\">.</span>c<span class=\"token operator\">&gt;</span>\n        Options <span class=\"token operator\">-</span>MultiViews <span class=\"token operator\">-</span>Indexes\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>IfModule<span class=\"token operator\">&gt;</span>\n\n    RewriteEngine On\n\n    <span class=\"token comment\"># Handle Authorization Header</span>\n    RewriteCond <span class=\"token operator\">%</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token argument-name\">HTTP</span><span class=\"token punctuation\">:</span>Authorization<span class=\"token punctuation\">}</span> <span class=\"token operator\">.</span>\n    RewriteRule <span class=\"token operator\">.</span><span class=\"token operator\">*</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">E</span><span class=\"token operator\">=</span><span class=\"token argument-name\">HTTP_AUTHORIZATION</span><span class=\"token punctuation\">:</span><span class=\"token operator\">%</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token argument-name\">HTTP</span><span class=\"token punctuation\">:</span>Authorization<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># Redirect Trailing Slashes If Not A Folder...</span>\n    RewriteCond <span class=\"token operator\">%</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token constant\">REQUEST_FILENAME</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">!</span><span class=\"token operator\">-</span>d\n    RewriteCond <span class=\"token operator\">%</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token constant\">REQUEST_URI</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">.</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>$\n    RewriteRule <span class=\"token operator\">^</span> <span class=\"token operator\">%</span><span class=\"token number\">1</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">L</span><span class=\"token punctuation\">,</span><span class=\"token constant\">R</span><span class=\"token operator\">=</span><span class=\"token number\">301</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># Handle Front Controller...</span>\n    RewriteCond <span class=\"token operator\">%</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token constant\">REQUEST_FILENAME</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">!</span><span class=\"token operator\">-</span>d\n    RewriteCond <span class=\"token operator\">%</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token constant\">REQUEST_FILENAME</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">!</span><span class=\"token operator\">-</span>f\n    RewriteRule <span class=\"token operator\">^</span> index<span class=\"token operator\">.</span>php <span class=\"token punctuation\">[</span><span class=\"token constant\">L</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>IfModule<span class=\"token operator\">&gt;</span>\n\n</code></pre>\n<p>路由参数其实就是给路由传递参数。<br/> 参数分为必选参数和可选参数。</p>\n<p>必选参数：一旦在路由中定义了，则必须传递，不传递就会报错。<br/> 例如：<br/> Route::get(‘home1/{id}’,function($id){<!-- --><br/> echo ‘输入的id是’ . $id;<br/> });</p>\n<p>路由参数的传递通过路由地址中的“{参数名}”的形式来进行传递，该形式是必选参数的形式，可以选的则使用“{参数名?}”。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4d26b303985043c3a576ad30feec6469.png\"/><br/> 如果设定了可选路由参数，但是又没有给默认值同时也没传递，则报错：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\72c2fc59a8a441658faef1130af6433a.png\"/><br/> 扩展：<br/> 路由参数除了上述的2种传递方式之后，还支持传统的路由参数传递：<br/> url?id=xxx&amp;aaa=xxxx<br/> 这种方式传递参数不受路由的限制的，不需要在路由文件中事先定义好路由参数，例如：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5901a2fcd0484fe7aa8172020c566dc5.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\757d76a07ee445fba0ccc846c444362b.png\"/></p>\n<h2><a id=\"4alias4alias_283\"></a>4、路由别名（alias）【重点】4、路由别名（alias）【重点】</h2>\n<p>路由别名相当于在路由定义的时候，为路由起了一个别名，在以后的程序中可以通过这个别名来获取路由的信息。/absafvdsadssdbfdsfa/qwdasd1312213fberfdvf/ascdfadvs =&gt; url1<br/> 后期在视图中会频繁使用到这样的代码“<a href=\"’%7b%7broute%28‘url1’%29%7d%7d’\">xxxx</a>”<br/> 场景：在后期需要频繁的定义跳转地址，但是如果这些地址写死了的话，万一发生变化，得全部修改，这个操作比较麻烦，因此可以使用路由别名的机制（定义路由的时候给路由起名字，在后期需要使用路由的时候直接调用名字）去简化以后的操作。</p>\n<p>给路由起名字的语法：<br/> Route::请求类型(路由地址,响应方法) -&gt; name(别名);</p>\n<p>例如：给hello的路由起名字“h1”<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\98ba75ccc0cd4bdd92a3bbc623e4b500.png\"/><br/> 调用该路由则可以写成：route(‘名字’);例如像刚才的h1，则需要写成route(‘h1’)</p>\n<p>扩展补充：查看系统已经有的路由命令：#php artisan route:list<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4a8a8843971f4004b1ce957a299d564e.png\"/></p>\n<h2><a id=\"5_297\"></a>5、路由群组（理解）【实用】</h2>\n<p>有后台有如下路由<br/> /admin/login<br/> /admin/logout<br/> /admin/index<br/> /admin/user/add<br/> /admin/user/del<br/> …<br/> 他们的共同点（这个共同点不局限于只是前缀）是，都有/admin/前缀，为了管理方便，可以把他们放到一个路由分组中，这个分组称之为路由群组。</p>\n<p>使用prefix属性指定路由前缀，也就是其路由中都具备的相同部分。</p>\n<p>语法：Route::group(公共属性数组,回调函数); 回调函数中放的剔除公共属性之后的路由</p>\n<p>比如，想要为所有路由URLs前面添加前缀admin</p>\n<pre><code class=\"prism language-php\"><span class=\"token class-name static-context\">Route</span><span class=\"token operator\">::</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'prefix'</span> <span class=\"token operator\">=&gt;</span> 'admin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name static-context\">Route</span><span class=\"token operator\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>login<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 匹配 \"/admin/login\" URL</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name static-context\">Route</span><span class=\"token operator\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>logout<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 匹配 \"/admin/logout\" URL</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name static-context\">Route</span><span class=\"token operator\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">/</span>add<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 匹配 \"/admin/user/add\" URL</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>记住：以大局为重。</p>\n<p>案例：编写路由/home/test/test1和/home/test/test2，要求使用路由群组<br/> 公共点：/home/test</p>\n<pre><code class=\"prism language-php\"><span class=\"token class-name static-context\">Route</span><span class=\"token operator\">::</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>‘prefix’ <span class=\"token operator\">=&gt;</span> ‘home<span class=\"token operator\">/</span>test’<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token class-name static-context\">Route</span><span class=\"token operator\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>‘test1’<span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name static-context\">Route</span><span class=\"token operator\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>‘test2’<span class=\"token punctuation\">,</span><span class=\"token function\">1function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\00635555fbf44702b7dcdc5fd3283137.png\"/><br/> 注意：使用路由群组不会改变其原有在地址栏中输入的地址。变的只是路由定义的写法。</p>\n<p>在后期还会接触到middleware（中间件）属性。</p>\n<h1><a id=\"C_346\"></a>三、控制器使用©</h1>\n<p>控制器主要的作用主要负责接收用户输入请求，调度模型处理数据最后利用视图展示数据。</p>\n<h2><a id=\"1_348\"></a>1、控制器文件写在哪里？</h2>\n<p>其位置位于app/Http/Controllers<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\629ac4d369cd49418cd8c6827d3d99c6.png\"/></p>\n<p>其中Auth存放的是框架自带的Auth认证相关的示例控制器文件，controller.php文件是框架的基类控制器。</p>\n<h2><a id=\"2_354\"></a>2、控制器文件如何命名？</h2>\n<p>命名可以参考Auth文件夹中给定的示例文件：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\aee4163884d445708061faf5d03a6581.png\"/><br/> 文件的命名方式：大驼峰+Controller.php</p>\n<p>友情提示：在写的时候不要带“+”。</p>\n<h2><a id=\"3_361\"></a>3、结构代码如何书写？【重点】</h2>\n<p>注意：其控制器基础结构代码，不需要自己去手动编写，可以通过artisan命令行来自动生成。<br/> 因此需要记住对应的命令：</p>\n<pre><code class=\"prism language-cmd\">#php artisan make:controller 控制器名(大驼峰)Controller\n</code></pre>\n<p>不要写“.php”。</p>\n<p>例如：使用artisan命令创建TestController.php文件。先确定命令：<br/> #php artisan make:controller TestController<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8948d6caf0764091a45c10885923ff2c.png\"/><br/> 其中已经写好的结构代码：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f899d078e0f74988ba88ce25b6a95290.png\"/><br/> 后续如果需要更多的控制器只需要重复的执行上述的artisan命令即可。</p>\n<p>注意：控制器可以分目录管理。</p>\n<h2><a id=\"4_378\"></a>4、控制器路由(项目以该方式为主)</h2>\n<p>即，如何使用路由规则调用控制器下的方法，而不再走回调函数。<br/> 路由设置格式基本相同，只是将匿名函数换成‘控制器类名@方法名’<br/> 定义格式如下：<br/> Route::请求方法(‘路由表达式’,’控制器@方法’);<br/> 例如：在Test控制器中创建test1方法，其中输出phpinfo信息<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\afd57f4dcd5e45f889ee74a7cf23f84f.png\"/><br/> 编写路由规则：<br/> 设定路由： /test1<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e8a2b5f55b56419f8295066dfbd428b7.png\"/><br/> 效果如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4d06a309dc0e466484c64c1be7b8c391.png\"/></p>\n<h2><a id=\"5_390\"></a>5、接收用户输入【重点】</h2>\n<p>接收用户输入的类：Illuminate\\Support\\Facades\\Input<br/> Facades:\"门面\"的思想。门面是介于一个类的实例化与没有实例化中间的一个状态。其实是类的一个接口实现。在这个状态下可以不实例化类但是可以调用类中的方法。说白了就是静态方法的调用。</p>\n<pre><code class=\"prism language-php\"><span class=\"token argument-name\">Input</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'参数的名字'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'如果参数没有被传递使用该默认值'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//类似php里三元运算符</span>\n<span class=\"token class-name static-context\">Input</span><span class=\"token operator\">::</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>获取所有的用户输入\n<span class=\"token class-name static-context\">Input</span><span class=\"token operator\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'参数的名字'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>获取单个的用户的输入\n<span class=\"token class-name static-context\">Input</span><span class=\"token operator\">::</span><span class=\"token function\">only</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'id'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>获取指定几个用户的输入\n<span class=\"token class-name static-context\">Input</span><span class=\"token operator\">::</span><span class=\"token function\">except</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'id'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>获取指定几个用户的输入以外的所有的参数\n<span class=\"token class-name static-context\">Input</span><span class=\"token operator\">::</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>判断某个输入的参数是否存在\n</code></pre>\n<p>上述方法既可以获取get中的信息，也可以获取post中的信息</p>\n<p>在laravel中如果需要使用facdes的话，但是又不想写那么长的引入操作:<br/> Use Illuminate\\Support\\Facades\\Input<br/> 则可以在config/app.php中定义长串的别名(在aliases数组中定义别名)<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8f1101ac5cdd47cfb62a001ec043482e.png\"/><br/> 案例：在/test2路由下测试上述的方法<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a6838d1ecc394f87af213e528fc9732a.png\"/><br/> 定义路由：<br/> /test2<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\db904053e6e9474c80e6d1b291800c3c.png\"/><br/> 编写test2方法测试上述的获取信息的操作：<br/> 给test2路由传递一系列的参数（get传值）<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a23f7c2efdff4b388e9f8c3c4a79b94a.png\"/></p>\n<p>在Laravel中友好输出函数：dd(需要打印的内容)；<br/> dd=dump + die<br/> dd函数之后的内容将不会继续执行；</p>\n<p>在Laravel中除了Input类可以获取用户的输入，Request也可以获取用户输入。</p>\n<h1><a id=\"DB_423\"></a>四、DB类操作数据库（重点）</h1>\n<p>按照MVC的架构，对应的操作应该放在Model中完成，但如果不使用Model,我们也可以用laravel框架提供的DB类操作数据库。而且，对于某些极其复杂的sql，用Model已经很难完成，需要开发者自己手写sql语句，使用DB类去执行原生sql。laravel 中DB类的基本用法 DB::table(‘tableName’)获取操作tableName表的实例（对象）。</p>\n<h2><a id=\"1_426\"></a>1、数据表的创建与配置</h2>\n<p>建立数据库：<br/> 建立数据库的方式：<br/> ①sql语句<br/> ②图形界面 phpMyAdmin Navicat</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5dc2fb86ebcc40b19c10a8dd0d950c53.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cf3e7d69951e474c92a4616436ee511d.png\"/><br/> （1）创建数据库和测试表</p>\n<pre><code class=\"prism language-mysql\">\ncreate table member(\n    id int primary key auto_increment,\n    name varchar(32) not null,\n    age tinyint unsigned not null,\nemail varchar(32) not null\n)engine myisam charset utf8mb4;\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2c31cc9159964a04abf42e1401212ed5.png\"/><br/> （2）数据库在laravel框架中的配置<br/> 在.env文件里面，<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3551553d0f534b99a18e39e17ee38ada.png\"/><br/> 也可以在config目录下面的database.php文件里面配置。使用env函数，表示先从env环境里面读取，如果获取成功则使用，如果获取失败，则使用env函数的第二个参数。<br/> 注意：如果是php artisan serve 方式启动的，修改了配置文件，则需要重新启动，才能读取修改后的配置文件：如果是wamp/lamp等环境则不需要重启。</p>\n<p>（3）在Test控制器中引入DB门面；</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0bebaecc15974f5880e7967be76df9b5.png\"/><br/> （4）定义增删改查需要的路由；<br/> 增加: /add get<br/> 删除: /del get<br/> 修改: /mod get<br/> 查询: /select get<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\777ce604a03a433aa71005f03d63539f.png\"/></p>\n<h2><a id=\"2insert_461\"></a>2、增加信息(insert)</h2>\n<p>对数据库中的某个表增加数据主要有两个函数可以实现，分别是insert()和insertGetId()</p>\n<p>insert(数组)可以同时添加一条或多条，返回值是布尔类型<br/> insertGetId(一维数组),只能添加一条数据，返回自增的id</p>\n<p>语法：DB::table(‘表名’) -&gt; insert(); 连贯操作/链式操作<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\47a2ecc3b62b4f3f9c4bc0b3450ef5ab.png\"/></p>\n<h2><a id=\"3_update_470\"></a>3、修改数据( update)</h2>\n<p>数据修改可以使用update()、inscrement()和decrement()方法来实现。<br/> ①Update方法表示可以修改整个记录中的全部字段;<br/> ②Increment和decrement表示修改数字字段的数值(递增或者递减)，典型应用：记录登录次数、积分的增加。<br/> 案例：把id=1的名称，改名为 ‘张三丰’<br/> -&gt; where() -&gt; update([])<br/> 注意：where方法之后可以继续调用where之类的方法。<br/> -&gt; where() -&gt; where() -&gt;where() … 这个语法是并且 (and) 关系语法。</p>\n<p>-&gt; where() -&gt; orWhere() -&gt; orWhere()… 这个语法是或者 (or) 关系语法。</p>\n<p>Orwhere方法的参数与 where一致。<br/> Where参数顺序:<br/> -&gt; where(字段名，运算符，字段值)。例如id=1，则可以写成：where(‘id’,’=’,1),简写成Where(‘id’,1); 【只有=可以简写】<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ea573bf6a16440b685c2d63726acd3bc.png\"/><br/> 返回值，表示受到影响的行数<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8e3847f200ea41ec95046c6fae9be66f.png\"/><br/> 案例：把id=1的用户年龄字段值加10；【了解】<br/> DB::table(’ member’)-&gt;increment(‘age’); 每次+1<br/> DB::table(’ member’)-&gt;increment(‘age’, 5); 每次+5<br/> DB::table(’ member’)-&gt;decrement(‘age’); 每次-1<br/> DB::table(’ member’)-&gt;decrement(‘age’, 5); 每次-5<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5d5cd0eba5a2434fa8d2bc8fca2ffea6.png\"/></p>\n<h2><a id=\"4get_493\"></a>4、查询数据(get)</h2>\n<h3><a id=\"1_494\"></a>（1）取出基本数据</h3>\n<p>案例1：获取member表中所有的数据<br/> DB::table(‘member’)-&gt;get(); //相当于select * from member;<br/> 返回值是一个集合对象，</p>\n<p>返回值：</p>\n<p>完成遍历取出的数据：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2c88a86813144e0f814df25a967f9621.png\"/><br/> 注意：Get查询的结果每一行的记录是对象的形式，不是数组。</p>\n<p>由于每一条记录都是一个对象，因此在循环或者访问字段的值的时候需要使用对象调用属性的方式进行访问，不能再用数组形式进行访问。否则就会报以下错误：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fe2891d21432426ab79c80ef25196904.png\"/></p>\n<p>案例2：获取id&lt;3的数据<br/> -&gt;where()-&gt;get();</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e070f89bdb0a45f89bde52d7dbf9eb26.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1ba2e1f751c64b92ad3fc01978cf9d9a.png\"/></p>\n<h3><a id=\"2_516\"></a>（2）取出单行数据</h3>\n<p>DB::table(‘member’)-&gt;where(‘id’,‘1’)-&gt;first();//返回值是一个对象<br/> 等价于limit 1</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d024976dc70543aa9d9d575f7fdfa3f6.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2071db60f06042349d76730a31e3e7f9.png\"/></p>\n<h3><a id=\"3_522\"></a>(3）获取某个具体的值（一个字段）</h3>\n<p>DB::table(‘member’)-&gt;where(‘id’,‘1’)-&gt;value(‘name’);<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4fa840dd2c404724b08f2c27833fb4f5.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2131f111d8be4b229d299384706451a1.png\"/></p>\n<h3><a id=\"4_526\"></a>（4）获取某些字段数据（多个字段）</h3>\n<p>$users = DB::table(‘member’)-&gt;select(‘name’, ‘email’)-&gt;get();<br/> $users = DB::table(‘member’)-&gt;select(‘name as user_name’)-&gt;get();<br/> $db -&gt; select(DB::raw(‘name,age’)) -&gt; get(); // 不解析字段，原样使用<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4fa840dd2c404724b08f2c27833fb4f5.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9951441d26e143348f17a74565ca2525.png\"/><br/> 注意：有多少个字段就有多少个参数（select方法），除了DB::raw之外。</p>\n<h3><a id=\"5_533\"></a>（5）排序操作</h3>\n<p>DB::table(‘member’)-&gt;orderBy(‘age’,‘desc’)-&gt;get(); <strong>desc降序 asc 升序 默认升序</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4fa840dd2c404724b08f2c27833fb4f5.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a751f8bb6dba4a9eb888e9a3dbe50cf5.png\"/></p>\n<h3><a id=\"6_537\"></a>（6）分页操作</h3>\n<p>DB::table(‘member’)-&gt;limit(3)-&gt;offset(2)-&gt;get();<br/> Limit：表示限制输出的条数（分页中每页显示记录数）<br/> Offset：从什么地方开始<br/> 组合起来等价于limit 2,3 limit 3(offset),2(length)<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a7cfc449f1e14857b08b51cc21af9e12.png\"/><br/> 归纳：具体的查询等操作方法一般都是放在连贯操作的最后。辅助方法可以放在中间，并且其先后顺序是无所谓的。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5ed358af13fb489185080c2678f84b94.png\"/></p>\n<h2><a id=\"5delete_545\"></a>5、删除数据(delete)【了解】</h2>\n<p>在删除中，有两种方式：物理删除（本质就是删除）、逻辑删除（本质是修改）</p>\n<p>数据删除可以通过delete函数和truncate函数实现，<br/> delete表示删除记录；<br/> truncate表示清空整个数据表；<br/> DB::table(‘table_name’)-&gt;where(‘id’,‘1’)-&gt;delete();</p>\n<p>例如：删除id小于3的记录</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d42c1c4e9d6d497fb7ae94869027be62.png\"/><br/> 返回值表示删除的行数：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4377001111104e86829133a535bdec96.png\"/><br/> 【补充：truncate】<br/> 语法：DB::table(‘member’) -&gt; truncate();</p>\n<h2><a id=\"6SQL_561\"></a>6、执行任意的SQL语句（补充了解）</h2>\n<p>（1）执行原生查询语句<br/> DB::select(“select语句”);</p>\n<p>（2）执行原生插入语句<br/> DB::insert(“insert语句”);</p>\n<p>（3）执行原生修改语句<br/> DB::update(“update语句”);</p>\n<p>（4）执行原生删除语句<br/> DB::delete(“delete语句”);</p>\n<p>（5）执行一个通用语句（没有返回值的语句，例如：create table等）<br/> DB::statement(“语句”);</p>\n<h1><a id=\"_577\"></a>五、视图操作【重点】</h1>\n<h2><a id=\"1_578\"></a>1、视图写哪里？</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fa895dec03e14ece98b6ac1df945bb23.png\"/><br/> 注意：<br/> a. 视图可以分目录管理<br/> b. 视图的后缀在laravel中一般一般都是“.blade.php”<br/> c. 视图的创建无法通过artisan来实现</p>\n<h2><a id=\"2_584\"></a>2、视图文件的命名与渲染</h2>\n<p>（1）文件名习惯小写（建议小写）<br/> （2）文件名的后缀是 .blade.php（因为laravel里面有一套模板引擎就是使用blade，可以直接使用标签语法{<!-- -->{ $title }}， 也可以使用原生的php语法显示数据。）<br/> （3）需要注意的是也可以使用.php结尾，但是这样的话就不能使用laravel提供的标签{<!-- -->{ $title }}语法显示数据，只能使用原生语法 &lt;?php echo $title;?&gt; 显示数据<br/> 两个视图文件同时存在，则.blade.php后缀的优先显示。</p>\n<p>案例：编写一路由地址，调用Test控制器的test3方法，展示视图test3文件（创建2个，一个以.blade.php结尾，另外一个.php结尾）【验证优先级】<br/> 创建对应路由：<br/> /test3<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a34c58dc795f4b31b322c3cbeb2f2ae5.png\"/></p>\n<p>编写控制器方法：<br/> 展示视图的方法：<br/> return view(‘视图文件的名称’);</p>\n<p>视图可以进行分目录管理的，例如需要展示home/test/test2视图，则可以写成：<br/> return view(‘home/test/test2’) 当然也支持点写法：view(‘home.test.test2’)<br/> 展示方法：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5373eb53370e472b8bd0a32362f8354f.png\"/><br/> 没有视图文件报错：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7184566d1d664b11ba61559a345c9d69.png\"/><br/> 新建2个视图（一个以“.blade.php”结尾，一个是“.php”结尾）最终展示的是.blade.php文件<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bcad1fe8633943fca9e29820ba584f27.png\"/></p>\n<h2><a id=\"3_608\"></a>3、变量分配与展示</h2>\n<p>语法：<br/> ①view(模板文件名称,数组) 数组就是需要分配的变量集合，数组是一个键值数组，其键与变量名尽量一致<br/> ②view(模板文件名称)-&gt;with(数组)<br/> ③view(模板文件名称)-&gt;with(名称,值)-&gt;with(名称,值)…<br/> 使用view()方式渲染一个视图后，在.blade.php的视图文件中，模板中输出变量使用“{<!-- -->{ $变量名 }} ”（变量名就是分配过来数组的键）</p>\n<p>案例：需要将控制器方法中的时间（年月日时分秒）数据传递到视图中去，并且输出<br/> 创建test3方法</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4f65490b2b2b4cb485854dc43df36a23.png\"/><br/> 创建模版页面：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9c2260ce71f547bfb4ec1d3ee9e3f791.png\"/><br/> 输出效果：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a52d7ed02df544988b7029dc1f4eaba5.png\"/><br/> 提示：变量在视图中展示的时候，在原先PHP文件中怎么写，在视图中依旧按照原先的方式进行编写，只需要写好之后在最外层套2个“{ }”即可。例如对于时间戳的格式化：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\908aa96e41214830add494674c41cb19.png\"/></p>\n<h2><a id=\"4compact_625\"></a>4、扩展：compact函数使用（传参）</h2>\n<p>Compact函数，是php内置函数跟laravel框架没有关系。作用主要是用于打包数组的。<br/> 语法：compact(‘变量名1’,’变量名2’,…);<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c943201d8b7e47d29da955c24de87689.png\"/><br/> 因此刚才3中的案例还可以写成：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\963263c2fc5b4628afb2d6a363cd9765.png\"/><br/> 只是影响的是后台的数组打包，跟前台使用没有什么关系。</p>\n<h2><a id=\"5_633\"></a>5、循环与分支语法标签【重点】</h2>\n<p>//在视图里面遍历数据【重点】<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\29ad353f0bdd41f9957681b9af68ff7f.png\"/><br/> 案例：使用循环标签的语法，在视图中输出数据<br/> 新建路由：<br/> /test4<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dbd9bcb528a14505b3d55e8fb775cde9.png\"/><br/> 创建需要的test4方法<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9bbdd72f66d24c2ab9a3da362a1ab799.png\"/><br/> 创建视图，视图中的循环输出：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\092c990034414b95bce0956a415a5f16.png\"/><br/> 显示效果：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5866591f2d9e4834aecb72febf176604.png\"/><br/> 需要注意的是，如果本身data是结果集的话，则循环到的value一般会是一个对象（此时不能使用“[]”访问数组的形式进行属性访问，而应该使用“-&gt;”形式）。</p>\n<p><strong>//在视图里面可以执行if判断【重点】</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4587d6e1b9184eef8aef986437ea0ae5.png\"/><br/> 案例：要求在php代码中（控制器的方法）动态输出今天的星期数字（1-7），将数字传递给视图，显示出今天是星期几，如假设传递的数字是7，则页面中要输出“星期天”【将数字转化成汉字】<br/> a. 先在控制器方法中输出当前的星期数字<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bc604ca9ed2a458e80808fb6f7e32863.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\50ae144b9e04447e8fa22b9f6f824fe2.png\"/><br/> b. 需要在视图中获取数字，并且通过if判断输出今天的星期汉字<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\abeee35dd0cb45229b9c6cf83c12de66.png\"/><br/> 效果：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c03cbbfaf794441f8bd9bc26336cf493.png\"/></p>\n<h2><a id=\"6_659\"></a>6、模版继承/包含【理解】</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fc51bd3cb3cc4de7834c70c23d98b769.png\"/><br/> 继承不仅仅在php类中存在，在视图中同样存在。一般是用于做有公共部分的页面。<br/> 以上图为例，可以将头和尾单独的放到一个页面中去（父页面），可变的区域称之为叫子页面，如果子页面需要用到父页面的东西，则需要使用继承。</p>\n<p>问题：PHP父类中的方法能不能在子类中重写？</p>\n<p>案例：编写父级页面（父类），再编写一个子页面（子类）（相当于php中的两个类）<br/> 编写父级页面：</p>\n<p><strong>语法</strong>：@yield(‘名字’) 在父级页面中的占位，也就是空出可变区域</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0bf573f1ce4247c692252d969c3752bb.png\"/><br/> 在父页面中，头尾是固定的，中间是可变的区域，由于内容不知道是什么，所以通过yield占位，等待子页面去补充（等待子页面重写yield区域）。</p>\n<p>再去创建子页面和其路由<br/> /test5<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2455d0af134843b29365a2d2ddaf38ed.png\"/><br/> 创建test5方法，展示视图<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ba3d3b399eb34c29994c6c232ad573ac.png\"/></p>\n<p>创建视图test5（只是展示可变区域）<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8e453d99a1e346c39a6e4e16893541e5.png\"/><br/> 继承语法：<br/> 子模版中按以下语法书写：<br/> @extends(‘需要继承的模版文件名’) 其名称要是完整的路径，类似view视图路径<br/> 通过section标签绑定区块/部件到父级页面，区块名称就是父级页面yield标签的参数名。<br/> @section(区块名称)<br/> 代码<br/> @endsction<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7eb22f926e1d4f5b87fd003fb18c55ce.png\"/><br/> 效果：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8ab7c923247046f1b47904549f60f249.png\"/><br/> 模版包含：<br/> 语法：@include(模版文件名) 文件名不含后缀，语法类似view方法参数<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ff812e058bf943de9906530e70ad7890.png\"/></p>\n<h1><a id=\"CSRF_696\"></a>六、CSRF攻击【重点】</h1>\n<h2><a id=\"1CSRF_697\"></a>1、什么是CSRF攻击？</h2>\n<p>CSRF是跨站请求伪造（Cross-site request forgery）的英文缩写：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\95328befe7614e12b332fb975d1cfca7.png\"/><br/> Laravel框架中避免CSRF攻击很简单：Laravel自动为每个用户Session生成了一个CSRF Token，该Token可用于验证登录用户和发起请求者是否是同一人，如果不是则请求失败。【该原理和验证码的原理是一致】<br/> Laravel提供了一个全局帮助函数csrf_token来获取该Token值，因此只需在视图提交表单中添加如下HTML代码即可在请求中带上Token：</p>\n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hidden<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_token<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&lt;?php echo csrf_token(); ?&gt;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<h2><a id=\"2LaravelCSRF_706\"></a>2、Laravel中如何避免CSRF攻击</h2>\n<p>案例：通过案例实现csrf的机制验证<br/> ①创建两个路由，一个用于展示表单（get），另外处理请求（post）<br/> /test6 展示表单 get<br/> /test7 提交处理 post<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\33d6224c6cc540ff98abea81b93f552d.png\"/><br/> ②创建需要的方法<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f1f551ee0dab426a8be23ba1938486db.png\"/><br/> ③创建需要的简易表单<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\92bb1aef77624d56ad3bb335d7b67960.png\"/><br/> ④提交效果（报错页面）<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\36e2211c5e034d1ba7aaf82e118a45f5.png\"/><br/> 说明Laravel框架是默认开启了csrf认证的（必须）。</p>\n<p>⑤解决报错问题（如何通过csrf验证）<br/> 就是可以使用之前说的，可以在表单中添加一个隐藏域：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f50fc6ba0224450686d81ebefe2b59e9.png\"/><br/> 在html页面中显示如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\591776925bef4fc7b46ab2208ad4dc41.png\"/><br/> {<!-- -->{csrf_token()}}：表示直接输出token值；<br/> {<!-- -->{csrf_field()}}：表示的是直接输出整个隐藏域的input框；</p>\n<p>第16行和第17行效果是等价的：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2a3c46cc74c04d49ba276b1ddb099602.png\"/><br/> 场景选择：一般在视图里用csrf_field即可，大部分的时候在JavaScript代码段中（特别是在做ajax异步提交的时候）可以考虑用csrf_token。</p>\n<p>添加了csrf的token之后，表单就可以正常的提交。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1c3ef02003bc428c96de1cc786b64daf.png\"/><br/> CSRF验证机制与图形验证码的原理是一致的，都是将用户提交的值与与session中的值进行比对，如果一致则通过，否则不通过。</p>\n<p>针对csrf_token与csrf_field的选择问题：<br/> 如果只需要使用值（例如，在ajax的post提交的时候），则使用csrf_token，如果需要的是隐藏域（在表单里），则使用csrf_field。</p>\n<h2><a id=\"3CSRF_739\"></a>3、从CSRF验证中排除例外路由（了解）</h2>\n<p>并不是所有请求都需要避免CSRF攻击，比如去第三方API获取数据的请求。<br/> 可以通过在VerifyCsrfToken（app/Http/Middleware/VerifyCsrfToken.php）中间件中将要排除的请求URL添加到$except属性数组中：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\65364789484f44dba6455684babce5e9.png\"/><br/> 排除写法：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\83130aabe44f4d65a4a5bf9966e265e6.png\"/><br/> 说明：如果这个操作不是刚需，则此功能不建议使用。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 1, "php": 1, "time": "2022-02-21 15:50:44", "summary": "一、简介、简介是一套简洁、优雅的开发框架，具有富于表达性且简洁的语法，是易于理解且强大的，它提供了强大的工具用以开发大型，健壮的应用，例如具有自动验证、路由、、缓存、数据库迁移工具、单元测试等常用的工"}