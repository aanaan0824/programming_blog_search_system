{"blogid": "126498834", "writerAge": "码龄163天", "writerBlogNum": "81", "writerCollect": "2746", "writerComment": "3091", "writerFan": "3589", "writerGrade": "6级", "writerIntegral": "7890", "writerName": "北极的三哈", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126498834.jpg", "writerRankTotal": "1807", "writerRankWeekly": "16", "writerThumb": "2703", "writerVisitNum": "649520", "blog_read_count": "47838", "blog_time": "已于 2022-09-04 10:25:48 修改", "blog_title": "Python基础知识点总结", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/4f047c5263c3424b9353a21c7f6ccf8b.gif#pic_center\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\29bc88027cd84c80a639dab1a8cb0d71.jpeg\"/></p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_8\">一、开发环境搭建</a></li><li><ul><li><a href=\"#11_Python_11\">1.1 Python解释器的安装</a></li><li><a href=\"#12_PyCharm_13\">1.2 集成开发环境PyCharm安装</a></li></ul>\n</li><li><a href=\"#_18\">二、基本语法元素</a></li><li><ul><li><a href=\"#21__22\">2.1 程序的格式框架</a></li><li><ul><li><a href=\"#211__25\">2.1.1 缩进</a></li><li><a href=\"#212__36\">2.1.2 注释</a></li><li><a href=\"#213__59\">2.1.3 续行符</a></li></ul>\n</li><li><a href=\"#22__71\">2.2 语法元素的名称</a></li><li><ul><li><a href=\"#221__73\">2.2.1 变量</a></li><li><a href=\"#222__94\">2.2.2 保留字</a></li><li><a href=\"#223__117\">2.2.3 标识符</a></li></ul>\n</li><li><a href=\"#23__129\">2.3 数据类型</a></li><li><ul><li><a href=\"#231__130\">2.3.1 二进制与字符编码</a></li><li><a href=\"#232__142\">2.3.2 数值类型</a></li><li><a href=\"#233__158\">2.3.3 字符串类型</a></li></ul>\n</li><li><a href=\"#24__201\">2.4 程序的语句元素</a></li><li><ul><li><a href=\"#241__202\">2.4.1 表达式</a></li><li><a href=\"#242__205\">2.4.2 赋值语句</a></li><li><a href=\"#243__219\">2.4.3 引用</a></li><li><a href=\"#244__227\">2.4.4 其他语句</a></li></ul>\n</li><li><a href=\"#25__267\">2.5 基本输入输出函数</a></li><li><ul><li><a href=\"#251_input__268\">2.5.1 input( )函数</a></li><li><a href=\"#252_eval__278\">2.5.2 eval( )函数</a></li><li><a href=\"#253_print_299\">2.5.3 print()函数</a></li></ul>\n</li><li><a href=\"#26_370\">2.6转义字符与原字符</a></li><li><ul><li><a href=\"#261__371\">2.6.1 转义字符</a></li><li><a href=\"#262__403\">2.6.2 原字符</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_415\">三、运算符</a></li><li><ul><li><a href=\"#31__419\">3.1 数值运算操作符</a></li><li><a href=\"#32__433\">3.2 数值运算函数</a></li><li><a href=\"#33__446\">3.3 算数运算符</a></li><li><a href=\"#34__472\">3.4 赋值运算符</a></li><li><a href=\"#35__534\">3.5 布尔运算符</a></li><li><a href=\"#36__575\">3.6 比较运算符</a></li><li><a href=\"#37____593\">3.7 位运算 &amp; |</a></li><li><a href=\"#38_and__or__not_608\">3.8 逻辑运算符：and or not</a></li><li><a href=\"#39__626\">3.9 运算符的优先级</a></li></ul>\n</li><li><a href=\"#_644\">四、流程控制</a></li><li><ul><li><a href=\"#41__647\">4.1 顺序结构</a></li><li><a href=\"#42__660\">4.2 分支结构（选择结构）</a></li><li><ul><li><a href=\"#421__if_663\">4.2.1 单分支 if</a></li><li><a href=\"#422__ifelse_684\">4.2.2 双分支 if...else</a></li><li><a href=\"#423__ifelifelse_707\">4.2.3 多分支 if...elif..else</a></li><li><a href=\"#424_if_749\">4.2.4 嵌套`if`的使用</a></li><li><a href=\"#425__792\">4.2.5 三元表达式</a></li><li><a href=\"#426_pass_811\">4.2.6 pass语句</a></li></ul>\n</li><li><a href=\"#43_841\">4.3循环结构</a></li><li><ul><li><a href=\"#431_range_844\">4.3.1 range()函数的使用</a></li><li><a href=\"#432_forin_891\">4.3.2 遍历循环for-in</a></li><li><a href=\"#433while_945\">4.3.3无限循环while</a></li><li><a href=\"#434breakcontinue_974\">4.3.4循环控制break和continue</a></li><li><a href=\"#435_1032\">4.3.5嵌套循环</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_1056\">五、组合数据类型</a></li><li><ul><li><a href=\"#51__1058\">5.1 列表类型</a></li><li><ul><li><a href=\"#511__1061\">5.1.1 列表的定义</a></li><li><a href=\"#512__1088\">5.1.2 列表的特点</a></li><li><a href=\"#513__1094\">5.1.3 列表的索引</a></li><li><a href=\"#514__1130\">5.1.4 列表的切片</a></li><li><a href=\"#515__1159\">5.1.5 列表操作函数</a></li><li><a href=\"#516__1183\">5.1.6 列表操作方法</a></li><li><a href=\"#517__1196\">5.1.7 列表元素的增加操作</a></li><li><a href=\"#518__1230\">5.1.8 列表元素的删除操作</a></li><li><a href=\"#519__1270\">5.1.9 列表元素的修改操作</a></li><li><a href=\"#5110__1283\">5.1.10 列表元素的排序操作</a></li><li><a href=\"#5111__1347\">5.1.11 列表生成式</a></li></ul>\n</li><li><a href=\"#52__1360\">5.2 字典</a></li><li><ul><li><a href=\"#521__1364\">5.2.1 什么是字典</a></li><li><a href=\"#522__1370\">5.2.2 字典示意图</a></li><li><a href=\"#523__1372\">5.2.3 字典的原理</a></li><li><a href=\"#524__1375\">5.2.4 创建字典的方式</a></li><li><a href=\"#525__1404\">5.2.5 字典元素的获取</a></li><li><a href=\"#526__1420\">5.2.6 字典的操作函数</a></li><li><a href=\"#527__1593\">5.2.7 字典的操作方法</a></li><li><a href=\"#528__1606\">5.2.8 字典元素的增删改操作</a></li><li><a href=\"#529__1649\">5.2.9 字典视图的获取</a></li><li><a href=\"#5210__1674\">5.2.10 字典元素的遍历</a></li><li><a href=\"#5211__1683\">5.2.11 字典的特点</a></li><li><a href=\"#5212__1690\">5.2.12 字典生成式</a></li></ul>\n</li><li><a href=\"#53__1717\">5.3 元组</a></li><li><ul><li><a href=\"#531__1720\">5.3.1 什么是元组</a></li><li><a href=\"#532__1747\">5.3.2 元组的创建方式</a></li><li><a href=\"#533__1805\">5.3.3 元组的遍历</a></li></ul>\n</li><li><a href=\"#54__1820\">5.4 集合</a></li><li><ul><li><a href=\"#541__1833\">5.4.1 集合操作符</a></li><li><a href=\"#542__1841\">5.4.2 常用集合操作函数或方法</a></li><li><a href=\"#543__1853\">5.4.3 集合的创建方式</a></li><li><a href=\"#544__1873\">5.4.4 集合元素的判断操作</a></li><li><a href=\"#545__1884\">5.4.5 集合的新增操作</a></li><li><a href=\"#546__1900\">5.4.6 集合的删除操作</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_1927\">六、字符串</a></li><li><ul><li><a href=\"#61__1938\">6.1 字符串的驻留机制</a></li><li><ul><li><a href=\"#611__1939\">6.1.1 字符串</a></li><li><a href=\"#612_1942\">6.1.2什么叫字符串的驻留机制</a></li><li><a href=\"#613__1963\">6.1.3 字符串驻留机制的几种情况（交互式）</a></li><li><a href=\"#614_2_2004\">6.1.4 强制2个字符串指向同一个对象</a></li><li><a href=\"#615__2019\">6.1.5 字符串驻留机制的优缺点</a></li></ul>\n</li><li><a href=\"#62__2026\">6.2 字符串类型的操作</a></li><li><ul><li><a href=\"#621__2029\">6.2.1 字符串操作符</a></li><li><a href=\"#622__2036\">6.2.2 字符串处理函数</a></li><li><a href=\"#623__2046\">6.2.3 字符串处理方法</a></li><li><a href=\"#624__2058\">6.2.4 字符串的查询操作</a></li><li><a href=\"#625__2081\">6.2.5 字符串大小写转换操作</a></li><li><a href=\"#626__2106\">6.2.6 字符串内容对齐操作方法</a></li><li><a href=\"#627__2130\">6.2.7 字符串的劈分操作</a></li><li><a href=\"#628__2160\">6.2.8 判断字符串的方法</a></li><li><a href=\"#629__2194\">6.2.9 字符串的替换与合并操作</a></li><li><a href=\"#6210__2217\">6.2.10 字符串的比较运算</a></li><li><a href=\"#6211__2248\">6.2.11 字符串的切片操作</a></li><li><a href=\"#6212__2268\">6.2.12 格式化字符串</a></li><li><a href=\"#6213__2334\">6.2.13 数值与字符串类型转换函数</a></li></ul>\n</li><li><a href=\"#63__2344\">6.3 字符串编码转换</a></li><li><ul><li><a href=\"#631__2345\">6.3.1 为什么要进行字符串编码转换</a></li><li><a href=\"#632__2349\">6.3.2 编码与解码的方式</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_2368\">七、函数和代码复用</a></li><li><ul><li><a href=\"#71__2371\">7.1 函数的定义</a></li><li><a href=\"#72__2394\">7.2 函数的调用</a></li><li><a href=\"#73__2417\">7.3 函数的参数传递</a></li><li><ul><li><a href=\"#731__2427\">7.3.1 形式参数与实际参数</a></li><li><a href=\"#732__2430\">7.3.2 位置传参与关键字传参</a></li><li><a href=\"#733__2459\">7.3.3 可变对象与不可变对象的参数传递</a></li><li><a href=\"#734__2499\">7.3.4 个数可变的位置、关键字参数</a></li><li><a href=\"#735__2554\">7.3.5 函数参数总结(一）</a></li><li><a href=\"#736__2581\">7.3.6 函数参数总结(二）</a></li></ul>\n</li><li><a href=\"#74__2636\">7.4 函数的返回值</a></li><li><a href=\"#75__2681\">7.5 变量的作用域</a></li><li><a href=\"#76__2732\">7.6 代码复用</a></li><li><a href=\"#77__2746\">7.7 递归函数</a></li><li><ul><li><a href=\"#771__2747\">7.7.1 什么是递归函数</a></li><li><a href=\"#772__2750\">7.7.2 递归的组成部分</a></li><li><a href=\"#773__2753\">7.7.3 递归的调用过程</a></li><li><a href=\"#774__2756\">7.7.4 递归的优缺点</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_2794\">八、异常处理机制</a></li><li><ul><li><a href=\"#81_Bub_2798\">8.1 Bub的由来及分类</a></li><li><ul><li><a href=\"#811_Bug_2799\">8.1.1 Bug的由来</a></li><li><a href=\"#812_Bug_2812\">8.1.2 Bug常见类型</a></li></ul>\n</li><li><a href=\"#82__2910\">8.2 异常处理</a></li><li><ul><li><a href=\"#821_tryexception_2913\">8.2.1 `try-exception`语句</a></li><li><a href=\"#822_except_2944\">8.2.2 多个`except`语句</a></li><li><a href=\"#823_tryexceptelse_2989\">8.2.3 `try-except-else`结构</a></li><li><a href=\"#824_tryexceptelsefinally_3009\">8.2.4 `try-except-else-finally`结构</a></li><li><a href=\"#825_traceback_3038\">8.2.5 traceback模块</a></li></ul>\n</li><li><a href=\"#83_Python_3061\">8.3 Python常见异常类型</a></li><li><a href=\"#84_PyCharm_3074\">8.4 PyCharm程序调试</a></li><li><ul><li><a href=\"#841__3089\">8.4.1 断点</a></li><li><a href=\"#842__3094\">8.4.2 调试</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_3106\">九、类和对象</a></li><li><ul><li><a href=\"#91__3110\">9.1 两大编程思想</a></li><li><ul><li><a href=\"#911__3111\">9.1.1 面向过程</a></li><li><a href=\"#912__3114\">9.1.2 面向对象</a></li></ul>\n</li><li><a href=\"#92__3124\">9.2 类和对象</a></li><li><ul><li><a href=\"#921__3125\">9.2.1 类</a></li><li><a href=\"#922__3131\">9.2.2 对象</a></li><li><a href=\"#923__3135\">9.2.3 类的创建</a></li><li><a href=\"#924__3185\">9.2.4 对象的创建</a></li><li><a href=\"#925__3202\">9.2.5 方法调用</a></li><li><a href=\"#926__3232\">9.2.6 为对象动态绑定属性和方法</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_3281\">十、面向对象三大特征</a></li><li><ul><li><a href=\"#101_3284\">10.1封装</a></li><li><a href=\"#102_3348\">10.2继承</a></li><li><ul><li><a href=\"#1021__3401\">10.2.1 方法重写</a></li><li><a href=\"#1022_object_3455\">10.2.2 object类</a></li><li><a href=\"#1023__3490\">10.2.3 多重继承</a></li></ul>\n</li><li><a href=\"#103_3518\">10.3多态</a></li><li><a href=\"#104__3590\">10.4 类的特殊属性和方法</a></li><li><ul><li><a href=\"#1041__3592\">10.4.1 特殊属性</a></li><li><a href=\"#1042__3639\">10.4.2 特殊方法</a></li><li><ul><li><a href=\"#__len_____add____3647\">`__len__()`方法和 `__add__()` 方法</a></li><li><a href=\"#__new___3694\">`__new__`方法</a></li><li><a href=\"#__init___3730\">`__init__`方法</a></li></ul>\n</li></ul>\n</li><li><a href=\"#105__3765\">10.5 变量的赋值操作</a></li><li><a href=\"#106__3801\">10.6 对象的浅拷贝和深拷贝</a></li><li><ul><li><a href=\"#1061__3803\">10.6.1 浅拷贝</a></li><li><a href=\"#1062__3857\">10.6.2 深拷贝</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_3905\">十一、包和模块</a></li><li><ul><li><a href=\"#111_Python_3908\">11.1 Python中的模块</a></li><li><ul><li><a href=\"#1111__3909\">11.1.1 什么叫做模块</a></li><li><a href=\"#1112__3963\">11.1.2 导入模块</a></li><li><a href=\"#1113__3996\">11.1.3 导入自定义模块</a></li><li><a href=\"#1114__4027\">11.1.4 以主程序的方式运行</a></li></ul>\n</li><li><a href=\"#112_Python_4067\">11.2 Python中的包</a></li><li><a href=\"#113_Python_4137\">11.3 Python中常用的内置模块</a></li><li><ul><li><a href=\"#1131sys_4176\">11.3.1`sys`模块</a></li><li><a href=\"#1132_time_4188\">11.3.2 `time`模块</a></li><li><a href=\"#1133_os_4198\">11.3.3 `os`模块</a></li><li><a href=\"#1134_urllib_4206\">11.3.4 `urllib`模块</a></li></ul>\n</li><li><a href=\"#114__4216\">11.4 第三方模块</a></li><li><ul><li><a href=\"#1141__4217\">11.4.1 第三方模块安装</a></li><li><a href=\"#1142__4219\">11.4.2 第三方模块使用</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_4239\">十二、文件操作</a></li><li><ul><li><a href=\"#121__4242\">12.1 编码格式介绍</a></li><li><a href=\"#122__4273\">12.2 文件读写原理</a></li><li><ul><li><a href=\"#1221_IO_4275\">12.2.1 文件的读写简称IO操作</a></li><li><a href=\"#1222__4279\">12.2.2 文件读写流程</a></li><li><a href=\"#1223__4282\">12.2.3 操作原理:</a></li></ul>\n</li><li><a href=\"#123__4291\">12.3 文件读写操作</a></li><li><a href=\"#124__4329\">12.4 文件的打开开和关闭</a></li><li><ul><li><a href=\"#1241__4330\">12.4.1 文件的状态和操作过程</a></li><li><a href=\"#1242___4333\">12.4.2 文件的打开模式</a></li><li><a href=\"#1243__4403\">12.4.3 文件的关闭</a></li></ul>\n</li><li><a href=\"#125__4409\">12.5 文件对象的常用方法</a></li><li><a href=\"#126_with_4455\">12.6 `with`上下文管理</a></li><li><a href=\"#127_os_4509\">12.7 `os`模块</a></li><li><ul><li><a href=\"#1271_os_4532\">12.7.1 `os`模块操作目录相关函数</a></li><li><a href=\"#1272_ospath_4585\">12.7.2 `os.path`模块操作目录相关函数</a></li><li><a href=\"#1273_py_4637\">12.7.3 列出指定目录下的所有`.py`文件</a></li><li><a href=\"#1274__4650\">12.7.4 遍历指定目录下所有的文件以及目录</a></li><li><a href=\"#Flyme_aweihttpsaweiablogcsdnnet_4675\">`个人主页`——&gt;[@Flyme awei](https://aweia.blog.csdn.net/)</a></li><li><a href=\"#PythonPythonhttpsblogcsdnnetm0_68744965category_11957439html_4676\">`Python刷题`——&gt;《[牛客题库-Python篇](https://blog.csdn.net/m0_68744965/category_11957439.html)》</a></li><li><a href=\"#PythonPythonhttpsblogcsdnnetm0_68744965category_11877203html_4677\">`Python进阶学习`——&gt;《[Python进阶语法专栏](https://blog.csdn.net/m0_68744965/category_11877203.html)》</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_8\"></a>一、开发环境搭建</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\add5274ddb76427fb32f173f6b6b107f.png\"/></p>\n<h2><a id=\"11_Python_11\"></a>1.1 Python解释器的安装</h2>\n<ul><li><a href=\"http://t.csdn.cn/gFxDI\">Python解释器的安装</a></li></ul>\n<h2><a id=\"12_PyCharm_13\"></a>1.2 集成开发环境PyCharm安装</h2>\n<ul><li><a href=\"http://t.csdn.cn/uV2x0\">集成开发环境PyCharm安装</a></li></ul>\n<hr/>\n<h1><a id=\"_18\"></a>二、基本语法元素</h1>\n<ul><li><a href=\"http://t.csdn.cn/ZSfGH\">Python语言基本语法元素</a></li></ul>\n<h2><a id=\"21__22\"></a>2.1 程序的格式框架</h2>\n<p>  程序的格式框架，即段落格式，是<code>Python</code>语法的一部分，可以提高代码的可读性和可维护性。</p>\n<h3><a id=\"211__25\"></a>2.1.1 缩进</h3>\n<p>  Python语言采用严格的<strong>缩进</strong>来表示程序逻辑。也就是我们所说的Python程序间的包含与层次关系。一般代码不要求缩进，顶行编写且不留空白。在<code>if、while、for、def、class</code>等保留字所在完整语句后通过英文的“<code>:</code>”结尾并在之后行进行缩进，表明后续代码与紧邻无缩进语句的所属关系。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\da974d46c4c34a96afe6c3ce5b30043b.png\"/></p>\n<p>  缩进可以用<code>Tab</code>键实现，也可以用多个空格实现（<code>一般是4个空格</code>），但两者不能混用。建议采用4个空格方式书写代码。</p>\n<h3><a id=\"212__36\"></a>2.1.2 注释</h3>\n<p>  注释是代码中的辅助性文字，会被编译器或解释器略去，不被计算机执行，一般用于程序员对代码的说明。Python语言中使用“<code>#</code>”表示一行注释的开始。注释可以在一行中任意位置通过“<code>#</code>”开始，其后面的本行内容被当作注释，而之前的内容依然是Python执行程序的一部分。</p>\n<p><strong><code>注释的作用：</code></strong></p>\n<ul><li>注释一般用于在代码中标明作者和版权信息</li><li>解释代码原理和用途</li><li>通过注释单行代码辅助程序调试。</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : 1071505897@qq.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/2 13:40</span>\n\n<span class=\"token comment\"># 单行注释</span>\n\n<span class=\"token triple-quoted-string string\">'''多行注释'''</span>\n\n<span class=\"token triple-quoted-string string\">\"\"\"多行注释\"\"\"</span>\n</code></pre>\n<h3><a id=\"213__59\"></a>2.1.3 续行符</h3>\n<p>  Python程序是逐行编写的，每行代码长度并无限制，但从程序员角度，单行代码太长并不利于阅读。这个时候就可以使用续行符将单行代码分割为多行表达。</p>\n<p>  Python中的续行符为“<code>\\</code>”。续行符之后不允许再存在空格，即续行符后直接换行。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"云南的城市有{}\\n{}\\n{}\\n{}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'昆明'</span><span class=\"token punctuation\">,</span>\\\n                        <span class=\"token string\">'曲靖'</span><span class=\"token punctuation\">,</span>\\\n                        <span class=\"token string\">'大理'</span><span class=\"token punctuation\">,</span>\\\n                        <span class=\"token string\">'丽江'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<hr/>\n<h2><a id=\"22__71\"></a>2.2 语法元素的名称</h2>\n<p>  Python语言的<strong>基本单位</strong>是<strong>单词</strong>，少部分单词是Python语言规定的，被称为保留字。大部分单词是用户自己定义的，通过命名过程形成了变量或函数，用来代表数据或代码，称为标识符。</p>\n<h3><a id=\"221__73\"></a>2.2.1 变量</h3>\n<p>  变量是保存和表示数据值的一种语法元素，变量的值是可以改变的，通过赋值运算符“<code>=</code>”方式被修改。Python语言中，变量可以随时命名、随时赋值、随时使用。</p>\n<p>由三部分组成：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n标识：     id\n类型：     type\n值：       value  \n\"\"\"</span>\n</code></pre>\n<p>多次赋值后将指向新的空间</p>\n<pre><code class=\"prism language-python\">name <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>  <span class=\"token comment\"># 第一次赋值</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 标识</span>\n<span class=\"token comment\"># 2026989330544</span>\nname <span class=\"token operator\">=</span> <span class=\"token string\">'world'</span>  <span class=\"token comment\"># 第二次赋值</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 2026989317168</span>\n</code></pre>\n<h3><a id=\"222__94\"></a>2.2.2 保留字</h3>\n<p>  <font color=\"#d71345\" face=\"微软雅黑\">保留字</font>也称keyword关键字，被编程语言内部定义并保留使用的，每种程序设计语言都有一套保留字，保留字一般用来构成程序的整体框架，<code>Python3.x</code>中一共有35个保留字。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> keyword  <span class=\"token comment\"># 导入关键字模块</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>keyword<span class=\"token punctuation\">.</span>kwlist<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 调用keyword模块的kwlist方法</span>\n</code></pre>\n<p><strong>Python3.x中的35个保留字</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">and</span>\t<span class=\"token keyword\">as</span>\t<span class=\"token keyword\">assert</span>\t<span class=\"token keyword\">async</span>\t<span class=\"token keyword\">await</span>\t<span class=\"token keyword\">break</span>\t\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">continue</span>\t<span class=\"token keyword\">def</span>\t<span class=\"token keyword\">del</span>\t<span class=\"token keyword\">elif</span>\t<span class=\"token keyword\">else</span>\t\n<span class=\"token keyword\">except</span>\t<span class=\"token boolean\">False</span> <span class=\"token keyword\">finally</span>\t<span class=\"token keyword\">for</span>\t<span class=\"token keyword\">from</span> \n<span class=\"token keyword\">global</span>\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">import</span>\t<span class=\"token keyword\">in</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">lambda</span>\t<span class=\"token boolean\">None</span>\t\n<span class=\"token keyword\">nonlocal</span>\t<span class=\"token keyword\">not</span>\t<span class=\"token keyword\">or</span>\t<span class=\"token keyword\">pass</span> <span class=\"token keyword\">raise</span>\t<span class=\"token keyword\">return</span>\t\n<span class=\"token boolean\">True</span>\t<span class=\"token keyword\">try</span>\t <span class=\"token keyword\">while</span>\t <span class=\"token keyword\">with</span>\t <span class=\"token keyword\">yield</span>\n</code></pre>\n<p>  Python二级考试涉及到的保留字一共有22个。选学5个：<code>None、finally、lambda、pass、with。</code><br/> Python中的保留字也是大小写敏感的。举例：<code>True</code>为保留字，而<code>true</code>则不是保留字。</p>\n<h3><a id=\"223__117\"></a>2.2.3 标识符</h3>\n<p>  标识符可以简单的理解为一个名字，主要用来标识变量、函数、类、模块和其他对象的名称。</p>\n<p><strong>标识符的命名规则</strong></p>\n<ul><li>字母、数字、下划线</li><li>不能以数字开头</li><li>不能是Python中的保留字</li><li>只允许使用<code>ISO-Latin(ISO-8859-1)</code>字符集中的<code>A-Z</code>和<code>a-z</code></li><li>允许使用中文，但不建议</li><li>注意：标识符对大小写敏感，<code>name</code>和<code>Name</code>是两个不同的名字。</li></ul>\n<hr/>\n<h2><a id=\"23__129\"></a>2.3 数据类型</h2>\n<h3><a id=\"231__130\"></a>2.3.1 二进制与字符编码</h3>\n<p>  二进制是一套计数方法，每个位置上的数有 2 种可能（0 - 1）；二进制是计算机的执行语言，但是早在计算机出现前就存在这套计数方法，最早可追溯到古埃及。在日常生活中，我们使用的是十进制，每个位置上的数有 10 种可能（0 - 9）。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3490dd80323541b097dc1f9ebb65a400.png\"/><br/>   早期的程序员爸爸为了让计算机能够认识我，将我能够认识的符号和数字对应好，然后做成一张表叫<code>ASCII</code>表，告诉计算机某种符号你应该使用哪个整数表示,<code>A</code>使用了8个位（置）才能装得下我，在计算机中他们叫一个字节。</p>\n<p><strong>ASCII码表</strong></p>\n<table><thead><tr><th>ASCII值</th><th>控制字符</th><th>ASCII值</th><th>控制字符</th><th>ASCII值</th><th>控制字符</th><th>ASCII值</th><th>控制字符</th></tr></thead><tbody><tr><td>0</td><td>NUT</td><td>32</td><td>(space)</td><td>64</td><td>@</td><td>96</td><td>、</td></tr><tr><td>1</td><td>SOH</td><td>33</td><td>！</td><td>65</td><td>A</td><td>97</td><td>a</td></tr><tr><td>2</td><td>STX</td><td>34</td><td>”</td><td>66</td><td>B</td><td>98</td><td>b</td></tr><tr><td>3</td><td>ETX</td><td>35</td><td>#</td><td>67</td><td>C</td><td>99</td><td>c</td></tr><tr><td>4</td><td>EOT</td><td>36</td><td>$</td><td>68</td><td>D</td><td>100</td><td>d</td></tr><tr><td>5</td><td>ENQ</td><td>37</td><td>%</td><td>69</td><td>E</td><td>101</td><td>e</td></tr><tr><td>6</td><td>ACK</td><td>38</td><td>&amp;</td><td>70</td><td>F</td><td>102</td><td>f</td></tr><tr><td>7</td><td>BEL</td><td>39</td><td>,</td><td>71</td><td>G</td><td>103</td><td>g</td></tr><tr><td>8</td><td>BS</td><td>40</td><td>(</td><td>72</td><td>H</td><td>104</td><td>h</td></tr><tr><td>9</td><td>HT</td><td>41</td><td>)</td><td>73</td><td>I</td><td>105</td><td>i</td></tr><tr><td>10</td><td>LF</td><td>42</td><td>*</td><td>74</td><td>J</td><td>106</td><td>j</td></tr><tr><td>11</td><td>VT</td><td>43</td><td>+</td><td>75</td><td>K</td><td>107</td><td>k</td></tr><tr><td>12</td><td>FF</td><td>44</td><td>,</td><td>76</td><td>L</td><td>108</td><td>l</td></tr><tr><td>13</td><td>CR</td><td>45</td><td>-</td><td>77</td><td>M</td><td>109</td><td>m</td></tr><tr><td>14</td><td>SO</td><td>46</td><td>.</td><td>78</td><td>N</td><td>110</td><td>n</td></tr><tr><td>15</td><td>SI</td><td>47</td><td>/</td><td>79</td><td>O</td><td>111</td><td>o</td></tr><tr><td>16</td><td>DLE</td><td>48</td><td>0</td><td>80</td><td>P</td><td>112</td><td>p</td></tr><tr><td>17</td><td>DCI</td><td>49</td><td>1</td><td>81</td><td>Q</td><td>113</td><td>q</td></tr><tr><td>18</td><td>DC2</td><td>50</td><td>2</td><td>82</td><td>R</td><td>114</td><td>r</td></tr><tr><td>19</td><td>DC3</td><td>51</td><td>3</td><td>83</td><td>S</td><td>115</td><td>s</td></tr><tr><td>20</td><td>DC4</td><td>52</td><td>4</td><td>84</td><td>T</td><td>116</td><td>t</td></tr><tr><td>21</td><td>NAK</td><td>53</td><td>5</td><td>85</td><td>U</td><td>117</td><td>u</td></tr><tr><td>22</td><td>SYN</td><td>54</td><td>6</td><td>86</td><td>V</td><td>118</td><td>v</td></tr><tr><td>23</td><td>TB</td><td>55</td><td>7</td><td>87</td><td>W</td><td>119</td><td>w</td></tr><tr><td>24</td><td>CAN</td><td>56</td><td>8</td><td>88</td><td>X</td><td>120</td><td>x</td></tr><tr><td>25</td><td>EM</td><td>57</td><td>9</td><td>89</td><td>Y</td><td>121</td><td>y</td></tr><tr><td>26</td><td>SUB</td><td>58</td><td>:</td><td>90</td><td>Z</td><td>122</td><td>z</td></tr><tr><td>27</td><td>ESC</td><td>59</td><td>;</td><td>91</td><td>[</td><td>123</td><td>{\n    </td></tr><tr><td>28</td><td>FS</td><td>60</td><td>&lt;</td><td>92</td><td>/</td><td>124</td><td>|</td></tr><tr><td>29</td><td>GS</td><td>61</td><td>=</td><td>93</td><td>]</td><td>125</td><td>}</td></tr><tr><td>30</td><td>RS</td><td>62</td><td>&gt;</td><td>94</td><td>^</td><td>126</td><td>~</td></tr><tr><td>31</td><td>US</td><td>63</td><td>?</td><td>95</td><td>—</td><td>127</td><td>DEL</td></tr></tbody></table>\n<p>ASCII码表字符解释</p>\n<table><thead><tr><th>NUL 空</th><th>VT 垂直制表</th><th>SYN 空转同步</th></tr></thead><tbody><tr><td>SOH 标题开始</td><td>FF 换页键</td><td>ETB 信息组传送结束</td></tr><tr><td>STX 正文开始</td><td>CR 回车</td><td>CAN 作废</td></tr><tr><td>ETX 正文结束</td><td>SO 移位输出</td><td>EM 纸尽</td></tr><tr><td>EOY 传输结束</td><td>SI 移位输入</td><td>SUB 代替</td></tr><tr><td>ENQ 请求</td><td>DLE 空格</td><td>ESC 换码</td></tr><tr><td>ACK 收到通知</td><td>DC1 设备控制1</td><td>FS 文字分隔符</td></tr><tr><td>BEL 报警</td><td>DC2 设备控制2</td><td>GS 组分隔符</td></tr><tr><td>BS 退一格</td><td>DC3 设备控制3</td><td>RS 记录分隔符</td></tr><tr><td>HT 水平制表符</td><td>DC4 设备控制4</td><td>US 单元分隔符</td></tr><tr><td>LF 换行</td><td>NAK 拒绝</td><td>DEL 删除</td></tr></tbody></table>\n<h3><a id=\"232__142\"></a>2.3.2 数值类型</h3>\n<p>Python提供的3种数值类型：<br/> <font color=\"#d71345\" face=\"微软雅黑\">整数类型</font>：与数学中的整数一致，包含正、负、0。一个整数有二进制、八进制、十进制、十六进制4种表示方式。</p>\n<table><thead><tr><th>进制</th><th>基本数</th><th>逢几进一</th><th>表示形式</th></tr></thead><tbody><tr><td>十进制</td><td>0,1,2,3,4,5,6,7,8,9</td><td>10</td><td>520</td></tr><tr><td>二进制</td><td>0,1</td><td>2</td><td>0b11010</td></tr><tr><td>八进制</td><td>0,1,2,3,4,5,6,7</td><td>8</td><td>0o520</td></tr><tr><td>十六进制</td><td>0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F</td><td>16</td><td>0xAF12546</td></tr></tbody></table>\n<p><font color=\"#d71345\" face=\"微软雅黑\">浮点数类型</font>：与数学中的小数一致，没有取值范围限制，可正、可负。有两种表示形式，一种是小数点的形式，另外一种是科学计数法。浮点数只有十进制形式。</p>\n<p><font color=\"#d71345\" face=\"微软雅黑\">复数</font>：与数学中的复数一致，采用<code>a+bj</code>的形式表示，存在实部和虚部。</p>\n<h3><a id=\"233__158\"></a>2.3.3 字符串类型</h3>\n<p>  计算机经常处理文本信息，文本信息在程序中使用字符串类型表示。在Python中<strong>使用单引号或双引号括起来的一个或多个字符来表</strong>示。单引号和双引号的作用相同。</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 字符串类型   被称为不可变的字符序列</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我用python'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我用python\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token triple-quoted-string string\">'''我用python'''</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我用python'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我用python\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token triple-quoted-string string\">'''我用python'''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>字符序列有两种序号体系：</strong><br/> <strong>正向递增序号</strong>： 有效范围为[0,N-1]，其中N为字符串中字符的个数。最左侧的字符序号为0，依次向右递增，最右侧字符序号为N-1。</p>\n<p><strong>反向递减序号</strong>：有效范围为[-1,-N]，其中N为字符串中字符的个数。最右侧的字符序与为-1，依次向左递减，最左侧的字符序号为-N。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bf47256c606c4e25bbc78e21f9ef6103.png\"/><br/> 两种索引可以同时使用，以下代码为对单个字符进行的索引。</p>\n<pre><code class=\"prism language-python\">s <span class=\"token operator\">=</span> <span class=\"token string\">'hello word'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># h</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># h</span>\n</code></pre>\n<p>还可以采用<code>[N:M]</code>格式获取字符串的子串，这种操作被称为切片操作。<code>[N:M]</code>获取字符串中从<code>N</code>到<code>M</code>（但不包含<code>M</code>）的连续的子字符串。<code>N</code>和<code>M</code>都表示的是索引序号，可以混合使用正向递增序号和反向递减序号。</p>\n<pre><code class=\"prism language-python\">s <span class=\"token operator\">=</span> <span class=\"token string\">'hello word'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># hello</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># hello</span>\n</code></pre>\n<p>通过Python默认提供的len()函数获取字符串的长度，一个中文字符和一个英文字符的长度都记为1。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 10</span>\n</code></pre>\n<h2><a id=\"24__201\"></a>2.4 程序的语句元素</h2>\n<h3><a id=\"241__202\"></a>2.4.1 表达式</h3>\n<p>产生或计算新数据值的代码片段称为表达式。类似于数学中的公式，一般由数据和操作符构成。</p>\n<h3><a id=\"242__205\"></a>2.4.2 赋值语句</h3>\n<p>对变量进行赋值的一行代码被称为赋值语句。在Python中使用一个“<code>=</code>”表示“赋值”，即将等号右侧表达式计算后的结果值赋给左侧的变量。</p>\n<p><strong>基本赋值语句语法</strong>：<br/> <code>变量 = 表达式</code></p>\n<p>同步赋值语句就是同时给多个变量进行赋值。<br/> <strong>同步赋值语句语法：</strong></p>\n<p><code>变量1,变量2,......变量N = 表达式1,表达式2,......,表达式N</code></p>\n<p>同步赋值语句应用最多的就是互换变量的值，即交换两个变量的值。</p>\n<h3><a id=\"243__219\"></a>2.4.3 引用</h3>\n<p>Python程序会经常使用到当前程序之外已有的功能代码，这个过程叫引用。</p>\n<p>Python语言中使用<code>import</code>这个保留字引用当前程序以外的功能库。<br/> <code>import &lt;功能库名称&gt;</code><br/> 引用功能库之后使用 <code>功能库.函数名()</code>的方式调用基本功能，这种方式简称为“<code>A.B()</code>”方式。</p>\n<h3><a id=\"244__227\"></a>2.4.4 其他语句</h3>\n<p>除了赋值语句之外，Python还有分支语句和循环语句。先简单介绍一下使用，后面后详细讲解。</p>\n<p><strong>分支语句</strong>：根据判断条件选择程序执行路径。一般包含单分支结构、双分支结构和多分支结构。<br/> <font color=\"#d71345\" face=\"微软雅黑\">单分支语法结构</font>：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">if</span>   条件<span class=\"token punctuation\">:</span>\n   语句块\n</code></pre>\n<p>任何能够产生True或False的语句都可以作为条件，当条件为True时，则执行语句块中的内容。</p>\n<p><font color=\"#d71345\" face=\"微软雅黑\">双分支语法结构</font>：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">if</span>   条件：\n     语句块<span class=\"token number\">1</span>\n <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n     语句块<span class=\"token number\">2</span>\n</code></pre>\n<p>当条件为<code>True</code>时，执行语句块1，当条件为<code>False</code>时，执行语句块2。其中<code>if...else</code> 都是保留字。</p>\n<p><strong>循环结</strong>构与分支结构一样都是程序控制语句，它的作用是根据判断条件确定一个程序是否再执行一次或者多次。</p>\n<p><font color=\"#d71345\" face=\"微软雅黑\">条件循环的语法结构</font>：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">while</span>  条件<span class=\"token punctuation\">:</span>\n     语句块<span class=\"token number\">1</span>\n语句块<span class=\"token number\">2</span>\n</code></pre>\n<p>当条件为<code>True</code>时，执行语句块1，然后再次判断条件，当条件为<code>False</code>时，退出循环，执行语句块2。</p>\n<hr/>\n<h2><a id=\"25__267\"></a>2.5 基本输入输出函数</h2>\n<h3><a id=\"251_input__268\"></a>2.5.1 input( )函数</h3>\n<p>  <code>input()</code>函数是从控制台获得用户的一行输入，无论用户输入什么内容，<code>input()</code>函数都以字符串类型返回。<code>input()</code>函数可以包含一些提示性文字，用来提示用户。</p>\n<p><strong>input语法格式：</strong><br/> <code>变量=input('提示性文字')</code><br/>   无论用户输入的是数字还是字符，<code>input()</code>函数统一按照字符串类型输出，为了后续能够操作用户输入的信息，需要将输入指定一个变量进行存储。</p>\n<p>  <code>input()</code>函数的提示性文字不是必须的，可写可不写。</p>\n<h3><a id=\"252_eval__278\"></a>2.5.2 eval( )函数</h3>\n<p>  <code>eval(s)</code>函数将去掉字符串<code>s</code>最外侧的引号，并按照Python语句方式执行去掉引号后的字符内容。</p>\n<p><strong>eavl语法格式：</strong><br/> <code>变量 = eval(字符串)</code></p>\n<p>变量用来保存对字符串内存进行Python运算的结果。</p>\n<p>  <code>eval()</code>函数去掉了字符串’<code>1.2</code>’最外侧的引号，结果赋值给<code>a</code>，所以<code>a</code>的类型为<code>float</code>类型。<code>eval()</code>函数去掉了字符串<code>’1.2+3.4’</code>最外侧的引号，对其内容当作Python语句进行运算，运算的结果为<code>4.6</code>，保存到变量a中，所以a的类型是<code>float</code>类型。</p>\n<p>  当<code>eval()</code>函数处理字符串’<code>python</code>’时，字符串去掉了两边的引号，Python语句将其解释为一个变量，由于这个变量在之前别有定义，因此解释器报错。如果定义变量<code>python</code>并赋值为<code>123</code>，再运行这个语句时就没有问题，如果输出为<code>123</code>。</p>\n<p><code>eval()</code>函数经常和<code>input()</code>函数一起使用，用来获取用户输入的数字。</p>\n<p><strong><code>eval()</code>与<code>input()</code>函数一起使用的语法：</strong><br/> <code>变量=eval(input(提示性文字))</code></p>\n<p>  用户输入的数字、包括小数和负数，<code>input()</code>解析为字符串，再由<code>eval()</code>去掉字符串引号，将被直接解析为数字保存到变量中。</p>\n<h3><a id=\"253_print_299\"></a>2.5.3 print()函数</h3>\n<p><code>print()</code>函数用于输出运算结果。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> sep<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">file</span><span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># known special case of print</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n    \n    Prints the values to a stream, or to sys.stdout by default.\n    Optional keyword arguments:\n    file:  a file-like object (stream); defaults to the current sys.stdout.\n    sep:   string inserted between values, default a space.\n    end:   string appended after the last value, default a newline.\n    flush: whether to forcibly flush the stream.\n    \"\"\"</span>\n    <span class=\"token keyword\">pass</span>\n\n</code></pre>\n<p><code>sep=' '</code>分隔符，默认为一个空格<br/> <code>end='\\n'</code>结束符，默认以换行结束</p>\n<p><code>print()</code>函数的三种用法：</p>\n<ul><li>仅用于输出字符串或单个变量</li></ul>\n<p><code>print(待输出字符串或变量)</code></p>\n<p>对于字符串，<code>print()</code>函数输出后将出掉两侧引号，对于其它类型，则会直接输出。</p>\n<p>当<code>print()</code>输出字符串表示时，字符串统一使用单引号表达。在<code>[]</code>中的字符串都使用了双引号，但是在被<code>print()</code>函数打印输出时，输出结果都采用了单引号。</p>\n<ul><li>用于输出一个或多个变量 ，输出后的各变量之间用一个空格分隔。</li></ul>\n<p><code>print(变量1,变量2,......,变量N)</code></p>\n<ul><li>用于混合输出字符串与变量的值，其中输出字符串模板中使用<code>{}</code>表示一个槽位，每个槽位对应<code>.format()</code>中的一个变量。</li></ul>\n<p><code>print(输出字符串模板.format(变量1,变量2,......,变量N))</code></p>\n<p><code>print()</code>函数输出的输出内容</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">'''可以输出数字   int   '''</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2</span>\n\n<span class=\"token triple-quoted-string string\">'''可以输出字符串   str   '''</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># hello</span>\n\n<span class=\"token triple-quoted-string string\">'''输出含有运算符的表达式  '''</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 5</span>\n</code></pre>\n<p><code>print()</code>函数输出的目的地</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">'''将内容输出到显示器'''</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello,world'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># hello,world</span>\n\n<span class=\"token triple-quoted-string string\">'''将内容输出到文件'''</span>\n<span class=\"token comment\"># 注意：所指定的盘符存在；使用file = fp;</span>\nfp <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'E:\\\\text.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello,world!'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">file</span><span class=\"token operator\">=</span>fp<span class=\"token punctuation\">)</span>\nfp<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>‘整数{}和整数{}的差是：<code>{}</code>’是输出字符串模板，也就是混合字符串输出的样式，大括号<code>{}</code>表示一个槽位，括号中的内容由后面紧跟着的<code>format()</code>方法中的参数按顺序填充。</p>\n<h2><a id=\"26_370\"></a>2.6转义字符与原字符</h2>\n<h3><a id=\"261__371\"></a>2.6.1 转义字符</h3>\n<p><strong><code>就是反斜杠+想要实现的转义功能首字母。</code></strong></p>\n<p>为什么需要转义字符?<br/> 当字符串中包含反斜杠、单引号和双引号等有特殊用途的字符时，必须使用反斜杠对这些字符进行转义（转换一个含义）。</p>\n<ul><li>反斜杠 :<code>\\\\</code></li><li>单引号:<code>\\'</code></li><li>双引号: <code>\\“</code></li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\\\'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># \\</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\''</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># '</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\\"'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># \"</span>\n</code></pre>\n<p>当字符串中包含换行、回车，水平制表符或退格等无法直接表示的特殊字符时，也可以使用转义字符当字符串中包含换行、回车，水平制表符或退格等无法直接表示的特殊字符时，也可以使用转义字符。</p>\n<ul><li>换行:<code>\\n</code></li><li>回车:<code>\\r</code></li><li>水平制表符 : <code>\\t</code></li><li>退格 :<code>\\b</code></li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 回车\\r</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello\\rhelloworld'</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 将hello覆盖</span>\n\n<span class=\"token comment\"># 换行\\n</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello\\nworld'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 退格\\b</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'helloo\\bworld'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 水平制表\\t</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello\\tworld\\t你好\\t好'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"262__403\"></a>2.6.2 原字符</h3>\n<p>原字符：不希望字符串中的转义字符起作用，就使用原字符，就是在字符创之前加上</p>\n<p>注意事项，最后一个字符不能是反斜线</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 原字符：不希望字符串中的转义字符起作用，就使用原字符，就是在字符创之前加上 r 或 R</span>\n<span class=\"token comment\"># 注意事项，最后一个字符不能是反斜线</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'hello \\n word'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># hello \\n word</span>\n</code></pre>\n<hr/>\n<h1><a id=\"_415\"></a>三、运算符</h1>\n<ul><li><a href=\"http://t.csdn.cn/Edh8D\">Python的运算符</a></li></ul>\n<h2><a id=\"31__419\"></a>3.1 数值运算操作符</h2>\n<p>Python提供了9个基本的数值运算操作符。</p>\n<table><thead><tr><th>操作符及运算</th><th>描述</th></tr></thead><tbody><tr><td>x + y</td><td>x 与 y 之和</td></tr><tr><td>x - y</td><td>x 与 y 之差</td></tr><tr><td>x * y</td><td>x 与 y 之积</td></tr><tr><td>x / y</td><td>x 与 y 之商，产生结果为浮点数</td></tr><tr><td>x // y</td><td>x 与 y 之整数商</td></tr><tr><td>x % y</td><td>x 与 y 之余商，也称之为模运算</td></tr><tr><td>- x</td><td>x 的负数</td></tr><tr><td>+ x</td><td>x 本身</td></tr><tr><td>x**y</td><td>x 的 y 次幂</td></tr></tbody></table>\n<h2><a id=\"32__433\"></a>3.2 数值运算函数</h2>\n<p>所谓函数表现为对参数的特定运算。</p>\n<p>Python解释器自身提供了一些预先编写好的函数称为<code>内置函数</code>，其中与数值运算相关的函数如下：</p>\n<table><thead><tr><th>序号</th><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><code>abs(x)</code></td><td><code>x</code>的绝对值</td></tr><tr><td>2</td><td><code>divmod(x, y)</code></td><td><code>(x//y, x%y)</code>输出元组形式的商与余数</td></tr><tr><td>3</td><td><code>pow(x, y)</code> 或 <code>pow(x, y, z)</code></td><td><code>x**y或(x**y)%z</code>,幂运算</td></tr><tr><td>4</td><td><code>round(x)</code> 或 <code>round(x, d)</code></td><td>对<code>x</code>四舍五入保留<code>d</code>位小数,<code>d</code>省去则为四舍五入的整数</td></tr><tr><td>5</td><td><code>max(x1, x2,...,xn)</code></td><td><code>n</code>个数中的最大值</td></tr><tr><td>6</td><td><code>min(x1, x2,...,xn)</code></td><td><code>n</code>个数中的最小值</td></tr></tbody></table>\n<h2><a id=\"33__446\"></a>3.3 算数运算符</h2>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">'''\n算数运算符：\n    加 +\n    减 -\n    乘 *\n    除 /\n    整除 //\n    取余 %\n    幂 **\n'''</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">9</span> <span class=\"token operator\">//</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span> <span class=\"token operator\">//</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">9</span> <span class=\"token operator\">//</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># -3 一正一负整除公式，商取下整</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span> <span class=\"token operator\">//</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># -3</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span> <span class=\"token operator\">%</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  \n<span class=\"token comment\"># -3  公式  余数=被除数-除数*商  9-（-4）*（-3）= -3</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">9</span> <span class=\"token operator\">%</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  \n<span class=\"token comment\"># 3      -9 - 4*（-3）= 3</span>\n\n<span class=\"token comment\"># 规律:规律就是  取余数是负数 结果就是负数</span>\n</code></pre>\n<h2><a id=\"34__472\"></a>3.4 赋值运算符</h2>\n<p>赋值运算符：运算顺序<code>从右到左</code></p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">'''\n赋值运算符:运算顺序从右到左\n=   a=10\n+=  a+=b    a=a+b\n-=  a-=b    a=a-b\n*=  a*b     a=ab\n/=  a/=b    a=a/b\n//= a//=b   a=a//b\n%   a%=b    a=a%b\n'''</span>\n</code></pre>\n<p>链式赋值,<code>id</code>相同</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">'''链式赋值,id相同'''</span>\na <span class=\"token operator\">=</span> b <span class=\"token operator\">=</span> c <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-------------------------'</span><span class=\"token punctuation\">)</span>\n\n\noutput<span class=\"token punctuation\">:</span>\n<span class=\"token number\">20</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'int'</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">140725395003648</span>\n<span class=\"token number\">20</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'int'</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">140725395003648</span>\n<span class=\"token number\">20</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'int'</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">140725395003648</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n</code></pre>\n<p>参数赋值</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">'''参数赋值'''</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\na <span class=\"token operator\">+=</span> <span class=\"token number\">30</span>  <span class=\"token comment\"># a = a+30</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 50</span>\n</code></pre>\n<p>系列解包赋值</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">'''解包赋值'''</span>\na<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'---------交换两个变量的值-----------'</span><span class=\"token punctuation\">)</span>\na<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\na<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">,</span> a\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n\n\noutput<span class=\"token punctuation\">:</span>\n<span class=\"token number\">10</span> <span class=\"token number\">140725395003328</span>\n<span class=\"token number\">20</span> <span class=\"token number\">140725395003648</span>\n<span class=\"token number\">30</span> <span class=\"token number\">140725395003968</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>交换两个变量的值<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n<span class=\"token number\">10</span> <span class=\"token number\">20</span>\n<span class=\"token number\">20</span> <span class=\"token number\">10</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9ceaa2ab24f24e2bb7eadcabcd5ccc02.png\"/></p>\n<h2><a id=\"35__534\"></a>3.5 布尔运算符</h2>\n<p>布尔类型 <strong><code>用来表示真或假</code></strong></p>\n<ul><li><code>True</code> 表示真</li><li><code>False</code>表示假</li><li>布尔值可以转化为整数</li><li>\n<ul><li><code>True:1</code></li></ul> </li><li>\n<ul><li><code>False:0</code></li></ul> </li></ul>\n<p>Python中一切皆对象，所有对象都有一个布尔值，获取对象布尔值使用内置函数<code>bool()</code></p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># Python中一切皆对象，所有对象都有一个布尔值</span>\n<span class=\"token comment\"># 获取对象布尔值使用内置函数bool()</span>\n<span class=\"token triple-quoted-string string\">'''\n以下对象布尔值为False：\n    False\n    数值0\n    None\n    空字符串 ''\n    空列表 []\n    空字典 {}\n    空元组 ()\n    空集合 {}\n'''</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 空列表</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 空字典</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 空元组</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 空集合</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-------------以上对象bool值均为False------------'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"36__575\"></a>3.6 比较运算符</h2>\n<p>比较运算符: 比较的值为<strong>True</strong> 或 <strong>False</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">''''\n   &gt;\t大于\n   &lt;\t小于\n  ==  \t等于  比较的是值：value\n  !=  \t不等于\n  &gt;=    大于等于\n  &lt;=    小于等于 \n \n 对象id的比较 is   is not \n '''</span>\n</code></pre>\n<h2><a id=\"37____593\"></a>3.7 位运算 &amp; |</h2>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">'''\n位运算符:\n\n位与 &amp; 对应位数都是1，结果才为1，否则为0\n\n位或 | 对应位数都是0，结果才为0\n\n左移运算符   &lt;&lt;  高位溢出，低位补0\n右移运算符   &gt;&gt;  低位溢出，高位补0 \n'''</span>\n</code></pre>\n<h2><a id=\"38_and__or__not_608\"></a>3.8 逻辑运算符：and or not</h2>\n<p><code>True</code> 和 <code>False</code> 二元数值构成了基本的真假逻辑，因此诞生了逻辑运算。</p>\n<table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>and</td><td>x and y，与操作</td></tr><tr><td>or</td><td>x or y，或操作</td></tr><tr><td>not</td><td>not x，非操作</td></tr></tbody></table>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">'''\nand 且      全真为真\nor  或      有真则真\nnot 非      对bool类型操作数取反  \n      \nin  在...里       \nnot in 不在...里\n'''</span>\n</code></pre>\n<h2><a id=\"39__626\"></a>3.9 运算符的优先级</h2>\n<pre><code class=\"prism language-python\">指数运算运算（最高优先级）      <span class=\"token operator\">**</span>\n算数运算       <span class=\"token operator\">*</span>       <span class=\"token operator\">/</span>       <span class=\"token operator\">//</span>     <span class=\"token operator\">%</span>       <span class=\"token operator\">+</span>     <span class=\"token operator\">-</span>\n位运算         <span class=\"token operator\">&lt;&lt;</span>      <span class=\"token operator\">&gt;&gt;</span>      <span class=\"token operator\">&amp;</span>     <span class=\"token operator\">|</span>\n比较运算符      <span class=\"token operator\">&gt;</span>     <span class=\"token operator\">&lt;</span>       <span class=\"token operator\">&gt;=</span>      <span class=\"token operator\">&lt;=</span>\n等于运算符       <span class=\"token operator\">==</span>      <span class=\"token operator\">!=</span>\n身份运算符       <span class=\"token keyword\">is</span>      <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span>\n成员运算符       <span class=\"token keyword\">in</span>      <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span>\n逻辑运算符       <span class=\"token keyword\">and</span>     <span class=\"token keyword\">or</span>     <span class=\"token keyword\">not</span>\n</code></pre>\n<hr/>\n<h1><a id=\"_644\"></a>四、流程控制</h1>\n<ul><li><a href=\"http://t.csdn.cn/vDzaE\">Python流程控制</a></li></ul>\n<h2><a id=\"41__647\"></a>4.1 顺序结构</h2>\n<p>程序按照线性顺序依次执行的一种运行方式。</p>\n<p>例：把大象装冰箱分几步：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 把大象装冰箱分几步</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--------程序开始--------'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1.把冰箱门打开'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2.把大象装进冰箱'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3.关上冰箱门'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--------程序结束--------'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"42__660\"></a>4.2 分支结构（选择结构）</h2>\n<p>  程序根据<strong>判断条件的布尔值</strong>选择性地执行部分代码明确的让计算机知道<strong>在什么条件下，该去做什么</strong>。</p>\n<h3><a id=\"421__if_663\"></a>4.2.1 单分支 if</h3>\n<p>中文语义：<code>如果......就......</code></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\43a033811a91476b8e1c802627128819.png\"/><br/> <strong><code>语法结构：</code></strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">if</span> 条件表达式<span class=\"token punctuation\">:</span>\n    条件执行体\n</code></pre>\n<p><code>if</code>条件语句：判断一次，条件为<code>True</code>时执行一次</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># if条件语句 判断一次 条件为True时执行一次</span>\n\nmoney <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\ns <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入取款金额:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> s <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">:</span>\n    money <span class=\"token operator\">=</span> money <span class=\"token operator\">-</span> s\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'取款成功，余额为'</span><span class=\"token punctuation\">,</span> money<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"422__ifelse_684\"></a>4.2.2 双分支 if…else</h3>\n<p>中文语义：<code>如果......不满足......就......</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fefdac90a5d042459b3e3f7ddd75bc9e.png\"/><br/> <strong><code>语法结构：</code></strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">if</span> 条件表达式：\n  条件执行体\n<span class=\"token keyword\">else</span>：\n  条件执行体<span class=\"token number\">2</span>\n</code></pre>\n<p>双分支结构<code>if...else</code>,二选一执行</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">'''双分支结构if...else,二选一执行'''</span>\n\n<span class=\"token comment\"># 从键盘输入一个整数，编写程序让计算机判断是奇数还是偶数</span>\nnum <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入一个整数:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> num <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token string\">'是偶数'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token string\">'是奇数'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"423__ifelifelse_707\"></a>4.2.3 多分支 if…elif…else</h3>\n<p>中文语义：<code>如果......就......如果......不满足......就......</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4da10e9ecd05444c9bd338c57d55a90a.png\"/></p>\n<p><strong><code>语法结构：</code></strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">if</span> 条件表达式：\n   条件执行体\n<span class=\"token keyword\">elif</span>   条件表达式：\n   条件执行体\n<span class=\"token keyword\">elif</span>   条件表达式：\n  条件执行体\n<span class=\"token keyword\">elif</span>   条件表达式：\n  条件执行体\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n  条件执行体\n</code></pre>\n<blockquote>\n<p>例：<br/> 从键盘录入一个整数成绩：<br/> 90-100 ： A<br/> 80-89 ： B<br/> 70-79 ： C<br/> 60-69 ： D<br/> 0-59 ：E<br/> 小于0或大于100 不及格</p>\n</blockquote>\n<p>代码：</p>\n<pre><code class=\"prism language-python\">num <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'从键盘输入一个成绩:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token number\">90</span> <span class=\"token operator\">&lt;=</span> num <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> <span class=\"token number\">80</span> <span class=\"token operator\">&lt;=</span> num <span class=\"token operator\">&lt;=</span> <span class=\"token number\">89</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> <span class=\"token number\">70</span> <span class=\"token operator\">&lt;=</span> num <span class=\"token operator\">&lt;=</span> <span class=\"token number\">79</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> <span class=\"token number\">60</span> <span class=\"token operator\">&lt;=</span> num <span class=\"token operator\">&lt;=</span> <span class=\"token number\">69</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> num <span class=\"token operator\">&lt;=</span> <span class=\"token number\">59</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不及格'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"424_if_749\"></a>4.2.4 嵌套<code>if</code>的使用</h3>\n<p><strong><code>语法结构</code></strong>：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">if</span> 条件表达式<span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> 内层条件表达式：\n        内层执行体<span class=\"token number\">1</span>\n    <span class=\"token keyword\">else</span>：\n    内层执行体<span class=\"token number\">2</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    条件执行体\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0fcf273e8f9a49fda933025f81cbac90.png\"/><br/> 例：商场消费</p>\n<pre><code class=\"prism language-python\">会员：\n    <span class=\"token operator\">&gt;=</span><span class=\"token number\">200</span>    <span class=\"token number\">8</span>折\n    <span class=\"token operator\">&gt;=</span><span class=\"token number\">100</span>    <span class=\"token number\">9</span>折\n    <span class=\"token operator\">&lt;</span><span class=\"token number\">100</span>     不打折\n非会员<span class=\"token punctuation\">:</span> \n    <span class=\"token operator\">&gt;=</span><span class=\"token number\">200</span>    <span class=\"token number\">9.5</span>折\n    <span class=\"token operator\">&lt;</span><span class=\"token number\">100</span>     不打折\n</code></pre>\n<p>代码：</p>\n<pre><code class=\"prism language-python\">answer <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'您是会员吗?y/n'</span><span class=\"token punctuation\">)</span>\nmoney <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入您的购物金额:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 外层判断是否是会员</span>\n<span class=\"token keyword\">if</span> answer <span class=\"token operator\">==</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 会员</span>\n    <span class=\"token keyword\">if</span> money <span class=\"token operator\">&gt;=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'打8折,付款金额为:'</span><span class=\"token punctuation\">,</span> money<span class=\"token operator\">*</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> money <span class=\"token operator\">&gt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'打9折,付款金额为:'</span><span class=\"token punctuation\">,</span> money<span class=\"token operator\">*</span><span class=\"token number\">0.9</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不打折，付款金额为:'</span><span class=\"token punctuation\">,</span> money<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 非会员</span>\n    <span class=\"token keyword\">if</span> money <span class=\"token operator\">&gt;=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'打9.5折,付款金额为:'</span><span class=\"token punctuation\">,</span> money<span class=\"token operator\">*</span><span class=\"token number\">0.95</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不打折，付款金额为:'</span><span class=\"token punctuation\">,</span> money<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"425__792\"></a>4.2.5 三元表达式</h3>\n<p><strong>语法结构</strong>：<code>x if 判断条件 else y</code></p>\n<p>运算规则：如果判断条件的布尔值为<code>True</code>，条件表达式的返回值为<code>x</code>，否则条件表达式的返回值为<code>False</code></p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 条件表达式   x if 判断条件 else y</span>\na <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入第一个整数:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入第二个整数:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''if a &gt;= b:\n    print(a, '&gt;=', b)\nelse:\n    print(a, '&lt;', b)'''</span>\n\n\n<span class=\"token comment\"># 条件表达式</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'小于'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> a <span class=\"token operator\">&lt;</span> b <span class=\"token keyword\">else</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'大于'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"426_pass_811\"></a>4.2.6 pass语句</h3>\n<p><code>pass</code>语句什么都不做，只是一个占位符，用在语法上需要语句的地方</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n</code></pre>\n<p>什么时候使用<code>pass</code>语句:先搭建语法结构，还没想好代码怎么写的时候 。</p>\n<p><code>pas</code>s语句与哪些语句一起使用：</p>\n<ol><li><code>if</code>语句的条件执行体</li><li><code>for-in</code>语句的循环体</li><li>定义函数<code>def</code>时的函数体</li></ol>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\n<span class=\"token keyword\">if</span> a <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n</code></pre>\n<h2><a id=\"43_841\"></a>4.3循环结构</h2>\n<p>  反复做同一件事情的情况，称为循环，<code>Python</code>语言的循环结构包括两种：遍<strong>历循环</strong>和<strong>无限循环</strong>。遍历循环使用保留字<code>forin</code>依次提取遍历结构各元素进行处理；无限循环使用保留字<code>while</code>根据判断条件执行程序<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\85256731d26a4d189ea04cbc814a8214.png\"/></p>\n<h3><a id=\"431_range_844\"></a>4.3.1 range()函数的使用</h3>\n<p><code>range()</code>:用于生成一个整数序列</p>\n<p>创建<code>range</code>对象的三种方式<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7b5b65f2033e43cc9ed31ed7544a6207.png\"/><br/> 代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 第一种创建方式  range(stop)</span>\n<span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># range(0,10) 返回值是一个迭代器对象 默认从0开始，默认步长为1</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 用于查看range对象中的整数序列 list--&gt;列表</span>\n\n<span class=\"token comment\"># 第二种创建方式 range(start, stop)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 第三种创建方式 range(start,stop,step)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p><code>range()</code>函数的返回值是一个迭代器对象</p>\n<p><code>range</code>类型的优点 :不管<code>range</code>对象表示的整数序列有多长，所有<code>range</code>对象占用的内存空间都是相同的，因为仅仅需要存储start,stop和step，只有当用到<code>range</code>对象时，才会去计算序列中的相关元素</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">'''内置函数 range(start(开始)未指定从0开始, stop(结束), step(步长)未指定步长为1)'''</span>\nr <span class=\"token operator\">=</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 列表 [1, 3, 5, 7, 9]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 元组 (1, 3, 5, 7, 9)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 字典 {1, 3, 5, 7, 9}</span>\n\n</code></pre>\n<p><code>in</code>与<code>not in</code> 判断整数序列中是否存在（不存在）指定的整数</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">'''判断指定整数在序列中是否存在 in， not in'''</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token keyword\">in</span> r<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token keyword\">in</span> r<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> r<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> r<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n\n<span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"432_forin_891\"></a>4.3.2 遍历循环for-in</h3>\n<p><strong><code>for-in</code>循环</strong></p>\n<ul><li><code>in</code>表达从（字符串、序列等）中依次取值，又称为遍历</li><li><code>for-in</code>遍历的对象必须是<strong>可迭代对象</strong></li></ul>\n<p><strong><code>for-in</code>的语法结构</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">for</span>  自定义的变量  <span class=\"token keyword\">in</span> 可迭代对象<span class=\"token punctuation\">:</span>\n      循环体\n</code></pre>\n<p><strong><code>for-in</code>的执行图</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\43ad444a91ac4f36a5e7a4fa0bb0c7e0.png\"/></p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># for in循环</span>\n<span class=\"token comment\"># in 表达是依次 从 （字符串，序列等） 中依次取值，又称遍历</span>\n<span class=\"token comment\"># for in遍历对象必须是可迭代对象</span>\n\n<span class=\"token triple-quoted-string string\">'''for in 语法结构'''</span>\n<span class=\"token comment\"># for 自定义变量 in 可迭代对象:</span>\n<span class=\"token comment\">#    循环体</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 在循环体中如果不需要使用到自定义变量，可将自定义变量写为下划线('_')</span>\n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>   <span class=\"token comment\"># 3表示次数</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>使用<code>for</code>循环 计算1-100之间的偶数和</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 使用for循环 计算1-100之间的偶数和</span>\n<span class=\"token builtin\">sum</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">101</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> item <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">sum</span> <span class=\"token operator\">+=</span> item\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1-100之间的偶数和为:'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p><strong>输出100-999之间的水仙花数</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">'''输出100-999之间的水仙花数  这个数的个位上的三次方 + 十位上的三次方 + 百位上的三次方  = 这个数'''</span>\n<span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    ge <span class=\"token operator\">=</span> item <span class=\"token operator\">%</span> <span class=\"token number\">10</span>\n    shi <span class=\"token operator\">=</span> item <span class=\"token operator\">%</span> <span class=\"token number\">100</span> <span class=\"token operator\">//</span> <span class=\"token number\">10</span>  <span class=\"token comment\"># item//10%10</span>\n    bai <span class=\"token operator\">=</span> item <span class=\"token operator\">//</span> <span class=\"token number\">100</span>\n    <span class=\"token keyword\">if</span> item <span class=\"token operator\">==</span> ge<span class=\"token operator\">**</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>shi<span class=\"token operator\">**</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>bai<span class=\"token operator\">**</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"433while_945\"></a>4.3.3无限循环while</h3>\n<p><strong><code>语法结构</code></strong>：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">while</span>  条件表达式<span class=\"token punctuation\">:</span>\n\t条件执行体<span class=\"token punctuation\">(</span>循环体<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>四步循环法:</strong></p>\n<ol><li>初始化变量</li><li>条件判断</li><li>条件执行体（循环体）</li><li>改变变量</li><li>打印输出</li></ol>\n<p><strong>计算0-4之间的累加和</strong></p>\n<pre><code class=\"prism language-python\">a <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># 1.初始化变量</span>\ns <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">while</span> a <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 2.条件判断</span>\n    s <span class=\"token operator\">+=</span> a  <span class=\"token comment\"># 3.条件执行体</span>\n    a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>  <span class=\"token comment\"># 4.改变变量</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 5.打印输出</span>\n</code></pre>\n<p><strong>选择结构的<code>if</code>与循环结构<code>while</code>的区别</strong></p>\n<ul><li><code>If</code>是判断一次，条件为<code>True</code>执行一行</li><li><code>while</code>是判断<code>N+1</code>次，条件为<code>True</code>执行<code>N</code>次</li></ul>\n<h3><a id=\"434breakcontinue_974\"></a>4.3.4循环控制break和continue</h3>\n<p>循环结构有两个辅助循环控制的保留字:<code>break</code>与<code>continue</code>。</p>\n<ul><li><code>break</code>语句</li></ul>\n<p><code>break</code>用来跳出最内层<code>for</code>或<code>while</code>循环，脱离该循环后程序继续执行循环后续代码，通常与 分支结构 <code>if</code> 一起使用。</p>\n<p>例：从键盘录入密码，最多录入三次，如果正确就结束循环</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># for 循环</span>\n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># range()函数可以用作for循环的循环次数 3 表示for执行了3次</span>\n    pwd <span class=\"token operator\">=</span> <span class=\"token string\">'888'</span>\n    a <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入密码:'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> a <span class=\"token operator\">==</span> pwd<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'密码正确'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'密码错误，请重新输入密码'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># while 循环，四步循环法</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">while</span> a <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">'''条件执行体(循环体)'''</span>\n    b <span class=\"token operator\">=</span> <span class=\"token string\">'888'</span>\n    pwd <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入密码：'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> pwd <span class=\"token operator\">==</span> b<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'密码正确'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'密码错误'</span><span class=\"token punctuation\">)</span>\n    a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n</code></pre>\n<ul><li><code>continue</code>语句</li></ul>\n<p><code>continue</code>语句用来<strong>结束当次循环</strong>，即跳出循环体中下面尚未执行的语句，但不跳出当前循环，<strong>进入下一次循</strong>环，通常与分支结构 <code>if</code> 一起使用</p>\n<p>例：要求输出1-50-之间所有5的倍数</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># for 循环</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">51</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># while 循环</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">while</span> a <span class=\"token operator\">&lt;=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> a <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n<span class=\"token comment\"># continue 语句</span>\n<span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">51</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> item <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">continue</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"435_1032\"></a>4.3.5嵌套循环</h3>\n<p>循环结构中又嵌套了另外的完整的循环结构，其中内层循环做为外层循环的循环体执行。</p>\n<p>例1：打印一个三行四列矩形</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">'\\t'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>例2：输出乘法口诀表</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> <span class=\"token string\">'='</span><span class=\"token punctuation\">,</span> i<span class=\"token operator\">*</span>j<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">'\\t'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0066c26fbd044ff6b717c71f7853ffe5.png\"/></p>\n<hr/>\n<h1><a id=\"_1056\"></a>五、组合数据类型</h1>\n<h2><a id=\"51__1058\"></a>5.1 列表类型</h2>\n<ul><li><a href=\"http://t.csdn.cn/3SldY\">Python组合数据类型——序列类型：列表</a></li></ul>\n<h3><a id=\"511__1061\"></a>5.1.1 列表的定义</h3>\n<blockquote>\n<p>列表类型是包含0个或多个元素的有序序列，属于序列类型。列表可以进行元素的增加、删除、替换、查找等操作。列表没有长度限制，无素类型可以不同，不需要预定长度。</p>\n</blockquote>\n<blockquote>\n<p>列表类型用中括号<code>[]</code>表示，也可以通过<code>list(x)</code>函数将集合或字符串类型转换成列表类型。<code>list()</code>函数可生成空列表。</p>\n</blockquote>\n<blockquote>\n<p>列表需要使用中括号<code>[]</code>,元素之间使用英文的逗号进行分隔</p>\n</blockquote>\n<p><strong>列表示意图：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1948b10ea956405a8c11d84e6cf48645.png\"/><br/> <strong>列表创建方式</strong></p>\n<ol><li>使用<code>[]</code>方括号</li></ol>\n<pre><code class=\"prism language-python\">lst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n</code></pre>\n<ol start=\"2\"><li>使用内置函数<code>list()</code></li></ol>\n<pre><code class=\"prism language-python\">lst2 <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst2<span class=\"token punctuation\">)</span>\n</code></pre>\n<ol start=\"3\"><li>列表生成式</li></ol>\n<pre><code class=\"prism language-python\">lst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"512__1088\"></a>5.1.2 列表的特点</h3>\n<ol><li>列表元素按顺序有序排列</li><li>索引映射唯一一个数据</li><li>列表可以存储重复数据</li><li>任意数据类型混存</li><li>根据需要动态分配内存空间</li></ol>\n<h3><a id=\"513__1094\"></a>5.1.3 列表的索引</h3>\n<blockquote>\n<p>索引是列表的基本操作，用于获得列表第一个元素。该操作沿用序列类型的索引方式，即正向递增序号和反向递减序号，使用中括号作为索引操作符，索引序号不能超过列表的元素范围，否则会产生<code>IndexErrorr</code>的错误。</p>\n</blockquote>\n<p><strong>获取列表中指定元素索引</strong></p>\n<p>语法：<code>列表或列表变量.index（'要获取索引的元素',起始位置,结束位置）</code></p>\n<p>如果列表中含有相同元素，只返回相同元素的第一个元素的索引。</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 如果列表中含有相同元素，只返回相同元素的第一个元素的索引</span>\n\nlst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token string\">'java'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 5</span>\n</code></pre>\n<p>可以使用遍历循环对列表类型的元素进行遍历操作。</p>\n<p>语法：<code>for 迭代变量 in 列表名:</code></p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 列表元素的遍历</span>\n\nlst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> lst<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\noutput<span class=\"token punctuation\">:</span>\n<span class=\"token number\">10</span>\n<span class=\"token number\">20</span>\n<span class=\"token number\">30</span>\n<span class=\"token number\">40</span>\n<span class=\"token number\">50</span>\n<span class=\"token number\">60</span>\n<span class=\"token number\">70</span>\n<span class=\"token number\">80</span>\n</code></pre>\n<h3><a id=\"514__1130\"></a>5.1.4 列表的切片</h3>\n<blockquote>\n<p>切片是列表的基本操作，用于获得列表的一个片段，即获得零个或多个元素。切片后的结果也是列表类型。<br/> 切片有两种使用方式：</p>\n<ul><li>列表或列表变量<code>[N:M]</code></li><li>列表或列表变量<code>[N:M:K]</code></li></ul>\n</blockquote>\n<p>根据索引获取元素值</p>\n<pre><code class=\"prism language-python\">lst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token triple-quoted-string string\">'''获取单个元素'''</span>\n<span class=\"token comment\"># 获取列表索引为 2的元素</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># java</span>\n\n<span class=\"token comment\"># 获取列表索引为-3的元素</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># hello</span>\n\n<span class=\"token triple-quoted-string string\">'''获取多个元素   返回值为一个列表'''</span>\n<span class=\"token comment\"># lst = [start(默认0开始) : stop（默认最后） : step（默认步长1）]</span>\n<span class=\"token comment\"># step 为负数时相反</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># ['hello', 'world', 'java', 'hello', 'world']</span>\n\n</code></pre>\n<h3><a id=\"515__1159\"></a>5.1.5 列表操作函数</h3>\n<table><thead><tr><th>操作函数</th><th>描述</th></tr></thead><tbody><tr><td><code>len(ls)</code></td><td>列表<code>ls</code>的元素个数（长度）</td></tr><tr><td><code>min(ls)</code></td><td>列表<code>ls</code>的最小元素</td></tr><tr><td><code>max(ls)</code></td><td>列表<code>ls</code>的最大元素</td></tr><tr><td><code>list(x)</code></td><td>将<code>x</code>转换为列表类型</td></tr></tbody></table>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : 列表操作函数.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : 1071505897@qq.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/8 0:15</span>\n\nls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\33efbce7512c47b195cd5e02e747f3d0.png\"/></p>\n<h3><a id=\"516__1183\"></a>5.1.6 列表操作方法</h3>\n<p>列表类型的一些常用操作方法：</p>\n<table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>ls.append(x)</code></td><td>在列表<code>ls</code>末尾添加一个元素<code>x</code></td></tr><tr><td><code>ls.insert(i, x)</code></td><td>在列表<code>ls</code>的第i个位置增加元素<code>x</code></td></tr><tr><td><code>ls.clear()</code></td><td>删除列表<code>ls</code>所有元素</td></tr><tr><td><code>ls.pop(i)</code></td><td>将列表<code>ls</code>的第<code>i</code>个元素取出并从<code>ls</code>中删除该元素</td></tr><tr><td><code>ls.remove(x)</code></td><td>将列表中出现的第一个元素<code>x</code>删除</td></tr><tr><td><code>ls.reverse()</code></td><td>将列表<code>ls</code>中的元素反转</td></tr><tr><td><code>ls.copy()</code></td><td>生成一个新列表，复制<code>ls</code>中的所有元素</td></tr></tbody></table>\n<h3><a id=\"517__1196\"></a>5.1.7 列表元素的增加操作</h3>\n<table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>ls.append(x)</code></td><td>在列表<code>ls</code>末尾添加一个元素<code>x</code></td></tr><tr><td><code>ls.insert(i, x)</code></td><td>在列表<code>ls</code>的第<code>i</code>个位置增加元素<code>x</code></td></tr><tr><td><code>ls.extend()</code></td><td>在列表<code>ls</code>末尾至少添加一个元素</td></tr><tr><td>切片</td><td>在列表任意位置至少添加一个元素</td></tr></tbody></table>\n<pre><code class=\"prism language-python\">lst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span>\nlst1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"添加元素之前id:\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 1. append(要添加的元素)  在列表末尾添加一个元素</span>\nlst<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"添加元素之后id:\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2. extend() 在列表末尾至少添加一个元素</span>\nlst<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>lst1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3. insert(索引, 要添加的对象)在任意（指定索引）位置添加一个元素</span>\nlst<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'python'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 4.切片 在任意位置添加至少一个元素</span>\n<span class=\"token comment\"># lst[要切的位置索引 : 结束位置 : 步长默认为以1]=要添加的列表</span>\nlst<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lst1\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2fba7bb03a8d452d9bf38db9391751df.png\"/></p>\n<h3><a id=\"518__1230\"></a>5.1.8 列表元素的删除操作</h3>\n<table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>ls.remove(x)</code></td><td>将列表中出现的第一个元素<code>x</code>删除</td></tr><tr><td><code>pop()</code></td><td>删除一个指定索引位置上的元素</td></tr><tr><td>切片</td><td>一次至少删除一个元素</td></tr><tr><td><code>clear()</code></td><td>清空列表</td></tr><tr><td><code>del</code></td><td>删除列表</td></tr></tbody></table>\n<p>代码：</p>\n<pre><code class=\"prism language-python\">lst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 1. remove(要移除的元素)  从列表中移除一个元素，重复只删一个，元素不存抛异常</span>\nlst<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2. pop(索引)  删除一个指定索引上的元素，不指定索引删除最后一个元素，指定索引不存在抛异常</span>\nlst<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\nlst<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3. 切片操作 删除至少一个元素，将产生一个新的列表对象</span>\nnew_lst <span class=\"token operator\">=</span> lst<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 索引 1,2,3,产生一个新列表</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>new_lst<span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''不产生新的列表对象，而是删除原列表中的内容'''</span>\nlst<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 4. clear 清空列表</span>\nlst<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 5. del  删除列表</span>\n<span class=\"token keyword\">del</span> lst\n<span class=\"token comment\"># print(lst)</span>\n\n</code></pre>\n<p>运行结果：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c85568529dcf43feb56bd7c3329d2441.png\"/></p>\n<h3><a id=\"519__1270\"></a>5.1.9 列表元素的修改操作</h3>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 为指定索引的元素赋予一个新值</span>\nlst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">]</span>\nlst<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 为指定的切片赋予一个新值</span>\nlst<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0164cefe4cc24375aca8a48ffcbd8958.png\"/></p>\n<h3><a id=\"5110__1283\"></a>5.1.10 列表元素的排序操作</h3>\n<p><code>sort()</code>方法</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Sort the list in ascending order and return None.\n        \n        The sort is in-place (i.e. the list itself is modified) and stable (i.e. the\n        order of two equal elements is maintained).\n        \n        If a key function is given, apply it once to each list item and sort them,\n        ascending or descending, according to their function values.\n        \n        The reverse flag can be set to sort in descending order.\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n</code></pre>\n<blockquote>\n<p>按升序对列表进行排序，返回<code>None</code>。<br/> 排序是原地的(即列表本身被修改)和稳定的(即<br/> 保持两个相等元素的顺序)。<br/> 如果给出了一个键函数，对每个列表项应用一次，并对它们进行排序，<br/> 根据它们的函数值升序或降序。<br/> 反向标志可以设置为降序排序。</p>\n</blockquote>\n<p>内置函数<code>sorted()</code></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Return a new list containing all items from the iterable in ascending order.\n    \n    A custom key function can be supplied to customize the sort order, and the\n    reverse flag can be set to request the result in descending order.\n    \"\"\"</span>\n    <span class=\"token keyword\">pass</span>\n</code></pre>\n<blockquote>\n<p>返回一个新列表，其中包含可迭代对象中的所有项，按升序排列。<br/> 可以提供自定义键函数来自定义排序顺序<br/> 可以设置<code>reverse</code>标志，以降序请求结果。</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 1.调用 sort()方法，sort()方法默认是 升序 排序，在调用该方法后，列表中的元素会按照从小到大的顺序排列</span>\nlst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">46</span><span class=\"token punctuation\">,</span> <span class=\"token number\">67</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">]</span>\nlst<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2.如果我们想让其降序 排序，则可以通过指定关键字参数reverse</span>\nlst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">98</span><span class=\"token punctuation\">,</span> <span class=\"token number\">54</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'排序前的列表'</span><span class=\"token punctuation\">,</span> lst<span class=\"token punctuation\">)</span>\nlst<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'排序后的列表'</span><span class=\"token punctuation\">,</span> lst<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 升序</span>\nlst<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>reverse<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'排序后的列表'</span><span class=\"token punctuation\">,</span> lst<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 使用内置函数 sorted() 对列表进行排序，将产生一个新的对象</span>\nlst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">98</span><span class=\"token punctuation\">,</span> <span class=\"token number\">54</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 未指定升序</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 指定降序</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\17727d9818064523aa60f1374c677c0f.png\"/></p>\n<h3><a id=\"5111__1347\"></a>5.1.11 列表生成式</h3>\n<p>列表生成式： 简称列表生成的公式。</p>\n<p>语法格式：<br/> <code>lst = [列表元素表达式 for 自定义变量 in 可迭代对象]</code><br/> 例：<code>lst = [i for i in range(1, 11)]</code></p>\n<pre><code class=\"prism language-python\">lst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\79f8977e2c6c40a0a9ce840f630ee13e.png\"/></p>\n<hr/>\n<h2><a id=\"52__1360\"></a>5.2 字典</h2>\n<ul><li><a href=\"http://t.csdn.cn/KZOiq\">Python组合数据类型——映射类型：字典</a></li></ul>\n<h3><a id=\"521__1364\"></a>5.2.1 什么是字典</h3>\n<blockquote>\n<p><strong>字典：</strong><code>Python</code>内置的数据结构之一，与列表一样是一个<strong>可变序列</strong>，以<strong>键值对</strong>的方式存储数据，字典是一个<strong>无序的序列</strong>。<code>Python</code>语言中的字典使用大括号<code>{ }</code>建立，每个元素是一个键值对。</p>\n</blockquote>\n<blockquote>\n<p>“<code>键值对</code>”是组织数据的一种重要方式，广泛应用在当代大型信息系统中，如<code>Web</code>系统。键值对的基本思想是将“值”信息关联一个“键”信息，进而通过键信息找对应的值信息，这个过程叫映射。<code>Python</code>语言中通过字典类型实现映射。</p>\n</blockquote>\n<h3><a id=\"522__1370\"></a>5.2.2 字典示意图</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9aec2b513e8b40bd94193fe04fe6bc35.png\"/></p>\n<h3><a id=\"523__1372\"></a>5.2.3 字典的原理</h3>\n<blockquote>\n<p>字典的原理：<code>Python</code>中的字典是根据<code>key</code>查找<code>value</code>所在的位置</p>\n</blockquote>\n<h3><a id=\"524__1375\"></a>5.2.4 创建字典的方式</h3>\n<p>在 <code>python</code>中创建一个字典对象，常用的方式有两种。</p>\n<ol><li>第一种方式，使用花括号<code>{ }</code></li></ol>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">'''\n第一种方式，使用花括号{}，语法如下所示\n使用{}创建字典\nscores = {'张三': 100, '李四': 98, '王五': 45}\n'''</span>\nscores <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'李四'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'王五'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># {'张三': 29, '李四': 10, '王五': 40}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;class 'dict'&gt;</span>\n\n</code></pre>\n<ol start=\"2\"><li>第二种方式，使用内置函数<code>dict()</code>。</li></ol>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">'''第二种方式，使用内置函数dict()。dict即dictionary(字典)的缩写，语法如下所示。\n字典名 = dict(键1=值1, 键2=值2)\n'''</span>\ndic <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dic<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># {'name': '张三', 'age': 20}</span>\n\n</code></pre>\n<ol start=\"3\"><li>创建空字典</li></ol>\n<pre><code class=\"prism language-python\">d <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># {}</span>\n</code></pre>\n<h3><a id=\"525__1404\"></a>5.2.5 字典元素的获取</h3>\n<p>根据键<code>key</code>获取字典的值<code>value</code></p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 1.使用 [] 获取</span>\nscores <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'李四'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'王五'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span> <span class=\"token keyword\">in</span> scores<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> scores<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">[</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 29</span>\n \n<span class=\"token comment\"># 2.使用 get()方法</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 29</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'柽柳'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># None</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'麻子'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 99是在查找 麻子值的（value）不存在时的一个默认值</span>\n\n</code></pre>\n<h3><a id=\"526__1420\"></a>5.2.6 字典的操作函数</h3>\n<p><code>Python</code>内置数据结构：字典<code>dict()</code>类源代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">dict</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    dict() -&gt; new empty dictionary\n    dict(mapping) -&gt; new dictionary initialized from a mapping object's\n        (key, value) pairs\n    dict(iterable) -&gt; new dictionary initialized as if via:\n        d = {}\n        for k, v in iterable:\n            d[k] = v\n    dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs\n        in the keyword argument list.  For example:  dict(one=1, two=2)\n    \"\"\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown; restored from __doc__</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" D.clear() -&gt; None.  Remove all items from D. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown; restored from __doc__</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" D.copy() -&gt; a shallow copy of D \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span> <span class=\"token comment\"># known case</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">fromkeys</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Create a new dictionary with keys from iterable and values set to value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return the value for key if key is in the dictionary, else default. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">items</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown; restored from __doc__</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" D.items() -&gt; a set-like object providing a view on D's items \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown; restored from __doc__</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" D.keys() -&gt; a set-like object providing a view on D's keys \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> d<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown; restored from __doc__</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value.\n        If key is not found, d is returned if given, otherwise KeyError is raised\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">popitem</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Remove and return a (key, value) pair as a 2-tuple.\n        \n        Pairs are returned in LIFO (last-in, first-out) order.\n        Raises KeyError if the dict is empty.\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">setdefault</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Insert key with a value of default if key is not in the dictionary.\n        \n        Return the value for key if key is in the dictionary, else default.\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> E<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>F<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># known special case of dict.update</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        D.update([E, ]**F) -&gt; None.  Update D from dict/iterable E and F.\n        If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]\n        If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v\n        In either case, this is followed by: for k in F:  D[k] = F[k]\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">values</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown; restored from __doc__</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" D.values() -&gt; an object providing a view on D's values \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__contains__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" True if the dictionary has the specified key, else False. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__delitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Delete self[key]. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__eq__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return self==value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__getattribute__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return getattr(self, name). \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__getitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown; restored from __doc__</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" x.__getitem__(y) &lt;==&gt; x[y] \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__ge__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return self&gt;=value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__gt__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return self&gt;value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> seq<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># known special case of dict.__init__</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        dict() -&gt; new empty dictionary\n        dict(mapping) -&gt; new dictionary initialized from a mapping object's\n            (key, value) pairs\n        dict(iterable) -&gt; new dictionary initialized as if via:\n            d = {}\n            for k, v in iterable:\n                d[k] = v\n        dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs\n            in the keyword argument list.  For example:  dict(one=1, two=2)\n        # (copied from class doc)\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__iter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Implement iter(self). \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return len(self). \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__le__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return self&lt;=value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__lt__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return self&lt;value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span> <span class=\"token comment\"># known case of __new__</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__new__</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Create and return a new object.  See help(type) for accurate signature. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__ne__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return self!=value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__repr__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return repr(self). \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__reversed__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return a reverse iterator over the dict keys. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__setitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Set self[key] to value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__sizeof__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown; restored from __doc__</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" D.__sizeof__() -&gt; size of D in memory, in bytes \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    __hash__ <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n</code></pre>\n<p>字典类型的一些通用操作函数</p>\n<table><thead><tr><th>操作函数</th><th>描述</th></tr></thead><tbody><tr><td><code>dict()</code></td><td>生成一个字典</td></tr><tr><td><code>len(d)</code></td><td>字典<code>d</code>元素的个数（长度）</td></tr><tr><td><code>min(d)</code></td><td>字典<code>d</code>中键的最最小值</td></tr><tr><td><code>max(d)</code></td><td>字典<code>d</code>中键的最最大值</td></tr></tbody></table>\n<h3><a id=\"527__1593\"></a>5.2.7 字典的操作方法</h3>\n<p>字典类型有一些操作方法，使用的语法格式为：<br/> <code>&lt;字典对象名&gt;.&lt;方法名&gt;(&lt;方法参数&gt;)</code></p>\n<table><thead><tr><th>操作方法</th><th>描述</th></tr></thead><tbody><tr><td><code>d.keys()</code></td><td>返回字典<code>d</code>所有键的信息</td></tr><tr><td><code>d.values()</code></td><td>返回字典<code>d</code>所有值的信息</td></tr><tr><td><code>d.items()</code></td><td>返回字典<code>d</code>所有键值对</td></tr><tr><td><code>d.get(key, default)</code></td><td>键存在则返回相应值，否则返回默认值<code>default</code></td></tr><tr><td><code>d.pop(key, default)</code></td><td>键存在则返回相应值，同时删除键值对，否则返回默认值<code>default</code></td></tr><tr><td><code>d.popitem()</code></td><td>随机从字典中取出一个兼职对，以元组<code>(key, value)</code>的形式返回，同时将该键值对从字典中删除。</td></tr><tr><td><code>d.clear()</code></td><td>删除所有的键值对，清空字典</td></tr></tbody></table>\n<h3><a id=\"528__1606\"></a>5.2.8 字典元素的增删改操作</h3>\n<p><code>scores = {'张三': 29, '李四': 10, '王五': 40}</code></p>\n<ul><li>key的判断</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># key的判断</span>\nscores <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'李四'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'王五'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span> <span class=\"token keyword\">in</span> scores<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> scores<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n</code></pre>\n<ul><li>字典的删除</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 字典元素的删除</span>\n<span class=\"token keyword\">del</span> scores<span class=\"token punctuation\">[</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 删除指定的键值对</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># {'李四': 10, '王五': 40}</span>\n\n</code></pre>\n<ul><li>字典的清除</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 清空字典 clear（）方法</span>\nscores<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># {}</span>\n\n</code></pre>\n<ul><li>字典元素的新增</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 新增元素</span>\nscores<span class=\"token punctuation\">[</span><span class=\"token string\">'陈六'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># {'陈六': 20}</span>\n\n</code></pre>\n<ul><li>字典元素值的修改</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 修改value</span>\nscores<span class=\"token punctuation\">[</span><span class=\"token string\">'陈六'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># {'陈六': 100}</span>\n\n</code></pre>\n<h3><a id=\"529__1649\"></a>5.2.9 字典视图的获取</h3>\n<ul><li>获取所有的键， <code>&lt;字典对象名&gt;.keys()</code>方法 返回值为列表</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 获取所有的键 .keys()方法 返回值为列表</span>\nscores <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'李四'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'王五'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># dict_keys(['张三', '李四', '王五'])</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;class 'dict_keys'&gt;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['张三', '李四', '王五']</span>\n\n</code></pre>\n<ul><li>获取所有的值,<code>&lt;字典对象名&gt;.value()</code>方法，返回值为列表</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 获取所有的值 &lt;字典对象名&gt;.value()方法 返回值为列表</span>\ndict_values <span class=\"token operator\">=</span> scores<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dict_values<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># dict_values([29, 10, 40])</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>dict_values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;class 'dict_values'&gt;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>dict_values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [29, 10, 40]</span>\n\n</code></pre>\n<ul><li>获取所有的键值对，<code>&lt;字典对象名&gt;.items()</code>方法 返回值为元组</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#  获取所有的键值对  返回值为元组</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># dict_items([('张三', 29), ('李四', 10), ('王五', 40)])</span>\n</code></pre>\n<h3><a id=\"5210__1674\"></a>5.2.10 字典元素的遍历</h3>\n<p>字典元素的遍历：使用<code>for-in</code>循环</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 字典元素的遍历</span>\nscores <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'李四'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'王五'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> scores<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> scores<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9b35baf9a0f74685949bdd4bdca1ee69.png\"/></p>\n<h3><a id=\"5211__1683\"></a>5.2.11 字典的特点</h3>\n<blockquote>\n<p>1.键 <code>key</code> 不可以重复，值<code>value</code>可以重复</p>\n</blockquote>\n<blockquote>\n<p>2.字典中元素是无序的</p>\n</blockquote>\n<blockquote>\n<p>3.字典会浪费大的内存，是一种使用空间换时间的数据结构，但是查询速度快。</p>\n</blockquote>\n<h3><a id=\"5212__1690\"></a>5.2.12 字典生成式</h3>\n<ul><li>内置函数<code>zip()</code></li></ul>\n<blockquote>\n<p>用于将可迭代对象作为参数，将对象中对应的元素打包成一个元组，然后返回由这些元组组成的列表</p>\n</blockquote>\n<ul><li>字典生成式:<br/> <code>{key: value for key, value in zip(items,prices)}</code></li></ul>\n<pre><code class=\"prism language-python\">items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Fruits'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Books'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Others'</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 键的列表</span>\nprices <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">,</span> <span class=\"token number\">85</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 值的列表</span>\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>items<span class=\"token punctuation\">:</span> prices <span class=\"token keyword\">for</span> items<span class=\"token punctuation\">,</span> prices <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">,</span> prices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>  <span class=\"token comment\"># 两个列表生成一个字典</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># {'Fruits': 96, 'Books': 78, 'Others': 85}</span>\n\n<span class=\"token comment\"># .upper()方法 键字母变大写</span>\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>items<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> prices <span class=\"token keyword\">for</span> items<span class=\"token punctuation\">,</span> prices <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">,</span> prices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>  <span class=\"token comment\"># 两个列表生成一个字典</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># {'Fruits': 96, 'Books': 78, 'Others': 85}</span>\n\n\nitems <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Fruits'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Books'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Others'</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 键的列表</span>\nprices <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">,</span> <span class=\"token number\">85</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 值的列表</span>\na <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">,</span> prices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># {'Fruits': 96, 'Books': 78, 'Others': 85}</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\478ded0979424a7ca33dd844012cfdbb.png\"/></p>\n<hr/>\n<h2><a id=\"53__1717\"></a>5.3 元组</h2>\n<ul><li><a href=\"http://t.csdn.cn/3SldY\">Python组合数据类型——序列类型：元组</a></li></ul>\n<h3><a id=\"531__1720\"></a>5.3.1 什么是元组</h3>\n<p>元组：<code>Python</code>内置的数据结构之一，是一个不可变序列。</p>\n<p><strong>不可变序列与可变序列</strong></p>\n<ul><li>不变可变序:<code>字符串</code>、<code>元组</code><br/> 不变可变序列：没有增、删，改的操作</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 修改后对象地址会发生改变</span>\ns <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2533879685808</span>\ns <span class=\"token operator\">=</span> s <span class=\"token operator\">+</span> <span class=\"token string\">'world'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2533879671984</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># helloworld</span>\n</code></pre>\n<ul><li>可变序列:<code>列表</code>、<code>字典</code><br/> 可变序列：可以对序列执行增、删、改操作，对象地址不发生更改</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 可变序列：可以执行增删改操作，对象地址不发生改变</span>\nlst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlst<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\862bf0f64b9c4875864bcb5eae2007a0.png\"/></p>\n<h3><a id=\"532__1747\"></a>5.3.2 元组的创建方式</h3>\n<ol><li>直接小括号<code>()</code></li></ol>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 1.使用（）</span>\nt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'python'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ('python', 'java')</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;class 'tuple'&gt;</span>\n</code></pre>\n<ol start=\"2\"><li>使用内置函数<code>tuple()</code></li></ol>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 2.使用内置函数tuple()</span>\nt2 <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'python'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ('java', 'python')</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;class 'tuple'&gt;</span>\n</code></pre>\n<ol start=\"3\"><li>只包含一个元组的元素需要使用逗号<code>,</code>和小括号<code>()</code></li></ol>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 3.只包含一个元素，需要使用逗号和小括号(只有一个元素的时候必须加上，)</span>\nt3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t3<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ('hello',)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>t3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;class 'tuple'&gt;</span>\n</code></pre>\n<ol start=\"4\"><li>空元组创建方式</li></ol>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 空元组创建方式</span>\nt4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nt5 <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'空元组'</span><span class=\"token punctuation\">,</span> t4<span class=\"token punctuation\">,</span> t5<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 空元组 () ()</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'空列表'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 空列表 [] []</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'空字典'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 空字典 {} {}</span>\n<span class=\"token comment\"># print('空集合', {}, set())</span>\n</code></pre>\n<p><strong>为什么要将元组设计成不可变序列</strong></p>\n<blockquote>\n<p>在多任务环境下，同时操作对象时不需要加锁，因此，在程序中尽量使用不可变序列 。<br/> 注意事项：<strong>元组中存储的是对象的引用</strong></p>\n<ul><li>如果元组中对象本身不可对象，则不能再引用其它对象。</li><li>如果元组中的对象是可变对象，则可变对象的引用不允许改变，但数据可以改变。</li></ul>\n</blockquote>\n<blockquote>\n<p>这样设计的原因是，元组的不可变性保证了数据的完整性，这样如果有多个地方都用到了元组，我们可以保证它的数据不会被改变。并且，相较于列表，元组的读取速度更快，占用的内存空间更小，并且可以作为字典的<code>key</code>去使用。</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 这样设计的原因是，元组的不可变性保证了数据的完整性，这样如果有多个地方都用到了元组，我们可以保证它的数据不会被改变。</span>\n<span class=\"token comment\"># 并且，相较于列表，元组的读取速度更快，占用的内存空间更小，并且可以作为字典的key去使用。</span>\n\nt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (10, [20, 30], 40)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;class 'tuple'&gt; 2972759079744</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 10 &lt;class 'int'&gt; 140726042761152</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [20, 30] &lt;class 'list'&gt; 2972768483776</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 40 &lt;class 'int'&gt; 140726042762112</span>\nt<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (10, [20, 30, 100], 40) 2972759079744</span>\n\n</code></pre>\n<h3><a id=\"533__1805\"></a>5.3.3 元组的遍历</h3>\n<p>元组是<strong>可迭代对象</strong>，所以可以使用<code>for...in</code>进行遍历</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 元组遍历</span>\nt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> t<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\33b07a462dee462282fcc3f790830f4c.png\"/><br/> 列表类型覆盖了元组类型的所有主要功能。</p>\n<h2><a id=\"54__1820\"></a>5.4 集合</h2>\n<ul><li><a href=\"http://t.csdn.cn/rvtXV\">Python组合数据类型——集合类型：集合</a></li></ul>\n<p><strong>什么是集合</strong></p>\n<ol><li> <p><code>Python</code>内置数据结构之一</p> </li><li> <p>与列表，字典一样都属于<strong>可变序列</strong></p> </li><li> <p>集合是没有<code>value</code>的字典</p> </li><li> <p>集合中的元素是无序的，元素不可以重复</p> </li></ol>\n<h3><a id=\"541__1833\"></a>5.4.1 集合操作符</h3>\n<table><thead><tr><th>操作符的运算</th><th>描述</th></tr></thead><tbody><tr><td><code>S-T</code></td><td>返回一个新集合，包括在集合<code>S</code>中但不会在集合<code>T</code>中</td></tr><tr><td><code>S&amp;T</code></td><td>返回一个新集合，包括同时在集合<code>S</code>和<code>T</code>中的元素</td></tr><tr><td><code>S^T</code></td><td>返回一个新集合，包括<code>S</code>和<code>T</code>中的非共同元素</td></tr><tr><td><code>S|T</code></td><td>返回一个新集合，包括集合<code>S</code>和<code>T</code>中的所有元素</td></tr></tbody></table>\n<h3><a id=\"542__1841\"></a>5.4.2 常用集合操作函数或方法</h3>\n<table><thead><tr><th>函数或方法</th><th>描述</th></tr></thead><tbody><tr><td><code>S.add(x)</code></td><td>如果数据项<code>x</code>不在<code>S</code>中，将<code>x</code>增加到<code>S</code></td></tr><tr><td><code>S.remove(x)</code></td><td>如果<code>x</code>集合在<code>S</code>中，移除该元素；不在则产生<code>KeyError</code>异常</td></tr><tr><td><code>S.clear()</code></td><td>移除<code>S</code>中的数据项</td></tr><tr><td><code>len(S)</code></td><td>返回集合<code>S</code>的元素个数</td></tr><tr><td><code>x in S</code></td><td>如果<code>x</code>是<code>s</code>的元素，返回<code>True</code>；否则返回<code>False</code></td></tr><tr><td><code>x not in S</code></td><td>如果<code>x</code>是<code>s</code>的元素，返回<code>True</code>；否则返回<code>False</code></td></tr></tbody></table>\n<h3><a id=\"543__1853\"></a>5.4.3 集合的创建方式</h3>\n<ol><li>使用 <code>{}</code></li></ol>\n<pre><code class=\"prism language-python\">s <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># {1, 2, 3, 4, 5, 6}</span>\n</code></pre>\n<ol start=\"2\"><li>使用内置函数 <code>set()</code></li></ol>\n<pre><code class=\"prism language-python\">s1 <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># {1, 2, 3, 4, 5, 6}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'python'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># {'p', 'h', 'n', 'o', 't', 'y'}</span>\n</code></pre>\n<h3><a id=\"544__1873\"></a>5.4.4 集合元素的判断操作</h3>\n<table><thead><tr><th>操作函数</th><th>描述</th></tr></thead><tbody><tr><td><code>a in s</code></td><td>如果<code>a</code>是<code>s</code>的元素，返回<code>True</code>；否则返回<code>False</code></td></tr><tr><td><code>a not in s</code></td><td>如果 <code>a</code>不是<code>s</code>的元素，返回<code>True</code>；否则返回<code>False</code></td></tr></tbody></table>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 判断元素是否在集合中</span>\ns <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span>\n</code></pre>\n<h3><a id=\"545__1884\"></a>5.4.5 集合的新增操作</h3>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 集合元素的新增操作</span>\ns <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span>\ns<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 添加一个元素</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>  \n<span class=\"token comment\"># {100, 40, 10, 80, 50, 20, 30}</span>\ns<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">66</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">,</span> <span class=\"token number\">88</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 添加多个元素(一次至少添加一个元素 )</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># {66, 100, 40, 10, 77, 80, 50, 20, 88, 30}</span>\ns<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># {33, 66, 100, 40, 10, 11, 77, 80, 50, 20, 22, 88, 30}</span>\n</code></pre>\n<h3><a id=\"546__1900\"></a>5.4.6 集合的删除操作</h3>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 集合元素的删除操作</span>\n<span class=\"token comment\">#  1.调用remove方法，一次删除一个指定元素，元素不存在抛异常</span>\ns<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># {33, 66, 40, 10, 11, 77, 80, 50, 20, 22, 88, 30}</span>\n\n<span class=\"token comment\"># 2.调用discard方法，一次删除一个指定元素，元素不存在不抛异常</span>\ns<span class=\"token punctuation\">.</span>discard<span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># {33, 66, 40, 10, 11, 77, 80, 50, 20, 22, 88, 30}</span>\n\n<span class=\"token comment\"># 3.调用pop方法，一次只删除一个任意元素</span>\ns<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># {66, 40, 10, 11, 77, 80, 50, 20, 22, 88, 30}</span>\n\n<span class=\"token comment\"># 4.调用clear方法,清空集合</span>\ns<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># set()</span>\n\n</code></pre>\n<hr/>\n<h1><a id=\"_1927\"></a>六、字符串</h1>\n<ul><li><a href=\"http://t.csdn.cn/kCOss\">Python基本数据类型字符串操作</a></li></ul>\n<blockquote>\n<p>字符串又称为字符序列，根据字符串的内容多少分为<font color=\"#d71345\" face=\"微软雅黑\">单行字符串</font>和<font color=\"#d71345\" face=\"微软雅黑\">多行字符串</font>。</p>\n</blockquote>\n<blockquote>\n<p><font color=\"#d71345\" face=\"微软雅黑\">单行字符串</font>可以由一对单引号<code>' '</code>或一对双引号<code>\" \"</code>作为边界，单引号和双引号的作用相同。当使用单引号时双引号可以作为字符串的一部分，使用双引号时，单引号可以作为字符串的一部分。</p>\n</blockquote>\n<blockquote>\n<p><font color=\"#d71345\" face=\"微软雅黑\">多行字符串</font>由一对三单引号<code>''' '''</code>或三双引号<code>\"\"\" \"\"\"</code>作为边界来表示，二者作用相同。</p>\n</blockquote>\n<hr/>\n<h2><a id=\"61__1938\"></a>6.1 字符串的驻留机制</h2>\n<h3><a id=\"611__1939\"></a>6.1.1 字符串</h3>\n<blockquote>\n<p>字符串：<code>Python</code>基本数据类型:是一个不可变序列</p>\n</blockquote>\n<h3><a id=\"612_1942\"></a>6.1.2什么叫字符串的驻留机制</h3>\n<blockquote>\n<p>仅保存一份相同且不可变字符串的方法，不同的值会被保存在字符串的驻留池中。</p>\n</blockquote>\n<blockquote>\n<p><code>Python</code>的驻留机制会对相同的字符串只保留一份拷贝，后续创建相同的字符串时，不会开辟新的空间，而是把字符串的地址付给新创建的变量。</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo24.py</span>\n<span class=\"token comment\"># @author: Flyme awei</span>\n<span class=\"token comment\"># @email : 1071505897@qq.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/11 16:07</span>\n\n\na <span class=\"token operator\">=</span> <span class=\"token string\">'python'</span>\nb <span class=\"token operator\">=</span> <span class=\"token string\">\"python\"</span>\nc <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">'''python'''</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5d8258c2ced84553a1f6f246f8aaecec.png\"/></p>\n<h3><a id=\"613__1963\"></a>6.1.3 字符串驻留机制的几种情况（交互式）</h3>\n<ol><li>字符串的长度为<code>1</code></li><li>符合标识符的字符串（只包含字母，数字，下划线）</li><li>字符串只在编译是进行驻留，而非运行时</li><li><code>[-5,256]</code>之间的整数数字</li></ol>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> s1 <span class=\"token keyword\">is</span> s2\n<span class=\"token boolean\">True</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> s1 <span class=\"token keyword\">is</span> s2\n<span class=\"token boolean\">True</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">'abc_def'</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">'abc_def'</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> s1 <span class=\"token keyword\">is</span> s2\n<span class=\"token boolean\">True</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">'abc%def'</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">'abc%def'</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> s1 <span class=\"token operator\">==</span> s2\n<span class=\"token boolean\">True</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> s1 <span class=\"token keyword\">is</span> s2\n<span class=\"token boolean\">False</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> a <span class=\"token operator\">=</span> <span class=\"token number\">256</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> b <span class=\"token operator\">=</span> <span class=\"token number\">256</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> a <span class=\"token keyword\">is</span> b\n<span class=\"token boolean\">True</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> a <span class=\"token operator\">=</span> <span class=\"token number\">257</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> b <span class=\"token operator\">=</span> <span class=\"token number\">257</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> a <span class=\"token keyword\">is</span> b\n<span class=\"token boolean\">False</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> a <span class=\"token operator\">==</span> b\n<span class=\"token boolean\">True</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> \n</code></pre>\n<h3><a id=\"614_2_2004\"></a>6.1.4 强制2个字符串指向同一个对象</h3>\n<blockquote>\n<p><code>sys</code>中的<code>intern</code>方法强制两个字符串指向同一个对象</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">'''sys中的intern方法强制两个字符串指向同一个对象'''</span>\n<span class=\"token keyword\">import</span> sys\na <span class=\"token operator\">=</span> <span class=\"token string\">'abc%'</span>\nb <span class=\"token operator\">=</span> <span class=\"token string\">'abc%'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token keyword\">is</span> b<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\na <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span><span class=\"token builtin\">intern</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2989905230512 2989905230512</span>\n\n</code></pre>\n<p><code>PyCharm</code>对字符串进行了优化处理 。</p>\n<h3><a id=\"615__2019\"></a>6.1.5 字符串驻留机制的优缺点</h3>\n<blockquote>\n<p>  当需要值相同的字符串时，可以直接从字符串池里拿来使用，避免频繁的创建和销毁，提升效率和节约内存，因此拼接字符串和修改字符串是会比较影响性能的。</p>\n</blockquote>\n<blockquote>\n<p>  在需要进行字符串拼接时建议使用 <code>str</code>类型的<code>join</code>方法，而非<code>+</code> ,因为<code>join()</code>方法是先计算出所有字符中的长度，然后再拷贝，只<code>new</code>一次对象，效率要比\"<code>+</code>\"效率高 。</p>\n</blockquote>\n<hr/>\n<h2><a id=\"62__2026\"></a>6.2 字符串类型的操作</h2>\n<h3><a id=\"621__2029\"></a>6.2.1 字符串操作符</h3>\n<table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td><code>+</code></td><td><code>x+y</code>,连接两个字符串<code>x</code>和<code>y</code></td></tr><tr><td><code>*</code></td><td><code>x*n</code>或<code>n*x</code>,复制n次字符串<code>x</code></td></tr><tr><td><code>in</code></td><td><code>x in s</code>,如果<code>x</code>是<code>s</code>的字串，返回<code>True</code>,否则返回<code>False</code></td></tr></tbody></table>\n<h3><a id=\"622__2036\"></a>6.2.2 字符串处理函数</h3>\n<table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>len(x)</code></td><td>返回字符串<code>x</code>的长度，也可返回其它组合数据类型元素的个数</td></tr><tr><td><code>str(x)</code></td><td>返回任意类型<code>x</code>所对应的字符串形式</td></tr><tr><td><code>char(x)</code></td><td>返回<code>Unicode</code>编码<code>x</code>对应的单字符</td></tr><tr><td><code>ord(x)</code></td><td>返回x表示的Unicode编码</td></tr><tr><td><code>hex(x)</code></td><td>返回整数<code>x</code>对应<code>十六进制</code>的小写形式字符串</td></tr><tr><td><code>oct(x)</code></td><td>返回整数<code>x</code>对应<code>八进制</code>的小写形式字符串</td></tr></tbody></table>\n<h3><a id=\"623__2046\"></a>6.2.3 字符串处理方法</h3>\n<table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>s.lower()</code></td><td>字符串<code>s</code>全部转为小写</td></tr><tr><td><code>s.upper(</code>)</td><td>字符串<code>s</code>全部转为大写</td></tr><tr><td><code>s.split(sep=None)</code></td><td>返回一个列表，由<code>s</code>根据<code>sep</code>被分割的部分构成，省略<code>sep</code>默认以<code>空格</code>分割</td></tr><tr><td><code>s.count(sub)</code></td><td>返回字串<code>sub</code>出现的次数</td></tr><tr><td><code>s.replace(old, new)</code></td><td>返回字符串<code>s</code>的副本，所有<code>old</code>字串被替换为<code>new</code></td></tr><tr><td><code>s.center(width, fillchar)</code></td><td>字符串居中函数，<code>fillchar</code>参数可选</td></tr><tr><td><code>s.strip(chars)</code></td><td>从字符串<code>s</code>中去掉咋其左侧和右侧<code>chars</code>中出现的字符</td></tr><tr><td><code>s.join(iter)</code></td><td>将<code>iter</code>变量的每一个元素增加一个<code>s</code>字符串</td></tr></tbody></table>\n<h3><a id=\"624__2058\"></a>6.2.4 字符串的查询操作</h3>\n<table><thead><tr><th>方法名称</th><th>作用</th></tr></thead><tbody><tr><td><code>index()</code></td><td>查找字串<code>substr</code>第一次出现的位置，如果查找的字串不存在，抛<code>ValueError</code>异常</td></tr><tr><td><code>rindex()</code></td><td>查找字串<code>substr</code>最后一次出现的位置，如果查找的字串不存在，抛<code>ValueError</code>异常</td></tr><tr><td><code>find()</code></td><td>查找字串<code>substr</code>第一次出现的位置，如果查找的字串不存在，返回<code>-1</code></td></tr><tr><td><code>rfind()</code></td><td>查找字串<code>substr</code>最后一次出现的位置，如果查找的字串不存在，返回<code>-1</code></td></tr></tbody></table>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">'''\nindex（）查找第一次出现的位置  抛异常\nrindex（）查找最后一次次出现的位置  抛异常\n\nfind（）查找第一次出现的位置  不抛异常，返回值为-1\nrfind（）查找最后一次出现的位置  抛异常\n'''</span>\ns <span class=\"token operator\">=</span> <span class=\"token string\">'hello,hello'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>rindex<span class=\"token punctuation\">(</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'lo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'ui'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># -1</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\228ab12dbdb345b093fde7bd42d8e449.png\"/></p>\n<h3><a id=\"625__2081\"></a>6.2.5 字符串大小写转换操作</h3>\n<table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>upper()</code></td><td>把所有的字符串转换为<code>大写</code>字母</td></tr><tr><td><code>lower()</code></td><td>把所有的字符串转换为<code>小写</code>字母</td></tr><tr><td><code>swapcase()</code></td><td>将<code>大写</code>字符转换为<code>小写</code>字符，将<code>小写</code>字符转换为<code>大写</code>字符。</td></tr><tr><td><code>capitalize()</code></td><td>使<code>第一个字符</code>为<code>大写</code>字母，其余字符为小写字母</td></tr><tr><td><code>title()</code></td><td>返回字符串的一个版本，其中每个单词都有标题。更具体地说，单词以大写字母开头，其余都以大写字母开头区分大小写的字符小写。</td></tr></tbody></table>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 字符串的大小写转换</span>\n<span class=\"token comment\"># 1.upper（）把字符串中的所有字符转为大写</span>\n<span class=\"token comment\"># 2.lower（）把字符串中的所有字符都转换为小写</span>\n<span class=\"token comment\"># 3.swap case() 大转小，小转大</span>\n<span class=\"token comment\"># 4.capitalize()把第一个字符转为大写，其余字符转为小写</span>\n<span class=\"token comment\"># 5.title（）把字符串首字母转换为大写，把剩余的转换为小写</span>\n\ns <span class=\"token operator\">=</span> <span class=\"token string\">'hellopython'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 转大写</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 转换后id改变，会产生一个新的空间</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>swapcase<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>capitalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\db659603310b4463adba85c02682e318.png\"/></p>\n<h3><a id=\"626__2106\"></a>6.2.6 字符串内容对齐操作方法</h3>\n<table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>center(width,'')</code></td><td>返回一个居中长度为<code>width</code>的字符串。使用指定的填充字符(默认为空格)填充。</td></tr><tr><td><code>ljust(width,' ')</code></td><td>返回长度为<code>width</code>的左对齐字符串。使用指定的填充字符(默认为空格)填充。</td></tr><tr><td><code>rjust(width,' ')</code></td><td>返回长度为<code>width</code>的右对齐字符串。使用指定的填充字符(默认为空格)填充。</td></tr><tr><td><code>zfill('int')</code></td><td>在左侧填充<code>数字字符串</code>，以填充给定宽度的字段。字符串永远不会被截断。</td></tr></tbody></table>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">'''字符串的对其操作'''</span>\n<span class=\"token comment\"># 1.center 居中对齐</span>\ns <span class=\"token operator\">=</span> <span class=\"token string\">'hello,python'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2.ljust 左对齐</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3.rjust 右对齐</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>rjust<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3.zfill 右对齐，左侧为0填充</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>zfill<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b8cd87a469f44c47bb916cb24fd7ae4d.png\"/></p>\n<h3><a id=\"627__2130\"></a>6.2.7 字符串的劈分操作</h3>\n<table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>split()</code></td><td>返回字符串中的单词列表，使用<code>sep</code>作为分隔符字符串。<code>sep</code>用来分割字符串的分隔符。None(默认值)表示根据任何空格进行分割，并从结果中丢弃空字符串。<code>maxsplit</code>最大分割次数。<code>-1</code>(默认值)表示无限制。</td></tr><tr><td><code>rsplit()</code></td><td>返回字符串中的单词列表，使用<code>sep</code>作为分隔符字符串。<code>sep</code>用来分割字符串的分隔符。<code>None</code>(默认值)表示根据任何空格进行分割，并从结果中丢弃空字符串。<code>maxsplit</code>最大分割次数。<code>-1</code>(默认值)表示无限制。劈叉从绳子的<code>末端</code>开始，一直到前面。</td></tr></tbody></table>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 字符串的劈分操作  split</span>\n<span class=\"token comment\"># 1. split从字符串左侧开始分割，默认值为空格字符串，返回值是一个列表</span>\n<span class=\"token comment\">#  以通过参数sep指定劈分字符串是劈分符</span>\n<span class=\"token comment\"># 通过maxsplit指定劈分字符串的最大劈分次数</span>\n\ns <span class=\"token operator\">=</span> <span class=\"token string\">'hello#world#python'</span>\nlst <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\ns1 <span class=\"token operator\">=</span> <span class=\"token string\">'hello|world|python'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>sep<span class=\"token operator\">=</span><span class=\"token string\">'|'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ns1 <span class=\"token operator\">=</span> <span class=\"token string\">'hello|world|python'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>sep<span class=\"token operator\">=</span><span class=\"token string\">'|'</span><span class=\"token punctuation\">,</span> maxsplit<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 以参数sep 指定劈分字符串是劈分符</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----------------------'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2.rsplit  从右侧开始劈分</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span>rsplit<span class=\"token punctuation\">(</span>sep<span class=\"token operator\">=</span><span class=\"token string\">'|'</span><span class=\"token punctuation\">,</span> maxsplit<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9c69f4ffb235421eadf98633599da956.png\"/></p>\n<h3><a id=\"628__2160\"></a>6.2.8 判断字符串的方法</h3>\n<table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>isidentifier()</code></td><td>判断字符串是合法标识符</td></tr><tr><td><code>isspace()</code></td><td>判断字符串是否全部由空字符串组成（回车，换行，水平制表）</td></tr><tr><td><code>isalpha()</code></td><td>判断是否全部由字符组成</td></tr><tr><td><code>isdecimal()</code></td><td>判断是否全部由十进制数字组成</td></tr><tr><td><code>isnumeric()</code></td><td>判断是否全部由数字组成</td></tr><tr><td><code>isalnum()</code></td><td>判断字符串是否全部由字母和数字组成</td></tr></tbody></table>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 1. isidentifier 判断字符串是合法标识符</span>\ns <span class=\"token operator\">=</span> <span class=\"token string\">'hello, python'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1.'</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>isidentifier<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">.</span>isidentifier<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n\n<span class=\"token comment\"># 2. isspase 判断字符串是否全部由空字符串组成（回车，换行，水平制表）</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'   '</span><span class=\"token punctuation\">.</span>isspace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----------------------'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3. isalpha  判断是否全部由字符组成</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fhaisdfh'</span><span class=\"token punctuation\">.</span>isalpha<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 4. isnumeric 判断是否全部由数字组成</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'67867'</span><span class=\"token punctuation\">.</span>isnumeric<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 5. isdecimal 判断是否全部由十进制数字组成</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'78'</span><span class=\"token punctuation\">.</span>isdecimal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 6. iszlnum 判断字符串是否全部由字母和数字组成</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'yut6786'</span><span class=\"token punctuation\">.</span>isalnum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\746d45756bf04f01bd17b93795162583.png\"/></p>\n<h3><a id=\"629__2194\"></a>6.2.9 字符串的替换与合并操作</h3>\n<table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>replace()</code></td><td>返回一个副本，其中所有出现的子字符串<code>old</code>都被<code>new</code>替换。<code>count</code>替换的最大次数。<code>-1</code>(默认值)表示替换所有匹配项。如果给出了可选参数<code>count</code>，则只出现第一个<code>count</code>更换。</td></tr><tr><td><code>join()</code></td><td>连接任意数量的字符串。调用其方法的字符串被插入到每个给定字符串之间。结果以新字符串的形式返回。例如: <code>'.'.join(['ab', 'pq', 'rs']) -&gt; 'ab.pq.rs'</code></td></tr></tbody></table>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 1.字符串的替换  replace（）</span>\ns <span class=\"token operator\">=</span> <span class=\"token string\">'hello,Python'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'Python'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ns1 <span class=\"token operator\">=</span> <span class=\"token string\">'hello,python,python,python'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'python'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n<span class=\"token comment\"># 通过第三个参数指定最大替换次数</span>\n\n<span class=\"token comment\"># 2.字符串合并 join（） 将列表或元组中字符串合并成一个字符串</span>\nlst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'python'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'|'</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'python'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\645f47ed78d143759c52129057d0befb.png\"/></p>\n<h3><a id=\"6210__2217\"></a>6.2.10 字符串的比较运算</h3>\n<blockquote>\n<p>两个字符串进行比较时，比较的是<code>ordinal value</code> （原始值) ，如果相等则继续比较下一个字符，知道两个字符串不相等</p>\n</blockquote>\n<table><thead><tr><th>运算符</th><th>含义</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>==</td><td>等于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>!=</td><td>不等于</td></tr></tbody></table>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 字符窜的比较</span>\n<span class=\"token comment\"># 运算符 &gt; &lt; == &lt;= &gt;= !=</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apple'</span> <span class=\"token operator\">&gt;</span> <span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apple'</span> <span class=\"token operator\">&gt;</span> <span class=\"token string\">'banana'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''调用内置函数ord可以得到指定字符的ordinal value '''</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'刘'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'张'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''== 与 is 的区别'''</span>\n<span class=\"token comment\"># == 比较的是 value</span>\n<span class=\"token comment\"># is 比较的是 id</span>\na <span class=\"token operator\">=</span> b <span class=\"token operator\">=</span> <span class=\"token string\">'pthon'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token keyword\">is</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bccc017b8d8344d0bac01cd0892de111.png\"/></p>\n<h3><a id=\"6211__2248\"></a>6.2.11 字符串的切片操作</h3>\n<blockquote>\n<p>对字符串中某个子串或区间的检索称为切片。</p>\n</blockquote>\n<p><strong>语法如下：</strong></p>\n<blockquote>\n<p><code>字符串或字符串变量[N:M]</code><br/> 切片获取字符串<code>N</code>到<code>M</code>（不包含<code>M</code>）的子字符串，其中，<code>N</code>和<code>M</code>为字符串的索引序号，可以混合使用正向递增序号和反向递减序号。切片要求<code>N</code>和<code>M</code> 都在字符串的索引区间，如果<code>N</code>大于<code>M</code>，则返回空字符串。如果<code>N</code>缺失，则默认将<code>N</code>设为<code>0</code>；如果<code>M</code>缺失，则默认表示到字符串结尾。</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 字符串的切片操作</span>\n<span class=\"token comment\"># 字符串是不可变类型 不能进行 增 删 改 操作</span>\n<span class=\"token comment\"># 切片将产生新的对象</span>\ns <span class=\"token operator\">=</span> <span class=\"token string\">'hello,python'</span>\n<span class=\"token comment\"># print(s[start : end : step])</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 默认从字符串最后一个语速开始切，到字符串第一个元素结束</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a2f0ffe94e0646959bef36ecee081dd2.png\"/></p>\n<h3><a id=\"6212__2268\"></a>6.2.12 格式化字符串</h3>\n<ul><li>为什么要格式化字符串</li></ul>\n<blockquote>\n<p>在字符串中整合变量是需要使用字符串的格式化方法。<br/> 字符串格式化用于解决字符串和变量同时输出的格式安排问题。</p>\n</blockquote>\n<ul><li>格式化字符串的三种方式</li></ul>\n<ol><li> <p><code>%</code>作为占位符</p> </li><li> <p><code>{}</code>作为占位符’'.format()</p> </li><li> <p><code>f</code> ‘我叫<code>%s</code>，今年<code>%d</code>岁了’ <code>%s</code> 占了一个字符串 <code>%d</code> 占了一个整数</p> </li></ol>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9a7dfa85b4d64b0abcb819c7fc4801c0.png\"/><br/> <code>s = \"python\"</code></p>\n<ul><li><code>&lt;填充&gt;&lt;对齐&gt;&lt;宽度&gt;</code></li></ul>\n<table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td><code>{:25}.format(s)</code></td><td>默认左对齐</td></tr><tr><td><code>{:1}.format(s)</code></td><td>指定宽度为<code>1</code>，不足变量<code>s</code>的宽度，以实际变量宽度为准</td></tr><tr><td><code>{:^25}.format(s)</code></td><td>居中对齐</td></tr><tr><td><code>{:&gt;25}.format(s)</code></td><td>右对齐</td></tr><tr><td><code>{:*^25}.format(s)</code></td><td>居中对齐，填充<code>*</code>号</td></tr><tr><td><code>{:+^25}.format(s)</code></td><td>居中对齐填充<code>+</code>号</td></tr><tr><td><code>{:^1}.format(s)</code></td><td>指定宽度为<code>1</code>，不足变量<code>s</code>的宽度，以实际变量宽度为准</td></tr></tbody></table>\n<ul><li><code>&lt;,&gt;&lt;.精度&gt;&lt;类型&gt;</code>,其中，逗号<code>(,)</code>用于显示数字类型的千分位分隔符。</li></ul>\n<table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td><code>\"{:-^25,}\".format(1234567890)</code></td><td><code>'------1,234,567,890------'</code></td></tr><tr><td><code>\"{0:-^25}\".format(1234567890)</code></td><td><code>'-------1234567890--------'</code></td></tr></tbody></table>\n<ul><li><code>&lt;.精度&gt;</code>有小数点<code>(.)</code>开头。</li></ul>\n<table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td><code>\"{:2f}\".format(12345.6788890)</code></td><td><code>'12345.67'</code></td></tr><tr><td><code>\"{:25.3f}\".format(12345.67890)</code></td><td><code>' 12345.679'</code></td></tr><tr><td><code>\"{:.5}\".format(\"123456789\")</code></td><td><code>'12345</code>’</td></tr><tr><td><code>\"{:.15)\".format('123456789')</code></td><td><code>'123456789'</code></td></tr></tbody></table>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 格式化字符串</span>\n\nname <span class=\"token operator\">=</span> <span class=\"token string\">'张三'</span>\nage <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我叫%s,今年%d岁了'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># % 作为占位符</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我的名字是{0}，我今年{1}岁了'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># {} 作为占位符</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'我叫</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">，今年</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>age<span class=\"token punctuation\">}</span></span><span class=\"token string\">岁'</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 表示宽度 %10d</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%10d'</span> <span class=\"token operator\">%</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 表示小数点位数 %.nf  精度 :.n</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%.3f'</span> <span class=\"token operator\">%</span> <span class=\"token number\">3.78234685</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 三位小数</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{:.3}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.34638567</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 三位有效数字</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\be42f39bd6144e73aacfa0615daf0692.png\"/></p>\n<h3><a id=\"6213__2334\"></a>6.2.13 数值与字符串类型转换函数</h3>\n<table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>int(x)</code></td><td>将<code>x</code>转换为整数，<code>x</code>可以是浮点数或数字类字符串</td></tr><tr><td><code>folat(x)</code></td><td>将<code>x</code>转换为浮点数，<code>x</code>可以是整数或数字类字符串</td></tr><tr><td><code>str(x</code>)</td><td>将<code>x</code>转换为整数，<code>x</code>可以是整数或浮点数</td></tr></tbody></table>\n<hr/>\n<h2><a id=\"63__2344\"></a>6.3 字符串编码转换</h2>\n<h3><a id=\"631__2345\"></a>6.3.1 为什么要进行字符串编码转换</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e67af7a390b04666b5604a899d84f9d8.png\"/></p>\n<h3><a id=\"632__2349\"></a>6.3.2 编码与解码的方式</h3>\n<p><strong>编码</strong>：<code>s.encode()</code>将字符串转换为<code>二进制</code>数据(<code>bytes</code>)<br/> <strong>解码</strong>：<code>s.decode()</code>将<code>bytes</code>类型的数据转换成字符串类型</p>\n<pre><code class=\"prism language-python\">s <span class=\"token operator\">=</span> <span class=\"token string\">'人生苦短，我用Python！'</span>\n<span class=\"token comment\"># 编码</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span>encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf_8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># utf-8 一个中文占两个字节</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span>encoding<span class=\"token operator\">=</span><span class=\"token string\">'GBK'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># GBK 一个中文占三个字节</span>\n\n<span class=\"token comment\"># 解码</span>\nbyte <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span>encoding<span class=\"token operator\">=</span><span class=\"token string\">'GBK'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 编码</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>byte<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span>encoding<span class=\"token operator\">=</span><span class=\"token string\">'GBK'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 解码</span>\n<span class=\"token comment\"># 编码和解码格式要相同</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\73de2458c0954b59a35be66e2a8eaf80.png\"/></p>\n<hr/>\n<h1><a id=\"_2368\"></a>七、函数和代码复用</h1>\n<ul><li><a href=\"http://t.csdn.cn/lVMgk\">Python函数和代码复用</a></li></ul>\n<h2><a id=\"71__2371\"></a>7.1 函数的定义</h2>\n<p><strong>语法格式：</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span>  函数名 <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>参数列表<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    函数体\n    <span class=\"token keyword\">return</span> 返回值列表 \n</code></pre>\n<p>例：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/14 17:02</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 函数定义</span>\n    c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b\n    <span class=\"token keyword\">return</span> c\n</code></pre>\n<hr/>\n<h2><a id=\"72__2394\"></a>7.2 函数的调用</h2>\n<blockquote>\n<p>函数的定义也叫函数“声明”，定义后的函数不能直接运行，需要经过“调用”才能得到运行。</p>\n</blockquote>\n<p><strong>语法格式：</strong></p>\n<pre><code class=\"prism language-python\">函数名<span class=\"token punctuation\">(</span>实际赋值参数列表<span class=\"token punctuation\">)</span>\n</code></pre>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 函数创建</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 函数定义</span>\n    c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b\n    <span class=\"token keyword\">return</span> c\n\n<span class=\"token triple-quoted-string string\">'''\n函数调用:\n函数名（实际参数列表）'''</span>\nd <span class=\"token operator\">=</span> calc<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 函数调用</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 30</span>\n</code></pre>\n<hr/>\n<h2><a id=\"73__2417\"></a>7.3 函数的参数传递</h2>\n<blockquote>\n<p>函数的参数在定义时可以指定默认值，当函数被调用时，如果没人传入对应的参数时，则使用函数定义时的默认值替代。</p>\n</blockquote>\n<p><strong>语法格式</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span>  函数名<span class=\"token punctuation\">(</span>非可选参数列表<span class=\"token punctuation\">,</span>可选参数列表<span class=\"token operator\">=</span>默认值<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    函数体\n    <span class=\"token keyword\">return</span> 返回值列表 \n</code></pre>\n<h3><a id=\"731__2427\"></a>7.3.1 形式参数与实际参数</h3>\n<blockquote>\n<ul><li>函数定义处的参数称为形式参数</li><li>函数调用处的参数称为实际参数</li></ul>\n</blockquote>\n<h3><a id=\"732__2430\"></a>7.3.2 位置传参与关键字传参</h3>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/14 17:02</span>\n\n<span class=\"token comment\"># 函数的参数传递</span>\n<span class=\"token triple-quoted-string string\">'''\n1.位置传参 根据形参对应的位置进行参数传递\n2.关键字实参 根据形参名称进行参数传递\n'''</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># a b 为函数定义当处的形式参数</span>\n    c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b\n    <span class=\"token keyword\">return</span> c\n\n\ncalc<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 10 20 为函数调用处的实际参数</span>\n\n<span class=\"token comment\"># 位置实参</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>calc<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n\n<span class=\"token comment\"># =左侧的变量的名称称为关键字参数</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>calc<span class=\"token punctuation\">(</span>b<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> a<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f2379351d10a46ecb62a61e2d9445752.png\"/></p>\n<h3><a id=\"733__2459\"></a>7.3.3 可变对象与不可变对象的参数传递</h3>\n<blockquote>\n<p>在函数调用过程中，进行参的传递:</p>\n<ul><li>如果是不可变对象，函数体的修改不会影响实参的值</li><li>若果是可变对象，函数体的改变会影响到实参的值</li></ul>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/14 17:02</span>\n\n<span class=\"token triple-quoted-string string\">'''\n在函数调用过程中，进行参的传递:\n如果是不可变对象，函数体的修改不会影响实参的值\n若果是可变对象，函数体的改变会影响到实参的值\n'''</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arg1='</span><span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arg2='</span><span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span>\n    arg1 <span class=\"token operator\">=</span> <span class=\"token number\">100</span>  <span class=\"token comment\"># arg1 的修改为100不会影响n1的值</span>\n    arg2<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># are2 的修改会影响到n2的值</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arg1='</span><span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 100</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arg2='</span><span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [10, 20, 200]</span>\n    <span class=\"token keyword\">return</span> arg1<span class=\"token punctuation\">,</span> arg2\n\n\na <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nb <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 10</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [10, 20]</span>\nx <span class=\"token operator\">=</span> fun<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 位置传参 arg1，arg2时是函数定义处的形参，n1，n2是函数调用处的实参， 实参和形参的名称可以不一致</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 10</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [10, 20, 200]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (100, [10, 20, 200])</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2fc489e6842d4ad8ab3f2cff3b0cc5bd.png\"/></p>\n<h3><a id=\"734__2499\"></a>7.3.4 个数可变的位置、关键字参数</h3>\n<ul><li>个数可变的位置参数： <code>*arges</code></li></ul>\n<blockquote>\n<p>参数定义时，可能无法事先确定传递的位置实参的个数，使用可变的位置参数</p>\n</blockquote>\n<ul><li>个数可变的关键字形参：<code>**kwargs</code></li></ul>\n<blockquote>\n<p>参数定义时，可能无法事先确定传递的位置实参的个数，使用可变的位置参数</p>\n</blockquote>\n<blockquote>\n<p>在一个函数的定义过程中，既有个数可变的 <code>*arges</code>位置形参，又有个数可变的<code>**kwargs</code>关键字形参，要求把<code>位置形参</code>放在前面</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/14 17:02</span>\n\n\n<span class=\"token comment\"># 个数可变的位置参数 *arges</span>\n<span class=\"token comment\"># 参数定义时，可能无法事先确定传递的位置时参的个数，使用可变的位置参数</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 函数定义时，可变的位置参数</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 返回值为元组</span>\n    <span class=\"token comment\"># print(args[0])  返回元组的第1个对象</span>\n\n\nfun<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (10, )</span>\nfun<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (10, 20)</span>\nfun<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (11, 22, 33)</span>\n\n\n<span class=\"token comment\"># 个数可变的关键字形参</span>\n<span class=\"token comment\"># 参数定义时，可能无法事先确定传递的位置是参的个数，使用可变的位置参数</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>kwargs<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 返回值是 字典</span>\n\n\nfun<span class=\"token punctuation\">(</span>a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># {'a': 10}</span>\nfun<span class=\"token punctuation\">(</span>a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># {'a': 10, 'b': 20, 'c': 30}</span>\n\n<span class=\"token triple-quoted-string string\">'''\ndef fun2(*args,*a)\n    pass\n以上程序报错，个数可变的的位置参数值能有一个\ndef fun2(**kwargs)\n    pass\n个数可变的关键字参数也只能有一个\n'''</span>\n\n<span class=\"token comment\"># 在一个函数的定义过程中，既有个数可变的位置形参，又有个数可变的关键字形参，要求把位置形参放在前面</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n    \n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3c3dcc2fd3804a8888261b0dc976f706.png\"/></p>\n<h3><a id=\"735__2554\"></a>7.3.5 函数参数总结(一）</h3>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/14 17:02</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># a,b,c在函数定义处，所以是形式参数</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a='</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b='</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c='</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 函数调用</span>\nfun<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 函数调用时的参数传递，称为位置传参</span>\nlst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">]</span>\nfun<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>lst<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 函数调用，将列表中的每个元素都转换为位置实参传递</span>\n\nfun<span class=\"token punctuation\">(</span>a<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 函数调用，所以是关键字实参</span>\ndic <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">222</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">333</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>dic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 函数调用时，将字典中的键值对都转换为关键字实参传递</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7ab5df9262c64a2fb26e4ad2160f9819.png\"/></p>\n<h3><a id=\"736__2581\"></a>7.3.6 函数参数总结(二）</h3>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># a是形式参数</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b='</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 个数可变的位置形参</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun3</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 个数可变的关键字形参</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>kwargs<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 函数调用</span>\nfun<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nfun<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\nfun2<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\nfun3<span class=\"token punctuation\">(</span>a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--------------------------'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun4</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 需求 c,d 只能采用关键字实参传递</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a='</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b='</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c='</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d='</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># fun4(10, 20, 30, 40)   # 位置实参传递</span>\nfun4<span class=\"token punctuation\">(</span>a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> d<span class=\"token operator\">=</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 关键字实参传递</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--------------------------'</span><span class=\"token punctuation\">)</span>\nfun4<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> d<span class=\"token operator\">=</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 前面两个进行位置实参传递，后面两个采用关键字实参传递</span>\n\n<span class=\"token triple-quoted-string string\">''' 函数定义时的形参顺序问题'''</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun5</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun6</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun7</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f50e22d03cc14df2ae3834a2e966ffb9.png\"/></p>\n<hr/>\n<h2><a id=\"74__2636\"></a>7.4 函数的返回值</h2>\n<blockquote>\n<p>  <code>return</code>语句用来结束函数并将程序返回到函数调用的位置继续执行。<code>return</code>语句可以出现在函数中的任何部分，同时可以将<code>0</code>个、<code>1</code>个或多个函数运算的结果返回给函数被调用处的变量。</p>\n</blockquote>\n<p><strong>函数的返回值</strong></p>\n<blockquote>\n<ol><li>如果没有返回值(函数执行完毕后，不需要给调用处提供数据)，<code>return</code>可以<code>省略</code>不写</li><li>若果返回值为<code>1</code>个，直接返回类型<code>原类型</code></li><li>如果返回值为<code>多</code>个，返回结果为<code>元组</code></li></ol>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/14 17:02</span>\n\n<span class=\"token triple-quoted-string string\">'''\n函数的返回值:\n（1）如果没有返回值(函数执行完毕后，不需要给调用处提供数据)，return可以省略不写\n（2）若果返回值为1个，直接返回类型原类型\n（2）如果返回值为多个，返回结果为元组\n'''</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    odd <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    even <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> lst<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n            odd<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            even<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>odd<span class=\"token punctuation\">,</span> even<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> odd<span class=\"token punctuation\">,</span> even  <span class=\"token comment\"># 没有返回值，可以省略  如果返回值为多个，返回结果为元组</span>\n\n\nlst1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">57</span><span class=\"token punctuation\">,</span> <span class=\"token number\">67</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">,</span> <span class=\"token number\">89</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst1<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 函数调用</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">(</span>lst1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''函数定义时，是否需要返回值，视情况而定'''</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6535c43536854676b9d8c40762176a9b.png\"/></p>\n<hr/>\n<h2><a id=\"75__2681\"></a>7.5 变量的作用域</h2>\n<blockquote>\n<p>变量的作用域：程序代码能访问该变量的区域</p>\n</blockquote>\n<ol><li> <p><code>局部变量</code>：在函数内定义并使用的变量，只在函数内部有效，局部变量使用<code>global</code>声明，这个变量就会变成全局变量</p> </li><li> <p><code>全局变量</code>：函数体外定义的变量，可作用于函数内外</p> </li></ol>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/14 17:02</span>\n\n<span class=\"token comment\"># 变量的作用域:程序代码能访问该变量的区域</span>\n<span class=\"token triple-quoted-string string\">'''\n1.局部变量 在函数内定义并使用的变量，只在函数内部有效，局部变量使用global声明，这个变量就会变成全局变量\n2.全局变量 函数体外定义的变量，可作用于函数内外\n'''</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    c <span class=\"token operator\">=</span> a<span class=\"token operator\">+</span>b  <span class=\"token comment\"># c,在函数内定义的变称为局部变量  a,b为函数的形参，作用范围也在在函数内部，相当于局部变量</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n\n\nname <span class=\"token operator\">=</span> <span class=\"token string\">'阿伟'</span>  <span class=\"token comment\"># 函数外部定义的变量，全局变量，函数体内外都可以使用</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 阿伟</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 函数调用</span>\n\n\nfun2<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 阿伟</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 函数定义</span>\n    <span class=\"token keyword\">global</span> age  <span class=\"token comment\"># 函数内部定义的变量，局部变量  使用global声明，变量就变为全局变量</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 20</span>\n\n\nage <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\nfun3<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 函数调用</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 20</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\882cb9aad17f43638b46996663ec66a4.png\"/></p>\n<hr/>\n<h2><a id=\"76__2732\"></a>7.6 代码复用</h2>\n<blockquote>\n<p>  函数是程序的一种基本抽象方式，它将一系列代码组织起来通过命名供其他程序使用。<code>函数封装</code>的直接好处是代码复用，任何其他代码只要输入参数即可调用函数，从而避免相同功能的代码在被调用处重复编写。代码复用有另一个好处，当更新函数功能时，所有被调用处的功能都被更新。</p>\n</blockquote>\n<blockquote>\n<p>  程序由一系列代码组成，如果代码是顺序但无组织的，不仅不利于阅读和理解，也很难进行升级和维护。当程序长度在百行以上，如果不划分模块，程序的可读性就已经很糟糕了。解决这一问题最好的方法是将一个程序分割成短小的程序段，每一段程序完成一个小的功能。使用函数对合理划分为功能模块，并基于模块设计程序是一种常用方法，被称为“<code>模块化设计</code>”。</p>\n</blockquote>\n<blockquote>\n<p>  模块化设计是指函数的封装功能将程序划分成主程序、子程序和子程序间关系的表达。模块化设计是使用函数设计的思考方法， 以功能块为基本单位，一般有两个基本要求：</p>\n<ul><li><code>紧耦合</code>：尽可能合理划分功能块，功能块内部耦合紧密；</li><li><code>松耦合</code>：模块间关系尽可能简单，功能块之间耦合度低。</li></ul>\n</blockquote>\n<blockquote>\n<p>   使用函数只是模块化设计的必要非充分条件，根据计算需求合理划分函数十分重要。一般来说，完成特定功能或被经常复用的一组语句应该采用函数来封装，并尽可能减少函数间参数和返回值的数量。</p>\n</blockquote>\n<hr/>\n<h2><a id=\"77__2746\"></a>7.7 递归函数</h2>\n<h3><a id=\"771__2747\"></a>7.7.1 什么是递归函数</h3>\n<blockquote>\n<p>如果在一个函数的函数体内调用了该函数本身，这个函数就称为递归函数。</p>\n</blockquote>\n<h3><a id=\"772__2750\"></a>7.7.2 递归的组成部分</h3>\n<blockquote>\n<p><code>递归调用</code>与<code>递归终止条件</code> 。</p>\n</blockquote>\n<h3><a id=\"773__2753\"></a>7.7.3 递归的调用过程</h3>\n<blockquote>\n<p>每递归调用一次函数，都会在栈内存分配一个栈帧，每执行完一次函数，都会释放相应的空间。</p>\n</blockquote>\n<h3><a id=\"774__2756\"></a>7.7.4 递归的优缺点</h3>\n<blockquote>\n<p>缺点：<code>占用内存多，效率低下</code>；<br/> 优点：<code>思路和代码简单</code>。</p>\n</blockquote>\n<ul><li>使用递归函数计算阶乘</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 1.使用递归函数计算阶乘</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 阶乘函数</span>\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">elif</span> n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> fun<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 720</span>\n\n</code></pre>\n<ul><li>斐波那契数列</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 2.斐波那契数列 1 1 2 3 5 8 13 ...</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 斐波那契函数</span>\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">elif</span> n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> fib<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fib<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 求斐波那契数列的第 n 项</span>\n\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fib<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 8</span>\n\n</code></pre>\n<hr/>\n<h1><a id=\"_2794\"></a>八、异常处理机制</h1>\n<ul><li><a href=\"http://t.csdn.cn/Nfk4h\">Python异常处理机制</a></li></ul>\n<blockquote>\n<p>  <code>Python</code>程序一般对输入有一定要求，但当实际输入不满足程序要求时，可能会产生程序的运行错误。</p>\n</blockquote>\n<h2><a id=\"81_Bub_2798\"></a>8.1 Bub的由来及分类</h2>\n<h3><a id=\"811_Bug_2799\"></a>8.1.1 Bug的由来</h3>\n<blockquote>\n<p>  世界上第一部万用计算机的进化版-马克2号(<code>Mark II</code>)</p>\n</blockquote>\n<blockquote>\n<p>  1945年9月9日，下午三点。哈珀中尉正领着她的小组构造一个称为“<code>马克二型</code>”的计算机。这还不是一个完全的电子计算机，它使用了大量的继电器，一种电子机械装置。第二次世界大战还没有结束。哈珀的小组日以继夜地工作。机房是一间第一次世界大战时建造的老建筑。那是一个炎热的夏天，房间没有空调，所有窗户都敞开散热。</p>\n</blockquote>\n<blockquote>\n<p>  突然，马克二型死机了。技术人员试了很多办法，最后定位到第70号继电器出错。哈珀观察这个出错的继电器，发现一只飞蛾躺在中间，已经被继电器打死。她小心地用摄子将蛾子夹出来，用透明胶布帖到“事件记录本”中，并注明“第一个发现虫子的实例。”</p>\n</blockquote>\n<blockquote>\n<p>  从此以后，人们将计算机错误戏称为虫子（<code>bug</code>），而把找寻错误的工作称为（<code>debug</code>）。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4dd9c953f2c14a788cb1343e066b3c0c.png\"/></p>\n<h3><a id=\"812_Bug_2812\"></a>8.1.2 Bug常见类型</h3>\n<ol><li>粗心导致的错误</li></ol>\n<blockquote>\n<p>1.漏了末尾的冒号： <code>if</code> 循环语句、 <code>else</code> 语句等<br/> 2.缩进错误<br/> 3.英文符号写为中文符号<br/> 4.把字符串<code>str</code>和数字凭借在一起<br/> 5.<code>while</code>循环没有定义变量<br/> 6.比较运算符 <code>==</code> 和赋值运算符 <code>=</code> 混用</p>\n</blockquote>\n<pre><code class=\"prism language-python\">age <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入年龄:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># input函数返回值为str类型</span>\n<span class=\"token keyword\">if</span> age <span class=\"token operator\">&gt;</span> <span class=\"token number\">18</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'成年了'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ol start=\"2\"><li>知识不熟悉导致的错误</li></ol>\n<blockquote>\n<p>1.<code>index</code>索引越界<br/> 2.列表方法<code>lst.append</code></p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 索引越界</span>\nlst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># print(lst[4])</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 4</span>\n\n\n<span class=\"token comment\"># append()方法使用不熟练</span>\nlst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># lst = append(1, 2, 3)</span>\nlst<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 每次只能添加一个元素</span>\n</code></pre>\n<ol start=\"3\"><li>思路不清晰导致的错误</li></ol>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei</span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 10:22</span>\n\n<span class=\"token comment\"># 思路不清晰导致的问题 基础知识不牢固，练练练!!!</span>\nlst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'rating'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">9.7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2062397</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1292052'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'type'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'犯罪'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'剧情'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'title'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'肖申克的救赎'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'actors'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'蒂姆·罗宾斯'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'摩根·弗里曼'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'rating'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">9.6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1528760</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1291546'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'type'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'剧情'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'爱情'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'同性'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'title'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'霸王别姬'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'actors'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'张国荣'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'张丰毅'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'巩俐'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'葛优'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'rating'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">9.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1559181</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1292720'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'type'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'剧情'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'爱情'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'title'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'阿甘正传'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'actors'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'汤姆·汉克斯'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'罗宾·怀特 '</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">]</span>\n\nname <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入你要查询的演员:'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> lst<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 遍历列表lst  --&gt;{}  item是一个又一个的字典</span>\n    act_lst <span class=\"token operator\">=</span> item<span class=\"token punctuation\">[</span><span class=\"token string\">'actors'</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 通过item字典中的键actors获取值演员列表</span>\n    <span class=\"token keyword\">for</span> actor <span class=\"token keyword\">in</span> act_lst<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 遍历演员列表</span>\n        <span class=\"token keyword\">if</span> name <span class=\"token keyword\">in</span> actor<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">'出演了'</span><span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">[</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e5eea06dc2ac4d7eb578d839b8a7f70f.png\"/></p>\n<ol start=\"4\"><li>被动掉坑引起的错误</li></ol>\n<p><strong>除零异常</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 10:22</span>\n\na <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入第一个整数:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'情书如第二个整数:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nresult <span class=\"token operator\">=</span> a<span class=\"token operator\">/</span>b  <span class=\"token comment\"># 注意:0不可以做除数</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'输出结果为:'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\806f805e17464840ae316724c2942080.png\"/><br/> 解决办法</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 10:22</span>\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    a <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入第一个整数:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    b <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输如第二个整数:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> a <span class=\"token operator\">/</span> b  <span class=\"token comment\"># 注意:0不可以做除数</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}除{}等于{}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> ZeroDivisionError <span class=\"token keyword\">as</span> error<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b476ffb143034576a1cbfb4307c346fc.png\"/></p>\n<hr/>\n<h2><a id=\"82__2910\"></a>8.2 异常处理</h2>\n<blockquote>\n<p>  <code>Python</code>提供了异常处理机制，可以在异常出现时即时捕获，然后内部“<code>消化</code>”，让程序继续运行</p>\n</blockquote>\n<h3><a id=\"821_tryexception_2913\"></a>8.2.1 <code>try-exception</code>语句</h3>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  可能会出异常的代码\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">except</span> xxx<span class=\"token punctuation\">(</span>异常类型<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  异常处理代码\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n</code></pre>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 10:22</span>\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    a <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入第一个整数:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    b <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输如第二个整数:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> a <span class=\"token operator\">/</span> b  <span class=\"token comment\"># 注意:0不可以做除数</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'输出结果为:'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> ZeroDivisionError<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'对不起，除数不能为0'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'程序结束'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0581ea56d0ca4b3bae93ee5842d06e32.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a66d9994b8134bc4a2ea6dc8caa4aeef.png\"/></p>\n<h3><a id=\"822_except_2944\"></a>8.2.2 多个<code>except</code>语句</h3>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  可能会出异常的代码\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">except</span> Exception1<span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  异常处理代码\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">except</span> Exception2<span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  异常处理代码\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">except</span> BaseException<span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  异常处理代码\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n</code></pre>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 10:22</span>\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    a <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入第一个整数:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    b <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输如第二个整数:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> a <span class=\"token operator\">/</span> b  <span class=\"token comment\"># 注意:0不可以做除数</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'输出结果为:'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> ZeroDivisionError<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'对不起，除数不能为0'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'对不起，只能输入数字串'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'程序结束'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>正常输出：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a2d0efbdb4584c1b951a81a83ec65bac.png\"/><br/> 除零异常：<code>ZeroDivisionError</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2d21a7b81d1a4308aa9c5799f8aa1aa7.png\"/><br/> 值错误：<code>ValueError</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8603a54976c64060880435bfd1ab50cd.png\"/></p>\n<h3><a id=\"823_tryexceptelse_2989\"></a>8.2.3 <code>try-except-else</code>结构</h3>\n<blockquote>\n<p>如果 <code>try</code>中没有抛出异常，则执行<code>else</code>块；如果<code>try</code>中抛异常，则执行<code>except</code>块，<code>else</code>块不执行。</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 10:22</span>\n\n<span class=\"token comment\"># 如果 try中没有抛出异常，则执行else块，如果try中抛异常，则执行except块</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    a <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入第一个整数:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    b <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'情书如第二个整数:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> a <span class=\"token operator\">/</span> b  <span class=\"token comment\"># 注意:0不可以做除数</span>\n<span class=\"token keyword\">except</span> BaseException <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'出错了'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'计算结果为'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4daa590bfbae45f195dd3dcdc4e77681.png\"/></p>\n<h3><a id=\"824_tryexceptelsefinally_3009\"></a>8.2.4 <code>try-except-else-finally</code>结构</h3>\n<blockquote>\n<p><code>finally</code> 无论是否发生异常都会被执行，常用来解释<code>try</code>块中申请的资源</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 10:22</span>\n\n<span class=\"token triple-quoted-string string\">'''\ntry except else finally 结构\nfinally 无论是否发生异常都会被执行，能常用来解释try块中申请的资源\n'''</span>\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    a <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入第一个整数:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    b <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入第二个整数:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> a <span class=\"token operator\">/</span> b\n<span class=\"token keyword\">except</span> BaseException <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'出错了'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'结果为:'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'谢谢你的使用'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'程序结束'</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\73898fb1d2704c29a7e286b61add2a5f.png\"/></p>\n<h3><a id=\"825_traceback_3038\"></a>8.2.5 traceback模块</h3>\n<blockquote>\n<p>使用<code>traceback</code>模块打印异常信息</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : 8.trackback模块.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 16:01</span>\n\n\n<span class=\"token keyword\">import</span> traceback\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n    traceback<span class=\"token punctuation\">.</span>print_exc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c6e7bde2d98446398422060f124e5198.png\"/></p>\n<hr/>\n<h2><a id=\"83_Python_3061\"></a>8.3 Python常见异常类型</h2>\n<table><thead><tr><th>异常</th><th>描述</th></tr></thead><tbody><tr><td><code>ZeroDivisionError</code></td><td>除零异常</td></tr><tr><td><code>IndexError</code></td><td>列表中没有次索引(<code>index</code>) 注:索引从零开始</td></tr><tr><td><code>KeyError</code></td><td>映射中没有这个键 <code>dic['key']</code></td></tr><tr><td><code>NaneError</code></td><td>未声明/初始化对象 (没有属性)</td></tr><tr><td><code>SyntaxError</code></td><td><code>Python</code>语法错误</td></tr><tr><td><code>ValueError</code></td><td>传入无效参数</td></tr></tbody></table>\n<hr/>\n<h2><a id=\"84_PyCharm_3074\"></a>8.4 PyCharm程序调试</h2>\n<p>先看一段代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : PyCharm程序的调试.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 16:46</span>\n\n\ni <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\469947ffe6eb43168d44d7a39152e6d7.png\"/></p>\n<h3><a id=\"841__3089\"></a>8.4.1 断点</h3>\n<blockquote>\n<p>程序运行到此处，暂时挂起，停止执行。此时可以详细观察程序的运行情况，方便做出进一步的判断。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8dbed093ea0948b58b439ea5eb4529fe.png\"/></p>\n<h3><a id=\"842__3094\"></a>8.4.2 调试</h3>\n<p>进入调试视图的三种方式：</p>\n<p>(1)单击工具栏上的按钮<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\344194a8e2af41d194fd9808ede89d8a.png\"/></p>\n<p>(2)右键单击编辑区：点击：<code>debug’模块名’</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\936d61c8ad4f4a06829055504aeb2203.png\"/></p>\n<p>(3)快捷键：<code>shift+F9</code></p>\n<hr/>\n<h1><a id=\"_3106\"></a>九、类和对象</h1>\n<ul><li><a href=\"http://t.csdn.cn/YuDdM\">Python类和对象</a></li></ul>\n<h2><a id=\"91__3110\"></a>9.1 两大编程思想</h2>\n<h3><a id=\"911__3111\"></a>9.1.1 面向过程</h3>\n<blockquote>\n<p><code>面向过程</code>:事物比较简单，可以用线性思维取解决（<code>宏观上</code>）</p>\n</blockquote>\n<h3><a id=\"912__3114\"></a>9.1.2 面向对象</h3>\n<blockquote>\n<p><code>面向对象</code>:事物比较复杂，使用简单线性思维无法解决（<code>细节上</code>）</p>\n</blockquote>\n<blockquote>\n<p>共同点:面向过程和面向对象都是解决实际问题的一种思维方式</p>\n</blockquote>\n<blockquote>\n<p>二者相辅相成，并不是独立的,解决复杂问题，通过面向对象便于我们从宏观上把握事物之间复杂关系，方便我们分析整个系统；具体到微观操作，仍然使用面向过程来处理</p>\n</blockquote>\n<hr/>\n<h2><a id=\"92__3124\"></a>9.2 类和对象</h2>\n<h3><a id=\"921__3125\"></a>9.2.1 类</h3>\n<blockquote>\n<p><code>类(class)</code>:多个类似事物组成的群体统称，能够帮我们快速理解和判断事物的性质。</p>\n</blockquote>\n<blockquote>\n<p>数据类型:<br/> 1.不同数据类型属于不同的类<br/> 2.使用内置函数<code>type</code>查看数据类型</p>\n</blockquote>\n<h3><a id=\"922__3131\"></a>9.2.2 对象</h3>\n<blockquote>\n<p><code>对象(object)</code>：类的具体化 <code>Python</code>中一切皆对象，创建对象称为类的实例化</p>\n</blockquote>\n<h3><a id=\"923__3135\"></a>9.2.3 类的创建</h3>\n<p>创建类的语法：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> 类名<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n</code></pre>\n<blockquote>\n<p><code>类的组成</code>:</p>\n<ol><li>类属性 类中方法外的变量，被该类的所有对象所共享</li><li>实例方法 方法必须有第一个形参，通常叫做<code>self</code></li><li>静态方法 使用<code>@staticmethod</code>修饰，使用类名直接访问的方法</li><li>类方法 使用<code>@calassmethod</code>修饰，使用类名直接访问的方法</li></ol>\n</blockquote>\n<p>类的创建：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 21:24</span>\n\n<span class=\"token comment\"># 类的创建</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># Student 类名 由一个或多个单词组成，每个单词首字母大写，其余字母小写  Student称为类对象</span>\n    native_pace <span class=\"token operator\">=</span> <span class=\"token string\">'天津'</span>  <span class=\"token comment\"># 类属性</span>\n    name <span class=\"token operator\">=</span> <span class=\"token string\">'李华'</span>  <span class=\"token comment\"># 直接写在类里的变量（类中方法外的变量），称为 类属性：类中方法外的变量，被该类的所有对象所共享</span>\n    age <span class=\"token operator\">=</span> <span class=\"token number\">30</span>  <span class=\"token comment\"># 类属性</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 初始化方法方法</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name  <span class=\"token comment\"># self.name 称为实例属性，进行了一次赋值操作，将局部变量name的值赋给实例属性</span>\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 实例方法  方法必须有第一个形参，通常叫做 'self'</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'学生在吃饭'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>  <span class=\"token comment\"># 静态方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">se</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 在静态方法中不能写 self</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'静态方法'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token decorator annotation punctuation\">@classmethod</span>  <span class=\"token comment\"># 类方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">cm</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'类方法'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Python中一切皆对象，类Student也是对象</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>Student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 有内存空间</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>Student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 类型</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Student<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 值</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3d77b9a9841f400c8ea7e0fc320a4a59.png\"/></p>\n<h3><a id=\"924__3185\"></a>9.2.4 对象的创建</h3>\n<blockquote>\n<p>对象的创建又称类的实例化<br/> 意义:有了实例 就可以调用类中的内容</p>\n</blockquote>\n<p><code>语法</code>:</p>\n<pre><code class=\"prism language-python\">实例名<span class=\"token punctuation\">(</span>对象名<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> 类名<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 创建对象</span>\nstu1 <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># # 创建Student类的对象  stu1叫做实例对象</span>\n<span class=\"token comment\"># 对象三要素</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>stu1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># id标识</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>stu1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># type类型</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stu1<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># value值</span>\n</code></pre>\n<h3><a id=\"925__3202\"></a>9.2.5 方法调用</h3>\n<blockquote>\n<p>类属性，类方法，静态方法都是使用<code>类名.方法名</code>调用<br/> 实例方法采用<code>对象名.方法名</code>调用</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 调用方法</span>\nstu1<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 对象名.方法名  调用Student类中的eat方法</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stu1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stu1<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\nstu1<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 对象名.方法()   stu1--&gt;实际上就是方法定义处的self  调用Student类中的eat方法</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'----------类属性的使用方式----------'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Student<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\nstu2 <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\nstu3 <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Student<span class=\"token punctuation\">.</span>native_pace<span class=\"token punctuation\">)</span>\nStudent<span class=\"token punctuation\">.</span>native_pace <span class=\"token operator\">=</span> <span class=\"token string\">'吉林'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stu2<span class=\"token punctuation\">.</span>native_pace<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stu3<span class=\"token punctuation\">.</span>native_pace<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stu2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> stu2<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stu3<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> stu3<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'----------类方法的使用方式----------'</span><span class=\"token punctuation\">)</span>\nStudent<span class=\"token punctuation\">.</span>cm<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'----------静态方法的使用方式----------'</span><span class=\"token punctuation\">)</span>\nStudent<span class=\"token punctuation\">.</span>se<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\71cd4b21c684441ba4f1a2cdc2b2f6c9.png\"/></p>\n<h3><a id=\"926__3232\"></a>9.2.6 为对象动态绑定属性和方法</h3>\n<blockquote>\n<p>动态绑定属性：<code>对象名.属性 = \"值\"</code><br/> 动态绑定方法：<code>对象名.方法名 = 方法名</code></p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : 动态绑定属性和方法.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 22:25</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 初始化方法</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name  <span class=\"token comment\"># 将局部变量 name的值赋给实例属性self.name,为所有对象所共享</span>\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age  <span class=\"token comment\"># 局部变量 age的值赋给实例属性self.age</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 实例方法</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}在吃饭\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 创建对象</span>\nstu1 <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\nstu2 <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>stu1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2502200745408</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>stu2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2502201262576</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------为对象stu1动态绑定性别属性----------\"</span><span class=\"token punctuation\">)</span>\nstu1<span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> <span class=\"token string\">'女'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stu1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> stu1<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">,</span> stu1<span class=\"token punctuation\">.</span>gender<span class=\"token punctuation\">)</span>  <span class=\"token comment\">#张三 18 女</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stu2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> stu2<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 李四 20</span>\n\nstu1<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nstu2<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 在类外面定义函数fun</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'定义在类外的称为函数'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----------为stu1动态绑定方法-----------\"</span><span class=\"token punctuation\">)</span>\nstu1<span class=\"token punctuation\">.</span>fun <span class=\"token operator\">=</span> fun\nstu1<span class=\"token punctuation\">.</span>fun<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># stu2.fun()</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dd144c59ebaf420cb6d2e04fbba7e250.png\"/></p>\n<hr/>\n<h1><a id=\"_3281\"></a>十、面向对象三大特征</h1>\n<ul><li><a href=\"http://t.csdn.cn/VkmHv\">Python面向对象三大特征</a></li></ul>\n<h2><a id=\"101_3284\"></a>10.1封装</h2>\n<blockquote>\n<p><code>封装</code>：将属性和方法包装到类对象中，在方法内部对属性进行操作，在类对象外部调用方法。</p>\n</blockquote>\n<p>代码实现：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 23:27</span>\n\n\n<span class=\"token comment\"># 封装:提高程序的安全性</span>\n<span class=\"token comment\"># 将属性和方法包装到类对象中</span>\n<span class=\"token comment\"># 在方法内部对属性进行操作，在类对象外部调用方法</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> brand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>brand <span class=\"token operator\">=</span> brand  <span class=\"token comment\"># 实例属性</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 静态方法</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'汽车已启动...'</span><span class=\"token punctuation\">)</span>\n\n\ncar <span class=\"token operator\">=</span> Car<span class=\"token punctuation\">(</span><span class=\"token string\">'奥迪A8'</span><span class=\"token punctuation\">)</span>\ncar<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span>brand<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8c0c57301bba4dbfbbda1ea6da5f8bd5.png\"/></p>\n<blockquote>\n<p>如果不希望实例属性在类的外部被使用，可以在前面加上两个下划线\"<code>_</code>\"</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 23:27</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>__age <span class=\"token operator\">=</span> age  <span class=\"token comment\"># 如果不希望实例属性在类的外部被使用，所以在前面加上两个下划线</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>__age\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'吃'</span><span class=\"token punctuation\">)</span>\n\n\nstu1 <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'李华'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\nstu1<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 调用方法</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span>stu1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 查看对象可以用的属性</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-------------'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stu1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> stu1<span class=\"token punctuation\">.</span>_Student__age<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 在类外部通过_Student__age访问实例属性self.__age</span>\nstu1<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1f1716d7aa2d4fcf8dc42f38b917b99d.png\"/></p>\n<hr/>\n<h2><a id=\"102_3348\"></a>10.2继承</h2>\n<blockquote>\n<p><code>继承</code>:子类可以继承父类的属性和方法，提高代码的复用性。<br/> 如果一个对象没有继承任何类，则默认继承<code>objec</code>t类</p>\n</blockquote>\n<p>语法格式:</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> 子类名<span class=\"token punctuation\">(</span>父类<span class=\"token number\">1</span>，父类<span class=\"token number\">2</span>，<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n</code></pre>\n<p>代码实现：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 23:27</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> stu_nb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Student<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 继承父类的属性</span>\n        self<span class=\"token punctuation\">.</span>stu_nb <span class=\"token operator\">=</span> stu_nb  <span class=\"token comment\"># 新增属性</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>stu_nb\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Teach</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> teach_of_year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Teach<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>teach_of_year <span class=\"token operator\">=</span> teach_of_year\n\n\nstudent <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1001'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建对象</span>\nteacher <span class=\"token operator\">=</span> Teach<span class=\"token punctuation\">(</span><span class=\"token string\">'杨老师'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\nstudent<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nteacher<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span>__str__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span>stu_nb<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>teacher<span class=\"token punctuation\">.</span>teach_of_year<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1f21c5344b784e27bceab7f3a4d16856.png\"/></p>\n<h3><a id=\"1021__3401\"></a>10.2.1 方法重写</h3>\n<blockquote>\n<p>如果子类对继承自己父类的某个属性不满意，可以在子类对其（方法体）进行重新编写。</p>\n</blockquote>\n<blockquote>\n<p>子类重写后的方法通过 <code>super().方法名()</code> 调用父类中被重写的方法。</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 23:27</span>\n\n\n<span class=\"token comment\"># 如果子类对继承自己父类的某个属性不满意，可以在子类对其（方法体）进行重新编写</span>\n<span class=\"token comment\"># 子类重写后的方法通过 super()...方法名() 调用父类中被重写的方法</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> stu_nb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Student<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>stu_nb <span class=\"token operator\">=</span> stu_nb\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 方法重写</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 调用父类中方法</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'学号:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>self<span class=\"token punctuation\">.</span>stu_nb<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># f''格式化字符串</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Teach</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> teach_of_year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Teach<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>teach_of_year <span class=\"token operator\">=</span> teach_of_year\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 方法重写</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'教龄{0}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>teach_of_year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 格式化字符串</span>\n\n\nstudent <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1001'</span><span class=\"token punctuation\">)</span>\nteacher <span class=\"token operator\">=</span> Teach<span class=\"token punctuation\">(</span><span class=\"token string\">'杨老师'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\nstudent<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----------------'</span><span class=\"token punctuation\">)</span>\nteacher<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7903a3064ff24e72ae1d88a2f292eddb.png\"/></p>\n<h3><a id=\"1022_object_3455\"></a>10.2.2 object类</h3>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 23:27</span>\n\n\n<span class=\"token triple-quoted-string string\">'''\nobject 类是所有类的父类，所有类都有object类的属性和方法\n内置函数dir（）可以查看指定对象所有属性\nObject有一个__str__方法，用于返回一个对于”对象的描述\n对应内置函数str（）通常用于print（）方法，帮我们查看对象的信息，所以经常会对__str__进行重写“'''</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 重写父类object中的方法</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'我的名字是{0}，今年{1}岁了'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n\n\nstu <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 查看stu这个对象的所有属性和方法 从object类中继承的</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 默认调用__str__()这样的方法 输出:我的名字是张三，今年20岁了</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;class '__main__.Student'&gt;  Student类型</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1d9062591c874418a0afff7d2e894983.png\"/></p>\n<h3><a id=\"1023__3490\"></a>10.2.3 多重继承</h3>\n<blockquote>\n<p>一个子类可以有多个“直接父类”，这样，就具备了“多个父类”的特点，通过类的特殊属性<code>__mro__</code> 可以查看类的组织结构。</p>\n</blockquote>\n<blockquote>\n<p>定义子类时，必须在其构造函数中调用父类的构造函数</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 23:27</span>\n\n\n<span class=\"token comment\"># 多继承</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n</code></pre>\n<hr/>\n<h2><a id=\"103_3518\"></a>10.3多态</h2>\n<blockquote>\n<p><code>多态</code>:多态就是具有多种形态，即便不知道一个变量所引用的对象是什么类型，仍然可以使用这个变量调用方法，在运行过程中根据变量所引用的对象类型，动态决定调用那个对象中的方法。</p>\n</blockquote>\n<p>代码实现：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 23:27</span>\n\n\n<span class=\"token triple-quoted-string string\">''' \n多态:多态就是具有多种形态，即便不知道一个变量所引用的对象是什么类型，仍然可以使用这个变量调用方法，在运行过程中根据变量所引用的对象类型，动态决定调用那个对象中的方法'''</span>\n\n<span class=\"token comment\"># 动态语言多崇尚鸭子类型，当一只鸟走起来向鸭子，游起来以向鸭子，看起来也像鸭子，那么这只鸟及可以被称为鸭子</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'动物会吃'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'够吃骨头'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'猫吃小鱼'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'人吃五谷杂粮'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 定义一个函数</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>fun1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    fun1<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 调用对象的eat()方法</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 开始调用函数</span>\n    fun<span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Cat继承了Animal Dog继承了Animal</span>\n    fun<span class=\"token punctuation\">(</span>Cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Cat 和Dog是重写了父类中的eat方法，调用了自己重写后的内容</span>\n    fun<span class=\"token punctuation\">(</span>Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'------------------'</span><span class=\"token punctuation\">)</span>\n    fun<span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Person 没有继承关系 但是有eat方法，直接调用eat方法</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5ea3b0f28dbd4c35bfa09fce17d0205a.png\"/></p>\n<p><strong>动态语言与静态语言</strong></p>\n<blockquote>\n<p><code>Python</code>是一门动态语言，可以在创建对象后动态的绑定属性和方法，</p>\n</blockquote>\n<p>静态语言和动态语言关于多态的区别：</p>\n<blockquote>\n<p><code>静态语言</code>实现多态的三个必要条件(<code>Java</code>)<br/> 1. 继承<br/> 2. 方法重写<br/> 3. 父类引用指向子类对象</p>\n</blockquote>\n<blockquote>\n<p><code>动态语言</code>：(<code>Python)</code><br/> 动态语言的多态崇尚 “<code>鸭子类型</code>“ 一只鸟走起来像鸭子，游起来像鸭子，那么这只鸟就可以被称为鸭子。在鸭子类型中，不需要关心对象是什么类型，到底是不是鸭子，只关心对象的<code>行为</code>’‘’</p>\n</blockquote>\n<hr/>\n<h2><a id=\"104__3590\"></a>10.4 类的特殊属性和方法</h2>\n<h3><a id=\"1041__3592\"></a>10.4.1 特殊属性</h3>\n<table><thead><tr><th>特殊属性</th><th>描述</th></tr></thead><tbody><tr><td><code>__dict__</code></td><td>获得类对象或实例对象所绑定的所有属性的方法的字典</td></tr></tbody></table>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 23:27</span>\n\n\n<span class=\"token comment\"># 特殊属性 __dict__ 获得类对象或实例对象所绑定的所有 属性 或 方法 的字典</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 实例属性</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\"># 创建C类的对象</span>\n    x <span class=\"token operator\">=</span> C<span class=\"token punctuation\">(</span><span class=\"token string\">'Jack'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># x是C类的一个实例对象</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 获得实例对象属性的字典</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 获得类对象的属性和方法的字典</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----------------'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出对象所属的类</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">.</span>__bases__<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C类父类类型的元组  (&lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">.</span>__base__<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 类的基类  离C类最近的父类</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">.</span>__mro__<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 查看类的层次结构</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span>__subclasses__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 子类的列表</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\88aacc6a3cf5426a9e29303fd57a4390.png\"/></p>\n<h3><a id=\"1042__3639\"></a>10.4.2 特殊方法</h3>\n<table><thead><tr><th>特殊方法</th><th>描述</th></tr></thead><tbody><tr><td><code>__len__()</code></td><td>通过重写 <code>__len__()</code>方法，让内置函数<code>len()</code>的参数可以是自定义类型</td></tr><tr><td><code>__add__()</code></td><td>通过重写<code>__add__()</code>方法，可以让自定义对象具有<code>+</code>的功能</td></tr><tr><td><code>__new__()</code></td><td>用于创建对象</td></tr><tr><td><code>__init__()</code></td><td>对创建的对象进行初始化</td></tr></tbody></table>\n<h4><a id=\"__len_____add____3647\"></a><code>__len__()</code>方法和 <code>__add__()</code> 方法</h4>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 23:27</span>\n\n\n<span class=\"token comment\"># 1.特殊方法  __add__()</span>\n<span class=\"token comment\"># 通过重写 __add__()方法，可以使自定义对象具有 “+” 的功能</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\nc <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b  <span class=\"token comment\"># 两个整数类型的对象的相加操作</span>\nd <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>__add__<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">:</span>\n    sex <span class=\"token operator\">=</span> <span class=\"token string\">'女'</span>  <span class=\"token comment\"># 类属性</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 初始化方法</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__add__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 重写 __add__()方法 可以使自定义对象具有 “+” 的功能</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> other<span class=\"token punctuation\">.</span>name\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 重写 __len__方法 让自定义函数len()的参数可以是自定义类型</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n\n\nstu1 <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'Jack'</span><span class=\"token punctuation\">)</span>\nstu2 <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">)</span>\ns <span class=\"token operator\">=</span> stu1 <span class=\"token operator\">+</span> stu2  <span class=\"token comment\"># 实现了两个对象的加法运算（因为在Student类中 编写__add__()特殊的方法）</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2.特殊方法  __len__()</span>\n<span class=\"token comment\"># 通过重写__len__()方法，让自定义函数len()的参数可以是自定义类型</span>\nlst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># len是内置函数，可以计算列表的一个长度</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">.</span>__len__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 特殊方法</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>stu1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8b1346cc336745299117ce6422c5d611.png\"/></p>\n<h4><a id=\"__new___3694\"></a><code>__new__</code>方法</h4>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 23:27</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__new__</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 创建对象</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'__new__()方法被调用执行了，cls的id值为{0}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        obj <span class=\"token operator\">=</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__new__<span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建对象 obj</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'创建对象(obj)的id值为:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;class '__main__.Person'&gt;</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;__main__.Person object at 0x000001C8B13D9CA0&gt;</span>\n        <span class=\"token keyword\">return</span> obj\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 对对象的属性进行初始化</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'__init__()被调用执行了，self的id值为</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>nane <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'object这个类对象的id为:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Person这个类对象的id为:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 创建Person类的实例对象</span>\n    p1 <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'p1这个Person类的实例对象的id为</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a0db850ca06748d4a37b708528439ceb.png\"/></p>\n<h4><a id=\"__init___3730\"></a><code>__init__</code>方法</h4>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 23:27</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__new__</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 创建对象</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'__new__()方法被调用执行了，cls的id值为{0}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        obj <span class=\"token operator\">=</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__new__<span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建对象 obj</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'创建对象(obj)的id值为:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> obj\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 对对象的属性进行初始化</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'__init__()被调用执行了，self的id值为</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>nane <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'object这个类对象的id为:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Person这个类对象的id为:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 创建Person类的实例对象</span>\np1 <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'p1这个Person类的实例对象的id为</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\76cda310952f476bb8e14e5a23cc3730.png\"/></p>\n<hr/>\n<h2><a id=\"105__3765\"></a>10.5 变量的赋值操作</h2>\n<blockquote>\n<p>只是多生成了一个变量，实际上还是指向同一个对象</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># author : Flyme awei </span>\n<span class=\"token comment\"># 开发时间: 2022/7/1 15:32</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CPU</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Disk</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> cpu<span class=\"token punctuation\">,</span> disk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 给对象的实例属性进行初始化</span>\n        self<span class=\"token punctuation\">.</span>cpu <span class=\"token operator\">=</span> cpu\n        self<span class=\"token punctuation\">.</span>disk <span class=\"token operator\">=</span> disk\n\n\n<span class=\"token comment\"># 变量的赋值</span>\ncp1 <span class=\"token operator\">=</span> Computer<span class=\"token punctuation\">(</span>cpu<span class=\"token operator\">=</span><span class=\"token string\">'CPU'</span><span class=\"token punctuation\">,</span> disk<span class=\"token operator\">=</span><span class=\"token string\">'DISK'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建CPU类的实例对象</span>\ncp2 <span class=\"token operator\">=</span> cp1  \n<span class=\"token comment\"># 变量的赋值,一个对象的实例采用两个变量存储，实际上还是指向一个对象</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>cp1<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>cp1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>cp2<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>cp2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a8cbdaa68a8d45a7adb0eaec5dd59ab9.png\"/></p>\n<p><strong>赋值（=），就是创建了对象的一个新的引用，修改其中任意一个变量都会影响到另一个。</strong></p>\n<hr/>\n<h2><a id=\"106__3801\"></a>10.6 对象的浅拷贝和深拷贝</h2>\n<h3><a id=\"1061__3803\"></a>10.6.1 浅拷贝</h3>\n<blockquote>\n<p><code>Python</code>拷贝一般都是<code>浅拷贝</code>，拷贝时，对象包含的子对象内容不拷贝，因此，源对象与拷贝对象会引用同一个子对象。</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># author : Flyme awei </span>\n<span class=\"token comment\"># 开发时间: 2022/7/1 15:32</span>\n\n<span class=\"token keyword\">import</span> copy\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CPU</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Disk</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> cpu<span class=\"token punctuation\">,</span> disk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 给对象的实例属性进行初始化</span>\n        self<span class=\"token punctuation\">.</span>cpu <span class=\"token operator\">=</span> cpu\n        self<span class=\"token punctuation\">.</span>disk <span class=\"token operator\">=</span> disk\n\n\ncpu <span class=\"token operator\">=</span> CPU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建一个 CPU 类的实例对象</span>\ndisk <span class=\"token operator\">=</span> Disk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建一个Disk 类对象</span>\ncomputer <span class=\"token operator\">=</span> Computer<span class=\"token punctuation\">(</span>cpu<span class=\"token punctuation\">,</span> disk<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建一个Computer类的实例对象</span>\n\n<span class=\"token comment\"># 浅拷贝</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>cpu<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>disk<span class=\"token punctuation\">)</span>\ncomputer2 <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span>computer<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 子对象不拷贝</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>computer<span class=\"token punctuation\">,</span> computer<span class=\"token punctuation\">.</span>cpu<span class=\"token punctuation\">,</span> computer<span class=\"token punctuation\">.</span>disk<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>computer2<span class=\"token punctuation\">,</span> computer2<span class=\"token punctuation\">.</span>cpu<span class=\"token punctuation\">,</span> computer2<span class=\"token punctuation\">.</span>disk<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 类的浅拷贝:</span>\n<span class=\"token comment\"># Python的拷贝一般都是浅拷贝，拷贝时，对象包含的子对象内容不拷贝</span>\n<span class=\"token comment\"># 因此，源对象与拷贝对象会引用同一个子对象</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2e17e02207ca4906862628af4162d81b.png\"/></p>\n<p><strong>浅拷贝：创建一个新的对象，但它包含的是对原始对象中包含项的引用<br/> （如果用引用的方式修改其中一个对象，另外一个也会修改改变）</strong></p>\n<blockquote>\n<p>哪些是浅拷贝：</p>\n<ol><li>完全切片方法；</li><li>工厂函数，如<code>list()</code>；</li><li><code>copy</code>模块的<code>copy()</code>函数。</li></ol>\n</blockquote>\n<hr/>\n<h3><a id=\"1062__3857\"></a>10.6.2 深拷贝</h3>\n<blockquote>\n<p>使用<code>copy</code>模块的<code>deepcopy</code>函数，递归拷贝对象中包含的子对象，源对象和拷贝对象所有的子对象也不相同。</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># author : Flyme awei </span>\n<span class=\"token comment\"># 开发时间: 2022/7/1 15:32</span>\n\n<span class=\"token keyword\">import</span> copy\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CPU</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Disk</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> cpu<span class=\"token punctuation\">,</span> disk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 给对象的实例属性进行初始化</span>\n        self<span class=\"token punctuation\">.</span>cpu <span class=\"token operator\">=</span> cpu\n        self<span class=\"token punctuation\">.</span>disk <span class=\"token operator\">=</span> disk\n\n\ncpu <span class=\"token operator\">=</span> CPU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建一个 CPU 对象</span>\ndisk <span class=\"token operator\">=</span> Disk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建一个硬盘类对象</span>\ncomputer <span class=\"token operator\">=</span> Computer<span class=\"token punctuation\">(</span>cpu<span class=\"token punctuation\">,</span> disk<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建一个计算机类对象</span>\n\n<span class=\"token comment\"># 深拷贝</span>\ncomputer1 <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>deepcopy<span class=\"token punctuation\">(</span>computer<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>computer<span class=\"token punctuation\">,</span> computer<span class=\"token punctuation\">.</span>cpu<span class=\"token punctuation\">,</span> computer<span class=\"token punctuation\">.</span>disk<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>computer1<span class=\"token punctuation\">,</span> computer1<span class=\"token punctuation\">.</span>cpu<span class=\"token punctuation\">,</span> computer1<span class=\"token punctuation\">.</span>disk<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 类的深拷贝</span>\n<span class=\"token comment\"># 使用copy模块的deepcopy函数，递归拷贝对象中包含的子对象</span>\n<span class=\"token comment\"># 源对象和拷贝对象所有的子对象也不同</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4af3418bc8d64214b343f942eab09f8a.png\"/></p>\n<p><strong>深拷贝：创建一个新的对象，并且递归的复制它所包含的对象。</strong></p>\n<blockquote>\n<p>修改其中一个，另外一个不会改变。因此，新对象和原对象没有任何关联。<br/> 例如：{<!-- --><code>copy</code>模块的<code>deepcopy(</code>)函数}</p>\n</blockquote>\n<hr/>\n<h1><a id=\"_3905\"></a>十一、包和模块</h1>\n<ul><li><a href=\"http://t.csdn.cn/BUueF\">Python中的包和模块</a></li></ul>\n<h2><a id=\"111_Python_3908\"></a>11.1 Python中的模块</h2>\n<h3><a id=\"1111__3909\"></a>11.1.1 什么叫做模块</h3>\n<blockquote>\n<p>1.<code>模块</code>:英文名 <code>modules</code></p>\n</blockquote>\n<blockquote>\n<p>2.在<code>Python</code>中 一个拓展名为<code>.py</code>的文件就是一个模块</p>\n</blockquote>\n<blockquote>\n<p>3.函数与模块的关系：</p>\n<ul><li>包含语句</li><li>包含类<code>class</code></li><li>一个模块中可以包含<code>n</code>多个函数<code>def</code></li></ul>\n</blockquote>\n<blockquote>\n<p>4.使用模块的好处：</p>\n<ul><li>方便其它程序和脚本的导入</li><li>避免函数名和变量名冲突</li><li>提高代码的可维护性</li><li>提高代码的课重用性</li></ul>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/16 11:58</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 函数</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 类</span>\n    a <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>  <span class=\"token comment\"># 类属性</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 初始化方法</span>\n        self<span class=\"token punctuation\">.</span>name_ <span class=\"token operator\">=</span> name  <span class=\"token comment\"># 实例属性</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 实例方法</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">cm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'静态方法'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token decorator annotation punctuation\">@classmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">cs</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'类方法'</span><span class=\"token punctuation\">)</span>\n\n\na <span class=\"token operator\">=</span> <span class=\"token number\">10</span>  <span class=\"token comment\"># 变量</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\nc <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b  <span class=\"token comment\"># 语句</span>\n\n</code></pre>\n<h3><a id=\"1112__3963\"></a>11.1.2 导入模块</h3>\n<p><strong>创建模块：</strong></p>\n<blockquote>\n<p>新建一个<code>.py</code>文件，名称尽量不要与<code>python</code>自带的标准模块名相同</p>\n</blockquote>\n<p><strong>导入模块:</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> 模块名称 <span class=\"token keyword\">as</span> 别名  <span class=\"token comment\"># 导入模块中所有的</span>\n<span class=\"token keyword\">from</span> 模块名称 <span class=\"token keyword\">import</span> 函数<span class=\"token operator\">/</span>变量<span class=\"token operator\">/</span>类  <span class=\"token comment\"># 导入模块的指定内容</span>\n</code></pre>\n<p><strong>代码实现：</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/16 11:58</span>\n\n<span class=\"token keyword\">import</span> math  <span class=\"token comment\"># 导入关于数学运算的模块</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># module</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'----------------'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>pi<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 3.14...</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span><span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 幂 2**3=8</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>ceil<span class=\"token punctuation\">(</span><span class=\"token number\">9.435</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 取上整</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>floor<span class=\"token punctuation\">(</span><span class=\"token number\">9.35</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 取下整</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> pi  <span class=\"token comment\"># 导入模块指定的内容</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h3><a id=\"1113__3996\"></a>11.1.3 导入自定义模块</h3>\n<p><strong>自定义模块<code>calc</code></strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : calc.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/16 11:58</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">div</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token operator\">/</span>b\n</code></pre>\n<p><strong>导入自定义模块 <code>calc</code></strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> calc  <span class=\"token comment\"># 导入自定义模块 calc</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>calc<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>calc<span class=\"token punctuation\">.</span>div<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">from</span> calc <span class=\"token keyword\">import</span> add  <span class=\"token comment\"># 自定义导入calc模块的add方法</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">53</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e4ed516435624c70838d532c3d666c89.png\"/></p>\n<h3><a id=\"1114__4027\"></a>11.1.4 以主程序的方式运行</h3>\n<blockquote>\n<p>在每个模块的定义中都包含了一个记录模块名称的变量<code>__name__</code>,程序可以检查该变量，以确定他们在哪个模块中执行。</p>\n</blockquote>\n<blockquote>\n<p>如果一个模块不是被导入到其他程序中执行，那么它可能在解释器的顶级模块中执行。</p>\n</blockquote>\n<blockquote>\n<p>顶级模块<code>__name__</code>变量的值为<code>__main_</code>_</p>\n</blockquote>\n<p><strong>语句：</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">=</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n</code></pre>\n<p><strong>自定义模块<code>calc2</code></strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : calc2.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/16 11:58</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 只有当点击运行calc2模块时，才会执行运算</span>\n</code></pre>\n<p><strong>导入<code>calc2</code>模块</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 顶级模块__name__变量的值为__main__</span>\n<span class=\"token keyword\">import</span> calc2    <span class=\"token comment\"># 调用calc2的 add 模块</span>\n\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>calc2<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3847ab729e8544f1b9141bb32de4a23f.png\"/></p>\n<hr/>\n<h2><a id=\"112_Python_4067\"></a>11.2 Python中的包</h2>\n<blockquote>\n<p>1.包是一个分层次的目录结构，它将一组功能相近的模块组织在一个目录下</p>\n</blockquote>\n<blockquote>\n<p>2.包的作用:</p>\n<ul><li>代码规范</li><li>避免模块名称冲突</li></ul>\n</blockquote>\n<blockquote>\n<p>3.包与目录的区别:</p>\n<ul><li>包含<code>__init__.py</code>文件的目录称为<code>包</code></li><li>目录里通常不包含<code>__init__.py</code>文件</li></ul>\n</blockquote>\n<blockquote>\n<p>4.包的导入: <code>import 包名.模块名</code></p>\n</blockquote>\n<p><strong>包<code>package1</code>下面有<code>module_A</code>模块和<code>module_B</code>模块</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9510cc9f90d34226bf47b48db1edaa93.png\"/></p>\n<p><strong><code>module_A</code>模块</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : module_A.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/16 11:58</span>\n\n<span class=\"token comment\"># 包的导入</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n</code></pre>\n<p><strong><code>module_B</code>模块</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : module_B.py</span>\n<span class=\"token comment\"># @author: Flyme awei</span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/16 11:58</span>\n\nb <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n</code></pre>\n<p><strong>导入包<code>package1</code></strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">'''\n包的导入 \nimport 包名.模块名\n'''</span>\n\n<span class=\"token keyword\">import</span> package1<span class=\"token punctuation\">.</span>module_A <span class=\"token keyword\">as</span> ma  <span class=\"token comment\"># 导入包package1中的module_A模块</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ma<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 10</span>\n</code></pre>\n<p><strong>导入带有包的模块注意事项</strong></p>\n<blockquote>\n<p>1.使用<code>import</code>方式进行导入时，只能跟<code>包名</code>或<code>模块名</code></p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> package1\n<span class=\"token keyword\">import</span> package1<span class=\"token punctuation\">.</span>module_A\n<span class=\"token keyword\">import</span> calc\n</code></pre>\n<blockquote>\n<p>2.使用<code>from...import</code> 可以导入<code>包</code>，<code>模块</code>，<code>函数</code>，<code>变量</code></p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> package1 <span class=\"token keyword\">import</span> module_A  <span class=\"token comment\"># 导入模块module_A</span>\n<span class=\"token keyword\">from</span> package1<span class=\"token punctuation\">.</span>module_A <span class=\"token keyword\">import</span> a   <span class=\"token comment\"># 导入变量a</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 10</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d8183c1c2aa94b88a4021c976d342e5c.png\"/></p>\n<hr/>\n<h2><a id=\"113_Python_4137\"></a>11.3 Python中常用的内置模块</h2>\n<table><thead><tr><th>模块名</th><th>描述</th></tr></thead><tbody><tr><td><code>sys</code></td><td>与<code>python解释器</code>及环境相关的标准库</td></tr><tr><td><code>time</code></td><td>提供<code>时间</code>相关的各种函数标准库</td></tr><tr><td><code>os</code></td><td>提供访问<code>操作系统</code>服务功能的标准库</td></tr><tr><td><code>calendar</code></td><td>提供与<code>日期</code>相关的各种函数的标准库</td></tr><tr><td><code>urllib</code></td><td>用于读取来自网上(<code>服务器</code>)的数据标准库</td></tr><tr><td><code>json</code></td><td>用于使用<code>JSON</code>序列化和反序列化对象</td></tr><tr><td><code>re</code></td><td>用于在字符串中执行<code>正则表达式</code>匹配和替换</td></tr><tr><td><code>math</code></td><td>提供<code>标准运算</code>函数的标准库</td></tr><tr><td><code>decimal</code></td><td>用于进行精确控制运算精度、有效数位和四舍五入操作的<code>十进制运算</code></td></tr><tr><td><code>logging</code></td><td>提供了灵活的记录事件、错误、警告和调试信息等<code>日志信息</code>的功能</td></tr></tbody></table>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">'''\n模块名                        描述\n----------------------------------------------------------\n1.sys           与python解释器及环境相关的标准库\n\n2.time          提供时间相关的各种函数标准库\n\n3.os            提供访问操作系统服务功能的标准库\n\n4.calendar      提供与日期相关的各种函数的标准库\n\n5.urllib        用于读取来自网上(服务器)的数据标准库\n\n6.json          用于使用JSON序列化和反序列化对象\n\n7.re            用于在字符串中执行正则表达式匹配和替换\n\n8.math          提供标准运算函数的标准库\n\n9.decimal       用于进行精确控制运算精度、有效数位和四舍五入操作的十进制运算\n\n10.logging      提供了灵活的记录事件、错误、警告和调试信息等日志信息的功能\n'''</span>\n</code></pre>\n<h3><a id=\"1131sys_4176\"></a>11.3.1<code>sys</code>模块</h3>\n<p>与python解释器及环境相关的标准库</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> sys  <span class=\"token comment\"># 导入与python解释器和环境相关的标准库</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>getsizeof<span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 字节</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>getsizeof<span class=\"token punctuation\">(</span><span class=\"token number\">54</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>getsizeof<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>getsizeof<span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a37d3c69f86649cf9d7a90a9a8a1d634.png\"/></p>\n<h3><a id=\"1132_time_4188\"></a>11.3.2 <code>time</code>模块</h3>\n<p>提供与时间相关各种函数的标准库</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># time 提供与时间相关各种函数的标准库</span>\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ffb7cc5964b34950960e700a18473570.png\"/></p>\n<h3><a id=\"1133_os_4198\"></a>11.3.3 <code>os</code>模块</h3>\n<p>提供访问操作系统服务功能的标准库</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 提供访问操作系统服务功能的标准库</span>\n<span class=\"token keyword\">import</span> os\n</code></pre>\n<h3><a id=\"1134_urllib_4206\"></a>11.3.4 <code>urllib</code>模块</h3>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> urllib<span class=\"token punctuation\">.</span>request\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>urllib<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>urlopen<span class=\"token punctuation\">(</span><span class=\"token string\">'http://www.baidu.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9c154ce128c34c9198ed2437abd72934.png\"/></p>\n<hr/>\n<h2><a id=\"114__4216\"></a>11.4 第三方模块</h2>\n<h3><a id=\"1141__4217\"></a>11.4.1 第三方模块安装</h3>\n<p><strong><code>pip install 模块名</code></strong></p>\n<h3><a id=\"1142__4219\"></a>11.4.2 第三方模块使用</h3>\n<p><strong><code>import 模块名</code></strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> schedule\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">job</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'哈哈哈哈哈哈哈哈'</span><span class=\"token punctuation\">)</span>\n\n\nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>seconds<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    schedule<span class=\"token punctuation\">.</span>run_pending<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\52298371c73b4b1c9b0c6c9f0e7ce13e.png\"/></p>\n<hr/>\n<h1><a id=\"_4239\"></a>十二、文件操作</h1>\n<ul><li><a href=\"http://t.csdn.cn/6Xid9\">Python的文件操作</a></li></ul>\n<h2><a id=\"121__4242\"></a>12.1 编码格式介绍</h2>\n<p><strong>常见的字符编码格式</strong></p>\n<blockquote>\n<p><code>Python</code>的<code>解释器</code>使用的是<code>Unicode（内存）</code><br/> <code>Unicode</code> 定长编码：<code>2</code>个字节表示一个字符</p>\n</blockquote>\n<blockquote>\n<p><code>.py</code>文件放在磁盘上使用<code>UTF—8储存（外存）</code><br/> <code>UTF-8</code> 变长编码：<code>UTF-8</code>是<code>Unicode</code>的实现，<code>1-4</code>个字节表示一个字符，英文<code>1</code>个字节，汉字<code>3</code>个字节。</p>\n</blockquote>\n<p>新建<code>demo1.py</code>文件</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo1.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/17 10:45</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>记事本打开：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\730bc3e5b2cf44f3a6c94ebe0d4a19b0.png\"/></p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 不同的编码格式决定了占用磁盘空间的大小</span>\n<span class=\"token comment\"># coding:UTF-8  # 中文编码注释</span>\n<span class=\"token comment\"># encoding=gbk  # 编码格式</span>\n</code></pre>\n<hr/>\n<h2><a id=\"122__4273\"></a>12.2 文件读写原理</h2>\n<h3><a id=\"1221_IO_4275\"></a>12.2.1 文件的读写简称IO操作</h3>\n<p>输入<code>input</code>，输出<code>output</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1dd5b6412eb244d18a6a869f3d948d19.png\"/></p>\n<h3><a id=\"1222__4279\"></a>12.2.2 文件读写流程</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\328c3c0c50f44efd93b5c28376aa211b.png\"/></p>\n<h3><a id=\"1223__4282\"></a>12.2.3 操作原理:</h3>\n<blockquote>\n<p>文件操作原理</p>\n<ol><li>python操作文件</li><li>打开或新建文件<code>open</code></li><li>读，写文件<code>read、write</code></li><li>关闭资源<code>file.close()</code></li></ol>\n</blockquote>\n<hr/>\n<h2><a id=\"123__4291\"></a>12.3 文件读写操作</h2>\n<p><strong>内置函数<code>open()</code>创建文件对象</strong></p>\n<blockquote>\n<p>通过<code>IO</code>流将磁盘文件中的内容与程序中的对象中的内容进行同步</p>\n</blockquote>\n<p><strong>语法规则</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span>（filename<span class=\"token punctuation\">,</span> mode<span class=\"token operator\">=</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> buffering<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token boolean\">None</span>）\n<span class=\"token triple-quoted-string string\">\"\"\"\nfile  --&gt;被创建的文件对象\nopen  --&gt;创建文件对象的函数             \nfilename  --&gt;要创建或打开的文件名称\nmode  --&gt;打开模式默认为只读\nencoding  --&gt;字符编码格式        \n\"\"\"</span>\n</code></pre>\n<p>代码演示：<br/> <code>a.txt</code>文件<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\603ad206e3b54b82bf13d6ffb6edffc9.png\"/></p>\n<p><code>3.文件读写操作.py</code>文件</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : 3.文件读写操作.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/17 10:45</span>\n\n<span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># r 以只读模式打开文件，文件的指针将会放在文件的开头</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 返回值为一个列表</span>\n<span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\eb44d8423483484da5ff08eb3a3b8478.png\"/></p>\n<hr/>\n<h2><a id=\"124__4329\"></a>12.4 文件的打开开和关闭</h2>\n<h3><a id=\"1241__4330\"></a>12.4.1 文件的状态和操作过程</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\006ec7bc8d6340bd862c739987194f73.png\"/></p>\n<h3><a id=\"1242___4333\"></a>12.4.2 文件的打开模式</h3>\n<blockquote>\n<p><strong>文件类型</strong>：按文件中数据的组织形式，文件分为以下两大类：</p>\n</blockquote>\n<blockquote>\n<p>1.<code>文本文件</code>:存储的是普通“字符”文本，默认为Unicode字符集，可以使用记事本程序打开</p>\n</blockquote>\n<blockquote>\n<p>2.<code>二进制文件</code>:把数据内容以字节进行存储，无法用记事本打开，必须使用专用的文软件打开，举例:<code>MP3</code>音频文件 <code>JPG</code>图片 <code>.doc</code>文档等</p>\n</blockquote>\n<p>常用 的文件打开模式</p>\n<table><thead><tr><th>打开模式</th><th>描述</th></tr></thead><tbody><tr><td><code>r</code></td><td>以只读模式打开文件，文件的指针将会放在文件的开头</td></tr><tr><td><code>w</code></td><td>以只写方式打开文件，如果文件不存在就创建，如果文件存在则覆盖原有内容，文件指针放在开头</td></tr><tr><td><code>a</code></td><td>以追加模式打开文件，如果文件不存在则创建，文件指针在开头，如果文件存在，则在文件末尾追加内容，文件指针在原文末尾</td></tr><tr><td><code>b</code></td><td>以二进制方式打开文件，不能单独使用，需要与其它模式一起使用：<code>rb</code>或者<code>wb</code></td></tr><tr><td><code>+</code></td><td>以读写方式打开文件，不能单独使用，需要与其它模式一起使用，<code>a+</code></td></tr></tbody></table>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">'''\n打开模式                        描述\n---------------------------------------------------------------------------------------------------\n r          以只读模式打开文件，文件的指针将会放在文件的开头\n\n w          以只写方式打开文件，如果文件不存在就创建，如果文件存在则覆盖原有内容，文件指针放在开头\n\n a          以追加模式打开文件，如果文件不存在则创建，文件指针在开头，如果文件存在，则在文件末尾追加内容，文件指针在原文末尾\n\n b          以二进制方式打开文件，不能单独使用，需要与其它模式一起使用，rb,或者wb\n\n +          以读写方式打开文件，不能单独使用，需要与其它模式一起使用\n'''</span>\n</code></pre>\n<p>代码演示：</p>\n<pre><code class=\"prism language-python\"><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 只读</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 只写</span>\n<span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'hello.python'</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 追加</span>\n<span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'你好啊'</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nfile1 <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'logo.png'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 以二进制读</span>\nfile2 <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'copy_logo.png'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 以二进制写</span>\na <span class=\"token operator\">=</span> file1<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfile2<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 边读边写</span>\nfile1<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfile2<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a+'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 以读写方式打开</span>\n<span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'java'</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4f558eac7bfd42978d058d2d7018e645.png\"/></p>\n<p><code>a.txt</code>文件<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\25c6f82fa64c4a488e7c6822257eaea7.png\"/></p>\n<p><code>b.txt</code>文件<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a7aac48d6882443d919dabdc14628696.png\"/></p>\n<p><code>c.txt</code>文件<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b12d146da1bb47148c0d2b6adcc332f2.png\"/><br/> <code>logo.png</code>文件<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4d7995881d8642f68e468895421281e0.png\"/><br/> <code>copy_logo.png</code>文件<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0b55a2b565a9470181c85483b2c6dedd.png\"/></p>\n<h3><a id=\"1243__4403\"></a>12.4.3 文件的关闭</h3>\n<p><code>file.close()</code></p>\n<hr/>\n<h2><a id=\"125__4409\"></a>12.5 文件对象的常用方法</h2>\n<table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>read([size])</code></td><td>从文件中读取<code>size</code>个字节或字符返回，若省略<code>[size]</code>则读到文件末尾</td></tr><tr><td><code>readline()</code></td><td>从文本中读取一行内容</td></tr><tr><td><code>readlines()</code></td><td>把文本文件中每一行都作为独立的字符串对象，并将这些对象放回列表返回</td></tr><tr><td><code>write(str)</code></td><td>将字符串<code>str</code>内容写进文件</td></tr><tr><td><code>writelines(s_list)</code></td><td>将字符串列表<code>s_list</code>写入文本文件，不添加换行符</td></tr><tr><td><code>seek(offset,whence)</code></td><td>把文件指针移到新的位置，<code>offset</code>表示相对<code>whence</code>的位置；<code>offset</code>:为正往结束方向移动， <code>whence</code>不同的值呆鸟不同的含义；<code>0</code>:从文件开头开始计算； <code>1</code>:从文件当前位置开始计算</td></tr><tr><td><code>tell()</code></td><td>返回文件指针当前位置</td></tr><tr><td><code>flush()</code></td><td>缓冲区的内容写入文件，但不关闭文件</td></tr><tr><td></td><td></td></tr><tr><td><code>close()</code></td><td>把缓冲区内容写入文件，同事关闭文件，释放文件对象资源</td></tr></tbody></table>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n方法名                                      说明\n----------------------------------------------------------------------------------------\n1.read([size])               从文件中读取size个字节或字符返回，若省略[size]则读到文件末尾\n\n2.readline()                 从文本中读取一行内容\n\n3.readlines()                把文本文件中每一行都作为独立的字符串对象，并将这些对象放回列表返回\n\n4.write(str)                 将字符串内容写进文件\n\n5.writelines(s_list)         将字符串列表s_list写入文本文件，不添加换行符\n\n6.seek(offset, whence)      把文件指针移到新的位置，offset表示相对whence的位置:\n                             offset:为正往结束方向移动，\n                             whence不同的值呆鸟不同的含义:\n                             0:从文件开头开始计算 \n                             1:从文件当前位置开始计算\n                             2:从文件结尾开始计算\n\n7.tell()                     返回文件指针当前位置\n\n8.flush()                    把缓冲区的内容写入文件，但不关闭文件\n\n9.close()                    把缓冲区内容写入文件，同事关闭文件，释放文件对象资源\n\"\"\"</span>\n</code></pre>\n<hr/>\n<h2><a id=\"126_with_4455\"></a>12.6 <code>with</code>上下文管理</h2>\n<blockquote>\n<p><code>with</code>语句可以自动管理上下文资源，不论什么原因跳出<code>with</code>块，都能确保文件正常关闭，以此来达到释放资源的目的</p>\n</blockquote>\n<p><strong>语句:</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'logo.png'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> src_file<span class=\"token punctuation\">:</span> \n<span class=\"token comment\"># open('logo.png', 'rb')称为上下文表达式</span>\n    src_file<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  （<span class=\"token keyword\">with</span>语句体）<span class=\"token string\">\"\"</span>\"\n</code></pre>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'logo.png'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> src_file<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token comment\"># 不用写 file.close</span>\n</code></pre>\n<blockquote>\n<p>  <code>open('logo.png', 'rb')</code>称为<code>上下文表达式</code>，同时创建一个运行时上下文,自动调用<code>__enter__</code>方法，并将返回值赋给<code>src_file</code>, 实现了特殊方法<code>__enter__()</code>, <code>__exit__()</code>，遵守了上下文管理协议，这句表达式的对象就是上下文管理器，离开运行时上下文，自动调用上下文管理器的特殊方法</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># MyContentMgr实现了特殊方法__enter__(), __exit__()，称为该类对象遵守了上下文管理器协议</span>\n<span class=\"token comment\"># 该类对象的实例对象 MyContentMgr() 被称为上下文管理器</span>\n<span class=\"token comment\"># 类对象MyContentMgr的实例对象 MyContentMgr() 被称为上下文管理器</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyContentMgr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__enter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'enter方法被调用执行了'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> self\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__exit__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> exc_type<span class=\"token punctuation\">,</span> exc_val<span class=\"token punctuation\">,</span> exc_tb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'exit方法被调用执行了'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> self\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'show方法被调用执行了'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">with</span> MyContentMgr<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 相当于file = MyContentMgr()</span>\n    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fb8b7b144af2457581da68d0e0ccc341.png\"/></p>\n<p><strong><code>with</code>语句复制文件：</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># with语句 上下文管理器</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'logo.png'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> src_file<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'copy2logo.png'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> target_file<span class=\"token punctuation\">:</span>\n        target_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 不需要手动写关闭文件过程</span>\n</code></pre>\n<hr/>\n<h2><a id=\"127_os_4509\"></a>12.7 <code>os</code>模块</h2>\n<blockquote>\n<p>1.<code>OS</code>模块是<code>python</code>内置的与<code>操作系统功能</code>和<code>文件系统</code>相关的模块，该模块中的语句执行结果通常与操作系统有关,在不同操作系统上运行，得到的结果可能不一样.</p>\n</blockquote>\n<blockquote>\n<p>2.<code>os</code>模块于<code>os.path</code>模块用于对目录或文件进行操作</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 目录操作</span>\n<span class=\"token comment\"># os 与操作系统相关的一个模块</span>\n\n<span class=\"token keyword\">import</span> os\n\n<span class=\"token comment\"># os.system('notepad.exe')  # 打开记事本</span>\n<span class=\"token comment\"># os.system('calc.exe')  # 打开计算器</span>\n\n<span class=\"token comment\"># 直接打开可执行文件</span>\nos<span class=\"token punctuation\">.</span>startfile<span class=\"token punctuation\">(</span><span class=\"token string\">'C:\\\\Program Files\\\\Microsoft Office\\\\root\\\\Office16\\\\excel.exe'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 打开 Excel程序</span>\n\n</code></pre>\n<p><strong>打开记事本：</strong><br/> <code>os.system('notepad.exe')</code></p>\n<p><strong>打开计算器：</strong><br/> <code>os.system('calc.exe')</code></p>\n<h3><a id=\"1271_os_4532\"></a>12.7.1 <code>os</code>模块操作目录相关函数</h3>\n<p><code>os</code> 模块操作目录相关函数</p>\n<table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>getcwd()</code></td><td>返回当前工作目录</td></tr><tr><td><code>listdir(path)</code></td><td>返回指定路径下的文件和目录信息</td></tr><tr><td><code>mkdir(path[,mode])</code></td><td>创建目录</td></tr><tr><td><code>makedirs(path1/path2/...[,mode])</code></td><td>创建多级目录</td></tr><tr><td><code>rmdir(path)</code></td><td>删除目录</td></tr><tr><td><code>removedirs(path1/path2...)</code></td><td>删除多级目录</td></tr><tr><td><code>chdir(path)</code></td><td>将<code>path</code>设置为当前工作目录</td></tr></tbody></table>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># os 模块操作目录相关函数</span>\n<span class=\"token triple-quoted-string string\">\"\"\"\n函数                                            说明\n----------------------------------------------------------------------------\n1.getcwd()                                  返回当前工作目录\n\n2.listdir(path)                             返回指定路径下的文件和目录信息\n\n3.mkdir(path[,mode])                        创建目录\n\n4.makedirs(path1/path2/...[,mode])          创建多级目录\n\n5.rmdir(path)                               删除目录\n\n6.removedirs(path1/path2...)                删除多级目录\n\n7.chdir(path)                               将path设置为当前工作目录\n\"\"\"</span>\n</code></pre>\n<p><strong>代码实现：</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> os  <span class=\"token comment\"># 导入与操作系统和文件系统相关的模块</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 返回当前目录</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">'../chap15 文件'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 返回指定路径下的文件和目录信息</span>\n\n<span class=\"token comment\"># os.mkdir('new dir')  # 创建目录</span>\n\n<span class=\"token comment\"># os.makedirs('A/B/C')  # 创建多级内目录</span>\n\n<span class=\"token comment\"># os.rmdir('new dir')  # 删除目录</span>\n\n<span class=\"token comment\"># os.removedirs('A/B/C')  # 移除多级目录</span>\n\nos<span class=\"token punctuation\">.</span>chdir<span class=\"token punctuation\">(</span><span class=\"token string\">'/Python基础语法\\\\chap14 模块'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 将path设置为当前工作目录</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 返回当前工作目录</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\788b97ce13b0400c9500a0c1a4f85b79.png\"/></p>\n<h3><a id=\"1272_ospath_4585\"></a>12.7.2 <code>os.path</code>模块操作目录相关函数</h3>\n<p><code>os.path</code> 模块操作目录相关函数</p>\n<table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>abspath(path)</code></td><td>用于获取文件目录的绝对路径</td></tr><tr><td><code>exists(path)</code></td><td>用于判断文件或目录是否存在,如果存在返回<code>True</code>,否则返回<code>False</code></td></tr><tr><td><code>join(path,name)</code></td><td>将目录与目录或者文件名拼接起来</td></tr><tr><td><code>splitext()</code></td><td>分离文件名和拓展名</td></tr><tr><td><code>basename(path)</code></td><td>从一个目录中提取文件名</td></tr><tr><td><code>dirname(path)</code></td><td>从一个目录中提取文件名</td></tr><tr><td><code>isdir(path)</code></td><td>用于判断是否为路径</td></tr></tbody></table>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># os.path 模块操作目录相关函数</span>\n<span class=\"token triple-quoted-string string\">\"\"\"\n函数                                  说明\n----------------------------------------------------------------------\n1.abspath(path)                 用于获取文件目录的绝对路径\n\n2.exists(path)                  用于判断文件或目录是否存在,如果存在返回True,否则返回False\n\n3.join(path,name)               将目录与目录或者文件名拼接起来\n\n4.splitext()                    分离文件名和拓展名\n\n5.basename(path)                从一个目录中提取文件名\n\n6.dirname(path)                 从一个路径中提取文件路径，不包括文件名\n\n7.isdir(path)                   用于判断是否为路径\n\"\"\"</span>\n</code></pre>\n<p><strong>代码实现：</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> os<span class=\"token punctuation\">.</span>path\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>abspath<span class=\"token punctuation\">(</span><span class=\"token string\">'demo2.py'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 获取绝对路径</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token string\">'demo2.py'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 用于判断文件或目录是否存在,如果存在返回True,否则返回False</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string\">'E:\\\\python'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'demo13.py'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 将目录与目录或者文件名拼接起来</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'/Python基础语法\\\\chap15 文件'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 将目录与文件进行拆分</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>splitext<span class=\"token punctuation\">(</span><span class=\"token string\">'demo2.py'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 分开文件和拓展名</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>basename<span class=\"token punctuation\">(</span><span class=\"token string\">'/Python基础语法\\\\chap15 文件'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span><span class=\"token string\">'/Python基础语法\\\\chap15 文件'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isdir<span class=\"token punctuation\">(</span><span class=\"token string\">'/Python基础语法\\\\chap15 文件'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e2ecc641c4344f9b9be4e49e5ca64615.png\"/></p>\n<h3><a id=\"1273_py_4637\"></a>12.7.3 列出指定目录下的所有<code>.py</code>文件</h3>\n<p><strong>代码实现：</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 列出指定目录下的所有.py文件</span>\n<span class=\"token keyword\">import</span> os\npath <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 返回当前工作目录</span>\nlst <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 返回 path路径下的文件和目录信息</span>\n<span class=\"token keyword\">for</span> filename <span class=\"token keyword\">in</span> lst<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> filename<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'.py'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 列出.py文件    endswith--&gt;以什么结尾</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\045545c64e4849f8bf403801508748f2.png\"/></p>\n<h3><a id=\"1274__4650\"></a>12.7.4 遍历指定目录下所有的文件以及目录</h3>\n<p><strong>代码实现：<code>os.walk(path)</code></strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> os\n\npath <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nlst_files <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>walk<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 遍历指定目录下所有的文件以及目录</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst_files<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 返回值为一个生成器对象</span>\n<span class=\"token keyword\">for</span> dir_path<span class=\"token punctuation\">,</span> dir_name<span class=\"token punctuation\">,</span> file_name <span class=\"token keyword\">in</span> lst_files<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># print(dir_path)</span>\n    <span class=\"token comment\"># print(dir_name)</span>\n    <span class=\"token comment\"># print(file_name)</span>\n    <span class=\"token comment\"># print('----------------')</span>\n    <span class=\"token keyword\">for</span> dir_ <span class=\"token keyword\">in</span> dir_name<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>dir_path<span class=\"token punctuation\">,</span> dir_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----------------------------'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">in</span> file_name<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>dir_path<span class=\"token punctuation\">,</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<hr/>\n<blockquote>\n<p>Python基础语法到这里就结束啦！喜欢博主的可以给博主点个关注。<br/> </p>\n<h3><a id=\"Flyme_aweihttpsaweiablogcsdnnet_4675\"></a><code>个人主页</code>——&gt;<a href=\"https://aweia.blog.csdn.net/\">@Flyme awei</a></h3>\n<h3><a id=\"PythonPythonhttpsblogcsdnnetm0_68744965category_11957439html_4676\"></a><code>Python刷题</code>——&gt;《<a href=\"https://blog.csdn.net/m0_68744965/category_11957439.html\">牛客题库-Python篇</a>》</h3>\n<h3><a id=\"PythonPythonhttpsblogcsdnnetm0_68744965category_11877203html_4677\"></a><code>Python进阶学习</code>——&gt;《<a href=\"https://blog.csdn.net/m0_68744965/category_11877203.html\">Python进阶语法专栏</a>》</h3>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-09-04 10:25:48", "summary": "在这里插入图片描述在这里插入图片描述文章目录一、开发环境搭建解释器的安装集成开发环境安装二、基本语法元素程序的格式框架缩进注释续行符语法元素的名称变量保留字标识符数据类型二进制与字符编码数值类型字符串"}