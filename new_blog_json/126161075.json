{"blogid": "126161075", "writerAge": "码龄178天", "writerBlogNum": "58", "writerCollect": "3063", "writerComment": "3482", "writerFan": "4570", "writerGrade": "7级", "writerIntegral": "11991", "writerName": "XIN-XIANG荣", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126161075.jpg", "writerRankTotal": "1042", "writerRankWeekly": "53", "writerThumb": "4139", "writerVisitNum": "53211", "blog_read_count": "1452", "blog_time": "已于 2022-08-09 15:41:44 修改", "blog_title": "【Java】引用类型数组的理解与操作", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>活动地址：<a href=\"https://marketing.csdn.net/p/bdabfb52c5d56532133df2adc1a728fd\">CSDN21天学习挑战赛</a><br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/078b66f87e3c4e309d7f34d79c5776c4.gif#pic_center\"/><font size=\"4\">✨</font><font color=\"gray\" size=\"3\"><b>博客主页:</b></font><a href=\"https://blog.csdn.net/Trong_?spm=1000.2115.3001.5343\"><font color=\"\tLightSkyBlue\" size=\"3\"><b> XIN-XIANG荣</b></font></a><br/> <font size=\"4\">✨</font><font color=\"gray\" size=\"3\"><b>系列专栏:</b></font><a href=\"https://blog.csdn.net/trong_/category_11933690.html?spm=1001.2014.3001.5482\"><font color=\"\tLightSkyBlue\" size=\"3\"><b>【Java SE】</b></font></a><br/> <font size=\"4\">✨</font><font color=\"gray\" size=\"3\"><b>一句短话:</b></font><font color=\"\tCrimson\" size=\"3\"><b> 难在坚持,贵在坚持,成在坚持!</b></font><br/> <font size=\"4\">✨</font><font color=\"gray\" size=\"3\"><b>博客说明:</b></font><font color=\"RosyBrown\" size=\"3\"><b> 尽己所能，把每一篇博客写好，帮助自己熟悉所学知识，也希望自己的这些内容可以帮助到一些在学习路上的伙伴，文章中如果发现错误及不足之处，还望在评论区留言，我们一起交流进步！😊</b></font></p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_7\">前言</a></li><li><a href=\"#__9\">一. 数组的基本创建和使用</a></li><li><ul><li><a href=\"#1__13\">1. 数组的创建和初始化</a></li><li><ul><li><a href=\"#11__15\">1.1 创建格式</a></li><li><a href=\"#12__36\">1.2 数组的初始化</a></li></ul>\n</li><li><a href=\"#2__108\">2. 数组的基本使用</a></li><li><ul><li><a href=\"#21__110\">2.1 数组中的元素访问</a></li><li><a href=\"#23__133\">2.3 遍历数组</a></li></ul>\n</li></ul>\n</li><li><a href=\"#__160\">二. 数组是引用类型的介绍</a></li><li><ul><li><a href=\"#1_JVM_162\">1. 初识JVM的内存分布</a></li><li><a href=\"#2__182\">2. 基本类型变量与与引用类型变量的区别</a></li><li><a href=\"#3__206\">3. 图解理解引用变量</a></li><li><a href=\"#4_null_237\">4. 认识null</a></li></ul>\n</li><li><a href=\"#__255\">三. 数组作为方法的参数和返回值</a></li><li><ul><li><a href=\"#1__257\">1. 数组作为函数的参数</a></li><li><a href=\"#2__282\">2. 数组作为函数的返回值</a></li></ul>\n</li><li><a href=\"#__311\">四. 二维数组</a></li><li><ul><li><a href=\"#1__321\">1. 二维数组的创建和初始化</a></li><li><a href=\"#2__338\">2. 不规则数组</a></li><li><a href=\"#3__350\">3. 遍历二维数组</a></li><li><a href=\"#4__373\">4. 二维数组内存分布图解</a></li></ul>\n</li><li><a href=\"#_Arrays_379\">五. 操作数组的工具类Arrays</a></li><li><ul><li><a href=\"#1_toString_394\">1. toString</a></li><li><a href=\"#2_deepToString_404\">2. deepToString</a></li><li><a href=\"#3_copyOf_414\">3. copyOf</a></li><li><a href=\"#4_copyOfRange_424\">4. copyOfRange</a></li><li><a href=\"#5_arraycopyArrays_434\">5. arraycopy(拓展，不属于Arrays类)</a></li><li><a href=\"#6_cloneArrays_444\">6. clone(拓展，不属于Arrays类)</a></li><li><a href=\"#7_equals_454\">7. equals</a></li><li><a href=\"#8_fill_464\">8. fill</a></li><li><a href=\"#9_binarySearch_474\">9. binarySearch</a></li><li><a href=\"#10_sort_484\">10. sort</a></li><li><a href=\"#11_toString_494\">11. 模拟实现toString</a></li></ul>\n</li><li><a href=\"#_520\">结语</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_7\"></a>前言</h1>\n<p><font color=\"blue\" size=\"4\">😽本篇博客介绍java当中数组部分的相关知识，java当中的数组是对象，而数组类型是引用类型，对这两者之间的关系要有一定的理解；还在这里利用Array工具类去完成对数组的操作。</font></p>\n<h1><a id=\"__9\"></a>一. 数组的基本创建和使用</h1>\n<p>数组，可以看成是<strong>相同类型元素的一个集合</strong>，在内存中是一段连续的空间，每个空间有自己的编号，起始位置的编号为0，即数组的下标。</p>\n<h2><a id=\"1__13\"></a>1. 数组的创建和初始化</h2>\n<h3><a id=\"11__15\"></a>1.1 创建格式</h3>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> 数组名 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>T：表示数组中存放元素的类型</li><li>T[ ]：表示数组的类型</li><li>N：表示数组的长度</li></ul>\n<p>创建实例：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 创建一个可以容纳10个int类型元素的数组</span>\n<span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 创建一个可以容纳5个double类型元素的数组</span>\n<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 创建一个可以容纳3个字符串元素的数组</span>\n</code></pre>\n<h3><a id=\"12__36\"></a>1.2 数组的初始化</h3>\n<p>数组的初始化主要分为<strong>动态初始化</strong>和<strong>静态初始化</strong></p>\n<ol><li>动态初始化：在创建数组时，直接指定数组中元素的个数</li></ol>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ol><li>静态初始化：在创建数组时不直接指定数据元素个数，而直接将具体的数据内容进行指定</li></ol>\n<p><strong>语法格式</strong>：<code>T[] 数组名称 = {data1, data2, data3, ..., datan};</code></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array1 <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array2 <span class=\"token operator\">=</span> new <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nString<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array3 <span class=\"token operator\">=</span> new String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"hell\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Java\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>【注意事项】：</strong></p>\n<ul><li>静态初始化虽然没有指定数组的长度，编译器在编译时会根据{}中元素个数来确定数组的长度。</li><li>静态初始化时, { }中数据类型必须与[ ]前数据类型一致。</li><li>静态初始化可以简写，省去后面的new T[]。</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">// 注意：虽然省去了new T[], 但是编译器编译代码时还是会还原</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"hell\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Java\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>数组也可以按照如下C语言个数创建，不推荐</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/*\n该种定义方式不太友好，容易造成数组的类型就是int的误解\n[]如果在类型之后，就表示数组类型，因此int[]结合在一块写意思更清晰\n*/</span>\n<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>静态和动态初始化也可以分为两步，但是省略格式（ new T[] ）不可以</li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array1<span class=\"token punctuation\">;</span>\narray1 <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array2<span class=\"token punctuation\">;</span>\narray2 <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 注意省略格式不可以拆分, 否则编译失败</span>\n<span class=\"token comment\">// int[] array3;</span>\n<span class=\"token comment\">// array3 = {1, 2, 3};</span>\n</code></pre>\n<ul><li>如果没有对数组进行初始化，数组中元素是有默认值的、</li></ul>\n<ol><li>如果数组中存储元素类型为基类类型，默认值为基类类型对应的默认值，比如：</li></ol>\n<table><thead><tr><th>基本类型</th><th>默认值</th></tr></thead><tbody><tr><td>byte</td><td>0</td></tr><tr><td>short</td><td>0</td></tr><tr><td>int</td><td>0</td></tr><tr><td>long</td><td>0</td></tr><tr><td>float</td><td>0.0f</td></tr><tr><td>double</td><td>0.0</td></tr><tr><td>char</td><td>/u0000</td></tr><tr><td>boolean</td><td>false</td></tr></tbody></table>\n<ol start=\"2\"><li>如果数组中存储元素类型为引用类型，默认值为null 、</li></ol>\n<h2><a id=\"2__108\"></a>2. 数组的基本使用</h2>\n<h3><a id=\"21__110\"></a>2.1 数组中的元素访问</h3>\n<p>数组在内存中是一段连续的空间，空间的编号都是从0开始的，依次递增，该编号称为数组的下标，数组可以通过下标访问其任意位置的元素。</p>\n<p><strong>【注意事项】</strong></p>\n<ol><li>数组是一段连续的内存空间，因此支持随机访问，即通过下标访问快速访问数组中任意位置的元素</li><li>下标从0开始，介于[0, N）之间不包含N，N为元素个数，不能越界，否则会报出下标越界异常。</li></ol>\n<pre><code class=\"prism language-c\">public <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token comment\">// 数组中只有3个元素，下标一次为：0 1 2，array[3]下标越界</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>执行结果：</p>\n<p>抛出了 <code>java.lang.ArrayIndexOutOfBoundsException</code> 异常. 使用数组一定要下标谨防越界.</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\02019ef3a5f43e2b6cefe5926e97a29a.png\"/></p>\n<h3><a id=\"23__133\"></a>2.3 遍历数组</h3>\n<p>所谓 “<strong>遍历</strong>” <strong>是指将数组中的所有元素都访问一遍</strong>, <strong>访问是指对数组中的元素进行某种操作</strong>，比如：打印。<br/> 可以使用常见的for循环来打印数组，但首要条件是要知道数组的长度</p>\n<p><strong>注意：<strong>在数组中可以通过 <strong>数组对象</strong>.<strong>length</strong> 来获取</strong>数组的长度</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>也可以使用 <strong>for-each</strong> 遍历数组，但缺点是拿不到数组的下标</p>\n<p>for-each 是 for 循环的另外一种使用方式，也叫作增强for循环，能够更方便的完成对数组的遍历. 可以避免循环条件和更新语句写错.</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//遍历array,每拿到一个元素，就存到x中，然后再将x打印出来</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">:</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"__160\"></a>二. 数组是引用类型的介绍</h1>\n<h2><a id=\"1_JVM_162\"></a>1. 初识JVM的内存分布</h2>\n<p>内存是一段连续的存储空间，主要用来存储程序运行时数据的。比如：</p>\n<ol><li>程序运行时代码需要加载到内存</li><li>程序运行产生的中间数据要存放在内存</li><li>程序中的常量也要保存</li><li>有些数据可能需要长时间存储，而有些数据当方法运行结束后就要被销毁</li></ol>\n<p>如果对内存中存储的数据不加区分的随意存储，那对内存管理起来将会非常麻烦；因此JVM也对所使用的内存按照功能的不同进行了划分：<br/> <img alt=\"img\" src=\"..\\..\\static\\image\\bce7ec7cc3f55fdd3ca4d53f3b849c66.png\"/></p>\n<ul><li><strong>程序计数器</strong> (PC Register): 只是一个很小的空间, <strong>保存下一条执行的指令的地址</strong></li><li>**虚拟机栈(**JVM Stack): 与方法调用相关的一些信息，<strong>每个方法在执行时，都会先创建一个栈帧</strong>，栈帧中包含有：<strong>局部变量表、操作数栈、动态链接、返回地址</strong>以及其他的一些信息，保存的都是与方法执行时相关的一些信息。比如：局部变量。<strong>当方法运行结束后，栈帧就被销毁了，即栈帧中保存的数据也被销毁了</strong>。</li><li><strong>本地方法栈</strong>(Native Method Stack): 本地方法栈与虚拟机栈的作用类似. 只不过保存的内容是<strong>Native</strong>方法的局部变量. 在有些版本的 JVM 实现中(例如HotSpot), 本地方法栈和虚拟机栈是一起的</li><li><strong>堆</strong>(Heap): JVM所管理的最大内存区域. 使用 <strong>new 创建的对象都是在堆上保存</strong> (例如数组int[] arr = new int[]{1, 2, 3}的创建 )，<strong>堆是随着程序开始运行时而创建，随着程序的退出而销毁，堆中的数据只要还有在使用，就不会被销毁。</strong></li><li><strong>方法区</strong>(Method Area): 用于<strong>存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据</strong>. 方法编译出的的字节码就是保存在这个区域 。</li></ul>\n<p>要理解数组这部分内容我们只简单关心 <strong>堆</strong> 和 <strong>虚拟机栈</strong> 这两块空间即可。</p>\n<h2><a id=\"2__182\"></a>2. 基本类型变量与与引用类型变量的区别</h2>\n<ul><li>基本数据类型创建的变量，称为基本变量，该变量空间中直接存放的是其所对应的值</li><li>而<strong>引用数据类型创建的变量，一般称为对象的引用</strong>，其空间中存储的是对象所在空间的地址。</li><li><img alt=\"img\" src=\"..\\..\\static\\image\\855d2aab5e81bc18df2d696b4c3e5f07.png\"/></li></ul>\n<p><strong>引用变量并不直接存储对象本身，可以简单理解成存储的是对象在堆中空间的起始地址。通过该地址，引用变量便可以去操作对象</strong> 。类似于C语言中的指针，但是Java中引用要比指针的操作更简单 ，结合下面的代码进行理解：</p>\n<pre><code class=\"prism language-c\">public <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在上述代码中，a、b、arr，都是函数内部的变量，因此其空间都在main方法对应的栈帧中分配。<br/> a、b是内置类型的变量，因此其空间中保存的就是给该变量初始化的值。<br/> array是数组类型的引用变量，其内部保存的内容可以简单理解成是数组在堆空间中的首地址，当数组进行创建的时候是在堆空间中创建的对象，而array中存储数组对象的地址。</p>\n<p>java中的数组的内存分布要注意和C语言中的区分，不要混淆！</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\9bfbe10a8148de70127ca76daffa39e8.png\"/></p>\n<h2><a id=\"3__206\"></a>3. 图解理解引用变量</h2>\n<pre><code class=\"prism language-c\">public <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array1 <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        array1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        array1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n        array1<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n    \n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array2 <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        array2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n        array2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n    \n        array1 <span class=\"token operator\">=</span> array2<span class=\"token punctuation\">;</span>\n        array1<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n        array1<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">;</span>\n        array2<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>array2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\eae347724180285f2b12e9075723210a.png\"/></p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\0b5ebdaf55467c27a5d6e3e7d5d3b09b.png\"/></p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\500ed17c0a28961e0561184efcd50676.png\"/></p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\34d5d2667c9500da5d0714e7b2c3e3f4.png\"/></p>\n<h2><a id=\"4_null_237\"></a>4. 认识null</h2>\n<p>null 在 Java 中表示 “空引用” , 也就是一个不指向对象的引用;</p>\n<p>null 的作用类似于 C 语言中的 NULL (空指针), 都是表示一个无效的内存位置. 因此不能对这个内存进行任何读写操作. 一旦尝试读写, 就会抛出 <code>NullPointerException</code>异常。</p>\n<p><strong>注意：Java 中并没有约定 null 和 0 号地址的内存有任何关联</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>执行结果：</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\dca5cea6b714f3bde5114e6b0570ef34.png\"/></p>\n<h1><a id=\"__255\"></a>三. 数组作为方法的参数和返回值</h1>\n<h2><a id=\"1__257\"></a>1. 数组作为函数的参数</h2>\n<p>数组作为函数的参数实际上是引用变量作为实参，传递的是对象的地址，通过这个地址就可以访问对象，但要注意这里拿的是堆上的地址，java中是拿不到栈上的地址的。</p>\n<pre><code class=\"prism language-c\">public <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arr[0] = \"</span> <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\npublic <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a[0] = \"</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>   \n</code></pre>\n<p>执行结果：</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\a59a3adfe971923dc9283710384d5d5b.png\"/></p>\n<p>发现在func方法内部修改数组的内容, 方法外部的数组内容也发生改变.<br/> 因为数组是引用类型，按照引用类型来进行传递，是可以修改其中存放的内容的。</p>\n<p><strong>所谓的 “引用” 本质上只是存了一个地址. Java 将数组设定成引用类型, 这样的话后续进行数组参数传参, 其实只是将数组的地址传入到函数形参中. 这样可以避免对整个数组的拷贝(数组可能比较长, 那么拷贝开销就会很大)</strong></p>\n<h2><a id=\"2__282\"></a>2. 数组作为函数的返回值</h2>\n<p>比如：获取斐波那契数列的前N项</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestArray</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> \n        \n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> array<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> \n        <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"__311\"></a>四. 二维数组</h1>\n<p>二维数组本质上也就是一维数组, 只不过每个元素又是一个一维数组.；同理, 还存在 “三维数组”, “四维数组” 等更复杂的数组, 只不过出现频率都很低</p>\n<p><strong>基本语法</strong></p>\n<pre><code class=\"prism language-java\">数据类型<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> 数组名称 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> 数据类型 <span class=\"token punctuation\">[</span>行数<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>列数<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{<!-- --></span> 初始化数据 <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"1__321\"></a>1. 二维数组的创建和初始化</h2>\n<ul><li>动态初始化</li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array1 <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>静态初始化</li></ul>\n<p>注意：初始化时代表二维数组一行的 { } 必须给出</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrays <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"2__338\"></a>2. 不规则数组</h2>\n<p>Java允许创建不规则数组，即<strong>Java多维数组中各行的列数可以不同</strong>。</p>\n<p>创建不规则数组时，行数必须给出，而列数可以自己指定大小创建。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narray1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narray1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"3__350\"></a>3. 遍历二维数组</h2>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main5</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//第一种方法</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> array1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>array1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//第二种方法</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">:</span> array1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"4__373\"></a>4. 二维数组内存分布图解</h2>\n<p><strong>注意：Java当中的二维数组，行和行之间的内存空间是不连续的！</strong></p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\2c9240e48417cfaa13911f4190b8f557.png\"/></p>\n<h1><a id=\"_Arrays_379\"></a>五. 操作数组的工具类Arrays</h1>\n<p>Arrays类位于java . util包下，是一个对数组操作的工具类， 其中包含了一些操作数组的常用方法.</p>\n<p>Arrays类中的方法可以分为八类：</p>\n<ul><li>sort(对数组排序)</li><li>binarySearch（二分法查找数组中的元素）</li><li>equals（比较两个数组是否相等）</li><li>fill（对数组中的指定位置填充相同的内容）</li><li>copyOf（数组拷贝）</li><li>toString（以字符串形式输出数组）</li><li>asList（将数组转换为一个固定的List对象）</li><li>hashCode（计算数组的哈希值）</li></ul>\n<h2><a id=\"1_toString_394\"></a>1. toString</h2>\n<p>功能：</p>\n<ul><li>把一维层次的数组解析为一个字符串返回</li></ul>\n<p>使用实例：</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\d2f18103a1abc95e8a28ed5fa9ca04ad.png\"/></p>\n<h2><a id=\"2_deepToString_404\"></a>2. deepToString</h2>\n<p>功能：</p>\n<ul><li>可以把多维数组转换为字符串返回</li></ul>\n<p>使用实例：</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\d2b34494f0b5bf7b30ed1769e53e6480.png\"/></p>\n<h2><a id=\"3_copyOf_414\"></a>3. copyOf</h2>\n<p>功能：</p>\n<ul><li>实现数组的拷贝</li></ul>\n<p>使用实例：</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\4c2c5cbe4e834b2e15424293c508bff0.png\"/></p>\n<h2><a id=\"4_copyOfRange_424\"></a>4. copyOfRange</h2>\n<p>功能：</p>\n<ul><li>主要用于对一个已有的数组进行截取复制（局部拷贝），复制出一个左闭右开区间的数组。</li></ul>\n<p>使用实例：</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\9eda2a40371a7674dd5fc84f6bd1be8e.png\"/></p>\n<h2><a id=\"5_arraycopyArrays_434\"></a>5. arraycopy(拓展，不属于Arrays类)</h2>\n<p>功能：</p>\n<ul><li>实现数组的局部拷贝</li></ul>\n<p>使用实例：</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\b367a03982546eefc83c8f0edd2a78cb.png\"/></p>\n<h2><a id=\"6_cloneArrays_444\"></a>6. clone(拓展，不属于Arrays类)</h2>\n<p>功能：</p>\n<ul><li>实现对象的克隆，数组是对象，所以可以用作拷贝数组。</li></ul>\n<p>使用实例：</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\77bb68ec2d9760f2ad54dd620e316dce.png\"/></p>\n<h2><a id=\"7_equals_454\"></a>7. equals</h2>\n<p>功能：</p>\n<ul><li>比较俩个数组是否相等，相等返回true，不相等返回false</li></ul>\n<p>使用实例：</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\303b2c3c0f05570f2d0c180a92f9cfda.png\"/></p>\n<h2><a id=\"8_fill_464\"></a>8. fill</h2>\n<p>功能：</p>\n<ul><li>给数组中的元素填充为一个固定的值，可以完全填充也可以局部填充，局部填充时参数左必右开</li></ul>\n<p>使用实例：</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\b8718972731669ddc6ffdcfaa9789d88.png\"/></p>\n<h2><a id=\"9_binarySearch_474\"></a>9. binarySearch</h2>\n<p>功能：</p>\n<ul><li>查找数组中元素（二分查找），找到返回下标，找不到返回一个负数</li></ul>\n<p>使用实例：</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\fab82ed723fd7be76b475eb39ff3aa8f.png\"/></p>\n<h2><a id=\"10_sort_484\"></a>10. sort</h2>\n<p>功能：</p>\n<ul><li>将数组中的元素进行排序，默认排成升序</li></ul>\n<p>使用实例：</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\72399fad3d46f075b198e99dd4c27583.png\"/></p>\n<h2><a id=\"11_toString_494\"></a>11. 模拟实现toString</h2>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">myToString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>array <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"null\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token class-name\">String</span> ret <span class=\"token operator\">=</span> <span class=\"token string\">\"[\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        ret <span class=\"token operator\">+=</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            ret <span class=\"token operator\">+=</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    ret <span class=\"token operator\">+=</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">myToString</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_520\"></a>结语</h1>\n<p><font color=\"blue\" size=\"4\">各位小伙伴，看到这里就是缘分嘛，希望我的这些内容可以给你带来那么一丝丝帮助，可以的话三连支持一下呗😁！！！ 感谢每一位走到这里的小伙伴，我们可以一起学习交流，一起进步😉！！！加油🏃！！！</font></p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\f33106cefae9be2e9ab7a5d0c2fcff6e.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-08-09 15:41:44", "summary": "活动地址：天学习挑战赛在这里插入图片描述博客主页荣系列专栏一句短话难在坚持贵在坚持成在坚持博客说明尽己所能，把每一篇博客写好，帮助自己熟悉所学知识，也希望自己的这些内容可以帮助到一些在学习路上的伙伴，"}