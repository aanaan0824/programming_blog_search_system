{"blogid": "113979135", "writerAge": "码龄4年", "writerBlogNum": "116", "writerCollect": "1329", "writerComment": "34", "writerFan": "137", "writerGrade": "5级", "writerIntegral": "1893", "writerName": "nee~", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_113979135.jpg", "writerRankTotal": "21283", "writerRankWeekly": "33129", "writerThumb": "262", "writerVisitNum": "183905", "blog_read_count": "80041", "blog_time": "已于 2022-03-23 23:20:43 修改", "blog_title": "python——正则表达式(re模块)详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>在Python中需要通过正则表达式对字符串进⾏匹配的时候，可以使⽤⼀个python自带的模块，名字为re。</p>\n<p>正则表达式的大致匹配过程是：<br/> 1.依次拿出表达式和文本中的字符比较，<br/> 2.如果每一个字符都能匹配，则匹配成功；一旦有匹配不成功的字符则匹配失败。<br/> 3.如果表达式中有量词或边界，这个过程会稍微有一些不同。</p>\n<p>r：Python 中字符串的前导 <strong><code>r</code></strong> 代表<strong>原始字符串标识符</strong>，该字符串中的特殊符号不会被转义，适用于正则表达式中繁杂的特殊符号表示。 因此 <code>r\"\\n\"</code> 表示包含 <code>'\\'</code> 和 <code>'n'</code> 两个字符的字符串，而 <code>\"\\n\"</code> 则表示只包含一个换行符的字符串。</p>\n<pre><code class=\"language-python\">print(\"\\\\n\") # 输出 \\n\nprint(r\"\\n\") #输出 \\n</code></pre>\n<p>re模块的使用：import re</p>\n<h2><strong>re.match函数</strong></h2>\n<p>语法：re.match(pattern, string, flags=0)</p>\n<table align=\"center\"><tbody><tr><td>pattern</td><td>匹配的正则表达式</td></tr><tr><td>string</td><td>要匹配的字符串</td></tr><tr><td>flags</td><td> <p>标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。</p>\n<ol><li><strong>re.I</strong> 忽略大小写</li><li><strong>re.L</strong> 表示特殊字符集 \\w, \\W, \\b, \\B, \\s, \\S 依赖于当前环境</li><li><strong>re.M</strong> 多行模式</li><li><strong>re.S</strong> 即为 . 并且包括换行符在内的任意字符（. 不包括换行符）</li><li><strong>re.U</strong> 表示特殊字符集 \\w, \\W, \\b, \\B, \\d, \\D, \\s, \\S 依赖于 Unicode 字符属性数据库</li><li><strong>re.X</strong> 为了增加可读性，忽略空格和 # 后面的注释</li></ol></td></tr></tbody></table>\n<p>尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。匹配成功re.match方法返回一个匹配的对象。</p>\n<p>如果上⼀步匹配到数据的话，可以使⽤group⽅法来提取数据。以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。</p>\n<p>group()用来提出分组截获的字符串<strong>，</strong>（）用来分组，group() 同group（0）就是匹配正则表达式整体结果，group(1) 列出第一个括号匹配部分，group(2) 列出第二个括号匹配部分，group(3) 列出第三个括号匹配部分。没有匹配成功的，re.search()返回None。</p>\n<p>举例：</p>\n<pre><code>&gt;&gt;&gt; import re\n&gt;&gt;&gt; result = re.match(\"itcast\",\"itcast.cn\")\n&gt;&gt;&gt; result.group()\n'itcast'</code></pre>\n<p>从string头开始匹配pattern完全可以匹配，pattern匹配结束，同时匹配终止，后面的.cn不再匹配，返回匹配成功的信息。</p>\n<h3><strong>匹配单个字符</strong></h3>\n<table align=\"center\" cellspacing=\"0\"><tbody><tr><td style=\"vertical-align:middle;width:54pt;\"><span style=\"color:#000000;\">字符</span></td><td style=\"vertical-align:middle;width:364px;\"><span style=\"color:#000000;\">功能</span></td><td style=\"vertical-align:middle;width:628px;\">位置</td></tr><tr><td style=\"vertical-align:middle;\"><span style=\"color:#000000;\">.</span></td><td style=\"vertical-align:middle;width:364px;\"><span style=\"color:#000000;\">匹配任意1个字符（除了\\n）</span></td><td style=\"vertical-align:middle;width:628px;\"></td></tr><tr><td style=\"vertical-align:middle;\"><span style=\"color:#000000;\">[<span style=\"color:#000000;\"> ]</span></span></td><td style=\"vertical-align:middle;width:364px;\"><span style=\"color:#000000;\">匹配[ ]中列举的字符</span></td><td style=\"vertical-align:middle;width:628px;\"></td></tr><tr><td style=\"vertical-align:middle;\"><span style=\"color:#000000;\">\\d</span></td><td style=\"vertical-align:middle;width:364px;\"><span style=\"color:#000000;\">匹配数字，即0-9</span></td><td style=\"vertical-align:middle;width:628px;\">可以写在字符集[...]中</td></tr><tr><td style=\"vertical-align:middle;\"><span style=\"color:#000000;\">\\D</span></td><td style=\"vertical-align:middle;width:364px;\"><span style=\"color:#000000;\">匹配⾮数字，即不是数字</span></td><td style=\"vertical-align:middle;width:628px;\">可以写在字符集[...]中</td></tr><tr><td style=\"vertical-align:middle;\"><span style=\"color:#000000;\">\\s</span></td><td style=\"vertical-align:middle;width:364px;\"><span style=\"color:#000000;\">匹配空⽩，即空格，tab键</span></td><td style=\"vertical-align:middle;width:628px;\">可以写在字符集[...]中</td></tr><tr><td style=\"vertical-align:middle;\"><span style=\"color:#000000;\">\\S</span></td><td style=\"vertical-align:middle;width:364px;\"><span style=\"color:#000000;\">匹配⾮空⽩字符</span></td><td style=\"vertical-align:middle;width:628px;\">可以写在字符集[...]中</td></tr><tr><td style=\"vertical-align:middle;\"><span style=\"color:#000000;\">\\w</span></td><td style=\"vertical-align:middle;width:364px;\"><span style=\"color:#000000;\">匹配单词字符，即a-z、A-Z、0-9、_</span></td><td style=\"vertical-align:middle;width:628px;\">可以写在字符集[...]中</td></tr><tr><td style=\"vertical-align:middle;\"><span style=\"color:#000000;\">\\W</span></td><td style=\"vertical-align:middle;width:364px;\"><span style=\"color:#000000;\">匹配⾮单词字符</span></td><td style=\"vertical-align:middle;width:628px;\">可以写在字符集[...]中</td></tr><tr><td style=\"vertical-align:middle;\"><span style=\"color:#000000;\">\\w</span></td><td style=\"vertical-align:middle;width:364px;\"><span style=\"color:#000000;\">\\w 匹配单词字符，即a-z、A-Z、0-9、_</span></td><td style=\"vertical-align:middle;width:628px;\"></td></tr><tr><td style=\"vertical-align:middle;\"><span style=\"color:#000000;\">\\W</span></td><td style=\"vertical-align:middle;width:364px;\"><span style=\"color:#000000;\">匹配⾮单词字符</span></td><td style=\"vertical-align:middle;width:628px;\"></td></tr></tbody></table>\n<p>[...]字符集，对应的位置可以是字符集中任意字符。字符集中的字符可以逐个列出，也可以给出范围，比如[abc]和[a-c]，第一个字符如果是^表示取反。所有特殊字符（比如\"]\"\"-\"\"^\"）在字符集中都失去原来的含义，如要使用可把\"]\"\"-\"放在第一个字符，\"^\"放在非第一个字符。</p>\n<p>举例：</p>\n<pre><code>import re\nret = re.match(\".\",\"M\")\nprint(ret.group())\nret = re.match(\"t.o\",\"too\")\nprint(ret.group())\nret = re.match(\"t.o\",\"two\")\nprint(ret.group())\n# 如果hello的⾸字符⼩写，那么正则表达式需要⼩写的h\nret = re.match(\"h\",\"hello Python\")\nprint(ret.group())\n# 如果hello的⾸字符⼤写，那么正则表达式需要⼤写的H\nret = re.match(\"H\",\"Hello Python\")\nprint(ret.group())\n# ⼤⼩写h都可以的情况\nret = re.match(\"[hH]\",\"hello Python\")\nprint(ret.group())\nret = re.match(\"[hH]\",\"Hello Python\")\nprint(ret.group())\nret = re.match(\"[hH]ello Python\",\"Hello Python\")\nprint(ret.group())\n# 匹配0到9的多种写法\nret = re.match(\"[0123456789]Hello Python\",\"7Hello Python\")\nprint(ret.group())\nret = re.match(\"[0-9]Hello Python\",\"7Hello Python\")\nprint(ret.group())\n# 匹配0到3和5-9\nret = re.match(\"[0-35-9]Hello Python\",\"7Hello Python\")\nprint(ret.group())\nret = re.match(\"[0-35-9]Hello Python\",\"4Hello Python\")\n#print(ret.group())\nret = re.match(\"嫦娥\\d号\",\"嫦娥1号发射成功\")\nprint(ret.group())\nret = re.match(\"嫦娥\\d号\",\"嫦娥2号发射成功\")\nprint(ret.group())</code></pre>\n<p>结果：</p>\n<p>M<br/> too<br/> two<br/> h<br/> H<br/> h<br/> H<br/> Hello Python<br/> 7Hello Python<br/> 7Hello Python<br/> 7Hello Python<br/> 嫦娥1号<br/> 嫦娥2号</p>\n<h3><strong>匹配多个字符</strong></h3>\n<table align=\"center\" cellspacing=\"0\"><tbody><tr><td style=\"vertical-align:middle;width:54pt;\">字符</td><td style=\"vertical-align:middle;width:469px;\">功能</td><td style=\"vertical-align:middle;width:142px;\">位置</td><td style=\"vertical-align:middle;width:1px;\">表达式实例</td><td style=\"vertical-align:middle;width:120px;\">完整匹配的字符串</td></tr><tr><td style=\"vertical-align:middle;width:54pt;\"><span style=\"color:#000000;\">*</span></td><td style=\"vertical-align:middle;width:469px;\"><span style=\"color:#000000;\">匹配前⼀个字符出现0次或者⽆限次，即可有可⽆</span></td><td style=\"vertical-align:middle;width:142px;\">用在字符或(...)之后</td><td style=\"vertical-align:middle;width:1px;\">abc*</td><td style=\"vertical-align:middle;width:120px;\">abccc</td></tr><tr><td style=\"vertical-align:middle;\"><span style=\"color:#000000;\">+</span></td><td style=\"vertical-align:middle;width:469px;\"><span style=\"color:#000000;\">匹配前⼀个字符出现1次或者⽆限次，即⾄少有1次</span></td><td style=\"vertical-align:middle;width:142px;\">用在字符或(...)之后</td><td style=\"vertical-align:middle;width:1px;\">abc+</td><td style=\"vertical-align:middle;width:120px;\">abccc</td></tr><tr><td style=\"vertical-align:middle;\"><span style=\"color:#000000;\">?</span></td><td style=\"vertical-align:middle;width:469px;\"><span style=\"color:#000000;\">匹配前⼀个字符出现1次或者0次，即要么有1次，要么没有</span></td><td style=\"vertical-align:middle;width:142px;\">用在字符或(...)之后</td><td style=\"vertical-align:middle;width:1px;\">abc?</td><td style=\"vertical-align:middle;width:120px;\">ab,abc</td></tr><tr><td style=\"vertical-align:middle;\"><span style=\"color:#000000;\">{m}</span></td><td style=\"vertical-align:middle;width:469px;\"><span style=\"color:#000000;\">匹配前⼀个字符出现m次</span></td><td style=\"vertical-align:middle;width:142px;\">用在字符或(...)之后</td><td style=\"vertical-align:middle;width:1px;\">ab{2}c</td><td style=\"vertical-align:middle;width:120px;\">abbc</td></tr><tr><td style=\"vertical-align:middle;\"><span style=\"color:#000000;\">{m,n}</span></td><td style=\"vertical-align:middle;width:469px;\"><span style=\"color:#000000;\">匹配前⼀个字符出现从m到n次，若省略m，则匹配0到n次，若省略n，则匹配m到无限次</span></td><td style=\"vertical-align:middle;width:142px;\">用在字符或(...)之后</td><td style=\"vertical-align:middle;width:1px;\">ab{1,2}c</td><td style=\"vertical-align:middle;width:120px;\">abc,abbc</td></tr></tbody></table>\n<p>举例：</p>\n<pre><code>import re\n#：匹配出，⼀个字符串第⼀个字⺟为⼤写字符，后⾯都是⼩写字⺟并且这些⼩写字⺟可有可⽆\nret = re.match(\"[A-Z][a-z]*\",\"M\")\nprint(ret.group())\nret = re.match(\"[A-Z][a-z]*\",\"MnnM\")\nprint(ret.group())\nret = re.match(\"[A-Z][a-z]*\",\"Aabcdef\")\nprint(ret.group())\n#匹配出，变量名是否有效\nnames = [\"name1\", \"_name\", \"2_name\", \"__name__\"]\nfor name in names:\n    ret = re.match(\"[a-zA-Z_]+[\\w]*\",name)\n    if ret:\n        print(\"变量名 %s 符合要求\" % ret.group())\n    else:\n        print(\"变量名 %s ⾮法\" % name)\n#匹配出，0到99之间的数字\nret = re.match(\"[1-9]?[0-9]\",\"7\")\nprint(ret.group())\nret = re.match(\"[1-9]?\\d\",\"33\")\nprint(ret.group())\n# 这个结果并不是想要的，利⽤$才能解决\nret = re.match(\"[1-9]?\\d\",\"09\")\nprint(ret.group())\nret = re.match(\"[a-zA-Z0-9_]{6}\",\"12a3g45678\")\nprint(ret.group())\n#匹配出，8到20位的密码，可以是⼤⼩写英⽂字⺟、数字、下划线\nret = re.match(\"[a-zA-Z0-9_]{8,20}\",\"1ad12f23s34455ff66\")\nprint(ret.group())</code></pre>\n<p>结果：<br/> M<br/> Mnn<br/> Aabcdef<br/> 变量名 name1 符合要求<br/> 变量名 _name 符合要求<br/> 变量名 2_name ⾮法<br/> 变量名 __name__ 符合要求<br/> 7<br/> 33<br/> 0<br/> 12a3g4<br/> 1ad12f23s34455ff66</p>\n<h3><strong>匹配开头结尾</strong></h3>\n<table align=\"center\" cellspacing=\"0\" style=\"width:500pt;\"><tbody><tr><td style=\"vertical-align:middle;width:54pt;\"><span style=\"color:#000000;\">字符</span></td><td style=\"vertical-align:middle;width:54pt;\"><span style=\"color:#000000;\">功能</span></td></tr><tr><td style=\"vertical-align:middle;\"><span style=\"color:#000000;\">^</span></td><td style=\"vertical-align:middle;\"><span style=\"color:#000000;\">匹配字符串开头</span></td></tr><tr><td style=\"vertical-align:middle;\"><span style=\"color:#000000;\">$</span></td><td style=\"vertical-align:middle;\"><span style=\"color:#000000;\">匹配字符串结尾</span></td></tr></tbody></table>\n<p>举例：匹配163.com的邮箱地址</p>\n<pre><code>import re\nemail_list = [\"xiaoWang@163.com\", \"xiaoWang@163.comheihei\", \".com.xiaowang@qq.com\"]\nfor email in email_list:\n    ret = re.match(\"[\\w]{4,20}@163\\.com$\", email)\n    if ret:\n        print(\"%s 是符合规定的邮件地址,匹配后的结果是:%s\" % (email, ret.group()))\n    else:\n        print(\"%s 不符合要求\" % email)</code></pre>\n<p>结果：</p>\n<p>xiaoWang@163.com 是符合规定的邮件地址,匹配后的结果是:xiaoWang@163.com<br/> xiaoWang@163.comheihei 不符合要求<br/> .com.xiaowang@qq.com 不符合要求</p>\n<h3><strong>匹配分组</strong></h3>\n<table align=\"center\" cellspacing=\"0\"><tbody><tr><td style=\"vertical-align:middle;width:230px;\"><span style=\"color:#000000;\">字符</span></td><td style=\"vertical-align:middle;\"><span style=\"color:#000000;\">功能</span></td></tr><tr><td style=\"vertical-align:middle;width:230px;\"><span style=\"color:#000000;\">|</span></td><td style=\"vertical-align:middle;\"><span style=\"color:#000000;\">匹配左右任意⼀个表达式</span></td></tr><tr><td style=\"vertical-align:middle;width:230px;\"><span style=\"color:#000000;\">(ab)</span></td><td style=\"vertical-align:middle;\"><span style=\"color:#000000;\">将括号中字符作为⼀个分组</span></td></tr><tr><td style=\"vertical-align:middle;width:230px;\"><span style=\"color:#000000;\">\\num</span></td><td style=\"vertical-align:middle;\"><span style=\"color:#000000;\">引⽤分组num匹配到的字符串</span></td></tr><tr><td style=\"vertical-align:middle;width:230px;\"><span style=\"color:#000000;\">(?P&lt;name&gt;)</span></td><td style=\"vertical-align:middle;\"><span style=\"color:#000000;\">分组起别名，</span>匹配到的子串组在外部是通过定义的 <em>name</em> 来获取的</td></tr><tr><td style=\"vertical-align:middle;width:230px;\"><span style=\"color:#000000;\">(?P=name)</span></td><td style=\"vertical-align:middle;\"><span style=\"color:#000000;\">引⽤别名为name分组匹配到的字符串</span></td></tr></tbody></table>\n<p>举例：|</p>\n<pre><code>#匹配出0-100之间的数字\nimport re\nret = re.match(\"[1-9]?\\d$|100\",\"8\")\nprint(ret.group()) # 8\nret = re.match(\"[1-9]?\\d$|100\",\"78\")\nprint(ret.group()) # 78\nret = re.match(\"[1-9]?\\d$|100\",\"08\")\n# print(ret.group()) # 不是0-100之间\nret = re.match(\"[1-9]?\\d$|100\",\"100\")\nprint(ret.group()) # 100</code></pre>\n<p>举例：()</p>\n<pre><code>#需求：匹配出163、126、qq邮箱\nret = re.match(\"\\w{4,20}@163\\.com\", \"test@163.com\")\nprint(ret.group()) # test@163.com\nret = re.match(\"\\w{4,20}@(163|126|qq)\\.com\", \"test@126.com\")\nprint(ret.group()) # test@126.com\nret = re.match(\"\\w{4,20}@(163|126|qq)\\.com\", \"test@qq.com\")\nprint(ret.group()) # test@qq.com\nret = re.match(\"\\w{4,20}@(163|126|qq)\\.com\", \"test@gmail.com\")\nif ret:\n    print(ret.group())\nelse:\n    print(\"不是163、126、qq邮箱\") # 不是163、126、qq邮箱\n#不是以4、7结尾的⼿机号码(11位)\ntels = [\"13100001234\", \"18912344321\", \"10086\", \"18800007777\"]\nfor tel in tels:\n    ret = re.match(\"1\\d{9}[0-35-68-9]\", tel)\n    if ret:\n        print(ret.group())\n    else:\n        print(\"%s 不是想要的⼿机号\" % tel)\n#提取区号和电话号码\nret = re.match(\"([^-]*)-(\\d+)\",\"010-12345678\")\nprint(ret.group())\nprint(ret.group(1))\nprint(ret.group(2))</code></pre>\n<p>举例：\\number</p>\n<p>匹配数字代表的组合。每个括号是一个组合，组合从1开始编号。比如 <code>(.+) \\1</code> 匹配 <code>'the the'</code> 或者 <code>'55 55'</code>, 但不会匹配 <code>'thethe'</code> (注意组合后面的空格)。这个特殊序列只能用于匹配前面99个组合。如果 <em>number</em> 的第一个数位是0， 或者 <em>number</em> 是三个八进制数，它将不会被看作是一个组合，而是八进制的数字值。在 <code>'['</code> 和 <code>']'</code> 字符集合内，任何数字转义都被看作是字符。</p>\n<pre><code class=\"language-html\">例子1：匹配出 &lt;html&gt;hh&lt;/html&gt;</code></pre>\n<p>\\1,...,\\9，匹配第n个分组的内容。如例子所示，指匹配第一个分组的内容。</p>\n<pre><code>import re\n# 正确的理解思路：如果在第⼀对&lt;&gt;中是什么，按理说在后⾯的那对&lt;&gt;中就应该是什么。通过引⽤分组中匹配到的数据即可，但是要注意是元字符串，即类似 r\"\"这种格式。\nret = re.match(r\"&lt;([a-zA-Z]*)&gt;\\w*&lt;/\\1&gt;\", \"&lt;html&gt;hh&lt;/html&gt;\")\n# 因为2对&lt;&gt;中的数据不⼀致，所以没有匹配出来\ntest_label = [\"&lt;html&gt;hh&lt;/html&gt;\",\"&lt;html&gt;hh&lt;/htmlbalabala&gt;\"]\nfor label in test_label:\n    ret = re.match(r\"&lt;([a-zA-Z]*)&gt;\\w*&lt;/\\1&gt;\", label)\n    if ret:\n        print(\"%s 这是一对正确的标签\" % ret.group())\n    else:\n        print(\"%s 这是⼀对不正确的标签\" % label)</code></pre>\n<p>    结果：</p>\n<p>&lt;html&gt;hh&lt;/html&gt; 这是一对正确的标签<br/> &lt;html&gt;hh&lt;/htmlbalabala&gt; 这是⼀对不正确的标签</p>\n<p>    例子2：匹配出 &lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&lt;/html&gt;</p>\n<pre><code>import re\nlabels = [\"&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&lt;/html&gt;\", \"&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h2&gt;&lt;/html&gt;\"]\nfor label in labels:\n    ret = re.match(r\"&lt;(\\w*)&gt;&lt;(\\w*)&gt;.*&lt;/\\2&gt;&lt;/\\1&gt;\", label)\n    if ret:\n        print(\"%s 是符合要求的标签\" % ret.group())\n    else:\n        print(\"%s 不符合要求\" % label)</code></pre>\n<p>    结果：</p>\n<p>&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&lt;/html&gt; 是符合要求的标签<br/> &lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h2&gt;&lt;/html&gt; 不符合要求</p>\n<p><br/> 举例：(?P&lt;name&gt;) (?P=name)</p>\n<p>一个用于标记，一个用于在同一个正则表达式中复用</p>\n<pre><code>import re\nret = re.match(r\"&lt;(?P&lt;name1&gt;\\w*)&gt;&lt;(?P&lt;name2&gt;\\w*)&gt;.*&lt;/(?P=name2)&gt;&lt;/(?P=name1)&gt;\",\"&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&lt;/html&gt;\")\nret.group()\nret = re.match(r\"&lt;(?P&lt;name1&gt;\\w*)&gt;&lt;(?P&lt;name2&gt;\\w*)&gt;.*&lt;/(?P=name2)&gt;&lt;/(?P=name1)&gt;\",\"&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h2&gt;&lt;/html&gt;\")\n#ret.group()</code></pre>\n<h2>re.compile 函数</h2>\n<p>compile 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 match() 和 search() 这两个函数使用。</p>\n<pre><code class=\"language-html\">prog = re.compile(pattern)\nresult = prog.match(string)</code></pre>\n<p>等价于</p>\n<pre><code class=\"language-html\">result = re.match(pattern, string)</code></pre>\n<p>举例：</p>\n<pre><code>&gt;&gt;&gt;import re\n&gt;&gt;&gt; pattern = re.compile(r'\\d+')   \nm = pattern.match('one12twothree34four', 3, 10) # 从'1'的位置开始匹配，正好匹配\n&gt;&gt;&gt; print m                                         # 返回一个 Match 对象\n&lt;_sre.SRE_Match object at 0x10a42aac0&gt;\n&gt;&gt;&gt; m.group(0)   # 可省略 0\n'12'\n&gt;&gt;&gt; m.start(0)   # 可省略 0\n3\n&gt;&gt;&gt; m.end(0)     # 可省略 0\n5\n&gt;&gt;&gt; m.span(0)    # 可省略 0\n(3, 5)</code></pre>\n<p>在上面，当匹配成功时返回一个 Match 对象，其中：</p>\n<ul><li><code>group([group1, …])</code> 方法用于获得一个或多个分组匹配的字符串，当要获得整个匹配的子串时，可直接使用 <code>group()</code> 或 <code>group(0)</code>；</li><li><code>start([group])</code> 方法用于获取分组匹配的子串在整个字符串中的起始位置（子串第一个字符的索引），参数默认值为 0；</li><li><code>end([group])</code> 方法用于获取分组匹配的子串在整个字符串中的结束位置（子串最后一个字符的索引+1），参数默认值为 0；</li><li><code>span([group])</code> 方法返回 <code>(start(group), end(group))</code></li></ul>\n<h2>re.search函数</h2>\n<p>re.search 扫描整个字符串并返回第一个成功的匹配，如果没有匹配，就返回一个 <code>None</code>。</p>\n<p>re.match与re.search的区别：re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配</p>\n<p>举例：</p>\n<pre><code>import re\nret = re.search(r\"\\d+\", \"阅读次数为9999\")\nprint(ret.group())</code></pre>\n<p>结果：</p>\n<p>9999</p>\n<h2>re.findall函数</h2>\n<p>在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。注意<strong>：</strong> match 和 search 是匹配一次 findall 匹配所有。</p>\n<p>举例：</p>\n<pre><code>import re\nret = re.findall(r\"\\d+\", \"python = 9999, c = 7890, c++ = 12345\")\nprint(ret)</code></pre>\n<p>结果：</p>\n<p>['9999', '7890', '12345']</p>\n<h2>re.finditer函数</h2>\n<p>和 findall 类似，在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个迭代器返回。</p>\n<pre><code>import re\nit = re.finditer(r\"\\d+\", \"12a32bc43jf3\")\nfor match in it:\n    print(match.group())</code></pre>\n<p>结果：</p>\n<p>12<br/> 32<br/> 43<br/> 3</p>\n<h2>re.sub函数</h2>\n<p>sub是substitute的所写，表示替换，将匹配到的数据进⾏替换。</p>\n<p>语法：re.sub(pattern, repl, string, count=0, flags=0)</p>\n<table align=\"center\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\"><tbody><tr><td>参数</td><td>描述</td></tr><tr><td>pattern</td><td>必选，表示正则中的模式字符串</td></tr><tr><td>repl</td><td>必选，就是replacement，要替换的字符串，也可为一个函数</td></tr><tr><td>string</td><td>必选，被替换的那个string字符串</td></tr><tr><td>count</td><td>可选参数，<em>count</em> 是要替换的最大次数，必须是非负整数。如果省略这个参数或设为 0，所有的匹配都会被替换</td></tr><tr><td>flag</td><td>可选参数，标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。</td></tr></tbody></table>\n<p>举例：将匹配到的阅读次数加1</p>\n<p>方法一：</p>\n<pre><code>import re\nret = re.sub(r\"\\d+\", '998', \"python = 997\")\nprint(ret)</code></pre>\n<p>结果：python = 998</p>\n<p>方法二：</p>\n<pre><code>import re\ndef add(temp):\n    #int（）参数必须是字符串，类似字节的对象或数字，而不是“re.Match”\n    strNum = temp.group()\n    num = int(strNum) + 1\n    return str(num)\nret = re.sub(r\"\\d+\", add, \"python = 997\")\nprint(ret)\nret = re.sub(r\"\\d+\", add, \"python = 99\")\nprint(ret)</code></pre>\n<p>结果;</p>\n<p>python = 998<br/> python = 100</p>\n<h2>re.subn函数</h2>\n<p>行为与<code>sub()</code>相同，但是返回一个元组 <code>(字符串, 替换次数)</code>。</p>\n<p>re.subn(pattern, repl, string[, count])</p>\n<p>返回：(sub(repl, string[, count]), 替换次数)</p>\n<pre><code>import re\npattern = re.compile(r'(\\w+) (\\w+)')\ns = 'i say, hello world!'\nprint(re.subn(pattern, r'\\2 \\1', s))\ndef func(m):\n    return m.group(1).title() + ' ' + m.group(2).title()\nprint(re.subn(pattern, func, s))\n### output ###\n# ('say i, world hello!', 2)\n# ('I Say, Hello World!', 2)</code></pre>\n<h2>re.split函数</h2>\n<p>根据匹配进⾏切割字符串，并返回⼀个列表。</p>\n<p><code>re.</code><code>split</code>(<em>pattern</em>, <em>string</em>, <em>maxsplit=0</em>, <em>flags=0</em>)</p>\n<table align=\"center\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\"><tbody><tr><td>参数</td><td>描述</td></tr><tr><td>pattern</td><td>匹配的正则表达式</td></tr><tr><td>string</td><td>要匹配的字符串</td></tr><tr><td>maxsplit</td><td>分隔次数，maxsplit=1 分隔一次，默认为 0，不限制次数</td></tr></tbody></table>\n<p>举例：</p>\n<pre><code>import re\nret = re.split(r\":| \",\"info:xiaoZhang 33 shandong\")\nprint(ret)</code></pre>\n<p>结果：['info', 'xiaoZhang', '33', 'shandong']</p>\n<h2>python贪婪和⾮贪婪</h2>\n<p>Python⾥数量词默认是贪婪的（在少数语⾔⾥也可能是默认⾮贪婪），总是尝试匹配尽可能多的字符；⾮贪婪则相反，总是尝试匹配尽可能少的字符。</p>\n<p>例如：正则表达式”ab*”如果用于查找”abbbc”，将找到”abbb”。而如果使用非贪婪的数量词”ab*?”，将找到”a”。</p>\n<p>注：我们一般使用非贪婪模式来提取。</p>\n<p>在\"*\",\"?\",\"+\",\"{m,n}\"后⾯加上？，使贪婪变成⾮贪婪。</p>\n<p>举例1：</p>\n<pre><code>import re\ns=\"This is a number 234-235-22-423\"\n#正则表达式模式中使⽤到通配字，那它在从左到右的顺序求值时，会尽量“抓取”满⾜匹配最⻓字符串，在我们上⾯的例⼦⾥⾯，“.+”会从字符串的启始处抓取满⾜模式的最⻓字符，其中包括我们想得到的第⼀个整型字段的中的⼤部分，“\\d+”只需⼀位字符就可以匹配，所以它匹配了数字“4”，⽽“.+”则匹配了从字符串起始到这个第⼀位数字4之前的所有字符\nr=re.match(\".+(\\d+-\\d+-\\d+-\\d+)\",s)\nprint(r.group(1))\n#⾮贪婪操作符“？”，这个操作符可以⽤在\"*\",\"+\",\"?\"的后⾯，要求正则匹配的越少越好\nr=re.match(\".+?(\\d+-\\d+-\\d+-\\d+)\",s)\nprint(r.group(1))</code></pre>\n<p>结果：</p>\n<p>4-235-22-423<br/> 234-235-22-423</p>\n<p>举例2：</p>\n<pre><code>&gt;&gt;&gt; re.match(r\"aa(\\d+)\",\"aa2343ddd\").group(1)\n'2343'\n&gt;&gt;&gt; re.match(r\"aa(\\d+?)\",\"aa2343ddd\").group(1)\n'2'\n&gt;&gt;&gt; re.match(r\"aa(\\d+)ddd\",\"aa2343ddd\").group(1)\n'2343'\n&gt;&gt;&gt; re.match(r\"aa(\\d+?)ddd\",\"aa2343ddd\").group(1)\n'2343'</code></pre>\n<p>举例3：提取图片地址</p>\n<pre><code>import re\ntest_str=\"&lt;img data-original=https://rpic.douyucdn.cn/appCovers/2016/11/13/1213973.jpg&gt;\"\nret = re.search(r\"https://.*?.jpg\", test_str)\nprint(ret.group())\n</code></pre>\n<p>结果：<a href=\"https://rpic.douyucdn.cn/appCovers/2016/11/13/1213973.jpg\" title=\"https://rpic.douyucdn.cn/appCovers/2016/11/13/1213973.jpg\">https://rpic.douyucdn.cn/appCovers/2016/11/13/1213973.jpg</a></p>\n<h2>r的作⽤</h2>\n<p>与大多数编程语言相同，正则表达式里使用”\\”作为转义字符，这就可能造成反斜杠困扰。假如你需要匹配文本中的字符”\\”，那么使用编程语言表示的正则表达式里将需要4个反斜杠”\\\\\\\\”：前两个和后两个分别用于在编程语言里转义成反斜杠，转换成两个反斜杠后再在正则表达式里转义成一个反斜杠。Python里的原生字符串很好地解决了这个问题，Python中字符串前⾯加上 r 表示原⽣字符串。</p>\n<pre><code>import re\nmm = \"c:\\\\a\\\\b\\\\c\"\nprint(mm)#c:\\a\\b\\c\nret = re.match(\"c:\\\\\\\\\",mm).group()\nprint(ret)#c:\\\nret = re.match(\"c:\\\\\\\\a\",mm).group()\nprint(ret)#c:\\a\nret = re.match(r\"c:\\\\a\",mm).group()\nprint(ret)#c:\\a\nret = re.match(r\"c:\\a\",mm).group()\nprint(ret)#AttributeError: 'NoneType' object has no attribute 'group'</code></pre>\n<p></p>\n</div>\n</div>", "first_tag": "Python", "cpp": 1, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-23 23:20:43", "summary": "在中需要通过正则表达式对字符串进匹配的时候，可以使个自带的模块，名字为。正则表达式的大致匹配过程是：依次拿出表达式和文本中的字符比较，如果每一个字符都能匹配，则匹配成功；一旦有匹配不成功的字符则匹配失"}