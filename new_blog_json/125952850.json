{"blogid": "125952850", "writerAge": "码龄6年", "writerBlogNum": "419", "writerCollect": "6914", "writerComment": "3070", "writerFan": "22144", "writerGrade": "8级", "writerIntegral": "27836", "writerName": "小码农叔叔", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125952850.jpg", "writerRankTotal": "233", "writerRankWeekly": "60", "writerThumb": "2485", "writerVisitNum": "6586619", "blog_read_count": "29834", "blog_time": "已于 2022-08-17 23:10:13 修改", "blog_title": "mysql 存储过程详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_2\"></a>前言</h2>\n<p>在项目开发中，经常会遇到这样一种场景，当修改A表的一条数据时，需要关联修改B表、C表甚至其他更多表的数据，为什么会这样呢？</p>\n<p>在真实的业务场景中，往往一张表的数据关联的业务是多样的，举例来说，用户在页面上完成一个订单，对服务端来说，与这个订单相关的业务还有很多，比如生成一条出库记录，扣减库存，用户的账户余额扣减，商家的账户余额增加，财务结算等等…</p>\n<p>所有这些不同的业务员操作，在服务端来说，最终体现的就是与数据库的交互，可想而知，假如关联的业务越复杂，需要与数据库进行IO的次数就越多；</p>\n<p>那么有没有什么办法，在面对此类场景业务时，提升服务端的性能，减少数据库IO呢？这就是本篇将要分享的存储过程。</p>\n<h2><a id=\"_12\"></a>什么是存储过程</h2>\n<p>存储过程就是事先经过编译并存储在数据库中的一段 SQL 语句的集合；</p>\n<h2><a id=\"_16\"></a>为什么使用存储过程</h2>\n<p>调用存储过程可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的。存储过程思想上很简单，就是数据库 SQL 语言层面的代码封装与重用。</p>\n<p><strong>存储过程特点：</strong></p>\n<ul><li>封装，复用， 可以把某一业务SQL封装在存储过程中，需要用到的时候直接调用即可；</li><li>可以接收参数，也可以返回数据， 在存储过程中，可以传递参数，也可以接收返回值；</li><li>减少网络交互，提升效率，如果一次操作涉及到多条SQL，每执行一次都是一次网络传<br/> 输。 如果将这些sql操作封装在存储过程中，只需网络交互一次可能就可以了；</li></ul>\n<h2><a id=\"_28\"></a>存储过程基础语法</h2>\n<p><strong>1、创建存储过程语法</strong></p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> 存储过程名称 <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> 参数列表 <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">BEGIN</span>\n\n<span class=\"token comment\">-- SQL语句</span>\n\n<span class=\"token keyword\">END</span> <span class=\"token punctuation\">;</span>\n</code></pre>\n<p>一个简单的案例</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> p1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">BEGIN</span>\n\t<span class=\"token keyword\">SELECT</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> account<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>2、调用存储过程</strong></p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">CALL</span> 名称 <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> 参数 <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>调用上面的存储过程</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">call</span> p1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\37b4c647002d43f09e884e02a10fce60.png\"/></p>\n<p><strong>3、查看存储过程</strong></p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> 存储过程名称 <span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 查询某个存储过程的定义</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9276ababbf564c57b111490b79fcbfde.png\"/></p>\n<p><strong>4、删除存储过程</strong></p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">PROCEDURE</span> <span class=\"token punctuation\">[</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token punctuation\">]</span> 存储过程名称 <span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8605152946054ff2a01f8476f7d598bc.png\"/></p>\n<blockquote>\n<p>注意点：上面创建存储过程的语句在navicat或者sqlyog中没问题，但是放到命令行中执行会报错，在命令行中模式下，需要通过关键字 delimiter 指定SQL语句的结束符</p>\n</blockquote>\n<h2><a id=\"_83\"></a>存储过程中的变量</h2>\n<p>在MySQL中，变量一般可分为分为三种类型: 系统变量、用户定义变量、局部变量；</p>\n<h2><a id=\"_87\"></a>一、系统变量</h2>\n<p>系统变量是MySQL服务器系统自身提供的，分为全局变量（GLOBAL）、会话<br/> 变量（SESSION）；</p>\n<p><strong>1）查看系统变量</strong></p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SHOW</span> <span class=\"token punctuation\">[</span> <span class=\"token keyword\">SESSION</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">GLOBAL</span> <span class=\"token punctuation\">]</span> VARIABLES <span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 查看所有系统变量</span>\n\n<span class=\"token keyword\">SHOW</span> <span class=\"token punctuation\">[</span> <span class=\"token keyword\">SESSION</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">GLOBAL</span> <span class=\"token punctuation\">]</span> VARIABLES <span class=\"token operator\">LIKE</span> <span class=\"token string\">'......'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 可以通过LIKE模糊匹配方 式查找变量</span>\n\n<span class=\"token keyword\">SELECT</span> @@<span class=\"token punctuation\">[</span><span class=\"token keyword\">SESSION</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">GLOBAL</span><span class=\"token punctuation\">]</span> 系统变量名<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 查看指定变量的值</span>\n</code></pre>\n<p><strong>2）设置系统变量</strong></p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SET</span> <span class=\"token punctuation\">[</span> <span class=\"token keyword\">SESSION</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">GLOBAL</span> <span class=\"token punctuation\">]</span> 系统变量名 <span class=\"token operator\">=</span> 值 <span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SET</span> @@<span class=\"token punctuation\">[</span><span class=\"token keyword\">SESSION</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">GLOBAL</span><span class=\"token punctuation\">]</span>系统变量名 <span class=\"token operator\">=</span> 值 <span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>如果没有指定SESSION/GLOBAL，默认是SESSION，会话变量。</p>\n</blockquote>\n<p><strong>注意点：</strong></p>\n<ul><li>mysql服务重新启动之后，所设置的全局参数会失效，要想不失效，可以在 /etc/my.cnf 中配置；</li><li>全局变量(GLOBAL): 全局变量针对于所有的会话；</li><li>会话变量(SESSION): 会话变量针对于单个会话，在另外一个会话窗口就不生效了；</li></ul>\n<p>比如使用下面的语句查看系统的query_cache值</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SHOW</span> VARIABLES <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%query_cache%'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"_126\"></a>二、用户自定义变量</h2>\n<p>用户定义变量，是用户根据需要自己定义的变量，用户自定义变量不用提前声明，在用的时候直接用 “@变量名” 使用就可以。其作用域为当前session的连接。</p>\n<p><strong>1、使用如下方式自定义变量</strong></p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SET</span> <span class=\"token variable\">@var_name</span> <span class=\"token operator\">=</span> expr <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@var_name</span> <span class=\"token operator\">=</span> expr<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SET</span> <span class=\"token variable\">@var_name</span> :<span class=\"token operator\">=</span> expr <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@var_name</span> :<span class=\"token operator\">=</span> expr<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">;</span>\n</code></pre>\n<p>赋值时，可以使用 = ，也可以使用 := 。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5f2646fb81c6435eb8f63d9f07f0b55c.png\"/></p>\n<p><strong>2、使用select into 的方式给变量赋值</strong></p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@var_name</span> :<span class=\"token operator\">=</span> expr <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@var_name</span> :<span class=\"token operator\">=</span> expr<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> 字段名 <span class=\"token keyword\">INTO</span> <span class=\"token variable\">@var_name</span> <span class=\"token keyword\">FROM</span> 表名<span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\533297d7589f4d4eae0debec2b9035b7.png\"/></p>\n<blockquote>\n<p>注意: 用户定义变量无需对其进行声明或初始化，只不过获取到的值为NULL而已；</p>\n</blockquote>\n<h2><a id=\"_157\"></a>三、局部变量</h2>\n<p><strong>1、局部变量定义</strong></p>\n<blockquote>\n<p>根据需要定义的在局部生效的变量，访问前，需通过DECLARE声明。可用作存储过程内的局部变量和输入参数，局部变量的范围是在其内声明的BEGIN … END块。</p>\n</blockquote>\n<p><strong>2、定义方式</strong></p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">DECLARE</span> 变量名 变量类型 <span class=\"token punctuation\">[</span><span class=\"token keyword\">DEFAULT</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>变量类型就是数据库字段类型，可选值包括：INT、BIGINT、CHAR、VARCHAR、DATE、TIME等。</p>\n</blockquote>\n<p><strong>一个简单的案例</strong></p>\n<pre><code class=\"prism language-sql\">\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">procedure</span> p2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">BEGIN</span>\n\n\t\t\t<span class=\"token keyword\">declare</span> my_count <span class=\"token keyword\">int</span> <span class=\"token keyword\">default</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">into</span> my_count <span class=\"token keyword\">from</span> account<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">select</span> my_count<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>执行下调用</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ce6c15fc52b54debbc7f214304696a59.png\"/></p>\n<h2><a id=\"if_192\"></a>四、条件判断语句if的使用</h2>\n<p>条件判断可以说在很多编程语言中都不陌生，在存储过程中也一样，而且使用的场景很多，务必掌握；</p>\n<p><strong>1、if 条件语句语法结构</strong></p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">IF</span> 条件<span class=\"token number\">1</span> <span class=\"token keyword\">THEN</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">ELSEIF</span> 条件<span class=\"token number\">2</span> <span class=\"token keyword\">THEN</span> <span class=\"token comment\">-- 可选</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">ELSE</span> <span class=\"token comment\">-- 可选</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">END</span> <span class=\"token keyword\">IF</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>在if条件判断结构中，ELSE IF 结构可以有多个，也可以没有。 ELSE结构可以有，也可以没有。</p>\n</blockquote>\n<p>一个简单的案例，判断分数在不同的区间，然后输出不同的值；</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">procedure</span> p3<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">BEGIN</span>\n\n\t<span class=\"token keyword\">declare</span> score <span class=\"token keyword\">int</span> <span class=\"token keyword\">default</span> <span class=\"token number\">59</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">declare</span> result <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> score <span class=\"token operator\">&gt;=</span> <span class=\"token number\">85</span> <span class=\"token keyword\">then</span>\n\t\t<span class=\"token keyword\">set</span> result :<span class=\"token operator\">=</span> <span class=\"token string\">'优秀'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">elseif</span> score <span class=\"token operator\">&gt;=</span> <span class=\"token number\">60</span> <span class=\"token keyword\">then</span>\n\t\t<span class=\"token keyword\">set</span> result :<span class=\"token operator\">=</span> <span class=\"token string\">'及格'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token keyword\">set</span> result :<span class=\"token operator\">=</span> <span class=\"token string\">'不及格'</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">end</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">select</span> result<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>执行下调用</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7ccc4d14709b4bbcb54bdd1e6f8dd47b.png\"/></p>\n<p><strong>2、case - when 语法</strong></p>\n<p>在实际编码中，与if-else 相似作用的还有case-when 这种写法，也是比较常用的写法；</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">CASE</span> case_value\n\t<span class=\"token keyword\">WHEN</span> when_value1 <span class=\"token keyword\">THEN</span> statement_list1\n\t\n\t<span class=\"token punctuation\">[</span> <span class=\"token keyword\">WHEN</span> when_value2 <span class=\"token keyword\">THEN</span> statement_list2<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t\n\t<span class=\"token punctuation\">[</span> <span class=\"token keyword\">ELSE</span> statement_list <span class=\"token punctuation\">]</span>\n\t\n<span class=\"token keyword\">END</span> <span class=\"token keyword\">CASE</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>解释说明</strong></p>\n<ul><li>当case_value的值为 when_value1时，执行statement_list1；</li><li>当值为 when_value2时， 执行statement_list2， 否则就执行 statement_list；</li></ul>\n<p>还有另一种语法结构如下：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">CASE</span>\n\n\t<span class=\"token keyword\">WHEN</span> search_condition1 <span class=\"token keyword\">THEN</span> statement_list1\n\t\n\t<span class=\"token punctuation\">[</span><span class=\"token keyword\">WHEN</span> search_condition2 <span class=\"token keyword\">THEN</span> statement_list2<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t\n\t<span class=\"token punctuation\">[</span><span class=\"token keyword\">ELSE</span> statement_list<span class=\"token punctuation\">]</span>\n\t\n<span class=\"token keyword\">END</span> <span class=\"token keyword\">CASE</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>解释说明：</p>\n<ul><li>当条件search_condition1成立时，执行statement_list1</li><li>当条件search_condition2成 立时，执行statement_list2， 否则就执行 statement_list；</li></ul>\n<p>如果用case-when对上面的进行改造如下：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">procedure</span> p5<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">BEGIN</span>\n\n\t<span class=\"token keyword\">declare</span> score <span class=\"token keyword\">int</span> <span class=\"token keyword\">default</span> <span class=\"token number\">77</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">declare</span> result <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">case</span>\n\t\t<span class=\"token keyword\">when</span> score <span class=\"token operator\">&gt;=</span> <span class=\"token number\">85</span> <span class=\"token keyword\">then</span>\n\t\t\t\t<span class=\"token keyword\">set</span> result :<span class=\"token operator\">=</span> <span class=\"token string\">'优秀'</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">when</span> score <span class=\"token operator\">&gt;=</span> <span class=\"token number\">60</span> <span class=\"token keyword\">then</span>\n\t\t\t\t<span class=\"token keyword\">set</span> result :<span class=\"token operator\">=</span> <span class=\"token string\">'及格'</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">else</span>\n\t\t\t\t<span class=\"token keyword\">set</span> result :<span class=\"token operator\">=</span> <span class=\"token string\">'未知结果'</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">end</span> <span class=\"token keyword\">case</span><span class=\"token punctuation\">;</span>\t\n\n\t<span class=\"token keyword\">select</span> result<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>执行调用</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\199c02c031f94c3b9a7087ddba649219.png\"/></p>\n<p>上面的这种写法存在什么问题呢？很明显，不够灵活，通常来说，在实际业务中，我们更希望存储过程能够接收参数，并且返回处理结果，以便提供给后续的业务逻辑使用，这就需要用到存储过程的输入输出参数了；</p>\n<h2><a id=\"_314\"></a>五、存储过程输入输出参数使用</h2>\n<p>存储过程中使用到的参数的类型，主要分为以下三种：IN、OUT、INOUT；</p>\n<table><thead><tr><th>类型</th><th align=\"center\">含义</th><th align=\"center\">备注说明</th></tr></thead><tbody><tr><td>IN</td><td align=\"center\">该类参数作为输入，也就是需要调用时传入值</td><td align=\"center\">默认</td></tr><tr><td>OUT</td><td align=\"center\">该类参数作为输出，也就是该参数可以作为返回值</td><td align=\"center\"></td></tr><tr><td>INOUT</td><td align=\"center\">既可以作为输入参数，也可以作为输出参数</td><td align=\"center\"></td></tr></tbody></table>\n<p><strong>1、语法定义</strong></p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> 存储过程名称 <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token operator\">IN</span><span class=\"token operator\">/</span><span class=\"token keyword\">OUT</span><span class=\"token operator\">/</span><span class=\"token keyword\">INOUT</span> 参数名 参数类型 <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">BEGIN</span>\n\t<span class=\"token comment\">-- SQL</span>\n<span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>将上面的案例进行简单改造，通过外面传入的参数，判断分数在不同的区间，从而返回不同的结果；</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">procedure</span> p4<span class=\"token punctuation\">(</span><span class=\"token operator\">in</span> score <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">out</span> result <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">BEGIN</span>\n\n\t<span class=\"token keyword\">if</span> score <span class=\"token operator\">&gt;=</span> <span class=\"token number\">85</span> <span class=\"token keyword\">then</span>\n\t\t<span class=\"token keyword\">set</span> result :<span class=\"token operator\">=</span> <span class=\"token string\">'优秀'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">elseif</span> score <span class=\"token operator\">&gt;=</span> <span class=\"token number\">60</span> <span class=\"token keyword\">then</span>\n\t\t<span class=\"token keyword\">set</span> result :<span class=\"token operator\">=</span> <span class=\"token string\">'及格'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token keyword\">set</span> result :<span class=\"token operator\">=</span> <span class=\"token string\">'不及格'</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">end</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>执行下调用</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">call</span> p4<span class=\"token punctuation\">(</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span><span class=\"token variable\">@result</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">select</span> <span class=\"token variable\">@result</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dea8d733c5d94501823942a895d7ab36.png\"/></p>\n<h2><a id=\"_364\"></a>案例演示</h2>\n<p>下面有一张员工表</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\22bb6d3fd5c2444c93692b8a4f04f45f.png\"/></p>\n<p><strong>案例需求：</strong></p>\n<p>创建存储过程show_emp_salary()，查看 employees 表的某个员工的薪资，并用IN参数emp_name 输入员工姓名，并返回薪资；</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> show_emp_salary <span class=\"token punctuation\">(</span><span class=\"token operator\">IN</span> emp_name <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">OUT</span> emp_salary <span class=\"token keyword\">INT</span><span class=\"token punctuation\">)</span> \n\n<span class=\"token keyword\">BEGIN</span>\n\t\t<span class=\"token keyword\">select</span> salary <span class=\"token keyword\">into</span> emp_salary <span class=\"token keyword\">from</span> employees <span class=\"token keyword\">WHERE</span> first_name <span class=\"token operator\">=</span> emp_name<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">END</span> <span class=\"token punctuation\">;</span>\n</code></pre>\n<p>执行调用</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0fe50ad4ef0a475fbefd5e91bdb536d0.png\"/></p>\n<h2><a id=\"_388\"></a>六、存储过程中的循环使用</h2>\n<p>循环语句在编程中经常被用到，常用于对批量的数据进行循环处理，在mysql的存储过程中，也提供了几种常用的循环语句，包括：while循环，repeat循环，和loop循环；</p>\n<p><strong>1、while循环语句</strong></p>\n<p>while 循环是有条件的循环控制语句。满足条件时，再执行循环体中的SQL语句；</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">WHILE</span> 条件 <span class=\"token keyword\">DO</span>\n\n\t<span class=\"token keyword\">SQL</span>逻辑<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t\n<span class=\"token keyword\">END</span> <span class=\"token keyword\">WHILE</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>先判定条件，如果条件为true，则执行逻辑，否则，不执行逻辑</p>\n</blockquote>\n<p><strong>需求：从1累加到N，并求出累加的结果</strong></p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">procedure</span> p6<span class=\"token punctuation\">(</span><span class=\"token operator\">in</span> n <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">begin</span>\n\n\t\t<span class=\"token keyword\">declare</span> total <span class=\"token keyword\">int</span> <span class=\"token keyword\">default</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">while</span> n<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span> <span class=\"token keyword\">do</span>\n\t\t\t<span class=\"token keyword\">set</span> total :<span class=\"token operator\">=</span> total <span class=\"token operator\">+</span> n<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">set</span> n :<span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">end</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">select</span> total<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">end</span> <span class=\"token punctuation\">;</span>\n</code></pre>\n<p>执行下调用</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\adbf380ae2e349aca70027120677afd4.png\"/></p>\n<p><strong>2、repeat 循环语句</strong></p>\n<p>repeat是有条件的循环控制语句, 当满足 until 声明的条件的时候，则退出循环,语法结构为：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">REPEAT</span>\n\n\t<span class=\"token keyword\">SQL</span>逻辑<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\tUNTIL 条件\n\t<span class=\"token keyword\">END</span> <span class=\"token keyword\">REPEAT</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>先执行一次逻辑，然后判定UNTIL条件是否满足，如果满足，则退出。如果不满足，则继续下一次循环；</p>\n</blockquote>\n<p>仍然使用上面的累计求和的需求进行改造如下：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">procedure</span> p7<span class=\"token punctuation\">(</span><span class=\"token operator\">in</span> n <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">begin</span>\n\n\t\t<span class=\"token keyword\">declare</span> total <span class=\"token keyword\">int</span> <span class=\"token keyword\">default</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">repeat</span> \n\t\t\t<span class=\"token keyword\">set</span> total :<span class=\"token operator\">=</span> total <span class=\"token operator\">+</span> n<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">set</span> n :<span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t\tuntil n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span>\n\t\t\t\n\t\t<span class=\"token keyword\">end</span> <span class=\"token keyword\">repeat</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">select</span> total<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">end</span> <span class=\"token punctuation\">;</span>\n</code></pre>\n<p>执行调用</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0822d3a41b574441a71670a3e57ba3b4.png\"/></p>\n<p><strong>3、loop 循环语句</strong></p>\n<p>LOOP 可以实现简单的循环，如果不在SQL逻辑中增加退出循环的条件，可以用其来实现简单的死循环。LOOP可以配合一下两个语句使用：</p>\n<ul><li>LEAVE ：配合循环使用，退出循环；</li><li>ITERATE：必须用在循环中，作用是跳过当前循环剩下的语句，直接进入下一次循环；</li></ul>\n<p>语法结构如下：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token punctuation\">[</span>begin_label:<span class=\"token punctuation\">]</span> <span class=\"token keyword\">LOOP</span>\n\n\t<span class=\"token keyword\">SQL</span>逻辑<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t\n<span class=\"token keyword\">END</span> <span class=\"token keyword\">LOOP</span> <span class=\"token punctuation\">[</span>end_label<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>说明：</p>\n<ul><li>LEAVE label; – 退出指定标记的循环体</li><li>ITERATE label; – 直接进入下一次循环</li></ul>\n<p>上述语法中的 begin_label，end_label，label 指的是我们自定义的标记名称；</p>\n<p>使用loop语法完成上面的从1到N的累加求和</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">procedure</span> p8<span class=\"token punctuation\">(</span><span class=\"token operator\">in</span> n <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">begin</span>\n\n\t\t<span class=\"token keyword\">declare</span> total <span class=\"token keyword\">int</span> <span class=\"token keyword\">default</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t\t\n\t\tsum:<span class=\"token keyword\">loop</span>\n\t\t\t<span class=\"token keyword\">if</span> n<span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span> <span class=\"token keyword\">then</span> \n\t\t\t\t\t<span class=\"token keyword\">leave</span> sum<span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">end</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">set</span> total :<span class=\"token operator\">=</span> total <span class=\"token operator\">+</span> n<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">set</span> n :<span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t\t\n\t\t<span class=\"token keyword\">end</span> <span class=\"token keyword\">loop</span> sum<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">select</span> total<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">end</span> <span class=\"token punctuation\">;</span>\n</code></pre>\n<p>执行调用</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3f215b6e310847249fd143560435d636.png\"/></p>\n<h2><a id=\"_528\"></a>七、存储函数</h2>\n<p>存储函数是有返回值的存储过程，存储函数的参数只能是IN类型的，语法定义如下：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> 存储函数名称 <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> 参数列表 <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">[</span>characteristic <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span>\n\n\t<span class=\"token keyword\">BEGIN</span>\n\t\t<span class=\"token comment\">-- SQL语句</span>\n\t\t<span class=\"token keyword\">RETURN</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">END</span> <span class=\"token punctuation\">;</span>\t\n</code></pre>\n<p>characteristic说明：</p>\n<ul><li>DETERMINISTIC：相同的输入参数总是产生相同的结果；</li><li>NO SQL ：不包含 SQL 语句；</li><li>READS SQL DATA：包含读取数据的语句，但不包含写入数据的语句；</li></ul>\n<p>存储函数案例1：求1到N的累加</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">function</span> fun_add<span class=\"token punctuation\">(</span>n <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">returns</span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">deterministic</span>\n\n<span class=\"token keyword\">BEGIN</span>\n\n\t\t<span class=\"token keyword\">declare</span> sum <span class=\"token keyword\">int</span> <span class=\"token keyword\">default</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> n <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">do</span>\n\t\t\t\t<span class=\"token keyword\">set</span> sum :<span class=\"token operator\">=</span> sum <span class=\"token operator\">+</span> n<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">set</span> n :<span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">end</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>执行调用</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3cd471cbc7f14b8bb3854606d5bba47a.png\"/></p>\n<p>通常来说，存储函数能够完成的事情，使用存储过程也可以完成，但是存储函数的局限在于，函数必须要有返回结果；</p>\n<h2><a id=\"_575\"></a>八、存储过程中游标的使用</h2>\n<p>游标（CURSOR）是用来存储查询结果集的数据类型 , 在存储过程和函数中可以使用游标对结果集进行循环的处理；</p>\n<p>游标，提供了一种灵活的操作方式，让我们能够对结果集中的每一条记录进行定位，并对指向的记录中的数据进行操作的数据结构。游标让 SQL 这种面向集合的语言有了面向过<br/> 程开发的能力；</p>\n<p>在 SQL 中，游标是一种临时的数据库对象，可以指向存储在数据库表中的数据行指针。这里游标 充当了 指针的作用 ，我们可以通过操作游标来对数据行进行操作。</p>\n<p>游标的使用包括游标的声明、OPEN、FETCH 和 CLOSE，其语法分别如下：</p>\n<p><strong>1、声明游标</strong></p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">DECLARE</span> 游标名称 <span class=\"token keyword\">CURSOR</span> <span class=\"token keyword\">FOR</span> 查询语句 <span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>2、 打开游标</strong></p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">OPEN</span> 游标名称 <span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>3、获取游标记录</strong></p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">FETCH</span> 游标名称 <span class=\"token keyword\">INTO</span> 变量 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> 变量 <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>4、关闭游标</strong></p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">CLOSE</span> 游标名称 <span class=\"token punctuation\">;</span>\n</code></pre>\n<p>案例需求，有下面一张员工表，创建一个存储过程，声明IN参数 limit_total_salary，DOUBLE类型；声明OUT参数total_count，INT类型。函数的功能可以实现累加薪资最高的几个员工的薪资值，直到薪资总和达到limit_total_salary参数的值，返回累加的人数给total_count；</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> get_count_by_limit_total_salary<span class=\"token punctuation\">(</span><span class=\"token operator\">IN</span> limit_total_salary <span class=\"token keyword\">DOUBLE</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">OUT</span> total_count <span class=\"token keyword\">INT</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">BEGIN</span>\n\t<span class=\"token keyword\">DECLARE</span> sum_salary <span class=\"token keyword\">DOUBLE</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">#记录累加的总工资</span>\n\t<span class=\"token keyword\">DECLARE</span> cursor_salary <span class=\"token keyword\">DOUBLE</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">#记录某一个工资值</span>\n\t<span class=\"token keyword\">DECLARE</span> emp_count <span class=\"token keyword\">INT</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">#记录循环个数</span>\n\n\t<span class=\"token comment\">#定义游标 </span>\n\t<span class=\"token keyword\">DECLARE</span> emp_cursor <span class=\"token keyword\">CURSOR</span> <span class=\"token keyword\">FOR</span> <span class=\"token keyword\">SELECT</span> salary <span class=\"token keyword\">FROM</span> employees <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> salary <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">#打开游标 </span>\n\t<span class=\"token keyword\">OPEN</span> emp_cursor<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">REPEAT</span>\n\n\t\t<span class=\"token comment\">#使用游标（从游标中获取数据）</span>\n\t\t<span class=\"token keyword\">FETCH</span> emp_cursor <span class=\"token keyword\">INTO</span> cursor_salary<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">SET</span> sum_salary <span class=\"token operator\">=</span> sum_salary <span class=\"token operator\">+</span> cursor_salary<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">SET</span> emp_count <span class=\"token operator\">=</span> emp_count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t\tUNTIL sum_salary <span class=\"token operator\">&gt;=</span> limit_total_salary\n\n\t<span class=\"token keyword\">END</span> <span class=\"token keyword\">REPEAT</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">SET</span> total_count <span class=\"token operator\">=</span> emp_count<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">#关闭游标</span>\n\n\t<span class=\"token keyword\">CLOSE</span> emp_cursor<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">END</span> <span class=\"token punctuation\">;</span>\n</code></pre>\n<p>执行下调用</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2ba532cdad7449e69969e92b9ba95ef7.png\"/></p>\n<p>通过上面的案例，我们体验了一下游标的强大之处，事实上，在很多时候，我们希望通过游标将获取到的记录输出到一个中间记录表中，以供后续的业务处理，利用游标来做就非常合适，看下面的需求：</p>\n<p>根据传入的参数salary，来查询用户表employees中，所有工资大于等于15000的员工ID，以及first_name，并将员工的ID和first_name插入到一张新表；</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">procedure</span> p_emp<span class=\"token punctuation\">(</span><span class=\"token operator\">in</span> in_salary <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">begin</span>\n\n\t<span class=\"token keyword\">declare</span> u_empid <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">declare</span> u_fname <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">declare</span> u_cursor <span class=\"token keyword\">cursor</span> <span class=\"token keyword\">for</span> <span class=\"token keyword\">select</span> employee_id<span class=\"token punctuation\">,</span>first_name <span class=\"token keyword\">from</span> employees <span class=\"token keyword\">where</span> salary <span class=\"token operator\">&gt;=</span> in_salary<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">-- 声明条件处理程序 ： 当SQL语句执行抛出的状态码为02000时，将关闭游标u_cursor，并退出</span>\n\t<span class=\"token keyword\">declare</span> <span class=\"token keyword\">exit</span> <span class=\"token keyword\">handler</span> <span class=\"token keyword\">for</span> SQLSTATE <span class=\"token string\">'02000'</span> <span class=\"token keyword\">close</span> u_cursor<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">drop</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">exists</span> tb_em_pro<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span> tb_em_pro<span class=\"token punctuation\">(</span> \n\t\t\tid <span class=\"token keyword\">int</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span> \n\t\t\temployee_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n\t\t\tfirst_name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">-- 打开游标</span>\n\t<span class=\"token keyword\">open</span> u_cursor<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">while</span> <span class=\"token boolean\">true</span> <span class=\"token keyword\">do</span>\n\t\t\t<span class=\"token keyword\">fetch</span> u_cursor <span class=\"token keyword\">into</span> u_empid<span class=\"token punctuation\">,</span>u_fname<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> tb_em_pro <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> u_empid<span class=\"token punctuation\">,</span> u_fname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">end</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">-- 关闭游标</span>\n\t<span class=\"token keyword\">close</span> u_cursor<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>执行下调用</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4cc9775e3d4348238bead17a02ab19c8.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7be9d9843afb40bfbd3d00486312d54b.png\"/></p>\n<p>执行完毕后，可以看到通过游标处理完毕的数据写到一张中间表中去了</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 0, "time": "2022-08-17 23:10:13", "summary": "前言在项目开发中，经常会遇到这样一种场景，当修改表的一条数据时，需要关联修改表、表甚至其他更多表的数据，为什么会这样呢？在真实的业务场景中，往往一张表的数据关联的业务是多样的，举例来说，用户在页面上完"}