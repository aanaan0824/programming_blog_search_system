{"blogid": "126679859", "writerAge": "码龄1年", "writerBlogNum": "66", "writerCollect": "187", "writerComment": "21", "writerFan": "625", "writerGrade": "4级", "writerIntegral": "817", "writerName": "夏天是冰红茶", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126679859.jpg", "writerRankTotal": "22818", "writerRankWeekly": "3917", "writerThumb": "130", "writerVisitNum": "27848", "blog_read_count": "4957", "blog_time": "已于 2022-09-06 08:02:08 修改", "blog_title": "Opencv项目实战：07 人脸识别和考勤系统", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>1、效果展示</h1>\n<p>人脸识别：</p>\n<p><img alt=\"fafb42116b9e4342b317665d63394fb0.gif\" src=\"https://img-blog.csdnimg.cn/fafb42116b9e4342b317665d63394fb0.gif\"/></p>\n<p>考勤效果：</p>\n<p><img alt=\"2c09a39d7e05411ebb0c69ca20935732.png\" src=\"..\\..\\static\\image\\2c09a39d7e05411ebb0c69ca20935732.png\"/></p>\n<p> </p>\n<h1>2、项目介绍</h1>\n<p>接下来，我们将学习如何以高精度执行面部识别，首先简要介绍理论并学习基本实现。然后我们将创建一个考勤项目，该项目将使用网络摄像头检测人脸并在 Excel 表中实时记录考勤情况。</p>\n<h1>3、项目基础理论</h1>\n<h3>（1）项目包的搭建</h3>\n<p>在此之前，你应该看过此篇，完成了对项目包的搭建<a href=\"https://blog.csdn.net/m0_62919535/article/details/126685560?spm=1001.2014.3001.5502\" title=\"(37条消息) Python3.7最简便的方式解决下载dlib和face_recognition的问题_夏天是冰红茶的博客-CSDN博客\">(37条消息) Python3.7最简便的方式解决下载dlib和face_recognition的问题_夏天是冰红茶的博客-CSDN博客</a></p>\n<p>此外，我们还需要安装一个包，按照步骤来就好了：</p>\n<pre><code class=\"language-python\">pip install face_recognition_models</code></pre>\n<h3>（2）文件搭建</h3>\n<p><img alt=\"7cde9cce89c74e128806652830afa324.png\" src=\"..\\..\\static\\image\\7cde9cce89c74e128806652830afa324.png\"/></p>\n<p>按照图示配置，Attendance.csv文件当中的内容只有（Name，Time），在Attendance_images文件当中，你可以添加你想添加的图片，最好是单个人物的图片，且以他们的英文名命名图片。</p>\n<h3>（3）basic.py代码展示与讲解</h3>\n<pre><code class=\"language-python\">import cv2\nimport face_recognition\n\nimgElon = face_recognition.load_image_file('ImagesBasic/Elon Musk.png')\nimgElon = cv2.cvtColor(imgElon, cv2.COLOR_BGR2RGB)\nimgTest = face_recognition.load_image_file('ImagesBasic/Elon test.png')\nimgTest = cv2.cvtColor(imgTest, cv2.COLOR_BGR2RGB)\n\nfaceLoc = face_recognition.face_locations(imgElon)[0]\nencodeElon = face_recognition.face_encodings(imgElon)[0]\ncv2.rectangle(imgElon, (faceLoc[3], faceLoc[0]), (faceLoc[1], faceLoc[2]), (255, 0, 255), 2)\n\nfaceLocTest = face_recognition.face_locations(imgTest)[0]\nencodeTest = face_recognition.face_encodings(imgTest)[0]\ncv2.rectangle(imgTest, (faceLocTest[3], faceLocTest[0]), (faceLocTest[1], faceLocTest[2]), (255, 0, 255), 2)\n\nresults = face_recognition.compare_faces([encodeElon], encodeTest)\nfaceDis = face_recognition.face_distance([encodeElon], encodeTest)\nprint(results, faceDis)\ncv2.putText(imgTest, f'{results} {round(faceDis[0], 2)}', (50, 50), cv2.FONT_HERSHEY_COMPLEX, 1, (0, 0, 255), 2)\n\ncv2.imshow('Elon Musk', imgElon)\ncv2.imshow('Elon Test', imgTest)\ncv2.waitKey(0)\n</code></pre>\n<blockquote>\n<p>我们将会以马斯克先生的图片，作为标准测试，即'Elon Musk.png'。另外两张图片分别是比尔盖茨先生和马斯克先生。</p>\n<p>今天的讲解会分为两部分，这是基础部分的讲解。</p>\n<ul><li>首先，导入这两张代码中的图片，我们用的是face_recognition中的load_image_file函数，它会将图像文件（.jpg、.png等）加载到numpy数组中，且默认的mode='RGB'格式，故在此有一步转化。</li><li>其次，faceLoc接受face_locations（）函数返回的图像中人脸的边界框数组，请看注1，取第一个数，则会等到一个元组，我们要以按css（上、右、下、左）顺序找到的面位置的元组列表。encodeElon（）函数是返回128维人脸编码列表（图像中每个人脸一个），为什么是128维？请看注2。在这之后，又是画框操作，我相信如果看过我前期的文章的人肯定是太熟悉了，按照注3，将坐标输入。</li><li>之后，compare_faces（）将面部编码列表与候选编码进行比较，以查看它们是否匹配，记住，只有第一个是列表，其将会返回真/假值列表；face_distance（）需要给定人脸编码列表，将其与已知人脸编码进行比较，并获得每个比较人脸的欧几里德距离。距离会告诉您这些面有多相似。再说一次，只有第一个是列表。前看注4。</li><li>最后，放置图框的信息在合适的位置，展示图片。</li></ul>\n</blockquote>\n<p>注1：[(44, 306, 152, 199)]</p>\n<p>注2：<a href=\"https://fintechranking.com/2018/07/13/machine-learning-is-fun-part-4-modern-face-recognition-with-deep-learning/\" title=\"机器学习很有趣！第4部分：现代人脸识别与深度学习 - 金融科技排名 (fintechranking.com)\">机器学习很有趣！第4部分：现代人脸识别与深度学习 - 金融科技排名 (fintechranking.com)</a>，作者是<a href=\"https://medium.com/@ageitgey?source=post_header_lockup\" title=\"Adam Geitgey\">Adam Geitgey</a> 。</p>\n<p>注3：坐标图</p>\n<p><img alt=\"2e2024a3f83d4c16975004f7d2180630.png\" src=\"..\\..\\static\\image\\2e2024a3f83d4c16975004f7d2180630.png\"/></p>\n<p>注4：[True] [0.4559636]</p>\n<h3> （5）效果展示</h3>\n<p><img alt=\"aaf56405413c4224bc77000eea0a7589.png\" src=\"..\\..\\static\\image\\aaf56405413c4224bc77000eea0a7589.png\"/></p>\n<p> 修改此处代码，我们初步实现了人脸识别。</p>\n<pre><code class=\"language-python\">imgTest = face_recognition.load_image_file('ImagesBasic/Bill Gates.png')\nimgTest = cv2.cvtColor(imgTest, cv2.COLOR_BGR2RGB)</code></pre>\n<p><img alt=\"fa0b34327a0f44978af4a73a52526125.png\" src=\"..\\..\\static\\image\\fa0b34327a0f44978af4a73a52526125.png\"/></p>\n<p> </p>\n<h1>4、项目的代码展示与讲解</h1>\n<pre><code class=\"language-python\">import cv2\nimport numpy as np\nimport face_recognition\nimport os\nfrom datetime import datetime\n\n# from PIL import ImageGrab\n\npath = 'Attendance_images'\nimages = []\nclassNames = []\nmyList = os.listdir(path)\nprint(myList)\nfor cl in myList:\n    curImg = cv2.imread(f'{path}/{cl}')\n    images.append(curImg)\n    classNames.append(os.path.splitext(cl)[0])\nprint(classNames)\n\n\ndef findEncodings(images):\n    encodeList = []\n    for img in images:\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        encode = face_recognition.face_encodings(img)[0]\n        encodeList.append(encode)\n    return encodeList\n\n\ndef markAttendance(name):\n    with open('Attendance_lists.csv', 'r+') as f:\n        myDataList = f.readlines()\n        nameList = []\n        for line in myDataList:\n            entry = line.split(',')\n            nameList.append(entry[0])\n        if name not in nameList:\n            now = datetime.now()\n            dtString = now.strftime('%H:%M:%S')\n            f.writelines(f'\\n{name},{dtString}')\n\n\n#### FOR CAPTURING SCREEN RATHER THAN WEBCAM\n# def captureScreen(bbox=(300,300,690+300,530+300)):\n#     capScr = np.array(ImageGrab.grab(bbox))\n#     capScr = cv2.cvtColor(capScr, cv2.COLOR_RGB2BGR)\n#     return capScr\n\nencodeListKnown = findEncodings(images)\nprint('Encoding Complete')\n\ncap = cv2.VideoCapture(1)\n\nwhile True:\n    success, img = cap.read()\n    # img = captureScreen()\n    imgS = cv2.resize(img, (0, 0), None, 0.25, 0.25)\n    imgS = cv2.cvtColor(imgS, cv2.COLOR_BGR2RGB)\n\n    facesCurFrame = face_recognition.face_locations(imgS)\n    encodesCurFrame = face_recognition.face_encodings(imgS, facesCurFrame)\n\n    for encodeFace, faceLoc in zip(encodesCurFrame, facesCurFrame):\n        matches = face_recognition.compare_faces(encodeListKnown, encodeFace)\n        faceDis = face_recognition.face_distance(encodeListKnown, encodeFace)\n        # print(faceDis)\n        matchIndex = np.argmin(faceDis)\n\n        if matches[matchIndex]:\n            name = classNames[matchIndex].upper()\n            # print(name)\n            y1, x2, y2, x1 = faceLoc\n            y1, x2, y2, x1 = y1 * 4, x2 * 4, y2 * 4, x1 * 4\n            cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)\n            cv2.rectangle(img, (x1, y2 - 35), (x2, y2), (0, 255, 0), cv2.FILLED)\n            cv2.putText(img, name, (x1 + 6, y2 - 6), cv2.FONT_HERSHEY_COMPLEX, 1, (255, 255, 255), 2)\n            markAttendance(name)\n\n\n    cv2.imshow('Webcam', img)\n    cv2.waitKey(1)</code></pre>\n<blockquote>\n<p>这里面的一些操作，在我之前的博客中有讲过，且前面也讲的很清楚了，所以我会略讲。</p>\n<ul><li>首先，读取Attendance_images文件当中图片的名字，注意它是带有.png，而我们的命名并不需要它，所以取了一个[0]。</li><li>其次，编写findEncodings(）用于储存标准图像的编码，按照列表的形式。markAttendance()函数用于读取Attendance_lists.csv的文件信息，并写入Excel，其中还可写入时间。</li><li>然后，剩余的一些，我相信参照上面的讲解应该没什么问题了。再说一下 y1, x2, y2, x1 = y1 * 4, x2 * 4, y2 * 4, x1 * 4，为什么要乘以4，还记得上面的resize吗，它并没有要求像素的改变，而是缩小的比例，正是0.25。</li></ul>\n</blockquote>\n<p> </p>\n<h1>5、项目素材</h1>\n<p>Github：<a href=\"https://github.com/Auorui/Opencv-project-training/tree/main/Opencv%20project%20training/07%20Face%20Recognition%20and%20Attendance%20System\" title=\"Opencv-project-training/Opencv project training/07 Face Recognition and Attendance System at main · Auorui/Opencv-project-training · GitHub\">Opencv-project-training/Opencv project training/07 Face Recognition and Attendance System at main · Auorui/Opencv-project-training · GitHub</a></p>\n<p> </p>\n<h1>6、项目总结</h1>\n<p>今天的项目比起之前的物体检测还有一定的难度，对于我来说现在的效率实在不是很高，昨天的dlib和face_recognition包的下载实在没有弄好，临时换了个项目，今天也是弄了好久。</p>\n<p>那么希望你在这个项目中玩的开心！！</p>\n<p><img alt=\"f95ce6a2ac5047c7beb428f01ad37338.jpeg\" src=\"..\\..\\static\\image\\f95ce6a2ac5047c7beb428f01ad37338.jpeg\"/></p>\n<p> </p>\n<p> </p>\n</div>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-06 08:02:08", "summary": "、效果展示人脸识别：考勤效果：、项目介绍接下来，我们将学习如何以高精度执行面部识别，首先简要介绍理论并学习基本实现。然后我们将创建一个考勤项目，该项目将使用网络摄像头检测人脸并在表中实时记录考勤情况。"}