{"blogid": "125738260", "writerAge": "码龄9年", "writerBlogNum": "211", "writerCollect": "7276", "writerComment": "5059", "writerFan": "83055", "writerGrade": "7级", "writerIntegral": "22556", "writerName": "石臻臻的杂货铺", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125738260.jpg", "writerRankTotal": "318", "writerRankWeekly": "44", "writerThumb": "6138", "writerVisitNum": "2070018", "blog_read_count": "23376", "blog_time": "已于 2022-07-13 09:53:44 修改", "blog_title": "爬虫基本原理介绍、实现以及问题解决", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_6\">一、爬虫的意义</a></li><li><ul><li><a href=\"#1_7\">1.前言</a></li><li><a href=\"#2_9\">2.爬虫能做什么</a></li><li><a href=\"#3_11\">3.爬虫有什么意义</a></li></ul>\n</li><li><a href=\"#_17\">二、爬虫的实现</a></li><li><ul><li><a href=\"#1_18\">1.爬虫的基础原理</a></li><li><a href=\"#2api_20\">2.api的获取</a></li><li><a href=\"#3_39\">3.爬虫实现</a></li></ul>\n</li><li><a href=\"#_69\">三、反爬解决方案</a></li><li><ul><li><a href=\"#1_70\">1.反爬的实现方式</a></li><li><a href=\"#2_72\">2.反爬的解决方法</a></li><li><a href=\"#3_75\">3.反爬的实现代码</a></li><li><a href=\"#4IPIDEA_187\">4.IPIDEA还能做什么</a></li></ul>\n</li><li><a href=\"#_202\">四、总结</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\6786a89044f54aaf925b371ddcb43612.png\"/></p>\n<h1><a id=\"_6\"></a>一、爬虫的意义</h1>\n<h2><a id=\"1_7\"></a>1.前言</h2>\n<p>最近拉开了毕业季的序幕，提前批开启了大厂抢人模式，所以很多人都开始在力扣刷题， 希望能够在大厂抢人的时期脱颖而出。为了能实现群内力扣刷题排名就需要对力扣网站进行数据爬取，最近就对爬虫的机制和爬虫的意义进行了了解。</p>\n<h2><a id=\"2_9\"></a>2.爬虫能做什么</h2>\n<p>其实爬虫的主要目标就是通过<code>大量自动化</code>进行目标网站的访问，获取<code>公开的数据</code>，方便我们进行数据 统计或者数据整合。其中<code>公开shuju</code>一定要注意，就是一定是网页可以公开访问的数据进行访问，否则是违法的哦，容易面向监狱编程。另外就是一定要注意访问的频次，不能对原始网站造成危害（一般都会做限制了）。不然会变成一只有毒的爬虫。</p>\n<h2><a id=\"3_11\"></a>3.爬虫有什么意义</h2>\n<p>其实爬虫主要做的事情就是数据的收集，接下来就可以做数据的处理，企业可以用这些数据来进行市场分析，把握商机，就行买股票一样，有大量的历史数据我们就可以尝试去预测市场走势，押中了就是一次机会。<br/> 另外现在人工智能这么火爆，但是人工智能的基础就是大数据，我们听说过训练集其实就是大数据，我们有时候拿不到现成的数据集的时候就需要进行爬虫拿到我们的数据基础。</p>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\add846ec54054823aa5bc670f9787a0b.png\"/></p>\n<h1><a id=\"_17\"></a>二、爬虫的实现</h1>\n<h2><a id=\"1_18\"></a>1.爬虫的基础原理</h2>\n<p>爬虫其实就是自动访问相应的网站，拿到我们想要的数据。比如我们想要查快递，就会不断的访问一个网页，去看最新的进度，爬虫就是去模拟这个过程，同时为了提高效率可能会省略一些步骤。我们这次就以力扣的刷题总数做例子。</p>\n<h2><a id=\"2api_20\"></a>2.api的获取</h2>\n<p>我们打开力扣的主页的时候一定会进行数据的访问拿到一些信息，我们打开开发者模式，就可以看到每一条请求。例如下图：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ac88e5db75f942f8953752eca8f38c02.png\"/><br/> 右侧就是我的主页其中的一条数据库请求内容，他用的语法是<code>graphql</code>，赶兴趣我们下次再讲，我们只要用就行了。<br/> 我们其实可以对请求头进行精简，得到下面的graphql语法：</p>\n<pre><code class=\"prism language-python\">payload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"operation_name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"userPublicProfile\"</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">#查询数据库请求内容</span>\n    <span class=\"token string\">\"query\"</span><span class=\"token punctuation\">:</span> <span class=\"token triple-quoted-string string\">'''query userPublicProfile($userSlug: String!) {\nuserProfilePublicProfile(userSlug: $userSlug) {\n    username\n    submissionProgress {\n        acTotal\n    }\n}\n}\n'''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"variables\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'{\"userSlug\":\"查询对象\"}'</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"3_39\"></a>3.爬虫实现</h2>\n<p>我们直接对上面构造的访问方式进行访问，看看得到了什么：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> requests <span class=\"token keyword\">as</span> rq\n<span class=\"token keyword\">from</span> urllib<span class=\"token punctuation\">.</span>parse <span class=\"token keyword\">import</span> urlencode\n\nheaders<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>       <span class=\"token comment\">#请求头信息</span>\n    <span class=\"token string\">\"Referer\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"https://leetcode.cn\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\npayload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"operation_name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"userPublicProfile\"</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">#查询数据库请求内容</span>\n    <span class=\"token string\">\"query\"</span><span class=\"token punctuation\">:</span> <span class=\"token triple-quoted-string string\">'''query userPublicProfile($userSlug: String!) {\nuserProfilePublicProfile(userSlug: $userSlug) {\n    username\n    submissionProgress {\n        acTotal\n    }\n}\n}\n'''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"variables\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'{\"userSlug\":\"romantic-haibty42\"}'</span>\n<span class=\"token punctuation\">}</span>\n\nres <span class=\"token operator\">=</span> rq<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://leetcode.cn/graphql/\"</span><span class=\"token operator\">+</span><span class=\"token string\">\"?\"</span><span class=\"token operator\">+</span> urlencode<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>headers <span class=\"token operator\">=</span> headers<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b2e59b91737e406c8925a28fabe0dd32.png\"/><br/> 可以从上面的发现我们拿到了<code>acTotal</code>字段，也就是我们想要总的刷题数。但是我们尝试对大量数据进行访问的时候我们就会看到访问频次的限制。</p>\n<hr/>\n<h1><a id=\"_69\"></a>三、反爬解决方案</h1>\n<h2><a id=\"1_70\"></a>1.反爬的实现方式</h2>\n<p>很多网站常用的一种反爬的方式是对单ip进行限制，如果一个ip在一定的时间内大量访问，那么就会不再返回信息，而是返回错误。主要是数据库的日志系统会对访问进行记录。</p>\n<h2><a id=\"2_72\"></a>2.反爬的解决方法</h2>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\cdc7a76972794d4fb34b204d8c0dfc9c.png\"/><br/> Ipidea是一个IP代理平台，为全球用户提供优质大数据代理服务，目前拥有千万级真实住宅IP资源，包含超过220个国家和地区，日更新超过4000万，汇聚成代理服务池并提供API接入，支持http、https、socks5等多种协议类型，并且拥有API形式和账号密码多种使用方式，非常易于上手。<a href=\"https://www.ipidea.net/\">官网地址</a></p>\n<h2><a id=\"3_75\"></a>3.反爬的实现代码</h2>\n<p>其实我们有了上面的代码之后再加入到ipidea就会很简单，只要我们去官网下示例代码，然后插入我们的代码就行了：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\99fbec740d5f46f0ac79053dc4823e78.png\"/><br/> 只要我们将代码中的<code>tiqu</code>换成我们的提取链接，然后将我们的代码放到核心业务的try里面就可以实现了。<br/> 不过我为了使用socks5代理方式进行了修改，完整版代码如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># coding=utf-8</span>\n<span class=\"token comment\"># ！/usr/bin/env python</span>\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> threading\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> requests <span class=\"token keyword\">as</span> rq\n<span class=\"token keyword\">from</span> urllib<span class=\"token punctuation\">.</span>parse <span class=\"token keyword\">import</span> urlencode\n\nheaders<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string\">\"Referer\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"https://leetcode.cn\"</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token punctuation\">}</span>\n\npayload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"operation_name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"userPublicProfile\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"query\"</span><span class=\"token punctuation\">:</span> <span class=\"token triple-quoted-string string\">'''query userPublicProfile($userSlug: String!) {\nuserProfilePublicProfile(userSlug: $userSlug) {\n    username\n    submissionProgress {\n        acTotal\n    }\n}\n}\n'''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"variables\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'{\"userSlug\":\"kingley\"}'</span>\n<span class=\"token punctuation\">}</span>\n\nusername <span class=\"token operator\">=</span> <span class=\"token string\">\"romantic-haibty42\"</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">int_csrf</span><span class=\"token punctuation\">(</span>proxies<span class=\"token punctuation\">,</span>header<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sess<span class=\"token operator\">=</span> rq<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sess<span class=\"token punctuation\">.</span>proxies <span class=\"token operator\">=</span> proxies\n    sess<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://leetcode.cn/graphql/\"</span><span class=\"token punctuation\">)</span>\n    header<span class=\"token punctuation\">[</span><span class=\"token string\">'x-csrftoken'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sess<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">[</span><span class=\"token string\">\"csrftoken\"</span><span class=\"token punctuation\">]</span>\n\ntestUrl <span class=\"token operator\">=</span> <span class=\"token string\">'https://api.myip.la/en?json'</span>\n\n\n<span class=\"token comment\"># 核心业务</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">testPost</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    proxies <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token string\">'http'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'socks5://{}:{}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'https'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'socks5://{}:{}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n    res <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            header <span class=\"token operator\">=</span> headers\n            <span class=\"token comment\"># print(res.status_code)</span>\n            chaxun <span class=\"token operator\">=</span> payload\n            chaxun<span class=\"token punctuation\">[</span><span class=\"token string\">'variables'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"userSlug\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>username<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            res <span class=\"token operator\">=</span> rq<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://leetcode.cn/graphql/\"</span><span class=\"token operator\">+</span><span class=\"token string\">\"?\"</span><span class=\"token operator\">+</span> urlencode<span class=\"token punctuation\">(</span>chaxun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>headers <span class=\"token operator\">=</span> header<span class=\"token punctuation\">,</span>proxies<span class=\"token operator\">=</span>proxies<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadFactory</span><span class=\"token punctuation\">(</span>threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>host <span class=\"token operator\">=</span> host\n        self<span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> port\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        testPost<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>host<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 提取代理的链接  json类型的返回值 socks5方式</span>\ntiqu <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 每次提取10个，放入线程中</span>\n    resp <span class=\"token operator\">=</span> rq<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span>tiqu<span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> resp<span class=\"token punctuation\">.</span>status_code <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">:</span>\n            dataBean <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取失败\"</span><span class=\"token punctuation\">)</span>\n            time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">continue</span>\n    <span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取失败\"</span><span class=\"token punctuation\">)</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">continue</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 解析json数组</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"code=\"</span><span class=\"token punctuation\">,</span> dataBean<span class=\"token punctuation\">)</span>\n        code <span class=\"token operator\">=</span> dataBean<span class=\"token punctuation\">[</span><span class=\"token string\">\"code\"</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> code <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            threads <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">for</span> proxy <span class=\"token keyword\">in</span> dataBean<span class=\"token punctuation\">[</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                threads<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>ThreadFactory<span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">[</span><span class=\"token string\">\"ip\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proxy<span class=\"token punctuation\">[</span><span class=\"token string\">\"port\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> threads<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 开启线程</span>\n                t<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.01</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> threads<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 阻塞线程</span>\n                t<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># break</span>\n    <span class=\"token keyword\">break</span>\n\n</code></pre>\n<p>实现结果如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\adbe5474f24e48ee8373f090a9efccce.png\"/><br/> 短时间大量访问也不会进行限制啦。</p>\n<h2><a id=\"4IPIDEA_187\"></a>4.IPIDEA还能做什么</h2>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\48627b1fce1d46a98eed2e55dfa125d3.png\"/><br/> <strong>全局动态住宅代理</strong><br/> 动态代理覆盖全球240+国家地区，且均为真实的家庭住宅ip，<strong>这意味着请求的成功率更好，且数据的真实性更高。</strong><br/> <strong>多种调用方式</strong><br/> 支持api接口调用、账号密码调用以及插件代理，<strong>使我们的应用成本大大降低。</strong><br/> <strong>定制使用时效</strong><br/> 出口IP时效可以自己设置，或者每次进行更换，<strong>可以让我们使用更加灵活。</strong><br/> <strong>高匿隧道</strong><br/> 隧道中转，支持高并发，不同端口的出口为不同的ip，自动切换，<strong>让我们的信息更加安全。</strong><br/> <strong>完善文档支持</strong><br/> 对于不同语言都有对应的实例文档，<strong>方便我们快速上手。</strong></p>\n<hr/>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\6604411060c04cd7ae8761bc68e994bf.png\"/></p>\n<h1><a id=\"_202\"></a>四、总结</h1>\n<p>今天我们讲了爬虫的基础知识，还能拿到力扣的刷题数据，甚至我们还利用IPIDEA逃脱了力扣的访问限制。大家快动动手指尝试一下吧。相信大家都能掌握爬虫的基本实现方式，不过要注意要注意文明的爬虫哦。<br/> 另外，相信有着安全保护等等多种功能的IPIDEA一定会对企业有很大的意义，如果你企业有这方面的烦恼，不妨试试这款神器，限制注册就送1G流量哦。<a href=\"https://www.ipidea.net/\">官网地址</a></p>\n<hr/>\n<center>\n<font color=\"red\" size=\"5\"><b>文末送书</b></font>\n</center>\n<p>赠送书籍：<a href=\"https://item.jd.com/13559168.html\">《架构基础》</a><br/> 赠送数量：5<br/> 赠送规则：本文三连并分享<br/> 进抽奖群：加臻哥福利小助手进群( <font color=\"red\">szzdzhp002 </font>) 回复暗号：19</p>\n<blockquote>\n<p>本书不涉及任何具体的编程语言，采用大量的架构图、流程图、状态图、时序图等来图解企业级架构，更加清晰直观。每个章节都以场景化案例进行剖析，从需求、问题、解决方案、原理、设计方法、落地方案等多个角度，给出架构设计方法。可以根据本书目录查找对应的场景设计，参考应用在企业系统建设中。以阿里云 / 腾讯云消息系统、支付宝 / 微信支付系统、鹰眼业务监控系统、监管批量信息报送系统作为实战案例，详细讲解架构设计过程，对核心功能、设计、数据结构加以分析，巩固读者的架构思维和设计能力</p>\n<center>\n<img height=\"300/\" src=\"..\\..\\static\\image\\7a2bc533f9da4a7ba5deabfcbbb06c30.png\"/>\n</center>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-07-13 09:53:44", "summary": "文章目录一、爬虫的意义前言爬虫能做什么爬虫有什么意义二、爬虫的实现爬虫的基础原理的获取爬虫实现三、反爬解决方案反爬的实现方式反爬的解决方法反爬的实现代码还能做什么四、总结请添加图片描述一、爬虫的意义前"}