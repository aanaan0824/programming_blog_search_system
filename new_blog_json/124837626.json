{"blogid": "124837626", "writerAge": "码龄1年", "writerBlogNum": "17", "writerCollect": "71", "writerComment": "3", "writerFan": "7", "writerGrade": "2级", "writerIntegral": "214", "writerName": "峰上踏雪", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124837626.jpg", "writerRankTotal": "62169", "writerRankWeekly": "81661", "writerThumb": "29", "writerVisitNum": "10330", "blog_read_count": "3517", "blog_time": "已于 2022-05-18 11:28:28 修改", "blog_title": "c++11之智能指针", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<ul><li> 前 <p id=\"main-toc\"><strong>目录</strong></p> <p id=\"%E4%B8%80%EF%BC%8C%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%EF%BC%8C%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88\">一，什么是智能指针</a></p> <p id=\"%E4%BA%8C%EF%BC%8C%E5%85%B1%E4%BA%AB%E7%9A%84%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88shared_ptr-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%EF%BC%8C%E5%85%B1%E4%BA%AB%E7%9A%84%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88shared_ptr\">二，共享的智能指针shared_ptr</a></p> <p id=\"1.%20shared_ptr%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96-toc\" style=\"margin-left:80px;\"><a href=\"#1.%20shared_ptr%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96\">1. shared_ptr的初始化</a></p> <p id=\"3.%C2%A0%E6%8C%87%E5%AE%9A%E5%88%A0%E9%99%A4%E5%99%A8-toc\" style=\"margin-left:80px;\"><a href=\"#3.%C2%A0%E6%8C%87%E5%AE%9A%E5%88%A0%E9%99%A4%E5%99%A8\">3. 指定删除器</a></p> <p id=\"%C2%A0%E4%B8%89%EF%BC%8C%E7%8B%AC%E5%8D%A0%E7%9A%84%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88unique_ptr-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0%E4%B8%89%EF%BC%8C%E7%8B%AC%E5%8D%A0%E7%9A%84%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88unique_ptr\"> 三，独占的智能指针unique_ptr</a></p> <p id=\"%C2%A01.%20%E5%88%9D%E5%A7%8B%E5%8C%96-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A01.%20%E5%88%9D%E5%A7%8B%E5%8C%96\"> 1. 初始化</a></p> <p id=\"%C2%A02.%20%E5%88%A0%E9%99%A4%E5%99%A8-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A02.%20%E5%88%A0%E9%99%A4%E5%99%A8\"> 2. 删除器</a></p> <p id=\"%E5%9B%9B%EF%BC%8C%C2%A0%E5%BC%B1%E5%BC%95%E7%94%A8%E7%9A%84%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88weak_ptr-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%9B%9B%EF%BC%8C%C2%A0%E5%BC%B1%E5%BC%95%E7%94%A8%E7%9A%84%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88weak_ptr\">四， 弱引用的智能指针weak_ptr</a></p> <p id=\"%C2%A01%20%E5%88%9D%E5%A7%8B%E5%8C%96-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A01%20%E5%88%9D%E5%A7%8B%E5%8C%96\"> 1 初始化</a></p> <p id=\"%C2%A02.%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A02.%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0\"> 2.常用函数</a></p>\n<hr id=\"hr-toc\"/><p></p> 言：面试的时候被问到智能指针了，答的很糟糕，这几天重新学习了智能指针。下面是我对c++智能指针的理解与总结，希望能帮到大家，同时提升自己。</li></ul>\n<h1 id=\"%E4%B8%80%EF%BC%8C%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88\">一，什么是智能指针</h1>\n<blockquote>\n<p>在C++中没有垃圾回收机制，必须自己释放分配的内存，否则就会造成内存泄露。解决这个问题最有效的方法是使用智能指针（smart pointer）。<strong><code>智能指针是存储指向动态分配（堆）对象指针的类，用于生存期的控制，能够确保在离开指针所在作用域时，自动地销毁动态分配的对象，防止内存泄露。智能指针的核心实现技术是引用计数，每使用它一次，内部引用计数加1，每析构一次内部的引用计数减1，减为0时，删除所指向的堆内存。</code></strong></p>\n</blockquote>\n<ul><li> c++中用的最多的是下面三种智能指针</li></ul>\n<blockquote>\n<p></p>\n<p>C++11中提供了三种智能指针，使用这些智能指针时需要引用头文件<strong><code>&lt;memory&gt;</code></strong></p>\n<ul><li><strong><code>std::shared_ptr</code>：共享的智能指针</strong></li><li><strong><code>std::unique_ptr</code>：独占的智能指针</strong></li><li><strong><code>std::weak_ptr</code>：弱引用的智能指针，它不共享指针，不能操作资源，是用来监视shared_ptr的。</strong></li></ul>\n</blockquote>\n<ul><li> 下面对他们分别进行分析</li></ul>\n<h1 id=\"%E4%BA%8C%EF%BC%8C%E5%85%B1%E4%BA%AB%E7%9A%84%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88shared_ptr\">二，共享的智能指针<strong><code>shared_ptr</code></strong></h1>\n<ul><li>首先了解一下基本概念，再看代码，会学的很快</li></ul>\n<h3 id=\"1.%20shared_ptr%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96\">1. shared_ptr的初始化</h3>\n<blockquote>\n<p> 共享智能指针是指<strong>多个智能指针可以同时管理同一块有效的内存</strong>，共享智能指针shared_ptr 是一个模板类，如果要进行初始化有三种方式：通过构造函数、std::make_shared辅助函数以及reset方法。共享智能指针对象初始化完毕之后就指向了要管理的那块堆内存，如果想要查看当前有多少个智能指针同时管理着这块内存可以使用共享智能指针提供的一个成员函数<strong><code>use_count</code></strong></p>\n</blockquote>\n<p><strong>2.获取原始指针</strong></p>\n<blockquote>\n<p> 对应基础数据类型来说，通过操作智能指针和操作智能指针管理的内存效果是一样的，可以直接完成数据的读写。但是<strong>如果共享智能指针管理的是一个对象</strong>，那么就需要取出原始内存的地址再操作，<strong>可以调用共享智能指针类提供的get()方法得到原始地址</strong></p>\n</blockquote>\n<h3 id=\"3.%C2%A0%E6%8C%87%E5%AE%9A%E5%88%A0%E9%99%A4%E5%99%A8\">3. 指定删除器</h3>\n<blockquote>\n<p> 当智能指针管理的内存对应的引用计数变为0的时候，这块内存就会被智能指针析构掉了。另外，我们在初始化智能指针的时候也可以自己指定删除动作，<strong>这个删除操作对应的函数被称之为删除器</strong>，<strong>这个删除器函数本质是一个回调函数</strong>，我们只需要进行实现，其调用是由智能指针完成的。</p>\n</blockquote>\n<ul><li><strong> 上面三个基本知识点了解以后就可以轻松的阅读代码了（代码注释都非常的详细哦！）</strong></li></ul>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\nusing namespace std;\n#include &lt;string&gt;\n#include &lt;memory&gt;\n\nclass Test\n{\npublic:\n    Test() : m_num(0)\n    {\n        cout &lt;&lt; \"construct Test...\" &lt;&lt; endl;\n    }\n\n    Test(int x) : m_num(0)\n    {\n        cout &lt;&lt; \"construct Test, x = \" &lt;&lt; x &lt;&lt; endl;\n    }\n\n    Test(string str) : m_num(0)\n    {\n        cout &lt;&lt; \"construct Test, str = \" &lt;&lt; str &lt;&lt; endl;\n    }\n\n    ~Test()\n    {\n        cout &lt;&lt; \"destruct Test...\" &lt;&lt; endl;\n    }\n\n    void setValue(int v)\n    {\n        this-&gt;m_num = v;\n    }\n\n    void print()\n    {\n        cout &lt;&lt; \"m_num: \" &lt;&lt; this-&gt;m_num &lt;&lt; endl;\n    }\n\nprivate:\n    int m_num;\n};\n\nint main()\n{\n    /*--------------------------  一，初始化智能指针shared_ptr  ------------------------------*/\n    //1.通过构造函数初始化\n    shared_ptr&lt;int&gt; ptr1(new int(3));\n    cout &lt;&lt; \"ptr1管理的内存引用计数: \" &lt;&lt; ptr1.use_count() &lt;&lt; endl;\n\n    //2.通过移动和拷贝构造函数初始化\n    shared_ptr&lt;int&gt; ptr2 = move(ptr1);\n    cout &lt;&lt; \"ptr1管理的内存引用计数: \" &lt;&lt; ptr1.use_count() &lt;&lt; endl;\n    cout &lt;&lt; \"ptr2管理的内存引用计数: \" &lt;&lt; ptr2.use_count() &lt;&lt; endl;\n\n    shared_ptr&lt;int&gt; ptr3 = ptr2;\n    cout &lt;&lt; \"ptr2管理的内存引用计数: \" &lt;&lt; ptr2.use_count() &lt;&lt; endl;\n    cout &lt;&lt; \"ptr3管理的内存引用计数: \" &lt;&lt; ptr3.use_count() &lt;&lt; endl;\n\n    //3.通过 std::make_shared初始化\n    shared_ptr&lt;int&gt; ptr4 = make_shared&lt;int&gt;(8);\n    shared_ptr&lt;Test&gt; ptr5 = make_shared&lt;Test&gt;(7);\n    shared_ptr&lt;Test&gt; ptr6 = make_shared&lt;Test&gt;(\"GOOD LUCKLY!\");\n\n    //4.通过reset初始化\n    ptr6.reset(); //重置ptr6, ptr6的引用基数为0\n    cout &lt;&lt; \"ptr6管理的内存引用计数: \" &lt;&lt; ptr6.use_count() &lt;&lt; endl;\n\n    ptr5.reset(new Test(\"hello\"));\n    cout &lt;&lt; \"ptr5管理的内存引用计数: \" &lt;&lt; ptr5.use_count() &lt;&lt; endl;\n\n    cout &lt;&lt; endl;\n    cout &lt;&lt; endl;\n\n    /*--------------------------  二，共享智能指针shared_ptr的使用  ------------------------------*/\n    //1.方法一\n    Test* t = ptr5.get();\n    t-&gt;setValue(1000);\n    t-&gt;print();\n\n    //2.方法二\n    ptr5-&gt;setValue(7777);\n    ptr5-&gt;print();\n\n    printf(\"\\n\\n\");\n    /*------------------------------------  三，指定删除器  -----------------------------------*/\n     //1.简单举例\n    shared_ptr&lt;Test&gt; ppp(new Test(100), [](Test* t) {\n        //释放内存\n        cout &lt;&lt; \"Test对象的内存被释放了.......\" &lt;&lt; endl;\n        delete t;\n        });\n    printf(\"----------------------------------------------------------------------\\n\");\n\n    2.如果是数组类型的地址，就需要自己写指定删除器，否则内存无法全部释放\n    //shared_ptr&lt;Test&gt; p1(new Test[5], [](Test* t) {\n    //    delete[]t;\n    //    });\n\n    //3.也可以使用c++给我们提供的 默认删除器函数（函数模板）\n    shared_ptr&lt;Test&gt; p2(new Test[3], default_delete&lt;Test[]&gt;());\n\n    //4.c++11以后可以这样写 也可以自动释放内存\n    shared_ptr&lt;Test[]&gt; p3(new Test[3]);\n\n    return 0;\n}\n</code></pre>\n<blockquote>\n<p><strong> 另外，我们还可以自己封装一个函数模板make_shared_array方法来让shared_ptr支持数组，代码如下:</strong></p>\n</blockquote>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;memory&gt;\n#include &lt;string&gt;\nusing namespace std;\n\n//有了这个函数模板，我们就不用自己去释放数组类型的地址了\ntemplate &lt;typename T&gt;\nshared_ptr&lt;T&gt; make_share_array(size_t size) \n{\n\t//返回匿名对象\n\treturn shared_ptr&lt;T&gt;(new T[size], default_delete&lt;T[]&gt;());\n}\n\nint main()\n{\n\tshared_ptr&lt;int&gt; ptr1 = make_share_array&lt;int&gt;(10);\n\tcout &lt;&lt; ptr1.use_count() &lt;&lt; endl;\n\n\tshared_ptr&lt;string&gt; ptr2 = make_share_array&lt;string&gt;(7);\n\tcout &lt;&lt; ptr2.use_count() &lt;&lt; endl;\n\t\t\n\treturn 0;\n}</code></pre>\n<h1 id=\"%C2%A0%E4%B8%89%EF%BC%8C%E7%8B%AC%E5%8D%A0%E7%9A%84%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88unique_ptr\"> 三，独占的智能指针unique_ptr</h1>\n<ul><li>首先了解一下基本概念，再看代码，会学的很快</li></ul>\n<h3 id=\"%C2%A01.%20%E5%88%9D%E5%A7%8B%E5%8C%96\"> 1. 初始化</h3>\n<blockquote>\n<p></p>\n<p>std::unique_ptr是一个独占型的智能指针，它不允许其他的智能指针共享其内部的指针，可以通过它的构造函数初始化一个独占智能指针对象，但是不允许通过赋值将一个unique_ptr赋值给另一个unique_ptr。</p>\n</blockquote>\n<h3 id=\"%C2%A02.%20%E5%88%A0%E9%99%A4%E5%99%A8\"> 2. 删除器</h3>\n<blockquote>\n<p> unique_ptr指定删除器和shared_ptr指定删除器是有区别的，unique_ptr指定删除器的时候需要确定删除器的类型，所以不能像shared_ptr那样直接指定删除器</p>\n</blockquote>\n<p></p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\nusing namespace std;\n#include &lt;string&gt;\n#include &lt;memory&gt;\n#include &lt;functional&gt;\n\nclass Test\n{\npublic:\n    Test() : m_num(0)\n    {\n        cout &lt;&lt; \"construct Test...\" &lt;&lt; endl;\n    }\n\n    Test(int x) : m_num(1)\n    {\n        cout &lt;&lt; \"construct Test, x = \" &lt;&lt; x &lt;&lt; endl;\n    }\n\n    Test(string str) : m_num(2)\n    {\n        cout &lt;&lt; \"construct Test, str = \" &lt;&lt; str &lt;&lt; endl;\n    }\n\n    ~Test()\n    {\n        cout &lt;&lt; \"destruct Test...\" &lt;&lt; endl;\n    }\n\n    void setValue(int v)\n    {\n        this-&gt;m_num = v;\n    }\n\n    void print()\n    {\n        cout &lt;&lt; \"m_num: \" &lt;&lt; this-&gt;m_num &lt;&lt; endl;\n    }\n\nprivate:\n    int m_num;\n};\n\nint main()\n{\n    /*--------------------------  一，初始化智能指针unique_ptr  ------------------------------*/\n    //1.通过构造函数初始化\n    unique_ptr&lt;int&gt; ptr1(new int(3));\n\n    //2.通过移动函数初始化\n    unique_ptr&lt;int&gt; ptr2 = move(ptr1);\n\n    //.通过reset初始化\n    ptr2.reset(new int(7));\n\n    /*--------------------------  二，unique_ptr的使用  ------------------------------*/\n    //1.方法一\n    unique_ptr&lt;Test&gt; ptr3(new Test(666));\n    Test* pt = ptr3.get();\n    pt-&gt;setValue(6);\n    pt-&gt;print();\n\n    //2.方法二\n    ptr3-&gt;setValue(777);\n    ptr3-&gt;print();\n\n    /*------------------------------------  三，指定删除器  -----------------------------------*/\n    //1.函数指针类型\n    //using ptrFunc = void(*)(Test*);\n    //unique_ptr&lt;Test, ptrFunc&gt; ptr4(new Test(\"hello\"), [](Test* t) {\n    //    cout &lt;&lt; \"-----------------------\" &lt;&lt; endl;\n    //    delete t;\n    //    });\n\n    //2.仿函数类型（利用可调用对象包装器）\n    unique_ptr&lt;Test, function&lt;void(Test*)&gt;&gt; ptr4(new Test(\"hello\"), [](Test* t) {\n        cout &lt;&lt; \"-----------------------\" &lt;&lt; endl;\n        delete t;\n        });\n\n    /*---------- 四，独占(共享)的智能指针可以管理数组类型的地址，能够自动释放 ---------*/\n    unique_ptr&lt;Test[]&gt; ptr5(new Test[3]);\n\n    //在c++11中shared_ptr不支持下面的写法，c++11以后才支持的\n    shared_ptr&lt;Test[]&gt; ptr6(new Test[3]);\n\n    return 0;\n}\n</code></pre>\n<h1 id=\"%E5%9B%9B%EF%BC%8C%C2%A0%E5%BC%B1%E5%BC%95%E7%94%A8%E7%9A%84%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88weak_ptr\">四， 弱引用的智能指针weak_ptr</h1>\n<blockquote>\n<p><strong> 弱引用智能指针<code>std::weak_ptr</code>可以看做是<code>shared_ptr</code>的助手，它不管理<code>shared_ptr</code>内部的指针。<code>std::weak_ptr</code>没有重载操作符<code>*</code>和<code>-&gt;</code>，因为它不共享指针，不能操作资源，所以它的构造不会增加引用计数，析构也不会减少引用计数，它的主要作用就是作为一个旁观者监视<code>shared_ptr</code>中管理的资源是否存在。</strong></p>\n</blockquote>\n<h3 id=\"%C2%A01%20%E5%88%9D%E5%A7%8B%E5%8C%96\"> 1 初始化</h3>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;memory&gt;\nusing namespace std;\n\nint main() \n{\n    shared_ptr&lt;int&gt; sp(new int);\n\n    weak_ptr&lt;int&gt; wp1;\n    weak_ptr&lt;int&gt; wp2(wp1);\n    weak_ptr&lt;int&gt; wp3(sp);\n    weak_ptr&lt;int&gt; wp4;\n    wp4 = sp;\n    weak_ptr&lt;int&gt; wp5;\n    wp5 = wp3;\n    \n    return 0;\n}</code></pre>\n<ol><li><strong><code>weak_ptr&lt;int&gt; wp1;</code>构造了一个空<code>weak_ptr</code>对象</strong></li><li><strong><code>weak_ptr&lt;int&gt; wp2(wp1);</code>通过一个空<code>weak_ptr</code>对象构造了另一个空<code>weak_ptr</code>对象</strong></li><li><strong><code>weak_ptr&lt;int&gt; wp3(sp);</code>通过一个<code>shared_ptr</code>对象构造了一个可用的<code>weak_ptr</code>实例对象</strong></li><li><strong><code>wp4 = sp;</code>通过一个<code>shared_ptr</code>对象构造了一个可用的<code>weak_ptr</code>实例对象（这是一个隐式类型转换）</strong></li><li><strong><code>wp5 = wp3;</code>通过一个<code>weak_ptr</code>对象构造了一个可用的<code>weak_ptr</code>实例对象</strong></li></ol>\n<ul><li><strong> 通过调用<code>std::weak_ptr</code>类提供的<code>use_count()</code>方法可以获得当前所观测资源的引用计数</strong></li></ul>\n<h3 id=\"%C2%A02.%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0\"> 2.常用函数</h3>\n<blockquote>\n<ol><li><strong> 通过调用<code>std::weak_ptr</code>类提供的<code>expired()</code>方法来判断观测的资源是否已经被释放</strong></li><li><strong>通过调用<code>std::weak_ptr</code>类提供的<code>lock()</code>方法来获取管理所监测资源的<code>shared_ptr</code>对象</strong></li><li><strong>通过调用<code>std::weak_ptr</code>类提供的<code>reset()</code>方法来清空对象，使其不监测任何资源</strong></li></ol>\n</blockquote>\n<ul><li>利用<strong><code>weak_ptr可以解决shared_ptr的一些问题</code></strong></li></ul>\n<blockquote>\n<ol><li> 返回管理this的shared_ptr</li><li id=\"3-解决循环引用问题\">解决循环引用问题</li></ol>\n</blockquote>\n<p></p>\n</div>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-05-18 11:28:28", "summary": "前目录一，什么是智能指针二，共享的智能指针的初始化指定删除器三，独占的智能指针初始化删除器四，弱引用的智能指针初始化常用函数言：面试的时候被问到智能指针了，答的很糟糕，这几天重新学习了智能指针。下面是"}