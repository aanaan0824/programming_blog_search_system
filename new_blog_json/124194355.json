{"blogid": "124194355", "writerAge": "码龄4年", "writerBlogNum": "9", "writerCollect": "258", "writerComment": "37", "writerFan": "29", "writerGrade": "2级", "writerIntegral": "298", "writerName": "IT little white", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124194355.jpg", "writerRankTotal": "95236", "writerRankWeekly": "165184", "writerThumb": "28", "writerVisitNum": "24787", "blog_read_count": "8674", "blog_time": "于 2022-04-15 17:12:46 发布", "blog_title": "YOLOX训练自己的数据集（头铁出来的超详细教程）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>这里写自定义目录标题</h3>\n<ul><li><a href=\"#1YOLOX_2\">1.YOLOX环境搭建</a></li><li><ul><li><a href=\"#11conda_6\">1.1新建一个conda环境</a></li><li><a href=\"#12_17\">1.2安装代码依赖的库文件</a></li><li><a href=\"#13setuppy_27\">1.3通过setup.py安装一些库文件</a></li><li><a href=\"#14apex_32\">1.4下载apex文件</a></li><li><a href=\"#14pycocotools_41\">1.4下载pycocotools</a></li></ul>\n</li><li><a href=\"#2_47\">2.创建自己的数据集</a></li><li><ul><li><a href=\"#21VOC_49\">2.1创建VOC格式数据集</a></li></ul>\n</li><li><a href=\"#3_93\">3.训练</a></li><li><ul><li><a href=\"#31_94\">3.1修改文件代码</a></li><li><a href=\"#32_167\">3.2开始训练</a></li></ul>\n</li><li><a href=\"#3_181\">3.测试</a></li><li><ul><li><a href=\"#31_182\">3.1测试自己的训练结果</a></li></ul>\n</li><li><a href=\"#3_198\">3.预测结果</a></li><li><ul><li><ul><li><a href=\"#_211\">参考（侵删）</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"1YOLOX_2\"></a>1.YOLOX环境搭建</h1>\n<p>首先，搭建YOLOX所需要的环境。这里我使用Anaconda来搭建的。在搭建环境之前，先附上YOLOX的官方代码： <a href=\"https://github.com/Megvii-BaseDetection/YOLOX\">官方代码链接</a>.</p>\n<h2><a id=\"11conda_6\"></a>1.1新建一个conda环境</h2>\n<pre><code class=\"prism language-c\">conda create <span class=\"token operator\">-</span>n yolox python<span class=\"token operator\">=</span><span class=\"token number\">3.8</span>\n</code></pre>\n<pre><code class=\"prism language-c\">conda activate yolox   <span class=\"token comment\">//进入环境</span>\n</code></pre>\n<p>如果你想用原有的环境来搭建，也ok，直接激活你的环境。</p>\n<h2><a id=\"12_17\"></a>1.2安装代码依赖的库文件</h2>\n<p>用到你下载好的官方文件，在命令行中</p>\n<pre><code class=\"prism language-c\">cd your<span class=\"token operator\">/</span>yolox<span class=\"token operator\">-</span>main<span class=\"token operator\">/</span>path\n</code></pre>\n<pre><code class=\"prism language-c\">pip install <span class=\"token operator\">-</span>r requirements<span class=\"token punctuation\">.</span>txt\n</code></pre>\n<h2><a id=\"13setuppy_27\"></a>1.3通过setup.py安装一些库文件</h2>\n<pre><code class=\"prism language-c\">python3 setup<span class=\"token punctuation\">.</span>py develop\n</code></pre>\n<h2><a id=\"14apex_32\"></a>1.4下载apex文件</h2>\n<p><a href=\"https://github.com/NVIDIA/apex\">apex下载链接</a>.<br/> 下载好后cd到文件夹中并安装</p>\n<pre><code class=\"prism language-c\">cd path<span class=\"token operator\">/</span>to<span class=\"token operator\">/</span>your<span class=\"token operator\">/</span>apex\npython3 setup<span class=\"token punctuation\">.</span>py install\n</code></pre>\n<p>安装成功后会显示<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c45cf1ca4d4c4eeb92d1bfbfe6ac0960.png\"/></p>\n<h2><a id=\"14pycocotools_41\"></a>1.4下载pycocotools</h2>\n<pre><code class=\"prism language-c\">pip3 install cython\npip3 install <span class=\"token string\">'git+https://github.com/cocodataset/cocoapi.git#subdirectory=PythonAPI'</span>\n</code></pre>\n<h1><a id=\"2_47\"></a>2.创建自己的数据集</h1>\n<h2><a id=\"21VOC_49\"></a>2.1创建VOC格式数据集</h2>\n<p>yolox可以跑两种格式的数据集voc和coco，这里我用voc举例。<br/> yolox的预训练模型 <a href=\"https://github.com/Megvii-BaseDetection/YOLOX\">下载地址</a>.我用yolox-s.pth举例<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\07e4cad1d50940d8b0f73ae0cb8e1139.png\"/><br/> 这是目录格式要求，可以自己手动建立。</p>\n<p>其中，annotation用于存放xml格式的标签文件，JPEGimage用于存放原始图片。ImageSets/Main下的两个文件可以根据代码建立。</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">oding</span> <span class=\"token expression\"><span class=\"token operator\">=</span> utf<span class=\"token operator\">-</span><span class=\"token number\">8</span></span></span>\n# <span class=\"token operator\">-</span><span class=\"token operator\">*</span><span class=\"token operator\">-</span> coding<span class=\"token operator\">:</span>utf<span class=\"token operator\">-</span><span class=\"token number\">8</span> <span class=\"token operator\">-</span><span class=\"token operator\">*</span><span class=\"token operator\">-</span>\nimport os\nimport random\n\ntrainval_percent <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span>\ntrain_percent <span class=\"token operator\">=</span> <span class=\"token number\">0.9</span>\nxmlfilepath <span class=\"token operator\">=</span> r<span class=\"token string\">'E:\\YOLOX-main\\datasets\\VOCdevkit\\VOC2007\\Annotations'</span>\ntxtsavepath <span class=\"token operator\">=</span> r<span class=\"token string\">'E:\\YOLOX-main\\datasets\\VOCdevkit\\VOC2007\\ImageSets'</span>\ntotal_xml <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">listdir</span><span class=\"token punctuation\">(</span>xmlfilepath<span class=\"token punctuation\">)</span>\n\nnum <span class=\"token operator\">=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>total_xml<span class=\"token punctuation\">)</span>\nlist <span class=\"token operator\">=</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\ntv <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">*</span> trainval_percent<span class=\"token punctuation\">)</span>\ntr <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>tv <span class=\"token operator\">*</span> train_percent<span class=\"token punctuation\">)</span>\ntrainval <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span><span class=\"token function\">sample</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> tv<span class=\"token punctuation\">)</span>\ntrain <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span><span class=\"token function\">sample</span><span class=\"token punctuation\">(</span>trainval<span class=\"token punctuation\">,</span> tr<span class=\"token punctuation\">)</span>\n\nftest <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span>r<span class=\"token string\">'E:\\YOLOX-main\\datasets\\VOCdevkit\\VOC2007\\ImageSets\\Main\\test.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span>\nftrain <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span>r<span class=\"token string\">'\\YOLOX-main\\datasets\\VOCdevkit\\VOC2007\\ImageSets\\Main\\trainval.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> i in list<span class=\"token operator\">:</span>\n    name <span class=\"token operator\">=</span> total_xml<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">:</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span>\n    <span class=\"token keyword\">if</span> i in trainval<span class=\"token operator\">:</span>\n        ftest<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token operator\">:</span>\n        ftrain<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n\nftrain<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nftest<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n\n</code></pre>\n<p>运行此代码后会出现两个.txt文件。</p>\n<h1><a id=\"3_93\"></a>3.训练</h1>\n<h2><a id=\"31_94\"></a>3.1修改文件代码</h2>\n<p>修改 yolox/data/dataloading.py</p>\n<pre><code class=\"prism language-c\">def <span class=\"token function\">get_yolox_datadir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token string\">\"\"</span>\"\n    get dataset dir of YOLOX<span class=\"token punctuation\">.</span> If environment variable named `YOLOX_DATADIR` is set<span class=\"token punctuation\">,</span>\n    this function will <span class=\"token keyword\">return</span> value of the environment variable<span class=\"token punctuation\">.</span> Otherwise<span class=\"token punctuation\">,</span> use data\n    <span class=\"token string\">\"\"</span>\"\n    yolox_datadir <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">getenv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YOLOX_DATADIR\"</span><span class=\"token punctuation\">,</span> None<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> yolox_datadir is None<span class=\"token operator\">:</span>\n        import yolox\n\n        yolox_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span>yolox<span class=\"token punctuation\">.</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\">//修改这里</span>\n        yolox_datadir <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>yolox_path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"datasets\"</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">return</span> yolox_datadir\n</code></pre>\n<p>其次，修改exps/example/yolox_voc/yolox_voc_s.py</p>\n<pre><code class=\"prism language-c\">class <span class=\"token function\">Exp</span><span class=\"token punctuation\">(</span>MyExp<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    def <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">super</span><span class=\"token punctuation\">(</span>Exp<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>num_classes <span class=\"token operator\">=</span> <span class=\"token number\">10</span> #修改类别数目\n        self<span class=\"token punctuation\">.</span>depth <span class=\"token operator\">=</span> <span class=\"token number\">0.33</span>\n        self<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token number\">0.50</span>\n        self<span class=\"token punctuation\">.</span>warmup_epochs <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n</code></pre>\n<p>然后，修改这里，这块复制就好了</p>\n<pre><code class=\"prism language-c\">        with <span class=\"token function\">wait_for_the_master</span><span class=\"token punctuation\">(</span>local_rank<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n            dataset <span class=\"token operator\">=</span> <span class=\"token function\">VOCDetection</span><span class=\"token punctuation\">(</span>\n                data_dir<span class=\"token operator\">=</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token function\">get_yolox_datadir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"VOCdevkit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token comment\">//修改这里</span>\n                image_sets<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2007'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'trainval'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2012'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'trainval'</span><span class=\"token punctuation\">)</span>\n                img_size<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>input_size<span class=\"token punctuation\">,</span>\n                preproc<span class=\"token operator\">=</span><span class=\"token function\">TrainTransform</span><span class=\"token punctuation\">(</span>\n                    max_labels<span class=\"token operator\">=</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span>\n                    flip_prob<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>flip_prob<span class=\"token punctuation\">,</span>\n                    hsv_prob<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>hsv_prob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                cache<span class=\"token operator\">=</span>cache_img<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span>\n</code></pre>\n<p>修改yolox/data/datasets/voc_classes.py为自己的类别。</p>\n<pre><code class=\"prism language-c\">VOC_CLASSES <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'5'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'6'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'7'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'8'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'9'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'10'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>最后，修改yolox/evaluators/voc_eval.py，添加root为annotation的绝对路径。</p>\n<pre><code class=\"prism language-c\">#修改yolox<span class=\"token operator\">/</span>evaluators<span class=\"token operator\">/</span>voc_eval<span class=\"token punctuation\">.</span>py，添加root为annotation的绝对路径。\nroot <span class=\"token operator\">=</span> r<span class=\"token string\">'E:\\YOLOX-main\\datasets\\VOCdevkit\\VOC2007\\Annotations\\\\'</span>\ndef <span class=\"token function\">parse_rec</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token string\">\"\"</span><span class=\"token string\">\" Parse a PASCAL VOC xml file \"</span><span class=\"token string\">\"\"</span>\n    tree <span class=\"token operator\">=</span> ET<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">+</span> filename<span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"32_167\"></a>3.2开始训练</h2>\n<p>超参数设置：</p>\n<pre><code class=\"prism language-c\">python tools<span class=\"token operator\">/</span>train<span class=\"token punctuation\">.</span>py <span class=\"token operator\">-</span>f exps<span class=\"token operator\">/</span>example<span class=\"token operator\">/</span>yolox_voc<span class=\"token operator\">/</span>yolox_voc_s<span class=\"token punctuation\">.</span>py <span class=\"token operator\">-</span>d <span class=\"token number\">0</span> <span class=\"token operator\">-</span>b <span class=\"token number\">4</span> <span class=\"token operator\">--</span>fp16  <span class=\"token operator\">-</span>c yolox_s<span class=\"token punctuation\">.</span>pth\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0c17d8539df4477cb52d7a7449ceae52.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4ef3f94b16214064b066fd71c4033b0c.png\"/><br/> 如果训练中断，开启，resume</p>\n<pre><code class=\"prism language-c\">python3 tools<span class=\"token operator\">/</span>train<span class=\"token punctuation\">.</span>py <span class=\"token operator\">-</span>f exps<span class=\"token operator\">/</span>example<span class=\"token operator\">/</span>yolox_voc<span class=\"token operator\">/</span>yolox_voc_s<span class=\"token punctuation\">.</span>py <span class=\"token operator\">-</span>d <span class=\"token number\">0</span> <span class=\"token operator\">-</span>b <span class=\"token number\">64</span> <span class=\"token operator\">-</span>c <span class=\"token operator\">&lt;</span>last_epoch_ckpt<span class=\"token punctuation\">.</span>pth的路径<span class=\"token operator\">&gt;</span> <span class=\"token operator\">--</span>resume\n</code></pre>\n<h1><a id=\"3_181\"></a>3.测试</h1>\n<h2><a id=\"31_182\"></a>3.1测试自己的训练结果</h2>\n<p>修改yolox/data/datasets/下的init.py文件，添加：<br/> <code>from .voc_classes import VOC_CLASSES</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4e2f6af640d84295a7d5fa58a124a0d5.png\"/></p>\n<p>之后在toos/demo.py文件中将COCO_CLASSES全部修改为VOC_CLASSES<br/> 直接在此文件find下COCO_CLASSES然后全部修改为VOC_CLASSES就好了。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b7b79349e3834f679d1ab9472833217f.png\"/></p>\n<pre><code class=\"prism language-c\">python tools<span class=\"token operator\">/</span>demo<span class=\"token punctuation\">.</span>py image <span class=\"token operator\">-</span>f exps<span class=\"token operator\">/</span>example<span class=\"token operator\">/</span>yolox_voc<span class=\"token operator\">/</span>yolox_voc_s<span class=\"token punctuation\">.</span>py <span class=\"token operator\">-</span>c weights<span class=\"token operator\">/</span>best_ckpt<span class=\"token punctuation\">.</span>pth <span class=\"token operator\">--</span>path assets<span class=\"token operator\">/</span>class01<span class=\"token punctuation\">.</span>jpg <span class=\"token operator\">--</span>conf <span class=\"token number\">0.25</span> <span class=\"token operator\">--</span>nms <span class=\"token number\">0.45</span> <span class=\"token operator\">--</span>tsize <span class=\"token number\">640</span> <span class=\"token operator\">--</span>save_result <span class=\"token operator\">--</span>device <span class=\"token punctuation\">[</span>cpu<span class=\"token operator\">/</span>gpu<span class=\"token punctuation\">]</span>\n</code></pre>\n<p>-c 代表训练好的权重，-path 代表你要预测的图片存放的文件夹，<br/> 若想进行视频预测，只需将下面的 image 更换为 video；<br/> 若想预测整个文件夹，将.jpg去掉，只留 --path assets/</p>\n<h1><a id=\"3_198\"></a>3.预测结果</h1>\n<p>跑了300个epoch训练了两个类，一个是飞机一个是油罐，感觉精度在280个epoch的时候明显上升，但是最终的结果不如v5好，不知道是因为我将.txt转xml出错了还是果真效果就是不太行，这个我还没分析。上图：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\91aa1e0b1b25457b9b0a1a40c9b4daaf.png\"/><br/> 上图是yolox-s的效果，我人麻了……<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0d27b2f6113946eba6ac2af9a4a0d01c.png\"/><br/> 上图是yolov5-x的效果。。。</p>\n<p>好了我继续trick了，感兴趣的小伙伴来一起交流<br/> 持续更新中……</p>\n<h3><a id=\"_211\"></a>参考（侵删）</h3>\n<p><a href=\"https://zhuanlan.zhihu.com/p/477567587\">文献1</a>.<br/> <a href=\"https://blog.csdn.net/RooKichenn/article/details/123831658\">文献2</a>.<br/> <a href=\"https://blog.csdn.net/crush111/article/details/119871856\">文献3</a>.<br/> <a href=\"https://blog.csdn.net/qq_40716944/article/details/120409457\">文献4</a>.</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-04-15 17:12:46", "summary": "这里写自定义目录标题环境搭建新建一个环境安装代码依赖的库文件通过安装一些库文件下载文件下载创建自己的数据集创建格式数据集训练修改文件代码开始训练测试测试自己的训练结果预测结果参考侵删环境搭建首先，搭建"}