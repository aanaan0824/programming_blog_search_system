{"blogid": "126186869", "writerAge": "码龄1年", "writerBlogNum": "91", "writerCollect": "6675", "writerComment": "12511", "writerFan": "13016", "writerGrade": "7级", "writerIntegral": "19555", "writerName": "微凉秋意", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126186869.jpg", "writerRankTotal": "415", "writerRankWeekly": "1", "writerThumb": "7481", "writerVisitNum": "121073", "blog_read_count": "801", "blog_time": "已于 2022-08-17 22:55:18 修改", "blog_title": "【学习挑战赛】经典算法之直接选择排序", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>活动地址：<a href=\"https://marketing.csdn.net/p/bdabfb52c5d56532133df2adc1a728fd\">CSDN21天学习挑战赛</a></p>\n</blockquote>\n<blockquote>\n<p>✅作者简介：C/C++领域新星创作者，为C++和java奋斗中<br/> ✨个人社区：<a href=\"http://t.csdn.cn/4h8pd\">微凉秋意社区</a><br/> 🔥系列专栏：<a href=\"https://blog.csdn.net/m0_58618795/category_11798047.html?spm=1001.2014.3001.5482\">经典算法</a><br/> 📃推荐一款模拟面试、刷题神器👉<a href=\"https://www.nowcoder.com/link/pc_csdncpt_ylqb_c\">注册免费刷题</a></p>\n</blockquote>\n<p>🔥前言</p>\n<blockquote>\n<p>书接上文，今天带来直接选择排序算法的解析过程，从概念到实现一步一个脚印的完成。天气那么热，快来点简单算法解解渴！</p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_11\">直接选择排序算法解析</a></li><li><ul><li><a href=\"#_12\">一、理解直接选择排序思想</a></li><li><a href=\"#_14\">二、算法分析</a></li><li><ul><li><a href=\"#1_15\">1、算法流程</a></li><li><a href=\"#2_20\">2、具体步骤</a></li></ul>\n</li><li><a href=\"#_26\">三、代码实现</a></li><li><a href=\"#_54\">四、时间复杂度分析</a></li><li><ul><li><a href=\"#1_55\">1、计算时间复杂度的一般步骤</a></li><li><a href=\"#2_62\">2、该算法时间复杂度</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_11\"></a>直接选择排序算法解析</h1>\n<h2><a id=\"_12\"></a>一、理解直接选择排序思想</h2>\n<blockquote>\n<p><strong>整个过程就是每一趟都将无序区中的所有元素进行逐一比较，找到最小的元素，与无序区中的首个元素进行交换，每次遍历会让有序区长度加1，无序区长度减1。重复以上步骤，直到所有的元素均已排好。该排序也称简单选择排序。</strong></p>\n</blockquote>\n<h2><a id=\"_14\"></a>二、算法分析</h2>\n<h3><a id=\"1_15\"></a>1、算法流程</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/7509112d30e941db99ad1c935fe22e76.gif#pic_center\"/></p>\n<ul><li><em>流程图释义：</em></li></ul>\n<blockquote>\n<ul><li>黄色序列是最终效果，可以看出该序列是从小到大的顺序；</li><li>蓝色是无序区，意思就是蓝色会一直往后遍历，选出最小值并把最小值放到蓝色区的开头，随后该块蓝色变为黄色，有序区加一，无序区减一。</li></ul>\n</blockquote>\n<h3><a id=\"2_20\"></a>2、具体步骤</h3>\n<ol><li>首先，将第一个元素固定，从剩下的元素中找到最小值下标并与固定位置的元素值互换</li><li>同上，只不过固定第二个元素，最后互换的也是第二个位置与最小值下标的值</li><li>直到该序列被遍历结束，排序才会结束</li></ol>\n<blockquote>\n<ul><li><strong>值得注意的是，如果该序列长度为n，那么遍历n-1次即可，否则数组会溢出</strong></li></ul>\n</blockquote>\n<h2><a id=\"_26\"></a>三、代码实现</h2>\n<ul><li><em>选择排序算法代码：</em></li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//直接选择排序</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dirChoose</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tk <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">!=</span> i<span class=\"token punctuation\">)</span><span class=\"token comment\">//如果不等，说明存在无序区比固定位置的元素值小</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\tarr<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\tarr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li><em>辅助函数速览：</em></li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ffb5e83e62c04118b86bd312b0b6e657.png\"/></p>\n<ul><li><em>主函数调用速览：</em></li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1eb08066af8d447db448c97d7ec4fec9.png\"/></p>\n<h2><a id=\"_54\"></a>四、时间复杂度分析</h2>\n<h3><a id=\"1_55\"></a>1、计算时间复杂度的一般步骤</h3>\n<ul><li><em>这里要说一下分析时间复杂度的方法：</em></li></ul>\n<blockquote>\n<ol><li>找程序中的<strong>基本语句</strong>\n<ul><li>基本语句就是运行最多的那一行或者一段代码</li></ul> </li><li>分析基本语句的执行次数或者执行规律，写出时间复杂度 \n   <ul><li>符合近似计算原则，常见的有O(1)、O(<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n        \n         \n          \n           \n            n\n           \n          \n          \n           n\n          \n         \n        </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></span>)、O(<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n        \n         \n          \n           \n            l\n           \n           \n            o\n           \n           \n            g\n           \n           \n            2\n           \n           \n            n\n           \n          \n          \n           log2n\n          \n         \n        </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.8889em; vertical-align: -0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0197em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right: 0.0359em;\">g</span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span></span></span></span></span>) 和 O(<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n        \n         \n          \n           \n            \n             n\n            \n            \n             2\n            \n           \n          \n          \n           n^{2}\n          \n         \n        </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.8141em;\"><span class=\"\" style=\"top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></span>)</li></ul> </li></ol>\n</blockquote>\n<h3><a id=\"2_62\"></a>2、该算法时间复杂度</h3>\n<ul><li>直接选择排序算法的外层循环和内层循环并没有执行次数上的联系，又因为外层会执行n-1次，而内层也会执行n-1次，所以该算法的时间复杂度就是<strong>O(<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          \n           n\n          \n          \n           2\n          \n         \n        \n        \n         n^{2}\n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.8141em;\"><span class=\"\" style=\"top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></span>)</strong></li></ul>\n<p><strong>写在最后</strong><br/> <code>这篇文章的最后我也是总结了一般计算时间复杂度的方法，大家可以根据本篇博文去分析时间复杂度或者再以后的做题中思考、锻炼。</code></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-08-17 22:55:18", "summary": "活动地址：天学习挑战赛作者简介：领域新星创作者，为和奋斗中个人社区：微凉秋意社区系列专栏：经典算法推荐一款模拟面试、刷题神器注册免费刷题前言书接上文，今天带来直接选择排序算法的解析过程，从概念到实现一"}