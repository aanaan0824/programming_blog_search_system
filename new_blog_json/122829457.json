{"blogid": "122829457", "writerAge": "码龄8年", "writerBlogNum": "58", "writerCollect": "139", "writerComment": "6", "writerFan": "33", "writerGrade": "3级", "writerIntegral": "721", "writerName": "金增辉", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122829457.jpg", "writerRankTotal": "26020", "writerRankWeekly": "20460", "writerThumb": "42", "writerVisitNum": "58228", "blog_read_count": "2819", "blog_time": "已于 2022-02-18 09:44:14 修改", "blog_title": "C#操作Access数据库", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>C#操作Access数据库</h3>\n<ul><li><a href=\"#__2\">第一章 简介</a></li><li><a href=\"#_CACCESS_39\">第二章 C#与ACCESS的交互操作</a></li><li><ul><li><a href=\"#_CACCESS_40\">第一节 利用C#创建一个ACCESS数据库文件</a></li><li><a href=\"#__CMDB_53\">第二节 C#在MDB文件中创建表</a></li><li><a href=\"#___64\">第三节 显示数据库中表格内容</a></li><li><a href=\"#___99\">第四节 表格中内容更新到数据库</a></li></ul>\n</li><li><a href=\"#___SQL_139\">第三章 SQL基础教程</a></li><li><a href=\"#_141\">持续更新中。。。。。。。。</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"__2\"></a>第一章 简介</h1>\n<p>Access数据的优点：<br/> 1，存储方式单一 Access管理的对象有表、查询、窗体、报表、页、宏和模块，以上对象都存放在后缀为 .mdb 的数据库文件中，便于用户的操作和管理。<br/> 2，面向对象<br/> 3，界面友好，易操作<br/> 4，轻量级，数据库(.mdb)文件可以直接加载到C#项目文件里(个人认为它最大的优点就是这个)<br/> 连接Access数据库的步骤和连接SQL Server Oracle MySql 数据库的方式类似分为7 步：<br/> 1，新建OleDbConnection对象 并传入连接字符串 获得与数据库的连接</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">OleDbConnection</span> conn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">OleDbConnection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"provider = microsoft.Jet.OLEDB.4.0;Data Source = D:\\\\Student.mdb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>2,使用OleDbConnection对象的实例conn 新建OleDbCommand对象</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">OleDbCommand</span> comm <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">CreateCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>3,通过OleDbCommand的实例comm传入Sql语句</p>\n<pre><code class=\"prism language-csharp\">comm<span class=\"token punctuation\">.</span>CommandText <span class=\"token operator\">=</span> <span class=\"token string\">\"select * from student\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>4,打开连接</p>\n<pre><code class=\"prism language-csharp\">conn<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>5,调用实例comm的ExecuteReader()并保存在OleDbDataReader对象中</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">OleDbDataReader</span> dr <span class=\"token operator\">=</span> comm<span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>dr 里面就是从数据库查到的数据 可以对它进行相关的操作</p>\n<p>6，释放资源</p>\n<pre><code class=\"prism language-csharp\">conn<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>7,关闭连接</p>\n<pre><code class=\"prism language-csharp\">conn<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h1><a id=\"_CACCESS_39\"></a>第二章 C#与ACCESS的交互操作</h1>\n<h2><a id=\"_CACCESS_40\"></a>第一节 利用C#创建一个ACCESS数据库文件</h2>\n<p>A.mdb文件是原来没有的，程序需要创建一个然后往里面写数据！<br/> 1.新建工程 —进入解决方案－&gt;引用-&gt;添加引用 —选择com标签下的“Microsoft ADO Ext. 2.8 for DDL and Security”—点击OK<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8fb09280ea97417c98913bcaf863f1cb.png\"/><br/> 2.添加引用：<code>using ADOX;</code><br/> 3.用ADOX创建access数据库</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">ADOX<span class=\"token punctuation\">.</span>Catalog</span> catalog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Catalog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncatalog<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=test.mdb;Jet\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这时在运行在debug文件夹下就可以看到这个mdb了。<br/> 其实何必要创建呢，我每次都是建一个空白的mdb文件，需要的时候再拷贝一下就可以啦。</p>\n<h2><a id=\"__CMDB_53\"></a>第二节 C#在MDB文件中创建表</h2>\n<p>生成表NewTable，该表有文本字段Field1和整型字段Field2</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> conStr <span class=\"token operator\">=</span> <span class=\"token string\">\"Provider = Microsoft.Jet.OLEDB.4.0; Data Source = test.mdb\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">OleDbConnection</span> conn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">OleDbConnection</span><span class=\"token punctuation\">(</span>conStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> dbstr <span class=\"token operator\">=</span> <span class=\"token string\">\"CREATE TABLE NewTable(Field1 TEXT, Field2 INTEGER)\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">OleDbCommand</span> oleDbCom <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">OleDbCommand</span><span class=\"token punctuation\">(</span>dbstr<span class=\"token punctuation\">,</span> conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconn<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noleDbCom<span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteNonQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconn<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"___64\"></a>第三节 显示数据库中表格内容</h2>\n<p>数据流：<br/> 数据库—创建DataAdapter实例就建立好了和数据库的关联——通过DataAdapter实例的Fill指令将数据填充到Dataset——选择Dataset中的表格添加到DataTable——将表格填充到dataGridView1.DataSource。</p>\n<p>开始前：：先建立一个数据库test.mdb，在其中建立表格NewTable，表格中自己添加一些内容；</p>\n<pre><code class=\"prism language-csharp\"> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">viewAccessInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//【1】连接数据库</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> connect_str <span class=\"token operator\">=</span> <span class=\"token string\">\"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=test.mdb\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">OleDbConnection</span> thisConnection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">OleDbConnection</span><span class=\"token punctuation\">(</span>connect_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//【2】编写SQL指令，星号（*）是选取所有列的快捷方式。</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"select * from NewTable\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//OleDbDataAdapter是 DataSet 和数据源之间的桥梁，用于检索和保存数据。</span>\n            <span class=\"token class-name\">OleDbDataAdapter</span> thisAdapter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">OleDbDataAdapter</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> thisConnection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//DataSet可以理解成在应用程序中的数据库</span>\n            <span class=\"token class-name\">DataSet</span> thisDataSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">System<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">.</span>DataSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//使用 Fill 将数据从数据源加载到 DataSet 中</span>\n            thisAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">Fill</span><span class=\"token punctuation\">(</span>thisDataSet<span class=\"token punctuation\">,</span> <span class=\"token string\">\"table\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//DataTable可以理解成DataSet的一个表格；将table中的表格内容添加到datatable</span>\n            <span class=\"token class-name\">DataTable</span> dt <span class=\"token operator\">=</span> thisDataSet<span class=\"token punctuation\">.</span>Tables<span class=\"token punctuation\">[</span><span class=\"token string\">\"table\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//将数据表和dataGridView1进行绑定</span>\n            dataGridView1<span class=\"token punctuation\">.</span>DataSource <span class=\"token operator\">=</span> dt<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//关闭连接</span>\n            thisConnection<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行效果如下：<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d4763802b9cc47319e69db62853f644c.png\"/><br/> 1，将DataGridView控件的界面大小随着我们显示的内容变化而变化。只要设置AutoSizeCloumnsMode这个属性，将它的属性值设为Fill就可以了。<br/> 2，有些时候我们想让DataGridView控件的大小随着窗体或者是页面的大小变化而变化，两个方法分别是：<br/> （1）设置DataGridView的属性Anchor的值为上下左右就可以了。<br/> （2）设置Dock属性为Fill，就是将DataGridView填满整个窗体或者是页面。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a31e08a8d0024cf7a493f975d8ec6a6c.png\"/><br/> 运行效果如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\393a7a01e3bd43b7bcc72710c3315a27.png\"/></p>\n<h2><a id=\"___99\"></a>第四节 表格中内容更新到数据库</h2>\n<p>数据流：<br/> 将数据表在datagridview中显示出来——将dataGridView1.DataSource转换成表格形式——通过OleDbCommandBuilder选取需要添加的数据库表格和连接，与前面的OleDbDataAdapter对象关联——通过adp.Update完成更新。<br/> 实现步骤如下：<br/> 1． 建立数据库连接<br/> 2． 实例化OleDbDataAdapter对象！<br/> 3． 建立一个DataSet对象，并把执行select语句得到的记录添加到其中<br/> 4．建立OleDbCommandBuilder对象！并让它与我们前面的OleDbDataAdapter对象关联<br/> 5． 对DataSet中包含表的特定记录进行增加、删除、修改<br/> 6． 执行OleDbDataAdapter对象的Update命令更新数据库<br/> 7． 关闭数据库连接</p>\n<pre><code class=\"prism language-csharp\">        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Form1_Load</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//viewAccessInfo();//显示数据库文件的内容到画面</span>\n            <span class=\"token function\">DateToAccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DateToAccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=test.mdb\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">OleDbConnection</span> conn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">OleDbConnection</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            adp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">OleDbDataAdapter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from NewTable\"</span><span class=\"token punctuation\">,</span> conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">DataTable</span> dt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DataTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            adp<span class=\"token punctuation\">.</span><span class=\"token function\">Fill</span><span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            dataGridView1<span class=\"token punctuation\">.</span>DataSource <span class=\"token operator\">=</span> dt<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-csharp\">        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">button1_Click</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> dt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DataTable<span class=\"token punctuation\">)</span>dataGridView1<span class=\"token punctuation\">.</span>DataSource<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">OleDbCommandBuilder</span> cmdb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">OleDbCommandBuilder</span><span class=\"token punctuation\">(</span>adp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            adp<span class=\"token punctuation\">.</span><span class=\"token function\">Update</span><span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>注意事项：<br/> 1.不含主键字段，执行Select语句没有任何问题，但数据库无法执行Insert、Update和Delete语句。若要对显示出来的数据进行修改并更新数据库，务必把数据库表格的主键（Primary Key）带上。<br/> 2.OleDbCommand属于DBcommand（还包括odbcCommand\\OracleCommand\\SqlCommand)类派生，DBcommand的作用是:当建立与数据源的连接后，可以使用 DBCommand 对象来执行命令并从数据源中返回结果；<br/> 3.DataAdapter 用于从数据源检索数据并填充 DataSet 中的表。DataAdapter 还将对 DataSet 的更改解析回数据源。DataAdapter 使用 .NET Framework 数据提供程序的 Connection 对象连接到数据源，并使用 Command 对象从数据源检索数据以及将更改解析回数据源。<br/> 4.OleDbCommandBuilder就是相当于updatecommand,但是它是自动调用的。</p>\n<h1><a id=\"___SQL_139\"></a>第三章 SQL基础教程</h1>\n<p><a href=\"https://www.w3school.com.cn/sql/sql_syntax.asp\">单击打开教程链接</a></p>\n<h1><a id=\"_141\"></a>持续更新中。。。。。。。。</h1>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 0, "time": "2022-02-18 09:44:14", "summary": "操作数据库第一章简介第二章与的交互操作第一节利用创建一个数据库文件第二节在文件中创建表第三节显示数据库中表格内容第四节表格中内容更新到数据库第三章基础教程持续更新中。。。。。。。。第一章简介数据的优点"}