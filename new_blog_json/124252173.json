{"blogid": "124252173", "writerAge": "码龄15年", "writerBlogNum": "15", "writerCollect": "76", "writerComment": "19", "writerFan": "10", "writerGrade": "3级", "writerIntegral": "414", "writerName": "小灯数据-脚本小王子", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124252173.jpg", "writerRankTotal": "85059", "writerRankWeekly": "102292", "writerThumb": "26", "writerVisitNum": "38214", "blog_read_count": "3390", "blog_time": "已于 2022-04-18 16:43:04 修改", "blog_title": "SQL Server实现group_concat功能", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>一、实现</h1>\n<p>#tmp表内容如下：</p>\n<p><img alt=\"\" class=\"left\" src=\"..\\..\\static\\image\\b7c3a0160073ec85dabbc4385c2881be.png\"/></p>\n<p> </p>\n<p>实现group_concat的sql语句为：</p>\n<pre><code>Select\n　　RegionID，\n　　STUFF(\n　　　　　　　(\n　　　　　　　　　SELECT ',' + T.c1\n　　　　　　　　　FROM #tmp T\n　　　　　　　　　WHERE A.regionid = T.regionid\n　　　　　　　　　FOR XML PATH('')\n　　　　　　　), 1, 1, ''\n　　　　　) as group_concat \nFROM #tmp A\nGroup by  RegionID\n</code></pre>\n<p>实现效果如下：</p>\n<p><img alt=\"\" class=\"left\" src=\"..\\..\\static\\image\\19952e7b7cd4bd35e37f716e1e9c71b4.png\"/></p>\n<p> </p>\n<h1>二、原理分析</h1>\n<h2>2.1、FOR XML PATH的作用</h2>\n<p>FOR XML PATH 的作用是将查询结果集以XML形式展现，将多行的结果，展示在同一行，例如：</p>\n<pre><code>select c1 from #tmp where RegionID = 41653\n</code></pre>\n<p>其结果集如下：</p>\n<p><img alt=\"\" class=\"left\" src=\"..\\..\\static\\image\\4d58db4236675ce6cc3b33969dcf01e1.png\"/></p>\n<p> </p>\n<pre><code>select c1 from #tmp where RegionID = 41653 FOR XML PATH('')\n</code></pre>\n<p>当sql语句加上 FOR XML PATH('') 后，其结果集输出是：</p>\n<p><img alt=\"\" class=\"left\" src=\"..\\..\\static\\image\\b8586cc3adafbf178929e54a2de3bcf9.png\"/></p>\n<p> </p>\n<p>具体输出的字符如下：</p>\n<table><tbody><tr><td colspan=\"1\" rowspan=\"1\">&lt;c1&gt;30.326809&lt;/c1&gt;&lt;c1&gt;30.327982&lt;/c1&gt;&lt;c1&gt;30.347933&lt;/c1&gt;&lt;c1&gt;30.388104&lt;/c1&gt;&lt;c1&gt;30.392830&lt;/c1&gt;&lt;c1&gt;30.367931&lt;/c1&gt;&lt;c1&gt;30.368052&lt;/c1&gt;&lt;c1&gt;30.367842&lt;/c1&gt;&lt;c1&gt;30.357318&lt;/c1&gt;&lt;c1&gt;30.357349&lt;/c1&gt;&lt;c1&gt;30.357349&lt;/c1&gt;</td></tr></tbody></table>\n<p>通过字符拼接后可以把xml信息清除，并以指定的字符进行分割：</p>\n<pre><code>select ',' + c1 from #tmp where RegionID = 41653 FOR XML PATH('')</code></pre>\n<p><img alt=\"\" class=\"left\" src=\"..\\..\\static\\image\\058f4649b987d0e3dca19b96c5eda13d.png\"/></p>\n<p> </p>\n<p>此时已基本达到group_concat的效果，但第一个字符串有分隔符需要去掉。</p>\n<h2>2.2、STUFF函数</h2>\n<h3>2.2.1、STUFF函数在本SQL的作用</h3>\n<p>我们使用STＵFF函数的目的是把第一个分隔符去掉。先看看效果：</p>\n<p><img alt=\"\" class=\"left\" src=\"..\\..\\static\\image\\256b544d948c0a9e76ece37a17a3c328.png\"/></p>\n<p> </p>\n<p>上图可以看到，STＵFF函数把字符串“abcdefg”中的第一个字符“a”删除。</p>\n<p>使用该函数我们可以很轻松的把上图得到的结果集去掉第一个逗号分隔符：</p>\n<p><img alt=\"\" class=\"left\" src=\"..\\..\\static\\image\\b45c7f108f99c803faad703e51fb57af.png\"/></p>\n<p> </p>\n<p>需要详细了解STＵFF函数可继续看该函数的语法，没兴趣的可以忽略。</p>\n<h3>2.2.2、STUFF函数语法</h3>\n<p>　　STUFF函数的作用是将字符串插入到另一个字符串中。它从第一个字符串的开始位置删除指定长度的字符，然后将第二个字符串插入到第一个字符串的开始位置。其语法为：</p>\n<pre><code>STUFF(character_expression , start , length , replaceWith_expression)\n</code></pre>\n<p><strong>character_expression</strong>：字符数据的表达式，可以是常量、变量，也可以是字符列或二进制数据列。</p>\n<p><strong>start</strong>：一个整数值(从1开始)，指定删除和插入的开始位置。start的类型可以是bigint。</p>\n<p>　　• 如果 start 为负或为零，则返回空字符串。</p>\n<p>　　• 如果 start 的长度大于第一个 character_expression，则返回空字符串。 </p>\n<p><strong>length</strong>：一个整数，指定要删除的字符数。length的类型可以是 bigint。</p>\n<p>　　• 如果 length 为负，则返回空字符串。</p>\n<p>　　• 如果 length 的长度大于character_expression，则最多可以删除到character_expression 中的最后一个字符。</p>\n<p>　　• 如果 length 为零，则不删除字符直接在指定位置插入内容。 </p>\n<p><strong>replaceWith_expression</strong>：字符数据的表达式，可以是常量、变量，也可以是字符列或二进制数据列。此表达式从 start 开始替换 length 个字符的character_expression。</p>\n<p>　　• 如果 replaceWith_expression 为 NULL，则在不插入任何内容的情况下删除字符。</p>\n<h2>2.3、sql语分分析</h2>\n<h3>2.3.1、一个简单的group by</h3>\n<pre><code>Select　RegionID \nFROM #tmp A\nGroup by RegionID\n</code></pre>\n<p>　　这个sql各位看官都十分熟悉，已经没什么好说的了。</p>\n<h3>2.3.2、在select语句后面加上子查询</h3>\n<pre><code>Select　RegionID,\n　　　　(\n　　　　　　SELECT ',' + T.c1\n　　　　　　FROM #tmp T\n　　　　　　WHERE A.regionid = T.regionid\n　　　　　　FOR XML PATH('')\n　　　　) \nFROM #tmp A\nGroup by RegionID\n</code></pre>\n<p>在上述简单的group by语句基础上加入一个select里的子查询，其结果如下：</p>\n<p><img alt=\"\" class=\"left\" src=\"..\\..\\static\\image\\8605a3db33167dc2a7884c38b73f1648.png\"/></p>\n<p> </p>\n<p>在该子查询中，当外层的group by返回结果集中的第一行RegionID为41653时，这个值被子查询的where条件所使用，相当于：</p>\n<pre><code>SELECT ',' + T.c1\nFROM #tmp T\nWHERE T.regionid = 41653\nFOR XML PATH('')\n</code></pre>\n<p>因为FOR XML PATH把多行记录打平成一条记录，因此此时的返回结果为：</p>\n<p><img alt=\"\" class=\"left\" src=\"..\\..\\static\\image\\1416f23de8a087e03ce084ad68a60a77.png\"/></p>\n<p> </p>\n<p>接着第group by返回结果集中的第二行45761传入该子查询，依次类似上面描述的执行，直到所有外层的值遍历完成。</p>\n<h3>2.3.3、去掉子查询结果集的第一个分隔符</h3>\n<pre><code>Select\n　　RegionID，\n　　STUFF(\n　　　　　　　(\n　　　　　　　　　SELECT ',' + T.c1\n　　　　　　　　　FROM #tmp T\n　　　　　　　　　WHERE A.regionid = T.regionid\n　　　　　　　　　FOR XML PATH('')\n　　　　　　　), 1, 1, ''\n　　　　　) as group_concat \nFROM #tmp A\nGroup by  RegionID\n</code></pre>\n<p>利用STUFF函数，去掉了第一个逗号，完成了最终sql语句。</p>\n<hr/>\n<p>长按下图二维码，关注更多数据库实用技巧。</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\3dd767af1052f58b354b703bbfc26658.png\"/></p>\n<p> </p>\n<p></p>\n<p></p>\n<p></p>\n</div>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 0, "time": "2022-04-18 16:43:04", "summary": "一、实现表内容如下：实现的语句为：，实现效果如下：二、原理分析、的作用的作用是将查询结果集以形式展现，将多行的结果，展示在同一行，例如：其结果集如下：当语句加上后，其结果集输出是：具体输出的字符如下："}