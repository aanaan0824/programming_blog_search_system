{"blogid": "126609993", "writerAge": "码龄2年", "writerBlogNum": "63", "writerCollect": "864", "writerComment": "972", "writerFan": "1315", "writerGrade": "5级", "writerIntegral": "2904", "writerName": "贤蛋大眼萌", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126609993.jpg", "writerRankTotal": "6654", "writerRankWeekly": "92", "writerThumb": "703", "writerVisitNum": "34304", "blog_read_count": "625", "blog_time": "已于 2022-08-30 18:34:43 修改", "blog_title": "猿创征文｜【Typescript】搭建TS的编译环境", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>多一些不为什么的坚持🤳</p>\n<p>贤蛋 🥚大眼萌 ，一名很普通但不想普通的程序媛🙊</p>\n<p>📝本文章收录于专栏：<a href=\"\">Typescript学习</a></p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>搭建TS的编译环境</h3>\n<ul><li><ul><li><a href=\"#_Typescript_10\">🎈 认识Typescript</a></li><li><a href=\"#_Typescript__28\">💊 Typescript 的编译环境</a></li><li><a href=\"#_TypeScript_51\">🚀 搭建TypeScript的运行环境</a></li><li><ul><li><a href=\"#__55\">🎯 项目环境的基本配置</a></li><li><a href=\"#_tsnode_95\">🏓 使用ts-node</a></li><li><a href=\"#__webpack_108\">🥁 配置 webpack</a></li></ul>\n</li><li><a href=\"#__191\">🍳 测试环境</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"_Typescript_10\"></a>🎈 认识Typescript</h2>\n<blockquote>\n<p>作为前端开发人员，我们都知道JavaScript是一门优秀的语言，并且在很多领域被大家广泛使用。但是随着用JavaScript的开发者越来越多，JavaScript 的缺点就被暴露出来了。例如ES5以及之前的使用的var关键字关于作用域的问题，最初JavaScript设计的数组类型并不是连续的内存空间等等。</p>\n<p>随着ES6、7、8等的推出，每次都会让这门语言更加现代、更加安全、更加方便。但是JavaScript在<mark>类型</mark>检测上依然是毫无进展。</p>\n<p>​ 如果JavaScript没有对我们传入的参数进行任何的限制，只能等到运行期间才发现这个 错误，有时候就是因为这个错误，导致整个项目崩溃。这个时候就萌生了<mark>Typescript</mark></p>\n</blockquote>\n<p>官方对Typescript的定义：</p>\n<p>​ **Typescipt:**是拥有类型的JavaScript超集，它可以编译成普通、干净、完整的JavaScript代码。</p>\n<p>​ 可以理解长是加强版的JavaScript。JavaScript所拥有的特性，TypeScript全部都是支持的，并且它紧随ECMAScript的标准，所以ES6、ES7、ES8等新语法标准，它都是支持的。并且在语言层面上，不仅仅增加了类型约束，而且包括一些语法的扩展，比如枚举类型（Enum）、元组类型（Tuple）等。并且TypeScript最终会被编译成JavaScript代码。</p>\n<h2><a id=\"_Typescript__28\"></a>💊 Typescript 的编译环境</h2>\n<blockquote>\n<p>TypeScript最终会被编译成JavaScript来运行，所以我们需要搭建对应的环境</p>\n</blockquote>\n<p><img alt=\"image-20220830162558236\" src=\"..\\..\\static\\image\\2a828656c6c2bb8a185b26efb769867d.png\"/></p>\n<p>我们需要先进行全局安装：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 安装命令</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> typescript -g\n<span class=\"token comment\"># 查看版本</span>\ntsc --version\n</code></pre>\n<p><img alt=\"image-20220830163418598\" src=\"..\\..\\static\\image\\3780fc857f3f8f59363bf66d6457a65d.png\"/></p>\n<p>测试：</p>\n<p><img alt=\"image-20220830170005698\" src=\"..\\..\\static\\image\\e91982d32468676ae519d796bf4c5070.png\"/></p>\n<h2><a id=\"_TypeScript_51\"></a>🚀 搭建TypeScript的运行环境</h2>\n<blockquote>\n<p>上面介绍到的ts环境运行，但是这样每次都需要转换ts代码，很麻烦，下面我们介绍两种搭建Typescript的运行环境。</p>\n</blockquote>\n<h3><a id=\"__55\"></a>🎯 项目环境的基本配置</h3>\n<blockquote>\n<ul><li>直接配置webpack，让webpack对我们编写的代码进行一个编译，并且自动引入编译后的js文件；</li><li>webpack可以在代码修改后重新帮助我们进行编译，并且自动刷新浏览器，不需要手动操作</li></ul>\n</blockquote>\n<ol><li>使用 npm 来初始化 package.json 文件：</li></ol>\n<pre><code class=\"prism language-shell\"><span class=\"token function\">npm</span> init -y\n</code></pre>\n<ol start=\"2\"><li>安装本地TypeScript依赖</li></ol>\n<pre><code class=\"prism language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> typescript\n</code></pre>\n<ol start=\"3\"><li>初始化tsconfig.json文件</li></ol>\n<p>​ 在进行TypeScript开发时，我们会针对TypeScript进行相关的配置，而这些配置信息是存放在一个tsconfig.json文件中的。</p>\n<pre><code class=\"prism language-shell\">tsc --init\n</code></pre>\n<p><img alt=\"image-20220830172206541\" src=\"..\\..\\static\\image\\ac08fd702d6ec9ecf4895f066d4aa540.png\"/></p>\n<ol start=\"4\"><li>配置tslint来约束代码（推荐使用）</li></ol>\n<pre><code class=\"prism language-shell\"><span class=\"token comment\"># 全局安装</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> tslint -g\n<span class=\"token comment\"># 在项目中初始化tslint的配置文件：tslint.json</span>\ntslint -i\n</code></pre>\n<p><img alt=\"image-20220830172555223\" src=\"..\\..\\static\\image\\d7121834c77f2d5bcafa6ebb03f0477b.png\"/></p>\n<h3><a id=\"_tsnode_95\"></a>🏓 使用ts-node</h3>\n<pre><code class=\"prism language-shell\"><span class=\"token comment\"># 安装ts-node</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> ts-node -g\n<span class=\"token comment\"># 安装ts-node需要依赖 tslib 和 @types/node 两个包</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> tslib @types/node -g\n</code></pre>\n<p>测试代码：</p>\n<p><img alt=\"image-20220830173235986\" src=\"..\\..\\static\\image\\1db2b57631162fa1d007bb9934b9af3e.png\"/></p>\n<h3><a id=\"__webpack_108\"></a>🥁 配置 webpack</h3>\n<ul><li>配置webpack 需要安装相关的依赖 webpack、webpack-cli、webpack-dev-server。从webpack 4 之后，在webpack环境下需要多配置webpack-cli。而webpack-dev-server则是可以在我们帮助我们开启本地服务，并且热更新</li></ul>\n<pre><code class=\"prism language-shell\"><span class=\"token comment\"># 安装webpack 相关依赖</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> webpack webpack-cli  webpack-dev-server -D\n</code></pre>\n<p>为了方便启动webpack，我们在package.json中添加如下启动命令</p>\n<pre><code class=\"prism language-json\"><span class=\"token string-property property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string-property property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"serve\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack serve\"</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>补充：如果我们需要区分开发的环境，则需要添加</p>\n<pre><code class=\"prism language-json\"><span class=\"token string-property property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token string-property property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"serve\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cross-env NODE_ENV=development webpack-dev-server --mode=development --config build/webpack.config.js\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>并且安装 <code>cross-env</code> 依赖</p>\n<pre><code class=\"prism language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> cross-env -D\n</code></pre>\n</blockquote>\n<ul><li>因为需要解析.ts文件，所以需要依赖对应的loader：ts-loader</li></ul>\n<pre><code class=\"prism language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> ts-loader -D\n</code></pre>\n<ul><li>编译后的代码需要对应的html模块作为它的运行环境，需要使用html-webpack-plugin来将它插入到对应的模板中</li></ul>\n<pre><code class=\"prism language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> html-webpack-plugin -D\n</code></pre>\n<p>最后：配置webpack.config.js</p>\n<pre><code class=\"prism language-json\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"html-webpack-plugin\"</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"development\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src/main.ts\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"./dist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bundle.js\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">devServer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">extensions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\".ts\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".js\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".cjs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".json\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.ts$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-loader\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./index.html\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"__191\"></a>🍳 测试环境</h2>\n<p>在终端编写命令</p>\n<pre><code class=\"prism language-shell\"><span class=\"token function\">npm</span> run serve\n</code></pre>\n<p>在浏览器中打开：http://localhost:8080/</p>\n<p><img alt=\"image-20220830181824957\" src=\"..\\..\\static\\image\\0e9dca15992e42a4364216d617472ed3.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c9bbbcee51384d0c8e412bded2814967.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-08-30 18:34:43", "summary": "多一些不为什么的坚持贤蛋大眼萌，一名很普通但不想普通的程序媛本文章收录于专栏：学习搭建的编译环境认识的编译环境搭建的运行环境项目环境的基本配置使用配置测试环境认识作为前端开发人员，我们都知道是一门优秀"}