{"blogid": "122946413", "writerAge": "码龄12年", "writerBlogNum": "101", "writerCollect": "160", "writerComment": "9", "writerFan": "3374", "writerGrade": "4级", "writerIntegral": "1066", "writerName": "无熵~", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122946413.jpg", "writerRankTotal": "21247", "writerRankWeekly": "3007", "writerThumb": "28", "writerVisitNum": "89634", "blog_read_count": "1685", "blog_time": "已于 2022-02-15 16:53:07 修改", "blog_title": "WPF 图形绘制", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>WPF图形绘制方式:</p>\n<p><strong>1.Shape</strong></p>\n<p><strong>2.Path</strong></p>\n<p><strong>3.Brush</strong></p>\n<p><strong>4.DrawVisual</strong></p>\n<p>一、Shape绘制图形</p>\n<p>WPF 提供了许多易于使用的 <a href=\"https://msdn.microsoft.com/zh-cn/library/ms615900%28v=vs.100%29\" title=\"Shape\">Shape</a> 对象。 所有形状对象都是从 <a href=\"https://msdn.microsoft.com/zh-cn/library/ms615900%28v=vs.100%29\" title=\"Shape\">Shape</a> 类继承的。 可用的 Shape 对象包括 <a href=\"https://msdn.microsoft.com/zh-cn/library/ms615620%28v=vs.100%29\" title=\"Ellipse\">Ellipse</a>、<a href=\"https://msdn.microsoft.com/zh-cn/library/ms615626%28v=vs.100%29\" title=\"Line\">Line</a>、<a href=\"https://msdn.microsoft.com/zh-cn/library/ms615632%28v=vs.100%29\" title=\"Path\">Path</a>、<a href=\"https://msdn.microsoft.com/zh-cn/library/ms615638%28v=vs.100%29\" title=\"Polygon\">Polygon</a>、<a href=\"https://msdn.microsoft.com/zh-cn/library/ms615644%28v=vs.100%29\" title=\"Polyline\">Polyline</a> 和 <a href=\"https://msdn.microsoft.com/zh-cn/library/ms615650%28v=vs.100%29\" title=\"Rectangle\">Rectangle</a>。<a href=\"https://msdn.microsoft.com/zh-cn/library/ms615900%28v=vs.100%29\" title=\"Shape\">Shape</a> 对象共享以下通用属性。</p>\n<ul><li> <p><a href=\"https://msdn.microsoft.com/zh-cn/library/ms605427%28v=vs.100%29\" title=\"Stroke\">Stroke</a>：说明如何绘制形状的轮廓。</p> </li><li> <p><a href=\"https://msdn.microsoft.com/zh-cn/library/ms605651%28v=vs.100%29\" title=\"StrokeThickness\">StrokeThickness</a>：说明形状轮廓的粗细。</p> </li><li> <p><a href=\"https://msdn.microsoft.com/zh-cn/library/ms605418%28v=vs.100%29\" title=\"Fill\">Fill</a>：说明如何绘制形状的内部。</p> </li><li> <p>用于指定坐标和顶点的数据属性，以与设备无关的像素来度量</p> </li></ul>\n<p>由于Shape对象派生于 <a href=\"https://msdn.microsoft.com/zh-cn/library/ms590078%28v=vs.100%29\" title=\"UIElement\">UIElement</a>，因此可以在面板和大多数控件中使用。 <a href=\"https://msdn.microsoft.com/zh-cn/library/ms609101%28v=vs.100%29\" title=\"Canvas\">Canvas</a> 面板是用于创建复杂绘图的特别理想的选择，因为它支持对其子对象的绝对定位。</p>\n<p><strong>Line</strong>:直线段，可以设置笔触(Stroke)</p>\n<pre><code>   &lt;Line  X1=\"10\" Y1=\"60\" X2=\"150\" Y2=\"60\" Stroke=\"Black\"  StrokeThickness=\"4\"/&gt;</code></pre>\n<p> <strong>Rectangle</strong>:矩形,由笔触(Stroke)和填充(Fill)构成</p>\n<pre><code>&lt;Rectangle Width=\"100\" Height=\"100\" Fill=\"Pink\" Stroke=\"Red\" StrokeThickness=\"2\"/&gt;</code></pre>\n<p><strong>Ellipse</strong>:椭圆,由笔触(Stroke)和填充(Fill)构成</p>\n<pre><code>&lt;Ellipse Width=\"120\" Height=\"80\" Fill=\"Pink\" Stroke=\"Red\" StrokeThickness=\"2\" /&gt;</code></pre>\n<p><strong>Polygon</strong>多边形</p>\n<pre><code>&lt;Polyline Points=\"50,200 100,80 200,80 150,120\" StrokeThickness=\"2\" Stroke=\"Pink\"/&gt;</code></pre>\n<p>二、Path绘制图形</p>\n<p><strong>Path</strong>:路径,可以将直线、弧形、曲线等基本元素结合起来,形成更复杂的图形,WPF提供两个类来描述路径数据:一个是<strong>StreamGeometry</strong>，另一个是<strong>PathFigureCollection</strong>(不再需要修改时，可使用StreamGeometry方式，如果还需要对路径数值进行修改，则使用PathFigureCollection方式)。 </p>\n<p><strong>StreamGeometry方式</strong>:</p>\n<pre><code>&lt;Path Stroke=\"Red\" StrokeThickness=\"2\" Data=\"M 240,240 C 160,80 320,80 240,240\"/&gt;</code></pre>\n<p>下面来解释一下\"M 240,240 C 160,80 320,80 240,240\"这样字符串的意义。 <br/> 分为四种情况来解释： <br/> 1. 移动指令：Move Command（M）：M 起始点  或者：m 起始点 <br/> 比如：M 100,240或m 100,240 <br/> 使用大写M时，表示绝对值; 使用小写m时; 表示相对于前一点的值，如果前一点没有指定，则使用(0,0)。 </p>\n<p>2. 绘制指令(Draw Command): <br/> 我们可以绘制以下形状： <br/> (1) 直线:Line(L) <br/> (2) 水平直线: Horizontal line(H) <br/> (3) 垂直直线: Vertical line(V) <br/> (4) 三次方程式贝塞尔曲线: Cubic Bezier curve(C) <br/> (5) 二次方程式贝塞尔曲线: Quadratic Bezier curve(Q) <br/> (6) 平滑三次方程式贝塞尔曲线: Smooth cubic Bezier curve(S) <br/> (7) 平滑二次方程式贝塞尔曲线: smooth quadratic Bezier curve(T) <br/> (8) 椭圆圆弧: elliptical Arc(A) <br/> 上面每种形状后用括号括起的英文字母为命令简写的大写形式，但你也可以使用小写。使用大写与小写的区别是：大写是绝对值，小写是相对值。 </p>\n<p><strong>PathFigureCollection方式</strong>:</p>\n<p>        图形对象可以独立存在，可以独立绘制出具体需要的图形,几何图形对象没有具体的形体，他需要依赖于某一对象元素而存在，不能直接呈现在画板上。<br/> 几何绘图包含5种对象：</p>\n<ul><li>单一图形：LineGeometry、RectangleGeometry、EllipseGeometry</li><li>复合图形：PathGeometry、GeometryGroup(组合形状)</li></ul>\n<pre><code>    \n  &lt;Canvas&gt;\n        &lt;Path Stroke=\"Red\" StrokeThickness=\"2\" Fill=\"Yellow\"&gt;\n            &lt;Path.Data&gt;\n                &lt;CombinedGeometry GeometryCombineMode=\"Exclude\"&gt;\n                    &lt;CombinedGeometry.Geometry1&gt;\n                        &lt;EllipseGeometry RadiusX=\"50\" RadiusY=\"50\" Center=\"75,75\" /&gt;\n                    &lt;/CombinedGeometry.Geometry1&gt;\n                    &lt;CombinedGeometry.Geometry2&gt;\n                        &lt;EllipseGeometry RadiusX=\"50\" RadiusY=\"50\" Center=\"125,75\" /&gt;\n                    &lt;/CombinedGeometry.Geometry2&gt;\n                &lt;/CombinedGeometry&gt;\n            &lt;/Path.Data&gt;\n        &lt;/Path&gt;\n    &lt;/Canvas&gt;</code></pre>\n<p><strong>图形裁剪</strong>:几何图形是创建形状的最强大的方法，另一种用途就是用于设置<strong>Clip</strong>属性，所有的元素都提供了该属性。可以通过Clip属性约束元素的外边界以符合特定的几何图形：</p>\n<pre><code>&lt;Image \n  Source=\"sampleImages\\Waterlilies.jpg\" \n  Width=\"200\" Height=\"150\" HorizontalAlignment=\"Left\"&gt;\n  &lt;Image.Clip&gt;\n    &lt;EllipseGeometry\n      RadiusX=\"100\"\n      RadiusY=\"75\"\n      Center=\"100,75\"/&gt;\n  &lt;/Image.Clip&gt;\n&lt;/Image&gt;</code></pre>\n<p>三、画刷(Brush)绘制图形:<br/>         继承至Brush的画刷分为两大类，其中 SolidColorBrush、GradientBrush实现颜色绘制，SolidColorBrush是单色绘制，而GradientBrush采用渐变颜色进行绘制；另外一大类则是TileBrush，ImageBrush、VisualBrush以及 DrawingBrush均继承至TileBrush，利用这三类画刷，能够实现控制复杂背景图形的绘制。<br/> VisualBrush 绘制:</p>\n<pre><code>  &lt;StackPanel Margin=\"50\"&gt;\n    &lt;!-- The object to reflect,镜像 --&gt;\n    &lt;Border Name=\"ReflectedVisual\" Width=\"400\"&gt;\n      &lt;Border.Background&gt;\n        &lt;LinearGradientBrush StartPoint=\"0,0.5\" EndPoint=\"1,0.5\"&gt;\n          &lt;GradientStop Offset=\"0.0\" Color=\"#CCCCFF\" /&gt;\n          &lt;GradientStop Offset=\"1.0\" Color=\"White\" /&gt;\n        &lt;/LinearGradientBrush&gt;\n      &lt;/Border.Background&gt;\n      &lt;StackPanel Orientation=\"Horizontal\" Margin=\"10\"&gt;        \n        &lt;TextBlock TextWrapping=\"Wrap\" Width=\"200\" Margin=\"10\"&gt;\n          Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\n          Suspendisse vel ante. Donec luctus tortor sit amet est.\n          Nullam pulvinar odio et wisi.\n          Pellentesque quis magna. Sed pellentesque.\n          Nulla euismod.\n          Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.\n        &lt;/TextBlock&gt;\n        &lt;StackPanel&gt;\n          &lt;Ellipse Margin=\"10\" Height=\"50\" Width=\"50\" Fill=\"Black\" /&gt;\n          &lt;Ellipse Margin=\"10\" Height=\"50\" Width=\"50\" Fill=\"Black\" /&gt;\n          &lt;Ellipse Margin=\"10\" Height=\"50\" Width=\"50\" Fill=\"Black\" /&gt;\n        &lt;/StackPanel&gt;\n      &lt;/StackPanel&gt;\n    &lt;/Border&gt;\n\n    &lt;Rectangle Height=\"1\" Fill=\"Gray\" HorizontalAlignment=\"Stretch\" /&gt;\n    &lt;!-- The object to contain the reflection.--&gt;\n    &lt;Rectangle \n      Height=\"{Binding Path=ActualHeight, ElementName=ReflectedVisual}\" \n      Width=\"{Binding Path=ActualWidth, ElementName=ReflectedVisual}\"&gt;\n      &lt;Rectangle.Fill&gt;\n        &lt;!-- Creates the reflection. --&gt;\n        &lt;VisualBrush \n          Opacity=\"0.75\" Stretch=\"None\"\n          Visual=\"{Binding ElementName=ReflectedVisual}\"&gt;\n          &lt;VisualBrush.RelativeTransform&gt;\n            &lt;!-- Flip the reflection. --&gt;\n            &lt;TransformGroup&gt;\n              &lt;ScaleTransform ScaleX=\"1\" ScaleY=\"-1\" /&gt;\n              &lt;TranslateTransform  Y=\"1\" /&gt;\n            &lt;/TransformGroup&gt;\n          &lt;/VisualBrush.RelativeTransform&gt;\n        &lt;/VisualBrush&gt;\n      &lt;/Rectangle.Fill&gt;\n      &lt;Rectangle.OpacityMask&gt;\n        &lt;LinearGradientBrush StartPoint=\"0.5,0\" EndPoint=\"0.5,1\"&gt;\n          &lt;GradientStop Color=\"#FF000000\" Offset=\"0.0\" /&gt;\n          &lt;GradientStop Color=\"#33000000\" Offset=\"0.5\" /&gt;\n          &lt;GradientStop Color=\"#00000000\" Offset=\"0.75\" /&gt;\n        &lt;/LinearGradientBrush&gt;\n      &lt;/Rectangle.OpacityMask&gt;\n      &lt;Rectangle.BitmapEffect&gt;\n        &lt;BlurBitmapEffect Radius=\"1.5\" /&gt;\n      &lt;/Rectangle.BitmapEffect&gt;\n    &lt;/Rectangle&gt;\n  &lt;/StackPanel&gt;</code></pre>\n<p>DrawingBrush绘制:</p>\n<pre><code>   &lt;Window.Resources&gt;\n       &lt;DrawingBrush x:Key=\"test\"&gt;\n           &lt;DrawingBrush.Drawing&gt;\n               &lt;DrawingGroup&gt;\n                   &lt;DrawingGroup.Children&gt;\n                       &lt;GeometryDrawing&gt;\n                           &lt;!-- 绘制矩形 --&gt;\n                           &lt;GeometryDrawing.Geometry&gt;\n                               &lt;RectangleGeometry RadiusX=\"0.2\" RadiusY=\"0.5\"\n                                                      Rect=\"0.02,0.02,0.96,0.96\" /&gt;\n                           &lt;/GeometryDrawing.Geometry&gt;\n                           &lt;!-- 矩形填充色 --&gt;\n                           &lt;GeometryDrawing.Brush&gt;\n                               &lt;LinearGradientBrush StartPoint=\"0,0\" EndPoint=\"0,1\"&gt;\n                                   &lt;GradientStop Color=\"Green\" Offset=\"0\" /&gt;\n                                   &lt;GradientStop Color=\"Red\" Offset=\"1\" /&gt;\n                               &lt;/LinearGradientBrush&gt;\n                           &lt;/GeometryDrawing.Brush&gt;\n                           &lt;!-- 矩形边框 --&gt;\n                           &lt;GeometryDrawing.Pen&gt;\n                               &lt;Pen Thickness=\"0.02\"&gt;\n                                   &lt;Pen.Brush&gt;\n                                       &lt;LinearGradientBrush StartPoint=\"0,0\" EndPoint=\"0,1\"&gt;\n                                           &lt;GradientStop Color=\"AliceBlue\" Offset=\"0\" /&gt;\n                                           &lt;GradientStop Color=\"Black\" Offset=\"1\" /&gt;\n                                       &lt;/LinearGradientBrush&gt;\n                                   &lt;/Pen.Brush&gt;\n                               &lt;/Pen&gt;\n                           &lt;/GeometryDrawing.Pen&gt;\n                       &lt;/GeometryDrawing&gt;\n                   &lt;/DrawingGroup.Children&gt;\n               &lt;/DrawingGroup&gt;\n           &lt;/DrawingBrush.Drawing&gt;\n       &lt;/DrawingBrush&gt;\n   &lt;/Window.Resources&gt;\n   &lt;Grid&gt;\n       &lt;Button Background=\"{StaticResource ResourceKey=test}\" FontSize=\"40\" Content=\"Button\" Height=\"113\" HorizontalAlignment=\"Left\" Margin=\"89,80,0,0\" Name=\"button1\" VerticalAlignment=\"Top\" Width=\"292\" /&gt;\n   &lt;/Grid&gt;</code></pre>\n<p>四、使用 DrawVisual绘制图形</p>\n<p><a href=\"https://msdn.microsoft.com/zh-cn/library/ms653167%28v=vs.100%29\" title=\"    \">    </a><a href=\"https://msdn.microsoft.com/zh-cn/library/ms653167%28v=vs.100%29\" title=\"    DrawingBrush\">    DrawingBrush</a> 使用 <a href=\"https://msdn.microsoft.com/zh-cn/library/ms653166%28v=vs.100%29\" title=\"Drawing\">Drawing</a> 对象绘制区域。 <a href=\"https://msdn.microsoft.com/zh-cn/library/ms653166%28v=vs.100%29\" title=\"Drawing\">Drawing</a> 对象描述一些可见内容，例如形状、位图、视频或一行文本。 不同类型的 Drawing 描绘的是不同类型的内容。 下面列出了不同类型的 Drawing 对象。</p>\n<ul><li> <p><a href=\"https://msdn.microsoft.com/zh-cn/library/ms634981%28v=vs.100%29\" title=\"GeometryDrawing\">GeometryDrawing</a> – 绘制形状。</p> </li><li> <p><a href=\"https://msdn.microsoft.com/zh-cn/library/ms619174%28v=vs.100%29\" title=\"ImageDrawing\">ImageDrawing</a> – 绘制图像。</p> </li><li> <p><a href=\"https://msdn.microsoft.com/zh-cn/library/ms635010%28v=vs.100%29\" title=\"GlyphRunDrawing\">GlyphRunDrawing</a> – 绘制文本。</p> </li><li> <p><a href=\"https://msdn.microsoft.com/zh-cn/library/ms635631%28v=vs.100%29\" title=\"VideoDrawing\">VideoDrawing</a> – 播放音频或视频文件。</p> </li><li> <p><a href=\"https://msdn.microsoft.com/zh-cn/library/ms653186%28v=vs.100%29\" title=\"DrawingGroup\">DrawingGroup</a> – 绘制其他绘图。 使用绘图组可以将其他绘图组合为一个复合绘图。</p> </li></ul>\n<pre><code>&lt;Button Content=\"A Button\" Width=\"120\" Height=\"40\"&gt;\n  &lt;Button.Background&gt;\n    &lt;DrawingBrush&gt;\n      &lt;DrawingBrush.Drawing&gt;\n        &lt;GeometryDrawing Brush=\"LightBlue\"&gt;\n          &lt;GeometryDrawing.Geometry&gt;\n            &lt;GeometryGroup&gt;\n              &lt;EllipseGeometry RadiusX=\"12.5\" RadiusY=\"25\" Center=\"25,50\" /&gt;\n              &lt;EllipseGeometry RadiusX=\"12.5\" RadiusY=\"25\" Center=\"50,50\" /&gt;\n              &lt;EllipseGeometry RadiusX=\"12.5\" RadiusY=\"25\" Center=\"75,50\" /&gt;\n            &lt;/GeometryGroup&gt;\n          &lt;/GeometryDrawing.Geometry&gt;\n          &lt;GeometryDrawing.Pen&gt;\n            &lt;Pen Thickness=\"1\" Brush=\"Gray\" /&gt;\n          &lt;/GeometryDrawing.Pen&gt;\n        &lt;/GeometryDrawing&gt;\n      &lt;/DrawingBrush.Drawing&gt;\n    &lt;/DrawingBrush&gt;\n  &lt;/Button.Background&gt;\n&lt;/Button&gt;</code></pre>\n<p>参考:<a href=\"https://www.cnblogs.com/lovezhangyu/p/10331012.html\" title=\"https://www.cnblogs.com/lovezhangyu/p/10331012.html\">https://www.cnblogs.com/lovezhangyu/p/10331012.html</a></p>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-02-15 16:53:07", "summary": "图形绘制方式一、绘制图形提供了许多易于使用的对象。所有形状对象都是从类继承的。可用的对象包括、、、、和。对象共享以下通用属性。：说明如何绘制形状的轮廓。：说明形状轮廓的粗细。：说明如何绘制形状的内部。"}