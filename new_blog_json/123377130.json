{"blogid": "123377130", "writerAge": "码龄2年", "writerBlogNum": "88", "writerCollect": "1711", "writerComment": "2073", "writerFan": "5457", "writerGrade": "6级", "writerIntegral": "4884", "writerName": "卖寂寞的小男孩", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123377130.jpg", "writerRankTotal": "3322", "writerRankWeekly": "465", "writerThumb": "1772", "writerVisitNum": "76350", "blog_read_count": "725", "blog_time": "已于 2022-03-15 11:46:25 修改", "blog_title": "C++模板初阶", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_1\">零.前言</a></li><li><a href=\"#1_3\">1.泛型编程</a></li><li><ul><li><a href=\"#1_4\">(1)问题引入</a></li><li><a href=\"#2_47\">(2)泛型编程概念</a></li></ul>\n</li><li><a href=\"#2_50\">2.函数模板</a></li><li><ul><li><a href=\"#1_51\">(1)概念</a></li><li><a href=\"#2_53\">(2)格式</a></li><li><a href=\"#3_58\">(3)举例</a></li><li><a href=\"#4_95\">(4)原理</a></li></ul>\n</li><li><a href=\"#3_105\">3.类模板</a></li><li><ul><li><a href=\"#1_106\">(1)举例</a></li><li><a href=\"#2_129\">(2)类外定义</a></li></ul>\n</li><li><a href=\"#4_156\">4.总结</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>零.前言</h1>\n<p>在书写函数或类时，我们可能遇到这样的问题，明明结构一模一样但是只由于某个参数的类型不同就需要重新写函数，或者构建重载函数，重新书写类就更加麻烦了，并且使程序显得冗长，本文将介绍C++中的模板，从而解决相似函数重复书写问题。</p>\n<h1><a id=\"1_3\"></a>1.泛型编程</h1>\n<h2><a id=\"1_4\"></a>(1)问题引入</h2>\n<p>假设我们要实现一个两数交换的程序：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n\ta <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n\tb <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这看起来既简洁，又容易，但是如果我们再加两个double类型的变量c和d呢，要交换它们的值就需要再建立一个函数。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n\ta <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n\tb <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span> d<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">double</span> tmp <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n\tc <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span>\n\td <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> c <span class=\"token operator\">=</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> d <span class=\"token operator\">=</span> <span class=\"token number\">2.2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> d <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们知道两个Swap函数构成了函数重载，但如果我们还需要将两个char类型的变量进行交换呢，那么就还需要构建两个char类型的变量。<br/> 通过观察发现，这几个函数除了参数类型不一样之外，其他的内容都一模一样，如果有这样的需求，一直建立函数会很麻烦。有没有一种只写一个函数就可以实现全类型操作的方法呢？<br/> C++为了解决这一问题，提出了泛型编程的概念。</p>\n<h2><a id=\"2_47\"></a>(2)泛型编程概念</h2>\n<p>泛型编程，即编写与类型相关的通用代码，是代码复用的一种手段。模板是泛型编程的基础。<br/> <font color=\"blue\">泛型编程中的模板分为两种，一种是函数模板，一种是类模板。</font></p>\n<h1><a id=\"2_50\"></a>2.函数模板</h1>\n<h2><a id=\"1_51\"></a>(1)概念</h2>\n<p>函数模板代表了一个函数家族，该模板与类型无关，在使用时被参数化，根据实参类型产生函数的特定类型版本。</p>\n<h2><a id=\"2_53\"></a>(2)格式</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Tn</span><span class=\"token operator\">&gt;</span><span class=\"token comment\">//class也可以换成typename</span>\n                                         <span class=\"token comment\">//函数的具体实现</span>\n</code></pre>\n<h2><a id=\"3_58\"></a>(3)举例</h2>\n<p>以我们上一个例子为例，实现多种类型的两数交换：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> T<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span><span class=\"token comment\">//建立一个模板</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tT tmp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n\ta <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n\tb <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> c <span class=\"token operator\">=</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> d <span class=\"token operator\">=</span> <span class=\"token number\">2.2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> d <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这里根据模板，当传入a和b时，T自动识别为int类型，当传入c和d时，T自动识别为double类型。<br/> 如果a和b，c和d的类型不同呢？</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\nT <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>T a<span class=\"token punctuation\">,</span> T b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span>  a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> c <span class=\"token operator\">=</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> d <span class=\"token operator\">=</span> <span class=\"token number\">2.2</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> Add<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//默认类型转换</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们可以通过Add(a,c)来将结果转换成int型，这其中会发生隐式类型转换。<br/> 同理我们也可以通过Add(b,d)将其转换成double类型。</p>\n<h2><a id=\"4_95\"></a>(4)原理</h2>\n<p><font color=\"blue\">当我们使用模板时，我们调用的并不是模板本身，而是调用的模板实例化出来的函数。</font><br/> 即当我们传入不同类型的参数时，实际上编译器也会自动生成对应的函数。</p>\n<pre><code class=\"prism language-cpp\">    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>我们可以通过反汇编来观察这两段代码的底层实现：<br/> 会发现这两段语句调用的Add()的函数地址时不同的。<br/> <font color=\"red\">当函数模板与普通函数均存在时优先调用普通函数。</font></p>\n<h1><a id=\"3_105\"></a>3.类模板</h1>\n<h2><a id=\"1_106\"></a>(1)举例</h2>\n<p>与在函数中同理，当类中有需要更改类型的变量时，我们也可以使用模板进行操作。<br/> 我们使用的依然是实例化之后的类，这里使用栈来举例。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>T<span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span>\n\t   <span class=\"token keyword\">int</span> _top<span class=\"token punctuation\">;</span>\n\t   <span class=\"token keyword\">int</span> _capacity<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//...</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tStack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font color=\"red\">这里我们知道，对于类模板来说是无法对类型进行推测的，因此我们必须通过&lt;&gt;来告知编译器类型。</font></p>\n<h2><a id=\"2_129\"></a>(2)类外定义</h2>\n<p>对于类来说，我们可以进行类内声明，类外定义，那么类外定义的函数如何获知类型呢？<br/> 这就需要我们指定模板的同时，还要指定类域：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>T<span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span>\n\t   <span class=\"token keyword\">int</span> _top<span class=\"token punctuation\">;</span>\n\t   <span class=\"token keyword\">int</span> _capacity<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//...</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//...</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//类内声明</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span><span class=\"token comment\">//指定模板</span>\n<span class=\"token keyword\">void</span> Stack<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span><span class=\"token comment\">//指定类域</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//类外定义</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tStack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"4_156\"></a>4.总结</h1>\n<p>函数模板的实质就是编译器自动识别（人为规定）某一类或函数的参数类型，从而进行实例化并调用的过程。用好模板可以使代码更加简洁美观，减少不必要的多余劳动。由于会进行实例化，所以并不会提高程序的执行效率。如果文章对你有帮助，欢迎互赞互评，感谢各位大佬进行斧正支持。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-15 11:46:25", "summary": "文章目录零前言泛型编程问题引入泛型编程概念函数模板概念格式举例原理类模板举例类外定义总结零前言在书写函数或类时，我们可能遇到这样的问题，明明结构一模一样但是只由于某个参数的类型不同就需要重新写函数，或"}