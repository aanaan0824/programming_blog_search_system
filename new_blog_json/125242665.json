{"blogid": "125242665", "writerAge": "码龄4年", "writerBlogNum": "76", "writerCollect": "195", "writerComment": "17", "writerFan": "15", "writerGrade": "4级", "writerIntegral": "833", "writerName": "殿君不是殿军", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125242665.jpg", "writerRankTotal": "31152", "writerRankWeekly": "238450", "writerThumb": "41", "writerVisitNum": "41059", "blog_read_count": "16995", "blog_time": "于 2022-06-12 10:33:36 发布", "blog_title": "vue中实现路由跳转的三种方式（超详细整理）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"vue_0\"></a>vue中实现路由跳转的三种方式</h1>\n<h2><a id=\"vuerouter_2\"></a>一、使用vue-router</h2>\n<blockquote>\n<p>vue-router <strong>本质</strong>是一个第三方的包 用的时候需要下载</p>\n</blockquote>\n<p><strong>步骤</strong> （7步法 ）：</p>\n<ol><li> <p><strong>下载<code>vue-router</code>模块到当前工程</strong></p> <pre><code class=\"prism language-js\"> yarn add vue<span class=\"token operator\">-</span>router\n</code></pre> </li><li> <p><strong>在main.js中引入VueRouter函数</strong></p> <pre><code class=\"prism language-js\"><span class=\"token comment\">// 引入路由</span>\n<span class=\"token keyword\">import</span> VueRouter <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue-router\"</span><span class=\"token punctuation\">;</span>\n</code></pre> </li><li> <p><strong>添加到Vue.use()身上 – 注册全局RouterLink和RouterView组件</strong></p> <pre><code class=\"prism language-js\"><span class=\"token comment\">// 注册全局</span>\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>VueRouter<span class=\"token punctuation\">)</span>\n</code></pre> </li><li> <p><strong>创建路由规则数组 – 路径和组件名对应关系</strong></p>\n<blockquote>\n<p>创建路由规则数组（需要准备切换的页面组件）把准备好的页面组件引入到main.js中</p>\n</blockquote> <pre><code class=\"prism language-js\"><span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">redirect</span><span class=\"token operator\">:</span> <span class=\"token string\">\"find\"</span> <span class=\"token comment\">//默认显示推荐组件(路由的重定向)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/find\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Find\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> Find<span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">//二级路由</span>\n            <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">redirect</span><span class=\"token operator\">:</span> <span class=\"token string\">\"recom\"</span> <span class=\"token comment\">//默认显示推荐组件</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ranking\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//注意二级路由的路径千万不要加/</span>\n                    <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> Ranking\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"songlist\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> SongList\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/my\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"My\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> My\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/part\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Part\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> Part\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> NotFound <span class=\"token comment\">//定义找不到已有组件时显示404</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n</code></pre> </li><li> <p><strong>用规则生成路由对象</strong></p> <pre><code class=\"prism language-js\">    <span class=\"token comment\">// 创建路由对象并且传入规则</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n    routes<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"history\"</span> <span class=\"token comment\">//路由模式(默认为hash模式)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre> </li><li> <p><strong>把路由对象注入到new Vue实例中</strong></p> <pre><code class=\"prism language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n    router<span class=\"token punctuation\">,</span> <span class=\"token comment\">//导入路由对象</span>\n    <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token parameter\">h</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span>\n</code></pre> </li><li> <p><strong>用<code>router-view</code>作为挂载点, 切换不同的路由页面</strong></p>\n<blockquote>\n<p>当url的hash值路径切换，显示规则里对应的组件</p>\n</blockquote>\n<blockquote>\n<p><code>router-view</code> 实现路由内容的地方，引入组件时写到需要引入的地方 需要注意的是，使用vue-router控制路由则必须router-view作为容器。（可以先引入根组件App.vue中进行自测）</p>\n</blockquote> </li></ol>\n<blockquote>\n<p><mark>注意:</mark> 一切都要以url上hash值为准</p>\n</blockquote>\n<h2><a id=\"routerlink__101\"></a>二、声明式-router-link 【实现跳转最简单的方法】</h2>\n<h3><a id=\"1routerlinka_103\"></a>1.可用组件router-link来替代a标签</h3>\n<blockquote>\n<ul><li><code>router-link</code> 是vue-router提供了一个全局组件</li><li>router-link实质上最终会渲染成a链接 to属性等价于提供 href属性(<mark>to无需#</mark>)</li><li>router-link提供了声明式导航高亮的功能(自带类名)</li></ul>\n</blockquote>\n<p><strong>代码如下：</strong></p>\n<pre><code class=\"prism language-js\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"footer_wrap\"</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>router<span class=\"token operator\">-</span>link to<span class=\"token operator\">=</span><span class=\"token string\">\"/find\"</span><span class=\"token operator\">&gt;</span>发现音乐<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>router<span class=\"token operator\">-</span>link<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>router<span class=\"token operator\">-</span>link to<span class=\"token operator\">=</span><span class=\"token string\">\"/my\"</span><span class=\"token operator\">&gt;</span>我的音乐<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>router<span class=\"token operator\">-</span>link<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>router<span class=\"token operator\">-</span>link to<span class=\"token operator\">=</span><span class=\"token string\">\"/part\"</span><span class=\"token operator\">&gt;</span>朋友<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>router<span class=\"token operator\">-</span>link<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"top\"</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>router<span class=\"token operator\">-</span>view<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>router<span class=\"token operator\">-</span>view<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n<span class=\"token comment\">//在控制台元素检查时会发现激活的类名 在样式style中定义高亮样式 点击时就会高亮</span>\n</code></pre>\n<blockquote>\n<p>router-link好处 : 自带激活时的类名, 可以做高亮</p>\n</blockquote>\n<h3><a id=\"2__129\"></a>2.在跳转路由时, 可以给路由对应的组件内传值</h3>\n<p>在router-link上的to属性传值, 语法格式如下 :</p>\n<p>(方式一)</p>\n<blockquote>\n<p>to=/path?参数名=值</p>\n<p>例：<code>to=\"/part?name=小明\" </code></p>\n</blockquote>\n<p>对应页面组件接收传递过来的值</p>\n<blockquote>\n<p>$route.query.参数名</p>\n<p>接收数据：$route.query.name</p>\n</blockquote>\n<p>(方式二)</p>\n<blockquote>\n<p>to=“/path/值” (需在路由规则里配置/path/:参数名)</p>\n<p>例：<code>to=\"/part/小王\" </code></p>\n<p>配置：<code>path:\"/part/:username\"</code></p>\n</blockquote>\n<p>对应页面组件接收传递过来的值 （注意动态参数需要用params接收）</p>\n<blockquote>\n<p>$route.params.参数名</p>\n<p>接收数据：$route.params.username</p>\n</blockquote>\n<h2><a id=\"JS_161\"></a>三、编程式-用JS代码来进行跳转</h2>\n<p>用JS代码来进行跳转</p>\n<p>语法: path或者name任选一个</p>\n<h3><a id=\"_router____route_167\"></a>一、<code>$ router </code> 和 <code>$ route</code>的区别</h3>\n<blockquote>\n<p>$router : 是路由操作对象，只写对象</p>\n</blockquote>\n<blockquote>\n<p>$route : 路由信息对象，只读对象</p>\n</blockquote>\n<p><strong>$ router操作路由跳转</strong></p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span>‘hello’<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">query</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span>‘word’<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span>‘<span class=\"token number\">11</span>’ <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>$route读取 路由参数接收</strong></p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"name__path_params_query_185\"></a>二、路由跳转方式name 、 path 和传参方式params 、query的区别（重要）</h3>\n<blockquote>\n<p>path 和 name路由跳转方式，都可以用query传参</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\7872f464b54aae0d00bc50b2e0f4d89c.png\"/></p>\n<ul><li>使用path方式跳转路由 path会忽略params 所以path不能和params一起使用</li><li>推荐使用name和query方式实现路由跳转</li></ul>\n</blockquote>\n<blockquote>\n<p>params传参，push里面只能是 name:‘xxx’,不能是path:‘/xxx’,因为params只能用name来引入路由，如果这里写成了path，接收参数页面会是undefined！！！</p>\n</blockquote>\n<p><strong>通过params传参</strong></p>\n<blockquote>\n<p>==注意：==这里使用name路由跳转方式路径不需要加 <code>/</code> 因为它只是个名字</p>\n</blockquote>\n<blockquote>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"Home\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n</blockquote>\n<p><strong>另一个页面接收:</strong></p>\n<blockquote>\n<p>这里使用params传参就需要写params接收</p>\n</blockquote>\n<blockquote>\n<pre><code>this.$route.params.id\n\n</code></pre>\n</blockquote>\n<p><strong>通过query传参</strong></p>\n<blockquote>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">\"/Search\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">query</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//query是个配置项</span>\n        <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">20</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n</blockquote>\n<p><strong>另一个页面接收</strong></p>\n<blockquote>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>age\n</code></pre>\n</blockquote>\n<p><strong>query相当于GET请求，页面跳转的时候，可以在地址栏看到请求参数</strong></p>\n<p>uery传参**</p>\n<blockquote>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">\"/Search\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">query</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//query是个配置项</span>\n        <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">20</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n</blockquote>\n<p><strong>另一个页面接收</strong></p>\n<blockquote>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>age\n</code></pre>\n</blockquote>\n<p><strong>总结：</strong><br/> <strong>query相当于GET请求，页面跳转的时候，可以在地址栏看到请求参数</strong></p>\n<p><strong>params相当于POST请求，参数不会在地址栏中显示</strong></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-06-12 10:33:36", "summary": "中实现路由跳转的三种方式一、使用本质是一个第三方的包用的时候需要下载步骤步法：下载模块到当前工程在中引入函数引入路由添加到身上注册全局和组件注册全局创建路由规则数组路径和组件名对应关系创建路由规则数组"}