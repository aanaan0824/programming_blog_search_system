{"blogid": "123846091", "writerAge": "码龄2年", "writerBlogNum": "7", "writerCollect": "6", "writerComment": "0", "writerFan": "1", "writerGrade": "1级", "writerIntegral": "89", "writerName": "Dragon&tiger", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123846091.jpg", "writerRankTotal": "162584", "writerRankWeekly": "1049386", "writerThumb": "3", "writerVisitNum": "7665", "blog_read_count": "2657", "blog_time": "已于 2022-03-30 15:14:36 修改", "blog_title": "mybatis的sql标签", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#choose__10\">一、choose 元素</a></li><li><a href=\"#where_trim_set_34\">二、where, trim, set元素：</a></li><li><ul><li><a href=\"#1where__35\">1.where 元素:</a></li><li><a href=\"#2_trim__37\">2. trim 元素：</a></li><li><a href=\"#3set__54\">3.set 元素</a></li></ul>\n</li><li><a href=\"#foreach_57\">三、foreach元素：</a></li><li><a href=\"#bind__74\">四、bind 元素</a></li><li><a href=\"#include_83\">五、include标签</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<hr/>\n<p><code>提示：以下是本篇文章正文内容，下面案例可供参考</code></p>\n<h1><a id=\"choose__10\"></a>一、choose 元素</h1>\n<blockquote>\n<p>它有点像 Java 中的 switch 语句。<br/> 但是这次变为提供了\"title\"就按\"title\"查找，提供了\"author\"就按\"author\"查找，若两者都没有提供，就返回所有符合条件的BLOG。</p>\n</blockquote>\n<p>choose, when, otherwise元素。代码如下（示例）：</p>\n<pre><code class=\"prism language-c\"><span class=\"token operator\">&lt;</span>select id<span class=\"token operator\">=</span><span class=\"token string\">\"findActiveBlogLike\"</span>\n     resultType<span class=\"token operator\">=</span><span class=\"token string\">\"Blog\"</span><span class=\"token operator\">&gt;</span>\n  SELECT <span class=\"token operator\">*</span> FROM BLOG WHERE state <span class=\"token operator\">=</span> ‘ACTIVE’\n  <span class=\"token operator\">&lt;</span>choose<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>when test<span class=\"token operator\">=</span><span class=\"token string\">\"title != null\"</span><span class=\"token operator\">&gt;</span>\n      AND title like #<span class=\"token punctuation\">{<!-- --></span>title<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>when<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>when test<span class=\"token operator\">=</span><span class=\"token string\">\"author != null and author.name != null\"</span><span class=\"token operator\">&gt;</span>\n      AND author_name like #<span class=\"token punctuation\">{<!-- --></span>author<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>when<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>otherwise<span class=\"token operator\">&gt;</span>\n      AND featured <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>otherwise<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>choose<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>select<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h1><a id=\"where_trim_set_34\"></a>二、where, trim, set元素：</h1>\n<h2><a id=\"1where__35\"></a>1.where 元素:</h2>\n<blockquote>\n<p>where 元素知道只有在一个以上的if条件有值的情况下才去插入\"WHERE\"子句。而且，若最后的内容是\"AND\"或\"OR\"开头的，where 元素也知道如何将他们去除。</p>\n</blockquote>\n<h2><a id=\"2_trim__37\"></a>2. trim 元素：</h2>\n<blockquote>\n<p>和 where 元素等价的自定义 trim 元素</p>\n</blockquote>\n<p>代码如下（示例）：</p>\n<pre><code class=\"prism language-c\"><span class=\"token operator\">&lt;</span>trim prefix<span class=\"token operator\">=</span><span class=\"token string\">\"WHERE\"</span> prefixOverrides<span class=\"token operator\">=</span><span class=\"token string\">\"AND |OR \"</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> \n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>trim<span class=\"token operator\">&gt;</span>\n</code></pre>\n<blockquote>\n<p>prefixOverrides 属性会忽略通过管道分隔的文本序列（注意此例中的空格也是必要的）。它带来的结果就是所有在 prefixOverrides 属性中指定的内容将被移除，并且插入 prefix 属性中指定的内容。</p>\n</blockquote>\n<blockquote>\n<p>trim标签有4个属性：<br/> prefix：当trim元素内包含内容时，会给内容增加prefix指定的前缀。<br/> prefixOverrides：当trim元素内包含内容时，会把内容中匹配的前缀字符串去掉。<br/> suffix：当trim元素内包含内容时，会给内容增加suffix指定的后缀。<br/> suffixOverrides：当trim元素内包含内容时，会把内容中匹配的后缀字符串去掉。</p>\n</blockquote>\n<h2><a id=\"3set__54\"></a>3.set 元素</h2>\n<h1><a id=\"foreach_57\"></a>三、foreach元素：</h1>\n<blockquote>\n<p>foreach 元素，它允许你指定一个集合，声明可以用在元素体内的集合项和索引变量。它也允许你指定开闭匹配的字符串以及在迭代中间放置分隔符。<br/> foreach 元素可以（动态 SQL 的另外一个常用的必要操作是需要对一个集合进行遍历，通常是在构建 IN 条件语句的时候。）<br/> collection ：必填，值为要选代循环的属性名。这个属性值的情况有很多。<br/> item：变量名，值为从法代对象中取出的每一个值。<br/> index ：索引的属性名，在集合数组情况下值为当前索引值，当选代循环的对象是Map类型时，这个值为Map 的key （键值）。<br/> open：整个循环内容开头的字符串。<br/> close ：整个循环内容结尾的字符串。<br/> separator ：每次循环的分隔符</p>\n</blockquote>\n<p>代码如下（示例）：</p>\n<pre><code class=\"prism language-c\"><span class=\"token operator\">&lt;</span>foreach item<span class=\"token operator\">=</span><span class=\"token string\">\"item\"</span> index<span class=\"token operator\">=</span><span class=\"token string\">\"index\"</span> collection<span class=\"token operator\">=</span><span class=\"token string\">\"list\"</span>\n      open<span class=\"token operator\">=</span><span class=\"token string\">\"(\"</span> separator<span class=\"token operator\">=</span><span class=\"token string\">\",\"</span> close<span class=\"token operator\">=</span><span class=\"token string\">\")\"</span><span class=\"token operator\">&gt;</span>\n        #<span class=\"token punctuation\">{<!-- --></span>item<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>foreach<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h1><a id=\"bind__74\"></a>四、bind 元素</h1>\n<blockquote>\n<p>bind 元素可以从 OGNL 表达式中创建一个变量并将其绑定到上下文。</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token operator\">&lt;</span>select id<span class=\"token operator\">=</span><span class=\"token string\">\"selectBlogsLike\"</span> resultType<span class=\"token operator\">=</span><span class=\"token string\">\"Blog\"</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>bind name<span class=\"token operator\">=</span><span class=\"token string\">\"pattern\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"'%' + _parameter.getTitle() + '%'\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n  SELECT <span class=\"token operator\">*</span> FROM BLOG\n  WHERE title LIKE #<span class=\"token punctuation\">{<!-- --></span>pattern<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>select<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h1><a id=\"include_83\"></a>五、include标签</h1>\n<blockquote>\n<p>include标签引用，可以复用SQL片段</p>\n<blockquote>\n<p>sql标签中id属性对应include标签中的refid属性。<br/> 通过include标签将sql片段和原sql片段进行拼接成一个完整的sql语句进行执行。</p>\n</blockquote>\n</blockquote>\n<p>代码示例：</p>\n<pre><code class=\"prism language-c\"><span class=\"token operator\">&lt;</span>sql id<span class=\"token operator\">=</span><span class=\"token string\">\"sqlid\"</span><span class=\"token operator\">&gt;</span>\n    res_type_id<span class=\"token punctuation\">,</span>res_type\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>sql<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>sql id<span class=\"token operator\">=</span><span class=\"token string\">\"base_table\"</span><span class=\"token operator\">&gt;</span>\n    bu_res_type<span class=\"token punctuation\">,</span>pub_res_type\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>sql<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>select id<span class=\"token operator\">=</span><span class=\"token string\">\"selectbyId\"</span> resultType<span class=\"token operator\">=</span><span class=\"token string\">\"com.property.vo.PubResTypeVO\"</span><span class=\"token operator\">&gt;</span>\n    select\n    <span class=\"token operator\">&lt;</span>include refid<span class=\"token operator\">=</span><span class=\"token string\">\"sqlid\"</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n    from \n    <span class=\"token operator\">&lt;</span>include refid<span class=\"token operator\">=</span><span class=\"token string\">\"base_table\"</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>select<span class=\"token operator\">&gt;</span>\n\n等同于：\n\n<span class=\"token operator\">&lt;</span>select<span class=\"token operator\">&gt;</span>\n    select  res_type_id<span class=\"token punctuation\">,</span>res_type\n    from pbu_res_type<span class=\"token punctuation\">,</span>pub_res_type\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>select<span class=\"token operator\">&gt;</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-03-30 15:14:36", "summary": "文章目录一、元素二、元素：元素元素：元素三、元素：四、元素五、标签提示：以下是本篇文章正文内容，下面案例可供参考一、元素它有点像中的语句。但是这次变为提供了就按查找，提供了就按查找，若两者都没有提供，"}