{"blogid": "123238485", "writerAge": "码龄1年", "writerBlogNum": "4", "writerCollect": "27", "writerComment": "0", "writerFan": "11", "writerGrade": "1级", "writerIntegral": "53", "writerName": "chaonian16", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123238485.jpg", "writerRankTotal": "197201", "writerRankWeekly": "1071780", "writerThumb": "12", "writerVisitNum": "3781", "blog_read_count": "1282", "blog_time": "已于 2022-03-02 20:42:41 修改", "blog_title": "混合编程之三：c#调用c++pcl库，在winform项目中使用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p><strong>将混合编程之一，二生成的dll文件找到，并新建winform项目</strong></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\6e6b0716d0c949bda18b55b0fdc59584.png\"/></p>\n<p></p>\n<p><strong>工具栏，通过NuGet包搜索vtk，找到Activiz.NET.X64，下载安装</strong></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\8635bf87a23842859167156ecdfe9bce.png\"/></p>\n<p> （直接拖动RenderWindowControl控件报错，解决方案见我的博客：<a href=\"https://blog.csdn.net/qq_57377241/article/details/123207906\" title=\"(73条消息) ActiViz（VTK的C#库）C#64位VTK如何在Visual Studio里创建RenderWindowControl控件_chaonian16的博客-CSDN博客\">(73条消息) ActiViz（VTK的C#库）C#64位VTK如何在Visual Studio里创建RenderWindowControl控件_chaonian16的博客-CSDN博客</a>）</p>\n<p></p>\n<p><strong>将 PCLdll.dll，sharpvtkdll.dll文件分别放入winform项目中的bin目录下，在解决方案中右击引用，添加引用，找到c#库类文件sharpvtkdll.dll</strong></p>\n<p style=\"text-align:center;\"><strong><img alt=\"\" src=\"..\\..\\static\\image\\cbca051a94fb48309590b604ccffe017.png\"/></strong></p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\b78c20c3239d494c930fb21b2dc789a1.png\"/></p>\n<p><strong> 在打开按钮写入如下代码：</strong></p>\n<p><strong> private void button1_Click(object sender, EventArgs e)<br/>         {<!-- --><br/>             //打开点云文件<br/>             OpenFileDialog ofd = new OpenFileDialog();<br/>             ofd.Title = \"请选择点云文件\";<br/>             ofd.InitialDirectory = @\"C:\\Users\\17116\\Desktop\";<br/>             ofd.Filter = \"点云文件|*.ply\";</strong></p>\n<p><strong>            ofd.ShowDialog();<br/>             url = ofd.FileName;</strong></p>\n<p><strong>            Class1 test = new Class1();</strong></p>\n<p><strong>            //string url = @\"C:/Users/17116/Desktop/couldfile/text_1000.ply\";<br/>             //获取点云大小<br/>             //int size = Size(url);<br/>             int size = test.PcdSize(url);</strong></p>\n<p><strong>            //创建X,Y,Z数组，用来储存，X,Y,Z坐标<br/>             double[] arr_X = new double[size];<br/>             double[] arr_Y = new double[size];<br/>             double[] arr_Z = new double[size];<br/>             //调用dll加载点云函数<br/>             //loadPCDFile(url, arr_X, arr_Y, arr_Z);<br/>             test.LoadFile(url, ref arr_X,ref arr_Y,ref arr_Z);</strong></p>\n<p><br/><strong>            //将获取到的X,Y,Z点云数据存入vtkPoint对像<br/>             vtkPoints points = vtkPoints.New();<br/>             for (int i = 0; i &lt; arr_X.Length; i++)<br/>             {<!-- --><br/>                 points.InsertNextPoint(arr_X[i], arr_Y[i], arr_Z[i]);<br/>             }</strong></p>\n<p><strong>            vtkPolyData polydata = vtkPolyData.New();<br/>             polydata.SetPoints(points);</strong></p>\n<p><strong>            vtkVertexGlyphFilter glyphFilter = vtkVertexGlyphFilter.New();<br/>             glyphFilter.SetInputConnection(polydata.GetProducerPort());<br/>             // 新建制图器<br/>             vtkPolyDataMapper mapper = vtkPolyDataMapper.New();<br/>             mapper.SetInputConnection(glyphFilter.GetOutputPort());// 连接管道</strong></p>\n<p><br/><strong>            vtkActor actor = vtkActor.New(); // 新建角色<br/>             actor.SetMapper(mapper); // 传递制图器<br/>             actor.GetProperty().SetColor(255, 255, 255); // 设置“角色”颜色[RGB]</strong></p>\n<p><strong>            // Create components of the rendering subsystem<br/>             //<br/>             vtkRenderer ren1 = renderWindowControl1.RenderWindow.GetRenderers().GetFirstRenderer();<br/>             // 新建渲染器<br/>             vtkRenderer render1 = vtkRenderer.New();</strong></p>\n<p><strong>            vtkRenderWindow renWin = renderWindowControl1.RenderWindow;<br/>             // 将“角色Actor”添加到“渲染器Renderer”并渲染<br/>             renWin.AddRenderer(render1);<br/>             render1.AddActor(actor);<br/>             // 设置Viewport窗口<br/>             render1.SetViewport(0.0, 0.0, 1.0, 1.0);<br/>             // 设置背景色<br/>             render1.SetBackground(0.0, 0.0, 0.0);<br/>             // Add the actors to the renderer, set the window size<br/>             // 将“角色Actor”添加到“渲染器Renderer”并渲染<br/>             //ren1.AddViewProp(actor); // 渲染器添加角色<br/>             //renWin.SetSize(250, 250); // 设置渲染窗口大小[无效语句]<br/>             //renWin.Render();<br/>             //设置\"相机Camera\"<br/>             //vtkCamera camera = ren1.GetActiveCamera();<br/>             //camera.Zoom(1.5);<br/>         }</strong></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\cfff301a70474e7cb9d45e95926ee776.png\"/></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\6e99642065844fa2bd5e1d70387643f2.png\"/></p>\n<p></p>\n<p></p>\n<p><strong>在分割按钮写入如下代码：</strong></p>\n<p><strong> private void button2_Click(object sender, EventArgs e)<br/>         {<!-- --><br/>             Class1 test = new Class1();<br/>             int size = test.PcdSize(url);</strong></p>\n<p><br/><strong>            float[] arr_X = new float[size];<br/>             float[] arr_Y = new float[size];<br/>             float[] arr_Z = new float[size];<br/>             //分割算法<br/>             //PassThoughPCDFile(url, arr_X, arr_Y, arr_Z);<br/>             test.PassThoughPCD(url, ref arr_X, ref arr_Y, ref arr_Z);</strong></p>\n<p><strong>            vtkPoints points = vtkPoints.New();<br/>             for (int i = 0; i &lt; arr_X.Length; i++)<br/>             {<!-- --><br/>                 points.InsertNextPoint(arr_X[i], arr_Y[i], arr_Z[i]);<br/>             }</strong></p>\n<p><strong>            vtkPolyData polydata = vtkPolyData.New();<br/>             polydata.SetPoints(points);</strong></p>\n<p><strong>            vtkVertexGlyphFilter glyphFilter = vtkVertexGlyphFilter.New();<br/>             glyphFilter.SetInputConnection(polydata.GetProducerPort());</strong></p>\n<p><strong>            vtkPolyDataMapper mapper = vtkPolyDataMapper.New();<br/>             mapper.SetInputConnection(glyphFilter.GetOutputPort());</strong></p>\n<p><br/><strong>            vtkActor actor = vtkActor.New();<br/>             actor.SetMapper(mapper);<br/>             actor.GetProperty().SetColor(255, 255, 0);</strong></p>\n<p><strong>            // Create components of the rendering subsystem<br/>             //<br/>             vtkRenderer ren1 = renderWindowControl2.RenderWindow.GetRenderers().GetFirstRenderer();<br/>             vtkRenderWindow renWin = renderWindowControl2.RenderWindow;</strong></p>\n<p><strong>            // Add the actors to the renderer, set the window size<br/>             //<br/>             ren1.AddViewProp(actor);<br/>             renWin.SetSize(250, 250);<br/>             renWin.Render();</strong></p>\n<p><strong>        }</strong></p>\n<p style=\"text-align:center;\"><strong><img alt=\"\" src=\"..\\..\\static\\image\\66ad2b71256a4b12a873f4935ba30936.png\"/></strong></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\e42681304de040e688b67c5c6c9e1a64.png\"/></p>\n<p><strong> 在显示点云大小按钮下写入如下代码：</strong></p>\n<p><strong>        private void button3_Click(object sender, EventArgs e)<br/>         {<!-- --></strong></p>\n<p><strong>            <br/>             //显示点云大小<br/>             Class1 test = new Class1();<br/>             int size = test.PcdSize(url);<br/>             textBox1.Text = size.ToString();</strong></p>\n<p><strong>        }</strong></p>\n<p style=\"text-align:center;\"><strong><img alt=\"\" src=\"..\\..\\static\\image\\2171e0c27c68464c9dbb5dafc8094917.png\"/></strong></p>\n<p style=\"text-align:center;\"></p>\n<p></p>\n<p>右击项目，属性改成64位</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\8fd3e04c651f454bacfc2a02b5814c4e.png\"/></p>\n<p></p>\n<p><span style=\"color:#fe2c24;\"> 注意：项目框架和库类框架一致</span></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\5d3b86a49c244d00b26b6ac10fcc8f43.png\"/></p>\n<p> 运行后结果如下：</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\35c51d62aea741b6853a4710d88574bb.png\"/></p>\n<p></p>\n<p style=\"text-align:center;\"></p>\n</div>\n</div>", "first_tag": "C#", "cpp": 1, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-02 20:42:41", "summary": "将混合编程之一，二生成的文件找到，并新建项目工具栏，通过包搜索，找到，下载安装直接拖动控件报错，解决方案见我的博客：条消息的库位如何在里创建控件的博客博客条消息的库位如何在里创建控件的博客博客将，文件"}