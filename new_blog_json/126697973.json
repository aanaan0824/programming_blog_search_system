{"blogid": "126697973", "writerAge": "码龄2年", "writerBlogNum": "52", "writerCollect": "392", "writerComment": "617", "writerFan": "541", "writerGrade": "5级", "writerIntegral": "1738", "writerName": "new Handsome()", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126697973.jpg", "writerRankTotal": "12819", "writerRankWeekly": "128", "writerThumb": "476", "writerVisitNum": "13617", "blog_read_count": "389", "blog_time": "已于 2022-09-05 16:43:28 修改", "blog_title": "11、Java 变量作用域、构造方法官方教程", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_1\">一、变量作用域</a></li><li><a href=\"#Constructor_76\">二、构造方法（Constructor）</a></li><li><ul><li><a href=\"#1__77\">(1) 官方教程解释构造方法</a></li><li><a href=\"#2__138\">(2) 构造方法概念</a></li><li><a href=\"#3_this___171\">(3) this 的本质 ☆☆☆☆☆</a></li></ul>\n</li><li><a href=\"#_228\">三、对象创建流程分析</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>一、变量作用域</h1>\n<p><code>Java 中的变量有3种:</code><br/> 📖 ① 全局变量：被定义在类中（<font color=\"blue\">成员变量</font>）<br/> 📖 ② 局部变量：<font color=\"blue\">被定义在成员方法、代码块、静态代码块中定义的变量</font><br/> 📖 ③ 参数：方法声明中的变量</p>\n<hr/>\n<p>There are several kinds of <strong>variables</strong>（变量）:</p>\n<p>📋 <strong>Member variables</strong>（成员变量） in a class：these are called fields（属性）<br/> 📋 Variables in a method or <strong>block of code</strong>（代码块）：these are called <strong>local variables</strong>（局部变量）<br/> 📋 Variables in <strong>method declarations</strong>（方法声明）：these are called <strong>parameters</strong>（参数）</p>\n<hr/>\n<p>✏️ <strong>全局变量</strong>（成员变量）作用域为：整个类体<br/> ✏️ 局部变量（<em>除全局变量之外的变量</em>）作用域为：它所在的代码块<br/> ✏️ 全局变量可以不赋值，直接使用（全局变量有默认值）<br/> ✏️ 局部变量必须赋值后才能使用<br/> ✏️ 参数的值在方法被调用的时候才有</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VariableDomain</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 全局变量</span>\n    <span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 局部变量</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">double</span> pai <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 局部变量</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// num1、description 参数</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> String description<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        String hobby <span class=\"token operator\">=</span> <span class=\"token string\">\"睡觉\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 局部变量</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<p>📜 全局变量名和局部变量名可以一样，访问的时候遵循<strong>就近原则</strong><br/> 📜 在同一作用域中（eg：同一成员方法中），不能有重名的局部变量<br/> 📜 同一类的<strong>同一代码块</strong>中的成员变量也不能重名</p>\n<p><code>全局变量和局部变量重名的时候，访问遵循就近原则：</code></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VariableDomain</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 全局变量</span>\n    <span class=\"token keyword\">private</span> String name <span class=\"token operator\">=</span> <span class=\"token string\">\"张浩男\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        VariableDomain domain <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VariableDomain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        domain<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        String name <span class=\"token operator\">=</span> <span class=\"token string\">\"莫松\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 局部变量（可以和全局变量重名）</span>\n        <span class=\"token comment\">// output: name = 莫松</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name = \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>不同类的成员变量可以重名：</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0d12b28d606e4e21b5b4433f341e6973.png\"/></p>\n<p>📜 全局变量（成员变量）的生命周期长：【对象就像一个人🙍，成员变量就像一个人的手👋】全局变量的生命伴随着对象的存在而存在，便随着对象的销毁而销毁<br/> 📜 局部变量生命周期短：与它所在的代码块共生<br/> 📜 全局变量可以在本类或其他类中使用<br/> 📜 局部变量只能在它所在类的指定方法中使用<br/> 📜 全局变量可以被修饰符修饰（eg：private、static、final）<br/> 📜 局部变量不能被修饰符修饰</p>\n<h1><a id=\"Constructor_76\"></a>二、构造方法（Constructor）</h1>\n<h2><a id=\"1__77\"></a>(1) 官方教程解释构造方法</h2>\n<p>📝 A class contains constructors <strong>that are invoked to create objects from the class blueprint</strong>. Constructor declarations look like method declarations：except that they <strong>use the name of the class</strong> and <strong>have no return type</strong>.<br/> 📝 ① <strong>类</strong>中包含<strong>构造方法</strong>（可通过调用构造方法从一个类模板中创建一个对象）<br/> 📝 ② 声明构造方法和声明成员方法一样，但也有<strong>区别</strong>（✒️构造方法的方法名和类名一模一样；✒️构造方法没有返回值类型）</p>\n<p><code>下面是一个构造方法的例子：</code></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> score<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// (1) 没有返回类型</span>\n    <span class=\"token comment\">// (2) 方法名和类名一致</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>String stuName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> stuAge<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> stuScore<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 构造方法的方法体中一般给成员变量赋值</span>\n        name <span class=\"token operator\">=</span> stuName<span class=\"token punctuation\">;</span>\n        age <span class=\"token operator\">=</span> stuAge<span class=\"token punctuation\">;</span>\n        score <span class=\"token operator\">=</span> stuScore<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>📝 To create a new Student object called tom, a constructor is called by the <font color=\"red\"><strong>new</strong></font> operator.<br/> 📝 要想创建一个名为 tom 的 Student 对象，可通过 <font color=\"red\"><strong>new</strong></font> 运算符调用构造方法<br/> <code>new 运算符调用构造方法，创建 Student 对象：</code></p>\n<pre><code class=\"prism language-java\">Student zhn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张浩男\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n</code></pre>\n<p>📝 <code>new Student(\"张浩男\", 12, 99.5)：</code> creates <strong>space in memory</strong>（内存空间） for the object and initializes its fields<br/> 📝 <code>new Student(\"张浩男\", 12, 99.5)：</code> 该代码在内存中为对象开辟了内存空间，并且初始化了成员变量的值</p>\n<p>📝 Although Student only has one constructor, it could have others, including a <strong>no-argument constructor</strong>（无参构造方法）：</p>\n<pre><code class=\"prism language-java\">    <span class=\"token comment\">/**\n     * Student 类的无参构造方法\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        name <span class=\"token operator\">=</span> <span class=\"token string\">\"庆医\"</span><span class=\"token punctuation\">;</span>\n        age <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n        score <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>📝 和成员方法一样，构造方法也是可以<strong>重载</strong>（Override）的：方法名和类名一致，参数列表各不相同</p>\n<hr/>\n<p>📝 Both constructors could have been declared in Student because they have different <strong>argument lists</strong>（参数列表）. <strong>As with methods</strong>（与方法一样）, the Java platform <strong>differentiates</strong>（区分） constructors on the basis of the <font color=\"blue\"><strong>number</strong> of arguments</font> in the list and their <font color=\"blue\">types</font>. You cannot write two constructors <em>that have the same number and type of arguments for the same class</em>, because the platform would not be able to <strong>tell</strong>（区分） them apart. Doing so causes a <strong>compile-time error</strong>.<br/> 📝 两个构造方法（有参构造方法和无参构造方法）都可在 Student 类中被声明，因为它们有不同的参数列表。与成员方法一样，<strong>Java 平台可通过参数数量和参数类型来区分构造方法</strong>。在同一个类中，你不能写两个拥有相同参数数量和参数类型的构造方法，因为 Java 平台无法区分。写两个拥有相同参数数量和参数类型的构造方法将会导致<font color=\"red\">编译时错误</font>。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\661eb9e5e8d748c38c13420e5dc0d4bd.png\"/></p>\n<p>💡 You don’t have to provide any constructors for your class, but you must be careful when doing this. The <strong>compiler</strong>（编译器） automatically provides a no-argument, <strong>default constructor</strong>（默认构造方法） for any class without constructors. This <em>default constructor</em> will call the no-argument constructor of the <font color=\"blue\">superclass</font>（超类）. In this situation, the compiler will <font color=\"green\"><strong>complain</strong></font>（抱怨、埋怨、发恼骚） if the <strong>superclass</strong>（超类） doesn’t have a no-argument constructor so you must <strong>verify</strong>（验证） that it does. If your class has no <strong>explicit</strong>（明确的、显式的） superclass, then it has an <strong>implicit</strong> （隐式的、含蓄的）superclass of <font color=\"red\">Object</font>, which does have a no-argument constructor.<br/> 💡 你并不是必须得給你的类提供一个构造方法（你可以不同你的类提供任何构造方法）。若不给类提供任何构造方法的话，你必须当心一点。编译器会自动提供一个无参的默认构造方法，这个默认的无参构造方法是提供给那些没有任何构造方法的类的。这个<strong>默认的无参构造方法将会调用超类的无参构造方法</strong>，所以必须确保超类拥有无参构造方法，否则编译器会发恼骚（报错的）😡。如果你的类没有明确的超类，你的类会有一个隐式的超类（<strong>Object</strong>），<font color=\"blue\">Object 类是所有类的超类（是 Java 平台提供的）</font>，Object 类百分百拥有一个无参构造方法。</p>\n<p>💚 You can use <strong>access modifiers</strong>（访问修饰符） in a constructor’s declaration <em>to control which other classes can call the constructor</em>.<br/> 💚 你可以在声明构造方法的使用使用访问修饰符（public、protected、private），用以控制哪些其他类可以调用这个构造方法。</p>\n<p>💜 If another class cannot call a Student constructor, it cannot <strong>directly</strong>（直接地） create Student objects.<br/> 💜 如果其他类不能调用 Student 类的构造方法，其他类就无法直接地创建 Student 对象。</p>\n<h2><a id=\"2__138\"></a>(2) 构造方法概念</h2>\n<p>🍀 构造方法：也叫构造器，用于更方便地<strong>创建一个对象</strong><br/> 🍀 方法名必须和类名一模一样<br/> 🍀 没有返回值类型<br/> 🍀 可以<strong>重载</strong>（方法名一样，方法签名不一样）</p>\n<p><code>构造方法案例：</code></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Handsome</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> weight<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Handsome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Handsome</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Handsome</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> weight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weight <span class=\"token operator\">=</span> weight<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>使用构造方法创建 Handsome 对象：</code></p>\n<pre><code class=\"prism language-java\">\t<span class=\"token comment\">// 可通过3种构造方法创建 Handsome 对象</span>\n\tHandsome hs1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Handsome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tHandsome hs2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Handsome</span><span class=\"token punctuation\">(</span><span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tHandsome hs3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Handsome</span><span class=\"token punctuation\">(</span><span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"3_this___171\"></a>(3) this 的本质 ☆☆☆☆☆</h2>\n<p>🍀 <font color=\"red\"><strong>this</strong></font>：<strong>指向当前对象的引用</strong></p>\n<p><code>this 的用途：</code><br/> 🍀 ① 访问当前类中定义的成员变量<br/> 🍀 ② 调用当前类中定义的方法（包括构造方法）</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Computer</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> String brand<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Computer</span><span class=\"token punctuation\">(</span>String brand<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// this 作用：调用当前类中定义的方法（包括构造方法）</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>brand<span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Computer</span><span class=\"token punctuation\">(</span>String brand<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// this 作用：访问当前类中定义的成员变量</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>brand <span class=\"token operator\">=</span> brand<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>🍀 在类中直接写成员变量、直接调用成员方法，默认都是访问和调用当前对象的</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 等价于：System.out.println(this.age + \"eat()\");</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>age <span class=\"token operator\">+</span> <span class=\"token string\">\"eat()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 等价于：this.eat();</span>\n        <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<p>💙 <font color=\"red\"><strong>this</strong></font> <strong>的本质是一个隐藏的、位置最靠前的方法参数。</strong>（面向对象的语言的 <strong>this</strong> 都是这样的）<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\76c04802bab5413c82ea4415f0b9de15.png\"/></p>\n<hr/>\n<p>🌱 只能在构造方法中用 <code>this</code> 调用其他构造方法<br/> 🌱 如果在<strong>构造方法 A</strong> 中调用了其他构造方法，调用构造方法的语句必须是<strong>构造方法 A</strong> 中的<strong>第一条</strong>语句<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e8d34694b2cd421498ec5772335e8532.png\"/></p>\n<hr/>\n<p>🌼 默认构造方法（Default Constructor）：如果一个类没有自定义构造方法，编译器会自动为它提供无参数的默认构造方法<br/> 🌼 一旦自定义了构造方法，默认构造方法就不再存在</p>\n<h1><a id=\"_228\"></a>三、对象创建流程分析</h1>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">17</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-java\">\tPerson zhn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张浩男\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><code>对象创建流程：</code><br/> 🥤 ① 方法区加载一次类信息<br/> 🥤 ② 在堆中分配对象的内存空间<br/> 🥤 ③ 完成对象属性初始化（属性默认初始化；显示初始化；构造器初始化）<br/> 🥤 ④ 对象在堆中的内存地址赋值给 zhn（zhn 指向对象在堆中的地址）<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7292162c6f7d410bbfd11a99dff266f1.png\"/></p>\n<p><code>Bye-Bye 如发现错误，请不吝赐教！</code></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-09-05 16:43:28", "summary": "文章目录一、变量作用域二、构造方法官方教程解释构造方法构造方法概念的本质三、对象创建流程分析一、变量作用域中的变量有种全局变量：被定义在类中成员变量局部变量：被定义在成员方法、代码块、静态代码块中定义"}