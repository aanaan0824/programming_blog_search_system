{"blogid": "123538460", "writerAge": "码龄5年", "writerBlogNum": "29", "writerCollect": "35", "writerComment": "2", "writerFan": "514", "writerGrade": "2级", "writerIntegral": "368", "writerName": "arriettyandray", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123538460.jpg", "writerRankTotal": "48249", "writerRankWeekly": "18269", "writerThumb": "6", "writerVisitNum": "17580", "blog_read_count": "874", "blog_time": "于 2022-03-20 22:12:15 发布", "blog_title": "C#学习系列之H264解码", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>提示：文章写完后，目录可以自动生成，如何生成可参考右边的帮助文档</p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>C#学习系列之H264解码</h3>\n<ul><li><a href=\"#_7\">唠叨</a></li><li><a href=\"#H264H265_15\">一、H264/H265是什么？</a></li><li><a href=\"#_37\">二、使用问题</a></li><li><ul><li><a href=\"#1H264_38\">1.H264解码基础理论</a></li><li><a href=\"#2H264_62\">2.H264实际应用</a></li></ul>\n</li><li><a href=\"#_180\">总结</a></li><li><a href=\"#_182\">引用</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_7\"></a>唠叨</h1>\n<p>最近忙着修改代码，但是遇到比较棘手的问题。修改了底层引用的文件，替换了地址，修改了图标。还是躲不过H264、H265的解码问题。作为一位图像处理专业的学生，我也是有点爱莫能助。写文章，记录自己的学习心得，也希望大家能分享一些经验！</p>\n<hr/>\n<h1><a id=\"H264H265_15\"></a>一、H264/H265是什么？</h1>\n<ul><li><strong>H.264</strong></li></ul>\n<p>MPEG-4第十部分，是由ITU-T视频编码专家组（VCEG）和ISO/IEC动态图像专家组（MPEG）联合组成的联合视频组（JVT，Joint Video Team）提出的高度压缩数字视频编解码器标准。这个标准通常被称之为H.264/AVC（或者AVC/H.264或者H.264/MPEG-4 AVC或MPEG-4/H.264 AVC）<br/> <strong>优点</strong>：<br/> 1、低码率（与MPEG相比）；<br/> 2、高质量的图像（连续、流畅）；<br/> 3、容错能力强（丢包问题）；<br/> 4、网络适应性强（传输性好）<br/> <strong>编码</strong>：<br/> 1、帧内预测编码——压缩图像空间冗余。通过已有宏块预测其他宏块的预测值与实际值，差值进行编码；<br/> 2、帧间预测编码——连续帧中的时间冗余来进行运动估计和补偿。流间传送帧（SP帧）——类似内容、不同码率的码流之间快速切换。（运动补偿、多帧预测、自适应去除块的滤波器）<br/> …</p>\n<ul><li><strong>H265</strong><br/> H265就是在H264的基础上，进行优化。<br/> <strong>优点</strong>：<br/> 1、降码率——编码单位；<br/> 2、块的四叉树分化结构——预测与变化；<br/> 3、传输速度、内容更多更快，存储空间少。</li></ul>\n<h1><a id=\"_37\"></a>二、使用问题</h1>\n<h2><a id=\"1H264_38\"></a>1.H264解码基础理论</h2>\n<ul><li><strong>内容</strong></li></ul>\n<p>在VS平台上，使用.net搭配C#来解决H264解码，但是会出现图像马赛克的情况。<br/> 了解H264解码中，图像的连续传输可以理解成目标跟踪的原理，以第一帧图像作为参考，后面的图像就在第一帧的基础上进行差别对比，不断演变成后续的图像。后续的图像也会不会演变为第一张，然后依次循环。<br/> H264编码数据从帧——片——宏块（基本单元）</p>\n<ul><li><strong>相关术语</strong>：<br/> 协议中定义三种帧：<br/> <strong>I帧</strong>：完整图像帧<br/> <strong>B帧</strong>：参考前后图像帧编码生成<br/> <strong>P帧</strong>：参考I帧生成<br/> <strong>GOP 画面组</strong>：变化不大的图像集，其中M指定I帧与P帧之间的距离；N指定两个I帧之间的距离<br/> <strong>IDR关键帧</strong>：为I帧，但是I不一定是关键帧。作为已解码、重新开始的机会，分水岭。</li><li><strong>压缩方式</strong>：<br/> 1、分组：GOP<br/> 2、定义帧：划分为三类帧<br/> 3、预测帧：I帧为基础，I帧预测P帧，I帧与P帧预测B帧<br/> 4、数据传输：I帧与预测差值信息进行存储和传输</li><li>分层结构<br/> 1、视频编码（VCL）——视频编码层——视频内容<br/> 2、网口抽象（NAL）——网络提取层——按照一定协议传输数据</li></ul>\n<h2><a id=\"2H264_62\"></a>2.H264实际应用</h2>\n<p>实际在项目中需要使用c#来调用海思H264的解码库。<br/> 1、读取压缩图像的H264裸码转化为yuv数据；<br/> 2、将yuv数据转化为图像数据；<br/> 3、利用图像数据用c#的控件将图像进行显示。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">//初始化</span>\n<span class=\"token comment\">// 这是解码器输出图像信息</span>\nhiH264_DEC_FRAME_S _decodeFrame <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">hiH264_DEC_FRAME_S</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 这是解码器属性信息</span>\nhiH264_DEC_ATTR_S decAttr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">hiH264_DEC_ATTR_S</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndecAttr<span class=\"token punctuation\">.</span>uPictureFormat <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\ndecAttr<span class=\"token punctuation\">.</span>uStreamInType <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* 解码器最大图像宽高, D1图像(1280x720) */</span>\ndecAttr<span class=\"token punctuation\">.</span>uPicWidthInMB <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">uint</span><span class=\"token punctuation\">)</span>width <span class=\"token operator\">/</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\ndecAttr<span class=\"token punctuation\">.</span>uPicHeightInMB <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">uint</span><span class=\"token punctuation\">)</span>height <span class=\"token operator\">/</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* 解码器最大参考帧数: 16 */</span>\ndecAttr<span class=\"token punctuation\">.</span>uBufNum <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* bit0 = 1: 标准输出模式; bit0 = 0: 快速输出模式 */</span>\n<span class=\"token comment\">/* bit4 = 1: 启动内部Deinterlace; bit4 = 0: 不启动内部Deinterlace */</span>\ndecAttr<span class=\"token punctuation\">.</span>uWorkMode <span class=\"token operator\">=</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//创建、初始化解码器句柄</span>\n<span class=\"token class-name\">IntPtr</span> _decHandle <span class=\"token operator\">=</span> H264Dec<span class=\"token punctuation\">.</span><span class=\"token function\">Hi264DecCreate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> decAttr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//解码结束</span>\n<span class=\"token keyword\">bool</span> isEnd <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> bufferLen <span class=\"token operator\">=</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">IntPtr</span> pData <span class=\"token operator\">=</span> Marshal<span class=\"token punctuation\">.</span><span class=\"token function\">AllocHGlobal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//码流段</span>\n<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">0xFFFF</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> dataLenth <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isEnd <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>isDispose<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">VideoFrameData</span> frameDataTemp<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">byte</span> tempByte<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> getData <span class=\"token operator\">=</span> dataFrameQueue2<span class=\"token punctuation\">.</span><span class=\"token function\">TryDequeue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> frameDataTemp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>getData<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        Array<span class=\"token punctuation\">.</span><span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>frameDataTemp<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> dataLenth<span class=\"token punctuation\">,</span> frameDataTemp<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dataLenth <span class=\"token operator\">+</span><span class=\"token operator\">=</span> frameDataTemp<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//GC.Collect();</span>\n        <span class=\"token comment\">//GC.SuppressFinalize(this);</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//获取一段码流,积累一定缓存量再解</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dataLenth <span class=\"token operator\">&gt;=</span> bufferLen <span class=\"token operator\">||</span> isStop <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        Marshal<span class=\"token punctuation\">.</span><span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pData<span class=\"token punctuation\">,</span> dataLenth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>firstDecTimeBh<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            firstDecTimeBh <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"解码前时间：\"</span> <span class=\"token operator\">+</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy/MM/dd HH:mm:ss:fff\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        result <span class=\"token operator\">=</span> H264Dec<span class=\"token punctuation\">.</span><span class=\"token function\">Hi264DecFrame</span><span class=\"token punctuation\">(</span>_decHandle<span class=\"token punctuation\">,</span> pData<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>UInt32<span class=\"token punctuation\">)</span>dataLenth<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> _decodeFrame<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">uint</span><span class=\"token punctuation\">)</span>isStop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dataLenth <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//IntPtr _decHandle2 = H264Dec.Hi264DecCreate(ref decAttr);</span>\n        <span class=\"token comment\">//hiH264_DEC_FRAME_S _decodeFrame2 = new hiH264_DEC_FRAME_S();</span>\n        <span class=\"token comment\">//IntPtr pData2 = Marshal.AllocHGlobal(frameDataTemp.DataLenth);</span>\n        <span class=\"token comment\">//Marshal.Copy(frameDataTemp.Data, 0, pData2, frameDataTemp.DataLenth);</span>\n        <span class=\"token comment\">//int result2 = 0;</span>\n        <span class=\"token comment\">//result2 = H264Dec.Hi264DecFrame(_decHandle2, pData2, (UInt32)frameDataTemp.DataLenth, 0, ref _decodeFrame2, (uint)isStop);</span>\n        <span class=\"token comment\">//if (result2 &gt;= 0)</span>\n        <span class=\"token comment\">//    Console.WriteLine(\"发现帧\");</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>HI_H264DEC_NEED_MORE_BITS <span class=\"token operator\">!=</span> result<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>firstDecTimeBf<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                firstDecTimeBf <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"解码后时间：\"</span> <span class=\"token operator\">+</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy/MM/dd HH:mm:ss:fff\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>HI_H264DEC_NO_PICTURE <span class=\"token operator\">==</span> result<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                isEnd <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>HI_H264DEC_OK <span class=\"token operator\">==</span> result<span class=\"token punctuation\">)</span><span class=\"token comment\">/* 输出一帧图像 */</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//获取yuv</span>\n                <span class=\"token class-name\">UInt32</span> tempWid <span class=\"token operator\">=</span> _decodeFrame<span class=\"token punctuation\">.</span>uWidth<span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">UInt32</span> tempHeig <span class=\"token operator\">=</span> _decodeFrame<span class=\"token punctuation\">.</span>uHeight<span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">UInt32</span> yStride <span class=\"token operator\">=</span> _decodeFrame<span class=\"token punctuation\">.</span>uYStride<span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">UInt32</span> uvStride <span class=\"token operator\">=</span> _decodeFrame<span class=\"token punctuation\">.</span>uUVStride<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> y <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>tempHeig <span class=\"token operator\">*</span> yStride<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> u <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>tempHeig <span class=\"token operator\">*</span> uvStride <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> v <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>tempHeig <span class=\"token operator\">*</span> uvStride <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                Marshal<span class=\"token punctuation\">.</span><span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>_decodeFrame<span class=\"token punctuation\">.</span>pY<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                Marshal<span class=\"token punctuation\">.</span><span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>_decodeFrame<span class=\"token punctuation\">.</span>pU<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                Marshal<span class=\"token punctuation\">.</span><span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>_decodeFrame<span class=\"token punctuation\">.</span>pV<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                _decodeFrame<span class=\"token punctuation\">.</span>uDpbIdx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">uint</span><span class=\"token punctuation\">)</span>frameDataTemp<span class=\"token punctuation\">.</span>FrameId<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">MyProcessEvent2</span><span class=\"token punctuation\">(</span>_decodeFrame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//转为yv12格式</span>\n                <span class=\"token comment\">//byte[] yuvBytes = new byte[y.Length + u.Length + v.Length];</span>\n                <span class=\"token comment\">//Array.Copy(y, 0, yuvBytes, 0, y.Length);</span>\n                <span class=\"token comment\">//Array.Copy(v, 0, yuvBytes, y.Length , v.Length);</span>\n                <span class=\"token comment\">//Array.Copy(u, 0, yuvBytes, y.Length + v.Length, u .Length);</span>\n                <span class=\"token comment\">//更新显示</span>\n                <span class=\"token comment\">//this.d3dSource.Render(_decodeFrame.pY, _decodeFrame.pU, _decodeFrame.pV);</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">/* 继续解码剩余H.264码流 */</span>\n            result <span class=\"token operator\">=</span> H264Dec<span class=\"token punctuation\">.</span><span class=\"token function\">Hi264DecFrame</span><span class=\"token punctuation\">(</span>_decHandle<span class=\"token punctuation\">,</span> IntPtr<span class=\"token punctuation\">.</span>Zero<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> _decodeFrame<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">uint</span><span class=\"token punctuation\">)</span>isStop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/* 销毁解码器 */</span>\nH264Dec<span class=\"token punctuation\">.</span><span class=\"token function\">Hi264DecDestroy</span><span class=\"token punctuation\">(</span>_decHandle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>在使用时，将得到的H264压缩的源码提取到dataFrameQueue2队列中，然后从队列中取出来，进行存储，存储到一定码流后再进行解码。<br/> 除了以上解码，还会使用到</p>\n<pre><code class=\"prism language-csharp\"> <span class=\"token punctuation\">[</span><span class=\"token class-name\">DllImport</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi_h264dec_w.dll\"</span><span class=\"token punctuation\">,</span> EntryPoint <span class=\"token operator\">=</span> <span class=\"token string\">\"Hi264DecFrame\"</span><span class=\"token punctuation\">,</span> CallingConvention <span class=\"token operator\">=</span> CallingConvention<span class=\"token punctuation\">.</span>Cdecl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">Hi264DecFrame</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntPtr</span> hDec<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IntPtr</span> pStream<span class=\"token punctuation\">,</span> <span class=\"token keyword\">uint</span> iStreamLen<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ulong</span> ullPTS<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> hiH264_DEC_FRAME_S pDecFrame<span class=\"token punctuation\">,</span> <span class=\"token keyword\">uint</span> uFlags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>使用<strong>DllImport</strong>来调用<strong>hi_h264dec_w.dll</strong>解码库中的需要使用到的函数，将码流做图像输出。使用到extern也是可以理解的。</p>\n<h1><a id=\"_180\"></a>总结</h1>\n<p>H264解码首先了解解码原理，其次利用已有的解码库对H264结构进行了解，然后利用代码将其实现。</p>\n<h1><a id=\"_182\"></a>引用</h1>\n<blockquote>\n<p>1、https://baike.baidu.com/item/H.264/1022230?fromtitle=H264&amp;fromid=7338504&amp;fr=aladdin<br/> 2、https://zhuanlan.zhihu.com/p/71270595<br/> 3、https://blog.csdn.net/go_str/article/details/80340564<br/> 4、https://www.cnblogs.com/cangyue080180/p/5873351.html</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-20 22:12:15", "summary": "提示：文章写完后，目录可以自动生成，如何生成可参考右边的帮助文档学习系列之解码唠叨一、是什么？二、使用问题解码基础理论实际应用总结引用唠叨最近忙着修改代码，但是遇到比较棘手的问题。修改了底层引用的文件"}