{"blogid": "126352714", "writerAge": "码龄109天", "writerBlogNum": "49", "writerCollect": "722", "writerComment": "1425", "writerFan": "1735", "writerGrade": "5级", "writerIntegral": "2943", "writerName": "柒小莫", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126352714.jpg", "writerRankTotal": "6740", "writerRankWeekly": "256", "writerThumb": "843", "writerVisitNum": "11571", "blog_read_count": "505", "blog_time": "于 2022-08-16 07:15:00 发布", "blog_title": "JSON从入门到大师", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_6\">前言</a></li><li><a href=\"#json_16\">一、初识json</a></li><li><ul><li><a href=\"#11_JSON_17\">1.1 JSON概念</a></li><li><a href=\"#12_JavaScript_24\">1.2 JavaScript内建对象</a></li></ul>\n</li><li><a href=\"#JSON_135\">二、JSON的使用</a></li><li><a href=\"#JSON_219\">三、深入了解JSON</a></li><li><ul><li><a href=\"#31_JSONJS_220\">3.1 JSON和JS对象</a></li><li><a href=\"#32_JSJSON_261\">3.2 JS中的JSON函数</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_6\"></a>前言</h1>\n<p>本文将解了json的一些基础知识，与深入了解json，本文是作者的一些理解与在网络上搜集的一些知识，并不全面，如有错误请在评论区指出。觉得本文对你有所帮助请三连支持博主，你的支持是我更新的动力，先赞后看养成习惯。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/0f85e5903c30462b9105a2ec012db17f.gif#pic_center\"/></p>\n<hr/>\n<p><code>以下是本篇文章正文内容</code></p>\n<h1><a id=\"json_16\"></a>一、初识json</h1>\n<h2><a id=\"11_JSON_17\"></a>1.1 JSON概念</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c21126059e1544a188dabe87a4217a58.png\"/></p>\n<p><code>JSON</code> 全名<code>JavaScript Object Notation</code>是一种<code>轻量级的数据交换格式</code>，比XML更轻巧，易于阅读和编写，同时也易于机器解析和生成。它基于ECMA262语言规范（1999-12第三版）中JavaScript编程语言的一个子集。<code> JSON采用与编程语言无关的文本格式</code>，但是也使用了类C语言（包括C， C++， C#， Java， JavaScript， Perl， Python等）的习惯，<code>这些特性使JSON成为理想的数据交换格式</code>。</p>\n<hr/>\n<h2><a id=\"12_JavaScript_24\"></a>1.2 JavaScript内建对象</h2>\n<p>进入JSON前，先简单介绍一下JavaScript内建对象’Array对象第一段‘Array声明’的地方，声明一个Javascript Array对象，基本上是两种语法：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 正式声明</span>\n　　<span class=\"token keyword\">var</span> team1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bruce'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Sherry'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Happy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　<span class=\"token comment\">// 整合声明</span>\n　　<span class=\"token keyword\">var</span> team2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Bruce'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Sherry'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Happy'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n　　<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>team1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Bruce</span>\n　　<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>team2<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Happy</span>\n</code></pre>\n<hr/>\n<p>一个比较正式，一个是比较简写，通常Javascript写久了，会采用第二种方式来声明Array。</p>\n<p>再来看Javascript对象的声明，基本上也是两种：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 正式声明</span>\n　　<span class=\"token keyword\">var</span> Bruce <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　Bruce<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'King Kong'</span><span class=\"token punctuation\">;</span>\n　　Bruce<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n　　Bruce<span class=\"token punctuation\">.</span>sex <span class=\"token operator\">=</span> <span class=\"token string\">'male'</span><span class=\"token punctuation\">;</span>\n　　<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>Bruce<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 18</span>\n　　<span class=\"token comment\">// 整合声明</span>\n　　<span class=\"token keyword\">var</span> Bruce <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n　　<span class=\"token string\">'name'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'King Kong'</span><span class=\"token punctuation\">,</span>\n　　<span class=\"token string\">'age'</span> <span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n　　<span class=\"token string\">'sex'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'male'</span>\n　　<span class=\"token punctuation\">}</span>\n　　<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>Bruce<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// King Kong</span>\n　　<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>Bruce<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// King Kong</span>\n</code></pre>\n<p>一样，久了也是会选第二种来写，再来我们看看Javascript的‘Array + Object’的声明：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 声明一个familys Array，里面包含两个Object</span>\n　　<span class=\"token keyword\">var</span> familys <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n　　<span class=\"token punctuation\">{<!-- --></span><span class=\"token string-property property\">'name'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Bruce'</span><span class=\"token punctuation\">,</span>\n　　<span class=\"token string\">'age'</span> <span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n　　<span class=\"token string\">'sex'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'male'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n　　<span class=\"token punctuation\">{<!-- --></span><span class=\"token string-property property\">'name'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Sherry'</span><span class=\"token punctuation\">,</span>\n　　<span class=\"token string\">'age'</span> <span class=\"token operator\">:</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span>\n　　<span class=\"token string\">'sex'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'famale'</span><span class=\"token punctuation\">}</span>\n　　<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n　　<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>family<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Bruce</span>\n　　<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>family<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// famale</span>\n</code></pre>\n<p>到这里你已经会了JSON的80%了，JSON (JavaScript Object Notation)已经说明的很清楚了，它是一个JavaScript的子集，它利用Object与Array来表示数据，让数据很容易的可以交换使用。</p>\n<hr/>\n<p>JSON写法：</p>\n<pre><code class=\"prism language-json\"><span class=\"token punctuation\">{<!-- --></span>\n　　<span class=\"token string\">'familys'</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n　　<span class=\"token punctuation\">{<!-- --></span><span class=\"token string-property property\">'name'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Bruce'</span><span class=\"token punctuation\">,</span>\n　　<span class=\"token string\">'age'</span> <span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n　　<span class=\"token string\">'sex'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'male'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n　　<span class=\"token punctuation\">{<!-- --></span><span class=\"token string-property property\">'name'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Sherry'</span><span class=\"token punctuation\">,</span>\n　　<span class=\"token string\">'age'</span> <span class=\"token operator\">:</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span>\n　　<span class=\"token string\">'sex'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'famale'</span><span class=\"token punctuation\">}</span>\n　　<span class=\"token punctuation\">]</span>\n　　<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>JSON Object：　以\"{“开始，以”}“结尾　每个名称后跟着一个”:\"　每对\"名称:值\"之间用\",\"分隔</p>\n<pre><code class=\"prism language-json\"><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">// 以\"{\"开始</span>\n　　<span class=\"token string\">'name'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Bruce'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 每个名称后跟着一个\":\"</span>\n　　<span class=\"token string\">'age'</span> <span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 每对\"名称:值\"之间用\",\"分隔</span>\n　　<span class=\"token string\">'sex'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'male'</span>\n　　<span class=\"token punctuation\">}</span> <span class=\"token comment\">// 以\"}\"结尾</span>\n</code></pre>\n<hr/>\n<p>JSON Array：　以\"[“开始，以”]“结尾　　值之间使用”,\"</p>\n<pre><code class=\"prism language-json\"><span class=\"token punctuation\">{<!-- --></span>\n　　<span class=\"token comment\">// familys为一维数组，数组里包含两笔对象数据</span>\n　　<span class=\"token string\">'familys'</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token comment\">// 以\"[\"开始</span>\n　　\n　　<span class=\"token punctuation\">{<!-- --></span><span class=\"token string-property property\">'name'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Bruce'</span><span class=\"token punctuation\">,</span>\n　\n　　<span class=\"token string\">'age'</span> <span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n　\n　　<span class=\"token string\">'sex'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'male'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 值之间使用\",\"</span>\n　　\n　　<span class=\"token punctuation\">{<!-- --></span><span class=\"token string-property property\">'name'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Sherry'</span><span class=\"token punctuation\">,</span>\n　\n　　<span class=\"token string\">'age'</span> <span class=\"token operator\">:</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span>\n　　\n　　<span class=\"token string\">'sex'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'famale'</span><span class=\"token punctuation\">}</span>\n　\n　　<span class=\"token punctuation\">]</span> <span class=\"token comment\">// 以\"]\"结尾</span>\n　　\n　　<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>JSON Value：</p>\n<p>值本身可以是String、Number、true、false、null、Object、Array;</p>\n<p>JSON String：</p>\n<p>由双引号包围的任意Unicode字符集合。可以使用\"反斜线()\"来转义。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4a7474d9f8c94310ac0056880f9ef0aa.png\"/></p>\n<hr/>\n<h1><a id=\"JSON_135\"></a>二、JSON的使用</h1>\n<p>那JSON要如何使用呢?</p>\n<p>原生的JSON格式数据，目前在IE7以上及MF 3以上，已经内建解析JSON格式的能力，但在兼容性及网络上的不确定性(其他浏览器)，建议在有需要使用JSON格式的页面引用json2.js，依官方说法，请不要在使用json.js这个版本的Script了。</p>\n<p>有以下代码：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">var</span> jsonData <span class=\"token operator\">=</span> \"<span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'familys'</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string-property property\">'name'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Bruce'</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">'age'</span> <span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">'sex'</span> <span class=\"token operator\">:</span> \n<span class=\"token string\">'male'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n　　\n　　<span class=\"token punctuation\">{<!-- --></span><span class=\"token string-property property\">'name'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Sherry'</span><span class=\"token punctuation\">,</span><span class=\"token string-property property\">'age'</span> <span class=\"token operator\">:</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">'sex'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'famale'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\"\n</code></pre>\n<p>方法一：使用eval()</p>\n<p>这个方法会引发安全性问题，我就不介绍了。</p>\n<p>方法二：使用json2.js (IE7以上及MF 3以上可以不引用)</p>\n<p>先在网页中引用json2.js，然后使用json2所提供的parse方法：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">var</span> jsonData <span class=\"token operator\">=</span> \"<span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'familys'</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string-property property\">'name'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Bruce'</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">'age'</span> <span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">'sex'</span> <span class=\"token operator\">:</span> \n<span class=\"token string\">'male'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n　　\n　　<span class=\"token punctuation\">{<!-- --></span><span class=\"token string-property property\">'name'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Sherry'</span><span class=\"token punctuation\">,</span><span class=\"token string-property property\">'age'</span> <span class=\"token operator\">:</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">'sex'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'famale'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\"\n　\n　　<span class=\"token keyword\">var</span> jsonObj <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>jsonData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将JSON格式数据转为对象</span>\n　　\n　　<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>jsonObj<span class=\"token punctuation\">.</span>familys<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Bruce</span>\n　　\n　　<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>jsonObj<span class=\"token punctuation\">.</span>familys<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 16</span>\n</code></pre>\n<p>这样之后，我们就能在Ajax函数将服务器传回的JSON格式做解析：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// ...</span>\n　　<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xmlHttp<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">==</span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> xmlHttp<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n　　<span class=\"token keyword\">var</span> jsonObj <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xmlHttp<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　<span class=\"token comment\">// ...</span>\n　　<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>使用了JSON来交换数据后，你会发现相关Ajax的源程序变简单了，例如：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 原始Ajax函数</span>\n　　<span class=\"token keyword\">function</span> <span class=\"token function\">Do</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">xmlHttp</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n　　<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xmlHttp<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">==</span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> xmlHttp<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n　　<span class=\"token keyword\">var</span> familys <span class=\"token operator\">=</span> xmlHttp<span class=\"token punctuation\">.</span>responseXML<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'familys'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> familys<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n　　<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> \nfamilys<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>nodeValue<span class=\"token punctuation\">;</span>\n　　<span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> familys<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>nodeValue<span class=\"token punctuation\">;</span>\n　　<span class=\"token keyword\">var</span> sex <span class=\"token operator\">=</span> familys<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sex'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>nodeValue<span class=\"token punctuation\">;</span>\n　　<span class=\"token punctuation\">}</span>\n　　<span class=\"token punctuation\">}</span>\n　　<span class=\"token punctuation\">}</span>\n　　<span class=\"token comment\">// 使用JSON后的Ajax函数</span>\n　　<span class=\"token keyword\">function</span> <span class=\"token function\">Do</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">xmlHttp</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n　　<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xmlHttp<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">==</span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> xmlHttp<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n　　<span class=\"token keyword\">var</span> jsonObj <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xmlHttp<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> jsonObj<span class=\"token punctuation\">.</span>familys<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n　　<span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> jsonObj<span class=\"token punctuation\">.</span>familys<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span>\n　　<span class=\"token keyword\">var</span> sex <span class=\"token operator\">=</span> jsonObj<span class=\"token punctuation\">.</span>familys<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sex<span class=\"token punctuation\">;</span>\n　　<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>不只有变简单，而且程序的撰写更直觉。另外，你也可以把Object转为JSON：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 声明一个familys Array，里面包含两个Object</span>\n　　<span class=\"token keyword\">var</span> familys <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n　　<span class=\"token punctuation\">{<!-- --></span><span class=\"token string-property property\">'name'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Bruce'</span><span class=\"token punctuation\">,</span>\n　　<span class=\"token string\">'age'</span> <span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n　　<span class=\"token string\">'sex'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'male'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n　　<span class=\"token punctuation\">{<!-- --></span><span class=\"token string-property property\">'name'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Sherry'</span><span class=\"token punctuation\">,</span>\n　　<span class=\"token string\">'age'</span> <span class=\"token operator\">:</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span>\n　　<span class=\"token string\">'sex'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'famale'</span><span class=\"token punctuation\">}</span>\n　　<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n　　<span class=\"token keyword\">var</span> jsonData <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>familys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<hr/>\n<h1><a id=\"JSON_219\"></a>三、深入了解JSON</h1>\n<h2><a id=\"31_JSONJS_220\"></a>3.1 JSON和JS对象</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\19249503652c40b689d62aa583b3ac76.png\"/></p>\n<p>很多时候都听到“JSON是JS的一个子集”这句话，而且这句话我曾经也一直这么认为，每个符合JSON格式的字符串你解析成js都是可以的，直到后来发现了一个奇奇怪怪的东西。</p>\n<p><strong>1.两个本质不同的东西为什么那么密切</strong></p>\n<p><code>JSON和JS对象本质上完全不是同一个东西</code>，就像“斑马线”和“斑马”，“斑马线”基于“斑马”身上的条纹来呈现和命名，但是斑马是活的，斑马线是非生物。</p>\n<p>同样，<code>”JSON”全名”JavaScript Object Notation”</code>，所以它的格式（语法）是基于JS的，但它就是一种格式，而JS对象是一个实例，是存在于内存的一个东西。</p>\n<p>说句玩笑话，如果JSON是基于PHP的，可能就叫PON了，形式可能就是这样的了[‘propertyOne’ =&gt; ‘foo’, ‘propertyTwo’ =&gt; 42,]，如果这样，<code>那么JSON可能现在是和PHP比较密切了</code>。</p>\n<p><code>此外，JSON是可以传输的，因为它是文本格式，但是JS对象是没办法传输的，在语法上，JSON也会更加严格，但是JS对象就很松了</code></p>\n<p><strong>那么两个不同的东西为什么那么密切，因为JSON毕竟是从JS中演变出来的，语法相近。</strong></p>\n<hr/>\n<p><strong>2 JSON格式别JS对象语法表现上严格在哪</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0b80d4a7edbc44ac9291365537b8e6ad.png\"/><br/> 可以看到，相对于JS对象，JSON的格式更严格，所以大部分写的JS对象是不符合JSON的格式的。</p>\n<p>另外，除了常见的“正常的”JSON格式，要么表现为一个对象形式{…}，要么表现为一个数组形式[…]，任何单独的一个10进制数值、双引号字符串、布尔值和null都是有效符合JSON格式的</p>\n<hr/>\n<p><strong>3.一个有意思的地方，JSON不是JS的子集</strong></p>\n<p>将以下代码copy到控制台执行</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">var</span> code <span class=\"token operator\">=</span> <span class=\"token string\">'\"\\u2028\\u2029\"'</span><span class=\"token punctuation\">;</span>  \n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// works fine  </span>\n<span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// fails </span>\n</code></pre>\n<p>这两个字符\\u2028和\\u2029分别表示行分隔符和段落分隔符，JSON.parse可以正常解析，但是当做js解析时会报错。</p>\n<hr/>\n<h2><a id=\"32_JSJSON_261\"></a>3.2 JS中的JSON函数</h2>\n<p>在JS中我们主要会接触到两个和JSON相关的函数，分别用于JSON字符串和JS数据结构之间的转化，一个叫<code>JSON.stringify</code>，它很聪明，聪明到你写的不符合JSON格式的JS对象都能帮你处理成符合JSON格式的字符串，所以你得知道它到底干了什么，免得它只是自作聪明，然后让你Debug long time；</p>\n<p>另一个叫<code>JSON.parse</code>，用于转化json字符串到JS数据结构，它很严格，你的JSON字符串如果构造地不对，是没办法解析的。</p>\n<p>而它们的参数不止一个，虽然我们经常用的时候只传入一个参数。此外，还有一个<code>toJSON</code>函数，我们较少看到，但是它会影响<code>JSON.stringify</code>。</p>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/673ebf2afec44e32a44e2ca646c69df8.gif#pic_center\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "PHP", "cpp": 1, "csharp": 1, "python": 1, "javascript": 1, "java": 0, "sql": 0, "php": 1, "time": "2022-08-16 07:15:00", "summary": "文章目录前言一、初识概念内建对象二、的使用三、深入了解和对象中的函数前言本文将解了的一些基础知识，与深入了解，本文是作者的一些理解与在网络上搜集的一些知识，并不全面，如有错误请在评论区指出。觉得本文对"}