{"blogid": "124615042", "writerAge": "码龄1年", "writerBlogNum": "48", "writerCollect": "3127", "writerComment": "1674", "writerFan": "14769", "writerGrade": "6级", "writerIntegral": "5816", "writerName": "乔 巴", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124615042.jpg", "writerRankTotal": "2663", "writerRankWeekly": "1846", "writerThumb": "2254", "writerVisitNum": "213829", "blog_read_count": "12927", "blog_time": "已于 2022-05-07 01:26:04 修改", "blog_title": "当你敲完Hello World后的第一步——C", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>“江山如画，一时多少豪杰——时二二年五月六日”</p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>这里是目录</h3>\n<ul><li><a href=\"#_4\">前言</a></li><li><a href=\"#define_26\">一、#define指令</a></li><li><ul><li><a href=\"#1define_27\">1.#define定义宏</a></li><li><a href=\"#2define___67\">2.#define 替换 宏</a></li><li><a href=\"#3_75\">3.带副作用的宏参数</a></li><li><a href=\"#4undef_106\">4.#undef撤销宏定义</a></li><li><a href=\"#5_111\">5.宏和函数对比(重点)</a></li></ul>\n</li><li><a href=\"#_124\">二、条件编译指令</a></li><li><ul><li><a href=\"#1_128\">1.单分支</a></li><li><a href=\"#2_138\">2.多分支条件编译</a></li><li><a href=\"#3_150\">3.判断某个符号是否被定义</a></li><li><a href=\"#4_160\">4.嵌套指令</a></li></ul>\n</li><li><a href=\"#include_177\">三、#include指令</a></li><li><ul><li><a href=\"#1_182\">1.本地文件包含</a></li><li><a href=\"#2_191\">2.库文件包含</a></li><li><a href=\"#3_201\">3.嵌套文件包含</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_4\"></a>前言</h1>\n<p>了解敲完hello world后，编译器是怎么处理代码的第一步的呢，这是学习C和C++的基础。<br/> <strong>Hello World</strong>代码如下。放错了，重来。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ac1793d571884b658e43490b1be6ee4a.png\"/><br/> 代码如下<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\39c1d86dd15b407c87fd63a9bd76782e.png\"/><br/> 当你敲完Hello World这串代码时。编译器会对这些代码进行<strong>编译</strong> 和 <strong>链接</strong>的操作。</p>\n<p>而 <strong>编译</strong>: 又分为 <strong>预处理</strong>、<strong>编译</strong>、<strong>汇编</strong>。<br/> 所以说 当你敲完C代码后的第一步，编译器会对C代码进行<strong>预处理</strong>.</p>\n<p>那么<strong>预处理</strong>主要做了那些事情呢？</p>\n<p><strong>预处理大致做了以下事情</strong>：<br/> 1.定义和替换由 <strong>#define指令</strong>定义的符号<br/> 2.删除注释<br/> 3.确定代码部分内容是否应该根据一些 <strong>条件编译指令</strong> 进行编译<br/> 4.插入被 <strong>#include指令</strong>包含的内容</p>\n<p>所以本章详解<strong>预处理指令 #define、#include、条件编译指令</strong>。</p>\n<h1><a id=\"define_26\"></a>一、#define指令</h1>\n<h2><a id=\"1define_27\"></a>1.#define定义宏</h2>\n<p>什么是宏？<br/> <strong>宏的定义</strong>：#define 允许把参数替换到文本中，这种实现通常称为<strong>宏</strong>或<strong>定义宏</strong></p>\n<p><strong>宏的声明格式</strong>：</p>\n<blockquote>\n<p>#define NAME stuff</p>\n</blockquote>\n<p><strong>解释</strong>：没当有符号name出现在#define NAME stuff这条语句后面时，预处理器就会把它替换为 stuff。<br/> <strong>NAME</strong>:<br/> 1.NAME是<strong>宏的名字</strong>。在这里 name 相当于<strong>变量</strong>，或者也可以相当于<strong>函数</strong>。<strong>但不等于函数</strong>！<br/> 2.一般NAME都是大写，因为宏和函数语法很相似，语言本身我们无法区分，所以<strong>宏名要全部大写</strong><br/> <strong>stuff</strong>：可以是<strong>常量</strong>。可以是<strong>表达式</strong>。也可以是<strong>一段程序</strong>。</p>\n<p>例如：<br/> 以下代码在<strong>预处理后</strong>是什么样子呢？</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//定义声明宏</span>\n<span class=\"token comment\">//定义中我们使用了括号，这是一个好习惯，避免优先级的错误</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SQUARE(x)  (x)*(x)</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">SQUARE</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>预处理后的代码，以下你看到的代码是编译器实实在在的处后的代码。</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SQUARE(x)  (x)*(x)</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//将SQUARE(5)替换为(5)*(5)</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>你是否还对#define 替换迷惑？请继续往下看</p>\n<h2><a id=\"2define___67\"></a>2.#define 替换 宏</h2>\n<p>到底上面的代码是怎么替换的 宏？<br/> 1.再调用宏时，首先对参数检查，看是否包含了#define定义的符号，比如<strong>SQUARE(5)</strong>，然后将它的x * x替换为5 * 5.<br/> 2.对于宏，参数名被他们的值所替代。<br/> 3.最后，再次对文本扫描，看是否包含了热任何由#define定义的符号。如果是，就重复上述处理过程。</p>\n<p>为什么会有第3步的重复呢？<br/> 因为有时候#define定义可以包含其他#define定义的符号。但是<strong>宏不可以递归</strong>！</p>\n<h2><a id=\"3_75\"></a>3.带副作用的宏参数</h2>\n<p>什么是带副作用的宏参数？<br/> <strong>副作用</strong>：就是表达式求值的时候出现的<strong>永久性效果</strong>。</p>\n<p>例如：</p>\n<pre><code class=\"prism language-c\">x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//不带副作用</span>\nx<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//带有副作用</span>\n</code></pre>\n<p>下面代码输出结果是什么？</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ADD(a, b) (a)+(b)</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> \n\n\t<span class=\"token keyword\">int</span> z <span class=\"token operator\">=</span> <span class=\"token function\">ADD</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//输出的结果是什么？</span>\n\t<span class=\"token comment\">//x=3 y=4 z=5</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x=%d y=%d z=%d\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>因为被替换的代码是<strong>int z = ADD(x++, y++);</strong><br/> 替换后为：<code>int z = (x++)+(y++);</code></p>\n<p>这样结果就一目了然。</p>\n<h2><a id=\"4undef_106\"></a>4.#undef撤销宏定义</h2>\n<p><strong>#undef</strong>：这条指令用于移除一个<strong>宏定义</strong><br/> 例如：移除MAX这个宏。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7f056d45c63b43939a4b49862fcf648a.png\"/></p>\n<h2><a id=\"5_111\"></a>5.宏和函数对比(重点)</h2>\n<table><thead><tr><th>属性</th><th>#define定义宏</th><th>函数</th></tr></thead><tbody><tr><td>代码长度</td><td>每次使用时，宏代码都会被插入到程序中。除了非常小的宏之外，程序的长度会大幅度增长</td><td>函数代码只出现于一个地方。每次使用函数时，都调用同一个地方的代码</td></tr><tr><td>执行速度</td><td>更快</td><td>存在函数的调用和返回 的格外开销，所以相对慢一些</td></tr><tr><td>操作符优先级</td><td>宏参数求值需要加上括号，否则容易造成不可以预料的后果</td><td>只在函数调用事求值一次，不会带副作用</td></tr><tr><td>带有副作用的参数</td><td>参数可能被替换到宏的多个位置，有的可能带有副作用</td><td>函数参数只在传参的时候求值一次，结果更容易控制</td></tr><tr><td>参数类型</td><td>宏的参数与类型无关，可以是任何类型的的参数</td><td>函数参数与类型有关，参数类型不同就需要不同的函数，因为C语言没有C++的重载</td></tr><tr><td>调试</td><td>宏是不可以调试的，因为在程序运行前就已经替换的宏</td><td>可以逐语句调试</td></tr></tbody></table>\n<h1><a id=\"_124\"></a>二、条件编译指令</h1>\n<p>什么是条件编译？<br/> 意思就是我们可以选择性的编译。<br/> 条件编译：你可以选择代码的一部分是被正常编译还是完全忽略。用于支持条件编译的基本结构是#if指令和与其匹配的#endif指令。</p>\n<h2><a id=\"1_128\"></a>1.单分支</h2>\n<p>常量表达式expression，由预处理器求值。<br/> 如果expression为真，那么statements将被执行，否则预处理器就安静的删除它们。</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> expression</span>\n statements<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token comment\">//常量表达式expression，由预处理器求值。</span>\n</code></pre>\n<h2><a id=\"2_138\"></a>2.多分支条件编译</h2>\n<p>同if else语句，为真则执行。</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> expression</span>\n <span class=\"token comment\">//...</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">elif</span> expression</span>\n <span class=\"token comment\">//...</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n <span class=\"token comment\">//...</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n</code></pre>\n<h2><a id=\"3_150\"></a>3.判断某个符号是否被定义</h2>\n<p>为了测试一个符号是否已经被定义。在条件编译中完成这个任务更方便。</p>\n<p>以下两条语句功能想通过。</p>\n<pre><code class=\"prism language-c\"><span class=\"token number\">1.</span>#<span class=\"token keyword\">if</span> <span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>symbol<span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">2.</span>#ifdef symbol\n</code></pre>\n<h2><a id=\"4_160\"></a>4.嵌套指令</h2>\n<p>某个程序既要在windows系统下能够运行，也需要在Linux系统下运行，这就要条件编译来解决跨平台问题。这时候嵌套指令很容易解决。</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined(OS_UNIX)</span>\n\t <span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> OPTION1</span>\n\t\t\t <span class=\"token function\">unix_version_option1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t <span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> OPTION2</span>\n \t\t\t<span class=\"token function\">unix_version_option2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">elif</span> defined(OS_MSDOS)</span>\n\t <span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> OPTION2</span>\n \t\t\t<span class=\"token function\">msdos_version_option2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n</code></pre>\n<h1><a id=\"include_177\"></a>三、#include指令</h1>\n<p>#include在预处理时会被展开。<br/> 这种展开的方式很简单：<br/> 1.预处理器先删除这条指令，并用**#include**所包含文件的内容替换。<br/> 2.这样一个源文件被包含10次，那就实际被编译10次。</p>\n<h2><a id=\"1_182\"></a>1.本地文件包含</h2>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Add.h\"</span></span>\n</code></pre>\n<p><strong>查找方法</strong>：<br/> 1.先在<strong>源文件所在目录</strong>下查找<br/> 2.如果该头文件未找到，编译器就像<strong>查找库函数头文件</strong>一样在标准位置查找头文件。</p>\n<h2><a id=\"2_191\"></a>2.库文件包含</h2>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n</code></pre>\n<p><strong>查找方法</strong>：查找头文件直接去标准路径下去查找，如果找不到就提示编译错误。</p>\n<p>这样是不是可以说，对于库文件也可以使用 “” 的形式包含？<br/> 答案是肯定的，可以。<br/> 但是这样做查找的效率就低些，当然这样也不容易区分是库文件还是本地文件了。</p>\n<h2><a id=\"3_201\"></a>3.嵌套文件包含</h2>\n<p>有时候会重复包含头文件，以前为了解决这个方法，人们用了条件编译。代码如下<br/> 每个头文件的开头写：</p>\n<p>例如有个<strong>test.h</strong>的头文件。用下划线分开头文件。全大写。</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> __TEST_H__</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> __TEST_H__</span>\n<span class=\"token comment\">//这里面写头文件的内容</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span>  </span>\n</code></pre>\n<p>上面这种写法比较古老。<br/> 现在一般用这个写法</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n</code></pre>\n<p>#pragma once也是是用来防止头文件被包含的。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-05-07 01:26:04", "summary": "江山如画，一时多少豪杰时二二年五月六日这里是目录前言一、指令定义宏替换宏带副作用的宏参数撤销宏定义宏和函数对比重点二、条件编译指令单分支多分支条件编译判断某个符号是否被定义嵌套指令三、指令本地文件包含"}