{"blogid": "125953667", "writerAge": "码龄6年", "writerBlogNum": "342", "writerCollect": "11978", "writerComment": "3083", "writerFan": "135756", "writerGrade": "7级", "writerIntegral": "19678", "writerName": "小目标青年", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125953667.jpg", "writerRankTotal": "366", "writerRankWeekly": "164", "writerThumb": "3981", "writerVisitNum": "2056610", "blog_read_count": "4332", "blog_time": "已于 2022-07-24 00:12:50 修改", "blog_title": "Springboot 导入导出Excel ，一对多关系，复合表格、合并单元格数据", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>前言</h1>\n<p></p>\n<blockquote>\n<p><strong>学习是自己的事。</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>但是跟着我学习，也未尝不可。</strong></p>\n</blockquote>\n<p>这种一对多的导出需求，好像确实也是比较常见的： </p>\n<p><img alt=\"\" height=\"1051\" src=\"..\\..\\static\\image\\b2a5fbb24d2141be8ee13644c118f88f.jpeg\" width=\"1080\"/></p>\n<p></p>\n<blockquote>\n<p><span style=\"color:#fe2c24;\">表面拒绝，反手上演一手实战示例。</span></p>\n</blockquote>\n<p></p>\n<h2><strong>内容：</strong></h2>\n<h3><br/><br/> ① 一对多关系数据 （合并单元格）数据的 导出</h3>\n<h3><strong>②一对多关系数据 （合并单元格）数据的 导入</strong></h3>\n<p></p>\n<p><span style=\"color:#fe2c24;\"><strong>导入导出一块给整了，直接杀死比赛。</strong></span></p>\n<p></p>\n<p><strong>（看官们，收藏起来，以后备用。顺手给我点个赞。）</strong></p>\n<p></p>\n<p></p>\n<p>之前写过一篇极其简单的excel导入导出，是单个文件的：</p>\n<p><br/><a href=\"https://blog.csdn.net/qq_35387940/article/details/88967572\" title=\"Springboot 最简单的结合MYSQL数据实现EXCEL表格导出及数据导入_小目标青年的博客-CSDN博客\">Springboot 最简单的结合MYSQL数据实现EXCEL表格导出及数据导入_小目标青年的博客-CSDN博客</a></p>\n<p>还写过一篇单个，多个 excel文件导出，转成ZIP包的：</p>\n<p><a href=\"https://blog.csdn.net/qq_35387940/article/details/125790362\" title=\"SpringBoot 导出多个Excel文件，压缩成.zip格式下载_小目标青年的博客-CSDN博客\">SpringBoot 导出多个Excel文件，压缩成.zip格式下载_小目标青年的博客-CSDN博客</a><br/>  </p>\n<p>还有指定模板导出的：<br/><a href=\"https://blog.csdn.net/qq_35387940/article/details/125804467\" title=\"Springboot 指定自定义模板导出Excel文件_小目标青年的博客-CSDN博客_自定义导出excel\">Springboot 指定自定义模板导出Excel文件_小目标青年的博客-CSDN博客_自定义导出excel</a></p>\n<p></p>\n<hr/>\n<h1></h1>\n<h1></h1>\n<h1>正文</h1>\n<p></p>\n<p></p>\n<p>模拟一个这种数据的业务场景：</p>\n<p><img alt=\"\" height=\"528\" src=\"..\\..\\static\\image\\1cff7f8ced8f41f09a20fe761a157054.png\" width=\"448\"/></p>\n<p></p>\n<p>效果，数据导出：<br/>  </p>\n<p><img alt=\"\" height=\"790\" src=\"..\\..\\static\\image\\8877037637a0463ea4ed7e66acbdd746.png\" width=\"1129\"/></p>\n<p></p>\n<p></p>\n<p>实战：<br/>  </p>\n<p></p>\n<p>先看看工程目录结构：<br/><img alt=\"\" height=\"542\" src=\"..\\..\\static\\image\\c26b321614934317adc4c009175b8700.png\" width=\"460\"/></p>\n<p></p>\n<p>pom.xml 引入核心依赖：<br/>  </p>\n<pre><code class=\"language-java\">    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;cn.afterturn&lt;/groupId&gt;\n            &lt;artifactId&gt;easypoi-spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;4.1.3&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;version&gt;1.18.10&lt;/version&gt;\n            &lt;scope&gt;provided&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;</code></pre>\n<p></p>\n<p>这篇文章核心就是使用easypoi 的 注解</p>\n<p></p>\n<blockquote>\n<p>@Excel()</p>\n</blockquote>\n<p>合并单元格、复合表格的关键注解 </p>\n<blockquote>\n<p>@ExcelCollection()</p>\n</blockquote>\n<p></p>\n<p>项目小组类</p>\n<p></p>\n<p>ProjectGroupExcelVO.java</p>\n<p></p>\n<pre><code class=\"language-java\">import cn.afterturn.easypoi.excel.annotation.Excel;\nimport cn.afterturn.easypoi.excel.annotation.ExcelCollection;\nimport lombok.Data;\nimport java.util.List;\n\n/**\n * @Author: JCccc\n * @Description:\n * @Date: 1/1/1 1:11\n */\n@Data\npublic class ProjectGroupExcelVO {\n\n    @Excel(name = \"小组名称\", needMerge = true, width = 20,height = 8)\n    private String groupName;\n\n    @Excel(name = \"小组口号\", needMerge = true, width = 20,height = 8)\n    private String groupSlogan;\n\n    @Excel(name = \"小组类型\", needMerge = true, width = 20,height = 8)\n    private String groupType;\n\n    @ExcelCollection(name = \"组员信息\")\n    private List&lt;GroupUserExcelVO&gt; groupUsers;\n    \n}</code></pre>\n<p>简析：<br/><img alt=\"\" height=\"425\" src=\"..\\..\\static\\image\\d41f8c9bb6c44fc6a91af46b0d02bcec.png\" width=\"745\"/></p>\n<p></p>\n<p>组员的类</p>\n<p></p>\n<p>GroupUserExcelVO.java</p>\n<pre><code class=\"language-java\">import cn.afterturn.easypoi.excel.annotation.Excel;\nimport lombok.Data;\n\n/**\n * @Author: JCccc\n * @Description:\n * @Date: 1/1/1 1:11\n */\n@Data\npublic class GroupUserExcelVO {\n\n    @Excel(name = \"组员名字\", width = 20,height = 8)\n    private String name;\n\n    @Excel(name = \"组员电话\", width = 20,height = 8)\n    private String phone;\n\n    @Excel(name = \"年龄\",  width = 20,height = 8)\n    private Integer age;\n\n}</code></pre>\n<p></p>\n<p>导入导出工具类一个</p>\n<p>MyExcelUtils.java</p>\n<pre><code class=\"language-java\">import cn.afterturn.easypoi.excel.ExcelExportUtil;\nimport cn.afterturn.easypoi.excel.ExcelImportUtil;\nimport cn.afterturn.easypoi.excel.entity.ExportParams;\nimport cn.afterturn.easypoi.excel.entity.ImportParams;\nimport org.apache.poi.ss.usermodel.Workbook;\nimport org.springframework.web.multipart.MultipartFile;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.net.URLEncoder;\nimport java.util.List;\nimport java.util.NoSuchElementException;\n\n/**\n * @Author: JCccc\n * @Description:\n * @Date: 1/1/1 1:11\n */\npublic class MyExcelUtils {\n\n\n    /**\n     * 功能描述：复杂导出Excel，包括文件名以及表名,不创建表头\n     *\n     * @param list 导出的实体类\n     * @param title 表头名称\n     * @param sheetName sheet表名\n     * @param pojoClass 映射的实体类\n     * @param fileName\n     * @param response\n     * @return\n     */\n    public static void exportExcel(\tList&lt;?&gt; list, String title, String sheetName, Class&lt;?&gt; pojoClass,\n                                       String fileName, HttpServletResponse response) {\n        defaultExport(list, pojoClass, fileName, response, new ExportParams(title, sheetName));\n    }\n\n    /**\n     * 功能描述：默认导出方法\n     *\n     * @param list 导出的实体集合\n     * @param fileName 导出的文件名\n     * @param pojoClass pojo实体\n     * @param exportParams ExportParams封装实体\n     * @param response\n     * @return\n     */\n    private static void defaultExport(\tList&lt;?&gt; list, Class&lt;?&gt; pojoClass, String fileName,\n                                          HttpServletResponse response, ExportParams exportParams) {\n        Workbook workbook = ExcelExportUtil.exportExcel(exportParams, pojoClass, list);\n        if (workbook != null) {\n            downLoadExcel(fileName, response, workbook);\n        }\n    }\n\n    /**\n     * 功能描述：Excel导出\n     *\n     * @param fileName 文件名称\n     * @param response\n     * @param workbook Excel对象\n     * @return\n     */\n    private static void downLoadExcel(\tString fileName, HttpServletResponse response,\n                                          Workbook workbook) {\n        try {\n            response.setCharacterEncoding(\"UTF-8\");\n            response.setHeader(\"content-Type\", \"multipart/form-data\");\n            response.setHeader(\"Content-Disposition\",\n                    \"attachment;filename=\" + URLEncoder.encode(fileName, \"UTF-8\"));\n            workbook.write(response.getOutputStream());\n\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n\n    /**\n     * 功能描述：根据接收的Excel文件来导入Excel,并封装成实体类\n     *\n     * @param file 上传的文件\n     * @param titleRows 表标题的行数\n     * @param headerRows 表头行数\n     * @param pojoClass Excel实体类\n     * @return\n     */\n    public static &lt;T&gt; List&lt;T&gt; importExcel(\tMultipartFile file, Integer titleRows, Integer headerRows,\n                                              Class&lt;T&gt; pojoClass) {\n        if (file == null) {\n            return null;\n        }\n        ImportParams params = new ImportParams();\n        params.setTitleRows(titleRows);\n        params.setHeadRows(headerRows);\n        List&lt;T&gt; list = null;\n        try {\n            list = ExcelImportUtil.importExcel(file.getInputStream(), pojoClass, params);\n        } catch (NoSuchElementException e) {\n            throw new RuntimeException(\"excel文件不能为空\");\n        } catch (Exception e) {\n            throw new RuntimeException(e.getMessage());\n\n        }\n        return list;\n    }\n}</code></pre>\n<p></p>\n<p>导出接口：</p>\n<p></p>\n<p>TestController.java</p>\n<p></p>\n<pre><code class=\"language-java\">import com.jc.excel.excelVO.GroupUserExcelVO;\nimport com.jc.excel.excelVO.ProjectGroupExcelVO;\nimport com.jc.excel.util.MyExcelUtils;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.servlet.http.HttpServletResponse;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @Author: JCccc\n * @Description:\n * @Date: 1/1/1 1:11\n */\n@RestController\npublic class TestController {\n\n\n    /**\n     * excel导出 \n     *\n     * @return\n     */\n    @GetMapping(value = \"/exportTest\")\n    public void export(HttpServletResponse response) {\n\n\n        List&lt;ProjectGroupExcelVO&gt; projectGroupList=new ArrayList&lt;&gt;();\n\n        //小组A数据模拟\n        ProjectGroupExcelVO groupA=new ProjectGroupExcelVO();\n        groupA.setGroupName(\"小组A\");\n        groupA.setGroupSlogan(\"天天向上,爱学习！\");\n        groupA.setGroupType(\"奋斗类型\");\n        List&lt;GroupUserExcelVO&gt; groupUserAList=new ArrayList&lt;&gt;();\n        GroupUserExcelVO groupUser1=new GroupUserExcelVO();\n        groupUser1.setName(\"小收\");\n        groupUser1.setPhone(\"123456\");\n        groupUser1.setAge(18);\n\n        GroupUserExcelVO groupUser2=new GroupUserExcelVO();\n        groupUser2.setName(\"小藏\");\n        groupUser2.setPhone(\"654321\");\n        groupUser2.setAge(20);\n        groupUserAList.add(groupUser1);\n        groupUserAList.add(groupUser2);\n        groupA.setGroupUsers(groupUserAList);\n\n\n        //小组B数据模拟\n        ProjectGroupExcelVO groupB=new ProjectGroupExcelVO();\n        groupB.setGroupName(\"小组B\");\n        groupB.setGroupSlogan(\"跟着JC学java，稳！\");\n        groupB.setGroupType(\"努力类型\");\n        List&lt;GroupUserExcelVO&gt; groupBUserBList=new ArrayList&lt;&gt;();\n        GroupUserExcelVO groupUserB1=new GroupUserExcelVO();\n        groupUserB1.setName(\"小点\");\n        groupUserB1.setPhone(\"123456\");\n        groupUserB1.setAge(12);\n\n        GroupUserExcelVO groupUserB2=new GroupUserExcelVO();\n        groupUserB2.setName(\"小赞\");\n        groupUserB2.setPhone(\"654321\");\n        groupUserB2.setAge(15);\n\n        GroupUserExcelVO groupUserB3=new GroupUserExcelVO();\n        groupUserB3.setName(\"JCccc\");\n        groupUserB3.setPhone(\"136919xxxxx\");\n        groupUserB3.setAge(10000);\n\n        groupBUserBList.add(groupUserB1);\n        groupBUserBList.add(groupUserB2);\n        groupBUserBList.add(groupUserB3);\n        groupB.setGroupUsers(groupBUserBList);\n        \n        projectGroupList.add(groupA);\n        projectGroupList.add(groupB);\n        \n        \n        String time = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"yyyy_MM_dd_HH_mm_ss\"));\n       \n        MyExcelUtils.exportExcel(projectGroupList,\n                \"小组信息\",\n                \"小组信息\",\n                ProjectGroupExcelVO.class,\n                \"小组信息文件\"+time+\".xls\",response);\n\n\n\n    }\n\n}\n</code></pre>\n<p></p>\n<p>调用一下看看导出的效果：<br/>  </p>\n<p><img alt=\"\" height=\"235\" src=\"..\\..\\static\\image\\8bd127fdda2a4ad48733865b2cf7e58c.png\" width=\"692\"/></p>\n<p> 非常OK：</p>\n<p><img alt=\"\" height=\"516\" src=\"..\\..\\static\\image\\4bb8ce9bb7434a20b5d6ebbd0d1d8ff9.png\" width=\"1016\"/></p>\n<p></p>\n<p></p>\n<p>接下来是导入，写个简单接口玩一下：<br/><br/> 数据：</p>\n<p><img alt=\"\" height=\"378\" src=\"..\\..\\static\\image\\8b9e178b79d847e6acfdaf2172be4487.png\" width=\"890\"/></p>\n<p>导入 接口代码：<br/>  </p>\n<pre><code class=\"language-java\">    /**\n     * excel导入\n     *\n     * @return\n     */\n    @PostMapping(value = \"/importTest\")\n    public void importTest( @RequestParam(\"file\") MultipartFile file) {\n        List&lt;ProjectGroupExcelVO&gt; projectGroupExcelVOList = MyExcelUtils.importExcel(file, 1, 2, ProjectGroupExcelVO.class);\n\n        System.out.println(projectGroupExcelVOList.toString());\n\n        System.out.println(\"-----------------------------------\");\n\n        System.out.println(\"写入数据库\");\n    }\n</code></pre>\n<p>调用看看效果：</p>\n<p><img alt=\"\" height=\"351\" src=\"..\\..\\static\\image\\bcfb86245bf747f1ab84a58e03367dc5.png\" width=\"724\"/></p>\n<p></p>\n<p><img alt=\"\" height=\"625\" src=\"..\\..\\static\\image\\f0c8dcf791764b9aa3116807706e99fd.png\" width=\"1068\"/></p>\n<p> 导入成功，就是如此简单。</p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n</div>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-07-24 00:12:50", "summary": "前言学习是自己的事。但是跟着我学习，也未尝不可。这种一对多的导出需求，好像确实也是比较常见的：表面拒绝，反手上演一手实战示例。内容：一对多关系数据合并单元格数据的导出一对多关系数据合并单元格数据的导入"}