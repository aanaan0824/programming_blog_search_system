{"blogid": "123279251", "writerAge": "码龄2年", "writerBlogNum": "41", "writerCollect": "69", "writerComment": "5", "writerFan": "14", "writerGrade": "3级", "writerIntegral": "440", "writerName": "码啊码", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123279251.jpg", "writerRankTotal": "89523", "writerRankWeekly": "490062", "writerThumb": "30", "writerVisitNum": "43803", "blog_read_count": "3499", "blog_time": "已于 2022-04-08 11:09:37 修改", "blog_title": "PHP CTF常见考题的绕过技巧", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"1.%3D%3D%3D%E7%BB%95%E8%BF%87-toc\" style=\"margin-left:80px;\"><a href=\"#1.%3D%3D%3D%E7%BB%95%E8%BF%87\">1.==绕过</a></p>\n<p id=\"2.%3D%3D%E7%BB%95%E8%BF%87-toc\" style=\"margin-left:80px;\"><a href=\"#2.%3D%3D%E7%BB%95%E8%BF%87\">2.===绕过</a></p>\n<p id=\"3.intval()%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:80px;\"><a href=\"#3.intval%28%29%E5%87%BD%E6%95%B0\">3.intval()函数</a></p>\n<p id=\"4.strpos()%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:80px;\"><a href=\"#4.strpos%28%29%E5%87%BD%E6%95%B0\">4.strpos()函数</a></p>\n<p id=\"%C2%A05.in_array()%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A05.in_array%28%29%E5%87%BD%E6%95%B0\"> 5.in_array()函数</a></p>\n<p id=\"%C2%A06.preg_match()%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A06.preg_match%28%29%E5%87%BD%E6%95%B0\"> 6.preg_match()函数</a></p>\n<p id=\"%C2%A07.str_replace%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A07.str_replace%E5%87%BD%E6%95%B0\"> 7.str_replace函数</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h3 id=\"1.%3D%3D%3D%E7%BB%95%E8%BF%87\">1.==绕过</h3>\n<p>PHP比较运算符 ==在进行比较的时候是弱类型比较，只需要比较两个值相等就行，不会比较类型</p>\n<p>绕过方法如：1=1.0,1=+1、</p>\n<blockquote>\n<p style=\"margin-left:0;text-align:justify;\">$a=1;</p>\n<p style=\"margin-left:0;text-align:justify;\">if($a==$_GET['x']){<!-- --></p>\n<p style=\"margin-left:0;text-align:justify;\">    echo $flag;</p>\n<p style=\"margin-left:0;text-align:justify;\">}</p>\n<p style=\"margin-left:0;text-align:justify;\">//使用1.0就可以绕过 </p>\n</blockquote>\n<blockquote>\n<p>if($_GET['name'] != $_GET['password']){<!-- --></p>\n<p style=\"margin-left:0;text-align:justify;\">    if(MD5($_GET['name']) == MD5($_GET['password'])){<!-- --></p>\n<p style=\"margin-left:0;text-align:justify;\">        echo $flag;</p>\n<p style=\"margin-left:0;text-align:justify;\">    }</p>\n<p style=\"margin-left:0;text-align:justify;\">    echo '?';</p>\n<p style=\"margin-left:0;text-align:justify;\">}</p>\n<p style=\"margin-left:0;text-align:justify;\">//MD5('QNKCDZO')==MD5('240610708')</p>\n<p style=\"margin-left:0;text-align:justify;\">//echo MD5('QNKCDZO');</p>\n<p style=\"margin-left:0;text-align:justify;\">//echo MD5('240610708');</p>\n<div>\n<hr/>\n<div>\n<div id=\"_com_1\">\n<a name=\"_msocom_1\"></a>\n<p style=\"margin-left:0;text-align:justify;\"><span style=\"color:#7e7e7e;\">PHP</span><span style=\"color:#7e7e7e;\">在处理哈希字符串时，会利用</span><span style=\"color:#7e7e7e;\">”!=”</span><span style=\"color:#7e7e7e;\">或</span><span style=\"color:#7e7e7e;\">”==”</span><span style=\"color:#7e7e7e;\">来对哈希值进行比较，它把每一个以</span><span style=\"color:#7e7e7e;\">”0E”</span><span style=\"color:#7e7e7e;\">开头的哈希值都解释为</span><span style=\"color:#7e7e7e;\">0</span><span style=\"color:#7e7e7e;\">，所以如果两个不同的密码经过哈希以后，其哈希值都是以</span><span style=\"color:#7e7e7e;\">”0E”</span><span style=\"color:#7e7e7e;\">开头的，那么</span><span style=\"color:#7e7e7e;\">PHP</span><span style=\"color:#7e7e7e;\">将会认为他们相同，都是</span><span style=\"color:#7e7e7e;\">0</span><span style=\"color:#7e7e7e;\">。</span></p>\n</div>\n</div>\n</div>\n</blockquote>\n<h3 id=\"2.%3D%3D%E7%BB%95%E8%BF%87\">2.===绕过</h3>\n<p>PHP比较运算符 ===在进行比较的时候，会先判断两种字符串的类型是否相等，再比较值是否相等。只要两边字符串类型不同会返回false</p>\n<p>绕过方法：使用数组绕过</p>\n<blockquote>\n<p>if($_GET['name'] != $_GET['password']){<!-- --></p>\n<p style=\"margin-left:0;text-align:justify;\">    if(MD5($_GET['name']) == MD5($_GET['password'])){<!-- --></p>\n<p style=\"margin-left:0;text-align:justify;\">        echo $flag;</p>\n<p style=\"margin-left:0;text-align:justify;\">    }</p>\n<p style=\"margin-left:0;text-align:justify;\">    echo '?';</p>\n<p style=\"margin-left:0;text-align:justify;\">}</p>\n<p style=\"margin-left:0;text-align:justify;\">//name[]=1&amp;password[]=2</p>\n<div>\n<hr/>\n<div>\n<div>\n<p style=\"margin-left:0;text-align:justify;\"><span style=\"color:#7e7e7e;\">PHP</span><span style=\"color:#7e7e7e;\">中</span><span style=\"color:#7e7e7e;\">md5()</span><span style=\"color:#7e7e7e;\">函数无法处理数组（会返回</span><span style=\"color:#7e7e7e;\">NULL</span><span style=\"color:#7e7e7e;\">）</span></p>\n</div>\n</div>\n<div>\n<div id=\"_com_2\">\n<a name=\"_msocom_2\"></a>\n<p style=\"margin-left:0;text-align:justify;\"><span style=\"color:#7e7e7e;\">==</span><span style=\"color:#7e7e7e;\">的也可以用数组绕过</span></p>\n</div>\n</div>\n</div>\n</blockquote>\n<h3 id=\"3.intval()%E5%87%BD%E6%95%B0\">3.intval()函数</h3>\n<p>intval() 函数通过使用指定的进制 base 转换（默认是十进制），返回变量 var 的 integer 数值。 <span style=\"color:#fe2c24;\">intval() 不能用于 object，否则会产生 E_NOTICE 错误并返回 1（注意这个通常配合preg_match来使用）</span></p>\n<blockquote>\n<p>语法<br/> int intval ( mixed $var [, int $base = 10 ] )<br/> 参数说明：</p>\n<p>$var：要转换成 integer 的数量值。<br/> $base：转化所使用的进制。</p>\n<p>如果 base为空，通过检测 var 的格式来决定使用的进制：</p>\n<ul><li>如果字符串包括了 \"0x\" (或 \"0X\") 的前缀，使用 16 进制 (hex)；</li><li>否则，如果字符串以 \"0\" 开始，使用 8 进制(octal)；</li><li>否则，将使用 10 进制 (decimal)。</li></ul>\n</blockquote>\n<p>绕过方法：通过使用0x或者0开始的格式来绕过不相等的判断（像一些要先判断不相等再判断相等的题目）</p>\n<blockquote>\n<p style=\"margin-left:0;text-align:justify;\">$i='666';</p>\n<p style=\"margin-left:0;text-align:justify;\">$ii=$_GET['n'];</p>\n<p style=\"margin-left:0;text-align:justify;\">if(intval($ii==$i,<span style=\"color:#6795b5;\">0</span> )){<!-- --></p>\n<p style=\"margin-left:0;text-align:justify;\">    echo $flag;</p>\n<p style=\"margin-left:0;text-align:justify;\">}</p>\n<p style=\"margin-left:0;text-align:justify;\">//n=0x29a   666的二进制是29a</p>\n<div>\n<hr/>\n<div>\n<div>\n<p style=\"margin-left:0;text-align:justify;\"><span style=\"color:#7e7e7e;\">通过检测</span><span style=\"color:#7e7e7e;\"> $ii</span><span style=\"color:#7e7e7e;\">的格式来决定使用的进制</span></p>\n</div>\n</div>\n</div>\n</blockquote>\n<h3 id=\"4.strpos()%E5%87%BD%E6%95%B0\">4.strpos()函数</h3>\n<blockquote>\n<p>strpos() 函数查找字符串在另一字符串中第一次出现的位置（区分大小写）。(函数返回查找到这个find字符串的位置，那么如果是0位置，就值得注意了)</p>\n<p><strong>注释：</strong>strpos() 函数是区分大小写的。</p>\n</blockquote>\n<blockquote>\n<p> strpos(<em>string,find,start</em>)</p>\n<table><tbody><tr><th>参数</th><th>描述</th></tr><tr><td><em>string</em></td><td>必需。规定被搜索的字符串。</td></tr><tr><td><em>find</em></td><td> <p>必需。规定要查找的字符。</p> </td></tr><tr><td><em>start</em></td><td>可选。规定开始搜索的位置</td></tr></tbody></table>\n</blockquote>\n<p>绕过方法：利用换行进行绕过（%0a） </p>\n<blockquote>\n<p style=\"margin-left:0;text-align:justify;\">$i='666';</p>\n<p style=\"margin-left:0;text-align:justify;\">$ii=$_GET['h'];</p>\n<p style=\"margin-left:0;text-align:justify;\">if(strpos($ii,$i,\"0\")){<!-- --></p>\n<p style=\"margin-left:0;text-align:justify;\">    echo $flag;</p>\n<p style=\"margin-left:0;text-align:justify;\">}</p>\n<p style=\"margin-left:0;text-align:justify;\">//?num=%0a666</p>\n</blockquote>\n<h3 id=\"%C2%A05.in_array()%E5%87%BD%E6%95%B0\"> 5.in_array()函数</h3>\n<p>in_array() 函数搜索数组中是否存在指定的值。</p>\n<blockquote>\n<pre>bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )</pre>\n<table><tbody><tr><th>参数</th><th>描述</th></tr><tr><td style=\"vertical-align:top;\"><em>needle</em></td><td style=\"vertical-align:top;\">必需。规定要在数组搜索的值。</td></tr><tr><td style=\"vertical-align:top;\"><em>haystack</em></td><td style=\"vertical-align:top;\">必需。规定要搜索的数组。</td></tr><tr><td style=\"vertical-align:top;\"><em>strict</em></td><td style=\"vertical-align:top;\">可选。如果该参数设置为 TRUE，则 in_array() 函数检查搜索的数据与数组的值的类型是否相同。</td></tr></tbody></table>\n</blockquote>\n<p>问题就出在第三个参数，如果第三个参数不设置为true就不检测类型，是弱比较，相当于==号</p>\n<p>绕过方法：与==一样 </p>\n<blockquote>\n<p style=\"margin-left:0;text-align:justify;\">$whitelist = [1,2,3];</p>\n<p style=\"margin-left:0;text-align:justify;\">$page=$_GET['i'];</p>\n<p style=\"margin-left:0;text-align:justify;\">if (in_array($page, $whitelist)) {<!-- --></p>\n<p style=\"margin-left:0;text-align:justify;\">    echo \"yes\";</p>\n<p style=\"margin-left:0;text-align:justify;\">}</p>\n<p style=\"margin-left:0;text-align:justify;\">//?i=1ex</p>\n</blockquote>\n<h3 id=\"%C2%A06.preg_match()%E5%87%BD%E6%95%B0\"> 6.preg_match()函数</h3>\n<p>preg_match 函数用于执行一个正则表达式匹配。</p>\n<p>详细用法可以参考：<a class=\"link-info\" href=\"https://www.runoob.com/php/php-preg_match.html\" title=\"https://www.runoob.com/php/php-preg_match.html\">https://www.runoob.com/php/php-preg_match.html</a></p>\n<p>绕过方法：preg_match只能处理字符串，如果不按规定传一个字符串，通常是传一个数组进去，这样就会报错,如果正则不匹配多行(/m)也可用上面的换行方法绕过</p>\n<blockquote>\n<p style=\"margin-left:0;text-align:justify;\">if(isset($_GET['num'])){<!-- --></p>\n<p style=\"margin-left:0;text-align:justify;\">    $num = $_GET['num'];</p>\n<p style=\"margin-left:0;text-align:justify;\">    if(preg_match(\"/[0-9]/\", $num)){<!-- --><a class=\"msocomanchor\" href=\"#_msocom_1\" id=\"_anchor_1\" name=\"_msoanchor_1\">[t1]</a> </p>\n<p style=\"margin-left:0;text-align:justify;\">        die(\"no no no!\");</p>\n<p style=\"margin-left:0;text-align:justify;\">    }</p>\n<p style=\"margin-left:0;text-align:justify;\">    if(intval($num)){<!-- --></p>\n<p style=\"margin-left:0;text-align:justify;\">        echo $flag;</p>\n<p style=\"margin-left:0;text-align:justify;\">    }</p>\n<p style=\"margin-left:0;text-align:justify;\">}</p>\n<p style=\"margin-left:0;text-align:justify;\">//?num[]=1</p>\n<div>\n<hr/>\n<div>\n<div>\n<p style=\"margin-left:0;text-align:justify;\"><span style=\"color:#fe2c24;\">上面介绍过了，intval() 不能用于 object，否则会产生 E_NOTICE 错误并返回 1</span></p>\n</div>\n</div>\n</div>\n</blockquote>\n<h3 id=\"%C2%A07.str_replace%E5%87%BD%E6%95%B0\"> 7.str_replace函数</h3>\n<p>str_replace() 函数用于替换字符串中指定字符（区分大小写）</p>\n<blockquote>\n<p>&lt;?php<br/> echo str_replace(\"world\",\"Peter\",\"Hello world!\");<br/> ?&gt;</p>\n<p>//输出：Hello Peter!</p>\n</blockquote>\n<blockquote>\n<p>str_replace(<em>find,replace,string,count</em>)</p>\n<table><tbody><tr><th>参数</th><th>描述</th></tr><tr><td><em>find</em></td><td>必需。规定要查找的值。</td></tr><tr><td><em>replace</em></td><td>必需。规定替换 <em>find</em> 中的值的值。</td></tr><tr><td><em>string</em></td><td>必需。规定被搜索的字符串。</td></tr><tr><td><em>count</em></td><td>可选。一个变量，对替换数进行计数。</td></tr></tbody></table>\n</blockquote>\n<p>绕过方法：str_replace无法迭代过滤 ，可以通过双写绕过</p>\n<blockquote>\n<p style=\"margin-left:0;text-align:justify;\">$sql=$_GET['s'];</p>\n<p style=\"margin-left:0;text-align:justify;\">$sql=str_replace('select','',$sql);</p>\n<p style=\"margin-left:0;text-align:justify;\">echo $sql;</p>\n<p style=\"margin-left:0;text-align:justify;\">?&gt;</p>\n<p style=\"margin-left:0;text-align:justify;\">//?s=sselectelect</p>\n</blockquote>\n</div>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 1, "time": "2022-04-08 11:09:37", "summary": "目录绕过绕过函数函数函数函数函数绕过比较运算符在进行比较的时候是弱类型比较，只需要比较两个值相等就行，不会比较类型绕过方法如：、使用就可以绕过在处理哈希字符串时，会利用或来对哈希值进行比较，它把每一个"}