{"blogid": "124898627", "writerAge": "None", "writerBlogNum": "677", "writerCollect": "2552", "writerComment": "708", "writerFan": "981", "writerGrade": "8级", "writerIntegral": "39295", "writerName": "天马3798", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124898627.jpg", "writerRankTotal": "190", "writerRankWeekly": "5571", "writerThumb": "786", "writerVisitNum": "6252040", "blog_read_count": "1034", "blog_time": "于 2022-05-21 15:31:40 发布", "blog_title": "EF Core 批量写入数据使用整理_EF Core批量插入数据（一）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p><span style=\"color:#fe2c24;\"><strong>一、EF Core 批量添加数据 问题详解 AddRange()</strong></span></p>\n<p>问题整理：</p>\n<p>1.对于批量写入数据，每次几万条情况 使用 Add() 方法不合理</p>\n<p>2.使用AddRange() 每次批量写入数据也要有个数限制，不然也会异常报错</p>\n<p>3.批量写入数据，如果Sqlserver 日志文件或者磁盘空间占满也会抛出异常。</p>\n<p>4.批量写入需要控制对象的字符数量，字符数量大的写入慢没太多优化空间，看你的磁盘和硬件情况了。</p>\n<p></p>\n<p>批量数据写入解决方案：</p>\n<p>1.写入每条数据字符量尽可能小</p>\n<p>2.分段写入，避免内存不足异常</p>\n<p>3.使用第三方库，协助增速写入：Z.EntityFramework.Extensions.EFCore</p>\n<p>更多参考：</p>\n<p></p>\n<p><span style=\"color:#fe2c24;\"><strong>二、批量数据分段写入富文本字符数量较大， 使用AddRange()</strong></span></p>\n<p><span style=\"color:#fe2c24;\"><strong>如果不分段写入，内存不足会抛出异常</strong></span></p>\n<pre><code class=\"language-cs\">static void Test3()\n{\n    // EF Core 批量添加数据 问题详解 AddRange()\n    try\n    {\n        QLSingleContext _context = new QLSingleContext();\n        ArtileNews news = _context.ArtileNews.Find(6);\n        DateTime start = DateTime.Now;\n        List&lt;ArticleInfo&gt; artList = new List&lt;ArticleInfo&gt;();\n        for (int i = 0; i &lt; 50000; i++)\n        {\n            ArticleInfo model = new ArticleInfo();\n            model.Title = news.Title;\n            // model.Content = news.Content;\n            model.Content = \"内容稍的测试数据\";\n            model.ViewCount = 0;\n            model.LastEditTime = DateTime.Now;\n            model.EmpId = 4;\n            artList.Add(model);\n        }\n        Console.WriteLine($\"内存组建完成使用{(DateTime.Now - start).TotalSeconds}秒\");\n\n\n        //1.批量添加的个数是有上限的，根据自己电脑内存而定\n        //2.单条数据字符空间大慢\n        //3.数据太多一次添加太慢\n        _context.ArticleInfos.AddRange(artList);\n        _context.SaveChanges();\n        \n\n        DateTime end = DateTime.Now;\n        Console.WriteLine($\"添加成功了{artList.Count}条数据\");\n        Console.WriteLine($\"总共使用{(end - start).TotalSeconds}秒\");\n    }\n    catch (Exception ex)\n    {\n        throw ex;\n    }\n}</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\4eb53883f34f4270931a04199c5ef186.png\"/></p>\n<p> </p>\n<p>分段写入代码处理：</p>\n<pre><code class=\"language-cs\">//分段插入----此方法不奏效，但可以解决内存不足的bug\nstatic void MyAddRange(QLSingleContext _context, List&lt;ArticleInfo&gt; artList)\n{\n    //每次插入2000 条\n    int num = 0;\n    while (true)\n    {\n        var temp = artList.Skip(num).Take(10000).ToList();\n        if (temp.Count == 0)\n            break;\n        //使用默认\n        _context.ArticleInfos.AddRange(temp);\n        _context.SaveChanges();\n\n        num += temp.Count;\n    }\n}\n</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\415df31705114ec589c2f7828640489f.png\"/></p>\n<p> 插入非富文本，字符量小的数据 5万条：</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\59bce755903b41f1b3bf67fffb44bbb4.png\"/></p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p></p>\n<p><span style=\"color:#fe2c24;\"><strong>三、批量查询想增加查询速度，可以取消上下文监听</strong></span></p>\n<p>        //查询禁用跟踪<br/>         //_context.ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTracking;<br/>         // _context.ChangeTracker.AutoDetectChangesEnabled = false;</p>\n<p></p>\n<p></p>\n<p>更多：</p>\n<h2><a href=\"https://blog.csdn.net/u011127019/article/details/123595207\" title=\"EFCore 关联表查询_多表使用整理\">EFCore 关联表查询_多表使用整理</a></h2>\n<h2><a href=\"https://blog.csdn.net/u011127019/article/details/123528237\" title=\"Ef Core 使用Entity方式配置外键\">Ef Core 使用Entity方式配置外键</a></h2>\n<h2><a href=\"https://blog.csdn.net/u011127019/article/details/74011508\" title=\"SqlServer 大量数据热汇总优化整理\">SqlServer 大量数据热汇总优化整理</a></h2>\n<p></p>\n</div>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 0, "time": "2022-05-21 15:31:40", "summary": "一、批量添加数据问题详解问题整理：对于批量写入数据，每次几万条情况使用方法不合理使用每次批量写入数据也要有个数限制，不然也会异常报错批量写入数据，如果日志文件或者磁盘空间占满也会抛出异常。批量写入需要"}