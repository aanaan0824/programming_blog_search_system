{"blogid": "126381059", "writerAge": "码龄1年", "writerBlogNum": "63", "writerCollect": "329", "writerComment": "199", "writerFan": "480", "writerGrade": "4级", "writerIntegral": "1373", "writerName": "丘比特惩罚陆", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126381059.jpg", "writerRankTotal": "13655", "writerRankWeekly": "195", "writerThumb": "542", "writerVisitNum": "23889", "blog_read_count": "870", "blog_time": "已于 2022-08-17 17:34:54 修改", "blog_title": "五分钟，看懂vue项目会用到哪些ES6常用语法", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"-toc\" style=\"margin-left:0px;\"></p>\n<p id=\"%E5%89%8D%E8%A8%80-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></p>\n<p id=\"%E4%B8%80%E3%80%81%E5%B8%B8%E9%87%8F%E5%A3%B0%E6%98%8E%E3%80%81%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81%E5%B8%B8%E9%87%8F%E5%A3%B0%E6%98%8E%E3%80%81%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E\">一、常量声明、变量声明</a></p>\n<p id=\"%C2%A0%20%C2%A0%201%E3%80%81let%E5%A3%B0%E6%98%8E%E5%91%BD%E4%BB%A4-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%20%C2%A0%201%E3%80%81let%E5%A3%B0%E6%98%8E%E5%91%BD%E4%BB%A4\">    1、let声明命令</a></p>\n<p id=\"let%E8%A7%84%E5%AE%9A%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F-toc\" style=\"margin-left:80px;\"><a href=\"#let%E8%A7%84%E5%AE%9A%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F\">let规定不可重复声明变量</a></p>\n<p id=\"let%20%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%8F%98%E9%87%8F%E5%8D%87%E7%BA%A7-toc\" style=\"margin-left:80px;\"><a href=\"#let%20%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%8F%98%E9%87%8F%E5%8D%87%E7%BA%A7\">let 不存在变量升级</a></p>\n<p id=\"%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8\">块级作用</a></p>\n<p id=\"%E6%9A%82%E6%97%B6%E6%80%A7%E6%AD%BB%E5%8C%BA-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%9A%82%E6%97%B6%E6%80%A7%E6%AD%BB%E5%8C%BA\">暂时性死区</a></p>\n<p id=\"2%E3%80%81const%E5%91%BD%E4%BB%A4-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81const%E5%91%BD%E4%BB%A4\">2、const命令</a></p>\n<p id=\"%E4%BA%8C%E3%80%81%E5%8F%98%E9%87%8F%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81%E5%8F%98%E9%87%8F%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC\">二、变量解构赋值</a></p>\n<p id=\"%E6%95%B0%E7%BB%84%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%95%B0%E7%BB%84%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC\">数组的解构赋值</a></p>\n<p id=\"%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC\">对象的解构赋值</a></p>\n<p id=\"%E4%B8%89%E3%80%81rest%E5%8F%82%E6%95%B0%C2%A0-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%89%E3%80%81rest%E5%8F%82%E6%95%B0%C2%A0\">三、rest参数 </a></p>\n<p id=\"%E5%9B%9B%E3%80%81%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%9B%9B%E3%80%81%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0\">四、箭头函数</a></p>\n<p id=\"%E4%BA%94%E3%80%81%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%94%E3%80%81%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2\">五、模板字符串</a></p>\n<p id=\"%E5%85%AD%E3%80%81%E6%A8%A1%E5%9D%97%EF%BC%88Module%EF%BC%89%E8%AF%AD%E6%B3%95-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%85%AD%E3%80%81%E6%A8%A1%E5%9D%97%EF%BC%88Module%EF%BC%89%E8%AF%AD%E6%B3%95\">六、模块（Module）语法</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h1 id=\"%E5%89%8D%E8%A8%80\">前言</h1>\n<p>   一个前端项目开发中，都会使用到的ES6命令，但是你知道什么是ES6命令嘛？在最新的前端技术迭代下，ES6无非就是ES5的下一个版本，也是现在JavaScript轻量级语言的最新一版本的标准。说最新也新，因为这是现在的最新的一代，但是说不新也可以是不新，因为他已经在7年前就已经发布了。</p>\n<p>   这里插一个题外话，我们知道未上分么要更新迭代一个新的命令，就那我们的ES5和ES6来说，ES6因为能很好地解决了ES5留下来的问题，解决了ES5解决不了的问题，而且在程序运行方面，比起ES5运行起来更加的方便。</p>\n<h1 id=\"%E4%B8%80%E3%80%81%E5%B8%B8%E9%87%8F%E5%A3%B0%E6%98%8E%E3%80%81%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E\">一、常量声明、变量声明</h1>\n<h2 id=\"%C2%A0%20%C2%A0%201%E3%80%81let%E5%A3%B0%E6%98%8E%E5%91%BD%E4%BB%A4\">    1、let声明命令</h2>\n<p>let命令，这个命令是ES6新增加的一个命令，它的作用就是和var一样，都是用来声明变量用的，但是let和var有所不同，我们可以逐一介绍let和var不同的特点：</p>\n<ul><li> <h3 id=\"let%E8%A7%84%E5%AE%9A%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F\">let规定不可重复声明变量</h3> </li></ul>\n<p>比如我们可以简单的看这个一个程序，</p>\n<pre><code class=\"language-javascript\">let a=1;\nlet a=2;\nconsole.log(a)</code></pre>\n<p>这一个程序当执行到let A=2;的时候就会执行不下去，就会报错，报错的结果如下所示，</p>\n<p><img alt=\"50789b3846f0454c807beceee7e3370a.png\" src=\"..\\..\\static\\image\\50789b3846f0454c807beceee7e3370a.png\"/></p>\n<p></p>\n<p>报错解释：未捕获的Sytaxerror:标识符'a'已经声明。</p>\n<p>因为let命令不允许在相同的作用域下重复声明同一个变量。</p>\n<p></p>\n<p></p>\n<ul><li> <h3 id=\"let%20%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%8F%98%E9%87%8F%E5%8D%87%E7%BA%A7\">let 不存在变量升级</h3> </li></ul>\n<p>变量升级什么意思呢？往下看一个实例代码就知道了，</p>\n<pre><code class=\"language-javascript\">console.log(a);\nlet a = 1;</code></pre>\n<p>这一段代码就回到console.log(a)d的时候就会报错，报错类型如下：</p>\n<p><img alt=\"a1b16134f5b540dab09997f125525d35.png\" src=\"..\\..\\static\\image\\a1b16134f5b540dab09997f125525d35.png\"/></p>\n<p> //未捕获的引用错误:在初始化之前无法访问'a'</p>\n<p>解释一下为什么会出现这样的保存类型，因为外卖使用的是let命令，这个命令中在进行声明变量的时候，要经过定义这个环节，才能进行到执行代码编译这一步。</p>\n<p>在前面我们说了，用var进行声明的变量，是可以在没有声明前使用这个变量的，其得到的值是：undefined未定义，不会产生报错；但是使用的是let命令进行声明的，一定要遵守先定义再执行的过程，不然就会产生报错。</p>\n<p></p>\n<ul><li> <h3 id=\"%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8\">块级作用</h3> </li></ul>\n<p>我们在使用let命令的时候，所要声明的变量，这个变量只能在let命令所在的代码块里生效。这句话理解起来很简单。可以通过一个例子看就知道了。</p>\n<p>实例：</p>\n<pre><code class=\"language-javascript\">{\n let a =5;\nconsole.log(a);\n}\nconsole.log(a);</code></pre>\n<p>当代码运行到最后一条console.log(a)的时候，这个代码就会报错，报错格式类型如下：</p>\n<p><img alt=\"85b096240b274b8294451e90199ca851.png\" src=\"..\\..\\static\\image\\85b096240b274b8294451e90199ca851.png\"/></p>\n<p>//a没有定义。</p>\n<p>补充:ES5中只有全局作用域和函数作用域两个作用域，但是ES6新增了块作用域，是的在执行的时候更加的便利。</p>\n<p></p>\n<ul><li> <h3 id=\"%E6%9A%82%E6%97%B6%E6%80%A7%E6%AD%BB%E5%8C%BA\">暂时性死区</h3> </li></ul>\n<p>在ES6中，如果区块在使用let命令的时候，在块级中对let所声明的变量，这个块区的作用域就会变成封闭的作用域，这个作用域的作用就是只要你在声明前使用这一些变量，都会产生报错，我们就将它称之为“暂时性死区”。代码实例如下：</p>\n<pre><code class=\"language-javascript\">var a = 10;\nif(ture)\n{\n b = 20;\nlet b;\n}</code></pre>\n<p><img alt=\"8e6888be763c486b8a39a377b353ff4f.png\" src=\"..\\..\\static\\image\\8e6888be763c486b8a39a377b353ff4f.png\"/></p>\n<p> 这个程序当执行到 b = 20;的时候就会报错，暂时性死区就是这个意思。</p>\n<p></p>\n<h2 id=\"2%E3%80%81const%E5%91%BD%E4%BB%A4\">2、const命令</h2>\n<p> 在一个vue开发项目中，const这个命令一般使用来声明一个只读的变量，这个变量声明一旦确定了，里面的值就不能发生改变了。这个const的特性和let的使用特性是一样的。</p>\n<p>我们还是通过例子的方式来理解，例子：</p>\n<pre><code class=\"language-javascript\">&lt;script&gt;\nconst p = 3.1415;\n console.log(p);\ne=520;\nconsole.log(p)  \n&lt;/script&gt;\n  \n//这个时候代码编译后的结果是p = 3.1415，</code></pre>\n<pre><code class=\"language-javascript\">//报错的格式类型：Uncaught TypeError: Assignment to constant variable\n//未捕获的类型错误:对常量变量的赋值</code></pre>\n<p><img alt=\"045e26cb95af493d8137346c176a5d51.png\" src=\"..\\..\\static\\image\\045e26cb95af493d8137346c176a5d51.png\"/></p>\n<p> 由此实例，我们就可以知道，用const声明的值，智能读他的值，但是没有办法进行对他的值进行改变。</p>\n<p></p>\n<h1 id=\"%E4%BA%8C%E3%80%81%E5%8F%98%E9%87%8F%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC\">二、变量解构赋值</h1>\n<h2 id=\"%E6%95%B0%E7%BB%84%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC\">数组的解构赋值</h2>\n<p>这个操作是通过从数组中提取出这个数组的值得，按照对应的位置对变量进行赋值。</p>\n<pre><code class=\"language-javascript\">\nlet [a,b,c] = [1,2,3];\nconsole.log(a);\nconsole.log(b);\nconsole.log(c);\n//输出的结果：1,2,3,</code></pre>\n<p>这个例子左右边的数组元素都是相等的，所以代码执行的时候，该语句实现从数组[1,2,3]中以此提取数值，可以等价于<br/> let a = 1;let b= 2; let c = 3;</p>\n<p>运行结果：</p>\n<p><img alt=\"9b8b73a2910e461cbe28f28346415261.png\" src=\"..\\..\\static\\image\\9b8b73a2910e461cbe28f28346415261.png\"/></p>\n<p></p>\n<p></p>\n<h2 id=\"%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC\">对象的解构赋值</h2>\n<p>因为我们知道，对象这个定义属性是没有次序的，所以在解构赋值的过程中，要确保变量和属性名同名，不然就取不到对象里面的值。</p>\n<p>例子：</p>\n<pre><code class=\"language-javascript\">let {name，age，telphone} = {name:'qiubite',age:'23',tel:'1867763****'};\nconsole.log(name);\nconsole.log(age);\nconsole.log(telphone);\n//输出结果：qiubite;23;undefined;</code></pre>\n<p><img alt=\"cae9a109f75a41aaba267a829809f854.png\" src=\"..\\..\\static\\image\\cae9a109f75a41aaba267a829809f854.png\"/></p>\n<p></p>\n<p>变量telphone在右边的对象中没有对应的属性名了，所以输出的值就是undefined未定义。</p>\n<h1></h1>\n<h1 id=\"%E4%B8%89%E3%80%81rest%E5%8F%82%E6%95%B0%C2%A0\">三、rest参数 </h1>\n<p>这个参数在语法里面又可以成为不定参数，作用是用来获取函数或解析数组赋值过程中的多余参数。</p>\n<pre><code class=\"language-javascript\">var [a,b,...c] = [0,1,2,3,4];console.log(c)\n//输出的结果：[3,4,5]</code></pre>\n<p><img alt=\"122acf5a2a6141a19bdad690c8fc68d0.png\" src=\"..\\..\\static\\image\\122acf5a2a6141a19bdad690c8fc68d0.png\"/></p>\n<p></p>\n<p>为什么呢？因为rest只能出现在变量的最后面，不能出现在其他的位置，简单地说，就是后续剩余的参数。</p>\n<p></p>\n<h1 id=\"%E5%9B%9B%E3%80%81%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0\">四、箭头函数</h1>\n<p>在ES6语法中，是被允许使用箭头来进行函数的定义的，这种方法更加的简介，可以把ES5中的function进行省略，一般的语法格式可以是:（参数a,参数b）=&gt;{函数体}，箭头的左边部分，我们般成为前面部分，这个部分是函数的参数，而右边（后面）这个部分函数体的代码块。</p>\n<p>箭头函数和别的普通函数除了在写法上面有所不一样之外，其功能上也要有所注意，以下列出<br/> 几点后续需要注意的点；<br/> 第一：函数体内的this对象就是定义是所在的对象，而不是使用的时候所在的对象，这个我们通过以下的代码进行理解，</p>\n<pre><code class=\"language-javascript\">document.onclick = function(){\nsetTimeout(()=&gt;{\n console.log(this);\n},10);\n}</code></pre>\n<p>我们将这一段函数改成箭头函数应该怎么改：</p>\n<pre><code class=\"language-javascript\">document.onclick = function(){\nsetTimeout(()=&gt;{\n console.log(this);\n},10);\n}\n//就这样的格式进行修改就可以了。</code></pre>\n<p>解释：没有改成箭头函数前的函数，在执行后，我们可以在浏览器界面任何位置进行单击，而控制台输出的是Windows对象，而不是document,因为setTimeout是通过Window对象进行调用的。</p>\n<p><img alt=\"0be75c273f8a4150b588e80c61dc1b59.png\" src=\"..\\..\\static\\image\\0be75c273f8a4150b588e80c61dc1b59.png\"/></p>\n<p> 而改成箭头函数以后，改成箭头函数执行的代码，你在浏览器界面任何位置进行点击，控制台输出的是doucment对象，因为这个箭头函数已经是在doucment里面进行定义好了的。下图是改成箭头函数后的代码运行结果：</p>\n<p><img alt=\"3232c72d0a5d41138ecc7f20bb802b7f.png\" src=\"..\\..\\static\\image\\3232c72d0a5d41138ecc7f20bb802b7f.png\"/></p>\n<p>第二点：不能使用argument对象且不能用作构造函数<br/> 第三点：在对象的方法中不建议使用箭头函数，因为可能会导致产生一些不可避免的bug。</p>\n<p></p>\n<h1 id=\"%E4%BA%94%E3%80%81%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2\">五、模板字符串</h1>\n<p>ES6可以允许使用反引号“`”来进行创建模板字符串‘string’，这个不仅可以可以当做普通的字符串使用，还可以用作加强型的字符串。这个模板字符串有什么好处呢，它将我们读字符的拼接实现了简化，从而代替了传统的单双引号、“+”来进行字符拼接。我们还是通过我们的代码来解释我们这句话：</p>\n<pre><code class=\"language-javascript\">&lt;script&gt;\nlet firstname = \"丘比特惩罚陆\";\nlet lastname = `select*from userinfo where areadd = '${firstname}'`;\nconsole.log(lastname);\n&lt;/script&gt;\n</code></pre>\n<p> 运行结果：</p>\n<p><img alt=\"1c4d49b148504a9faa68c076214a613f.png\" src=\"..\\..\\static\\image\\1c4d49b148504a9faa68c076214a613f.png\"/></p>\n<p></p>\n<h1 id=\"%E5%85%AD%E3%80%81%E6%A8%A1%E5%9D%97%EF%BC%88Module%EF%BC%89%E8%AF%AD%E6%B3%95\">六、模块（Module）语法</h1>\n<p>ES6实现了模块的功能，可以将一个大的工程程序拆分成很多小的功能模块，<br/> 实现主要使用export和import 命令，export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。<br/> 一个模块就是一个独立的文件。如果你使用的功能模块主动输出，外部模块就可以获取该模块输出的数据，则该模块必须使用<br/> export命令定义对外接口，导出该数据;<br/> 如要该模块使用其他模块中的数据，则可使用import命令导入其他模块提供的数据。<br/> 导出与导入写法，我们可以归纳为：<br/> ①<br/> 在定义变量时直接导出，就是在定义变量的前面加上 export命令。<br/> import{变量1，变量2，...} from模块标识符2）<br/> ②<br/> 使用一条export命令一次输出多个已定义好的变量，语法:<br/> export{变量1，变量2，...}<br/> 导入时使用命令:<br/> import{变量1，变量2，...,from模块标识符<br/> ③<br/> 上述两种方法在导入时需要知道导出的变量名或函数名，否则无法导入，而用exportdefault 默认导出。<br/> export default命令可直接输出一个对象，导入时用一个对象来接收即可。导入时使用命令:<br/> import对象名from模块标识符。<br/> 注意，每一个功能模块，只允许使用一次export default命令。</p>\n<p></p>\n</div>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-08-17 17:34:54", "summary": "目录前言一、常量声明、变量声明、声明命令规定不可重复声明变量不存在变量升级块级作用暂时性死区、命令二、变量解构赋值数组的解构赋值对象的解构赋值三、参数四、箭头函数五、模板字符串六、模块语法前言一个前端"}