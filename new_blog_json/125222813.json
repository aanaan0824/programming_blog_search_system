{"blogid": "125222813", "writerAge": "码龄9年", "writerBlogNum": "29", "writerCollect": "130", "writerComment": "26", "writerFan": "11", "writerGrade": "3级", "writerIntegral": "566", "writerName": "十月怀胎肚儿", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125222813.jpg", "writerRankTotal": "44544", "writerRankWeekly": "84824", "writerThumb": "17", "writerVisitNum": "55016", "blog_read_count": "5337", "blog_time": "已于 2022-06-29 14:32:45 修改", "blog_title": "CMakeLists.txt 详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"-toc\" style=\"margin-left:40px;\"></p>\n<p id=\"CMakeLists.txt%E7%94%A8%E4%BE%8B%E8%AF%A6%E8%A7%A3%EF%BC%88WDS%E4%B8%AD%E7%9A%84%E7%94%A8%E4%BE%8B%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#CMakeLists.txt%E7%94%A8%E4%BE%8B%E8%AF%A6%E8%A7%A3%EF%BC%88WDS%E4%B8%AD%E7%9A%84%E7%94%A8%E4%BE%8B%EF%BC%89\">CMakeLists.txt用例详解（WDS中的用例）</a></p>\n<p id=\"CMakeLists.txt%E4%BD%9C%E7%94%A8-toc\" style=\"margin-left:80px;\"><a href=\"#CMakeLists.txt%E4%BD%9C%E7%94%A8\">CMakeLists.txt作用</a></p>\n<p id=\"%E7%94%9F%E6%88%90%E5%AF%B9%E8%B1%A1%E5%BA%93OBJECT%E5%AE%9E%E4%BE%8B%EF%BC%88wds%2Flibwds%2Fcommon%2FCMakeLists.txt%EF%BC%89-toc\" style=\"margin-left:80px;\"><a href=\"#%E7%94%9F%E6%88%90%E5%AF%B9%E8%B1%A1%E5%BA%93OBJECT%E5%AE%9E%E4%BE%8B%EF%BC%88wds%2Flibwds%2Fcommon%2FCMakeLists.txt%EF%BC%89\">生成对象库OBJECT实例（wds/libwds/common/CMakeLists.txt）</a></p>\n<p id=\"%E7%94%9F%E6%88%90%E5%BA%93so%EF%BC%88wds%2Flibwds%2FCMakeLists.txt%EF%BC%89-toc\" style=\"margin-left:80px;\"><a href=\"#%E7%94%9F%E6%88%90%E5%BA%93so%EF%BC%88wds%2Flibwds%2FCMakeLists.txt%EF%BC%89\">生成库so（wds/libwds/CMakeLists.txt）</a></p>\n<p id=\"%E7%94%9F%E6%88%90%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8F%AF%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F%EF%BC%88wds%2Fdesktop_source%2FCMakeLists.txt%EF%BC%89-toc\" style=\"margin-left:80px;\"><a href=\"#%E7%94%9F%E6%88%90%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8F%AF%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F%EF%BC%88wds%2Fdesktop_source%2FCMakeLists.txt%EF%BC%89\">生成二进制可执行程序（wds/desktop_source/CMakeLists.txt）</a></p>\n<p id=\"CMake%E7%9B%B8%E5%85%B3%E5%8F%82%E8%80%83-toc\" style=\"margin-left:80px;\"><a href=\"#CMake%E7%9B%B8%E5%85%B3%E5%8F%82%E8%80%83\">CMake相关参考</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h2 id=\"CMakeLists.txt%E7%94%A8%E4%BE%8B%E8%AF%A6%E8%A7%A3%EF%BC%88WDS%E4%B8%AD%E7%9A%84%E7%94%A8%E4%BE%8B%EF%BC%89\">CMakeLists.txt用例详解（WDS中的用例）</h2>\n<h3 id=\"CMakeLists.txt%E4%BD%9C%E7%94%A8\">CMakeLists.txt作用</h3>\n<p>cmake的所有语句都写在一个CMakeLists.txt的文件中，CMakeLists.txt文件确定后，直接使用cmake命令进行运行，但是这个命令要指向CMakeLists.txt所在的目录，cmake之后就会产生我们想要的makefile文件，然后再直接make就可以编译出我们需要的结果了。</p>\n<p>更简单的解释就是cmake是为了生成makefile而存在，这样我们就不需要再去写makefile了，只需要写简单的CMakeLists.txt即可</p>\n<h3 id=\"%E7%94%9F%E6%88%90%E5%AF%B9%E8%B1%A1%E5%BA%93OBJECT%E5%AE%9E%E4%BE%8B%EF%BC%88wds%2Flibwds%2Fcommon%2FCMakeLists.txt%EF%BC%89\">生成对象库OBJECT实例（wds/libwds/common/CMakeLists.txt）</h3>\n<pre><code class=\"language-cpp\"># c++编译器设置编译选项,例如-std=c++11选项，在编译c++代码时加上c++11支持选项\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11 -Wall -fvisibility=hidden -fPIC\")\n# c编译器设置编译选项\nset(CMAKE_C_FLAGS \"${CMAKE_CXX_FLAGS} -std=c99 -Wall\")\n\n# 将指定目录添加到编译器的头文件搜索路径之下，指定的目录被解释成当前源码路径的相对路径\n# PROJECT_SOURCE_DIR为包含PROJECT()的最近一个CMakeLists.txt文件所在的文件夹\ninclude_directories (\"${PROJECT_SOURCE_DIR}\" \"${PROJECT_SOURCE_DIR}/libwds/rtsp/gen\")\n\n# add_library(&lt;name&gt; OBJECT [&lt;source&gt;...])\n# 这种形式类型固定为OBJECT，以这种方式，只编译source列表的文件，但不将生成的目标文件打包或者链接为 \n# 库，而是在其他add_library()或者add_executable()生成目标的时候，可以使用形如\n# $&lt;TARGET_OBJECTS:name&gt;的表达式将对象库作为源引入\n# 见实例2引用\nadd_library(wdscommon OBJECT logging.cpp message_handler.cpp rtsp_input_handler.cpp video_format.cpp)\n\n# 添加这条语句就是提醒编译器需要先生成wdscommon的依赖wdsrtsp,然后再去生成wdscommon\nadd_dependencies(wdscommon wdsrtsp)</code></pre>\n<h3 id=\"%E7%94%9F%E6%88%90%E5%BA%93so%EF%BC%88wds%2Flibwds%2FCMakeLists.txt%EF%BC%89\">生成库so（wds/libwds/CMakeLists.txt）</h3>\n<pre><code class=\"language-cpp\"># c++编译器设置编译选项,例如-std=c++11选项，在编译c++代码时加上c++11支持选项\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11 -Wall -fvisibility=hidden\")\n# c编译器设置编译选项\nset(CMAKE_C_FLAGS \"${CMAKE_CXX_FLAGS} -std=c99 -Wall\")\n\n# 用来使用指定的源文件向工程中添加一个目标库（即生成库文件） \n# STATIC为静态库.a, SHARED为动态库.so\n# $&lt;TARGET_OBJECTS:wdsrtsp&gt;见实例1中add_library(&lt;name&gt; OBJECT [&lt;source&gt;...])用法\nadd_library(wds SHARED $&lt;TARGET_OBJECTS:wdsrtsp&gt;\n                       $&lt;TARGET_OBJECTS:wdscommon&gt;\n                       $&lt;TARGET_OBJECTS:wdssink&gt;\n                       $&lt;TARGET_OBJECTS:wdssource&gt;)\n\n# 按照规则，动态库是应该包含一个版本号的，\n# VERSION指代动态库版本，SOVERSION指代API版本。\nset_target_properties(wds PROPERTIES\n    VERSION ${WDS_VERSION_MAJOR}.${WDS_VERSION_MINOR}.${WDS_VERSION_PATCH}\n    SOVERSION ${WDS_VERSION_MAJOR})\n\n# 参数中的TARGETS后面跟的就是我们通过ADD_EXECUTABLE 或者 ADD_LIBRARY 定义的目标文件，\n# 可能是可执行二进制、动态库、静态库\n# LIBRARY（动态库类型）为目标类型，ARCHIVE（静态库类型），RUNTIME（可执行二进制类型）\n# DESTINATION 定义了安装的路径，后边一般跟着安装路径，绝对路径要以/开头，否则为相对路径\ninstall(TARGETS wds LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})\n\nset(PUBLIC_HEADERS\n    public/connector_type.h\n    public/peer.h\n    public/video_format.h\n    public/sink.h\n    public/wds_export.h\n    public/audio_codec.h\n    public/media_manager.h\n    public/source.h\n    public/logging.h)\n\n# 安装set指定PUBLIC_HEADERS文件到${CMAKE_INSTALL_FULL_INCLUDEDIR}/wds目录下\n# CMAKE_INSTALL_FULL_INCLUDEDIR为编译输出include目录的绝对路径\ninstall(FILES ${PUBLIC_HEADERS} DESTINATION ${CMAKE_INSTALL_FULL_INCLUDEDIR}/wds)</code></pre>\n<h3 id=\"%E7%94%9F%E6%88%90%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8F%AF%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F%EF%BC%88wds%2Fdesktop_source%2FCMakeLists.txt%EF%BC%89\">生成二进制可执行程序（wds/desktop_source/CMakeLists.txt）</h3>\n<pre><code># c++编译器设置编译选项,例如-std=c++11选项，在编译c++代码时加上c++11支持选项\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -pthread -std=c++11\")\n\n# 将指定目录添加到编译器的头文件搜索路径之下，指定的目录被解释成当前源码路径的相对路径\n# PROJECT_SOURCE_DIR为包含PROJECT()的最近一个CMakeLists.txt文件所在的文件夹\ninclude_directories (\"${PROJECT_SOURCE_DIR}\")\ninclude_directories (\"${PROJECT_SOURCE_DIR}/libwds/public\")\ninclude_directories (\"${PROJECT_SOURCE_DIR}/libwds/parser\")\ninclude_directories (\"${PROJECT_SOURCE_DIR}/p2p\")\ninclude_directories (\"${PROJECT_SOURCE_DIR}/mirac_network\")\n\n# find_package用于查找包（通常是使用三方库），\n# 并返回关于包的细节（使用包所依赖的头文件、库文件、编译选项、链接选项等）.\n# 如果某个依赖项既不提供查找模块，也不提供供应商打包的CMake文件, \n# 依赖 pkg-config 程序，来找到系统上的包\nfind_package(PkgConfig REQUIRED)\n\n# 当找到 pkg-config 时, CMake需要提供两个函数，来封装这个程序提供的功能\n# pkg_check_modules，查找传递列表中的所有模块(库和/或程序) \n# pkg_search_module 要在传递的列表中找到第一个工作模块 与 find_package 一样，这些函数接受\n# REQUIRED 和 QUIET 参数\npkg_check_modules (GLIB2 REQUIRED glib-2.0)\ninclude_directories(${GLIB2_INCLUDE_DIRS})\n\npkg_check_modules (GIO REQUIRED gio-2.0)\ninclude_directories(${GIO_INCLUDE_DIRS})\n\npkg_check_modules (GST REQUIRED gstreamer-1.0)\ninclude_directories(${GST_INCLUDE_DIRS})\n\n# 使用指定的源文件来生成目标可执行文件\nadd_executable(desktop-source-test main.cpp source-app.cpp mirac_broker_source.cpp desktop_media_manager.cpp)\n\n# 为desktop-source-test连接 库的头文件路径（被link库生成CMakeLists.txt中定义的头文件路径）\n# 和对应定义的函数库路径\ntarget_link_libraries (desktop-source-test  mirac wds p2p ${GIO_LIBRARIES} ${GST_LIBRARIES})\n\n# 安装可执行文件到指定生成目录\nif (WDS_INSTALL_TESTS)\n  install(PROGRAMS desktop-source-test DESTINATION ${CMAKE_INSTALL_FULL_BINDIR})\nendif()</code></pre>\n<h3 id=\"CMake%E7%9B%B8%E5%85%B3%E5%8F%82%E8%80%83\">CMake相关参考</h3>\n<p><a class=\"link-info\" href=\"https://blog.csdn.net/smilejiasmile/article/details/118799860\" title=\"Cmake 常用变量和常用环境变量\">Cmake 常用变量和常用环境变量</a><br/><br/><a class=\"link-info\" href=\"https://www.jianshu.com/p/7535bff0e894\" title=\"Cmake命令之cmake_minimum_required介绍\">Cmake命令之cmake_minimum_required介绍</a></p>\n<p><a class=\"link-info\" href=\"https://www.jianshu.com/p/c2c71d5a09e9\" title=\"Cmake命令之set\">Cmake命令之set</a></p>\n<p><a class=\"link-info\" href=\"https://www.jianshu.com/p/8a64c77343cb\" title=\"Cmake命令之find_library\">Cmake命令之find_library</a></p>\n<p><a class=\"link-info\" href=\"https://www.jianshu.com/p/a0915895dbbc\" title=\"Cmake命令之find_package\">Cmake命令之find_package</a></p>\n<p><a class=\"link-info\" href=\"https://www.jianshu.com/p/e7de3de1b0fa\" title=\"Cmake命令之include_directories\">Cmake命令之include_directories</a></p>\n<p><a class=\"link-info\" href=\"https://blog.csdn.net/zhizhengguan/article/details/111826697\" title=\"Cmake命令之pkg_check_modules\">Cmake命令之pkg_check_modules</a></p>\n<p><a class=\"link-info\" href=\"https://www.jianshu.com/p/19765d4932a4\" title=\"Cmake命令之add_executable\">Cmake命令之add_executable</a></p>\n<p><a class=\"link-info\" href=\"https://blog.csdn.net/sinat_37231928/article/details/121684722\" title=\"Cmake命令之target_link_libraries\">Cmake命令之target_link_libraries</a></p>\n<p><a class=\"link-info\" href=\"https://www.jianshu.com/p/07acea4e86a3\" title=\"Cmake命令之add_subdirectory\">Cmake命令之add_subdirectory</a></p>\n<p><a class=\"link-info\" href=\"https://www.jianshu.com/p/89fb01752d6f\" title=\"Cmake命令之list\">Cmake命令之list</a></p>\n<p><a class=\"link-info\" href=\"https://www.jianshu.com/p/cdd6e56c2422\" title=\"Cmake命令之project\">Cmake命令之project</a></p>\n<p><a class=\"link-info\" href=\"https://www.jianshu.com/p/2946eeec2489\" title=\"Cmake命令之configure_file\">Cmake命令之configure_file</a></p>\n<p><a class=\"link-info\" href=\"https://blog.csdn.net/sinat_31608641/article/details/121712590\" title=\"Cmake命令之set_target_properties\">Cmake命令之set_target_properties</a></p>\n<p><a class=\"link-info\" href=\"https://blog.csdn.net/weixin_42398658/article/details/121672529\" title=\"Cmake命令之install\">Cmake命令之install</a></p>\n</div>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-06-29 14:32:45", "summary": "目录用例详解中的用例作用生成对象库实例生成库生成二进制可执行程序相关参考用例详解中的用例作用的所有语句都写在一个的文件中，文件确定后，直接使用命令进行运行，但是这个命令要指向所在的目录，之后就会产生我"}