{"blogid": "125822614", "writerAge": "码龄4年", "writerBlogNum": "215", "writerCollect": "445", "writerComment": "69", "writerFan": "2626", "writerGrade": "5级", "writerIntegral": "2436", "writerName": "鱼找水需要时间", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125822614.jpg", "writerRankTotal": "7480", "writerRankWeekly": "539", "writerThumb": "133", "writerVisitNum": "478879", "blog_read_count": "4077", "blog_time": "于 2022-07-16 17:28:59 发布", "blog_title": "MyBatis-Plus联表查询(Mybatis-Plus-Join)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><code>mybatis-plus</code>作为<code>mybatis</code>的增强工具，简化了开发中的数据库操作。一旦遇到left join或right join的左右连接，还是得老老实实的打开xml文件，手写上一大段的sql语句。今天总结一下一款叫做<code>mybatis-plus-join</code>的工具（后面就简称<code>mpj</code>了）,可以用类似<code>mybatis-plus</code>中<code>QueryWrapper</code>的方式来进行联表查询。</p>\n<h2><a id=\"_2\"></a>引入依赖</h2>\n<blockquote>\n<p>首先在项目中引入引入依赖坐标，因为mpj中依赖较高版本<code>mybatis-plus</code>中的一些<code>api</code>，所以项目建议直接使用高版本。</p>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.github.yulichang<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>mybatis-plus-join<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.2.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.baomidou<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>mybatis-plus-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>3.5.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n</blockquote>\n<p>引入相关依赖后，在springboot项目中，像往常一样正常配置数据源连接信息就可以了。</p>\n<h2><a id=\"_19\"></a>数据准备</h2>\n<blockquote>\n<p>因为要实现联表查询，所以我们先来建几张表进行测试。<br/> 订单表：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2d57943f7c2a43f8b113519161aa421d.png\"/></p>\n</blockquote>\n<p>用户表，包含用户姓名：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9a9aea6787044c0cb540209e0464acc2.png\"/></p>\n<p>商品表，包含商品名称和单价：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\df1e19b431024cf5b4403f678592be8f.png\"/></p>\n<p>在订单表中，通过用户id和商品id与其他两张表进行关联。</p>\n<h2><a id=\"Mapper_33\"></a>修改Mapper</h2>\n<blockquote>\n<p>以往在使用<code>myatis-plus</code>的时候，我们的<code>Mapper</code>层接口都是直接继承的<code>BaseMapper</code>，使用<code>mpj</code>后需要对其进行修改，改为继承<code>MPJBaseMapper</code>接口。</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Mapper</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">OrderMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">MPJBaseMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Order</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>对其余两个表的Mapper接口也进行相同的改造。此外，我们的<code>service</code>也可以选择继承<code>MPJBaseService</code>，<code>serviceImpl</code>选择继承<code>MPJBaseServiceImpl</code>，这两者为非必须继承。</p>\n</blockquote>\n<h2><a id=\"_43\"></a>查询</h2>\n<blockquote>\n<p><code>Mapper</code>接口改造完成后，我们把它注入到<code>Service</code>中，虽然说我们要完成3张表的联表查询，但是以<code>Order</code>作为主表的话，那么只注入这一个对应的<code>OrderMapper</code>就可以，非常简单。</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OrderService</span> <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">OrderMapper</span> orderMapper<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<p><strong>MPJLambdaWrapper</strong></p>\n<blockquote>\n<p>不用写sql的联表查询：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OrderDto</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> orderMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectJoinList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OrderDto</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">MPJLambdaWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Order</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Product</span><span class=\"token operator\">::</span><span class=\"token function\">getUnitPrice</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">.</span><span class=\"token function\">selectAs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">OrderDto</span><span class=\"token operator\">::</span><span class=\"token function\">getUserName</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">.</span><span class=\"token function\">selectAs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Product</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">OrderDto</span><span class=\"token operator\">::</span><span class=\"token function\">getProductName</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">.</span><span class=\"token function\">leftJoin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getId</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Order</span><span class=\"token operator\">::</span><span class=\"token function\">getUserId</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">.</span><span class=\"token function\">leftJoin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Product</span><span class=\"token operator\">::</span><span class=\"token function\">getId</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Order</span><span class=\"token operator\">::</span><span class=\"token function\">getProductId</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span><span class=\"token operator\">::</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<p>调用接口来看一下执行结果：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0c103bf2ef6448b8a15ce2443178298a.png\"/></p>\n<p>成功查询出了关联表中的信息，</p>\n<p>首先，调用<code>mapper</code>的<code>selectJoinList()</code>方法，进行关联查询，返回多条结果。后面的第一个参数<code>OrderDto.class</code>代表接收返回查询结果的类，作用和我们之前在<code>xml</code>中写的<code>resultType</code>类似。</p>\n<p>这个类可以直接继承实体，再添加上需要在关联查询中返回的列即可：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@ToString</span><span class=\"token punctuation\">(</span>callSuper <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@EqualsAndHashCode</span><span class=\"token punctuation\">(</span>callSuper <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderDto</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Order</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> productName<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Double</span> unitPrice<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>接下来的<code>MPJLambdaWrapper</code>就是构建查询条件的核心了，看一下我们在上面用到的几个方法：</p>\n<ul><li><code>selectAll()</code>：查询指定实体类的全部字段</li><li><code>select()</code>：查询指定的字段，支持可变长参数同时查询多个字段，但是在同一个<code>select</code>中只能查询相同表的字段，所以如果查询多张表的字段需要分开写</li><li><code>selectAs()</code>：字段别名查询，用于数据库字段与接收结果的<code>dto</code>中属性名称不一致时转换</li><li><code>leftJoin()</code>：左连接，其中第一个参数是参与联表的表对应的实体类，第二个参数是这张表联表的ON字段，第三个参数是参与联表的<code>ON</code>的另一个实体类属性</li></ul>\n<p>除此之外，还可以正常调用<code>mybatis-plus</code>中的各种原生方法，文档中还提到，默认主表别名是<code>t</code>，其他的表别名以先后调用的顺序使用<code>t1</code>、<code>t2</code>、<code>t3</code>以此类推。</p>\n<p>我们用插件读取日志转化为可读的sql语句，可以看到两条左连接条件都被正确地添加到了sql中：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9b9d21e1f3644c12bed4dea8d8a62fb0.png\"/></p>\n<p><strong>MPJQueryWrapper</strong></p>\n<p>和<code>mybatis-plus</code>非常类似，除了<code>LamdaWrapper</code>外还提供了普通<code>QueryWrapper</code>的写法，改造上面的代码：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getOrderSimple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OrderDto</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> orderMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectJoinList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OrderDto</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n     <span class=\"token keyword\">new</span> <span class=\"token class-name\">MPJQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Order</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t2.unit_price\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"t2.name as product_name\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t1.name as user_name\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">leftJoin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t_user t1 on t1.id = t.user_id\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">leftJoin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t_product t2 on t2.id = t.product_id\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t.status\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果与之前完全相同，需要注意的是，这样写时在引用表名时不要使用数据库中的原表名，主表默认使用<code>t</code>，其他表使用<code>join</code>语句中我们为它起的别名，如果使用原表名在运行中会出现报错。</p>\n<p>并且，在<code>MPJQueryWrapper</code>中，可以更灵活的支持子查询操作，如果业务比较复杂，那么使用这种方式也是不错的选择。</p>\n<h2><a id=\"_131\"></a>分页查询</h2>\n<p><code>mpj</code>中也能很好的支持列表查询中的分页功能，首先我们要在项目中加入分页拦截器：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Bean</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">MybatisPlusInterceptor</span> <span class=\"token function\">mybatisPlusInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">MybatisPlusInterceptor</span> interceptor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MybatisPlusInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">addInnerInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PaginationInnerInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DbType</span><span class=\"token punctuation\">.</span>H2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> interceptor<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>接下来改造上面的代码，调用<code>selectJoinPage()</code>方法：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">page</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OrderDto</span><span class=\"token punctuation\">&gt;</span></span> orderPage <span class=\"token operator\">=</span> orderMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectJoinPage</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OrderDto</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token class-name\">OrderDto</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">MPJLambdaWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Order</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Product</span><span class=\"token operator\">::</span><span class=\"token function\">getUnitPrice</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">selectAs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">OrderDto</span><span class=\"token operator\">::</span><span class=\"token function\">getUserName</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">selectAs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Product</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">OrderDto</span><span class=\"token operator\">::</span><span class=\"token function\">getProductName</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">leftJoin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getId</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Order</span><span class=\"token operator\">::</span><span class=\"token function\">getUserId</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">leftJoin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Product</span><span class=\"token operator\">::</span><span class=\"token function\">getId</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Order</span><span class=\"token operator\">::</span><span class=\"token function\">getProductId</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">orderByAsc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span><span class=\"token operator\">::</span><span class=\"token function\">getId</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    orderPage<span class=\"token punctuation\">.</span><span class=\"token function\">getRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>注意在这里需要添加一个分页参数的<code>Page</code>对象，我们再执行上面的代码，并对日志进行解析，查看sql语句：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\905a042e1ae049d08e2dcb3c5499a6fb.png\"/></p>\n<p>可以看到底层通过添加<code>limit</code>进行了分页，同理，<code>MPJQueryWrapper</code>也可以这样进行分页。</p>\n<h2><a id=\"_171\"></a>最后</h2>\n<p>附上<a href=\"https://gitee.com/best_handsome/mybatis-plus-join?_from=gitee_search\">mybatis-plus-join gitee地址</a><br/> <a href=\"https://gitee.com/best_handsome/mybatis-plus-join-demo\">代码示例地址</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-07-16 17:28:59", "summary": "作为的增强工具，简化了开发中的数据库操作。一旦遇到或的左右连接，还是得老老实实的打开文件，手写上一大段的语句。今天总结一下一款叫做的工具后面就简称了可以用类似中的方式来进行联表查询。引入依赖首先在项目"}