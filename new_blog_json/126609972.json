{"blogid": "126609972", "writerAge": "码龄4年", "writerBlogNum": "43", "writerCollect": "31", "writerComment": "4", "writerFan": "592", "writerGrade": "3级", "writerIntegral": "479", "writerName": "米斯特胖墩", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126609972.jpg", "writerRankTotal": "32427", "writerRankWeekly": "9770", "writerThumb": "6", "writerVisitNum": "23110", "blog_read_count": "194", "blog_time": "已于 2022-09-02 20:31:04 修改", "blog_title": "TypeScript 小结", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><strong>TypeScript 是什么？</strong></p>\n<p>TypeScript 是由微软开发的一种自由和开源的编程语言。它是 JavaScript 的一个超集，本质上是在 JavaScript 的基础上添加了可选的静态类型和基于类的面向对象编程。</p>\n<p><strong>TypeScript 和 JavaScript 的区别？</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\75112ca804ef4bdcb9b0a8a4a321bf8e.png\"/></p>\n<p><strong>TypeScript 的安装</strong></p>\n<pre><code class=\"prism language-shell\"><span class=\"token comment\"># npm安装</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g typescript\n<span class=\"token comment\"># 验证</span>\ntsc -v <span class=\"token comment\"># Version 4.6.4</span>\n<span class=\"token comment\"># 编译</span>\ntsc helloworld.ts <span class=\"token comment\"># helloworld.ts =&gt; helloworld.js</span>\n</code></pre>\n<p><strong>TypeScript 的数据类型</strong></p>\n<ul><li>Boolean 类型</li><li>Number 类型</li><li>String 类型</li><li>Symbol 类型</li><li>Array 类型</li><li>Enum 类型 \n  <ul><li>数字枚举</li></ul> <pre><code class=\"prism language-typescript\"><span class=\"token keyword\">enum</span> Direction <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token constant\">NORTH</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 默认初始值从0开始, 可手动指定</span>\n  <span class=\"token constant\">SOUTH</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">EAST</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">WEST</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>字符串枚举</li></ul> <pre><code class=\"prism language-typescript\"><span class=\"token keyword\">enum</span> Direction <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token constant\">NORTH</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"NORTH\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">SOUTH</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"SOUTH\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">EAST</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"EAST\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">WEST</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"WEST\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>常量枚举</li></ul> <pre><code class=\"prism language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">enum</span> Direction <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token constant\">NORTH</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">SOUTH</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">EAST</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">WEST</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>异构枚举</li></ul> <pre><code class=\"prism language-typescript\"><span class=\"token keyword\">enum</span> Enum <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">B</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">C</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">D</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"D\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">E</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">F</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li>Any 类型 \n  <ul><li>在 TypeScript 中，任何类型都可以归类为 any 类型，本质上 any 类型是类型系统的顶级类型（全局超级类型）。TypeScript 允许开发者对 any 类型的值执行任何操作，而无需事先执行任何形式的检查</li><li>使用 any 类型，可以很容易地编写出类型正确但在实际代码运行过程中有问题的代码，使用了 any 类型就无法使用 TypeScript 提供的大量的保护机制</li></ul> </li><li>Unknown 类型 \n  <ul><li>为了解决 any 类型带来的问题，TypeScript 3.0 引入了 unknown 类型</li><li>就像所有的类型都可以赋值给 any 类型一样，所有的类型也都可以赋值给 unknown 类型。这样使得 unknown 类型成为 TypeScript 类型系统的另一种顶级类型</li><li>unknown 类型只能被赋值给 any 类型和 unknown 类型本身</li></ul> </li><li>Tuple 类型 \n  <ul><li>元组是TypeScript 中特有的类型，其工作方式类似于数组，元组可用于定义具有有限数量的未命名属性的类型，每个属性都有一个关联的类型。使用元组时，必须提供每个属性的值</li></ul> <pre><code class=\"prism language-typescript\"><span class=\"token keyword\">let</span> tupleType<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\ntupleType <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"semlinker\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> </li><li>Void 类型 \n  <ul><li>void 类型与 any 类型相反，它表示没有任何类型，当一个函数没有返回值时，可以设置返回值类型为 void</li></ul> </li><li>Null 和 Undefined 类型</li><li>object，Object 和 {} 类型</li><li>Never 类型 \n  <ul><li>never 类型表示那些永远不存在的值的类型（例如那些总是会抛出异常或者根本不会有任何返回值的函数表达式或箭头函数表达式）</li></ul> </li></ul>\n<p><strong>TypeScript 的断言</strong></p>\n<ul><li>类型断言 \n  <ul><li>类型断言类似于类型转换，但是不进行特殊的数据检查和解构，它没有运行时的影响，只是在编译阶段起作用</li></ul> <pre><code class=\"prism language-typescript\"><span class=\"token keyword\">const</span> someValue<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"this is a string\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> strLength<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">&gt;</span>someValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 尖括号写法</span>\n<span class=\"token keyword\">const</span> strLength<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>someValue <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// as写法</span>\n</code></pre> </li><li>非空断言 \n  <ul><li>在上下文中当类型检查器无法断定类型时，一个新的后缀表达式操作符 ! 可以用于断言操作对象是非 null 和非 undefined 类型。具体而言，x! 将从 x 值域中排除 null 和 undefined</li></ul> <pre><code class=\"prism language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span>maybeString<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// Type 'string | null | undefined' is not assignable to type 'string'.</span>\n  <span class=\"token comment\">// Type 'undefined' is not assignable to type 'string'. </span>\n  <span class=\"token keyword\">const</span> onlyString<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> maybeString<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n  <span class=\"token keyword\">const</span> ignoreUndefinedAndNull<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> maybeString<span class=\"token operator\">!</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li></ul>\n<p><strong>TypeScript 的接口</strong></p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> \n  age<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可选属性</span>\n  <span class=\"token keyword\">readonly</span> sex<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 只读属性</span>\n  <span class=\"token punctuation\">[</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 任意属性</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> semlinker<span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"semlinker\"</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>TypeScript 接口与类型别名的区别？</strong></p>\n<ul><li>接口和类型别名都可以用来描述对象的形状或函数签名<pre><code class=\"prism language-typescript\"><span class=\"token comment\">// 接口</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{<!-- --></span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">SetPoint</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 类型别名</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Point</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">SetPoint</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n</code></pre> </li><li>与接口类型相比，类型别名可用于一些其他类型（比如原始类型、联合类型和元组）<pre><code class=\"prism language-typescript\"><span class=\"token comment\">// primitive</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Name</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// object</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PartialPointX</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PartialPointY</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// union</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PartialPoint</span> <span class=\"token operator\">=</span> PartialPointX <span class=\"token operator\">|</span> PartialPointY<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// tuple</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Data</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> </li><li>扩展<pre><code class=\"prism language-typescript\"><span class=\"token comment\">// Interface extends interface</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">PartialPointX</span> <span class=\"token punctuation\">{<!-- --></span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PartialPointX</span> <span class=\"token punctuation\">{<!-- --></span> \n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Type alias extends type alias</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PartialPointX</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Point</span> <span class=\"token operator\">=</span> PartialPointX <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{<!-- --></span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Interface extends type alias</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PartialPointX</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PartialPointX</span> <span class=\"token punctuation\">{<!-- --></span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Type alias extends interface</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">PartialPointX</span> <span class=\"token punctuation\">{<!-- --></span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Point</span> <span class=\"token operator\">=</span> PartialPointX <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{<!-- --></span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 与类型别名不同, 接口可以定义多次, 多个接口会被自动合并为单个接口</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{<!-- --></span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{<!-- --></span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> point<span class=\"token operator\">:</span> Point <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> x<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre> </li></ul>\n<p><strong>TypeScript 的泛型</strong></p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">identity</span> <span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> message<span class=\"token operator\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token generic-function\"><span class=\"token function\">identity</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Number<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">68</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Semlinker\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 我们也可以完全省略尖括号, 让编译器自动选择这些类型</span>\n<span class=\"token function\">identity</span><span class=\"token punctuation\">(</span><span class=\"token number\">68</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Semlinker\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 泛型接口</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">GenericIdentityFn<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 泛型类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">GenericNumber<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span> <span class=\"token punctuation\">{<!-- --></span>\n  zeroValue<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">add</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> myGenericNumber <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericNumber<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyGenericNumber<span class=\"token punctuation\">.</span>zeroValue <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nmyGenericNumber<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 泛型工具类型</span>\n<span class=\"token comment\">// Partial&lt;T&gt;的作用就是将某个类型里的属性全部变为可选项?</span>\n<span class=\"token comment\">// 首先通过keyof T拿到T的所有属性名, 然后使用in进行遍历, 将值赋给P</span>\n<span class=\"token comment\">// 最后通过T[P]取得相应的属性值, 中间的?号用于将所有属性变成可选</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Partial<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token punctuation\">[</span> <span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span> <span class=\"token constant\">P</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>TypeScript 的配置文件</strong></p>\n<ul><li>tsconfig.json 的作用 \n  <ul><li>用于标识 TypeScript 项目的根路径</li><li>用于配置 TypeScript 编译器</li><li>用于指定编译的文件</li></ul> </li><li>tsconfig.json 的重要字段 \n  <ul><li>files：设置要编译的文件的名称</li><li>include：设置需要进行编译的文件，支持路径模式匹配</li><li>exclude：设置无需进行编译的文件，支持路径模式匹配</li><li>compilerOptions：设置与编译流程相关的选项</li></ul> </li><li>compilerOptions 的选项<pre><code class=\"prism language-typescript\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token string-property property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token comment\">/* 基本选项 */</span>\n    <span class=\"token string-property property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es5\"</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 指定ECMAScript目标版本: 'ES3' (default), 'ES5', 'ES6'/'ES2015', 'ES2016', 'ES2017' or 'ESNEXT'</span>\n    <span class=\"token string-property property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>                  <span class=\"token comment\">// 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'</span>\n    <span class=\"token string-property property\">\"lib\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>                             <span class=\"token comment\">// 指定要包含在编译中的库文件</span>\n    <span class=\"token string-property property\">\"allowJs\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 允许编译javascript文件</span>\n    <span class=\"token string-property property\">\"checkJs\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 报告javascript文件中的错误</span>\n    <span class=\"token string-property property\">\"jsx\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"preserve\"</span><span class=\"token punctuation\">,</span>                     <span class=\"token comment\">// 指定jsx代码的生成: 'preserve', 'react-native' or 'react'</span>\n    <span class=\"token string-property property\">\"declaration\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                   <span class=\"token comment\">// 生成相应的'.d.ts'文件</span>\n    <span class=\"token string-property property\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                     <span class=\"token comment\">// 生成相应的'.map'文件</span>\n    <span class=\"token string-property property\">\"outFile\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 将输出文件合并为一个文件</span>\n    <span class=\"token string-property property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>                        <span class=\"token comment\">// 指定输出目录</span>\n    <span class=\"token string-property property\">\"rootDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 用来控制输出目录结构 --outDir.</span>\n    <span class=\"token string-property property\">\"removeComments\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                <span class=\"token comment\">// 删除编译后的所有的注释</span>\n    <span class=\"token string-property property\">\"noEmit\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                        <span class=\"token comment\">// 不生成输出文件</span>\n    <span class=\"token string-property property\">\"importHelpers\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                 <span class=\"token comment\">// 从tslib导入辅助工具函数</span>\n    <span class=\"token string-property property\">\"isolatedModules\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>               <span class=\"token comment\">// 将每个文件做为单独的模块(与 'ts.transpileModule'类似).</span>\n\n    <span class=\"token comment\">/* 严格的类型检查选项 */</span>\n    <span class=\"token string-property property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                        <span class=\"token comment\">// 启用所有严格类型检查选项</span>\n    <span class=\"token string-property property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                 <span class=\"token comment\">// 在表达式和声明上有隐含的any类型时报错</span>\n    <span class=\"token string-property property\">\"strictNullChecks\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>              <span class=\"token comment\">// 启用严格的null检查</span>\n    <span class=\"token string-property property\">\"noImplicitThis\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                <span class=\"token comment\">// 当this表达式值为any类型的时候, 生成一个错误</span>\n    <span class=\"token string-property property\">\"alwaysStrict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                  <span class=\"token comment\">// 以严格模式检查每个模块, 并在每个文件里加入 'use strict'</span>\n\n    <span class=\"token comment\">/* 额外的检查 */</span>\n    <span class=\"token string-property property\">\"noUnusedLocals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                <span class=\"token comment\">// 有未使用的变量时, 抛出错误</span>\n    <span class=\"token string-property property\">\"noUnusedParameters\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>            <span class=\"token comment\">// 有未使用的参数时, 抛出错误</span>\n    <span class=\"token string-property property\">\"noImplicitReturns\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>             <span class=\"token comment\">// 并不是所有函数里的代码都有返回值时, 抛出错误</span>\n    <span class=\"token string-property property\">\"noFallthroughCasesInSwitch\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 报告switch语句的fallthrough错误(即不允许 switch的case语句贯穿)</span>\n\n    <span class=\"token comment\">/* 模块解析选项 */</span>\n    <span class=\"token string-property property\">\"moduleResolution\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span>            <span class=\"token comment\">// 选择模块解析策略: 'node'(Node.js) or 'classic'(TypeScript pre-1.6)</span>\n    <span class=\"token string-property property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 用于解析非相对模块名称的基目录</span>\n    <span class=\"token string-property property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>                           <span class=\"token comment\">// 模块名到基于baseUrl的路径映射的列表</span>\n    <span class=\"token string-property property\">\"rootDirs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>                        <span class=\"token comment\">// 根文件夹列表, 其组合内容表示项目运行时的结构内容</span>\n    <span class=\"token string-property property\">\"typeRoots\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 包含类型声明的文件列表</span>\n    <span class=\"token string-property property\">\"types\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>                           <span class=\"token comment\">// 需要包含的类型声明文件名列表</span>\n    <span class=\"token string-property property\">\"allowSyntheticDefaultImports\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 允许从没有设置默认导出的模块中默认导入</span>\n\n    <span class=\"token comment\">/* Source Map Options */</span>\n    <span class=\"token string-property property\">\"sourceRoot\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>                    <span class=\"token comment\">// 指定调试器应该找到TypeScript文件而不是源文件的位置</span>\n    <span class=\"token string-property property\">\"mapRoot\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 指定调试器应该找到映射文件而不是生成文件的位置</span>\n    <span class=\"token string-property property\">\"inlineSourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>               <span class=\"token comment\">// 生成单个soucemaps文件而不是将sourcemaps 生成不同的文件</span>\n    <span class=\"token string-property property\">\"inlineSources\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                 <span class=\"token comment\">// 将代码与sourcemaps生成到一个文件中, 要求同时设置了 --inlineSourceMap或 --sourceMap属性</span>\n\n    <span class=\"token comment\">/* 其他选项 */</span>\n    <span class=\"token string-property property\">\"experimentalDecorators\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\">// 启用装饰器</span>\n    <span class=\"token string-property property\">\"emitDecoratorMetadata\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>          <span class=\"token comment\">// 为装饰器提供元数据的支持</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li></ul>\n<p><strong>TypeScript 的 .d.ts</strong></p>\n<p>.d.ts 文件是 TypeScript 用来声明变量、模块、type、interface 等等的。</p>\n<p>和纯 js 文件相比，在 .d.ts 文件中声明变量或者模块后，在其他地方可以不用 import 导入就能直接使用，并且还有语法提示。</p>\n<p>但并不是说创建了 .d.ts 文件，里面声明的东西就能生效，毕竟归根到底它也是 .ts 文件，需要进行预编译，所以需要在 tsconfig.json 文件里面的 include 数组里面添加这个文件。</p>\n<p>include 数组里面可以不用写 .d.ts 文件的绝对路径，可以通过 glob 通配符，匹配这个文件所在的文件夹或者是相对路径。</p>\n<p><strong>TypeScript 的 declare</strong></p>\n<p>.d.ts 文件中的顶级声明必须以 declare 或者 export 修饰符开头。</p>\n<p>通过 declare 声明的类型、变量和模块，在 include 包含的文件范围内，都可以直接引用而不用去 import 或者 import type 相应的变量或类型。</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token comment\">// declare声明一个类型</span>\n<span class=\"token comment\">// 在include包含的文件范围内可以直接使用这个type</span>\n<span class=\"token class-name\"><span class=\"token keyword\">declare</span></span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Asd</span> <span class=\"token punctuation\">{<!-- --></span>\n\tname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// declare声明一个模块</span>\n<span class=\"token comment\">// 在编辑ts文件的时候, 如果你想导入一个.css/.less/.png格式的文件, 如果没有经过declare是会提示语法错误的</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">'*.css'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">'*.less'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">'*.png'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// declare声明一个变量</span>\n<span class=\"token comment\">// 假如在项目中引入了一个sdk(以微信的sdk为例), 里面有一些全局的对象(比如wx), 但是如果不经过任何的声明, 在ts文件里面直接用wx.config(), 肯定会报错的</span>\n<span class=\"token comment\">// declare就是告诉ts编译器, 你担保这些变量和模块存在, 同时声明了相应类型, 在编译的时候不需要提示错误</span>\n\n<span class=\"token comment\">// declare声明一个作用域</span>\n<span class=\"token comment\">// 声明完之后在其他地方的ts就可以直接通过API.ResponseList引用到这个接口类型</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> <span class=\"token constant\">API</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ResponseList</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>.d.ts 文件的顶级声明 declare 最好不要和 export 同级使用，不然在其他 ts 文件中引用这个 .d.ts，就需要手动 import 导入了</li><li>在 .d.ts 文件里，如果顶级声明不用 export，declare 和直接写 type、interface 的效果是一样的，在其他任何地方都可以直接引用</li></ul>\n<p><strong>参考文档</strong></p>\n<ul><li>https://juejin.cn/post/6872111128135073806#heading-0</li><li>https://juejin.cn/post/7083869402001178655</li><li>https://www.tslang.cn/docs/handbook/tsconfig-json.html</li><li>https://juejin.cn/post/7018805943710253086#heading-102</li></ul>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-09-02 20:31:04", "summary": "是什么？是由微软开发的一种自由和开源的编程语言。它是的一个超集，本质上是在的基础上添加了可选的静态类型和基于类的面向对象编程。和的区别？在这里插入图片描述的安装安装验证编译的数据类型类型类型类型类型类"}