{"blogid": "126492132", "writerAge": "码龄3年", "writerBlogNum": "113", "writerCollect": "1133", "writerComment": "230", "writerFan": "766", "writerGrade": "5级", "writerIntegral": "2106", "writerName": "林夕07", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126492132.jpg", "writerRankTotal": "8964", "writerRankWeekly": "146", "writerThumb": "408", "writerVisitNum": "100022", "blog_read_count": "15742", "blog_time": "已于 2022-08-23 21:18:06 修改", "blog_title": "【深度学习】基于卷积神经网络（tensorflow）的人脸识别项目（四）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night-eighties\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#_1\">前言</a></li><li><a href=\"#_12\">基本思路</a></li><li><a href=\"#_22\">测试人脸识别效果</a></li><li><ul><li><a href=\"#_23\">设计思路</a></li><li><a href=\"#_25\">详细代码</a></li><li><ul><li><a href=\"#_26\">加载模型</a></li><li><a href=\"#_34\">人脸预测</a></li><li><a href=\"#_62\">主要逻辑</a></li></ul>\n</li><li><a href=\"#_138\">测试效果</a></li></ul>\n</li><li><a href=\"#_142\">总结</a></li><li><a href=\"#_146\">所有代码</a></li><li><ul><li><a href=\"#face_predict_use_keraspy_158\">face_predict_use_keras.py</a></li><li><a href=\"#keras_trainpy_228\">keras_train.py</a></li><li><a href=\"#load_datapy_459\">load_data.py</a></li><li><a href=\"#face_predict_use_keraspy_567\">face_predict_use_keras.py</a></li><li><a href=\"#_635\">以上就是全部代码啦。有啥疑问就评论区讨论奥。</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>前言</h1>\n<p>经过前段时间研究，从LeNet-5手写数字入门到最近研究的一篇天气识别。我想干一票大的，因为我本身从事的就是C++/Qt开发，对Qt还是比较熟悉，所以我想实现一个界面化的一个人脸识别。</p>\n<p>对卷积神经网络的概念比较陌生的可以看一看这篇文章：<a href=\"https://blog.csdn.net/qq_45254369/article/details/126216028?spm=1001.2014.3001.5502\">卷积实际上是干了什么</a><br/> 想了解神经网络的训练流程、或者环境搭建的可以看这篇文章：<a href=\"https://blog.csdn.net/qq_45254369/article/details/126110894?spm=1001.2014.3001.5502\">环境搭建与训练流程</a></p>\n<p><strong>如果想学习本项目请先去看<br/> 第一篇</strong>：<a href=\"https://blog.csdn.net/qq_45254369/article/details/126376276?spm=1001.2014.3001.5502\">基于卷积神经网络（tensorflow）的人脸识别项目（一）</a><br/> <strong>第二篇</strong>：<a href=\"https://blog.csdn.net/qq_45254369/article/details/126412029?spm=1001.2014.3001.5501\">基于卷积神经网络（tensorflow）的人脸识别项目（二）</a><br/> <strong>第三篇</strong>：<a href=\"https://blog.csdn.net/qq_45254369/article/details/126412574?spm=1001.2014.3001.5502\">基于卷积神经网络（tensorflow）的人脸识别项目（三）</a></p>\n<h1><a id=\"_12\"></a>基本思路</h1>\n<p>具体步骤如下：</p>\n<ol><li>首先需要收集数据，我的想法是通过OpenCV调用摄像头进行收集人脸照片。</li><li>然后进行预处理，主要是对数据集分类，训练集、验证集、测试集。</li><li>开始训练模型，提前创建好标签键值对。</li><li>测试人脸识别效果，通过OpenCV捕获人脸照片然后对图片进行预处理最后传入模型中，然后将识别的结果通过文字的形式打印在屏幕上，以此循环，直到输入q退出。</li></ol>\n<p><strong>本篇主要是对上述步骤中的第四步进行实现。最后分享整个全流程的完整项目代码。</strong></p>\n<h1><a id=\"_22\"></a>测试人脸识别效果</h1>\n<h2><a id=\"_23\"></a>设计思路</h2>\n<p>通过OpenCV打开摄像头捕捉人脸区域，然后对图片进行预处理（如灰度化、归一化等等），然后加载模型，把处理后的图片放入模型中进行预测，然后对预测的结果进行一个精度过滤就是对识别率低于90%的结果认为识别不准确，就会输出other表示不能高度识别。正常情况下输出每个文件所对应的label。</p>\n<h2><a id=\"_25\"></a>详细代码</h2>\n<h3><a id=\"_26\"></a>加载模型</h3>\n<p>将我们之前训练好的模型通过load_model方法进行加载。</p>\n<pre><code class=\"prism language-python\">\tMODEL_PATH <span class=\"token operator\">=</span> <span class=\"token string\">'./me.face.model.h5'</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">load_model</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> file_path<span class=\"token operator\">=</span>MODEL_PATH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> load_model<span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"_34\"></a>人脸预测</h3>\n<p>这里对图片进行了归一化处理，并对预测结果进行了精度过滤。<br/> <mark>注意</mark>：<code>K.image_dim_ordering() =\\= 'th'</code>: 如果报错的话请替换为<code>K.image_data_format() == 'channels_first'</code> “<code>channels_last</code>”对应原本的“<code>tf</code>”，“<code>channels_first</code>”对应原本的“<code>th</code>”。</p>\n<pre><code class=\"prism language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">face_predict</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> K<span class=\"token punctuation\">.</span>image_data_format<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'channels_first'</span> <span class=\"token keyword\">and</span> image<span class=\"token punctuation\">.</span>shape <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> IMAGE_SIZE<span class=\"token punctuation\">,</span> IMAGE_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            image <span class=\"token operator\">=</span> resize_image<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 尺寸必须与训练集一致都应该是IMAGE_SIZE x IMAGE_SIZE</span>\n            image <span class=\"token operator\">=</span> image<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> IMAGE_SIZE<span class=\"token punctuation\">,</span> IMAGE_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 与模型训练不同，这次只是针对1张图片进行预测</span>\n        <span class=\"token keyword\">elif</span> K<span class=\"token punctuation\">.</span>image_data_format<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'channels_last'</span> <span class=\"token keyword\">and</span> image<span class=\"token punctuation\">.</span>shape <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> IMAGE_SIZE<span class=\"token punctuation\">,</span> IMAGE_SIZE<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            image <span class=\"token operator\">=</span> resize_image<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span>\n            image <span class=\"token operator\">=</span> image<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> IMAGE_SIZE<span class=\"token punctuation\">,</span> IMAGE_SIZE<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 浮点并归一化</span>\n        image <span class=\"token operator\">=</span> image<span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">'float32'</span><span class=\"token punctuation\">)</span>\n        image <span class=\"token operator\">/=</span> <span class=\"token number\">255</span>\n\n        <span class=\"token comment\"># 给出输入属于各个类别的概率</span>\n        result <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>predict_proba<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result:'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\n        my_result <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        max_result <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result最大值下标:\"</span><span class=\"token punctuation\">,</span> my_result<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> max_result <span class=\"token operator\">&gt;</span> <span class=\"token number\">0.90</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> my_result\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n</code></pre>\n<h3><a id=\"_62\"></a>主要逻辑</h3>\n<p>主要分为以下几步骤：</p>\n<ol><li>加载模型</li><li>预处理(设置摄像头、人脸区域的边框颜色、haar分类器的路径、label数组等)</li><li>捕获一帧图片</li><li>对图片灰度化</li><li>计算出人脸区域并框出</li><li>将人脸区域交给识别模型进行识别</li><li>将识别结果进行屏幕打印</li><li>然后3-7步骤循环。</li><li>输入q退出识别，然后释放所占用的资源</li></ol>\n<p>这个逻辑不是很复杂，下面直接进行代码展示，在代码中也有详细的注释说明：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> cv2\n<span class=\"token keyword\">from</span> keras_train <span class=\"token keyword\">import</span> Model\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> Model<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\"># 加载模型</span>\n    model<span class=\"token punctuation\">.</span>load_model<span class=\"token punctuation\">(</span>file_path<span class=\"token operator\">=</span><span class=\"token string\">'./model/me.face.model.h5'</span><span class=\"token punctuation\">)</span>\n    \n    color <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token comment\"># 框住人脸的矩形边框颜色</span>\n    \n    cap <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>VideoCapture<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token comment\"># 捕获指定摄像头的实时视频流</span>\n    \n    cascade_path <span class=\"token operator\">=</span> <span class=\"token string\">\"./model/haarcascade_frontalface_alt2.xml\"</span><span class=\"token comment\"># 人脸识别分类器本地存储路径</span>\n\n    <span class=\"token comment\"># 循环检测识别人脸</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        _<span class=\"token punctuation\">,</span> frame <span class=\"token operator\">=</span> cap<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 读取一帧视频</span>\n\n        <span class=\"token comment\"># 图像灰化，降低计算复杂度</span>\n        frame_gray <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>cvtColor<span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>COLOR_BGR2GRAY<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 使用人脸识别分类器，读入分类器</span>\n        cascade <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>CascadeClassifier<span class=\"token punctuation\">(</span>cascade_path<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 利用分类器识别出哪个区域为人脸</span>\n        faceRects <span class=\"token operator\">=</span> cascade<span class=\"token punctuation\">.</span>detectMultiScale<span class=\"token punctuation\">(</span>frame_gray<span class=\"token punctuation\">,</span> scaleFactor<span class=\"token operator\">=</span><span class=\"token number\">1.2</span><span class=\"token punctuation\">,</span> minNeighbors<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> minSize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>faceRects<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> faceRect <span class=\"token keyword\">in</span> faceRects<span class=\"token punctuation\">:</span>\n                x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> h <span class=\"token operator\">=</span> faceRect\n\n                <span class=\"token comment\"># 截取脸部图像提交给模型识别这是谁</span>\n                image <span class=\"token operator\">=</span> frame<span class=\"token punctuation\">[</span>y <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span> y <span class=\"token operator\">+</span> h <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span> x <span class=\"token operator\">+</span> w <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\n                faceID <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>face_predict<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span>\n\n                <span class=\"token comment\"># </span>\n                human <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'use2'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'use3'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'use4'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'others'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'use5'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'LinXi07'</span><span class=\"token punctuation\">,</span>\n                         <span class=\"token number\">5</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'use7'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'use8'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'use1'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'use9'</span><span class=\"token punctuation\">}</span>\n\n                cv2<span class=\"token punctuation\">.</span>rectangle<span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> w <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> h <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">,</span> thickness<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n                <span class=\"token comment\"># 文字提示是谁</span>\n                cv2<span class=\"token punctuation\">.</span>putText<span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">,</span> human<span class=\"token punctuation\">[</span>faceID<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                            <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 坐标</span>\n                            cv2<span class=\"token punctuation\">.</span>FONT_HERSHEY_SIMPLEX<span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 字体</span>\n                            <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 字号</span>\n                            <span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 颜色</span>\n                            <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 字的线宽</span>\n\n        cv2<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token string\">\"Face Identification System\"</span><span class=\"token punctuation\">,</span> frame<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 等待10毫秒看是否有按键输入</span>\n        k <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>waitKey<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 如果输入q则退出循环</span>\n        <span class=\"token keyword\">if</span> k <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'q'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\n\n    <span class=\"token comment\"># 释放摄像头并销毁所有窗口</span>\n    cap<span class=\"token punctuation\">.</span>release<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>destroyAllWindows<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h2><a id=\"_138\"></a>测试效果</h2>\n<p>这里对模型进行测试，并支持多个人脸同时识别，且识别率较高。（<strong>忽略掉人脸</strong>）<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d7a5c3827416465e986d9fe6a3ea7b2e.png\"/></p>\n<h1><a id=\"_142\"></a>总结</h1>\n<p>从最开始的收集数据到中间的预处理再到后来的模型建立到最后的测试效果，这一路非常坎坷，不是数据格式不匹配导致报错，就是版本不匹配来回重装环境再就是模型识别率上不去。总算把这个完整的做出来了，路途坎坷但收获不菲。让我们一起加油吧！！！！</p>\n<h1><a id=\"_146\"></a>所有代码</h1>\n<p>这里我以文件进行分类，总共四个文件。</p>\n<table><thead><tr><th>文件名</th><th>说明</th></tr></thead><tbody><tr><td>frame_capture.py</td><td>制作数据集</td></tr><tr><td>keras_train.py</td><td>训练模型 评估模型</td></tr><tr><td>load_data.py</td><td>加载数据，预处理</td></tr><tr><td>face_predict_use_keras.py</td><td>预测模型</td></tr></tbody></table>\n<p>然后deep_learning用来存放每个人的照片。model用来存放模型好的模型以及harr分类器。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8199aaf6be2b478aa8cb07cf01ccab3d.png\"/></p>\n<h2><a id=\"face_predict_use_keraspy_158\"></a>face_predict_use_keras.py</h2>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> cv2\n<span class=\"token keyword\">import</span> sys\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">catch_usb_video</span><span class=\"token punctuation\">(</span>window_name<span class=\"token punctuation\">,</span> camera_idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">'''使用cv2.imshow()的时候，如果图片太大，会显示不全并且无法调整。\n    因此在cv2.imshow()的前面加上这样的一个语句：cv2.namedWindow('image', 0)，\n    得到的图像框就可以自行调整大小，可以拉伸进行自由调整。'''</span>\n    cv2<span class=\"token punctuation\">.</span>namedWindow<span class=\"token punctuation\">(</span>window_name<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 视频来源，可以来自一段已存好的视频，也可以直接来自USB摄像头</span>\n    cap <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>VideoCapture<span class=\"token punctuation\">(</span>camera_idx<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 告诉OpenCV使用人脸识别分类器  级联分类器</span>\n    <span class=\"token triple-quoted-string string\">'''\n    Haar特征是一种反映图像的灰度变化的，像素分模块求差值的一种特征。它分为三类：边缘特征、线性特征、中心特征和对角线特征。\n    '''</span>\n    classfier <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>CascadeClassifier<span class=\"token punctuation\">(</span><span class=\"token string\">\"./model/haarcascade_frontalface_alt2.xml\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 识别出人脸后要画的边框的颜色，RGB格式</span>\n    color <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n    num <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">while</span> cap<span class=\"token punctuation\">.</span>isOpened<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        ok<span class=\"token punctuation\">,</span> frame <span class=\"token operator\">=</span> cap<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 读取一帧数据</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> ok<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\n            <span class=\"token comment\"># 将当前帧转换成灰度图像</span>\n        grey <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>cvtColor<span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>COLOR_BGR2GRAY<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 人脸检测，1.2和2分别为图片缩放比例和需要检测的有效点数</span>\n        faceRects <span class=\"token operator\">=</span> classfier<span class=\"token punctuation\">.</span>detectMultiScale<span class=\"token punctuation\">(</span>grey<span class=\"token punctuation\">,</span> scaleFactor<span class=\"token operator\">=</span><span class=\"token number\">1.2</span><span class=\"token punctuation\">,</span> minNeighbors<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> minSize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#  faceRects = [405 237 222 222]</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>faceRects<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 大于0则检测到人脸</span>\n            <span class=\"token keyword\">for</span> faceRect <span class=\"token keyword\">in</span> faceRects<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 单独框出每一张人脸</span>\n                <span class=\"token comment\"># 在原图上框出需要保存的图</span>\n                x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> h <span class=\"token operator\">=</span> faceRect\n                cv2<span class=\"token punctuation\">.</span>rectangle<span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> w <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> h <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\"># 将当前帧保存为图片</span>\n                <span class=\"token comment\"># frame 是原图，(x - 10, y - 10) 是图片的左上角的那个点，(x + w + 10, y + h + 10)是图片右下角的点</span>\n                <span class=\"token comment\"># color, 2 颜色和线的宽度</span>\n                img_name <span class=\"token operator\">=</span> <span class=\"token string\">'%s/%d.jpg'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'./deep_learning/zm'</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span>\n                image <span class=\"token operator\">=</span> frame<span class=\"token punctuation\">[</span>y <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span> y <span class=\"token operator\">+</span> h <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span> x <span class=\"token operator\">+</span> w <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\n                cv2<span class=\"token punctuation\">.</span>imwrite<span class=\"token punctuation\">(</span>img_name<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">)</span>\n                num <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                <span class=\"token keyword\">if</span> num <span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 如果超过指定最大保存数量退出循环</span>\n                    <span class=\"token keyword\">break</span>\n            <span class=\"token comment\"># 画出矩形框</span>\n            cv2<span class=\"token punctuation\">.</span>rectangle<span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> w <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> h <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 显示当前捕捉到了多少人脸图片了，这样站在那里被拍摄时心里有个数，不用两眼一抹黑傻等着</span>\n            font <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>FONT_HERSHEY_SIMPLEX\n            cv2<span class=\"token punctuation\">.</span>putText<span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">,</span> <span class=\"token string\">'num:%d'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> font<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 超过指定最大保存数量结束程序</span>\n        <span class=\"token keyword\">if</span> num <span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\n        <span class=\"token comment\"># 显示图像</span>\n        cv2<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>window_name<span class=\"token punctuation\">,</span> frame<span class=\"token punctuation\">)</span>\n        c <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>waitKey<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> c <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'q'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\n    <span class=\"token comment\"># 释放摄像头并销毁所有窗口</span>\n    cap<span class=\"token punctuation\">.</span>release<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>destroyAllWindows<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    catch_usb_video<span class=\"token punctuation\">(</span><span class=\"token string\">\"face\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h2><a id=\"keras_trainpy_228\"></a>keras_train.py</h2>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>model_selection <span class=\"token keyword\">import</span> train_test_split\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>preprocessing<span class=\"token punctuation\">.</span>image <span class=\"token keyword\">import</span> ImageDataGenerator\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Sequential\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>layers <span class=\"token keyword\">import</span> Dense<span class=\"token punctuation\">,</span> Dropout<span class=\"token punctuation\">,</span> Activation<span class=\"token punctuation\">,</span> Flatten\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>layers <span class=\"token keyword\">import</span> Convolution2D<span class=\"token punctuation\">,</span> MaxPooling2D\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>optimizers <span class=\"token keyword\">import</span> SGD\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>utils <span class=\"token keyword\">import</span> np_utils\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> load_model\n<span class=\"token keyword\">from</span> keras <span class=\"token keyword\">import</span> backend <span class=\"token keyword\">as</span> K\n<span class=\"token keyword\">from</span> load_data <span class=\"token keyword\">import</span> load_dataset<span class=\"token punctuation\">,</span> resize_image<span class=\"token punctuation\">,</span> IMAGE_SIZE\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dataset</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> path_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 训练集</span>\n        self<span class=\"token punctuation\">.</span>train_images <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>train_labels <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n        <span class=\"token comment\"># 验证集</span>\n        self<span class=\"token punctuation\">.</span>valid_images <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>valid_labels <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n        <span class=\"token comment\"># 测试集</span>\n        self<span class=\"token punctuation\">.</span>test_images <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>test_labels <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n        <span class=\"token comment\"># 数据集加载路径</span>\n        self<span class=\"token punctuation\">.</span>path_name <span class=\"token operator\">=</span> path_name\n\n        <span class=\"token comment\"># 当前库采用的维度顺序</span>\n        self<span class=\"token punctuation\">.</span>input_shape <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token comment\"># 加载数据集并按照交叉验证的原则划分数据集并进行相关预处理工作</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> img_rows<span class=\"token operator\">=</span>IMAGE_SIZE<span class=\"token punctuation\">,</span> img_cols<span class=\"token operator\">=</span>IMAGE_SIZE<span class=\"token punctuation\">,</span>\n             img_channels<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> nb_classes<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 加载数据集到内存</span>\n        images<span class=\"token punctuation\">,</span> labels <span class=\"token operator\">=</span> load_dataset<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>path_name<span class=\"token punctuation\">)</span>\n\n        train_images<span class=\"token punctuation\">,</span> valid_images<span class=\"token punctuation\">,</span> train_labels<span class=\"token punctuation\">,</span> valid_labels <span class=\"token operator\">=</span> train_test_split<span class=\"token punctuation\">(</span>images<span class=\"token punctuation\">,</span> labels<span class=\"token punctuation\">,</span> test_size<span class=\"token operator\">=</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span>\n                                                                                  random_state<span class=\"token operator\">=</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        _<span class=\"token punctuation\">,</span> test_images<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">,</span> test_labels <span class=\"token operator\">=</span> train_test_split<span class=\"token punctuation\">(</span>images<span class=\"token punctuation\">,</span> labels<span class=\"token punctuation\">,</span> test_size<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n                                                          random_state<span class=\"token operator\">=</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 当前的维度顺序如果为'th'，则输入图片数据时的顺序为：channels,rows,cols，否则:rows,cols,channels</span>\n        <span class=\"token comment\"># 这部分代码就是根据keras库要求的维度顺序重组训练数据集</span>\n       <span class=\"token comment\"># if K.image_dim_ordering() == 'th':  “channels_last”对应原本的“tf”，“channels_first”对应原本的“th”。</span>\n        <span class=\"token keyword\">if</span> K<span class=\"token punctuation\">.</span>image_data_format<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'channels_first'</span><span class=\"token punctuation\">:</span>\n            train_images <span class=\"token operator\">=</span> train_images<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>train_images<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> img_channels<span class=\"token punctuation\">,</span> img_rows<span class=\"token punctuation\">,</span> img_cols<span class=\"token punctuation\">)</span>\n            valid_images <span class=\"token operator\">=</span> valid_images<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>valid_images<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> img_channels<span class=\"token punctuation\">,</span> img_rows<span class=\"token punctuation\">,</span> img_cols<span class=\"token punctuation\">)</span>\n            test_images <span class=\"token operator\">=</span> test_images<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>test_images<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> img_channels<span class=\"token punctuation\">,</span> img_rows<span class=\"token punctuation\">,</span> img_cols<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>input_shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>img_channels<span class=\"token punctuation\">,</span> img_rows<span class=\"token punctuation\">,</span> img_cols<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            train_images <span class=\"token operator\">=</span> train_images<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>train_images<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> img_rows<span class=\"token punctuation\">,</span> img_cols<span class=\"token punctuation\">,</span> img_channels<span class=\"token punctuation\">)</span>\n            valid_images <span class=\"token operator\">=</span> valid_images<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>valid_images<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> img_rows<span class=\"token punctuation\">,</span> img_cols<span class=\"token punctuation\">,</span> img_channels<span class=\"token punctuation\">)</span>\n            test_images <span class=\"token operator\">=</span> test_images<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>test_images<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> img_rows<span class=\"token punctuation\">,</span> img_cols<span class=\"token punctuation\">,</span> img_channels<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>input_shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>img_rows<span class=\"token punctuation\">,</span> img_cols<span class=\"token punctuation\">,</span> img_channels<span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># 输出训练集、验证集、测试集的数量</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>train_images<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'train samples'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>valid_images<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'valid samples'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>test_images<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'test samples'</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># 我们的模型使用categorical_crossentropy作为损失函数，因此需要根据类别数量nb_classes将</span>\n            <span class=\"token comment\"># 类别标签进行one-hot编码使其向量化，在这里我们的类别只有两种，经过转化后标签数据变为二维</span>\n            train_labels <span class=\"token operator\">=</span> np_utils<span class=\"token punctuation\">.</span>to_categorical<span class=\"token punctuation\">(</span>train_labels<span class=\"token punctuation\">,</span> nb_classes<span class=\"token punctuation\">)</span>\n            valid_labels <span class=\"token operator\">=</span> np_utils<span class=\"token punctuation\">.</span>to_categorical<span class=\"token punctuation\">(</span>valid_labels<span class=\"token punctuation\">,</span> nb_classes<span class=\"token punctuation\">)</span>\n            test_labels <span class=\"token operator\">=</span> np_utils<span class=\"token punctuation\">.</span>to_categorical<span class=\"token punctuation\">(</span>test_labels<span class=\"token punctuation\">,</span> nb_classes<span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># 像素数据浮点化以便归一化</span>\n            train_images <span class=\"token operator\">=</span> train_images<span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">'float32'</span><span class=\"token punctuation\">)</span>\n            valid_images <span class=\"token operator\">=</span> valid_images<span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">'float32'</span><span class=\"token punctuation\">)</span>\n            test_images <span class=\"token operator\">=</span> test_images<span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">'float32'</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># 将其归一化,图像的各像素值归一化到0~1区间</span>\n            train_images <span class=\"token operator\">/=</span> <span class=\"token number\">255</span>\n            valid_images <span class=\"token operator\">/=</span> <span class=\"token number\">255</span>\n            test_images <span class=\"token operator\">/=</span> <span class=\"token number\">255</span>\n\n            self<span class=\"token punctuation\">.</span>train_images <span class=\"token operator\">=</span> train_images\n            self<span class=\"token punctuation\">.</span>valid_images <span class=\"token operator\">=</span> valid_images\n            self<span class=\"token punctuation\">.</span>test_images <span class=\"token operator\">=</span> test_images\n            self<span class=\"token punctuation\">.</span>train_labels <span class=\"token operator\">=</span> train_labels\n            self<span class=\"token punctuation\">.</span>valid_labels <span class=\"token operator\">=</span> valid_labels\n            self<span class=\"token punctuation\">.</span>test_labels <span class=\"token operator\">=</span> test_labels\n\n\n<span class=\"token comment\"># CNN网络模型类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Model</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n        <span class=\"token comment\"># 建立模型</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">build_model</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> dataset<span class=\"token punctuation\">,</span> nb_classes<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 构建一个空的网络模型，它是一个线性堆叠模型，各神经网络层会被顺序添加，专业名称为序贯模型或线性堆叠模型</span>\n        self<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 以下代码将顺序添加CNN网络需要的各层，一个add就是一个网络层</span>\n        self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Convolution2D<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> border_mode<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span>\n                                     input_shape<span class=\"token operator\">=</span>dataset<span class=\"token punctuation\">.</span>input_shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 1 2维卷积层</span>\n        self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2 激活函数层</span>\n\n        self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Convolution2D<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 3 2维卷积层</span>\n        self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 4 激活函数层</span>\n\n        self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>MaxPooling2D<span class=\"token punctuation\">(</span>pool_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 5 池化层</span>\n        self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 6 Dropout层</span>\n\n        self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Convolution2D<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> border_mode<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 7  2维卷积层</span>\n        self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 8  激活函数层</span>\n\n        self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Convolution2D<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 9  2维卷积层</span>\n        self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 10 激活函数层</span>\n\n        self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>MaxPooling2D<span class=\"token punctuation\">(</span>pool_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 11 池化层</span>\n        self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 12 Dropout层</span>\n\n        self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Flatten<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 13 Flatten层</span>\n        self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 14 Dense层,又被称作全连接层</span>\n        self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 15 激活函数层</span>\n        self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 16 Dropout层</span>\n        self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Dense<span class=\"token punctuation\">(</span>nb_classes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 17 Dense层</span>\n        self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'softmax'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 18 分类层，输出最终结果</span>\n\n        <span class=\"token comment\"># 输出模型概况</span>\n        self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>summary<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 训练模型</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">train</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> dataset<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> nb_epoch<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> data_augmentation<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 参数batch_size的作用即在于此，其指定每次迭代训练样本的数量</span>\n        <span class=\"token comment\"># nb_epoch 训练轮换次数</span>\n        sgd <span class=\"token operator\">=</span> SGD<span class=\"token punctuation\">(</span>lr<span class=\"token operator\">=</span><span class=\"token number\">0.01</span><span class=\"token punctuation\">,</span> decay<span class=\"token operator\">=</span><span class=\"token number\">1e-6</span><span class=\"token punctuation\">,</span>\n                  momentum<span class=\"token operator\">=</span><span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span> nesterov<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 采用SGD+momentum的优化器进行训练，首先生成一个优化器对象</span>\n        self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>loss<span class=\"token operator\">=</span><span class=\"token string\">'categorical_crossentropy'</span><span class=\"token punctuation\">,</span>\n                           optimizer<span class=\"token operator\">=</span>sgd<span class=\"token punctuation\">,</span>\n                           metrics<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'accuracy'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 完成实际的模型配置工作</span>\n\n        <span class=\"token comment\"># 不使用数据提升，所谓的提升就是从我们提供的训练数据中利用旋转、翻转、加噪声等方法创造新的</span>\n        <span class=\"token comment\"># 训练数据，有意识的提升训练数据规模，增加模型训练量</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> data_augmentation<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">.</span>train_images<span class=\"token punctuation\">,</span>\n                           dataset<span class=\"token punctuation\">.</span>train_labels<span class=\"token punctuation\">,</span>\n                           batch_size<span class=\"token operator\">=</span>batch_size<span class=\"token punctuation\">,</span>\n                           nb_epoch<span class=\"token operator\">=</span>nb_epoch<span class=\"token punctuation\">,</span>\n                           validation_data<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">.</span>valid_images<span class=\"token punctuation\">,</span> dataset<span class=\"token punctuation\">.</span>valid_labels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                           shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 使用实时数据提升</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 定义数据生成器用于数据提升，其返回一个生成器对象datagen，datagen每被调用一</span>\n            <span class=\"token comment\"># 次其生成一组数据（顺序生成），节省内存，其实就是python的数据生成器</span>\n            datagen <span class=\"token operator\">=</span> ImageDataGenerator<span class=\"token punctuation\">(</span>\n                featurewise_center<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 是否使输入数据去中心化（均值为0），</span>\n                samplewise_center<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 是否使输入数据的每个样本均值为0</span>\n                featurewise_std_normalization<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 是否数据标准化（输入数据除以数据集的标准差）</span>\n                samplewise_std_normalization<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 是否将每个样本数据除以自身的标准差</span>\n                zca_whitening<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 是否对输入数据施以ZCA白化</span>\n                rotation_range<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 数据提升时图片随机转动的角度(范围为0～180)</span>\n                width_shift_range<span class=\"token operator\">=</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 数据提升时图片水平偏移的幅度（单位为图片宽度的占比，0~1之间的浮点数）</span>\n                height_shift_range<span class=\"token operator\">=</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 同上，只不过这里是垂直</span>\n                horizontal_flip<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 是否进行随机水平翻转</span>\n                vertical_flip<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 是否进行随机垂直翻转</span>\n\n            <span class=\"token comment\"># 计算整个训练样本集的数量以用于特征值归一化、ZCA白化等处理</span>\n            datagen<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">.</span>train_images<span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># 利用生成器开始训练模型</span>\n            self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>fit_generator<span class=\"token punctuation\">(</span>datagen<span class=\"token punctuation\">.</span>flow<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">.</span>train_images<span class=\"token punctuation\">,</span> dataset<span class=\"token punctuation\">.</span>train_labels<span class=\"token punctuation\">,</span>\n                                                  batch_size<span class=\"token operator\">=</span>batch_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                     samples_per_epoch<span class=\"token operator\">=</span>dataset<span class=\"token punctuation\">.</span>train_images<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                     nb_epoch<span class=\"token operator\">=</span>nb_epoch<span class=\"token punctuation\">,</span>\n                                     validation_data<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">.</span>valid_images<span class=\"token punctuation\">,</span> dataset<span class=\"token punctuation\">.</span>valid_labels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    MODEL_PATH <span class=\"token operator\">=</span> <span class=\"token string\">'./me.face.model.h5'</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">save_model</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> file_path<span class=\"token operator\">=</span>MODEL_PATH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">load_model</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> file_path<span class=\"token operator\">=</span>MODEL_PATH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> load_model<span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> dataset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        score <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>evaluate<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">.</span>test_images<span class=\"token punctuation\">,</span> dataset<span class=\"token punctuation\">.</span>test_labels<span class=\"token punctuation\">,</span> verbose<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s: %.2f%%\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>metrics_names<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">face_predict</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># if K.image_dim_ordering() == 'th':  “channels_last”对应原本的“tf”，“channels_first”对应原本的“th”。</span>\n        <span class=\"token keyword\">if</span> K<span class=\"token punctuation\">.</span>image_data_format<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'channels_first'</span> <span class=\"token keyword\">and</span> image<span class=\"token punctuation\">.</span>shape <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> IMAGE_SIZE<span class=\"token punctuation\">,</span> IMAGE_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            image <span class=\"token operator\">=</span> resize_image<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 尺寸必须与训练集一致都应该是IMAGE_SIZE x IMAGE_SIZE</span>\n            image <span class=\"token operator\">=</span> image<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> IMAGE_SIZE<span class=\"token punctuation\">,</span> IMAGE_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 与模型训练不同，这次只是针对1张图片进行预测</span>\n        <span class=\"token keyword\">elif</span> K<span class=\"token punctuation\">.</span>image_data_format<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'channels_last'</span> <span class=\"token keyword\">and</span> image<span class=\"token punctuation\">.</span>shape <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> IMAGE_SIZE<span class=\"token punctuation\">,</span> IMAGE_SIZE<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            image <span class=\"token operator\">=</span> resize_image<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span>\n            image <span class=\"token operator\">=</span> image<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> IMAGE_SIZE<span class=\"token punctuation\">,</span> IMAGE_SIZE<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 浮点并归一化</span>\n        image <span class=\"token operator\">=</span> image<span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">'float32'</span><span class=\"token punctuation\">)</span>\n        image <span class=\"token operator\">/=</span> <span class=\"token number\">255</span>\n\n        <span class=\"token comment\"># 给出输入属于各个类别的概率</span>\n        result <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>predict_proba<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result:'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\n        my_result <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        max_result <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result最大值下标:\"</span><span class=\"token punctuation\">,</span> my_result<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> max_result <span class=\"token operator\">&gt;</span> <span class=\"token number\">0.90</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> my_result\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    dataset <span class=\"token operator\">=</span> Dataset<span class=\"token punctuation\">(</span><span class=\"token string\">'.\\\\deep_learning'</span><span class=\"token punctuation\">)</span>\n    dataset<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>nb_classes<span class=\"token operator\">=</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 训练模型</span>\n    model <span class=\"token operator\">=</span> Model<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    model<span class=\"token punctuation\">.</span>build_model<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">,</span> nb_classes<span class=\"token operator\">=</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n    model<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">)</span>\n    model<span class=\"token punctuation\">.</span>save_model<span class=\"token punctuation\">(</span>file_path<span class=\"token operator\">=</span><span class=\"token string\">'./model/me.face.model.h5'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 评估模型，确认模型的精度是否能达到要求</span>\n    model <span class=\"token operator\">=</span> Model<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    model<span class=\"token punctuation\">.</span>load_model<span class=\"token punctuation\">(</span>file_path<span class=\"token operator\">=</span><span class=\"token string\">'./model/me.face.model.h5'</span><span class=\"token punctuation\">)</span>\n    model<span class=\"token punctuation\">.</span>evaluate<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h2><a id=\"load_datapy_459\"></a>load_data.py</h2>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> cv2\n\nIMAGE_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">64</span>\n\n\n<span class=\"token comment\"># 按照指定图像大小调整尺寸</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">resize_image</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> height<span class=\"token operator\">=</span>IMAGE_SIZE<span class=\"token punctuation\">,</span> width<span class=\"token operator\">=</span>IMAGE_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    top<span class=\"token punctuation\">,</span> bottom<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 获取图像尺寸</span>\n    h<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> image<span class=\"token punctuation\">.</span>shape\n\n    <span class=\"token comment\"># 对于长宽不相等的图片，找到最长的一边</span>\n    longest_edge <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 计算短边需要增加多上像素宽度使其与长边等长</span>\n    <span class=\"token keyword\">if</span> h <span class=\"token operator\">&lt;</span> longest_edge<span class=\"token punctuation\">:</span>\n        dh <span class=\"token operator\">=</span> longest_edge <span class=\"token operator\">-</span> h\n        top <span class=\"token operator\">=</span> dh <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n        bottom <span class=\"token operator\">=</span> dh <span class=\"token operator\">-</span> top\n    <span class=\"token keyword\">elif</span> w <span class=\"token operator\">&lt;</span> longest_edge<span class=\"token punctuation\">:</span>\n        dw <span class=\"token operator\">=</span> longest_edge <span class=\"token operator\">-</span> w\n        left <span class=\"token operator\">=</span> dw <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n        right <span class=\"token operator\">=</span> dw <span class=\"token operator\">-</span> left\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n\n        <span class=\"token comment\"># RGB颜色</span>\n    BLACK <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># 给图像增加边界，是图片长、宽等长，cv2.BORDER_CONSTANT指定边界颜色由value指定</span>\n    constant <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>copyMakeBorder<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> top<span class=\"token punctuation\">,</span> bottom<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>BORDER_CONSTANT<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>BLACK<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 调整图像大小并返回</span>\n    <span class=\"token keyword\">return</span> cv2<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span>constant<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 读取训练数据</span>\nimages <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nlabels <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">read_path</span><span class=\"token punctuation\">(</span>path_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> dir_item <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>path_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 从初始路径开始叠加，合并成可识别的操作路径</span>\n        full_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>abspath<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>path_name<span class=\"token punctuation\">,</span> dir_item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#</span>\n        <span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isdir<span class=\"token punctuation\">(</span>full_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 如果是文件夹，继续递归调用</span>\n            read_path<span class=\"token punctuation\">(</span>full_path<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 文件</span>\n            <span class=\"token keyword\">if</span> dir_item<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                image <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span>full_path<span class=\"token punctuation\">)</span>\n                \n                image <span class=\"token operator\">=</span> resize_image<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> IMAGE_SIZE<span class=\"token punctuation\">,</span> IMAGE_SIZE<span class=\"token punctuation\">)</span>\n\n                images<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span>\n                labels<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>path_name<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> images<span class=\"token punctuation\">,</span> labels\n\n<span class=\"token comment\"># 给文件夹后缀，加标注，使其向量化，如果添加新的人，就可以对应文件夹和下标 </span>\n<span class=\"token comment\"># 这里我随便写的label  因为涉及到隐私。</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">indentify</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> label<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'use'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">elif</span> label<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'use'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">elif</span> label<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'use'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span>\n    <span class=\"token keyword\">elif</span> label<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'use'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">3</span>\n    <span class=\"token keyword\">elif</span> label<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'use'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">4</span>\n    <span class=\"token keyword\">elif</span> label<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'use'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">5</span>\n    <span class=\"token keyword\">elif</span> label<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'use'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">6</span>\n    <span class=\"token keyword\">elif</span> label<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'use'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">7</span>\n    <span class=\"token keyword\">elif</span> label<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'use'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">8</span>\n\n\n\n<span class=\"token comment\"># 从指定路径读取训练数据</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">load_dataset</span><span class=\"token punctuation\">(</span>path_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    images<span class=\"token punctuation\">,</span> labels <span class=\"token operator\">=</span> read_path<span class=\"token punctuation\">(</span>path_name<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 将输入的所有图片转成四维数组，尺寸为(图片数量*IMAGE_SIZE*IMAGE_SIZE*3)</span>\n    <span class=\"token comment\"># 图片为64 * 64像素,一个像素3个颜色值(RGB)</span>\n    images <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>images<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>images<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\n\n    labels <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>indentify<span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> label <span class=\"token keyword\">in</span> labels<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>images<span class=\"token punctuation\">,</span>labels<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> images<span class=\"token punctuation\">,</span> labels\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    images<span class=\"token punctuation\">,</span> labels <span class=\"token operator\">=</span> load_dataset<span class=\"token punctuation\">(</span><span class=\"token string\">'./deep_learning'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"face_predict_use_keraspy_567\"></a>face_predict_use_keras.py</h2>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> cv2\n<span class=\"token keyword\">from</span> keras_train <span class=\"token keyword\">import</span> Model\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 加载模型</span>\n    model <span class=\"token operator\">=</span> Model<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    model<span class=\"token punctuation\">.</span>load_model<span class=\"token punctuation\">(</span>file_path<span class=\"token operator\">=</span><span class=\"token string\">'./model/me.face.model.h5'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 框住人脸的矩形边框颜色</span>\n    color <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 捕获指定摄像头的实时视频流</span>\n    cap <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>VideoCapture<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 人脸识别分类器本地存储路径</span>\n    cascade_path <span class=\"token operator\">=</span> <span class=\"token string\">\"./model/haarcascade_frontalface_alt2.xml\"</span>\n\n    <span class=\"token comment\"># 循环检测识别人脸</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        _<span class=\"token punctuation\">,</span> frame <span class=\"token operator\">=</span> cap<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 读取一帧视频</span>\n\n        <span class=\"token comment\"># 图像灰化，降低计算复杂度</span>\n        frame_gray <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>cvtColor<span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>COLOR_BGR2GRAY<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 使用人脸识别分类器，读入分类器</span>\n        cascade <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>CascadeClassifier<span class=\"token punctuation\">(</span>cascade_path<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 利用分类器识别出哪个区域为人脸</span>\n        faceRects <span class=\"token operator\">=</span> cascade<span class=\"token punctuation\">.</span>detectMultiScale<span class=\"token punctuation\">(</span>frame_gray<span class=\"token punctuation\">,</span> scaleFactor<span class=\"token operator\">=</span><span class=\"token number\">1.2</span><span class=\"token punctuation\">,</span> minNeighbors<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> minSize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>faceRects<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> faceRect <span class=\"token keyword\">in</span> faceRects<span class=\"token punctuation\">:</span>\n                x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> h <span class=\"token operator\">=</span> faceRect\n\n                <span class=\"token comment\"># 截取脸部图像提交给模型识别这是谁</span>\n                image <span class=\"token operator\">=</span> frame<span class=\"token punctuation\">[</span>y <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span> y <span class=\"token operator\">+</span> h <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span> x <span class=\"token operator\">+</span> w <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\n                faceID <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>face_predict<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span>\n\n                <span class=\"token comment\"># 这里我随便写的，因为涉及到隐私。</span>\n                human <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'use3'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'use4'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'use8'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'others'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'use88'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'LinXi07'</span><span class=\"token punctuation\">,</span>\n                         <span class=\"token number\">5</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'use2'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'use'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'use1'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'use7'</span><span class=\"token punctuation\">}</span>\n\n                cv2<span class=\"token punctuation\">.</span>rectangle<span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> w <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> h <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">,</span> thickness<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n                <span class=\"token comment\"># 文字提示是谁</span>\n                cv2<span class=\"token punctuation\">.</span>putText<span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">,</span> human<span class=\"token punctuation\">[</span>faceID<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                            <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 坐标</span>\n                            cv2<span class=\"token punctuation\">.</span>FONT_HERSHEY_SIMPLEX<span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 字体</span>\n                            <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 字号</span>\n                            <span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 颜色</span>\n                            <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 字的线宽</span>\n\n        cv2<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token string\">\"Face Identification System\"</span><span class=\"token punctuation\">,</span> frame<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 等待10毫秒看是否有按键输入</span>\n        k <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>waitKey<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 如果输入q则退出循环</span>\n        <span class=\"token keyword\">if</span> k <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'q'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\n\n    <span class=\"token comment\"># 释放摄像头并销毁所有窗口</span>\n    cap<span class=\"token punctuation\">.</span>release<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>destroyAllWindows<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h2><a id=\"_635\"></a>以上就是全部代码啦。有啥疑问就评论区讨论奥。</h2>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 1, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-23 21:18:06", "summary": "目录前言基本思路测试人脸识别效果设计思路详细代码加载模型人脸预测主要逻辑测试效果总结所有代码以上就是全部代码啦。有啥疑问就评论区讨论奥。前言经过前段时间研究，从手写数字入门到最近研究的一篇天气识别。我"}