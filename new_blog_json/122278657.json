{"blogid": "122278657", "writerAge": "码龄1年", "writerBlogNum": "67", "writerCollect": "2132", "writerComment": "2068", "writerFan": "8564", "writerGrade": "6级", "writerIntegral": "5939", "writerName": "芒果再努力", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122278657.jpg", "writerRankTotal": "2484", "writerRankWeekly": "1883", "writerThumb": "2422", "writerVisitNum": "79805", "blog_read_count": "9200", "blog_time": "于 2022-01-03 10:50:24 发布", "blog_title": "舍友洗了个澡，我就解决了相交链表问题", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h3><a id=\"_0\"></a>题目要求</h3>\n<blockquote>\n<p>链接：<a href=\"https://leetcode-cn.com/problems/intersection-of-two-linked-lists/description/\">160. 相交链表 - 力扣（LeetCode） (leetcode-cn.com)</a></p>\n</blockquote>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\61de2b497711479390739f40e8dedb4a.png\"/></p>\n<hr/>\n<p>注意：相交链表是Y形状的，不是X形状的。一个结点只有一个next指向<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bd94e4d7a6784288aa4d97bccc284d8a.png\"/></p>\n<hr/>\n<h2><a id=\"_15\"></a>如何判断相交：</h2>\n<p>方法：比较两个链表的尾结点地址是否一致</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0b0164d66575441baee5137994f408d3.png\"/></p>\n<hr/>\n<blockquote>\n<p>相交和不相交的不同之处</p>\n<p>相交：两个链表从相交结点开始，后面的结点的地址一致==&gt;尾结点相同</p>\n<p>不相交：两个链表的所有结点的地址都是不相同的</p>\n</blockquote>\n<hr/>\n<p>所以只需要遍历两个链表，找到两个链表的尾结点，然后比较是否相等。如果相等则进行下一步，找相交起始节点。如果不相等 -&gt; 直接返回NULL</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//找两个链表的尾</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>tailA<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>tailB<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//判断是否相等</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tailA <span class=\"token operator\">!=</span> tailB<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h2><a id=\"_50\"></a>如果相交，如何找到相交起始结点</h2>\n<p><strong>错误思路：</strong></p>\n<p>同时遍历两个链表，比较对应结点的地址是否一致</p>\n<blockquote>\n<p>不可行原因：</p>\n<p><strong>两个链表的长度不一样，如果二者在相交结点前的长度一致，则可以这样比较</strong>(<mark>这也是后面思路2的想法</mark>)</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\361c6705b924479ba8fd950545a57042.png\"/></p>\n</blockquote>\n<blockquote>\n<p>若相交结点前，两个链表的长度不一致，则不可行！</p>\n</blockquote>\n<hr/>\n<h3><a id=\"1_67\"></a>思路1：</h3>\n<p>若两个链表相交，则它们至少有一个结点的地址相同(从相交起始结点向后，结点的地址都相同)</p>\n<ul><li> <p>A链表中的每个结点分别和B链表中的所有结点进行地址比较</p>\n<ul><li> <p>用cur遍历A链表，B链表每次进入循环都从头开始遍历</p> </li><li> <p>如果结点地址相同，该结点就是开相交结点，返回该位置即可</p> </li><li> <p>如果不相同，继续比较。</p> </li></ul> </li><li> <p>循环结束条件：A链表的所有结点都比较结束，即cur为NULL跳出循环。比较完了都没有返回-&gt;说明不相交</p> </li></ul>\n<hr/>\n<p>当然，也可以用B链表的每个结点分别和A链表中的所有结点进行地址比较</p>\n<hr/>\n<p>时间复杂度分析：假设A链表有M个结点，B链表有N个结点</p>\n<blockquote>\n<p>时间复杂度为：O(M*N)</p>\n</blockquote>\n<hr/>\n<h4><a id=\"_92\"></a>代码</h4>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span> <span class=\"token operator\">*</span><span class=\"token function\">getIntersectionNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span> <span class=\"token operator\">*</span>headA<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span> <span class=\"token operator\">*</span>headB<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//如果其中一个链表为空，不可能存在相交</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>headA  <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token operator\">||</span> headB <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n   \n    <span class=\"token comment\">//A中的每个结点和B分别比较(B和A比较也可以)，看二者的地址是否一致 </span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> curA <span class=\"token operator\">=</span> headA<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> curB <span class=\"token operator\">=</span> headB<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>curA<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//A链表的每个结点和整条B链表进行比较</span>\n        curB <span class=\"token operator\">=</span> headB<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>curB<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//地址比较</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curA <span class=\"token operator\">==</span> curB<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> curA<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">//curB向后移动</span>\n            curB <span class=\"token operator\">=</span> curB <span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//A的下一结点继续比较</span>\n        curA <span class=\"token operator\">=</span> curA<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//A的结点都比较完了，说明找不到</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h3><a id=\"2_136\"></a>思路2：</h3>\n<ul><li> <p>上面判断相交得过程，可以分别把两个链表的长度也求出来，记为lenA和lenB</p>\n<ul><li><strong>注意：标志二者长度的变量要初始化为1(因为如果只有一个结点，是不会进入循环的)</strong></li></ul> </li><li> <p>求出两个链表的长度差记为gap， 由于不知道是lenA大还是lenB更大，所以可以使用求绝对值的函数abs求出gap</p> </li><li> <p>长链表先走gap步，然后二者再一起走，比较二者的结点的地址是否一致，第一个地址相同的结点就是相交结点</p>\n<ul><li>可以先假设一个链表是长链表,另一个是短链表。然后再根据长度判断假设是否合理</li></ul> </li></ul>\n<hr/>\n<blockquote>\n<p>图解：</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9ac140317a6b46269640ff4fbaa52840.png\"/></p>\n<hr/>\n<blockquote>\n<p>注意：短链表和长链表可能是一条链</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\98113420af364d578bfbf21233555820.png\"/></p>\n<hr/>\n<h4><a id=\"_161\"></a>代码</h4>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span> <span class=\"token operator\">*</span><span class=\"token function\">getIntersectionNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span> <span class=\"token operator\">*</span>headA<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span> <span class=\"token operator\">*</span>headB<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//其中一个链表为空-&gt;不相交</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>headA <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token operator\">||</span> headB <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//如果相交：尾结点相同</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> tailA <span class=\"token operator\">=</span> headA<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> tailB <span class=\"token operator\">=</span> headB<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> lenA <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//不能初始化为0,如果只有一个结点，不进入循环</span>\n    <span class=\"token keyword\">int</span> lenB <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//和上面同理</span>\n    \n    <span class=\"token comment\">//遍历找两个链表的尾,顺便求两个链表的长度</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>tailA<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        lenA <span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        tailA <span class=\"token operator\">=</span> tailA<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>tailB<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        lenB <span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        tailB <span class=\"token operator\">=</span> tailB<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//判断尾结点是否一致,不一致则不相交</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tailA <span class=\"token operator\">!=</span> tailB<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//计算出两个链表长度的差值为gap</span>\n    <span class=\"token keyword\">int</span> gap <span class=\"token operator\">=</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>lenA <span class=\"token operator\">-</span> lenB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//未知谁大，所以求绝对值</span>\n    <span class=\"token comment\">//长链表先走gap步，二者再一起走找交点</span>\n    <span class=\"token comment\">//假设一个链表长</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> longList <span class=\"token operator\">=</span> headA<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> shortList <span class=\"token operator\">=</span> headB<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//判断假设是否成立：</span>\n    <span class=\"token comment\">//lenA &lt; lenB 说明假设不成立，B链表更长</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>lenA <span class=\"token operator\">&lt;</span> lenB<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        longList <span class=\"token operator\">=</span> headB<span class=\"token punctuation\">;</span>\n        shortList <span class=\"token operator\">=</span> headA<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//长链表先走gap步</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>gap<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        longList <span class=\"token operator\">=</span> longList <span class=\"token operator\">-&gt;</span> next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//二者再同时走,二者相等就是相交点</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>longList <span class=\"token operator\">!=</span> shortList<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        longList <span class=\"token operator\">=</span> longList<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        shortList <span class=\"token operator\">=</span> shortList<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//当longList == shortList时跳出循环，此时二者指向的就是起始相交结点</span>\n    \n    <span class=\"token comment\">//如果是不相交的，上面就尾结点不同就已经返回了</span>\n    <span class=\"token comment\">//代码能到指向这说明两个链表就是相交的</span>\n    <span class=\"token keyword\">return</span> shortList<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-01-03 10:50:24", "summary": "题目要求链接：相交链表力扣在这里插入图片描述注意：相交链表是形状的，不是形状的。一个结点只有一个指向在这里插入图片描述如何判断相交：方法：比较两个链表的尾结点地址是否一致在这里插入图片描述相交和不相交"}