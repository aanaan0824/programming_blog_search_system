{"blogid": "119078307", "writerAge": "码龄6年", "writerBlogNum": "60", "writerCollect": "20485", "writerComment": "4002", "writerFan": "25875", "writerGrade": "7级", "writerIntegral": "19960", "writerName": "Dragon少年", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_119078307.jpg", "writerRankTotal": "640950", "writerRankWeekly": "8061", "writerThumb": "10712", "writerVisitNum": "920962", "blog_read_count": "10264", "blog_time": "于 2021-07-25 11:01:57 发布", "blog_title": "熬夜爆肝！C++核心进阶知识点汇总整理【万字干货预警 建议收藏】", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"_0\"></a>前言</h1>\n<p>前段时间有粉丝问我，大一结束c++刚学完，不知道自己目前学得怎么样？要掌握的知识点有没有都弄懂了？是否基础入门了？</p>\n<p>前几天已经整理过C++基础入门知识点，没看过的可以看看喔！<a href=\"https://blog.csdn.net/hhladminhhl/article/details/118668549?spm=1001.2014.3001.5501\">熬夜爆肝！C++基础入门大合集【万字干货预警 建议收藏】</a></p>\n<p>今天继续整理C++进阶篇知识点，一起来看看吧~</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210712222414113.png\"/></p>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#_0\">前言</a></li><li><a href=\"#C_12\">C++核心编程</a></li><li><ul><li><a href=\"#1__17\">1 内存分区模型</a></li><li><ul><li><a href=\"#11__36\">1.1 程序运行前</a></li><li><a href=\"#12__122\">1.2 程序运行后</a></li><li><a href=\"#13_new_206\">1.3 new操作符</a></li></ul>\n</li><li><a href=\"#2__286\">2 引用</a></li><li><ul><li><a href=\"#21__288\">2.1 引用的基本使用</a></li><li><a href=\"#22__324\">2.2 引用注意事项</a></li><li><a href=\"#23__360\">2.3 引用做函数参数</a></li><li><a href=\"#24__415\">2.4 引用做函数返回值</a></li><li><a href=\"#25__457\">2.5 引用的本质</a></li><li><a href=\"#26__485\">2.6 常量引用</a></li></ul>\n</li><li><a href=\"#3__524\">3 函数提高</a></li><li><ul><li><a href=\"#31__526\">3.1 函数默认参数</a></li><li><a href=\"#32__561\">3.2 函数占位参数</a></li><li><a href=\"#33__587\">3.3 函数重载</a></li><li><ul><li><a href=\"#331__589\">3.3.1 函数重载概述</a></li></ul>\n</li></ul>\n</li><li><a href=\"#4__645\">4 类和对象</a></li><li><ul><li><a href=\"#41__652\">4.1 封装</a></li><li><ul><li><a href=\"#411___654\">4.1.1 封装的意义</a></li><li><a href=\"#412_structclass_778\">4.1.2 struct和class区别</a></li><li><a href=\"#413__822\">4.1.3 成员属性设置为私有</a></li></ul>\n</li><li><a href=\"#42__892\">4.2 对象的初始化和清理</a></li><li><ul><li><a href=\"#421__894\">4.2.1 构造函数和析构函数</a></li><li><a href=\"#422__939\">4.2.2 构造函数的分类及调用</a></li><li><a href=\"#423__1026\">4.2.3 拷贝构造函数调用时机</a></li><li><a href=\"#424__1106\">4.2.4 构造函数调用规则</a></li><li><a href=\"#425__1125\">4.2.5 深拷贝与浅拷贝</a></li><li><a href=\"#426__1203\">4.2.6 初始化列表</a></li><li><a href=\"#427__1249\">4.2.7 类对象作为类成员</a></li><li><a href=\"#428__1333\">4.2.8 静态成员</a></li></ul>\n</li><li><a href=\"#43_Cthis_1459\">4.3 C++对象模型和this指针</a></li><li><ul><li><a href=\"#431__1461\">4.3.1 成员变量和成员函数分开存储</a></li><li><a href=\"#432_this_1499\">4.3.2 this指针概念</a></li><li><a href=\"#433__1521\">4.3.3 空指针访问成员函数</a></li><li><a href=\"#434_const_1532\">4.3.4 const修饰成员函数</a></li></ul>\n</li><li><a href=\"#44__1608\">4.4 友元</a></li><li><ul><li><a href=\"#441__1631\">4.4.1 全局函数做友元</a></li><li><a href=\"#442__1679\">4.4.2 类做友元</a></li><li><a href=\"#443__1744\">4.4.3 成员函数做友元</a></li></ul>\n</li><li><a href=\"#46___1816\">4.6 继承</a></li><li><ul><li><a href=\"#461__1826\">4.6.1 继承</a></li><li><a href=\"#462__1852\">4.6.2 继承方式</a></li><li><a href=\"#463__1957\">4.6.3 继承中构造和析构顺序</a></li><li><a href=\"#464__2018\">4.6.4 继承同名成员处理方式</a></li><li><a href=\"#465__2086\">4.6.5 继承同名静态成员处理方式</a></li><li><a href=\"#466__2107\">4.6.6 多继承语法</a></li></ul>\n</li><li><a href=\"#47___2184\">4.7 多态</a></li><li><ul><li><a href=\"#471__2186\">4.7.1 多态的基本概念</a></li><li><a href=\"#472__2286\">4.7.2 纯虚函数和抽象类</a></li><li><a href=\"#473__2355\">4.7.3 虚析构和纯虚析构</a></li></ul>\n</li></ul>\n</li><li><a href=\"#5__2485\">5 文件操作</a></li><li><ul><li><a href=\"#51_2512\">5.1文本文件</a></li><li><ul><li><a href=\"#511_2514\">5.1.1写文件</a></li><li><a href=\"#512_2593\">5.1.2读文件</a></li></ul>\n</li><li><a href=\"#52__2700\">5.2 二进制文件</a></li><li><ul><li><a href=\"#521__2708\">5.2.1 写文件</a></li><li><a href=\"#522__2758\">5.2.2 读文件</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"C_12\"></a>C++核心编程</h1>\n<p>主要针对C++<mark>面向对象</mark>编程技术做详细讲解，探讨C++的核心和精髓。</p>\n<h2><a id=\"1__17\"></a>1 内存分区模型</h2>\n<p>C++程序在执行时，将内存大方向划分为<strong>4个区域</strong></p>\n<ul><li>代码区：存放函数体的二进制代码，由操作系统进行管理的</li><li>全局区：存放全局变量和静态变量以及常量</li><li>栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等</li><li>堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收</li></ul>\n<p><strong>内存四区意义：</strong></p>\n<p>不同区域存放的数据，赋予不同的生命周期, 给我们更大的灵活编程</p>\n<h3><a id=\"11__36\"></a>1.1 程序运行前</h3>\n<p>​ 在程序编译后，生成了exe可执行程序，<strong>未执行该程序前</strong>分为两个区域</p>\n<p>​ <strong>代码区：</strong></p>\n<p>​ 存放 CPU 执行的机器指令</p>\n<p>​ 代码区是<strong>共享</strong>的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可</p>\n<p>​ 代码区是<strong>只读</strong>的，使其只读的原因是防止程序意外地修改了它的指令</p>\n<p>​ <strong>全局区：</strong></p>\n<p>​ 全局变量和静态变量存放在此.</p>\n<p>​ 全局区还包含了常量区, 字符串常量和其他常量也存放在此.</p>\n<p>​ <mark>该区域的数据在程序结束后由操作系统释放</mark>.</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"prism language-c++\">//全局变量\nint g_a = 10;\nint g_b = 10;\n\n//全局常量\nconst int c_g_a = 10;\nconst int c_g_b = 10;\n\nint main() {\n\n\t//局部变量\n\tint a = 10;\n\tint b = 10;\n\n\t//打印地址\n\tcout &lt;&lt; \"局部变量a地址为： \" &lt;&lt; (int)&amp;a &lt;&lt; endl;\n\tcout &lt;&lt; \"局部变量b地址为： \" &lt;&lt; (int)&amp;b &lt;&lt; endl;\n\n\tcout &lt;&lt; \"全局变量g_a地址为： \" &lt;&lt;  (int)&amp;g_a &lt;&lt; endl;\n\tcout &lt;&lt; \"全局变量g_b地址为： \" &lt;&lt;  (int)&amp;g_b &lt;&lt; endl;\n\n\t//静态变量\n\tstatic int s_a = 10;\n\tstatic int s_b = 10;\n\n\tcout &lt;&lt; \"静态变量s_a地址为： \" &lt;&lt; (int)&amp;s_a &lt;&lt; endl;\n\tcout &lt;&lt; \"静态变量s_b地址为： \" &lt;&lt; (int)&amp;s_b &lt;&lt; endl;\n\n\tcout &lt;&lt; \"字符串常量地址为： \" &lt;&lt; (int)&amp;\"hello world\" &lt;&lt; endl;\n\tcout &lt;&lt; \"字符串常量地址为： \" &lt;&lt; (int)&amp;\"hello world1\" &lt;&lt; endl;\n\n\tcout &lt;&lt; \"全局常量c_g_a地址为： \" &lt;&lt; (int)&amp;c_g_a &lt;&lt; endl;\n\tcout &lt;&lt; \"全局常量c_g_b地址为： \" &lt;&lt; (int)&amp;c_g_b &lt;&lt; endl;\n\n\tconst int c_l_a = 10;\n\tconst int c_l_b = 10;\n\tcout &lt;&lt; \"局部常量c_l_a地址为： \" &lt;&lt; (int)&amp;c_l_a &lt;&lt; endl;\n\tcout &lt;&lt; \"局部常量c_l_b地址为： \" &lt;&lt; (int)&amp;c_l_b &lt;&lt; endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n</code></pre>\n<p>打印结果：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9a6b6439a70143b3b46c3dd690700321.png\"/></p>\n<ul><li><strong>C++中在程序运行前分为全局区和代码区</strong></li><li><strong>代码区特点是共享和只读</strong></li><li><strong>全局区中存放全局变量、静态变量、常量</strong></li><li><strong>常量区中存放 const修饰的全局常量 和 字符串常量</strong></li></ul>\n<h3><a id=\"12__122\"></a>1.2 程序运行后</h3>\n<p>​ <strong>栈区：</strong></p>\n<p>​ 由编译器自动分配释放, 存放函数的参数值,局部变量等</p>\n<p>​ 注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"prism language-c++\">int * func()\n{\n\tint a = 10;\n\treturn &amp;a;\n}\n\nint main() {\n\n\tint *p = func();\n\n\tcout &lt;&lt; *p &lt;&lt; endl;\n\tcout &lt;&lt; *p &lt;&lt; endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n</code></pre>\n<p>​ <strong>堆区：</strong></p>\n<p>​ 由程序员分配释放,若程序员不释放,程序结束时由操作系统回收</p>\n<p>​ 在C++中主要利用new在堆区开辟内存</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"prism language-c++\">int* func()\n{\n\tint* a = new int(10);\n\treturn a;\n}\n\nint main() {\n\n\tint *p = func();\n\n\tcout &lt;&lt; *p &lt;&lt; endl;\n\tcout &lt;&lt; *p &lt;&lt; endl;\n    \n\tsystem(\"pause\");\n\n\treturn 0;\n}\n</code></pre>\n<p><strong>总结：</strong></p>\n<p>堆区数据由程序员管理开辟和释放</p>\n<p>堆区数据利用new关键字进行开辟内存</p>\n<h3><a id=\"13_new_206\"></a>1.3 new操作符</h3>\n<p>​ C++中利用<mark>new</mark>操作符在堆区开辟数据</p>\n<p>​ 堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 <mark>delete</mark></p>\n<p>​ 语法：<code>new 数据类型</code></p>\n<p>​ 利用new创建的数据，会返回该数据对应的类型的指针</p>\n<p><strong>示例1： 基本语法</strong></p>\n<pre><code class=\"prism language-c++\">int* func()\n{\n\tint* a = new int(10);\n\treturn a;\n}\n\nint main() {\n\n\tint *p = func();\n\n\tcout &lt;&lt; *p &lt;&lt; endl;\n\tcout &lt;&lt; *p &lt;&lt; endl;\n\n\t//利用delete释放堆区数据\n\tdelete p;\n\n\t//cout &lt;&lt; *p &lt;&lt; endl; //报错，释放的空间不可访问\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n</code></pre>\n<p><strong>示例2：开辟数组</strong></p>\n<pre><code class=\"prism language-c++\">//堆区开辟数组\nint main() {\n\n\tint* arr = new int[10];\n\n\tfor (int i = 0; i &lt; 10; i++)\n\t{\n\t\tarr[i] = i + 100;\n\t}\n\n\tfor (int i = 0; i &lt; 10; i++)\n\t{\n\t\tcout &lt;&lt; arr[i] &lt;&lt; endl;\n\t}\n\t//释放数组 delete 后加 []\n\tdelete[] arr;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n\n</code></pre>\n<h2><a id=\"2__286\"></a>2 引用</h2>\n<h3><a id=\"21__288\"></a>2.1 引用的基本使用</h3>\n<p>**作用： **给变量起别名</p>\n<p><strong>语法：</strong> <code>数据类型 &amp;别名 = 原名</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"prism language-C++\">int main() {\n\n\tint a = 10;\n\tint &amp;b = a;\n\n\tcout &lt;&lt; \"a = \" &lt;&lt; a &lt;&lt; endl;\n\tcout &lt;&lt; \"b = \" &lt;&lt; b &lt;&lt; endl;\n\n\tb = 100;\n\n\tcout &lt;&lt; \"a = \" &lt;&lt; a &lt;&lt; endl;\n\tcout &lt;&lt; \"b = \" &lt;&lt; b &lt;&lt; endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n</code></pre>\n<h3><a id=\"22__324\"></a>2.2 引用注意事项</h3>\n<ul><li>引用必须初始化</li><li>引用在初始化后，不可以改变</li></ul>\n<p>示例：</p>\n<pre><code class=\"prism language-C++\">int main() {\n\n\tint a = 10;\n\tint b = 20;\n\t//int &amp;c; //错误，引用必须初始化\n\tint &amp;c = a; //一旦初始化后，就不可以更改\n\tc = b; //这是赋值操作，不是更改引用\n\n\tcout &lt;&lt; \"a = \" &lt;&lt; a &lt;&lt; endl;\n\tcout &lt;&lt; \"b = \" &lt;&lt; b &lt;&lt; endl;\n\tcout &lt;&lt; \"c = \" &lt;&lt; c &lt;&lt; endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n</code></pre>\n<h3><a id=\"23__360\"></a>2.3 引用做函数参数</h3>\n<p>**作用：**函数传参时，可以利用引用的技术让形参修饰实参</p>\n<p>**优点：**可以简化指针修改实参</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"prism language-C++\">//1. 值传递\nvoid mySwap01(int a, int b) {\n\tint temp = a;\n\ta = b;\n\tb = temp;\n}\n\n//2. 地址传递\nvoid mySwap02(int* a, int* b) {\n\tint temp = *a;\n\t*a = *b;\n\t*b = temp;\n}\n\n//3. 引用传递\nvoid mySwap03(int&amp; a, int&amp; b) {\n\tint temp = a;\n\ta = b;\n\tb = temp;\n}\n\nint main() {\n\n\tint a = 10;\n\tint b = 20;\n\n\tmySwap01(a, b);\n\tcout &lt;&lt; \"a:\" &lt;&lt; a &lt;&lt; \" b:\" &lt;&lt; b &lt;&lt; endl;\n\n\tmySwap02(&amp;a, &amp;b);\n\tcout &lt;&lt; \"a:\" &lt;&lt; a &lt;&lt; \" b:\" &lt;&lt; b &lt;&lt; endl;\n\n\tmySwap03(a, b);\n\tcout &lt;&lt; \"a:\" &lt;&lt; a &lt;&lt; \" b:\" &lt;&lt; b &lt;&lt; endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n\n</code></pre>\n<h3><a id=\"24__415\"></a>2.4 引用做函数返回值</h3>\n<p>引用是可以作为函数的返回值存在的，<strong>不要返回局部变量引用</strong>。</p>\n<p>用法：函数调用作为左值</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//返回局部变量引用</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//局部变量</span>\n\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//返回静态变量引用</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token comment\">//不能返回局部变量的引用</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ref = \"</span> <span class=\"token operator\">&lt;&lt;</span> ref <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ref = \"</span> <span class=\"token operator\">&lt;&lt;</span> ref <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//如果函数做左值，那么必须返回引用</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ref2 <span class=\"token operator\">=</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ref2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> ref2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ref2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> ref2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ref2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> ref2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ref2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> ref2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"25__457\"></a>2.5 引用的本质</h3>\n<p>本质：<strong>引用的本质在c++内部实现是一个指针常量.</strong></p>\n<p><strong>C++推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//发现是引用，转换为 int* const ref = &amp;a;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ref<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\tref <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ref是引用，转换为*ref = 100</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">//自动转换为 int* const ref = &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ref <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span> \n\tref <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//内部发现ref是引用，自动帮我们转换为: *ref = 20;</span>\n    \n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a:\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ref:\"</span> <span class=\"token operator\">&lt;&lt;</span> ref <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"26__485\"></a>2.6 常量引用</h3>\n<p><strong>常量引用主要用来修饰形参，防止误操作</strong></p>\n<p>在函数形参列表中，可以加<mark>const修饰形参</mark>，防止形参改变实参</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//引用使用的场景，通常用来修饰形参</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">showValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//v += 10;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> v <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token comment\">//int&amp; ref = 10;  引用本身需要一个合法的内存空间，因此这行错误</span>\n\t<span class=\"token comment\">//加入const就可以了，编译器优化代码，int temp = 10; const int&amp; ref = temp;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ref <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//ref = 100;  //加入const后不可以修改变量</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> ref <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//函数中利用常量引用防止误操作修改实参</span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">showValue</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"3__524\"></a>3 函数提高</h2>\n<h3><a id=\"31__526\"></a>3.1 函数默认参数</h3>\n<p>在C++中，函数的形参列表中的形参是可以有默认值的。</p>\n<p>语法：<code>返回值类型 函数名 （参数= 默认值）{}</code></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值</span>\n<span class=\"token comment\">//2. 如果函数声明有默认值，函数实现的时候就不能有默认参数</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ret = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ret = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"32__561\"></a>3.2 函数占位参数</h3>\n<p>C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p>\n<p><strong>返回值类型 函数名 (数据类型){}</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//函数占位参数 ，占位参数也可以有默认参数</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"this is func\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//占位参数必须填补</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"33__587\"></a>3.3 函数重载</h3>\n<h4><a id=\"331__589\"></a>3.3.1 函数重载概述</h4>\n<p><strong>函数名可以相同，提高复用性</strong></p>\n<p><strong>函数重载满足条件：</strong></p>\n<ul><li>同一个作用域下</li><li>函数名称相同</li><li>函数参数<strong>类型不同</strong> 或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong></li></ul>\n<p><strong>函数的返回值不可以作为函数重载的条件</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//函数重载需要函数都在同一个作用域下</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func 的调用！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func (int a) 的调用！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func (double a)的调用！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func (int a ,double b) 的调用！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> a <span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func (double a ,int b)的调用！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//函数返回值不可以作为函数重载条件</span>\n<span class=\"token comment\">//int func(double a, int b)</span>\n<span class=\"token comment\">//{<!-- --></span>\n<span class=\"token comment\">//\tcout &lt;&lt; \"func (double a ,int b)的调用！\" &lt;&lt; endl;</span>\n<span class=\"token comment\">//}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.14</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"4__645\"></a>4 类和对象</h2>\n<p>C++面向对象的三大特性为：<mark>封装、继承、多态</mark></p>\n<h3><a id=\"41__652\"></a>4.1 封装</h3>\n<h4><a id=\"411___654\"></a>4.1.1 封装的意义</h4>\n<p>封装是C++面向对象三大特性之一</p>\n<p>封装的意义：</p>\n<ul><li>将属性和行为作为一个整体，表现生活中的事物</li><li>将属性和行为加以权限控制</li></ul>\n<p><strong>封装意义一：</strong></p>\n<p>​ 在设计类的时候，属性和行为写在一起，表现事物</p>\n<p><strong>语法：</strong> <code>class 类名{ 访问权限： 属性 / 行为 };</code></p>\n<p>**示例1：**设计一个圆类，求圆的周长</p>\n<p><strong>示例代码：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//圆周率</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> PI <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//1、封装的意义</span>\n<span class=\"token comment\">//将属性和行为作为一个整体，用来表现生活中的事物</span>\n\n<span class=\"token comment\">//封装一个圆类，求圆的周长</span>\n<span class=\"token comment\">//class代表设计一个类，后面跟着的是类名</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  <span class=\"token comment\">//访问权限  公共的权限</span>\n\n\t<span class=\"token comment\">//属性</span>\n\t<span class=\"token keyword\">int</span> m_r<span class=\"token punctuation\">;</span><span class=\"token comment\">//半径</span>\n\n\t<span class=\"token comment\">//行为</span>\n\t<span class=\"token comment\">//获取到圆的周长</span>\n\t<span class=\"token keyword\">double</span> <span class=\"token function\">calculateZC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//2 * pi  * r</span>\n\t\t<span class=\"token comment\">//获取圆的周长</span>\n\t\t<span class=\"token keyword\">return</span>  <span class=\"token number\">2</span> <span class=\"token operator\">*</span> PI <span class=\"token operator\">*</span> m_r<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token comment\">//通过圆类，创建圆的对象</span>\n\t<span class=\"token comment\">// c1就是一个具体的圆</span>\n\tCircle c1<span class=\"token punctuation\">;</span>\n\tc1<span class=\"token punctuation\">.</span>m_r <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//给圆对象的半径 进行赋值操作</span>\n\n\t<span class=\"token comment\">//2 * pi * 10 = = 62.8</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"圆的周长为： \"</span> <span class=\"token operator\">&lt;&lt;</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">calculateZC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>封装意义二：</strong></p>\n<p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p>\n<p>访问权限有三种：</p>\n<ol><li>public 公共权限</li><li>protected 保护权限</li><li>private 私有权限</li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//三种权限</span>\n<span class=\"token comment\">//公共权限  public     类内可以访问  类外可以访问</span>\n<span class=\"token comment\">//保护权限  protected  类内可以访问  类外不可以访问</span>\n<span class=\"token comment\">//私有权限  private    类内可以访问  类外不可以访问</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//姓名  公共权限</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\tstring m_Name<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//汽车  保护权限</span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\tstring m_Car<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//银行卡密码  私有权限</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> m_Password<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tm_Name <span class=\"token operator\">=</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">;</span>\n\t\tm_Car <span class=\"token operator\">=</span> <span class=\"token string\">\"拖拉机\"</span><span class=\"token punctuation\">;</span>\n\t\tm_Password <span class=\"token operator\">=</span> <span class=\"token number\">123456</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\tPerson p<span class=\"token punctuation\">;</span>\n\tp<span class=\"token punctuation\">.</span>m_Name <span class=\"token operator\">=</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//p.m_Car = \"奔驰\";  //保护权限类外访问不到</span>\n\t<span class=\"token comment\">//p.m_Password = 123; //私有权限类外访问不到</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"412_structclass_778\"></a>4.1.2 struct和class区别</h4>\n<p>在C++中 struct和class唯一的<strong>区别</strong>就在于 <strong>默认的访问权限不同</strong></p>\n<p>区别：</p>\n<ul><li>struct 默认权限为公共</li><li>class 默认权限为私有</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">C1</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span>  m_A<span class=\"token punctuation\">;</span> <span class=\"token comment\">//默认是私有权限</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> C2\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//默认是公共权限</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\tC1 c1<span class=\"token punctuation\">;</span>\n\tc1<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//错误，访问权限是私有</span>\n\n\tC2 c2<span class=\"token punctuation\">;</span>\n\tc2<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//正确，访问权限是公共</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"413__822\"></a>4.1.3 成员属性设置为私有</h4>\n<ul><li><strong>将所有成员属性设置为私有，可以自己控制读写权限</strong></li><li><strong>对于写权限，我们可以检测数据的有效性</strong></li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token comment\">//姓名设置可读可写</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tm_Name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tstring <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> m_Name<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\n\t<span class=\"token comment\">//获取年龄 </span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> m_Age<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//设置年龄</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>age <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> age <span class=\"token operator\">&gt;</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"你个老妖精!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tm_Age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">//情人设置为只写</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setLover</span><span class=\"token punctuation\">(</span>string lover<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tm_Lover <span class=\"token operator\">=</span> lover<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tstring m_Name<span class=\"token punctuation\">;</span> <span class=\"token comment\">//可读可写  姓名</span>\n\t\n\t<span class=\"token keyword\">int</span> m_Age<span class=\"token punctuation\">;</span> <span class=\"token comment\">//只读  年龄</span>\n\n\tstring m_Lover<span class=\"token punctuation\">;</span> <span class=\"token comment\">//只写  情人</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\tPerson p<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//姓名设置</span>\n\tp<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"姓名： \"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//年龄设置</span>\n\tp<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"年龄： \"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//情人设置</span>\n\tp<span class=\"token punctuation\">.</span><span class=\"token function\">setLover</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"苍井\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//cout &lt;&lt; \"情人： \" &lt;&lt; p.m_Lover &lt;&lt; endl;  //只写属性，不可以读取</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"42__892\"></a>4.2 对象的初始化和清理</h3>\n<h4><a id=\"421__894\"></a>4.2.1 构造函数和析构函数</h4>\n<p>对象的<strong>初始化和清理</strong>也是两个非常重要的安全问题</p>\n<p>​ 一个对象或者变量没有初始状态，对其使用后果是未知</p>\n<p>​ 同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题</p>\n<p>c++利用了<strong>构造函数</strong>和<strong>析构函数</strong>解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。</p>\n<p>对象的初始化和清理工作是编译器强制要我们做的事情，因此如果<strong>我们不提供构造和析构，编译器会提供</strong></p>\n<p><strong>编译器提供的构造函数和析构函数是空实现。</strong></p>\n<ul><li>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。</li><li>析构函数：主要作用在于对象<strong>销毁前</strong>系统自动调用，执行一些清理工作。</li></ul>\n<p><strong>构造函数语法：</strong><code>类名(){}</code></p>\n<ol><li>构造函数，没有返回值也不写void</li><li>函数名称与类名相同</li><li>构造函数可以有参数，因此可以发生重载</li><li>程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次</li></ol>\n<p><strong>析构函数语法：</strong> <code>~类名(){}</code></p>\n<ol><li>析构函数，没有返回值也不写void</li><li>函数名称与类名相同,在名称前加上符号 ~</li><li>析构函数不可以有参数，因此不可以发生重载</li><li>程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次</li></ol>\n<h4><a id=\"422__939\"></a>4.2.2 构造函数的分类及调用</h4>\n<p>两种分类方式：</p>\n<p>​ 按参数分为： 有参构造和无参构造</p>\n<p>​ 按类型分为： 普通构造和拷贝构造</p>\n<p>三种调用方式：</p>\n<p>​ 括号法</p>\n<p>​ 显示法</p>\n<p>​ 隐式转换法</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//1、构造函数分类</span>\n<span class=\"token comment\">// 按照参数分类分为 有参和无参构造   无参又称为默认构造函数</span>\n<span class=\"token comment\">// 按照类型分类分为 普通构造和拷贝构造</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">//无参（默认）构造函数</span>\n\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"无参构造函数!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//有参构造函数</span>\n\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tage <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"有参构造函数!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//拷贝构造函数</span>\n\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Person<span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tage <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"拷贝构造函数!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//析构函数</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"析构函数!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//2、构造函数的调用</span>\n<span class=\"token comment\">//调用无参构造函数</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tPerson p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//调用无参构造函数</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//调用有参的构造函数</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token comment\">//2.1  括号法，常用</span>\n\tPerson <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明</span>\n\t<span class=\"token comment\">//Person p2();</span>\n\n\t<span class=\"token comment\">//2.2 显式法</span>\n\tPerson p2 <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\tPerson p3 <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//Person(10)单独写就是匿名对象  当前行结束之后，马上析构</span>\n\n\t<span class=\"token comment\">//2.3 隐式转换法</span>\n\tPerson p4 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Person p4 = Person(10); </span>\n\tPerson p5 <span class=\"token operator\">=</span> p4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Person p5 = Person(p4); </span>\n\n\t<span class=\"token comment\">//注意2：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明</span>\n\t<span class=\"token comment\">//Person p5(p4);</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//test02();</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"423__1026\"></a>4.2.3 拷贝构造函数调用时机</h4>\n<p>C++中拷贝构造函数调用时机通常有三种情况</p>\n<ul><li>使用一个已经创建完毕的对象来初始化一个新对象</li><li>值传递的方式给函数参数传值</li><li>以值方式返回局部对象</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"无参构造函数!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tmAge <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"有参构造函数!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tmAge <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Person<span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"拷贝构造函数!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tmAge <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>mAge<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//析构函数在释放内存之前调用</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"析构函数!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> mAge<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//1. 使用一个已经创建完毕的对象来初始化一个新对象</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\tPerson <span class=\"token function\">man</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//p对象已经创建完毕</span>\n\tPerson <span class=\"token function\">newman</span><span class=\"token punctuation\">(</span>man<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//调用拷贝构造函数</span>\n\tPerson newman2 <span class=\"token operator\">=</span> man<span class=\"token punctuation\">;</span> <span class=\"token comment\">//拷贝构造</span>\n\n\t<span class=\"token comment\">//Person newman3;</span>\n\t<span class=\"token comment\">//newman3 = man; //不是调用拷贝构造函数，赋值操作</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//2. 值传递的方式给函数参数传值</span>\n<span class=\"token comment\">//相当于Person p1 = p;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span>Person p1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tPerson p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//无参构造函数</span>\n\t<span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//3. 以值方式返回局部对象</span>\nPerson <span class=\"token function\">doWork2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tPerson p1<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>p1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> p1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">test03</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tPerson p <span class=\"token operator\">=</span> <span class=\"token function\">doWork2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token comment\">//test01();</span>\n\t<span class=\"token comment\">//test02();</span>\n\t<span class=\"token function\">test03</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"424__1106\"></a>4.2.4 构造函数调用规则</h4>\n<p>默认情况下，c++编译器至少给一个类添加3个函数</p>\n<p>1．默认构造函数(无参，函数体为空)</p>\n<p>2．默认析构函数(无参，函数体为空)</p>\n<p>3．默认拷贝构造函数，对属性进行值拷贝</p>\n<p>构造函数调用规则如下：</p>\n<ul><li> <p>如果用户定义有参构造函数，c++不在提供默认无参构造，但是会提供默认拷贝构造</p> </li><li> <p>如果用户定义拷贝构造函数，c++不会再提供其他构造函数</p> </li></ul>\n<h4><a id=\"425__1125\"></a>4.2.5 深拷贝与浅拷贝</h4>\n<p>浅拷贝：简单的赋值拷贝操作</p>\n<p>深拷贝：在堆区重新申请空间，进行拷贝操作</p>\n<p><strong>如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">//无参（默认）构造函数</span>\n\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"无参构造函数!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//有参构造函数</span>\n\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age <span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"有参构造函数!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t\tm_age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n\t\tm_height <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//拷贝构造函数  </span>\n\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Person<span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"拷贝构造函数!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题</span>\n\t\tm_age <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>m_age<span class=\"token punctuation\">;</span>\n\t\tm_height <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">.</span>m_height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">//析构函数</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"析构函数!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_height <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">delete</span> m_height<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> m_age<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> m_height<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tPerson <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tPerson <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p1的年龄： \"</span> <span class=\"token operator\">&lt;&lt;</span> p1<span class=\"token punctuation\">.</span>m_age <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 身高： \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p1<span class=\"token punctuation\">.</span>m_height <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p2的年龄： \"</span> <span class=\"token operator\">&lt;&lt;</span> p2<span class=\"token punctuation\">.</span>m_age <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 身高： \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p2<span class=\"token punctuation\">.</span>m_height <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"426__1203\"></a>4.2.6 初始化列表</h4>\n<p>C++提供了初始化列表语法，用来初始化属性</p>\n<p><strong>构造函数()：属性1(值1),属性2（值2）… {}</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token comment\">传统方式初始化</span>\n\t<span class=\"token comment\">//Person(int a, int b, int c) {<!-- --></span>\n\t<span class=\"token comment\">//\tm_A = a;</span>\n\t<span class=\"token comment\">//\tm_B = b;</span>\n\t<span class=\"token comment\">//\tm_C = c;</span>\n\t<span class=\"token comment\">//}</span>\n\n\t<span class=\"token comment\">//初始化列表方式初始化</span>\n\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">m_A</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_B</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_C</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">PrintPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"mA:\"</span> <span class=\"token operator\">&lt;&lt;</span> m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"mB:\"</span> <span class=\"token operator\">&lt;&lt;</span> m_B <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"mC:\"</span> <span class=\"token operator\">&lt;&lt;</span> m_C <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> m_B<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> m_C<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\tPerson <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tp<span class=\"token punctuation\">.</span><span class=\"token function\">PrintPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"427__1249\"></a>4.2.7 类对象作为类成员</h4>\n<p>C++类中的成员可以是另一个类的对象，我们称该成员为 对象成员</p>\n<p>例如：</p>\n<pre><code class=\"prism language-C++\">class A {}class B{    A a；}\n</code></pre>\n<p>B类中有对象A作为成员，A为对象成员</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Phone</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Phone</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tm_PhoneName <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Phone构造\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token operator\">~</span><span class=\"token function\">Phone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Phone析构\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tstring m_PhoneName<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token comment\">//初始化列表可以告诉编译器调用哪一个构造函数</span>\n\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">,</span> string pName<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">m_Name</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_Phone</span><span class=\"token punctuation\">(</span>pName<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person构造\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token operator\">~</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person析构\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">playGame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> m_Name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 使用\"</span> <span class=\"token operator\">&lt;&lt;</span> m_Phone<span class=\"token punctuation\">.</span>m_PhoneName <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 牌手机! \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tstring m_Name<span class=\"token punctuation\">;</span>\n\tPhone m_Phone<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//当类中成员是其他类对象时，我们称该成员为 对象成员</span>\n\t<span class=\"token comment\">//构造的顺序是 ：先调用对象成员的构造，再调用本类构造</span>\n\t<span class=\"token comment\">//析构顺序与构造相反</span>\n\tPerson <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"苹果X\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tp<span class=\"token punctuation\">.</span><span class=\"token function\">playGame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"428__1333\"></a>4.2.8 静态成员</h4>\n<p>静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员</p>\n<p>静态成员分为：</p>\n<ul><li>静态成员变量 \n  <ul><li>所有对象共享同一份数据</li><li>在编译阶段分配内存</li><li>类内声明，类外初始化</li></ul> </li><li>静态成员函数 \n  <ul><li>所有对象共享同一个函数</li><li>静态成员函数只能访问静态成员变量</li></ul> </li></ul>\n<p><strong>静态成员变量：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span> <span class=\"token comment\">//静态成员变量</span>\n\n\t<span class=\"token comment\">//静态成员变量特点：</span>\n\t<span class=\"token comment\">//1 在编译阶段分配内存</span>\n\t<span class=\"token comment\">//2 类内声明，类外初始化</span>\n\t<span class=\"token comment\">//3 所有对象共享同一份数据</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> m_B<span class=\"token punctuation\">;</span> <span class=\"token comment\">//静态成员变量也是有访问权限的</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> Person<span class=\"token operator\">::</span>m_A <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> Person<span class=\"token operator\">::</span>m_B <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//静态成员变量两种访问方式</span>\n\n\t<span class=\"token comment\">//1、通过对象</span>\n\tPerson p1<span class=\"token punctuation\">;</span>\n\tp1<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p1.m_A = \"</span> <span class=\"token operator\">&lt;&lt;</span> p1<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\tPerson p2<span class=\"token punctuation\">;</span>\n\tp2<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p1.m_A = \"</span> <span class=\"token operator\">&lt;&lt;</span> p1<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//共享同一份数据</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p2.m_A = \"</span> <span class=\"token operator\">&lt;&lt;</span> p2<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//2、通过类名</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"m_A = \"</span> <span class=\"token operator\">&lt;&lt;</span> Person<span class=\"token operator\">::</span>m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\">//cout &lt;&lt; \"m_B = \" &lt;&lt; Person::m_B &lt;&lt; endl; //私有权限访问不到</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>静态成员函数：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token comment\">//静态成员函数特点：</span>\n\t<span class=\"token comment\">//1 程序共享一个函数</span>\n\t<span class=\"token comment\">//2 静态成员函数只能访问静态成员变量</span>\n\t\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tm_A <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//m_B = 100; //错误，不可以访问非静态成员变量</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span> <span class=\"token comment\">//静态成员变量</span>\n\t<span class=\"token keyword\">int</span> m_B<span class=\"token punctuation\">;</span> <span class=\"token comment\">// </span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token comment\">//静态成员函数也是有访问权限的</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func2调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> Person<span class=\"token operator\">::</span>m_A <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//静态成员变量两种访问方式</span>\n\n\t<span class=\"token comment\">//1、通过对象</span>\n\tPerson p1<span class=\"token punctuation\">;</span>\n\tp1<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//2、通过类名</span>\n\tPerson<span class=\"token operator\">::</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\">//Person::func2(); //私有权限访问不到</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"43_Cthis_1459\"></a>4.3 C++对象模型和this指针</h3>\n<h4><a id=\"431__1461\"></a>4.3.1 成员变量和成员函数分开存储</h4>\n<p>在C++中，类内的成员变量和成员函数分开存储</p>\n<p>只有非静态成员变量才属于类的对象上</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tmA <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//非静态成员变量占对象空间</span>\n\t<span class=\"token keyword\">int</span> mA<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//静态成员变量不占对象空间</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> mB<span class=\"token punctuation\">;</span> \n\t<span class=\"token comment\">//函数也不占对象空间，所有函数共享一个函数实例</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"mA:\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>mA <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//静态成员函数也不占对象空间</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sfunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"432_this_1499\"></a>4.3.2 this指针概念</h4>\n<p>通过上面我们知道在C++中成员变量和成员函数是分开存储的</p>\n<p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码</p>\n<p>c++通过提供特殊的对象指针，this指针，解决上述问题。<strong>this指针指向被调用的成员函数所属的对象</strong></p>\n<p>this指针是隐含每一个非静态成员函数内的一种指针</p>\n<p>this指针不需要定义，直接使用即可</p>\n<p>this指针的用途：</p>\n<ul><li>当形参和成员变量同名时，可用this指针来区分</li><li>在类的非静态成员函数中返回对象本身，可使用return *this</li></ul>\n<h4><a id=\"433__1521\"></a>4.3.3 空指针访问成员函数</h4>\n<p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针</p>\n<p>如果用到this指针，需要加以判断保证代码的健壮性</p>\n<h4><a id=\"434_const_1532\"></a>4.3.4 const修饰成员函数</h4>\n<p><strong>常函数：</strong></p>\n<ul><li>成员函数后加const后我们称为这个函数为<strong>常函数</strong></li><li>常函数内不可以修改成员属性</li><li>成员属性声明时加关键字mutable后，在常函数中依然可以修改</li></ul>\n<p><strong>常对象：</strong></p>\n<ul><li>声明对象前加const称该对象为常对象</li><li>常对象只能调用常函数</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tm_A <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tm_B <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">//this指针的本质是一个指针常量，指针的指向不可修改</span>\n\t<span class=\"token comment\">//如果想让指针指向的值也不可以修改，需要声明常函数</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">ShowPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//const Type* const pointer;</span>\n\t\t<span class=\"token comment\">//this = NULL; //不能修改指针的指向 Person* const this;</span>\n\t\t<span class=\"token comment\">//this-&gt;mA = 100; //但是this指针指向的对象的数据是可以修改的</span>\n\n\t\t<span class=\"token comment\">//const修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutable修饰的变量</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>m_B <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">MyFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//mA = 10000;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">mutable</span> <span class=\"token keyword\">int</span> m_B<span class=\"token punctuation\">;</span> <span class=\"token comment\">//可修改 可变的</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">//const修饰对象  常对象</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token keyword\">const</span> Person person<span class=\"token punctuation\">;</span> <span class=\"token comment\">//常量对象  </span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> person<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//person.mA = 100; //常对象不能修改成员变量的值,但是可以访问</span>\n\tperson<span class=\"token punctuation\">.</span>m_B <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//但是常对象可以修改mutable修饰成员变量</span>\n\n\t<span class=\"token comment\">//常对象访问成员函数</span>\n\tperson<span class=\"token punctuation\">.</span><span class=\"token function\">MyFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//常对象不能调用const的函数</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"44__1608\"></a>4.4 友元</h3>\n<p>在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术</p>\n<p><strong>友元的目的就是让一个函数或者类 访问另一个类中私有成员</strong></p>\n<p>友元的关键字为 <mark>friend</mark></p>\n<p>友元的三种实现</p>\n<ul><li>全局函数做友元</li><li>类做友元</li><li>成员函数做友元</li></ul>\n<h4><a id=\"441__1631\"></a>4.4.1 全局函数做友元</h4>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Building</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//告诉编译器 goodGay全局函数 是 Building类的好朋友，可以访问类中的私有内容</span>\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token function\">goodGay</span><span class=\"token punctuation\">(</span>Building <span class=\"token operator\">*</span> building<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token function\">Building</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>m_SittingRoom <span class=\"token operator\">=</span> <span class=\"token string\">\"客厅\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>m_BedRoom <span class=\"token operator\">=</span> <span class=\"token string\">\"卧室\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\tstring m_SittingRoom<span class=\"token punctuation\">;</span> <span class=\"token comment\">//客厅</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tstring m_BedRoom<span class=\"token punctuation\">;</span> <span class=\"token comment\">//卧室</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">goodGay</span><span class=\"token punctuation\">(</span>Building <span class=\"token operator\">*</span> building<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"好基友正在访问： \"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>m_SittingRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"好基友正在访问： \"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>m_BedRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tBuilding b<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">goodGay</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"442__1679\"></a>4.4.2 类做友元</h4>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Building</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">goodGay</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token function\">goodGay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tBuilding <span class=\"token operator\">*</span>building<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Building</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容</span>\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">goodGay</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Building</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\tstring m_SittingRoom<span class=\"token punctuation\">;</span> <span class=\"token comment\">//客厅</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tstring m_BedRoom<span class=\"token punctuation\">;</span><span class=\"token comment\">//卧室</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nBuilding<span class=\"token operator\">::</span><span class=\"token function\">Building</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>m_SittingRoom <span class=\"token operator\">=</span> <span class=\"token string\">\"客厅\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>m_BedRoom <span class=\"token operator\">=</span> <span class=\"token string\">\"卧室\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\ngoodGay<span class=\"token operator\">::</span><span class=\"token function\">goodGay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tbuilding <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Building<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> goodGay<span class=\"token operator\">::</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"好基友正在访问\"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>m_SittingRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"好基友正在访问\"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>m_BedRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tgoodGay gg<span class=\"token punctuation\">;</span>\n\tgg<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"443__1744\"></a>4.4.3 成员函数做友元</h4>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Building</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">goodGay</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token function\">goodGay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//只让visit函数作为Building的好朋友，可以发访问Building中私有内容</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">visit2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tBuilding <span class=\"token operator\">*</span>building<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Building</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//告诉编译器  goodGay类中的visit成员函数 是Building好朋友，可以访问私有内容</span>\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> goodGay<span class=\"token operator\">::</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Building</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\tstring m_SittingRoom<span class=\"token punctuation\">;</span> <span class=\"token comment\">//客厅</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tstring m_BedRoom<span class=\"token punctuation\">;</span><span class=\"token comment\">//卧室</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nBuilding<span class=\"token operator\">::</span><span class=\"token function\">Building</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>m_SittingRoom <span class=\"token operator\">=</span> <span class=\"token string\">\"客厅\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>m_BedRoom <span class=\"token operator\">=</span> <span class=\"token string\">\"卧室\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\ngoodGay<span class=\"token operator\">::</span><span class=\"token function\">goodGay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tbuilding <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Building<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> goodGay<span class=\"token operator\">::</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"好基友正在访问\"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>m_SittingRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"好基友正在访问\"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>m_BedRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> goodGay<span class=\"token operator\">::</span><span class=\"token function\">visit2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"好基友正在访问\"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>m_SittingRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//cout &lt;&lt; \"好基友正在访问\" &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tgoodGay  gg<span class=\"token punctuation\">;</span>\n\tgg<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    \n\t<span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"46___1816\"></a>4.6 继承</h3>\n<p><strong>继承是面向对象三大特性之一</strong></p>\n<p>我们发现，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性。</p>\n<p>这个时候我们就可以考虑利用继承的技术，减少重复代码</p>\n<h4><a id=\"461__1826\"></a>4.6.1 继承</h4>\n<p>继承的好处：<mark>可以减少重复的代码</mark></p>\n<p>class A : public B;</p>\n<p>A 类称为子类 或 派生类</p>\n<p>B 类称为父类 或 基类</p>\n<p><strong>派生类中的成员，包含两大部分</strong>：</p>\n<p>一类是从基类继承过来的，一类是自己增加的成员。</p>\n<p>从基类继承过过来的表现其共性，而新增的成员体现了其个性。</p>\n<h4><a id=\"462__1852\"></a>4.6.2 继承方式</h4>\n<p>继承的语法：<code>class 子类 : 继承方式 父类</code></p>\n<p><strong>继承方式一共有三种：</strong></p>\n<ul><li>公共继承</li><li>保护继承</li><li>私有继承</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base1</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span> \n\t<span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> m_B<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> m_C<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//公共继承</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Son1</span> <span class=\"token operator\">:</span><span class=\"token keyword\">public</span> Base1\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tm_A<span class=\"token punctuation\">;</span> <span class=\"token comment\">//可访问 public权限</span>\n\t\tm_B<span class=\"token punctuation\">;</span> <span class=\"token comment\">//可访问 protected权限</span>\n\t\t<span class=\"token comment\">//m_C; //不可访问</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">myClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tSon1 s1<span class=\"token punctuation\">;</span>\n\ts1<span class=\"token punctuation\">.</span>m_A<span class=\"token punctuation\">;</span> <span class=\"token comment\">//其他类只能访问到公共权限</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//保护继承</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Base2</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> m_B<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> m_C<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Son2</span><span class=\"token operator\">:</span><span class=\"token keyword\">protected</span> Base2\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tm_A<span class=\"token punctuation\">;</span> <span class=\"token comment\">//可访问 protected权限</span>\n\t\tm_B<span class=\"token punctuation\">;</span> <span class=\"token comment\">//可访问 protected权限</span>\n\t\t<span class=\"token comment\">//m_C; //不可访问</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">myClass2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tSon2 s<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//s.m_A; //不可访问</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//私有继承</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Base3</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> m_B<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> m_C<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Son3</span><span class=\"token operator\">:</span><span class=\"token keyword\">private</span> Base3\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tm_A<span class=\"token punctuation\">;</span> <span class=\"token comment\">//可访问 private权限</span>\n\t\tm_B<span class=\"token punctuation\">;</span> <span class=\"token comment\">//可访问 private权限</span>\n\t\t<span class=\"token comment\">//m_C; //不可访问</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">GrandSon3</span> <span class=\"token operator\">:</span><span class=\"token keyword\">public</span> Son3\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//Son3是私有继承，所以继承Son3的属性在GrandSon3中都无法访问到</span>\n\t\t<span class=\"token comment\">//m_A;</span>\n\t\t<span class=\"token comment\">//m_B;</span>\n\t\t<span class=\"token comment\">//m_C;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4><a id=\"463__1957\"></a>4.6.3 继承中构造和析构顺序</h4>\n<p>子类继承父类后，当创建子类对象，也会调用父类的构造函数</p>\n<p><strong>继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> \n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base构造函数!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base析构函数!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> Base\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Son构造函数!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Son析构函数!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</span>\n\tSon s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"464__2018\"></a>4.6.4 继承同名成员处理方式</h4>\n<ol><li><strong>子类对象可以直接访问到子类中同名成员</strong></li><li><strong>子类对象加作用域可以访问到父类同名成员</strong></li><li><strong>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数</strong></li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tm_A <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base - func()调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base - func(int a)调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> Base <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tm_A <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">//当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数</span>\n\t<span class=\"token comment\">//如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Son - func()调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tSon s<span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Son下的m_A = \"</span> <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base下的m_A = \"</span> <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span>Base<span class=\"token operator\">::</span>m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ts<span class=\"token punctuation\">.</span>Base<span class=\"token operator\">::</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ts<span class=\"token punctuation\">.</span>Base<span class=\"token operator\">::</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> EXIT_SUCCESS<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"465__2086\"></a>4.6.5 继承同名静态成员处理方式</h4>\n<p>静态成员和非静态成员出现同名，处理方式一致</p>\n<ul><li>访问子类同名成员 直接访问即可</li><li>访问父类同名成员 需要加作用域</li></ul>\n<p><strong>同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象 和 通过类名）</strong></p>\n<h4><a id=\"466__2107\"></a>4.6.6 多继承语法</h4>\n<p>C++允许<strong>一个类继承多个类</strong></p>\n<p>语法：<code>class 子类 ：继承方式 父类1 ， 继承方式 父类2...</code></p>\n<p>多继承可能会引发父类中有同名成员出现，需要加作用域区分</p>\n<p><strong>C++实际开发中不建议用多继承</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base1</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Base1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tm_A <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Base2</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Base2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tm_A <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//开始是m_B 不会出问题，但是改为mA就会出现不明确</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//语法：class 子类：继承方式 父类1 ，继承方式 父类2 </span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> Base2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> Base1 \n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tm_C <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n\t\tm_D <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> m_C<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> m_D<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">//多继承容易产生成员同名的情况</span>\n<span class=\"token comment\">//通过使用类名作用域可以区分调用哪一个基类的成员</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tSon s<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"sizeof Son = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span>Base1<span class=\"token operator\">::</span>m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span>Base2<span class=\"token operator\">::</span>m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"47___2184\"></a>4.7 多态</h3>\n<h4><a id=\"471__2186\"></a>4.7.1 多态的基本概念</h4>\n<p><strong>多态是C++面向对象三大特性之一</strong></p>\n<p>多态分为两类</p>\n<ul><li>静态多态: 函数重载 和 运算符重载属于静态多态，复用函数名</li><li>动态多态: 派生类和虚函数实现运行时多态</li></ul>\n<p>静态多态和动态多态区别：</p>\n<ul><li>静态多态的函数地址早绑定 - 编译阶段确定函数地址</li><li>动态多态的函数地址晚绑定 - 运行阶段确定函数地址</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">//Speak函数就是虚函数</span>\n\t<span class=\"token comment\">//函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"动物在说话\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token operator\">:</span><span class=\"token keyword\">public</span> Animal\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"小猫在说话\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token operator\">:</span><span class=\"token keyword\">public</span> Animal\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"小狗在说话\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//我们希望传入什么对象，那么就调用什么对象的函数</span>\n<span class=\"token comment\">//如果函数地址在编译阶段就能确定，那么静态联编</span>\n<span class=\"token comment\">//如果函数地址在运行阶段才能确定，就是动态联编</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">DoSpeak</span><span class=\"token punctuation\">(</span>Animal <span class=\"token operator\">&amp;</span> animal<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tanimal<span class=\"token punctuation\">.</span><span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//多态满足条件： </span>\n<span class=\"token comment\">//1、有继承关系</span>\n<span class=\"token comment\">//2、子类重写父类中的虚函数</span>\n<span class=\"token comment\">//多态使用：</span>\n<span class=\"token comment\">//父类指针或引用指向子类对象</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tCat cat<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">DoSpeak</span><span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\tDog dog<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">DoSpeak</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>总结：</p>\n<p>多态满足条件</p>\n<ul><li>有继承关系</li><li>子类重写父类中的虚函数</li></ul>\n<p>多态使用条件</p>\n<ul><li>父类指针或引用指向子类对象</li></ul>\n<p>重写：函数返回值类型 函数名 参数列表 完全一致称为重写</p>\n<h4><a id=\"472__2286\"></a>4.7.2 纯虚函数和抽象类</h4>\n<p>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容</p>\n<p>因此可以将虚函数改为<strong>纯虚函数</strong></p>\n<p>纯虚函数语法：<code>virtual 返回值类型 函数名 （参数列表）= 0 ;</code></p>\n<p>当类中有了纯虚函数，这个类也称为<mark>抽象类</mark></p>\n<p><strong>抽象类特点</strong>：</p>\n<ul><li>无法实例化对象</li><li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">//纯虚函数</span>\n\t<span class=\"token comment\">//类中只要有一个纯虚函数就称为抽象类</span>\n\t<span class=\"token comment\">//抽象类无法实例化对象</span>\n\t<span class=\"token comment\">//子类必须重写父类中的纯虚函数，否则也属于抽象类</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token operator\">:</span><span class=\"token keyword\">public</span> Base\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tBase <span class=\"token operator\">*</span> base <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//base = new Base; // 错误，抽象类无法实例化对象</span>\n\tbase <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Son<span class=\"token punctuation\">;</span>\n\tbase<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">delete</span> base<span class=\"token punctuation\">;</span><span class=\"token comment\">//记得销毁</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"473__2355\"></a>4.7.3 虚析构和纯虚析构</h4>\n<p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</p>\n<p>解决方式：将父类中的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong></p>\n<p>虚析构和纯虚析构共性：</p>\n<ul><li>可以解决父类指针释放子类对象</li><li>都需要有具体的函数实现</li></ul>\n<p>虚析构和纯虚析构区别：</p>\n<ul><li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li></ul>\n<p>虚析构语法：</p>\n<p><code>virtual ~类名(){}</code></p>\n<p>纯虚析构语法：</p>\n<p><code>virtual ~类名() = 0;</code></p>\n<p><code>类名::~类名(){}</code></p>\n<p><strong>​ 1. 虚析构或纯虚析构就是用来解决通过父类指针释放子类对象<br/> ​ 2. 如果子类中没有堆区数据，可以不写为虚析构或纯虚析构<br/> ​ 3. 拥有纯虚析构函数的类也属于抽象类</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token function\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Animal 构造函数调用！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//析构函数加上virtual关键字，变成虚析构函数</span>\n\t<span class=\"token comment\">//virtual ~Animal()</span>\n\t<span class=\"token comment\">//{<!-- --></span>\n\t<span class=\"token comment\">//\tcout &lt;&lt; \"Animal虚析构函数调用！\" &lt;&lt; endl;</span>\n\t<span class=\"token comment\">//}</span>\n\n\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nAnimal<span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Animal 纯虚析构函数调用！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> Animal <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Cat</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Cat构造函数调用！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tm_Name <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>m_Name <span class=\"token operator\">&lt;&lt;</span>  <span class=\"token string\">\"小猫在说话!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Cat析构函数调用!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>m_Name <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">delete</span> m_Name<span class=\"token punctuation\">;</span>\n\t\t\tm_Name <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\tstring <span class=\"token operator\">*</span>m_Name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tAnimal <span class=\"token operator\">*</span>animal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tanimal<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏</span>\n\t<span class=\"token comment\">//怎么解决？给基类增加一个虚析构函数</span>\n\t<span class=\"token comment\">//虚析构函数就是用来解决通过父类指针释放子类对象</span>\n\t<span class=\"token keyword\">delete</span> animal<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"5__2485\"></a>5 文件操作</h2>\n<p>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放</p>\n<p>通过<strong>文件可以将数据持久化</strong></p>\n<p>C++中对文件操作需要包含头文件 <mark>&lt; fstream &gt;</mark></p>\n<p>文件类型分为两种：</p>\n<ol><li><strong>文本文件</strong> - 文件以文本的<strong>ASCII码</strong>形式存储在计算机中</li><li><strong>二进制文件</strong> - 文件以文本的<strong>二进制</strong>形式存储在计算机中，用户一般不能直接读懂它们</li></ol>\n<p>操作文件的三大类:</p>\n<ol><li>ofstream：写操作</li><li>ifstream： 读操作</li><li>fstream ： 读写操作</li></ol>\n<h3><a id=\"51_2512\"></a>5.1文本文件</h3>\n<h4><a id=\"511_2514\"></a>5.1.1写文件</h4>\n<p>写文件步骤如下：</p>\n<ol><li> <p>包含头文件</p> <p>#include &lt;fstream&gt;</p> </li><li> <p>创建流对象</p> <p>ofstream ofs;</p> </li><li> <p>打开文件</p> <p>ofs.open(“文件路径”,打开方式);</p> </li><li> <p>写数据</p> <p>ofs &lt;&lt; “写入的数据”;</p> </li><li> <p>关闭文件</p> <p>ofs.close();</p> </li></ol>\n<p>文件打开方式：</p>\n<table><thead><tr><th>打开方式</th><th>解释</th></tr></thead><tbody><tr><td>ios::in</td><td>为读文件而打开文件</td></tr><tr><td>ios::out</td><td>为写文件而打开文件</td></tr><tr><td>ios::ate</td><td>初始位置：文件尾</td></tr><tr><td>ios::app</td><td>追加方式写文件</td></tr><tr><td>ios::trunc</td><td>如果文件存在先删除，再创建</td></tr><tr><td>ios::binary</td><td>二进制方式</td></tr></tbody></table>\n<p><strong>注意：</strong> 文件打开方式可以配合使用，利用|操作符</p>\n<p>**例如：**用二进制方式写文件 <code>ios::binary | ios:: out</code></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream&gt;</span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tofstream ofs<span class=\"token punctuation\">;</span>\n\tofs<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> ios<span class=\"token operator\">::</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tofs <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"姓名：张三\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tofs <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"性别：男\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tofs <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"年龄：18\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\tofs<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>总结：</p>\n<ul><li>文件操作必须包含头文件 fstream</li><li>读文件可以利用 ofstream ，或者fstream类</li><li>打开文件时候需要指定操作文件的路径，以及打开方式</li><li>利用&lt;&lt;可以向文件中写数据</li><li>操作完毕，要关闭文件</li></ul>\n<h4><a id=\"512_2593\"></a>5.1.2读文件</h4>\n<p>读文件与写文件步骤相似，但是读取方式相对于比较多</p>\n<p>读文件步骤如下：</p>\n<ol><li> <p>包含头文件</p> <p>#include &lt;fstream&gt;</p> </li><li> <p>创建流对象</p> <p>ifstream ifs;</p> </li><li> <p>打开文件并判断文件是否打开成功</p> <p>ifs.open(“文件路径”,打开方式);</p> </li><li> <p>读数据</p> <p>四种方式读取</p> </li><li> <p>关闭文件</p> <p>ifs.close();</p> </li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tifstream ifs<span class=\"token punctuation\">;</span>\n\tifs<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> ios<span class=\"token operator\">::</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ifs<span class=\"token punctuation\">.</span><span class=\"token function\">is_open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"文件打开失败\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">//第一种方式</span>\n\t<span class=\"token comment\">//char buf[1024] = { 0 };</span>\n\t<span class=\"token comment\">//while (ifs &gt;&gt; buf)</span>\n\t<span class=\"token comment\">//{<!-- --></span>\n\t<span class=\"token comment\">//\tcout &lt;&lt; buf &lt;&lt; endl;</span>\n\t<span class=\"token comment\">//}</span>\n\n\t<span class=\"token comment\">//第二种</span>\n\t<span class=\"token comment\">//char buf[1024] = { 0 };</span>\n\t<span class=\"token comment\">//while (ifs.getline(buf,sizeof(buf)))</span>\n\t<span class=\"token comment\">//{<!-- --></span>\n\t<span class=\"token comment\">//\tcout &lt;&lt; buf &lt;&lt; endl;</span>\n\t<span class=\"token comment\">//}</span>\n\n\t<span class=\"token comment\">//第三种</span>\n\t<span class=\"token comment\">//string buf;</span>\n\t<span class=\"token comment\">//while (getline(ifs, buf))</span>\n\t<span class=\"token comment\">//{<!-- --></span>\n\t<span class=\"token comment\">//\tcout &lt;&lt; buf &lt;&lt; endl;</span>\n\t<span class=\"token comment\">//}</span>\n\n\t<span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=</span> ifs<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tifs<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>总结：</p>\n<ul><li>读文件可以利用 ifstream ，或者fstream类</li><li>利用is_open函数可以判断文件是否打开成功</li><li>close 关闭文件</li></ul>\n<h3><a id=\"52__2700\"></a>5.2 二进制文件</h3>\n<p>以二进制的方式对文件进行读写操作</p>\n<p>打开方式要指定为 <mark>ios::binary</mark></p>\n<h4><a id=\"521__2708\"></a>5.2.1 写文件</h4>\n<p>二进制方式写文件主要利用流对象调用成员函数write</p>\n<p>函数原型 ：<code>ostream&amp; write(const char * buffer,int len);</code></p>\n<p><strong>字符指针buffer指向内存中一段存储空间。len是读写的字节数</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">char</span> m_Name<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> m_Age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//二进制文件  写文件</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//1、包含头文件</span>\n\n\t<span class=\"token comment\">//2、创建输出流对象</span>\n\tofstream <span class=\"token function\">ofs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"person.txt\"</span><span class=\"token punctuation\">,</span> ios<span class=\"token operator\">::</span>out <span class=\"token operator\">|</span> ios<span class=\"token operator\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">//3、打开文件</span>\n\t<span class=\"token comment\">//ofs.open(\"person.txt\", ios::out | ios::binary);</span>\n\n\tPerson p <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"张三\"</span>  <span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//4、写文件</span>\n\tofs<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//5、关闭文件</span>\n\tofs<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"522__2758\"></a>5.2.2 读文件</h4>\n<p>二进制方式读文件主要利用流对象调用成员函数read</p>\n<p>函数原型：<code>istream&amp; read(char *buffer,int len);</code></p>\n<p><strong>字符指针buffer指向内存中一段存储空间。len是读写的字节数</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">char</span> m_Name<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> m_Age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tifstream <span class=\"token function\">ifs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"person.txt\"</span><span class=\"token punctuation\">,</span> ios<span class=\"token operator\">::</span>in <span class=\"token operator\">|</span> ios<span class=\"token operator\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ifs<span class=\"token punctuation\">.</span><span class=\"token function\">is_open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"文件打开失败\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tPerson p<span class=\"token punctuation\">;</span>\n\tifs<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"姓名： \"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">.</span>m_Name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 年龄： \"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">.</span>m_Age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>以上内容，根据网上资料整理汇总。今天我们就到这里，明天继续努力！</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2021052715225999.png\"/><br/> 若本篇内容对您有所帮助，请三连点赞，关注，收藏支持下。</p>\n<p>创作不易，白嫖不好，各位的支持和认可，就是我创作的最大动力，我们下篇文章见！</p>\n<p>Dragon少年 | 文</p>\n<p>如果本篇博客有任何错误，请批评指教，不胜感激 ！</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-07-25 11:01:57", "summary": "前言前段时间有粉丝问我，大一结束刚学完，不知道自己目前学得怎么样？要掌握的知识点有没有都弄懂了？是否基础入门了？前几天已经整理过基础入门知识点，没看过的可以看看喔！熬夜爆肝！基础入门大合集万字干货预警"}