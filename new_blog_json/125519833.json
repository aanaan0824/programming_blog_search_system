{"blogid": "125519833", "writerAge": "码龄5年", "writerBlogNum": "246", "writerCollect": "552", "writerComment": "48", "writerFan": "227", "writerGrade": "6级", "writerIntegral": "4772", "writerName": "况祥彬", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125519833.jpg", "writerRankTotal": "4464", "writerRankWeekly": "9010", "writerThumb": "138", "writerVisitNum": "122658", "blog_read_count": "4004", "blog_time": "已于 2022-08-23 11:20:55 修改", "blog_title": "C++——const详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#const_vs_const_1\">顶层const vs 底层const</a></li><li><a href=\"#const_29\">const修饰变量</a></li><li><ul><li><a href=\"#const_30\">const修饰变量的作用</a></li><li><a href=\"#const_44\">const和引用</a></li><li><a href=\"#const_63\">const和指针</a></li></ul>\n</li><li><a href=\"#const_71\">const修饰函数</a></li><li><a href=\"#const_107\">const修饰类成员</a></li><li><a href=\"#const_123\">const修饰对象</a></li><li><a href=\"#const_127\">const代码举例</a></li><li><a href=\"#constexpr_172\">constexpr</a></li><li><a href=\"#const_vs_constexpr_202\">const vs constexpr</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"const_vs_const_1\"></a>顶层const vs 底层const</h1>\n<p>顶层const<br/> 本质是一个常量型的指针，指针指向的地址不能改变，该地址存储的数据可以改变。<code>int* const p=a</code><br/> 更一般的，顶层const可以表示任意的对象是常量，指针、引用、int、double都可以</p>\n<p>底层const<br/> 指针所指的对象是常量，<code>const int* p=a</code>，a是一个常量，p指向a的地址空间，a的值不能变，p的指向可以改变。<br/> 不是所有的对象都是底层const，只与指针和引用等复合类型的基本类型部分有关</p>\n<p><strong>比较特殊的是：指针既可以是顶层const也可以是底层const，和其他类型有明显区别；</strong></p>\n<p>举例：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\46f8318b707d48bfab49d81a0c974865.png\"/><br/> 当执行对象的拷贝操作时，常量是顶层const还是底层const区别明显。</p>\n<p>其中，顶层const不受什么影响<br/> 你自己不变是你自己的事，把你的值拷给我也不会改变你自己，所以不受影响。</p>\n<p>但是底层const的限制却不能忽视。<br/> 当执行对象的拷贝操作时，拷入和拷出的对象必须具有相同的底层const资格，或者两个对象的数据类型必须能够转换才行。一般来说，非常量可以转换成常量，反之则不行</p>\n<p><strong>代码举例：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cc7cef23bba2493fa2d6fb722569be96.png\"/><br/> <strong>上面代码分析:</strong><br/> p3既是顶层const也是底层const，拷贝p3时可以不在乎它是一个顶层const，但是必须清楚它指向的对象得是一个常量。<br/> 因此，不能用p3去初始化p，因为p指向的是一个普通的（非常量）整数，p可以修改p3所指空间的数据，会导致错误所以不能。<br/> 另一方面，p3的值可以赋给p2，是因为这两个指针都是底层const，p3可以相信p2不会修改数据，所以可以放心的把自己指向的地址分享给p2</p>\n<h1><a id=\"const_29\"></a>const修饰变量</h1>\n<h2><a id=\"const_30\"></a>const修饰变量的作用</h2>\n<p><strong>1、将变量定义为常量，保护被修饰的东西，防止意外的修改，增强程序的健壮性。</strong></p>\n<p><strong>const常量和宏定义的区别：</strong></p>\n<ul><li> <p>const常量会进行类型检查<br/> 编译器可以对const常量进行类型安全检查，而对define只进行字符替换，没有类型安全检查，在字符替换时可能会产生意料不到的错误。</p> </li><li> <p>const常量更节省空间，避免不必要的内存分配<br/> const定义常量从汇编的角度来看，只是给出了对应的内存地址，而不是像#define一样给出的是立即数，所以，const定义的常量在程序运行过程中只有一份拷贝，而#define宏定义的常量在内存中有若干个拷贝</p> </li></ul>\n<p><strong>2、和static一样，修饰全局变量使其可见范围为当前文件</strong><br/> 普通全局变量的作用域是当前文件，但是在其他文件中也是可见的，使用extern声明后就可以使用</p>\n<p>const对象在其他文件中是不可见的，这和添加了static关键字的效果类似。</p>\n<h2><a id=\"const_44\"></a>const和引用</h2>\n<p>可以把引用绑定到const对象上，就像绑定到其他对象上一样，我们称之为对常量的引用（reference to const）。与普通引用不同的是，对常量的引用不能被用作修改它所绑定的对象<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\82f80adb5e9a47aea77322cf5e2202b7.png\"/><br/> 因为不允许直接为ci赋值，当然也就不能通过引用去改变ci。因此，对r2的初始化是错误的。假设该初始化合法，则可以通过r2来改变它引用对象的值，这显然是不正确的。</p>\n<p><strong>初始化和对const的引用</strong><br/> 我们知道，引用的类型必须与其所引用对象的类型一致，但是有两个例外：<br/> 在初始化常量引用时允许用任意表达式作为初始值，只要该表达式的结果能转换成引用的类型即可。<br/> 尤其，允许为一个常量引用绑定<strong>非常量的对象、字面值，甚至是个一般表达式</strong>：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6e5b617dd747452488a23f8f3aa84418.png\"/></p>\n<p><strong>对const的引用可能引用一个并非const的对象</strong><br/> 必须认识到，常量引用仅对引用可参与的操作做出了限定，对于引用的对象本身是不是一个常量未作限定。因为对象也可能是个非常量，所以允许通过其他途径改变它的值：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d8b6c339d1a8410d8508289882ed43c1.png\"/><br/> r2绑定（非常量）整数i是合法的行为。然而，不允许通过r2修改i的值。尽管如此，i的值仍然允许通过其他途径修改，既可以直接给i赋值，也可以通过像r1一样绑定到i的其他引用来修改。</p>\n<h2><a id=\"const_63\"></a>const和指针</h2>\n<p>与引用一样，也可以令指针指向常量或非常量。类似于常量引用，指向常量的指针（pointer to const）不能用于改变其所指对象的值。<br/> <strong>要想存放常量对象的地址，只能使用指向常量的指针</strong>：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\86061b8220094c179f9ffcffdc8ef3d1.png\"/><br/> 指针的类型必须与其所指对象的类型一致，但是有两个例外。第一种例外情况是允许令一个指向常量的指针指向一个非常量对象：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b4a2eec0c35c4326b3ae44fe77f8b9fd.png\"/><br/> <strong>和常量引用一样，指向常量的指针也没有规定其所指的对象必须是一个常量。所谓指向常量的指针仅仅要求不能通过该指针改变对象的值，而没有规定那个对象的值不能通过其他途径改变。</strong></p>\n<blockquote>\n<p>试试这样想吧：所谓指向常量的指针或引用，不过是指针或引用“自以为是”罢了，它们觉得自己指向了常量，所以自觉地不去改变所指对象的值</p>\n</blockquote>\n<h1><a id=\"const_71\"></a>const修饰函数</h1>\n<p>1、const修饰函数参数，表示参数不可变，若参数为引用，可以增加效率(引用传递而不用值拷贝)</p>\n<p>2、const 修饰函数返回值，避免返回值被修改</p>\n<p>3、const修饰成员函数(不能修饰全局函数，因为全局函数没有this指针)，被修饰的函数内部不能修改属性值。</p>\n<p>默认的this指针是顶层const，是指向类类型非常量版本的常量指针，形如 <code>A* const this</code></p>\n<p>因为this是隐式的，所以它需要遵循初始化规则，意味着（在默认情况下）我们不能把this绑定到一个常量对象上，这一情况也就使得我们不能在一个常量对象上调用普通的成员函数。</p>\n<p>如果我们想让this绑定到常量对象上怎么做呢？<br/> 由于this是隐式的并且不会出现在参数列表中，所以无法显示的将this声明成指向常量的指针。<br/> C++的做法是允许把<code>const关键字</code>放在成员函数的参数列表之后，表示this是一个指向常量的指针。<br/> 像这样使用const的成员函数被称作<code>常量成员函数</code>（<strong>常量对象，以及常量对象的引用或指针都只能调用常量成员函数</strong>）</p>\n<p>现在的this也成了底层const，所以属性值不能改变。<br/> 形如：<code>const A* const this</code></p>\n<pre><code class=\"prism language-cpp\">修饰函数参数\n <span class=\"token keyword\">int</span> <span class=\"token function\">get_data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> \n修饰返回值\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token function\">get_data</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/*A*  const this*/</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n修饰成员函数\n<span class=\"token keyword\">int</span> <span class=\"token function\">get_data</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/*const A*  const this*/</span><span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">;</span><span class=\"token comment\">//因为this是指向常量的指针，所以常量成员函数不能改变调用它的对象的内容。即不能修改data</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"const_107\"></a>const修饰类成员</h1>\n<p>1、const修饰类的成员变量<br/> 表示成员变量不能被修改，同时只能在初始化列表中赋值</p>\n<p>2、const修饰类的成员函数</p>\n<ul><li>该函数不能改变对象的成员变量</li><li>不能调用非const成员函数，因为任何非const成员函数会有修改成员变量的企图</li><li>const关键字不能与static关键字同时使用，因为static关键字修饰静态成员函数，静态成员函数不含有this指针，即不能实例化，而const成员函数必须具体到某一实例，所以冲突、</li></ul>\n<p><strong>类中的所有函数都可以声明为const函数吗。哪些函数不能？</strong><br/> 1、构造函数不能<br/> 因为const修饰的成员函数不能修改数据成员。构造函数也属于类的成员函数，但是构造函数是要修改类的成员变量，所以类的构造函数不能申明成const类型的。<br/> 2、static静态成员函数不行<br/> static静态成员是属于类的，而不属于某个具体的对象，所有的对象共用static成员。this指针是某个具体对象的地址，因此static成员函数没有this指针。而函数中的const其实就是用来修饰this指针的，表示this指向的内容不可变，static静态成员却没有this指针，所以const不能用来修饰static成员函数</p>\n<h1><a id=\"const_123\"></a>const修饰对象</h1>\n<p>对象的任何成员都不能被修改<br/> 只能调用const成员函数</p>\n<h1><a id=\"const_127\"></a>const代码举例</h1>\n<p>const修饰的变量、函数、对象 分别成为：常变量、常函数、常对象</p>\n<p>常函数只能访问常变量，常对象只能访问常变量和常函数</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//三个常函数</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">getname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> <span class=\"token function\">getscore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span><span class=\"token comment\">//三个常变量</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>m_name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> m_age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> m_score<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//常变量的赋值方式：参数列表</span>\n<span class=\"token class-name\">Student</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> score<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">m_name</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_age</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_score</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//常函数的作用就是获取常变量的值，但是又不能修改它们的值，这种措施主要还是为了保护数据而设置的</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token class-name\">Student</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> m_name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token class-name\">Student</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> m_age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">float</span> <span class=\"token class-name\">Student</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getscore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> m_score<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//stu、pstu 分别是常对象以及常对象指针，它们都只能调用 const 成员函数。</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> Student <span class=\"token function\">stu</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小明\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90.6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//stu.show();  //error</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>stu<span class=\"token punctuation\">.</span><span class=\"token function\">getname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"的年龄是\"</span><span class=\"token operator\">&lt;&lt;</span>stu<span class=\"token punctuation\">.</span><span class=\"token function\">getage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"，成绩是\"</span><span class=\"token operator\">&lt;&lt;</span>stu<span class=\"token punctuation\">.</span><span class=\"token function\">getscore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> Student <span class=\"token operator\">*</span>pstu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"李磊\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//pstu -&gt; show();  //error</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>pstu<span class=\"token operator\">-&gt;</span><span class=\"token function\">getname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"的年龄是\"</span><span class=\"token operator\">&lt;&lt;</span>pstu<span class=\"token operator\">-&gt;</span><span class=\"token function\">getage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"，成绩是\"</span><span class=\"token operator\">&lt;&lt;</span>pstu<span class=\"token operator\">-&gt;</span><span class=\"token function\">getscore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"constexpr_172\"></a>constexpr</h1>\n<p>constexpr：constant expression，常量表达式</p>\n<p>实际开发中，我们经常会用到常量表达式。以定义数组为例，数组的长度就必须是一个常量表达式：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// 1)</span>\n<span class=\"token keyword\">int</span> url<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//正确</span>\n<span class=\"token comment\">// 2)</span>\n<span class=\"token keyword\">int</span> url<span class=\"token punctuation\">[</span><span class=\"token number\">6</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//正确</span>\n<span class=\"token comment\">// 3)</span>\n<span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> url<span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//错误，length是变量</span>\n</code></pre>\n<p>下面的代码是正确的：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> url<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>为什么需要constexpr ？</strong></p>\n<p>我们知道，C++ 程序的执行过程大致要经历编译、链接、运行这 3 个阶段。<br/> 常量表达式和非常量表达式的计算时机不同：</p>\n<ul><li>非常量表达式只能在程序<code>运行阶段</code>计算出结果；</li><li>而常量表达式的计算往往发生在程序的<code>编译阶段</code>，这可以<strong>极大提高程序的执行效率</strong>，因为表达式只需要在编译阶段计算一次，节省了每次程序运行时都需要计算一次的时间。对于用 C++ 编写的程序，性能往往是永恒的追求。</li></ul>\n<p>在实际开发中，如何才能判定一个表达式是否为常量表达式，进而获得在编译阶段即可执行的“特权”呢？——<strong>constexpr</strong><br/> constexpr 使常量表达式获得在程序<code>编译阶段</code>计算出结果的能力，而不必等到程序<code>运行阶段</code>。</p>\n<h1><a id=\"const_vs_constexpr_202\"></a>const vs constexpr</h1>\n<p>const 强调 只读<br/> constexpr 强调 常量<br/> 即凡是表达“只读”语义的场景都使用 const，表达“常量”语义的场景都使用 constexpr。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-23 11:20:55", "summary": "文章目录顶层底层修饰变量修饰变量的作用和引用和指针修饰函数修饰类成员修饰对象代码举例顶层底层顶层本质是一个常量型的指针，指针指向的地址不能改变，该地址存储的数据可以改变。更一般的，顶层可以表示任意的对"}