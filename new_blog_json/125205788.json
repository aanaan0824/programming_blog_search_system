{"blogid": "125205788", "writerAge": "码龄1年", "writerBlogNum": "61", "writerCollect": "1640", "writerComment": "1513", "writerFan": "2368", "writerGrade": "5级", "writerIntegral": "4097", "writerName": "栋zzzz", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125205788.jpg", "writerRankTotal": "5797", "writerRankWeekly": "19484", "writerThumb": "1446", "writerVisitNum": "69908", "blog_read_count": "5406", "blog_time": "于 2022-06-09 16:30:08 发布", "blog_title": "个人博客系统(附源码)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>前面学习了那么多的理论知识,一直比较枯燥,今天就做个小项目,来检验一下前面的学习成果吧!有需要源代码的小伙伴可以来看看:<a href=\"https://gitee.com/building-zzz/blog_system\">个人博客系统</a>;这个小项目主要是模仿CSDN做的,但是功能还是比较少的,只是写出了一些主要的功能,下面就一起来看看吧!🎨🎨🎨</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\de3ca1c1b34a45dd9d441bfb9a2d4f63.jpeg\" width=\"400\"/></p>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#__7\">🍌 一.准备工作</a></li><li><ul><li><a href=\"#1maven_9\">🍓1.创建maven项目</a></li><li><a href=\"#2_12\">🍓2.引入各种依赖</a></li><li><a href=\"#3_40\">🍓3.创建必要的目录</a></li><li><a href=\"#4_44\">🍓4.编写代码</a></li><li><a href=\"#5smart_Tomcat_64\">🍓5.打包部署(基于smart Tomcat)</a></li><li><a href=\"#6_68\">🍓6.验证</a></li></ul>\n</li><li><a href=\"#__74\">🍌 二.编写前端代码</a></li><li><a href=\"#__86\">🍌 三.数据库相关代码</a></li><li><a href=\"#__190\">🍌 四.具体的功能</a></li><li><ul><li><a href=\"#1_192\">🍓1.查询博客列表页功能</a></li><li><a href=\"#2_298\">🍓2.查询博客详情页功能</a></li><li><a href=\"#3_302\">🍓3.登录功能</a></li><li><a href=\"#4_307\">🍓4.检验当前页面登录状态功能</a></li><li><a href=\"#5_313\">🍓5.显示用户信息到页面功能</a></li><li><a href=\"#6_316\">🍓6.注销功能</a></li><li><a href=\"#7_322\">🍓7.发布博客功能</a></li><li><a href=\"#8_326\">🍓8.删除博客功能</a></li></ul>\n</li><li><a href=\"#__333\">🍌 五.总结与思考</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"__7\"></a>🍌 一.准备工作</h1>\n<p>这里的准备工作主要就是测试一下环境是否正常,编写一些简单的代码来验证页面是否可以顺利访问!</p>\n<h2><a id=\"1maven_9\"></a>🍓1.创建maven项目</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e26bb954811e493fa9cbd45fbffed1ba.png\"/></p>\n<h2><a id=\"2_12\"></a>🍓2.引入各种依赖</h2>\n<p>这里主要引入需要用到的各种依赖包:</p>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>javax.servlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>javax.servlet-api<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>3.1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">&gt;</span></span>provided<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.fasterxml.jackson.core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>jackson-databind<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.12.6.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>5.1.47<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>全部放在dependencies标签里面</p>\n<h2><a id=\"3_40\"></a>🍓3.创建必要的目录</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b538e7ed0af64361bfd7f99b498f478e.png\"/><br/> 在webapp目录下就可以放置所编写好的前端页面了,切记不是放在WEB-INF目录下!!!</p>\n<h2><a id=\"4_44\"></a>🍓4.编写代码</h2>\n<p>这里写简单的代码进行测试环境</p>\n<pre><code class=\"prism language-java\">\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebServlet</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServlet</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloServlet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> resp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{<!-- --></span>\n        resp<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"5smart_Tomcat_64\"></a>🍓5.打包部署(基于smart Tomcat)</h2>\n<p>使用smart Tomcat一键打包部署<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1de88315e2ba4975be519ba4f2a5e0ec.png\"/></p>\n<h2><a id=\"6_68\"></a>🍓6.验证</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\94d88b2405f94677ab80e8788b7c39b0.png\"/><br/> 这样环境就没有问题了,就可以进行下面的一系列代码的编写了!</p>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\32de78e5de3f43938bf03f4c9b7631f0.png\"/></p>\n<h1><a id=\"__74\"></a>🍌 二.编写前端代码</h1>\n<p>前端页面就直接演示成果了:<br/> 登录页面:<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d57c822293f34b23b62e88f5d9a40e90.png\"/><br/> 博客列表页面:<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\937ea81c29864194ae1e9aff97e807d5.png\"/><br/> 博客详情页面:<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e333fb89fe8a40efbab5189ef335443d.png\"/><br/> 博客编辑页面:<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0aadfd58ea4445c7b2a5ae9f5521f0c1.png\"/></p>\n<hr/>\n<h1><a id=\"__86\"></a>🍌 三.数据库相关代码</h1>\n<p>数据库相关的代码就需要根据需求来确定其如何编写:而要完成博客项目最主要的两个点就是用户和博文因此就需要创建两个表:用户表和博客表,然后再完成各种增删改查之类的操作<br/> 就使用用户表举个例子:<br/> 首先就需要在数据库中创建相关的表,才可以进行加下来的操作:</p>\n<pre><code>drop table if exists user;\ncreate table user(\n    userId int primary key auto_increment,\n    username varchar(128) unique,     -- 后续会使用这个用户名进行登录,用户名不能重复\n    password varchar(128)\n);\n</code></pre>\n<p>然后再进行数据库连接(JDBC)的操作:</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mysql<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>jdbc2<span class=\"token punctuation\">.</span>optional<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MysqlDataSource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PreparedStatement</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResultSet</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DBUtil</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> URL <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://127.0.0.1:3306/my_blog?characterEncoding=utf8&amp;useSSL=false\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> USERNAME <span class=\"token operator\">=</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> PASSWORD <span class=\"token operator\">=</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//设计懒汉单例模式 需要时再进行连接,需要注意线程安全问题</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">DataSource</span> dataSource <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">getDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dataSource <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DBUtil</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dataSource <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    dataSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MysqlDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MysqlDataSource</span><span class=\"token punctuation\">)</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setURL</span><span class=\"token punctuation\">(</span>URL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MysqlDataSource</span><span class=\"token punctuation\">)</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setUser</span><span class=\"token punctuation\">(</span>USERNAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MysqlDataSource</span><span class=\"token punctuation\">)</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>PASSWORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dataSource<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//进行连接</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">getDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//释放资源</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Connection</span> connection<span class=\"token punctuation\">,</span> <span class=\"token class-name\">PreparedStatement</span> statement<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResultSet</span> resultSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>resultSet <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>statement <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                statement<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>connection <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>然后可以通过用户id来查找信息:</p>\n<pre><code class=\"prism language-java\"> <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">PreparedStatement</span> statement <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ResultSet</span> resultSet <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            connection <span class=\"token operator\">=</span> <span class=\"token class-name\">DBUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//sql语句</span>\n            <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"select * from user where userId = ?\"</span><span class=\"token punctuation\">;</span>\n            statement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            statement<span class=\"token punctuation\">.</span><span class=\"token function\">setInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//执行sql语句</span>\n            resultSet <span class=\"token operator\">=</span> statement<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//遍历结果 由于这里是主键,因此也是使用if而不是while</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                user<span class=\"token punctuation\">.</span><span class=\"token function\">setUserId</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                user<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                user<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">DBUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">,</span>statement<span class=\"token punctuation\">,</span>resultSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>当然这里要查找需要数据内用东西,才能进行查找,而其他的操作都是和这个类似,这里就不过多演示了!</p>\n<hr/>\n<h1><a id=\"__190\"></a>🍌 四.具体的功能</h1>\n<p>这里的功能实现起来基本都是先完成约定前后端交互接口,然后再编写客户端的请求,以及服务器的相应处理,而前端和后端唯一的联系就是这些约定好的接口!在这里我用查询博客列表页进行代码演示!</p>\n<h2><a id=\"1_192\"></a>🍓1.查询博客列表页功能</h2>\n<p>通过查询可以直接查询到数据库内的所有博客信息,然后就可以列举在博客详情页面了(按照发布时间的先后顺序):<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0aabb09f9734497cb00b88bc139a86f4.png\"/><br/> <mark>前后端交互接口</mark>:</p>\n<pre><code>请求:\nGET /blog\n响应:\n[\n    {\n        blogId: 1,\n        title: '这是第一篇博客',\n        content: '这是博客正文(缩写版)',\n        userId: 1,\n        postTime: '2022-06-04 21:21:00'\n    },\n    {\n        blogId: 2,\n        title: '这是第二篇博客',\n        content: '这是博客正文(缩写版)',\n        userId: 2,\n        postTime: '2022-06-04 21:21:00'\n    }\n]\n</code></pre>\n<p>然后根据约定好的接口进行各自处理:<br/> <mark>请求</mark>:</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">//页面加载的时候,使用ajax给服务器发送请求,获取到相应的响应</span>\n       <span class=\"token keyword\">function</span> <span class=\"token function\">getBlogList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n           $<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n               <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span>\n               <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'blog'</span><span class=\"token punctuation\">,</span>\n               <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">body</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                   <span class=\"token comment\">//此时的body就是一个js对象数组(这里的转换是原生就转换好的),每一个元素就是js对象,然后这里就需要把这些js对象构造成形如上面的类型</span>\n                   <span class=\"token comment\">//1.先把right里面的内容进行清空操作,然后再进行插入操作</span>\n                   <span class=\"token keyword\">let</span> rightDiv <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".right\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                   <span class=\"token comment\">//将里面的内容进行清空</span>\n                   rightDiv<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n                   <span class=\"token comment\">//然后再遍历整个js数组,往right里面插入元素</span>\n                   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> blog <span class=\"token keyword\">of</span> body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                       <span class=\"token comment\">//先构造一个blogDiv,然后往里面插入对应的元素,然后再将这个blogDiv插入到right里面就可以l</span>\n                       <span class=\"token comment\">//这里都是createElement不是querySelector....</span>\n                       <span class=\"token keyword\">let</span> blogDiv <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                       blogDiv<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">\"blog\"</span><span class=\"token punctuation\">;</span>\n                       <span class=\"token comment\">//然后再构造里面的元素</span>\n                       <span class=\"token comment\">//博客标题</span>\n                       <span class=\"token keyword\">let</span> titleDiv <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                       titleDiv<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">'title'</span><span class=\"token punctuation\">;</span>\n                       titleDiv<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> blog<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">;</span>\n                       blogDiv<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>titleDiv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                       <span class=\"token comment\">//博客发布时间</span>\n                       <span class=\"token keyword\">let</span> dateDiv <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                       dateDiv<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">'date'</span><span class=\"token punctuation\">;</span>\n                       dateDiv<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> blog<span class=\"token punctuation\">.</span>postTime<span class=\"token punctuation\">;</span>\n                       blogDiv<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>dateDiv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                       <span class=\"token comment\">//博客摘要</span>\n                       <span class=\"token keyword\">let</span> descDiv <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                       descDiv<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> blog<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">;</span>\n                       descDiv<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">'desc'</span><span class=\"token punctuation\">;</span>\n                       blogDiv<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>descDiv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                       <span class=\"token comment\">//查看全文链接</span>\n                       <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                       \n                       a<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"查看全文 &amp;gt;&amp;gt;\"</span><span class=\"token punctuation\">;</span>\n                       <span class=\"token comment\">//设置a.href点击这个连接之后可以进行跳转到博客详情页面</span>\n                       <span class=\"token comment\">//这个跳转就需要告知服务器要访问的是哪个博客的详情页</span>\n                       a<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">\"blog_detail.html?blogId=\"</span> <span class=\"token operator\">+</span> blog<span class=\"token punctuation\">.</span>blogId<span class=\"token punctuation\">;</span>\n                       blogDiv<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                       \n                       <span class=\"token comment\">//最后需要把整个blogDiv插入到完整的rightDiv中去</span>\n                       rightDiv<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>blogDiv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                   <span class=\"token punctuation\">}</span>\n               <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n               <span class=\"token function-variable function\">error</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                   <span class=\"token comment\">//console.log(\"获取博客列表失败\");</span>\n                   <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取博客列表失败!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           \n       <span class=\"token punctuation\">}</span>\n       <span class=\"token comment\">//调用这个方法</span>\n       <span class=\"token function\">getBlogList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><mark>服务器返回的响应</mark>:</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/blog\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BlogServlet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ObjectMapper</span> objectMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> resp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//这里就需要把数据库中的数据查询出来,然后转换成JSON格式,输出就可以了</span>\n        <span class=\"token comment\">//通过封装数据库操作的类来进行查询</span>\n        <span class=\"token class-name\">BlogDao</span> blogDao <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BlogDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//防止乱码,这个和下面的顺序不能颠倒,先设置字符,再输出</span>\n        resp<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"application/json;charset=utf8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//表示没有参数,就是获取博客列表内容</span>\n        <span class=\"token comment\">//把查询的结果放到一个数组中</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Blog</span><span class=\"token punctuation\">&gt;</span></span> blogs <span class=\"token operator\">=</span> blogDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//然后通过objectMapper把这个转换成JSON格式,再进行输出</span>\n        <span class=\"token class-name\">String</span> respJson <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span>blogs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//然后输出就可以了</span>\n        resp<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>respJson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这样的前后端分离,也使得前端和后端的程序员互不影响,也是方便了很多!</p>\n<h2><a id=\"2_298\"></a>🍓2.查询博客详情页功能</h2>\n<p>在博客列表页的时候,有一个查看全文的按钮,通过这个按键就可以发送请求,然后查询到该篇博客的具体内容了:<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2fd5900daaf74d38a1b40f0e951df47c.png\"/></p>\n<h2><a id=\"3_302\"></a>🍓3.登录功能</h2>\n<p>输入正确的用户名和密码即可进行登录:<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\50c1c1fa2bf64f05b09df675bbf152d8.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c775467003ca464bbe2b6d5f3fab4bf7.png\"/></p>\n<h2><a id=\"4_307\"></a>🍓4.检验当前页面登录状态功能</h2>\n<p>如果尚未登录就会出现提示登录的弹框,然后会跳转到登录页面:<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\694c055175414325b7675b9425b1b8cf.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\504fdbfbe7b84adcaf047d697004c5d5.png\"/></p>\n<h2><a id=\"5_313\"></a>🍓5.显示用户信息到页面功能</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\37dbb44303d4480c87626f6f4d7691e4.png\"/></p>\n<h2><a id=\"6_316\"></a>🍓6.注销功能</h2>\n<p>点击注销即可即可退出登录,跳转到博客登录页面<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\afcb5112eb8e45ba830068b22b51bd69.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f27bfe4018cb4f939357722cd541b569.png\"/></p>\n<h2><a id=\"7_322\"></a>🍓7.发布博客功能</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\241ffbf4ae3a400bbda11db8bd012ff0.png\"/><br/> 当博客正文和标题都写完之后点击发布,即可完成发布,然后在博客列表页就可以看到此文章!</p>\n<h2><a id=\"8_326\"></a>🍓8.删除博客功能</h2>\n<p>在博客详情页,当你是这篇博客的作者的时候,便会出现一个删除博客按键,点击即可进行删除,而不是此博客的作者的话,就不会有这个按钮:<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\577eb6fbad2a4882a7014d6191b88f1b.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f8e7dc2aed824372950da19992b51ec5.png\"/></p>\n<hr/>\n<h1><a id=\"__333\"></a>🍌 五.总结与思考</h1>\n<blockquote>\n<p>从这个小项目中可以深切的体会到<font color=\"#3sc2\">前后端分离的好处,每一次前端和后端的交互都只需要看前后端约定好的交互接口就完全可以实现自己的东西了,这也很大程度上提高了开发的效率,不至于让前端和后端的程序员\"无事可做\",而且也不需要程序员全干</font>,只需要做自己的事情就可以了!!!<br/> 另外这个小项目所涉及到的功能也是不完善的,像注册,删除用户信息,修改博客之类的很多功能,并没有体现出来,但是这些实现起来和上面的实现是查不了多少的,而我在这里就不体现了,需要的朋友可以自行实现一下,和上面的是差不多的,另外上面也是写了很多重复的代码,这些对于我们聪明的程序员来说是非常不友好的,因此后面我会再基于框架将这个小项目重新完成,使用起来框架就会发现简单了很多!这个就后面再谈吧!!!</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e306767311774c4698bb06406b18f422.png\" width=\"400\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 1, "php": 0, "time": "2022-06-09 16:30:08", "summary": "前面学习了那么多的理论知识一直比较枯燥今天就做个小项目来检验一下前面的学习成果吧有需要源代码的小伙伴可以来看看个人博客系统这个小项目主要是模仿做的但是功能还是比较少的只是写出了一些主要的功能下面就一起"}