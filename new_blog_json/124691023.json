{"blogid": "124691023", "writerAge": "码龄3年", "writerBlogNum": "58", "writerCollect": "393", "writerComment": "71", "writerFan": "392", "writerGrade": "4级", "writerIntegral": "1139", "writerName": "楚璃轩", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124691023.jpg", "writerRankTotal": "40970", "writerRankWeekly": "17424", "writerThumb": "195", "writerVisitNum": "46034", "blog_read_count": "5363", "blog_time": "已于 2022-05-21 08:50:06 修改", "blog_title": "黑马瑞吉外卖项目", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#_2\">瑞吉外卖</a></li><li><ul><li><a href=\"#_4\">资料</a></li><li><a href=\"#_25\">项目介绍</a></li><li><a href=\"#_33\">技术架构</a></li><li><a href=\"#_80\">功能架构</a></li><li><ul><li><a href=\"#_82\">移动端前台功能</a></li><li><a href=\"#_86\">系统管理后台功能</a></li><li><ul><li><a href=\"#_88\">管理端</a></li><li><a href=\"#_101\">用户端</a></li></ul>\n</li><li><a href=\"#_113\">角色</a></li></ul>\n</li><li><a href=\"#_121\">功能</a></li><li><ul><li><a href=\"#_123\">第一部分：瑞吉外卖项目</a></li><li><ul><li><a href=\"#1__125\">1 环境搭建</a></li><li><a href=\"#2__149\">2 后台系统登录/退出功能</a></li><li><a href=\"#3__employee_187\">3 员工管理 employee(员工表)</a></li><li><ul><li><a href=\"#31__189\">3.1 新增员工</a></li><li><a href=\"#32__199\">3.2 员工信息分页查询</a></li><li><a href=\"#33__212\">3.3 启用、禁用员工账号</a></li><li><a href=\"#34__227\">3.4 编辑工具信息</a></li></ul>\n</li><li><a href=\"#4__253\">4 公共字段自动填充</a></li><li><a href=\"#5__category_317\">5 分类管理 category(分类表)</a></li><li><ul><li><a href=\"#51__319\">5.1 新增分类</a></li><li><a href=\"#52__327\">5.2 分类信息分页查询</a></li><li><a href=\"#53__339\">5.3 删除分类</a></li><li><a href=\"#54__353\">5.4 修改分类</a></li><li><a href=\"#55__355\">5.5 列表查询</a></li></ul>\n</li><li><a href=\"#6__357\">6 菜品管理</a></li><li><ul><li><a href=\"#61__359\">6.1 文件上传下载</a></li><li><a href=\"#62__412\">6.2 新增菜品</a></li><li><a href=\"#63__442\">6.3 菜品信息分页查询</a></li><li><a href=\"#64___454\">6.4 修改菜品</a></li><li><a href=\"#65___464\">6.5 删除菜品</a></li><li><a href=\"#66___474\">6.6 菜品批量删除</a></li><li><a href=\"#67___476\">6.7 菜品停售</a></li><li><a href=\"#68___478\">6.8 菜品批量停售</a></li><li><a href=\"#69___480\">6.9 列表查询</a></li></ul>\n</li><li><a href=\"#7__482\">7 新增套餐</a></li><li><ul><li><a href=\"#71__491\">7.1 新增套餐</a></li><li><a href=\"#72__505\">7.2 分页查询套餐</a></li><li><a href=\"#73__516\">7.3 修改套餐</a></li><li><a href=\"#74__518\">7.4 删除套餐</a></li><li><a href=\"#75__520\">7.5 菜品停售</a></li><li><a href=\"#76__522\">7.6 根据条件查询套餐数据</a></li></ul>\n</li><li><a href=\"#8__524\">8 移动端开发</a></li><li><ul><li><a href=\"#81__526\">8.1 阿里云短信服务介绍</a></li><li><a href=\"#81__575\">8.1 短信发送验证码</a></li><li><a href=\"#82____user_585\">8.2 手机验证码登录 user表</a></li><li><a href=\"#83___address_book_602\">8.3 地址簿管理 address_book表</a></li><li><ul><li><a href=\"#831__604\">8.3.1 新增地址</a></li><li><a href=\"#832__606\">8.3.2 地址列表查询</a></li><li><a href=\"#833__608\">8.3.3 设置默认地址</a></li><li><a href=\"#834__610\">8.3.4 编辑地址</a></li><li><a href=\"#835__612\">8.3.5 删除地址</a></li></ul>\n</li><li><a href=\"#84__614\">8.4 菜品展示</a></li><li><a href=\"#85___shopping_cart_620\">8.5 购物车 shopping_cart表</a></li><li><ul><li><a href=\"#851__622\">8.5.1 添加购物车</a></li><li><a href=\"#852__632\">8.5.2 查询购物车</a></li><li><a href=\"#853__634\">8.5.3 清空购物车</a></li><li><a href=\"#854__636\">8.5.4 减少购物车数量</a></li></ul>\n</li><li><a href=\"#86___ordersorder_detail_654\">8.6 下单 orders表，order_detail表</a></li><li><ul><li><a href=\"#861__656\">8.6.1 下单</a></li><li><a href=\"#862__658\">8.6.2 查看列表</a></li><li><a href=\"#863__660\">8.6.3 修改状态</a></li><li><a href=\"#864__662\">8.6.4 再来一单</a></li></ul>\n</li><li><a href=\"#87__664\">8.7 退出</a></li></ul>\n</li></ul>\n</li><li><a href=\"#__666\">第二部分： 瑞吉外卖项目优化篇</a></li><li><ul><li><a href=\"#1__670\">1 缓存优化</a></li><li><ul><li><a href=\"#11_672\">1.1环境搭建</a></li><li><a href=\"#12__692\">1.2 缓存短信验证</a></li><li><a href=\"#13__700\">1.3 缓存菜品数据</a></li><li><a href=\"#14_Spring_Cache_706\">1.4 Spring Cache</a></li><li><a href=\"#15_Spring_Cache_708\">1.5 Spring Cache</a></li><li><a href=\"#16__761\">1.6 缓存套餐数据</a></li></ul>\n</li><li><a href=\"#2__763\">2 读写分离</a></li><li><ul><li><a href=\"#21_MySQL_767\">2.1 MySQL主从复制</a></li><li><a href=\"#22__839\">2.2 读写分离</a></li><li><a href=\"#23_Nginx_871\">2.3 Nginx</a></li></ul>\n</li><li><a href=\"#3__983\">3 前后端分离开发</a></li><li><ul><li><a href=\"#31__985\">3.1 前后端分离开发</a></li><li><a href=\"#32_YApi_987\">3.2 YApi</a></li><li><a href=\"#33_Swagger_989\">3.3 Swagger</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_2\"></a>瑞吉外卖</h1>\n<h2><a id=\"_4\"></a>资料</h2>\n<p>源码：链接：https://pan.baidu.com/s/13TgBu4iti56UEVNcfiAlSA?pwd=5zjz<br/> 提取码：5zjz</p>\n<p>视频：https://www.bilibili.com/video/BV13a411q753?spm_id_from=333.999.0.0</p>\n<p>资料：https://www.aliyundrive.com/s/DS2XMVojBjH</p>\n<p>部署</p>\n<pre><code>1. 导入数据库\n\n2. 配置minio\n\n3. redis安装\n\n管理端：http://localhost:8080/backend/page/login/login.html\n\n移动端：http://localhost:8080/front/page/login.html\n</code></pre>\n<h2><a id=\"_25\"></a>项目介绍</h2>\n<p>本项目（瑞吉外卖）是专门为餐饮企业（餐厅、饭店）定制的一款软件产品，包括系统管理后台和移动端应用两部分。</p>\n<p>其中系统管理后台主要提供给餐饮企业内部员工使用，可以对餐厅的分类、菜品、套餐、订单、员工等进行管理维护。</p>\n<p>移动端应用主要提供给消费者使用，可以在线浏览菜品、添加购物车、下单等。</p>\n<h2><a id=\"_33\"></a>技术架构</h2>\n<p>1).用户层</p>\n<p>本项目中在构建系统管理后台的前端页面，会用到H5、Vue.js、ElementUI等技术。</p>\n<p>构建移动端应用时，会使用到微信小程序。</p>\n<p>2).网关层</p>\n<p>Nginx是一个服务器，主要用来作为Http服务器，部署静态资源，访问性能高。</p>\n<p>在Nginx中还有两个比较重要的作用： 反向代理和负载均衡。</p>\n<p>在进行项目部署时，要实现Tomcat的负载均衡，就可以通过Nginx来实现。</p>\n<p>3).应用层</p>\n<p>SpringBoot： 快速构建Spring项目, 采用 “约定优于配置” 的思想, 简化Spring项目的配置开发。</p>\n<p>Spring: 统一管理项目中的各种资源(bean), 在web开发的各层中都会用到。</p>\n<p>SpringMVC：SpringMVC是spring框架的一个模块，springmvc和spring无需通过中间整合层进行整合，可以无缝集成。</p>\n<p>SpringSession: 主要解决在集群环境下的Session共享问题。</p>\n<p>lombok：能以简单的注解形式来简化java代码，提高开发人员的开发效率。</p>\n<p>Swagger： 可以自动的帮助开发人员生成接口文档，并对接口进行测试。</p>\n<p>4).数据层</p>\n<p>MySQL： 关系型数据库, 本项目的核心业务数据都会采用MySQL进行存储。</p>\n<p>MybatisPlus： 本项目持久层将会使用MybatisPlus来简化开发, 基本的单表增删改查直接调用框架提供的方法即可。</p>\n<p>Redis： 基于key-value格式存储的内存数据库, 访问速度快, 经常使用它做缓存(降低数据库访问压力, 提供访问效率), 在性能优化中会使用。</p>\n<p>5).工具</p>\n<p>git: 版本控制工具, 在团队协作中, 使用该工具对项目中的代码进行管理。</p>\n<p>maven: 项目构建工具。</p>\n<p>junit：单元测试工具，开发人员功能实现完毕后，需要通过junit对功能进行单元测试。</p>\n<h2><a id=\"_80\"></a>功能架构</h2>\n<h3><a id=\"_82\"></a>移动端前台功能</h3>\n<p>手机号登录 , 微信登录 , 收件人地址管理 , 用户历史订单查询 , 菜品规格查询 , 购物车功能 , 下单 , 分类及菜品浏览。</p>\n<h3><a id=\"_86\"></a>系统管理后台功能</h3>\n<h4><a id=\"_88\"></a>管理端</h4>\n<p>餐饮企业内部员工使用。 主要功能有:</p>\n<table><thead><tr><th>模块</th><th>描述</th></tr></thead><tbody><tr><td>登录/退出</td><td>内部员工必须登录后,才可以访问系统管理后台</td></tr><tr><td>员工管理</td><td>管理员可以在系统后台对员工信息进行管理，包含查询、新增、编辑、禁用等功能</td></tr><tr><td>分类管理</td><td>主要对当前餐厅经营的 菜品分类 或 套餐分类 进行管理维护， 包含查询、新增、修改、删除等功能</td></tr><tr><td>菜品管理</td><td>主要维护各个分类下的菜品信息，包含查询、新增、修改、删除、启售、停售等功能</td></tr><tr><td>套餐管理</td><td>主要维护当前餐厅中的套餐信息，包含查询、新增、修改、删除、启售、停售等功能</td></tr><tr><td>订单明细</td><td>主要维护用户在移动端下的订单信息，包含查询、取消、派送、完成，以及订单报表下载等功能</td></tr></tbody></table>\n<h4><a id=\"_101\"></a>用户端</h4>\n<p>移动端应用主要提供给消费者使用。主要功能有:</p>\n<table><thead><tr><th>模块</th><th>描述</th></tr></thead><tbody><tr><td>登录/退出</td><td>在移动端, 用户也需要登录后使用APP进行点餐</td></tr><tr><td>点餐-菜单</td><td>在点餐界面需要展示出菜品分类/套餐分类, 并根据当前选择的分类加载其中的菜品信息, 供用户查询选择</td></tr><tr><td>点餐-购物车</td><td>用户选中的菜品就会加入用户的购物车, 主要包含 查询购物车、加入购物车、删除购物车、清空购物车等功能</td></tr><tr><td>订单支付</td><td>用户选完菜品/套餐后, 可以对购物车菜品进行结算支付, 这时就需要进行订单的支付</td></tr><tr><td>个人信息</td><td>在个人中心页面中会展示当前用户的基本信息, 用户可以管理收货地址, 也可以查询历史订单数据</td></tr></tbody></table>\n<h3><a id=\"_113\"></a>角色</h3>\n<table><thead><tr><th>角色</th><th>权限操作</th></tr></thead><tbody><tr><td>后台系统管理员</td><td>登录后台管理系统，拥有后台系统中的所有操作权限</td></tr><tr><td>后台系统普通员工</td><td>登录后台管理系统，对菜品、套餐、订单等进行管理 (不包含员工管理)</td></tr><tr><td>C端用户</td><td>登录移动端应用，可以浏览菜品、添加购物车、设置地址、在线下单等</td></tr></tbody></table>\n<h2><a id=\"_121\"></a>功能</h2>\n<h3><a id=\"_123\"></a>第一部分：瑞吉外卖项目</h3>\n<h4><a id=\"1__125\"></a>1 环境搭建</h4>\n<p>①数据库搭建</p>\n<table><thead><tr><th>表名</th><th>说明</th></tr></thead><tbody><tr><td>employee</td><td>员工表</td></tr><tr><td>category</td><td>菜品和套餐分类表</td></tr><tr><td>dish</td><td>菜品表</td></tr><tr><td>setmeal</td><td>套餐表</td></tr><tr><td>setmeal_dish</td><td>套餐菜品关系表</td></tr><tr><td>dish_flavor</td><td>菜品口味关系表</td></tr><tr><td>user</td><td>用户表（C端）</td></tr><tr><td>address_book</td><td>地址簿表</td></tr><tr><td>shopping_cart</td><td>购物车表</td></tr><tr><td>orders</td><td>订单表</td></tr><tr><td>order_detail</td><td>订单明细表</td></tr></tbody></table>\n<p>②项目搭建</p>\n<p>后端项目</p>\n<p>前端静态页面(WebMvcConfig.class 静态资源映射)</p>\n<h4><a id=\"2__149\"></a>2 后台系统登录/退出功能</h4>\n<p>登录页面存放目录 /resources/backend/page/login/login.html</p>\n<p>登录逻辑：</p>\n<pre><code>①. 将页面提交的密码password进行md5加密处理, 得到加密后的字符串\n\n②. 根据页面提交的用户名username查询数据库中员工数据信息\n\n③. 如果没有查询到, 则返回登录失败结果\n\n④. 密码比对，如果不一致, 则返回登录失败结果\n\n⑤. 查看员工状态，如果为已禁用状态，则返回员工已禁用结果\n\n⑥. 登录成功，将员工id存入Session, 并返回登录成功结果\n</code></pre>\n<p>登录添加一个过滤器或拦截器，判断用户是否已经完成登录，如果没有登录则返回提示信息，跳转到登录页面。</p>\n<p>过滤器LoginCheckFilter处理逻辑如下：</p>\n<pre><code>①. 获取本次请求的URI\n\n②. 判断本次请求, 是否需要登录, 才可以访问\n\n③. 如果不需要，则直接放行\n\n④. 判断登录状态，如果已登录，则直接放行\n\n⑤. 如果未登录, 则返回未登录结果\n</code></pre>\n<p>退出逻辑：</p>\n<pre><code>①. 清理Session中的用户id\n\n②. 返回结果\n</code></pre>\n<h4><a id=\"3__employee_187\"></a>3 员工管理 employee(员工表)</h4>\n<h5><a id=\"31__189\"></a>3.1 新增员工</h5>\n<pre><code>A. 点击\"保存\"按钮, 页面发送ajax请求，将新增员工页面中输入的数据以json的形式提交到服务端, 请求方式POST, 请求路径 /employee\n\nB. 服务端Controller接收页面提交的数据并调用Service将数据进行保存\n\nC. Service调用Mapper操作数据库，保存数据\n</code></pre>\n<h5><a id=\"32__199\"></a>3.2 员工信息分页查询</h5>\n<pre><code>1). 页面发送ajax请求，将分页查询参数(page、pageSize、name)提交到服务端\n\n2). 服务端Controller接收页面提交的数据, 并组装条件调用Service查询数据\n\n3). Service调用Mapper操作数据库，查询分页数据\n\n4). Controller将查询到的分页数据, 响应给前端页面\n\n5). 页面接收到分页数据, 并通过ElementUI的Table组件展示到页面上\n</code></pre>\n<h5><a id=\"33__212\"></a>3.3 启用、禁用员工账号</h5>\n<pre><code>1). 页面发送ajax请求，将参数(id、status)提交到服务端\n\n2). 服务端Controller接收页面提交的数据并调用Service更新数据\n\n3). Service调用Mapper操作数据库\n\n\n** bug: js在对长度较长的长整型数据进行处理时，会损失精度 **\n\n1). 提供对象转换器JacksonObjectMapper，基于Jackson进行Java对象到json数据的转换\n\n2). 在WebMvcConfig配置类中扩展Spring mvc的消息转换器，在此消息转换器中使用提供的对象转换器进行Java对象到json数据的转换\n</code></pre>\n<h5><a id=\"34__227\"></a>3.4 编辑工具信息</h5>\n<pre><code>实现的方法\n\nA. 根据ID查询, 用于页面数据回显\n\nB. 保存修改\n\n流程：\n\n1). 点击编辑按钮时，页面跳转到add.html，并在url中携带参数[员工id]\n\n2). 在add.html页面获取url中的参数[员工id]\n\n3). 发送ajax请求，请求服务端，同时提交员工id参数\n\n4). 服务端接收请求，根据员工id查询员工信息，将员工信息以json形式响应给页面\n  \n5). 页面接收服务端响应的json数据，通过VUE的数据绑定进行员工信息回显\n\n6). 点击保存按钮，发送ajax请求，将页面中的员工信息以json方式提交给服务端\n\n7). 服务端接收员工信息，并进行处理，完成后给页面响应\n\n8). 页面接收到服务端响应信息后进行相应处理\n</code></pre>\n<h4><a id=\"4__253\"></a>4 公共字段自动填充</h4>\n<p>问题：</p>\n<pre><code>A. 在新增数据时, 将createTime、updateTime 设置为当前时间, createUser、updateUser设置为当前登录用户ID。\n\nB. 在更新数据时, 将updateTime 设置为当前时间, updateUser设置为当前登录用户ID。\n</code></pre>\n<p>步骤：</p>\n<pre><code>1、在实体类的属性上加入@TableField注解，指定自动填充的策略。\n\n2、按照框架要求编写元数据对象处理器，在此类中统一为公共字段赋值，此类需要实现MetaObjectHandler接口。\n</code></pre>\n<p>问题：如何获取当前登录用户的id？</p>\n<pre><code>客户端发送的每次http请求，对应的在服务端都会分配一个新的线程来处理，在处理过程中涉及到下面类中的方法都属于相同的一个线程：\n\n1). LoginCheckFilter的doFilter方法\n\n2). EmployeeController的update方法\n\n3). MyMetaObjectHandler的updateFill方法\n\n我们可以在上述类的方法中加入如下代码(获取当前线程ID,并输出):\n\n    long id = Thread.currentThread().getId();\n    \n    log.info(\"线程id为：{}\",id);\n\n结论：执行编辑员工功能进行验证，通过观察控制台输出可以发现，一次请求对应的线程id是相同的：\n\n经过上述的分析之后,发现可以使用JDK提供的ThreadLocal类, 来解决此问题,\n</code></pre>\n<p>ThreadLocal</p>\n<pre><code>ThreadLocal并不是一个Thread，而是Thread的局部变量。当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的副本，而不会影响其它线程所对应的副本。\n\nThreadLocal为每个线程提供单独一份存储空间，具有线程隔离的效果，只有在线程内才能获取到对应的值，线程外则不能访问当前线程对应的值。\n</code></pre>\n<p>ThreadLocal常用方法：</p>\n<pre><code>A. public void set(T value) : 设置当前线程的线程局部变量的值\n\nB. public T get() : 返回当前线程所对应的线程局部变量的值\n\nC. public void remove() : 删除当前线程所对应的线程局部变量的值 \n\n*** 结论 ***\n\n可以在LoginCheckFilter的doFilter方法中获取当前登录用户id，并调用ThreadLocal的set方法来设置当前线程的线程局部变量的值（用户id）\n\n然后在MyMetaObjectHandler的updateFill方法中调用ThreadLocal的get方法来获得当前线程所对应的线程局部变量的值（用户id）\n \n如果在后续的操作中, 我们需要在Controller / Service中要使用当前登录用户的ID, 可以直接从ThreadLocal直接获取。\n</code></pre>\n<p>问题：如何获取当前登录用户的id？</p>\n<pre><code>1). 编写BaseContext工具类，基于ThreadLocal封装的工具类\n\n2). 在LoginCheckFilter的doFilter方法中调用BaseContext来设置当前登录用户的id\n\n3). 在MyMetaObjectHandler的方法中调用BaseContext获取登录用户的id\n</code></pre>\n<h4><a id=\"5__category_317\"></a>5 分类管理 category(分类表)</h4>\n<h5><a id=\"51__319\"></a>5.1 新增分类</h5>\n<pre><code>1). 在页面(backend/page/category/list.html)的新增分类表单中填写数据，点击 \"确定\" 发送ajax请求，将新增分类窗口输入的数据以json形式提交到服务端\n\n2). 服务端Controller接收页面提交的数据并调用Service将数据进行保存\n\n3). Service调用Mapper操作数据库，保存数据\n</code></pre>\n<h5><a id=\"52__327\"></a>5.2 分类信息分页查询</h5>\n<pre><code>1). 页面发送ajax请求，将分页查询参数(page、pageSize)提交到服务端\n\n2). 服务端Controller接收页面提交的数据并调用Service查询数据\n\n3). Service调用Mapper操作数据库，查询分页数据\n\n4). Controller将查询到的分页数据响应给页面\n\n5). 页面接收到分页数据并通过ElementUI的Table组件展示到页面上\n</code></pre>\n<h5><a id=\"53__339\"></a>5.3 删除分类</h5>\n<pre><code>1). 点击删除，页面发送ajax请求，将参数(id)提交到服务端\n\n2). 服务端Controller接收页面提交的数据并调用Service删除数据\n\n3). Service调用Mapper操作数据库\n\n注意：\n\n- 根据当前分类的ID，查询该分类下是否存在菜品dish(菜品表) 和 setmeal(套餐表)，如果存在，则提示错误信息\n\n- 根据当前分类的ID，查询该分类下是否存在套餐setmeal(套餐表)，如果存在，则提示错误信息\n</code></pre>\n<h5><a id=\"54__353\"></a>5.4 修改分类</h5>\n<h5><a id=\"55__355\"></a>5.5 列表查询</h5>\n<h4><a id=\"6__357\"></a>6 菜品管理</h4>\n<h5><a id=\"61__359\"></a>6.1 文件上传下载</h5>\n<p>文件上传时，对页面的form表单有如下要求：</p>\n<table><thead><tr><th>表单属性</th><th>取值</th><th>说明</th></tr></thead><tbody><tr><td>method</td><td>post</td><td>必须选择post方式提交</td></tr><tr><td>enctype</td><td>multipart/form-data</td><td>采用multipart格式上传文件</td></tr><tr><td>type</td><td>file</td><td>使用input的file控件上传</td></tr></tbody></table>\n<pre><code>&lt;form method=\"post\" action=\"/common/upload\" enctype=\"multipart/form-data\"&gt;\n    &lt;input name=\"myFile\" type=\"file\"  /&gt;\n    &lt;input type=\"submit\" value=\"提交\" /&gt; \n&lt;/form&gt;\n</code></pre>\n<p>组件：</p>\n<pre><code>- commons-fileupload\n\n- commons-io\n</code></pre>\n<p>上传逻辑：</p>\n<pre><code>1). 获取文件的原始文件名, 通过原始文件名获取文件后缀\n\n2). 通过UUID重新声明文件名, 文件名称重复造成文件覆盖\n\n3). 创建文件存放目录\n\n4). 将上传的临时文件转存到指定位置\n</code></pre>\n<p>通过浏览器进行文件下载，通常有两种表现形式：</p>\n<pre><code>- 以附件形式下载，弹出保存对话框，将文件保存到指定磁盘目录\n\n- 直接在浏览器中打开\n</code></pre>\n<p>下载逻辑：</p>\n<pre><code>1). 定义输入流，通过输入流读取文件内容\n\n2). 通过response对象，获取到输出流\n\n3). 通过response对象设置响应数据格式(image/jpeg)\n\n4). 通过输入流读取文件数据，然后通过上述的输出流写回浏览器\n\n5). 关闭资源\n</code></pre>\n<p>上传和下载逻辑优化：minio</p>\n<pre><code>单机运行：minio.exe server D:\\minioDate \n</code></pre>\n<h5><a id=\"62__412\"></a>6.2 新增菜品</h5>\n<pre><code>1). 点击新建菜品按钮, 访问页面(backend/page/food/add.html), 页面加载时发送ajax请求，请求服务端获取菜品分类数据并展示到下拉框中\n\n2). 页面发送请求进行图片上传，请求服务端将图片保存到服务器(上传功能已实现)\n\n3). 页面发送请求进行图片下载，将上传的图片进行回显(下载功能已实现)\n\n4). 点击保存按钮，发送ajax请求，将菜品相关数据以json形式提交到服务端\n</code></pre>\n<p>新增菜品操作了两张表，那么为了保证数据的一致性，需要在方法上加上注解 @Transactional来控制事务。</p>\n<pre><code>@Transactional使用时会有失效的情况：\n\n① 首先要看数据库本身对应的库、表所设置的引擎是什么。MyIsam不支持事务，如果需要，则必须改为InnoDB\n\n② @Transactional所注解的方法必须时public\n\n③ 一个类中的A方法去调用B方法，@Transactional注解在B方法上是不起作用的\n\n④ @Transactional所注解的方法所在的类，是否已经被注解@Service或@Component等\n\n⑤ 异常被你的 catch“吃了”导致@Transactional失效，注解的方法不能使用try，catch\n\n⑥ 你的异常类型不是unchecked异常\n\n@Transactional使用的技巧：\n\n一般情况下，单独在service层或者dao层用@Transactional注解一个方法，避免上述失效的情况，在上一层（controller或者service层）调用时进行try，catch，可以有效的使用@Transactional进行事务管理\n</code></pre>\n<h5><a id=\"63__442\"></a>6.3 菜品信息分页查询</h5>\n<pre><code>1). 构造分页条件对象\n\n2). 构建查询及排序条件\n\n3). 执行分页条件查询\n\n4). 遍历分页查询列表数据，根据分类ID查询分类信息，从而获取该菜品的分类名称\n\n5). 封装数据并返回\n</code></pre>\n<h5><a id=\"64___454\"></a>6.4 修改菜品</h5>\n<pre><code>A. 根据ID查询菜品的基本信息 \n\nB. 根据菜品的ID查询菜品口味列表数据\n\nC. 组装数据并返回\n\nD. 点击保存，修改成功\n</code></pre>\n<h5><a id=\"65___464\"></a>6.5 删除菜品</h5>\n<pre><code>A. 根据ID查询菜品的基本信息 \n    \nB. 根据菜品的ID查询菜品口味列表数据\n\nC. 删除菜品口味列表数据\n\nD. 删除菜品基本信息\n</code></pre>\n<h5><a id=\"66___474\"></a>6.6 菜品批量删除</h5>\n<h5><a id=\"67___476\"></a>6.7 菜品停售</h5>\n<h5><a id=\"68___478\"></a>6.8 菜品批量停售</h5>\n<h5><a id=\"69___480\"></a>6.9 列表查询</h5>\n<h4><a id=\"7__482\"></a>7 新增套餐</h4>\n<p>涉及的表格</p>\n<pre><code>| 表           | 说明           | 备注                                               |\n| ------------ | -------------- | -------------------------------------------------- |\n| setmeal      | 套餐表         | 存储套餐的基本信息                                 |\n| setmeal_dish | 套餐菜品关系表 | 存储套餐关联的菜品的信息(一个套餐可以关联多个菜品) |\n</code></pre>\n<h5><a id=\"71__491\"></a>7.1 新增套餐</h5>\n<pre><code>A. 根据传递的参数,查询套餐分类列表\n\nB. 根据传递的参数,查询菜品分类列表\n\nC. 图片上传\n\nD. 图片下载展示\n\nE. 根据菜品分类ID,查询菜品列表\n\nF. 保存套餐信息\n</code></pre>\n<h5><a id=\"72__505\"></a>7.2 分页查询套餐</h5>\n<pre><code>1). 构建分页条件对象\n\n2). 构建查询条件对象，如果传递了套餐名称，根据套餐名称模糊查询， 并对结果按修改时间降序排序\n\n3). 执行分页查询\n\n4). 组装数据并返回\n</code></pre>\n<h5><a id=\"73__516\"></a>7.3 修改套餐</h5>\n<h5><a id=\"74__518\"></a>7.4 删除套餐</h5>\n<h5><a id=\"75__520\"></a>7.5 菜品停售</h5>\n<h5><a id=\"76__522\"></a>7.6 根据条件查询套餐数据</h5>\n<h4><a id=\"8__524\"></a>8 移动端开发</h4>\n<h5><a id=\"81__526\"></a>8.1 阿里云短信服务介绍</h5>\n<pre><code>| 场景     | 案例                                                         |\n| -------- | ------------------------------------------------------------ |\n| 验证码   | APP、网站注册账号，向手机下发验证码； 登录账户、异地登录时的安全提醒； 找回密码时的安全验证； 支付认证、身份校验、手机绑定等。 |\n| 短信通知 | 向注册用户下发系统相关信息，包括： 升级或维护、服务开通、价格调整、 订单确认、物流动态、消费确认、 支付通知等普通通知短信。 |\n| 推广短信 | 向注册用户和潜在客户发送通知和推广信息，包括促销活动通知、业务推广等商品与活动的推广信息。增加企业产品曝光率、提高产品的知名度。 |\n\n阿里云短信服务官方网站： https://www.aliyun.com/product/sms?spm=5176.19720258.J_8058803260.52.5c432c4a11Dcwf\n\n注册账号：阿里云官网：https://www.aliyun.com/\n</code></pre>\n<p>步骤：</p>\n<pre><code>1. 申请签名：签名是短信中能代表发送者属性的字段。\n\n2. 设置短信模板\n\n3. 设置AccessKey：访问阿里云 API 的密钥，具有账户的完全权限\n\n---继续使用AccessKey\n\n如果选择的是该选项，我们创建的是阿里云账号的AccessKey，是具有账户的完全权限，有了这个AccessKey以后，我们就可以通过API调用阿里云的服务，不仅是短信服务，其他服务也可以调用。 \n\n相对来说，并不安全，当前的AccessKey泄露，会影响到我当前账户的其他云服务。\n\n---开始使用子用户AccessKey\n\n可以创建一个子用户,这个子用户我们可以分配比较低的权限,比如仅分配短信发送的权限，不具备操作其他的服务的权限，即使这个AccessKey泄漏了,也不会影响其他的云服务, 相对安全。\n\n4. 配置权限\n</code></pre>\n<p>代码开发官方文档: https://help.aliyun.com/product/44282.html?spm=5176.12212571.help.dexternal.57a91cbewHHjKq</p>\n<pre><code>1. 导入坐标：\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.aliyun&lt;/groupId&gt;\n        &lt;artifactId&gt;aliyun-java-sdk-core&lt;/artifactId&gt;\n        &lt;version&gt;4.5.16&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.aliyun&lt;/groupId&gt;\n        &lt;artifactId&gt;aliyun-java-sdk-dysmsapi&lt;/artifactId&gt;\n        &lt;version&gt;2.1.0&lt;/version&gt;\n    &lt;/dependency&gt;\n    \n2. 短信发送工具类：将官方提供的main方法封装为一个工具类 ：SMSUtils\n</code></pre>\n<h5><a id=\"81__575\"></a>8.1 短信发送验证码</h5>\n<p>为了方便用户登录，移动端通常都会提供通过手机验证码登录的功能。手机验证码登录有如下优点：</p>\n<pre><code>1). 方便快捷，无需注册，直接登录\n\n2). 使用短信验证码作为登录凭证，无需记忆密码\n\n3). 安全  \n</code></pre>\n<h5><a id=\"82____user_585\"></a>8.2 手机验证码登录 user表</h5>\n<p>登录流程：</p>\n<pre><code>输入手机号 &gt; 获取验证码 &gt; 输入验证码 &gt; 点击登录 &gt; 登录成功\n\n\n1). 获取前端传递的手机号和验证码\n\n2). 从Session中获取到手机号对应的正确的验证码\n\n3). 进行验证码的比对 , 如果比对失败, 直接返回错误信息\n\n4). 如果比对成功, 需要根据手机号查询当前用户, 如果用户不存在, 则自动注册一个新用户\n\n5). 将登录用户的ID存储Session中\n</code></pre>\n<h5><a id=\"83___address_book_602\"></a>8.3 地址簿管理 address_book表</h5>\n<h6><a id=\"831__604\"></a>8.3.1 新增地址</h6>\n<h6><a id=\"832__606\"></a>8.3.2 地址列表查询</h6>\n<h6><a id=\"833__608\"></a>8.3.3 设置默认地址</h6>\n<h6><a id=\"834__610\"></a>8.3.4 编辑地址</h6>\n<h6><a id=\"835__612\"></a>8.3.5 删除地址</h6>\n<h5><a id=\"84__614\"></a>8.4 菜品展示</h5>\n<pre><code>A. 根据分类ID查询菜品列表(包含菜品口味列表)\n\nB. 根据分类ID查询套餐列表\n</code></pre>\n<h5><a id=\"85___shopping_cart_620\"></a>8.5 购物车 shopping_cart表</h5>\n<h6><a id=\"851__622\"></a>8.5.1 添加购物车</h6>\n<pre><code>A. 获取当前登录用户，为购物车对象赋值\n\nB. 根据当前登录用户ID 及 本次添加的菜品ID/套餐ID，查询购物车数据是否存在\n\nC. 如果已经存在，就在原来数量基础上加1\n\nD. 如果不存在，则添加到购物车，数量默认就是1\n</code></pre>\n<h6><a id=\"852__632\"></a>8.5.2 查询购物车</h6>\n<h6><a id=\"853__634\"></a>8.5.3 清空购物车</h6>\n<h6><a id=\"854__636\"></a>8.5.4 减少购物车数量</h6>\n<p>orders表和order_detail表</p>\n<pre><code>A. 获得当前用户id, 查询当前用户的购物车数据\n\nB. 根据当前登录用户id, 查询用户数据\n\nC. 根据地址ID, 查询地址数据\n\nD. 组装订单明细数据, 批量保存订单明细 \n\nE. 组装订单数据, 批量保存订单数据\n\nF. 删除当前用户的购物车列表数据\n\n上述逻辑处理中，计算购物车商品的总金额时，为保证我们每一次执行的累加计算是一个原子操作，我们这里用到了JDK中提供的一个原子类 AtomicInteger\n</code></pre>\n<h5><a id=\"86___ordersorder_detail_654\"></a>8.6 下单 orders表，order_detail表</h5>\n<h6><a id=\"861__656\"></a>8.6.1 下单</h6>\n<h6><a id=\"862__658\"></a>8.6.2 查看列表</h6>\n<h6><a id=\"863__660\"></a>8.6.3 修改状态</h6>\n<h6><a id=\"864__662\"></a>8.6.4 再来一单</h6>\n<h5><a id=\"87__664\"></a>8.7 退出</h5>\n<h3><a id=\"__666\"></a>第二部分： 瑞吉外卖项目优化篇</h3>\n<p>问题：用户数据量大，系统访问量大，频繁访问数据库，系统性能下降，用户体验差</p>\n<h4><a id=\"1__670\"></a>1 缓存优化</h4>\n<h5><a id=\"11_672\"></a>1.1环境搭建</h5>\n<p>导入相关坐标：</p>\n<pre><code>    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n</code></pre>\n<p>配置文件：</p>\n<pre><code>spring:\n  redis:\n    host: 127.0.0.1\n    port: 6379\n</code></pre>\n<p>配置类：RedisConfig</p>\n<p>模板：RedisUtil</p>\n<h5><a id=\"12__692\"></a>1.2 缓存短信验证</h5>\n<pre><code>1. 在UserController中注入RedisTemplate对象，操作Redis\n\n2. 在UserController的sendMsg方法中，将随机生成的验证码缓存到Redis中，并设置有效期\n\n3. 在UserController的login方法中，从Redis中获取缓存的验证码，如果登陆成功则删除Rdeis中的验证码\n</code></pre>\n<h5><a id=\"13__700\"></a>1.3 缓存菜品数据</h5>\n<pre><code>1. 在DishController的list方法中，先从Redis中获取菜品数据，如果有则直接返回，无需查询，如果没有查询数据库，并将查询到的菜品放入Redis\n\n2. 在DishController的save、delete、update、status方法中，加入清理缓存的逻辑\n</code></pre>\n<h5><a id=\"14_Spring_Cache_706\"></a>1.4 Spring Cache</h5>\n<h5><a id=\"15_Spring_Cache_708\"></a>1.5 Spring Cache</h5>\n<p>Spring Cache是一个框架，实现了基于注解的缓存功能</p>\n<p>针对不同的缓存技术需要实现不同的CacheManager</p>\n<pre><code>EhCacheCacheManager 使用EhCache作为缓存技术\n\nGuavaCacheManager 使用Google的GuavaCache作为缓存技术\n\nRedisCacheManager 使用Redis作为缓存技术\n</code></pre>\n<p>注解</p>\n<pre><code>@EnableCaching 开启缓存注解功能---启动类\n\n@Cacheable 在方法执行前spring先查看缓存中是否含有数据，如果有数据，则直接返回缓存数据，没有数据，调用方法并将方法返回值放到缓存\n\n    value 缓存的名称\n    \n    key 缓存的key\n    \n    condition 条件，满足条件时才缓存数据\n    \n    unless 满足条件则不缓存\n\n@CachePut 将方法的返回值放到缓存中 \n    \n    @CachePut(value=\"缓存的名称,每个缓存名称下面有多个key\",key=\"缓存的key\")\n    \n    key: #result 方法返回的结果 #root \n\n@CacheEvict 将一条或多条数据从缓存中删除\n</code></pre>\n<p>坐标：</p>\n<pre><code>     &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n</code></pre>\n<p>application.yml</p>\n<pre><code>spring:\n  cache:\n    redis:\n      time-to-live: 18000000 #设置过期时间30分钟\n</code></pre>\n<h5><a id=\"16__761\"></a>1.6 缓存套餐数据</h5>\n<h4><a id=\"2__763\"></a>2 读写分离</h4>\n<p>问题：读写所有压力都有一台数据库承担，压力大，数据库服务器磁盘损坏则数据丢失，单点故障</p>\n<h5><a id=\"21_MySQL_767\"></a>2.1 MySQL主从复制</h5>\n<p>MySQL主从复制是一个异步的复制过程，底层是数据库自带的二进制日志功能。</p>\n<p>即一台或多台MySQL数据库从另一台MySQL数据库进行日志的复制，然后再解析日志并应用到自身，最终实现从库和主库的数据保持一致</p>\n<p>过程：</p>\n<pre><code>master将改变的记录到二进制日志\n\nslave将master的二进制日志拷贝到他的中继日志\n\nslave重做中继日志中的时间，将改变应用到自己的数据库中\n</code></pre>\n<p>资料：</p>\n<pre><code>centos7： http://mirrors.aliyun.com/centos/7/isos/x86_64/\n\nelecterm： https://electerm.html5beta.com/\n\nMySQL-5.7包：https://mirrors.huaweicloud.com/mysql/Downloads/MySQL-5.7/\n\n安装：https://blog.csdn.net/Linrp/article/details/123203433?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165180210616782184653825%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=165180210616782184653825&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-5-123203433.142^v9^pc_search_result_cache,157^v4^control&amp;utm_term=linux+mysql5.7%E5%AE%89%E8%A3%85%E5%8C%85&amp;spm=1018.2226.3001.4187\n\nmysql建立外部连接-》防火墙问题：\n\n    firewall-cmd --state   查看防火墙状态，防火墙是开启状态。\n    \n    firewall-cmd --list-all    查看开放端口，3306没有包含在里面。\n    \n    firewall-cmd --zone=public --add-port=3306/tcp --permanent      于是执行此命令开放3306端口号\n    \n    firewall-cmd --reload       重启防火墙\n</code></pre>\n<p>master配置</p>\n<pre><code>1. 修改MySQL数据库的配置文件/etc/my.cnf\n\n    login-bin=mysql-bin #启动二进制日志\n    \n    server-id=100 服务器唯一ID\n    \n2. 重启MySQL服务：systemctl restart mysql   \n \n3. 登录MySQL，建立复制时所需要的用户权限即slave必须被master授权具有该权限的用户，才能通过该用户复制\n\n    ./mysql -uroot -p123456\n    \n    GRANT REPLICATION SLAVE ON *.* to 'zhangsan'@'%' identified by '123456'\n    \n    show master status; 查看master状态\n</code></pre>\n<p>slave配置</p>\n<pre><code> 1. 修改MySQL数据库的配置文件/etc/my.cnf\n         \n     server-id=100 服务器唯一ID\n         \n 2. 重启MySQL服务：systemctl restart mysql\n \n 3. 登录MySQL\n \n    ./mysql -uroot -p123456\n    \n    change master to master_host='192.168.10.147',master_user='zhangsan',master_password='123456',master_log_file\n    ='mysql-bin.000003',master_log_pos=2369;\n    \n    启动 start slave;\n    \n    查看状态  show slave status\\G;\n</code></pre>\n<h5><a id=\"22__839\"></a>2.2 读写分离</h5>\n<pre><code>主库负责处理事务的增删改操作\n\n从库负责处理查询操作\n</code></pre>\n<p>Sharding-JDBC：客户端直连数据库，以jar包形式提供服务，无需额外部署和依赖</p>\n<ol><li> <p>适用于任何基于JDBC的ORM框架，如JPA,Hibernate,Mybatis,JDBC,Spring JDBC Template</p> </li><li> <p>支持任何第三方的数据路连接池，如DBCP,C3P0,Druid</p> </li><li> <p>支持任意实现JDBC规范的数据库</p> </li></ol>\n<p>使用：</p>\n<pre><code>1. 导入坐标\n      \n    &lt;dependency&gt;\n    \n        &lt;groupId&gt;org.apache.shardingsphere&lt;/groupId&gt;\n        \n        &lt;artifactId&gt;sharding-jdbc-spring-boot-starter&lt;/artifactId&gt;\n        \n        &lt;version&gt;4.0.0-RC1&lt;/version&gt;\n        \n    &lt;/dependency&gt;\n\n2.在配置文件中配置读写分离规则 见application.yml\n\n3.在配置文件中配置允许bean定义覆盖配置项 见application.yml\n</code></pre>\n<h5><a id=\"23_Nginx_871\"></a>2.3 Nginx</h5>\n<p>Nginx是一款轻量级web服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。</p>\n<p>稳定版 1.20.1</p>\n<p>下载地址：http://nginx.org/en/download.html</p>\n<p>安装步骤：</p>\n<pre><code>1. 安装依赖：yum install gcc gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel -y\n\n2. 下载Nginx\n\n3. 解压：tar -zxvf nginx-1.16.1.tar.gz\n\n4. cd nginx-1.16.1\n\n5. ./configure --prefix=/ruanjian/nginx\n\n6. 编译安装 make &amp;&amp; make install\n</code></pre>\n<p>Nginx目录结构：</p>\n<pre><code>- conf/nginx.conf  nginx配置文件\n\n- html 存放静态文件\n\n- logs\n\n- sbin/nginx 二进制文件，用于启动、停止nginx服务   \n</code></pre>\n<p>常用命令：</p>\n<pre><code>版本号 ./nginx -v \n\n检查nginx.conf配置是否有误：./nginx -t\n\n查看进程：ps -ef |grep nginx\n\n启动：./nginx\n\n停止： ./nginx -s stop \n\n重新加载配置文件： ./nginx -s reload\n</code></pre>\n<p>nginx.conf</p>\n<pre><code>- 全局块 和nginx运行相关的全局配置\n\n- events块 和网络连接相关的配置\n\n- HTTP块 代理、缓存、日志记录、虚拟主机配置\n\n    - HTTP全局块\n    \n    - server块（可以配置多个）\n        \n        - server全局块\n        \n        - location块\n</code></pre>\n<p>静态资源：</p>\n<pre><code>    server {\n        listen       80 ;                  # 监听端口\n        server_name  localhost;            # 服务器名称\n\n        location / {                       # 匹配客户端请求url\n            root   html;                   # 指定静态资源根目录\n            index  index.html index.htm;   # 指定默认首页\n        }\n    }\n</code></pre>\n<p>反向代理：</p>\n<pre><code>正向代理：在客户端设置代理服务器，通过代理服务器转发请求，最终访问目标服务器\n\n反向代理：用户直接访问反向代理器就可以获得目标服务器的资源，反向代理服务器将请求转发给目标服务器\n</code></pre>\n<p>负载均衡：</p>\n<pre><code>将用户请求根据对应的负载均衡算法分发到应用集群中的一台服务器进行处理\n\nupstream targetserver{                  #upstream指令可以定义一组服务器\n    server 192.168.10.110:8080;\n    server 192.168.10.110:8081;\n}\n\nserver {\n    listen       80 ;                  # 监听端口\n    server_name  localhost;            # 服务器名称\n\n    location / {                       # 匹配客户端请求url\n       proxy_pass http://targetserver;\n    }\n}\n\n策略：\n\n    轮询          默认\n    \n    weight       权重\n    \n    ip_hash      依据IP分配方式\n    \n    least_conn    依据最少连接方式\n    \n    url_hash      依据url分配方式\n    \n    fair          依据相应时间方式\n</code></pre>\n<h4><a id=\"3__983\"></a>3 前后端分离开发</h4>\n<h5><a id=\"31__985\"></a>3.1 前后端分离开发</h5>\n<h5><a id=\"32_YApi_987\"></a>3.2 YApi</h5>\n<h5><a id=\"33_Swagger_989\"></a>3.3 Swagger</h5>\n<pre><code>1. 导入knife4j的maven坐标\n\n    &lt;dependency&gt;\n    \n        &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;\n        \n        &lt;artifactId&gt;knife4j-spring-boot-starter&lt;/artifactId&gt;\n        \n        &lt;version&gt;3.0.2&lt;/version&gt;\n        \n    &lt;/dependency&gt;\n\n2. 导入knife4j的配置类 WebMvcConfig\n\n3. 设置静态资源，否则接口文档页面无法访问 WebMvcConfig\n\n4. 在LoginCheckFilter中设置不需要处理的请求路径\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-05-21 08:50:06", "summary": "目录瑞吉外卖资料项目介绍技术架构功能架构移动端前台功能系统管理后台功能管理端用户端角色功能第一部分：瑞吉外卖项目环境搭建后台系统登录退出功能员工管理员工表新增员工员工信息分页查询启用、禁用员工账号编辑"}