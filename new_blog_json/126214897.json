{"blogid": "126214897", "writerAge": "码龄3年", "writerBlogNum": "118", "writerCollect": "5262", "writerComment": "4588", "writerFan": "30907", "writerGrade": "7级", "writerIntegral": "12149", "writerName": "Bug 终结者", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126214897.jpg", "writerRankTotal": "867", "writerRankWeekly": "4", "writerThumb": "3973", "writerVisitNum": "250329", "blog_read_count": "6602", "blog_time": "于 2022-08-08 08:17:13 发布", "blog_title": "【云原生】Spring Cloud Alibaba 之 Gateway 服务网关实战开发", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_2\">⚡引言</a></li><li><a href=\"#_6\">一、什么是网关</a></li><li><ul><li><a href=\"#_10\">⛅网关的实现原理</a></li></ul>\n</li><li><a href=\"#Gateway__Zuul__32\">二、Gateway 与 Zuul 的区别？</a></li><li><a href=\"#Gateway___46\">三、Gateway 服务网关 快速入门</a></li><li><ul><li><a href=\"#_48\">⛄需求</a></li><li><a href=\"#_58\">⏳项目搭建</a></li><li><a href=\"#_144\">✅启动测试</a></li></ul>\n</li><li><a href=\"#Gateway__192\">四、Gateway 断言工厂</a></li><li><a href=\"#Gateway__222\">五、Gateway 过滤器</a></li><li><ul><li><a href=\"#_228\">⛽过滤器工厂</a></li><li><a href=\"#_305\">♨️全局过滤器</a></li></ul>\n</li><li><a href=\"#_434\">六、源码地址</a></li><li><a href=\"#_440\">⛵小结</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_2\"></a>⚡引言</h1>\n<p><strong>该项目基于 <a href=\"https://wanghuichen.blog.csdn.net/article/details/125921637?spm=1001.2014.3001.5502\">【云原生】SpringCloud Alibaba 之 Nacos注册中心实战</a></strong> 编写，<strong>源码地址见文末</strong></p>\n<h1><a id=\"_6\"></a>一、什么是网关</h1>\n<p><strong><code>Spring Cloud Gateway</code></strong> 是 Spring Cloud 的一个<strong>全新项目</strong>，该项目是基于 <strong>Spring 5.0，Spring Boot 2.0 和 Project Reactor</strong> 等响应式编程和事件流技术开发的网关，它旨在为微服务架构提供一种<strong>简单有效的统一的 API 路由管理方式</strong>。</p>\n<h2><a id=\"_10\"></a>⛅网关的实现原理</h2>\n<p>Gateway 服务网关是所有请求的统一入口，每次请求由服务网关接受并根据路径条件转发至不同的微服务中。</p>\n<p><strong>网关的核心特性</strong></p>\n<ul><li>请求路由</li><li>权限控制</li><li>限流</li></ul>\n<p><strong>架构图</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e0023ebba1e5404ab94f87df0bdea179.png\"/></p>\n<p><strong>权限控制</strong>：网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截。</p>\n<p><strong>路由和负载均衡</strong>：一切请求都必须先经过gateway，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由。当然路由的目标服务有多个时，还需要做负载均衡。</p>\n<p><strong>限流</strong>：当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大。</p>\n<h1><a id=\"Gateway__Zuul__32\"></a>二、Gateway 与 Zuul 的区别？</h1>\n<blockquote>\n<p><strong>Spring Cloud 中的 网关类型</strong></p>\n</blockquote>\n<ul><li>Gateway</li><li>Zuul</li></ul>\n<blockquote>\n<p><strong>两者之间的区别</strong></p>\n</blockquote>\n<ul><li>Zuul 是基于<strong>Servlet</strong> 的实现，属于 <code>阻塞式编程</code></li><li>Spring Cloud Alibaba Gateway 服务网关是<strong>基于 Spring5.x 提供的WebFlux</strong>，属于<code>响应式编程</code>的实现，具备更好的性能。</li></ul>\n<h1><a id=\"Gateway___46\"></a>三、Gateway 服务网关 快速入门</h1>\n<h2><a id=\"_48\"></a>⛄需求</h2>\n<p><strong>基于 Spring Cloud Alibaba Gateway 服务网关完成 路由转发</strong>，具体要求如下</p>\n<ul><li>必须基于 Gateway 服务网关转发路由至指定的微服务</li><li>配置路由的访问时间，<strong>order-service</strong> 服务 访问必须在<strong>2022-07-09之前</strong></li><li>配置服务的负载均衡，防止大规模请求造成服务无法访问</li></ul>\n<h2><a id=\"_58\"></a>⏳项目搭建</h2>\n<blockquote>\n<p><strong>新建 module</strong></p>\n</blockquote>\n<p><strong>右击 <code>nacos-demo</code> 新建 module</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b0cd1a11daaf4a4aace50d17d630417d.png\"/></p>\n<p><strong>Next 下一步，命名为 <code>gateway</code></strong>，单击 <strong>Finish</strong>完成创建</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dae827b96cb24eeaa5eeab5cc1aa8121.png\"/></p>\n<blockquote>\n<p><strong>引入依赖</strong></p>\n</blockquote>\n<pre><code class=\"prism language-xml\"><span class=\"token comment\">&lt;!--网关--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-cloud-starter-gateway<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token comment\">&lt;!--nacos服务发现依赖--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token comment\">&lt;!--客户端负载均衡loadbalancer--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-cloud-starter-loadbalancer<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<blockquote>\n<p><strong>配置项目基本信息</strong></p>\n</blockquote>\n<pre><code class=\"prism language-yaml\"><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10010</span> <span class=\"token comment\"># 网关端口</span>\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> gateway <span class=\"token comment\"># 服务名称</span>\n  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8848</span> <span class=\"token comment\"># nacos地址</span>\n    <span class=\"token key atrule\">gateway</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">routes</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 网关路由配置</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">-</span>service <span class=\"token comment\"># 路由id，自定义，只要唯一即可</span>\n          <span class=\"token comment\"># uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址</span>\n          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> lb<span class=\"token punctuation\">:</span>//userService <span class=\"token comment\"># 路由的目标地址 lb就是负载均衡，后面跟服务名称</span>\n          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 路由断言，也就是判断请求是否符合路由规则的条件</span>\n            <span class=\"token punctuation\">-</span> Path=/user/<span class=\"token important\">**</span> <span class=\"token comment\"># 这个是按照路径匹配，只要以/user/开头就符合要求</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> order<span class=\"token punctuation\">-</span>service <span class=\"token comment\"># 路由id，自定义，只要唯一即可</span>\n          <span class=\"token comment\"># uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址</span>\n          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> lb<span class=\"token punctuation\">:</span>//orderService\n          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> Path=/order/<span class=\"token important\">**</span>\n            <span class=\"token punctuation\">-</span> Before=2022<span class=\"token punctuation\">-</span>07<span class=\"token punctuation\">-</span>09T17<span class=\"token punctuation\">:</span>42<span class=\"token punctuation\">:</span>47.789<span class=\"token punctuation\">-</span>07<span class=\"token punctuation\">:</span>00<span class=\"token punctuation\">[</span>Asia/Shanghai<span class=\"token punctuation\">]</span>\n</code></pre>\n<p>我们将符合<code>Path</code> 规则的一切请求，都代理到 <code>uri</code>参数指定的地址。</p>\n<p>我们将 <code>/user/**</code>开头的请求，代理到<code>lb://userService</code>， <code>/order/**</code> 开头的请求，代理到 <code>lb://orderService</code> ， lb是负载均衡，根据服务名拉取服务列表，实现负载均衡。</p>\n<p><strong>新建 Application 启动类</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>chen</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GatewayApplication</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GatewayApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"_144\"></a>✅启动测试</h2>\n<blockquote>\n<p><strong>依赖服务启动</strong></p>\n</blockquote>\n<p><strong>在启动之前，请务必启动 Nacos 服务，所有的服务都<code>需要依赖于 Nacos服务注册中心来实现</code></strong></p>\n<p><strong>启动 order-service、user-service、gateway服务</strong></p>\n<blockquote>\n<p><strong>测试访问</strong></p>\n</blockquote>\n<p><strong>访问 localhost:10010/user/1</strong>，符合<code>/user/**</code>规则，请求转发 uri 至 http://userService/user/1，得到结果</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d5a0e53a8f694fd9a1a4882a506631e8.png\"/></p>\n<p><strong>访问 localhost:10010/order/101</strong>，符合 <code>/order/**</code> 规则，但不符合 <code>Before=2022-07-09T17:42:47.789-07:00[Asia/Shanghai]</code> 规则，所以，转发uri失败！</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\93261c94932a43078c0151dcd964561c.png\"/></p>\n<p><strong>测试成功，访问user服务成功访问，访问order服务由于已过期限，所以报404未找到！</strong></p>\n<blockquote>\n<p><strong>小结 Gateway服务网关项目</strong></p>\n</blockquote>\n<p><strong>网关搭建步骤：</strong></p>\n<ol><li> <p>创建项目，引入nacos服务发现和gateway依赖</p> </li><li> <p>配置application.yml，包括服务基本信息、nacos地址、路由</p> </li></ol>\n<p><strong>路由配置包括：</strong></p>\n<ol><li> <p>路由id：路由的唯一标示</p> </li><li> <p>路由目标（uri）：路由的目标地址，http代表固定地址，lb代表根据服务名负载均衡</p> </li><li> <p>路由断言（predicates）：判断路由的规则，</p> </li><li> <p>路由过滤器（filters）：对请求或响应做处理</p> </li></ol>\n<h1><a id=\"Gateway__192\"></a>四、Gateway 断言工厂</h1>\n<p>我们在配置文件中写的断言规则只是字符串，这些字符串会被Predicate Factory读取并处理，转变为路由判断的条件</p>\n<p>例如Path=/user/**是按照路径匹配，这个规则是由</p>\n<p><code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code>类来</p>\n<p>处理的，像这样的断言工厂在SpringCloudGateway还有十几个:</p>\n<table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>After</td><td>是某个时间点后的请求</td><td>- After=2037-01-20T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Before</td><td>是某个时间点之前的请求</td><td>- Before=2031-04-13T15:14:47.433+08:00[Asia/Shanghai]</td></tr><tr><td>Between</td><td>是某两个时间点之前的请求</td><td>- Between=2037-01-20T17:42:47.789-07:00[America/Denver], 2037-01-21T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Cookie</td><td>请求必须包含某些cookie</td><td>- Cookie=chocolate, ch.p</td></tr><tr><td>Header</td><td>请求必须包含某些header</td><td>- Header=X-Request-Id, \\d+</td></tr><tr><td>Host</td><td>请求必须是访问某个host（域名）</td><td>- Host=<strong>.somehost.org,</strong>.anotherhost.org</td></tr><tr><td>Method</td><td>请求方式必须是指定方式</td><td>- Method=GET,POST</td></tr><tr><td>Path</td><td>请求路径必须符合指定规则</td><td>- Path=/red/{segment},/blue/**</td></tr><tr><td>Query</td><td>请求参数必须包含指定参数</td><td>- Query=name, Jack或者- Query=name</td></tr><tr><td>RemoteAddr</td><td>请求者的ip必须是指定范围</td><td>- RemoteAddr=192.168.1.1/24</td></tr><tr><td>Weight</td><td>权重处理</td><td></td></tr></tbody></table>\n<p><strong>例如，<code>Path</code>、 Before，在Gateway项目快速入门中就用到了该断言工厂</strong></p>\n<p><strong>具体的详细配置可看 <a href=\"https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-request-predicates-factories\">Spring Cloud Alibaba Gateway 官网</a></strong></p>\n<h1><a id=\"Gateway__222\"></a>五、Gateway 过滤器</h1>\n<p>GatewayFilter是网关中提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3a7124d2bd394066b38ba2efa030b7b6.png\"/></p>\n<h2><a id=\"_228\"></a>⛽过滤器工厂</h2>\n<p><strong>路由器的种类</strong></p>\n<p>Spring提供了31种不同的路由过滤器工厂。例如：</p>\n<table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>AddRequestHeader</td><td>给当前请求添加一个请求头</td></tr><tr><td>RemoveRequestHeader</td><td>移除请求中的一个请求头</td></tr><tr><td>AddResponseHeader</td><td>给响应结果中添加一个响应头</td></tr><tr><td>RemoveResponseHeader</td><td>从响应结果中移除有一个响应头</td></tr><tr><td>RequestRateLimiter</td><td>限制请求的流量</td></tr></tbody></table>\n<blockquote>\n<p><strong>请求头过滤器</strong></p>\n</blockquote>\n<p>下面我们以AddRequestHeader 为例来讲解。</p>\n<p><strong>需求</strong>：给所有进入userservice的请求添加一个请求头：Truth= Hello WHC !!!</p>\n<p>只需修改 gateway 服务的 application.yaml 文件即可添加路由过滤即可</p>\n<pre><code class=\"prism language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">gateway</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">routes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">-</span>service \n        <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> lb<span class=\"token punctuation\">:</span>//userService \n        <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span> \n        <span class=\"token punctuation\">-</span> Path=/user/<span class=\"token important\">**</span> \n        <span class=\"token key atrule\">filters</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 过滤器</span>\n        <span class=\"token punctuation\">-</span> AddRequestHeader=Truth<span class=\"token punctuation\">,</span> Hello WHC <span class=\"token tag\">!</span><span class=\"token tag\">!</span><span class=\"token tag\">!</span> <span class=\"token comment\"># 添加请求头</span>\n</code></pre>\n<p><strong>在userService 下写过滤器，只对userService服务生效，重新启动即可生效</strong></p>\n<blockquote>\n<p><strong>默认过滤器</strong></p>\n</blockquote>\n<p>如果要对所有的路由都生效，则可以将过滤器工厂写到default下。格式如下：</p>\n<pre><code class=\"prism language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">gateway</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">routes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">-</span>service \n        <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> lb<span class=\"token punctuation\">:</span>//userservice \n        <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span> \n        <span class=\"token punctuation\">-</span> Path=/user/<span class=\"token important\">**</span>\n      <span class=\"token key atrule\">default-filters</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 默认过滤项，全局生效</span>\n      <span class=\"token punctuation\">-</span> AddRequestHeader=Truth<span class=\"token punctuation\">,</span> Hello WHC <span class=\"token tag\">!</span><span class=\"token tag\">!</span><span class=\"token tag\">!</span> <span class=\"token comment\"># 添加请求头 </span>\n</code></pre>\n<p><strong>添加该默认过滤器，对所有微服务生效，重新启动服务即可生效</strong></p>\n<blockquote>\n<p><strong>过滤器小结</strong></p>\n</blockquote>\n<p><strong>过滤器的作用是什么？</strong></p>\n<ol><li>对路由的请求和响应做加工处理，比如添加请求头，返回指定响应信息</li><li>配置在路由下的过滤器只对当前服务生效</li></ol>\n<p><strong>defaultFilters的作用是什么？</strong></p>\n<ul><li>配置过滤器，并对全局服务生效</li></ul>\n<h2><a id=\"_305\"></a>♨️全局过滤器</h2>\n<p>上一节的过滤器中，可以看出，这些过滤器都是固定的，如果我们想要拦截请求，做自己的业务逻辑更是无法实现</p>\n<blockquote>\n<p><strong>全局过滤器的作用</strong></p>\n</blockquote>\n<p>全局过滤器的作用也是处理一切进入网关的请求和微服务响应，与<strong>GatewayFilter</strong>的作用一样。区别在于GatewayFilter通过配置定义，处理逻辑是固定的；<strong>而GlobalFilter的逻辑需要自己写代码实现。</strong></p>\n<p><strong>实现流程</strong></p>\n<p>实现GlobalFilter接口</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">GlobalFilter</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">/**\n     *  处理当前请求，有必要的话通过{@link GatewayFilterChain}将请求交给下一个过滤器处理\n     *\n     * @param exchange 请求上下文，里面可以获取Request、Response等信息\n     * @param chain 用来把请求委托给下一个过滤器 \n     * @return {@code Mono&lt;Void&gt;} 返回标示当前过滤器业务结束\n     */</span>\n    <span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerWebExchange</span> exchange<span class=\"token punctuation\">,</span> <span class=\"token class-name\">GatewayFilterChain</span> chain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在filter中编写自定义逻辑，可以实现下列功能：</p>\n<ul><li>登录状态判断</li><li>权限校验</li><li>请求限流等</li></ul>\n<blockquote>\n<p><strong>自定义全局过滤器</strong></p>\n</blockquote>\n<p><strong>需求</strong>：定义全局过滤器，拦截请求，判断请求的参数是否满足下面条件：</p>\n<ul><li> <p>参数中是否有authorization，</p> </li><li> <p>authorization参数值是否为admin</p> </li></ul>\n<p>如果同时满足则放行，否则拦截</p>\n<p><strong>核心代码</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>chen<span class=\"token punctuation\">.</span>gateway</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>gateway<span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GatewayFilterChain</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>gateway<span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GlobalFilter</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Ordered</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Order</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span>reactive<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServerHttpRequest</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MultiValueMap</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServerWebExchange</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">reactor<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>publisher<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Mono</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 认证过滤器类\n * 需要通过注解或接口的形式去管理过滤器的顺序，因为一个项目中可能有多个过滤器\n */</span>\n<span class=\"token comment\">//@Order(-1)</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthorizeFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">GlobalFilter</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Ordered</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerWebExchange</span> exchange<span class=\"token punctuation\">,</span> <span class=\"token class-name\">GatewayFilterChain</span> chain<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 网关基于 WebFlux 响应式编程编写，api可能有些不一样</span>\n\n        <span class=\"token comment\">// 1. 获取请求参数</span>\n        <span class=\"token class-name\">ServerHttpRequest</span> request <span class=\"token operator\">=</span> exchange<span class=\"token punctuation\">.</span><span class=\"token function\">getRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 2. 获取参数中的authorization 参数</span>\n        <span class=\"token class-name\">MultiValueMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> params <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getQueryParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 3， 判断参数值是否等于 admin</span>\n        <span class=\"token class-name\">String</span> auth <span class=\"token operator\">=</span> params<span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"authorization\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 4. 如果相等，放行</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>auth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> chain<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>exchange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 设置响应码，未登录</span>\n        exchange<span class=\"token punctuation\">.</span><span class=\"token function\">getResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span>UNAUTHORIZED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 5，如果不等，则拦截</span>\n        <span class=\"token keyword\">return</span> exchange<span class=\"token punctuation\">.</span><span class=\"token function\">getResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<blockquote>\n<p><strong>过滤器的执行顺序</strong></p>\n</blockquote>\n<p>请求进入网关会碰到三类过滤器：当前路由的过滤器、DefaultFilter、GlobalFilter</p>\n<p>请求路由后，会将当前路由过滤器和DefaultFilter、GlobalFilter，合并到一个过滤器链（集合）中，排序后依次执行每个过滤器：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b56473d6e4044e01aecd8889762c010a.png\"/></p>\n<p>排序的规则是什么呢？</p>\n<ul><li>每一个过滤器都必须指定一个int类型的order值，<strong>order值越小，优先级越高，执行顺序越靠前</strong>。</li><li>GlobalFilter通过实现Ordered接口，或者添加@Order注解来指定order值，由我们自己指定</li><li>路由过滤器和defaultFilter的order由Spring指定，默认是按照声明顺序从1递增。</li><li>当过滤器的order值一样时，会按照 defaultFilter &gt; 路由过滤器 &gt; GlobalFilter的顺序执行。</li></ul>\n<p>详细内容，<strong>可以查看源码：</strong></p>\n<p><code>org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator#getFilters()</code>方法是先加载defaultFilters，然后再加载某个route的filters，然后合并。</p>\n<p><code>org.springframework.cloud.gateway.handler.FilteringWebHandler#handle()</code>方法会加载全局过滤器，与前面的过滤器合并后根据order排序，组织过滤器链</p>\n<h1><a id=\"_434\"></a>六、源码地址</h1>\n<p><strong>GitHub开源地址：</strong><a href=\"https://github.com/wanghuichen/nacos-demo\">https://github.com/wanghuichen/nacos-demo</a></p>\n<p><strong>GitEE 开源地址：</strong> <a href=\"https://gitee.com/javawhc/nacos-demo\">https://gitee.com/javawhc/nacos-demo</a></p>\n<h1><a id=\"_440\"></a>⛵小结</h1>\n<p>以上就是【<strong>Bug 终结者</strong>】对 <strong>【云原生】Spring Cloud Alibaba 之 Gateway 服务网关实战开发</strong> 的简单介绍，<strong>Spring Cloud Alibaba 是目前比较火的微服务中间件，很强大，必须吃透！</strong>，同时，<strong>Gateway 服务网关是撑起分布式的请求入口，起到<code>承上启下</code>的作用</strong>，Gateway <strong>也可以解决流量削峰问题</strong>，防止大规模请求一拥而上，导致服务不可用等问题，可以说，<strong>Gateway是一个很棒的服务网关！</strong></p>\n<blockquote>\n<p>如果这篇【文章】有帮助到你，希望可以给【<strong>Bug 终结者</strong>】点个赞👍，创作不易，如果有对【<strong>后端技术</strong>】、【<strong>前端领域</strong>】感兴趣的小可爱，也欢迎关注❤️❤️❤️ 【<strong>Bug 终结者</strong>】❤️❤️❤️，我将会给你带来巨大的【收获与惊喜】💝💝💝！</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-08-08 08:17:13", "summary": "文章目录引言一、什么是网关网关的实现原理二、与的区别？三、服务网关快速入门需求项目搭建启动测试四、断言工厂五、过滤器过滤器工厂全局过滤器六、源码地址小结引言该项目基于云原生之注册中心实战编写，源码地址"}