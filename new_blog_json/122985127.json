{"blogid": "122985127", "writerAge": "码龄1年", "writerBlogNum": "1", "writerCollect": "4", "writerComment": "0", "writerFan": "0", "writerGrade": "1级", "writerIntegral": "13", "writerName": "MyDe7", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122985127.jpg", "writerRankTotal": "258223", "writerRankWeekly": "1392211", "writerThumb": "2", "writerVisitNum": "2439", "blog_read_count": "2437", "blog_time": "已于 2022-03-07 17:41:38 修改", "blog_title": "Laravel执行定时任务", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h3>1.创建一个自定义的Command</h3>\n<blockquote>\n<pre># php artisan make:command Hello \n</pre>\n</blockquote>\n<h3>2.编辑Hello.php文件（app/Console/Commands/Hello.php）</h3>\n<pre><code>​\n​\n&lt;?php\n\nnamespace App\\Console\\Commands;\n\nuse App\\Http\\Controllers\\CeShiController;\nuse Illuminate\\Console\\Command;\nuse Illuminate\\Support\\Facades\\Log;\n\nclass Hello extends Command\n{\n    //名称\n    protected $signature = 'command:ceshi';\n\n    //描述\n    protected $description = 'Command description';\n\n    public function __construct()\n    {\n        parent::__construct();\n    }\n\n    //执行的业务\n    public function handle()\n    {\n        //调用方法\n        (new CeShiController())-&gt;ceshi();\n        //或者直接书写逻辑\n        //Log::info(time().'测试定时任务');\n    }\n}</code></pre>\n<h3>3.修改kernel.php</h3>\n<pre><code>&lt;?php\n\nnamespace App\\Console;\n\nuse App\\Console\\Commands\\Hello;\nuse Illuminate\\Console\\Scheduling\\Schedule;\nuse Illuminate\\Foundation\\Console\\Kernel as ConsoleKernel;\n\nclass Kernel extends ConsoleKernel\n{\n    //应用中自定义的 Artisan 命令,可多个\n    protected $commands = [\n        Hello::class\n    ];\n\n    //定义计划任务和执行事件\n    protected function schedule(Schedule $schedule)\n    {\n        //每分钟执行一次名称为command:ceshi的任务\n        $schedule-&gt;command('command:ceshi')-&gt;everyMinute()-&gt;withoutOverlapping;\n        // 工作日（周一至周五） 8 点 至 17 点每小时执行一次\n        //$schedule-&gt;command('foo')\n        //    -&gt;weekdays()\n        //    -&gt;hourly()\n        //    -&gt;timezone('America/Chicago')\n        //    -&gt;between('8:00', '17:00');\n    }\n\n    protected function commands()\n    {\n        $this-&gt;load(__DIR__ . '/Commands');\n\n        require base_path('routes/console.php');\n    }\n}\n</code></pre>\n<p>调用频率和限制</p>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\"><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>-&gt;cron('* * * * *');</td><td>自定义 Cron 计划执行任务</td></tr><tr><td>-&gt;everyMinute();</td><td>每分钟执行一次任务</td></tr><tr><td>-&gt;everyFiveMinutes();</td><td>每五分钟执行一次任务</td></tr><tr><td>-&gt;everyTenMinutes();</td><td>每十分钟执行一次任务</td></tr><tr><td>-&gt;everyFifteenMinutes();</td><td>每十五分钟执行一次任务</td></tr><tr><td>-&gt;everyThirtyMinutes();</td><td>每三十分钟执行一次任务</td></tr><tr><td>-&gt;hourly();</td><td>每小时执行一次任务         </td></tr><tr><td>-&gt;hourlyAt(17);</td><td>每小时第 17 分钟执行一次任务</td></tr><tr><td>-&gt;daily();</td><td>每天 0 点执行一次任务</td></tr><tr><td>-&gt;dailyAt('13:00');</td><td>每天 13 点执行一次任务</td></tr><tr><td>-&gt;twiceDaily(1, 13);</td><td>每天 1 点及 13 点各执行一次任务</td></tr><tr><td>-&gt;weekly();</td><td>每周日 0 点执行一次任务</td></tr><tr><td>-&gt;weeklyOn(1, '8:00');</td><td>每周一的 8 点执行一次任务</td></tr><tr><td>-&gt;monthly();</td><td>每月第一天 0 点执行一次任务</td></tr><tr><td>-&gt;monthlyOn(4, '15:00');</td><td>每月 4 号的 15 点 执行一次任务</td></tr><tr><td>-&gt;quarterly();</td><td>每季度第一天 0 点执行一次任务</td></tr><tr><td>-&gt;yearly();</td><td>每年第一天 0 点执行一次任务</td></tr><tr><td>-&gt;timezone('America/New_York');</td><td>设置时区</td></tr><tr><td>-&gt;weekdays();</td><td>限制任务在工作日执行</td></tr><tr><td>-&gt;weekends();</td><td>限制任务在周末执行 </td></tr><tr><td>-&gt;sundays();</td><td>限制任务在周日执行</td></tr><tr><td>-&gt;mondays();</td><td>限制任务在周一执行</td></tr><tr><td>-&gt;tuesdays();</td><td>限制任务在周二执行</td></tr><tr><td>-&gt;wednesdays();</td><td>限制任务在周三执行</td></tr><tr><td>-&gt;thursdays();</td><td>限制任务在周四执行</td></tr><tr><td>-&gt;fridays();</td><td>限制任务在周五执行</td></tr><tr><td>-&gt;saturdays();</td><td>限制任务在周六执行</td></tr><tr><td>-&gt;between($start, $end);</td><td>限制任务在 <code>$start</code> 和 <code>$end</code> 区间执行-&gt;hourly()-&gt;between('7:00', '22:00');</td></tr><tr><td>-&gt;when(Closure);</td><td>限制任务在闭包返回为真时执行</td></tr><tr><td>-&gt;environments($env);</td><td>限制任务在特定环境执行</td></tr><tr><td>-&gt;withoutOverlapping();</td><td>避免任务重复执行</td></tr></tbody></table>\n<h3>4.执行定时任务</h3>\n<p>   手动执行：php artisan command:ceshi (名称)</p>\n<p>    服务器自动执行：</p>\n<blockquote>\n<p>1.编辑定时任务：</p>\n<p>crontab -e</p>\n<p>2.php多版本可以将php改为版本的绝对路径，项目路径</p>\n<p> * * * * * php /www/wwwroot/ceshi/artisan schedule:run &gt;&gt; /www/wwwroot/ceshi/test.txt 2&gt;&amp;1</p>\n<p>3.保存重启cron服务</p>\n<p>CentOS7方法：</p>\n<p>重启服务<br/> systemctl restart crond.service </p>\n<p>CentOS6方法：</p>\n<p>重启服务</p>\n<p>service crond restart</p>\n</blockquote>\n<h3>5.结果</h3>\n<pre><code>local.INFO: 1645090022定时任务  \nlocal.INFO: 1645090081定时任务  \nlocal.INFO: 1645090142定时任务  \nlocal.INFO: 1645090201定时任务  \nlocal.INFO: 1645090262定时任务  </code></pre>\n<p></p>\n</div>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 1, "time": "2022-03-07 17:41:38", "summary": "创建一个自定义的编辑文件名称描述执行的业务调用方法或者直接书写逻辑测试定时任务修改应用中自定义的命令可多个定义计划任务和执行事件每分钟执行一次名称为的任务工作日周一至周五点至点每小时执行一次调用频率和"}