{"blogid": "123287441", "writerAge": "码龄2年", "writerBlogNum": "12", "writerCollect": "37", "writerComment": "21", "writerFan": "356", "writerGrade": "2级", "writerIntegral": "203", "writerName": "记阿楠同学黑历史的小册子", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123287441.jpg", "writerRankTotal": "106894", "writerRankWeekly": "691596", "writerThumb": "50", "writerVisitNum": "21950", "blog_read_count": "6925", "blog_time": "已于 2022-03-15 13:56:01 修改", "blog_title": "（C#脚本）Unity中角色移动的几种实现方法，以及心得。（适合新手入门）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p><strong>目录</strong></p>\n<p style=\"margin-left:80px;\"><a href=\"#1.%E5%AF%B9Unity%E8%84%9A%E6%9C%AC%E5%86%99%E5%85%A5%E6%9C%89%E4%B8%80%E5%AE%9A%E7%9A%84%E6%80%9D%E7%BB%B4%E4%BA%86%E8%A7%A3%E3%80%82\">1.对Unity脚本写入有一定的思维了解。</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#2.%E5%88%86%E6%9E%90%E9%9C%80%E6%B1%82%EF%BC%8C%E8%A7%82%E5%AF%9F%E4%BA%86%E8%A7%A3%E8%A6%81%E5%AE%9E%E7%8E%B0%E7%9A%84%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%9D%A1%E4%BB%B6%E5%9C%A8Unity%E4%B8%AD%E7%9A%84%E5%A4%96%E5%9C%A8%E8%A1%A8%E7%8E%B0%E3%80%82\">2.分析需求，观察了解要实现的项目的条件在Unity中的外在表现。</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#3.%E5%BC%80%E5%A7%8B%E9%80%9A%E8%BF%87%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%8A%9F%E8%83%BD%E3%80%82\">3.开始通过代码实现功能。</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#4.%E4%B8%80%E4%B8%AA%E6%95%B4%E4%BD%93%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\">4.一个整体的代码实现</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#5.%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97\">5.学习心得</a></p>\n<hr/>\n<p> </p>\n<p> </p>\n<p><strong>PS</strong>：首先我们要知道，在C#中Transform组件是可以直接调用的，而其他的（例如：Rigidbody，Animator）都需要通过 <strong>GetConpoment&lt;组件的名称&gt;（）；</strong> 来获取进行实例化(一般在初始化时)。</p>\n<p>例子：调用Rigidbody2D</p>\n<pre><code class=\"language-cs\">private Rigidbody2D rb2D;//声明变量实例化\n\nvoid Start()\n\n{\n\n      rb2d = GetComponent&lt;Rigidbody2D&gt;();//获取\n\n}</code></pre>\n<h3>1.对Unity脚本写入有一定的思维了解。</h3>\n<p>我们在C#中想要实现对Unity内各个组件、属性设置的修改和调用，首先要观察它在外部的形式，也就是Unity内的表现</p>\n<p>比如我想要控制<strong>2D角色移动</strong>，那么改变的就它在<strong>X，Y轴上的坐标（横向和竖向）</strong>，可以观察到每个物体的Transform组件下的Position就是该物体的坐标位置，所以我们只<strong>需要在脚本实现修改该坐标位置即可实现物体的移动</strong>。（见图1.1）</p>\n<p style=\"text-align:center;\"><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6K6w6Zi_5qWg5ZCM5a2m6buR5Y6G5Y-y55qE5bCP5YaM5a2Q,size_11,color_FFFFFF,t_70,g_se,x_16\" src=\"..\\..\\static\\image\\c3d3331f7b9740b28e99ffc8818366c2.png\"/></p>\n<p style=\"text-align:center;\">图1.1</p>\n<h3>2.分析需求，观察了解要实现的项目的条件在Unity中的外在表现。</h3>\n<p>a.上文已经提到，移动实际上就是物体坐标的改变，其次我们需要用键盘或鼠标对它进行控制，它需要有一个移动速度。</p>\n<p>b.在Unity的Project Setting中可以看到它内置了Inpuut Manager，它作为对外和键盘鼠标交互。<strong>Horizontal</strong>控制物体在<strong>X轴</strong>上的运动，“A,D”输入（可以直接在外部修改）<strong>Vertical</strong>控制物体<strong>Y轴</strong>上的运动。（见图2.1）</p>\n<p style=\"text-align:center;\"><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6K6w6Zi_5qWg5ZCM5a2m6buR5Y6G5Y-y55qE5bCP5YaM5a2Q,size_11,color_FFFFFF,t_70,g_se,x_16\" src=\"..\\..\\static\\image\\7e91f857f99f4bd586c34002063de8c3.png\"/></p>\n<p style=\"text-align:center;\"> 图2.1</p>\n<h3>3.开始通过代码实现功能。</h3>\n<p>a.在Assets里新建Scripts文件夹用于存放脚本文件，在该文件夹中建立<strong>PlayerMovementController</strong>脚本。</p>\n<p>b.需要设置的变量，移动速度<strong>moveSpeed</strong>，定义一个二维向量<strong>moveDir</strong></p>\n<pre><code class=\"language-cs\">using UnityEngine;\n\npublic float MoveSpeed=3.0f;\nprivate Vector2 moveDir = new Vector2();\n</code></pre>\n<p>ps：速度用<strong>public</strong>（把它暴露出去），方便我们在外部进行修改，表现是图3.1</p>\n<p style=\"text-align:center;\"><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6K6w6Zi_5qWg5ZCM5a2m6buR5Y6G5Y-y55qE5bCP5YaM5a2Q,size_11,color_FFFFFF,t_70,g_se,x_16\" src=\"..\\..\\static\\image\\2369f65b6f7a4e3389fd4b316cd21606.png\"/></p>\n<p style=\"text-align:center;\"> 图3.1</p>\n<p>c.写移动函数</p>\n<p>把二维向量的两个方向与键盘交互绑定，当按一下A键，X坐标就有左边的1的增量</p>\n<pre><code class=\"language-cs\">private void MoveCharacter\n{\n  moveDir.x = Input.GetAxisRaw('Horizontal');\n  moveDir.y =Input.GetAixisRaw('Vertical');\n  moveDir.Normalize();//当有两个方向的向量时进行整合\n\n}</code></pre>\n<p>ps：<strong>Normalize </strong>作为将两个方向向量合并处理的一个函数</p>\n<p style=\"text-align:center;\"><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6K6w6Zi_5qWg5ZCM5a2m6buR5Y6G5Y-y55qE5bCP5YaM5a2Q,size_12,color_FFFFFF,t_70,g_se,x_16\" src=\"..\\..\\static\\image\\1446da534b3647aebc48e8a6fa4507a0.png\"/></p>\n<p style=\"text-align:center;\">图3.2</p>\n<p>（1）调用<strong>transform</strong>代码实现</p>\n<p>ps:因为我们这个组件做好后要挂到<strong>Player</strong>上，所以这里的<strong>transform</strong>都是直接调用的<strong>Player</strong>的。</p>\n<p>在坐标位置上加上变化值</p>\n<pre><code class=\"language-cs\">transform.position += Vector3(moveDir.x,moveDir.y,0.0f) * MoveSpeed * Time.deltaTime;</code></pre>\n<p>ps:其中<strong>Time.delate</strong>相当于一个变量，理解为在一定时间内完成上一帧的动作，运行有50帧，它就是0.02，它会随着电脑运行帧率而变化，目的是为了让游戏在不同电脑环境下都显得更为流畅稳定。</p>\n<p>调用<strong>transform</strong>自带的<strong>Translate</strong>函数直接修改变化</p>\n<pre><code class=\"language-cs\">transform.Translate(moveDir * MoveSpeed * Time.deltaTime);</code></pre>\n<p>（2）调用<strong>RigidBody2D</strong>实现代码</p>\n<p>要先给Player挂上<strong>Rigidbody2D</strong>的组件，直接在Unity界面Player下<strong>Add Component</strong></p>\n<p>先声明变量</p>\n<pre><code class=\"language-cs\">private RigidBody2D rb2d；</code></pre>\n<p>用Rigidbody2D内置的MovePosition函数</p>\n<pre><code class=\"language-cs\">rb2d.MovePosition(new Vector2(transform.position.x,transform.position.y)+moveDir * MoveSpeed * Time.fixedDeltaTime);</code></pre>\n<p>在原坐标上增加变化值</p>\n<pre><code class=\"language-cs\">rb2d.position += moveDir * MoveSpeed * Time.fixedDeltaTime;</code></pre>\n<p>把Player当作一个刚体，相当于给它一个速度推动移动，调用velocity函数，它内置了fixeddDeltaTime,所以不用乘出来</p>\n<pre><code class=\"language-cs\">rb2D.velocity = moveDir * MoveSpeed;//velocity函数相当于内置了fixedDeltaTime，所以不用乘。</code></pre>\n<p>以上是利用Rigidbody2D的三种实现方法，这里用的<strong>Time.fixedDeltaTime</strong>，下面说一下它的解读以及和<strong>Time.deltaTime</strong>的区别。</p>\n<p>使用<strong>Time.fixedDeltaTime</strong>要放到<strong>FixedUpdate</strong>运行，<strong>fixedUpdate</strong>的刷新根据<strong>fixedDeltaTime</strong>的时间来的，而它是一个固定值0.02，相当于是1秒50帧。</p>\n<p><strong>Update</strong>是每帧调用一次。</p>\n<h3>4.一个整体的代码实现</h3>\n<p>transfo：</p>\n<pre><code class=\"language-cs\">using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PlayerMovementController : MonoBehaviour\n{\n    public float moveSpeed = 3.0f;\n    private Vector2 movDir = new Vector2();\n    private Rigidbody2D rb2d;\n\n    void Start()\n    {\n        rb2d = GetComponent&lt;Rigidbody2D&gt;();\n    }\n\n     private void FixedUpdate()\n    {\n        MoveCharacter();\n    }\n    void Update()\n    {\n        UpdateState();\n    }\n    private void MoveCharacter()\n    {\n        movDir.x = Input.GetAxisRaw(\"Horizontal\");\n        movDir.y = Input.GetAxisRaw(\"Vertical\");\n        movDir.Normalize();\n        transform.position += new Vector3(movDir.x, movDir.y,0.0f) * moveSpeed * Time.deltaTime;\n \n        transform.Translate(movDir * moveSpeed * Time.deltaTime);\n\n    }\n\n\n\n}</code></pre>\n<p>Rigidbody2D ：</p>\n<pre><code class=\"language-cs\">using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PlayerMovementController : MonoBehaviour\n{\n    public float moveSpeed = 3.0f;\n    private Vector2 movDir = new Vector2();\n    private Rigidbody2D rb2d;\n\n    void Start()\n    {\n        rb2d = GetComponent&lt;Rigidbody2D&gt;();\n    }\n\n     private void FixedUpdate()\n    {\n        MoveCharacter();\n    }\n    void Update()\n    {\n        UpdateState();\n    }\n    private void MoveCharacter()\n    {\n    rb2d.MovePosition(new Vector2(transform.position.x, transform.position.y) + movDir * moveSpeed * Time.fixedDeltaTime);\n        rb2d.position += movDir * moveSpeed * Time.fixedDeltaTime;\n        rb2d.velocity = movDir * moveSpeed;\n\n    }\n\n\n\n}</code></pre>\n<h3>5.学习心得</h3>\n<p>最后说一点，我认为Unity的学习重在实践，多跟着别人的教学项目做，但不能单纯跟着，要多思考，它这个函数背后是怎么运作的，以后自己写别的时候这点要注意什么，上手之后有了问题再去解决，实践出真知一点没错。</p>\n<p>我个人是先看视频，再着手做，做完后，再根据自己做的东西总结成笔记，最后来写成博客，就像是努力让别人也能接收，也是对自己知识的一种升级巩固。</p>\n<p> </p>\n</div>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-15 13:56:01", "summary": "目录对脚本写入有一定的思维了解。分析需求，观察了解要实现的项目的条件在中的外在表现。开始通过代码实现功能。一个整体的代码实现学习心得：首先我们要知道，在中组件是可以直接调用的，而其他的例如：，都需要通"}