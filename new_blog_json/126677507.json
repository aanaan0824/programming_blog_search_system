{"blogid": "126677507", "writerAge": "码龄1年", "writerBlogNum": "452", "writerCollect": "2386", "writerComment": "2985", "writerFan": "1318", "writerGrade": "7级", "writerIntegral": "11386", "writerName": "YZL40514131", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126677507.jpg", "writerRankTotal": "1160", "writerRankWeekly": "98", "writerThumb": "2646", "writerVisitNum": "209628", "blog_read_count": "154", "blog_time": "于 2022-09-05 08:22:26 发布", "blog_title": "python——装饰器深入研究（二）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\763163737fdf4b958f0cb0affd74964f.png\"/></p>\n<h1><a id=\"_2\"></a>一、装饰器的副作用</h1>\n<blockquote>\n<p><strong><code>函数名称.__name__</code>：获取函数名称<br/> <code>函数名称.__doc__</code>：获取函数注释</strong></p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">work1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    函数的文档字符串注释\n    :return:\n    \"\"\"</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"函数--work1---\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'函数名称：'</span><span class=\"token punctuation\">,</span>work1<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'函数文档注释：'</span><span class=\"token punctuation\">,</span>work1<span class=\"token punctuation\">.</span>__doc__<span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"_16\"></a>执行结果：当函数没有被装饰器装饰时的执行结果为：</h2>\n<pre><code class=\"prism language-python\">函数名称： work1\n函数文档注释： \n    函数的文档字符串注释\n    <span class=\"token punctuation\">:</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">:</span>\n    \n</code></pre>\n<h1><a id=\"_24\"></a>二、函数被装饰器装饰后</h1>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">decorator</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n        res<span class=\"token operator\">=</span>func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> wrapper\n\n\n\n<span class=\"token decorator annotation punctuation\">@decorator</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">work1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    函数的文档字符串注释\n    :return:\n    \"\"\"</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"函数--work1---\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'函数名称：'</span><span class=\"token punctuation\">,</span>work1<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'函数文档注释：'</span><span class=\"token punctuation\">,</span>work1<span class=\"token punctuation\">.</span>__doc__<span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"_48\"></a>执行结果：函数被装饰器装饰后的执行结果</h2>\n<pre><code class=\"prism language-python\">函数名称： wrapper\n函数文档注释： <span class=\"token boolean\">None</span>\n</code></pre>\n<h1><a id=\"_54\"></a>三、副作用：</h1>\n<p><font color=\"#FF0000\" size=\"4\"><strong>由于装饰器装饰了之后，原函数名字指向的是装饰器内部的闭包，<br/> 因此会产生副作用，无法在通过函数名，去正常获取原函数的属性</strong></font></p>\n<h1><a id=\"_60\"></a>四、副作用消除</h1>\n<h2><a id=\"font_size5_colorFF000041wrapsfont_61\"></a><font color=\"#FF0000\" size=\"5\"><strong>4.1、wraps的作用：获取装饰器中所传的函数的属性，并且把属性给被装饰器装饰的函数中</strong></font></h2>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"用户函数\"\"\"</span>\n\n<span class=\"token decorator annotation punctuation\">@wraps</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">'''定义函数'''</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'登录'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"login函数的名字:\"</span><span class=\"token punctuation\">,</span>login<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"login函数的文档注释:\"</span><span class=\"token punctuation\">,</span>login<span class=\"token punctuation\">.</span>__doc__<span class=\"token punctuation\">)</span>\n\nlogin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"_75\"></a>执行结果：</h2>\n<p>login函数的名字: user<br/> login函数的文档注释: 用户函数<br/> 登录</p>\n<h2><a id=\"4241_80\"></a>4.2、从4.1函数为例进行源码分析：</h2>\n<h3><a id=\"wraps_81\"></a>wraps源码：</h3>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">wraps</span><span class=\"token punctuation\">(</span>wrapped<span class=\"token punctuation\">,</span>\n          assigned <span class=\"token operator\">=</span> WRAPPER_ASSIGNMENTS<span class=\"token punctuation\">,</span>\n          updated <span class=\"token operator\">=</span> WRAPPER_UPDATES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Decorator factory to apply update_wrapper() to a wrapper function\n\n       Returns a decorator that invokes update_wrapper() with the decorated\n       function as the wrapper argument and the arguments to wraps() as the\n       remaining arguments. Default arguments are as for update_wrapper().\n       This is a convenience function to simplify applying partial() to\n       update_wrapper().\n    \"\"\"</span>\n    <span class=\"token keyword\">return</span> partial<span class=\"token punctuation\">(</span>update_wrapper<span class=\"token punctuation\">,</span> wrapped<span class=\"token operator\">=</span>wrapped<span class=\"token punctuation\">,</span>\n                   assigned<span class=\"token operator\">=</span>assigned<span class=\"token punctuation\">,</span> updated<span class=\"token operator\">=</span>updated<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"update_wrapper_98\"></a>update_wrapper()源码</h3>\n<pre><code class=\"prism language-python\">WRAPPER_ASSIGNMENTS <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'__module__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__qualname__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span>\n                       <span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">)</span>\nWRAPPER_UPDATES <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'__dict__'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">update_wrapper</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">,</span>\n                   wrapped<span class=\"token punctuation\">,</span>\n                   assigned <span class=\"token operator\">=</span> WRAPPER_ASSIGNMENTS<span class=\"token punctuation\">,</span>\n                   updated <span class=\"token operator\">=</span> WRAPPER_UPDATES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Update a wrapper function to look like the wrapped function\n\n       wrapper is the function to be updated\n       wrapped is the original function\n       assigned is a tuple naming the attributes assigned directly\n       from the wrapped function to the wrapper function (defaults to\n       functools.WRAPPER_ASSIGNMENTS)\n       updated is a tuple naming the attributes of the wrapper that\n       are updated with the corresponding attribute from the wrapped\n       function (defaults to functools.WRAPPER_UPDATES)\n    \"\"\"</span>\n    <span class=\"token keyword\">for</span> attr <span class=\"token keyword\">in</span> assigned<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            value <span class=\"token operator\">=</span> <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>wrapped<span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> AttributeError<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">pass</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> attr <span class=\"token keyword\">in</span> updated<span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>wrapped<span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># Issue #17482: set __wrapped__ last so we don't inadvertently copy it</span>\n    <span class=\"token comment\"># from the wrapped function when updating __dict__</span>\n    wrapper<span class=\"token punctuation\">.</span>__wrapped__ <span class=\"token operator\">=</span> wrapped\n    <span class=\"token comment\"># Return the wrapper so this can be used as a decorator via partial()</span>\n    <span class=\"token keyword\">return</span> wrapper\n</code></pre>\n<h3><a id=\"_133\"></a>解析图</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2931f52dd5bc456eaedec40d055fb1a4.png\"/><br/> <font color=\"#FF0000\" size=\"5\"><strong>相当于把user属性一个一个的拿出来添加到login函数中</strong></font></p>\n<h2><a id=\"43_137\"></a>4.3、消除副作用</h2>\n<blockquote>\n<p><strong><font color=\"#FF0000\" size=\"4\">@wraps(func) ：将func（work1）函数的属性复制一份给wrapper</font></strong></p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> wraps\n<span class=\"token keyword\">def</span> <span class=\"token function\">decorator</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token decorator annotation punctuation\">@wraps</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span>                    <span class=\"token comment\">#将func（work1）函数的属性复制一份给wrapper</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n        res<span class=\"token operator\">=</span>func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> wrapper\n\n\n\n<span class=\"token decorator annotation punctuation\">@decorator</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">work1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    函数的文档字符串注释\n    :return:\n    \"\"\"</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"函数--work1---\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'函数名称：'</span><span class=\"token punctuation\">,</span>work1<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'函数文档注释：'</span><span class=\"token punctuation\">,</span>work1<span class=\"token punctuation\">.</span>__doc__<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h2><a id=\"_164\"></a>执行结果</h2>\n<p>函数名称： work1<br/> 函数文档注释：<br/> 函数的文档字符串注释<br/> :return:</p>\n<h1><a id=\"_172\"></a>五、通过装饰器对函数和类进行属性添加和修改</h1>\n<h2><a id=\"51_173\"></a>5.1、给函数添加属性</h2>\n<blockquote>\n<p><strong><font color=\"#FF0000\" size=\"4\">函数名称.属性名称=‘属性值’<br/> <code>函数名称.__dict__</code>：获取函数所有的属性和方法</font></strong></p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">work1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    函数的文档字符串注释\n    :return:\n    \"\"\"</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"函数--work1---\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#函数对象的属性</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'函数名称：'</span><span class=\"token punctuation\">,</span>work1<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#print(type(work1))</span>\n\nwork1<span class=\"token punctuation\">.</span>desc<span class=\"token operator\">=</span><span class=\"token string\">'给函数添加属性'</span>\nwork1<span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span><span class=\"token number\">18</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'函数名称：'</span><span class=\"token punctuation\">,</span>work1<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>函数名称： {}<br/> 函数名称： {‘desc’: ‘给函数添加属性’, ‘age’: 18}</p>\n<h2><a id=\"52_196\"></a>5.2、通过装饰器给函数添加属性</h2>\n<h3><a id=\"_197\"></a>特别注意：</h3>\n<p><strong><font color=\"#FF0000\" size=\"4\">闭包形式的装饰器一般用于：拓展功能</font></strong><br/> <strong><font color=\"#FF0000\" size=\"4\">普通函数作为装饰器：一般用于对函数和类的属性进行修改添加，案例如下</font></strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">add_attr</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    func<span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n    func<span class=\"token punctuation\">.</span>data<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">return</span> func\n\n<span class=\"token decorator annotation punctuation\">@add_attr</span>           <span class=\"token comment\">#todo work1=add_attr(work1)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">work1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    函数的文档字符串注释\n    :return:\n    \"\"\"</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"函数--work1---\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#函数对象的属性</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'函数名称：'</span><span class=\"token punctuation\">,</span>work1<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>执行结果：<br/> 函数名称： {‘age’: 1, ‘data’: [2, 8, 23, 22, 24]}</p>\n<h2><a id=\"_221\"></a>执行逻辑：</h2>\n<blockquote>\n<p><strong><font color=\"#FF0000\" size=\"4\">1、@add_attr ：将函数work1作为参数传递给装饰器add_attr；<br/> 2、并且将add_attr(work1)用与函数同名的变量work1来接收，即work1=add_attr(work1)<br/> 3、调用work1()即执行func<br/> 4、装饰器内部实现的功能给函数work1添加属性age、data<br/> </font></strong></p>\n</blockquote>\n<h2><a id=\"53_229\"></a>5.3、通过装饰器给类添加属性</h2>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">add_attr</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    func<span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n    func<span class=\"token punctuation\">.</span>data<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">return</span> func\n\n<span class=\"token decorator annotation punctuation\">@add_attr</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Demo<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>执行结果：新增了属性：‘age’: 1, ‘data’: [2, 8, 23, 22, 24]<br/> {‘<strong>module</strong>’: ‘<strong>main</strong>’, ‘<strong>dict</strong>’: &lt;attribute ‘<strong>dict</strong>’ of ‘Demo’ objects&gt;, ‘<strong>weakref</strong>’: &lt;attribute ‘<strong>weakref</strong>’ of ‘Demo’ objects&gt;, ‘<strong>doc</strong>’: None, ‘age’: 1, ‘data’: [2, 8, 23, 22, 24]}</p>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/69101ffd638542629eedb310b04bd085.webp#pic_center\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-05 08:22:26", "summary": "在这里插入图片描述一、装饰器的副作用函数名称：获取函数名称函数名称：获取函数注释函数的文档字符串注释函数函数名称：函数文档注释：执行结果：当函数没有被装饰器装饰时的执行结果为：函数名称：函数文档注释："}