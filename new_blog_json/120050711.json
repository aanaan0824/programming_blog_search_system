{"blogid": "120050711", "writerAge": "码龄2年", "writerBlogNum": "948", "writerCollect": "2442", "writerComment": "5061", "writerFan": "4506", "writerGrade": "7级", "writerIntegral": "21014", "writerName": "大忽悠爱忽悠", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_120050711.jpg", "writerRankTotal": "410", "writerRankWeekly": "3478", "writerThumb": "3758", "writerVisitNum": "413613", "blog_read_count": "1077", "blog_time": "于 2021-09-03 12:51:31 发布", "blog_title": "设计模式---装饰者模式", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>装饰者模式</h3>\n<ul><li><a href=\"#_4\">介绍</a></li><li><a href=\"#_18\">角色</a></li><li><a href=\"#_31\">示例代码</a></li><li><a href=\"#_106\">星巴克咖啡的例子</a></li><li><ul><li><a href=\"#_108\">方案一</a></li><li><a href=\"#_Drink_119\">方案二 ：将调料内置到Drink类中</a></li><li><a href=\"#_145\">方案三:装饰者模式</a></li><li><ul><li><a href=\"#_153\">代码演示</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_314\">装饰者模式的简化</a></li><li><a href=\"#_324\">透明性的要求</a></li><li><a href=\"#_344\">半透明的装饰模式</a></li><li><a href=\"#_366\">装饰模式的优点</a></li><li><a href=\"#_376\">装饰模式的缺点</a></li><li><a href=\"#_384\">装饰模式注意事项</a></li><li><a href=\"#_395\">适用场景</a></li><li><a href=\"#JAVA_IO_403\">设计模式在JAVA I/O库中的应用</a></li><li><a href=\"#_442\">透明和半透明的装饰模式的区别</a></li><li><a href=\"#_467\">参考文章</a></li></ul>\n</div>\n<p></p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_4\"></a>介绍</h1>\n<p><strong>装饰者模式(Decorator Pattern)</strong>：动态地给一个对象增加一些额外的职责，增加对象功能来说，装饰模式比生成子类实现更为灵活。装饰模式是一种对象结构型模式。</p>\n<p>在装饰者模式中，为了让系统具有更好的灵活性和可扩展性，我们通常会定义一个抽象装饰类，而将具体的装饰类作为它的子类</p>\n<p>装饰模式以对客户透明的方式动态地给一个对象附加上更多的责任。换言之，客户端并不会觉得对象在装饰前和装饰后有什么不同。装饰模式可以在不使用创造更多子类的情况下，将对象的功能加以扩展。</p>\n<p>装饰模式的类图如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5d5f0400453f4948a5e8b03165226a7b.png\"/></p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_18\"></a>角色</h1>\n<ul><li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> <strong>Component（抽象构件）</strong>：给出一个抽象接口，以规范准备接收附加责任的对象。</li><li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> <strong>ConcreteComponent（具体构件）</strong>：定义一个将要接收附加责任的类。</li><li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> <strong>Decorator（抽象装饰类）</strong>：持有一个构件(Component)对象的实例，并定义一个与抽象构件接口一致的接口。</li><li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> <strong>ConcreteDecorator（具体装饰类）</strong>：负责给构件对象“贴上”附加的责任。</li></ul>\n<p>由于具体构件类和装饰类都实现了相同的抽象构件接口，因此装饰模式以对客户透明的方式动态地给一个对象附加上更多的责任，换言之，客户端并不会觉得对象在装饰前和装饰后有什么不同。装饰模式可以在不需要创造更多子类的情况下，将对象的功能加以扩展。</p>\n<p>装饰模式的<strong>核心在于抽象装饰类的设计。</strong></p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_31\"></a>示例代码</h1>\n<p>抽象构件角色</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">public</span> interface Component <span class=\"token punctuation\">{<!-- --></span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sampleOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>具体构件角色</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConcreteComponent</span> implements Component <span class=\"token punctuation\">{<!-- --></span>\n\n    @Override\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sampleOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 写相关的业务代码</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>装饰角色</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Decorator</span> implements Component<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> Component component<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token function\">Decorator</span><span class=\"token punctuation\">(</span>Component component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>component <span class=\"token operator\">=</span> component<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    @Override\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sampleOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 委派给构件</span>\n        component<span class=\"token punctuation\">.</span><span class=\"token function\">sampleOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>具体装饰角色</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConcreteDecoratorA</span> extends Decorator <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">ConcreteDecoratorA</span><span class=\"token punctuation\">(</span>Component component<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">super</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    @Override\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sampleOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n　　　　　super<span class=\"token punctuation\">.</span><span class=\"token function\">sampleOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 写相关的业务代码</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConcreteDecoratorB</span> extends Decorator <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">ConcreteDecoratorB</span><span class=\"token punctuation\">(</span>Component component<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">super</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    @Override\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sampleOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n　　　　  super<span class=\"token punctuation\">.</span><span class=\"token function\">sampleOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 写相关的业务代码</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_106\"></a>星巴克咖啡的例子</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\399466eca9224076a4855fe88a9eed6e.png\"/></p>\n<h2><a id=\"_108\"></a>方案一</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4bff85604ef645da8702f8a617330f62.png\"/><br/> 加入不同调料的咖啡，例如：蒸奶（Steamed Milk）、豆浆（Soy）、摩卡（Mocha，也就是巧克力风味）或覆盖奶泡。星巴兹会根据所加入的调料收取不同的费用。所以订单系统必须考虑到这些调料部分。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7759c7fec04744e38c1b11727d8ddaed.png\"/></p>\n<hr color=\"#000000\" size='1\"'/>\n<h2><a id=\"_Drink_119\"></a>方案二 ：将调料内置到Drink类中</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bae49c264df04f1897e125be623e87b0.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\51f6e3005d9f4c8894bf6b3a36745bb3.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6abd1f3b82474fa9b3a7c5859aff3692.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f8fca15dc31046909dc86af52d9a6d79.png\"/></p>\n<p><strong>这种设计虽然满足了现在的需求，但是我们想一下，如果出现下面情况，我们怎么办，</strong></p>\n<p>①、调料价钱的改变会使我们更改现有代码。</p>\n<p>②、一旦出现新的调料，我们就需要加上新的方法，并改变超类中的cost()方法。</p>\n<p>③、以后可能会开发出新饮料。对这些饮料而言（例如：冰茶），某些调料可能并不适合，但是在这个设计方式中，Tea（茶）子类仍将继承那些不适合的方法，例如：hasWhip()（加奶泡）。</p>\n<p>④、万一顾客想要双倍摩卡咖啡，怎么办？</p>\n<p>很明显，上面的设计并不能够从根本上解决我们所碰到的问题。并且这种设计违反了 开放关闭原则（类应该对扩展开放，对修改关闭。）。</p>\n<p>那我们怎么办呢？好啦，装饰者可以非常完美的解决以上的所有问题，让我们有一个设计非常nice的咖啡馆。</p>\n<hr color=\"#000000\" size='1\"'/>\n<h2><a id=\"_145\"></a>方案三:装饰者模式</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\67496c62d7da48c09dbae25cf0554ab8.png\"/></p>\n<p><strong>这里的Coffee是一个缓冲层，负责将抽取出所有具体咖啡的共同点</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\87e66031569f485a94744a0302dc69a8.png\"/></p>\n<h3><a id=\"_153\"></a>代码演示</h3>\n<p>饮料抽象类：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">public</span> abstract <span class=\"token keyword\">class</span> <span class=\"token class-name\">Drink</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">protected</span> String decription<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//描述</span>\n   <span class=\"token keyword\">public</span> String <span class=\"token function\">getDecription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">return</span> decription<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">public</span> abstract Integer <span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//返回饮料的价格</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>缓冲层：抽取出所有咖啡类的共同特征，即计算价钱</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//缓冲层----所有种类咖啡的共同点抽取出来</span>\n<span class=\"token keyword\">public</span> abstract <span class=\"token keyword\">class</span> <span class=\"token class-name\">Coffee</span> extends Drink\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//共同特点：计算价格</span>\n    @Override\n    <span class=\"token keyword\">public</span> Integer <span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//价格从0累加</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>具体的咖啡类:</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LongBlack</span> extends Coffee\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">LongBlack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        decription<span class=\"token operator\">=</span><span class=\"token string\">\"美式咖啡\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    @Override\n    <span class=\"token keyword\">public</span> Integer <span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ChinaBlack</span> extends Coffee\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">ChinaBlack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        decription<span class=\"token operator\">=</span><span class=\"token string\">\"中式咖啡\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    @Override\n    <span class=\"token keyword\">public</span> Integer <span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Espresso</span> extends Coffee\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//设置描述信息</span>\n    <span class=\"token function\">Espresso</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        decription<span class=\"token operator\">=</span><span class=\"token string\">\"意大利咖啡\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    @Override\n    <span class=\"token keyword\">public</span> Integer <span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//意大利咖啡20元</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n</code></pre>\n<p>抽象装饰者</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//装饰者</span>\n<span class=\"token keyword\">public</span> abstract <span class=\"token keyword\">class</span> <span class=\"token class-name\">Decorator</span> extends Drink\n<span class=\"token punctuation\">{<!-- --></span>\n    @Override\n    <span class=\"token keyword\">public</span> abstract String <span class=\"token function\">getDecription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>具体装饰者—即调料</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Milk</span> extends Decorator<span class=\"token punctuation\">{<!-- --></span>\n    Drink drink<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">Milk</span><span class=\"token punctuation\">(</span>Drink drink<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>drink<span class=\"token operator\">=</span>drink<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    @Override\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">getDecription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"加了牛奶的\"</span><span class=\"token operator\">+</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>drink<span class=\"token punctuation\">.</span><span class=\"token function\">getDecription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    @Override\n    <span class=\"token keyword\">public</span> Integer <span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>drink<span class=\"token punctuation\">.</span><span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Chocolate</span> extends Decorator<span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token comment\">//用一个实例变量记录饮料，也就是被装饰者</span>\n    Drink drink<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Chocolate</span><span class=\"token punctuation\">(</span>Drink drink<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>drink<span class=\"token operator\">=</span>drink<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    @Override\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">getDecription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"加了巧克力的\"</span><span class=\"token operator\">+</span>drink<span class=\"token punctuation\">.</span><span class=\"token function\">getDecription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    @Override\n    <span class=\"token keyword\">public</span> Integer <span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//在原有饮料价格的基础上加上调料味的价格</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">5</span><span class=\"token operator\">+</span>drink<span class=\"token punctuation\">.</span><span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>测试</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">test</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    @Test\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//模拟下单</span>\n        <span class=\"token comment\">//首先点一个美式咖啡，不加任何调料</span>\n        Drink drink<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">LongBlack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"购买了\"</span><span class=\"token operator\">+</span>drink<span class=\"token punctuation\">.</span><span class=\"token function\">getDecription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"  花了\"</span><span class=\"token operator\">+</span>drink<span class=\"token punctuation\">.</span><span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//给美式咖啡加一个巧克力</span>\n        drink<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">Chocolate</span><span class=\"token punctuation\">(</span>drink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"购买了\"</span><span class=\"token operator\">+</span>drink<span class=\"token punctuation\">.</span><span class=\"token function\">getDecription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"  花了\"</span><span class=\"token operator\">+</span>drink<span class=\"token punctuation\">.</span><span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//给美式咖啡再加一个牛奶</span>\n        drink<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">Milk</span><span class=\"token punctuation\">(</span>drink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"购买了\"</span><span class=\"token operator\">+</span>drink<span class=\"token punctuation\">.</span><span class=\"token function\">getDecription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"  花了\"</span><span class=\"token operator\">+</span>drink<span class=\"token punctuation\">.</span><span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//再把牛奶和巧克力加一次</span>\n        drink<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">Chocolate</span><span class=\"token punctuation\">(</span>drink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"购买了\"</span><span class=\"token operator\">+</span>drink<span class=\"token punctuation\">.</span><span class=\"token function\">getDecription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"  花了\"</span><span class=\"token operator\">+</span>drink<span class=\"token punctuation\">.</span><span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        drink<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">Milk</span><span class=\"token punctuation\">(</span>drink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"购买了\"</span><span class=\"token operator\">+</span>drink<span class=\"token punctuation\">.</span><span class=\"token function\">getDecription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"  花了\"</span><span class=\"token operator\">+</span>drink<span class=\"token punctuation\">.</span><span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"====================================================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//简化写法</span>\n        Drink d<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">Chocolate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">Milk</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ChinaBlack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"购买了\"</span><span class=\"token operator\">+</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">getDecription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"  花了\"</span><span class=\"token operator\">+</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6cc3fcf59b904de6849bdd1c7568873e.png\"/></p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_314\"></a>装饰者模式的简化</h1>\n<p>大多数情况下，装饰模式的实现都要比上面给出的示意性例子要简单。</p>\n<p>如果只有一个ConcreteComponent类，那么可以考虑去掉抽象的Component类（接口），把Decorator作为一个ConcreteComponent子类。如下图所示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b56a9de151bf4db495dae397ff0c2091.png\"/><br/> 如果只有一个ConcreteDecorator类，那么就没有必要建立一个单独的Decorator类，而可以把Decorator和ConcreteDecorator的责任合并成一个类。甚至在只有两个ConcreteDecorator类的情况下，都可以这样做。如下图所示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\12433e4b1bce48279fb9af0c8093401a.png\"/></p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_324\"></a>透明性的要求</h1>\n<p>装饰模式对客户端的透明性要求程序不要声明一个ConcreteComponent类型的变量，而应当声明一个Component类型的变量。</p>\n<p>用顶层抽象父类指向具体子类，以多态的形式实现透明性要求</p>\n<p>应该像下面这样写:</p>\n<pre><code class=\"prism language-cpp\">Drink drink<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">LongBlack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//给美式咖啡加一个巧克力</span>\ndrink<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">Chocolate</span><span class=\"token punctuation\">(</span>drink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>而不是这样写</p>\n<pre><code class=\"prism language-cpp\">Drink drink<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">LongBlack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//给美式咖啡加一个巧克力</span>\nChocolate drink<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">Chocolate</span><span class=\"token punctuation\">(</span>drink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_344\"></a>半透明的装饰模式</h1>\n<p>然而，纯粹的装饰模式很难找到。装饰模式的用意是在不改变接口的前提下，增强所考虑的类的性能。</p>\n<p>在增强性能的时候，往往需要建立新的公开的方法。</p>\n<p>比如巧克力可以单独售卖，即售卖巧克力棒，那么这里巧克力类里面需要新增加一个sell方法，用于单独售卖</p>\n<p>这就导致了大多数的装饰模式的实现都是“半透明”的，而不是完全透明的。换言之，允许装饰模式改变接口，增加新的方法。这意味着客户端可以声明ConcreteDecorator类型的变量，从而可以调用ConcreteDecorator类中才有的方法：</p>\n<pre><code class=\"prism language-cpp\">Drink drink<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">LongBlack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//给美式咖啡加一个巧克力</span>\nChocolate drink<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">Chocolate</span><span class=\"token punctuation\">(</span>drink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//售卖巧克力棒</span>\ndrink<span class=\"token punctuation\">.</span><span class=\"token function\">sell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>半透明的装饰模式是介于装饰模式和适配器模式之间的。适配器模式的用意是改变所考虑的类的接口，也可以通过改写一个或几个方法，或增加新的方法来增强或改变所考虑的类的功能。大多数的装饰模式实际上是半透明的装饰模式，这样的装饰模式也称做半装饰、半适配器模式。</p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_366\"></a>装饰模式的优点</h1>\n<ul><li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> 对于扩展一个对象的功能，装饰模式比继承更加灵活性，不会导致类的个数急剧增加。</li><li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> 可以通过一种动态的方式来扩展一个对象的功能，通过配置文件可以在运行时选择不同的具体装饰类，从而实现不同的行为。</li><li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> 可以对一个对象进行多次装饰，通过使用不同的具体装饰类以及这些装饰类的排列组合，可以创造出很多不同行为的组合，得到功能更为强大的对象。</li><li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> 具体构件类与具体装饰类可以独立变化，用户可以根据需要增加新的具体构件类和具体装饰类，原有类库代码无须改变，符合 “开闭原则”。</li></ul>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_376\"></a>装饰模式的缺点</h1>\n<ul><li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> 使用装饰模式进行系统设计时将产生很多小对象，这些对象的区别在于它们之间相互连接的方式有所不同，而不是它们的类或者属性值有所不同，大量小对象的产生势必会占用更多的系统资源，在一定程序上影响程序的性能。</li><li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> 装饰模式提供了一种比继承更加灵活机动的解决方案，但同时也意味着比继承更加易于出错，排错也很困难，对于多次装饰的对象，调试时寻找错误可能需要逐级排查，较为繁琐。</li></ul>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_384\"></a>装饰模式注意事项</h1>\n<p>(1) 尽量保持装饰类的接口与被装饰类的接口相同，这样，对于客户端而言，无论是装饰之前的对象还是装饰之后的对象都可以一致对待。这也就是说，在可能的情况下，我们应该尽量使用透明装饰模式。</p>\n<p>(2) 尽量保持具体构件类是一个“轻”类，也就是说不要把太多的行为放在具体构件类中，我们可以通过装饰类对其进行扩展。</p>\n<p>(3) 如果只有一个具体构件类，那么抽象装饰类可以作为该具体构件类的直接子类。</p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_395\"></a>适用场景</h1>\n<ul><li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> 在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。</li><li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> 当不能采用继承的方式对系统进行扩展或者采用继承不利于系统扩展和维护时可以使用装饰模式。不能采用继承的情况主要有两类：第一类是系统中存在大量独立的扩展，为支持每一种扩展或者扩展之间的组合将产生大量的子类，使得子类数目呈爆炸性增长；第二类是因为类已定义为不能被继承（如Java语言中的final类）</li></ul>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"JAVA_IO_403\"></a>设计模式在JAVA I/O库中的应用</h1>\n<p>装饰模式在Java语言中的最著名的应用莫过于Java I/O标准库的设计了</p>\n<p>由于Java I/O库需要很多性能的各种组合，如果这些性能都是用继承的方法实现的，那么每一种组合都需要一个类，这样就会造成大量性能重复的类出现。而如果采用装饰模式，那么类的数目就会大大减少，性能的重复也可以减至最少。因此装饰模式是Java I/O库的基本模式。</p>\n<p>Java I/O库的对象结构图如下，由于Java I/O的对象众多，因此只画出InputStream的部分。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\16c1693697a24f04bbbbfacdeac17202.png\"/><br/> 下面是使用I/O流读取文件内容的简单操作示例。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IOTest</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> throws IOException <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 流式读取文件</span>\n        DataInputStream dis <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">{<!-- --></span>\n            dis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">DataInputStream</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token keyword\">new</span> <span class=\"token function\">BufferedInputStream</span><span class=\"token punctuation\">(</span>\n                            <span class=\"token keyword\">new</span> <span class=\"token function\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//读取文件内容</span>\n            byte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> byte<span class=\"token punctuation\">[</span>dis<span class=\"token punctuation\">.</span><span class=\"token function\">available</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            dis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>bs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            String content <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>bs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>finally<span class=\"token punctuation\">{<!-- --></span>\n            dis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>观察上面的代码，会发现最里层是一个FileInputStream对象，然后把它传递给一个BufferedInputStream对象，经过BufferedInputStream处理，再把处理后的对象传递给了DataInputStream对象进行处理，这个过程其实就是装饰器的组装过程，FileInputStream对象相当于原始的被装饰的对象，而BufferedInputStream对象和DataInputStream对象则相当于装饰器。</p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_442\"></a>透明和半透明的装饰模式的区别</h1>\n<p>理想的装饰模式在对被装饰对象进行功能增强的同时，要求具体构件角色、装饰角色的接口与抽象构件角色的接口完全一致。</p>\n<p>而适配器模式则不然，一般而言，适配器模式并不要求对源对象的功能进行增强，但是会改变源对象的接口，以便和目标接口相符合。</p>\n<p>装饰模式有透明和半透明两种，这两种的区别就在于装饰角色的接口与抽象构件角色的接口是否完全一致。</p>\n<p>透明的装饰模式也就是理想的装饰模式，要求具体构件角色、装饰角色的接口与抽象构件角色的接口完全一致。</p>\n<p>相反，如果装饰角色的接口与抽象构件角色接口不一致，也就是说装饰角色的接口比抽象构件角色的接口宽的话，装饰角色实际上已经成了一个适配器角色，这种装饰模式也是可以接受的，称为“半透明”的装饰模式，如下图所示</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\83f00d8a97ba44baa2a0e1edf8838637.png\"/></p>\n<p>在适配器模式里面，适配器类的接口通常会与目标类的接口重叠，但往往并不完全相同。换言之，适配器类的接口会比被装饰的目标类接口宽。</p>\n<p>显然，半透明的装饰模式实际上就是处于适配器模式与装饰模式之间的灰色地带。如果将装饰模式与适配器模式合并成为一个“包装模式”的话，那么半透明的装饰模式倒可以成为这种合并后的“包装模式”的代表。</p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_467\"></a>参考文章</h1>\n<p><a href=\"https://whirlys.blog.csdn.net/article/details/82764333\">设计模式 | 装饰者模式及典型应用</a></p>\n<p><a href=\"https://www.cnblogs.com/java-my-life/archive/2012/04/20/2455726.html\">齐天大圣的故事</a></p>\n<p><a href=\"https://www.cnblogs.com/of-fanruice/p/11565679.html\">星巴兹咖啡的故事</a></p>\n<hr color=\"#000000\" size='1\"'/>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2021-09-03 12:51:31", "summary": "装饰者模式介绍角色示例代码星巴克咖啡的例子方案一方案二：将调料内置到类中方案三装饰者模式代码演示装饰者模式的简化透明性的要求半透明的装饰模式装饰模式的优点装饰模式的缺点装饰模式注意事项适用场景设计模式"}