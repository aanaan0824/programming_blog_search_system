{"blogid": "122896043", "writerAge": "码龄5年", "writerBlogNum": "37", "writerCollect": "46", "writerComment": "2", "writerFan": "7", "writerGrade": "2级", "writerIntegral": "353", "writerName": "C#气氛组队员", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122896043.jpg", "writerRankTotal": "50311", "writerRankWeekly": "139210", "writerThumb": "7", "writerVisitNum": "20886", "blog_read_count": "1815", "blog_time": "已于 2022-02-17 11:19:09 修改", "blog_title": "WPF控件颜色绑定的两种方式", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>学习过程：初学WPF时，把WPF当做WinForm来使用，改变Background属性通常是在代码中直接使用Background属性。<br/> 后来学会WPF绑定后，使用直接绑定颜色的方式。如下所示，直接绑定颜色类型的属性。但它在其他线程中改变颜色时，就会报错，网上可以查到使用委托的方式，也不推荐。<br/> WPF并不推荐直接绑定颜色属性的方式。代老师（returnTrue999）向我推荐了2种常用方式。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Label</span> Background<span class=\"token operator\">=</span><span class=\"token string\">\"{Binding IsAlarmColor}\"</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><strong>方式1、重写Background属性的Style</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token operator\">&lt;</span>Label<span class=\"token operator\">&gt;</span>\n\t<span class=\"token operator\">&lt;</span>Label<span class=\"token punctuation\">.</span>Style<span class=\"token operator\">&gt;</span>\n\t\t<span class=\"token operator\">&lt;</span><span class=\"token class-name\">Style</span> TargetType<span class=\"token operator\">=</span><span class=\"token string\">\"Label\"</span><span class=\"token operator\">&gt;</span>\n\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token class-name\">Setter</span> Property<span class=\"token operator\">=</span><span class=\"token string\">\"Background\"</span> Value<span class=\"token operator\">=</span><span class=\"token string\">\"Transparent\"</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n           \t<span class=\"token operator\">&lt;</span>Style<span class=\"token punctuation\">.</span>Triggers<span class=\"token operator\">&gt;</span>\n          \t\t<span class=\"token operator\">&lt;</span><span class=\"token class-name\">DataTrigger</span> Binding<span class=\"token operator\">=</span><span class=\"token string\">\"{Binding IsAlarm}\"</span> Value<span class=\"token operator\">=</span><span class=\"token string\">\"true\"</span><span class=\"token operator\">&gt;</span>\n              \t\t<span class=\"token operator\">&lt;</span><span class=\"token class-name\">Setter</span> Property<span class=\"token operator\">=</span><span class=\"token string\">\"Background\"</span> Value<span class=\"token operator\">=</span><span class=\"token string\">\"Red\"</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n\t          \t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>DataTrigger<span class=\"token operator\">&gt;</span>\n             \t<span class=\"token operator\">&lt;</span><span class=\"token class-name\">DataTrigger</span> Binding<span class=\"token operator\">=</span><span class=\"token string\">\"{Binding IsAlarm}\"</span> Value<span class=\"token operator\">=</span><span class=\"token string\">\"false\"</span><span class=\"token operator\">&gt;</span>\n                \t<span class=\"token operator\">&lt;</span><span class=\"token class-name\">Setter</span> Property<span class=\"token operator\">=</span><span class=\"token string\">\"Background\"</span> Value<span class=\"token operator\">=</span><span class=\"token string\">\"Gray\"</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n           \t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>DataTrigger<span class=\"token operator\">&gt;</span>\n\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Style<span class=\"token punctuation\">.</span>Triggers<span class=\"token operator\">&gt;</span>\n\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Style<span class=\"token operator\">&gt;</span>\n\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Label<span class=\"token punctuation\">.</span>Style<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Label<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>上述代码只需要改变绑定的IsAlarm(bool格式)，就可以改变Label的Background属性。IsAlarm=true时，Label的背景色为红色；IsAlarm=false时，Label的背景色为灰色。</p>\n<p><strong>方式2、使用变量转换器</strong><br/> WPF代码：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token operator\">&lt;</span>Window<span class=\"token punctuation\">.</span>Resources<span class=\"token operator\">&gt;</span>\n\t<span class=\"token operator\">&lt;</span>ResourceDictionary<span class=\"token operator\">&gt;</span>\n   \t\t<span class=\"token operator\">&lt;</span>local<span class=\"token punctuation\">:</span><span class=\"token class-name\">ColorConverter</span> x<span class=\"token punctuation\">:</span>Key<span class=\"token operator\">=</span><span class=\"token string\">\"colorConverter\"</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ResourceDictionary<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Window<span class=\"token punctuation\">.</span>Resources<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token class-name\">Label</span> Background<span class=\"token operator\">=</span><span class=\"token string\">\"{Binding IsAlarm,Converter={StaticResource colorConverter},ConverterParameter=RedGray}\"</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>转换器代码：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Globalization</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Windows<span class=\"token punctuation\">.</span>Data</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Windows<span class=\"token punctuation\">.</span>Media</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">MotionControl</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ColorConvert</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IValueConverter</span></span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">object</span></span> <span class=\"token function\">Convert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Type</span> targetType<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">object</span></span> parameter<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CultureInfo</span> culture<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> valueTemp <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span>Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToBoolean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> parameterTemp <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span>Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"RedGray\"</span><span class=\"token operator\">==</span> parameterTemp<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SolidColorBrush</span><span class=\"token punctuation\">(</span>valueTemp <span class=\"token punctuation\">?</span> Colors<span class=\"token punctuation\">.</span>Red <span class=\"token punctuation\">:</span> Colors<span class=\"token punctuation\">.</span>Gray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SolidColorBrush</span><span class=\"token punctuation\">(</span>Colors<span class=\"token punctuation\">.</span>White<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">object</span></span> <span class=\"token function\">ConvertBack</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Type</span> targetType<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">object</span></span> parameter<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CultureInfo</span> culture<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NotImplementedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>1、先写一个颜色转换器的类（需要多种颜色转换器时，仅需要1个转换器类，通过ConverterParameter来传递参数，选择哪种颜色转换器）；<br/> 2、在XAML中先引用颜色转换器；<br/> 3、Background再绑定值和颜色转换器。//ConverterParameter属性用来传递参数值（string类型），可以用来选择使用哪种颜色转换器。<br/> 上述代码只需要改变绑定的IsAlarm(bool格式)，就可以改变Label的Background属性。IsAlarm=true时，Label的背景色为红色；IsAlarm=false时，Label的背景色为灰色。</p>\n<p>方式1和方式2各有优劣。<br/> 方式1，不需要增加类，但需要重写style，推荐使用在需要改变少量控件的颜色的情况下。<br/> 方式2，XAML代码少，但需要增加类，推荐使用在需要改变很多控件的颜色的情况下。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-02-17 11:19:09", "summary": "学习过程：初学时，把当做来使用，改变属性通常是在代码中直接使用属性。后来学会绑定后，使用直接绑定颜色的方式。如下所示，直接绑定颜色类型的属性。但它在其他线程中改变颜色时，就会报错，网上可以查到使用委托"}