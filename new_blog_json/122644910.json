{"blogid": "122644910", "writerAge": "码龄2年", "writerBlogNum": "7", "writerCollect": "32", "writerComment": "12", "writerFan": "5", "writerGrade": "1级", "writerIntegral": "96", "writerName": "@烛光雨夜", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122644910.jpg", "writerRankTotal": "127799", "writerRankWeekly": "1023348", "writerThumb": "7", "writerVisitNum": "17507", "blog_read_count": "7266", "blog_time": "于 2022-01-23 12:07:31 发布", "blog_title": "Unity中使用GameObject.Find()、FindWithTag()、FindGameObjectsWithTag()等函数的方法", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>对于在Unity开发的过程中，熟练运用一些函数方法能够有助于我们更好的开发一些功能和提升开发的效率。这里主要讲一些Unity关于查到方面的函数方法。</p>\n<h2><a id=\"GameObjectFind_1\"></a>GameObject.Find()</h2>\n<p>这个方法没有其他重载的方法。通过的名字来查找一个不是特定的物体，简而言之，当一个场景有多个名字相同的物体的时候，无法找到你想要的那一个，该函数的返回值是一个GameObject类的对象,如：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">GameObject</span> target <span class=\"token operator\">=</span> GameObject<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//name为所要查找事物的名字</span>\n\n</code></pre>\n<p><strong>总结：</strong><br/> 1）函数的返回值是<strong>一个</strong>被查找到的对象（GameObject类），如果存在多个同名的物体，也只是返回其中一个。（可能不是你想要的那一个）<br/> 2）物体需要处于active()处于true状态才能被找到。<br/> 3）FInd()非常消耗性能，不建议在Update()方法里面使用。<br/> 4）该函数也可以查找子游戏物体对象。如果多个游戏场景同时运行，那么Find()查找的范围是所有场景。</p>\n<h2><a id=\"GameObjectFindWithTag_14\"></a>GameObject.FindWithTag()</h2>\n<p>该方法与Find()用法比较相似，区别就是该方法是通过标签来查找一个不是特定的游戏物体，如果找到，则返回一个游戏物体对象，没有找到会传一个空字符或者null.抛出一个异常</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">GameObject</span> target <span class=\"token operator\">=</span> GameObject<span class=\"token punctuation\">.</span><span class=\"token function\">FindWithTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//tag为所要查找事物的标签</span>\n\n</code></pre>\n<p><strong>总结</strong><br/> 1）该函数物体也是<strong>一个不是特定</strong>的游戏物体对象<br/> 2）该方法消耗的性能比Find()方法小<br/> 下面几点基本都与Find()方法相同</p>\n<h2><a id=\"GameObjectFindGameObjectsWithTag_28\"></a>GameObject.FindGameObjectsWithTag()</h2>\n<p>我感觉这个函数挺好用的，这个函数也是根据标签来查找游戏物体对象，它返回的是一个游戏物体对象数组，场景中存在相同标签的物体都将被返回。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">GameObject<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> targets <span class=\"token operator\">=</span> GameObject<span class=\"token punctuation\">.</span><span class=\"token function\">FindGameObjectsWithTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//返回tag相同的所有物体</span>\n<span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GameObject</span> target <span class=\"token keyword\">in</span> targets<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//下面的Distance函数的距离可以根据需求设置</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Vector3<span class=\"token punctuation\">.</span><span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span>gameObject<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;=</span><span class=\"token number\">1.01f</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token comment\">//可以筛选出一定距离内的物体</span>\n       <span class=\"token comment\">//我通常使用这个方法并结合其他方法找到我所需要的特定的游戏物体对象</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>总结</strong><br/> 1）该函数方法的返回值是一个游戏数组对象，存在多个同标签的游戏物体，将全部返回、<br/> 2）物体需要处于active()处于true状态才能被找到。<br/> 3）该方法消耗的性能比Find()方法小<br/> 4）物体需要处于active()处于true状态才能被找到。<br/> 还有几个查找方法，后续会添加上…</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-01-23 12:07:31", "summary": "对于在开发的过程中，熟练运用一些函数方法能够有助于我们更好的开发一些功能和提升开发的效率。这里主要讲一些关于查到方面的函数方法。这个方法没有其他重载的方法。通过的名字来查找一个不是特定的物体，简而言之"}