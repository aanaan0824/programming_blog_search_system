{"blogid": "126625629", "writerAge": "码龄4年", "writerBlogNum": "41", "writerCollect": "231", "writerComment": "280", "writerFan": "175", "writerGrade": "4级", "writerIntegral": "1035", "writerName": "C_小米同学", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126625629.jpg", "writerRankTotal": "18456", "writerRankWeekly": "575", "writerThumb": "234", "writerVisitNum": "10413", "blog_read_count": "225", "blog_time": "于 2022-08-31 16:01:38 发布", "blog_title": "python从入门到实践：软件开发目录规范", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>为了提高程序的可读性与可维护性,我们应该为软件设计良好的目录结构,这与规范的编码风格同等重要。软件的目录规范并无硬性标准,只要清晰可读即可,假设你的软件名为QQ,那么推荐的目录结构是</p>\n<pre><code class=\"hljs\">QQ/\n|-- core/\n|   |-- core.py\n|\n|-- api/\n|   |-- api.py\n|\n|-- db/\n|   |-- db_handle.py\n|\n|-- lib/\n|   |-- common.py\n|\n|-- conf/\n|   |-- settings.py\n|\n|-- run.py\n|-- setup.py\n|-- requirements.txt\n|-- README</code></pre>\n<p><strong> 我们做出一下说明：</strong></p>\n<p>• <strong>core/</strong>:存放业务逻辑相关代码</p>\n<p>•<strong>api/</strong>: 存放接口文件,接口主要用于为业务逻辑提供数据操作。</p>\n<p>•<strong>db/</strong>:存放操作数据库相关文件,主要用于与数据库交互,</p>\n<p>•<strong>lib/</strong>:存放程序中常用的自定义模块</p>\n<p>• <strong>conf/</strong>:存放配置文件</p>\n<p>•<strong> run.py</strong>:程序的启动文件,一般放在项目的根目录下,因为在运行时会默认将运行文件所在的文件夹作为sys.path的第一个路径,这样就省去了处理环境变量的步骤</p>\n<p>• <strong>setup.py</strong>: 安装、部署、打包的脚本。</p>\n<p>•<strong> requirements.txt</strong>: 存放软件依赖的外部Python包列表。</p>\n<p>•<strong>README</strong>:项目说明文件。</p>\n<blockquote>\n<p>README的格式一般如下：</p>\n<p>1、软件定位，软件的基本功能；</p>\n<p>2、运行代码的方法: 安装环境、启动命令等；</p>\n<p>3、简要的使用说明；</p>\n<p>4、代码目录结构说明，更详细点可以说明软件的基本原理；</p>\n<p>5、常见问题说明。</p>\n</blockquote>\n<p> </p>\n<p> 一般来说,用<strong>setup.py</strong>来<span style=\"color:#fe2c24;\"><strong>管理代码的打包、安装、部署问题</strong></span>。业界标准的写法是用Python流行的打包工具<strong>setuptools</strong>来管理这些事情,这种方式普遍应用于开源项目中,一个项目一定要有一个安装部署工具,能快速便捷的在台新机器上将环境装好、代码部署好和将程序运行起来。</p>\n<p><strong>requirements.txt</strong>文件的存在是<span style=\"color:#fe2c24;\"><strong>为了方便开发者维护软件的依赖库</strong></span>。我们需要将开发过程中依赖库的信息添加进该文件中,避免在setup.py安装依赖时漏掉软件包,同时也方便了使用者明确项目引用了哪些Python包。这个文件的格式是每一行包含一个包依赖的说明,通常是flask&gt;=0.10这种格式,要求是这个格式能被pip识别,这样就可以简单的通过<span style=\"color:#fe2c24;\"><strong>pip install-r requirements.txt</strong></span></p>\n</div>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-31 16:01:38", "summary": "为了提高程序的可读性与可维护性我们应该为软件设计良好的目录结构这与规范的编码风格同等重要。软件的目录规范并无硬性标准只要清晰可读即可假设你的软件名为那么推荐的目录结构是我们做出一下说明：存放业务逻辑相"}