{"blogid": "124289611", "writerAge": "码龄4年", "writerBlogNum": "19", "writerCollect": "72", "writerComment": "7", "writerFan": "30", "writerGrade": "2级", "writerIntegral": "296", "writerName": "qingtian_111", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124289611.jpg", "writerRankTotal": "91994", "writerRankWeekly": "122012", "writerThumb": "38", "writerVisitNum": "15834", "blog_read_count": "3237", "blog_time": "于 2022-04-22 11:51:32 发布", "blog_title": "Unity基础学习之C#学习（一）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>C#基础语法部分</h3>\n<ul><li><ul><li><a href=\"#1__1\">1. 开发环境搭建</a></li><li><ul><li><a href=\"#11_Visual_Studio_2\">1.1 Visual Studio</a></li><li><a href=\"#12_Unity_5\">1.2 Unity</a></li><li><a href=\"#13_MSDN_12\">1.3 MSDN</a></li></ul>\n</li><li><a href=\"#2__16\">2. 进制</a></li><li><ul><li><a href=\"#21__18\">2.1 进制概念</a></li><li><a href=\"#22__26\">2.2 进制转换</a></li></ul>\n</li><li><a href=\"#3__43\">3. 原码、反码、补码</a></li><li><ul><li><a href=\"#31__46\">3.1 正负数三码的计算方式</a></li><li><a href=\"#32__52\">3.2 使用三码的原因</a></li></ul>\n</li><li><a href=\"#4_C_57\">4. C#开发语言介绍</a></li><li><ul><li><a href=\"#41_VS_64\">4.1 用VS创建一个项目</a></li><li><a href=\"#42_C_75\">4.2 第一个C#文件</a></li><li><a href=\"#43__97\">4.3 注释</a></li></ul>\n</li><li><a href=\"#5__109\">5. 数据类型</a></li><li><ul><li><a href=\"#51__130\">5.1 值类型</a></li><li><ul><li><a href=\"#511__136\">5.1.1 基本数据类型</a></li><li><a href=\"#512__146\">5.1.2 枚举类型（自定义数据类型）</a></li><li><a href=\"#513__160\">5.1.3 结构类型（自定义数据类型）</a></li></ul>\n</li><li><a href=\"#52__171\">5.2 引用类型</a></li><li><a href=\"#53__177\">5.3 指针类型（仅用于非安全代码）</a></li></ul>\n</li><li><a href=\"#6__182\">6. 常量和变量</a></li><li><ul><li><a href=\"#61__194\">6.1 常量</a></li><li><a href=\"#62__200\">6.2 变量</a></li><li><a href=\"#63__211\">6.3 常量与变量之间的区别</a></li><li><a href=\"#64__218\">6.4 常量及变量命名规则和规范</a></li></ul>\n</li><li><a href=\"#7__231\">7. 运算符、表达式及语句</a></li><li><ul><li><a href=\"#71__232\">7.1 运算符</a></li><li><a href=\"#72__267\">7.2 表达式</a></li><li><a href=\"#73__270\">7.3 语句</a></li></ul>\n</li><li><a href=\"#8__273\">8. 输入与输出</a></li><li><a href=\"#9__279\">9. 数据类型转换</a></li><li><ul><li><a href=\"#91__283\">9.1 隐式转换</a></li><li><a href=\"#92__295\">9.2 强制(显式)转换</a></li></ul>\n</li><li><a href=\"#10__341\">10. 访问修饰符</a></li><li><a href=\"#11__348\">11. 总结</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"1__1\"></a>1. 开发环境搭建</h2>\n<h3><a id=\"11_Visual_Studio_2\"></a>1.1 Visual Studio</h3>\n<ul><li><a href=\"https://visualstudio.microsoft.com/zh-hans/\">下载路径</a></li><li>可下载2016版本以上的</li></ul>\n<h3><a id=\"12_Unity_5\"></a>1.2 Unity</h3>\n<ul><li><a href=\"https://www.uwa4d.com/\">UWA</a>——用于项目分析</li><li>开发时尽量只在一个版本上开发</li><li><a href=\"https://unity.com/download\">外国下载路径</a></li><li><a href=\"https://unity.cn/releases/lts\">中国下载路径</a></li><li>下载LTS（Long-term Support）版本：长期支持，比较稳定<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\532074142a2444f7b270556bb75e7cf1.png\"/></li></ul>\n<h3><a id=\"13_MSDN_12\"></a>1.3 MSDN</h3>\n<ul><li><a href=\"https://msdn.itellyou.cn/\">MSDN工具站网址</a></li><li><a href=\"https://docs.microsoft.com/zh-CN/dotnet/api/\">msdn library技术文档路径</a></li><li>这是一个Microsoft当前提供的有关编程信息的最全面的资源网站</li></ul>\n<h2><a id=\"2__16\"></a>2. 进制</h2>\n<p>在进制中，比较重要的两个是二进制和十进制，二进制是机器理解的数据，十进制是人常用理解的数据。</p>\n<h3><a id=\"21__18\"></a>2.1 进制概念</h3>\n<ul><li>进制概念：人为定义带进位计数方法</li><li>二进制：逢二进一，0和1</li><li>十进制：逢十进一，0~9</li><li>八进制：逢八进一，0~7</li><li>十六进制：逢十六进一，0-9和A-F</li><li>计算机为什么能理解二进制：数据以电信号传输（高电频和低电频）</li><li>计算机如何理解数字和文字：数字转换成二进制，文字用编码转换再转换成二进制</li></ul>\n<h3><a id=\"22__26\"></a>2.2 进制转换</h3>\n<ol><li>二进制转十进制<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\94c8a28fc624409991dba258c555397d.png\"/><br/> 1字节=8比特，因此二进制写法以八位起步，即1字节可以存储255（1111 1111）大小的数</li><li>八进制转十进制<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\97ed10a710aa4e9c97ce3f866a0e75da.png\"/></li><li>十六进制转十进制<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9d92d47187cc42b5889ca6043bc503be.png\"/><br/> A8B6 = <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         6\n        \n        \n         ∗\n        \n        \n         1\n        \n        \n         \n          6\n         \n         \n          0\n         \n        \n        \n         +\n        \n        \n         11\n        \n        \n         ∗\n        \n        \n         1\n        \n        \n         \n          6\n         \n         \n          1\n         \n        \n        \n         +\n        \n        \n         8\n        \n        \n         ∗\n        \n        \n         1\n        \n        \n         \n          6\n         \n         \n          2\n         \n        \n        \n         +\n        \n        \n         10\n        \n        \n         ∗\n        \n        \n         1\n        \n        \n         \n          6\n         \n         \n          3\n         \n        \n       \n       \n        6*16^0+11*16^1+8*16^2+10*16^3\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.897438em; vertical-align: -0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.814108em;\"><span class=\"\" style=\"top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.897438em; vertical-align: -0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.814108em;\"><span class=\"\" style=\"top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.897438em; vertical-align: -0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.814108em;\"><span class=\"\" style=\"top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.814108em; vertical-align: 0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.814108em;\"><span class=\"\" style=\"top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span></span></li><li><strong>X进制转十进制</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b11a3e28c1df472183c0ad7cadfe862c.png\"/></li><li>十进制转二进制<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\218ee5cfe1ca46fe9627cc51964c7b62.png\"/></li><li>八进制转二进制<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ba62a55c2a354ba698c20722166e4a40.png\"/></li><li>十六进制转二进制<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3855fb89c8a64452a770a451fd2f492c.png\"/></li></ol>\n<h2><a id=\"3__43\"></a>3. 原码、反码、补码</h2>\n<ul><li>原码、反码和补码都是针对二进制计算的。</li><li>1字节中的8位并不一定都是用来存储<strong>数据</strong>的，还会用来存储<strong>符号</strong>，比如正负数</li></ul>\n<h3><a id=\"31__46\"></a>3.1 正负数三码的计算方式</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b1a265d43ed14fc585203d11e597c8fe.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bd19de8f7af24ce7806846c055511ab3.png\"/></p>\n<ul><li>在有符号数据中，0的二进制表示有两个，即+0(0 000 0000)和-0(1 000 0000)。</li><li>-0转换成补码后会变成0000 0000，这是因为在反码+1后，补码长度变成了9位，而存储空间只有8位，舍去了最高位。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3de45a7b1404429abd40d262f01f3142.png\"/></li></ul>\n<h3><a id=\"32__52\"></a>3.2 使用三码的原因</h3>\n<ul><li>计算机底层只能做加法运算，减法运算是通过将第二个数转换成负数后再进行加法运算来实现的</li><li>使用三码主要是为了精确计算机底层进行加法运算后得出的结果</li><li>用原码来进行含有负数的加法运算，会导致得出的结果偏差很大<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b88e6a6b30a74e759e9bfdd724217fdb.png\"/></li></ul>\n<h2><a id=\"4_C_57\"></a>4. C#开发语言介绍</h2>\n<ul><li>计算机只能读取二进制，因此创造除了编程语言，用编程语言实现程序后，将代码编译成二进制，方便计算机读取 \n  <ul><li>C#开发语言特点：面向对象，简单</li><li>继承C和C++强大功能，去除C和C++的复杂特性（C面向过程，指针复杂；C++中有很多手动操作，例如手动操作内存等）</li></ul> </li><li>使用任何一门编程语言，都需要基于框架 \n  <ul><li>C#语言使用.NET Framework和.NET Core开源框架</li></ul> </li><li>写代码要注意<strong>代码阅读性</strong>和<strong>维护性</strong></li></ul>\n<h3><a id=\"41_VS_64\"></a>4.1 用VS创建一个项目</h3>\n<ul><li>创建项目过程如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ebc204ee031d4dd3ac720a1b7a14ecd0.png\"/></li><li>如何在解决方案中新建项目：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1e2ef3be3aa34d8bab86f89127f5ba58.png\"/>\n<ul><li>一个解决方案中可创建多个项目，但<strong>只可以运行一个项目</strong></li><li>可运行的项目会被标粗</li><li>切换运行项目：设置需要运行的项目为启动项目</li><li>设置启动项目操作：右键项目–&gt;设置为启动项目</li></ul> </li><li>如何在项目中创建.cs文件： \n  <ul><li>右键项目–&gt;添加–&gt;新文件–&gt;找类文件</li></ul> </li></ul>\n<h3><a id=\"42_C_75\"></a>4.2 第一个C#文件</h3>\n<ul><li>写C#程序：</li></ul>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//引用了一个命名空间（又叫库）</span>\n<span class=\"token keyword\">namespace</span> aCSharpBase   <span class=\"token comment\">//声明命名空间</span>\n<span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainClass</span>    <span class=\"token comment\">//声明一个类</span>\n     <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//Main函数是程序的入口</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                  <span class=\"token comment\">//在控制台上打印一句话</span>\n                  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>编译当前程序： \n  <ul><li>C#程序程序员可以看懂，但机器不能看懂；然而执行程序的是机器</li><li>将C#程序编译（翻译）成机器可以看懂的语言，即二进制后，程序可以被执行</li></ul> </li><li>运行当前程序 ： \n  <ul><li>获取执行结果</li></ul> </li></ul>\n<h3><a id=\"43__97\"></a>4.3 注释</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4a6722adf8b949f4a738a7aec546e412.png\"/></p>\n<ul><li>注释不会被编译，也不会被执行</li><li>注释作用： \n  <ul><li>解释说明当前代码含义（在开发程序时，每段代码都要写注释）</li><li>暂时取消某些代码的执行</li><li>多行注释放于文件前部，说明文件创建人以及修改人等信息，起到软件开发认责作用</li></ul> </li><li>Windows下VS的注释快捷键： \n  <ul><li>注释：Ctrl+K+C</li><li>取消注释：Ctrl+K+U</li></ul> </li><li>对于区域性划分注释，可以使用标签<code>region</code>\n<ul><li>快捷键：输入#re后，按两下tab键</li></ul> </li></ul>\n<h2><a id=\"5__109\"></a>5. 数据类型</h2>\n<ul><li>机器含有的东西：CPU、内存条、硬盘、显存/显卡…</li><li>程序执行前，先将已知的数据存储到机器中（硬盘、内存、CPU缓存）</li><li>数据类型：存储不同类型数据的<strong>容器</strong></li><li>开辟数据存储内存（根据设置的数据类型），用完数据后，返还内存</li><li>值类型和引用类型的区别在于： \n  <ul><li>进行<strong>数据存储</strong>时，值类型变量直接保存变量的值</li><li>引用类型的变量保存的是数据的引用类型，引用类型的变量也叫对象</li><li>进行<strong>数据操作</strong>时，对于值类型，由于每个变量有自己的值，因此对一个变量的操作不会影响其他变量</li><li>对于引用类型的变量，对一个变量的数据进行操作就是对这个变量在堆中的数据进行操作，因此对一个变量的操作就会影响到引用同一个对象的另一个变量</li></ul> </li><li>判断数据类型是值类型还是引用类型方法： \n  <ul><li>用两个变量进行数据操作，一个变量进行赋初值，另一个变量赋前一个变量</li><li>改变其中一个变量值，查看另一个变量值是否被影响而产生变化</li><li>另一个变量不变化，说明数据类型是值类型</li><li>另一个变量值和改变的变量值仍然保持一致，说明数据类型是引用类型</li></ul> </li><li>数据的量级： \n  <ul><li>1024字节(byte) = 1KB</li><li>1024KB = 1MB</li><li>1024MB = 1GB</li><li>1024GB = 1TB</li><li>1024TB = 1PB</li></ul> </li></ul>\n<h3><a id=\"51__130\"></a>5.1 值类型</h3>\n<ul><li>值类型源于<strong>System.ValueType</strong>家族</li><li>每个值类型的对象都有一个独立的内存区域用于保存自己的值</li><li>值类型数据所在的内存区域称为<strong>栈</strong></li><li>值类型主要包括整型、浮点型、字符型、布尔型、枚举型等</li><li>对值类型，不同的变量会分配不同的存储空间，并且存储空间中存储的是该变量的值</li></ul>\n<h4><a id=\"511__136\"></a>5.1.1 基本数据类型</h4>\n<ul><li>下面两张表罗列了13个基础数据类型：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0caf78a1ba1d4df5ab380500c0b10984.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d5d36730658d453ea8693b30d16916b0.png\"/></li><li>不同数据类型可以存储的数据大小不一样，在选择数据类型时，要注意其取值范围，选择最适宜的数据类型</li><li>short是Int16结构的别称，int是Int32结构的别称，long是Int64结构的别称<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8691886dccdc4870bb457e90d8966f66.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0a9bf7e4ea104cf1a173d47c1620019e.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\af2d0f1e1a794b138cbfc4af2857aa4a.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2eb854186cce4f9ab532b023c8e2e443.png\"/></li></ul>\n<h4><a id=\"512__146\"></a>5.1.2 枚举类型（自定义数据类型）</h4>\n<ul><li>枚举类型的定义：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\19289d5ee9a2461ca4cca066d06eaa35.png\"/></li><li>不可在方法内定义枚举类型</li><li>枚举类型的使用： \n  <ul><li>自定义一个枚举类，相当于自己创建一个数据类型</li><li>与声明基本数据类型的变量一样，声明枚举类型变量</li><li>可以为枚举类型变量<strong>赋</strong>自定义中的枚举值<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2d84dff50d37410f859dd074b633a632.png\"/></li></ul> </li><li>使用枚举类型，可以加强代码的可读性以及维护性 \n  <ul><li>想要列举的值，都可以直接添加到定义好的枚举类型中</li><li>在Unity中使用枚举类型，可以产生下拉菜单</li></ul> </li><li>枚举类型可以强制转换成整型；0可以隐式转换成枚举类型，其余整型要强制转换成枚举类型</li><li>可以对枚举类型变量进行<strong>加减运算</strong></li></ul>\n<h4><a id=\"513__160\"></a>5.1.3 结构类型（自定义数据类型）</h4>\n<ul><li>结构体类型的定义如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4c451d01997b4ec19e4b66907bb58f24.png\"/></li><li>不可在方法内定义结构体类型</li><li>结构体类型的使用：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b5ebd093b0ca43fd9a5c4873a171104a.png\"/></li><li>对于给结构体中变量进行初始化，可以使用构造函数实现：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\11a523b3e7484afd87ca9919bff8cc39.png\"/>\n<ul><li>在结构体的构造函数中，空构造函数是冗余的，要自定义构造函数，函数必须含参</li><li>构造函数创建好后，在给结构体变量开辟内存空间时，就可以利用构造函数进行变量初始化 \n    <ul><li>eg：Student xiaoming = new Student(“”,“”,…);</li></ul> </li></ul> </li></ul>\n<h3><a id=\"52__171\"></a>5.2 引用类型</h3>\n<ul><li>引用类型源于<strong>System.Object</strong>家族</li><li>引用类型数据所在的内存区域称为<strong>堆</strong></li><li>在C#中引用类型主要包括数组、类、接口、委托、字符串等</li><li>对引用类型，赋值是把原对象的引用传递给另一个引用</li><li>对数组而言，当数组引用赋值给另一个数组引用后，这两个引用指向同一个数组，也就是指向同一块存储空间</li></ul>\n<h3><a id=\"53__177\"></a>5.3 指针类型（仅用于非安全代码）</h3>\n<ul><li>指针类型变量存储另一种类型的内存地址</li><li>声明指针类型的语法如下： \n  <ul><li>type *   identifier;</li><li>eg：char*  cptr;</li></ul> </li></ul>\n<h2><a id=\"6__182\"></a>6. 常量和变量</h2>\n<ul><li>对于浮点型数据，无论常量还是变量都要注意，数字是小数时： \n  <ul><li>float类型的数据后面要加<strong>f</strong>\n<ul><li>eg：float money = 100.35f;</li></ul> </li><li>double类型的数据后面要加<strong>d</strong>，可以不加（因为一般小数默认为double类型） \n    <ul><li>eg：double damage = 1.223d;</li></ul> </li><li>decimal类型的数据后面要加<strong>m</strong>\n<ul><li>eg：decimal number = 1.3m;</li></ul> </li></ul> </li><li>浮点型数字是整数，数字后可以不加后缀 \n  <ul><li>eg：float score = 90;</li></ul> </li><li>对于字符类型，赋值，一定要用<strong>单引号</strong>括起来 \n  <ul><li>eg：char sex = ‘M’;</li></ul> </li></ul>\n<h3><a id=\"61__194\"></a>6.1 常量</h3>\n<ul><li>什么是常量：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d95a81985aac43ed9989f34ff8cd0504.png\"/></li><li>常量声明： \n  <ul><li>const 数据类型 变量名 = 初值;</li><li>必须要赋初值，后面不可再修改</li></ul> </li></ul>\n<h3><a id=\"62__200\"></a>6.2 变量</h3>\n<ul><li>什么是变量：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d8155138be644773a048dce2f88c0878.png\"/></li><li>变量定义（声明）： \n  <ul><li>变量可以不赋初值，但在特殊情况下必须要赋初值 \n    <ul><li>不赋初值，则当前变量的值是默认值</li><li>int/float默认值是0</li><li>char默认值是’\\0’（表示空字符）<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\98bb9a5cc31b4c00abfe4a94da2dd3a6.png\"/></li></ul> </li></ul> </li><li>有两个变量相加，先对分配好的变量内存空间进行命名(声明变量)，根据变量名来获取存储的数据，最后进行变量运算<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\34ec1519de19448eb32a2218968259e8.png\"/></li></ul>\n<h3><a id=\"63__211\"></a>6.3 常量与变量之间的区别</h3>\n<ul><li>程序运行期间表示的是： \n  <ul><li>程序开始到程序结束</li></ul> </li><li>常量和变量之间的区别： \n  <ul><li>在程序运行期间，能否被改变</li><li>常量只有在写定义的时候，可以改变值，后续不可再被赋值</li><li>变量在定义时可以给初值，后续仍然可以被赋值</li></ul> </li></ul>\n<h3><a id=\"64__218\"></a>6.4 常量及变量命名规则和规范</h3>\n<ul><li>命名规则如下图所示前三条：（其中，要注意的是，中文变量名语法上是可行的，但不推荐使用）<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c1e6be85d2a64058b1f6f2f09d014faa.png\"/></li><li>命名规范 \n  <ul><li>命名用英文单词，不要使用拼音</li><li>驼峰命名法 \n    <ul><li>大驼峰：每个单词首字母大写，其余字母小写 \n      <ul><li>eg：MyHeroDamage，HeroAttack</li><li>方法名、类名、接口名要使用大驼峰</li></ul> </li><li>小驼峰：第一个单词首字母不大写，后面每个单词首字母大写，其余字母小写 \n      <ul><li>eg：myHeroDamage，heroAttack</li><li>变量用小驼峰</li></ul> </li></ul> </li><li>见名知意：看到变量名，能够知道它是用来存储什么东西的</li></ul> </li></ul>\n<h2><a id=\"7__231\"></a>7. 运算符、表达式及语句</h2>\n<h3><a id=\"71__232\"></a>7.1 运算符</h3>\n<ul><li>数据存储完成后，要对数据进行处理，这就要用到运算符了<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7f5ae7ccefed4b4ab9ded8d0a4898324.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7d5e0670884c45af8c730206c93ce211.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\492d13a4e3e6442fa6f01de17ab44e62.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c899d6664a07490a841a3965b2595d3a.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b4388906400c41c6ac265fdee8ef885b.png\"/></li><li>注意： \n  <ul><li>赋值运算符是一个等号，表示的是一个运算</li><li>算术运算符中，+、-、*、/、%是二元运算符；++、- -是一元运算符</li><li>自增、自减符号位置不同，会产生不同结果 \n    <ul><li>age++：整体结果保持原值，age变量结果增1；先赋值后自增</li><li>++age：整体结果增1，age变量结果增1；先自增后赋值</li></ul> </li><li>逻辑运算是两个bool型数据之间的运算 \n    <ul><li>&amp;（与运算）：一假则假</li><li>|（或运算）：一真则真</li><li>!（非运算）：相反</li><li>&amp;运算和&amp;&amp;短路与运算之间的区别： \n      <ul><li>&amp;运算——无论第一个条件是真是假，都会继续判断第二个条件</li><li>&amp;&amp;短路与运算——若判断第一个条件已经是假，则不会继续判断第二个条件</li></ul> </li><li>|运算和||短路与运算之间的区别： \n      <ul><li>|运算——无论第一个条件是真是假，都会继续判断第二个条件</li><li>||短路与运算——若判断第一个条件已经是真，则不会继续判断第二个条件</li></ul> </li><li>短路&amp;&amp;和短路||： \n      <ul><li>优点： \n        <ul><li>第一个条件已经得知整个逻辑运算的结果后（&amp;&amp;的第一个条件为假/||的第一个条件为真），不会去判断第二个条件</li><li>节约运算量</li></ul> </li><li>缺点： \n        <ul><li>当判断中<strong>带有运算</strong>时，若不进行第二个条件判断，则第二个条件中的运算不会被执行</li></ul> </li></ul> </li></ul> </li><li>条件运算符是一个三目运算符</li></ul> </li><li>在进行两个数值运算过程中，若想要保留小数位数，有两种方法： \n  <ul><li>ToString(“0.根据要保留的小数位数写0”)，这种方法最后得到的是字符串结果 \n    <ul><li>eg：保留两位——ToString(“0.00”)</li></ul> </li><li>Math.Round(数字，保留几位)，这是一种数学计算公式 \n    <ul><li>eg：保留两位——Math.Round(数字，2)</li></ul> </li></ul> </li></ul>\n<h3><a id=\"72__267\"></a>7.2 表达式</h3>\n<ul><li>表达式可以不以分号为结尾，其组成部分是常变量与运算符<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0f714c1103ae45c6bfb1e2d0eb5947c9.png\"/></li></ul>\n<h3><a id=\"73__270\"></a>7.3 语句</h3>\n<ul><li>一个分号隔开一个语句<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\83d2e68e2afd4da3be2a3ce86b664125.png\"/></li></ul>\n<h2><a id=\"8__273\"></a>8. 输入与输出</h2>\n<ul><li>用户与程序之间的交互，主要通过输入实现</li><li>用户输入数据，经过程序对数据的处理后，返回一个输出给用户</li><li>输入需要用到设备，一般的输入设备是<strong>鼠标</strong>与<strong>键盘</strong>，当然还有手柄、触屏（虚拟摇杆）等输入设备</li><li>下面介绍C#中的输出函数与输入函数：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\679f196f71a941b780e765cb2324c906.png\"/></li></ul>\n<h2><a id=\"9__279\"></a>9. 数据类型转换</h2>\n<ul><li>数据类型之间的转换，根据不同情况，分为隐式转换和强制转换</li><li>当小容器中的数据要存储到大容器中，则系统自动采用隐式转换</li><li>当大容器中的数据要存储到小容器中，则在程序编写时要加修饰（强制转换修饰符）来达成强制转换</li></ul>\n<h3><a id=\"91__283\"></a>9.1 隐式转换</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b6455a3482654ee9b051f7832a5d0532.png\"/></p>\n<ul><li>数据类型之间由小到大排序 \n  <ul><li><span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n       \n        \n         \n          \n           b\n          \n          \n           o\n          \n          \n           o\n          \n          \n           l\n          \n          \n           &lt;\n          \n          \n           c\n          \n          \n           h\n          \n          \n           a\n          \n          \n           r\n          \n          \n           &lt;\n          \n          \n           i\n          \n          \n           n\n          \n          \n           t\n          \n          \n           &lt;\n          \n          \n           f\n          \n          \n           l\n          \n          \n           o\n          \n          \n           a\n          \n          \n           t\n          \n          \n           &lt;\n          \n          \n           s\n          \n          \n           t\n          \n          \n           r\n          \n          \n           i\n          \n          \n           n\n          \n          \n           g\n          \n         \n         \n          bool&lt;char&lt;int&lt;float&lt;string\n         \n        \n       </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.73354em; vertical-align: -0.0391em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right: 0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.73354em; vertical-align: -0.0391em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.69862em; vertical-align: -0.0391em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.88888em; vertical-align: -0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mord mathdefault\" style=\"margin-right: 0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.85396em; vertical-align: -0.19444em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">g</span></span></span></span></span></li><li>所有整型之间的排序：<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n       \n        \n         \n          \n           s\n          \n          \n           b\n          \n          \n           y\n          \n          \n           t\n          \n          \n           e\n          \n          \n           (\n          \n          \n           1\n          \n          \n           字\n          \n          \n           节\n          \n          \n           )\n          \n          \n           &lt;\n          \n          \n           s\n          \n          \n           h\n          \n          \n           o\n          \n          \n           r\n          \n          \n           t\n          \n          \n           (\n          \n          \n           2\n          \n          \n           字\n          \n          \n           节\n          \n          \n           )\n          \n          \n           &lt;\n          \n          \n           i\n          \n          \n           n\n          \n          \n           t\n          \n          \n           (\n          \n          \n           4\n          \n          \n           字\n          \n          \n           节\n          \n          \n           )\n          \n          \n           &lt;\n          \n          \n           l\n          \n          \n           o\n          \n          \n           n\n          \n          \n           g\n          \n          \n           (\n          \n          \n           8\n          \n          \n           字\n          \n          \n           节\n          \n          \n           )\n          \n         \n         \n          sbyte(1字节)&lt;short(2字节)&lt;int(4字节)&lt;long(8字节)\n         \n        \n       </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">y</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mord cjk_fallback\">字</span><span class=\"mord cjk_fallback\">节</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">r</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord cjk_fallback\">字</span><span class=\"mord cjk_fallback\">节</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord\">4</span><span class=\"mord cjk_fallback\">字</span><span class=\"mord cjk_fallback\">节</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord\">8</span><span class=\"mord cjk_fallback\">字</span><span class=\"mord cjk_fallback\">节</span><span class=\"mclose\">)</span></span></span></span></span></li></ul> </li><li>隐式转换<strong>只</strong>发生在将占用字节小的、取值范围小的、精度小的，转换成占用字节大的、取值范围大的、精度高的 \n  <ul><li>系统自动转换</li><li>不需要其它修饰</li><li>赋值运算符<strong>左侧</strong>为占用字节大的、取值范围大的、精度高的，<strong>右侧</strong>为占用字节小的、取值范围小的、精度低的</li><li>eg：float score = 32; ——&gt;int型转换成float型</li></ul> </li><li>字符型数据会自动根据编码表，转换成整型数据 \n  <ul><li>eg：输入字符’a’，得到结果97</li></ul> </li></ul>\n<h3><a id=\"92__295\"></a>9.2 强制(显式)转换</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a4ed2bdf5bfd42978a89dc229fa6e4b0.png\"/></p>\n<ul><li>强制转换发生在将占用字节大的、取值范围大的、精度高的，转换成占用字节小的、取值范围小的、精度小的 \n  <ul><li>需要<strong>强制转换修饰符</strong></li><li>会有精度缺失，甚至会出现数据错误（这是因为数据在计算机底层是以二进制形式存储，存储空间变小会舍去超出存储空间部分的高位数据，最终导致数据错误）<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\522ffdf8d4c94da1b9f122b54ce9f632.png\"/></li><li>一般在两个不同类型的数值之间使用强制转换时要注意，需要转换的数值是处于小的数据类型<strong>取值范围内</strong></li><li>浮点型数据强制转换成整型数据，会导致小数点后面的内容被舍去</li></ul> </li><li>数值转换成其他数据类型 \n  <ul><li>对于字符，在存储时，一般会先将字符用<strong>编码表</strong>转换成数值后，以二进制数据进行存储</li><li>int型数据转换成char型数据——根据编码表得到字符 \n    <ul><li>eg：int data = 97;<br/>        char change = (char) data;</li></ul> </li><li>int型数据无法转换成bool型数据</li></ul> </li><li>字符串(string)与其他类型之间的转换 \n  <ul><li>其他类型转换成字符串： \n    <ul><li>其他类型数据加上<strong>双引号</strong>后，就变成了字符串数据类型 \n      <ul><li>eg：“false”，“10”，“3.14”，“A”</li></ul> </li><li>其他类型的变量.ToString() \n      <ul><li>eg：int data = 97;<br/>        string str_data = data.ToString();</li></ul> </li></ul> </li><li>字符串转换成其他类型： \n    <ul><li>转换方法： \n      <ul><li>使用System.Convert类下相对应的方法，即： \n        <ul><li>System.Convert.ToBoolean()</li><li>System.Convert.ToInt32()</li><li>System.Convert.ToSingle()</li><li>System.Convert.ToDouble()</li><li>System.Convert.ToChar()</li><li>System.Convert.ToBoolean()</li></ul> </li><li>使用数据类型.Parse()方法，即： \n        <ul><li>bool.Parse()</li><li>int.Parse()</li><li>float.Parse()</li><li>double.Parse()</li><li>char.Parse()</li></ul> </li></ul> </li><li>字符串转换成bool型 \n      <ul><li>eg：string str = “false”;<br/>        bool bl = Convert.ToBoolean(str);</li><li>eg：bool bl2 = bool.Parse(str);</li></ul> </li><li>字符串转换成int型 \n      <ul><li>eg：string str = “312”;<br/>        int it = Convert.ToInt32(str);</li><li>eg：int it2 = int.Parse(str);</li></ul> </li><li>字符串转换成float型 \n      <ul><li>eg：string str = “3.1415”;<br/>        float fl = Convert.ToSingle(str);</li><li>eg：float fl2 = float.Parse(str);</li></ul> </li><li>字符串转换成double型 \n      <ul><li>eg：string str = “3.1456415”;<br/>        double dl = Convert.ToDouble(str);</li><li>eg：double dl2 = double.Parse(str);</li></ul> </li></ul> </li></ul> </li></ul>\n<h2><a id=\"10__341\"></a>10. 访问修饰符</h2>\n<ul><li>什么是访问修饰符（用于限制程序员）：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a07d2cfa3c444292aae50a0a6f80f81a.png\"/></li><li>代码位置层级划分：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7313ba682e2445748a1bf0c89cee7b99.png\"/></li><li>常用修饰符：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2c0fee6937324146862fe442646e7f9e.png\"/></li></ul>\n<h2><a id=\"11__348\"></a>11. 总结</h2>\n<ul><li><strong>数据类型</strong>：选择存储容器，不同类型可以存储的数据大小不一样</li><li><strong>常量与变量</strong>：数据存储区域命名后，可根据名称来获取存储的数据</li><li><strong>运算符</strong>：数据处理需要用到的符号</li><li><strong>表达式</strong>：相当于一个计算公式，由常变量和运算符组成</li><li><strong>语句</strong>：一个程序由多条语句构成，是计算机执行的最小单位；一个表达式加一个分号就可以形成一条语句</li><li><strong>输入与输出</strong>：主要针对的是用户与机器的交互</li><li><strong>数据类型转换</strong>：在处理数据过程中，会遇到数据类型不匹配情况，通过转换，可以使得等式两侧数据类型一致</li><li>在写代码的时候，一个方法内容有很多，为了能更好的阅读代码，可以用标签<code>#region [段名]...#endregion</code>来划分代码区域</li><li>设定访问修饰符，可以提高代码的安全性，写一段代码，一定要设置好其访问修饰符</li></ul>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 1, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-04-22 11:51:32", "summary": "基础语法部分开发环境搭建进制进制概念进制转换原码、反码、补码正负数三码的计算方式使用三码的原因开发语言介绍用创建一个项目第一个文件注释数据类型值类型基本数据类型枚举类型自定义数据类型结构类型自定义数据"}