{"blogid": "125431589", "writerAge": "码龄1年", "writerBlogNum": "90", "writerCollect": "223", "writerComment": "26", "writerFan": "10", "writerGrade": "4级", "writerIntegral": "1050", "writerName": "_码农耕地人", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125431589.jpg", "writerRankTotal": "18387", "writerRankWeekly": "3072", "writerThumb": "77", "writerVisitNum": "94357", "blog_read_count": "2411", "blog_time": "于 2022-06-23 17:50:44 发布", "blog_title": "SQL分页查询，SQL的LIMIT语句用法，SQL如何实现分页查询，SpringBoot实现分页查询。", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<blockquote>\n<p><strong>在SQL语言中主要是采用LIMIT语句进行分页查询，下面将以一个分页查询的案例来完成知识的回顾</strong></p>\n</blockquote>\n<h1>一）LIMIT语句基础：</h1>\n<p>1、一个参数：</p>\n<pre><code class=\"language-sql\">SELECT * FROM data LIMIT 1;</code></pre>\n<p>假设满足条件的共有10条数据，上述语句会返回第一条满足条件的数据。</p>\n<p>2、两个参数：</p>\n<pre><code class=\"language-sql\">SELECT * FROM data LIMIT 2;\nSELECT * FROM data LIMIT 0,2;</code></pre>\n<p>上述两条语句是等价的，都会返回满足条件的前两条。</p>\n<ul><li>第一个0是表示忽略多少条满足条件的数据，第二个是要查询的总数。</li></ul>\n<pre><code class=\"language-sql\">SELECT * FROM data LIMIT 1,2;</code></pre>\n<p>以上面这条语句为例，表示忽略第一个满足条件的数据开始再查询两条，例如1，2，3满足条件，上面这条语句执行后将返回2，3这两条数据，于是就为实现了分页查询奠定了基础。</p>\n<p></p>\n<hr/>\n<h1>二）实现分页查询：</h1>\n<blockquote>\n<p>前台只需要向后台传入两个参数，一个是要查询的页码，另一个是每页数据的总数。</p>\n</blockquote>\n<p>page表示页码，length表示每页数据总长度。</p>\n<p>1、在后台处理page参数：</p>\n<pre><code class=\"language-java\">int start = (page-1)*length; //表示前面已经查询出来的数据条数</code></pre>\n<p>2、处理好忽略数据长度之后即可开始分页查询了：</p>\n<pre><code class=\"language-sql\">SELECT * FROM data LIMIT start,length;</code></pre>\n<p> </p>\n<hr/>\n<h1>三）SpringBoot封装分页查询逻辑</h1>\n<blockquote>\n<p><strong>由于前台实现分页查询需要总页数，每页的数据等信息，所以我将分页查询封装成了一个对象，这样只需要将该对象返回给前台即可得到所有前台分页所需的数据了</strong></p>\n</blockquote>\n<p>1、封装页面对象类：</p>\n<pre><code class=\"language-java\">package com.example.emoswebbackground.Util;\n\nimport lombok.Data;\n\nimport java.io.Serializable;\nimport java.util.List;\n\n@Data\npublic class PageUtils implements Serializable {\n    private static final long serialVersionUID = 1L;\n    /*** 总记录数*/\n    private long totalCount;\n    /*** 每页记录数*/\n    private int pageSize;\n    /*** 总页数*/\n    private int totalPage;\n    /*** 当前页码*/\n    private int pageIndex;\n    /*** 列表数据*/\n    private List list;\n\n    public PageUtils(List list, long totalCount, int pageIndex, int pageSize) {\n        this.list = list;\n        this.totalCount = totalCount;\n        this.pageSize = pageSize;\n        this.pageIndex = pageIndex;\n        this.totalPage = (int) Math.ceil((double) totalCount / pageSize);\n    }\n\n}\n</code></pre>\n<p>2、Controller类：</p>\n<pre><code class=\"language-java\">    @PostMapping(\"/SearchLeaveByPage\")\n    @Operation(summary = \"分页查询请假记录\")\n    //SearchLeaveByPageForm 对象共两个属性，页码和每页长度\n    public R searchLeaveByPage(@Valid @RequestBody  SearchLeaveByPageForm form){\n        int page = form.getPage();\n        int length = form.getLength();\n        //计算已查过的数据\n        int start = (page-1)*length;\n        //将数据转化为Map\n        HashMap param = JSONUtil.parse(form).toBean(HashMap.class);\n        param.put(\"start\",start);\n        //执行分页查询的service层\n        PageUtils pageUtils = leaveService.searchByPage(param);\n        return new R().put(\"page\",pageUtils);\n    }</code></pre>\n<p></p>\n</div>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-06-23 17:50:44", "summary": "在语言中主要是采用语句进行分页查询，下面将以一个分页查询的案例来完成知识的回顾一语句基础：、一个参数：假设满足条件的共有条数据，上述语句会返回第一条满足条件的数据。、两个参数：上述两条语句是等价的，都"}