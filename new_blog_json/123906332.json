{"blogid": "123906332", "writerAge": "码龄6年", "writerBlogNum": "132", "writerCollect": "762", "writerComment": "89", "writerFan": "1786", "writerGrade": "5级", "writerIntegral": "1651", "writerName": "码农飞飞", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123906332.jpg", "writerRankTotal": "10858", "writerRankWeekly": "2381", "writerThumb": "249", "writerVisitNum": "104360", "blog_read_count": "1730", "blog_time": "已于 2022-04-01 20:24:14 修改", "blog_title": "QML基础(一)-基本元素和属性", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>任何知识，都有自己的体系架构，掌握了体系架构，按图索骥的去学习的效率要远高于漫无目的的学习。这里我参照QML的知识框架和一些问题来对QML进行系统的总结。问题列表如下:</p>\n<p>1.QML是什么？</p>\n<p>2.为什么使用QML?</p>\n<p>3.QML的基本语法？</p>\n<p>4.QML的元素都有哪些？</p>\n<h2>1.QML是什么？</h2>\n<p>QML是Qt推出的Qt Quick技术的一部分，是一种用于描述用户界面的类似html的声明式语言。它将用户界面分解成一些更小的元素，这些元素能够结合成一个组件。这点类似于json结构，每个对象既有自己的行为和属性同时又包含其它的对象，通过对象的嵌套实现复杂的界面。QML语言描述了界面元素的形状和行为。用户界面能够使用JavaScript来提供修饰，或者增加更加复杂的业务逻辑。QML界面的整体架构如下图所示:</p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"256\" src=\"..\\..\\static\\image\\988c64fdcbef4acab3f1164e309ce975.png\" width=\"471\"/></p>\n<p> QtQuick是Qt5中用户界面的涵盖，主要包含以下几种技术:</p>\n<p>1.QML-使用于用户界面的标识语言</p>\n<p>2.JavaScript-动态脚本语言</p>\n<p>3.Qt C++具有高度可移植性的C++库</p>\n<h2>2.为什么使用QML？</h2>\n<p>开发者效率:将前后端分离，QML和JavaScript语言主要用于前度UI的方法，后端有C++来完成绘制。将JavaScript和C++分开能够快速迭代开发;</p>\n<p>跨平台移植性:基于Qt平台的统一抽象概念，现在可以更加容易和快速和将Qt移植到更多的平台上。</p>\n<p>开发的开放性:Qt是由Qt-Project主持的开放性管理项目，它的开发是开放的，由Qt社区驱动。</p>\n<h2>3.Qt的基本语法？</h2>\n<pre><code class=\"language-cpp\">//rectangle.qml\nimport QtQuick 2.0\nRectangle{\n    id:root\n    width:120; height:120\n    color: \"#D8D8D8\"\n    Image{\n        id: rocket\n        x:(parent.width - width)/2; y:40\n        source: 'image/rocket.png'\n    }\n    Text{\n        y:rocket.y + rocket.height + 20\n        widht:root.width\n        horizontalAlignment: Text.AlignHCenter\n        text: 'Rocket'\n    }\n}\n</code></pre>\n<ul><li>每个QML文件都需要一个根元素,就像HTML一样。</li><li>一个元素使用它的类型声明，然后使用{}进行包含。</li><li>元素有属性，是按照name:value的格式来进行赋值。</li><li>任何在QML文档中的元素都可以使用他们的id进行访问(id是一个元素的标识符)。</li><li>元素可以嵌套，这意味着一个元素可以拥有多个子元素。子元素可以通过parent这个关键字来访问他们的父元素。</li></ul>\n<p>元素使用他们的元素类型进行声明，使用它们的属性或者创建自定义属性来定义。一个属性对应一个值。关于属性有以下几点需要注意:</p>\n<p>1.id是一个非常特殊的属性值，它在一个QML文件中被用来引用元素。id不是一个字符串，而是一个标识和QML语法的一部分。一个id在一个QML文档中是唯一的，并且不能被设置为其它值，也无法被查询(更像C++中的指针)</p>\n<p>2.一个属性能够设置一个值，这个值依赖于它的类型。如果没有对一个属性赋值，那么它将会被初始化为一个默认值。</p>\n<p>3.一个属性能够依赖一个或多个其它的属性，这种操作称之为属性绑定。</p>\n<p>4.添加自己定义的属性需要使用property修饰符，然后跟上类型，名字和可选择的初始化值（property )。如果没有初始值将会给定一个系统初始值。注意如果属性名与已定义的默认属性名不重复，使用default关键字可以将一个属性定义为默认属性。这在你添加子元素的时候用得着，如果他们可视化元素，子元素会自动添加默认属性的子类型链表。</p>\n<p>5.另一个重要的声明属性的方法是使用alias关键字。alias关键字允许我们转发一个属性或者转发一个属性对象自身到另一个作用域。一个属性的别名不需要类型，它使用引用的属性类型或者对象类型。</p>\n<p>6.一些属性是按组分配的属性。当一个属性需要结构化并且相关的属性需要联系在一起时，我们可以这样使用它。使用方法是:font{famlily:\"UBuntu\"; pixelSize:24}</p>\n<p>7.一些属性是元素自身的附加属性。这样做是为了全局的相关元素在应用程序中只出现一次，例如键盘输入，编码方式。</p>\n<p>8.对于每个元素你都可以提供一个信号操作。这个操作在属性值发生改变的时候被调用。</p>\n<p>样例demo如下:</p>\n<pre><code class=\"language-cpp\">Text{\n    id: label\n    x:24; y:16\n    height: 2*width\n    //自定义属性\n    property int times: 24\n    //属性的别名\n    property alias anotherTimes : label.times\n    text: \"Greetings\" + times\n    //分组属性\n    font.family: \"Ubuntu\"\n    font.pixelSize: 24\n    //附加属性\n    KeyNavigation.tab: otherLabel\n    //属性信号\n    onHeightChanged: console.log(\"height:\",height)\n    focus:true\n    color: focus? \"red\":\"black\"\n}\n</code></pre>\n<p></p>\n<h2>4.QML的元素都有哪些？</h2>\n<p>QML的元素分为可视化元素和非可视化元素，常用的可视化元素如下表所示：</p>\n<table><tbody><tr><td colspan=\"1\" rowspan=\"5\"> <p style=\"text-align:center;\">基本元素</p> </td><td style=\"background-color:#ffffff;\"> <p>基本元素对象(item)</p> </td></tr><tr><td style=\"background-color:#ffffff;\"> <p>矩形元素对象(Rectangle)</p> </td></tr><tr><td style=\"background-color:#ffffff;\"> <p>文本元素(Text)</p> </td></tr><tr><td style=\"background-color:#ffffff;\"> <p>图像元素(Image)</p> </td></tr><tr><td style=\"background-color:#ffffff;\"> <p>鼠标区域元素(MouseArea)</p> </td></tr><tr><td colspan=\"1\" rowspan=\"4\" style=\"background-color:#ffffff;\"> <p style=\"text-align:center;\">输入元素</p> </td><td style=\"background-color:#ffffff;\"> <p>文本输入(TextInput)</p> </td></tr><tr><td style=\"background-color:#ffffff;\"> <p>焦点区域(FocusScope)</p> </td></tr><tr><td style=\"background-color:#ffffff;\"> <p>文本编辑器(TextEdit)</p> </td></tr><tr><td style=\"background-color:#ffffff;\"> <p>按键元素(Key)</p> </td></tr><tr><td style=\"background-color:#ffffff;\"> <p style=\"text-align:center;\">布局元素</p> </td><td style=\"background-color:#ffffff;\"> <p>锚定位(Anchor)</p> </td></tr><tr><td colspan=\"1\" rowspan=\"5\"> <p style=\"text-align:center;\">布局元素</p> </td><td style=\"background-color:#ffffff;\"> <p>Row(行)</p> </td></tr><tr><td style=\"background-color:#ffffff;\"> <p>Column(列)</p> </td></tr><tr><td style=\"background-color:#ffffff;\"> <p>Grid(栅格)</p> </td></tr><tr><td style=\"background-color:#ffffff;\"> <p>Flow(流)</p> </td></tr><tr><td style=\"background-color:#ffffff;\"> <p>Repeater(重复元素)</p> </td></tr></tbody></table>\n<p>对元素进行操作的时候需要了解元素的属性，共有属性主要如下表所示，在熟悉了属性列表之后就可以熟练的使用基本元素了。</p>\n<table><tbody><tr><td colspan=\"1\" rowspan=\"3\" style=\"background-color:#ffffff;width:201px;\"> <p>Geometry(几何属性)</p> </td><td style=\"background-color:#ffffff;width:487px;\"> <p>左上角的位置(x,y)</p> </td></tr><tr><td style=\"background-color:#ffffff;width:487px;\"> <p>长度和宽度(height,width)</p> </td></tr><tr><td style=\"background-color:#ffffff;width:487px;\"> <p>元素间的堆叠次序(z)</p> </td></tr><tr><td colspan=\"1\" rowspan=\"3\" style=\"background-color:#ffffff;width:201px;\"> <p>Layout handling(布局操作)</p> </td><td style=\"background-color:#ffffff;width:487px;\"> <p>锚定关系(anchors)</p> </td></tr><tr><td style=\"background-color:#ffffff;width:487px;\"> <p>水平和垂直居中</p> </td></tr><tr><td style=\"background-color:#ffffff;width:487px;\"> <p>边距关系(margin）</p> </td></tr><tr><td colspan=\"1\" rowspan=\"3\" style=\"background-color:#ffffff;width:201px;\"> <p>Key handling(按键操作)</p> </td><td style=\"background-color:#ffffff;width:487px;\"> <p>按键定位(keyNavigation)</p> </td></tr><tr><td style=\"background-color:#ffffff;width:487px;\"> <p>附加按键(key)</p> </td></tr><tr><td style=\"background-color:#ffffff;width:487px;\"> <p>输入焦点(focus)</p> </td></tr><tr><td colspan=\"1\" rowspan=\"3\" style=\"background-color:#ffffff;width:201px;\"> <p>Transformation(转换)</p> </td><td style=\"background-color:#ffffff;width:487px;\"> <p>缩放和旋转(scale\\rotate)</p> </td></tr><tr><td style=\"background-color:#ffffff;width:487px;\"> <p>旋转基点(transformorigin)</p> </td></tr><tr><td style=\"background-color:#ffffff;width:487px;\"> <p>通用x.y.z属性列表转换(transform)</p> </td></tr><tr><td colspan=\"1\" rowspan=\"4\" style=\"background-color:#ffffff;width:201px;\"> <p>Visual(可视化)</p> </td><td style=\"background-color:#ffffff;width:487px;\"> <p>不透明度(opacity)</p> </td></tr><tr><td style=\"background-color:#ffffff;width:487px;\"> <p>可见性(visible)</p> </td></tr><tr><td style=\"background-color:#ffffff;width:487px;\"> <p>裁剪(clip)用来控制边界</p> </td></tr><tr><td style=\"background-color:#ffffff;width:487px;\"> <p>平滑(smooth)用来提高渲染质量</p> </td></tr><tr><td style=\"background-color:#ffffff;width:201px;\"> <p>State definition(状态定义)</p> </td><td style=\"background-color:#ffffff;width:487px;\"> <p>提供了元素当前所支持的状态列表(state)</p> </td></tr></tbody></table>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n</div>\n</div>", "first_tag": "JavaScript", "cpp": 1, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-04-01 20:24:14", "summary": "任何知识，都有自己的体系架构，掌握了体系架构，按图索骥的去学习的效率要远高于漫无目的的学习。这里我参照的知识框架和一些问题来对进行系统的总结。问题列表如下是什么？为什么使用的基本语法？的元素都有哪些？"}