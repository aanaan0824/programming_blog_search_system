{"blogid": "123922649", "writerAge": "码龄5年", "writerBlogNum": "41", "writerCollect": "86", "writerComment": "11", "writerFan": "448", "writerGrade": "3级", "writerIntegral": "464", "writerName": "HelloNettt", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123922649.jpg", "writerRankTotal": "42750", "writerRankWeekly": "14024", "writerThumb": "22", "writerVisitNum": "41932", "blog_read_count": "3629", "blog_time": "已于 2022-06-25 10:36:04 修改", "blog_title": "【李宏毅《机器学习》2022】作业1：COVID 19 Cases Prediction (Regression)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#20221COVID_19_Cases_Prediction_Regression_1\">【李宏毅《机器学习》2022】作业1：COVID 19 Cases Prediction (Regression)</a></li><li><ul><li><a href=\"#_3\">作业内容</a></li><li><ul><li><a href=\"#1_4\">1.目标</a></li><li><a href=\"#2_9\">2.任务描述</a></li><li><a href=\"#3_13\">3.数据</a></li><li><a href=\"#4_16\">4.评价指标</a></li></ul>\n</li><li><a href=\"#_20\">代码</a></li><li><ul><li><a href=\"#1_21\">1.下载数据</a></li><li><a href=\"#2_32\">2.导入软件包</a></li><li><a href=\"#3_54\">3.定义公用函数（这一部分不需要修改）</a></li><li><a href=\"#4_86\">4.数据集</a></li><li><a href=\"#5_109\">5.神经网络模型</a></li><li><a href=\"#6_134\">6.特征选择</a></li><li><a href=\"#7_149\">7.训练器</a></li><li><a href=\"#8_221\">8.超参数设置</a></li><li><a href=\"#9_235\">9.加载数据</a></li><li><a href=\"#10_266\">10.开始训练</a></li><li><a href=\"#11_272\">11.可视化训练过程</a></li><li><a href=\"#12_280\">12.保存测试集结果</a></li><li><a href=\"#13_298\">13.改进方案</a></li><li><ul><li><a href=\"#131_302\">13.1.选择更有效的特征</a></li><li><a href=\"#132_346\">13.2.修改模型</a></li><li><a href=\"#133_397\">13.3.修改优化器</a></li></ul>\n</li><li><a href=\"#14__407\">14. 测试结果</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"20221COVID_19_Cases_Prediction_Regression_1\"></a>【李宏毅《机器学习》2022】作业1：COVID 19 Cases Prediction (Regression)</h1>\n<p><a href=\"https://github.com/virginiakm1988/ML2022-Spring/tree/main/HW01\">【作业1】来源</a></p>\n<h2><a id=\"_3\"></a>作业内容</h2>\n<h3><a id=\"1_4\"></a>1.目标</h3>\n<ul><li>Solve a regression problem with deep neural networks (DNN).</li><li>Understand basic DNN training tips.</li><li>Familiarize yourself with PyTorch.</li></ul>\n<h3><a id=\"2_9\"></a>2.任务描述</h3>\n<p>Given survey results in the past 5 days in a specific state in U.S., then predict the percentage of new tested positive cases in the 5 th day.<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8d211bbc1aac490180cfdee91e85e5b6.png\"/></p>\n<h3><a id=\"3_13\"></a>3.数据</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2fc3a5849a164ce2be7a762411b52a61.png\"/></p>\n<h3><a id=\"4_16\"></a>4.评价指标</h3>\n<p><strong>MSE</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f1ffc4ae364b49b6ba9c9187f4e7dbea.png\"/></p>\n<h2><a id=\"_20\"></a>代码</h2>\n<h3><a id=\"1_21\"></a>1.下载数据</h3>\n<pre><code class=\"prism language-python\">!gdown <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token builtin\">id</span> <span class=\"token string\">'1kLSW_-cW2Huj7bh84YTdimGBOJaODiOS'</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span>output covid<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">.</span>csv\n!gdown <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token builtin\">id</span> <span class=\"token string\">'1iiI5qROrAhZn-o4FPqsE97bMzDEFvIdg'</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span>output covid<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>csv\n</code></pre>\n<p>如果没有安装<code>gdown</code>（比如作者），可以采用按如下方法安装：</p>\n<pre><code class=\"prism language-python\">git clone https<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>wkentaro<span class=\"token operator\">/</span>gdown<span class=\"token punctuation\">.</span>git\ncd gdown\npip install gdown\n</code></pre>\n<h3><a id=\"2_32\"></a>2.导入软件包</h3>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># Numerical Operations</span>\n<span class=\"token keyword\">import</span> math\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\n<span class=\"token comment\"># Reading/Writing Data</span>\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd<span class=\"token comment\">#我一般喜欢用这个读入数据</span>\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> csv\n\n<span class=\"token comment\"># For Progress Bar</span>\n<span class=\"token keyword\">from</span> tqdm <span class=\"token keyword\">import</span> tqdm\n\n<span class=\"token comment\"># Pytorch</span>\n<span class=\"token keyword\">import</span> torch \n<span class=\"token keyword\">import</span> torch<span class=\"token punctuation\">.</span>nn <span class=\"token keyword\">as</span> nn\n<span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data <span class=\"token keyword\">import</span> Dataset<span class=\"token punctuation\">,</span> DataLoader<span class=\"token punctuation\">,</span> random_split\n\n<span class=\"token comment\"># For plotting learning curve</span>\n<span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>tensorboard <span class=\"token keyword\">import</span> SummaryWriter\n</code></pre>\n<h3><a id=\"3_54\"></a>3.定义公用函数（这一部分不需要修改）</h3>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">same_seed</span><span class=\"token punctuation\">(</span>seed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n    <span class=\"token triple-quoted-string string\">'''Fixes random number generator seeds for reproducibility.'''</span>\n    torch<span class=\"token punctuation\">.</span>backends<span class=\"token punctuation\">.</span>cudnn<span class=\"token punctuation\">.</span>deterministic <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    torch<span class=\"token punctuation\">.</span>backends<span class=\"token punctuation\">.</span>cudnn<span class=\"token punctuation\">.</span>benchmark <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n    np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span>seed<span class=\"token punctuation\">)</span>\n    torch<span class=\"token punctuation\">.</span>manual_seed<span class=\"token punctuation\">(</span>seed<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>is_available<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>manual_seed_all<span class=\"token punctuation\">(</span>seed<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#sklearn有一个包也可以实现train_valid_split和predict功能。</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">train_valid_split</span><span class=\"token punctuation\">(</span>data_set<span class=\"token punctuation\">,</span> valid_ratio<span class=\"token punctuation\">,</span> seed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">'''Split provided training data into training set and validation set'''</span>\n    valid_set_size <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>valid_ratio <span class=\"token operator\">*</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data_set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n    train_set_size <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data_set<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> valid_set_size\n    train_set<span class=\"token punctuation\">,</span> valid_set <span class=\"token operator\">=</span> random_split<span class=\"token punctuation\">(</span>data_set<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>train_set_size<span class=\"token punctuation\">,</span> valid_set_size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> generator<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>Generator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>manual_seed<span class=\"token punctuation\">(</span>seed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>train_set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>valid_set<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">predict</span><span class=\"token punctuation\">(</span>test_loader<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    model<span class=\"token punctuation\">.</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Set your model to evaluation mode.</span>\n    preds <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> tqdm<span class=\"token punctuation\">(</span>test_loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span>                        \n        <span class=\"token keyword\">with</span> torch<span class=\"token punctuation\">.</span>no_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>                   \n            pred <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>                     \n            preds<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">.</span>detach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>cpu<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   \n    preds <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span>preds<span class=\"token punctuation\">,</span> dim<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token keyword\">return</span> preds\n</code></pre>\n<p><code>scikit-learn</code>是一个强大的机器学习软件包，其使用方法可以参考<a href=\"https://sklearn.apachecn.org/#/\">sklearn中文文档</a>。</p>\n<h3><a id=\"4_86\"></a>4.数据集</h3>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">COVID19Dataset</span><span class=\"token punctuation\">(</span>Dataset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">'''\n    x: Features.\n    y: Targets, if none, do prediction.\n    '''</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> y <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>FloatTensor<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>FloatTensor<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__getitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>y <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"5_109\"></a>5.神经网络模型</h3>\n<p>通过修改下面的类来尝试不同的模型。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">My_Model</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> input_dim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>My_Model<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># TODO: modify model's structure, be aware of dimensions. </span>\n        <span class=\"token comment\">#一个简单的三层全链接层的神经网络模型</span>\n        self<span class=\"token punctuation\">.</span>layers <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span>input_dim<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token comment\">#全连接层</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token comment\">#激活函数</span>\n            nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># (B, 1) -&gt; (B)</span>\n        <span class=\"token keyword\">return</span> x\n</code></pre>\n<p>可以参考<a href=\"https://pytorch.org/docs/stable/nn.html\">torch.nn</a><br/> PyTorch的<code>torch.nn.Linear()</code>是用于设置网络中的全连接层的，需要注意在二维图像处理的任务中，<strong>全连接层的输入与输出一般都设置为二维张量，形状通常为[batch_size, size]，不同于卷积层要求输入输出是四维张量</strong>。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3971661bdd8546c4b005b2461b4a05ce.png\"/></p>\n<h3><a id=\"6_134\"></a>6.特征选择</h3>\n<p>通过修改下面的函数，选择更有用的特征。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">select_feat</span><span class=\"token punctuation\">(</span>train_data<span class=\"token punctuation\">,</span> valid_data<span class=\"token punctuation\">,</span> test_data<span class=\"token punctuation\">,</span> select_all<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">'''Selects useful features to perform regression'''</span>\n    y_train<span class=\"token punctuation\">,</span> y_valid <span class=\"token operator\">=</span> train_data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> valid_data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    raw_x_train<span class=\"token punctuation\">,</span> raw_x_valid<span class=\"token punctuation\">,</span> raw_x_test <span class=\"token operator\">=</span> train_data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> valid_data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> test_data\n\n    <span class=\"token keyword\">if</span> select_all<span class=\"token punctuation\">:</span>\n        feat_idx <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>raw_x_train<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        feat_idx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># TODO: Select suitable feature columns.</span>\n        \n    <span class=\"token keyword\">return</span> raw_x_train<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span>feat_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> raw_x_valid<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span>feat_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> raw_x_test<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span>feat_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">,</span> y_valid\n</code></pre>\n<h3><a id=\"7_149\"></a>7.训练器</h3>\n<p>训练阶段创建模型的实例并进行迭代时训练。注意每次迭代都需要保存模型。训练结束后，对模型Loss随迭代次数的变化进行可视化，用于选取更合适的迭代次数。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">trainer</span><span class=\"token punctuation\">(</span>train_loader<span class=\"token punctuation\">,</span> valid_loader<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    criterion <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MSELoss<span class=\"token punctuation\">(</span>reduction<span class=\"token operator\">=</span><span class=\"token string\">'mean'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Define your loss function, do not modify this.</span>\n\n    <span class=\"token comment\"># Define your optimization algorithm. </span>\n    <span class=\"token comment\"># TODO: Please check https://pytorch.org/docs/stable/optim.html to get more available algorithms.</span>\n    <span class=\"token comment\"># TODO: L2 regularization (optimizer(weight decay...) or implement by your self).</span>\n    optimizer <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>optim<span class=\"token punctuation\">.</span>SGD<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">'learning_rate'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> momentum<span class=\"token operator\">=</span><span class=\"token number\">0.9</span><span class=\"token punctuation\">)</span> \n\t\n\t<span class=\"token comment\">#训练过程可视化器</span>\n    writer <span class=\"token operator\">=</span> SummaryWriter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Writer of tensoboard.</span>\n\t\n\t<span class=\"token comment\">#创建保存model的路径，每次迭代都需要保存model</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isdir<span class=\"token punctuation\">(</span><span class=\"token string\">'./models'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        os<span class=\"token punctuation\">.</span>mkdir<span class=\"token punctuation\">(</span><span class=\"token string\">'./models'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Create directory of saving models.</span>\n\n    n_epochs<span class=\"token punctuation\">,</span> best_loss<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">,</span> early_stop_count <span class=\"token operator\">=</span> config<span class=\"token punctuation\">[</span><span class=\"token string\">'n_epochs'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> math<span class=\"token punctuation\">.</span>inf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">for</span> epoch <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n_epochs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        model<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Set your model to train mode.</span>\n        loss_record <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\"># tqdm is a package to visualize your training progress.</span>\n        train_pbar <span class=\"token operator\">=</span> tqdm<span class=\"token punctuation\">(</span>train_loader<span class=\"token punctuation\">,</span> position<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> leave<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">for</span> x<span class=\"token punctuation\">,</span> y <span class=\"token keyword\">in</span> train_pbar<span class=\"token punctuation\">:</span>\n            optimizer<span class=\"token punctuation\">.</span>zero_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>               <span class=\"token comment\"># Set gradient to zero.</span>\n            x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># Move your data to device. </span>\n            pred <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>             \n            loss <span class=\"token operator\">=</span> criterion<span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n            loss<span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                     <span class=\"token comment\"># Compute gradient(backpropagation).</span>\n            optimizer<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                    <span class=\"token comment\"># Update parameters.</span>\n            step <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            loss_record<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>loss<span class=\"token punctuation\">.</span>detach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            \n            <span class=\"token comment\"># Display current epoch number and loss on tqdm progress bar.</span>\n            train_pbar<span class=\"token punctuation\">.</span>set_description<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Epoch [</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>epoch<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>n_epochs<span class=\"token punctuation\">}</span></span><span class=\"token string\">]'</span></span><span class=\"token punctuation\">)</span>\n            train_pbar<span class=\"token punctuation\">.</span>set_postfix<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'loss'</span><span class=\"token punctuation\">:</span> loss<span class=\"token punctuation\">.</span>detach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n        mean_train_loss <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>loss_record<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>loss_record<span class=\"token punctuation\">)</span>\n        writer<span class=\"token punctuation\">.</span>add_scalar<span class=\"token punctuation\">(</span><span class=\"token string\">'Loss/train'</span><span class=\"token punctuation\">,</span> mean_train_loss<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">)</span>\n\t\t\n\t\t<span class=\"token comment\"># 在验证集上进行模型准确率的分析验证。</span>\n        model<span class=\"token punctuation\">.</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Set your model to evaluation mode.</span>\n        loss_record <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> x<span class=\"token punctuation\">,</span> y <span class=\"token keyword\">in</span> valid_loader<span class=\"token punctuation\">:</span>\n            x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">with</span> torch<span class=\"token punctuation\">.</span>no_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                pred <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n                loss <span class=\"token operator\">=</span> criterion<span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n\n            loss_record<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>loss<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            \n        mean_valid_loss <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>loss_record<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>loss_record<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Epoch [</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>epoch<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>n_epochs<span class=\"token punctuation\">}</span></span><span class=\"token string\">]: Train loss: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>mean_train_loss<span class=\"token punctuation\">:</span><span class=\"token format-spec\">.4f</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, Valid loss: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>mean_valid_loss<span class=\"token punctuation\">:</span><span class=\"token format-spec\">.4f</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n        writer<span class=\"token punctuation\">.</span>add_scalar<span class=\"token punctuation\">(</span><span class=\"token string\">'Loss/valid'</span><span class=\"token punctuation\">,</span> mean_valid_loss<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> mean_valid_loss <span class=\"token operator\">&lt;</span> best_loss<span class=\"token punctuation\">:</span><span class=\"token comment\">#如果当前loss低于过去最低的loss，则记录loss，并保存当前最好的模型。</span>\n            best_loss <span class=\"token operator\">=</span> mean_valid_loss\n            torch<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>state_dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">[</span><span class=\"token string\">'save_path'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Save your best model</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Saving model with loss {:.3f}...'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>best_loss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            early_stop_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> \n            early_stop_count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n        <span class=\"token keyword\">if</span> early_stop_count <span class=\"token operator\">&gt;=</span> config<span class=\"token punctuation\">[</span><span class=\"token string\">'early_stop'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\nModel is not improving, so we halt the training session.'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n</code></pre>\n<h3><a id=\"8_221\"></a>8.超参数设置</h3>\n<pre><code class=\"prism language-python\">device <span class=\"token operator\">=</span> <span class=\"token string\">'cuda'</span> <span class=\"token keyword\">if</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>is_available<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token string\">'cpu'</span>\nconfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string\">'seed'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5201314</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\"># 制定模型的随即种子以保证模型的可恢复性。Your seed number, you can pick your lucky number. :)</span>\n    <span class=\"token string\">'select_all'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\"># Whether to use all features.</span>\n    <span class=\"token string\">'valid_ratio'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\"># validation_size = train_size * valid_ratio</span>\n    <span class=\"token string\">'n_epochs'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\"># Number of epochs.            </span>\n    <span class=\"token string\">'batch_size'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> \n    <span class=\"token string\">'learning_rate'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1e-5</span><span class=\"token punctuation\">,</span>              \n    <span class=\"token string\">'early_stop'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\"># If model has not improved for this many consecutive epochs, stop training. 任一时刻连续400次没有模型训练降低loss，就会提前停止。    </span>\n    <span class=\"token string\">'save_path'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'./models/model.ckpt'</span>  <span class=\"token comment\"># Your model will be saved here.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"9_235\"></a>9.加载数据</h3>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># Set seed for reproducibility</span>\nsame_seed<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">'seed'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># train_data size: 2699 x 118 (id + 37 states + 16 features x 5 days) </span>\n<span class=\"token comment\"># test_data size: 1078 x 117 (without last day's positive rate)</span>\ntrain_data<span class=\"token punctuation\">,</span> test_data <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'./covid.train.csv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">,</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'./covid.test.csv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>values\ntrain_data<span class=\"token punctuation\">,</span> valid_data <span class=\"token operator\">=</span> train_valid_split<span class=\"token punctuation\">(</span>train_data<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">[</span><span class=\"token string\">'valid_ratio'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">[</span><span class=\"token string\">'seed'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\"># 按照k折交叉验证法分成训练集和验证集</span>\n\n<span class=\"token comment\"># Print out the data size.</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"\"\"train_data size: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>train_data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">}</span></span><span class=\"token string\"> \nvalid_data size: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>valid_data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">}</span></span><span class=\"token string\"> \ntest_data size: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>test_data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"\"\"</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Select features</span>\nx_train<span class=\"token punctuation\">,</span> x_valid<span class=\"token punctuation\">,</span> x_test<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">,</span> y_valid <span class=\"token operator\">=</span> select_feat<span class=\"token punctuation\">(</span>train_data<span class=\"token punctuation\">,</span> valid_data<span class=\"token punctuation\">,</span> test_data<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">[</span><span class=\"token string\">'select_all'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Print out the number of features.</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'number of features: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>x_train<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\ntrain_dataset<span class=\"token punctuation\">,</span> valid_dataset<span class=\"token punctuation\">,</span> test_dataset <span class=\"token operator\">=</span> COVID19Dataset<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \\\n                                            COVID19Dataset<span class=\"token punctuation\">(</span>x_valid<span class=\"token punctuation\">,</span> y_valid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \\\n                                            COVID19Dataset<span class=\"token punctuation\">(</span>x_test<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 用统一的Pytorch加载器包装待处理数据 Pytorch data loader loads pytorch dataset into batches.</span>\ntrain_loader <span class=\"token operator\">=</span> DataLoader<span class=\"token punctuation\">(</span>train_dataset<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">'batch_size'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> pin_memory<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\nvalid_loader <span class=\"token operator\">=</span> DataLoader<span class=\"token punctuation\">(</span>valid_dataset<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">'batch_size'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> pin_memory<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\ntest_loader <span class=\"token operator\">=</span> DataLoader<span class=\"token punctuation\">(</span>test_dataset<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">'batch_size'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> pin_memory<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"10_266\"></a>10.开始训练</h3>\n<pre><code class=\"prism language-python\">model <span class=\"token operator\">=</span> My_Model<span class=\"token punctuation\">(</span>input_dim<span class=\"token operator\">=</span>x_train<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span> <span class=\"token comment\"># put your model and data on the same computation device.</span>\ntrainer<span class=\"token punctuation\">(</span>train_loader<span class=\"token punctuation\">,</span> valid_loader<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"11_272\"></a>11.可视化训练过程</h3>\n<p><code>tensorboard</code> 是一个可视化训练过程的工具。</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">%</span>reload_ext tensorboard\n<span class=\"token operator\">%</span>tensorboard <span class=\"token operator\">-</span><span class=\"token operator\">-</span>logdir<span class=\"token operator\">=</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>runs<span class=\"token operator\">/</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2b7df6c221a2425eb54df12d73ca37af.png\"/></p>\n<h3><a id=\"12_280\"></a>12.保存测试集结果</h3>\n<p>输出保存测试集的结果，并在Kaggle上查看模型得分。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">save_pred</span><span class=\"token punctuation\">(</span>preds<span class=\"token punctuation\">,</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">''' Save predictions to specified file '''</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> fp<span class=\"token punctuation\">:</span>\n        writer <span class=\"token operator\">=</span> csv<span class=\"token punctuation\">.</span>writer<span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span>\n        writer<span class=\"token punctuation\">.</span>writerow<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'tested_positive'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> p <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>preds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            writer<span class=\"token punctuation\">.</span>writerow<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nmodel <span class=\"token operator\">=</span> My_Model<span class=\"token punctuation\">(</span>input_dim<span class=\"token operator\">=</span>x_train<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>load_state_dict<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">'save_path'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#加载你保存好的best model</span>\npreds <span class=\"token operator\">=</span> predict<span class=\"token punctuation\">(</span>test_loader<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">)</span> \nsave_pred<span class=\"token punctuation\">(</span>preds<span class=\"token punctuation\">,</span> <span class=\"token string\">'pred.csv'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>可以看考<a href=\"https://zhuanlan.zhihu.com/p/98563721\">state_dict和load_state_dict</a></p>\n<h3><a id=\"13_298\"></a>13.改进方案</h3>\n<p>运行上述程序，即可通过simple_baseline。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9b31c45218924a8cb569f8ba2f463d66.png\"/><br/> 但还不能通过medium_baseline，而我们的目标是boss_baseline，因此需要修改方案。</p>\n<h4><a id=\"131_302\"></a>13.1.选择更有效的特征</h4>\n<p>首先，我们观察一下数据内部。</p>\n<pre><code class=\"prism language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'./covid.train.csv'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#df.head()</span>\ndf<span class=\"token punctuation\">.</span>describe<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5aaefaf4cd6d4a73a361eda230f3bfa0.png\"/><br/> 共有2699个data，117个feature，1个label。<br/> 我们利用Pearson相关系数分析不同feature与label的相关性强弱。</p>\n<pre><code class=\"prism language-python\">df<span class=\"token punctuation\">.</span>corr<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'tested_positive'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sort_values<span class=\"token punctuation\">(</span>ascending<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2f4e2e1097a04fc8b1f3787873f36c3e.png\"/><br/> 根据Pearson系数降序排列的结果，我们重新选择特征。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">select_feat</span><span class=\"token punctuation\">(</span>train_data<span class=\"token punctuation\">,</span> valid_data<span class=\"token punctuation\">,</span> test_data<span class=\"token punctuation\">,</span> select_all<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">'''Selects useful features to perform regression'''</span>\n    y_train<span class=\"token punctuation\">,</span> y_valid <span class=\"token operator\">=</span> train_data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> valid_data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    raw_x_train<span class=\"token punctuation\">,</span> raw_x_valid<span class=\"token punctuation\">,</span> raw_x_test <span class=\"token operator\">=</span> train_data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> valid_data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> test_data\n\n    <span class=\"token keyword\">if</span> select_all<span class=\"token punctuation\">:</span>\n        feat_idx <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>raw_x_train<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        feat_idx <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">38</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token number\">53</span><span class=\"token punctuation\">,</span> <span class=\"token number\">69</span><span class=\"token punctuation\">,</span> <span class=\"token number\">85</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># TODO: Select suitable feature columns.</span>\n        \n    <span class=\"token keyword\">return</span> raw_x_train<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span>feat_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> raw_x_valid<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span>feat_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> raw_x_test<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span>feat_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">,</span> y_valid\n</code></pre>\n<p>这时，我们要把参数设置中的<code>select_all</code>设置为<code>False</code>。此外，我们还要减小<code>batch_size</code>，这样可以避免训练中梯度在极小值点附近被捕捉。同时，小<code>batch_size</code>好处还有减少一次训练的数据量，降低网络负载，也加快网络的收敛速度。</p>\n<pre><code class=\"prism language-python\">device <span class=\"token operator\">=</span> <span class=\"token string\">'cuda'</span> <span class=\"token keyword\">if</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>is_available<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token string\">'cpu'</span>\nconfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string\">'seed'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5201314</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\"># Your seed number, you can pick your lucky number. :)</span>\n    <span class=\"token string\">'select_all'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\"># Whether to use all features.</span>\n    <span class=\"token string\">'valid_ratio'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\"># validation_size = train_size * valid_ratio</span>\n    <span class=\"token string\">'n_epochs'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\"># Number of epochs.            </span>\n    <span class=\"token string\">'batch_size'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> \n    <span class=\"token string\">'learning_rate'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1e-5</span><span class=\"token punctuation\">,</span>              \n    <span class=\"token string\">'early_stop'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\"># If model has not improved for this many consecutive epochs, stop training.     </span>\n    <span class=\"token string\">'save_path'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'./models/model.ckpt'</span>  <span class=\"token comment\"># Your model will be saved here.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"132_346\"></a>13.2.修改模型</h4>\n<p>首先，我们很容易想到的方法是：加深神经网络的层数。但是这个问题本身足够简单，数据量也不大，所以不能带来明显提升。<br/> 为了防止过拟合，引入L2正则化项可以通过给<code>loss</code>增加模型惩罚项使模型的结构化风险最小。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NN_Model</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> input_dim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>NN_Model<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># TODO: modify model's structure, be aware of dimensions. </span>\n        self<span class=\"token punctuation\">.</span>layers <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span>input_dim<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm1d<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>LeakyReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm1d<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>LeakyReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>criterion <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MSELoss<span class=\"token punctuation\">(</span>reduction<span class=\"token operator\">=</span><span class=\"token string\">'mean'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#self.criterion = nn.CrossEntropyLoss()</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># (B, 1) -&gt; (B)</span>\n        <span class=\"token keyword\">return</span> x\n    <span class=\"token comment\">#添加L2正则项</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">regularization</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> coef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      item <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n      <span class=\"token keyword\">for</span> param <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        item <span class=\"token operator\">+=</span> torch<span class=\"token punctuation\">.</span>norm<span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n      res <span class=\"token operator\">=</span> coef<span class=\"token operator\">*</span>item\n      <span class=\"token keyword\">return</span> res\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">cal_loss</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>pred<span class=\"token punctuation\">,</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\">#RMSE+L2 regularization</span>\n      loss <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>criterion<span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>regularization<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n      <span class=\"token keyword\">return</span> loss\n      <span class=\"token keyword\">return</span> loss\n</code></pre>\n<p>其中，<code>torch.nn.Dropout(num)</code>是一种为了防止训练模型过拟合的方法。通过丢弃<code>num</code>比例的隐藏层神经元，不参与训练，可以有效的防止过拟合。<br/> <code>torch.nn.BatchNorm1d()</code>是为了保持深度神经网络训练过程中每一层神经网络的输入同分布的方法。训练深度网络的时候经常发生训练困难的问题：因为，每一次参数迭代更新后，上一层网络的输出数据经过这一层网络计算后，数据的分布会发生变化，为下一层网络的学习带来困难，这被称为Internal Covariate Shift。为了解决Internal Covariate Shift，我们使用Batch Normalization。</p>\n<pre><code class=\"prism language-python\">torch<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>BatchNorm1d<span class=\"token punctuation\">(</span>num_features<span class=\"token punctuation\">,</span> eps<span class=\"token operator\">=</span><span class=\"token number\">1e-05</span><span class=\"token punctuation\">,</span> momentum<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> affine<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> track_running_stats<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul><li><code>num_features</code> – 特征维度</li><li><code>eps</code> – 为数值稳定性而加到分母上的值。</li><li><code>momentum</code> – 移动平均的动量值。</li><li><code>affine</code> – 一个布尔值，当设置为真时，此模块具有可学习的仿射参数。</li></ul>\n<h4><a id=\"133_397\"></a>13.3.修改优化器</h4>\n<p>经过测试，使用AdamW优化器效果最佳，其数学原理：<br/> <span class=\"katex--display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n          grad = decay-rate \n        \n        \n         ∗\n        \n        \n          grad \n        \n        \n         +\n        \n        \n         (\n        \n        \n         1\n        \n        \n         −\n        \n        \n          decay-rate \n        \n        \n         )\n        \n        \n         ∗\n        \n        \n         d\n        \n        \n         \n          x\n         \n         \n          2\n         \n        \n       \n       \n         \\text { grad = decay-{rate} } * \\text { grad }+(1-\\text { decay-{rate} }) * d x^{2} \n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.88888em; vertical-align: -0.19444em;\"></span><span class=\"mord text\"><span class=\"mord\"> grad = decay-</span><span class=\"mord\"><span class=\"mord\">r</span><span class=\"mord\">a</span><span class=\"mord\">t</span><span class=\"mord\">e</span></span><span class=\"mord\"> </span></span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.88888em; vertical-align: -0.19444em;\"></span><span class=\"mord text\"><span class=\"mord\"> grad </span></span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord text\"><span class=\"mord\"> decay-</span><span class=\"mord\"><span class=\"mord\">r</span><span class=\"mord\">a</span><span class=\"mord\">t</span><span class=\"mord\">e</span></span><span class=\"mord\"> </span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.864108em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.864108em;\"><span class=\"\" style=\"top: -3.113em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></span></span><br/> 优化器的参数设置。</p>\n<pre><code class=\"prism language-python\">optimizer <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>optim<span class=\"token punctuation\">.</span>AdamW<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">'learning_rate'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> weight_decay<span class=\"token operator\">=</span><span class=\"token number\">0.08</span><span class=\"token punctuation\">)</span>  \n</code></pre>\n<h3><a id=\"14__407\"></a>14. 测试结果</h3>\n<p>通过了strong baseline。还有待优化，有时间了再来…<br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\31905e7cf6a647379d740863c3d8c24f.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-06-25 10:36:04", "summary": "文章目录李宏毅《机器学习》作业：作业内容目标任务描述数据评价指标代码下载数据导入软件包定义公用函数这一部分不需要修改数据集神经网络模型特征选择训练器超参数设置加载数据开始训练可视化训练过程保存测试集结"}