{"blogid": "122084155", "writerAge": "码龄5年", "writerBlogNum": "84", "writerCollect": "518", "writerComment": "297", "writerFan": "684", "writerGrade": "5级", "writerIntegral": "2068", "writerName": "MateZero", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122084155.jpg", "writerRankTotal": "15645", "writerRankWeekly": "162244", "writerThumb": "242", "writerVisitNum": "212311", "blog_read_count": "9177", "blog_time": "于 2021-12-22 13:53:07 发布", "blog_title": "Solana区块链智能合约开发简要流程", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"Solana_0\"></a>Solana区块链智能合约开发简要流程</h1>\n<p>Solana区块链是当今市值第5的区块链，已经有很多知名生态准备部署在Solana上。相比于类以太坊（EVM）区块链来讲，Solana上智能合约开发（叫Program）存在一定的门槛，因为Solana通常使用系统程序语言Rust进行Program开发而不是使用特定领域语言（例如Solidity）进行开发，学习曲线较为陡峭。另外，Solana上一些基础概念同当今流利的EVM区块链并不相同，习惯了以太坊区块链的开发者会有一个适应期。</p>\n<p>幸好，Solana的基础开发者已经写了一篇很详细的教学文章，上面对Solana的区块链基础知识也有介绍。这里给出链接</p>\n<p><a href=\"https://paulx.dev/blog/2021/01/14/programming-on-solana-an-introduction/\">Programming on Solana - An Introduction</a> 。强烈推荐Solana上的开发者读一下。</p>\n<p>本文也是基于该教学文章写的一篇开发流程的总结文章，这里再次感觉该文章的作者: paulx 。</p>\n<h1><a id=\"_10\"></a>一、准备工作</h1>\n<ul><li> <p>安装最新的Rust</p> <pre><code class=\"prism language-bash\"><span class=\"token function\">curl</span> --proto <span class=\"token string\">'=https'</span> --tlsv1.2 -sSf https://sh.rustup.rs <span class=\"token operator\">|</span> <span class=\"token function\">sh</span>\n</code></pre> <p>安装完成后可以运行<code>rustc -V</code>查看安装的版本。</p> </li><li> <p>安装最新的Solana开发工具</p> <pre><code class=\"prism language-bash\"><span class=\"token function\">sh</span> -c <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> -sSfL https://release.solana.com/v1.9.1/install<span class=\"token variable\">)</span></span>\"</span>\n</code></pre> <p>安装完成后我们可以运行<code>solana -V</code>查看安装的版本。</p> </li></ul>\n<h1><a id=\"Rust_28\"></a>二、新建Rust工程</h1>\n<ul><li> <p>cargo new escrow --lib</p> </li><li> <p>新建Xargo.toml,内容为：</p> <pre><code class=\"prism language-toml\">[target.bpfel-unknown-unknown.dependencies.std]\nfeatures = []\n</code></pre> </li><li> <p>编辑Cargo.toml,添加常用依赖，并且设定no-entrypoint特性，示例如下：</p> <pre><code class=\"prism language-toml\">[package]\nname = \"escrow\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[features]\nno-entrypoint = []\n\n[dependencies]\narrayref = \"0.3.6\"\nsolana-program = \"1.7.11\"\nthiserror = \"1.0\"\n\n[lib]\ncrate-type = [\"cdylib\", \"lib\"]\n</code></pre> </li></ul>\n<h1><a id=\"_61\"></a>三、托管合约的主要流程</h1>\n<p>我们学习的教学文章为一个托管合约，主要是解决交易中的去信任问题。假定Alice和Bob需要相互交易资产，谁都不想首先发送资产，怕另一方拿钱就跑，这样就会形成一个死节。传统的解决方式是找一个可信的第三方，将资产交易第三方进行交易。然而，此处还是不完全可信的，因为第三方也许会和其中一方勾结。</p>\n<p>而在区块链，智能合约就是天然的可信第三方。因为智能合约对双方都可见，所以是可信的。又因为智能合约是程序，是按既定编码执行的，不会掺杂其它因素，所以不会发生勾结问题。</p>\n<p>这里补充一点点：上面那一段话在Solana上并不是完全适用。首先，Solana合约是可以升级的（虽然也可以关闭掉升级功能）；其次，在Solana上还并未有浏览器开源验证这个功能，我们可能无法保证部署的合约就是我们看到的合约。</p>\n<p>在本托管合约中，假定Alice要将资产（代币）X 交换为Bob的代币Y，它需要创建一个临时资产账号用来存放交易的X，并将这个X的所有权转给托管合约，同时设定交换得到的Y的数量。当Bob发起交易时，将相应数量的Y发送到Alice的账户，并且得到Alice存放在临时账号中的X。</p>\n<p>注意：在Solana区块链中，智能合约是无状态的，不能保存任何数据。所有需要保存的数据均保存在账号的<code>data</code>字段中。</p>\n<p>另外：关于Spl-token及账号相关的一些基础知识这里无法简单解释清楚，请读者自行阅读相应文章或者源教学文章。</p>\n<p>我们计划只实现了其第一步的代码，Alice初始化一个交易账号并将自己的保存临时资产X的账号的所有权转给这个交易账号。完整实现请看源教学文章。</p>\n<h1><a id=\"_77\"></a>四、编写基本框架</h1>\n<p>基础设置已经有了，下面开始编写代码。如果我们先从主干（程序入口）编写起，那么你会遇到很多红色波浪线错误提示，所以这里我们先编写基本的枝叶，再用主干将它们串起来。</p>\n<h2><a id=\"41librs_81\"></a>4.1、lib.rs</h2>\n<p>使用Cargo 新建Rust工程时，<code>src/lib.rs</code>已经帮我们建好了，我们只需要往里面添加内容就行了，可以忽略那个单元测试。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token attribute attr-name\">#[cfg(test)]</span>\n<span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">tests</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token attribute attr-name\">#[test]</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">it_works</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"42errorrs_96\"></a>4.2、error.rs</h2>\n<p>我们首先进行错误处理相关内容的编写，在<code>src</code>目录下新建<code>error.rs</code>，内容如下：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">thiserror<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">solana_program<span class=\"token punctuation\">::</span>program_error<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">ProgramError</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[derive(Error,Debug,Copy,Clone)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">EscrowError</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// Invalid instruction</span>\n    <span class=\"token attribute attr-name\">#[error(<span class=\"token string\">\"Invalid Instruction\"</span>)]</span>\n    <span class=\"token class-name\">InvalidInstruction</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">From</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">EscrowError</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">ProgramError</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">from</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">:</span> <span class=\"token class-name\">EscrowError</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">ProgramError</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Custom</span><span class=\"token punctuation\">(</span>e <span class=\"token keyword\">as</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>注意：这里使用thiserror的原因原文中写的很明确，省去我们手动实现相关Trait。</p>\n<p>最后手动实现了从EscrowError到ProgramError转换，因为Solana程序通常返回的为ProgramError。</p>\n<p>编写完成后修改lib.rs，注册error模块。例如在第一行添加<code>pub mod error;</code></p>\n<h2><a id=\"43instructionrs_124\"></a>4.3、instruction.rs</h2>\n<p>在相同目录下创建<code>instruction.rs</code>，我们先编写一个初始化指令。同时需要编写unpack 函数，用来将输入数据解析为一个指令。</p>\n<p>以后再添加新的指令后继续在unpack函数中添加相应内容。注意unpack 函数返回的是一个 <code>Result&lt;Self, ProgramError&gt;</code></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>convert<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">TryInto</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token keyword\">crate</span><span class=\"token module-declaration namespace\"><span class=\"token punctuation\">::</span>error<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">EscrowError</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">InvalidInstruction</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">solana_program<span class=\"token punctuation\">::</span>program_error<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">ProgramError</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">EscrowInstruction</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">/// 因为要在初始化里转移临时代币账号所有权，所以需要原owner签名，并且原owner也是初始化者</span>\n    <span class=\"token comment\">/// 0. `[signer]` The account of the person initializing the escrow</span>\n    <span class=\"token comment\">/// 1. `[writable]` Temporary token account that should be created prior to this instruction and owned by the initializer</span>\n    <span class=\"token comment\">/// 2. `[]` The initializer's token account for the token they will receive should the trade go through</span>\n    <span class=\"token comment\">/// 3. `[writable]` The escrow account, it will hold all necessary info about the trade.</span>\n    <span class=\"token comment\">/// 4. `[]` The rent sysvar</span>\n    <span class=\"token comment\">/// 5. `[]` The token program</span>\n    <span class=\"token class-name\">InitEscrow</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">/// The amount party A expects to receive of token Y</span>\n        amount<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u64</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">EscrowInstruction</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">unpack</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">u8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">Self</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ProgramError</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> rest<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">split_first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok_or</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InvalidInstruction</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">match</span> tag <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token number\">0</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">InitEscrow</span> <span class=\"token punctuation\">{<!-- --></span>\n                amount<span class=\"token punctuation\">:</span> <span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span><span class=\"token function\">unpack_amount</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">//注意这里的用法，InvalidInstruction转化为ProgramError时，使用了into</span>\n          \t<span class=\"token comment\">//因为我们在error.rs中已经实现了那个from，系统会自动帮我们实现into</span>\n            _ <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">return</span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InvalidInstruction</span><span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//这里学习Input 转化为u64</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">unpack_amount</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">u8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">u64</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ProgramError</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> amount <span class=\"token operator\">=</span> input\n            <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">..</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">and_then</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>slice<span class=\"token closure-punctuation punctuation\">|</span></span> slice<span class=\"token punctuation\">.</span><span class=\"token function\">try_into</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">u64</span><span class=\"token punctuation\">::</span>from_le_bytes<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">ok_or</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InvalidInstruction</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>编写完成后记得在<code>lib.rs</code>中注册instruction模块</p>\n<h2><a id=\"44processorrs_178\"></a>4.4、processor.rs</h2>\n<p>相同目录下创建<code>processor.rs</code>。</p>\n<p>注意：这里一般为固定的<em>Processor</em>结构体（只是约定，无强制力）。在该结构体上创建一个静态函数process来处理入口转发过来的参数。在该函数内部，首先解析指令，然后根据指令调用相应的处理函数。</p>\n<p>注意：</p>\n<ol><li>它返回的是ProgramResult。</li><li>函数体中\"?\"操作符的使用，向上级调用传递错误。</li></ol>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">solana_program<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token namespace\">account_info<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span>next_account_info<span class=\"token punctuation\">,</span><span class=\"token class-name\">AccountInfo</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token namespace\">entrypoint<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">ProgramResult</span><span class=\"token punctuation\">,</span>\n    <span class=\"token namespace\">program_error<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">ProgramError</span><span class=\"token punctuation\">,</span>\n    msg<span class=\"token punctuation\">,</span>\n    <span class=\"token namespace\">pubkey<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Pubkey</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token keyword\">crate</span><span class=\"token module-declaration namespace\"><span class=\"token punctuation\">::</span>instruction<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">EscrowInstruction</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Processor</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Processor</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">process</span><span class=\"token punctuation\">(</span>program_id<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">Pubkey</span><span class=\"token punctuation\">,</span> accounts<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">AccountInfo</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> instruction_data<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">u8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">ProgramResult</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> instruction <span class=\"token operator\">=</span> <span class=\"token class-name\">EscrowInstruction</span><span class=\"token punctuation\">::</span><span class=\"token function\">unpack</span><span class=\"token punctuation\">(</span>instruction_data<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">match</span> instruction <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">EscrowInstruction</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">InitEscrow</span> <span class=\"token punctuation\">{<!-- --></span>amount<span class=\"token punctuation\">}</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token macro property\">msg!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Instruction: InitEscrow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span><span class=\"token function\">process_init_escrow</span><span class=\"token punctuation\">(</span>accounts<span class=\"token punctuation\">,</span>amount<span class=\"token punctuation\">,</span>program_id<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">process_init_escrow</span><span class=\"token punctuation\">(</span>\n        accounts<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">AccountInfo</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        amount<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u64</span><span class=\"token punctuation\">,</span>\n        program_id<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">Pubkey</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">ProgramResult</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> account_info_iter <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> accounts<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> initializer <span class=\"token operator\">=</span> <span class=\"token function\">next_account_info</span><span class=\"token punctuation\">(</span>account_info_iter<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>initializer<span class=\"token punctuation\">.</span>is_signer <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProgramError</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">MissingRequiredSignature</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token comment\">// todo</span>\n        <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这里的<code>process_init_escrow</code>函数并没有编写完全。</p>\n<p>别忘记在<code>lib.rs</code>中注册processor模块。</p>\n<h2><a id=\"45entrypointrs_233\"></a>4.5、entrypoint.rs</h2>\n<p>相同目录下创建<code>entrypoint.rs</code>作为程序的入口，注意使用<code>entrypoint</code>宏来指定入口函数。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">//! Program entrypoint</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token keyword\">crate</span><span class=\"token punctuation\">::</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token namespace\">processor<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Processor</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">solana_program<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token namespace\">account_info<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">AccountInfo</span><span class=\"token punctuation\">,</span> \n    entrypoint<span class=\"token punctuation\">,</span> \n    <span class=\"token namespace\">entrypoint<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">ProgramResult</span><span class=\"token punctuation\">,</span>\n    <span class=\"token namespace\">pubkey<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Pubkey</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">entrypoint!</span><span class=\"token punctuation\">(</span>process_instruction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">process_instruction</span><span class=\"token punctuation\">(</span>\n    program_id<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">Pubkey</span><span class=\"token punctuation\">,</span>\n    accounts<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">AccountInfo</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    instruction_data<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">u8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">ProgramResult</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Processor</span><span class=\"token punctuation\">::</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span>program_id<span class=\"token punctuation\">,</span> accounts<span class=\"token punctuation\">,</span> instruction_data<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在<code>lib.rs</code>中注册entrypoint模块，为了以后我们的程序能方便的被别的程序导入，此时需要设定可关闭entrypoint特性。（这里原文中也只是指出了方法，是参考spl-token中的设置和编写而来的）。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token attribute attr-name\">#[cfg(not(feature = <span class=\"token string\">\"no-entrypoint\"</span>))]</span>\n<span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">entrypoint</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"46staters_265\"></a>4.6、state.rs</h2>\n<p>相同目录创建state.rs，文件用来定义状态保存对象并编写相应的程序处理序列化和反序列化（也就是将字节数组和数据结构相互转换）。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">solana_program<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token namespace\">program_pack<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">IsInitialized</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Pack</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Sealed</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token namespace\">program_error<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">ProgramError</span><span class=\"token punctuation\">,</span>\n    <span class=\"token namespace\">pubkey<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Pubkey</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Escrow</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">pub</span> is_initialized<span class=\"token punctuation\">:</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> initializer_pubkey<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Pubkey</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> temp_token_account_pubkey<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Pubkey</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> initializer_token_to_receive_account_pubkey<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Pubkey</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> expected_amount<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u64</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Sealed</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">Escrow</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">IsInitialized</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">Escrow</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">is_initialized</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>is_initialized\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">arrayref<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span>array_mut_ref<span class=\"token punctuation\">,</span> array_ref<span class=\"token punctuation\">,</span> array_refs<span class=\"token punctuation\">,</span> mut_array_refs<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Pack</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">Escrow</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">LEN</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">usize</span> <span class=\"token operator\">=</span> <span class=\"token number\">105</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">unpack_from_slice</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">u8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">Self</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ProgramError</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> src <span class=\"token operator\">=</span> <span class=\"token macro property\">array_ref!</span><span class=\"token punctuation\">[</span>src<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Escrow</span><span class=\"token punctuation\">::</span><span class=\"token constant\">LEN</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>\n            is_initialized<span class=\"token punctuation\">,</span>\n            initializer_pubkey<span class=\"token punctuation\">,</span>\n            temp_token_account_pubkey<span class=\"token punctuation\">,</span>\n            initializer_token_to_receive_account_pubkey<span class=\"token punctuation\">,</span>\n            expected_amount<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token macro property\">array_refs!</span><span class=\"token punctuation\">[</span>src<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> is_initialized <span class=\"token operator\">=</span> <span class=\"token keyword\">match</span> is_initialized <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=&gt;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=&gt;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            _ <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">return</span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProgramError</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">InvalidAccountData</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Escrow</span> <span class=\"token punctuation\">{<!-- --></span>\n            is_initialized<span class=\"token punctuation\">,</span>\n            initializer_pubkey<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Pubkey</span><span class=\"token punctuation\">::</span><span class=\"token function\">new_from_array</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>initializer_pubkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            temp_token_account_pubkey<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Pubkey</span><span class=\"token punctuation\">::</span><span class=\"token function\">new_from_array</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>temp_token_account_pubkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            initializer_token_to_receive_account_pubkey<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Pubkey</span><span class=\"token punctuation\">::</span><span class=\"token function\">new_from_array</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>initializer_token_to_receive_account_pubkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            expected_amount<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u64</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_le_bytes</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>expected_amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">pack_into_slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">u8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> dst <span class=\"token operator\">=</span> <span class=\"token macro property\">array_mut_ref!</span><span class=\"token punctuation\">[</span>dst<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Escrow</span><span class=\"token punctuation\">::</span><span class=\"token constant\">LEN</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>\n            is_initialized_dst<span class=\"token punctuation\">,</span>\n            initializer_pubkey_dst<span class=\"token punctuation\">,</span>\n            temp_token_account_pubkey_dst<span class=\"token punctuation\">,</span>\n            initializer_token_to_receive_account_pubkey_dst<span class=\"token punctuation\">,</span>\n            expected_amount_dst<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token macro property\">mut_array_refs!</span><span class=\"token punctuation\">[</span>dst<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> <span class=\"token class-name\">Escrow</span> <span class=\"token punctuation\">{<!-- --></span>\n            is_initialized<span class=\"token punctuation\">,</span>\n            initializer_pubkey<span class=\"token punctuation\">,</span>\n            temp_token_account_pubkey<span class=\"token punctuation\">,</span>\n            initializer_token_to_receive_account_pubkey<span class=\"token punctuation\">,</span>\n            expected_amount<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">;</span>\n\n        is_initialized_dst<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>is_initialized <span class=\"token keyword\">as</span> <span class=\"token keyword\">u8</span><span class=\"token punctuation\">;</span>\n        initializer_pubkey_dst<span class=\"token punctuation\">.</span><span class=\"token function\">copy_from_slice</span><span class=\"token punctuation\">(</span>initializer_pubkey<span class=\"token punctuation\">.</span><span class=\"token function\">as_ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        temp_token_account_pubkey_dst<span class=\"token punctuation\">.</span><span class=\"token function\">copy_from_slice</span><span class=\"token punctuation\">(</span>temp_token_account_pubkey<span class=\"token punctuation\">.</span><span class=\"token function\">as_ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        initializer_token_to_receive_account_pubkey_dst<span class=\"token punctuation\">.</span><span class=\"token function\">copy_from_slice</span><span class=\"token punctuation\">(</span>initializer_token_to_receive_account_pubkey<span class=\"token punctuation\">.</span><span class=\"token function\">as_ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">*</span>expected_amount_dst <span class=\"token operator\">=</span> expected_amount<span class=\"token punctuation\">.</span><span class=\"token function\">to_le_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这里需要注意的有：</p>\n<ul><li>我们的结构需要实现<code>program_pack::{IsInitialized, Pack, Sealed}</code> 这三个特型。</li><li><code>const LEN: usize = 105;</code>这里结构的大小是根据各个字段的大小相加得到的，分别为<code>1</code> + <code>32*3</code> + <code>8</code> = <code>105</code>。</li><li><code>unpack_from_slice</code>与<code>pack_into_slice</code>并不是直接被程序的其它部分调用的，<code>Pack</code>特型有两个默认函数，分别调用这两个函数。</li><li>注意<code>array_mut_ref, array_ref, array_refs, mut_array_refs</code>这几个宏的用法，看名字就能猜到，分别为得到一个数组的可变引用，得到一个数组的引用 ，得到多个数组的引用，得到多个数组的可变引用。</li><li>注意示例中从字节数组得到公钥的方法<code>copy_from_slice</code></li><li>示例中从字节数组得到u64采用了<code>to_le_bytes</code>左对齐的方式，Rust中还有类似的右对齐方式。但一般Solana中采用类C的左对齐方式。</li><li>布尔值可以直接转换为u8，见<code>*is_initialized as u8</code>。</li></ul>\n<p>最后注册<code>state</code>模块，同时删除单元测试的内容，此时整个<code>lib.rs</code>为：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">error</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">instruction</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">state</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">processor</span><span class=\"token punctuation\">;</span>\n<span class=\"token attribute attr-name\">#[cfg(not(feature = <span class=\"token string\">\"no-entrypoint\"</span>))]</span>\n<span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">entrypoint</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"47processorrs_369\"></a>4.7、继续完成processor.rs</h2>\n<p>我们接下来继续完成<code>processor.rs</code>，因为我们要转代币账号所有权，需要调用<code>spl-token</code>的相关函数生成指令，所以我们需要在<code>Cargo.toml</code>中添加相关依赖。</p>\n<pre><code class=\"prism language-bash\">spl-token <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>version <span class=\"token operator\">=</span> <span class=\"token string\">\"3.1.1\"</span>, features <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"no-entrypoint\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p>接下来在<code>process_init_escrow</code>函数中补充如下片断：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token punctuation\">...</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">process_init_escrow</span><span class=\"token punctuation\">(</span>\n    accounts<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">AccountInfo</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    amount<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u64</span><span class=\"token punctuation\">,</span>\n    program_id<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">Pubkey</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">ProgramResult</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> account_info_iter <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> accounts<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> initializer <span class=\"token operator\">=</span> <span class=\"token function\">next_account_info</span><span class=\"token punctuation\">(</span>account_info_iter<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>initializer<span class=\"token punctuation\">.</span>is_signer <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProgramError</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">MissingRequiredSignature</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> temp_token_account <span class=\"token operator\">=</span> <span class=\"token function\">next_account_info</span><span class=\"token punctuation\">(</span>account_info_iter<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> token_to_receive_account <span class=\"token operator\">=</span> <span class=\"token function\">next_account_info</span><span class=\"token punctuation\">(</span>account_info_iter<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">*</span>token_to_receive_account<span class=\"token punctuation\">.</span>owner <span class=\"token operator\">!=</span> <span class=\"token namespace\">spl_token<span class=\"token punctuation\">::</span></span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProgramError</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">IncorrectProgramId</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  \n    <span class=\"token keyword\">let</span> escrow_account <span class=\"token operator\">=</span> <span class=\"token function\">next_account_info</span><span class=\"token punctuation\">(</span>account_info_iter<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> rent <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">Rent</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_account_info</span><span class=\"token punctuation\">(</span><span class=\"token function\">next_account_info</span><span class=\"token punctuation\">(</span>account_info_iter<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>rent<span class=\"token punctuation\">.</span><span class=\"token function\">is_exempt</span><span class=\"token punctuation\">(</span>escrow_account<span class=\"token punctuation\">.</span><span class=\"token function\">lamports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> escrow_account<span class=\"token punctuation\">.</span><span class=\"token function\">data_len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EscrowError</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">NotRentExempt</span><span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> escrow_info <span class=\"token operator\">=</span> <span class=\"token class-name\">Escrow</span><span class=\"token punctuation\">::</span><span class=\"token function\">unpack_unchecked</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>escrow_account<span class=\"token punctuation\">.</span><span class=\"token function\">try_borrow_data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> escrow_info<span class=\"token punctuation\">.</span><span class=\"token function\">is_initialized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProgramError</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">AccountAlreadyInitialized</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  \n    escrow_info<span class=\"token punctuation\">.</span>is_initialized <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    escrow_info<span class=\"token punctuation\">.</span>initializer_pubkey <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>initializer<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n    escrow_info<span class=\"token punctuation\">.</span>temp_token_account_pubkey <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>temp_token_account<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n    escrow_info<span class=\"token punctuation\">.</span>initializer_token_to_receive_account_pubkey <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>token_to_receive_account<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n    escrow_info<span class=\"token punctuation\">.</span>expected_amount <span class=\"token operator\">=</span> amount<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Escrow</span><span class=\"token punctuation\">::</span><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span>escrow_info<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> escrow_account<span class=\"token punctuation\">.</span><span class=\"token function\">try_borrow_mut_data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>pda<span class=\"token punctuation\">,</span> _bump_seed<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Pubkey</span><span class=\"token punctuation\">::</span><span class=\"token function\">find_program_address</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token string\">b\"escrow\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> program_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n    <span class=\"token keyword\">let</span> token_program <span class=\"token operator\">=</span> <span class=\"token function\">next_account_info</span><span class=\"token punctuation\">(</span>account_info_iter<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> owner_change_ix <span class=\"token operator\">=</span> <span class=\"token namespace\">spl_token<span class=\"token punctuation\">::</span>instruction<span class=\"token punctuation\">::</span></span><span class=\"token function\">set_authority</span><span class=\"token punctuation\">(</span>\n        token_program<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span>\n        temp_token_account<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pda<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token namespace\">spl_token<span class=\"token punctuation\">::</span>instruction<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">AuthorityType</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">AccountOwner</span><span class=\"token punctuation\">,</span>\n        initializer<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>initializer<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">msg!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Calling the token program to transfer token account ownership...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&amp;</span>owner_change_ix<span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span>\n            temp_token_account<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            initializer<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            token_program<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">...</span>\n</code></pre>\n<p>上面的代码主要添加的功能有：</p>\n<ol><li>验证那个用来接收代币的账号是否存在</li><li>用来验证交易账号是否免租金（这里请阅读相关文章了解租金免除的概念）</li><li>用来验证交易账号未初始化过（也就是只能初始化一次）。</li><li>将交易账号的保存的数据初始化并写回区块链（见 Escrow::pack 函数）</li><li>转让临时代币账号的所有权</li></ol>\n<p>同时修改</p>\n<pre><code class=\"prism language-bash\">use crate::instruction::EscrowInstruction<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>为</p>\n<pre><code class=\"prism language-bash\">use crate::<span class=\"token punctuation\">{<!-- --></span>instruction::EscrowInstruction, error::EscrowError, state::Escrow<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>并且将最开始的导入语句替换为:</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">solana_program<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token namespace\">account_info<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span>next_account_info<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AccountInfo</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token namespace\">entrypoint<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">ProgramResult</span><span class=\"token punctuation\">,</span>\n    <span class=\"token namespace\">program_error<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">ProgramError</span><span class=\"token punctuation\">,</span>\n    msg<span class=\"token punctuation\">,</span>\n    <span class=\"token namespace\">pubkey<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Pubkey</span><span class=\"token punctuation\">,</span>\n    <span class=\"token namespace\">program_pack<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">Pack</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IsInitialized</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token namespace\">sysvar<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token namespace\">rent<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Rent</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Sysvar</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token namespace\">program<span class=\"token punctuation\">::</span></span>invoke\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"48errorrserror_482\"></a>4.8、在error.rs中添加新的error类型</h2>\n<pre><code class=\"prism language-rust\"><span class=\"token attribute attr-name\">#[error(<span class=\"token string\">\"NotRentExempt\"</span>)]</span>\n<span class=\"token class-name\">NotRentExempt</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<p>至此，我们第一部分的代码就算编写完毕。</p>\n<h1><a id=\"_493\"></a>五、在本地编译部署</h1>\n<ol><li> <p>编译合约，打开终端切换到项目根目录，运行<code>cargo build-bpf --manifest-path=./Cargo.toml --bpf-out-dir=dist/program</code>并忽视那些警告（那是下一步使用的）。编译完成后会给出部署命令。</p> </li><li> <p>启动本地节点。打开一个终端运行<code>solana-test-validator</code>启动本地节点。</p> </li><li> <p>进行本地配置。另外打开一个终端，运行<code>solana config get</code>看是否指向了本地节点，如果不是，运行<code>solana config set --url http://localhost:8899</code> 进行设置。然后运行<code>solana balance</code>，你会发现你拥有 500000000 个SOL。-_- !!!</p> </li><li> <p>运行编译时给出的部署命令:</p> <pre><code class=\"prism language-bash\">solana program deploy <span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>/escrow/target/deploy/escrow.so\n</code></pre> <p>最后得到一个程序ID，需要记下来，例如我们的为:<code>HEptwBGd4ShMYP6vNCE6vsDmuG3bGzQCcRPHfapvNeys</code>。</p> </li></ol>\n<h1><a id=\"_511\"></a>六、编写测试脚本</h1>\n<h2><a id=\"61_513\"></a>6.1、预备工作</h2>\n<p>在正式测试我们的合约之前，我们还有许多预备工作要做，主要有：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token number\">1</span>、创建Alice账号并领取空投SOL作为手续费\n<span class=\"token number\">2</span>、部署spl-token合约，这个已经默认包含在本地节点了,地址为:TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA。\n<span class=\"token number\">3</span>、部署spl-associated-token-account合约，默认已有，地址为:ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\n<span class=\"token number\">4</span>、发行X和Y两种代币。\n<span class=\"token number\">5</span>、创建Alice在X代币和Y代币的账号（主账号，这里使用唯一的代币关联地址）。\n<span class=\"token number\">6</span>、给Alice增发足够数量的X代币进行测试\n</code></pre>\n<p>回到工程根目录，运行<code>yarn init</code>。然后新建<code>test</code>目录，在<code>test</code>目录里创建<code>prepair.js</code>.代码如下：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span>\n    Keypair<span class=\"token punctuation\">,</span>\n    Transaction<span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">LAMPORTS_PER_SOL</span><span class=\"token punctuation\">,</span>\n    Connection<span class=\"token punctuation\">,</span>\n    sendAndConfirmTransaction\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@solana/web3.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span>Token<span class=\"token punctuation\">,</span><span class=\"token constant\">ASSOCIATED_TOKEN_PROGRAM_ID</span><span class=\"token punctuation\">,</span><span class=\"token constant\">TOKEN_PROGRAM_ID</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@solana/spl-token'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> rpcUrl <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:8899 \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Connection</span><span class=\"token punctuation\">(</span>rpcUrl<span class=\"token punctuation\">,</span> <span class=\"token string\">'confirmed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> initSupplyTokenX <span class=\"token operator\">=</span> <span class=\"token number\">100000000</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">prepair</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//创建Alice账号领取空投</span>\n    <span class=\"token keyword\">const</span> alice <span class=\"token operator\">=</span> Keypair<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    signer <span class=\"token operator\">=</span> alice<span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">showWallet</span><span class=\"token punctuation\">(</span>alice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span>  aliceAirdropSignature <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">requestAirdrop</span><span class=\"token punctuation\">(</span>\n        alice<span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">,</span>\n        <span class=\"token constant\">LAMPORTS_PER_SOL</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">confirmTransaction</span><span class=\"token punctuation\">(</span>aliceAirdropSignature<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> lamports <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span>alice<span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alice lamports:\"</span><span class=\"token punctuation\">,</span>lamports<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//发行代币X</span>\n    <span class=\"token keyword\">let</span> tokenX <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Token<span class=\"token punctuation\">.</span><span class=\"token function\">createMint</span><span class=\"token punctuation\">(</span>\n        connection<span class=\"token punctuation\">,</span>\n        alice<span class=\"token punctuation\">,</span>\n        alice<span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n        <span class=\"token constant\">TOKEN_PROGRAM_ID</span>\n    <span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tokenX:\"</span><span class=\"token punctuation\">,</span>tokenX<span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">.</span><span class=\"token function\">toBase58</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//创建Alice的X代币关联账号并且增发代币</span>\n    <span class=\"token keyword\">let</span> alice_x <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">createAssociatedAccout</span><span class=\"token punctuation\">(</span>tokenX<span class=\"token punctuation\">,</span>alice<span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">,</span>alice<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> info <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> tokenX<span class=\"token punctuation\">.</span><span class=\"token function\">getAccountInfo</span><span class=\"token punctuation\">(</span>alice_x<span class=\"token punctuation\">,</span><span class=\"token string\">\"confirmed\"</span><span class=\"token punctuation\">)</span>\n    info<span class=\"token punctuation\">.</span>owner <span class=\"token operator\">=</span> info<span class=\"token punctuation\">.</span>owner<span class=\"token punctuation\">.</span><span class=\"token function\">toBase58</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    info<span class=\"token punctuation\">.</span>mint <span class=\"token operator\">=</span> info<span class=\"token punctuation\">.</span>mint<span class=\"token punctuation\">.</span><span class=\"token function\">toBase58</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    info<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> info<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">.</span><span class=\"token function\">toBase58</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alice_x:\"</span><span class=\"token punctuation\">,</span>info<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//创建tokenY</span>\n    <span class=\"token keyword\">let</span> tokenY <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Token<span class=\"token punctuation\">.</span><span class=\"token function\">createMint</span><span class=\"token punctuation\">(</span>\n        connection<span class=\"token punctuation\">,</span>\n        alice<span class=\"token punctuation\">,</span>\n        alice<span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n        <span class=\"token constant\">TOKEN_PROGRAM_ID</span>\n    <span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tokenY:\"</span><span class=\"token punctuation\">,</span>tokenY<span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">.</span><span class=\"token function\">toBase58</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//创建alice在tokenY的关联账号</span>\n    <span class=\"token keyword\">let</span> alice_y <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">createAssociatedAccout</span><span class=\"token punctuation\">(</span>tokenY<span class=\"token punctuation\">,</span>alice<span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">,</span>alice<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alice_y_publicKey:\"</span><span class=\"token punctuation\">,</span>alice_y<span class=\"token punctuation\">.</span><span class=\"token function\">toBase58</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//创建关联地址并增发代币</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createAssociatedAccout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tokenObj<span class=\"token punctuation\">,</span>owner<span class=\"token punctuation\">,</span>signer<span class=\"token punctuation\">,</span>isMint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//第一步，计算关联地址</span>\n    <span class=\"token keyword\">let</span> associatedAddress <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getAssociatedTokenAddress</span><span class=\"token punctuation\">(</span>\n        <span class=\"token constant\">TOKEN_PROGRAM_ID</span><span class=\"token punctuation\">,</span>\n        tokenObj<span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">,</span>\n        owner\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//第二步 创建关联账号（此时ASSOCIATED_TOKEN_PROGRAM会自动进行初始化）</span>\n    <span class=\"token keyword\">let</span> transaction <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Transaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    transaction<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>\n        Token<span class=\"token punctuation\">.</span><span class=\"token function\">createAssociatedTokenAccountInstruction</span><span class=\"token punctuation\">(</span>\n          <span class=\"token constant\">ASSOCIATED_TOKEN_PROGRAM_ID</span><span class=\"token punctuation\">,</span>\n          <span class=\"token constant\">TOKEN_PROGRAM_ID</span><span class=\"token punctuation\">,</span>\n          tokenObj<span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">,</span>\n          associatedAddress<span class=\"token punctuation\">,</span>\n          owner<span class=\"token punctuation\">,</span>\n          signer<span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 第三步 增发代币</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isMint<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        transaction<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>\n            Token<span class=\"token punctuation\">.</span><span class=\"token function\">createMintToInstruction</span><span class=\"token punctuation\">(</span>\n              <span class=\"token constant\">TOKEN_PROGRAM_ID</span><span class=\"token punctuation\">,</span>\n              tokenObj<span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">,</span>\n              associatedAddress<span class=\"token punctuation\">,</span>  <span class=\"token comment\">//注意这里是给关联地址增发</span>\n              owner<span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n              initSupplyTokenX<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 第四步 发送交易</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">sendAndConfirmTransaction</span><span class=\"token punctuation\">(</span>\n        connection<span class=\"token punctuation\">,</span>\n        transaction<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span>signer<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> associatedAddress\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getAssociatedTokenAddress</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">programId<span class=\"token punctuation\">,</span>mint<span class=\"token punctuation\">,</span>account</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> newAccount <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Token<span class=\"token punctuation\">.</span><span class=\"token function\">getAssociatedTokenAddress</span><span class=\"token punctuation\">(</span>\n        <span class=\"token constant\">ASSOCIATED_TOKEN_PROGRAM_ID</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//关联地址固定公钥</span>\n        programId<span class=\"token punctuation\">,</span>      <span class=\"token comment\">// 代币合约公钥</span>\n        mint<span class=\"token punctuation\">,</span>            <span class=\"token comment\">//mint(代币)标识/公钥</span>\n        account<span class=\"token punctuation\">,</span>            <span class=\"token comment\">//玩家主账号 公钥</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> newAccount\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">showWallet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">wallet</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>wallet<span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">.</span><span class=\"token function\">toBase58</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>wallet<span class=\"token punctuation\">.</span>secretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hex\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">prepair</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"over\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>回到项目根目录，然后我们运行下面程序安装依赖：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> @solana/web3.js\n<span class=\"token function\">yarn</span> <span class=\"token function\">add</span> @solana/spl-token\n</code></pre>\n<p>最后我们运行<code>node test/prepair.js</code>，会得到类似如下输出：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token punctuation\">[</span>\n  <span class=\"token string\">'A6Bu3xfaKFf9EoKrpviCF3K5szNcZLGJkLxPyAUqShJp'</span>,\n  <span class=\"token string\">'49372f691baa9cb4f6d5f485e43b685adb26055cdc545728bd2ff808d0bf92ea870d687c5de0f7eac13cd6050b1c78e23345575ca4b2fc241d65705983015eb1'</span>\n<span class=\"token punctuation\">]</span>\nAlice lamports: <span class=\"token number\">1000000000</span>\ntokenX: FMYttGRGuYCrgqCRZLhLoUESqo9Sfe87DKdH7JLZGB6G\nalice_x: <span class=\"token punctuation\">{<!-- --></span>\n  mint: <span class=\"token string\">'FMYttGRGuYCrgqCRZLhLoUESqo9Sfe87DKdH7JLZGB6G'</span>,\n  owner: <span class=\"token string\">'A6Bu3xfaKFf9EoKrpviCF3K5szNcZLGJkLxPyAUqShJp'</span>,\n  amount: <span class=\"token operator\">&lt;</span>BN: 5f5e10<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>&gt;</span>,\n  delegateOption: <span class=\"token number\">0</span>,\n  delegate: null,\n  state: <span class=\"token number\">1</span>,\n  isNativeOption: <span class=\"token number\">0</span>,\n  isNative: false,\n  delegatedAmount: <span class=\"token operator\">&lt;</span>BN: <span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>&gt;</span>,\n  closeAuthorityOption: <span class=\"token number\">0</span>,\n  closeAuthority: null,\n  address: <span class=\"token string\">'6fBN3uzsDKfG2nDLnpP4NknMocQX85AB1vqCWfXbW9os'</span>,\n  isInitialized: true,\n  isFrozen: false,\n  rentExemptReserve: null\n<span class=\"token punctuation\">}</span>\ntokenY: 4URCvC1YZv5mPDekabWccaAofnoMZwiDofEfwt5E4jdU\nalice_y_publicKey: Bu8Heft6Lsih32Z6yaVFQqVndDtzAmJdMS8friSLb59w\n</code></pre>\n<p>上面的结果中，最上面的数组为Alice的地址和私钥，接下来是它的SQL余额（用来显示我们账号创建成功，空投了SQL来支付手续费）。</p>\n<p>接下来是我们发行的代币X的地址。</p>\n<p>最后alice_x为我们的Alice在代币X上的关联地址在代币合约中的相关信息。</p>\n<p>从上面的结果可以看出，Alice的地址为 <code>A6Bu3xfaKFf9EoKrpviCF3K5szNcZLGJkLxPyAUqShJp</code>，所以它的X代币的账号 alice_x 的 <code>owner</code>也是<code>A6Bu3xfaKFf9EoKrpviCF3K5szNcZLGJkLxPyAUqShJp</code>。Alice_x的<code>mint</code>（代币类型）正好是我们发行的代币X的地址：<code>FMYttGRGuYCrgqCRZLhLoUESqo9Sfe87DKdH7JLZGB6G</code>。</p>\n<p>上面的结果还可以看出，Alice_x的地址为<code>6fBN3uzsDKfG2nDLnpP4NknMocQX85AB1vqCWfXbW9os</code>，其余额为:<code>0x5f5e100</code>，换算成十进制刚好为<code>100000000</code>，同我们的<code>initSupplyTokenX</code>相吻合。Alice_x的其它属性可以自己看一下猜出来。</p>\n<p>上面的输出信息不要清除了，我们接下来还要用到，如果一不小心删除了，重新运行一下程序会得到一个新的输出。</p>\n<h2><a id=\"62_697\"></a>6.2、测试托管合约初始化</h2>\n<p>在我们的托管合约的第一部分中，Alice初始化一个托管账号其实包含如下几个顺序操作：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token number\">1</span>、创建一个被token合约拥有的空的账号\n<span class=\"token number\">2</span>、将这个空的账号初始化为Alice的X代币账号（临时账号）\n<span class=\"token number\">3</span>、Alice将她的代币X从主账号转移到临时账号\n<span class=\"token number\">4</span>、创建一个被托管合约拥有的空账号\n<span class=\"token number\">5</span>、将这个空账号初始化为交易状态账号并且将Alice的临时X代币账号转移到PDA（程序派生账号）。\n</code></pre>\n<p>ps：合约部署时的地址其实在编译后是可以拿到的，使用<code>solana address -k .../....so</code>就可以获取了。</p>\n<p>在Solana中，一个交易里可以包含多个指令（prepair.js中已经有示例）并执行。</p>\n<p>注：前两步可以利用Solana的SDK合并执行，而不是全部用一个交易执行。</p>\n<p>在<code>test</code>目录下创建<code>init.js</code>，代码如下：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span>\n    Keypair<span class=\"token punctuation\">,</span>\n    PublicKey<span class=\"token punctuation\">,</span>\n    Transaction<span class=\"token punctuation\">,</span>\n    TransactionInstruction<span class=\"token punctuation\">,</span>\n    SystemProgram<span class=\"token punctuation\">,</span>\n    Connection<span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">SYSVAR_RENT_PUBKEY</span><span class=\"token punctuation\">,</span>\n    sendAndConfirmTransaction\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@solana/web3.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span>Token<span class=\"token punctuation\">,</span><span class=\"token constant\">TOKEN_PROGRAM_ID</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@solana/spl-token'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> BufferLayout <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"buffer-layout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">BN</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bn.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> rpcUrl <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:8899 \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Connection</span><span class=\"token punctuation\">(</span>rpcUrl<span class=\"token punctuation\">,</span> <span class=\"token string\">'confirmed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//我们的托管程序地址</span>\n<span class=\"token keyword\">const</span> escrowProgramId <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PublicKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HEptwBGd4ShMYP6vNCE6vsDmuG3bGzQCcRPHfapvNeys\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//从私钥中恢复alice的钱包</span>\n<span class=\"token keyword\">const</span> alice_privateKey <span class=\"token operator\">=</span> <span class=\"token string\">\"49372f691baa9cb4f6d5f485e43b685adb26055cdc545728bd2ff808d0bf92ea870d687c5de0f7eac13cd6050b1c78e23345575ca4b2fc241d65705983015eb1\"</span>\n<span class=\"token keyword\">const</span> alice <span class=\"token operator\">=</span> Keypair<span class=\"token punctuation\">.</span><span class=\"token function\">fromSecretKey</span><span class=\"token punctuation\">(</span>Uint8Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>alice_privateKey<span class=\"token punctuation\">,</span> <span class=\"token string\">'hex'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//从代币X地址中恢复代币X对象</span>\n<span class=\"token keyword\">const</span> token_x <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PublicKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FMYttGRGuYCrgqCRZLhLoUESqo9Sfe87DKdH7JLZGB6G\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> tokenX <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Token</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">,</span>token_x<span class=\"token punctuation\">,</span><span class=\"token constant\">TOKEN_PROGRAM_ID</span><span class=\"token punctuation\">,</span>alice<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//Alice在代币X的关联账号（公钥）</span>\n<span class=\"token keyword\">const</span> alice_x <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PublicKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"6fBN3uzsDKfG2nDLnpP4NknMocQX85AB1vqCWfXbW9os\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> alice_y <span class=\"token operator\">=</span> <span class=\"token string\">\"Bu8Heft6Lsih32Z6yaVFQqVndDtzAmJdMS8friSLb59w\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">publicKey</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">property</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> BufferLayout<span class=\"token punctuation\">.</span><span class=\"token function\">blob</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">uint64</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">property</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> BufferLayout<span class=\"token punctuation\">.</span><span class=\"token function\">blob</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">ESCROW_ACCOUNT_DATA_LAYOUT</span> <span class=\"token operator\">=</span> BufferLayout<span class=\"token punctuation\">.</span><span class=\"token function\">struct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    BufferLayout<span class=\"token punctuation\">.</span><span class=\"token function\">u8</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"isInitialized\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">publicKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"initializerPubkey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">publicKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"initializerTempTokenAccountPubkey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">publicKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"initializerReceivingTokenAccountPubkey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"expectedAmount\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">SWAP_AMOUNT</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//计划交易的X数量</span>\n<span class=\"token keyword\">const</span> expectedAmount <span class=\"token operator\">=</span> <span class=\"token number\">1200</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//期望得到的Y数量</span>\n<span class=\"token keyword\">const</span> Escrow_Size <span class=\"token operator\">=</span> <span class=\"token constant\">ESCROW_ACCOUNT_DATA_LAYOUT</span><span class=\"token punctuation\">.</span>span<span class=\"token punctuation\">;</span> <span class=\"token comment\">//105，托管合约中交易账号数据大小，其实我们在合约state.rs中已经知道大小了</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//创建Alice在X代币的临时账号,这里使用SDK自动帮我们创建了。</span>\n    <span class=\"token keyword\">let</span> temp_account <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> tokenX<span class=\"token punctuation\">.</span><span class=\"token function\">createAccount</span><span class=\"token punctuation\">(</span>alice<span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//转移X代币指令</span>\n    <span class=\"token keyword\">const</span> transaction <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Transaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>\n        Token<span class=\"token punctuation\">.</span><span class=\"token function\">createTransferInstruction</span><span class=\"token punctuation\">(</span>\n          <span class=\"token constant\">TOKEN_PROGRAM_ID</span><span class=\"token punctuation\">,</span>\n          alice_x<span class=\"token punctuation\">,</span>\n          temp_account<span class=\"token punctuation\">,</span>\n          alice<span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          <span class=\"token constant\">SWAP_AMOUNT</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> escrowAccount <span class=\"token operator\">=</span> Keypair<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//产生一个随机公/私钥对</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"escrowAccount:\"</span><span class=\"token punctuation\">,</span>escrowAccount<span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">.</span><span class=\"token function\">toBase58</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//创建托管账号指令</span>\n    <span class=\"token keyword\">const</span> createEscrowAccountIx <span class=\"token operator\">=</span> SystemProgram<span class=\"token punctuation\">.</span><span class=\"token function\">createAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n        space<span class=\"token operator\">:</span> Escrow_Size<span class=\"token punctuation\">,</span>\n        lamports<span class=\"token operator\">:</span> <span class=\"token keyword\">await</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">getMinimumBalanceForRentExemption</span><span class=\"token punctuation\">(</span>Escrow_Size<span class=\"token punctuation\">,</span> <span class=\"token string\">'confirmed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        fromPubkey<span class=\"token operator\">:</span> alice<span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">,</span>\n        newAccountPubkey<span class=\"token operator\">:</span> escrowAccount<span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">,</span>\n        programId<span class=\"token operator\">:</span> escrowProgramId\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    transaction<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>createEscrowAccountIx<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">//初始化托管账号指令</span>\n    <span class=\"token keyword\">const</span> initEscrowIx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TransactionInstruction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n        programId<span class=\"token operator\">:</span> escrowProgramId<span class=\"token punctuation\">,</span>\n        keys<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{<!-- --></span> pubkey<span class=\"token operator\">:</span> alice<span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">,</span> isSigner<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> isWritable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{<!-- --></span> pubkey<span class=\"token operator\">:</span> temp_account<span class=\"token punctuation\">,</span> isSigner<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> isWritable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{<!-- --></span> pubkey<span class=\"token operator\">:</span> alice_y<span class=\"token punctuation\">,</span> isSigner<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> isWritable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{<!-- --></span> pubkey<span class=\"token operator\">:</span> escrowAccount<span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">,</span> isSigner<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> isWritable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{<!-- --></span> pubkey<span class=\"token operator\">:</span> <span class=\"token constant\">SYSVAR_RENT_PUBKEY</span><span class=\"token punctuation\">,</span> isSigner<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> isWritable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{<!-- --></span> pubkey<span class=\"token operator\">:</span> <span class=\"token constant\">TOKEN_PROGRAM_ID</span><span class=\"token punctuation\">,</span> isSigner<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> isWritable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token operator\">:</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>Uint8Array<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BN</span><span class=\"token punctuation\">(</span>expectedAmount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"le\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    transaction<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>initEscrowIx<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//发送交易</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">sendAndConfirmTransaction</span><span class=\"token punctuation\">(</span>\n        connection<span class=\"token punctuation\">,</span>\n        transaction<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span>alice<span class=\"token punctuation\">,</span>escrowAccount<span class=\"token punctuation\">]</span> <span class=\"token comment\">//这里要创建escrowAccount，所以它必须签名</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> encodedEscrowState <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">getAccountInfo</span><span class=\"token punctuation\">(</span>escrowAccount<span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">,</span><span class=\"token string\">'confirmed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> decodedEscrowState <span class=\"token operator\">=</span> <span class=\"token constant\">ESCROW_ACCOUNT_DATA_LAYOUT</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>encodedEscrowState<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> info <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n        isInitialized<span class=\"token operator\">:</span>decodedEscrowState<span class=\"token punctuation\">.</span>isInitialized <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        initializerPubkey<span class=\"token operator\">:</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PublicKey</span><span class=\"token punctuation\">(</span>decodedEscrowState<span class=\"token punctuation\">.</span>initializerPubkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBase58</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        initializerTempTokenAccountPubkey<span class=\"token operator\">:</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PublicKey</span><span class=\"token punctuation\">(</span>decodedEscrowState<span class=\"token punctuation\">.</span>initializerTempTokenAccountPubkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBase58</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        initializerReceivingTokenAccountPubkey<span class=\"token operator\">:</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PublicKey</span><span class=\"token punctuation\">(</span>decodedEscrowState<span class=\"token punctuation\">.</span>initializerReceivingTokenAccountPubkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBase58</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        expectedAmount<span class=\"token operator\">:</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BN</span><span class=\"token punctuation\">(</span>decodedEscrowState<span class=\"token punctuation\">.</span>expectedAmount<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"le\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"EscrowState:\"</span><span class=\"token punctuation\">,</span>info<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"over\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>回到项目根目录，然后我们运行下面程序安装依赖：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> buffer-layout\n<span class=\"token function\">yarn</span> <span class=\"token function\">add</span> bn.js\n</code></pre>\n<p>最后我们运行<code>node test/init.js</code>，会得到类似如下输出：</p>\n<pre><code class=\"prism language-bash\">escrowAccount: 6uNBMA2ixoKpGHdygvN1M1BsQE44tEpSqEcRehxTniKk\nEscrowState: <span class=\"token punctuation\">{<!-- --></span>\n  isInitialized: true,\n  initializerPubkey: <span class=\"token string\">'A6Bu3xfaKFf9EoKrpviCF3K5szNcZLGJkLxPyAUqShJp'</span>,\n  initializerTempTokenAccountPubkey: <span class=\"token string\">'F6cLx73ZA56A6C54YJY4wGqPG9qr6FcZFB3H1sKLtMqq'</span>,\n  initializerReceivingTokenAccountPubkey: <span class=\"token string\">'Bu8Heft6Lsih32Z6yaVFQqVndDtzAmJdMS8friSLb59w'</span>,\n  expectedAmount: <span class=\"token number\">1200</span>\n<span class=\"token punctuation\">}</span>\nover\n</code></pre>\n<p>上面的结果中，<code>initializerPubkey</code> 代表 Alice的账号地址，<code>initializerTempTokenAccountPubkey</code>代表Alice转移代币X到托管合约的地址，<code>initializerReceivingTokenAccountPubkey</code> 代表Alice 接收 代币Y的地址。</p>\n<p>我们可以将上面得到的结果和第一次运行得到的结果相比较一下，可以看到是吻合的。</p>\n<p>到此，我们完成了教学文章中的第一部分的学习，有兴趣的读者可以自行完成接下来第二部分的学习。再次感谢 paulx</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 1, "php": 0, "time": "2021-12-22 13:53:07", "summary": "区块链智能合约开发简要流程区块链是当今市值第的区块链，已经有很多知名生态准备部署在上。相比于类以太坊区块链来讲，上智能合约开发叫存在一定的门槛，因为通常使用系统程序语言进行开发而不是使用特定领域语言例"}