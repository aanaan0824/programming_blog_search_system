{"blogid": "124509468", "writerAge": "码龄1年", "writerBlogNum": "39", "writerCollect": "1071", "writerComment": "1388", "writerFan": "3091", "writerGrade": "5级", "writerIntegral": "3398", "writerName": "在下周周ovo", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124509468.jpg", "writerRankTotal": "5401", "writerRankWeekly": "598", "writerThumb": "1133", "writerVisitNum": "33316", "blog_read_count": "1186", "blog_time": "已于 2022-08-18 18:33:08 修改", "blog_title": "三个问题带你详细了解《函数递归》~【以C++为例】", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><span style=\"color:#511b78;\"><strong>文章目录</strong></span></p>\n<p> </p>\n<p id=\"%F0%9F%9A%80%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%F0%9F%9A%80%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%F0%9F%9A%80%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E5%89%8D%E8%A8%80%EF%BC%9A-toc\" style=\"margin-left:0px;\"><a href=\"#%F0%9F%9A%80%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%F0%9F%9A%80%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%F0%9F%9A%80%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E5%89%8D%E8%A8%80%EF%BC%9A\">🚀🚀🚀<strong>前言：</strong></a></p>\n<p id=\"%F0%9F%9A%80%F0%9F%9A%80%F0%9F%9A%80%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%E3%80%81%E4%BA%86%E8%A7%A3%E5%87%BD%E6%95%B0%E9%80%92%E5%BD%92%EF%BC%88recursion%EF%BC%89-toc\" style=\"margin-left:0px;\"><strong><a href=\"#%F0%9F%9A%80%F0%9F%9A%80%F0%9F%9A%80%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%E3%80%81%E4%BA%86%E8%A7%A3%E5%87%BD%E6%95%B0%E9%80%92%E5%BD%92%EF%BC%88recursion%EF%BC%89\"><span style=\"color:#ff9900;\"><strong>🚀🚀🚀第一部</strong>分、了解函数递归（recursion）</span></a></strong></p>\n<p id=\"%EF%BC%881%EF%BC%89%E7%9B%B4%E6%8E%A5%E9%80%92%E5%BD%92%EF%BC%9A-toc\" style=\"margin-left:40px;\"><strong><a href=\"#%EF%BC%881%EF%BC%89%E7%9B%B4%E6%8E%A5%E9%80%92%E5%BD%92%EF%BC%9A\">（1）直接递归：</a></strong></p>\n<p id=\"%EF%BC%882%EF%BC%89%E9%97%B4%E6%8E%A5%E9%80%92%E5%BD%92%EF%BC%9A-toc\" style=\"margin-left:40px;\"><strong><a href=\"#%EF%BC%882%EF%BC%89%E9%97%B4%E6%8E%A5%E9%80%92%E5%BD%92%EF%BC%9A\">（2）间接递归：</a></strong></p>\n<p id=\"%F0%9F%9A%80%F0%9F%9A%80%F0%9F%9A%80%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86%E5%87%BD%E6%95%B0%E9%80%92%E5%BD%92%E7%9A%84%E4%BD%BF%E7%94%A8-toc\" style=\"margin-left:40px;\"><strong><a href=\"#%F0%9F%9A%80%F0%9F%9A%80%F0%9F%9A%80%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86%E5%87%BD%E6%95%B0%E9%80%92%E5%BD%92%E7%9A%84%E4%BD%BF%E7%94%A8\"><span style=\"color:#ff9900;\">🚀🚀🚀第二部分函数递归的使用</span></a></strong></p>\n<p id=\"%F0%9F%9A%80%F0%9F%9A%801%E3%80%81%E9%80%92%E5%BD%92%E9%97%AE%E9%A2%98%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%BF%85%E8%A6%81%E6%9D%A1%E4%BB%B6-toc\" style=\"margin-left:80px;\"><a href=\"#%F0%9F%9A%80%F0%9F%9A%801%E3%80%81%E9%80%92%E5%BD%92%E9%97%AE%E9%A2%98%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%BF%85%E8%A6%81%E6%9D%A1%E4%BB%B6\">🚀🚀<strong>1、递归问题的两个必要条件</strong></a></p>\n<p id=\"%F0%9F%9A%80%F0%9F%9A%802%E3%80%81%E9%80%92%E5%BD%92%E4%B8%AD%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%88%E6%A0%88%E6%BA%A2%E5%87%BA%E9%94%99%E8%AF%AF%EF%BC%89-toc\" style=\"margin-left:80px;\"><a href=\"#%F0%9F%9A%80%F0%9F%9A%802%E3%80%81%E9%80%92%E5%BD%92%E4%B8%AD%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%88%E6%A0%88%E6%BA%A2%E5%87%BA%E9%94%99%E8%AF%AF%EF%BC%89\">🚀🚀<strong>2、递归中的注意事项<span style=\"color:#be191c;\">（栈溢出错误）</span></strong></a></p>\n<p id=\"%F0%9F%9A%80%F0%9F%9A%80%F0%9F%9A%80%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86%E3%80%81%E5%AE%9E%E6%88%98%E6%B7%B1%E5%85%A5%E8%AE%A4%E8%AF%86%E9%80%92%E5%BD%92-toc\" style=\"margin-left:0px;\"><a href=\"#%F0%9F%9A%80%F0%9F%9A%80%F0%9F%9A%80%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86%E3%80%81%E5%AE%9E%E6%88%98%E6%B7%B1%E5%85%A5%E8%AE%A4%E8%AF%86%E9%80%92%E5%BD%92\">🚀🚀🚀<strong><span style=\"color:#ff9900;\">第三部分、实战深入认识递归</span></strong></a></p>\n<p id=\"%F0%9F%9A%80%F0%9F%9A%80%E9%A2%98%E7%9B%AE%E4%B8%80%EF%BC%9A%E5%88%A9%E7%94%A8%E9%80%92%E5%BD%92%E6%B1%821%E5%88%B0n%E7%9A%84%E5%92%8C-toc\" style=\"margin-left:40px;\"><a href=\"#%F0%9F%9A%80%F0%9F%9A%80%E9%A2%98%E7%9B%AE%E4%B8%80%EF%BC%9A%E5%88%A9%E7%94%A8%E9%80%92%E5%BD%92%E6%B1%821%E5%88%B0n%E7%9A%84%E5%92%8C\">🚀🚀<strong><span style=\"color:#be191c;\">题目一：利用递归求1到n的和</span></strong></a></p>\n<p id=\"%E2%9C%A8%E2%9C%A8%E9%A2%98%E7%9B%AE%E8%A6%81%E6%B1%82%3A-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%9C%A8%E2%9C%A8%E9%A2%98%E7%9B%AE%E8%A6%81%E6%B1%82%3A\">✨✨题目要求:</a></p>\n<p id=\"%E2%9C%A8%E2%9C%A8%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%9C%A8%E2%9C%A8%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90%EF%BC%9A\">✨✨题目解析：</a></p>\n<p id=\"%E2%9C%A8%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%9C%A8%E7%AD%94%E6%A1%88%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%9C%A8%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%9C%A8%E7%AD%94%E6%A1%88%EF%BC%9A\">✨​​​​​​​✨答案：</a></p>\n<p id=\"%F0%9F%9A%80%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%F0%9F%9A%80%E9%A2%98%E7%9B%AE%E4%BA%8C%EF%BC%9A%E5%88%A9%E7%94%A8%E9%80%92%E5%BD%92%E6%B1%82n%E7%9A%84%E9%98%B6%E4%B9%98-toc\" style=\"margin-left:40px;\"><a href=\"#%F0%9F%9A%80%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%F0%9F%9A%80%E9%A2%98%E7%9B%AE%E4%BA%8C%EF%BC%9A%E5%88%A9%E7%94%A8%E9%80%92%E5%BD%92%E6%B1%82n%E7%9A%84%E9%98%B6%E4%B9%98\">🚀​​​​​​​🚀<strong><span style=\"color:#be191c;\">题目二：利用递归求n的阶乘</span></strong></a></p>\n<p id=\"%E2%9C%A8%E2%9C%A8%E9%A2%98%E7%9B%AE%E8%A6%81%E6%B1%82%3A-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%9C%A8%E2%9C%A8%E9%A2%98%E7%9B%AE%E8%A6%81%E6%B1%82%3A\">✨✨题目要求:</a></p>\n<p id=\"%E2%9C%A8%E2%9C%A8%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%9C%A8%E2%9C%A8%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90%EF%BC%9A\">✨✨题目解析：</a></p>\n<p id=\"%E2%9C%A8%E2%9C%A8%E7%AD%94%E6%A1%88%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%9C%A8%E2%9C%A8%E7%AD%94%E6%A1%88%EF%BC%9A\">✨✨答案：</a></p>\n<p id=\"%F0%9F%9A%80%F0%9F%9A%80%E9%A2%98%E7%9B%AE%E4%B8%89%EF%BC%9A%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97-toc\" style=\"margin-left:40px;\"><a href=\"#%F0%9F%9A%80%F0%9F%9A%80%E9%A2%98%E7%9B%AE%E4%B8%89%EF%BC%9A%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97\">🚀🚀<strong><span style=\"color:#be191c;\">题目三：斐波那契数列</span></strong></a></p>\n<p id=\"%E2%9C%A8%E2%9C%A8%E9%A2%98%E7%9B%AE%E8%A6%81%E6%B1%82%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%9C%A8%E2%9C%A8%E9%A2%98%E7%9B%AE%E8%A6%81%E6%B1%82%EF%BC%9A\">✨✨题目要求：</a></p>\n<p id=\"%C2%A0%E2%9C%A8%E2%9C%A8%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E2%9C%A8%E2%9C%A8%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90%EF%BC%9A\"> ✨✨题目解析：</a></p>\n<p id=\"%E2%9C%A8%E2%9C%A8%E7%AD%94%E6%A1%88%EF%BC%9A%C2%A0-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%9C%A8%E2%9C%A8%E7%AD%94%E6%A1%88%EF%BC%9A%C2%A0\">✨✨答案： </a></p>\n<p id=\"%E7%BB%93%E8%AF%AD%EF%BC%9A-toc\" style=\"margin-left:0px;\">🚀​​​​​​​🚀​​​​​​​🚀<a href=\"#%E7%BB%93%E8%AF%AD%EF%BC%9A\">结语：</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h1 id=\"%F0%9F%9A%80%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%F0%9F%9A%80%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%F0%9F%9A%80%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E5%89%8D%E8%A8%80%EF%BC%9A\">🚀​​​​​​​🚀​​​​​​​🚀​​​​​​​<strong><span style=\"color:#ff9900;\">前言：</span></strong></h1>\n<blockquote>\n<p><strong><span style=\"color:#ff9900;\">本篇博客主要向各位小伙伴们介绍</span><span style=\"color:#0d0016;\">&lt;函数递归&gt;</span><span style=\"color:#ff9900;\">✨✨，带各位掌握函数基础，希望各位小伙伴们能够在这里收获到更多知识！让我们一起学习！一起进步💪💪💪</span></strong></p>\n<p><strong><span style=\"color:#ff9900;\">作者希望：由于博主水平限制，博客难免会有错误和不准之处，我也非常希望各位小伙伴能够在留言区指出。让我们一起共勉。</span></strong></p>\n<p><span style=\"color:#fe2c24;\"><span style=\"background-color:#ffd900;\">✅</span><strong><span style=\"background-color:#ffd900;\">推荐一个我正在用的好用刷题网站</span></strong>👉</span><strong><span style=\"color:#fe2c24;\"><span style=\"background-color:#ffd900;\"><a class=\"link-info\" href=\"https://www.nowcoder.com/link/pc_csdncpt_zxzz_c2\" title=\"由此进入免费的刷题网站\">由此进入免费的刷题网站</a></span></span>​​​​​​​</strong></p>\n</blockquote>\n<h1 id=\"%F0%9F%9A%80%F0%9F%9A%80%F0%9F%9A%80%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%E3%80%81%E4%BA%86%E8%A7%A3%E5%87%BD%E6%95%B0%E9%80%92%E5%BD%92%EF%BC%88recursion%EF%BC%89\">🚀🚀🚀<span style=\"color:#4da8ee;\"><strong>第一部分、了解函数递归（recursion）</strong></span></h1>\n<p></p>\n<blockquote>\n<p><span style=\"color:#1c7331;\"><strong>首先让我们了解一下什么是函数递归：一个函数在执行过程中对自己的调用就称为函数的递归调用 ，任意的一个递归都可以变为循环而并不是所有循环都可以变为递归。</strong></span></p>\n<p><span style=\"color:#1c7331;\"><strong>简而言之就是</strong></span><span style=\"color:#be191c;\"><strong>：递归就是函数自己调用自己，递归递归，有递就要有归，只递不归就会导致程序崩溃，为了避免崩溃，函数中一定有包括条件语句，在合适的时候终止递归（这也就是找出出口的过程）</strong></span></p>\n<p><span style=\"color:#1c7331;\"><strong>              直接递归：函数在本函数内直接调用函数称为直接递归</strong></span></p>\n<p><strong><span style=\"color:#1c7331;\">              间接递归：如果某些函数调用其他函数，而其他函数又调用了本函数，这一过程称为间接递归 。（似乎有点难懂~~ ）</span><span style=\"color:#ff9900;\">                  </span></strong></p>\n<p>                                                       <img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Zyo5LiL5ZGo5ZGob3Zv,size_17,color_FFFFFF,t_70,g_se,x_16\" height=\"185\" src=\"..\\..\\static\\image\\516f8190b898422b8029382a7ec64ef9.png\" width=\"185\"/></p>\n</blockquote>\n<p><strong>下面看图了解</strong>：<img alt=\"fab104483ead4673aed60cba5edcdaa2.png\" src=\"..\\..\\static\\image\\fab104483ead4673aed60cba5edcdaa2.png\"/></p>\n<h2 id=\"%EF%BC%881%EF%BC%89%E7%9B%B4%E6%8E%A5%E9%80%92%E5%BD%92%EF%BC%9A\"><span style=\"color:#4da8ee;\">（1）直接递归：</span></h2>\n<blockquote>\n<p><strong>函数a（）中调用函数a（），直接递归</strong></p>\n</blockquote>\n<pre><code class=\"language-cpp\">/*直接递归*/\nvoid a()\n{\n    …………\n\n    a()；     /*函数a（）中调用函数a（），直接递归*/\n\n    …………\n}</code></pre>\n<h2 id=\"%EF%BC%882%EF%BC%89%E9%97%B4%E6%8E%A5%E9%80%92%E5%BD%92%EF%BC%9A\"><span style=\"color:#4da8ee;\">（2）间接递归：</span></h2>\n<blockquote>\n<p><strong>函数a（）中调用函数 b（），而函数b（）中又要调用函数a（）这叫做间接递归</strong></p>\n</blockquote>\n<pre><code class=\"language-cpp\">/*间接递归\nvoid a()\n{\n    …………\n\n    b();   /*函数a（）中调用函数 b（）*/\n    …………\nvoid b()\n{\n    …………\n\n    a();   /*函数b（）中又要调用函数a（）这叫做间接递归*/\n\n    …………\n}</code></pre>\n<h2 id=\"%F0%9F%9A%80%F0%9F%9A%80%F0%9F%9A%80%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86%E5%87%BD%E6%95%B0%E9%80%92%E5%BD%92%E7%9A%84%E4%BD%BF%E7%94%A8\"><span style=\"color:#4da8ee;\">🚀🚀🚀第二部分函数递归的使用</span></h2>\n<h3 id=\"%F0%9F%9A%80%F0%9F%9A%801%E3%80%81%E9%80%92%E5%BD%92%E9%97%AE%E9%A2%98%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%BF%85%E8%A6%81%E6%9D%A1%E4%BB%B6\"><span style=\"color:#4da8ee;\"><strong>🚀🚀1、递归问题的两个必要条件</strong></span></h3>\n<blockquote>\n<p>（1）边界条件：确定递归到何时终止，也称为递归出口。<br/> （2）递归模式：大问题是如何分解为小问题的，也称为递归体。递归函数只有具备了这两个<span style=\"color:#4da8ee;\">要素，才能在有限次计算后得出结果</span></p>\n</blockquote>\n<h3 id=\"%F0%9F%9A%80%F0%9F%9A%802%E3%80%81%E9%80%92%E5%BD%92%E4%B8%AD%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%88%E6%A0%88%E6%BA%A2%E5%87%BA%E9%94%99%E8%AF%AF%EF%BC%89\"><span style=\"color:#4da8ee;\">🚀🚀2、递归中的注意事项（栈溢出错误）</span></h3>\n<ul><li><strong><span style=\"color:#be191c;\">栈溢出错误</span></strong></li></ul>\n<blockquote>\n<p>在程序运行的时候，调用函数是有代价的，那就是要<span style=\"color:#ff9900;\"><strong>占用一片叫栈（stack）的内存空间，</strong></span>当调用函数时，都必须要放一些数据到栈中，当函数运行结束时这些数据就会从栈中被取出，可想而知如果调用了很多函数都不返回，栈就被塞满了新数据就没有地方放了（这种就叫作栈溢出错误），对程序运行而言，这是致命的错误，因此程序就会被强行终止（报错）</p>\n<p>当然有解决方案了：<strong><span style=\"color:#ff9900;\">那就是人为设置调用的次数（深度），尽量保证程序不会崩溃</span></strong>🤔🤔🤔</p>\n</blockquote>\n<hr/>\n<h1 id=\"%F0%9F%9A%80%F0%9F%9A%80%F0%9F%9A%80%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86%E3%80%81%E5%AE%9E%E6%88%98%E6%B7%B1%E5%85%A5%E8%AE%A4%E8%AF%86%E9%80%92%E5%BD%92\"><span style=\"color:#4da8ee;\">🚀🚀🚀第三部分、实战深入认识递归</span></h1>\n<blockquote>\n<p> 解递归问题的的步骤模板：</p>\n<p>1、<strong>找关系</strong>(因为能写成递归的一般是有一定规律)</p>\n<p>2、<strong>找出口</strong></p>\n</blockquote>\n<h2 id=\"%F0%9F%9A%80%F0%9F%9A%80%E9%A2%98%E7%9B%AE%E4%B8%80%EF%BC%9A%E5%88%A9%E7%94%A8%E9%80%92%E5%BD%92%E6%B1%821%E5%88%B0n%E7%9A%84%E5%92%8C\"><span style=\"color:#4da8ee;\">🚀🚀题目一：利用递归求1到n的和</span></h2>\n<h3 id=\"%E2%9C%A8%E2%9C%A8%E9%A2%98%E7%9B%AE%E8%A6%81%E6%B1%82%3A\">✨✨<span style=\"color:#be191c;\">题目要求:</span></h3>\n<blockquote>\n<p><strong>利用递归求1+2+3+…n的和</strong></p>\n</blockquote>\n<h3 id=\"%E2%9C%A8%E2%9C%A8%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90%EF%BC%9A\">✨✨<span style=\"color:#be191c;\">题目解析：</span></h3>\n<blockquote>\n<p>看到这类题目我们第一想到的就是用while循环或者用for循环轻易解决，可要用递归该怎么办呢？😭</p>\n<p>1、<strong>找关系</strong>：1--&gt; 2--&gt; 3 --&gt;4 --&gt;5 ……n  我们定义一个函数sum()来表示它的前n项和,例如：（sum(2) = 1+2，sum(6) = 1+2+……+6),     我们可以发现以下的规律：</p>\n<p>-----&gt;&gt;sum(n) = sum(n-1) + n</p>\n<p>2、<strong>找出口</strong>：因为无论用户输入n最小一定是加到1，故出口我们就选择1；</p>\n<p>-----&gt;&gt;sum(1) = 1</p>\n</blockquote>\n<h3 id=\"%E2%9C%A8%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%9C%A8%E7%AD%94%E6%A1%88%EF%BC%9A\">✨​​​​​​​✨<span style=\"color:#be191c;\"><strong>答案：</strong></span></h3>\n<blockquote>\n<p><img alt=\"\" height=\"692\" src=\"..\\..\\static\\image\\e36d060184de43ba9c49055eb70f8167.png\" width=\"1061\"/></p>\n<p></p>\n</blockquote>\n<hr/>\n<h2 id=\"%F0%9F%9A%80%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%F0%9F%9A%80%E9%A2%98%E7%9B%AE%E4%BA%8C%EF%BC%9A%E5%88%A9%E7%94%A8%E9%80%92%E5%BD%92%E6%B1%82n%E7%9A%84%E9%98%B6%E4%B9%98\"><span style=\"color:#4da8ee;\">🚀​​​​​​​🚀<strong>题目二：利用递归求n的阶乘</strong></span></h2>\n<h3><span style=\"color:#be191c;\">✨✨题目要求:</span></h3>\n<blockquote>\n<p><strong>利用递归的方法求n！</strong></p>\n</blockquote>\n<h3>✨<span style=\"color:#be191c;\"><strong>✨题目解析：</strong></span></h3>\n<blockquote>\n<p>找关系：1！，2！，……n! 有什么规律呢？我们先假设函数f（n）= n！例如：（f（2）= 2！）</p>\n<p>1、<strong>找关系：</strong></p>\n<p>-----&gt;&gt;f（n）= f（n -1）* n</p>\n<p>2、<strong>找出口：</strong>求n！就要求（n-1）！而求（n-1）！又要求（n-2）！，一直到最后变成了求0！的问题，而零的阶乘等于1故出口就找到了🥳🥳🥳</p>\n<p>-----&gt;&gt;f(0) = 1</p>\n</blockquote>\n<h3 id=\"%E2%9C%A8%E2%9C%A8%E7%AD%94%E6%A1%88%EF%BC%9A\">✨<span style=\"color:#be191c;\">✨答案：</span></h3>\n<blockquote>\n<p><img alt=\"\" height=\"573\" src=\"..\\..\\static\\image\\15f73e2005cc4071b86f7e4baeac5a49.png\" width=\"650\"/></p>\n</blockquote>\n<p>  </p>\n<hr/>\n<h2 id=\"%F0%9F%9A%80%F0%9F%9A%80%E9%A2%98%E7%9B%AE%E4%B8%89%EF%BC%9A%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97\">🚀<span style=\"color:#4da8ee;\">🚀题目三：斐波那契数列</span></h2>\n<h3 id=\"%E2%9C%A8%E2%9C%A8%E9%A2%98%E7%9B%AE%E8%A6%81%E6%B1%82%EF%BC%9A\">✨<span style=\"color:#be191c;\">✨题目要求：</span></h3>\n<blockquote>\n<p><strong>斐波那契数列：1 , 1, 2, 3, 5 , 8, 13 ，21……</strong></p>\n<p><strong>用递归法编写一个函数要求，输入n （数列中的第n项），求出n项 在斐波那契数列中对应的数。例如（输入3对应斐波那契数列中的第三项也就是2）</strong></p>\n</blockquote>\n<h3 id=\"%C2%A0%E2%9C%A8%E2%9C%A8%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90%EF%BC%9A\"> ✨✨<span style=\"color:#be191c;\">题目解析：</span></h3>\n<blockquote>\n<p>首先找斐波那契数列关系：这个数列从第3项开始，每一项都等于前两项之和，我们先假设一个函数f（n）=（n项对应的数）例如 （f（1） = 1，f（2） = 1，f（6） = 8）</p>\n<p>1、<strong>找关系：</strong></p>\n<p>--------&gt;&gt;f（n）= f（n-1）+f（n -2）</p>\n<p>2、<strong>找出口</strong>：这个题目的出口两个：因为f（n）是由两个数来确定的，如果只有一个出口那么f（n）就无法确定了,（例如2是由 1和1共同确定的）</p>\n<p>出口一-------------&gt;&gt;f(1) = 1</p>\n<p>出口二-------------&gt;&gt;f(2) = 1</p>\n</blockquote>\n<h3 id=\"%E2%9C%A8%E2%9C%A8%E7%AD%94%E6%A1%88%EF%BC%9A%C2%A0\">✨<span style=\"color:#be191c;\">✨答案： </span></h3>\n<blockquote>\n<p><img alt=\"\" height=\"666\" src=\"..\\..\\static\\image\\fe71f96d3dfe40a9aa9c07b1e1f62e1e.png\" width=\"950\"/></p>\n<p></p>\n</blockquote>\n<h1 id=\"%E7%BB%93%E8%AF%AD%EF%BC%9A\">🚀​​​​​​​🚀​​​​​​​🚀<span style=\"color:#ff9900;\">结语：</span></h1>\n<blockquote>\n<p>🚀​​​​​​​🚀​​​​​​​🚀<strong><span style=\"color:#ff9900;\">感谢各位友友能够看到这里</span></strong>🥳​​​​​​​🥳​​​​​​​🥳<strong><span style=\"color:#ff9900;\">：</span></strong></p>\n<p></p>\n<p><strong><span style=\"color:#ff9900;\">提醒友友们一句：看懂了不是懂，一定要自己实际操作哇，这样才能更好的理解和吸收。<br/> 最后来一句：一个人可以在任何他怀有无限热忱的事情上成功，让我们一起进步吧！！</span></strong></p>\n<p></p>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Zyo5LiL5ZGo5ZGob3Zv,size_20,color_FFFFFF,t_70,g_se,x_16\" src=\"..\\..\\static\\image\\6bf7d9844f504b88bbe406c6d17f4114.png\"/></p>\n</blockquote>\n<p></p>\n</div>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-18 18:33:08", "summary": "文章目录前言：第一部分、了解函数递归直接递归：间接递归：第二部分函数递归的使用、递归问题的两个必要条件、递归中的注意事项栈溢出错误第三部分、实战深入认识递归题目一：利用递归求到的和题目要求题目解析：答"}