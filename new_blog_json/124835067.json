{"blogid": "124835067", "writerAge": "码龄8年", "writerBlogNum": "335", "writerCollect": "10530", "writerComment": "1087", "writerFan": "28194", "writerGrade": "7级", "writerIntegral": "16039", "writerName": "恬静的小魔龙", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124835067.jpg", "writerRankTotal": "566", "writerRankWeekly": "1921", "writerThumb": "2587", "writerVisitNum": "1871804", "blog_read_count": "1033", "blog_time": "于 2022-08-12 10:33:26 发布", "blog_title": "【Unity3D热更新】Unity3D 零成本、高性能的C#的热更新框架：HybridCLR", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>推荐阅读</p>\n<ul><li><a href=\"https://blog.csdn.net/q764424567/\">CSDN主页</a></li><li><a href=\"https://github.com/764424567\">GitHub开源地址</a></li><li><a href=\"https://github.com/764424567/Unity-plugin\">Unity3D插件分享</a></li><li><a href=\"https://www.jianshu.com/u/6475c7b88cd3\">简书地址</a></li><li><a href=\"https://www.qq764424567.top/\">我的个人博客</a></li><li><a href=\"https://jq.qq.com/?_wv=1027&amp;k=5sQDw5DN\">QQ群：1040082875</a></li></ul>\n</blockquote>\n<p>大家好，我是佛系工程师<font color=\"red\">☆恬静的小魔龙☆</font>，不定时更新Unity开发技巧，觉得有用记得一键三连哦。</p>\n<h2><a id=\"_11\"></a>一、前言</h2>\n<p>相信只要做过热更新的小伙伴，都被热更新搞过心态吧。</p>\n<p>我有一个小伙伴，本来是面向Unity做可视化开发，结果去做热更新，直接面对代码开发，非常难受。</p>\n<p>首先，来介绍一下什么是热更新、热更新的优点、热更新的解决方案，最后再引出这篇文章的主角HybridCLR C#热更新方案。</p>\n<p>想要省流的小伙伴可以直接跳到第三节：C#热更新方案HybridCLR的使用。</p>\n<h3><a id=\"11_20\"></a>1-1、什么是热更新</h3>\n<p>热更新就是游戏或软件更新的时候，不用再重新下载安装包进行安装。</p>\n<p>而是在启动应用程序的时候，在内部进行资源或代码的更新。</p>\n<h3><a id=\"12_25\"></a>1-2、热更新的优点</h3>\n<p>1、可以迅速修复Bug，避免用户再去重新下载安装包，在游戏或软件内部就更新BUG<br/> 2、减少安装包的体积，将资源上传到服务器，在运行时动态下载剩余资源<br/> 3、迅速进行游戏更新，可以不用再上架应用商店，直接对游戏或软件进行更新</p>\n<h3><a id=\"13_30\"></a>1-3、热更新的基本流程</h3>\n<p><strong>开发端：</strong></p>\n<p>1、开发端更新了游戏或软件内容，比如更新了脚本、替换了资源<br/> 2、将需要更新的代码或资源，打包成AssetBundle放到服务器<br/> 3、在服务器上，修改记录版本号的文件<br/> 4、修改服务器上的对比文件</p>\n<p><strong>客户端：</strong></p>\n<p>1、运行程序，进行版本号的比较，版本号不同则进行下面操作<br/> 2、下载服务器上的对比文件，类似于目录，确定下载列表<br/> 3、根据下载列表，下载所需的资源<br/> 4、解压资源，用最新的对比文件覆盖本地的对比文件</p>\n<h3><a id=\"14_46\"></a>1-4、热更新的解决方案</h3>\n<h4><a id=\"141Lua_47\"></a>1-4-1、基于Lua的热更新解决方案</h4>\n<p><strong>简介：</strong></p>\n<p>基于Lua的热更新解决方案主要有xLua、toLua、sLua、uLua</p>\n<p>这些热更新方案都是基于Lua语言的。</p>\n<p>也可以叫做Lua插件，运行Lua，并实现了Lua和C#交互的插件。</p>\n<p><strong>为什么用Lua语言做热更新</strong></p>\n<p>至于为什么用Lua语言做热更新，主要是因为Lua语言是解释性语言，并不需要事先编译，而是运行动态解释执行的。</p>\n<p>在解释Lua语言的时候不是翻译成机器码，而是使用C代码记性解释，不用开辟可执行权限的内存空间，也不会有新代码执行，执行解释的是C语言写出来的虚拟机。</p>\n<p><strong>为什么不用C#做热更新</strong></p>\n<p>至于为什么不用C#语言做热更新，因为C#的定位是一个追求效率且功能强大的编译型语言，在运行时需要代码，就将C#的中间语言MSIL转换成机器码的编译 <abbr title=\"IT编译（just-in-time compilation）狭义来说是当某段代码即将第一次被执行时进行编译，因而叫“即时编译”\">JIT</abbr> 。</p>\n<p>在Android环境中支持 <abbr title=\"IT编译（just-in-time compilation）狭义来说是当某段代码即将第一次被执行时进行编译，因而叫“即时编译”\">JIT</abbr> ，但是IOS不允许获取具有可执行权限的内存空间，不能通过DLL文件直接更新代码。</p>\n<p><strong>uLua</strong></p>\n<p>Lua插件的原生版本，不会产生静态代码，反射机制，效率低下，速度慢，GC频繁，已停止更新。</p>\n<p><strong>xLua</strong></p>\n<p>XLua是腾讯开发的开源Lua插件，为Unity、.Net、Mono等环境增加Lua脚本编程的能力，借助xLua可以使Lua代码与C#代码相互调用。</p>\n<p>所以xLua可以很方便地实现Lua在Unity3D中的使用。</p>\n<p>本质是实现了运行在C#环境上的Lua虚拟机使得Lua可以和C#相互调用和访问，利用 <abbr title=\"IL的全称是 Intermediate Language翻译过来就是中间语言，它是一种属于通用语言架构和.NET框架的低阶的人类可读的编程语言。\">IL</abbr> 注入，实现用Lua函数替换C#原函数。</p>\n<p><strong>toLua</strong></p>\n<p>toLua基于LuaInterface。</p>\n<p>LuaInterface是一个实现lua和微软.Net平台的 <abbr title=\"公共语言运行库 (common language runtime,CLR) 是托管代码执行核心中的引擎。运行库为托管代码提供各种服务，如跨语言集成、代码访问安全性、对象生存期管理、调试和分析支持。它是整个.NET框架的核心，它为.NET应用程序提供了一个托管的代码执行环境。它实际上是驻留在内存里的一段代理代码，负责应用程序在整个执行期间的代码管理工作。\">CLR</abbr> 混合编程的开源库，使得lua脚本可以实例化 <abbr title=\"公共语言运行库 (common language runtime,CLR) 是托管代码执行核心中的引擎。运行库为托管代码提供各种服务，如跨语言集成、代码访问安全性、对象生存期管理、调试和分析支持。它是整个.NET框架的核心，它为.NET应用程序提供了一个托管的代码执行环境。它实际上是驻留在内存里的一段代理代码，负责应用程序在整个执行期间的代码管理工作。\">CLR</abbr> 对象，访问属性，调用方法甚至使用lua函数来处理事件。</p>\n<p>本质就是提供一个Lua的运行环境（虚拟机），为Unity提供编程的能力，让C#和Lua可以相互调用合访问。</p>\n<p><strong>sLua</strong></p>\n<p>sLua代码执行好，性能比toLua低。</p>\n<h4><a id=\"142Lua_98\"></a>1-4-2、使用Lua热更新方案的优缺点</h4>\n<p>优点：</p>\n<ul><li>Lua语言由C语言编写，通用性强，可以运行在各类操作系统</li><li>Lua语言是解释性语言，由虚拟器解释执行，无需进行编译</li><li>有很多成熟的项目在使用Lua，有较多的使用文档</li></ul>\n<p>缺点：</p>\n<ul><li>学使用一门Lua语言，增加学习和开发成本（心酸泪）</li><li>Lua是弱类型的非面向对象的语言，在大型项目中容易造成结构混乱和维护困难的问题</li><li>Lua需要在C#环境中提供运行环境，对Lua和C#进行相互转换和调用，效率低下，不如原生C#进行开发</li></ul>\n<h4><a id=\"143C_112\"></a>1-4-3、基于C#的热更新方案</h4>\n<p>使用C#进行热更新方案，上面已经提到过了，可以使用DLL替换进行代码更新。</p>\n<p>在Android环境中支持 <abbr title=\"IT编译（just-in-time compilation）狭义来说是当某段代码即将第一次被执行时进行编译，因而叫“即时编译”\">JIT</abbr> ，但是IOS不允许获取具有可执行权限的内存空间，这就直接要求 <abbr title=\"IT编译（just-in-time compilation）狭义来说是当某段代码即将第一次被执行时进行编译，因而叫“即时编译”\">JIT</abbr> 要以full<br/> <abbr title=\"ahead-of-time提前编译，指的是在程序运行之前将整个程序集编译成本机机器代码。\">AOT</abbr> 模式，这种模式把IL直接翻译成机器码而不是在运行期间。不能通过DLL文件直接更新代码。</p>\n<p>这种形式下，要不就放弃IOS平台，只针对Android或Win环境进行热更新。</p>\n<p>要不就使用其他方式。</p>\n<p>总结一下就是更新DLL。</p>\n<h4><a id=\"144C_129\"></a>1-4-4、基于C#热更新方案的优缺点</h4>\n<p>优点：</p>\n<ul><li>Unity开发均使用C#，开发语言统一，编码更容易。</li><li>使用纯C#开发无需另创虚拟机等环境，效率高，性能远高于Lua</li></ul>\n<p>缺点：</p>\n<ul><li>方案均有各自的局限性，直接反射方式不仅损耗性能，在不支持JIT的系统（IOS）上无法使用。</li><li>ILRuntime解决了 <abbr title=\"IT编译（just-in-time compilation）狭义来说是当某段代码即将第一次被执行时进行编译，因而叫“即时编译”\">JIT</abbr> 的问题但不够成熟，使用问题较多，需要较高的动手解决问题能力。</li></ul>\n<p>解决方案:</p>\n<ul><li>DLL反射热更新: 使用编译后的DLL文件进行替换，利用反射方式把所需C#组件绑定到相应的对象上使用。</li><li>ILRuntime：本质还是DLL的替换，但实现了一个 <abbr title=\"ILR，IL的运行时，中间语言运行时\">ILR</abbr> 使其能够在不支持 <abbr title=\"IT编译（just-in-time compilation）狭义来说是当某段代码即将第一次被执行时进行编译，因而叫“即时编译”\">JIT</abbr> 的硬件环境（IOS）下实现代码热更新。</li></ul>\n<h2><a id=\"CHybridCLR_146\"></a>二、C#热更新方案HybridCLR介绍</h2>\n<p>介绍了C#热更新方案的优缺点，就说一下这篇文章的主角，HybridCLR： C#热更新方案。</p>\n<h3><a id=\"21_149\"></a>2-1、简介</h3>\n<p>HybridCLR是一个特性完整、零成本、高性能、低内存的近乎完美的c#热更新方案。</p>\n<p>HybridCLR提供一个非常完整的跨平台 <abbr title=\"公共语言运行库 (common language runtime,CLR) 是托管代码执行核心中的引擎。运行库为托管代码提供各种服务，如跨语言集成、代码访问安全性、对象生存期管理、调试和分析支持。它是整个.NET框架的核心，它为.NET应用程序提供了一个托管的代码执行环境。它实际上是驻留在内存里的一段代理代码，负责应用程序在整个执行期间的代码管理工作。\">CLR</abbr> 运行时，不仅能在Android平台，也能在IOS、Consoles等限制了JIT的平台上高效地以 <abbr title=\"ahead-of-time提前编译，指的是在程序运行之前将整个程序集编译成本机机器代码。\">AOT</abbr> +interpreter混合模式执行。</p>\n<p>Unity开发者从此可以完全使用c#开发，并且零成本使用几乎所有的c#特性，再也不需要使用各种脚本或者不完整的热更新方案了。</p>\n<p><mark><mark>&gt;&gt; <a href=\"https://github.com/focus-creative-games/hybridclr\">github 仓库hybridclr</a> &lt;&lt;</mark></mark></p>\n<h3><a id=\"22_158\"></a>2-2、优点</h3>\n<ul><li>特性完整。 近乎完整实现了ECMA-335规范，除了 下文中\"限制和注意事项\" 之外的特性都支持。</li><li>零学习和使用成本。 HybridCLR是完整的 <abbr title=\"公共语言运行库 (common language runtime,CLR) 是托管代码执行核心中的引擎。运行库为托管代码提供各种服务，如跨语言集成、代码访问安全性、对象生存期管理、调试和分析支持。它是整个.NET框架的核心，它为.NET应用程序提供了一个托管的代码执行环境。它实际上是驻留在内存里的一段代理代码，负责应用程序在整个执行期间的代码管理工作。\">CLR</abbr> 运行时，热更新代码与 <abbr title=\"ahead-of-time提前编译，指的是在程序运行之前将整个程序集编译成本机机器代码。\">AOT</abbr> 代码无缝工作。不需要额外写- - 任何特殊代码、没有代码生成，也没有什么特殊限制。脚本类与 <abbr title=\"ahead-of-time提前编译，指的是在程序运行之前将整个程序集编译成本机机器代码。\">AOT</abbr> 类在同一个运行时内，即使反射、多线程(volatile、ThreadStatic、Task、async)之类的代码都能够正常工作。</li><li>执行高效。实现了一个极其高效的寄存器解释器，所有指标都大幅优于其他热更新方案。性能测试报告</li><li>内存高效。 热更新脚本中定义的类跟普通c#类占用一样的内存空间，远优于其他热更新方案。内存占用报告</li><li>原生支持修复 <abbr title=\"ahead-of-time提前编译，指的是在程序运行之前将整个程序集编译成本机机器代码。\">AOT</abbr> 部分代码。不额外增加任何开发和运行开销。</li></ul>\n<h3><a id=\"23_165\"></a>2-3、工作原理</h3>\n<p>HybridCLR扩充了unity的 <abbr title=\"AOT编译\">il2cpp</abbr> runtime，将它由纯AOT运行时改造为\"<abbr title=\"ahead-of-time提前编译，指的是在程序运行之前将整个程序集编译成本机机器代码。\">AOT</abbr> + Interpreter\"混合运行方式，从底层彻底支持了热更新dll。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b85bbfdf6fcc481ea89266237d8e965c.png\"/><br/> 更具体地说，HybridCLR做了一下几点工作：</p>\n<ul><li>实现了一个高效的元数据(dll)解析库</li><li>改造了 <abbr title=\"AOT编译\">il2cpp</abbr> 的元数据管理模块，实现了元数据的动态注册</li><li>实现了一个IL指令集到自定义的寄存器指令集的compiler</li><li>实现了一个高效的寄存器解释器</li><li>额外提供大量的instinct函数，提升解释器性能</li><li>提供hotfix <abbr title=\"ahead-of-time提前编译，指的是在程序运行之前将整个程序集编译成本机机器代码。\">AOT</abbr> 的支持</li></ul>\n<h3><a id=\"24_180\"></a>2-4、与其他热更新方案的区别</h3>\n<p><strong>其他热更新方案方案：</strong></p>\n<p>使用独立虚拟机，与 <abbr title=\"AOT编译\">il2cpp</abbr> 的关系本质上相当于mono中嵌入lua。</p>\n<p>因为类型系统不统一，为了让热更新类型能够继承 <abbr title=\"ahead-of-time提前编译，指的是在程序运行之前将整个程序集编译成本机机器代码。\">AOT</abbr> 类型，需要写适配器，而且解释器中的类型不能为主工程点的类型系统所识别。</p>\n<p>特性不不完整、开发麻烦、运行效率底下。</p>\n<p><strong>HybridCLR热更新方案</strong></p>\n<p>这是原生的C#热更新方案，<abbr title=\"AOT编译\">il2cpp</abbr> 相当于mono的 <abbr title=\"ahead-of-time提前编译，指的是在程序运行之前将整个程序集编译成本机机器代码。\">AOT</abbr> 模块，HybridCLR相当于 <abbr title=\"Mono是一个由Xamarin公司所主持的自由开放源码项目。组成组件：C# 编译器，CLI虚拟机，以及核心类别程序库。\">mono</abbr> 的 <abbr title=\"解释器\">iterpreter</abbr> 模块，两者合一成为完成 <abbr title=\"Mono是一个由Xamarin公司所主持的自由开放源码项目。组成组件：C# 编译器，CLI虚拟机，以及核心类别程序库。\">mono</abbr> 。</p>\n<p>HybridCLR通过System.Reflection.Assembly.Load动态加载dll，从而支持ios平台的热更新。</p>\n<p>HybridCLR由原生runtime实现，可以与其他主工程AOT部分类型相等并且统一，可以任意调用、继承、反射、多线程，不需要再写适配器。</p>\n<h3><a id=\"25_201\"></a>2-5、支持版本</h3>\n<ul><li>支持所有il2cpp平台，包括PC(Win32和Win64)、Android(armv7、armv8)、NS、WEBGL平台。</li><li>支持Unity 2020-2021所有LTS版本</li></ul>\n<h2><a id=\"CHybridCLR_205\"></a>三、C#热更新方案HybridCLR的使用</h2>\n<h3><a id=\"31_206\"></a>3-1、快速开始</h3>\n<p><em>说在前面：本教程了为了适应更多童鞋，教程比较详细，动手能力强的小伙伴可以直接访问 <a href=\"https://focus-creative-games.github.io/hybridclr/start_up/#%E5%AE%89%E8%A3%85%E5%92%8C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\">官网地址</a> 自行摸索也可。</em></p>\n<h4><a id=\"311_209\"></a>3-1-1、将示例项目下载下来</h4>\n<p><a href=\"https://github.com/focus-creative-games/hybridclr_trial\">https://github.com/focus-creative-games/hybridclr_trial</a></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ce55575bd81d44c4a57e00158fbff08c.png\"/><br/> 打不开Github的也可以直接使用CSDN下载：<a href=\"https://download.csdn.net/download/q764424567/86338805\">https://download.csdn.net/download/q764424567/86338805</a></p>\n<h4><a id=\"312UnityC_216\"></a>3-1-2、安装Unity，安装C++模块，打开项目</h4>\n<p>（1）安装Unity 2020.3.33，版本：2020.3.33f1</p>\n<p>安装Unity 2020.3.33f1 记得安装WIndows Build Support (II2CPP)模块：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\176f76f9423046299f3e7041bc4f2314.png\"/><br/> PS：没有这个版本的记得安装一下，HybridCLR目前只支持2020-2021的LTS版本。</p>\n<p>（2）Visual Studio 添加 C++模块：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\da08282d33d249e389c90dc2b0d700d9.png\"/><br/> <em>PS：IL2CPP模块和C++模块是必须安装的</em></p>\n<p>（3）打开示例工程：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\daa290ecd0c842beb4539f1978c74c5e.png\"/><br/> 打开后，控制台会报一个错误：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\de0beb2831384b339c3a0de79b5b2683.png\"/><br/> 是让我们安装il2cpp。</p>\n<h4><a id=\"313il2cpp_233\"></a>3-1-3、安装il2cpp</h4>\n<p>（1）找到自己 <code>Unity/2020.3.33f1c2/Editor/Data/il2cpp</code>文件夹：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2f9cd4a6079c4a4f808b0d4a32998a2b.png\"/><br/> 比如我的路径：<br/> <code>F:\\Frank_Software\\Unity\\2020.3.33f1c2\\Editor\\Data\\il2cpp</code></p>\n<p>（2）找到项目目录下的HybridCLRDData文件夹，进入这个文件夹：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c1d3e9806edc44f8a7fa03b6fb24dfb4.png\"/><br/> 找到init_local_<abbr title=\"AOT编译\">il2cpp</abbr>_data.bat文件，右键选择编辑：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8e569aacdbcc4571b1940695b2c3a2eb.png\"/><br/> 将IL2CPP_PATH的路径改成自己的Unity/2020.3.33的il2cpp路径：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\aadfdc5c195a4b75be4859f88305ce19.png\"/><br/> （3）保存文件后，双击init_local_<abbr title=\"AOT编译\">il2cpp</abbr>_data.bat文件：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ce32a640d9a04d7f85022596f1a6234c.png\"/><br/> 这种情况是git没有安装，安装Git后重试。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c86b2c7be1d7428587c77f842271f8ca.png\"/></p>\n<h4><a id=\"314_252\"></a>3-1-4、打包运行程序</h4>\n<p>在菜单栏选择Build→Win64：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7d740b725dec498cbb7db9c1aae592ee.png\"/><br/> 运行之后：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3188c7082dfe4b5dafbf0fe3f65b3c94.png\"/><br/> 在打包的过程中可能会遇到很多问题，打包失败。</p>\n<p>可能但不包括的问题有：</p>\n<ul><li>Unity没有安装II2CPP模块</li><li>VS没有安装c++模块</li><li>bat脚本没有更新，要用最新的bat脚本</li></ul>\n<p>出现问题后排查一下问题。</p>\n<h4><a id=\"315_266\"></a>3-1-5、进行热更新</h4>\n<p>先运行一下打包出来的程序：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f49e76407cb44b98b7ba80912a839983.png\"/><br/> 打开Unity工程，修改Assets/HotFix2/App.cs脚本的内容，在Main函数中增加一行Log：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9837494dd2954f31a48165164c363c6b.png\"/></p>\n<blockquote>\n<p>HotFix和HotFix2文件存放的热更新的文件</p>\n</blockquote>\n<p>在菜单栏点击HybridCLR→BuildBundles→ActiveBuildTarget，重新打一个ab包：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\196088cf0b4b4b40aa6a4975e5555ec3.png\"/><br/> 将目录hybridclr_trial-main\\Assets\\StreamingAssets下的文件复制到<br/> Release-Win64\\HybridCLRTrial_Data\\StreamingAssets目录：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8dd21c915a044899a396809e8e9f5393.png\"/><br/> 这就完成了热更新文件的替换，重新运行程序就可以看到刚刚修改的日志输出代码已经生效：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f2ed6962510b41a3a774fab7032ba282.png\"/></p>\n<h3><a id=\"32_285\"></a>3-2、常见问题</h3>\n<p>总结一下遇到的问题吧。</p>\n<h4><a id=\"321IL2CPP_288\"></a>3-2-1、目前选择的脚本后端(IL2CPP)没有安装。</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e450acb0677a4712b82a199d9fd527ec.png\"/><br/> 解决方法：</p>\n<p>安装Unity 2020.3.33f1 记得安装WIndows Build Support (II2CPP)模块。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d78ae4fcfcbf4248b0e290e6251885c8.png\"/><br/> VS记得安装c++模块<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d3cad79746f746e293496dc93b3a4a46.png\"/></p>\n<h4><a id=\"322IL2CPPBuildingBuilderFaiedeXcveption_il2cppapicpp_296\"></a>3-2-2、打包错误：IL2CPP.Building.BuilderFaiedeXcveption <abbr title=\"AOT编译\">il2cpp</abbr>-api.cpp</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e8315e9a3b1e474e8e4fa45ce1aa2e6a.png\"/><br/> 解决方法：</p>\n<p>更新一个bat脚本，也就是这个东西：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f2d9a806e1dd4ee5ac4a8aea05c1fb4b.png\"/><br/> 最新的bat文件可以看这里：<br/> <a href=\"https://github.com/focus-creative-games/hybridclr_trial/blob/main/HybridCLRData/init_local_il2cpp_data.bat\">https://github.com/focus-creative-games/hybridclr_trial/blob/main/HybridCLRData/init_local_<abbr title=\"AOT编译\">il2cpp</abbr>_data.bat</a></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\603766fde4ac499a85b20f20da934f15.png\"/><br/> 全选替换一下即可。</p>\n<h4><a id=\"323GameAssemblyHuatuoApi_LoadMetadataForAOTAssembly_308\"></a>3-2-3、在“GameAssembly”中找不到名为“HuatuoApi_LoadMetadataForAOTAssembly”的入口点。</h4>\n<p>这个主要是HotFix2文件中App.cs的这个函数：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7b1add7b651641f2b1b1e9c7056523e2.png\"/><br/> 在LoadMetadataForAOTAssembly方法中，载入了dll，使用了裁剪之前的版本。</p>\n<p>可以参照HybridCLR_trial项目，在BuildProcessor中，生成裁剪后的dll后，将dll拷贝到他处。</p>\n<p>更简单的方法是：干掉这个函数（用上的时候再研究）。</p>\n<h3><a id=\"33_317\"></a>3-3、相关工具推荐</h3>\n<h4><a id=\"331UnityGameFramework_HybridCLRhttpsgithubcomDango1992UnityGameFramework_HybridCLRtreemain_318\"></a>3-3-1、热更新框架<a href=\"https://github.com/Dango1992/UnityGameFramework_HybridCLR/tree/main\">UnityGameFramework_HybridCLR</a></h4>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\34da5394b4c2461da88ac030f3824b3f.png\"/><br/> 一键生成环境：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a1f23ca742584b6e98de29008ae89fcc.png\"/></p>\n<h4><a id=\"332_AssembliesHotfixToolkitUnityhttpsgithubcomBianShAssembliesHotfixToolkitUnity_323\"></a>3-3-2、无感知逻辑热更工具 <a href=\"https://github.com/Bian-Sh/Assemblies-Hotfix-Toolkit-Unity\">Assemblies-Hotfix-Toolkit-Unity</a></h4>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0320b21cfb4849ae92864b57197677a1.png\"/><br/> 主要功能：<br/> （1）对指定的热更程序集进行校验:<br/> a. 引用框为空则警示<br/> b. 识别编辑器程序集并警示<br/> c. 识别被默认程序集引用并警示（默认程序集：Assembly-CSharp.dll，Assembly-CSharp-firstpass.dll）<br/> d. 如果热更程序集被引用，则展示被引用的程序集并提示需要修复<br/> （2）热更程序集在 Addressables 打包时自动转存为 .bytes 文件并打包到 ab 中<br/> （3）将 .bytes 文件及其配置文件 自动加入 Addressables Group<br/> （4）对加载的程序集自动进行拓扑排序，保证程序集按正确的引用顺序加载</p>\n<h4><a id=\"333Unity_TEnginehttpsgithubcomALEXTANGXIAOTEngine_335\"></a>3-3–3、Unity框架 <a href=\"https://github.com/ALEXTANGXIAO/TEngine\">TEngine</a></h4>\n<p>TEngine是一个简单(新手友好)且强大的Unity框架,对于需要一套上手快、文档清晰、高性能且可拓展性极强的开发者或者团队来说是一个很好的游戏开发框架解决方案。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2481158072dd49caaf2fd4f5ffb250fd.png\"/></p>\n<h2><a id=\"_341\"></a>四、后记</h2>\n<p>官方网站HybridCLR文档 (<a href=\"focus-creative-games.github.io\">focus-creative-games.github.io</a>)</p>\n<p>HybridCLR(卧龙wolong)<br/> 新手群：428404198<br/> 进阶群：651188171</p>\n<p>仓库:<br/> HybridCLR<br/> <a href=\"https://github.com/focus-creative-games/hybridclr\">https://github.com/focus-creative-games/hybridclr </a><br/> <a href=\"https://gitee.com/focus-creative-games/hybridclr\">https://gitee.com/focus-creative-games/hybridclr </a></p>\n<p><abbr title=\"AOT编译\">il2cpp</abbr>_plus<br/> <a href=\"https://github.com/focus-creative-games/il2cpp_plus\">https://github.com/focus-creative-games/<abbr title=\"AOT编译\">il2cpp</abbr>_plus </a><br/> <a href=\"https://gitee.com/focus-creative-games/il2cpp_plus\">https://gitee.com/focus-creative-games/<abbr title=\"AOT编译\">il2cpp</abbr>_plus</a></p>\n<hr/>\n<p>你的点赞就是对博主的支持，有问题记得留言：</p>\n<p>Unity爱好者交流群：1040082875</p>\n<p>主页有联系方式。</p>\n<p>博主还有跟多宝藏文章等待你的发掘哦：</p>\n<table><thead><tr><th>专栏</th><th>方向</th><th>简介</th></tr></thead><tbody><tr><td><a href=\"https://blog.csdn.net/q764424567/category_9291766.html\"><font color=\"#2EFEC8\">Unity3D开发小游戏</font></a></td><td>小游戏开发教程</td><td>分享一些使用Unity3D引擎开发的小游戏，分享一些制作小游戏的教程。</td></tr><tr><td><a href=\"https://blog.csdn.net/q764424567/category_9999472.html\"><font color=\"#00BFFF\">Unity3D从入门到进阶</font></a></td><td>入门</td><td>从自学Unity中获取灵感，总结从零开始学习Unity的路线，有C#和Unity的知识。</td></tr><tr><td><a href=\"https://blog.csdn.net/q764424567/category_11314591.html\"><font color=\"#8181F7\">Unity3D之UGUI</font></a></td><td>UGUI</td><td>Unity的UI系统UGUI全解析，从UGUI的基础控件开始讲起，然后将UGUI的原理，UGUI的使用全面教学。</td></tr><tr><td><a href=\"https://blog.csdn.net/q764424567/category_11280711.html\"><font color=\"#00FF00\">Unity3D之读取数据</font></a></td><td>文件读取</td><td>使用Unity3D读取txt文档、json文档、xml文档、csv文档、Excel文档。</td></tr><tr><td><a href=\"https://blog.csdn.net/q764424567/category_11276019.html\"><font color=\"#0040FF\">Unity3D之数据集合</font></a></td><td>数据集合</td><td>数组集合：数组、List、字典、堆栈、链表等数据集合知识分享。</td></tr><tr><td><a href=\"https://blog.csdn.net/q764424567/category_8308958.html\"><font color=\"#FE642E\">Unity3D之VR/AR（虚拟仿真）开发</font></a></td><td>虚拟仿真</td><td>总结博主工作常见的虚拟仿真需求进行案例讲解。</td></tr><tr><td><a href=\"https://blog.csdn.net/q764424567/category_7171538.html\"><font color=\"#A901DB\">Unity3D之插件</font></a></td><td>插件</td><td>主要分享在Unity开发中用到的一些插件使用方法，插件介绍等</td></tr><tr><td><a href=\"https://blog.csdn.net/q764424567/category_7171536.html\"><font color=\"#DF01D7\">Unity3D之日常开发</font></a></td><td>日常记录</td><td>主要是博主日常开发中用到的，用到的方法技巧，开发思路，代码分享等</td></tr><tr><td><a href=\"https://blog.csdn.net/q764424567/category_11359215.html\"><font color=\"#B40486\">Unity3D之日常BUG</font></a></td><td>日常记录</td><td>记录在使用Unity3D编辑器开发项目过程中，遇到的BUG和坑，让后来人可以有些参考。</td></tr></tbody></table>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 1, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-12 10:33:26", "summary": "推荐阅读主页开源地址插件分享简书地址我的个人博客群：大家好，我是佛系工程师恬静的小魔龙，不定时更新开发技巧，觉得有用记得一键三连哦。一、前言相信只要做过热更新的小伙伴，都被热更新搞过心态吧。我有一个小"}