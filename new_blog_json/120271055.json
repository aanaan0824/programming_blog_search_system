{"blogid": "120271055", "writerAge": "码龄3年", "writerBlogNum": "138", "writerCollect": "104", "writerComment": "11", "writerFan": "17", "writerGrade": "5级", "writerIntegral": "1715", "writerName": "Eighteen__", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_120271055.jpg", "writerRankTotal": "869292", "writerRankWeekly": "54237", "writerThumb": "25", "writerVisitNum": "64232", "blog_read_count": "8759", "blog_time": "于 2021-09-13 17:18:58 发布", "blog_title": "PoW算法", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_6\">前言</a></li><li><a href=\"#PoW_10\">一、PoW——工作量证明</a></li><li><a href=\"#go_25\">二、go语言简单案例</a></li></ul>\n</div>\n<p></p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_6\"></a>前言</h1>\n<p><font color=\"#999AAA\">提示：以下是本篇文章正文内容，下面案例可供参考</font></p>\n<h1><a id=\"PoW_10\"></a>一、PoW——工作量证明</h1>\n<p>⚫ Proof-of-Work 简称 PoW，即为工作量证明<br/> ⚫ 通过计算一个数值，使得拼揍上交易数据后内容的值满足规定的上限,在节点成功<br/> 找到满足的 Hash 值之后，会马上对全网进行广播打包区块，网络的节点收到广播<br/> 打包区块，会立刻对其进行验证<br/> ⚫ 网络中只有最快解密的区块，才会添加的账本中，其他的节点进行复制，这样就保<br/> 证了整个账本的唯一性<br/> ⚫ 假如节点有任何的作弊行为，都会导致网络的节点验证不通过，直接丢弃其打包的<br/> 区块，这个区块就无法记录到总账本中，作弊的节点耗费的成本就白费了，因此在<br/> 巨大的挖矿成本下，也使得矿工自觉自愿的遵守比特币系统的共识协议，也就确保<br/> 了整个系统的安全</p>\n<h1><a id=\"go_25\"></a>二、go语言简单案例</h1>\n<pre><code class=\"prism language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"time\"</span>\n\t<span class=\"token string\">\"strconv\"</span>\n\t<span class=\"token string\">\"crypto/sha256\"</span>\n\t<span class=\"token string\">\"encoding/hex\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"strings\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//通过代码，实现PoW挖矿</span>\n\n<span class=\"token comment\">//定义区块</span>\n<span class=\"token keyword\">type</span> Block <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//上一个区块的哈希</span>\n\tPreHash <span class=\"token builtin\">string</span>\n\t<span class=\"token comment\">//当前区块的哈希</span>\n\tHashCode <span class=\"token builtin\">string</span>\n\t<span class=\"token comment\">//时间戳</span>\n\tTimeStamp <span class=\"token builtin\">string</span>\n\t<span class=\"token comment\">//难度系数</span>\n\tDiff <span class=\"token builtin\">int</span>\n\t<span class=\"token comment\">//交易信息</span>\n\tData <span class=\"token builtin\">string</span>\n\t<span class=\"token comment\">//区块高度</span>\n\tIndex <span class=\"token builtin\">int</span>\n\t<span class=\"token comment\">//随机值</span>\n\tNonce <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//第一个区块：创世区块</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">GenerateFirstBlock</span><span class=\"token punctuation\">(</span>data <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> Block <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//创建第一个Block</span>\n\t<span class=\"token keyword\">var</span> firstblock Block\n\tfirstblock<span class=\"token punctuation\">.</span>PreHash <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span>\n\tfirstblock<span class=\"token punctuation\">.</span>TimeStamp <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">//暂设为4</span>\n\tfirstblock<span class=\"token punctuation\">.</span>Diff <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n\t<span class=\"token comment\">//交易信息</span>\n\tfirstblock<span class=\"token punctuation\">.</span>Data <span class=\"token operator\">=</span> data\n\tfirstblock<span class=\"token punctuation\">.</span>Index <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\tfirstblock<span class=\"token punctuation\">.</span>Nonce <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t<span class=\"token comment\">//通过sha256得到自己的哈希</span>\n\tfirstblock<span class=\"token punctuation\">.</span>HashCode <span class=\"token operator\">=</span> <span class=\"token function\">GenerationHashValue</span><span class=\"token punctuation\">(</span>firstblock<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> firstblock\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//生成区块的哈希值</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">GenerationHashValue</span><span class=\"token punctuation\">(</span>block Block<span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//按照比特币的写法，将区块的所有属性拼接后做哈希运算</span>\n\t<span class=\"token comment\">//int转为字符串</span>\n\t<span class=\"token keyword\">var</span> hashdata <span class=\"token operator\">=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Itoa</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>Index<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Itoa</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>Nonce<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n\t\tstrconv<span class=\"token punctuation\">.</span><span class=\"token function\">Itoa</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>Diff<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> block<span class=\"token punctuation\">.</span>TimeStamp\n\t<span class=\"token comment\">//算哈希</span>\n\t<span class=\"token keyword\">var</span> sha <span class=\"token operator\">=</span> sha256<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tsha<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>hashdata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\thashed <span class=\"token operator\">:=</span> sha<span class=\"token punctuation\">.</span><span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> hex<span class=\"token punctuation\">.</span><span class=\"token function\">EncodeToString</span><span class=\"token punctuation\">(</span>hashed<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//测试创建创世区块</span>\n\t<span class=\"token keyword\">var</span> firstBlock <span class=\"token operator\">=</span> <span class=\"token function\">GenerateFirstBlock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"创世区块\"</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>firstBlock<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>firstBlock<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">//需要生成下一个区块</span>\n\t<span class=\"token function\">GenerateNextBlock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第二区块\"</span><span class=\"token punctuation\">,</span> firstBlock<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//产生新的区块</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">GenerateNextBlock</span><span class=\"token punctuation\">(</span>data <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> oldBolock Block<span class=\"token punctuation\">)</span> Block <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//产生一个新的区块</span>\n\t<span class=\"token keyword\">var</span> newBlock Block\n\tnewBlock<span class=\"token punctuation\">.</span>TimeStamp <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">//难度系数</span>\n\tnewBlock<span class=\"token punctuation\">.</span>Diff <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\t<span class=\"token comment\">//高度</span>\n\tnewBlock<span class=\"token punctuation\">.</span>Index <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\tnewBlock<span class=\"token punctuation\">.</span>Data <span class=\"token operator\">=</span> data\n\tnewBlock<span class=\"token punctuation\">.</span>PreHash <span class=\"token operator\">=</span> oldBolock<span class=\"token punctuation\">.</span>HashCode\n\tnewBlock<span class=\"token punctuation\">.</span>Nonce <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n\t<span class=\"token comment\">//创建pow()算法的方法</span>\n\t<span class=\"token comment\">//计算前导0为4个的哈希值</span>\n\tnewBlock<span class=\"token punctuation\">.</span>HashCode <span class=\"token operator\">=</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>newBlock<span class=\"token punctuation\">.</span>Diff<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>newBlock<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> newBlock\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//pow算法</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>diff <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> block <span class=\"token operator\">*</span>Block<span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//实现不停地去挖矿</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//认为是挖了一次矿了</span>\n\t\thash <span class=\"token operator\">:=</span> <span class=\"token function\">GenerationHashValue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>block<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\">//挖矿过程的哈希打印</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\">//判断哈希值前导0是否为diff个0</span>\n\t\t<span class=\"token comment\">//strings.Repeat:判断hash是否有diff个0，写1，就判断为有多少个1</span>\n\t\t<span class=\"token keyword\">if</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">HasPrefix</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Repeat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> diff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//挖矿成功</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"挖矿成功\"</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> hash\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//没挖到</span>\n\t\t\t<span class=\"token comment\">//随机值自增</span>\n\t\t\tblock<span class=\"token punctuation\">.</span>Nonce<span class=\"token operator\">++</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-09-13 17:18:58", "summary": "文章目录前言一、工作量证明二、语言简单案例前言提示：以下是本篇文章正文内容，下面案例可供参考一、工作量证明简称，即为工作量证明通过计算一个数值，使得拼揍上交易数据后内容的值满足规定的上限在节点成功找到"}