{"blogid": "126671185", "writerAge": "码龄3年", "writerBlogNum": "129", "writerCollect": "2291", "writerComment": "936", "writerFan": "2442", "writerGrade": "5级", "writerIntegral": "3693", "writerName": "FranzLiszt1847", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126671185.jpg", "writerRankTotal": "4594", "writerRankWeekly": "9302", "writerThumb": "1033", "writerVisitNum": "270013", "blog_read_count": "707", "blog_time": "于 2022-09-02 23:27:02 发布", "blog_title": "Android——一个简单的天气APP", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atelier-sulphurpool-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>一个简单的天气APP</h3>\n<ul><li><a href=\"#_1\">效果演示视频</a></li><li><ul><li><a href=\"#_5\">简述</a></li><li><a href=\"#JSON_10\">天气JSON数据</a></li><li><ul><li><a href=\"#_11\">实况天气</a></li><li><a href=\"#24_45\">逐24小时天气预报</a></li><li><a href=\"#_281\">未来七天天气预报</a></li></ul>\n</li><li><a href=\"#_414\">天气详情页</a></li><li><ul><li><a href=\"#_416\">效果图</a></li><li><a href=\"#JSON_419\">获取JSON数据</a></li><li><a href=\"#URL_449\">URL请求</a></li><li><ul><li><a href=\"#URL_450\">实况天气URL</a></li><li><a href=\"#24URL_464\">逐24小时天气预报URL</a></li><li><a href=\"#URL_479\">未来七天天气预报URL</a></li></ul>\n</li><li><a href=\"#JSON_494\">解析JSON数据</a></li><li><ul><li><a href=\"#_495\">解析实况天气数据</a></li><li><a href=\"#_536\">解析逐小时天气预报</a></li><li><a href=\"#_571\">解析未来七天天气预报</a></li></ul>\n</li><li><a href=\"#_606\">初始化天气详情页</a></li><li><ul><li><a href=\"#_607\">获取当前位置</a></li><li><ul><li><a href=\"#_609\">获取经纬度</a></li><li><a href=\"#_648\">经纬度转为地理信息</a></li></ul>\n</li><li><a href=\"#_670\">页面初始化</a></li><li><a href=\"#ViewPager_818\">ViewPager子页面编辑</a></li><li><ul><li><a href=\"#_835\">页面添加</a></li><li><a href=\"#_837\">页面删除</a></li></ul>\n</li><li><a href=\"#_853\">指示器</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_878\">天气编辑页</a></li><li><ul><li><a href=\"#_880\">效果图</a></li><li><a href=\"#_889\">简版天气数据</a></li><li><ul><li><a href=\"#_892\">获取数据并初始化</a></li><li><a href=\"#_923\">子项删除</a></li></ul>\n</li><li><a href=\"#_937\">搜索</a></li><li><ul><li><a href=\"#_938\">效果图</a></li><li><a href=\"#SearchView_942\">更改SearchView背景和字体样式</a></li><li><a href=\"#_976\">搜索初始化</a></li><li><a href=\"#_1010\">搜索字符监听</a></li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#_1032\">下载地址</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>效果演示视频</h1>\n<p></p>\n<div class=\"csdn-video-box\">\n<iframe allowfullscreen=\"true\" data-mediaembed=\"csdn\" id=\"cGHcDiaa-1662127484602\" src=\"https://live.csdn.net/v/embed/236394\"></iframe>\n<p>EasyWeather演示效果视频</p>\n</div>\n<p></p>\n<h2><a id=\"_5\"></a>简述</h2>\n<p>此天气数据源采用<a href=\"https://www.seniverse.com/\">心知天气API(试用版)</a>，免费版获取数据有限，只能获取普通的温度、湿度等，例如压力、云量、可见度等均获取不到，试用版相当于正式版，可以获取大部分数据，试用日期是14天。</p>\n<p>首页不同城市天气页面之间的滑动采用的是<code>ViewPager</code>，编辑界面的搜索栏采用的是<code>SearchView+ListView</code>,其中城市数据源是统计到一个xml文件中；通过点击搜索匹配项，插入至SQLite数据库中，然后刷新当前天气子项，然后通过<code>EventBus</code>通知首页更新views页面。处于编辑状态时，删除子项，同样使用<code>EventBus</code>通知首页更新；更新主要是页面数量更新和下方指示器更新。</p>\n<h2><a id=\"JSON_10\"></a>天气JSON数据</h2>\n<h3><a id=\"_11\"></a>实况天气</h3>\n<pre><code>{\n    \"results\":[\n        {\n            \"location\":{\n                \"id\":\"WKZTU85FVNSV\",\n                \"name\":\"娄底\",\n                \"country\":\"CN\",\n                \"path\":\"娄底,娄底,湖南,中国\",\n                \"timezone\":\"Asia/Shanghai\",\n                \"timezone_offset\":\"+08:00\"\n            },\n            \"now\":{\n                \"text\":\"晴\",\n                \"code\":\"1\",\n                \"temperature\":\"25\",\n                \"feels_like\":\"26\",\n                \"pressure\":\"984\",\n                \"humidity\":\"56\",\n                \"visibility\":\"19.0\",\n                \"wind_direction\":\"北\",\n                \"wind_direction_degree\":\"342\",\n                \"wind_speed\":\"6.0\",\n                \"wind_scale\":\"2\",\n                \"clouds\":\"13\",\n                \"dew_point\":\"\"\n            },\n            \"last_update\":\"2022-09-02T22:08:30+08:00\"\n        }\n    ]\n}\n</code></pre>\n<h3><a id=\"24_45\"></a>逐24小时天气预报</h3>\n<pre><code>{\n    \"results\":[\n        {\n            \"location\":{\n                \"id\":\"WWYMRT0VRMUG\",\n                \"name\":\"大连\",\n                \"country\":\"CN\",\n                \"path\":\"大连,大连,辽宁,中国\",\n                \"timezone\":\"Asia/Shanghai\",\n                \"timezone_offset\":\"+08:00\"\n            },\n            \"hourly\":[\n                {\n                    \"time\":\"2022-09-02T22:00:00+08:00\",\n                    \"text\":\"多云\",\n                    \"code\":\"4\",\n                    \"temperature\":\"21\",\n                    \"humidity\":\"81\",\n                    \"wind_direction\":\"东\",\n                    \"wind_speed\":\"7.52\"\n                },\n                {\n                    \"time\":\"2022-09-02T23:00:00+08:00\",\n                    \"text\":\"阴\",\n                    \"code\":\"9\",\n                    \"temperature\":\"21\",\n                    \"humidity\":\"82\",\n                    \"wind_direction\":\"东北\",\n                    \"wind_speed\":\"7.02\"\n                },\n                {\n                    \"time\":\"2022-09-03T00:00:00+08:00\",\n                    \"text\":\"阴\",\n                    \"code\":\"9\",\n                    \"temperature\":\"21\",\n                    \"humidity\":\"83\",\n                    \"wind_direction\":\"东北\",\n                    \"wind_speed\":\"7.81\"\n                },\n                {\n                    \"time\":\"2022-09-03T01:00:00+08:00\",\n                    \"text\":\"阴\",\n                    \"code\":\"9\",\n                    \"temperature\":\"21\",\n                    \"humidity\":\"84\",\n                    \"wind_direction\":\"东北\",\n                    \"wind_speed\":\"8.64\"\n                },\n                {\n                    \"time\":\"2022-09-03T02:00:00+08:00\",\n                    \"text\":\"阴\",\n                    \"code\":\"9\",\n                    \"temperature\":\"21\",\n                    \"humidity\":\"85\",\n                    \"wind_direction\":\"东北\",\n                    \"wind_speed\":\"9.54\"\n                },\n                {\n                    \"time\":\"2022-09-03T03:00:00+08:00\",\n                    \"text\":\"阴\",\n                    \"code\":\"9\",\n                    \"temperature\":\"21\",\n                    \"humidity\":\"85\",\n                    \"wind_direction\":\"东北\",\n                    \"wind_speed\":\"10.15\"\n                },\n                {\n                    \"time\":\"2022-09-03T04:00:00+08:00\",\n                    \"text\":\"阴\",\n                    \"code\":\"9\",\n                    \"temperature\":\"21\",\n                    \"humidity\":\"86\",\n                    \"wind_direction\":\"东北\",\n                    \"wind_speed\":\"10.73\"\n                },\n                {\n                    \"time\":\"2022-09-03T05:00:00+08:00\",\n                    \"text\":\"阴\",\n                    \"code\":\"9\",\n                    \"temperature\":\"21\",\n                    \"humidity\":\"86\",\n                    \"wind_direction\":\"东北\",\n                    \"wind_speed\":\"11.34\"\n                },\n                {\n                    \"time\":\"2022-09-03T06:00:00+08:00\",\n                    \"text\":\"阴\",\n                    \"code\":\"9\",\n                    \"temperature\":\"21\",\n                    \"humidity\":\"86\",\n                    \"wind_direction\":\"东北\",\n                    \"wind_speed\":\"13.68\"\n                },\n                {\n                    \"time\":\"2022-09-03T07:00:00+08:00\",\n                    \"text\":\"阴\",\n                    \"code\":\"9\",\n                    \"temperature\":\"22\",\n                    \"humidity\":\"85\",\n                    \"wind_direction\":\"东北\",\n                    \"wind_speed\":\"16.16\"\n                },\n                {\n                    \"time\":\"2022-09-03T08:00:00+08:00\",\n                    \"text\":\"多云\",\n                    \"code\":\"4\",\n                    \"temperature\":\"23\",\n                    \"humidity\":\"83\",\n                    \"wind_direction\":\"东北\",\n                    \"wind_speed\":\"18.72\"\n                },\n                {\n                    \"time\":\"2022-09-03T09:00:00+08:00\",\n                    \"text\":\"多云\",\n                    \"code\":\"4\",\n                    \"temperature\":\"23\",\n                    \"humidity\":\"81\",\n                    \"wind_direction\":\"东\",\n                    \"wind_speed\":\"18.18\"\n                },\n                {\n                    \"time\":\"2022-09-03T10:00:00+08:00\",\n                    \"text\":\"多云\",\n                    \"code\":\"4\",\n                    \"temperature\":\"24\",\n                    \"humidity\":\"79\",\n                    \"wind_direction\":\"东\",\n                    \"wind_speed\":\"18.97\"\n                },\n                {\n                    \"time\":\"2022-09-03T11:00:00+08:00\",\n                    \"text\":\"晴\",\n                    \"code\":\"0\",\n                    \"temperature\":\"24\",\n                    \"humidity\":\"77\",\n                    \"wind_direction\":\"东\",\n                    \"wind_speed\":\"20.92\"\n                },\n                {\n                    \"time\":\"2022-09-03T12:00:00+08:00\",\n                    \"text\":\"多云\",\n                    \"code\":\"4\",\n                    \"temperature\":\"24\",\n                    \"humidity\":\"76\",\n                    \"wind_direction\":\"东\",\n                    \"wind_speed\":\"19.84\"\n                },\n                {\n                    \"time\":\"2022-09-03T13:00:00+08:00\",\n                    \"text\":\"阴\",\n                    \"code\":\"9\",\n                    \"temperature\":\"24\",\n                    \"humidity\":\"76\",\n                    \"wind_direction\":\"东\",\n                    \"wind_speed\":\"19.12\"\n                },\n                {\n                    \"time\":\"2022-09-03T14:00:00+08:00\",\n                    \"text\":\"阴\",\n                    \"code\":\"9\",\n                    \"temperature\":\"24\",\n                    \"humidity\":\"75\",\n                    \"wind_direction\":\"东\",\n                    \"wind_speed\":\"18.83\"\n                },\n                {\n                    \"time\":\"2022-09-03T15:00:00+08:00\",\n                    \"text\":\"阴\",\n                    \"code\":\"9\",\n                    \"temperature\":\"24\",\n                    \"humidity\":\"76\",\n                    \"wind_direction\":\"东\",\n                    \"wind_speed\":\"19.44\"\n                },\n                {\n                    \"time\":\"2022-09-03T16:00:00+08:00\",\n                    \"text\":\"阴\",\n                    \"code\":\"9\",\n                    \"temperature\":\"23\",\n                    \"humidity\":\"77\",\n                    \"wind_direction\":\"东\",\n                    \"wind_speed\":\"20.09\"\n                },\n                {\n                    \"time\":\"2022-09-03T17:00:00+08:00\",\n                    \"text\":\"阴\",\n                    \"code\":\"9\",\n                    \"temperature\":\"23\",\n                    \"humidity\":\"77\",\n                    \"wind_direction\":\"东\",\n                    \"wind_speed\":\"20.77\"\n                },\n                {\n                    \"time\":\"2022-09-03T18:00:00+08:00\",\n                    \"text\":\"阴\",\n                    \"code\":\"9\",\n                    \"temperature\":\"22\",\n                    \"humidity\":\"78\",\n                    \"wind_direction\":\"东\",\n                    \"wind_speed\":\"19.66\"\n                },\n                {\n                    \"time\":\"2022-09-03T19:00:00+08:00\",\n                    \"text\":\"阴\",\n                    \"code\":\"9\",\n                    \"temperature\":\"22\",\n                    \"humidity\":\"78\",\n                    \"wind_direction\":\"东\",\n                    \"wind_speed\":\"18.58\"\n                },\n                {\n                    \"time\":\"2022-09-03T20:00:00+08:00\",\n                    \"text\":\"阴\",\n                    \"code\":\"9\",\n                    \"temperature\":\"22\",\n                    \"humidity\":\"78\",\n                    \"wind_direction\":\"东\",\n                    \"wind_speed\":\"17.53\"\n                },\n                {\n                    \"time\":\"2022-09-03T21:00:00+08:00\",\n                    \"text\":\"阴\",\n                    \"code\":\"9\",\n                    \"temperature\":\"22\",\n                    \"humidity\":\"78\",\n                    \"wind_direction\":\"东\",\n                    \"wind_speed\":\"15.7\"\n                }\n            ]\n        }\n    ]\n}\n</code></pre>\n<h3><a id=\"_281\"></a>未来七天天气预报</h3>\n<pre><code>{\n    \"results\":[\n        {\n            \"location\":{\n                \"id\":\"WWYMRT0VRMUG\",\n                \"name\":\"大连\",\n                \"country\":\"CN\",\n                \"path\":\"大连,大连,辽宁,中国\",\n                \"timezone\":\"Asia/Shanghai\",\n                \"timezone_offset\":\"+08:00\"\n            },\n            \"daily\":[\n                {\n                    \"date\":\"2022-09-02\",\n                    \"text_day\":\"晴\",\n                    \"code_day\":\"0\",\n                    \"text_night\":\"阴\",\n                    \"code_night\":\"9\",\n                    \"high\":\"23\",\n                    \"low\":\"17\",\n                    \"rainfall\":\"0.00\",\n                    \"precip\":\"0.00\",\n                    \"wind_direction\":\"东北\",\n                    \"wind_direction_degree\":\"65\",\n                    \"wind_speed\":\"6.41\",\n                    \"wind_scale\":\"2\",\n                    \"humidity\":\"60\"\n                },\n                {\n                    \"date\":\"2022-09-03\",\n                    \"text_day\":\"阴\",\n                    \"code_day\":\"9\",\n                    \"text_night\":\"阴\",\n                    \"code_night\":\"9\",\n                    \"high\":\"24\",\n                    \"low\":\"21\",\n                    \"rainfall\":\"0.00\",\n                    \"precip\":\"0.00\",\n                    \"wind_direction\":\"东\",\n                    \"wind_direction_degree\":\"86\",\n                    \"wind_speed\":\"19.44\",\n                    \"wind_scale\":\"3\",\n                    \"humidity\":\"83\"\n                },\n                {\n                    \"date\":\"2022-09-04\",\n                    \"text_day\":\"小雨\",\n                    \"code_day\":\"13\",\n                    \"text_night\":\"阴\",\n                    \"code_night\":\"9\",\n                    \"high\":\"22\",\n                    \"low\":\"19\",\n                    \"rainfall\":\"0.69\",\n                    \"precip\":\"0.91\",\n                    \"wind_direction\":\"东北\",\n                    \"wind_direction_degree\":\"51\",\n                    \"wind_speed\":\"15.19\",\n                    \"wind_scale\":\"3\",\n                    \"humidity\":\"85\"\n                },\n                {\n                    \"date\":\"2022-09-05\",\n                    \"text_day\":\"小雨\",\n                    \"code_day\":\"13\",\n                    \"text_night\":\"晴\",\n                    \"code_night\":\"1\",\n                    \"high\":\"24\",\n                    \"low\":\"18\",\n                    \"rainfall\":\"0.14\",\n                    \"precip\":\"0.56\",\n                    \"wind_direction\":\"西北\",\n                    \"wind_direction_degree\":\"321\",\n                    \"wind_speed\":\"18.54\",\n                    \"wind_scale\":\"3\",\n                    \"humidity\":\"86\"\n                },\n                {\n                    \"date\":\"2022-09-06\",\n                    \"text_day\":\"晴\",\n                    \"code_day\":\"0\",\n                    \"text_night\":\"晴\",\n                    \"code_night\":\"1\",\n                    \"high\":\"23\",\n                    \"low\":\"20\",\n                    \"rainfall\":\"0.00\",\n                    \"precip\":\"0.00\",\n                    \"wind_direction\":\"西\",\n                    \"wind_direction_degree\":\"288\",\n                    \"wind_speed\":\"19.66\",\n                    \"wind_scale\":\"3\",\n                    \"humidity\":\"62\"\n                },\n                {\n                    \"date\":\"2022-09-07\",\n                    \"text_day\":\"多云\",\n                    \"code_day\":\"4\",\n                    \"text_night\":\"阴\",\n                    \"code_night\":\"9\",\n                    \"high\":\"26\",\n                    \"low\":\"20\",\n                    \"rainfall\":\"0.00\",\n                    \"precip\":\"0.00\",\n                    \"wind_direction\":\"西南\",\n                    \"wind_direction_degree\":\"229\",\n                    \"wind_speed\":\"14.04\",\n                    \"wind_scale\":\"3\",\n                    \"humidity\":\"73\"\n                },\n                {\n                    \"date\":\"2022-09-08\",\n                    \"text_day\":\"阴\",\n                    \"code_day\":\"9\",\n                    \"text_night\":\"阴\",\n                    \"code_night\":\"9\",\n                    \"high\":\"25\",\n                    \"low\":\"22\",\n                    \"rainfall\":\"0.00\",\n                    \"precip\":\"0.00\",\n                    \"wind_direction\":\"东南\",\n                    \"wind_direction_degree\":\"149\",\n                    \"wind_speed\":\"6.77\",\n                    \"wind_scale\":\"2\",\n                    \"humidity\":\"71\"\n                }\n            ],\n            \"last_update\":\"2022-09-02T20:00:00+08:00\"\n        }\n    ]\n}\n</code></pre>\n<h2><a id=\"_414\"></a>天气详情页</h2>\n<p>包括实况天气、逐24小时天气预、未来七天天气预报三部分数据</p>\n<h3><a id=\"_416\"></a>效果图</h3>\n<img src=\"..\\..\\static\\image\\521c4b64fbf0469bb89094202660b5a6.jpeg\" width=\"50%\"/>\n<h3><a id=\"JSON_419\"></a>获取JSON数据</h3>\n<p>首先通过OKHttp使用get方式获取数据，不同的天气数据，传入不同的url，所以把请求作为公共方式，然后通过写一个回调接口，将数据源回调至外部。</p>\n<pre><code>public void Post(String url, HttpCallback callback){\n        OkHttpClient client = new OkHttpClient();\n\n        final Request request = new Request.Builder()\n                .url(url)\n                .get()\n                .build();\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                callback.onFailed(ErrorCodeParam.NetworkError);\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                int code = response.code();\n                if (code == 200){\n                    String json = response.body().string();\n                    callback.onResponse(json.toString());\n                }else {\n                    callback.onFailed(ErrorCodeParam.PostError);\n                }\n            }\n        });\n    }\n</code></pre>\n<h3><a id=\"URL_449\"></a>URL请求</h3>\n<h4><a id=\"URL_450\"></a>实况天气URL</h4>\n<p><a href=\"https://seniverse.yuque.com/docs/share/cd531fe7-714d-4bd7-8113-55adeaec54af?#%20%E3%80%8A%E5%A4%A9%E6%B0%94%E5%AE%9E%E5%86%B5%E3%80%8B\">具体方法参考官网</a><br/> 官网所展示的请求参数并不是需要所有都添加，例如语言都有默认想，一般不需要提交，在官网也有标注，此处传入key(心知天气API密钥)和城市(你所想获取天气预报的城市，可以是汉字)</p>\n<pre><code>/**\n     * 获取当前实况天气*/\n    public String getNowUrl(String location) {\n        HttpUrl.Builder builder = HttpUrl.parse(WeatherParam.NowWeatherURL).newBuilder();\n        builder.addQueryParameter(\"key\",WeatherParam.weatherToken);\n        builder.addQueryParameter(\"location\",location);\n\n        return builder.build().toString();\n    }\n</code></pre>\n<h4><a id=\"24URL_464\"></a>逐24小时天气预报URL</h4>\n<p><a href=\"https://seniverse.yuque.com/docs/share/2fe8443e-9b8d-4906-92e8-04915b04bde9?#%20%E3%80%8A24%E5%B0%8F%E6%97%B6%E9%80%90%E5%B0%8F%E6%97%B6%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%E3%80%8B\">具体参考官网</a><br/> 前两项参数与实况天气一致，第三个参数是你需要获取多少小时的天气预报数据，以当前时间为第一个小时；例如：你传入5个小时，你当时系统时间是9点，那么返回的第一个数据就是9点，第二个为10…第5个为13点；以此类推</p>\n<pre><code> /**\n     *  获取24小时天气情况*/\n    public String getHourly24Url(String location,int hours) {\n        HttpUrl.Builder builder = HttpUrl.parse(WeatherParam.Hourly24WeatherURL).newBuilder();\n        builder.addQueryParameter(\"key\",WeatherParam.weatherToken);\n        builder.addQueryParameter(\"location\",location);\n        builder.addQueryParameter(\"hours\",hours+\"\");\n\n        return builder.build().toString();\n    }\n</code></pre>\n<h4><a id=\"URL_479\"></a>未来七天天气预报URL</h4>\n<p><a href=\"https://seniverse.yuque.com/books/share/f4f9bf1a-d3d9-4a68-8996-950f8c88400e/sl6gvt\">具体参考官网</a><br/> 第三个参数与逐小时天气预报的小时一致，以当前日期为第一天；请求天数好像最大为15天</p>\n<pre><code>   /**\n     * 获取未来七天天气预报情况*/\n    public String getFuture7Url(String location,int days) {\n        HttpUrl.Builder builder = HttpUrl.parse(WeatherParam.Future7WeatherURL).newBuilder();\n        builder.addQueryParameter(\"key\",WeatherParam.weatherToken);\n        builder.addQueryParameter(\"location\",location);\n        builder.addQueryParameter(\"days\",days+\"\");\n\n        return builder.build().toString();\n    }\n</code></pre>\n<h3><a id=\"JSON_494\"></a>解析JSON数据</h3>\n<h4><a id=\"_495\"></a>解析实况天气数据</h4>\n<p>JSON数据格式在上文有提及，返回的数据较多，我们只需要关于天气的即可，地点可以不解析；此处将数据源解析成具体实体类，依旧通过回调接口，暴露给外部。</p>\n<pre><code> /**\n     * 获取当前天气情况\n     */\n     fun getNowWeather(location: String,callback: WeatherCallback_now) {\n        val url = HttpUtils.getInstance().getNowUrl(location)\n        Log.d(TAG, \"url = $url\")\n        HttpUtils.getInstance().Post(url, object : HttpCallback {\n            override fun onFailed(ErrorCode: Int) {\n                callback.onFailed(ErrorCode)\n            }\n            override fun onResponse(JSONData: String) {\n                if (TextUtils.isEmpty(JSONData)) {\n                    callback.onFailed(0)\n                    return\n                }\n                Log.d(TAG, \"now = $JSONData\")\n                try {\n                    val jsonObject = JSONObject(JSONData)\n                    val jsonArray = jsonObject.getJSONArray(\"results\")\n                    val now = jsonArray.getJSONObject(0).getJSONObject(\"now\")\n                    val time : String = jsonArray.getJSONObject(0).getString(\"last_update\");\n                    val bean : WRealTimeBean? = HttpUtils.getInstance().fromJson(\n                        now.toString(),\n                        WRealTimeBean::class.java\n                    )\n\n                    if (bean != null) {\n                        bean.last_update = time\n                        bean.location = location;\n                    }\n                    callback.onSuccess(bean)\n                } catch (e: JSONException) {\n                    e.printStackTrace()\n                }\n            }\n        })\n    }\n</code></pre>\n<h4><a id=\"_536\"></a>解析逐小时天气预报</h4>\n<p>步骤与实况天气雷同，区别在于逐小时天气预报返回的数组，所以回调接口，返回也是list数据</p>\n<pre><code>/**\n     * 获取24小时天气情况\n     */\n    fun getHourly24Weather(location: String,callback: WeatherCallback_24H) {\n        val url = HttpUtils.getInstance().getHourly24Url(location, 24)\n        Log.d(TAG, \"url = $url\")\n        HttpUtils.getInstance().Post(url, object : HttpCallback {\n            override fun onFailed(ErrorCode: Int) {\n                callback.onFailed(ErrorCode)\n            }\n            override fun onResponse(JSONData: String) {\n                if (TextUtils.isEmpty(JSONData)) {\n                    callback.onFailed(0)\n                    return\n                }\n                Log.d(TAG, \"hourlv24 = $JSONData\")\n                try {\n                    val jsonObject = JSONObject(JSONData)\n                    val jsonArray = jsonObject.getJSONArray(\"results\")\n                    val hourly24 = jsonArray.getJSONObject(0).getJSONArray(\"hourly\")\n                    val bean: MutableList&lt;WHourly24Bean&gt;? = HttpUtils.getInstance().fromListJson(\n                        hourly24.toString(),\n                        WHourly24Bean::class.java\n                    )\n                    callback.onSuccess(bean)\n                } catch (e: JSONException) {\n                    e.printStackTrace()\n                }\n            }\n        })\n    }\n</code></pre>\n<h4><a id=\"_571\"></a>解析未来七天天气预报</h4>\n<p>同样返回的是数组数据，完成数据解析并回调；值得注意的是，如果有存在重复的城市名称，返回的数据也是多份，例如请求的城市名称并不精准，本来想请求张家界的天气数据，但是只输入张家二字，系统后台会返回张家界和张家口的数据，所以我们默认取第一个数据源</p>\n<pre><code>   /**\n     * 获取未来七天天气情况（包括今天）\n     */\n     fun getFuture7Weather(location: String,callback: WeatherCallback_7D) {\n        val url = HttpUtils.getInstance().getFuture7Url(location, 7)\n        Log.d(TAG, \"url = $url\")\n        HttpUtils.getInstance().Post(url, object : HttpCallback {\n            override fun onFailed(ErrorCode: Int) {\n                callback.onFailed(ErrorCode)\n            }\n            override fun onResponse(JSONData: String) {\n                if (TextUtils.isEmpty(JSONData)) {\n                    callback.onFailed(0)\n                    return\n                }\n                Log.d(TAG, \"future7 = $JSONData\")\n                try {\n                    val jsonObject = JSONObject(JSONData)\n                    val jsonArray = jsonObject.getJSONArray(\"results\")\n                    val future7 = jsonArray.getJSONObject(0).getJSONArray(\"daily\")\n                    val bean: MutableList&lt;WFuture7Bean&gt;? = HttpUtils.getInstance().fromListJson(\n                        future7.toString(),\n                        WFuture7Bean::class.java\n                    )\n                    callback.onSuccess(bean)\n                } catch (e: JSONException) {\n                    e.printStackTrace()\n                }\n            }\n        })\n    }\n</code></pre>\n<h3><a id=\"_606\"></a>初始化天气详情页</h3>\n<h4><a id=\"_607\"></a>获取当前位置</h4>\n<p>为了减轻app负重，并未采用高德、百度等API进行位置定位，采用原始的定位方式，使用网络方式进行定位</p>\n<h5><a id=\"_609\"></a>获取经纬度</h5>\n<p>获取位置信息需要动态申请位置权限</p>\n<pre><code>public String getLocationInfo() {\n        if (ActivityCompat.checkSelfPermission(BaseApplication.context,Group_Location[0]) != PackageManager.PERMISSION_GRANTED &amp;&amp; ActivityCompat.checkSelfPermission(BaseApplication.context, Group_Location[1]) != PackageManager.PERMISSION_GRANTED) {\n            Log.d(TAG, \"Don't apply for these permission\");\n            return null;\n        }\n\n        String strLocation = null;\n        try {\n            //获取系统的服务，\n            locationManager = (LocationManager) BaseApplication.context.getSystemService(Context.LOCATION_SERVICE);\n            //创建一个criteria对象\n            Criteria criteria = new Criteria();\n            criteria.setAccuracy(Criteria.ACCURACY_COARSE);\n            //设置不需要获取海拔方向数据\n            criteria.setAltitudeRequired(false);\n            criteria.setBearingRequired(false);\n            //设置允许产生资费\n            criteria.setCostAllowed(true);\n            //要求低耗电\n            criteria.setPowerRequirement(Criteria.POWER_LOW);\n            String provider = locationManager.getBestProvider(criteria, true);\n            Location location = locationManager.getLastKnownLocation(provider);\n\n            if (location == null)return null;\n\n            //strLocation =  location.getLongitude()+\",\"+location.getLatitude();\n            strLocation = convertAddress(BaseApplication.context, location.getLatitude(), location.getLongitude());\n            Log.d(TAG, \"location is = \" + strLocation);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return strLocation;\n    }\n</code></pre>\n<h5><a id=\"_648\"></a>经纬度转为地理信息</h5>\n<p>将经纬度转为具体地理信息，由于心知天气API需要提供城市级城市数据，所以我们只需要xx市数据即可</p>\n<pre><code> private String convertAddress(Context context, double latitude, double longitude) {\n        Geocoder mGeocoder = new Geocoder(context, Locale.getDefault());\n        try {\n            List&lt;Address&gt; mAddresses = mGeocoder.getFromLocation(latitude, longitude, 1);\n            if (mAddresses != null &amp;&amp; mAddresses.size() &gt; 0) {\n                Address address = mAddresses.get(0);\n                Log.d(TAG, \"国家 is \" + address.getCountryName());\n                Log.d(TAG, \"省 is \" + address.getAdminArea());\n                Log.d(TAG, \"市 is \" + address.getLocality());\n                Log.d(TAG, \"区/县 is \" + address.getSubLocality());\n                Log.d(TAG, \"具体 is \" + address.getFeatureName());\n                return  address.getLocality();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n</code></pre>\n<h4><a id=\"_670\"></a>页面初始化</h4>\n<p>详情页采用的是viewPager添加多个views实现页面滑动；<br/> 首先获取数据库内所有存储的城市名称，然后通过get模式获取天气的网络数据，然后填充到adapter中；需要注意的是获取的本地位置在整个app都较为特殊，与其他添加的城市数据存在差距，因为需要改变其显示状态，具体后文会提交，所以并未将此添加到数据库中。</p>\n<pre><code>private void initViewPager(){\n        dao = new Dao(this);\n        locationList = dao.QueryAll();\n        location = LocationUtils.getInstance().getLocationInfo();\n\n        if (locationList == null || locationList.size() == 0){\n            locationList = new ArrayList&lt;&gt;();\n            locationList.add(location);\n        }else {\n            locationList.add(0,location);\n        }\n\n        for (int i = 0; i &lt; locationList.size(); i++) {\n            Message message = new Message();\n            message.what = WEATHER_Start;\n            message.obj = locationList.get(i);\n            handler.sendMessage(message);\n        }\n\n        adapter.notifyDataSetChanged();\n    }\n</code></pre>\n<p>单个页面初始化，通过遍历，将所有页面进行填充；每个界面背景图片会根据心知天气返回天气状态发生变化，由于素材有限，只适配了较为常见的几种状态，例如：晴、多云、阴、雨、雪、雷</p>\n<pre><code> /**\n     * viewPager页面添加，包括实况天气数据、预期24小时、预报7天*/\n    private void addView(String location){\n        View view = LayoutInflater.from(this).inflate(R.layout.activity_main,null,false);\n\n        LinearLayout weatherLayout;\n        TextView weatherLocation,weatherTemp,weatherStatus,weatherWindDirection,weatherWindSpeed,weatherCloud,weatherFellLikes,weatherHum,weatherVisibility,weatherPressure;\n        RecyclerView weather7D,weather24H;\n\n        weatherLayout = view.findViewById(R.id.mainLinearLayout);\n        weatherLocation = view.findViewById(R.id.normal_city);\n        weatherTemp = view.findViewById(R.id.normal_temp);\n        weatherStatus = view.findViewById(R.id.normal_status);\n        weatherWindDirection = view.findViewById(R.id.windDirection);\n        weatherWindSpeed = view.findViewById(R.id.windSpeed);\n        weatherCloud = view.findViewById(R.id.cloud);\n        weatherFellLikes = view.findViewById(R.id.bodyTmp);\n        weatherHum = view.findViewById(R.id.hum);\n        weatherVisibility = view.findViewById(R.id.visibility);\n        weatherPressure = view.findViewById(R.id.pressure);\n        weather7D = view.findViewById(R.id.Recycler_7D);\n        weather24H = view.findViewById(R.id.Recycler_24H);\n\n\n        List&lt;WHourly24Bean&gt; hourlyBeanList = new ArrayList&lt;&gt;();\n        List&lt;WFuture7Bean&gt; dailyBeanList = new ArrayList&lt;&gt;();\n\n        weather24H.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false));\n        Weather24HAdapter  adapter24H = new Weather24HAdapter(hourlyBeanList);\n        weather24H.setAdapter(adapter24H);\n\n        weather7D.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false));\n        Weather7DAdapter adapter7D = new Weather7DAdapter(dailyBeanList);\n        weather7D.setAdapter(adapter7D);\n\n        viewList.add(view);\n        titleList.add(location);\n\n        adapter.notifyDataSetChanged();\n\n        weatherLocation.setText(location);\n\n\n        JsonUtils.INSTANCE.getNowWeather(location, new WeatherCallback_now() {\n            @Override\n            public void onFailed(int ErrorCode) {\n\n            }\n\n            @Override\n            public void onSuccess(WRealTimeBean bean) {\n                if (bean != null){\n                    runOnUiThread(()-&gt;{\n                        weatherTemp.setText(bean.getTemperature() + \"°\");//温度\n                        weatherStatus.setText(bean.getText());//天气状态\n                        weatherWindSpeed.setText(bean.getWindSpeed() + \"km/h\");//风速\n                        weatherWindDirection.setText(bean.getWindDirection()+bean.getWindDirectionDegree()+ \"°\");//风向\n                        weatherCloud.setText(bean.getClouds() + \"%\");//云量\n                        weatherFellLikes.setText(bean.getFeelsLike() + \"°\");//体感温度\n                        weatherHum.setText(bean.getHumidity() + \"%\");//湿度\n                        weatherVisibility.setText(bean.getVisibility() + \"km\");//可见度\n                        weatherPressure.setText(bean.getPressure() + \"mb\");//气压\n\n                        switch (bean.getText()){\n                            case \"晴\":weatherLayout.setBackground(getDrawable(R.drawable.icon_bg_sunny));break;\n                            case \"多云\":weatherLayout.setBackground(getDrawable(R.drawable.icon_bg_cloudy));break;\n                            case \"阴\":weatherLayout.setBackground(getDrawable(R.drawable.icon_bg_cloudy));break;\n                            case \"雨\":weatherLayout.setBackground(getDrawable(R.drawable.icon_bg_big_rain));break;\n                            case \"雪\":weatherLayout.setBackground(getDrawable(R.drawable.icon_bg_snow));break;\n                            case \"雷\":weatherLayout.setBackground(getDrawable(R.drawable.icon_bg_thunder));break;\n                        }\n                    });\n                }else {\n                    Log.d(TAG,\"bean is empty\");\n                }\n            }\n        });\n\n        JsonUtils.INSTANCE.getFuture7Weather(location, new WeatherCallback_7D() {\n            @Override\n            public void onFailed(int ErrorCode) {\n\n            }\n\n            @Override\n            public void onSuccess(List&lt;WFuture7Bean&gt; beanList) {\n                if (beanList != null &amp;&amp; beanList.size() &gt; 0){\n                    if (dailyBeanList != null &amp;&amp; dailyBeanList.size() &gt; 0){\n                        dailyBeanList.clear();\n                    }\n                    dailyBeanList.addAll(beanList);\n                    runOnUiThread(()-&gt;{\n                        adapter7D.notifyDataSetChanged();\n                    });\n                }\n            }\n        });\n\n        JsonUtils.INSTANCE.getHourly24Weather(location, new WeatherCallback_24H() {\n            @Override\n            public void onFailed(int ErrorCode) {\n\n            }\n\n            @Override\n            public void onSuccess(List&lt;WHourly24Bean&gt; beanList) {\n                if (beanList != null &amp;&amp; beanList.size() &gt; 0){\n                    if (hourlyBeanList != null &amp;&amp; hourlyBeanList.size() &gt; 0){\n                        hourlyBeanList.clear();\n                    }\n                    hourlyBeanList.addAll(beanList);\n                    runOnUiThread(()-&gt;{\n                        adapter24H.notifyDataSetChanged();\n                    });\n                }\n            }\n        });\n    }\n</code></pre>\n<h4><a id=\"ViewPager_818\"></a>ViewPager子页面编辑</h4>\n<p>view添加和删除都是通过EventBus进行监听，然后操作adapter完成操作</p>\n<pre><code> /**\n     * 在城市页面进行数据添加或删除，使用EventBus进行监测*/\n    @Subscribe(threadMode = ThreadMode.MAIN,sticky = true)\n    public void onEvent(LocationBusBean bean){\n        if (bean != null){\n            if (bean.getDeletePos() == -1){\n                addView(bean.getLocation());\n                updateIndicator();\n            }else {\n                removeView(bean.getLocation());\n            }\n        }\n    }\n</code></pre>\n<h5><a id=\"_835\"></a>页面添加</h5>\n<p>此功能就是重复调用单个views初始化方法，然后使用adapter进行notify和更新指示器即可</p>\n<h5><a id=\"_837\"></a>页面删除</h5>\n<p>通过从天气编辑页面点击的城市子项，传过来的城市数据，然后与views存在的数据进行匹配，然后删除对应的界面</p>\n<pre><code>   /**\n     * 删除viewPager子项*/\n    private void removeView(String location){\n        int position = titleList.indexOf(location);\n        if (position != -1){\n            viewList.remove(position);\n            titleList.remove(position);\n            adapter.notifyDataSetChanged();\n        }\n\n        updateIndicator();\n    }\n</code></pre>\n<h4><a id=\"_853\"></a>指示器</h4>\n<p>指示器是通过两个xml定义不同的圆，然后通过selector文件进行选择，使用一个<code>LinearLayout</code>控件作为指示器控件，通过传入的指示器个数，添加多个view，然后设置背景为selector文件，通过设置其<code>enable</code>属性，改变圆形状态</p>\n<pre><code>  private void updateIndicator(){\n        binding.indicatorLayout.removeAllViews();\n        List&lt;String&gt; list = dao.QueryAll();\n\n        /**\n         * 因为有一个本地位置，所以需要+1*/\n        int size = 1;\n        if (list != null){\n            size = list.size()+1;\n        }\n        for (int i = 0; i &lt; size; i++) {\n            View view = new View(this);\n            view.setBackgroundResource(R.drawable.selector_indicator);\n            view.setEnabled(false);\n            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(30,30);\n            params.rightMargin = 15;\n            params.leftMargin = 15;\n            binding.indicatorLayout.addView(view,params);\n        }\n    }\n</code></pre>\n<h2><a id=\"_878\"></a>天气编辑页</h2>\n<p>此页面功能包括searchView和listView匹配搜索、城市天津、城市天气简单版子项显示、天气子项编辑等功能</p>\n<h3><a id=\"_880\"></a>效果图</h3>\n<img src=\"..\\..\\static\\image\\db2ef3d60407463c8184df5d0bc9eab2.jpeg\" width=\"30%\"/>\n<pre><code>\n</code></pre>\n<img src=\"..\\..\\static\\image\\477e18555e41408abdfa535ad63b1414.jpeg\" width=\"30%\"/>\n<h3><a id=\"_889\"></a>简版天气数据</h3>\n<p>此数据与天气详情页数据请求一致，只是数据更为简单，值得注意的是，从天气详情页传过来的城市，并不显示其具体名称，而是以<code>我的位置</code>代替，因为是子线程加载，获取的数据排列方式不一，所以在展示数据时，需要将本地数据一列移到到最前方。</p>\n<h4><a id=\"_892\"></a>获取数据并初始化</h4>\n<pre><code>/**\n     * 获取所以数据库中城市的天气*/\n    private void getWeatherData() {\n        if (dao == null) {\n            dao = new Dao(this);\n        }\n\n        beanList.clear();//防止数据重复\n\n        List&lt;String&gt; locationList = dao.QueryAll();\n        if (locationList == null || locationList.size() == 0) {\n            locationList = new ArrayList&lt;&gt;();\n        }\n\n        if (locationList.size() &gt; 0) {\n            String data = locationList.get(0);\n            if (!data.equals(location)) {\n                locationList.add(0, location);\n            }\n        }else {\n            locationList.add(location);\n        }\n\n        for (int i = 0; i &lt; locationList.size(); i++) {\n            postWeather(locationList.get(i), locationList.size());\n        }\n    }\n</code></pre>\n<h4><a id=\"_923\"></a>子项删除</h4>\n<p>通过<code>EventBus</code>通知天气详情页进行更新</p>\n<pre><code>adapter.setDelItemClickListener(new LocationAdapter.OnWeatherItemsClickListener() {\n            @Override\n            public void onClickListener(int pos, String location) {\n                beanList.remove(pos);\n                dao.Delete(location);\n                adapter.notifyDataSetChanged();\n\n                EventBus.getDefault().postSticky(new LocationBusBean(location, pos));\n            }\n        });\n</code></pre>\n<h3><a id=\"_937\"></a>搜索</h3>\n<h4><a id=\"_938\"></a>效果图</h4>\n<img src=\"..\\..\\static\\image\\3c79fb1ee26a4729b5bc3ef8537bf078.jpeg\" width=\"40%\"/>\n<h4><a id=\"SearchView_942\"></a>更改SearchView背景和字体样式</h4>\n<p>定义一个xml文件，然后在SearchView的background属性引用即可改变其背景</p>\n<pre><code> android:background=\"@drawable/searchview_bg\"\n</code></pre>\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;shape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:shape=\"rectangle\"&gt;\n    &lt;corners android:radius=\"10dp\" /&gt;\n    &lt;solid android:color=\"@color/searchViewBg\" /&gt;\n&lt;/shape&gt;\n</code></pre>\n<p>更改SearchView字体颜色，需要获取其内置的一个控件id，然后通过EditText进行改变即可，TextView也可以</p>\n<pre><code> /**\n     * 更改searchView字体颜色\n     */\n    private void initSearchViewStyle() {\n        EditText editText = (EditText) binding.searchView.findViewById(androidx.appcompat.R.id.search_src_text);\n        if (editText != null) {\n            editText.setTextColor(getColor(R.color.white));\n            editText.setHintTextColor(getColor(R.color.searchHintColor));\n            editText.setTextSize(14);\n\n            SearchManager searchManager = (SearchManager) getSystemService(SEARCH_SERVICE);\n            binding.searchView.setSearchableInfo(searchManager.getSearchableInfo(getComponentName()));\n        } else {\n            Log.d(\"MoreLocationActivity\", \"empty\");\n        }\n    }\n</code></pre>\n<h4><a id=\"_976\"></a>搜索初始化</h4>\n<p>重点在于xml城市列表文件，然后采用默认的adapter作为适配</p>\n<pre><code>private void initListView() {\n        String[] cityArray = getResources().getStringArray(R.array.city);\n        binding.locationList.setAdapter(new ArrayAdapter(this, R.layout.searchview_item, cityArray));\n        /**\n         * 属性为true表示listview获得当前焦点的时候，与相应用户输入的匹配符进行比对，筛选出匹配的ListView的列表中的项*/\n        binding.locationList.setTextFilterEnabled(true);\n        binding.searchView.setOnQueryTextListener(this);\n        binding.searchView.setSubmitButtonEnabled(false);\n\n        binding.locationList.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n            @Override\n            public void onItemClick(AdapterView&lt;?&gt; adapterView, View view, int i, long l) {\n                String str = adapterView.getAdapter().getItem(i).toString();\n                if (dao == null) {\n                    dao = new Dao(MoreLocationActivity.this);\n                }\n                boolean flag = dao.Query(str);\n                if (flag) {\n                    Toast.makeText(MoreLocationActivity.this, \"该城市已添加到天气列表，请勿重复添加\", Toast.LENGTH_SHORT).show();\n                } else {\n                    dao.Insert(str);\n                    EventBus.getDefault().postSticky(new LocationBusBean(str, -1));\n                    handler.sendEmptyMessage(1);\n                    Toast.makeText(MoreLocationActivity.this, \"添加成功\", Toast.LENGTH_SHORT).show();\n                }\n                binding.locationList.clearTextFilter();\n                binding.locationList.setVisibility(View.GONE);\n            }\n        });\n    }\n</code></pre>\n<h4><a id=\"_1010\"></a>搜索字符监听</h4>\n<p>一开始那个提示黑框就比较呆，所以可以通过后面语句进行隐藏，因为搜索列表是覆盖简版天气子项的，所以当搜索列表显示时，天气简版隐藏，反之，亦然；</p>\n<pre><code> @Override\n    public boolean onQueryTextSubmit(String query) {\n        return false;\n    }\n\n    @Override\n    public boolean onQueryTextChange(String newText) {\n        if (TextUtils.isEmpty(newText)) {\n            binding.locationList.clearTextFilter();\n            binding.locationList.setVisibility(View.GONE);\n        } else {\n            binding.locationList.setVisibility(View.VISIBLE);\n            binding.locationList.setFilterText(newText);\n            //隐藏黑框\n            binding.locationList.dispatchDisplayHint(View.INVISIBLE);\n        }\n        return true;\n    }\n</code></pre>\n<h1><a id=\"_1032\"></a>下载地址</h1>\n<p><a href=\"https://gitee.com/FranzLiszt1847/easy-weather\">Gitte下载链接</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-09-02 23:27:02", "summary": "一个简单的天气效果演示视频简述天气数据实况天气逐小时天气预报未来七天天气预报天气详情页效果图获取数据请求实况天气逐小时天气预报未来七天天气预报解析数据解析实况天气数据解析逐小时天气预报解析未来七天天气"}