{"blogid": "122355201", "writerAge": "码龄2年", "writerBlogNum": "10", "writerCollect": "112", "writerComment": "3", "writerFan": "2", "writerGrade": "2级", "writerIntegral": "146", "writerName": "大局观的小老虎", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122355201.jpg", "writerRankTotal": "207638", "writerRankWeekly": "1010313", "writerThumb": "41", "writerVisitNum": "26820", "blog_read_count": "22302", "blog_time": "于 2022-01-06 23:20:24 发布", "blog_title": "@PostConstruct注解详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>初始化方式一：@PostConstruct注解</h1>\n<p>        假设类<strong>UserController</strong>有个成员变量<strong>UserService</strong>被<strong>@Autowired</strong>修饰，那么UserService的注入是在UserController的构造方法之后执行的。</p>\n<p>        如果想在UserController对象生成时候完成某些初始化操作，而偏偏这些初始化操作又依赖于依赖注入的对象，那么就无法在构造函数中实现（ps：spring启动时初始化异常），例如：</p>\n<pre><code>public class UserController {\n\t@Autowired\n\tprivate UserService userService;\n\n\tpublic UserController() {\n\t\t// 调用userService的自定义初始化方法，此时userService为null，报错\n\t\tuserService.userServiceInit();\n\t}\n}</code></pre>\n<p>        因此，可以使用@PostConstruct注解来完成初始化，@PostConstruct注解的方法将会在UserService注入完成后被自动调用。</p>\n<pre><code>public class UserController {\n\t@Autowired\n\tprivate UserService userService;\n\n\tpublic UserController() {\n\t}\n\n\t// 初始化方法\n\t@PostConstruct\n\tpublic void init(){\n\t\tuserService.userServiceInit();\n\t}\n}</code></pre>\n<p><strong>  总结：</strong>类初始化调用顺序：</p>\n<p>（1）构造方法Constructor</p>\n<p>（2）@Autowired</p>\n<p>（3）@PostConstruct</p>\n<h1>初始化方式二：实现InitializingBean接口</h1>\n<p>        除了采用注解完成初始化，也可以通过实现InitializingBean完成类的初始化</p>\n<pre><code>public class UserController implements InitializingBean {\n\t@Autowired\n\tprivate UserService userService;\n\n\tpublic UserController() {\n\t}\n\n\t// 初始化方法\n\t@Override\n\tpublic void afterPropertiesSet() throws Exception {\n\t\tuserService.userServiceInit();\n\t}\n}</code></pre>\n<p>        比较常见的如SqlSessionFactoryBean，它就是通过实现InitializingBean完成初始化的。</p>\n<pre><code>@Override\npublic void afterPropertiesSet() throws Exception {\n // buildSqlSessionFactory()是完成初始化的核心方法，必须在构造方法调用后执行\n this.sqlSessionFactory = buildSqlSessionFactory(); \n}</code></pre>\n</div>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 0, "time": "2022-01-06 23:20:24", "summary": "初始化方式一：注解假设类有个成员变量被修饰，那么的注入是在的构造方法之后执行的。如果想在对象生成时候完成某些初始化操作，而偏偏这些初始化操作又依赖于依赖注入的对象，那么就无法在构造函数中实现：启动时初"}