{"blogid": "124984295", "writerAge": "码龄4年", "writerBlogNum": "78", "writerCollect": "306", "writerComment": "107", "writerFan": "1150", "writerGrade": "4级", "writerIntegral": "1409", "writerName": "菜菜菜三菜", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124984295.jpg", "writerRankTotal": "18057", "writerRankWeekly": "32468", "writerThumb": "89", "writerVisitNum": "149876", "blog_read_count": "4197", "blog_time": "已于 2022-06-30 16:07:21 修改", "blog_title": "yolov5检测小目标（附源码）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"yolov5_0\"></a>yolov5小目标检测（图像切割法附源码）</h2>\n<h5><a id=\"630_label_1\"></a>6.30 更新切割后的小图片的label数据处理</h5>\n<h3><a id=\"_2\"></a>前言</h3>\n<p>yolov5大家都熟悉，通用性很强，但针对一些小目标检测的效果很差。<br/> YOLOv5算法在训练模型的过程中，默认设置的图片大小为640x640像素(img-size)，为了检测小目标时，如果只是简单地将img-size改为4000*4000大小，那么所需要的内存会变得非常之大，几乎没有可行性。<br/> 以下是对6k * 4k的图片，进行小目标检测训练结果，八张图一个字：烂<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\83acd4a59f0546ec8b8947788cb822cc.png\"/><br/> 数据集（路面标志）：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b253f129ffb84471a0ea5f13b9824381.png\"/></p>\n<h3><a id=\"_9\"></a>图像切割</h3>\n<p>最简单的方法就是把这个大图片切割成小图片，参考开源框架SAHI<a href=\"https://github.com/obss/sahi\">[1]</a><br/> 几个问题：</p>\n<blockquote>\n<p>1、简单切割，要保证切割后每张图片大小一致；<br/> 2、切割过程难免会切掉目标，需要设置“融合”区域；<br/> 3、切割后的数据集是小图片的数据集，那么同样，目标检测的时候也只能检测小图片。那就要对检测之后的小图片做合并处理。（麻烦）</p>\n</blockquote>\n<h4><a id=\"1_16\"></a>1、图像切割</h4>\n<p>大体结构图：<br/> 其中蓝绿色是切割后的4*4=16张子图，红蓝框的部分是融合图，混合比例0.2<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\78014201221c46b89956808ebcdd5676.png\"/></p>\n<p>这个简单，参考博客<a href=\"https://blog.csdn.net/qq_43622870/article/details/123970530\">python切割图片</a>，用opencv切割就行，注意同时要切割好融合部分的图片。</p>\n<pre><code class=\"prism language-py\"><span class=\"token comment\"># 融合部分图片</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">img_mix</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> row_height<span class=\"token punctuation\">,</span> col_width<span class=\"token punctuation\">,</span> save_path<span class=\"token punctuation\">,</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    mix_num <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n    <span class=\"token comment\"># 每行的高度和每列的宽度</span>\n\n    <span class=\"token comment\"># 分割成4*4就是有</span>\n    <span class=\"token comment\"># 4*3个行融合区域</span>\n    <span class=\"token comment\"># 3*4个列融合区域</span>\n    <span class=\"token comment\"># 一行的融合</span>\n    row <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>mix_num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        mix_height_start <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> row_height\n        mix_height_end <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> row_height\n        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>mix_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            mix_row_path <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">file</span> <span class=\"token operator\">+</span> <span class=\"token string\">'_mix_row_'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'.jpg'</span>\n            mix_row_start <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">*</span> col_width <span class=\"token operator\">+</span> col_width <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> mix_percent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            mix_row_end <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>mix_row_start <span class=\"token operator\">+</span> col_width <span class=\"token operator\">*</span> mix_percent <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># print(mix_height_start, mix_height_end, mix_row_start, mix_row_end)</span>\n            mix_row_img <span class=\"token operator\">=</span> img<span class=\"token punctuation\">[</span>mix_height_start<span class=\"token punctuation\">:</span>mix_height_end<span class=\"token punctuation\">,</span> mix_row_start<span class=\"token punctuation\">:</span>mix_row_end<span class=\"token punctuation\">]</span>\n            cv2<span class=\"token punctuation\">.</span>imwrite<span class=\"token punctuation\">(</span>mix_row_path<span class=\"token punctuation\">,</span> mix_row_img<span class=\"token punctuation\">)</span>\n            row <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    col <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token comment\"># 一列的融合</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>mix_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        mix_col_start <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> row_height <span class=\"token operator\">+</span> row_height <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> mix_percent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        mix_col_end <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>mix_col_start <span class=\"token operator\">+</span> row_height <span class=\"token operator\">*</span> mix_percent <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>mix_num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            mix_col_path <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">file</span> <span class=\"token operator\">+</span> <span class=\"token string\">'_mix_col_'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'.jpg'</span>\n            mix_width_start <span class=\"token operator\">=</span> j <span class=\"token operator\">*</span> col_width\n            mix_width_end <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> col_width\n            <span class=\"token comment\"># print(mix_col_start, mix_col_end, mix_width_start, mix_width_end)</span>\n            mix_col_img <span class=\"token operator\">=</span> img<span class=\"token punctuation\">[</span>mix_col_start<span class=\"token punctuation\">:</span>mix_col_end<span class=\"token punctuation\">,</span> mix_width_start<span class=\"token punctuation\">:</span>mix_width_end<span class=\"token punctuation\">]</span>\n            cv2<span class=\"token punctuation\">.</span>imwrite<span class=\"token punctuation\">(</span>mix_col_path<span class=\"token punctuation\">,</span> mix_col_img<span class=\"token punctuation\">)</span>\n            col <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n</code></pre>\n<h5><a id=\"label_60\"></a>切割成小图片后，label处理部分</h5>\n<p>本人是从xml文件中直接读取目标数据，代码：get_xml_data.py<br/> 在读取成功之后先保存成一个txt文件格式，所存储的数据为</p>\n<pre><code>图片类型（0：子图，1：行融合图，2：列融合图）\n小图所处位置（0~15）\n小图文件名\n大图宽度\n大图高度\n目标类型\nx最小值\nx最大值\ny最小值\ny最大值\n</code></pre>\n<p>读取后得到的结果如下<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\31d0564a372d42ba969310a988d91069.png\"/><br/> 接下来还要进一步解析这些数据，代码：txt_to_yolo.py<br/> 现在已知：小图位置、每种小图宽高、大图宽高，那么就可以定位目标在小图片上的位置<br/> 例如：<br/> 假设下图宽高为100，右上小框在右上部分的中心，的宽高为10，此时小框的位置信息是<br/> xmin=70, xmax=80<br/> ymin=20, ymax=30<br/> 位于第1号子图上（编号0~3）<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\754e8af9786e454db81fa1cdea1a6295.png\"/><br/> 那么就右上角的一小部分而言，小款的位置信息是<br/> xmin=20, xmax=30<br/> ymin=20, ymax=30<br/> 根据这个思路，就可以很好地处理其他数据。</p>\n<h4><a id=\"2_89\"></a>2、目标检测</h4>\n<p>没啥好说的这个，图片切割后把yolov5的图片训练路径、检测路径改成切割后的图片就好。<br/> 注意一点<br/> 训练的时候有 融合图 ， 检测的时候没有（因为我没做融合图的检测，容易和子图之间产生重复，比较是机器检测的结果）<br/> 更改路径：直接在 <code>def run()</code>下面更改路径，如detect.py:<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ce8f84e466f94c8cad2e8e7b2563a2a2.png\"/><br/> 检测结果：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8244f700a942482e9757976a7272dfb7.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\77050f419c1f48fa9fc41168b73a2d3e.png\"/></p>\n<h4><a id=\"3_99\"></a>3、融合</h4>\n<p>这个说难不难，说简单也不简单<br/> 主要是要思路清晰</p>\n<blockquote>\n<p>1、需要定位每一张图片所在的位置（比如切割成4*4，总共有16个位置）<br/> 2、根据每一个位置，对每一张图片的检测结果（txt文件）内容进行相应处理，处理成在大图中对应的位置，比如位置是 右上角(0, 3)， 那么该图片中检测到的结果的x值都应该加上 (3 * 大图宽度/4)，再重新转换成yolov5的标注格式</p>\n</blockquote>\n<p>差不多就这样子？<br/> 融合结果<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5a4b357ffac34dcc9917b0d375ad511a.png\"/></p>\n<h4><a id=\"4_109\"></a>4、结果观察</h4>\n<p>前面说到，这里的训练和检测都是基于小图片进行，那么就不好直接观察结果如何（检测图片上的框）<br/> 那么可以针对融合的txt文件结果，在原图上直接用 ImageDraw 画一个框<br/> 结果还不错<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ed9580a96a8741d6b4a1dff9b0e64575.jpeg\"/></p>\n<h3><a id=\"_116\"></a>训练结果</h3>\n<p>看看训练结果<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cc88814480f246098e7f397c0ed8e6c6.png\"/></p>\n<h3><a id=\"_120\"></a>其他</h3>\n<p>也可以参考一些类似的项目<br/> yolov5-tph： <a href=\"https://github.com/Gumpest/YOLOv5-Multibackbone-Compression\">https://github.com/Gumpest/YOLOv5-Multibackbone-Compression</a><br/> yolov-z<br/> 还有什么增加小目标检测层（感觉不通用，试了下除了增加训练时间之外，效果也一般般）</p>\n<h4><a id=\"_126\"></a>相关文件：</h4>\n<p>配置文件： config.py<br/> 裁剪图片： cut_image.py<br/> 读取xml数据： get_xml_data.py<br/> 裁剪label数据： txt_to_yolo.py<br/> 融合图片： joint_image.py<br/> 原图画框： draw_box.py<br/> 主函数： main.py<br/> <a href=\"https://download.csdn.net/download/qq_43622870/85566161\">下载地址①</a><br/> <a href=\"http://www.lemong.top/download/yolov5-small-630.zip\">文件下载地址②</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-06-30 16:07:21", "summary": "小目标检测图像切割法附源码更新切割后的小图片的数据处理前言大家都熟悉，通用性很强，但针对一些小目标检测的效果很差。算法在训练模型的过程中，默认设置的图片大小为像素，为了检测小目标时，如果只是简单地将改"}