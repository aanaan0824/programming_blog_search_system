{"blogid": "126605920", "writerAge": "码龄1年", "writerBlogNum": "25", "writerCollect": "246", "writerComment": "431", "writerFan": "715", "writerGrade": "4级", "writerIntegral": "1562", "writerName": "yy_上上谦", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126605920.jpg", "writerRankTotal": "12060", "writerRankWeekly": "1224", "writerThumb": "576", "writerVisitNum": "21630", "blog_read_count": "486", "blog_time": "已于 2022-08-31 19:36:00 修改", "blog_title": "【C++】内存管理 + 初识模板", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#x1F4D6_1\">📖前言</a></li><li><a href=\"#1_CC_4\">1. C/C++内存管理</a></li><li><ul><li><ul><li><a href=\"#11_C_5\">1.1 C语言的内存管理回顾：</a></li><li><a href=\"#12_C_44\">1.2 C++的内存管理：</a></li><li><a href=\"#13_C_221\">1.3 C++开空间失败了的情况：</a></li><li><a href=\"#14_operator_new__operator_delete_268\">1.4 operator new 和 operator delete：</a></li><li><a href=\"#15_new_354\">1.5 定位new：（了解）</a></li></ul>\n</li></ul>\n</li><li><a href=\"#2__390\">2. 模板</a></li><li><ul><li><ul><li><a href=\"#21__391\">2.1 模板的引入：</a></li><li><a href=\"#22__406\">2.2 函数模板的使用：</a></li><li><a href=\"#23__446\">2.3 类模板的使用：</a></li><li><a href=\"#24__530\">2.4 模板和函数的联系和区别:</a></li><li><a href=\"#25__567\">2.5 函数模板/类模板的声明和定义分离：</a></li><li><a href=\"#26__627\">2.6 模板的隐式类型转换：</a></li><li><a href=\"#27__658\">2.7 多个模板参数：</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"x1F4D6_1\"></a>📖前言</h1>\n<p><strong>本章将介绍C++的内存管理方式和泛型编程思想中的模板…</strong></p>\n<hr/>\n<h1><a id=\"1_CC_4\"></a>1. C/C++内存管理</h1>\n<h3><a id=\"11_C_5\"></a>1.1 C语言的内存管理回顾：</h3>\n<p>在我们之前学C语言的过程中，已经接触过了<strong>动态内存管理</strong>，我们当时用的是使用C语言的方式。</p>\n<ul><li class=\"task-list-item\"><input checked=\"true\" class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> <strong><font color=\"blue\">malloc</font></strong></li></ul>\n<p><font color=\"green\" size=\"5\"><em>void</em> * <em>malloc (size_t size)</em></font></p>\n<ul><li><strong>这个函数向内存申请一块连续可用的空间，并返回指向这块空间的指针。</strong></li><li>如果开辟成功，则返回一个<strong>指向开辟好空间的指针</strong>。</li><li>如果开辟失败，则返回一个<strong>NULL指针</strong>，因此malloc的返回值一定要做检查。</li><li>返回值的类型是 void* ，所以<strong>malloc函数并不知道开辟空间的类型</strong>，具体在使用的时候使用者自<br/> 己来决定。</li><li>如果参数 size 为0，malloc的行为是标准是未定义的，取决于编译器。</li></ul>\n<p><strong>同时配合着free函数一起使用，申请 — 释放空间</strong></p>\n<p><font color=\"green\" size=\"5\"><em>void free</em> <em>(void</em> * <em>ptr);</em></font></p>\n<ul><li>如果参数 ptr 指向的空间不是动态开辟的，那free函数的行为是未定义的。</li><li>如果参数 ptr 是NULL指针，则函数什么事都不做。</li></ul>\n<ul><li class=\"task-list-item\"><input checked=\"true\" class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> <strong><font color=\"blue\">calloc</font></strong></li></ul>\n<p><font color=\"green\" size=\"5\"><em>void</em> * <em>calloc (size_t num, size_t size);</em></font></p>\n<ul><li>函数的功能是为 num 个大小为 size 的元素开辟一块空间，<strong>并且把空间的每个字节初始化为0</strong>。</li><li>与函数 malloc 的区别只在于 calloc 会<strong>在返回地址之前把申请的空间的每个字节初始化为全0</strong>。</li></ul>\n<ul><li class=\"task-list-item\"><input checked=\"true\" class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> <strong><font color=\"blue\">realloc</font></strong></li></ul>\n<p><font color=\"green\" size=\"5\"><em>void</em> * <em>realloc (void</em> ptr, size_t size);*</font></p>\n<ul><li>ptr 是要调整的内存地址</li><li>size 调整之后新大小</li><li>返回值为调整之后的内存起始位置。</li><li>这个函数调整原内存空间大小的基础上，还会将原来内存中的数据移动到新的空间</li></ul>\n<p><strong>情况1：原有空间之后有足够大的空间，就地扩容。</strong></p>\n<p><strong>情况2：原有空间之后没有足够大的空间，异地扩容，需要改变ptr指针。</strong></p>\n<hr/>\n<h3><a id=\"12_C_44\"></a>1.2 C++的内存管理：</h3>\n<p>C语言内存管理方式在C++中可以继续使用，但有些地方就无能为力，而且使用起来比较麻烦，因<br/> 此C++又提出了自己的内存管理方式：<strong>通过new和delete操作符进行动态内存管理</strong>。</p>\n<p>1.<strong>new 和 malloc的区别：</strong></p>\n<ul><li>对于<strong>内置类型而言</strong>，用malloc和new，除了用法不同，没有本质区别</li><li>它们区别在于<strong>自定义类型</strong></li><li><strong>malloc只开空间，new开空间 + 调用构造函数初始化</strong></li></ul>\n<p><strong><font color=\"green\">图解：</font></strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\56ad10ce44bb48dfa810e45f37d5104c.png\"/><br/> 2.<strong>正常使用的代码如下：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tListNode<span class=\"token operator\">*</span> _next<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _val<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">_next</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">_val</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nListNode<span class=\"token operator\">*</span> <span class=\"token function\">BuyListNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tnode<span class=\"token operator\">-&gt;</span>_next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tnode<span class=\"token operator\">-&gt;</span>_val <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//一个对象</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//多个对象</span>\n\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//new一个int对象，初始化成10</span>\n\t<span class=\"token comment\">//int* p4 = new int[10](10); - 不能这样，是错的</span>\n\t\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//new10个int对象，初始化成{}中的值</span>\n\t<span class=\"token comment\">//C++11支持的语法 - 初始化的是第一个</span>\n\n\t<span class=\"token keyword\">delete</span> p1<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> p2<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//释放的时候要匹配</span>\n\t<span class=\"token comment\">//不匹配不一定会内存泄漏，但是有可能会崩溃</span>\n\t<span class=\"token comment\">//建议一定要匹配</span>\n\n\t<span class=\"token keyword\">delete</span> p3<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> p4<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//BuyListNode是开空间加初始化</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> n1 <span class=\"token operator\">=</span> <span class=\"token function\">BuyListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//new是</span>\n\tListNode<span class=\"token operator\">*</span> n2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//会去调用该类的构造函数</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>释放的时候要匹配，不然有可能出问题：</strong></p>\n<p>3.<strong>new 和 delete 的特点：</strong></p>\n<p><strong>C++内存管理和C语言中内存管理的区别：<font color=\"red\">不在于内置类型，而是在于自定义类型</font></strong>。</p>\n<ul><li>malloc/free 和 new/delete 的区别在于</li><li>malloc/free是函数，new/delete是关键字</li><li><strong><font color=\"green\">在申请自定义类型的空间时，new会调用构造函数，delete会调用析构函数，而malloc与free不会。</font></strong></li></ul>\n<p><strong>(1）基本使用1：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Stack(int capacity = 10)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t_a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t_capacity <span class=\"token operator\">=</span> capacity<span class=\"token punctuation\">;</span>\n\t\t_top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token operator\">~</span><span class=\"token function\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"~Stack()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>_a<span class=\"token punctuation\">;</span>\n\t\t_capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t_top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> _a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> _top<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _capacity<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//Stack st;</span>\n\n\tStack<span class=\"token operator\">*</span> ps1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tStack<span class=\"token operator\">*</span> ps2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Stack<span class=\"token punctuation\">;</span><span class=\"token comment\">//开空间+调用构造函数初始化</span>\n\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ps1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">delete</span> ps2<span class=\"token punctuation\">;</span><span class=\"token comment\">//调用析构函数清理资源+释放空间</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1a21934723c547b4b15a011c21cb518a.png\"/></p>\n<ul><li>ps1和ps2是两个指针，指向一段动态开辟的空间</li><li>new会开空间进行初始化，<strong>调用构造函数初始化</strong></li><li><strong><font color=\"blue\">ps1都不好初始化，因为类中的成员变量是私有的</font></strong></li></ul>\n<p><strong>（2）基本使用2：</strong></p>\n<p><strong><font color=\"green\">用两个栈实现队列：</font></strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\03dcc33dce2744e4b46cfb4815c2c02d.png\"/></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Stack(int capacity = 10)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t_a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t_capacity <span class=\"token operator\">=</span> capacity<span class=\"token punctuation\">;</span>\n\t\t_top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token operator\">~</span><span class=\"token function\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"~Stack()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>_a<span class=\"token punctuation\">;</span>\n\t\t_capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t_top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> _a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> _top<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _capacity<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyQueue</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tStack _pushT<span class=\"token punctuation\">;</span>\n\tStack _popT<span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tMyQueue<span class=\"token operator\">*</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> MyQueue<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8e77f91c89b4470c9faeafe83ad557c7.png\"/></p>\n<ul><li>new创造一个MyQueue的对象，并且调用其构造函数，因为MyQueue这个类只有自定义类型，直接调用它的默认构造函数，默认构造</li><li>delete一个MyQueue对象的时候，调用其析构函数，因为该没有显示写析构函数，所以只能调用默认的析构函数</li></ul>\n<p><strong>总结：</strong></p>\n<ul><li>之前C语言释放这种类型的时候要先将MyQueue对象中的两个栈先释放掉，再去释放队列这个对象否则会发生内存泄漏。</li><li>而C++直接delete就可以了，是因为它去调用了MyQueue对象的析构函数，析构函数自己去一层一层的释放了空间</li></ul>\n<hr/>\n<h3><a id=\"13_C_221\"></a>1.3 C++开空间失败了的情况：</h3>\n<ul><li>在我们之前学的C语言中，我们知道，<strong>当malloc开辟空间失败了之后，会返回一个空指针</strong>，所以用malloc之后，我<strong>们要对返回的指针进行判空</strong>。</li><li><strong>但是C++中的new是不需要判空的</strong>，在其开辟失败的时候会抛异常。</li></ul>\n<p><strong><font color=\"green\">在堆上开一个G，大概率会开失败。</font></strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//malloc失败，返回空指针</span>\n\tStack<span class=\"token operator\">*</span> ps1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//new失败，抛异常</span>\n\tStack<span class=\"token operator\">*</span> ps2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 开空间+调用构造函数初始化</span>\n\n\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p0 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> p0 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> p1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> p2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//捕获异常</span>\n\t<span class=\"token keyword\">try</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> exception <span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\346c0ffe860e46979356f0cf4d3db949.png\"/></p>\n<hr/>\n<h3><a id=\"14_operator_new__operator_delete_268\"></a>1.4 operator new 和 operator delete：</h3>\n<p><strong><font color=\"red\">operator new 和 operator delete，是C++标准库中的库函数，不是符号重载，C++中设计反常的地方。</font></strong></p>\n<blockquote>\n<p>new和delete是用户进行动态内存申请和释放的<strong>操作符</strong>，operator new 和operator delete是系统提供的<strong>全局函数。</strong><br/> new在底层调用operator new全局函数来申请空间，delete在底层通过，operator delete全局函数来释放空间。</p>\n</blockquote>\n<ul><li><strong>operator new 是封装了malloc，malloc失败了就抛异常。</strong></li><li><strong>operator delete 也进行了封装抛异常检查等，<font color=\"bluie\">最终调用了_free_dbg，而C语言的free其实一个宏函数，它也是调用了_free_dbg，所以也能理解成operator delete 封装了free。</font></strong></li></ul>\n<p><strong>使用：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//跟malloc功能一样，但是失败以后抛异常</span>\n\tStack<span class=\"token operator\">*</span> ps2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">operator</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">operator</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span>ps2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tStack<span class=\"token operator\">*</span> ps1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ps1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tStack<span class=\"token operator\">*</span> ps3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Stack<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//call operator new</span>\n\t<span class=\"token comment\">//call Stack构造函数</span>\n\n\t<span class=\"token comment\">//面向对象编程不再用返回值的方式来处理，它们更喜欢抛异常</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>跟malloc功能一样，但是失败以后抛异常，不用检查失败。</strong></p>\n<ul><li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> <strong><font color=\"red\">operator new 和 operator delete没有直接价值的，它们是由间接价值的，是nwe的底层原理。</font></strong></li><li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> <strong>new的底层原理是调用operator new 和构造函数。</strong></li></ul>\n<p><strong>我们来看一下汇编：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e861e60ee3db4babb5dbdf4508f47dd8.png\"/></p>\n<p>由汇编可见上述结论。</p>\n<hr/>\n<p><strong><font color=\"blue\">总结见下图：</font></strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9f24128e3073442ca09ac4d57adc6b87.png\"/><br/> <strong>使用delete的时候一定要要匹配去使用，不然有可能会崩溃</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//对于内置类型不涉及调用构造函数</span>\n\t<span class=\"token comment\">//要调用operator malloc和malloc机制一样的</span>\n\n\t<span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span><span class=\"token comment\">//调用operator delete 也就是调用free</span>\n\n\tStack<span class=\"token operator\">*</span> stArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Stack<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//要调用十次构造函数和十次析构函数</span>\n\t<span class=\"token keyword\">delete</span> stArray<span class=\"token punctuation\">;</span><span class=\"token comment\">//要调用十次析构函数，这里只调用一次，崩了和底层实现的逻辑有关</span>\n\n\t<span class=\"token comment\">//不匹配可能没问题，可能会有问题</span>\n\t<span class=\"token comment\">//所以一定要匹配</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d3567fd7a1e24c679f8c85bf89f122c5.png\"/><br/> <strong>我们来看一下汇编：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f885873e084741bba776e92d197c772b.png\"/></p>\n<ul><li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> <strong>new T[N]的原理：</strong></li></ul>\n<ol><li>调用operator new[]函数，在operator new[]中实际调用operator new函数完成N个对<br/> 象空间的申请。</li><li>在申请的空间上执行N次构造函数。</li></ol>\n<ul><li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> <strong>delete[]的原理：</strong></li></ul>\n<ol><li>在释放的对象空间上执行N次析构函数，完成N个对象中资源的清理。</li><li>调用operator delete[]释放空间，实际在operator delete[]中调用operator delete来释<br/> 放空间。</li></ol>\n<p><strong>既然这里是对应的那么不匹配会出现什么问题呢？</strong></p>\n<p>有些不匹配不会报错，而有些不匹配就要报错，所以建议是匹配的，如上代码，就是不匹配的情况，就会报错。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\467aec4ed05f414a8f19be2f2ee83da4.png\"/></p>\n<ul><li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> <strong>对于内置类型：</strong></li></ul>\n<ul><li>int* p = new int[10];对于内置类型不涉及调用构造函数</li><li>要调用operator malloc和malloc机制一样的</li></ul>\n<ul><li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> <strong>对于自定义类型：</strong></li></ul>\n<ul><li>Stack* stArray = new Stack[10];要调用十次构造函数和十次析构函数</li><li>delete stArray;要调用十次析构函数，这里只调用一次，崩了和底层实现的逻辑有关，便宜指针不对就会报错，了解即可</li></ul>\n<p><strong><font color=\"red\">不匹配可能没问题，可能会有问题，所以一定要匹配。</font></strong></p>\n<hr/>\n<h3><a id=\"15_new_354\"></a>1.5 定位new：（了解）</h3>\n<p>定位new表达式是在<strong>已分配的原始内存空间中调用构造函数初始化一个对象</strong>。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tStack<span class=\"token operator\">*</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">operator</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//针对一个空间，显示调用构造函数初始化</span>\n\t\n\t<span class=\"token comment\">//obj-&gt;Stack(); -- 构造函数又调不动，不让显示调用，是自动调用的</span>\n\t<span class=\"token comment\">//bbj-&gt;_top = 0; -- 私有成员不能访问</span>\n\n\t<span class=\"token comment\">//这是用到一个定位new</span>\n\t<span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token function\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//等价于Stack* obj = new Stack(4);</span>\n\t<span class=\"token comment\">//用new直接就调用堆了</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> <strong>new(obj)Stack(4);</strong></li></ul>\n<ul><li>等价于Stack* obj = new Stack(4);</li></ul>\n<p><strong>使用格式：</strong></p>\n<ul><li><strong>new (place_address) type</strong>或者<strong>new (place_address) type(initializer-list)</strong></li><li><strong>place_address必须是一个指针，initializer-list是类型的初始化列表</strong></li></ul>\n<p><strong>使用场景：</strong></p>\n<p>定位new表达式在实际中一般是配合内存池使用。因为内存池分配出的内存没有初始化，所以如<br/> 果是自定义类型的对象，需要使用new的定义表达式进行显示调构造函数进行初始化。</p>\n<p><strong><font color=\"red\">内存泄漏指的是：指针丢了，不是内存丢了。</font></strong><br/> 普通的内存泄露不怕，进程只要正常结束的，申请的内存会还给操作系统。</p>\n<hr/>\n<h1><a id=\"2__390\"></a>2. 模板</h1>\n<h3><a id=\"21__391\"></a>2.1 模板的引入：</h3>\n<p><strong>我们如何实现一个通用的交换函数？</strong></p>\n<ul><li>经过我们之前的学习，我们知道可以使用函数重载：</li></ul>\n<p><strong>使用函数重载虽然可以实现，但是有一下几个不好的地方</strong>：</p>\n<ol><li>重载的函数仅仅是类型不同，代码复用率比较低，只要有新类型出现时，就需要用户自己增加对应的函数。</li><li>代码的可维护性比较低，一个出错可能所有的重载均出错，<strong>那能否告诉编译器一个模子，让编译器根据不同的类型利用该模子来生成代码呢？</strong></li></ol>\n<p><strong><font color=\"red\">模板的处理是在编译阶段处理的。</font></strong></p>\n<ul><li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> <strong><font color=\"green\">C++提出的编程思想叫泛型编程，不再是针对某种类型，能适应广泛类型，跟具体类型无关的代码。</font></strong></li><li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> <strong>而泛型编程所用的东西叫做 — 模板</strong></li><li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> <strong>模板分为：函数模板 和 类模板</strong></li></ul>\n<hr/>\n<h3><a id=\"22__406\"></a>2.2 函数模板的使用：</h3>\n<p><strong>交换函数模板的实现：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//函数模板可以自动推导</span>\n<span class=\"token comment\">//template&lt;class T&gt;</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;</span> left<span class=\"token punctuation\">,</span> T<span class=\"token operator\">&amp;</span> right<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tT tmp <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n\tleft <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n\tright <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> c <span class=\"token operator\">=</span> <span class=\"token number\">2.2</span><span class=\"token punctuation\">,</span> d <span class=\"token operator\">=</span> <span class=\"token number\">3.3</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//调用的不是同一个函数</span>\n\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong><font color=\"red\">函数模板是一个蓝图，它本身并不是函数，是编译器用使用方式产生特定具体类型函数的模具。所以其实模板就是将本来应该我们做的重复的事情交给了编译器。</font></strong></p>\n<p><strong>看一下反汇编：</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ebae962c6a934f80acb05a533b71e5b6.png\"/></p>\n<ul><li>编译器是根据参数的类型通过模板推导出所需要的函数。</li><li>上图可见，两个函数所调用的函数地址不一样，所以不是调用同一个函数</li><li>模板函数，具体需要什么编译器实例化出来什么样子</li><li>函数模板是没有地址的</li></ul>\n<p><strong>函数模板可以自动推导：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\46c9a928e5e64818bb43bc91cdca9be2.png\"/></p>\n<p><strong>std C++ 标准库中就有交换函数的模板，以后用到交换直接用库里的模板即可。</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e7f98e6d7c4c48a98cf0f1aeabf10263.png\"/></p>\n<h3><a id=\"23__446\"></a>2.3 类模板的使用：</h3>\n<p>在之前的数据结构中我们学习过：栈</p>\n<p><strong>用C语言实现栈：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//C语言实现栈</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> STDatetype<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Stack</span><span class=\"token punctuation\">(</span>STDatetype capacity <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t_a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> STDatetype<span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t_capacity <span class=\"token operator\">=</span> capacity<span class=\"token punctuation\">;</span>\n\t\t_top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token operator\">~</span><span class=\"token function\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>_a<span class=\"token punctuation\">;</span>\n\t\t_capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t_top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tSTDatetype<span class=\"token operator\">*</span> _a<span class=\"token punctuation\">;</span>\n\tSTDatetype<span class=\"token operator\">*</span> _top<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _capacity<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tStack st1<span class=\"token punctuation\">;</span><span class=\"token comment\">//一个栈存储int</span>\n\tStack st2<span class=\"token punctuation\">;</span><span class=\"token comment\">//一个栈存储double</span>\n\t<span class=\"token comment\">//C语言需要手动修改typedef的内容</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n</code></pre>\n<p><strong>C语言的缺陷：</strong></p>\n<blockquote>\n<p>C语言的方式实现栈的话，要改变栈里面存储数据的类型，只能通过typedef来改变，但是只能是st1和st2两个栈存储的类型都是同一种类型的，若是一个栈存Int类型的数据，一个栈存double类型的数据是不可以的，这就是C语言的缺陷。</p>\n</blockquote>\n<p><strong>C++用类模板解决了这个问题:</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//类模板 - 模板参数一般习惯用大写，不一定只能用T</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t_a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> T<span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t_capacity <span class=\"token operator\">=</span> capacity<span class=\"token punctuation\">;</span>\n\t\t_top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token operator\">~</span><span class=\"token function\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>_a<span class=\"token punctuation\">;</span>\n\t\t_capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t_top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>T x<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tT<span class=\"token operator\">*</span> _a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> _top<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _capacity<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tStack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> st1<span class=\"token punctuation\">;</span><span class=\"token comment\">//一个栈存储int</span>\n\tStack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">&gt;</span> st2<span class=\"token punctuation\">;</span><span class=\"token comment\">//一个栈存储double</span>\n\t<span class=\"token comment\">//C语言需要手动修改typedef的内容</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h3><a id=\"24__530\"></a>2.4 模板和函数的联系和区别:</h3>\n<p><strong><font color=\"red\">一定说函数模板是推演的，类模板就是一定是指定的吗？</font></strong></p>\n<p><strong><font color=\"green\">答案是也不一定。</font></strong></p>\n<p><strong>见如下代码：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//模板参数 -- 很多用法和函数参数是很像的</span>\n<span class=\"token comment\">//模板参数 -- 传递的是类型</span>\n<span class=\"token comment\">//函数参数 -- 传递的时对象值</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">char</span><span class=\"token operator\">&gt;</span>\nT<span class=\"token operator\">*</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token comment\">//T的类型推不出来了</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> T<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//函数模板的显式实例化</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">func</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span><span class=\"token operator\">*</span> p2 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">func</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong><font color=\"blue\">这个时候就要显式实例化了，因为这个T的类型是不能被推导出来的。</font></strong></p>\n<p><strong>用模板替换的过程叫做实例化</strong></p>\n<p>1、函数模板的类型<strong>一般</strong>是编译器根据实参传递给形参，推演出来的，<strong>如果不能自动推演，那么我们就需要显示实例化，指定模板参数。</strong></p>\n<p>2、类模板的类型显示实例化，明确指定的</p>\n<p><strong><font color=\"red\">模板参数可以是typename也可以是class，切记不能是struct。</font></strong></p>\n<p><strong><font color=\"green\">模板参数是可以有缺省参数，template&lt; class T = char&gt;</font></strong></p>\n<hr/>\n<h3><a id=\"25__567\"></a>2.5 函数模板/类模板的声明和定义分离：</h3>\n<p><strong>函数模板声明和定义的分离：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//声明的时候给模板参数    </span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;</span> left<span class=\"token punctuation\">,</span> T<span class=\"token operator\">&amp;</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//定义时候也给模板参数</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;</span> left<span class=\"token punctuation\">,</span> T<span class=\"token operator\">&amp;</span> right<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tT tmp <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n\tleft <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n\tright <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong><font color=\"orange\">如果每个函数模板的声明定义都分离，那么每个函数定义前都要加上声明模板参数。</font></strong></p>\n<p><strong>类模板声明和定义的分离：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//声明的时候给模板参数                                                                       </span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Vector</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token generic-function\"><span class=\"token function\">Vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>size_t capacity <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tT<span class=\"token operator\">*</span> _pDate<span class=\"token punctuation\">;</span>\n\tsize_t _size<span class=\"token punctuation\">;</span>\n\tsize_t _capacity<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//定义的时候也给模板参数</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\nVector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">Vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>size_t capacity<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">:</span><span class=\"token function\">_pDate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> T<span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">,</span><span class=\"token function\">_size</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">,</span><span class=\"token function\">_capacity</span><span class=\"token punctuation\">(</span>capacity<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>类外定义要指定类域。</strong></p>\n<p><strong><font color=\"red\">注意：模板是不支持声明和定义放在两个文件当中的，会出现链接错误。</font></strong></p>\n<p><strong><font color=\"blue\">原因是：分离的话，模板实例化不出对应的函数，但是编译时可以通过的，因为声明中有模板的声明，最后符号表重定位的时候，找不到对应的函数模板调用的地址。</font></strong></p>\n<p><strong>补充：</strong></p>\n<ul><li>模板不支持声明和定义分别放到xxx.h和xxx.cpp中</li><li>一般是要放到一个文件中。有些地方就会命名成</li><li>xxx.hpp，寓意就是头文件和定义实现内容合并一起.</li><li>但是并不是必须是.hpp, .h也是可以的</li></ul>\n<ul><li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> <strong>解决方案1：在template.cpp中针对于要使用的模板类型显示实例化</strong></li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2c2f14fe8cb74b14a7f2e37f334f7b30.png\"/></p>\n<ul><li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> <strong>解决方案2：在不要分离到两个文件中。直接写在xxx.hpp或xxx.h中</strong></li></ul>\n<p><strong><font color=\"green\">这样就能将函数实例化出来，在编译的时候就能call这个函数的地址了，就不需要链接的时候去找了。</font></strong></p>\n<hr/>\n<h3><a id=\"26__627\"></a>2.6 模板的隐式类型转换：</h3>\n<p><strong>直接见代码：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\nT <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> right<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> a2 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> d1 <span class=\"token operator\">=</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span> d2 <span class=\"token operator\">=</span> <span class=\"token number\">20.0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">,</span> a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">,</span> d2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//Add(a1, d2); - 错误的写法，编译器推不出来函数(自身是不能矛盾的)</span>\n\n\t<span class=\"token comment\">//两种解决方法：</span>\n\t\n\t<span class=\"token comment\">//隐式类型转换</span>\n\t<span class=\"token generic-function\"><span class=\"token function\">Add</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">,</span> d2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token generic-function\"><span class=\"token function\">Add</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">,</span> d2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//强转</span>\n\t<span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>d2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>a1<span class=\"token punctuation\">,</span> d2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"27__658\"></a>2.7 多个模板参数：</h3>\n<p><strong>直接见代码：</strong></p>\n<p><strong>代码1：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//多个模板参数</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">V</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> V<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> key <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> value <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">Func</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Func</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token generic-function\"><span class=\"token function\">Func</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//只能连着指定，除非有却省模板参数</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>代码2：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">V</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">char</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>K<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//类比函数的参数去学习，一个是类型，一个是变量/对象</span>\n\t<span class=\"token generic-function\"><span class=\"token function\">Func</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token generic-function\"><span class=\"token function\">Func</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>缺省是从右往左的，可以全缺省，也可以半缺省</li><li>因为传参是从左往右传的</li><li>和函数一样去理解就行了</li></ul>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-31 19:36:00", "summary": "文章目录前言内存管理语言的内存管理回顾：的内存管理：开空间失败了的情况：和：定位：了解模板模板的引入：函数模板的使用：类模板的使用：模板和函数的联系和区别函数模板类模板的声明和定义分离：模板的隐式类型"}