{"blogid": "126449402", "writerAge": "码龄178天", "writerBlogNum": "58", "writerCollect": "3064", "writerComment": "3483", "writerFan": "4575", "writerGrade": "7级", "writerIntegral": "11993", "writerName": "XIN-XIANG荣", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126449402.jpg", "writerRankTotal": "1042", "writerRankWeekly": "53", "writerThumb": "4141", "writerVisitNum": "53271", "blog_read_count": "1082", "blog_time": "已于 2022-08-23 17:57:56 修改", "blog_title": "【Java】深拷贝和浅拷贝，Cloneable接口", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>活动地址：<a href=\"https://marketing.csdn.net/p/bdabfb52c5d56532133df2adc1a728fd\">CSDN21天学习挑战赛</a><br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/078b66f87e3c4e309d7f34d79c5776c4.gif#pic_center\"/><font size=\"4\">✨</font><font color=\"gray\" size=\"3\"><b>博客主页:</b></font><a href=\"https://blog.csdn.net/Trong_?spm=1000.2115.3001.5343\"><font color=\"\tLightSkyBlue\" size=\"3\"><b> XIN-XIANG荣</b></font></a><br/> <font size=\"4\">✨</font><font color=\"gray\" size=\"3\"><b>系列专栏:</b></font><a href=\"https://blog.csdn.net/trong_/category_11933690.html?spm=1001.2014.3001.5482\"><font color=\"\tLightSkyBlue\" size=\"3\"><b>【Java SE】</b></font></a><br/> <font size=\"4\">✨</font><font color=\"gray\" size=\"3\"><b>一句短话:</b></font><font color=\"\tCrimson\" size=\"3\"><b> 难在坚持,贵在坚持,成在坚持!</b></font></p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#1_Cloneable_7\">1. Cloneable接口的介绍</a></li><li><a href=\"#2__25\">2. 浅拷贝的介绍和实例</a></li><li><a href=\"#3__84\">3. 深拷贝的介绍和实例</a></li><li><a href=\"#4_clone_151\">4. clone方法总结</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"1_Cloneable_7\"></a>1. Cloneable接口的介绍</h1>\n<p>Cloneable是标记型的接口(空接口)，它们内部都没有方法和属性，<strong>实现 Cloneable来表示该对象能被克隆</strong>，能使用Object.clone()方法。如果没有实现 Cloneable的类对象调用clone()就会抛出CloneNotSupportedException异常。</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\c25b0dc9fd7065110216952f722b50b4.png\"/></p>\n<p>可以理解为Cloneable接口发挥的是标记功能，自定义类型需要用户自己标记出哪些类是可以clone的，这个标记就是去实现Cloneable接口，实现了Cloneable接口后就表明该类创建的对象可以被克隆。</p>\n<p>而要想使一个类具备拷贝实例的功能，除了要实现Cloneable接口，还必须重写Object类的clone()方法。</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\db712cca5c74ad13d15fdb53ca860f8e.png\"/></p>\n<p>可以看到Object类的clone()方法是被protected修饰的，所以需要在重写的clone()方法中通过super关键字去调用Object类中的clone()方法</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\cf4c0575015a0f533e830f6b825c09a0.png\"/></p>\n<h1><a id=\"2__25\"></a>2. 浅拷贝的介绍和实例</h1>\n<p>在拷贝一个对象时，对 对象的基本数据类型的成员变量进行拷贝，但对引用类型的成员变量只进行引用的传递，并没有创建一个新的对象，<strong>当对引用类型的内容修改会影响被拷贝的对象</strong>。简而言之：<strong>浅拷贝仅仅复制所拷贝的对象，而不复制它所引用的对象。</strong></p>\n<p>观察下面的代码，将Money类的实例作为了Person类的字段，new一个Person类的对象person1，将这个person1对象拷贝到person2中，这里的拷贝就是浅拷贝了，只是将person1对象的money引用拷贝到了person2，person1和person2中的momey指向的是同一个对象。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Money</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> m <span class=\"token operator\">=</span> <span class=\"token number\">666</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Cloneable</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Money</span> money <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Money</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">CloneNotSupportedException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Person{\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"id=\"</span> <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span>\n                <span class=\"token string\">\", money=\"</span> <span class=\"token operator\">+</span> money<span class=\"token punctuation\">.</span>m <span class=\"token operator\">+</span>\n                <span class=\"token char\">'}'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestDemo3</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">CloneNotSupportedException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Person</span> person1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Person</span> person2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> person1<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"通过person2修改前的结果\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        person2<span class=\"token punctuation\">.</span>money<span class=\"token punctuation\">.</span>m <span class=\"token operator\">=</span> <span class=\"token number\">888</span><span class=\"token punctuation\">;</span>\n        person2<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"通过person2修改后的结果\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>执行结果：</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\b334feb3785e25efc6c82706586cae8e.png\"/></p>\n<p>浅拷贝图解：</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\762843e5b323b4b088fbcf808f249103.png\"/></p>\n<h1><a id=\"3__84\"></a>3. 深拷贝的介绍和实例</h1>\n<p>在拷贝一个对象时，除了对基本数据类型的成员变量进行拷贝，对引用类型的成员变量进行拷贝时，创建一个新的对象来保存引用类型的成员变量。简而言之：<strong>深拷贝把要复制的对象所引用的对象都复制了一遍。</strong></p>\n<p>下面的代码实现了深拷贝；实现person1对象的深拷贝，先用Person tmp引用来保存浅拷贝的结果，通过tmp引用找到money对象，再将money对象拷贝一份，然后赋值给tmp中的money，最后返回tmp即可。这样就将money引用的对象也拷贝了一份，实现了深拷贝，此时person1和person2中的momey指向的是两个不同的对象。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Money</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Cloneable</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> m <span class=\"token operator\">=</span> <span class=\"token number\">666</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">CloneNotSupportedException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Cloneable</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Money</span> money <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Money</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">CloneNotSupportedException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//return super.clone();</span>\n        <span class=\"token class-name\">Person</span> tmp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tmp<span class=\"token punctuation\">.</span>money <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Money</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>money<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Person{\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"id=\"</span> <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span>\n                <span class=\"token string\">\", money=\"</span> <span class=\"token operator\">+</span> money<span class=\"token punctuation\">.</span>m <span class=\"token operator\">+</span>\n                <span class=\"token char\">'}'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test2</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">CloneNotSupportedException</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Person</span> person1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Person</span> person2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> person1<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"通过person2修改前的结果\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        person2<span class=\"token punctuation\">.</span>money<span class=\"token punctuation\">.</span>m <span class=\"token operator\">=</span> <span class=\"token number\">888</span><span class=\"token punctuation\">;</span>\n        person2<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"通过person2修改后的结果\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>执行结果：</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\a3c68762c36f526d8f71d16829ee9ece.png\"/></p>\n<p>深拷贝图解：</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\a35423b97a715698a2a7299cfcf681b3.png\"/></p>\n<h1><a id=\"4_clone_151\"></a>4. clone方法总结</h1>\n<p>java中clone方法是一个浅拷贝，引用类型依然在传递引用。我们可以通过继续调用clone()方法，对 该对象的引用类型变量再实现一次clone()的方法来实现深拷贝。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-08-23 17:57:56", "summary": "活动地址：天学习挑战赛在这里插入图片描述博客主页荣系列专栏一句短话难在坚持贵在坚持成在坚持文章目录接口的介绍浅拷贝的介绍和实例深拷贝的介绍和实例方法总结接口的介绍是标记型的接口空接口，它们内部都没有方"}