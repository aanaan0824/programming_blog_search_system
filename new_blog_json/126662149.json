{"blogid": "126662149", "writerAge": "码龄4年", "writerBlogNum": "276", "writerCollect": "15299", "writerComment": "425", "writerFan": "10741", "writerGrade": "6级", "writerIntegral": "6556", "writerName": "编程ID", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126662149.jpg", "writerRankTotal": "1946", "writerRankWeekly": "597", "writerThumb": "2069", "writerVisitNum": "867366", "blog_read_count": "552", "blog_time": "于 2022-09-02 15:07:22 发布", "blog_title": "RESTful风格学习笔记【包含示例】", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>RESTful风格快速开发</h3>\n<ul><li><ul><li><a href=\"#1RESTRESTful_1\">1、REST、RESTful、传统风格</a></li><li><ul><li><a href=\"#11REST_7\">1.1REST简介</a></li><li><a href=\"#12_REST_19\">1.2 REST风格简介</a></li></ul>\n</li><li><a href=\"#2HTTP_31\">2、HTTP方法的语义</a></li><li><ul><li><a href=\"#21_POSTPUT_39\">2.1 POST和PUT的区别</a></li></ul>\n</li><li><a href=\"#3RESTfulURL_44\">3、RESTful接口URL命名原则</a></li><li><a href=\"#4RESTfulURL_48\">4、RESTful接口URL分级原则</a></li><li><a href=\"#5RESTful_54\">5、RESTful接口命名示例</a></li><li><a href=\"#7RESTful_60\">7、RESTful入门案例</a></li><li><a href=\"#8RequestBody__RequestParam__PathVariable_70\">8、@RequestBody @RequestParam @PathVariable</a></li><li><a href=\"#9RESTful_81\">9、RESTful快速开发</a></li><li><a href=\"#10RESTful_86\">10、基于RESTful页面数据交互</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"1RESTRESTful_1\"></a>1、REST、RESTful、传统风格</h2>\n<blockquote>\n<ul><li><strong>REST</strong>全称是Representational State Transfer，中文为表述性状态转移，REST指的是一组架构约束条件和原则</li><li>RESTful表述的是资源的状态性转移，在Web中资源就是URI(Uniform Resource Identifier)</li><li>如果一个架构符合REST的约束条件和原则，我们就称它为RESTful架构，HTTP是目前与REST相关的唯一实例</li><li>RESTful架构应该遵循统一的接口原则，应该使用标准的HTTP方法如GET和POST，并且遵循这些方法的语义</li></ul>\n</blockquote>\n<h3><a id=\"11REST_7\"></a>1.1REST简介</h3>\n<p>REST（Representational State Transfer），表现形式状态转换<br/> <strong>传统风格资源描述形式</strong><br/> http://localhost/user/getById?id=1<br/> http://localhost/user/saveUser<br/> <strong>REST风格描述形式</strong><br/> http://localhost/user/1<br/> http://localhost/user<br/> <strong>优点：</strong><br/> 隐藏资源的访问行为，无法通过地址得知对资源是何种操作<br/> 书写简化</p>\n<h3><a id=\"12_REST_19\"></a>1.2 REST风格简介</h3>\n<p>按照REST风格访问资源时使用行为动作区分对资源进行了何种操作<br/> http://localhost/users 查询全部用户信息 <br/> http://localhost/users/1 查询指定用户信息<br/> http://localhost/users 添加用户信息<br/> http://localhost/users 修改用户信息<br/> http://localhost/users/1 删除用户信息<br/> 根据REST风格对资源进行访问称为RESTful</p>\n<blockquote>\n<p>上述行为是约定方式，约定不是规范，可以打破，所以称REST风格，而不是REST规范<br/> 描述模块的名称通常使用复数，也就是加s的格式描述，表示此类资源，而非单个资源，例如：users、books、accounts……</p>\n</blockquote>\n<h2><a id=\"2HTTP_31\"></a>2、HTTP方法的语义</h2>\n<table><thead><tr><th>方法</th><th>语义</th></tr></thead><tbody><tr><td>GET</td><td>获取指定的资源</td></tr><tr><td>DELETE</td><td>删除指定的资源</td></tr><tr><td>POST</td><td>发送数据给服务器，依据HTTP 1.1规范中的描述，结合实际项目开发经验，POST经常为了以统一的方法来涵盖以下功能：1.在公告板，新闻组，邮件列表或类似的文章组中发布消息 2 .通过注册新增用户3. 向数据处理程序提供一批数据，例如提交一个表单</td></tr><tr><td>PUT</td><td>使用请求中的负载创建或者替换目标资源。PUT和POST的区别在于PUT是幂等的，而POST不是。幂等的含义可以理解为调用一次与连续调用多次是等价的（没有副作用或副作用不变）</td></tr></tbody></table>\n<h3><a id=\"21_POSTPUT_39\"></a>2.1 POST和PUT的区别</h3>\n<ul><li>POST和PUT的区别容易被简单地误认为“POST表示创建资源，PUT表示更新资源”</li><li>而实际上，二者均可用于创建资源，更为本质的差别是在幂等性方面<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d0646d5dc5834f4193249cbecf2f18a2.png\"/></li></ul>\n<h2><a id=\"3RESTfulURL_44\"></a>3、RESTful接口URL命名原则</h2>\n<ul><li>命名原则1：HTTP方法后跟的URL必须是名词且统一成名词复数形式</li><li>命名原则2：URL中不采用大小写混合的驼峰命名，尽量采用全小写单词，如果需要连接多个单词，则采用“-”连接</li><li>示例：/users、/users-fans；反例：/getUsers、/getUsersFans</li></ul>\n<h2><a id=\"4RESTfulURL_48\"></a>4、RESTful接口URL分级原则</h2>\n<ul><li>分级原则1：一级用来定位资源分类，如/users即表示需要定位到用户相关资源</li><li>分级原则2：二级仍用来定位具体某个资源，如/users/20即表示id为20的用户，再如/users/20/fans/1即表示id为20的用户的id为1的粉丝</li></ul>\n<blockquote>\n<p>一条小建议：原则是为了让我们的开发更加规范，但是不能成为束缚我们开发的枷锁！</p>\n</blockquote>\n<h2><a id=\"5RESTful_54\"></a>5、RESTful接口命名示例</h2>\n<ol><li>GET、POST、PUT、DELETE接口命名示例<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\106013c3381a4d29ac40519363d2c80a.png\"/></li><li>复杂GET查询请求接口命名示例<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\139b9bbf2be042a294559dae040bcfdc.png\"/></li></ol>\n<h2><a id=\"7RESTful_60\"></a>7、RESTful入门案例</h2>\n<p><strong>步骤</strong></p>\n<ol><li>设定http请求动作（动词）</li></ol>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dc408979046345e8a3bdbb560319c1ba.png\"/></p>\n<ol start=\"2\"><li>设定请求参数（路径变量）<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\411ad455efcc4355a466edae9b3ae54c.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f4d3e21eb8e142f99665f466667bf4d3.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d624c6785a4543fc9930bc041d3aedc3.png\"/></li></ol>\n<h2><a id=\"8RequestBody__RequestParam__PathVariable_70\"></a>8、@RequestBody @RequestParam @PathVariable</h2>\n<p><strong>区别</strong><br/> @RequestParam用于接收url地址传参或表单传参<br/> @RequestBody用于接收json数据<br/> @PathVariable用于接收路径参数，使用{参数名称}描述路径参数</p>\n<p><strong>应用</strong><br/> 后期开发中，发送请求参数超过1个时，以json格式为主，@RequestBody应用较广<br/> 如果发送非json格式数据，选用@RequestParam接收请求参数<br/> 采用RESTful进行开发，当参数数量较少时，例如1个，可以采用@PathVariable接收请求路径变量，通常用于传递id值</p>\n<h2><a id=\"9RESTful_81\"></a>9、RESTful快速开发</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f7ae93edde9046c1b8e13c23dfbf817a.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e2167eed8f2d4a05b32262f9585c8a27.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ce53e340d3bd4cb2a1d25dca82664a6e.png\"/></p>\n<h2><a id=\"10RESTful_86\"></a>10、基于RESTful页面数据交互</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9ef36a1fb0634d19af26e67052272a60.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b0937ec2747a4409ae6c52624dbea509.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c253a87e64fd49ce9a6c46a9829653ed.png\"/></p>\n<blockquote>\n<p>基于RESTful页面数据交互<br/> 先做后台功能，开发接口并调通接口<br/> 再做页面异步调用，确认功能可以正常访问<br/> 最后完成页面数据展示<br/> 补充：放行静态资源访问</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-02 15:07:22", "summary": "风格快速开发、、、传统风格简介风格简介、方法的语义和的区别、接口命名原则、接口分级原则、接口命名示例、入门案例、、快速开发、基于页面数据交互、、、传统风格全称是，中文为表述性状态转移，指的是一组架构约"}