{"blogid": "122118347", "writerAge": "码龄5年", "writerBlogNum": "29", "writerCollect": "135", "writerComment": "5", "writerFan": "14", "writerGrade": "2级", "writerIntegral": "347", "writerName": "seeyoumeet", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122118347.jpg", "writerRankTotal": "213239", "writerRankWeekly": "123380", "writerThumb": "18", "writerVisitNum": "22023", "blog_read_count": "4128", "blog_time": "于 2021-12-23 23:03:20 发布", "blog_title": "使用Qt进行音视频播放", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_15\">播放音频</a></li><li><ul><li><a href=\"#_19\">播放压缩音频</a></li><li><a href=\"#_31\">低延迟声音效果</a></li></ul>\n</li><li><a href=\"#_84\">播放视频</a></li><li><ul><li><a href=\"#_88\">播放视频文件</a></li><li><a href=\"#QMovieGIF_190\">使用QMovie播放GIF文件</a></li></ul>\n</li><li><a href=\"#QMediaPlayer_303\">QMediaPlayer</a></li><li><ul><li><a href=\"#1__394\">1. 播放状态</a></li><li><a href=\"#2__499\">2. 获取媒体元数据</a></li><li><a href=\"#3__531\">3. 播放列表</a></li></ul>\n</li><li><a href=\"#_573\">使用相机</a></li><li><ul><li><a href=\"#_QCamera_577\">相机 QCamera</a></li></ul>\n</li></ul>\n</div>\n<br/>   Qt对音视频的播放和控制，相机拍照，收音机等多媒体应用提供了强大的支持。Qt5使用了全新的Qt Multimedia模块来实现多媒体应用，而原来Qt4中用于实现多媒体功能的Phonon模块已经被移除。\n<br/>\n<br/>   新的Qt Multimedia模块提供了丰富的接口，使读者可以轻松地使用平台的多媒体功能，例如，进行多媒体播放，使用相机和收音机等。该模块还分别提供了一组QML类型和一组C++类来处理多媒体内容。\n<p></p>\n<p>C++ 中多媒体模块可以实现的功能，对应的示例程序以及需要使用的C++类如：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\73bea34c718e4583926ed743840dd390.png\"/></p>\n<p>  Qt的多媒体接口建立在底层平台的多媒体框架之上，这就意味着对于各种编解码器的支持依赖于使用的平台。如果要访问一些平台相关的设置，或者将Qt多媒体接口移植到新的平台，则可以参考Qt帮助中的Multimedia Backend Development文档。</p>\n<p>  另外，如果要使用多媒体模块中的内容，则需要在.pro项目文件中添加如下代码，引入多媒体模块：</p>\n<pre><code>QT += multimedia\n</code></pre>\n<h1><a id=\"_15\"></a>播放音频</h1>\n<p>  在Qt中，要使计算机发出响声，最简单的方法是调用QApplication::beep()静态函数。而Qt Multimedia模块中提供了多个类来实现不同层次的音频输入，输出和处理。</p>\n<h2><a id=\"_19\"></a>播放压缩音频</h2>\n<p>  Qt中播放一个音频(比如MP3音频)十分简单，通常使用QMediaPlayer，只需要几行代码即可完成。QMediaPlayer被设计用来媒体播放，可以播放音频，视频和网络广播。</p>\n<p>下面看看如何使用该类播放音频文件：</p>\n<pre><code>player = new QMediaPlayer;\nplayer-&gt;setMedia(QUrl::fromLocalFile(\"../playMedia/song.mp3\"));\nplayer-&gt;play();\n</code></pre>\n<p>  上面setMedia()设置的媒体资源是本地的，如果要播放网络歌曲，则只需要将地址修改为QUrl网络地址即可。QMedicaPlayer支持的音频文件格式取决于操作系统以及用户安装的媒体插件。</p>\n<h2><a id=\"_31\"></a>低延迟声音效果</h2>\n<p>  QSoundEffect类可以使用一种低延迟方式来播放为未压缩的音频文件，如.wav文件，它非常适合用来播放与用户交互时的音效，如弹出框提示音，虚拟键盘按键音，游戏音效等。<br/><br/>   当然，如果并不需要低延迟效果，那么最好使用QMediaPlayer来播放音频，因为其中支持更多的媒体格式且占用资源更少。</p>\n<p>  下面通过一个例子来看一下QSoundEffect的应用。</p>\n<p>  新建一个Qt Widgets应用，项目名称mysoundeffect，类名MainWindow和基类QMainWindow保持默认即可。</p>\n<p>完成后在项目文件mysoundeffct.pro中修改代码如下：</p>\n<pre><code>QT += core gui multimedia\n</code></pre>\n<p>然后在mainwindow.h中添加前置声明：</p>\n<pre><code>// 前置声明\nclass QSoundEffect;\n</code></pre>\n<p>添加好后，在向其中声明一个私有变量：</p>\n<pre><code>private:\n    QSoundEffect *effect;\n</code></pre>\n<p>再到mainwindow.cpp文件，向构造函数中添加如下代码：</p>\n<pre><code>effect = new QSoundEffect(this);\neffect-&gt;setSource(QUrl::fromLocalFile(\"../mysoundeffect/sound.wav\"));\neffect-&gt;setVolume(0.25f);\t// 设置音量大小(取值范围是0.0 ~ 1.0)\n</code></pre>\n<p>  双击mainwindow.ui进入设计模式，向界面中拖入两个PushButton和一个SpinBox，并将两个按钮的文本分别改为\"播放\"和\"停止\"。然后更改SpinBox的属性，将当前值value设置为1。最后转到两个按钮的clicked()槽和SpinBox的valueChanged(int)槽。</p>\n<p>对这三个槽函数的定义更改如下：</p>\n<pre><code>// 播放按钮\nvoid MainWindow::on_playButton_clicked()\n{\n    effect-&gt;play();\n}\n\n// 停止按钮\nvoid MainWindow::on_stopButton_clicked()\n{\n    effect-&gt;stop();\n}\n\nvoid MainWindow::on_spinBox_valueChanged(int arg1)\n{\n    effect-&gt;setLoopCount(arg1); // 设置音乐的播放次数(设为0或1时都表示只播放一次，设为QSoundEffect::Infinite表示无限重复)\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8a65fbf19a2044f2b4fc6948043ca0fb.png\"/></p>\n<h1><a id=\"_84\"></a>播放视频</h1>\n<p>  前面提到过QMediaPlayer不仅可以播放音频，还可以用来播放视频。不过如果要视频在界面上显示出来，还需要其他类来进行辅助，比如QVideoWidget，QGraphicsVideoItem或者自定义的类。而像GIF格式的动画类型，则可以使用QMovie播放。</p>\n<h2><a id=\"_88\"></a>播放视频文件</h2>\n<p>  视频文件可以通过QMediaPlayer进行播放，但是要在界面上显示视频内容，需要借助QVideoWidget或者QGraphicsVideoItem类，这两个类都属于Qt MultimediaWidgets模块。<br/><br/>   QVideoWidget继承自QWidget，所以它可以作为一个普通窗口部件进行显示，也可以嵌入到其他窗口中。将QVideoWidget指定为QMediaPlayer的视频输出窗口后，就可以显示播放的视频画面。当然，如果不为播放器设置视频输出界面，播放器也是可以播放视频的，不过只会出现声音而没有画面。<br/><br/>   使用QVideoWidget可以设置视频的亮度，对比度，色相和饱和度，还可以设置全屏显示，并且为这些功能设置了相应的信号和槽。</p>\n<p>  新建Qt Widgets应用，项目名称为myvideowidget，基类选择QWidget，类名保持Widget不变。项目创建完成后，将myvideowidget.pro修改如下：</p>\n<pre><code>QT += core gui multimedia multimediawidgets\n</code></pre>\n<p>完成后保存该文件，然后到widget.h中添加类的前置声明：</p>\n<pre><code>class QMediaPlayer;\nclass QVideoWidget;\n</code></pre>\n<p>  双击widget.ui进入设计模式，将Widget界面的宽度属性设置为600，高度设置为400，然后往界面上拖入4个标签Label和4个水平滑块Horizontal Slider，一个标签对应一个滑块，分为4组。<br/><br/>   将4个标签显示文本分别设置为\"亮度\"，“对比度”，“色相\"和\"饱和度”，而对应的滑块的objectName分别设置为brightnessSlider，contrastSlider，hueSlider和saturationSlider。最后将4个滑块的minimum属性设置为-100，maximum属性设置为100。</p>\n<p>下面进入widget.cpp文件，先添加头文件包含：</p>\n<pre><code>#include \"widget.h\"\n#include \"ui_widget.h\"\n#include &lt;QMediaPlayer&gt;\n#include &lt;QVideoWidget&gt;\n\n\nWidget::Widget(QWidget *parent) :\n    QWidget(parent),\n    ui(new Ui::Widget)\n{\n    ui-&gt;setupUi(this);\n    player = new QMediaPlayer(this);\t\n    videoWidget = new QVideoWidget(this);\t// 新建视频播放器\n    videoWidget-&gt;resize(600, 300);\n    player-&gt;setVideoOutput(videoWidget);\t// 指定视频输出窗口(一个播放器)\n    player-&gt;setMedia(QUrl::fromLocalFile(\"../myvideowidget/video.WMV\"));\n    player-&gt;play();\n\n    // 亮度\n    ui-&gt;brightnessSlider-&gt;setValue(videoWidget-&gt;brightness());\n    connect(ui-&gt;brightnessSlider, &amp;QSlider::sliderMoved, videoWidget, &amp;QVideoWidget::setBrightness);\n    connect(videoWidget, &amp;QVideoWidget::brightnessChanged, ui-&gt;brightnessSlider, &amp;QSlider::setValue);\n\n    // 对比度\n    ui-&gt;contrastSlider-&gt;setValue(videoWidget-&gt;contrast());\n    connect(ui-&gt;contrastSlider, &amp;QSlider::sliderMoved, videoWidget, &amp;QVideoWidget::setContrast);\n    connect(videoWidget, &amp;QVideoWidget::contrastChanged, ui-&gt;contrastSlider, &amp;QSlider::setValue);\n\n    // 色相\n    ui-&gt;hueSlider-&gt;setValue(videoWidget-&gt;hue());\n    connect(ui-&gt;hueSlider, &amp;QSlider::sliderMoved, videoWidget, &amp;QVideoWidget::setHue);\n    connect(videoWidget, &amp;QVideoWidget::hueChanged, ui-&gt;hueSlider, &amp;QSlider::setValue);\n\n    // 饱和度\n    ui-&gt;saturationSlider-&gt;setValue(videoWidget-&gt;saturation());\n    connect(ui-&gt;saturationSlider, &amp;QSlider::sliderMoved, videoWidget, &amp;QVideoWidget::setSaturation);\n    connect(videoWidget, &amp;QVideoWidget::saturationChanged, ui-&gt;saturationSlider, &amp;QSlider::setValue);\n}\n\nWidget::~Widget()\n{\n    delete ui;\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\78498efd168142c59c1d94329ac9938f.png\"/></p>\n<p>  再来看看QGraphicsVideoItem，它继承自QGraphicsObject，且提供了一个窗口作为图形项嵌入到场景中以显示视频内容。</p>\n<p>  新建一个空项目，模板选择其中项目中的Empty qmake Project，项目名称myvideoitem，在myvideoitem.pro中添加如下代码：</p>\n<pre><code>QT += multimedia multimediawidgets\n</code></pre>\n<p>  然后再向项目中添加新的C++ Source File，名称为main.cpp，完成后更改其内容如下：</p>\n<pre><code>#include &lt;QApplication&gt;\n#include &lt;QMediaPlayer&gt;\n#include &lt;QGraphicsVideoItem&gt;\n#include &lt;QGraphicsView&gt;\n#include &lt;QGraphicsScene&gt;\n\nint main(int argc, char *argv[])\n{\n    QApplication a(argc, argv);\n\n    QGraphicsScene scene;\n    QGraphicsView view(&amp;scene);\n    view.resize(600, 320);\n    QGraphicsVideoItem item;\n    scene.addItem(&amp;item);\n    item.setSize(QSizeF(500, 300));\n    QMediaPlayer player;\n    player.setVideoOutput(&amp;item);\n    player.setMedia(QUrl::fromLocalFile(\"../myvideoitem/video.wmv\"));\n    player.play();\n    view.show();\n\n    return a.exec();\n}\n</code></pre>\n<p>  这里首先创建了场景，视图和视频图形项，然后创建了播放器，并将视频图形项作为播放器的视频输出窗口，最后设置了要播放的视频，并显示视图播放视频。这样一来，就在场景中嵌入了视频播放图形项。</p>\n<h2><a id=\"QMovieGIF_190\"></a>使用QMovie播放GIF文件</h2>\n<p>  实际上，QMovie类并不属于多媒体模块，而是包含在Qt GUI模块。QMovie使用QImageReader来播放没有声音的动画，比如GIF格式的文件，其支持的格式可以使用QMovie::supportedFormats()静态函数获取。<br/><br/>   要播放一个动画，只需要先创建一个QMovie对象，并为其指定要播放的动画文件，然后将QMovie对象传递给QLabel::setMovie()函数，最后调用start()函数来播放动画。</p>\n<p>例如使用QMovie类来播放GIF动画：</p>\n<pre><code>QLabel label;\nQMovie * movie = new QMovie(\"animations/fire.gif\");\nlabel.setMovie(movie);\nmovie-&gt;start();\n</code></pre>\n<p>  还可以使用setPause(true)函数来暂停动画的播放，然后使用setPause(false)来恢复播放；使用stop()函数可以停在动画的播放。QMovie一共有3个状态，这3个状态见下表：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c88ce2384b454ec7a6184d11f2beea0d.png\"/></p>\n<p>  每当状态改变时都会发射stateChanged()信号，可以通过关联这个信号来改变播放，暂停等按钮的状态。</p>\n<p>  可以使用frameCount()函数来获取当前动画总的帧数;currentFrameNumber()函数可以返回当前帧的序列号,动画第一个帧的序列号为0;如果动画播放到了一个新的帧,QMovie会发射updated()信号,这时可以使用currentImage()或者currentPixmap()函数来获取当前帧的一个副本。<br/><br/>   还可以使用setCacheMode()来设置QMovie的缓存模式,这里有两个选项:</p>\n<ul><li>QMovie::CacheNone</li><li>QMovie:CacheAll</li></ul>\n<p>  前者是默认选项,不缓冲任何帧;后者是缓存所有的帧。如果指定了QMovie::CacheAll选项,那么就可以使用jumpToframe()来跳转到指定的帧了。另外,还可以使用setSpeed()来设置动画的播放速度,该速度是以原始速度的百分比来衡量的,默认的速度为100%。</p>\n<p>下面用一个例子来看一个这些功能的应用。</p>\n<p>  新建Qt Widgets应用，项目名称mymovie，类名MainWindow和基类QMainWindow保持不变。项目创建完成后打开设计模式，将界面设计成下面这样：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2acbc738bc804d74803ab1046e6cee7e.png\"/></p>\n<p>  这其中，要设置水平滑动部件Horizontal Slider的tickPosition属性为TickBelow，然后设置间隔tickInterval的数值为10；选中\"暂停\"按钮的checkable属性；设置SpinBox的后缀suffix属性为\"%\"，最大值maximum为999，当前值value为100。</p>\n<p>然后到mainwindow.h文件中添加前置声明：</p>\n<pre><code>class QMovie;\n</code></pre>\n<p>再添加私有对象：</p>\n<pre><code>QMovie * movie;\n</code></pre>\n<p>更改完成后widget.h中的内容应该如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c3e5fd3fe4a7426aa288cccf7829fa2e.png\"/></p>\n<p>然后将widget.cpp中的内容改为：</p>\n<pre><code>#include \"mainwindow.h\"\n#include \"ui_mainwindow.h\"\n#include &lt;QMovie&gt;\n\nMainWindow::MainWindow(QWidget *parent) :\n    QMainWindow(parent),\n    ui(new Ui::MainWindow)\n{\n    ui-&gt;setupUi(this);\n    ui-&gt;label-&gt;setAlignment(Qt::AlignCenter);       // Label内的对齐策略\n    ui-&gt;label-&gt;setBackgroundRole(QPalette::Dark);   // 设置label未播放动画时的背景色\n    ui-&gt;label-&gt;setAutoFillBackground(true);\n\n    movie = new QMovie(this);\n    movie-&gt;setFileName(\"../mymovie/rain.gif\");\n    movie-&gt;setCacheMode(QMovie::CacheAll);          // 缓存动画的每一帧\n    movie-&gt;setScaledSize(ui-&gt;label-&gt;size());        // 动画播放区域的大小和label部件一样\n    ui-&gt;label-&gt;setMovie(movie);\n    ui-&gt;horizontalSlider-&gt;setMinimum(0);\n    ui-&gt;horizontalSlider-&gt;setMaximum(movie-&gt;frameCount());\n    // 随着动画帧的播放进度条向前移动(每次移动tickInterval个单位，这里是10)\n    connect(movie, &amp;QMovie::frameChanged, ui-&gt;horizontalSlider, &amp;QSlider::setValue);\n}\n\nMainWindow::~MainWindow()\n{\n    delete ui;\n}\n\nvoid MainWindow::on_horizontalSlider_valueChanged(int value)\n{\n    movie-&gt;jumpToFrame(value);      // 调转到前面播放动画时缓存的某一帧\n}\n\nvoid MainWindow::on_startButton_clicked()\n{\n    movie-&gt;start();\n}\n\nvoid MainWindow::on_pauseButton_clicked(bool checked)\n{\n    movie-&gt;setPaused(checked);  // 如果按钮被选中，则暂停动画\n}\n\nvoid MainWindow::on_stopButton_clicked()\n{\n    movie-&gt;stop();\n}\n\nvoid MainWindow::on_screenshotButton_clicked()\n{\n    int id = movie-&gt;currentFrameNumber();\n    QPixmap pix = movie-&gt;currentPixmap();           // 一帧中保存的图像\n    pix.save(QString(\"../mymovie/%1.png\").arg(id)); // 保存gif的当前帧\n}\n\nvoid MainWindow::on_spinBox_valueChanged(int arg1)\n{\n    movie-&gt;setSpeed(arg1);\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\58f0e0c5e1264542aa6e908088bb366c.png\"/></p>\n<h1><a id=\"QMediaPlayer_303\"></a>QMediaPlayer</h1>\n<p>  前面播放音频，视频时都使用了QMediaPlayer这个类。</p>\n<p>  要使用QMediaPlayer进行播放，首先需要使用<code>setMedia(const QMediaContent &amp;media, QIODevice stream = 0)</code>槽函数来指定媒体源。其中，QMediaContent提供了对媒体源的访问，它包含了媒体源的URL和格式信息，一般对于本地媒体只需要指定文件路径即可，如前面代码中那样使用QUrl::fromLocalFile指定路径即可。<br/><br/>   如果这里提供了一个媒体流stream，那么将会直接从流中读取媒体数据而不再对单独的媒体文件进行解析。<br/><br/>   设置完媒体源后，可以使用play()函数进行播放，使用pause()，stop()进行暂停和停止。可以通过currentMedia()来获取当前进行播放的媒体内容，返回类型是QMediaContent。使用duration()获取当前媒体的时长。position()可以获取当前的播放位置，单位为毫秒。使用setPosition()可以跳转到一个播放点，通过关联positionChanged()信号可以随时获取播放进度。使用volume()可以获取当前的播放音量，其范围为0 ~ 100，setVolume()可以用来设置音量大小；而当音量改变时会发射volumeChanged()信号，如果要设置为静音，可以使用setMuted()函数。</p>\n<p>下面通过一个例子来讲解以上属性。</p>\n<p>  新建Qt Widgets应用，下项目名称mypayer，类名Mainwindow和基类QMainWindow都保持默认即可。完成后在项目文件myplayer.pro中修改代码如下：</p>\n<pre><code>QT += core gui multimedia\n</code></pre>\n<p>完成后保存该文件。然后将mainwindow.h文件改为：</p>\n<pre><code>#ifndef MAINWINDOW_H\n#define MAINWINDOW_H\n\n#include &lt;QMainWindow&gt;\n#include &lt;QMediaPlayer&gt;\n\nnamespace Ui {\nclass MainWindow;\n}\n\nclass QMediaPlaylist;\nclass MainWindow : public QMainWindow\n{\n    Q_OBJECT\n\npublic:\n    explicit MainWindow(QWidget *parent = 0);\n    ~MainWindow();\n\nprivate:\n    Ui::MainWindow *ui;\n    QMediaPlayer *player;\n\nprivate slots:\n    void updatePosition(qint64 position);\n\n    void on_playerButton_clicked();\n    void on_pauseButton_clicked();\n    void on_stopButton_clicked();\n    void on_horizontalSlider_sliderMoved(int position);\n};\n\n#endif // MAINWINDOW_H\n</code></pre>\n<p>然后在mainwindow.cpp文件中，在构造函数中添加如下代码：</p>\n<pre><code>player = new QMediaPlayer(this);\nplayer-&gt;setMedia(QUrl::fromLocalFile(\"..myplayer/music/郝云 - 活着.mp3\"));\nconnect(player, &amp;QMediaPlayer::positionChanged, this, &amp;MainWindow::updatePosition);\n</code></pre>\n<p>  双击mainwindow.ui进入设计模式，然后向界面中拖入一个Horizontal Slider，3个按钮和3个Label，3个按钮显示文本分别设置为\"播放\"，“暂停\"和\"停止”，同时将3个按钮的objectName分别设为\"playButton\",“pauseButton\"和\"stopButton”，3个Label用于后面输出不同的信息。然后再分别转到3个按钮的单击信号槽中，对它们的槽函数做如下定义：</p>\n<pre><code>void MainWindow::on_playerButton_clicked()\n{\n    player-&gt;play();\n}\n\nvoid MainWindow::on_pauseButton_clicked()\n{\n    player-&gt;pause();\n}\n\nvoid MainWindow::on_stopButton_clicked()\n{\n    player-&gt;stop();\n}\n</code></pre>\n<p>然后再转到horizontalSider的sliderMoved(int)槽，在mainwindow.cpp做出它的定义：</p>\n<pre><code>void MainWindow::on_horizontalSlider_sliderMoved(int position)\n{\n    player-&gt;setPosition(position * 1000);\n}\n</code></pre>\n<p>最后添加updatePosition()槽的定义：</p>\n<pre><code>void MainWindow::updatePosition(qint64 position){\n    ui-&gt;horizontalSlider-&gt;setMaximum(player-&gt;duration() / 1000);\n    ui-&gt;horizontalSlider-&gt;setValue(position / 1000);\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\94b9864c7d2b48bc9ad204ceef188922.png\"/></p>\n<h2><a id=\"1__394\"></a>1. 播放状态</h2>\n<p>  当QMediaPlayer使用setMedia()设置了媒体源后，setMedia()函数会直接返回，并不等待媒体加载完成，也不会检查可能存在的错误。当媒体的状况发生改变时播放器会发射mediaStatusChanged()信号，可以通过关联该信号来获取媒体加载的一些信息。播放器播放的当前媒体会有9种不同的状况，这9种状况由QMediaPlayer::MediaStatus枚举类型定义，其可取值见下表：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c681839c563d4ca0bc7bec769db537e6.png\"/></p>\n<p>  另外，当播放器发生错误时会发射error()信号，通过关联该信号可以对相应的错误进行处理。播放器会出现6种不同的错误情况，这6种情况由QMediaPlayer::Error枚举类型定义。其可选值如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6eedcef12f7c4f71874031cd1a5ffd49.png\"/></p>\n<p>  QMediaPlayer进行播放时拥有3种状态，它总是处于这3种状态中的其中一种。这3种状态由QMediaPlayer::State枚举类型定义，其取值见下表：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4b40744322094543a3a3b6da3e7a9c30.png\"/></p>\n<p>  还是在myplayer项目中，继续向其中添加代码。首先在mainwindow.h中声明3个私有槽：</p>\n<pre><code>private slots:\n\tvoid stateChanged(QMediaPlayer::State state);\n\tvoid mediaStatusChanged(QMediaPlayer::MediaStatus status);\n\tvoid showError(QMediaPlayer::Error error);\n</code></pre>\n<p>然后到mainwindow.cpp中，现在构造函数中添加信号和槽关联：</p>\n<pre><code>connect(player, &amp;QMediaPlayer::stateChanged, this, &amp;MainWindow::stateChanged);\nconnect(player, &amp;QMediaPlayer::mediaStatusChanged, this, &amp;MainWindow::mediaStatusChanged);\nconnect(player, static_cast&lt;void(QMediaPlayer::*)(QMediaPlayer::Error)&gt;(&amp;QMediaPlayer::error), this, &amp;MainWindow::showError);\n</code></pre>\n<p>  然后进入设计模式，将上面用于显示媒体状态的3个Label的文本分别改为\"mediaStatusLabel\",“stateLabel\"和\"errorLabel”，同时也设置它们的objectName分别为\"mediaStatusLabel\",“stateLabel\"和\"errorLabel”。</p>\n<p>再转到mainwindow.cpp中对这几个槽做出定义：</p>\n<pre><code>void MainWindow::mediaStatusChanged(QMediaPlayer::MediaStatus status){\n    switch(status){\n        case QMediaPlayer::UnknownMediaStatus:\n             ui-&gt;mediaStatusLabel-&gt;setText(tr(\"媒体未知状况!\"));\n             break;\n        case QMediaPlayer::NoMedia:\n             ui-&gt;mediaStatusLabel-&gt;setText(tr(\"没有媒体文件!\"));\n             break;\n        case QMediaPlayer::BufferingMedia:\n             ui-&gt;mediaStatusLabel-&gt;setText(tr(\"正在缓冲媒体文件!\"));\n             break;\n        case QMediaPlayer::BufferedMedia:\n             ui-&gt;mediaStatusLabel-&gt;setText(tr(\"媒体文件缓冲完成!\"));\n             break;\n        case QMediaPlayer::LoadingMedia:\n             ui-&gt;mediaStatusLabel-&gt;setText(tr(\"正在加载媒体!\"));\n             break;\n        case QMediaPlayer::StalledMedia:\n             ui-&gt;mediaStatusLabel-&gt;setText(tr(\"播放停滞!\"));\n             break;\n        case QMediaPlayer::EndOfMedia:\n             ui-&gt;mediaStatusLabel-&gt;setText(tr(\"播放结束!\"));\n             break;\n        case QMediaPlayer::LoadedMedia:\n             ui-&gt;mediaStatusLabel-&gt;setText(tr(\"媒体加载完成!\"));\n             break;\n        case QMediaPlayer::InvalidMedia:\n             ui-&gt;mediaStatusLabel-&gt;setText(tr(\"不可用的媒体文件!\"));\n             break;\n        default: break;\n    }\n}\n\nvoid MainWindow::stateChanged(QMediaPlayer::State state){\n    switch(state){\n        case QMediaPlayer::StoppedState:\n             ui-&gt;stateLabel-&gt;setText(tr(\"停止状态!\"));\n             break;\n        case QMediaPlayer::PlayingState:\n             ui-&gt;stateLabel-&gt;setText(tr(\"播放状态!\"));\n             break;\n        case QMediaPlayer::PausedState:\n             ui-&gt;stateLabel-&gt;setText(tr(\"暂停状态!\"));\n             break;\n        default: break;\n    }\n}\n\nvoid MainWindow::showError(QMediaPlayer::Error error){\n    switch(error){\n        case QMediaPlayer::NoError:\n             ui-&gt;errorLabel-&gt;setText(tr(\"没有错误!\"));\n             break;\n        case QMediaPlayer::ResourceError:\n             ui-&gt;errorLabel-&gt;setText(tr(\"媒体资源无法被解析!\"));\n             break;\n        case QMediaPlayer::FormatError:\n             ui-&gt;errorLabel-&gt;setText(tr(\"不支持该媒体格式!\"));\n             break;\n        case QMediaPlayer::NetworkError:\n             ui-&gt;errorLabel-&gt;setText(tr(\"发生了一个网络错误!\"));\n             break;\n        case QMediaPlayer::AccessDeniedError:\n             ui-&gt;errorLabel-&gt;setText(tr(\"没有播放权限!\"));\n             break;\n        case QMediaPlayer::ServiceMissingError:\n             ui-&gt;errorLabel-&gt;setText(tr(\"没有发现有效的播放服务!\"));\n             break;\n    }\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fcb99cadee3a4bb1be91a9c88941fd75.png\"/></p>\n<h2><a id=\"2__499\"></a>2. 获取媒体元数据</h2>\n<p>  可以使用QMediaPlayer的metaData()函数来获取媒体的元数据。QMediaMetaData()命令空间中提供了众多元数据属性。例如，媒体文件的标题Title作者Author和播放时间Duration等。<br/><br/>   每当QMediaPlayer对媒体源进行解析，元数据可用时都会发射metaDataAvailableChanged()信号，可以关联信号来获取当前媒体的相关信息。</p>\n<p>下面简单介绍下如何获取常用的几个元数据。</p>\n<p>往前面程序中继续添加代码，首先在mainwindow.h文件中添加私有槽声明：</p>\n<pre><code>private slots:\n\tvoid metaDataAvailableChanged(bool available);\n</code></pre>\n<p>然后到mainwindow.cpp中，在构造函数最后添加信号槽关联：</p>\n<pre><code>connect(player, &amp;QMediaPlayer::metaDataAvailableChanged, this, &amp;MainWindow::metaDataAvailableChanged);\n</code></pre>\n<p>然后添加metaDataAvailableChanged()槽的定义：</p>\n<pre><code>void MainWindow::metaDataAvailableChanged(bool available)\n{\n\tif(available) {\n\t\tQString title = player-&gt;metaData(\"Title\").toString();\t// 获取媒体标题信息\n\t\tQString author = player-&gt;metaData(\"Author\").toString();\n\t\tsetWindowTitle(title + \"-\" + author);\n\t}\n}\n</code></pre>\n<p>  另外，要注意的是，如果要获取媒体元数据，那么使用setMedia()设置媒体源时一定要使用绝对路径，使用相对路径将无法元数据。所以还要将先前构造函数中的<code>player-&gt;setMedia()</code>中的文件路径改为绝对路径。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\398eadf381c048c59ea48ca885d6a9b5.png\"/></p>\n<h2><a id=\"3__531\"></a>3. 播放列表</h2>\n<p>  QMediaPlaylist类提供了一个播放列表，它其实是一个QMediaContent对象列表，并包含了一些实用功能，QMediaPlayer可以通过setPlaylist()来设置一个播放列表。<br/><br/>   QMediaPlaylist可以通过addMedia()来添加一个QMediaContent对象或者添加一个QMediaContent对象列表作为媒体源，也可以通过insertMedia()将媒体插入到列表任意位置，或者使用load()函数来加载网络资源。使用mediaCount()可以获取列表中媒体的数量，currentMedia()可以获取当前的媒体。使用removeMedia()可以设置删除一个媒体。而clear()可以清空整个播放列表。可以通过next()，previous()，setCurrentIndex()和shuffle()等槽来指定播放列表中的条目进行播放，每当播放列表中当前位置变化时都会发射currentIndexChanged()信号。</p>\n<p>  QMediaPlaylist中的setPlaybackMode()可以设置播放模式，由QMediaPlaylist::PlaybackMode枚举类型进行定义，一共包含5种：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d62b52a4a2664e2db43a6fb9b2cdbf44.png\"/></p>\n<p>  QMediaPlaylist类为QMediaPlayer提供了一个内部的播放列表，但是其并非可视化部件，所以在实际应用中还需要将其可视化。</p>\n<p>下面接着向前面的程序中添加代码，首先在mainwindow.h文件中添加前置声明：</p>\n<pre><code>class QMediaPlaylist;\n</code></pre>\n<p>然后添加一个私有播放列表对象：</p>\n<pre><code>QMediaPlaylist * playlist;\n</code></pre>\n<p>  下面进入mainwindow.cpp文件，先添加头文件，然后在构造函数最后添加如下代码：</p>\n<pre><code>playlist = new QMediaPlaylist;\t// 调用无参构造函数，等价于new QMediaPlaylist()\nplaylist-&gt;addMedia(QUrl::fromLocalFile(\"../myplayer/music/G.E.M. 邓紫棋 - 泡沫.mp3\"));\nplaylist-&gt;addMedia(QUrl::fromLocalFile(\"../myplayer/music/S.H.E - 不想长大 (Live).mp3\"));\nplaylist-&gt;addMedia(QUrl::fromLocalFile(\"../myplayer/music/阿肆 - 我在人民广场吃炸鸡.mp3\"));\nplaylist-&gt;setCurrentIndex(0);\nplaylist-&gt;setPlaybackMode(QMediaPlaylist::Loop);\nplayer-&gt;setPlaylist(playlist);\n</code></pre>\n<p>另外，既然使用播放列表，那么就要把用于播放单个音乐的</p>\n<pre><code>player-&gt;setMedia(QUrl::fromLocalFile(\"C:/Users/25832/Documents/Qt-creator-pro/Media/myplayer/myplayer/music/郝云 - 活着.mp3\"));\n</code></pre>\n<p>这句删掉。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\44ac3ca06b4f498ca8ec81e55fafafca.png\"/></p>\n<p>这个程序运行时会连续循环播放几首音乐。</p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_15\">播放音频</a></li><li><ul><li><a href=\"#_19\">播放压缩音频</a></li><li><a href=\"#_31\">低延迟声音效果</a></li></ul>\n</li><li><a href=\"#_84\">播放视频</a></li><li><ul><li><a href=\"#_88\">播放视频文件</a></li><li><a href=\"#QMovieGIF_190\">使用QMovie播放GIF文件</a></li></ul>\n</li><li><a href=\"#QMediaPlayer_303\">QMediaPlayer</a></li><li><ul><li><a href=\"#1__394\">1. 播放状态</a></li><li><a href=\"#2__499\">2. 获取媒体元数据</a></li><li><a href=\"#3__531\">3. 播放列表</a></li></ul>\n</li><li><a href=\"#_573\">使用相机</a></li><li><ul><li><a href=\"#_QCamera_577\">相机 QCamera</a></li></ul>\n</li></ul>\n</div>\n<br/>   Qt多媒体模块不仅对音频播放提供了强大的支持，而且对音视频录制和处理也提供了众多接口。\n<p></p>\n<h1><a id=\"_573\"></a>使用相机</h1>\n<p>  Qt多媒体模块中提供了一些与相机相关的类，如果设备安装了摄像头，那么就可以通过这些类进行拍照或者视频录制。</p>\n<h2><a id=\"_QCamera_577\"></a>相机 QCamera</h2>\n<p>  可以使用QCameraInfo来查询系统当前可用的相机设备，一般使用其静态函数defaultCamera()来获取默认相机的设备信息，或者使用静态函数availableCameras()来获取所有可用的列表。例如：</p>\n<pre><code>QList&lt;QCameraInfo&gt; cameras = QCameraInfo::availableCameras();\nforeach(const QCameraInfo &amp;cameraInfo, camera)\n\tqDebug() &lt;&lt; cameraInfo.deviceName();\n</code></pre>\n<p>  这里的deviceName()可以返回相机的设备名称，它是相机的唯一ID，不过因为它是一串杂乱的编码，所以并不具有可读性。如果要获取友好的可读信息，则可以使用description()，它可以返回相机的描述，类似\"USB 2.0 Camera\"这样的信息，而且操作系统也经常通过这串字符来显示设备标题。用orientation()可以获取相机的旋转角度，这个一般只在移动设备上有效。</p>\n<p>获取了可用的相机信息cameraInfo后，可以通过它来构建一个QCamera对象：</p>\n<pre><code>camera = new QCamera(cameraInfo);\n</code></pre>\n<p>  QCamera类为系统相机设备提供了相应的接口，可以使用start()和stop()来开启和关闭相机。相机拥有8种不同的状态。如下表所示，每当状态改变时都会发射statusChanged()信号。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f097ca3e4a4a4f9ca79ea666a4f2acc9.png\"/></p>\n<p>  相机还支持曝光锁定，白平衡锁定和对焦锁定，由QCamera::LokType枚举类型定义，二者对应的值分别是QCamera::LockExposure，QCamera::LockWhiteBalance和QCamera::LockFocus，默认值是QCamera::NoLock(即不进行锁定)。可以通过supportLocks()来获取相机支持的锁定类型，使用searchAndLock()来设置锁定，使用unlock()来取消锁定。</p>\n<p>  可以使用setViewfinder()来设置取景器部件。相机的取景器有两种选择，在普通部件中使用，可以使用QCameraViewfinder类，它继承自QVideoWidget；在图形视图框架中使用时，可以使用QGraphicsVideoItem类。<br/><br/>   通过setCaptureMode()可以设置相机的捕获模式，通过QCamera:CaptureModes枚举类型定义了3种捕获模式，默认的是QCamera::CaptureViewfinder模式，捕获的图像只显示在取景器上；QCamera::CaptureStillImage模式会进行静态帧捕获，也就是进行拍照；QCamera::CaptureVideo模式进行视频捕获，也就是录像。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-12-23 23:03:20", "summary": "文章目录播放音频播放压缩音频低延迟声音效果播放视频播放视频文件使用播放文件播放状态获取媒体元数据播放列表使用相机相机对音视频的播放和控制，相机拍照，收音机等多媒体应用提供了强大的支持。使用了全新的模块"}