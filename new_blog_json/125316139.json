{"blogid": "125316139", "writerAge": "码龄4年", "writerBlogNum": "224", "writerCollect": "480", "writerComment": "40", "writerFan": "2206", "writerGrade": "5级", "writerIntegral": "3092", "writerName": "王同学加油", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125316139.jpg", "writerRankTotal": "6131", "writerRankWeekly": "2571", "writerThumb": "92", "writerVisitNum": "288171", "blog_read_count": "1003", "blog_time": "于 2022-06-16 15:23:15 发布", "blog_title": "error: invalid conversion from ‘void*‘ to ‘char*‘ [-fpermissive]", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<pre><code>#include &lt;stdio.h&gt;\n#include&lt;malloc.h&gt;\n#define IN\n#define OUT\n\n// 获取文件大小\nint FileSize(IN char *file)\n{\n\tFILE *fil;\n\tfil = fopen(file,\"rb\");\n\tfseek(fil,0L,SEEK_END);\n\tint filesize = ftell(fil);\n\tfseek(fil,0,0);\n\treturn filesize;\n}\n\n// 读取文件\nint ReadFileData(IN char *fileName, OUT char *filedata)\n{\n\tFILE *fpIN;\n\tint fileSizes = FileSize(fileName);\n\tfpIN = fopen(fileName,\"rb\");\n\tfread(filedata,1,fileSizes,fpIN);\n\tfclose(fpIN);\n}\n\n// 写入文件\nint WriteToFile(char *filedata, int size, OUT char *outFileName)\n{\n\tFILE *fpOUT;\n\tfpOUT = fopen(outFileName,\"w+\");\n\tfwrite(filedata,1,size,fpOUT);\n\tfclose(fpOUT);\n}\n\nint main()\n{\n\tchar *origin_file = \"test.cpp\";\n\tint orgfilesize = FileSize(origin_file);  // 获取文件的大小\n\n\n\n\tchar *file_data=  malloc(orgfilesize);      // 分配文件大小的内存\n    if (file_data == NULL)\n        return NULL;\n\tReadFileData(origin_file, file_data);     // 读取文件\n\tchar *outFile = \"test.txt\";\n\tWriteToFile(file_data,orgfilesize,outFile);  // 写出文件\n\n\treturn 0;\n}\n</code></pre>\n<p> 其中下面这行代码</p>\n<pre><code class=\"language-bash\">char *file_data=  malloc(orgfilesize);</code></pre>\n<p>malloc函数是C语言中分配空间所用， 返回类型是 void* 类型。void* 表示未确定类型的指针。C,C++规定，void* 类型可以强制转换任何其它类型的指针。</p>\n<pre><code>malloc()函数其实就在内存中找一片指定大小的空间，然后将这个空间的首地址范围给一个指针变量，\n这里的指针变量可以是一个单独的指针，也可以是一个数组的首地址，\n这要看malloc()函数中参数size的具体内容。</code></pre>\n<p><strong>使用gcc编译直接通过并打印出下面的结果</strong></p>\n<pre><code class=\"language-cpp\">Original String: testing.\n</code></pre>\n<p><br/><strong>当使用g++编译时，会出现一个错误和警告，如下</strong></p>\n<pre><code class=\"language-cpp\">error: invalid conversion from ‘void*’ to ‘char*’ [-fpermissive]\nwarning: deprecated conversion from string constant to ‘char*’ [-Wwrite-strings]</code></pre>\n<p>     出现error的原因是C++设计得比C更加安全，它不能自动地将void *转换为其它指针类型。</p>\n<p>而出现warning的原因则是程序试图将字符串字面值（在C++中字符串字面值为const char []类型，而在C语言中则为char []类型）转换为char *类型，，</p>\n<pre><code class=\"language-cpp\">char *file_data= (char*) malloc(orgfilesize); \n# malloc函数的返回值是一个 void* ，赋值给变量，需在malloc前面加个强制转换</code></pre>\n<p><strong>malloc函数简介</strong><br/>         malloc函数在C语言和C++中经常使用，为变量动态分配内存空间。malloc 向系统申请分配指定size个字节的内存空间</p>\n<pre><code class=\"language-bash\">函数原型 void malloc(int size)</code></pre>\n<p>说明：</p>\n<p>        malloc 向系统申请分配指定size个字节的内存空间。如果分配成功则返回指向被分配内存的指针，否则返回空指针NULL。<br/> 该函数包含在头文件：#include &lt;malloc.h&gt;中 ，使用时需导入头文件*&lt;malloc.h&gt;或者&lt;stdlib.h&gt;** </p>\n<p>注意:当内存不再使用时，应使用free()函数将内存块释放。<br/>  </p>\n<h3>常见用法</h3>\n<p><strong>1、在不知道变量需要的确定内存时</strong></p>\n<p>比如在定义一个数组时，数组的大小在程序编译后才知道，这时可以用malloc函数</p>\n<pre><code class=\"language-cpp\">int main()\n{\n\tint n;\n\tscanf(\"%d\",&amp;n);\n\tint *m=(int *)malloc(sizeof(int)*n);  //定义了一个指向n个int的\t 指针变量，相当于开了一个n个int元素的数组。\n\t//如果n很大，超过1000000,那么开一个这么大的int型数组就会发生栈溢出。\n\tint m[1000000]; //会发生栈溢出。\n\treturn 0;\n}\n</code></pre>\n<p><strong>2、为结构体变量分配空间。</strong><br/> 定义一个结构体类型的普通变量，可以不malloc动态申请内存，CPU会为结构体变量分配内存 。</p>\n<pre><code class=\"language-cpp\">typedef struct\n{\n    int n;\n    char *p;\n}node;\n\nint  main()\n{\n\tnode a;  //定义的是结构体普通变量，可以不使用malloc申请内存，CPU会为这个结构体变量分配内存\n    a.n=4;\n    printf(\"%d\",a-&gt;n);  //可以成功输出\n    node *b;  //定义的是结构体指针变量，CPU会为这个指针开辟内存，大小为4个字节。但是要存储结构体的数据成员这个空间不够，会引发段错误，此时必须要malloc申请一个结构体类型大小的动态内存，存储数据成员。\n    //b=(node *)malloc(sizeof(node));\n    printf(\"%d\",sizeof(b)); //用sizeof(b)查看b的大小为4\n    char p[]=\"abcd\";\n    printf(\"%d\",b-&gt;n);\n    (a-&gt;p)=p;\n    printf(\"%c\",a-&gt;p[0]);\n    return 0;\n}\n</code></pre>\n<p>没有使用malloc为结构体指针变量b分配空间，会报warning: ‘b’ is used uninitialized in this function [-Wuninitialized]|。</p>\n<p><strong>3、在定义结构体时需要注意，要依次为其成员分配空间。</strong><br/>         在平常使用过程中，在用malloc函数为某个结构体分配空间后，在对其成员变量（指针类型）进行操作。</p>\n<p>比如 令该指针 p=NULL时，总会报“Program received signal SIGSEGV, Segmentation fault.\"<br/><a href=\"https://blog.csdn.net/weixin_44291161/article/details/106036679?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-106036679-blog-121262510.pc_relevant_paycolumn_v3&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-106036679-blog-121262510.pc_relevant_paycolumn_v3&amp;utm_relevant_index=2\" title=\"使用malloc函数\">使用malloc函数</a></p>\n</div>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-06-16 15:23:15", "summary": "获取文件大小读取文件写入文件获取文件的大小分配文件大小的内存读取文件写出文件其中下面这行代码函数是语言中分配空间所用，返回类型是类型。表示未确定类型的指针。规定，类型可以强制转换任何其它类型的指针。函"}