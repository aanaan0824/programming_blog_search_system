{"blogid": "126741121", "writerAge": "码龄14年", "writerBlogNum": "179", "writerCollect": "709", "writerComment": "120", "writerFan": "154", "writerGrade": "5级", "writerIntegral": "4184", "writerName": "蓝天居士", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126741121.jpg", "writerRankTotal": "4737", "writerRankWeekly": "6896", "writerThumb": "150", "writerVisitNum": "431223", "blog_read_count": "10", "blog_time": "已于 2022-09-07 17:44:20 修改", "blog_title": "grep完全匹配及精确匹配实验", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>初始实验脚本如下：</p>\n<pre><code class=\"language-bash\">#!/bin/bash\n\ntmp_license=\"GPL-2\"\nconcluded_license=\"LGPL-2.1\"\n\necho \"1111111111111111111111111111111111111\"\necho $concluded_license | grep \"$tmp_license\"\n\necho \"2222222222222222222222222222222222222\"\n`echo $concluded_license | grep \"$tmp_license\"`</code></pre>\n<p>运行以上脚本会出现如下结果：</p>\n<pre><code class=\"language-bash\">./test_subscript/full_match_test.sh ./sources/glibc-2.35\n1111111111111111111111111111111111111\nLGPL-2.1\n2222222222222222222222222222222222222\n./test_subscript/full_match_test.sh: 行 11: LGPL-2.1：未找到命令\n</code></pre>\n<p>此时修改脚本，加入ret=，修改后的脚本如下：</p>\n<pre><code class=\"language-bash\">#!/bin/bash\n\ntmp_license=\"GPL-2\"\nconcluded_license=\"LGPL-2.1\"\n\necho \"1111111111111111111111111111111111111\"\necho $concluded_license | grep \"$tmp_license\"\n\necho \"2222222222222222222222222222222222222\"\nret=`echo $concluded_license | grep \"$tmp_license\"`\necho \"$ret\"</code></pre>\n<p>运行修改后的脚本结果如下：</p>\n<pre><code class=\"language-bash\">./test_subscript/full_match_test.sh ./sources/glibc-2.35\n1111111111111111111111111111111111111\nLGPL-2.1\n2222222222222222222222222222222222222\nLGPL-2.1\n</code></pre>\n<p>可见，在shell中不能直接调用``，必须有变量来接收才可以。</p>\n<p>另外可以看到，\"LGPL-2.1\"中是包含\"GPL-2\"的，如果想要收集所有的协议，则会产生问题，正常应该是\"LGPL-2.1\"和\"GPL-2\"，但是按照以上的方法，\"GPL-2\"会“湮灭”在\"LGPL-2,1\"中，从而导致只有\"LGPL-2.1\"一个协议被收集到。</p>\n<p>如何解决？继续修改脚本，加入Fx选项实现完全匹配，已解决这一问题。脚本如下：</p>\n<pre><code class=\"language-bash\">#!/bin/bash\n\ntmp_license=\"GPL-2\"\nconcluded_license=\"LGPL-2.1\"\n\necho \"1111111111111111111111111111111111111\"\necho $concluded_license | grep -Fx \"$tmp_license\"\n\necho \"2222222222222222222222222222222222222\"\nret=`echo $concluded_license | grep -Fx \"$tmp_license\"`\necho \"$ret\"\n</code></pre>\n<p>脚本运行结果如下：</p>\n<pre><code class=\"language-bash\">$ ./test_subscript/full_match_test.sh ./sources/glibc-2.35\n1111111111111111111111111111111111111\n2222222222222222222222222222222222222\n\n</code></pre>\n<p>这里有一个“小手段”要注意：grep本来是用于在文件中查找字符串。那么如何将其用在字符串中查找字符串？使用echo &lt;string1&gt; | grep &lt;string2&gt;的方式即可实现。</p>\n<p>可以看到，加入-Fx选项后，会进行全字匹配，而不会进行误判断了。</p>\n<p>完整的实验脚本如下：</p>\n<pre><code class=\"language-bash\">#!/bin/bash\n\ntmp_license=\"GPL-2\"\nconcluded_license=\"LGPL-2.1\"\n\necho \"1111111111111111111111111111111111111\"\nif [ `echo $concluded_license | grep \"$tmp_license\"` ]; then\n\techo \"exist\"\nelse\n\techo \"not exist\"\nfi\n\necho \"2222222222222222222222222222222222222\"\nret=`echo $concluded_license | grep -Fx \"$tmp_license\"`\necho \"$ret\"\n</code></pre>\n<p></p>\n<p>在此基础上在进行进一步实验，这次将concluded_license进行修改，脚本如下：</p>\n<pre><code class=\"language-bash\">#!/bin/bash\n\ntmp_license=\"GPL-2\"\nconcluded_license=\"LGPL-2.1 or GPL-2\"\n\necho \"1111111111111111111111111111111111111\"\nif [ `echo $concluded_license | grep \"$tmp_license\"` ]; then\n\techo \"exist\"\nelse\n\techo \"not exist\"\nfi\n\necho \"2222222222222222222222222222222222222\"\nret=`echo $concluded_license | grep -Fx \"$tmp_license\"`\necho \"$ret\"\n</code></pre>\n<p>此时运行脚本，会出现以下错误：</p>\n<pre><code class=\"language-bash\">$ ./test_subscript/full_match_test.sh ./sources/glibc-2.35\n1111111111111111111111111111111111111\n./test_subscript/full_match_test.sh: 第 27 行： [: or：需要二元表达式\nnot exist\n2222222222222222222222222222222222222\n\n</code></pre>\n<p>解决方法是先用一个变量接收一下，也就是说不直接将echo带入到if中，再进行判断。修改后的脚本如下所示：</p>\n<pre><code class=\"language-bash\">#!/bin/bash\n\ntmp_license=\"GPL-2\"\nconcluded_license=\"LGPL-2.1 or GPL-2\"\n\necho \"1111111111111111111111111111111111111\"\nret=`echo \"$concluded_license\" | grep \"$tmp_license\"`\n#echo \"ret: $ret\"\nif [ -n \"$ret\" ]; then\n#if [ `echo $concluded_license | grep \"$tmp_license\"` ]; then\n\techo \"exist\"\nelse\n\techo \"not exist\"\nfi\n\necho \"2222222222222222222222222222222222222\"\nret=`echo $concluded_license | grep -Fx \"$tmp_license\"`\necho \"$ret\"</code></pre>\n<p>运行脚本，结果如下所示：</p>\n<pre><code class=\"language-bash\">$ ./test_subscript/full_match_test.sh ./sources/glibc-2.35\n1111111111111111111111111111111111111\nnot exist\n2222222222222222222222222222222222222\n\n</code></pre>\n<p>虽然脚本错误问题解决了，但是逻辑上出现了新问题。这次\"LGPL-2.1 or GPL-2中\"明显已经包含了\"GPL-2\"，应该能够搜索到，但是反倒找不到了，为什么呢？原因是-Fx实现了完全匹配，条件太强了，必须完全相同，差一点都不行。我们只需要精确匹配就可以了，将-Fx参数改为-w，脚本如下：</p>\n<pre><code class=\"language-bash\">#!/bin/bash\n\ntmp_license=\"GPL-2\"\nconcluded_license=\"LGPL-2.1 or GPL-2\"\n\necho \"1111111111111111111111111111111111111\"\nret=`echo \"$concluded_license\" | grep -w \"$tmp_license\"`\n#echo \"ret: $ret\"\nif [ -n \"$ret\" ]; then\n#if [ `echo $concluded_license | grep \"$tmp_license\"` ]; then\n\techo \"exist\"\nelse\n\techo \"not exist\"\nfi\n\necho \"2222222222222222222222222222222222222\"\nret=`echo $concluded_license | grep -Fx \"$tmp_license\"`\necho \"$ret\"\n</code></pre>\n<p>运行结果如下：</p>\n<pre><code class=\"language-bash\">$ ./test_subscript/full_match_test.sh ./sources/glibc-2.35\n1111111111111111111111111111111111111\nexist\n2222222222222222222222222222222222222\n\n</code></pre>\n<p>此时还不算完，还要确保-w参数能够在concluded_license只为\"LGPL-2.1\"时，不会“湮灭\"GPL\"，修改脚本，恢复concluded_license为老的值，修改后脚本如下所示：</p>\n<pre><code class=\"language-bash\">#!/bin/bash\n\ntmp_license=\"GPL-2\"\nconcluded_license=\"LGPL-2.1\"\n\necho \"1111111111111111111111111111111111111\"\nret=`echo \"$concluded_license\" | grep -w \"$tmp_license\"`\n#echo \"ret: $ret\"\nif [ -n \"$ret\" ]; then\n#if [ `echo $concluded_license | grep \"$tmp_license\"` ]; then\n\techo \"exist\"\nelse\n\techo \"not exist\"\nfi\n\necho \"2222222222222222222222222222222222222\"\nret=`echo $concluded_license | grep -Fx \"$tmp_license\"`\necho \"$ret\"\n</code></pre>\n<p>脚本运行结果如下：</p>\n<pre><code class=\"language-bash\">$ ./test_subscript/full_match_test.sh ./sources/glibc-2.35\n1111111111111111111111111111111111111\nnot exist\n2222222222222222222222222222222222222\n\n</code></pre>\n<p>可以看到，使用-w参数进行grep，不会发生“湮灭”的情况，同时也不会过度严格，将真正包含的文本认为不存在。</p>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-07 17:44:20", "summary": "初始实验脚本如下：运行以上脚本会出现如下结果：行：未找到命令此时修改脚本，加入，修改后的脚本如下：运行修改后的脚本结果如下：可见，在中不能直接调用，必须有变量来接收才可以。另外可以看到，中是包含的，如"}