{"blogid": "123611696", "writerAge": "码龄1年", "writerBlogNum": "112", "writerCollect": "2666", "writerComment": "3494", "writerFan": "14959", "writerGrade": "7级", "writerIntegral": "9325", "writerName": "原来45", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123611696.jpg", "writerRankTotal": "1471", "writerRankWeekly": "1231", "writerThumb": "3622", "writerVisitNum": "118176", "blog_read_count": "1017", "blog_time": "已于 2022-03-27 13:55:51 修改", "blog_title": "《C语言程序设计现代方法（第2版）》读书笔记 第二章", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E5%BA%8F%E8%A8%80%F0%9F%9A%80%20%F0%9F%9A%80%20%F0%9F%9A%80-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%BA%8F%E8%A8%80%F0%9F%9A%80%20%F0%9F%9A%80%20%F0%9F%9A%80\">序言🚀 🚀 🚀</a></p>\n<p id=\"%E7%AC%AC%E4%BA%8C%E7%AB%A0%20C%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5-toc\" style=\"margin-left:0px;\"><a href=\"#%E7%AC%AC%E4%BA%8C%E7%AB%A0%20C%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\">第二章 C语言基本概念</a> 🚀</p>\n<p id=\"2.1%20%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%20C%20%E7%A8%8B%E5%BA%8F-toc\" style=\"margin-left:40px;\"><a href=\"#2.1%20%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%20C%20%E7%A8%8B%E5%BA%8F\">2.1 编写一个简单的 C 程序</a> 🚀</p>\n<p id=\"2.1.2%20%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83-toc\" style=\"margin-left:80px;\"><a href=\"#2.1.2%20%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83\">2.1.2 集成开发环境</a> 🚀</p>\n<p id=\"2.2%20%E7%AE%80%E5%8D%95%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%B8%80%E8%88%AC%E5%BD%A2%E5%BC%8F-toc\" style=\"margin-left:40px;\"><a href=\"#2.2%20%E7%AE%80%E5%8D%95%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%B8%80%E8%88%AC%E5%BD%A2%E5%BC%8F\">2.2 简单程序的一般形式</a> 🚀</p>\n<p id=\"%C2%A02.2.1%20%E6%8C%87%E4%BB%A4-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A02.2.1%20%E6%8C%87%E4%BB%A4\"> 2.2.1 指令</a> 🚀</p>\n<p id=\"2.2.2%20%E5%87%BD%E6%95%B0%C2%A0-toc\" style=\"margin-left:80px;\"><a href=\"#2.2.2%20%E5%87%BD%E6%95%B0%C2%A0\">2.2.2 函数 </a> 🚀</p>\n<p id=\"2.2.3%20%E8%AF%AD%E5%8F%A5%C2%A0-toc\" style=\"margin-left:80px;\"><a href=\"#2.2.3%20%E8%AF%AD%E5%8F%A5%C2%A0\">2.2.3 语句 </a> 🚀</p>\n<p id=\"2.4%20%E5%8F%98%E9%87%8F%E5%92%8C%E8%B5%8B%E5%80%BC%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#2.4%20%E5%8F%98%E9%87%8F%E5%92%8C%E8%B5%8B%E5%80%BC%C2%A0\">2.4 变量和赋值 </a> 🚀</p>\n<p id=\"2.4.1%20%E7%B1%BB%E5%9E%8B-toc\" style=\"margin-left:80px;\"><a href=\"#2.4.1%20%E7%B1%BB%E5%9E%8B\">2.4.1 类型</a> 🚀</p>\n<p id=\"2.4.4%20%E6%98%BE%E7%A4%BA%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC%C2%A0-toc\" style=\"margin-left:80px;\"><a href=\"#2.4.4%20%E6%98%BE%E7%A4%BA%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC%C2%A0\">2.4.4 显示变量的值 </a> 🚀</p>\n<p id=\"2.4.5%20%E5%88%9D%E5%A7%8B%E5%8C%96-toc\" style=\"margin-left:80px;\"><a href=\"#2.4.5%20%E5%88%9D%E5%A7%8B%E5%8C%96\">2.4.5 初始化</a> 🚀</p>\n<p id=\"2.5%20%E8%AF%BB%E5%85%A5%E8%BE%93%E5%85%A5-toc\" style=\"margin-left:80px;\"><a href=\"#2.5%20%E8%AF%BB%E5%85%A5%E8%BE%93%E5%85%A5\">2.5 读入输入</a> 🚀</p>\n<p id=\"2.6%20%E5%AE%9A%E4%B9%89%E5%B8%B8%E9%87%8F%E7%9A%84%E5%90%8D%E5%AD%97-toc\" style=\"margin-left:80px;\"><a href=\"#2.6%20%E5%AE%9A%E4%B9%89%E5%B8%B8%E9%87%8F%E7%9A%84%E5%90%8D%E5%AD%97\">2.6 定义常量的名字</a> 🚀</p>\n<p id=\"2.7%20%E6%A0%87%E8%AF%86%E7%AC%A6-toc\" style=\"margin-left:80px;\"><a href=\"#2.7%20%E6%A0%87%E8%AF%86%E7%AC%A6\">2.7 标识符</a> 🚀</p>\n<p id=\"2.8%20C%20%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83%C2%A0-toc\" style=\"margin-left:80px;\"><a href=\"#2.8%20C%20%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83%C2%A0\">2.8 C 程序的书写规范 </a> 🚀</p>\n<p id=\"%E9%97%AE%E4%B8%8E%E7%AD%94%C2%A0-toc\" style=\"margin-left:0px;\"><a href=\"#%E9%97%AE%E4%B8%8E%E7%AD%94%C2%A0\">问与答 </a> 🚀</p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h1 id=\"%E5%BA%8F%E8%A8%80%F0%9F%9A%80%20%F0%9F%9A%80%20%F0%9F%9A%80\">序言🚀 🚀 🚀</h1>\n<blockquote>\n<p>从今天开始，<strong>各书</strong>的<strong>读书笔记</strong>就陆陆续续开展了哈（一本书一个专栏，订阅会第一时间推荐更新哈），主要会把<strong>作者认为比较重要</strong>或者<strong>比较新奇</strong>的知识点<strong>记录</strong>下来。但是要想真的了解一本书，自己去看可能才会有更深的体会哈。</p>\n<p>由于第一章是《C语言概述》，感觉没啥可说的，就跳过了哈。</p>\n</blockquote>\n<blockquote>\n<p><strong>C语言</strong>的<strong>入门篇进阶篇</strong>和<strong>深剖篇</strong>都整理在<a class=\"link-info\" href=\"https://blog.csdn.net/weixin_62700590/article/details/122200337\" title=\"这里\">这里</a>了哈。然后<a class=\"link-info\" href=\"https://blog.csdn.net/weixin_62700590?spm=1018.2226.3001.5343\" title=\"这里\">这里</a>是<strong>个人主页</strong>，比点头像更好找文章哈。</p>\n<p><span style=\"color:#fe2c24;\">作者新建立的社区：</span><a href=\"https://bbs.csdn.net/forums/FKBZM?typeId=22226\" title=\"https://bbs.csdn.net/forums/FKBZM?typeId=22226\">https://bbs.csdn.net/forums/FKBZM?typeId=22226</a>💖💛💙</p>\n<p><span style=\"color:#956fe7;\">期待hxd的支持哈</span>🎉 🎉 🎉</p>\n<p><strong>最后是打鸡血环节：</strong><span style=\"color:#4da8ee;\">改变的确很难，但结果值得冒险，拿出点勇气来。路还很长，现在才刚开始而已。过去无可挽回，未来可以改变。</span>🚀 🚀 🚀</p>\n</blockquote>\n<h1 id=\"%E7%AC%AC%E4%BA%8C%E7%AB%A0%20C%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span style=\"color:#0d0016;\">第二章 C语言基本概念</span></h1>\n<h2 id=\"2.1%20%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%20C%20%E7%A8%8B%E5%BA%8F\"><span style=\"color:#000000;\">2.1</span><span style=\"color:#000000;\"> 编写一个简单的 </span><span style=\"color:#000000;\">C </span><span style=\"color:#000000;\">程序</span></h2>\n<p><img alt=\"\" height=\"226\" src=\"..\\..\\static\\image\\3beebba922394f20a09a1552e3087954.png\" width=\"1045\"/></p>\n<h3 id=\"2.1.2%20%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83\"><span style=\"color:#000000;\">2.1.2</span><span style=\"color:#000000;\"> 集成开发环境</span></h3>\n<blockquote>\n<div>\n<span style=\"color:#000000;\">到目前为止，我们一直通过在操作系统提供的特殊窗口中键入命令的方式来调用“命令行” </span>\n</div>\n<div>\n<span style=\"color:#000000;\">编译器。事实上，</span>\n<span style=\"color:#956fe7;\">还可以使用<strong>集成开发环境</strong>（integrated development environment, IDE）进行编译。集成开发环境是一个软件包，我们可以在其中编辑、编译、链接、执行甚至调试程序。组成集成开发环境的各个部分可以协调工作。</span>\n</div>\n</blockquote>\n<h2 id=\"2.2%20%E7%AE%80%E5%8D%95%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%B8%80%E8%88%AC%E5%BD%A2%E5%BC%8F\"><span style=\"color:#000000;\">2.2</span><span style=\"color:#000000;\"> 简单程序的一般形式</span></h2>\n<blockquote>\n<div>\n<span style=\"color:#000000;\">即使是最简单的</span>\n<span style=\"color:#000000;\">C</span>\n<span style=\"color:#000000;\">程序也依赖</span>\n<span style=\"color:#000000;\">3</span>\n<span style=\"color:#000000;\">个关键的语言特性：指令（在编译前修改程序的编辑命令）、 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">函数（被命名的可执行代码块，如</span>\n<span style=\"color:#000000;\">main</span>\n<span style=\"color:#000000;\">函数）和语句（程序运行时执行的命令）。</span>\n</div>\n</blockquote>\n<h3 id=\"%C2%A02.2.1%20%E6%8C%87%E4%BB%A4\"> <span style=\"color:#000000;\">2.2.1</span><span style=\"color:#000000;\"> 指令</span></h3>\n<blockquote>\n<div>\n<span style=\"color:#4da8ee;\">在编译C程序之前，预处理器会首先对其进行编辑。我们把预处理器执行的命令称为指令。 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">第</span>\n<span style=\"color:#000000;\">14</span>\n<span style=\"color:#000000;\">章和第</span>\n<span style=\"color:#000000;\">15</span>\n<span style=\"color:#000000;\">章会详细讨论指令，这里只关注</span>\n<span style=\"color:#000000;\">#include</span>\n<span style=\"color:#000000;\">指令。 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">程序</span>\n<span style=\"color:#000000;\">pun.c</span>\n<span style=\"color:#000000;\">由下列这行指令开始： </span>\n</div>\n<div>\n<span style=\"color:#000000;\">#include &lt;stdio.h&gt; </span>\n</div>\n<div>\n<span style=\"color:#000000;\">这条指令说明，在编译前把</span>\n<span style=\"color:#000000;\">&lt;stdio.h&gt;</span>\n<span style=\"color:#000000;\">中的信息“包含”到程序中。</span>\n<span style=\"color:#000000;\">&lt;stdio.h&gt;</span>\n<span style=\"color:#000000;\">包含了关于</span>\n<span style=\"color:#000000;\">C</span>\n<span style=\"color:#000000;\">标 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">准输入</span>\n<span style=\"color:#000000;\">/</span>\n<span style=\"color:#000000;\">输出库的信息。</span>\n<span style=\"color:#000000;\">C</span>\n<span style=\"color:#000000;\">语言拥有大量类似于</span>\n<span style=\"color:#000000;\">&lt;stdio.h&gt;</span>\n<span style=\"color:#000000;\">的</span>\n<span style=\"color:#000000;\">头</span>\n<span style=\"color:#000000;\">（</span>\n<span style=\"color:#000000;\">header</span>\n<span style=\"color:#000000;\">）（ </span>\n<span style=\"color:#000000;\">15.2</span>\n<span style=\"color:#000000;\">节），每个头都包含一些标准库的内容。</span>\n<span style=\"color:#4da8ee;\">这段程序中包含&lt;stdio.h&gt;的原因是：C语言不同于其他的编程语言，它没有内置的“读”和“写”命令。输入/输出功能由标准库中的函数实现。 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">所有指令都是以字符</span>\n<span style=\"color:#000000;\">#</span>\n<span style=\"color:#000000;\">开始的。这个字符可以把</span>\n<span style=\"color:#000000;\">C</span>\n<span style=\"color:#000000;\">程序中的指令和其他代码区分开来。指令 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">默认只占一行，每条指令的结尾没有分号或其他特殊标记。</span>\n</div>\n</blockquote>\n<h3 id=\"2.2.2%20%E5%87%BD%E6%95%B0%C2%A0\"><span style=\"color:#000000;\">2.2.2</span><span style=\"color:#000000;\"> 函数</span> </h3>\n<blockquote>\n<div>\n<span style=\"color:#000000;\">函数</span>\n<span style=\"color:#000000;\">类似于其他编程语言中的“过程”或“子例程”，它们是用来构建程序的构建块。事实 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">上，</span>\n<span style=\"color:#000000;\">C</span>\n<span style=\"color:#000000;\">程序就是函数的集合。<strong>函数分为两大类</strong>：<strong>一类</strong>是程序员编写的函数，<strong>另一类</strong>则是作为</span>\n<span style=\"color:#000000;\">C</span>\n<span style=\"color:#000000;\">语 言实现的一部分提供的函数。我们把后者称为库函数</span>\n<span style=\"color:#000000;\">（</span>\n<span style=\"color:#000000;\">library function</span>\n<span style=\"color:#000000;\">），因为它们属于一个由编译器提供的函数“库”。</span>\n</div>\n</blockquote>\n<blockquote>\n<div>\n<span style=\"color:#000000;\">虽然一个</span>\n<span style=\"color:#000000;\">C</span>\n<span style=\"color:#000000;\">程序可以包含多个函数，但只有</span>\n<span style=\"color:#000000;\">main</span>\n<span style=\"color:#000000;\">函数是必须有的。</span>\n<span style=\"color:#000000;\">main</span>\n<span style=\"color:#000000;\">函数是非常特殊的： </span>\n</div>\n<div>\n<span style=\"color:#000000;\">在执行程序时系统会自动调用</span>\n<span style=\"color:#000000;\">main</span>\n<span style=\"color:#000000;\">函数。</span>\n</div>\n</blockquote>\n<blockquote>\n<p><img alt=\"\" height=\"188\" src=\"..\\..\\static\\image\\af2a7ae93eff4c76a9ad9695a3f7ca4e.png\" width=\"1047\"/></p>\n<p><span style=\"color:#000000;\">main</span><span style=\"color:#000000;\">前面的</span><span style=\"color:#000000;\">int</span><span style=\"color:#000000;\">表明该函数将返回一个整数值。圆括号中的</span><span style=\"color:#000000;\">void</span><span style=\"color:#000000;\">表明</span><span style=\"color:#000000;\">main函数没有参数。</span></p>\n<div>\n<span style=\"color:#000000;\">语句 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">return 0; </span>\n</div>\n<div>\n<span style=\"color:#000000;\">有两个作用：一是使</span>\n<span style=\"color:#000000;\">main</span>\n<span style=\"color:#000000;\">函数终止（从而结束程序），二是指出</span>\n<span style=\"color:#000000;\">main</span>\n<span style=\"color:#000000;\">函数的返回值是</span>\n<span style=\"color:#000000;\">0</span>\n<span style=\"color:#000000;\">。在后面我们还将详细论述main</span>\n<span style=\"color:#000000;\">函数的返回值（ </span>\n<span style=\"color:#000000;\">9.5</span>\n<span style=\"color:#000000;\">节）。但是现在我们始终让main</span>\n<span style=\"color:#000000;\">函数的返回值为0</span>\n<span style=\"color:#000000;\">，这个值表明程序正常终止。</span> \n </div>\n<div></div>\n<div>\n<div>\n<span style=\"color:#000000;\">如果</span>\n<span style=\"color:#000000;\">main</span>\n<span style=\"color:#000000;\">函数的末尾没有</span>\n<span style=\"color:#000000;\">return</span>\n<span style=\"color:#000000;\">语句，程序仍然能终止。但是，许多编译器会产生 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">一条警告信息（因为函数应该返回一个整数却没有这么做）。</span>\n</div>\n</div>\n</blockquote>\n<h3 id=\"2.2.3%20%E8%AF%AD%E5%8F%A5%C2%A0\"><span style=\"color:#000000;\">2.2.3</span><span style=\"color:#000000;\"> 语句</span> </h3>\n<blockquote>\n<span style=\"color:#4da8ee;\">语句是程序运行时执行的命令。</span>程序pun.c只用到两种语句。一种是返回（return）语句，另一种则是函数调用（functioncall）语句。要求某个函数执行分派给它的任务称为调用这个函数。 \n <div>\n<span style=\"color:#000000;\">C</span>\n<span style=\"color:#000000;\">语言规定每条语句都要以分号结尾。（就像任何好的规则一样，这条规则也有一个例外： </span>\n</div>\n<div>\n<span style=\"color:#000000;\">后面会遇到的复合语句（ </span>\n<span style=\"color:#000000;\">5.2</span>\n<span style=\"color:#000000;\">节）就不以分号结尾。（就是用{}括起来，后面不用跟\";\"。）</span>\n</div>\n</blockquote>\n<h2 id=\"2.4%20%E5%8F%98%E9%87%8F%E5%92%8C%E8%B5%8B%E5%80%BC%C2%A0\"><span style=\"color:#000000;\">2.4</span><span style=\"color:#000000;\"> 变量和赋值</span> </h2>\n<h3 id=\"2.4.1%20%E7%B1%BB%E5%9E%8B\"><span style=\"color:#000000;\">2.4.1</span><span style=\"color:#000000;\"> 类型</span></h3>\n<blockquote>\n<div>\n<span style=\"color:#000000;\">每一个变量都必须有一个</span>\n<span style=\"color:#000000;\">类型</span>\n<span style=\"color:#000000;\">（</span>\n<span style=\"color:#000000;\">type</span>\n<span style=\"color:#000000;\">）。类型用来说明变量所存储的数据的种类。</span>\n</div>\n<div></div>\n<div>\n<div>\n<span style=\"color:#000000;\">float</span>\n<span style=\"color:#000000;\">（即</span>\n<span style=\"color:#000000;\">floating-point</span>\n<span style=\"color:#000000;\">的简写）型变量可以存储比</span>\n<span style=\"color:#000000;\">int</span>\n<span style=\"color:#000000;\">型变量大得多的数值。而且，</span>float型变量可以存储带小数位的数，如379.125。但float型变量也有一些缺陷。进行算术\n   <span style=\"color:#000000;\">运算时float</span>\n<span style=\"color:#000000;\">型变量通常比</span>\n<span style=\"color:#000000;\">int</span>\n<span style=\"color:#000000;\">型变量慢；<strong>更重要的是</strong>，</span>\n<span style=\"color:#000000;\">float</span>\n<span style=\"color:#000000;\">型变量所存储的数值往往只是<strong>实际数值的</strong>一个<strong>近似值</strong>。如果在一个float</span>\n<span style=\"color:#000000;\">型变量中存储</span>\n<span style=\"color:#000000;\">0.1</span>\n<span style=\"color:#000000;\">，以后可能会发现变量的值为0.099 999 999 999 999 87，这是舍入造成的误差。</span>\n</div>\n</div>\n</blockquote>\n<h3 id=\"2.4.4%20%E6%98%BE%E7%A4%BA%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC%C2%A0\"><span style=\"color:#000000;\">2.4.4</span><span style=\"color:#000000;\"> 显示变量的值</span> </h3>\n<blockquote>\n<div>\n<span style=\"color:#000000;\">%d</span>\n<span style=\"color:#000000;\">仅用于</span>\n<span style=\"color:#000000;\">int</span>\n<span style=\"color:#000000;\">型变量。如果要显示</span>\n<span style=\"color:#000000;\">float</span>\n<span style=\"color:#000000;\">型变量，需要用</span>\n<span style=\"color:#000000;\">%f</span>\n<span style=\"color:#000000;\">来代替</span>\n<span style=\"color:#000000;\">%d</span>\n<span style=\"color:#000000;\">。默认情况下，</span>\n<span style=\"color:#000000;\">%f</span>\n<span style=\"color:#000000;\">会显 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">示出小数点后</span>\n<span style=\"color:#000000;\">6</span>\n<span style=\"color:#000000;\">位数字。如果要强制</span>\n<span style=\"color:#000000;\">%f</span>\n<span style=\"color:#000000;\">显示小数点后</span>\n<span style=\"color:#000000;\"><em>p</em></span>\n<span style=\"color:#000000;\">位数字，可以把</span>\n<span style=\"color:#000000;\">.</span>\n<span style=\"color:#000000;\"><em>p</em></span>\n<span style=\"color:#000000;\">放置在</span>\n<span style=\"color:#000000;\">%</span>\n<span style=\"color:#000000;\">和</span>\n<span style=\"color:#000000;\">f之间。例如，为了显示信息  Profit: $2150.48 </span>\n</div>\n<div>\n<div>\n<span style=\"color:#000000;\">可以把</span>\n<span style=\"color:#000000;\">printf</span>\n<span style=\"color:#000000;\">写为如下形式：</span>\n</div>\n<div>\n<div>\n<span style=\"color:#000000;\">printf(\"Profit: $</span>\n<span style=\"color:#000000;\">%</span>\n<span style=\"color:#000000;\">.2f\\n\", profit); </span>\n</div>\n<div>\n<div>\n<span style=\"color:#956fe7;\">C语言没有限制调用一次printf可以显示的变量的数量。</span>\n</div>\n</div>\n</div>\n</div>\n</blockquote>\n<h3 id=\"2.4.5%20%E5%88%9D%E5%A7%8B%E5%8C%96\"><span style=\"color:#000000;\">2.4.5</span><span style=\"color:#000000;\"> 初始化</span></h3>\n<blockquote>\n<div>\n<span style=\"color:#4da8ee;\">当程序开始执行时，某些变量会被自动设置为零（static，全局变量），而大多数变量则不会（ 18.5节）。没有默认值并且尚未在程序中被赋值的变量是未初始化的（uninitialized）。</span>\n</div>\n<div>\n<img alt=\"\" height=\"144\" src=\"..\\..\\static\\image\\5bf85192e4a844459ecdf0838cd8b782.png\" width=\"1200\"/>\n</div>\n<div>\n<span style=\"color:#000000;\">我们当然可以总是采用赋值的方法给变量赋初始值，但还有更简便的方法：在变量声明中 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">加入初始值。例如，可以在一步操作中声明变量</span>\n<span style=\"color:#000000;\">height</span>\n<span style=\"color:#000000;\">并同时对其进行初始化：</span>\n</div>\n<div>\n<div>\n<span style=\"color:#000000;\">int height = 8; </span>\n</div>\n<div>\n<div>\n<span style=\"color:#ed7976;\">按照C语言的术语，数值8是一个初始化器（initializer）。</span>\n</div>\n<div>\n<div>\n<span style=\"color:#000000;\">在同一个声明中可以对任意数量的变量进行初始化： </span>\n</div>\n<div>\n<span style=\"color:#000000;\">int height = 8, length = 12, width = 10; </span>\n</div>\n<div>\n<span style=\"color:#956fe7;\">注意，上述每个变量都有属于自己的初始化器。</span>\n<span style=\"color:#000000;\">在接下来的例子中，只有变量width拥有初始</span>\n<div>\n<span style=\"color:#000000;\">化式</span>\n<span style=\"color:#000000;\">10</span>\n<span style=\"color:#000000;\">，而变量</span>\n<span style=\"color:#000000;\">height</span>\n<span style=\"color:#000000;\">和变量</span>\n<span style=\"color:#000000;\">length</span>\n<span style=\"color:#000000;\">都没有（也就是说这两个变量仍然未初始化）： </span>\n</div>\n<div>\n<span style=\"color:#000000;\">int height, length, width = 10; </span>\n</div>\n</div>\n</div>\n</div>\n</div>\n</blockquote>\n<h3 id=\"2.5%20%E8%AF%BB%E5%85%A5%E8%BE%93%E5%85%A5\"><span style=\"color:#000000;\">2.5</span><span style=\"color:#000000;\"> 读入输入</span></h3>\n<blockquote>\n<div>\n<span style=\"color:#000000;\">为了获取输入，就要用到</span>\n<span style=\"color:#000000;\">scanf</span>\n<span style=\"color:#000000;\">函数。它是</span>\n<span style=\"color:#000000;\">C</span>\n<span style=\"color:#000000;\">函数库中与</span>\n<span style=\"color:#000000;\">printf</span>\n<span style=\"color:#000000;\">相对应的函数。</span>\n<span style=\"color:#000000;\">scanf</span>\n<span style=\"color:#000000;\">中的 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">字母</span>\n<span style=\"color:#000000;\">f</span>\n<span style=\"color:#000000;\">和</span>\n<span style=\"color:#000000;\">printf</span>\n<span style=\"color:#000000;\">中的字母</span>\n<span style=\"color:#000000;\">f</span>\n<span style=\"color:#000000;\">含义相同，都是表示<strong>“格式化”</strong>的意思。</span>\n<span style=\"color:#000000;\">scanf</span>\n<span style=\"color:#000000;\">函数和</span>\n<span style=\"color:#000000;\">printf</span>\n<span style=\"color:#000000;\">函数都 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">需要使用</span>\n<strong><span style=\"color:#000000;\">格式串</span></strong>\n<span style=\"color:#000000;\">（</span>\n<span style=\"color:#000000;\">format string</span>\n<span style=\"color:#000000;\">）来指定输入或输出数据的形式。</span>\n<span style=\"color:#000000;\">scanf</span>\n<span style=\"color:#000000;\">函数需要知道将获得的输入数据的格式，而printf</span>\n<span style=\"color:#000000;\">函数需要知道输出数据的显示格式。</span>\n</div>\n<div></div>\n<div>\n<div>\n<span style=\"color:#000000;\">scanf(\"%f\", &amp;x); /* reads a float value; stores into x */ </span>\n</div>\n</div>\n<div>\n<div>\n<span style=\"color:#000000;\">%f</span>\n<span style=\"color:#000000;\">只用于</span>\n<span style=\"color:#000000;\">float</span>\n<span style=\"color:#000000;\">型变量，因此这里假设</span>\n<span style=\"color:#000000;\">x</span>\n<span style=\"color:#000000;\">是一个</span>\n<span style=\"color:#000000;\">float</span>\n<span style=\"color:#000000;\">型变量。字符串</span>\n<span style=\"color:#000000;\">\"%f\"</span>\n<span style=\"color:#000000;\">告诉</span>\n<span style=\"color:#000000;\">scanf</span>\n<span style=\"color:#000000;\">函数去寻 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">找一个</span>\n<span style=\"color:#000000;\">float</span>\n<span style=\"color:#000000;\">格式的输入值（此数可以含有小数点，但不是必须含有）</span>\n</div>\n</div>\n</blockquote>\n<h3 id=\"2.6%20%E5%AE%9A%E4%B9%89%E5%B8%B8%E9%87%8F%E7%9A%84%E5%90%8D%E5%AD%97\"><span style=\"color:#000000;\">2.6</span><span style=\"color:#000000;\"> 定义常量的名字</span></h3>\n<blockquote>\n<div>\n<span style=\"color:#956fe7;\">注意，宏的名字只用了大写字母。</span>\n<span style=\"color:#000000;\"><strong>这是</strong>大多数</span>\n<span style=\"color:#000000;\">C</span>\n<span style=\"color:#000000;\">程序员遵循的<strong>规范</strong>，但<strong>并不是</strong></span>\n<span style=\"color:#000000;\">C</span>\n<span style=\"color:#000000;\">语言本身的 </span>\n</div>\n<div>\n<span style=\"color:#000000;\"><strong>要求</strong>。（至今，</span>\n<span style=\"color:#000000;\">C</span>\n<span style=\"color:#000000;\">程序员沿用此规范已经几十年了，希望读者不要打破此规范。）</span>\n</div>\n</blockquote>\n<h3 id=\"2.7%20%E6%A0%87%E8%AF%86%E7%AC%A6\"><span style=\"color:#000000;\">2.7</span><span style=\"color:#000000;\"> 标识符</span></h3>\n<blockquote>\n<div>\n<span style=\"color:#000000;\">在编写程序时，需要对变量、函数、宏和其他实体进行命名。这些名字称为</span>\n<span style=\"color:#000000;\">标识符 （identifier</span>\n<span style=\"color:#000000;\">）。在</span>\n<span style=\"color:#000000;\">C</span>\n<span style=\"color:#000000;\">语言中，标识符可以含有字母、数字和下划线，但是必须以字母或者下划线开头。（ 在C99中，标识符还可以使用某些“通用字符名”， </span>\n<span style=\"color:#000000;\">25.4</span>\n<span style=\"color:#000000;\">节。）</span>\n</div>\n</blockquote>\n<p><strong><span style=\"color:#000000;\">关键字</span> </strong></p>\n<blockquote>\n<p><img alt=\"\" height=\"159\" src=\"..\\..\\static\\image\\9e4725ca20ca41c2a4019cf98066a440.png\" width=\"1200\"/></p>\n</blockquote>\n<h3 id=\"2.8%20C%20%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83%C2%A0\"><span style=\"color:#000000;\">2.8 C </span><span style=\"color:#000000;\">程序的书写规范</span> </h3>\n<blockquote>\n<div>\n<span style=\"color:#000000;\">我们可以把</span>\n<span style=\"color:#000000;\">C</span>\n<span style=\"color:#000000;\">程序看成是一连串</span>\n<span style=\"color:#000000;\">记号</span>\n<span style=\"color:#000000;\">（</span>\n<span style=\"color:#000000;\">token</span>\n<span style=\"color:#000000;\">），即许多在不改变意思的基础上无法再分割的 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">字符组。标识符和关键字都是记号。像</span>\n<span style=\"color:#000000;\">+</span>\n<span style=\"color:#000000;\">和</span>\n<span style=\"color:#000000;\">-</span>\n<span style=\"color:#000000;\">这样的运算符、逗号和分号这样的标点符号以及字 符串字面量，也都是记号。例如，语句 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">printf( \"Height: %d</span>\n<span style=\"color:#000000;\">\\</span>\n<span style=\"color:#000000;\">n\", height);</span>\n</div>\n<div>\n<div>\n<span style=\"color:#000000;\">是由</span>\n<span style=\"color:#000000;\">7</span>\n<span style=\"color:#000000;\">个记号组成的：</span>\n</div>\n<div>\n<img alt=\"\" height=\"87\" src=\"..\\..\\static\\image\\8a6a2e835aff48bfa4b027fc3b2e1f60.png\" width=\"814\"/>\n</div>\n<div>\n<span style=\"color:#000000;\">其中记号</span>\n<span style=\"color:#000000;\"></span>\n<span style=\"color:#000000;\">和记号</span>\n<span style=\"color:#000000;\"></span>\n<span style=\"color:#000000;\">都是标识符，记号</span>\n<span style=\"color:#000000;\"></span>\n<span style=\"color:#000000;\">是字符串字面量，而记号</span>\n<span style=\"color:#000000;\"></span>\n<span style=\"color:#000000;\">、记号</span>\n<span style=\"color:#000000;\"></span>\n<span style=\"color:#000000;\">、记号</span>\n<span style=\"color:#000000;\"></span>\n<span style=\"color:#000000;\">和记号</span>\n<span style=\"color:#000000;\"> </span>\n</div>\n<div>\n<span style=\"color:#000000;\">则是标点符号。</span> \n  </div>\n</div>\n</blockquote>\n<h1 id=\"%E9%97%AE%E4%B8%8E%E7%AD%94%C2%A0\"><span style=\"color:#000000;\">问与答</span> </h1>\n<blockquote>\n<div>\n<span style=\"color:#000000;\">问：</span>\n<span style=\"color:#000000;\">GCC</span>\n<span style=\"color:#000000;\">是什么的简称？</span>\n<span style=\"color:#000000;\">（</span>\n<span style=\"color:#000000;\">p.8</span>\n<span style=\"color:#000000;\">）<strong>（选看）</strong></span>\n</div>\n<div>\n<div>\n<span style=\"color:#000000;\">答：</span>\n<span style=\"color:#000000;\">GCC</span>\n<span style=\"color:#000000;\">最初是</span>\n<span style=\"color:#000000;\">GNU C compiler</span>\n<span style=\"color:#000000;\">的简称。现在指</span>\n<span style=\"color:#000000;\">GNU Compiler Collection</span>\n<span style=\"color:#000000;\">，这是因为最新版本的</span>\n<span style=\"color:#000000;\">GCC</span>\n<span style=\"color:#000000;\">能够编译用Ada</span>\n<span style=\"color:#000000;\">、</span>\n<span style=\"color:#000000;\">C</span>\n<span style=\"color:#000000;\">、</span>\n<span style=\"color:#000000;\">C++</span>\n<span style=\"color:#000000;\">、</span>\n<span style=\"color:#000000;\">Fortran</span>\n<span style=\"color:#000000;\">、</span>\n<span style=\"color:#000000;\">Java</span>\n<span style=\"color:#000000;\">和</span>\n<span style=\"color:#000000;\">Objective-C</span>\n<span style=\"color:#000000;\">等多种语言编写的程序。</span>\n</div>\n</div>\n</blockquote>\n<blockquote>\n<p> <span style=\"color:#000000;\">问：明白了，但</span><span style=\"color:#000000;\">GNU又是什么意思呢？<strong>（选看）</strong></span></p>\n<div>\n<span style=\"color:#000000;\">答：</span>\n<span style=\"color:#000000;\">GNU</span>\n<span style=\"color:#000000;\">指的是“</span>\n<span style=\"color:#000000;\">GNU’s Not UNIX!</span>\n<span style=\"color:#000000;\">”（发音为</span>\n<span style=\"color:#000000;\"><em>guh-NEW</em></span>\n<span style=\"color:#000000;\">），它是自由软件基金会（</span>\n<span style=\"color:#000000;\">Free Software Foundation</span>\n<span style=\"color:#000000;\">）的一个项目。自由软件基金会是由Richard M. Stallman</span>\n<span style=\"color:#000000;\">发起的一个组织，旨在抗议对</span>\n<span style=\"color:#000000;\">UNIX</span>\n<span style=\"color:#000000;\">软件授权的各种限制。从它的网站可以看出，自由软件基金会认为用户应该可以自由地“运行、复制、发布、研究、改变和改进”软件。GNU</span>\n<span style=\"color:#000000;\">项目从头开始重写了许多传统的</span>\n<span style=\"color:#000000;\">UNIX</span>\n<span style=\"color:#000000;\">软件，并使公众能够免费地获 得。</span>\n</div>\n<div>\n<span style=\"color:#000000;\">GCC</span>\n<span style=\"color:#000000;\">和其他</span>\n<span style=\"color:#000000;\">GNU</span>\n<span style=\"color:#000000;\">软件对于</span>\n<span style=\"color:#000000;\">Linux</span>\n<span style=\"color:#000000;\">操作系统来说是至关重要的。</span>\n<span style=\"color:#000000;\">Linux</span>\n<span style=\"color:#000000;\">本身只是操作系统的“内核”（处理程序调度和基本输入/</span>\n<span style=\"color:#000000;\">输出服务的部分），为了获得具体完整功能的操作系统，</span>\n<span style=\"color:#000000;\">GNU</span>\n<span style=\"color:#000000;\">软件是必要的。网站www.gnu.org</span>\n<span style=\"color:#000000;\">提供了更多有关</span>\n<span style=\"color:#000000;\">GNU</span>\n<span style=\"color:#000000;\">项目的信息。</span>\n</div>\n</blockquote>\n<blockquote>\n<p><span style=\"color:#000000;\">问：</span><span style=\"color:#000000;\">GCC有什么过人之处呢？<strong>（选看）</strong></span></p>\n<div>\n<span style=\"color:#000000;\">答：我们说</span>\n<span style=\"color:#000000;\">GCC</span>\n<span style=\"color:#000000;\">重要，不仅仅是因为它能免费获取、能编译很多语言。</span>\n<span style=\"color:#000000;\">GCC</span>\n<span style=\"color:#000000;\">还可以在许多操作系统下运行，并为多种不同的CPU</span>\n<span style=\"color:#000000;\">生成代码（支持所有广为使用的操作系统和</span>\n<span style=\"color:#000000;\">CPU</span>\n<span style=\"color:#000000;\">）。</span>\n<span style=\"color:#000000;\">GCC</span>\n<span style=\"color:#000000;\">是许多基于</span>\n<span style=\"color:#000000;\">UNIX的操作系统（包括Linux</span>\n<span style=\"color:#000000;\">、</span>\n<span style=\"color:#000000;\">BSD</span>\n<span style=\"color:#000000;\">和</span>\n<span style=\"color:#000000;\">Mac OS X</span>\n<span style=\"color:#000000;\">）的主要编译器，并广泛用于商业软件开发。有关</span>\n<span style=\"color:#000000;\">GCC的更多信息请参考gcc.gnu.org</span>\n<span style=\"color:#000000;\">。</span>\n</div>\n</blockquote>\n<blockquote>\n<p><span style=\"color:#000000;\">问：</span><span style=\"color:#000000;\">GCC发现程序中错误的能力如何？<strong>（选看）</strong></span></p>\n<div>\n<span style=\"color:#000000;\">答：</span>\n<span style=\"color:#000000;\">GCC</span>\n<span style=\"color:#000000;\">有多个命令行选项来控制程序检查的彻底程度。使用这些选项可以帮助我们有效地找出程序中潜在的故障区域。下面是一些比较常用的选项。</span>\n</div>\n<div>\n<img alt=\"\" height=\"429\" src=\"..\\..\\static\\image\\2f67f9ed8a2a404eb4221bbd664bfadc.png\" width=\"1200\"/>\n</div>\n</blockquote>\n<blockquote>\n<p><span style=\"color:#000000;\">问：在某些</span><span style=\"color:#000000;\">C</span><span style=\"color:#000000;\">语言书中，</span><span style=\"color:#000000;\"><strong>main</strong></span><span style=\"color:#000000;\">函数的结尾使用的是</span><span style=\"color:#000000;\"><strong>exit(0)</strong></span><span style=\"color:#000000;\">而不是</span><span style=\"color:#000000;\"><strong>return 0</strong></span><span style=\"color:#000000;\">，二者是否一样呢？</span><span style=\"color:#000000;\">（</span><span style=\"color:#000000;\">p.10</span><span style=\"color:#000000;\">）</span></p>\n<div>\n<span style=\"color:#000000;\">答：当出现在</span>\n<span style=\"color:#000000;\">main</span>\n<span style=\"color:#000000;\">函数中时，这两种语句是完全等价的：二者都终止程序执行，并且向操作系统返回</span>\n<span style=\"color:#000000;\">0值。使用哪种语句完全依据个人喜好而定。</span> \n </div>\n</blockquote>\n<blockquote>\n<p><span style=\"color:#000000;\">问：如果</span><span style=\"color:#000000;\"><strong>main</strong></span><span style=\"color:#000000;\">函数末尾没有</span><span style=\"color:#000000;\"><strong>return</strong></span><span style=\"color:#000000;\">语句会产生什么后果？</span><span style=\"color:#000000;\">（</span><span style=\"color:#000000;\">p.10</span><span style=\"color:#000000;\">）</span></p>\n<div>\n<span style=\"color:#000000;\">答：</span>\n<span style=\"color:#000000;\">return</span>\n<span style=\"color:#000000;\">语句不是必需的；如果没有</span>\n<span style=\"color:#000000;\">return</span>\n<span style=\"color:#000000;\">语句，程序一样会终止。在</span>\n<span style=\"color:#000000;\">C89</span>\n<span style=\"color:#000000;\">中，返回给操作系统的值是未定义的。在C99</span>\n<span style=\"color:#000000;\">中，如果</span>\n<span style=\"color:#000000;\">main</span>\n<span style=\"color:#000000;\">函数声明中的返回类型是</span>\n<span style=\"color:#000000;\">int</span>\n<span style=\"color:#000000;\">（如我们的例子所示），程序会向操作系统返回0</span>\n<span style=\"color:#000000;\">；否则程序会返回一个不确定的值。</span>\n</div>\n</blockquote>\n<blockquote>\n<p><span style=\"color:#000000;\">问：编译器是完全移除注释还是用空格替换掉注释呢？</span></p>\n<div>\n<span style=\"color:#000000;\">答：一些早期的编译器会删除每条注释中的所有字符，使得语句 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">a/**/b = 0; </span>\n</div>\n<div>\n<span style=\"color:#000000;\">可能被编译器理解成 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">ab </span>\n</div>\n<div>\n<span style=\"color:#000000;\">= 0</span>\n<span style=\"color:#000000;\">; </span>\n</div>\n<div>\n<span style=\"color:#000000;\">然而，依据</span>\n<span style=\"color:#000000;\">C</span>\n<span style=\"color:#000000;\">标准，编译器必须用一个空格字符替换每条注释语句，因此上面提到的技巧并不可行。 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">我们实际上会得到下面的语句： </span>\n</div>\n<div>\n<span style=\"color:#000000;\">a b = 0; </span>\n</div>\n</blockquote>\n<blockquote>\n<p><span style=\"color:#000000;\">问：在一个注释中嵌套另一个注释是否合法？</span></p>\n<div>\n<span style=\"color:#000000;\">答：传统风格的注释（</span>\n<span style=\"color:#000000;\">/*...*/</span>\n<span style=\"color:#000000;\">）不允许嵌套。<strong>例如，下面的代码就是不合法的： </strong></span>\n</div>\n<div>\n<span style=\"color:#000000;\">/* </span>\n</div>\n<div>\n<span style=\"color:#000000;\">/*** WRONG ***/ </span>\n</div>\n<div>\n<span style=\"color:#000000;\">*/ </span>\n</div>\n<div>\n<strong><span style=\"color:#000000;\">第</span><span style=\"color:#000000;\">2</span><span style=\"color:#000000;\">行的符号</span><span style=\"color:#000000;\">*/</span><span style=\"color:#000000;\">会和第一行的</span><span style=\"color:#000000;\">/*</span><span style=\"color:#000000;\">相匹配，所以编译器将会把第</span><span style=\"color:#000000;\">3</span><span style=\"color:#000000;\">行的</span><span style=\"color:#000000;\">*/</span><span style=\"color:#000000;\">标记为一个错误。 </span></strong>\n</div>\n<div>\n<span style=\"color:#000000;\">C</span>\n<span style=\"color:#000000;\">语言禁止注释嵌套有些时候也是个问题。假设我们编写了一个很长的程序，其中包含了许多短小的注释。为了临时屏蔽程序的某些部分（比如在测试过程中），我们首先会想到用/*</span>\n<span style=\"color:#000000;\">和</span>\n<span style=\"color:#000000;\">*/</span>\n<span style=\"color:#000000;\">“注释掉”相应的程序行。但是，如果这些代码行中包含有传统风格的注释，这种方法就行不通了。不过，<strong>C99</strong></span>\n<strong><span style=\"color:#000000;\">注释（</span><span style=\"color:#000000;\">以</span><span style=\"color:#000000;\">//</span><span style=\"color:#000000;\">开始的注释</span><span style=\"color:#000000;\">）可以嵌套在传统风格的注释中，这是这类注释的另一个优势。</span></strong>\n</div>\n</blockquote>\n<blockquote>\n<p><span style=\"color:#000000;\">问：</span><span style=\"color:#000000;\"><strong>float</strong></span><span style=\"color:#000000;\">类型的名字由何而来？</span><span style=\"color:#000000;\">（</span><span style=\"color:#000000;\">p.12</span><span style=\"color:#000000;\">）</span></p>\n<div>\n<span style=\"color:#000000;\">答：</span>\n<span style=\"color:#000000;\">float</span>\n<span style=\"color:#000000;\">是</span>\n<span style=\"color:#000000;\">floating-point</span>\n<span style=\"color:#000000;\">的缩写形式，它是一种存储数的方法，而这些数中的小数点是“浮动的”。</span>\n<strong><span style=\"color:#000000;\">float类型的值通常分成两部分存储：小数</span><span style=\"color:#000000;\">部分（或者称为</span><span style=\"color:#000000;\">尾数</span><span style=\"color:#000000;\">部分）和</span><span style=\"color:#000000;\">指数</span></strong>\n<span style=\"color:#000000;\"><strong>部分。</strong>例如，</span>\n<span style=\"color:#000000;\">12.0</span>\n<span style=\"color:#000000;\">这个数可以以1.5</span>\n<span style=\"color:#000000;\">×</span>\n<span style=\"color:#000000;\">2</span>\n<span style=\"color:#000000;\">3 </span>\n<span style=\"color:#000000;\">的形式存储，其中</span>\n<span style=\"color:#000000;\">1.5</span>\n<span style=\"color:#000000;\">是小数部分，而</span>\n<span style=\"color:#000000;\">3</span>\n<span style=\"color:#000000;\">是指数部分。<strong>有些编程语言把这种类型称为</strong></span>\n<strong><span style=\"color:#000000;\">real</span><span style=\"color:#000000;\">类型而不是float</span><span style=\"color:#000000;\">类型。</span></strong>\n</div>\n</blockquote>\n<blockquote>\n<p><span style=\"color:#000000;\"><strong>*</strong></span><span style=\"color:#000000;\">问：对标识符的长度真的没有限制吗？</span><span style=\"color:#000000;\">（</span><span style=\"color:#000000;\">p.19</span><span style=\"color:#000000;\">）</span></p>\n<div>\n<span style=\"color:#000000;\">答：<strong>是，又不是。</strong></span>\n<span style=\"color:#000000;\">C89</span>\n<span style=\"color:#000000;\">标准声称标识符可以任意长，但却只要求编译器记住前</span>\n<strong><span style=\"color:#000000;\">31</span></strong>\n<span style=\"color:#000000;\"><strong>个字符</strong>（ </span>\n</div>\n<div>\n<strong><span style=\"color:#000000;\">C99</span><span style=\"color:#000000;\">中是</span></strong>\n<span style=\"color:#000000;\"><strong>63个字符</strong>）。因此，如果两个名字的前31</span>\n<span style=\"color:#000000;\">个字符都相同，编译器可能会无法区别它们。更复杂的情况是，C</span>\n<span style=\"color:#000000;\">标准对于具有外部链接（ </span>\n<span style=\"color:#000000;\">18.2</span>\n<span style=\"color:#000000;\">节）的标识符有特殊的规定，而大多数函数名都属于这类标识符。因为链接器必须能识别这些名字，而一些早期的链接器又只能处理短名字，所以在C89</span>\n<span style=\"color:#000000;\">中只有前</span>\n<span style=\"color:#000000;\">6</span>\n<span style=\"color:#000000;\">个字符才是有效的。此外，还不区分字母的大小写。因此</span>\n<span style=\"color:#000000;\">ABCDEFG</span>\n<span style=\"color:#000000;\">和</span>\n<span style=\"color:#000000;\">abcdefg可能会被作为相同的名字处理。（C99中，前</span>\n<span style=\"color:#000000;\">31</span>\n<span style=\"color:#000000;\">个字符有效，且字母区分大小写。）大多数编译器和链接器都比标准所要求的宽松，所以实际使用中这些规则都不是问题。不要担心标识符太长，还是注意不要把它们定义得太短吧。</span>\n</div>\n</blockquote>\n<blockquote>\n<p><span style=\"color:#956fe7;\">最后的最后，创作不易，希望读者三连支持💖</span></p>\n<p><span style=\"color:#956fe7;\">赠人玫瑰，手有余香💖</span></p>\n</blockquote>\n</div>\n</div>", "first_tag": "Java", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-03-27 13:55:51", "summary": "目录序言第二章语言基本概念编写一个简单的程序集成开发环境简单程序的一般形式指令函数语句变量和赋值类型显示变量的值初始化读入输入定义常量的名字标识符程序的书写规范问与答序言从今天开始，各书的读书笔记就陆"}