{"blogid": "125861710", "writerAge": "码龄1年", "writerBlogNum": "91", "writerCollect": "6675", "writerComment": "12511", "writerFan": "13013", "writerGrade": "7级", "writerIntegral": "19554", "writerName": "微凉秋意", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125861710.jpg", "writerRankTotal": "415", "writerRankWeekly": "1", "writerThumb": "7480", "writerVisitNum": "121046", "blog_read_count": "1750", "blog_time": "已于 2022-07-24 21:31:27 修改", "blog_title": "Java中Map接口的使用和有关集合的面试知识点补充", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>✅作者简介：C/C++领域新星创作者，努力修炼后端中<br/> ✨个人主页：<a href=\"https://blog.csdn.net/m0_58618795\">叶落秋白的主页</a><br/> 🔥系列专栏：<a href=\"https://blog.csdn.net/m0_58618795/category_11921771.html?\">javaSE精品总结</a><br/> 📃推荐一款模拟面试、刷题神器👉<a href=\"https://www.nowcoder.com/link/pc_csdncpt_ylqb_c\">注册免费刷题</a></p>\n</blockquote>\n<p>🔥前言</p>\n<blockquote>\n<p>书接上文，今天把java中集合的最后一个接口——<code>Map</code>的不同实现类使用场景分享给大家。此外会写一点关于面试常考的集合的考点，是比较深入的一点底层原理，希望可以帮助到大家。那么开始Map接口的学习和使用！</p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#Map_9\">Map接口</a></li><li><ul><li><a href=\"#_10\">存储特点</a></li><li><a href=\"#_14\">常用实现类</a></li><li><a href=\"#_25\">创建方法</a></li><li><a href=\"#_31\">常用方法</a></li><li><a href=\"#_67\">遍历方法</a></li><li><a href=\"#_146\">不同实现类的使用</a></li></ul>\n</li><li><a href=\"#_157\">集合面试知识点补充</a></li><li><a href=\"#_169\">📃结语</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"Map_9\"></a>Map接口</h1>\n<h2><a id=\"_10\"></a>存储特点</h2>\n<ol><li>以键（key）值（value）对的形式存储</li><li>键无序、无下标、元素不可重复</li><li>值无序、无下标、元素可以重复</li></ol>\n<h2><a id=\"_14\"></a>常用实现类</h2>\n<ol><li><code>HashMap</code>\n<ul><li>JDK1.2 底层哈希表实现 线程不安全，效率高</li></ul> </li><li><code>LinkedHashMap</code>\n<ul><li>JDK1.2 是HashMap的子类，底层哈希表实现 线程不安全，效率高</li></ul> </li><li><code>TreeMap</code>\n<ul><li>JDK1.2 是SortedMap的实现类，底层红黑树实现 线程不安全，效率高</li></ul> </li><li><code>HashTable</code>\n<ul><li>JDK1.0 底层哈希表实现 线程安全，效率低</li></ul> </li><li><code>Properties</code>\n<ul><li>JDK1.0 是HashTable的子类，底层哈希表实现 线程安全，效率低</li></ul> </li></ol>\n<h2><a id=\"_25\"></a>创建方法</h2>\n<ul><li>使用多态</li></ul>\n<blockquote>\n<p><code>Map&lt;键的泛型，值的泛型&gt; 集合名=new 实现类名&lt;键的泛型，值的泛型&gt;();</code></p>\n</blockquote>\n<p><strong>tips：一个键值对才是一个元素</strong></p>\n<h2><a id=\"_31\"></a>常用方法</h2>\n<ol><li><code>值 put(键，值)</code>：将一个键值对添加至集合末尾 \n  <ul><li>如果键已经存在，则进行值的替换</li></ul> </li><li><code>void clear()</code>：清空集合元素</li><li><code>boolean containsKey(键)</code>：判断集合中是否存在某个键</li><li><code>boolean containsValue(值)</code>：判断集合中是否存在某个值</li><li><code>值 get(键)</code>：获取键对应的值</li><li><code>boolean isEmpty()</code>：判断集合内容是否为空，不能判比null值</li><li><code>void putAll(Map的集合名)</code>：将指定Map集合的内容添加至当前集合末尾</li><li><code>值 remove(键)</code>：移除键所对应的键值对</li><li><code>int size()</code>：获取集合键值对的个数</li></ol>\n<p><strong>代码举例：</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//数字-String   1 - 一   1 - yi</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"一\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"yiyiyi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">666</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"liuliuliu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"一一一\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span><span class=\"token number\">678</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//f</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">containsValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yiyiyi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//t</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">666</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">666</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_67\"></a>遍历方法</h2>\n<ul><li>1、<strong>keySet()+get()</strong>\n<ul><li>先获取所有的键，再遍历键得到所有的值</li><li>Set&lt;键的泛型&gt; keySet()：获取所有的键存于Set集合并返回</li></ul> </li></ul>\n<pre><code class=\"prism language-java\">        <span class=\"token comment\">//获取所有键</span>\n        <span class=\"token class-name\">Set</span><span class=\"token operator\">&lt;</span>键的泛型<span class=\"token operator\">&gt;</span> set<span class=\"token operator\">=</span>集合名<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//遍历所有键</span>\n        set<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>\n            o<span class=\"token operator\">-&gt;</span> \n            <span class=\"token comment\">//o就代表当前正在被遍历的键</span>\n            <span class=\"token comment\">//通过集合名.get(o)可以得到对应的值</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n如：\n\t\t<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"yiersan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">234</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ersansi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">456</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"siwuliu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">999</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jiujiujiu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> set<span class=\"token operator\">=</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        set<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键：\"</span><span class=\"token operator\">+</span>o<span class=\"token operator\">+</span><span class=\"token string\">\",值：\"</span><span class=\"token operator\">+</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>2、<strong>values()</strong>\n<ul><li>直接获取所有的值</li><li>Collection&lt;值的泛型&gt; values()：获取所有的值存于Collection集合并返回</li></ul> </li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">Collection</span><span class=\"token operator\">&lt;</span>值的泛型<span class=\"token operator\">&gt;</span> coll <span class=\"token operator\">=</span> 集合名<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncoll<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>v<span class=\"token operator\">-&gt;</span> v就代表当前的值<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n如：\n\t\t<span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> coll <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        coll<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>v<span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>3、<strong>entrySet()</strong>\n<ul><li>获取键值对对象进行遍历</li><li>Set&lt; Map.Entry&lt;键的泛型，值的泛型&gt; &gt; entrySet()：获取所有的键值对对象存于Set集合并返回</li><li>Set&lt; Map.Entry&lt;键的泛型，值的泛型&gt; &gt; 等同于 Set&lt;键值对对象&gt;</li><li>getKey()：获取Entry对象中的键</li><li>getValue()：获取Entry对象中的值</li></ul> </li></ul>\n<pre><code class=\"prism language-java\">        <span class=\"token comment\">//获取键值对对象集合</span>\n        <span class=\"token class-name\">Set</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token operator\">&lt;</span>键的泛型<span class=\"token punctuation\">,</span>值的泛型<span class=\"token operator\">&gt;&gt;</span> set2<span class=\"token operator\">=</span>集合名<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span> entry <span class=\"token operator\">:</span> set2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//通过entry.getKey()获取键</span>\n            <span class=\"token comment\">//通过entry.getValue()获取值</span>\n        <span class=\"token punctuation\">}</span>\n如：\n        <span class=\"token class-name\">Set</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token operator\">&lt;</span>键的泛型<span class=\"token punctuation\">,</span>值的泛型<span class=\"token operator\">&gt;&gt;</span> set2<span class=\"token operator\">=</span>集合名<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span> entry <span class=\"token operator\">:</span> set2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键：\"</span><span class=\"token operator\">+</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\",值：\"</span><span class=\"token operator\">+</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lambda自遍历：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        set2<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>entry<span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键：\"</span><span class=\"token operator\">+</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\",值：\"</span><span class=\"token operator\">+</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>4、<strong>自遍历forEach</strong>\n<ul><li>JDK8.0</li></ul> </li></ul>\n<pre><code class=\"prism language-java\">        集合名<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BiConsumer</span><span class=\"token operator\">&lt;</span>键的泛型<span class=\"token punctuation\">,</span> 值的泛型<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>键的泛型 i<span class=\"token punctuation\">,</span> 值的泛型 s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//i代表键</span>\n                <span class=\"token comment\">//s代表值</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lambda简化自遍历：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span> k代表键，v代表值<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n如：\n\t\tmap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BiConsumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> i<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键：\"</span><span class=\"token operator\">+</span>i<span class=\"token operator\">+</span><span class=\"token string\">\",值：\"</span><span class=\"token operator\">+</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lambda简化自遍历：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键：\"</span><span class=\"token operator\">+</span>k<span class=\"token operator\">+</span><span class=\"token string\">\",值：\"</span><span class=\"token operator\">+</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"_146\"></a>不同实现类的使用</h2>\n<ol><li><code>HashMap</code>可以存放null值，键可以存放0-1个null，值可以存放0-n个null</li><li><code>LinkedHashMap</code>可以保证存入取出顺序一致</li><li><code>TreeMap</code>可以根据键进行默认的升序排序 \n  <ul><li>不能对null进行默认排序</li><li>如果键为自定义类型，则必须设置排序规则，方式与TreeSet一致</li></ul> </li><li><code>HashTable</code>不能存放null值</li><li><code>Properties</code>键和值必须为String类型 \n  <ul><li>创建不建议使用多态</li><li>不能声明泛型</li></ul> </li></ol>\n<h1><a id=\"_157\"></a>集合面试知识点补充</h1>\n<ol><li><code>Set</code>是一个只有键，没有值的<code>Map</code>集合</li><li>底层数组长度为<code>16</code></li><li>数组加载因子为<code>75%</code>，当数组位使用到达75%时，会以<code>平衡二叉树</code>的方式进行数组扩容，扩容长度为原长度<code>*2</code>，扩容出来的<strong>每个数组长度都为16</strong></li><li>为什么Set或者Map在存放数值的时候，是从小到大的？ \n  <ul><li><strong>当存放数值过小时，整数值本身就是它的存放下标，下标从小到大，所以值的存放也是从小到大</strong></li></ul> </li><li>红黑树使用的是<strong>二分查找</strong>法，特点为<strong>查询效率快</strong></li><li><strong>红黑树</strong>：以哈希码值为判断标准，哈希码值比当前元素大，往右侧存储，哈希码值比当前元素小，往左侧存储</li><li><strong>二分查找法</strong>：特点为一次锁定数据的一半</li><li>当哈希表的数组中某个链表长度达到了8时，会<strong>重组链表元素</strong>，开启红黑树</li></ol>\n<h1><a id=\"_169\"></a>📃结语</h1>\n<p><code>那么关于java的集合学习总结就结束了，我也要去学习MySql了，如果有好的经验或者收获一定会分享给大家，期待你的关注和鼓励哦~</code></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-07-24 21:31:27", "summary": "作者简介：领域新星创作者，努力修炼后端中个人主页：叶落秋白的主页系列专栏：精品总结推荐一款模拟面试、刷题神器注册免费刷题前言书接上文，今天把中集合的最后一个接口的不同实现类使用场景分享给大家。此外会写"}