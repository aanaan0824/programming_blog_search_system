{"blogid": "123710603", "writerAge": "码龄5年", "writerBlogNum": "351", "writerCollect": "4085", "writerComment": "934", "writerFan": "12924", "writerGrade": "6级", "writerIntegral": "7619", "writerName": "程序媛一枚~", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123710603.jpg", "writerRankTotal": "1733", "writerRankWeekly": "1290", "writerThumb": "887", "writerVisitNum": "616322", "blog_read_count": "452", "blog_time": "于 2022-09-03 21:07:22 发布", "blog_title": "使用Python，dlib进行对象实时追踪", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>这篇博客将介绍如何使用Python，dlib执行对象跟踪。即通过dlib的相关跟踪器来实时跟踪视频流中的对象。<br/> 与July的质心跟踪（Centroid Tracking）不同，dlib的对象跟踪算法可以利用从输入RGB图像收集的信息进行自我更新——该算法不需要为输入视频流中的每一帧计算一组边界框。并且dlib的相关跟踪算法非常健壮，能够实时运行。<br/> 然而，最大的缺点是如果视点发生实质性变化或要跟踪的对象被遮挡，相关跟踪器可能会变得“混乱”，并丢失希望跟踪的对象。<br/> 在这些场景中，可以重新运行（计算成本很高的）对象检测器，以重新确定跟踪对象的位置来优化。</p>\n<p>追踪对象的方法有：</p>\n<ol>\n<li> <p>质心跟踪，这是一种简单但有效的方法，1）为图像中的每个对象分配唯一的ID，然后2）在视频流中移动时跟踪每个对象和相关ID。<br/> 这种目标跟踪算法的最大缺点是，必须在每个输入帧上运行单独的目标检测器——在大多数情况下，这种行为是不可取的，因为目标检测器（包括HOG+线性SVM、更快的R-CNN和SSD）的运行计算成本可能会很高。</p> </li>\n<li> <p>执行一次目标检测（或每N帧一次），然后应用一种专用的跟踪算法，可以在后续帧中移动时保持对对象的跟踪，而无需执行对象检测。<br/> 方法2可行，并且可以使用dlib的相关跟踪算法实现。</p> </li>\n</ol>\n<blockquote>\n<p>correlation-based object tracking 基于相关性的对象追踪<br/> correlation tracker 相关性追踪器<br/> Accurate Scale Estimation for Robust Visual Tracking 鲁棒视觉跟踪的精</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-03 21:07:22", "summary": "这篇博客将介绍如何使用，执行对象跟踪。即通过的相关跟踪器来实时跟踪视频流中的对象。与的质心跟踪不同，的对象跟踪算法可以利用从输入图像收集的信息进行自我更新该算法不需要为输入视频流中的每一帧计算一组边界"}