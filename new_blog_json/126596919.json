{"blogid": "126596919", "writerAge": "码龄2年", "writerBlogNum": "52", "writerCollect": "392", "writerComment": "617", "writerFan": "541", "writerGrade": "5级", "writerIntegral": "1738", "writerName": "new Handsome()", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126596919.jpg", "writerRankTotal": "12819", "writerRankWeekly": "128", "writerThumb": "476", "writerVisitNum": "13616", "blog_read_count": "553", "blog_time": "已于 2022-09-05 08:39:49 修改", "blog_title": "6、通过 Java 官方文档学习一下 Java 的类和对象", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_5\">一、引入</a></li><li><a href=\"#_28\">二、类和对象</a></li><li><ul><li><a href=\"#1_Java__32\">(1) 什么是对象【Java 官方教程】？</a></li><li><ul><li><a href=\"#__33\">① 现实生活中的对象</a></li><li><a href=\"#_Java__114\">② 软件对象（Java 中的对象）</a></li></ul>\n</li><li><a href=\"#2_Java__132\">(2) 什么是类【Java 官方教程】？</a></li><li><ul><li><a href=\"#__133\">① 概念</a></li><li><a href=\"#__155\">② 代码示例</a></li></ul>\n</li><li><a href=\"#3__269\">(3) 另一个代码案例（刘爷爷的猫）</a></li><li><ul><li><a href=\"#__270\">① 案例需求和代码</a></li><li><a href=\"#__356\">② 类与对象的关系分析</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_364\">三、总结</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_5\"></a>一、引入</h1>\n<p>有这样一个 Java 基础面试题：<strong>Java 语言有那些特点</strong> ❓<br/> 答案是（The answer is）：</p>\n<blockquote>\n<p>🔥 ① <strong>简单易学</strong>（摒弃了 C++ 语言中的重载、多继承、自动强制类型转换和让人头痛的指针，并有垃圾回收机制管理内存）<br/> 🔥 ② <font color=\"red\"><strong>面向对象</strong>（Java 语言的三大特性：封装、继承和多态）</font><br/> 🔥 ③ <strong>跨平台</strong>（Java 通过 JVM 实现跨平台性）<br/> 🔥 ④ <strong>安全可靠性</strong>（没有指针这种与内存直接挂钩的机制，避免程序设计者直接操作内存，减少了对内存的直接伤害。Java 通常被用在网络环境中，为此，Java 提供了一个安全机制以防恶意代码的攻击。除了Java 语言具有的许多安全特性以外，Java 对通过网络下载的类具有一个安全防范机制 —— 类加载器 ClassLoader，如分配不同的名字空间以防替代本地的同名类、字节代码检查，并提供安全管理机制 —— 安全管理器 SecurityManager 作为 Java 应用设置安全哨兵。）<br/> 🔥 ⑤ <strong>支持多线程</strong>（C++ 没有内置的多线程机制，必须调用操作系统的多线程功能以实现多功能程序设计，而 Java 语言本身就提供了多线程支持）<br/> 🔥 ⑥ <strong>Java 语言是分布式的</strong>（Java 语言支持 Internet 应用的开发，在基本的 Java 应用编程接口中有一个网络应用编程接口（java net），它提供了用于网络应用编程的类库，包括 URL、URLConnection、Socket、ServerSocket 等。Java 的 RMI（远程方法激活）机制也是开发分布式应用的重要手段。）<br/> 🔥 ⑦ <strong>Java 语言是健壮的</strong>（Java 的强类型机制、异常处理、垃圾的自动收集等是 Java 程序健壮性的重要保证。对指针的丢弃是 Java 的明智选择。Java 的安全检查机制使得 Java 更具健壮性。）<br/> 🔥 ⑧ <strong>Java 语言是可移植的</strong>（这种可移植性来源于体系结构中立性，另外，Java 还严格规定了各个基本数据类型的长度。Java 系统本身也具有很强的可移植性，Java 编译器是用 Java 实现的，Java 的运行环境是用 ANSI C 实现的。）</p>\n</blockquote>\n<p>Java 语言的特点加起来可以绕地球🌍一圈半，并不是可以随随便便解释清楚的，上面的一大段文字也并非本篇文章的重点。本篇文章的重点是 Java 的特性中最基本的、也是最重要的 —— 面向对象（封装、继承和多态）。</p>\n<hr/>\n<p>还有一个面试题：面向对象和面向过程的区别是什么 ❓<br/> The answer is：</p>\n<blockquote>\n<p>🌁 【面向过程】面向过程的性能比面向对象高。 因为类调用时需要实例化，开销比较大，比较消耗资源，所以当性能是最重要的考量因素的时候（如单片机、嵌入式开发、Linux/Unix）一般采用面向过程开发。但是，面向过程没有面向对象易维护、易复用、易扩展。<br/> 🌁 【面向对象】面向对象易维护、易复用、易扩展。 因为面向对象有<strong>封装、继承、多态</strong>的特性。所以可以设计出低耦合的系统，使系统更加灵活、更加易于维护。但是，面向对象性能比面向过程低。</p>\n</blockquote>\n<p><code>上面的两道面试题都有提到面向对象的【封装、继承和多态】等三个特点。Today，让我们来学习一下【面向对象】...</code></p>\n<h1><a id=\"_28\"></a>二、类和对象</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8ba4e571e126404daa64972a9f66844c.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7b45b496a2554331964ed829bcac6a6d.png\"/></p>\n<h2><a id=\"1_Java__32\"></a>(1) 什么是对象【Java 官方教程】？</h2>\n<h3><a id=\"__33\"></a>① 现实生活中的对象</h3>\n<p><em><font color=\"red\">Objects</font> are key to understanding <strong>object-oriented technology</strong>. Look around right now and you’ll find many examples of real-world objects: your dog, your desk, your television set, your bicycle.</em></p>\n<p>理解面向对象技术就必须得理解【对象】是什么。环顾四周，你会看到很多现实生活中的【对象】。你的狗 🐶、你的桌子、你的电视机 📺、你的自行车 🚲 等都是【对象】。</p>\n<hr/>\n<p>Real-world objects <strong>share</strong>（有） two characteristics: They all have state and behavior.</p>\n<p>真实世界的对象有两种特征：它们都有状态（state）和行为（behavior）</p>\n<hr/>\n<p><strong>Dogs</strong> have state (name, color, breed, hungry) and behavior (barking, fetching, wagging tail).*</p>\n<p>狗 🐶 有<strong>状态</strong>【名字、颜色、品种、饥饿】<br/> 狗 🐶 有<strong>行为</strong>【吠叫、抓东西、摇尾巴】</p>\n<hr/>\n<p><em><strong>Bicycles</strong> also have state (current gear, current pedal cadence, current speed) and behavior (changing gear, changing pedal cadence, applying brakes).</em></p>\n<p>自行车 🚲 有<strong>状态</strong>【当前档位、当前踏板节奏、当前速度】<br/> 自行车 🚲 有<strong>行为</strong>【换档、改变踏板节奏、刹车】</p>\n<hr/>\n<p><em>Identifying the state and behavior for real-world objects is a great way to begin thinking in terms of 【<strong>o</strong>bject-<strong>o</strong>riented <strong>p</strong>rogramming】.</em></p>\n<p><strong>识别现实世界的对象的状态和行为</strong>是开始思考面向对象编程的好方法。</p>\n<hr/>\n<blockquote>\n<p>【上面的英文是官方教程的原句，多看英文可以提升语感，多懂点英文对以后解决开发问题也有好处。博主是先看中文理解了再看英文的，遇到不懂的单词也通过英语词典翻译。这样学了才更有自信。<font color=\"red\">韩顺平老师的资料结合官方文档</font>】</p>\n</blockquote>\n<blockquote>\n<p>现实世界中 🌎，万物皆对象。万事万物都可被抽象为对象，万事万物都有状态（State）和行为（Behavior）。<br/> 状态（State）：可看做是对象的<strong>属性</strong>，是名词（如：名字、颜色、档位、当前速度）；<br/> 行为（Behavior）：可看做对象<strong>可以做的事情</strong>，是动词（如：抓东西、摇尾巴、换挡、刹车）</p>\n</blockquote>\n<hr/>\n<p><em>Take a minute right now to observe the real-world <strong>objects</strong> that are in your immediate area.</em><br/> 现在花一点点时间🧭 观察一下真实世界中你附近的物品。</p>\n<p><em>For each object that you see, ask yourself two questions: “What possible <strong>states</strong> can this object be in?” and “What possible <strong>behavior</strong> can this object perform?”.</em><br/> 对于每一个你看到的物品，都问自己 2️⃣ 个问题：<br/> ① 这个物品可能处于什么状态 ❓<br/> ② 这个物品可能会执行什么行为 ❓</p>\n<p><em>Make sure to write down your observations.</em><br/> 最好是把你观察到的结果记录下来。</p>\n<blockquote>\n<p>【1】<strong>物品：手机</strong><br/> 可能处于状态：亮屏、息屏、播放声音、充电状态、微信支付界面<br/> 可能的行为：微信支付、打电话、刷快手、发短信<br/> 【2】<strong>物品：小电风扇</strong><br/> 可能处于状态：停止旋转、快速旋转中、慢速旋转中、完全没电<br/> 可能的行为：快速旋转、慢速旋转<br/> 【3】<strong>物品：键盘</strong><br/> 可能处于状态：提示灯亮、提示灯灭、可以打字、不可以打字<br/> 可能的行为：提示灯发光、提示灯流动、打字</p>\n</blockquote>\n<p><em>As you do, you’ll notice that real-world objects <strong>vary in complexity</strong>.</em><br/> 当您这样做时，您会注意到现实世界中的对象的复杂性各不相同。</p>\n<p><em>your desktop lamp may have only two possible states (on and off) and two possible behaviors (turn on, turn off), but your desktop radio might have additional states (on, off, current volume, current station) and behavior (turn on, turn off, increase volume, decrease volume, seek, scan, and tune).</em><br/> 您的桌面灯 🔦 可能只有两种<strong>状态</strong>（打开和关闭）和两种可能的<strong>行为</strong>（打开、关闭）<br/> 但您的桌面收音机 📻 可能有其他<strong>状态</strong>（打开、关闭、当前音量、当前电台）和<strong>行为</strong>（打开、关闭、增大音量、减小音量、搜索、扫描和调频）</p>\n<p><em>You may also notice that some objects, in turn, will also contain other objects. These real-world observations all translate into the world of object-oriented programming.</em><br/> 您可能还会注意到，一些对象反过来也会包含其他对象。这些现实世界的观察（物品）都可转化为面向对象编程的世界。</p>\n<blockquote>\n<p>俄国文艺理论家<strong>尼古拉·加夫里诺维奇·车尔尼雪夫斯基</strong>说过：“<strong>艺术源于生活,又高于生活</strong>。<br/> 艺术之所以说来源于生活，是因为所谓的生活给予了创作者以经历。贝多芬耳聋后而作命运交响曲，李白放逐后而作将进酒，不朽的名篇背后必有不凡的人生。 而多数人纵使命运坎坷，经历丰富，也难以通过艺术加以诉说。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\99545708fd404a61b39755f632a3446b.png\"/></p>\n</blockquote>\n<blockquote>\n<p>编程中的某些概念也和现实世界有些相似（对象的概念、设计模式），毕竟编程也是现实生活中的人创造的嘛！现实世界中的人创作必然会受到现实世界的影响，现实世界必然会给创作带来灵感。</p>\n</blockquote>\n<hr/>\n<h3><a id=\"_Java__114\"></a>② 软件对象（Java 中的对象）</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\aef485e7ea2b439cb97690efbf4d9a0e.png\"/><br/> <em>Software objects are <strong>concept</strong>ually similar to real-world objects: they too consist of state and related behavior.</em><br/> 软件对象在概念上类似于现实世界的对象：它们也由状态和相关行为组成。</p>\n<blockquote>\n<p>状态（State）对应软件对象中的 Field（属性）<br/> 行为（Behavior）对应软件对象中的 Method（方法）</p>\n</blockquote>\n<p><em>An object stores its <strong>state</strong> in <strong>fields</strong> (variables in some programming languages) and exposes（暴露） its <strong>behavior</strong> through <strong>methods</strong> (functions in some programming languages).</em><br/> 对象将其<strong>状态</strong>存储在<strong>字段</strong>（某些编程语言中的变量）中，并通过<strong>方法</strong>（某些编程语言中的函数）暴露其<strong>行为</strong>。</p>\n<p><em>Methods operate on an object’s internal state and serve as the primary mechanism for object-to-object communication.</em><br/> 通过方法操作（如修改）对象内部的状态（属性），并作为不同对象之间沟通的主要机制。</p>\n<p>Hiding internal state and requiring all interaction to be performed through an object’s <strong>methods</strong> is known as data <strong>encapsulation</strong>（封装） — a fundamental principle of object-oriented programming.<br/> 隐藏内部状态并要求通过对象的<strong>方法</strong>执行所有交互被称为<strong>数据封装</strong> —— 面向对象编程的基本原则之一。</p>\n<h2><a id=\"2_Java__132\"></a>(2) 什么是类【Java 官方教程】？</h2>\n<h3><a id=\"__133\"></a>① 概念</h3>\n<p>In the real world, you’ll often <strong>find</strong> many individual objects all of the same kind. There may be thousands of other bicycles in existence, all of the same <strong>make</strong>（品牌、型号） and model.<br/> 在现实世界中，您经常会发现许多物品有相同的特征。可能还有成千上万的其他自行车，都是相同的品牌和型号。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\de5df52aa04148dd921fbc2487e3ab20.png\"/></p>\n<p>Each bicycle was built from the same set of <strong>blueprints</strong>（模板、蓝图） and therefore contains the same <strong>components</strong>（组件）.<br/> 每辆自行车都是由同一组蓝图制造的，因此包含相同的组件。</p>\n<p>In object-oriented terms, we say that your bicycle is an <strong>instance（实例）</strong> of <font color=\"blue\"> the class of objects known as bicycles（<strong>自行车这个物品的类</strong>）</font>.<br/> 在面向对象的术语中，我们说您的自行车是自行车这个对象类的一个实例。</p>\n<p>A class is the blueprint from which individual objects are created.<br/> 类是创建单个对象的蓝图（模板）。</p>\n<blockquote>\n<p>类（Class）是创建具体对象的模板（eg: 动物、自行车、电脑、手机）<br/> 对象是一个类的实例（eg: 猫 🐱、崔克自行车 🚴、苹果电脑 💻、华为手机）</p>\n</blockquote>\n<blockquote>\n<p>猫是动物中的一种；崔克自行车是自行车中的一种、苹果电脑是电脑中的一种、华为手机是手机中的一种。<br/> 动物、自行车、电脑、手机都可看做是类（Class）<br/> 猫是动物类的一个实例（Instance）；崔克自行车是自行车类的一个实例；苹果电脑是电脑类的一个实例；华为手机是手机类的一个实例。</p>\n</blockquote>\n<h3><a id=\"__155\"></a>② 代码示例</h3>\n<p><code>一个自行车类：</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6e630215278e4ccda2bd4f51b833d6c0.png\"/></p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * 自行车类：创建一个自行车的蓝图（模板）\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bicycle</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">int</span> cadence <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 节奏、韵律</span>\n    <span class=\"token keyword\">int</span> speed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> gear <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 排挡</span>\n\n    <span class=\"token comment\">/**\n     * 改变节奏\n     *\n     * @param newValue 节奏值\n     */</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">changeCadence</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> newValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cadence <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 换挡\n     *\n     * @param newValue 换挡值\n     */</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">changeGear</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> newValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        gear <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 加速\n     *\n     * @param increment 加速值\n     */</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">speedUp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> increment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        speed <span class=\"token operator\">=</span> speed <span class=\"token operator\">+</span> increment<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 减速\n     *\n     * @param decrement 减速值\n     */</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">applyBrakes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> decrement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        speed <span class=\"token operator\">=</span> speed <span class=\"token operator\">-</span> decrement<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 打印当前自行车对象的状态\n     */</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">printStates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cadence 节奏:\"</span> <span class=\"token operator\">+</span>\n                cadence <span class=\"token operator\">+</span> <span class=\"token string\">\" speed 速度:\"</span> <span class=\"token operator\">+</span>\n                speed <span class=\"token operator\">+</span> <span class=\"token string\">\" gear 档位:\"</span> <span class=\"token operator\">+</span> gear<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>The <strong>syntax</strong>（语法） of the Java programming language will look new to you, but the design of this <strong>class</strong> is based on the previous discussion of <strong>bicycle objects</strong>.<br/> Java 编程语言的语法对您来说可能是新的，但是这个类（Bicycle）的设计是基于前面对自行车对象的讨论。</p>\n<p><em>The <strong>fields</strong>（字段） <strong>cadence</strong>, <strong>speed</strong>, and <strong>gear</strong> represent the object’s <strong>state</strong>, and the <strong>methods</strong>（方法） (<strong>changeCadence</strong>, <strong>changeGear</strong>, <strong>speedUp</strong> etc.) define its interaction with the outside world.</em><br/> 字段 cadence、speed 和 gear 表示对象的<strong>状态</strong><br/> 方法（changeCadence、changeGear 和 speedUp）定义该类与外部世界的交互方式。</p>\n<p>You may have noticed that <strong>the Bicycle class</strong> does not contain a <code>main method</code>. That’s because it’s not a complete <strong>application</strong>（应用程序）; it’s just <strong>the blueprint for bicycles</strong> that might be used in an application. The responsibility of creating and using new <strong>Bicycle objects</strong> belongs to some other class in your application.<br/> 您可能已经注意到 Bicycle 类不包含 main 方法。那是因为它不是一个完整的应用程序。它只是<strong>可能</strong>在应用程序中使用到的自行车对象的蓝图。创建和使用 Bicycle 对象的责任属于应用程序中的其他一些类。</p>\n<p><code>创建一个 Bicycle 对象，并使用它</code></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BicycleDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token comment\">// Create two different Bicycle objects</span>\n        <span class=\"token comment\">// 创建两个不同的自行车对象</span>\n        <span class=\"token class-name\">Bicycle</span> bike1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bicycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Bicycle</span> bike2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bicycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/*\n            Invoke methods on those objects\n            用这些对象调用方法\n         */</span>\n\n        <span class=\"token comment\">// 自行车1的节奏改为50</span>\n        bike1<span class=\"token punctuation\">.</span><span class=\"token function\">changeCadence</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 自行车1的速度【增加】10</span>\n        bike1<span class=\"token punctuation\">.</span><span class=\"token function\">speedUp</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 自行车1的档位改为2</span>\n        bike1<span class=\"token punctuation\">.</span><span class=\"token function\">changeGear</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 打印自行车1的状态</span>\n        bike1<span class=\"token punctuation\">.</span><span class=\"token function\">printStates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 自行车2的节奏改为50</span>\n        bike2<span class=\"token punctuation\">.</span><span class=\"token function\">changeCadence</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 自行车2的速度【增加】10</span>\n        bike2<span class=\"token punctuation\">.</span><span class=\"token function\">speedUp</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 自行车2的档位改为2</span>\n        bike2<span class=\"token punctuation\">.</span><span class=\"token function\">changeGear</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 自行车2的节奏改为40</span>\n        bike2<span class=\"token punctuation\">.</span><span class=\"token function\">changeCadence</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 自行车2的速度【增加】10</span>\n        bike2<span class=\"token punctuation\">.</span><span class=\"token function\">speedUp</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 自行车2的档位改为3</span>\n        bike2<span class=\"token punctuation\">.</span><span class=\"token function\">changeGear</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 打印自行车2的状态</span>\n        bike2<span class=\"token punctuation\">.</span><span class=\"token function\">printStates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>输出结果：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ac02cbadca194ee1b48c27455d17be42.png\"/></p>\n<h2><a id=\"3__269\"></a>(3) 另一个代码案例（刘爷爷的猫）</h2>\n<h3><a id=\"__270\"></a>① 案例需求和代码</h3>\n<p>🍎 需求：<br/> 刘爷爷养了两只猫。一只名字叫 Tom，今年 3 岁，白颜色（猫的花色）。还有一只叫 Jerry，今年 5岁，绿颜色。<br/> 请编写一个程序，当用户输入猫的名字后就显示该猫的【名字，年龄和颜色】。如果用户输入的猫的名字错误，则显示刘爷爷没有这只猫。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5c24093b0d7447e4b71442b7c09b4a9a.png\"/></p>\n<hr/>\n<p>🍎 分析：</p>\n<blockquote>\n<p>Tom 和 Jerry 是两只不同的猫，它们都有名字、年龄、颜色等状态（属性）。应该把猫 🐱 抽象为一个类（Cat），类中有 name、age 和 color 三个属性。Tom 和 Jerry 都是 Cat 类的实例（对象）。</p>\n</blockquote>\n<hr/>\n<p>🍎 参考上面的 Bicycle 类和 BicycleDemo 类完成下面的代码</p>\n<p><code>Cat 类：</code></p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * Cat 类：猫对象的模板（蓝图）\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token comment\">/*\n        name、age、color 是猫对象共有的状态\n     */</span>\n\n    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">String</span> color<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * 是猫对象都有的行为（打印状态）\n     */</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">printStates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name:\"</span> <span class=\"token operator\">+</span>\n                name <span class=\"token operator\">+</span> <span class=\"token string\">\" age:\"</span> <span class=\"token operator\">+</span>\n                age <span class=\"token operator\">+</span> <span class=\"token string\">\" color:\"</span> <span class=\"token operator\">+</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>创建 Cat 对象，并使用它</code></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CatDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 通过【new】关键字创建一个 Cat 对象</span>\n        <span class=\"token comment\">// tom 是 Cat 对象的地址的引用（tom 是当前 Cat 对象的对象名）</span>\n        <span class=\"token comment\">// Cat 是一个类, Cat 是 Java 中的引用数据类型</span>\n        <span class=\"token class-name\">Cat</span> tom <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 访问类中的属性：对象名 + 【.】+ 属性名</span>\n        tom<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">;</span>\n        tom<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        tom<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">\"白色\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 调用类中的方法：对象名 + 【.】+ 方法名</span>\n        <span class=\"token comment\">// name:Tom age:3 color:白色</span>\n        tom<span class=\"token punctuation\">.</span><span class=\"token function\">printStates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Cat</span> jerry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        jerry<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Jerry\"</span><span class=\"token punctuation\">;</span>\n        jerry<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n        jerry<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">\"绿色\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// name:Jerry age:5 color:绿色</span>\n        jerry<span class=\"token punctuation\">.</span><span class=\"token function\">printStates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入猫的名字：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> userCatName <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"jerry\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>userCatName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            jerry<span class=\"token punctuation\">.</span><span class=\"token function\">printStates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>userCatName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            tom<span class=\"token punctuation\">.</span><span class=\"token function\">printStates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"刘爷爷没有这只猫\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>测试结果：</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d581709ccce64fbda1540271dce33c90.png\"/></p>\n<h3><a id=\"__356\"></a>② 类与对象的关系分析</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a26db33047ed4405a69bdfdcc0396529.png\"/></p>\n<blockquote>\n<p>🍉 ① 类是抽象的，代表<strong>一类</strong>事物（eg：猫类、自行车类、人类）<br/> 🍉 ② 类是引用数据类型<br/> 🍉 ③ 类是对象的模板（blueprint）<br/> 🍉 ④ 对象是具体的、实际的，代表<strong>具体</strong>的一个事物<br/> 🍉 ⑤ 对象是类的实例化</p>\n</blockquote>\n<h1><a id=\"_364\"></a>三、总结</h1>\n<ul><li> <p>对象<br/> – 生活中万事万物都是对象（对象有状态行为）<br/> – 面向对象编程中的对象和生活中的对象类似（状态是属性、行为是方法）</p> </li><li> <p>类<br/> – 类是一类事物的蓝图（模板），类中定义了属性和方法<br/> – 类实例化后就是对象</p> </li></ul>\n<blockquote>\n<p>若您是比我还若的初学者，可能对代码部分比较懵。没关系，我后面的文章胡详细说明。<br/> 类的实例化、类中的属性和方法、对象的内存布局 … 将在以后的文章中详细说明。🥤</p>\n</blockquote>\n<blockquote>\n<p><strong>我才疏学浅，但又颇爱分享。若您在文章中发现错误，请不吝赐教。㊗️万事顺心，愿您点赞。</strong></p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-09-05 08:39:49", "summary": "文章目录一、引入二、类和对象什么是对象官方教程？现实生活中的对象软件对象中的对象什么是类官方教程？概念代码示例另一个代码案例刘爷爷的猫案例需求和代码类与对象的关系分析三、总结一、引入有这样一个基础面试"}