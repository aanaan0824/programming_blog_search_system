{"blogid": "126335116", "writerAge": "码龄1年", "writerBlogNum": "60", "writerCollect": "1717", "writerComment": "1735", "writerFan": "3995", "writerGrade": "5级", "writerIntegral": "3594", "writerName": "热爱飞行的小应学长", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126335116.jpg", "writerRankTotal": "5911", "writerRankWeekly": "2601", "writerThumb": "1335", "writerVisitNum": "117176", "blog_read_count": "934", "blog_time": "于 2022-08-14 22:05:07 发布", "blog_title": "Java真的不难（四十七）Mybatis-Plus的入门及应用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"MybatisPlus_0\"></a>Mybatis-Plus的入门及应用</h1>\n<p>哈喽大家好~ 好久不见！！！<br/> 距离上次写作已经过去一个半月啦，这段断更的时间呢小应学长也在准备工作的事情，一直在面试之类，最后在八月一号入职啦，看到文章的小伙伴也要加油哟！<br/> 是这样，在工作期间一个项目用到了Mybatis-Plus，突然看自己的博客发现之前没有写这篇文章，所以就趁着这个机会来写吧。那我们就开始吧~~</p>\n<hr/>\n<h2><a id=\"MybatisPlus_7\"></a>一、什么是Mybatis-Plus?</h2>\n<p>其实很好理解，顾名思义就是Myabtis的加强版，就是这么好理解<br/> 我们先看看Mybatis-Plus的官网：<code>https://baomidou.com/</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0968bf3400a544408fdeccb28253632c.png\"/><br/> 我们看到这只鸟变成了蓝色，从图片上也可以看到官网对Mybatis-Plus的一个简介：<strong>为简化开发而生</strong></p>\n<p>在官网也可以看到Mybatis-Plus的特性以及所支持的数据库<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\175ef7a70d8147478386811ce9e42e45.png\"/><br/> 看完这些，大家是不是都想快速的试试实战效果如何？</p>\n<hr/>\n<h2><a id=\"MybatisPlus_19\"></a>二、Mybatis-Plus的快速入门</h2>\n<p><strong>一、数据库的搭建</strong></p>\n<p>首先我们需要一张数据表，这样就按照官网的步骤来吧，采用的是MySQL数据库，建表SQL：<br/> 表名：user</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> mp_user<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">user</span>\n<span class=\"token punctuation\">(</span>\n    id <span class=\"token keyword\">BIGINT</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'主键ID'</span><span class=\"token punctuation\">,</span>\n    name <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'姓名'</span><span class=\"token punctuation\">,</span>\n    age <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'年龄'</span><span class=\"token punctuation\">,</span>\n    email <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'邮箱'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>创建成功后，直接导入数据：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> <span class=\"token keyword\">user</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Jone'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'test1@baomidou.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Jack'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'test2@baomidou.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'test3@baomidou.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Sandy'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'test4@baomidou.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Billie'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'test5@baomidou.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这样子我们的测试表就建完啦</p>\n<hr/>\n<p><strong>二、SpringBoo项目搭建</strong></p>\n<p>创建SpringBoot项目的过程可以看我的上一篇博客，这样就不讲啦<br/> 初始化SpringBoot项目后，需要在pom.xml里面添加依赖：<br/> 因为你是Boot项目，所有已经自带了Boot的依赖，我们只需导入Mybatis-Plus的依赖即可，这里我就复制了所有的，大家也可以检查一下是否缺少：</p>\n<p><strong>引入 Spring Boot Starter 父工程：</strong></p>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.7.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>relativePath</span><span class=\"token punctuation\">/&gt;</span></span> <span class=\"token comment\">&lt;!-- lookup parent from repository --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p><strong>引入MySQL驱动包、 spring-boot-starter、spring-boot-starter-test、mybatis-plus-boot-starter和lombok依赖：</strong></p>\n<pre><code class=\"prism language-xml\">\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>8.0.23<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">&gt;</span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.baomidou<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>mybatis-plus-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.18.24<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">&gt;</span></span>provided<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p><strong>注意：尽量不要同时导入Mybatis和Mybatis-Plus！ 可能会存在版本差异出问题</strong></p>\n<hr/>\n<p><strong>三、连接数据库</strong></p>\n<p>首先去<code>application.properties</code>这个文件配置数据库</p>\n<p><strong>MySQL5连接方式：</strong></p>\n<pre><code class=\"prism language-xml\">spring.datasource.username=root\nspring.datasource.password=111111\nspring.datasource.url=jdbc:mysql://localhost:3306/数据库名?useUnicode=true&amp;characterEncoding=utf-8\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\n</code></pre>\n<p><strong>MySQL8连接方式（需要增加时区配置）：</strong></p>\n<pre><code class=\"prism language-xml\">spring.datasource.username=root\nspring.datasource.password=111111\nspring.datasource.url=jdbc:mysql://localhost:3306/数据库名?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\n</code></pre>\n<p><strong>注意：高版本兼容低版本</strong></p>\n<hr/>\n<p><strong>四、完成Java代码</strong></p>\n<p>我们知道MyBatis可以实现自动映射，所以我们要创一个实体类：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> user <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>注解解释：</strong></p>\n<ul><li>@Data：自动生成Getter,Setter,equals,canEqual,hasCode,toString等方法</li><li>@AllArgsConstructor：自动添加一个构造函数，该构造函数含有所有已声明字段属性参数</li><li>@NoArgsConstructor：自动创建一个无参构造函数</li></ul>\n<p>接着去创建一个Mapper接口，继承BaseMapper，传入泛型即可：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Repository</span>  <span class=\"token comment\">//代表持久层</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>user<span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>没错，就是这一行代码哈哈哈，大家可以点进BaseMapper查看</p>\n<p>然后在启动类上添加扫描@MapperScan：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.example.mp_Test.mapper\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MpTestApplication</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MpTestApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>然后用测试类去测试是否有效：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MpTestApplicationTests</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token comment\">//继承了BaseMapper,所以所有方法都来自父类，但自己也可以写自己需要的方法</span>\n\t<span class=\"token annotation punctuation\">@Autowired</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">UserMapper</span> userMapper<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Test</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">contextLoads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>user<span class=\"token punctuation\">&gt;</span></span> users <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tusers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们可以在控制台看到数据库的表内容已经全部被输出：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\18bb276134e346d7bb524d24595d0e93.png\"/><br/> 到这里大家是不是觉得这也太方便了吧，是的，Mybatis-Plus就是这样，不用写XML，直接接口继承BaseMapper即可</p>\n<p>注意：我们需要在主启动类上去扫描mapper包下的所有接口，使用@MapperScan注解</p>\n<hr/>\n<h2><a id=\"_192\"></a>三、配置日志</h2>\n<p>通过上述的体验，确实发现比Mybatis更简单，但是发现SQL是不可见的，也就是我们不知道期间执行了什么样的SQL，所以我们需要通过日志去查看期间运行的SQL。</p>\n<p>还是在<code>application.properties</code>文件里添加以下配置：</p>\n<pre><code class=\"prism language-xml\">#日志配置\nmybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl\n</code></pre>\n<p>当然也可以使用Log4j日志，导入对应依赖即可</p>\n<p><strong>然后重新运行测试类：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\eb046800f89340d78c70126199c03847.png\"/></p>\n<h2><a id=\"CRUD_206\"></a>四、其他的CRUD操作</h2>\n<p><strong>插入操作：</strong><br/> 上面完成了基本的查询，现在可以试试使用MyBatis-Plus的INSERT方法：<br/> 只需要在测试类下写法即可：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tuser<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小王\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tuser<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tuser<span class=\"token punctuation\">.</span><span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123456@qq.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>注意：我们这里没有set对应的ID，但是我们运行后，发现id有值：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\419606fa39274c15bc85fffd38786de7.png\"/><br/> <strong>得出的结论是这个ID会自己生成，这就涉及到了主键生成策略，因为实体类里面的ID对应数据库表中的主键</strong></p>\n<hr/>\n<p><strong>更新操作：</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//把上面插入信息的那条信息给更新</span>\n\tuser<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token number\">1558809291433979905L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tuser<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小陈\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tuser<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tuser<span class=\"token punctuation\">.</span><span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"888888@qq.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">updateById</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//返回受影响行数</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>测试OK，但是注意updateById的参数是一个对象！！！</p>\n<p>还有一个DELETE操作就大家自己去试试吧~~~</p>\n<hr/>\n<h2><a id=\"_250\"></a>五、主键生成策略</h2>\n<p><strong>常见的主键生成策略有：</strong></p>\n<ol><li>数据库自增ID</li><li>UUID</li><li>UUID变种（UUID to Int64）</li><li>Redis生成ID</li><li>Twitter的雪花算法</li></ol>\n<p>这里可以参考一篇博客：分布式系统唯一ID生成方案汇总<code>https://www.cnblogs.com/haoxinyue/p/5208136.html</code></p>\n<p><strong>什么是雪花算法？</strong><br/> snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0。</p>\n<p><strong>特点：保证全球唯一</strong></p>\n<hr/>\n<p>好啦 这篇文章就到这里，有时间继续写后面的内容，Bye~~</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\55c356150c6e4e02ac9df0db978d6345.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-08-14 22:05:07", "summary": "的入门及应用哈喽大家好好久不见！！！距离上次写作已经过去一个半月啦，这段断更的时间呢小应学长也在准备工作的事情，一直在面试之类，最后在八月一号入职啦，看到文章的小伙伴也要加油哟！是这样，在工作期间一个"}