{"blogid": "126700587", "writerAge": "码龄4年", "writerBlogNum": "38", "writerCollect": "152", "writerComment": "33", "writerFan": "194", "writerGrade": "3级", "writerIntegral": "518", "writerName": "江上_酒", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126700587.jpg", "writerRankTotal": "31175", "writerRankWeekly": "10116", "writerThumb": "79", "writerVisitNum": "26229", "blog_read_count": "172", "blog_time": "已于 2022-09-05 11:07:27 修改", "blog_title": "扬州大学2022年858程序设计与数据结构试题参考答案", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<center>\n<font face=\"黑体\" size=\"6\"><b>扬 州 大 学</b></font>\n</center>\n<center>\n<font face=\"黑体\" size=\"6\"><b>2022年硕士研究生招生考试初试试题（A卷）参考答案</b></font>\n</center>\n<center>\n<font face=\"黑体\" size=\"5\"><b>科目代码：858 科目名称：程序设计与数据结构 满分：150分</b></font>\n</center>\n<p><strong>注意：答案为个人自制，非官方答案。</strong></p>\n<h3><a id=\"_12\"></a>一、应用题</h3>\n<ol><li> <p>参考答案<br/> 例如，有一张学生基本信息表，包括学生的学号、姓名、性别、籍贯、专业等。每个学生的基本信息记录对应一个数据元素，学生记录按顺序号排列，形成了学生基本信息记录的线性序列。对于整个表来说，只有一个开始结点(它的前面无记录)和一个终端结点(它的后面无记录)，其他的结点则各有一个也只有一个直接前驱和直接后继。学生记录之间的这种关系就确定了学生表的逻辑结构，即线性结构。这些学生记录在计算机中的存储表示就是存储结构。如果用连续的存储单元(如用数组表示)）来存放这些记录，则称为顺序存储结构；如果存储单元不连续，而是随机存放各个记录，然后用指针进行链接,则称为链式存储结构。即相同的逻辑结构，可以对应不同的存储结构。</p> </li><li> <p>参考答案<br/> H(H(T(H(T(H(T(L)))))))。</p> </li><li> <p>参考答案<br/> (1) 或为空树,或为只有根结点的二叉树。<br/> (2) 或为空树,或为任一结点至多只有左子树的二叉树。<br/> (3) 或为空树,或为任一结点至多只有右子树的二叉树。<br/> (4) 或为空树，或为任一结点至多只有右子树的二叉树。</p> </li><li> <p>参考答案<br/> (1) 哈夫曼树如下图所示，其编码如下表所示。</p> <p><img alt=\"image-20220905103039737\" src=\"..\\..\\static\\image\\403867385794c81f2048400f3f685786.png\"/></p>\n<table><thead><tr><th align=\"center\">字母频率</th><th align=\"center\">哈夫曼编码</th><th align=\"center\">等长二进制编码</th></tr></thead><tbody><tr><td align=\"center\">0.07</td><td align=\"center\">1010</td><td align=\"center\">000</td></tr><tr><td align=\"center\">0.19</td><td align=\"center\">00</td><td align=\"center\">001</td></tr><tr><td align=\"center\">0.02</td><td align=\"center\">10000</td><td align=\"center\">010</td></tr><tr><td align=\"center\">0.06</td><td align=\"center\">1001</td><td align=\"center\">011</td></tr><tr><td align=\"center\">0.32</td><td align=\"center\">11</td><td align=\"center\">100</td></tr><tr><td align=\"center\">0.03</td><td align=\"center\">10001</td><td align=\"center\">101</td></tr><tr><td align=\"center\">0.21</td><td align=\"center\">01</td><td align=\"center\">110</td></tr><tr><td align=\"center\">0.10</td><td align=\"center\">1011</td><td align=\"center\">111</td></tr></tbody></table><p>(2) 二进制等长编码如上表所示。<br/> (3) 对于上述两种方案，等长编码的构造显然比哈夫曼编码的构造简单。但是，哈夫曼编码是最优前缀编码，其加权路径长度为2.61，而等长二进制编码的加权路径长度为3。</p> </li><li> <p>参考答案<br/> (1) 邻接矩阵如下<br/> <span class=\"katex--display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\">\n       \n        \n         \n          \n           {\n          \n          \n           \n            \n             \n              \n               ∞\n              \n             \n            \n            \n             \n              \n               4\n              \n             \n            \n            \n             \n              \n               3\n              \n             \n            \n            \n             \n              \n               ∞\n              \n             \n            \n            \n             \n              \n               ∞\n              \n             \n            \n            \n             \n              \n               ∞\n              \n             \n            \n            \n             \n              \n               ∞\n              \n             \n            \n            \n             \n              \n               ∞\n              \n             \n            \n           \n           \n            \n             \n              \n               4\n              \n             \n            \n            \n             \n              \n               ∞\n              \n             \n            \n            \n             \n              \n               5\n              \n             \n            \n            \n             \n              \n               5\n              \n             \n            \n            \n             \n              \n               9\n              \n             \n            \n            \n             \n              \n               ∞\n              \n             \n            \n            \n             \n              \n               ∞\n              \n             \n            \n            \n             \n              \n               ∞\n              \n             \n            \n           \n           \n            \n             \n              \n               3\n              \n             \n            \n            \n             \n              \n               5\n              \n             \n            \n            \n             \n              \n               ∞\n              \n             \n            \n            \n             \n              \n               5\n              \n             \n            \n            \n             \n              \n               ∞\n              \n             \n            \n            \n             \n              \n               ∞\n              \n             \n            \n            \n             \n              \n               ∞\n              \n             \n            \n            \n             \n              \n               5\n              \n             \n            \n           \n           \n            \n             \n              \n               ∞\n              \n             \n            \n            \n             \n              \n               5\n              \n             \n            \n            \n             \n              \n               5\n              \n             \n            \n            \n             \n              \n               ∞\n              \n             \n            \n            \n             \n              \n               7\n              \n             \n            \n            \n             \n              \n               6\n              \n             \n            \n            \n             \n              \n               5\n              \n             \n            \n            \n             \n              \n               4\n              \n             \n            \n           \n           \n            \n             \n              \n               ∞\n              \n             \n            \n            \n             \n              \n               9\n              \n             \n            \n            \n             \n              \n               ∞\n              \n             \n            \n            \n             \n              \n               7\n              \n             \n            \n            \n             \n              \n               ∞\n              \n             \n            \n            \n             \n              \n               3\n              \n             \n            \n            \n             \n              \n               ∞\n              \n             \n            \n            \n             \n              \n               ∞\n              \n             \n            \n           \n           \n            \n             \n              \n               ∞\n              \n             \n            \n            \n             \n              \n               ∞\n              \n             \n            \n            \n             \n              \n               ∞\n              \n             \n            \n            \n             \n              \n               6\n              \n             \n            \n            \n             \n              \n               3\n              \n             \n            \n            \n             \n              \n               ∞\n              \n             \n            \n            \n             \n              \n               2\n              \n             \n            \n            \n             \n              \n               ∞\n              \n             \n            \n           \n           \n            \n             \n              \n               ∞\n              \n             \n            \n            \n             \n              \n               ∞\n              \n             \n            \n            \n             \n              \n               ∞\n              \n             \n            \n            \n             \n              \n               5\n              \n             \n            \n            \n             \n              \n               ∞\n              \n             \n            \n            \n             \n              \n               2\n              \n             \n            \n            \n             \n              \n               ∞\n              \n             \n            \n            \n             \n              \n               6\n              \n             \n            \n           \n           \n            \n             \n              \n               ∞\n              \n             \n            \n            \n             \n              \n               ∞\n              \n             \n            \n            \n             \n              \n               5\n              \n             \n            \n            \n             \n              \n               4\n              \n             \n            \n            \n             \n              \n               ∞\n              \n             \n            \n            \n             \n              \n               ∞\n              \n             \n            \n            \n             \n              \n               6\n              \n             \n            \n            \n             \n              \n               ∞\n              \n             \n            \n           \n          \n          \n           }\n          \n         \n         \n           \\left\\{ \\begin{matrix} ∞&amp;4&amp;3&amp;∞&amp;∞&amp;∞&amp;∞&amp;∞ \\\\ 4&amp;∞&amp;5&amp;5&amp;9&amp;∞&amp;∞&amp;∞\\\\ 3&amp;5&amp;∞&amp;5&amp;∞&amp;∞&amp;∞&amp;5\\\\ ∞&amp;5&amp;5&amp;∞&amp;7&amp;6&amp;5&amp;4\\\\ ∞&amp;9&amp;∞&amp;7&amp;∞&amp;3&amp;∞&amp;∞\\\\ ∞&amp;∞&amp;∞&amp;6&amp;3&amp;∞&amp;2&amp;∞\\\\ ∞&amp;∞&amp;∞&amp;5&amp;∞&amp;2&amp;∞&amp;6\\\\ ∞&amp;∞&amp;5&amp;4&amp;∞&amp;∞&amp;6&amp;∞ \\end{matrix} \\right\\} \n         \n        \n       </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 9.6em; vertical-align: -4.55em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 5.05em;\"><span class=\"\" style=\"top: -1.366em;\"><span class=\"pstrut\" style=\"height: 5.016em;\"></span><span class=\"delimsizinginner delim-size4\"><span class=\"\">⎩</span></span></span><span class=\"\" style=\"top: -1.358em;\"><span class=\"pstrut\" style=\"height: 5.016em;\"></span><span class=\"\" style=\"height: 3.016em; width: 0.8889em;\">\n<svg height=\"3.016em\" preserveaspectratio=\"xMinYMin\" style=\"width:0.8889em\" viewbox=\"0 0 888.89 3016\" width=\"0.8889em\">\n<path d=\"M384 0 H504 V3016 H384z M384 0 H504 V3016 H384z\"></path>\n</svg></span></span><span class=\"\" style=\"top: -5.016em;\"><span class=\"pstrut\" style=\"height: 5.016em;\"></span><span class=\"delimsizinginner delim-size4\"><span class=\"\">⎨</span></span></span><span class=\"\" style=\"top: -6.158em;\"><span class=\"pstrut\" style=\"height: 5.016em;\"></span><span class=\"\" style=\"height: 3.016em; width: 0.8889em;\">\n<svg height=\"3.016em\" preserveaspectratio=\"xMinYMin\" style=\"width:0.8889em\" viewbox=\"0 0 888.89 3016\" width=\"0.8889em\">\n<path d=\"M384 0 H504 V3016 H384z M384 0 H504 V3016 H384z\"></path>\n</svg></span></span><span class=\"\" style=\"top: -9.166em;\"><span class=\"pstrut\" style=\"height: 5.016em;\"></span><span class=\"delimsizinginner delim-size4\"><span class=\"\">⎧</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 4.55em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 5.05em;\"><span class=\"\" style=\"top: -7.21em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span><span class=\"\" style=\"top: -6.01em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span></span></span><span class=\"\" style=\"top: -4.81em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span></span></span><span class=\"\" style=\"top: -3.61em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span><span class=\"\" style=\"top: -2.41em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span><span class=\"\" style=\"top: -1.21em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span><span class=\"\" style=\"top: -0.01em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span><span class=\"\" style=\"top: 1.19em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 4.55em;\"><span class=\"\"></span></span></span></span></span><span class=\"arraycolsep\" style=\"width: 0.5em;\"></span><span class=\"arraycolsep\" style=\"width: 0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 5.05em;\"><span class=\"\" style=\"top: -7.21em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span></span></span><span class=\"\" style=\"top: -6.01em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span><span class=\"\" style=\"top: -4.81em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span></span></span><span class=\"\" style=\"top: -3.61em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span></span></span><span class=\"\" style=\"top: -2.41em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">9</span></span></span><span class=\"\" style=\"top: -1.21em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span><span class=\"\" style=\"top: -0.01em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span><span class=\"\" style=\"top: 1.19em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 4.55em;\"><span class=\"\"></span></span></span></span></span><span class=\"arraycolsep\" style=\"width: 0.5em;\"></span><span class=\"arraycolsep\" style=\"width: 0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 5.05em;\"><span class=\"\" style=\"top: -7.21em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span></span></span><span class=\"\" style=\"top: -6.01em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span></span></span><span class=\"\" style=\"top: -4.81em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span><span class=\"\" style=\"top: -3.61em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span></span></span><span class=\"\" style=\"top: -2.41em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span><span class=\"\" style=\"top: -1.21em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span><span class=\"\" style=\"top: -0.01em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span><span class=\"\" style=\"top: 1.19em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 4.55em;\"><span class=\"\"></span></span></span></span></span><span class=\"arraycolsep\" style=\"width: 0.5em;\"></span><span class=\"arraycolsep\" style=\"width: 0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 5.05em;\"><span class=\"\" style=\"top: -7.21em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span><span class=\"\" style=\"top: -6.01em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span></span></span><span class=\"\" style=\"top: -4.81em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span></span></span><span class=\"\" style=\"top: -3.61em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span><span class=\"\" style=\"top: -2.41em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">7</span></span></span><span class=\"\" style=\"top: -1.21em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span></span></span><span class=\"\" style=\"top: -0.01em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span></span></span><span class=\"\" style=\"top: 1.19em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 4.55em;\"><span class=\"\"></span></span></span></span></span><span class=\"arraycolsep\" style=\"width: 0.5em;\"></span><span class=\"arraycolsep\" style=\"width: 0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 5.05em;\"><span class=\"\" style=\"top: -7.21em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span><span class=\"\" style=\"top: -6.01em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">9</span></span></span><span class=\"\" style=\"top: -4.81em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span><span class=\"\" style=\"top: -3.61em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">7</span></span></span><span class=\"\" style=\"top: -2.41em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span><span class=\"\" style=\"top: -1.21em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span></span></span><span class=\"\" style=\"top: -0.01em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span><span class=\"\" style=\"top: 1.19em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 4.55em;\"><span class=\"\"></span></span></span></span></span><span class=\"arraycolsep\" style=\"width: 0.5em;\"></span><span class=\"arraycolsep\" style=\"width: 0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 5.05em;\"><span class=\"\" style=\"top: -7.21em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span><span class=\"\" style=\"top: -6.01em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span><span class=\"\" style=\"top: -4.81em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span><span class=\"\" style=\"top: -3.61em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span></span></span><span class=\"\" style=\"top: -2.41em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span></span></span><span class=\"\" style=\"top: -1.21em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span><span class=\"\" style=\"top: -0.01em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span class=\"\" style=\"top: 1.19em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 4.55em;\"><span class=\"\"></span></span></span></span></span><span class=\"arraycolsep\" style=\"width: 0.5em;\"></span><span class=\"arraycolsep\" style=\"width: 0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 5.05em;\"><span class=\"\" style=\"top: -7.21em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span><span class=\"\" style=\"top: -6.01em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span><span class=\"\" style=\"top: -4.81em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span><span class=\"\" style=\"top: -3.61em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span></span></span><span class=\"\" style=\"top: -2.41em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span><span class=\"\" style=\"top: -1.21em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span class=\"\" style=\"top: -0.01em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span><span class=\"\" style=\"top: 1.19em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 4.55em;\"><span class=\"\"></span></span></span></span></span><span class=\"arraycolsep\" style=\"width: 0.5em;\"></span><span class=\"arraycolsep\" style=\"width: 0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 5.05em;\"><span class=\"\" style=\"top: -7.21em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span><span class=\"\" style=\"top: -6.01em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span><span class=\"\" style=\"top: -4.81em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span></span></span><span class=\"\" style=\"top: -3.61em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span></span></span><span class=\"\" style=\"top: -2.41em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span><span class=\"\" style=\"top: -1.21em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span><span class=\"\" style=\"top: -0.01em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span></span></span><span class=\"\" style=\"top: 1.19em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 4.55em;\"><span class=\"\"></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 5.05em;\"><span class=\"\" style=\"top: -1.366em;\"><span class=\"pstrut\" style=\"height: 5.016em;\"></span><span class=\"delimsizinginner delim-size4\"><span class=\"\">⎭</span></span></span><span class=\"\" style=\"top: -1.358em;\"><span class=\"pstrut\" style=\"height: 5.016em;\"></span><span class=\"\" style=\"height: 3.016em; width: 0.8889em;\">\n<svg height=\"3.016em\" preserveaspectratio=\"xMinYMin\" style=\"width:0.8889em\" viewbox=\"0 0 888.89 3016\" width=\"0.8889em\">\n<path d=\"M384 0 H504 V3016 H384z M384 0 H504 V3016 H384z\"></path>\n</svg></span></span><span class=\"\" style=\"top: -5.016em;\"><span class=\"pstrut\" style=\"height: 5.016em;\"></span><span class=\"delimsizinginner delim-size4\"><span class=\"\">⎬</span></span></span><span class=\"\" style=\"top: -6.158em;\"><span class=\"pstrut\" style=\"height: 5.016em;\"></span><span class=\"\" style=\"height: 3.016em; width: 0.8889em;\">\n<svg height=\"3.016em\" preserveaspectratio=\"xMinYMin\" style=\"width:0.8889em\" viewbox=\"0 0 888.89 3016\" width=\"0.8889em\">\n<path d=\"M384 0 H504 V3016 H384z M384 0 H504 V3016 H384z\"></path>\n</svg></span></span><span class=\"\" style=\"top: -9.166em;\"><span class=\"pstrut\" style=\"height: 5.016em;\"></span><span class=\"delimsizinginner delim-size4\"><span class=\"\">⎫</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 4.55em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span></span></span><br/> (2) 邻接表如下所示<br/> <img alt=\"image-20220905104048342\" src=\"..\\..\\static\\image\\b786266b0b615abe1739963b121309ba.png\"/></p> <p>(3) 最小生成树如下所示<br/> <img alt=\"image-20220905104203817\" src=\"..\\..\\static\\image\\2b26a5325f74635b5a1b13617c51ada2.png\"/></p> </li><li> <p>参考答案<br/> 证明：<br/> 假设<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          \n           n\n          \n          \n           0\n          \n         \n         \n          、\n         \n         \n          \n           n\n          \n          \n           1\n          \n         \n         \n          、\n         \n         \n          \n           n\n          \n          \n           2\n          \n         \n        \n        \n         n_0、n_1、n_2\n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.8333em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3011em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mord cjk_fallback\">、</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3011em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mord cjk_fallback\">、</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3011em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span>，分别是二叉树中度为0，1，2结点的个数。<br/> 首先由二叉树的性质可得<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          \n           n\n          \n          \n           0\n          \n         \n         \n          =\n         \n         \n          \n           n\n          \n          \n           2\n          \n         \n         \n          +\n         \n         \n          1\n         \n        \n        \n         n_0=n_2+1\n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.5806em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3011em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.7333em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3011em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></span>。<br/> 又因为二叉树为满二叉树，且有N个结点<br/> 则可得<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          \n           n\n          \n          \n           0\n          \n         \n         \n          +\n         \n         \n          \n           n\n          \n          \n           1\n          \n         \n         \n          +\n         \n         \n          \n           n\n          \n          \n           2\n          \n         \n         \n          =\n         \n         \n          N\n         \n        \n        \n         n_0+n_1+n_2=N\n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.7333em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3011em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.7333em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3011em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.5806em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3011em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.109em;\">N</span></span></span></span></span>，<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          \n           n\n          \n          \n           1\n          \n         \n         \n          =\n         \n         \n          0\n         \n        \n        \n         n_1=0\n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.5806em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3011em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></span>，即<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          \n           n\n          \n          \n           0\n          \n         \n         \n          =\n         \n         \n          N\n         \n         \n          −\n         \n         \n          \n           n\n          \n          \n           2\n          \n         \n        \n        \n         n_0=N-n_2\n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.5806em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3011em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.7667em; vertical-align: -0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.109em;\">N</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.5806em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3011em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span><br/> 则可得<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          2\n         \n         \n          \n           n\n          \n          \n           0\n          \n         \n         \n          =\n         \n         \n          N\n         \n         \n          +\n         \n         \n          1\n         \n        \n        \n         2n_0=N+1\n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.7944em; vertical-align: -0.15em;\"></span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3011em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.7667em; vertical-align: -0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.109em;\">N</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></span>，即<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          \n           n\n          \n          \n           0\n          \n         \n         \n          =\n         \n         \n          (\n         \n         \n          N\n         \n         \n          +\n         \n         \n          1\n         \n         \n          )\n         \n         \n          /\n         \n         \n          2\n         \n        \n        \n         n_0 =(N+1)/2\n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.5806em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3011em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right: 0.109em;\">N</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\">/2</span></span></span></span></span>。</p> </li></ol>\n<h3><a id=\"_70\"></a>二、算法题</h3>\n<ol><li> <p>参考答案</p> <pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">Intersection</span><span class=\"token punctuation\">(</span>LinkList <span class=\"token operator\">&amp;</span>La<span class=\"token punctuation\">,</span> LinkList <span class=\"token operator\">&amp;</span>Lb<span class=\"token punctuation\">,</span> LinkList <span class=\"token operator\">&amp;</span>Lc<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    pa<span class=\"token operator\">=</span>La<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    pb<span class=\"token operator\">=</span>Lb<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    Lc<span class=\"token operator\">=</span>pc<span class=\"token operator\">=</span>La<span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pa<span class=\"token operator\">&amp;&amp;</span>pb<span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pa<span class=\"token operator\">-&gt;</span>data<span class=\"token operator\">==</span>pb<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">)</span> \n        <span class=\"token punctuation\">{<!-- --></span>\n            pc<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">=</span>pa<span class=\"token punctuation\">;</span> pc<span class=\"token operator\">=</span>pa<span class=\"token punctuation\">;</span> pa<span class=\"token operator\">=</span>pa<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span> \n            u<span class=\"token operator\">=</span>pb<span class=\"token punctuation\">;</span> pb<span class=\"token operator\">=</span>pb<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span> delete u<span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pa<span class=\"token operator\">-&gt;</span>data<span class=\"token operator\">&lt;</span>pb<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            u<span class=\"token operator\">=</span>pa<span class=\"token punctuation\">;</span> pa<span class=\"token operator\">=</span>pa<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span> delete u<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> \n        <span class=\"token punctuation\">{<!-- --></span>\n            u<span class=\"token operator\">=</span>pb<span class=\"token punctuation\">;</span> pb<span class=\"token operator\">=</span>pb<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span> delete u<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pa<span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">{<!-- --></span>\n        u<span class=\"token operator\">=</span>pa<span class=\"token punctuation\">;</span> pa<span class=\"token operator\">=</span>pa<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span> delete u<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pb<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        u<span class=\"token operator\">=</span>pb<span class=\"token punctuation\">;</span> pb<span class=\"token operator\">=</span>pb<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span> delete u<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    pc<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> \n    delete Lb<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>参考答案</p> <pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">Inverse</span><span class=\"token punctuation\">(</span>LinkList <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    p<span class=\"token operator\">=</span>L<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    L<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        q<span class=\"token operator\">-</span>p<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span> \n        p<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">=</span>L<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        L<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">=</span>p<span class=\"token punctuation\">;</span> \n        p<span class=\"token operator\">=</span>q<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>参考答案</p> <p>(1) 算法实现</p> <pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">IsEqual</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>   <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">=</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//和同行其他元素比较</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//只要有一个相同,则不是互不相同</span>\n                <span class=\"token punctuation\">{<!-- --></span>           \n                    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//和第i+1行及以后元素比较</span>\n                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">-=</span>a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>   \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yes\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>(2) 算法分析</p> <p>二维数组中的每一个元素同其他元素都比较一次，数组总计包括m*n个元素，第1个元素同其她m*n-1个元素比较，第2个元素同其它m*n-2个元素比较…第m*n-1个元素同最后一个元素(m*n)比较一次。因此，在元素互不相等的情况下，总的比较次数为:(m*n-1)+(m*n-2)+…+2+1=(m*n)(m*n-1)/2。在存在相同元素的情况下，可能第一次比较时相同，也可能最后一次比较时相同，假设在每个位置上均可能相同，总计包括(m*n-1)个位置，这时的平均比较次数约为(m*n)(m*n-1)/4。因此,算法的时间复杂度是<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          O\n         \n         \n          (\n         \n         \n          \n           n\n          \n          \n           4\n          \n         \n         \n          )\n         \n        \n        \n         O(n^4)\n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1.0641em; vertical-align: -0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0278em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.8141em;\"><span class=\"\" style=\"top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span>。</p> </li><li> <p>参考答案</p> <pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">Level</span><span class=\"token punctuation\">(</span>BiTree T<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    num<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">InitQueue</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token function\">EnQueue</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">,</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">QueueEmpty</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">DeQueue</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//假设值为整数 </span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-&gt;</span>lchilds<span class=\"token operator\">&amp;</span><span class=\"token operator\">!</span>p<span class=\"token operator\">-&gt;</span>rchild<span class=\"token punctuation\">)</span><span class=\"token function\">I1</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-&gt;</span>lchild<span class=\"token operator\">&amp;&amp;</span>p<span class=\"token operator\">-&gt;</span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-&gt;</span>lchild<span class=\"token punctuation\">)</span> <span class=\"token function\">EnQueue</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-&gt;</span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-&gt;</span>rchild<span class=\"token punctuation\">)</span> <span class=\"token function\">EnQueue</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-&gt;</span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>参考答案</p> <pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">Process</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    low<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    high<span class=\"token operator\">=</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>low<span class=\"token operator\">&lt;</span>high<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>low<span class=\"token operator\">&lt;</span>high<span class=\"token operator\">&amp;&amp;</span>a<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//找到从左向右的非负值记录</span>\n            low<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>low<span class=\"token operator\">&lt;</span>high<span class=\"token operator\">&amp;&amp;</span>a <span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//找到从右向左的负值记录</span>\n            high<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>low<span class=\"token operator\">&lt;</span>high<span class=\"token punctuation\">)</span><span class=\"token comment\">//如果需要交换，即low&lt;high</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            temp<span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            a<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            a<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span><span class=\"token comment\">//交换记录</span>\n            low<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//继续向后找</span>\n            high<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre> </li><li> <p>参考答案</p> <p>(1) 算法思想</p>\n<ul><li> <p>求出各顶点的人度存人数组indegree[i]中，并将人度为0的顶点人栈。</p> </li><li> <p>只要栈不空，则重复以下操作:</p>\n<ul><li>将栈顶顶点vi出栈并保存在拓扑序列数组topo中;</li><li>对顶点vi的每个邻接点vk的入度减1，如果v的入度变为0，则将vk入栈。</li></ul> </li><li> <p>如果输出顶点个数少于AOV网的顶点个数，则网中存在有向环，无法进行拓扑排序，否则拓扑排序成功。</p> </li></ul> <p>(2) 算法描述</p> <pre><code class=\"prism language-c\"><span class=\"token comment\">//有向图G采用邻接表存储结构</span>\n<span class=\"token comment\">//若G无回路，则生成c的一个拓扑序列topo[]并返回oK，否则ERROR</span>\nStatus <span class=\"token function\">TopologicalSort</span> <span class=\"token punctuation\">(</span>ALGraph G<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> topo <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">FindInDegree</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span>indegree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//求出各顶点的入度存入数组indegree中</span>\n    <span class=\"token function\">InitStack</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//栈S初始化为空</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>G<span class=\"token punctuation\">.</span>vexnum<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>indegree<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//入度为0者进栈</span>\n    m<span class=\"token operator\">=</span>O<span class=\"token punctuation\">;</span><span class=\"token comment\">//对输出顶点计数，初始为0</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">StackEmpty</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//栈s非空</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">Pop</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将栈顶顶点vi出栈</span>\n        topo <span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span><span class=\"token comment\">//将vi保存在拓扑序列数组topo中</span>\n        <span class=\"token operator\">++</span>m<span class=\"token punctuation\">;</span><span class=\"token comment\">//对输出顶点计数</span>\n        p<span class=\"token operator\">=</span>G<span class=\"token punctuation\">.</span>vertices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstarc<span class=\"token punctuation\">;</span><span class=\"token comment\">//p指向vi的第一个邻接点</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            k<span class=\"token operator\">=</span>p<span class=\"token operator\">-&gt;</span>adjvex<span class=\"token punctuation\">;</span><span class=\"token comment\">//vk为vi的邻接点</span>\n            <span class=\"token operator\">--</span>indegree<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span><span class=\"token comment\">//v;的每个邻接点的入度减1</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>indegree<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>O<span class=\"token punctuation\">)</span> <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//若入度减为0，则入栈</span>\n            p<span class=\"token operator\">=</span>p<span class=\"token operator\">-&gt;</span>nextarc<span class=\"token punctuation\">;</span><span class=\"token comment\">//p指向顶点vi下一个邻接结点</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">&lt;</span>G<span class=\"token punctuation\">.</span>vexnum<span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span><span class=\"token comment\">//该有向图有回路</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <h3><a id=\"_250\"></a>三、补充说明</h3>\n<blockquote>\n<p>作者：@江上_酒<br/> 23扬大信工考研交流群：714584589<br/> <a href=\"https://blog.csdn.net/WHISTLE_ZXL/article/details/123680980\">扬州大学信息工程学院2022届考研情况分析</a><br/> <a href=\"https://blog.csdn.net/WHISTLE_ZXL/article/details/126211573\">扬州大学858程序设计与数据结构专业课（资料篇）</a><br/> <a href=\"https://blog.csdn.net/WHISTLE_ZXL/article/details/121750867\">扬州大学858程序设计与数据结构专业课（编程题篇）</a></p>\n</blockquote> </li></ol>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-05 11:07:27", "summary": "黑体扬州大学黑体年硕士研究生招生考试初试试题卷参考答案黑体科目代码：科目名称：程序设计与数据结构满分：分注意：答案为个人自制，非官方答案。一、应用题参考答案例如，有一张学生基本信息表，包括学生的学号、"}