{"blogid": "126542210", "writerAge": "码龄10年", "writerBlogNum": "219", "writerCollect": "18336", "writerComment": "2039", "writerFan": "61111", "writerGrade": "8级", "writerIntegral": "27671", "writerName": "PKing666666", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126542210.jpg", "writerRankTotal": "252", "writerRankWeekly": "169", "writerThumb": "5199", "writerVisitNum": "4180733", "blog_read_count": "7309", "blog_time": "已于 2022-08-29 13:59:03 修改", "blog_title": "图像处理：随机添加椒盐噪声和高斯噪声Python", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1 id=\"%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%9A%E9%9A%8F%E6%9C%BA%E6%B7%BB%E5%8A%A0%E6%A4%92%E7%9B%90%E5%99%AA%E5%A3%B0%E5%92%8C%E9%AB%98%E6%96%AF%E5%99%AA%E5%A3%B0Python\">图像处理：随机添加椒盐噪声和高斯噪声Python</h1>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%9A%E9%9A%8F%E6%9C%BA%E6%B7%BB%E5%8A%A0%E6%A4%92%E7%9B%90%E5%99%AA%E5%A3%B0%E5%92%8C%E9%AB%98%E6%96%AF%E5%99%AA%E5%A3%B0Python-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%9A%E9%9A%8F%E6%9C%BA%E6%B7%BB%E5%8A%A0%E6%A4%92%E7%9B%90%E5%99%AA%E5%A3%B0%E5%92%8C%E9%AB%98%E6%96%AF%E5%99%AA%E5%A3%B0Python\">图像处理：随机添加椒盐噪声和高斯噪声Python</a></p>\n<p id=\"1.%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9B%BE%E5%83%8F%E5%99%AA%E5%A3%B0-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9B%BE%E5%83%8F%E5%99%AA%E5%A3%B0\">1.常见的图像噪声</a></p>\n<p id=\"%EF%BC%881%EF%BC%89%E9%AB%98%E6%96%AF%E5%99%AA%E5%A3%B0-toc\" style=\"margin-left:80px;\"><a href=\"#%EF%BC%881%EF%BC%89%E9%AB%98%E6%96%AF%E5%99%AA%E5%A3%B0\">（1）高斯噪声</a></p>\n<p id=\"%EF%BC%882%EF%BC%89%20%E6%A4%92%E7%9B%90%E5%99%AA%E5%A3%B0-toc\" style=\"margin-left:80px;\"><a href=\"#%EF%BC%882%EF%BC%89%20%E6%A4%92%E7%9B%90%E5%99%AA%E5%A3%B0\">（2） 椒盐噪声</a></p>\n<p id=\"2.%E7%94%9F%E6%88%90%E5%9B%BE%E5%83%8F%E5%99%AA%E5%A3%B0-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E7%94%9F%E6%88%90%E5%9B%BE%E5%83%8F%E5%99%AA%E5%A3%B0\">2.生成图像噪声</a></p>\n<p id=\"%EF%BC%881%EF%BC%89%E9%AB%98%E6%96%AF%E5%99%AA%E5%A3%B0-toc\" style=\"margin-left:80px;\"><a href=\"#%EF%BC%881%EF%BC%89%E9%AB%98%E6%96%AF%E5%99%AA%E5%A3%B0\">（1）高斯噪声</a></p>\n<p id=\"%EF%BC%882%EF%BC%89%20%E6%A4%92%E7%9B%90%E5%99%AA%E5%A3%B0%EF%BC%88%E9%80%9F%E5%BA%A6%E6%85%A2%EF%BC%89-toc\" style=\"margin-left:80px;\"><a href=\"#%EF%BC%882%EF%BC%89%20%E6%A4%92%E7%9B%90%E5%99%AA%E5%A3%B0%EF%BC%88%E9%80%9F%E5%BA%A6%E6%85%A2%EF%BC%89\">（2） 椒盐噪声（速度慢）</a></p>\n<p id=\"%EF%BC%883%EF%BC%89%20%E6%A4%92%E7%9B%90%E5%99%AA%E5%A3%B0%EF%BC%88%E5%BF%AB%E9%80%9F%E7%89%88%EF%BC%89-toc\" style=\"margin-left:80px;\"><a href=\"#%EF%BC%883%EF%BC%89%20%E6%A4%92%E7%9B%90%E5%99%AA%E5%A3%B0%EF%BC%88%E5%BF%AB%E9%80%9F%E7%89%88%EF%BC%89\">（3） 椒盐噪声（快速版）</a></p>\n<p id=\"3.%20Demo%E6%B5%8B%E8%AF%95-toc\" style=\"margin-left:40px;\"><a href=\"#3.%20Demo%E6%B5%8B%E8%AF%95\">3. Demo测试</a></p>\n<hr/>\n<p>        图像噪声是指存在于图像数据中的不必要的或多余的干扰信息。在噪声的概念中，通常采用信噪比（Signal-Noise Rate, SNR）衡量图像噪声。通俗的讲就是信号占多少，噪声占多少，SNR越小，噪声占比越大。</p>\n<p>【尊重原则，转载请注明出处】<a href=\"https://panjinquan.blog.csdn.net/article/details/126542210\" title=\"https://panjinquan.blog.csdn.net/article/details/126542210\">https://panjinquan.blog.csdn.net/article/details/126542210</a></p>\n<hr/>\n<h2 id=\"1.%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9B%BE%E5%83%8F%E5%99%AA%E5%A3%B0\">1.常见的图像噪声</h2>\n<h3 id=\"%EF%BC%881%EF%BC%89%E9%AB%98%E6%96%AF%E5%99%AA%E5%A3%B0\">（1）高斯噪声</h3>\n<p>        高斯噪声Gaussian noise，是指它的概率密度函数服从高斯分布（即正态分布）的一类噪声，通常是因为不良照明和高温引起的传感器噪声。</p>\n<p class=\"img-center\"><img alt=\"\" height=\"255\" src=\"..\\..\\static\\image\\afa278d6c8d3423184e5af17915df948.png\" width=\"251\"/></p>\n<h3 id=\"%EF%BC%882%EF%BC%89%20%E6%A4%92%E7%9B%90%E5%99%AA%E5%A3%B0\"><strong>（2） 椒盐噪声</strong></h3>\n<p>        椒盐噪声salt-and-pepper noise，又称为脉冲噪声，它是一种随机出现的白点（盐噪声）或者黑点（椒噪声），通常是由图像传感器，传输信道，解压处理等产生的黑白相间的亮暗点噪声（椒-黑，盐-白）。常用的去除这种噪声的有效手段是使用<a href=\"https://baike.baidu.com/item/%E4%B8%AD%E5%80%BC%E6%BB%A4%E6%B3%A2%E5%99%A8\" title=\"中值滤波器\">中值滤波器</a>。</p>\n<p class=\"img-center\"><img alt=\"\" height=\"253\" src=\"..\\..\\static\\image\\45562e4360dd495db1b9fc187aaea0e5.png\" width=\"254\"/></p>\n<p><a name=\"ref_1\"></a></p>\n<hr/>\n<h2 id=\"2.%E7%94%9F%E6%88%90%E5%9B%BE%E5%83%8F%E5%99%AA%E5%A3%B0\">2.生成图像噪声</h2>\n<p>在原始图像基础上加上噪声分量，即可生成图像噪声</p>\n<h3>（1）高斯噪声</h3>\n<pre><code class=\"language-python\">def gaussian_noise(image, mean=0.1, sigma=0.1):\n    \"\"\"\n    添加高斯噪声\n    :param image:原图\n    :param mean:均值\n    :param sigma:标准差 值越大，噪声越多\n    :return:噪声处理后的图片\n    \"\"\"\n    image = np.asarray(image / 255, dtype=np.float32)  # 图片灰度标准化\n    noise = np.random.normal(mean, sigma, image.shape).astype(dtype=np.float32)  # 产生高斯噪声\n    output = image + noise  # 将噪声和图片叠加\n    output = np.clip(output, 0, 1)\n    output = np.uint8(output * 255)\n    return output\n</code></pre>\n<h3 id=\"%EF%BC%882%EF%BC%89%20%E6%A4%92%E7%9B%90%E5%99%AA%E5%A3%B0%EF%BC%88%E9%80%9F%E5%BA%A6%E6%85%A2%EF%BC%89\"><strong>（2） 椒盐噪声（速度慢）</strong></h3>\n<p>常规的方法，需要遍历每个像素，添加椒盐噪声，该方法十分缓慢。Python语言十分不建议进行图像像素遍历操作，毕竟性能太差，速度太慢了（除非写成C/C++版本）。我们可以借助numpy的矩阵处理，实现快速的添加<strong>椒盐噪声。</strong></p>\n<pre><code class=\"language-python\">def salt_pepper_noise(image: np.ndarray, prob=0.01):\n    \"\"\"\n    添加椒盐噪声，该方法需要遍历每个像素，十分缓慢\n    :param image:\n    :param prob: 噪声比例\n    :return:\n    \"\"\"\n    for i in range(image.shape[0]):\n        for j in range(image.shape[1]):\n            if random.random() &lt; prob:\n                image[i][j] = 0 if random.random() &lt; 0.5 else 255\n            else:\n                image[i][j] = image[i][j]\n    return image</code></pre>\n<h3 id=\"%EF%BC%883%EF%BC%89%20%E6%A4%92%E7%9B%90%E5%99%AA%E5%A3%B0%EF%BC%88%E5%BF%AB%E9%80%9F%E7%89%88%EF%BC%89\"><strong>（3） 椒盐噪声（快速版）</strong></h3>\n<p>我们可以借助numpy的矩阵处理，实现快速的添加<strong>椒盐噪声。</strong>基本思路：利用np.random.uniform生成0~1的均匀噪声（ uniform distribution noise），然后将noise &gt; prob的像素设置0或者255，这样通过矩阵的处理，可以快速添加椒盐噪声。</p>\n<pre><code class=\"language-python\">def fast_salt_pepper_noise(image: np.ndarray, prob=0.02):\n    \"\"\"\n    随机生成一个0~1的mask，作为椒盐噪声\n    :param image:图像\n    :param prob: 椒盐噪声噪声比例\n    :return:\n    \"\"\"\n    image = add_uniform_noise(image, prob * 0.51, vaule=255)\n    image = add_uniform_noise(image, prob * 0.5, vaule=0)\n    return image\n\n\ndef add_uniform_noise(image: np.ndarray, prob=0.05, vaule=255):\n    \"\"\"\n    随机生成一个0~1的mask，作为椒盐噪声\n    :param image:图像\n    :param prob: 噪声比例\n    :param vaule: 噪声值\n    :return:\n    \"\"\"\n    h, w = image.shape[:2]\n    noise = np.random.uniform(low=0.0, high=1.0, size=(h, w)).astype(dtype=np.float32)  # 产生高斯噪声\n    mask = np.zeros(shape=(h, w), dtype=np.uint8) + vaule\n    index = noise &gt; prob\n    mask = mask * (~index)\n    output = image * index[:, :, np.newaxis] + mask[:, :, np.newaxis]\n    output = np.clip(output, 0, 255)\n    output = np.uint8(output)\n    return output\n</code></pre>\n<h2 id=\"3.%20Demo%E6%B5%8B%E8%AF%95\">3. Demo性能测试</h2>\n<p>需要用到pybaseutils工具，pip安装即可</p>\n<pre><code class=\"language-python\"># -*-coding: utf-8 -*-\n\"\"\"\n    @Author : panjq\n    @E-mail : pan_jinquan@163.com\n    @Date   : 2022-07-27 15:23:24\n    @Brief  :\n\"\"\"\nimport cv2\nimport random\nimport numpy as np\nfrom pybaseutils import time_utils\n\n\n@time_utils.performance(\"gaussian_noise\")\ndef gaussian_noise(image, mean=0.1, sigma=0.1):\n    \"\"\"\n    添加高斯噪声\n    :param image:原图\n    :param mean:均值\n    :param sigma:标准差 值越大，噪声越多\n    :return:噪声处理后的图片\n    \"\"\"\n    image = np.asarray(image / 255, dtype=np.float32)  # 图片灰度标准化\n    noise = np.random.normal(mean, sigma, image.shape).astype(dtype=np.float32)  # 产生高斯噪声\n    output = image + noise  # 将噪声和图片叠加\n    output = np.clip(output, 0, 1)\n    output = np.uint8(output * 255)\n    return output\n\n\n@time_utils.performance(\"salt_pepper_noise\")\ndef salt_pepper_noise(image: np.ndarray, prob=0.01):\n    \"\"\"\n    添加椒盐噪声，该方法需要遍历每个像素，十分缓慢\n    :param image:\n    :param prob: 噪声比例\n    :return:\n    \"\"\"\n    for i in range(image.shape[0]):\n        for j in range(image.shape[1]):\n            if random.random() &lt; prob:\n                image[i][j] = 0 if random.random() &lt; 0.5 else 255\n            else:\n                image[i][j] = image[i][j]\n    return image\n\n\n@time_utils.performance(\"fast_salt_pepper_noise\")\ndef fast_salt_pepper_noise(image: np.ndarray, prob=0.02):\n    \"\"\"\n    随机生成一个0~1的mask，作为椒盐噪声\n    :param image:图像\n    :param prob: 椒盐噪声噪声比例\n    :return:\n    \"\"\"\n    image = add_uniform_noise(image, prob * 0.51, vaule=255)\n    image = add_uniform_noise(image, prob * 0.5, vaule=0)\n    return image\n\n\ndef add_uniform_noise(image: np.ndarray, prob=0.05, vaule=255):\n    \"\"\"\n    随机生成一个0~1的mask，作为椒盐噪声\n    :param image:图像\n    :param prob: 噪声比例\n    :param vaule: 噪声值\n    :return:\n    \"\"\"\n    h, w = image.shape[:2]\n    noise = np.random.uniform(low=0.0, high=1.0, size=(h, w)).astype(dtype=np.float32)  # 产生高斯噪声\n    mask = np.zeros(shape=(h, w), dtype=np.uint8) + vaule\n    index = noise &gt; prob\n    mask = mask * (~index)\n    output = image * index[:, :, np.newaxis] + mask[:, :, np.newaxis]\n    output = np.clip(output, 0, 255)\n    output = np.uint8(output)\n    return output\n\n\ndef cv_show_image(title, image, use_rgb=True, delay=0):\n    \"\"\"\n    调用OpenCV显示RGB图片\n    :param title: 图像标题\n    :param image: 输入是否是RGB图像\n    :param use_rgb: True:输入image是RGB的图像, False:返输入image是BGR格式的图像\n    :return:\n    \"\"\"\n    img = image.copy()\n    if img.shape[-1] == 3 and use_rgb:\n        img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)  # 将BGR转为RGB\n    # cv2.namedWindow(title, flags=cv2.WINDOW_AUTOSIZE)\n    cv2.namedWindow(title, flags=cv2.WINDOW_NORMAL)\n    cv2.imshow(title, img)\n    cv2.waitKey(delay)\n    return img\n\n\nif __name__ == \"__main__\":\n    test_file = \"test.png\"\n    image = cv2.imread(test_file)\n    prob = 0.02\n    for i in range(10):\n        out1 = gaussian_noise(image.copy())\n        out2 = salt_pepper_noise(image.copy(), prob=prob)\n        out3 = fast_salt_pepper_noise(image.copy(), prob=prob)\n        print(\"----\" * 10)\n    cv_show_image(\"image\", image, use_rgb=False, delay=1)\n    cv_show_image(\"gaussian_noise\", out1, use_rgb=False, delay=1)\n    cv_show_image(\"salt_pepper_noise\", out2, use_rgb=False, delay=1)\n    cv_show_image(\"fast_salt_pepper_noise\", out3, use_rgb=False, delay=0)\n</code></pre>\n<p>循环机10次，salt_pepper_noise平均耗时125.49021ms，而fast_salt_pepper_noise平均耗时6.12011ms ，性能提高60倍左右，其生成的效果是基本一致的</p>\n<blockquote>\n<p>call gaussian_noise elapsed: avg:19.42925ms     total:194.29255ms     count:10<br/> call salt_pepper_noise elapsed: avg:125.49021ms     total:1254.90212ms     count:10<br/> call fast_salt_pepper_noise elapsed: avg:6.12011ms     total:61.20110ms     count:10 </p>\n</blockquote>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:700px;\"><tbody><tr><td style=\"text-align:center;\">原图</td><td style=\"text-align:center;\">高斯噪声</td></tr><tr><td> <p class=\"img-center\"><img alt=\"\" height=\"255\" src=\"..\\..\\static\\image\\c6546e2427bd49c788d8a4adf0fae87f.png\" width=\"255\"/></p> </td><td style=\"text-align:center;\"><img alt=\"\" height=\"255\" src=\"..\\..\\static\\image\\afa278d6c8d3423184e5af17915df948.png\" width=\"251\"/></td></tr><tr><td> <p style=\"text-align:center;\">salt_pepper_noise</p> </td><td style=\"text-align:center;\"> <p style=\"text-align:center;\">fast_salt_pepper_noise</p> </td></tr><tr><td style=\"text-align:center;\"><img alt=\"\" height=\"253\" src=\"..\\..\\static\\image\\45562e4360dd495db1b9fc187aaea0e5.png\" width=\"254\"/></td><td style=\"text-align:center;\"><img alt=\"\" height=\"254\" src=\"..\\..\\static\\image\\00b6152bd1f4491aae165bda66b2937b.png\" width=\"255\"/></td></tr></tbody></table>\n<p></p>\n<blockquote></blockquote>\n<p></p>\n</div>\n</div>", "first_tag": "Python", "cpp": 1, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-29 13:59:03", "summary": "图像处理：随机添加椒盐噪声和高斯噪声目录图像处理：随机添加椒盐噪声和高斯噪声常见的图像噪声高斯噪声椒盐噪声生成图像噪声高斯噪声椒盐噪声速度慢椒盐噪声快速版测试图像噪声是指存在于图像数据中的不必要的或多"}