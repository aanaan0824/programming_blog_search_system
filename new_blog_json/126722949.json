{"blogid": "126722949", "writerAge": "码龄1年", "writerBlogNum": "36", "writerCollect": "704", "writerComment": "1172", "writerFan": "579", "writerGrade": "5级", "writerIntegral": "3160", "writerName": "东非不开森", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126722949.jpg", "writerRankTotal": "6317", "writerRankWeekly": "135", "writerThumb": "875", "writerVisitNum": "14971", "blog_read_count": "229", "blog_time": "已于 2022-09-06 14:55:55 修改", "blog_title": "lowbit()运算及原码、反码、补码", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>做的一个题中涉及lowbit和原码、反码、补码的知识，所以整理一下此部分的知识💜💜<br/> 如有错误，还请指正O(∩_∩)O哈哈~💜💜</p>\n</blockquote>\n<p><strong>lowbit：lowbit(x)是x的二进制表达式中最低位的1所对应的值</strong></p>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><ul><li><ul><li><ul><li><a href=\"#1__7\">1. 原码、补码、反码</a></li><li><a href=\"#2___45\">2. ^运算（异或运算）与 &amp;运算（与运算）</a></li><li><a href=\"#3_lowbit_60\">3. lowbit</a></li><li><a href=\"#4_1_110\">4. 题目二进制中1的个数</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h4><a id=\"1__7\"></a>1. 原码、补码、反码</h4>\n<p>二进制包括： 原码、补码、反码<br/> 对于一个二进制数，首位0表示该数是正数，首位是1表示该数是负数。</p>\n<p><strong>而正数和负数的是不一样的！</strong><br/> 1、<br/> 对于一个正数来讲：<br/>  <br/> 如1：</p>\n<table><thead><tr><th>二进制原码</th><th>二进制反码</th><th>二进制补码</th></tr></thead><tbody><tr><td>00000001</td><td>00000001</td><td>00000001</td></tr></tbody></table>\n<p><strong>那么我们可以发现什么呢？</strong><br/> <s>我们发现它的二进制原码、反码、补码都是一样的哈哈</s> ，</p>\n<p><strong>总结</strong>：对一个正数来讲，它的二进制原码、反码补码是完全相同的<br/>  <br/> 2、<br/> <strong>负数的原码就是正数的原码全部取反，然后加1</strong><br/> 对于一个负数来讲：<br/>  <br/> 如-1：</p>\n<table><thead><tr><th>二进制原码</th><th>二进制反码</th><th>二进制补码</th></tr></thead><tbody><tr><td>10000001</td><td>11111110</td><td>11111111</td></tr><tr><td> </td><td></td><td></td></tr></tbody></table>\n<p><strong>我们又可以发现什么呢？是不是和正数不一样哈哈</strong><br/> <strong>总结</strong>：<br/> 对一个负数来讲，</p>\n<ul><li>它的反码相对于它的原码来看，符号位不变，其它位取反</li><li>它的补码相对于它的反码而言+1</li></ul>\n<p> <br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\266125156dc443ea967e9d0c8a7f26a5.jpeg\"/><br/> （这个是我自己手写的，字丑莫嫌弃哈哈）</p>\n<h4><a id=\"2___45\"></a>2. ^运算（异或运算）与 &amp;运算（与运算）</h4>\n<p>简单介绍一下两种运算：<br/>  </p>\n<ul><li>^运算（异或运算）</li><li>&amp;运算（与运算）<br/>  </li></ul>\n<ol><li>^运算（异或运算）<br/> 运算规则：<br/> 0^0=0； 0^1=1； 1^0=1； 1^1=0；</li></ol>\n<p> </p>\n<ol start=\"2\"><li>&amp;运算（与运算）<br/> 运算规则：<br/> 0&amp;0=0；0&amp;1=0；1&amp;0=0；1&amp;1=1</li></ol>\n<h4><a id=\"3_lowbit_60\"></a>3. lowbit</h4>\n<p><strong>想必看完上面这里就很好理解了吧嘿嘿</strong></p>\n<p>  lowbit(x)是将 x 转化成二进制数之后，只保留最低位（从右往左数，第一位）的1及其后面的0，截断前面的内容(不要)，然后再转成10进制数。</p>\n<p>这个即</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> lowbit（<span class=\"token keyword\">int</span> n）\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> n<span class=\"token operator\">&amp;</span><span class=\"token operator\">-</span>n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>n的原码 和-n的补码异或<br/> 如：</p>\n<p>12（00001100），lowbit（12）=4（100）<br/>  </p>\n<table><thead><tr><th>原数</th><th>原码</th><th>反码</th><th>补码</th></tr></thead><tbody><tr><td>12</td><td>0 0 0 0 1 1 0 0</td><td>0 1 1 1 0 0 1 1</td><td>0 1 1 1 0 1 0 0</td></tr><tr><td>-12</td><td>1 0 0 0 1 1 0 0</td><td>1 1 1 1 0 0 1 1</td><td>1 1 1 1 0 1 0 0</td></tr></tbody></table>\n<p> </p>\n<pre><code class=\"prism language-javascript\">  <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span>\n<span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span>\n————————————————————————          \n  <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span>\n<span class=\"token comment\">// 即原码与反码的异或</span>\n</code></pre>\n<p> <br/> 如：<br/> x=1，lowbit(1) = 1；<br/>  </p>\n<table><thead><tr><th>原数</th><th>原码</th><th>反码</th><th>补码</th></tr></thead><tbody><tr><td>1</td><td>0 0 0 0 0 0 0 1</td><td>0 0 0 0 0 0 0 1</td><td>0 0 0 0 0 0 0 1</td></tr><tr><td>-1</td><td>1 0 0 0 0 0 0 1</td><td>1 1 1 1 1 1 1 0</td><td>1 1 1 1 1 1 1 1</td></tr></tbody></table>\n<p> </p>\n<pre><code class=\"prism language-javascript\">    <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> \n<span class=\"token operator\">&amp;</span>\t<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span>\n————————————————————————\n<span class=\"token operator\">=</span>\t<span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>\n</code></pre>\n<p> </p>\n<h4><a id=\"4_1_110\"></a>4. 题目二进制中1的个数</h4>\n<p>我做的那个题：<br/>  <br/> 题目描述<br/> 给定一个长度为n的数列，请你求出数列中每个数的二进制表示中1的个数。</p>\n<p>输入格式<br/> 第一行包含整数n。</p>\n<p>第二行包含n个整数，表示整个数列。</p>\n<p>输出格式<br/> 共一行，包含n个整数，其中的第 i 个数表示数列中的第 i 个数的二进制表示中1的个数。</p>\n<p>数据范围<br/> 1≤n≤100000,<br/> 0≤数列中元素的值≤109</p>\n<p>样例<br/> 输入样例：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token number\">5</span>\n<span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span>\n</code></pre>\n<p>输出样例：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span>\n</code></pre>\n<p> <br/> <strong>lowbit</strong><br/>  <br/> 使用lowbit操作，每次lowbit操作截取一个数字最后一个1后面的所有位，每次减去lowbit得到的数字，直到数字减到0，就得到了最终1的个数<br/>  <br/>  </p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> x<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            x <span class=\"token operator\">-=</span> <span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>result<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-09-06 14:55:55", "summary": "做的一个题中涉及和原码、反码、补码的知识，所以整理一下此部分的知识如有错误，还请指正哈哈：是的二进制表达式中最低位的所对应的值目录原码、补码、反码运算异或运算与运算与运算题目二进制中的个数原码、补码、"}