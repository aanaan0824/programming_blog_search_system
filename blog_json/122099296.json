{"blogid": "122099296", "writerAge": "码龄4年", "writerBlogNum": "243", "writerCollect": "1248", "writerComment": "143", "writerFan": "213", "writerGrade": "5级", "writerIntegral": "3216", "writerName": "码肥人壮", "writerProfileAdress": "writer_image\\profile_122099296.jpg", "writerRankTotal": "7585", "writerRankWeekly": "27179", "writerThumb": "278", "writerVisitNum": "223600", "blog_read_count": "6176", "blog_time": "于 2021-12-23 11:42:46 发布", "blog_title": "C++中的Lambda函数", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>Lambda函数也叫匿名函数，是自定义函数的一种,专指用关键字” lambda”定义的无名短函数，所以也有Lambda表达式这种说法。这种函数得名于省略了用def声明函数的标准步骤，是C++ 11中新增的特性。</p>\n<h2><a id=\"__1\"></a>一 函数语法</h2>\n<p>我们平时调用函数的时候，都是需要被调用函数的函数名，但是匿名函数就不需要函数名，而且直接写在需要调用的地方，对于以前没用过的小伙伴来说，第一眼看见了这语法可能很迷惑。</p>\n<p><strong>C++11的基本语法格式：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token punctuation\">[</span>capture<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> return_type <span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>（1） <strong>[capture] ：</strong>[]内为外部变量的传递方式，值、引用等，如下</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>        <span class=\"token comment\">//表示的是在lambda定义之前的域，对外部参数的调用；</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span>       <span class=\"token comment\">//表示外部参数直接传值</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span>       <span class=\"token comment\">//表示外部参数传引用，可修改值。当默认捕获符是 &amp; 时，后继的简单捕获符必须不以 &amp; 开始。而当默认捕获符是 = 时，后继的简单捕获符必须以 &amp; 开始。</span>\n<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">]</span>   <span class=\"token comment\">//x is captured by value, y is captured by reference</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">]</span>    <span class=\"token comment\">//x is explicitly captured by value. Other variables will be captured by reference</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>z<span class=\"token punctuation\">]</span>   <span class=\"token comment\">//z is explicitly captured by reference. Other variables will be captured by value</span>\n</code></pre>\n<p>（2）<strong>(parameters) ：</strong>（）内为形参，和普通函数的形参一样。<br/> （3）<strong>-&gt; return_type：</strong>-&gt;后面为lambda函数的返回类型，如 <code>-&gt; int</code>、<code>-&gt; string</code>等。一般情况下，编译器推出lambda函数的返回值，所以这部分可以省略不写。<br/> （4）<strong>{ /* … */ }：</strong>{}内为函数主体，和普通函数一样。</p>\n<h2><a id=\"__21\"></a>二 函数应用</h2>\n<h3><a id=\"1_22\"></a><strong>1、在普通函数中使用</strong></h3>\n<p>首先是<strong>定义，执行下面这句，不会运行函数 ！！！</strong></p>\n<pre><code class=\"prism language-cpp\">    std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span> addFunction<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">{<!-- --></span>  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>上面代码，你知道lambda函数返回类型为int类型，但是函数左边不能直接赋值给int变量（编译器会报错），因为此处为lambda函数的定义，所以左边为函数指针类型变量，一般懒得写函数指针类型，就直接赋值给auto类型变量，如下。</p>\n<pre><code class=\"prism language-cpp\">    <span class=\"token keyword\">auto</span> addFunction <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">{<!-- --></span>  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>下面才是函数的使用、运行！！！</strong><br/> 如何运行lambda函数并获取函数返回值？执行函数需要看下面代码：</p>\n<pre><code class=\"prism language-cpp\">    <span class=\"token keyword\">auto</span> addFunction<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">{<!-- --></span>  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> result  <span class=\"token operator\">=</span> <span class=\"token function\">addFunction</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>又或者如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">auto</span> addFunction<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">{<!-- --></span>  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> addFunction<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token function\">func_ptr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"2qt_45\"></a><strong>2、在qt信号槽绑定中使用</strong></h3>\n<p>我觉得labmda函数非常适合在信号槽中使用。<br/> （1）返回的函数指针可以直接用在connect函数中，刚好契合。<br/> （2）该槽函数可能比较简单，只有这个地方使用，可以省去槽函数声明，使代码看上去更加简便，且业务代码更加集中。<br/> <strong>基本使用</strong></p>\n<pre><code class=\"prism language-cpp\">    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>SYSClass<span class=\"token operator\">::</span>sig_1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>绑定信号槽的时候定义lambda函数，当收到信号的时候才执行槽函数，即lambda函数。<br/> <strong>使用示范</strong><br/> 在mTime时间后执行动画，动画执行后delete对象，非常适合弹窗关闭时，窗口关闭的动画操作。（<code>widgetPtr</code>为弹窗的指针）</p>\n<pre><code class=\"prism language-cpp\">    <span class=\"token class-name\">QTimer</span><span class=\"token operator\">::</span><span class=\"token function\">singleShot</span><span class=\"token punctuation\">(</span>mTime<span class=\"token punctuation\">,</span>widgetPtr<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        QPropertyAnimation <span class=\"token operator\">*</span>pAnimation <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QPropertyAnimation</span><span class=\"token punctuation\">(</span>widgetPtr<span class=\"token punctuation\">,</span><span class=\"token string\">\"windowOpacity\"</span><span class=\"token punctuation\">,</span>widgetPtr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pAnimation<span class=\"token operator\">-&gt;</span><span class=\"token function\">setDuration</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pAnimation<span class=\"token operator\">-&gt;</span><span class=\"token function\">setEasingCurve</span><span class=\"token punctuation\">(</span>QEasingCurve<span class=\"token operator\">::</span>InCirc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pAnimation<span class=\"token operator\">-&gt;</span><span class=\"token function\">setStartValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pAnimation<span class=\"token operator\">-&gt;</span><span class=\"token function\">setEndValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pAnimation<span class=\"token operator\">-&gt;</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>pAnimation<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>QPropertyAnimation<span class=\"token operator\">::</span>finished<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">delete</span> widgetPtr<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"3stdsort_74\"></a>3、在函数回调中使用（std::sort排序函数为例子）</h3>\n<p>在标准库的排序函数使用中，可以使用函数回调的方式自定义排序的比较规则。<br/> （1）sort函数提供排序算法；（2）floatList为容器变量，提供数据结构和数据；（3）他们两个之间使用迭代器连接。理解如下图：<br/> <img alt=\"\" src=\"image\\1ba0a31b9e484318952fca4e76dc8d8f.png\"/><br/> 而我们sort函数可以使用第三个参数（函数回调方式）作为比较依据进行排序，该参数就可以写成lambda函数，这样比较方法写在排序函数这里，可以使得代码更加直白、简便、集中。参考代码如下：</p>\n<pre><code class=\"prism language-cpp\">std<span class=\"token operator\">::</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span> floatList<span class=\"token punctuation\">,</span> floatList <span class=\"token operator\">+</span> N<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> b<span class=\"token punctuation\">)</span> \n\t\t<span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> a <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>上面lambda函数，是sort函数中的迭代器每次运行做排序比较的时候就调用。<br/> <strong>注意：</strong><br/> （1）lambda函数参数为（ float , float ），类型必须与容器的元素类型一致。<br/> （2）运行时，迭代器自动帮你把参数传入回调函数。<br/> （3）回调函数返回值固定为bool，这里可以不写，由编译器自动确定。</p>\n<h2><a id=\"__90\"></a>三 总结</h2>\n<p>lambda函数定义后返回的是函数指针类型，即如：<code>std::function&lt;int(int,int)&gt;</code>，所以一般很少使用，我们在很多代码中也很少看到。<br/> 正常情况下，lambda函数相对普通函数的定义和使用其实没什么优势。但是某些使用到函数指针的场合下，我们就可以酌情考虑使用，特别是函数指针作为函数参数的时候，比如qt的信号槽、回调函数等，使用起来即方便，又显得代码高大上，简直就完美O(∩_∩)O。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}