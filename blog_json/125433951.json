{"blogid": "125433951", "writerAge": "码龄4年", "writerBlogNum": "9", "writerCollect": "39", "writerComment": "0", "writerFan": "2", "writerGrade": "2级", "writerIntegral": "103", "writerName": "徒殇悲", "writerProfileAdress": "writer_image\\profile_125433951.jpg", "writerRankTotal": "88872", "writerRankWeekly": "763054", "writerThumb": "12", "writerVisitNum": "8896", "blog_read_count": "1913", "blog_time": "于 2022-06-23 20:23:15 发布", "blog_title": "vue中实现拖拽排序", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h3><a id=\"_API__1\"></a>原生拖拽 API 实现拖拽</h3>\n<h4><a id=\"_dragable_3\"></a>设置元素 dragable</h4>\n<p>将元素的 dragable 属性设置 为 true （文本 图片 链接 的draggable 属性默认为 true）则元素可拖放</p>\n<pre><code class=\"prism language-vue\">&lt;div :draggable=\"true\"&gt;拖拽&lt;/div&gt;\n</code></pre>\n<h4><a id=\"_13\"></a>拖放事件</h4>\n<p>在拖放的过程中涉及到两种元素，一种是被拖拽元素（源对象），一种是放置区元素（目标对象），不同的对象有不同的拖放事件。</p>\n<table><thead><tr><th align=\"left\">触发对象</th><th align=\"left\">事件名称</th><th align=\"left\">说明</th></tr></thead><tbody><tr><td align=\"left\">源对象</td><td align=\"left\">dragstart</td><td align=\"left\">源对象开始被拖动时触发</td></tr><tr><td align=\"left\"></td><td align=\"left\">drag</td><td align=\"left\">源对象被拖动过程中反复触发</td></tr><tr><td align=\"left\"></td><td align=\"left\">dragend</td><td align=\"left\">源对象拖动结束时触发</td></tr><tr><td align=\"left\">目标对象</td><td align=\"left\">dragenter</td><td align=\"left\">源对象开始进入目标对象范围内触发 使用 pereventDefault 来阻止浏览器默认的拒绝拖拽</td></tr><tr><td align=\"left\"></td><td align=\"left\">dragover</td><td align=\"left\">源对象在目标对象范围内移动时触发 使用 pereventDefault 来阻止浏览器默认的拒绝拖拽</td></tr><tr><td align=\"left\"></td><td align=\"left\">dragleave</td><td align=\"left\">源对象离开目标对象范围时触发</td></tr><tr><td align=\"left\"></td><td align=\"left\">drop</td><td align=\"left\">源对象在目标对象范围内被释放时触发</td></tr></tbody></table>\n<blockquote>\n<p><code>dragenter</code>和<code>dragover</code>事件的默认行为是拒绝接受任何被拖放的元素。因此，我们要在这两个拖放事件中使用<code>preventDefault</code>来阻止浏览器的默认行为；而且目标对象想要变成可释放区域，必须设置<code>dragover</code> 和 <code>drop</code> 事件处理程序属性。</p>\n</blockquote>\n<h4><a id=\"_29\"></a>拖拽排序</h4>\n<p>利用拖放<a href=\"https://so.csdn.net/so/search?q=API&amp;spm=1001.2101.3001.7020\">API</a>来实现列表的拖拽排序</p>\n<ol><li>由于拖动是实时的，所以没有使用<code>drop</code>而是使用了<code>dragenter</code>触发排序。</li><li>在源对象开始被拖拽时记录其索引<code>dragIndex</code>，当它进入目标对象时（对应<code>dragenter</code>事件），将其插入到目标对象的位置。</li><li>其中<code>dragenter</code>方法中有一个判断<code>this.dragIndex !== index</code>(index为当前目标对象的索引)，这是因为<strong>源对象同时也是目标对象</strong>，当没有这个判断时，源对象开始被拖拽时就会立刻触发自身的<code>dragenter</code>事件，这是不合理的。</li></ol>\n<h4><a id=\"API___37\"></a>拖拽API + 防抖实现</h4>\n<pre><code class=\"prism language-vue\">&lt;template&gt;\n    &lt;transition-group class=\"list\"&gt;\n      &lt;ul\n        @dragstart=\"dragstart(index)\"\n        @dragenter=\"dragenter($event, index)\"\n        @dragover=\"dragover($event, index)\"\n        draggable= \"true\"\n        v-for=\"(item, index) in list\"\n        :key=\"item.label\"\n        class=\"list-item\"\n      &gt;\n        {<!-- -->{item.label}}\n      &lt;/ul&gt;\n    &lt;/transition-group&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n       list: [\n        { label: '列表1' },\n        { label: '列表2' },\n        { label: '列表3' },\n        { label: '列表4' },\n        { label: '列表5' },\n        { label: '列表6' },\n      ],\n      // 源对象的下标\n      dragIndex: '',\n      // 目标对象的下标\n      enterIndex: '',\n      timeout: null,\n\n    }\n  },\n  destroyed() {\n   // 每次离开当前界面时，清除定时器\n    clearInterval(this.timeout)\n    this.timeout = null\n  },\n  methods: {\n    dragstart(index) {\n      console.log('start index ===&gt;&gt;&gt; ',index)\n      this.dragIndex = index\n    },\n\n    // dragenter 和 dragover 事件的默认行为是拒绝接受任何被拖放的元素。 \n    // 因此，我们要在这两个拖放事件中使用`preventDefault`来阻止浏览器的默认行为\n    dragenter(e,index) {  \n      e.preventDefault();\n      this.enterIndex = index\n      if( this.timeout !== null) {\n        clearTimeout(this.timeout)\n      }\n      // 拖拽事件的防抖\n      this.timeout = setTimeout(() =&gt; {\n         if( this.dragIndex !== index){\n            const source = this.list[this.dragIndex]\n            this.list.splice(this.dragIndex,1)\n            this.list.splice(index, 0 , source )\n            // 排序变化后目标对象的索引变成源对象的索引\n            this.dragIndex = index;\n          }\n      }, 100);\n    },\n    dragover(e, index) {\n      e.preventDefault();\n    }\n  },\n}\n&lt;/script&gt;\n\n&lt;style lang='scss' scoped&gt;\n.list {\n  list-style: none;\n  .list-item {\n    // 设置 动画效果\n    transition: transform .3s;\n    cursor: move;\n    width: 300px;\n    background: #EA6E59;\n    border-radius: 4px;\n    color: #FFF;\n    margin-bottom: 6px;\n    height: 50px;\n    line-height: 50px;\n    text-align: center;\n  }\n}\n&lt;/style&gt;\n\n</code></pre>\n<h2><a id=\"vue_awednd___136\"></a>vue awe-dnd 拖拽组件</h2>\n<h3><a id=\"_awednd__138\"></a>安装 awe-dnd 组件库</h3>\n<pre><code class=\"prism language-shell\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> awe-dnd -S\n</code></pre>\n<h3><a id=\"_mainjs___awe__146\"></a>在 main.js 中将 awe 挂载到全局</h3>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 引入拖拽排序插件</span>\n<span class=\"token keyword\">import</span> VueDND <span class=\"token keyword\">from</span> <span class=\"token string\">'awe-dnd'</span>\n \nVue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>VueDND<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"_157\"></a>实现案例</h3>\n<pre><code class=\"prism language-vue\">&lt;template&gt;\n    &lt;div class=\"title-list\"&gt;\n        &lt;div\n            v-dragging=\"{item: item, list:list}\"\n            v-for=\"item in list\"\n            :key=\"item.id\"\n            class=\"title-item\"&gt;\n            &lt;div class=\"title-child\"&gt;\n                &lt;span&gt;{<!-- -->{item.id +\"－－\"+ item.name }}&lt;/span&gt;\n            &lt;/div&gt;\n \n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n&lt;script&gt;\nexport default {\n    name: \"titleList\",\n    data() {\n        return {\n            list: [\n                {id:1,name:\"这是第一个标题名称\"},\n                {id:2,name:\"这是第二个标题名称\"},\n                {id:3,name:\"这是第三个标题名称\"},\n                {id:4,name:\"这是第四个标题名称\"},\n                {id:5,name:\"这是第五个标题名称\"},\n            ],\n        };\n    },\n    mounted() {\n        // 拖拽事件\n        this.$dragging.$on(\"dragged\", (result) =&gt; {\n            // 将排序后的结果重新赋值\n            this.list = result.value.list;\n        });\n    },\n};\n&lt;/script&gt;\n \n&lt;style lang=\"scss\" scoped&gt;\n    .title-list {\n        width: 350px;\n        background:#fff;\n        margin:100px auto 0;\n        border: 1px solid red;\n        .title-item {\n            width: 350px;\n            cursor: pointer;\n            border: 1px solid #ededed;\n            .title-child {\n                width: 330px;\n                height: 60px;\n                margin: 0 auto;\n                position: relative;\n                span {\n                    width: 100%;\n                    font-size: 14px;\n                    color: red;  \n                    line-height: 30px;\n                    // 只显示两行，多余的以省略号显示\n                    white-space: normal;\n                    overflow: hidden;\n                    text-overflow: ellipsis;\n                    display: -webkit-box;\n                    -webkit-line-clamp: 2;\n                    -webkit-box-orient: vertical;\n                    // 无论一行还是两行均居中显示\n                    position: absolute;\n                    left: 0;\n                    top: 50%;\n                    transform: translate(0, -50%);\n                }\n            }\n        }\n    }\n&lt;/style&gt;\n</code></pre>\n<p><img alt=\"请添加图片描述\" src=\"https://img-blog.csdnimg.cn/9b122026db9c4415988f6d0be5a4c5d1.gif\"/></p>\n<blockquote>\n<p>v-dragging=“{ item: item, list: colors, group: ‘item’,otherData:‘whatever u want’, comb: ‘isComb’}”</p>\n</blockquote>\n<p>list: 列表的遍历数据,</p>\n<p>item: 是当前循环值 , 遍历后需要拖拽功能的元素</p>\n<p>group: “unique key of dragable list”即拖拽列表的独特key值</p>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 拖拽事件</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$dragging<span class=\"token punctuation\">.</span><span class=\"token function\">$on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dragged\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">debugger</span>  <span class=\"token comment\">// console.log('result===&gt;',result)</span>\n    <span class=\"token comment\">// result 拖拽后的信息  将排序后console.log的结果重新赋值</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"___259\"></a>项目中-- 拖拽的效果 不理想</h3>\n<p>功能能够实现，但拖拽的效果不是很好，无法修改拖拽图层的透明度</p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-q0dnwNNC-1655985505378)(C:\\Users\\Administrator\\Desktop\\markDown\\svg\\vue-awe-dnd.gif)]</p>\n<h2><a id=\"vuesmoothDnD_267\"></a>vue-smooth-DnD</h2>\n<p>Vue Smooth DnD 是一个快速、轻量级的拖放、可排序的 Vue.js 库，封装了 smooth-dnd 库。</p>\n<p>vue-smooth-DnD 文档 ： https://github.com/kutlugsahin/vue-smooth-dnd</p>\n<h3><a id=\"__smoothdnd_275\"></a>安装 smooth-dnd</h3>\n<pre><code>yarn add vue-smooth-dnd -S\n</code></pre>\n<h3><a id=\"API__container_283\"></a>API: container</h3>\n<table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>:orientation</td><td>string</td><td>vertical</td><td>容器的方向，可以为 horizontal 或 vertical</td></tr><tr><td>:behaviour</td><td>string</td><td>move</td><td>描述被拖动的元素被移动或复制到目标容器。<br/>可以为 <strong>move</strong> (容器间相互移动) 或 copy(将元素复制到其他容器，但本容器内元素不变) 或 <strong>drop-zone</strong>(在容器间移动，但是容器内元素的顺序是固定的) 或 <strong>contain</strong> (只能在容器内移动。)</td></tr><tr><td>:tag</td><td>string, NodeDescription</td><td>div</td><td>容器的元素标签，默认是 div ，可以是字符串如 tag=“table” 也可以是包含 value和 props 属性的对象<br/> :tag=“{value: ‘table’, props: {class: ‘my-table’}}”</td></tr><tr><td>:group-name</td><td>string</td><td>undefined</td><td>可拖动元素可以在具有相同组名的容器之间移动。如果未设置组名容器将不接受来自外部的元素。 这种行为可以被 shouldAcceptDrop 函数覆盖。</td></tr><tr><td>:lock-axis</td><td>string</td><td>undefined</td><td>锁定拖动的移动轴。可用值 x, y 或 undefined。</td></tr><tr><td>:drag-handle-selector</td><td>string</td><td>undefined</td><td>用于指定可以开启拖拽的 CSS 选择器，如果不指定的话则元素内部任意位置都可抓取。<br/>例如 drag-handle-selector=“.column-drag-handle”</td></tr><tr><td>:non-drag-area-selector</td><td>string</td><td>undefined</td><td>禁止拖动的 CSS 选择器，优先于 dragHandleSelector.</td></tr><tr><td>:drag-begin-delay</td><td>number</td><td>0（触控设备为 200）</td><td>单位毫秒。表示点击元素持续多久后可以开始拖动。在此之前移动光标超过 5px 将取消拖动。</td></tr><tr><td>:animation-duration</td><td>number</td><td>250</td><td>单位毫秒。表示放置元素和重新排序的动画持续时间。</td></tr><tr><td>:auto-scroll-enabled</td><td>boolean</td><td>true</td><td>如果拖动项目接近边界，第一个可滚动父项将自动滚动</td></tr><tr><td>:drag-class</td><td>string</td><td>undefined</td><td>元素被拖动中的添加的类（不会影响拖拽结束后元素的显示）</td></tr><tr><td>:drop-class</td><td>string</td><td>undefined</td><td>从拖拽元素被放置到被添加到页面过程中添加的类。</td></tr><tr><td>:remove-on-drop-out</td><td>boolean</td><td>undefined</td><td>如果设置为 true，在被拖拽元素没有被放置到任何相关容器时，使用元素索引作为 removedIndex 调用 onDrop()</td></tr><tr><td>:drop-placeholder</td><td>boolean,object</td><td>undefined</td><td>占位符的选项。包含 className, animationDuration, showOnTop 例如<br/>dropPlaceholderOptions: {<!-- --><br/> className: “drop-preview”,<br/> animationDuration: “150”,<br/> showOnTop: true,<br/> },</td></tr></tbody></table>\n<p>Container 属性的使用</p>\n<pre><code class=\"prism language-vue\">&lt;Container\ngroup-name=\"col\"\n@drop=\"(e) =&gt; onCardDrop(column.id, e)\"\n:get-child-payload=\"getCardPayload(column.id)\"\ndrag-class=\"card-ghost\"  \ndrop-class=\"card-ghost-drop\"\n:drop-placeholder=\"dropPlaceholderOptions\"\nclass=\"draggable-container\"\n&gt;\n    &lt;Draggable v-for=\"task in column.list\" :key=\"task.id\"&gt;\n        &lt;div class=\"task-card\"&gt;\n            &lt;div class=\"task-title\"&gt;{<!-- -->{ task.name }}&lt;/div&gt;\n            &lt;div\n            class=\"task-priority\"\n            :style=\"{ background: priorityMap[task.priority].color }\"\n            &gt;\n            {<!-- -->{ priorityMap[task.priority].label }}\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/Draggable&gt;\n&lt;/Container&gt;\n\n</code></pre>\n<pre><code class=\"prism language-js\"><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">/// 拖拽时占位符样式</span>\n\t<span class=\"token literal-property property\">dropPlaceholderOptions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">\"drop-preview\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">animationDuration</span><span class=\"token operator\">:</span> <span class=\"token string\">\"150\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">showOnTop</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\t\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"smoothdnd___346\"></a>smooth-dnd 生命周期</h4>\n<p>一次拖动的生命周期通过一系列回调和事件进行描述和控制，下面以包含 3 个容器的示例为例进行说明</p>\n<pre><code>Mouse     Calls  Callback / Event       Parameters              Notes\n\ndown   o                                                        Initial click\n\nmove   o                                                        Initial drag\n       |\n       |         get-child-payload()    index                   Function should return payload    // 自定义传给 onDrop() 的payload对象。\n       |\n       |   3 x   should-accept-drop()   srcOptions, payload     Fired for all containers  // 用来确定容器是否可被放置，会覆盖group-name属性。\n       |\n       |   3 x   drag-start             dragResult              Fired for all containers\n       |\n       |         drag-enter\n       v\n\nmove   o                                                        Drag over containers\n       |\n       |   n x   drag-leave                                     Fired as draggable leaves container\n       |   n x   drag-enter                                     Fired as draggable enters container\n       v\n\nup     o                                                        Finish drag\n\n                 should-animate-drop()  srcOptions, payload     Fires once for dropped container   // 返回 false 则阻止放置动画 \n\n           3 x   drag-end               dragResult              Fired for all containers\n\n           n x   drop                   dropResult              Fired only for droppable containers\n</code></pre>\n<p>在每次拖动开始 (drag-start) 之前和每次拖动结束 (drag-end)之前触发should-accept-drop。</p>\n<p>dragResult 参数配置 来源于 事件对象</p>\n<p>(在事件处理函数中，可以传递一个参数e，这个参数我们叫做事件对象，也叫事件参数。事件对象e是系统传递过去，事件函数也是系统调用的。系统调用事件函数的时候，会给事件函数传递一个参数，传递的参数具有具体值，可以在事件函数执行时获取e中携带的值。)</p>\n<p>drag-start 中的 dragResult 参数格式</p>\n<pre><code class=\"prism language-js\"><span class=\"token literal-property property\">dragResult</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    payload<span class=\"token punctuation\">,</span>        <span class=\"token comment\">// 负载 可以理解为用来记录被拖动的对象</span>\n    isSource<span class=\"token punctuation\">,</span>       <span class=\"token comment\">// 是否是被拖动的容器本身</span>\n    willAcceptDrop<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 是否可以被放置</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>drag-end 中的 dragResult 参数格式</p>\n<pre><code class=\"prism language-js\">\n<span class=\"token literal-property property\">dragResult</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    addedIndex<span class=\"token punctuation\">,</span>     <span class=\"token comment\">// 被放置的新添加元素的下标，没有则为 null</span>\n    removedIndex<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 将被移除的元素下标，没有则为 null</span>\n    payload<span class=\"token punctuation\">,</span>        <span class=\"token comment\">// 拖动的元素对象，可通过 getChildPayload 指定</span>\n    droppedElement<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 放置的 DOM 元素</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_413\"></a>回调</h4>\n<p>回调在用户交互之前和期间提供了额外的逻辑和检查。</p>\n<ul><li> <p><code>get-child-payload(index)</code></p> <p>自定义传给 onDrop() 的 payload 对象。</p> <pre><code class=\"prism language-js\"><span class=\"token operator\">&lt;</span>Container <span class=\"token operator\">:</span>get<span class=\"token operator\">-</span>child<span class=\"token operator\">-</span>payload<span class=\"token operator\">=</span><span class=\"token string\">\"getChildPayload\"</span><span class=\"token operator\">&gt;</span>\n    \n<span class=\"token function\">getChildPayload</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// generate custom payload data here</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p><code>should-accept-drop(sourceContainerOptions, payload)</code></p> <p>在开始拖放之前，所有容器都要调用的函数用来确定容器是否可被放置，会覆盖 group-name 属性。</p> <pre><code class=\"prism language-js\"><span class=\"token operator\">&lt;</span>Container <span class=\"token operator\">:</span>should<span class=\"token operator\">-</span>accept<span class=\"token operator\">-</span>drop<span class=\"token operator\">=</span><span class=\"token string\">\"shouldAcceptDrop\"</span><span class=\"token operator\">&gt;</span>\n\n<span class=\"token function\">shouldAcceptDrop</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">sourceContainerOptions<span class=\"token punctuation\">,</span> payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p><code>should-animate-drop(sourceContainerOptions, payload)</code> 返回 false 则阻止放置动画。</p> <pre><code class=\"prism language-js\"><span class=\"token operator\">&lt;</span>Container <span class=\"token operator\">:</span>should<span class=\"token operator\">-</span>animate<span class=\"token operator\">-</span>drop<span class=\"token operator\">=</span><span class=\"token string\">\"shouldAnimateDrop\"</span><span class=\"token operator\">&gt;</span>\n\n<span class=\"token function\">shouldAnimateDrop</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">sourceContainerOptions<span class=\"token punctuation\">,</span> payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p><code>get-ghost-parent() </code>返回幽灵元素（拖动时显示的元素）应该添加到的元素，默认是父元素，某些情况定位会出现问题，则可以选择自定义，如返回 document.body。</p> <pre><code class=\"prism language-js\"><span class=\"token operator\">&lt;</span>Container <span class=\"token operator\">:</span>get<span class=\"token operator\">-</span>ghost<span class=\"token operator\">-</span>parent<span class=\"token operator\">=</span><span class=\"token string\">\"getGhostParent\"</span><span class=\"token operator\">&gt;</span>\n\n<span class=\"token function\">getGhostParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// i.e return document.body;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li></ul>\n<hr/>\n<h4><a id=\"_471\"></a>事件</h4>\n<ul><li> <p>@drag-start 在拖动开始时由所有容器发出的事件。参数 dragResult。</p> <pre><code class=\"prism language-js\"><span class=\"token operator\">&lt;</span>Container @drag<span class=\"token operator\">-</span>start<span class=\"token operator\">=</span><span class=\"token string\">\"onDragStart\"</span><span class=\"token operator\">&gt;</span>\n\n<span class=\"token function\">onDragStart</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dragResult</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span> isSource<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">,</span> willAcceptDrop <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> dragResult\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>@drag-end 所有容器在拖动结束时调用的函数。 在 @drop 事件之前调用。参数 dragResult。</p> </li><li> <p>@drag-enter 每当拖动的项目在拖动时进入其边界时，相关容器要发出的事件。</p> </li><li> <p>@drag-leave 每当拖动的项目在拖动时离开其边界时，相关容器要发出的事件。</p> </li><li> <p>@drop-ready 当容器中可能放置位置的索引发生变化时，被拖动的容器将调用的函数。基本上，每次容器中的可拖动对象滑动以打开拖动项目的空间时都会调用它。参数 dropResult。</p> </li><li> <p>@drop 放置结束时所有相关容器会发出的事件（放置动画结束后）。源容器和任何可以接受放置的容器都被认为是相关的。参数 dropResult。</p> </li></ul>\n<hr/>\n<h3><a id=\"API_Draggable_499\"></a>API: Draggable</h3>\n<p>Draggable 容器子组件的包装器。每个子元素都应该用可拖动组件包装。</p>\n<p>tag<br/> 同容器的 tag 指定可拖拽元素的 DOM 元素标签。 标记名称或节点定义来呈现Draggable的根元素。默认值为’div’。</p>\n<pre><code class=\"prism language-vue\">&lt;Draggable v-for=\"column in taskColumnList\" :key=\"column.name\" :tag=\"{value: 'tr', props: {class: 'my-table-row'}}\"&gt;\n&lt;/Draggable&gt;\n\n// --------------或者-----------------\n\n&lt;Draggable v-for=\"column in taskColumnList\" :key=\"column.name\" tag=\"tr\"&gt;\n&lt;/Draggable&gt;\n\n</code></pre>\n<h3><a id=\"_519\"></a>效果实现</h3>\n<p>Vue Smooth DnD 主要包含了两个组件，Container 和 Draggable，Container 包含可拖动的元素或组件，它的每一个子元素都应该被 Draggable 包裹。<br/> 每一个要被设置为可拖动的元素都需要被 Draggable 包裹</p>\n<pre><code class=\"prism language-vue\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;div class=\"simple-page\"&gt;\n      &lt;Container @drop=\"onDrop\"&gt;\n        &lt;Draggable v-for=\"item in items\" :key=\"item.id\"&gt;\n          &lt;div class=\"draggable-item\"&gt;\n            {<!-- -->{ item.data }}\n          &lt;/div&gt;\n        &lt;/Draggable&gt;\n      &lt;/Container&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { Container, Draggable } from \"vue-smooth-dnd\";\n\nconst applyDrag = (arr, dragResult) =&gt; {\n  const { removedIndex, addedIndex, payload } = dragResult;\n  console.log(removedIndex, addedIndex, payload);\n  if (removedIndex === null &amp;&amp; addedIndex === null) return arr;\n\n  const result = [...arr];\n  let itemToAdd = payload;\n\n  if (removedIndex !== null) {\n    itemToAdd = result.splice(removedIndex, 1)[0];\n  }\n\n  if (addedIndex !== null) {\n    result.splice(addedIndex, 0, itemToAdd);\n  }\n\n  return result;\n};\n\nconst generateItems = (count, creator) =&gt; {\n  const result = [];\n  for (let i = 0; i &lt; count; i++) {\n    result.push(creator(i));\n  }\n  return result;\n};\n\nexport default {\n  name: \"Simple\",\n  components: { Container, Draggable },\n  data() {\n    return {\n      items: generateItems(50, (i) =&gt; ({ id: i, data: \"Draggable \" + i })),\n    };\n  },\n  methods: {\n    onDrop(dropResult) {\n      this.items = applyDrag(this.items, dropResult);\n    },\n  },\n};\n&lt;/script&gt;\n\n&lt;style&gt;\n.draggable-item {\n  height: 50px;\n  line-height: 50px;\n  text-align: center;\n  display: block;\n  background-color: #fff;\n  outline: 0;\n  border: 1px solid rgba(0, 0, 0, 0.125);\n  margin-bottom: 2px;\n  margin-top: 2px;\n  cursor: default;\n  user-select: none;\n}\n&lt;/style&gt;\n</code></pre>\n<p><img alt=\"请添加图片描述\" src=\"https://img-blog.csdnimg.cn/1d4c7fb63e174f0282ed667edc227679.gif\"/></p>\n<h3><a id=\"___606\"></a>项目中实现 – 拖拽位置无法确定</h3>\n<p>smooth 的 :orientation 属性限制了容器拖拽的方式，占位为一行默认为 vertical ，默认占位容器的一行</p>\n<h2><a id=\"vuedraggable_616\"></a>vuedraggable</h2>\n<h3><a id=\"_618\"></a>安装</h3>\n<pre><code class=\"prism language-shell\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> vuedraggable\n</code></pre>\n<h3><a id=\"_626\"></a>引入</h3>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">import</span> draggable <span class=\"token keyword\">from</span> <span class=\"token string\">'vuedraggable'</span>\n</code></pre>\n<h3><a id=\"demo_634\"></a>demo</h3>\n<pre><code class=\"prism language-vue\">&lt;template&gt;\n  &lt;div class=\"app-container\"&gt;\n      &lt;div :class=\"canEdit? 'dargBtn-lock el-icon-unlock': 'dargBtn-lock el-icon-lock' \" @click=\"removeEvent()\"&gt;{<!-- -->{canEdit? '调整':'锁定'}}&lt;/div&gt;\n      &lt;ul class=\"projset-content\"&gt;\n        &lt;draggable\n          :forceFallback=\"true\"\n          :move=\"onMove\"\n          :list=\"imgList\"\n          handle=\".dargBtn\"\n          :animation=\"1000\"\n          filter=\".undraggable\"\n          fallbackClass=\"fallbackStyle\"\n          ghostClass=\"item_ghost\"\n          chosenClass=\"chosenStyle\"\n          dragClass=\"dragStyle\"\n         \n        &gt;\n          &lt;li v-for=\"(item, index) in imgList\" :key=\"index\" :class=\"canEdit ? 'draggable' : 'undraggable'\"&gt;\n            &lt;div class=\"dargBtn\"&gt;\n              &lt;svg-icon icon-class=\"drag\" /&gt;\n            &lt;/div&gt;\n            &lt;img :src=\"item.path\" alt=\"\"&gt;\n            &lt;span&gt;{<!-- -->{item.name}}&lt;/span&gt;\n          &lt;/li&gt;\n        &lt;/draggable&gt;\n      &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n  import draggable from 'vuedraggable';\n  export default {\n    components: { draggable},\n    data(){\n      return{\n        canEdit:true,\n        imgList: [\n          {\n            path: 'https://lupic.cdn.bcebos.com/20210629/3000005161_14.jpg',\n            name: '1',\n          },\n          {\n            path: 'https://lupic.cdn.bcebos.com/20210629/26202931_14.jpg',\n            name: '2',\n          },\n          {\n            path: 'https://lupic.cdn.bcebos.com/20210629/27788166_14.jpg',\n            name: '3',\n          }\n        ]\n      }\n    },\n    created() {\n    },\n    mounted(){},\n    methods:{\n      onMove(relatedContext, draggedContext){\n        console.log(relatedContext.relatedContext.list);\n      },\n      removeEvent (item) {\n        if(this.canEdit){\n          this.canEdit = false;\n        }else{\n          this.canEdit = true;\n        }\n        console.log(this.canEdit);\n      }\n    }\n  }\n&lt;/script&gt;\n\n\n&lt;style scoped lang=\"scss\"&gt;\n  .app-container{\n    background: #ffffff;\n    height: 100%;\n    .dargBtn-lock{\n      margin: 0px 50px;\n      color: #2ea9df;\n    }\n    .dragStyle {\n      padding: 10px;\n      border-radius: 4px;\n      opacity: 1;\n    }\n    .fallbackStyle{\n      padding: 10px;\n      border-radius: 4px;\n      opacity: 1;\n\n    }\n    .chosenStyle {\n      padding: 10px;\n      border-radius: 4px;\n      opacity: 1 !important;\n\n    }\n    .item_ghost {\n      opacity: 0 !important;\n    }\n    .projset-content{\n      list-style-type: none;\n      position: relative;\n      li{\n        display: inline-block;\n        margin: 10px;\n      }\n      img{\n        width: 141px;\n        height: 100px;\n      }\n      span{\n        justify-content: center;\n        display: flex;\n      }\n      .dargBtn{\n        position: absolute;\n        line-height: 100px;\n        text-align: center;\n        width: 141px;\n        height: 100px;\n        display: none;\n        color: white;\n        // background: rgba(101, 101, 101, 0.6);\n      }\n      .draggable{\n        cursor: pointer;\n        width: 141px;\n        height: 100px;\n      }\n      .draggable:hover .dargBtn{\n        display: block;\n      }\n     \n    }\n  }\n&lt;/style&gt;\n</code></pre>\n<p><img alt=\"请添加图片描述\" src=\"https://img-blog.csdnimg.cn/d7ef11040f154aa59c292a567477c7b9.gif\"/></p>\n<h3><a id=\"_779\"></a>参数说明</h3>\n<table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>group</td><td>String/ Array group=“name”</td><td>用于分组， 同一组的不同list可以相互拖动</td></tr><tr><td>list</td><td>Array</td><td>设置拖拽元素</td></tr><tr><td>sort</td><td>Boolean :sort=“true”</td><td>是否开启内部排序， 如果设为 false 则它所在的组无法排序</td></tr><tr><td>delay</td><td>Number :delay=“0”</td><td>鼠标选中后可以开始拖拽的延迟时间</td></tr><tr><td>touchStartThreshold</td><td>Number :touchStartThreshold=“5”</td><td>鼠标移动多少px才可以拖动元素</td></tr><tr><td>disabled</td><td>Boolean :disabled=“true”</td><td>是否启用拖拽组件</td></tr><tr><td>animation</td><td>Number :animation=\"1000\"单位 ms</td><td>拖动时过渡动画效果</td></tr><tr><td>handle</td><td>Selector handle=“.card-title”</td><td>拖动手柄，鼠标移动到 css 名为 card-title 的选择器时才能成为拖动手柄进行拖动</td></tr><tr><td>filter</td><td>Selector filter=“.unmover”</td><td>通过选择器设置哪些样式的元素不能被拖动 多个选择器用 ‘,’ 分隔</td></tr><tr><td>preventOnFilter</td><td>Boolean :preventOnFilter=\"true\"默认触发</td><td>当拖动filter时是否触发 event.preventDefault()</td></tr><tr><td>draggable</td><td>Selector draggable=“.item”</td><td>哪些元素时可以进行拖动的</td></tr><tr><td>ghostClass</td><td>ghostClass=“ghost-style”</td><td>设置拖拽元素的占位符样式 模拟被拖动元素的排序情况，自定义样式可能需要添加 !important 才能生效（forceFallback 属性设置味 true）</td></tr><tr><td>chosenClass</td><td>chosenClass=“chosen-style”</td><td>设置目标被选中时的样式（包括拖拽时鼠标附着的样式）自定义样式可能需要添加 !important 才能生效（forceFallback 属性设置味 true）</td></tr><tr><td>dragClass</td><td>dragClass=“drag-style”</td><td>拖动元素过程中添加的样式，自定义样式可能需要添加 !important 才能生效（forceFallback 属性设置味 true）</td></tr><tr><td>dataIdAttr</td><td>Selector dataIdAttr=”data-id“</td><td>不太清楚</td></tr><tr><td>forceFallback</td><td>forceFallback=“true” 默认为false</td><td>设为 true 时将不使用原生的html5 的拖放，可修改拖放过程中的样式</td></tr><tr><td>fallbackClass</td><td>fallback-class=“dragging_style”</td><td>forceFallback=“true” 时，克隆出新的DOM元素类名，可修改拖放过程中鼠标附着的样式</td></tr><tr><td>allbackOnBody</td><td>Boolean 默认为false</td><td>allbackOnBody=“true” 时将克隆的元素添加到文档的body中</td></tr><tr><td>fallbackTolerance</td><td>Number 单位 px</td><td>拖拽之前应该移动的距离</td></tr><tr><td>scroll</td><td>Boolean 默认为true</td><td>当排序的容器是个可滚动的区域，拖放是否能引起区域滚动</td></tr><tr><td>scrollFn</td><td>Function</td><td>滚动回调函数，用于自定义滚动条的适配</td></tr><tr><td>scrollSensitivity</td><td>Number 默认30</td><td>距离滚动区域多远时滚动条滚动，鼠标靠近边缘多远时开始滚动</td></tr><tr><td>scorllSpeed</td><td>Number</td><td>滚动速度</td></tr></tbody></table>\n<h3><a id=\"_809\"></a>事件</h3>\n<table><thead><tr><th>参数</th><th>说明</th><th>回调参数</th></tr></thead><tbody><tr><td>start</td><td>开始拖动时</td><td>function({ to, from, item, clone, oldIndex, newIndex })</td></tr><tr><td>add</td><td>往列表中移入（添加）单元时</td><td>function({ to, from, item, clone, oldIndex, newIndex })</td></tr><tr><td>remove</td><td>单元被移动到另一个列表（从当前的列表移处）时</td><td>function({ to, from, item, clone, oldIndex, newIndex })</td></tr><tr><td>update</td><td>排序发生变化时</td><td>function({ to, from, item, clone, oldIndex, newIndex })</td></tr><tr><td>end</td><td>拖拽结束时</td><td>function({ to, from, item, clone, oldIndex, newIndex })</td></tr><tr><td>choose</td><td>选择单元格时</td><td>function({ to, from, item, clone, oldIndex, newIndex })</td></tr><tr><td>sort</td><td>排序发生变化时</td><td>function({ to, from, item, clone, oldIndex, newIndex })</td></tr><tr><td>filter</td><td>尝试选择一个被filter过滤的单元时</td><td>function({ to, from, item, clone, oldIndex, newIndex })</td></tr><tr><td>clone</td><td>clone 复制出单元格时触发</td><td>function({ to, from, item, clone, oldIndex, newIndex })</td></tr></tbody></table>\n<h3><a id=\"_825\"></a>最佳事件</h3>\n<pre><code class=\"prism language-vue\">  &lt;transition&gt;\n      &lt;draggable\n        :delay=\"300\"\n        :fallback-tolerance=\"0\"\n        :list=\"dragList\"\n        :force-fallback=\"true\"\n        fallback-class=\"dragging_style\"\n        handle=\".card-title\"\n        drag-class=\"drag-style\"\n        ghost-class=\"ghost-style\"\n        chosen-class=\"chosen-style\"\n        @update=\"handleUpdateDrag\"\n        class=\"home-drag-wrapper\"&gt;\n        &lt;div v-for=\" item in dragList\" :key=\"item.id\" :class=\"item.className\" class=\"home-part\"&gt;\n          &lt;component :is=\"item.name\" :ref=\"item.name\" class=\"drag-handle \" :class=\" item.id !== 1? (item.id !== 2? 'card': ''):''\"&gt;\t\t\t\t &lt;/component&gt;\n        &lt;/div&gt;\n      &lt;/draggable&gt;\n    &lt;/transition&gt;\n</code></pre>\n<pre><code class=\"prism language-css\"><span class=\"token selector\">.ghost-style</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> grabbing <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.chosen-style</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>242<span class=\"token punctuation\">,</span> 245<span class=\"token punctuation\">,</span> 250<span class=\"token punctuation\">,</span> .5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 8px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 1000<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 0px 3px 28px #BAC4D4<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> grabbing <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.dragging-style</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid yellow<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.drag-style</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>242<span class=\"token punctuation\">,</span> 245<span class=\"token punctuation\">,</span> 250<span class=\"token punctuation\">,</span> .5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 8px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 1000<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 0px 3px 28px #BAC4D4<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 1 <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>ghost-class 为排序中的占位样式。</p>\n<p>chosen-class 占位符、拖动过程中鼠标附着的副本样式的共同样式。</p>\n<p>设置 :force-fallback=“true” 可修改拖放过程中的样式</p>\n<p>fallback-class 设置鼠标附着的副本样式， 通过 !important 提升样式优先级。</p>\n<p>drag-class 拖拽过程中的样式（鼠标附着样式 opacity: 1 !important; 设置副本的透明度）。</p>\n<p>在拖拽过程中配置的类名作用的相应区域：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\dce4ccde16c34c5fa5b3fd53497803c3.png\"/></p>\n<p><img alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-GdnbkvMg-1655985505379)(C:\\Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220623162223004.png)]\" src=\"image\\2505c7327b4847e3983fe1218bf9ba4e.png\"/></p>\n<h2><a id=\"_896\"></a>总结</h2>\n<p>通过试用多个不同的组件库，恍惚比较总结，最后在项目重采用vuedraggable，因为该组件的实现方式简单，并且能够灵活控制拖拽的样式，达到所需的效果。</p>\n<h2><a id=\"_904\"></a>参考</h2>\n<p>smooth- dnd 参考自 ： https://blog.51cto.com/u_15127632/4038149<br/> vuedraggable 参考自：https://blog.csdn.net/Kiruthika/article/details/123903706</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}