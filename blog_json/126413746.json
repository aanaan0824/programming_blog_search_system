{"blogid": "126413746", "writerAge": "码龄4年", "writerBlogNum": "93", "writerCollect": "297", "writerComment": "325", "writerFan": "228", "writerGrade": "5级", "writerIntegral": "1722", "writerName": "安河桥畔", "writerProfileAdress": "writer_image\\profile_126413746.jpg", "writerRankTotal": "11429", "writerRankWeekly": "291", "writerThumb": "346", "writerVisitNum": "33106", "blog_read_count": "536", "blog_time": "已于 2022-08-20 17:47:46 修改", "blog_title": "【C++】list容器介绍及使用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>list容器</h3>\n<ul><li><a href=\"#list_1\">一、list底层结构</a></li><li><a href=\"#_8\">二、构造方法</a></li><li><ul><li><a href=\"#_9\">构造函数</a></li><li><a href=\"#_20\">拷贝构造函数</a></li></ul>\n</li><li><a href=\"#_29\">三、元素访问和迭代器</a></li><li><ul><li><a href=\"#backfront_30\">back&amp;front</a></li><li><a href=\"#_38\">三种遍历方式</a></li><li><ul><li><a href=\"#1_44\">1.迭代器</a></li><li><a href=\"#2for_56\">2.范围for</a></li><li><a href=\"#3_69\">3.反向迭代器</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_81\">四、元素修改</a></li><li><ul><li><a href=\"#_82\">尾插、头插、尾删、头删</a></li><li><a href=\"#inserterase_84\">insert、erase</a></li><li><a href=\"#swap_95\">swap</a></li><li><a href=\"#resize_104\">resize</a></li></ul>\n</li><li><a href=\"#_111\">五、特殊操作</a></li><li><ul><li><a href=\"#remove_112\">remove</a></li><li><a href=\"#remove_if_120\">remove_if</a></li><li><a href=\"#uniquesort_137\">unique、sort</a></li><li><a href=\"#reverse_152\">reverse</a></li></ul>\n</li><li><a href=\"#list_164\">六、list迭代器失效问题</a></li><li><a href=\"#vectorlist_188\">七、vector与list对比</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"list_1\"></a>一、list底层结构</h1>\n<p>list底层是<u>带头节点的双向循环链表</u><br/> 双向：可以从前往后，也可以从后往前遍历<br/> 循环：找尾节点的时间复杂度为O( 1 )<br/> 带头节点：代码实现简单，不用考虑链表为空等特殊情况，可令end()迭代器指向头节点的位置<br/> <img alt=\"在这里插入图片描述\" src=\"image\\97f5aa5c71ab426e953e0ffeeef7cb7a.png\"/></p>\n<h1><a id=\"_8\"></a>二、构造方法</h1>\n<h2><a id=\"_9\"></a>构造函数</h2>\n<pre><code class=\"prism language-cpp\">list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> l1<span class=\"token punctuation\">;</span>\nlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">l2</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//迭代器</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> v<span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">l3</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//C++11</span>\nlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> l4<span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\89c19bf821514243bcfafc3ed51ee085.png\"/></p>\n<h2><a id=\"_20\"></a>拷贝构造函数</h2>\n<p>利用l1拷贝构造l2</p>\n<pre><code class=\"prism language-cpp\">list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> l1<span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">l2</span><span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8723d642d3bc4ee7be2420602828dd80.png\"/></p>\n<h1><a id=\"_29\"></a>三、元素访问和迭代器</h1>\n<h2><a id=\"backfront_30\"></a>back&amp;front</h2>\n<pre><code class=\"prism language-cpp\">list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> l1<span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> l1<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> l1<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\75ef29db395248f8a6fe60c437ee896f.png\"/></p>\n<h2><a id=\"_38\"></a>三种遍历方式</h2>\n<pre><code class=\"prism language-cpp\">list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> l1<span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>采用下面三种方式对下面这个list&lt;int&gt;类型的对象进行遍历打印：</p>\n<h3><a id=\"1_44\"></a>1.迭代器</h3>\n<pre><code class=\"prism language-cpp\">list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> l1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\ncout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>打印结果：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\09d8438e2fc74de88cc42b6a5fb6fa74.png\"/></p>\n<h3><a id=\"2for_56\"></a>2.范围for</h3>\n<p>注意这里e是int类型，不用再进行解引用</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//范围for</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> l1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\ncout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>打印结果：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\09d8438e2fc74de88cc42b6a5fb6fa74.png\"/></p>\n<h3><a id=\"3_69\"></a>3.反向迭代器</h3>\n<pre><code class=\"prism language-cpp\">list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span>reverse_iterator rit <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>rit<span class=\"token punctuation\">;</span> rit <span class=\"token operator\">!=</span> l1<span class=\"token punctuation\">.</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> rit<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>rit <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\ncout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>打印结果：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\9f8ce07bf5754e95ab371faa9c85e2f4.png\"/></p>\n<h1><a id=\"_81\"></a>四、元素修改</h1>\n<h2><a id=\"_82\"></a>尾插、头插、尾删、头删</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ebaac0d668d0480eb04111866109885b.png\"/></p>\n<h2><a id=\"inserterase_84\"></a>insert、erase</h2>\n<p>list支持任意位置的插入，注意<u>list对象的迭代器不支持加减数字</u>，因为其底层空间不连续，如图：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c38b6326575d4b0ab56bd01974adca95.png\"/><br/> 如果要往一个位置进行插入，可以通过find函数返回位置进行，<u>find是一个通用的函数模板，返回值是传入参数的迭代器类型</u>，</p>\n<pre><code class=\"prism language-cpp\">list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> l1<span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nl1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> l1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//任意位置插入</span>\nl1<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> l1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> l1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//任意位置的删除</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\a664c451b24246bb869088d62fdf9ac4.png\"/></p>\n<h2><a id=\"swap_95\"></a>swap</h2>\n<p>list内置的交换函数</p>\n<pre><code class=\"prism language-cpp\">list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> l1<span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> l2<span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nl1<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>l2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f8ea1f4bd9654f00973f6fe5dea2236b.png\"/></p>\n<h2><a id=\"resize_104\"></a>resize</h2>\n<p>resize改变有效元素的个数，多的元素用第resize二个参数填充，如果没有给第二个参数，则默认用T()。</p>\n<pre><code class=\"prism language-cpp\">list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> l1<span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nl1<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\307cd72aa0ca45c09b789eea799f1ea9.png\"/></p>\n<h1><a id=\"_111\"></a>五、特殊操作</h1>\n<h2><a id=\"remove_112\"></a>remove</h2>\n<p>删除值为value的元素</p>\n<pre><code class=\"prism language-cpp\">list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> l1<span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nl1<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\926edcf0a1884b0bacc41ef94c294833.png\"/></p>\n<h2><a id=\"remove_if_120\"></a>remove_if</h2>\n<p>remove_if的参数是一个判断条件，可以是函数指针或者函数对象</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//判断5的倍数</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">MultipleFive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span> <span class=\"token operator\">==</span> n <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Test10</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//此处传递函数指针</span>\n\tlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> l1<span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tl1<span class=\"token punctuation\">.</span><span class=\"token function\">remove_if</span><span class=\"token punctuation\">(</span>MultipleFive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\a2994861e47f45b3b1b15e030a054ac9.png\"/></p>\n<h2><a id=\"uniquesort_137\"></a>unique、sort</h2>\n<p>unique，去重，删除所有重复元素，<u>使用unique之前要先调用sort进行排序</u>，这里的sort是list内置的sort，不是标准库中的sort</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> l1<span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tl1<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//默认升序</span>\n\tl1<span class=\"token punctuation\">.</span><span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//删除重复元素</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>结果：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ddd39489a0e24d33b3fa1f9bcd825688.png\"/><br/> 对于sort的使用，还可以自定义函数，并将函数指针作为参数传递给sort函数进行排序：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c143e5fecd39422b943c727e0a339136.png\"/></p>\n<h2><a id=\"reverse_152\"></a>reverse</h2>\n<p>对链表进行逆置</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span> \n\tlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> l1<span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tl1<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>结果：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ab43e312223e40268d480a3790755d91.png\"/></p>\n<h1><a id=\"list_164\"></a>六、list迭代器失效问题</h1>\n<p>list底层结构为带头结点的双向循环链表，因此<u>在list中进行插入时是不会导致list的迭代器失效的，只有在删除时才会失效</u>，并且失效的只是指向被删除节点的迭代器，其他迭代器不会受到影响。<br/> <strong>erase导致的迭代器失效</strong><br/> 如图所示，it迭代器所指向的位置被删除后，迭代器失效：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\6a83897d19ee4737a6bc1344e063f5aa.png\"/><br/> 改正方法：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> l1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//it=l1.erase(it);</span>\n\tl1<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这里 l1.erase(it++)语句也能达到效果，因为后置++会将自增后的结果保存在临时变量中，而前置则不可以。<br/> <strong>resize导致的迭代器失效</strong><br/> resize减少有效元素个数也会导致迭代器失效：</p>\n<pre><code class=\"prism language-cpp\">list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> l1<span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nl1<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>上面这个程序中，reseze减少有效元素个数后，it指向的位置元素已经被删除，迭代器失效，如果再使用该迭代器，则会出错。</p>\n<h1><a id=\"vectorlist_188\"></a>七、vector与list对比</h1>\n<p>vector（动态顺序表）<br/> <img alt=\"在这里插入图片描述\" src=\"image\\86e6a7338ccf4959a3cfe2f46baf4200.png\"/></p>\n<p>list（带头结点的双向循环链表）<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e70838deb6ca48dca89371f567b9e11b.png\"/></p>\n<table><thead><tr><th>对比</th><th>vector</th><th>list</th></tr></thead><tbody><tr><td>底层结构</td><td>动态顺序表，连续空间</td><td>带头结点的双向循环链表</td></tr><tr><td>访问</td><td>支持随机访问，首地址+下标</td><td>不能随机访问，可通过find查找，访问随即元素时间复杂度O(N)</td></tr><tr><td>插入删除</td><td>任意位置插入和删除效率低，需要搬移元素，时间复杂度为O(N)，插入时有可能需要增容，增容：开辟新空间，拷贝元素，释放旧空间，导致效率更低</td><td>任意位置插入和删除效率高，不需要搬移元素，时间复杂度为O(1)</td></tr><tr><td>空间利用率</td><td>底层为连续空间，不容易造成内存碎片，空间利用率较高，缓存利用率高。<u>可以一次将一个数据附近的空间都加载到缓存，不用频繁地从内存读取数据</u></td><td>底层节点动态开辟，容易造成内存碎片，空间利用率低，缓存利用率低</td></tr><tr><td>迭代器</td><td>原生态指针</td><td>对指针进行了封装</td></tr><tr><td>迭代器失效</td><td>容量相关的操作都有可能导致迭代器失效，如插入引起的扩容，删除元素等</td><td>插入元素不会导致迭代器失效，删除节点会导致，且只影响当前迭代器，其他迭代器不受影响</td></tr><tr><td>使用场景</td><td>不关心插入和删除效率，支持随机访问</td><td>大量插入和删除操作，不关心随机访问的场景</td></tr></tbody></table>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}