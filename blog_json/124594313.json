{"blogid": "124594313", "writerAge": "码龄5年", "writerBlogNum": "63", "writerCollect": "1739", "writerComment": "1639", "writerFan": "3375", "writerGrade": "6级", "writerIntegral": "6619", "writerName": "初学C语言者", "writerProfileAdress": "writer_image\\profile_124594313.jpg", "writerRankTotal": "4847", "writerRankWeekly": "17565", "writerThumb": "1878", "writerVisitNum": "57056", "blog_read_count": "1452", "blog_time": "已于 2022-05-29 09:22:05 修改", "blog_title": "【初阶数据结构与算法 2】时间/空间复杂度练习——转轮数组", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>转轮数组</h3>\n<ul><li><a href=\"#_5\">前言</a></li><li><a href=\"#1_10\">1、转轮数组</a></li><li><a href=\"#2_1_22\">2、 方法1——数组</a></li><li><a href=\"#3_2_47\">3、 方法2——指针</a></li><li><a href=\"#4_3_66\">4、 方法3——动态内存空间</a></li><li><a href=\"#5_43_91\">5、 方法4——3次逆转</a></li><li><a href=\"#_134\">总结</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_5\"></a>前言</h1>\n<blockquote>\n<p>前面学习了时间复杂度和空间复杂度相关的知识点，本文将通过练习题<strong>转轮数组</strong>，来巩固所学知识。</p>\n</blockquote>\n<hr/>\n<h1><a id=\"1_10\"></a>1、转轮数组</h1>\n<blockquote>\n<p><strong>实现一个函数，可以轮转数组中的k个元素，例如：</strong></p>\n</blockquote>\n<pre><code class=\"prism language-bash\"><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span> <span class=\"token number\">6</span> <span class=\"token number\">7</span> \n轮转3个元素，\n即将 <span class=\"token number\">5</span> <span class=\"token number\">6</span> <span class=\"token number\">7</span> 放到数组前面，得到\n<span class=\"token number\">5</span> <span class=\"token number\">6</span> <span class=\"token number\">7</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8c4f352b817e47c6a131e1cfba00b34a.png\"/></p>\n<h1><a id=\"2_1_22\"></a>2、 方法1——数组</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\5d41ea8f09374938b6f0624389046fd8.png\"/></p>\n<ul><li><strong>时间复杂度</strong>：O(k*N)，</li><li>内循环N次，外循环k次，k 最坏是 N-1，最好情况是 1</li><li><strong>空间复杂度</strong>：O(1)</li><li>算法额外临时创建了3个变量</li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">leftChange1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sz<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cnt<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tcnt <span class=\"token operator\">=</span> cnt <span class=\"token operator\">%</span> sz<span class=\"token punctuation\">;</span><span class=\"token comment\">//表示旋转几个字符,当轮转个数大于数组长度时，取模</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> cnt<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\ttmp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>sz<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> sz <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//前面一项赋值给后一项</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\ta<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"3_2_47\"></a>3、 方法2——指针</h1>\n<p><strong>方法2和方法1没有区别</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//基础解法2  用指针</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">leftChange2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sz<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cnt<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tcnt <span class=\"token operator\">=</span> cnt <span class=\"token operator\">%</span> sz<span class=\"token punctuation\">;</span><span class=\"token comment\">//表示旋转几个字符</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> cnt<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\ttmp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> sz <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> sz <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token operator\">*</span>a  <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"4_3_66\"></a>4、 方法3——动态内存空间</h1>\n<p>用指针、字符串库函数、动态内存空间<br/> <img alt=\"在这里插入图片描述\" src=\"image\\3599960ed5f24597ae13a87c76a1222a.png\"/></p>\n<ul><li><strong>时间复杂度</strong>：O(N)，数组a拷贝到pc，执行N次，在拷贝回a也是N次</li><li><strong>空间复杂度</strong>：O(N)，算法临时开辟了N个空间</li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">leftChange3</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sz<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cnt<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcnt <span class=\"token operator\">=</span> cnt <span class=\"token operator\">%</span> sz<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>sz<span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pc <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"malloc:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>pc<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> sz <span class=\"token operator\">-</span> cnt<span class=\"token punctuation\">,</span> cnt <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//</span>\n\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>pc <span class=\"token operator\">+</span> cnt<span class=\"token punctuation\">,</span> a <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>sz<span class=\"token operator\">-</span>cnt<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//</span>\n\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> pc<span class=\"token punctuation\">,</span> sz<span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpc <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"5_43_91\"></a>5、 方法4——3次逆转</h1>\n<p>3次逆转，很难想到<br/> <img alt=\"在这里插入图片描述\" src=\"image\\02ad95057ad64e0b87492cdb9afde79b.png\"/></p>\n<ul><li><strong>时间复杂度</strong>：O(N)，数组a前半后半分别逆转，执行N次，最后整体逆转也是N次</li><li><strong>空间复杂度</strong>：O(1)，算法临时建立了1N个临时变量</li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">char</span> tmp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\ta<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\ta<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n\t\tleft<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\tright<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">leftChange4</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> num<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sz<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cnt<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcnt <span class=\"token operator\">=</span> cnt <span class=\"token operator\">%</span> sz<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> sz <span class=\"token operator\">-</span> cnt<span class=\"token punctuation\">,</span> sz<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//后半部分</span>\n\t<span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>num <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> sz<span class=\"token operator\">-</span>cnt<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//前半部分</span>\n\t<span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sz <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> sz <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//数组个数</span>\n\t<span class=\"token comment\">//leftChange1(a, sz, 3);</span>\n\t<span class=\"token comment\">//leftChange2(a, sz, 3);</span>\n\t<span class=\"token comment\">//leftChange3(a, sz, 3);</span>\n\t<span class=\"token function\">leftChange4</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> sz<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\t\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h1><a id=\"_134\"></a>总结</h1>\n<p>时间复杂度和空间复杂度要牢记定义，多练习才能熟练掌握。</p>\n<p><strong>要做到不写代码，只分析思路就能知道时间复杂度的阶数。</strong></p>\n<p>初阶数据结构和算法建立在C语言之上的，学习这部分内容，要随时复习之前所学的知识。</p>\n<p>下一篇将继续练习。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}