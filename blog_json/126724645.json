{"blogid": "126724645", "writerAge": "码龄1年", "writerBlogNum": "103", "writerCollect": "2421", "writerComment": "4073", "writerFan": "11761", "writerGrade": "7级", "writerIntegral": "9336", "writerName": "乔乔家的龙龙", "writerProfileAdress": "writer_image\\profile_126724645.jpg", "writerRankTotal": "1535", "writerRankWeekly": "600", "writerThumb": "3120", "writerVisitNum": "143125", "blog_read_count": "130", "blog_time": "已于 2022-09-06 21:31:54 修改", "blog_title": "手撕红黑树——C++高阶数据结构详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><ul><li><a href=\"#_2\">传统艺能😎</a></li><li><a href=\"#_19\">概念🤔</a></li><li><a href=\"#_27\">五大特性🤔</a></li><li><a href=\"#_44\">节点定义🤔</a></li><li><a href=\"#_85\">红黑树插入🤔</a></li><li><a href=\"#_95\">插入调整🤔</a></li><li><ul><li><a href=\"#_115\">情况一😎</a></li><li><a href=\"#_170\">情况二😎</a></li><li><ul><li><a href=\"#_171\">具体情况一🎉</a></li><li><a href=\"#_190\">具体情况二🎉</a></li><li><a href=\"#_202\">具体情况三😎</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_435\">验证红黑树🤔</a></li><li><a href=\"#_508\">红黑树查找🤔</a></li><li><a href=\"#_540\">红黑树的删除🤔</a></li><li><a href=\"#_547\">谁是一代宗师🤔</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"_2\"></a>传统艺能😎</h2>\n<p>小编是双非本科大一菜鸟不赘述，欢迎各位指点江山（期待~）（QQ：1319365055）<br/> 此前博客<a href=\"https://blog.51cto.com/\">点我！点我！请搜索博主 【知晓天空之蓝】</a></p>\n<p><mark>🎉🎉非科班转码社区诚邀您入驻🎉🎉</mark><br/> 小伙伴们，打码路上一路向北，彼岸之前皆是疾苦<br/> <mark>一个人的单打独斗不如一群人的砥砺前行</mark><br/> 这是和梦想合伙人组建的社区，诚邀各位有志之士的加入！！<br/> 社区用户好文均加精（“标兵”文章字数2000+加精，“达人”文章字数1500+加精）<br/> 直达： <a href=\"https://bbs.csdn.net/forums/FKBZM?typeId=22226\">社区链接点我</a></p>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e1b6ada010ba4579baf2c48a760eb607.jpeg\"/></p>\n<hr/>\n<blockquote>\n<p>红黑树是对树结构的一种高度综合运用，涉及到多叉树，树平衡调整，节点旋转等等，这些是对数据结构基本功的最佳历练，也是面试场上令人闻风丧胆的冷面一刀。能否给出完整的定义，能否介绍自己对红黑树的认识，能否通过旋转，染色等操作在给定的场景下对一颗红黑树进行调整使其符合定义…这些才是我们应该在学习后得到的信息</p>\n</blockquote>\n<h2><a id=\"_19\"></a>概念🤔</h2>\n<p><font color=\"blue4\" size=\"4\">红黑树也是一种二叉搜索树，但是每个节点都存储了一个颜色，该颜色可以为黑可以为红，因此也叫红黑树。</font></p>\n<p>红黑树和 AVL 树的区别就是红黑树属于近似平衡，他并不是完全平衡，红黑树不会像 AVL 树一样做到严密的平衡（高度差控制在 1 ），他是依靠每条路径上红黑节点的排布与限制，确保最长路径长度不超过最短路径长度的 2 倍.</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\30685852fe7049baba751026570f6836.png\"/></p>\n<h2><a id=\"_27\"></a>五大特性🤔</h2>\n<p>红黑树有着标志性的<mark>五大特性</mark>：</p>\n<ol><li>根节点一定为黑色</li><li>一个节点只能是红或黑</li><li>节点为红色，则该节点的两个子节点都为黑色</li><li>对于每个节点，从根节点到叶子结点的简单路径上，黑色节点个数相等</li><li>每个叶子结点（即空节点）都是黑色</li></ol>\n<p><font color=\"blue4\" size=\"3\">那么问题来了，仅仅依靠这五大特性是如何确保最长路径长度 &lt; 最短路径长度的 2 倍？</font></p>\n<p>根据第 3,4 特性，我们不妨思考一下极端场景，最短可能路径其实就是全黑的情况，假设此时有 n 个节点，长度就为 n：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\914f5f4db72448bca96c40df571b75e0.png\"/></p>\n<p>而最长可能路径就是在红色节点存在的条件下，以一红一黑的方式进行排列，此时假设依然有 n 个黑色节点，那么红色节点数目与黑色相同，则长度为 2n，以此证明。</p>\n<h2><a id=\"_44\"></a>节点定义🤔</h2>\n<p>这里和 AVL 树一样我们直接实现 KV 模型，为了方便后序的旋转操作，将红黑树的结点定义为三叉链结构，将 AVL 树中的平衡因子换成了新成员——结点的颜色。</p>\n<p>因为节点颜色是贯穿的，我们可以直接定义成全局变量，并用枚举变量来给颜色赋予逻辑：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Color</span> \n<span class=\"token punctuation\">{<!-- --></span>\n   Red<span class=\"token punctuation\">,</span> <span class=\"token comment\">//0</span>\n   Black  <span class=\"token comment\">//1</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>接下来就可以定义节点了：</p>\n<pre><code class=\"prism language-c\">template<span class=\"token operator\">&lt;</span>class K，class V<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">RBTreeNode</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">RBTreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> pair<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> kv<span class=\"token punctuation\">,</span> Color color <span class=\"token operator\">=</span> Red<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">_left</span><span class=\"token punctuation\">(</span>nullptr<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_right</span><span class=\"token punctuation\">(</span>nullptr<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_parent</span><span class=\"token punctuation\">(</span>nullptr<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_kv</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_color</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\n\tRBTreeNode<span class=\"token operator\">&lt;</span>K，V<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> _left<span class=\"token punctuation\">;</span>\n\tRBTreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> _right<span class=\"token punctuation\">;</span>\n\tRBTreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> _parent<span class=\"token punctuation\">;</span><span class=\"token comment\">//三叉链结构</span>\n\tpair<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">&gt;</span> _kv<span class=\"token punctuation\">;</span><span class=\"token comment\">//存储键值对</span>\n\tColor _color<span class=\"token punctuation\">;</span><span class=\"token comment\">//节点颜色</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>注意这里有个细节：<strong>为什么构造结点时，默认将结点的颜色设置为红色？</strong></p>\n<p>因为我们要考虑插入场景，不论此时根节点为黑色还是红色，我们插入黑色节点，那么他一定会破坏性质 4 ，某条路径上的黑色节点一定会增加一个，那么为了维护结构，我们岂不是要给其他所有路径都加上一个黑色节点？但如果此时插入的是红色节点，如果根节点为红色，那么又会破坏性质 3 出现了连续的红色节点，但是如果根节点为黑色，就不需要进行调整。</p>\n<p>这就是一个简单的伤害最小化理论：<mark>插入黑节点，一定会破坏性质 4，必须进行调整；插入红节点，可能破坏性质 3，可能进行调整</mark>，因此我们选择将插入节点定为红色。</p>\n<h2><a id=\"_85\"></a>红黑树插入🤔</h2>\n<p>插入逻辑依然和二叉搜索树差不多，三步走：</p>\n<ol><li>按二叉搜索树的插入方法，找到待插入位置。</li><li>将待插入结点插入到树中。</li><li>若插入结点的父结点是红色的，则需要对红黑树进行调整。</li></ol>\n<p>插入的关键就在于这里的第三步，这调整里面有大学问。</p>\n<h2><a id=\"_95\"></a>插入调整🤔</h2>\n<p>我们给出一个基本模型（可以是一个完整的树，也可以是一个子树）：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f14a602eb99f4d9684e9932b5ddddfe9.png\"/></p>\n<p>并约定：</p>\n<blockquote>\n<p>cur ：当前节点<br/> p：parent，父节点<br/> g：grandfather，祖父节点<br/> u：uncle，叔叔节点<br/> a，b，c，d，e：子树</p>\n</blockquote>\n<p>顺便提一下，树的路径不是一路走到叶子结点算一条，要走到空节点（NIL 节点）算一条：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\5317b9fca95c4a74b19888bd5ca70a66.png\"/></p>\n<p>比如上图中该红黑树的有效路径不是 4 条而是 9 条。</p>\n<h3><a id=\"_115\"></a>情况一😎</h3>\n<p><font color=\"orange\" size=\"4\">cur 为红，p 为红，g 为黑， u 存在且为红</font></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\fad1bcac39f844478b32c8a525859005.png\"/></p>\n<p>首先你需要知道，<mark>红黑树的调整关键看叔叔</mark>，因为节点的颜色是固定的，祖父存在且一定为黑，为什么？因为父节点为红色那么他一定不会是根，他一定有一个父节点且为黑，只有 u 节点不知道嘛情况。</p>\n<p>我们调整并不是像 AVL 一样旋转，这里是进行变色，首先将叔叔变黑，此时就没有连续的红节点了，但是为了保持黑节点数目不变父亲也要变黑，万事大吉了吗？没有，紧接还要将祖父变红，为什么呀！？不要忘了，这里可能只是一个子树，叔叔父亲变黑了那么路径上黑节点就会多出一个，对整个结构必然有影响，所以还需要将祖父变红保持黑色数量不变。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b63813c0fe314556af79088190a2024b.png\"/><br/> 最后不要忘了将祖父当成 cur 节点继续向上调整，因为在上一层父亲的颜色不知道，祖父改变可能违反规则还会继续调整。这种情况我们左右方向，翻转过来处理方法一样，只变色不旋转。</p>\n<p>具体代码表示：</p>\n<pre><code class=\"prism language-c\">\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">!=</span> _pHead <span class=\"token operator\">&amp;&amp;</span> parent<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">==</span> Red<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tNode<span class=\"token operator\">*</span> grandfather <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>grandfather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//祖父节点有效性</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">==</span> grandfather<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tNode<span class=\"token operator\">*</span> uncle <span class=\"token operator\">=</span> grandfather<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span> <span class=\"token comment\">//情况一叔叔在祖父右</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uncle <span class=\"token operator\">&amp;&amp;</span> uncle<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">==</span> Red<span class=\"token punctuation\">)</span> <span class=\"token comment\">//叔叔在右且为红</span>\n\t\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\tparent<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">=</span> Black<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tuncle<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">=</span> Black<span class=\"token punctuation\">;</span> \n\t\t\t\t\t\tgrandfather<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">=</span> Red<span class=\"token punctuation\">;</span> \n\t\t\t\t\t\tcur <span class=\"token operator\">=</span> grandfather<span class=\"token punctuation\">;</span> <span class=\"token comment\">//继续向上调整</span>\n\t\t\t\t\t\tparent <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token keyword\">else</span> <span class=\"token comment\">//叔叔为黑情况二</span>\n\t\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n                        ……\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tNode<span class=\"token operator\">*</span> uncle <span class=\"token operator\">=</span> grandfather<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span><span class=\"token comment\">//左右翻转（叔叔在祖父左）不影响情况一，和上面一样处理</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uncle <span class=\"token operator\">&amp;&amp;</span> uncle<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">==</span> Red<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\tparent<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">=</span> Black<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tuncle<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">=</span> Black<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tgrandfather<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">=</span> Red<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tcur <span class=\"token operator\">=</span> grandfather<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tparent <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n                        ……\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_170\"></a>情况二😎</h3>\n<h4><a id=\"_171\"></a>具体情况一🎉</h4>\n<p><font color=\"orange\" size=\"4\">cur 为红，p 为红，g 为黑， u 存在且为黑<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d250685f2747454e90b0f8bfb6e8f019.png\"/></font></p>\n<p>其实这里的 a，b，c 的情况就只有 4 种情况，只要有一个黑节点就能满足：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\1a558d6a846445e08f2e9a5a91ded52b.png\"/></p>\n<p>这种情况的 cur 节点一定不是新插入节点，cur 原来是黑色，他是第一种情况向上调整过程中，祖父节点形成的 cur 节点，为什么呢？</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\4271dc1ccbcb44f5a6f32e5d2da45b0a.png\"/></p>\n<p>如上图所示，根据性质 4 假设祖父上面有 <strong>x</strong> 个黑节点，那么左子树（含祖父）现在是 <strong>x +1</strong> 个，右子树（含祖父）是 <strong>x + 2 + y</strong> 个，很明显 <strong>x + 2 + y &gt; x + 1</strong>，因此在插入结点前就已经不满足要求了，所以说叔叔结点存在且为黑这种情况，一定是由情况一往上调整过程中才会出现的！</p>\n<p>此时单纯使用变色已经无法处理了，这时我们需要进行旋转处理。若祖孙三代的关系是直线（cur、parent、grandfather这三个结点为一条直线），则<mark>一波 AVL 树里经典的旋转又来辣</mark>！这里左偏所以选择右单旋，再进行颜色调整，颜色调整后这棵被旋转子树的根结点是黑色的，且黑节点数量不变，因此无需继续往上进行处理。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\10839cfe8b3f4d53a03b9927d15f79bd.png\"/><br/> 但是此时翻转就不能像情况一一样一概而论了，反转过来偏右就要使用<mark>左单旋</mark>了。因此红黑树抽象逻辑就强在这里，能和 AVL 树契合到位的同时还能有机调整，AVL 树要是天才的话那么红黑树我只能叫他一声 lord 。</p>\n<h4><a id=\"_190\"></a>具体情况二🎉</h4>\n<p><font color=\"orange\" size=\"4\">cur 为红，p 为红，g 为黑，u 不存在</font></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\c129c2bb04864d8b86439325c582e232.png\"/></p>\n<p>在这种情况下的 cur 结点一定是新插入的结点，而不可能是由情况一变化而来的，因为叔叔不存在那么 parent 的下面也不可能再挂黑结点了。</p>\n<p>既然产生了连续的红节点那就必须把其中一个变黑，总不能把插进去的红节点变黑吧，不然就变成插黑节点了，因此就在只能把 parent 变黑，但是这样子树就会多出黑节点有会破坏结构，怎么办呢？</p>\n<p>和具体情况一同理了，祖孙三代在一条直线上偏左，一波<mark>右单旋</mark>安排，接着根节点变成 parent 后<mark>调整颜色</mark>，父亲变黑，祖父变红，一波完美升级后续也不需要再向上调整（黑节点数目不变，根节点颜色正常）。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\751feb3de6cd4817a3177b2b74d1f582.png\"/></p>\n<h4><a id=\"_202\"></a>具体情况三😎</h4>\n<p>该情况是具体情况一的区别版本，情况一是三世同堂即一条直线，这里是一条折线，他和情况二的区别就是情况二 p 在 g 的左，而 cur 是 p 的左 ，情况三 cur 在 p 的右：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\fff2b3ddbff74ec08c3bc64dfa26d21f.png\"/><br/> 那么不必多言，从 AVL 树过来的小伙伴一眼就明白该干什么了，没错，说白了就是单旋变双旋：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\19103e7f962e496db9fc629dab835e90.png\"/></p>\n<p>以上情况的完整如下：</p>\n<pre><code class=\"prism language-c\">pair<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> bool<span class=\"token operator\">&gt;</span> <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> pair<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> kv<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_root <span class=\"token operator\">==</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token comment\">//若红黑树为空树，则插入结点直接作为根结点</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t_root <span class=\"token operator\">=</span> new <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t_root<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span> <span class=\"token comment\">//根结点必须是黑色</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>_root<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//插入成功</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//找到待插入位置</span>\n\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _root<span class=\"token punctuation\">;</span>\n\tNode<span class=\"token operator\">*</span> parent <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;</span> cur<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//key值小于当前结点的走左子树</span>\n\t\t\tparent <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&gt;</span> cur<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//key值大于当前结点的走右子树</span>\n\t\t\tparent <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token comment\">//待插入结点的key值=当前结点</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//插入失败</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">//插入到树中</span>\n\tcur <span class=\"token operator\">=</span> new <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//构造结点</span>\n\tNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span> <span class=\"token comment\">//记录新插入的结点（便于后序返回）</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;</span> parent<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//新结点的key值小于parent插入到左边</span>\n\t\tparent<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\tcur<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//新结点的key值大于parent插入到右边</span>\n\t\tparent<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\tcur<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">//若插入结点的父结点是红色的，则需要对红黑树进行调整</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>parent<span class=\"token operator\">&amp;&amp;</span>parent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tNode<span class=\"token operator\">*</span> grandfather <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span> <span class=\"token comment\">//parent是红色，则其父结点一定存在</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">==</span> grandfather<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">)</span> <span class=\"token comment\">//parent是grandfather的左孩子</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tNode<span class=\"token operator\">*</span> uncle <span class=\"token operator\">=</span> grandfather<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span> <span class=\"token comment\">//uncle是grandfather的右孩子</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uncle<span class=\"token operator\">&amp;&amp;</span>uncle<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span> <span class=\"token comment\">//情况1：uncle存在且为红</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token comment\">//颜色调整</span>\n\t\t\t\tparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> uncle<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\t\t\t\tgrandfather<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n\n\t\t\t\t<span class=\"token comment\">//继续往上处理</span>\n\t\t\t\tcur <span class=\"token operator\">=</span> grandfather<span class=\"token punctuation\">;</span>\n\t\t\t\tparent <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token comment\">//情况2+情况3：uncle不存在 + uncle存在且为黑</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">==</span> parent<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token function\">RotateR</span><span class=\"token punctuation\">(</span>grandfather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//右单旋</span>\n\n\t\t\t\t\t<span class=\"token comment\">//颜色调整</span>\n\t\t\t\t\tgrandfather<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n\t\t\t\t\tparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">else</span> <span class=\"token comment\">//cur == parent-&gt;_right</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token function\">RotateLR</span><span class=\"token punctuation\">(</span>grandfather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//左右双旋</span>\n\n\t\t\t\t\t<span class=\"token comment\">//颜色调整</span>\n\t\t\t\t\tgrandfather<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n\t\t\t\t\tcur<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> \n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token comment\">//parent是grandfather的右孩子</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tNode<span class=\"token operator\">*</span> uncle <span class=\"token operator\">=</span> grandfather<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span> <span class=\"token comment\">//uncle 是 grandfather 的左孩子</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uncle<span class=\"token operator\">&amp;&amp;</span>uncle<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span> <span class=\"token comment\">//情况1：uncle存在且为红</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token comment\">//颜色调整</span>\n\t\t\t\tuncle<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\t\t\t\tgrandfather<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n\n\t\t\t\t<span class=\"token comment\">//继续往上处理</span>\n\t\t\t\tcur <span class=\"token operator\">=</span> grandfather<span class=\"token punctuation\">;</span>\n\t\t\t\tparent <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token comment\">//uncle不存在/ uncle存在且为黑</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t    <span class=\"token comment\">//         g</span>\n\t\t\t\t<span class=\"token comment\">//     p       u</span>\n\t\t\t\t<span class=\"token comment\">// cur</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">==</span> parent<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token function\">RotateRL</span><span class=\"token punctuation\">(</span>grandfather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//右左双旋</span>\n\n\t\t\t\t\t<span class=\"token comment\">//颜色调整</span>\n\t\t\t\t\tcur<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\t\t\t\t\tgrandfather<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token comment\">//        g</span>\n\t\t\t\t<span class=\"token comment\">//    u       p</span>\n\t\t\t\t<span class=\"token comment\">//        cur</span>\n\t\t\t\t<span class=\"token keyword\">else</span> \n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token function\">RotateL</span><span class=\"token punctuation\">(</span>grandfather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//左单旋</span>\n\n\t\t\t\t\t<span class=\"token comment\">//颜色调整</span>\n\t\t\t\t\tgrandfather<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n\t\t\t\t\tparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//子树旋转后，该子树的根变成了黑色，无需继续往上进行处理</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t_root<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span> <span class=\"token comment\">//暴力处理根节点颜色，防止向上处理根节点变红</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>newnode<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//左单旋</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">RotateL</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> parent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tNode<span class=\"token operator\">*</span> subR <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n\tNode<span class=\"token operator\">*</span> subRL <span class=\"token operator\">=</span> subR<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\tNode<span class=\"token operator\">*</span> parentParent <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//建立subRL与parent之间的联系</span>\n\tparent<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">=</span> subRL<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subRL<span class=\"token punctuation\">)</span>\n\t\tsubRL<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//建立parent与subR之间的联系</span>\n\tsubR<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\tparent<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> subR<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//建立subR与parentParent之间的联系</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentParent <span class=\"token operator\">==</span> nullptr<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t_root <span class=\"token operator\">=</span> subR<span class=\"token punctuation\">;</span>\n\t\t_root<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">==</span> parentParent<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tparentParent<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">=</span> subR<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tparentParent<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">=</span> subR<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tsubR<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parentParent<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//右单旋</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">RotateR</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> parent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tNode<span class=\"token operator\">*</span> subL <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\tNode<span class=\"token operator\">*</span> subLR <span class=\"token operator\">=</span> subL<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n\tNode<span class=\"token operator\">*</span> parentParent <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//建立subLR与parent之间的联系</span>\n\tparent<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">=</span> subLR<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subLR<span class=\"token punctuation\">)</span>\n\t\tsubLR<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//建立parent与subL之间的联系</span>\n\tsubL<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\tparent<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> subL<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//建立subL与parentParent之间的联系</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentParent <span class=\"token operator\">==</span> nullptr<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t_root <span class=\"token operator\">=</span> subL<span class=\"token punctuation\">;</span>\n\t\t_root<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">==</span> parentParent<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tparentParent<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">=</span> subL<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tparentParent<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">=</span> subL<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tsubL<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parentParent<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//左右双旋</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">RotateLR</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> parent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">RotateL</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">RotateR</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//右左双旋</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">RotateRL</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> parent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">RotateR</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">RotateL</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>（对旋转有疑惑的小伙伴请走传送门：<a href=\"https://blog.csdn.net/qq_61500888/article/details/126699624\">手撕 AVL 树</a>）</p>\n<p><font color=\"blue4\" size=\"4\">注意，最后根节点我们暴力处理颜色设为黑色，防止向上调整时将根节点变为了红色的情况。</font></p>\n<h2><a id=\"_435\"></a>验证红黑树🤔</h2>\n<p>还是老套路，先来一手中序遍历看这棵树是否满足二叉搜索树性质：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">Inorder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">_Inorder</span><span class=\"token punctuation\">(</span>_root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">_Inorder</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> nullptr<span class=\"token punctuation\">)</span><span class=\"token comment\">//空树也是红黑树</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">_Inorder</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> root<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">_Inorder</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>然后要验证红黑树的整体结构，灵魂就在于<mark>是否满足五大特性</mark>：</p>\n<pre><code class=\"prism language-c\">\tNode<span class=\"token operator\">*</span> <span class=\"token function\">GetRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//取根节点函数</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> _pHead<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\tbool <span class=\"token function\">IsValidRBTRee</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tNode<span class=\"token operator\">*</span> pRoot <span class=\"token operator\">=</span> <span class=\"token function\">GetRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//取根节点</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pRoot <span class=\"token operator\">==</span> nullptr<span class=\"token punctuation\">)</span><span class=\"token comment\">//空树也是红黑树</span>\n\t\t\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pRoot<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">!=</span> Black<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"违反性质一：根节点是黑色\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token class-name\">size_t</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> pRoot<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token comment\">//取最左路径的黑节点个数为验证标准</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">==</span> Black<span class=\"token punctuation\">)</span>\n\t\t\t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token class-name\">size_t</span> pathB <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//记录需验证路径的黑节点个数</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">_IsValidRBTRee</span><span class=\"token punctuation\">(</span>pRoot<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> pathB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//封装函数进行递归验证</span>\n\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\tbool  <span class=\"token function\">_IsValidRBTRee</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> pRoot<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> count<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> pathB<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pRoot <span class=\"token operator\">==</span> nullptr<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pRoot<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">==</span> Black<span class=\"token punctuation\">)</span>\n\t\t\t\tpathB<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\tNode<span class=\"token operator\">*</span> parent <span class=\"token operator\">=</span> pRoot<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span><span class=\"token comment\">//遇到红节点检查其父亲（红节点一定存在父亲）</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">==</span> Red <span class=\"token operator\">&amp;&amp;</span> parent <span class=\"token operator\">!=</span> _pHead <span class=\"token operator\">&amp;&amp;</span> pRoot<span class=\"token operator\">-&gt;</span>_color <span class=\"token operator\">==</span> Red<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"违反性质3：不能存在连在一起的红色节点\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pRoot<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">==</span> nullptr <span class=\"token operator\">&amp;&amp;</span> pRoot<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">==</span> nullptr<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pathB <span class=\"token operator\">!=</span> count<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"违反性质4：每条路径中黑色节点个数均相同\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">_IsValidRBTRee</span><span class=\"token punctuation\">(</span>pRoot<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> pathB<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">_IsValidRBTRee</span><span class=\"token punctuation\">(</span>pRoot<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> pathB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_508\"></a>红黑树查找🤔</h2>\n<p>红黑树的查找函数与二叉搜索树的查找方式一模一样，四步走：</p>\n<blockquote>\n<p>若树为空树，则查找失败，返回nullptr。<br/> 若key值小于当前结点的值，则应该在该结点的左子树当中进行查找。<br/> 若key值大于当前结点的值，则应该在该结点的右子树当中进行查找。<br/> 若key值等于当前结点的值，则查找成功，返回对应结点。</p>\n</blockquote>\n<pre><code class=\"prism language-c\">Node<span class=\"token operator\">*</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _root<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">&lt;</span> cur<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span> \n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span> \n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">&gt;</span> cur<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span> \n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span> \n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> cur<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> nullptr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_540\"></a>红黑树的删除🤔</h2>\n<p>还是在 AVL 树说的，高阶数据结构概不展示删除部分，过于打脑壳有兴趣的自行查阅即可。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\cdcdfc128dd74911aa02fce12f977a0a.png\"/></p>\n<h2><a id=\"_547\"></a>谁是一代宗师🤔</h2>\n<p>AVL 树和红黑树都是平衡二叉树的两个老大哥，他们增删查改的时间复杂度都是 O(logN)，到底谁更技高一筹？</p>\n<p>其实在大数据的场景下，比如百万级量化数据，AVL 需要构建大约 20 多层，同时红黑树需要构建大约 40 多层，毕竟红黑树是近似平衡的二叉搜索树。</p>\n<p>但是我们知道 20 和 40 在 CPU 运算速度面前并没有什么差别，虽然 AVL 树在效率上会略胜红黑树一点点，但是生活中红黑树的运用却比 AVL 树更为广泛，因为 AVL 树的效率是有代价的，是充分牺牲结构进行不断旋转得到的，而红黑树大大降低了旋转次数会更安全因此，换来了更优的性能</p>\n<p>aqa 芭蕾 eqe 亏内，代表着开心代表着快乐，ok 了家人们。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}