{"blogid": "120400915", "writerAge": "码龄1年", "writerBlogNum": "67", "writerCollect": "2132", "writerComment": "2068", "writerFan": "8564", "writerGrade": "6级", "writerIntegral": "5939", "writerName": "芒果再努力", "writerProfileAdress": "writer_image\\profile_120400915.jpg", "writerRankTotal": "2484", "writerRankWeekly": "1883", "writerThumb": "2422", "writerVisitNum": "79809", "blog_read_count": "1213", "blog_time": "于 2021-09-21 14:18:03 发布", "blog_title": "C语言-常用字符函数详解+模拟实现", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p><strong> 今天是2021年9月21日，首先祝大家中秋节快乐啦！</strong>但愿人长久，千里共婵娟。又是一年月圆，祝大家在中秋节都能和你爱的人和爱你的人团圆~</p>\n<p>接下来进入整体啦~</p>\n<hr/>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"1.%E5%AD%97%E7%AC%A6%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:0px;\"><a href=\"#1.%E5%AD%97%E7%AC%A6%E5%87%BD%E6%95%B0\" title=\"1.字符函数\">1.字符函数</a></p>\n<p id=\"strlen()-toc\" style=\"margin-left:40px;\"><a href=\"#strlen%28%29\" title=\"strlen()\">strlen()</a></p>\n<p id=\"strcpy()-toc\" style=\"margin-left:40px;\"><a href=\"#strcpy%28%29\" title=\"strcpy()\">strcpy()</a></p>\n<p id=\"strcat()-toc\" style=\"margin-left:40px;\"><a href=\"#strcat%28%29\" title=\"strcat()\">strcat()</a></p>\n<p id=\"strncpy()-toc\" style=\"margin-left:40px;\"><a href=\"#strncpy%28%29\" title=\"strncpy()\">strncpy()</a></p>\n<p id=\"strcmp()-toc\" style=\"margin-left:40px;\"><a href=\"#strcmp%28%29\" title=\"strcmp()\">strcmp()</a></p>\n<p id=\"strncat()-toc\" style=\"margin-left:40px;\"><a href=\"#strncat%28%29\" title=\"strncat()\">strncat()</a></p>\n<p id=\"strncmp()-toc\" style=\"margin-left:40px;\"><a href=\"#strncmp%28%29\" title=\"strncmp()\">strncmp()</a></p>\n<p id=\"strstr()-toc\" style=\"margin-left:40px;\"><a href=\"#strstr%28%29\" title=\"strstr()\">strstr()</a></p>\n<p id=\"strtok()-toc\" style=\"margin-left:40px;\"><a href=\"#strtok%28%29\" title=\"strtok()\">strtok()</a></p>\n<p id=\"2.%E6%80%BB%E7%BB%93-toc\" style=\"margin-left:0px;\"><a href=\"#2.%E6%80%BB%E7%BB%93\" title=\"2.总结\">2.总结</a></p>\n<hr id=\"hr-toc\"/>\n<h3>下列函数都是包含在#include&lt;string.h&gt;的库函数，若要使用，要现在最开始包含这个库</h3>\n<hr/>\n<h1>strlen()</h1>\n<p><img alt=\"\" height=\"156\" src=\"image\\20210921134740861.png\" width=\"728\"/></p>\n<p>1.作用：求字符串长度</p>\n<ul><li> <p>字符串以\\0为结束标志，strlen()函数返回的是在字符串中‘\\0’前面出现的字符个数(不包含\\0) </p> </li><li> <p>参数指向的字符串必须要以\\0结尾</p> </li><li>函数的返回类型为size_t，是无符号数</li></ul>\n<hr/>\n<p></p>\n<p>2.模拟实现：</p>\n<p>方法1：计数器</p>\n<pre><code>size_t  my_strlen(const char* str)\n{\n\tsize_t count = 0;\n\twhile (*str)\n\t{\n\t\tcount++;\n\t\tstr++;\n\t}\n\treturn count;\n}\nint main()\n{\n\tchar* str = \"Mango\";\n\tsize_t count = my_strlen(str);\n\tprintf(\"%u\\n\", count);\n\treturn 0;\n}</code></pre>\n<hr/>\n<p>方法2： 指针-指针</p>\n<p><span style=\"color:#fe2c24;\">指针-指针-&gt;得到的是二者相差的元素的个数</span>  所以一个尾指针指向\\0，一个指向起始位置，二者相减得到的就是字符串长度</p>\n<pre><code>size_t my_strlen(const char* str)\n{\n\tconst char* start = str;\n\tconst char* end = str;\n\twhile (*end)\n\t{\n\t\tend++;\n\t}\n\treturn end - start;\n}\nint main()\n{\n\tchar* str = \"Mango\";\n\tsize_t count = my_strlen(str);\n\tprintf(\"%u\\n\", count);\n\treturn 0;\n}</code></pre>\n<hr/>\n<p>方法3：递归 </p>\n<pre><code>size_t my_strlen(const char* str)\n{\n    //如果指向的不是\\0，就+1（本身指向的字符），然后递归下一个字符\n\tif (*str)\n\t{\n\t\treturn 1 + my_strlen(str + 1);\n\t}\n    //str指向的是\\0就返回0\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nint main()\n{\n\tchar* str = \"Mango\";\n\tsize_t count = my_strlen(str);\n\tprintf(\"%u\\n\", count);\n\treturn 0;\n}</code></pre>\n<hr/>\n<h2>strcpy()</h2>\n<p><img alt=\"\" height=\"180\" src=\"image\\20210921135107610.png\" width=\"689\"/></p>\n<p> </p>\n<p>1.作用：字符串拷贝，strcpy：拷贝的是源字符串开始向后直到\\0前的内容</p>\n<p>注意点：</p>\n<ul><li><strong>源字符串必须以\\0结束 </strong></li><li> <p><strong>会将源字符串的\\0拷贝到目标空间</strong></p> </li><li> <p><strong>目标空间必须足够大，以确保能存放源字符串 </strong></p> </li><li> <p><strong>目标空间必须可变</strong></p> </li></ul>\n<hr/>\n<p>2.模拟实现</p>\n<p> <strong>注意点：源字符串不修改，所以用const修饰</strong>，返回类型为char*，返回的是目标空间的起始地址，所以定义一个指针保存起始地址，然后将src指向的内容拷贝到dest中</p>\n<pre><code>char* my_strcpy(char* dest,const char* src)\n{\n    assert(dest&amp;&amp;src);\n    char* ret = dest;\t//保存起始地址\n    while(*src)\n    {\n        *dest = *src;\n        dest++;\n        src++;       \n    }\n    //上述只是完成了将src中\\0之前的内容拷贝\n    //还要拷贝\\0\n    *dest = *src;\n    return ret;\n}\nint main()\n{\n    char arr1[] = \"xxxxxxx\";\n    char arr2[] = \"Mango\";\n    char* ret = my_strcpy(arr1,arr2);\n    printf(\"%s\\n\",arr1);\n    printf(\"%s\\n\",ret);\n    return 0;\n}</code></pre>\n<hr/>\n<p>简易写法：</p>\n<pre><code>char* my_strcpy(char* dest,const char* src)\n{\n    assert(dest&amp;&amp;src);\n    char* ret = dest;\t//保存起始地址\n    while(*dest++ = *src++)\n    {\n        ;\n    }\n    return ret;\n}</code></pre>\n<p>最后一次，src指向\\0，把\\0也拷贝过去之后，while判断表达式为假，跳出循环。  </p>\n<hr/>\n<h2>strcat()</h2>\n<p><img alt=\"\" height=\"169\" src=\"image\\20210921135501861.png\" width=\"662\"/></p>\n<p>1.作用：字符串追加函数，从目标空间的\\0位置开始向后追加源字符串</p>\n<hr/>\n<p>注意事项：</p>\n<ul><li> <p><strong>源字符串必须以\\0结尾</strong></p> </li><li> <p><strong>目标空间也必须足够大，能容纳下源字符串的内容</strong></p> </li><li> <p><strong>目标空间必须可修改</strong></p> </li><li> <p><strong>不可以给自己追加！</strong></p> </li></ul>\n<hr/>\n<p>2.模拟实现</p>\n<blockquote>\n<p>思路：由于是在目标空间的\\0位置开始向后追加，所以要先找到目标空间的\\0位置，<strong>追加类似于strcpy过程</strong>，一个字符一个字符的追加，直到遇到源字符串的\\0</p>\n<p>注意：返回的是目标空间的起始地址，所以用指针变量保存它的地址。源字符串不修改，所以用const修饰</p>\n</blockquote>\n<pre><code>char* my_strcat(char* dest,const char* src)\n{\n    assert(dest &amp;&amp; src);\n\tchar* ret = dest;\n\t//1.找到目标空间的\\0位置\n\twhile (*dest)\n\t{\n\t\tdest++;\n\t}\n\t//跳出循环时，dest指向的就是目标空间的\\0位置，从该位置向后追加，相当于strcpy\n\twhile (*dest++ = *src++)\n\t{\n\t\t;\n\t}\n\treturn ret;\n}\nint main()\n{\n\tchar arr1[20] = \"Mango\";\n\tchar arr2[] = \"Hello\";\n\tmy_strcat(arr1, arr2);\n\tprintf(\"%s\\n\", arr1);\n\treturn 0;\n}</code></pre>\n<p></p>\n<hr/>\n<h2>strncpy()</h2>\n<p><img alt=\"\" height=\"182\" src=\"image\\20210921135821961.png\" width=\"661\"/></p>\n<hr/>\n<h3> strcmp()</h3>\n<p><img alt=\"\" height=\"150\" src=\"image\\20210921135655567.png\" width=\"588\"/></p>\n<p><img alt=\"\" height=\"153\" src=\"image\\2021092113572074.png\" width=\"844\"/></p>\n<p>1.作用：字符串比较函数，<strong>strcmp 是比较字符串的库函数，比较的是字符串的内容，不是长度</strong>。<strong>比较的是两个字符串中，二者对应的第一个不相等字符的ascii码值大小</strong>, 比较的是\\0之前的字符</p>\n<p> 2.模拟实现</p>\n<blockquote>\n<p>思路：遍历两个字符串，对应位置的字符比较是否相等，找到第一个二者对应不相等的字符，解引用，比较其对应的ascii码值</p>\n<p><strong>注意：</strong>当二者指向的字符相同时，判断其中一个指向的是不是\\0，如果是，说明这两个字符串是一样的，</p>\n<p>两个字符串只需要比较，不需要修改，所以用const修</p>\n</blockquote>\n<pre><code>int my_strcmp(const char* s1,const char* s2)\n{\n    assert(s1 &amp;&amp; s2);\n    //当二者指向的字符相同时，继续找，直到找到不相等的,或者其中一个为\\0了，那就跳出循环\n    while(*s1 == *s2)\n    {\n        //先判断其中一个是不是\\0，如果是，说明两个字符串是一样的，二者都指向了\\0\n        if(*s1 == '\\0')\n        {\n            return 0;\n        }\n        s1++;\n        s2++;\n    }\n    //找到指向不想等的字符了(或者一个为\\0了)，解引用比较对应的值\n    return *s1 - *s2;\n}\nint main()\n{\n\tchar arr1[] = \"abcd\";\n\tchar arr2[]  = \"\";\n\tint ret = my_strcmp(arr1, arr2);\n\tif (ret &gt; 0)\n\t{\n\t\tprintf(\"arr1 &gt; arr2\\n\");\n\t}\n\telse if (ret &lt; 0 )\n\t{\n\t\tprintf(\"arr1 &lt; arr2\\n\");\n\t}\n\telse\n\t{\n\t\tprintf(\"arr1 = arr2\\n\");\n\t}\n\treturn 0;\n}</code></pre>\n<hr/>\n<h2>strncat()</h2>\n<p><img alt=\"\" height=\"149\" src=\"image\\20210921135736895.png\" width=\"639\"/></p>\n<p>1，作用：字符串追加函数，和strcat的区别：此函数可以限制追加多少字节的内容</p>\n<p> <strong>当要追加的长度大于(小于)源字符串长度时，追加至源字符串\\0位置即停止追加</strong>,追加结束后放入\\0</p>\n<hr/>\n<p>2.模拟实现</p>\n<blockquote>\n<p> <strong>思路：</strong></p>\n<p>1.找到目标空间的\\0位置</p>\n<p>2.进行拷贝，共拷贝n次，（<strong>注意：拷贝过程中，有可能源字符串提前遇到\\0，或者要拷贝的长度比源字符串长度长</strong>）</p>\n<p>3.进行判断count是否还&gt;0，如果还&gt;0，说明提前遇到\\0，或者源字符串长度比要拷贝的长度短。这样的话，在目标空间追加完的下一个位置补\\0</p>\n</blockquote>\n<pre><code>char* my_strncat(char* dest, char* src, size_t count)\n{\n\tassert(dest &amp;&amp; src);\n\tchar* tmp = dest;\n\t//1.找到目标空间\\0位置\n\twhile (*dest!='\\0')\n\t{\n\t\tdest++;\n\t}\n\t//跳出时，dest指向的就是\\0，从此处开始拷贝\n\twhile (count-- &amp;&amp; (*dest++ = *src++))\n\t{\n\t\t;\n\t}\n    //追加结束后，补\\0\n     //上面while拷贝完后，dest指向的是追加完成后的下一个位置，在此位置补\\0\n\t\t*dest = '\\0';\n\treturn tmp;\n}\nint main()\n{\n\tchar arr1[20] = \"Mango\\0xxxxxx\";\n\tchar arr2[] = \"Lemon\";\n\tmy_strncat(arr1, arr2, 2);\n\tprintf(\"%s\\n\", arr1);\n}</code></pre>\n<hr/>\n<h3> strncmp()</h3>\n<p><img alt=\"\" height=\"148\" src=\"image\\20210921135710954.png\" width=\"695\"/></p>\n<p><img alt=\"\" height=\"153\" src=\"image\\20210921135715835.png\" width=\"844\"/></p>\n<hr/>\n<p> 1.作用：</p>\n<p><strong>strncmp的功能和strcmp的功能和相似，只不过多了一个参数用来确定比较的个数</strong></p>\n<p><strong>比较到出现另个字符不一样或者一个字符串结束或者num个字符全部比较完</strong></p>\n<hr/>\n<p>2.模拟实现</p>\n<pre><code>int my_strncmp(char* dest, char* src, size_t count)\n{\n    assert(dest &amp;&amp; src);\n    //找到前count个字符中，不相等的字符\n    while (count)\n    {\n        count--;\n        //二者指向相等，继续往下找\n        if (*dest == *src)\n        {\n            //若二者相等，且都是\\0，则返回0\n            if(*dest == '\\0')\n            {\n                return 0;\n            }\n            dest++;\n            src++;\n        }\n        else\t//二者指向不相等，跳出循环\n            break;\n    }\n    //跳出时，找到不想等的字符，或者二者相等\n    return *dest - *src;\n}\nint main()\n{\n    char* str1 = \"abcdef\";\n    char* str2 = \"abcd\";\n    int ret = my_strncmp(str1, str2, 3);\n    if (ret &gt; 0)\n    {\n        printf(\"str1&gt;str2\\n\");\n    }\n    else if (ret &lt; 0)\n    {\n        printf(\"str1 &lt; str2\\n\");\n    }\n    else\n    {\n        printf(\"str1= str2\\n\");\n    }\n    return 0;\n}</code></pre>\n<hr/>\n<h2>strstr()</h2>\n<p><img alt=\"\" height=\"162\" src=\"image\\20210921135749674.png\" width=\"567\"/></p>\n<p>1.作用： <strong>在一个主字符串找查找子字符串，如果找到了，反正子字符串在主字符串的起始位置，找不到，则返回空指针</strong></p>\n<p>注意：返回的是第一次出现的位置</p>\n<hr/>\n<p>2.模拟实现</p>\n<blockquote>\n<p> 注意：遍历两个字符串进行比较，定义3个指针，一个指针用于遍历主字符串，一个指针用于遍历字符串，一个指针用于保存主串开始遍历的位置（方便后序返回子串在主串的起始位置）</p>\n<p>当子字符串走到\\0时，说明找到了，</p>\n<p>当主子符串走到\\0时，要么主字符串和子字符串相等，要么就是找不到</p>\n<p><strong>当子字符串为空字符串时，返回主字符串的起始地址(库函数就是这么写的)</strong></p>\n</blockquote>\n<hr/>\n<p> 图解：</p>\n<p><img alt=\"\" height=\"666\" src=\"image\\2021092114044061.png\" width=\"890\"/>代码：</p>\n<pre><code>//返回子串出现在主串的第一个位置\nchar* my_strstr(const char* str1, const char* str2)\n{\n\tassert(str1 &amp;&amp; str2);\n\tchar* s1;\t//用来遍历str1\n\tchar* s2;\t//用来遍历str2\n\tchar* cp = str1;\t//用于保存主子符串开始遍历的位置\n\n\t//如果str2为空字符串，直接返回str1的地址\n\tif (*str2 == '\\0')\n\t{\n\t\treturn str1;\n\t}\n\t//遍历主串与子串比较\n\twhile (*cp)\n\t{\n\t\ts1 = cp;\t//s1从cp位置开始向后比较\n\t\ts2 = str2;\t//s2回到原始位置\n\t\twhile ((*s1 == *s2)&amp;&amp;*s1&amp;&amp;*s2)\t//不仅要保证二者指向字符相等，还要保证s1和s2指向的不是\\0\n\t\t{\n\t\t\ts1++;\n\t\t\ts2++;\n\t\t}\n\t\tif (*s2 == '\\0')\n\t\t{\n\t\t\treturn cp;\t//返回子串在主串的起始位置\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//s1和s2指向不相等，cp指向下一个字符，然后下一次循环，把cp的值赋给s1用于下次遍历\n\t\t\tcp++;\n\t\t}\n\t}\n\t//跳出while循环时，说明主串都遍历完了，说明找不到-&gt;返回NULL\n\treturn NULL;\n}\nint main()\n{\n\tchar* str1 = \"MangoLemon\";\n\tchar* str2 = \"an\";\n\tchar* tmp = strstr(str1, str2);\n\tchar* tmpp = my_strstr(str1, str2);\n\tprintf(\"%s\\n\", tmp);\n\tprintf(\"%s\\n\", tmpp);\n\treturn 0;\n}</code></pre>\n<hr/>\n<h3>strtok()</h3>\n<p><img alt=\"\" height=\"163\" src=\"image\\20210921135804660.png\" width=\"577\"/></p>\n<p>1.作用： 字符串切割</p>\n<ul><li> <p><strong>第二个参数是个字符串，定义了用作分割字符串的集合 </strong></p> </li><li> <p><strong>strtok函数找到str中的下一个标记，并将其用\\0结尾，返回一个指向这个标记的指针(注意：strtok函数会改变被操作的字符串，所以在使用strtok函数切分的字符串一般都是临时拷贝的内容且可修改)</strong></p> </li><li> <p><strong>strtok函数的第一个参数不为NULL时：函数将找到str中第一个标记，strtok函数将保存它在字符串中位置</strong></p> </li><li> <p><strong>strtok的第一个参数为NULL时，函数将在同一个字符串中被保存的位置开始，查找下一个标志</strong></p> </li><li> <p><strong>如果字符串中不存在更多的标志，就返回NULL </strong></p> </li></ul>\n<hr/>\n<p> 例子：</p>\n<p><img alt=\"\" height=\"496\" src=\"image\\20210921140713620.png\" width=\"1200\"/></p>\n<p><img alt=\"\" height=\"300\" src=\"image\\20210921140635572.png\" width=\"474\"/> </p>\n<p> </p>\n<pre><code>int main()\n{\n    char arr1[] = \"Mango@Lemon.Jiayou\";\n    char arr2[100] = {0};\t//防止strtok函数改变arr1中的数据，使用临时数组arr2\n\tchar sep[] = \"@.\";\t//分割字符串的集合，即遇到@ 或者.就分割字符串\n    strcpy(arr2,arr1);\n    char* ret = NULL;\n    //分割字符串\n    //注意：第一次传传参为arr2，后序传参都传NULL\n    for(ret = strtok(arr2,sep); ret != NULL; ret = strtok(NULL,sep))\n    {\n        printf(\"%s\\n\",ret);\n    }\n    //相当于\n    //char* ret2 =strtok(arr2, sep);\n\t//printf(\"%s\\n\", ret2);\n\t//ret2 =strtok(NULL, sep);\n\t//printf(\"%s\\n\", ret2);\n}</code></pre>\n<hr/>\n<h1> 2.总结</h1>\n<p>上述的函数中，</p>\n<blockquote>\n<p>strcpy()         strcat()          strcmp()  </p>\n</blockquote>\n<p>上述三个函数不够安全 长度不受限制的字符串函数。要么就一直追加/拷贝，直到遇到\\0，或者一直比较，直到遇到不相等的字符</p>\n<hr/>\n<blockquote>\n<p>strncpy()   strncat()   strncmp()   </p>\n</blockquote>\n<p>此三个函数可以控制字节数，相对安全！</p>\n<hr/>\n<p> 本文将持续更新那些博主今后遇到的其他的字符函数~欢迎关注！</p>\n<p><span style=\"color:#fe2c24;\">如果感觉此文对你有帮助，请给博主一个三连吧！大家中秋节快乐！</span></p>\n</div>\n</div>"}