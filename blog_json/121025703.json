{"blogid": "121025703", "writerAge": "码龄4年", "writerBlogNum": "280", "writerCollect": "942", "writerComment": "66", "writerFan": "114", "writerGrade": "6级", "writerIntegral": "5611", "writerName": "、Edgar", "writerProfileAdress": "writer_image\\profile_121025703.jpg", "writerRankTotal": "162275", "writerRankWeekly": "34106", "writerThumb": "278", "writerVisitNum": "425910", "blog_read_count": "3583", "blog_time": "于 2021-10-28 23:30:50 发布", "blog_title": "Rust 引入其他的 rs 文件", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"Rust__rs___1\"></a>Rust 中如何引入其他的 rs 文件 ？</h2>\n<p>最近在用 Rust 写一个课程项目，网上没有找到很好的文章说明如何引用文件，这里做一个简单的笔记。</p>\n<h3><a id=\"_mod__5\"></a>使用 <code>mod</code> 引入本地文件</h3>\n<p>比如说，我现在通过 <code>cargo new</code> 创建一个项目,然后我新建了一个 <code>cache.rs</code> 文件，和<code>main.rs</code>同级，里面定义了一个结构体以及相关的函数</p>\n<pre><code class=\"prism language-rust\">pub struct Cache {}\n\nimpl Cache {\n    pub fn new() -&gt; Cache {\n        return Cache {};\n    }\n    pub fn set(&amp;mut self, _key: String, _value: String) {}\n\n    pub fn get(&amp;mut self, _key: &amp;String) -&gt; String {\n        return \"\".to_string();\n    }\n}\n\n</code></pre>\n<p>现在我想要在 <code>main.rs</code> 中引用其中定义的结构体，比如这样</p>\n<pre><code class=\"prism language-rust\">let mut c = cache::Cache::new();\n\nc.set(String::from(\"key\"), String::from(\"value\"));\n</code></pre>\n<p>其实很简单，在 <code>main.rs</code> 中声明 <code>mod cache;</code> 就 OK 了， <code>main.rs</code> 的最终代码就是这样了,也就多了一行代码，如果我们想要引入其他的文件，其实都是一样的，多加几个 <code>mod</code> 声明就好了，不过需要注意需要导出的定义需要加 <code>pub</code> 声明。</p>\n<pre><code class=\"prism language-rust\">mod cache;\n\nfn main() {\n  let mut c = cache::Cache::new();\n\n  c.set(String::from(\"key\"), String::from(\"value\"));\n}\n</code></pre>\n<hr/>\n<p>但是如果说 <code>cache.rs</code> 属于 <code>cache</code> 目录下呢，目录结构像这样：</p>\n<pre><code>├── Cargo.lock\n├── Cargo.toml\n├── src\n│   ├── cache\n│   │   └── cache.rs\n│   └── main.rs\n</code></pre>\n<p>这样应该如何处理呢？其实，操作比较类似，但是我们需要在 <code>cache</code> 目录下建立一个 <code>mod.rs</code> (Rust中的一个特殊文件) 用于模块的声明，就相当于声明 <code>cache</code> 这个目录下有哪一些模块。</p>\n<pre><code>├── Cargo.lock\n├── Cargo.toml\n├── src\n│   ├── cache\n│   │   ├── cache.rs\n│   │   └── mod.rs\n│   └── main.rs\n</code></pre>\n<p>因为我们这个模块里面可能会存在一些私有模块，不想导出，那么我们不声明为 <code>pub</code> 即可，这里我们需要导出 <code>cache.rs</code> 中的定义，所以 <code>mod.rs</code> 中的内容应该为 <code>pub mod cache;</code>， 然后在 <code>main.rs</code> 中同样声明 <code>mod cache</code>;</p>\n<p>但是这样你会发现，在 <code>main.rs</code> 中想要引入 <code>strcut Cache</code> 的时候需要使用 <code>cache::cache::Cache::new()</code>，这是因为我们这种形式的声明相当于:</p>\n<pre><code class=\"prism language-rust\">mod cache {\n  mod cache {\n    pub struct Cache{}\n  }\n}\n</code></pre>\n<p>这使用起来就不太友好了，针对这种情况，我们可以在 <code>cache/mod.rs</code> 中对定义的变量进行重导出，其实就是添加了一句话：</p>\n<pre><code class=\"prism language-rust\">pub use cache::Cache;\n</code></pre>\n<p>我们可以简单的认为相当于将 Cache 提升了一层，变成了下面的情况，但是在 <code>main.rs</code> 中还是可以通过 <code>cache::cache::Cache</code> 进行访问</p>\n<pre><code class=\"prism language-rust\">mod cache{\n  mod cache{\n    pub struct Cache;\n  }\n  pub struct Cache;\n}\n</code></pre>\n<h3><a id=\"_use__lib_89\"></a>使用 <code>use</code> 引入本地的 <code>lib</code></h3>\n<p>比如我现在需要复用另外一个本地已经包装好的库，而不是引入文件，比如说他们的位置如下，lib 包的位置也可以提到外面去，操作类似。</p>\n<pre><code>├── Cargo.lock\n├── Cargo.toml \n├── cache  # 本地 lib \n│   ├── Cargo.toml\n│   └── src\n│       └── lib.rs  # struct Cache 移到这里\n├── src\n│   ├── cache\n│   │   ├── cache.rs\n│   │   └── mod.rs\n│   └── main.rs\n</code></pre>\n<p>那么我们需要需要在 <code>Cargo.toml</code> 中引入 <code>cache lib</code>，具体写法如下：</p>\n<pre><code class=\"prism language-toml\"># 名字: 需要和 lib 库中 Cargo.toml 中定义的 name 一致\n# path: 指定路径 (相对于根项目的Cargo.toml)\ncache = { path = \"./cache\" }\n</code></pre>\n<p>然后就可以和使用其他的第三方库一样使用 <code>cache</code> 库了</p>\n<p>当然上面的这种写法是建立在将 <code>struct Cache</code>写到 <code>lib.rs</code> 文件中的，不过我们可以新建一个文件 <code>cache.rs</code> ，然后在 <code>lib.rs</code> 中引入</p>\n<pre><code class=\"prism language-rust\">mod cache;\npub use cache::Cache;\n</code></pre>\n<p>想要看看源码怎么使用的同学，可以看看我写的一个简陋的 <a href=\"https://github.com/junhaideng/rust-http-proxy\">HTTP代理项目</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}