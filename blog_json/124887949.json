{"blogid": "124887949", "writerAge": "码龄2年", "writerBlogNum": "7", "writerCollect": "21", "writerComment": "5", "writerFan": "3", "writerGrade": "1级", "writerIntegral": "84", "writerName": "Accesscode_Talker", "writerProfileAdress": "writer_image\\profile_124887949.jpg", "writerRankTotal": "120519", "writerRankWeekly": "1033513", "writerThumb": "3", "writerVisitNum": "5211", "blog_read_count": "796", "blog_time": "于 2022-06-24 18:02:31 发布", "blog_title": "【非原创】python调用bartender操控打印机打印条码", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"_0\"></a>源文章地址</h1>\n<p><a href=\"https://blog.csdn.net/mynameisJW/article/details/113093231\">源文章链接</a></p>\n<h2><a id=\"_4\"></a>应用背景</h2>\n<p>通过调用第三方C#库，你可以非常方便地打印出你想要的条码，同时不受打印机的限制。</p>\n<h2><a id=\"_6\"></a>所需环境</h2>\n<p>1，bartender软件<br/> 2，python及其配套运行环境</p>\n<h3><a id=\"bartender_9\"></a>安装bartender软件</h3>\n<p>1，首先明确你的系统是X86还是X64,然后安装系统对应版本的bartender<br/> 2，bartender有不同的应用版本，这里推荐Enterprise Automation版本<br/> <img alt=\"版本\" src=\"image\\c930815109284131bba53f35842dd28e.png\"/><br/> 3，安装完成后找到对应目录下的SDK文件夹，找到对应的dll文件<br/> <img alt=\"SDK\" src=\"image\\873b00647dd44532bdbb33ce22f8bf43.png\"/><br/> 注！：这里非常需要关注的是，如果你的系统是x64的，你也可以顺利运行x86版本的bartender。这时你需要检查你的python是否也是32bit版本的。这里可以打开CMD输入“python”去检查版本。32bit版本的python只能调用x86的dll文件。<br/> 4，将这个dll文件复制到你的python工作区间目录下方便调用。</p>\n<h2><a id=\"bartender_18\"></a>新建bartender文件</h2>\n<p>1，新建文件，按需创建一个bartender模板。作为演示我在这里直接点完成</p>\n<p><img alt=\"模板\" src=\"image\\1342c95bdb974505b5a4ed42ad2cfd99.png\"/><br/> 2，在工具栏中添加一个QR码到模板中，双击二维码设置。自己定义数据源名称，在python程序中，你自定义的二维码内容将会通过数据源名称传入。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\4cc8ace3f7234f11bae99a7335b2bc7b.png\"/></p>\n<h2><a id=\"python_24\"></a>python上位机代码</h2>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> clr <span class=\"token comment\">#通过这个模块来调用C#的dll库</span>\n<span class=\"token comment\">#加载dll库</span>\nclr<span class=\"token punctuation\">.</span>AddReference<span class=\"token punctuation\">(</span><span class=\"token string\">\"Seagull.BarTender.Print\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">from</span> Seagull<span class=\"token punctuation\">.</span>BarTender<span class=\"token punctuation\">.</span>Print <span class=\"token keyword\">import</span> Engine<span class=\"token punctuation\">,</span> Printers\n<span class=\"token comment\">#可能会出现“Import \"Seagull.BarTender.Print\" could not be resolved”这个波浪线错误，这里不用管</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BarTender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#创建打印机类方便在上位机主程序中调用</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t    <span class=\"token comment\">#启用引擎</span>\n\t    self<span class=\"token punctuation\">.</span>btEngine <span class=\"token operator\">=</span> Engine<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\t    self<span class=\"token punctuation\">.</span>filePath <span class=\"token operator\">=</span> filePath\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">getPrinterList</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#获取你电脑上的打印机列表</span>\n        printers <span class=\"token operator\">=</span> Printers<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        printerList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> printer <span class=\"token keyword\">in</span> printers<span class=\"token punctuation\">:</span>\n            printerList<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>printer<span class=\"token punctuation\">.</span>PrinterName<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>printerName <span class=\"token operator\">=</span> printers<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">.</span>PrinterName<span class=\"token comment\">#这里为了方便，将要打印机确定为默认打印机</span>\n        <span class=\"token comment\">#默认打印机只需在电脑的控制面板中设定即可</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">creatTask</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#创建打印任务</span>\n        self<span class=\"token punctuation\">.</span>btFormat <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>btEngine<span class=\"token punctuation\">.</span>Documents<span class=\"token punctuation\">.</span>Open<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>filePath<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">#调试过程中发现保存功能无法生效</span>\n    <span class=\"token comment\"># def abortTask(self):</span>\n    <span class=\"token comment\">#     self.btEngine.Stop(SaveOptions.SaveChanges)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_data_dict</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#获取你的标签文件.btw的内容</span>\n\t    data_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>btFormat<span class=\"token punctuation\">:</span>\n           <span class=\"token keyword\">if</span> key<span class=\"token punctuation\">:</span>\n               <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>btFormat<span class=\"token punctuation\">.</span>SubStrings<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Value\n           <span class=\"token keyword\">for</span> substring <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>btFormat<span class=\"token punctuation\">.</span>SubStrings<span class=\"token punctuation\">:</span>\n               data_dict<span class=\"token punctuation\">[</span>substring<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> substring<span class=\"token punctuation\">.</span>Value\n        <span class=\"token keyword\">return</span> data_dict\n    <span class=\"token comment\"># 传入一个字典：{'num':11111}则会把num变量的值设置为11111</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">set_data_dict</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data_dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#将你需要的数据源内容内容写入到标签.btw文件中</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data_dict<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>btFormat<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> data_dict<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">for</span> substring <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>btFormat<span class=\"token punctuation\">.</span>SubStrings<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">if</span> substring<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">==</span> key<span class=\"token punctuation\">:</span>\n                        self<span class=\"token punctuation\">.</span>btFormat<span class=\"token punctuation\">.</span>SubStrings<span class=\"token punctuation\">.</span>SetSubString<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n\n\n      <span class=\"token keyword\">def</span> <span class=\"token function\">__del__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n          <span class=\"token comment\">#关闭引擎，释放资源</span>\n          <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>btEngine<span class=\"token punctuation\">.</span>IsAlive<span class=\"token punctuation\">:</span>\n              self<span class=\"token punctuation\">.</span>btEngine<span class=\"token punctuation\">.</span>Stop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n              self<span class=\"token punctuation\">.</span>btEngine<span class=\"token punctuation\">.</span>Dispose<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n<span class=\"token builtin\">dict</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token string\">\"num\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"1234567\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">#key:\"num\"为在bartender中命名的数据源，value:\"1234567\"为你想输出的条码内容</span>\nb<span class=\"token operator\">=</span> BarTender<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#path为先前设计的标签路径</span>\nb<span class=\"token punctuation\">.</span>getPrinterList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nb<span class=\"token punctuation\">.</span>creatTask<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nb<span class=\"token punctuation\">.</span>btFormat<span class=\"token punctuation\">.</span>PrintSetup<span class=\"token punctuation\">.</span>PrinterName <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>printerName\n</code></pre>\n<h2><a id=\"_86\"></a>将以上程序作为模块集成到主程序中</h2>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> bartender<span class=\"token comment\">#将上述文件命名为bartender.py。然后导入</span>\n\n<span class=\"token triple-quoted-string string\">'''\n以下为截取的定义的函数程序片段\n\n#有时候如果强制关闭程序或者程序因出错卡死，会导致程序没有执行bartender的回收工作，这样bartender会一直在后台占用\n#我这边的解决办法是在主程序开始运行时先关闭任务管理器中已存在的所有bartender进程\n#如果有更好的办法望各位看官不吝赐教\n'''</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">initPrinter</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#关闭所有已存在的bartender进程</span>\n    cmd <span class=\"token operator\">=</span> <span class=\"token string\">\"taskkill /F /IM \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"bartend.exe\"</span>\n    os<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">#生成bartender对象</span>\n        self<span class=\"token punctuation\">.</span>seagullBartender <span class=\"token operator\">=</span> bartender<span class=\"token punctuation\">.</span>BarTender<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>btwPath<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#生成目标文件对象</span>\n        self<span class=\"token punctuation\">.</span>seagullBartender<span class=\"token punctuation\">.</span>creatTask<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#搜寻默认打印机</span>\n        self<span class=\"token punctuation\">.</span>seagullBartender<span class=\"token punctuation\">.</span>getPrinterList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#绑定打印机</span>\n        self<span class=\"token punctuation\">.</span>seagullBartender<span class=\"token punctuation\">.</span>btFormat<span class=\"token punctuation\">.</span>PrintSetup<span class=\"token punctuation\">.</span>PrinterName <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>seagullBartender<span class=\"token punctuation\">.</span>printerName\n    <span class=\"token keyword\">except</span> <span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打印机初始化失败！\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''\n因为这段程序是嵌入到一个主程序中的。如果在主程序的运行过程中打开bartender会耗费较长的时间\n所以这边我用线程让bartender在后台先打开，不去干扰主程序的运行\n'''</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">initPrinterThread</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>filepath <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    seagullInitThread <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>initPrinter<span class=\"token punctuation\">)</span>\n    seagullInitThread<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''\n调用打印机函数，在适当的时机调用来打印内容\n'''</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">printBarcode</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token comment\">#字典里的是在bartender里链接的内容</span>\n\t<span class=\"token builtin\">dict</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span>\n        <span class=\"token punctuation\">}</span>\n    self<span class=\"token punctuation\">.</span>seagullBartender<span class=\"token punctuation\">.</span>set_data_dict<span class=\"token punctuation\">(</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#开始打印</span>\n    result <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>seagullBartender<span class=\"token punctuation\">.</span>btFormat<span class=\"token punctuation\">.</span>Print<span class=\"token punctuation\">(</span><span class=\"token string\">\"printjob\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n\tinitPrinterThread<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tprintBarcode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n</code></pre>\n<h2><a id=\"_141\"></a>有时候会出现以下报错：</h2>\n<pre><code class=\"prism language-python\">Seagull<span class=\"token punctuation\">.</span>BarTender<span class=\"token punctuation\">.</span>Print<span class=\"token punctuation\">.</span>PrintEngineException<span class=\"token punctuation\">:</span> The BarTender engine could <span class=\"token keyword\">not</span> be started<span class=\"token punctuation\">.</span> \nPossible reasons are<span class=\"token punctuation\">:</span> \n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> BarTender <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> properly installed<span class=\"token punctuation\">.</span> \n<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> BarTender <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> properly registered on the computer <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>g bartend<span class=\"token punctuation\">.</span>exe <span class=\"token operator\">/</span>register<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span> \n<span class=\"token number\">3</span><span class=\"token punctuation\">)</span> There are too many process instances of BarTender running<span class=\"token punctuation\">.</span> Stop a few bartend<span class=\"token punctuation\">.</span>exe instances <span class=\"token keyword\">and</span> <span class=\"token keyword\">try</span> again<span class=\"token punctuation\">.</span> Also see SDK Engine<span class=\"token punctuation\">.</span>Start method documentation <span class=\"token keyword\">for</span> information about how to allow more BarTender processes to run on your computer by increasing your <span class=\"token string\">\"non-interactive\"</span> shared desktop heap<span class=\"token punctuation\">.</span> \n<span class=\"token number\">4</span><span class=\"token punctuation\">)</span> The user account does <span class=\"token keyword\">not</span> have permission to run BarTender<span class=\"token punctuation\">.</span>\n</code></pre>\n<p>解决办法：<br/> 打开控制台<br/> 注册应用程序</p>\n<pre><code class=\"prism language-python\">bartend<span class=\"token punctuation\">.</span>exe <span class=\"token operator\">/</span>register\n</code></pre>\n<p>更新日期：<br/> 2022/6/24</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}