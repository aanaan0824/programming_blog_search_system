{"blogid": "123784175", "writerAge": "码龄2年", "writerBlogNum": "224", "writerCollect": "32", "writerComment": "3", "writerFan": "18", "writerGrade": "5级", "writerIntegral": "2262", "writerName": "shiyivei", "writerProfileAdress": "writer_image\\profile_123784175.jpg", "writerRankTotal": "19274", "writerRankWeekly": "18324", "writerThumb": "13", "writerVisitNum": "134763", "blog_read_count": "2019", "blog_time": "于 2022-03-27 23:13:28 发布", "blog_title": "Rust Web 全栈开发 - 1 构建TCP Server", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"1_TCP_Server_0\"></a>1. 构建TCP Server</h2>\n<p>具体来说就是要编写一个TCP Server 和 Client，然后让他们通信</p>\n<p>先创建一个文件夹并打开</p>\n<pre><code>cargo new s1 &amp;&amp; cd s1 \n</code></pre>\n<p>再创建两个文件夹</p>\n<pre><code>cargo new tcpserver\ncargo new tcpclient\n</code></pre>\n<p>s1实际上是一个工作工作空间，可以容纳多个Rust项目，它可以将多个Rust项目作为一个单元来管理</p>\n<p>我们改一下Cargo.toml中的内容</p>\n<pre><code>[workspace]\n\nmembers = [\"tcpserver\",\"tcpclient\"]\n</code></pre>\n<h4><a id=\"11_tcpserver_27\"></a>1.1 建立tcpserver</h4>\n<p>我们在main文件中编写如下代码，并在终端运行</p>\n<p>/Users/qinjianquan/s1/tcpserver/src/main.rs</p>\n<pre><code>use std::net::TcpListener;\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:3000\").unwrap();\n    println!(Running on port 3000...);\n\n\n    for stream in listener.incoming(){\n        let _stream = stream.unwrap();\n\n        println!(\"connection established\")\n    }\n}\n</code></pre>\n<pre><code>cargo run -p tcpserver\n</code></pre>\n<pre><code>Running on port 3000...\n</code></pre>\n<h4><a id=\"12_tcpclient_57\"></a><strong>1.2 建立tcpclient</strong></h4>\n<p>在下列文件中输入</p>\n<p>/Users/qinjianquan/s1/tcpclient/src/main.rs</p>\n<pre><code>use std::net::TcpStream;\nfn main() {\n    \n    let _stream = TcpStream::connect(\"localhost:3000\").unwrap();\n}\n</code></pre>\n<p>在另一个终端中运行，然后查看第一个终端，会发现连接已经建立</p>\n<pre><code>cargo run -p tcpclient\n</code></pre>\n<pre><code>connection established\n</code></pre>\n<h4><a id=\"13__81\"></a><strong>1.3 发送和接收数据</strong></h4>\n<pre><code>use std::{net::TcpListener, io::{Read, Write}};\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:3000\").unwrap();\n    println!(\"Running on port 3000...\");\n\n\n    for stream in listener.incoming(){\n        let mut stream = stream.unwrap();\n\n        println!(\"connection established\");\n\n        let mut buffer = [0; 1024];\n\n        stream.read(&amp;mut buffer).unwrap();\n        stream.write(&amp;mut buffer).unwrap();\n    }\n}\n</code></pre>\n<pre><code>use std::io::{Read,Write};\nuse std::net::TcpStream;\nuse std::str;\nfn main() {\n\n    //connect and send \"Hello\"\n    let mut stream = TcpStream::connect(\"localhost:3000\").unwrap();\n    stream.write(\"Hello\".as_bytes()).unwrap();\n\n    let mut buffer= [0; 5];\n    stream.read(&amp;mut buffer).unwrap();\n\n    println!(\n        \"Response from server:{:?}\",\n        str::from_utf8(&amp;buffer).unwrap()\n    );\n}\n</code></pre>\n<p>编写好代码以后，在两个终端中分别运行，具体结果如下</p>\n<pre><code>cargo run -p tcpserver\n\nRunning on port 3000...\nconnection established\n</code></pre>\n<pre><code>cargo run -p tcpclient\n\nResponse from server:\"hello\"\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}