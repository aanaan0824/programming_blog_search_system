{"blogid": "125156299", "writerAge": "码龄9年", "writerBlogNum": "94", "writerCollect": "388", "writerComment": "33", "writerFan": "128", "writerGrade": "4级", "writerIntegral": "1036", "writerName": "liyinchi1988", "writerProfileAdress": "writer_image\\profile_125156299.jpg", "writerRankTotal": "18199", "writerRankWeekly": "30734", "writerThumb": "53", "writerVisitNum": "98455", "blog_read_count": "3037", "blog_time": "于 2022-06-06 23:14:22 发布", "blog_title": "Python requests.post()方法中data和json参数的使用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p><a name=\"_lab2_0_0\"></a></p>\n<h3>json和dict</h3>\n<p>python中的dict类型要转换为json格式的数据需要用到json库：</p>\n<pre><code class=\"language-python\">import json \n\n&lt;json&gt; = json.dumps(&lt;dict&gt;)\n\n&lt;dict&gt; = json.loads(&lt;json&gt;)</code></pre>\n<p>需要注意的是：</p>\n<p>python中并没有json类型这一说法，通过json.<span style=\"color:#fe2c24;\">dumps</span>(&lt;dict&gt;)转换的字典对象，最后得到的是一个字符串对象，在python中json格式的数据实际上就是一个字符串。</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; j = json.dumps(&lt;dict&gt;)\n\n&gt;&gt;&gt; type(j)\n\n&lt;class 'str'&gt;</code></pre>\n<p>虽说json格式的数据在python中是以字符串的类型存在的，但是通过str(&lt;dict&gt;)工厂函数所得到的结果同json.dumps(&lt;dict&gt;)方法所得到的结果是不相同的</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; d = {'a': 1, 'b': 2}\n\n&gt;&gt;&gt; d_d = {\"a\": 1, \"b\": 2}\n\n&gt;&gt;&gt; string = str(d)\n\n&gt;&gt;&gt; string_d = str(d_d)\n\n&gt;&gt;&gt; js = json.dumps(d)\n\n&gt;&gt;&gt; js_d = json.dumps(d_d)\n\n&gt;&gt;&gt; string == string_d\n\nTrue\n\n&gt;&gt;&gt; js = js_d\n\nTrue\n\n&gt;&gt;&gt; string == js\n\nFalse\n\n&gt;&gt;&gt; string\n\n\"{'a': 1, 'b': 2}\"\n\n&gt;&gt;&gt; js\n\n'{\"a\": 1, \"b\": 2}'</code></pre>\n<p>可以看出string和js的区别在于引号</p>\n<p>对于可以作为json.loads(&lt;str&gt;)参数对象的字符串，除了要满足字典类型的格式外，所有的字符串对象必须是双引号。</p>\n<p><a name=\"_lab2_0_1\"></a></p>\n<h3>requests.post()</h3>\n<p>在通过requests.post()进行POST请求时，传入报文的参数有两个，一个是data，一个是json</p>\n<p>常见的<span style=\"background-color:#ffd900;\">form表单可以直接使用data参数进行报文提交</span>，而data的对象则是python中的字典类型；</p>\n<p></p>\n<p>在爬虫的过程中遇到了一种payload报文，是一种json格式的报文，因此传入的报文对象也应该是格式的；</p>\n<p>这里有两种方法进行报文提交：</p>\n<pre><code class=\"language-python\">import requests\n\nimport json \n\nurl = \"http://example.com\"\n\ndata = {\n\n    'a': 1,\n\n    'b': 2,\n\n}\n\n# 1\n\nrequests.post(url, data=json.dumps(data))\n\n# 2-json参数会自动将字典类型的对象转换为json格式\n\nrequests.post(url, json=data)</code></pre>\n<p><a name=\"_lab2_0_2\"></a></p>\n<h3>其它</h3>\n<p>在requests.get()方法，中可以<span style=\"background-color:#ffd900;\">使用params参数来构建url</span></p>\n<p>请求得到的结果可能呈现乱码的状态，可以通过resp.encoding属性查看网页编码方式，同时可以在获取resp.text之前对resp.encoding='utf-8'赋值，这样再次获取的resp.text则会使用我们要求的编码方式。</p>\n<p><a name=\"_label1\"></a></p>\n<h2>post请求中json和data的区别</h2>\n<p>post请求中，可以使用data传递参数，也可以使用json传递参数</p>\n<p><strong>两种方式有什么区别？</strong></p>\n<p><span style=\"background-color:#ffd900;\">如果参数为JSON数据，可以直接传入json参数，它将自动编码并将Content-Type的置为application/json</span></p>\n<pre><code class=\"language-python\">payload = {'key1': 'value1', 'key2': 'value2'} \n\nr = requests.post(\"https://httpbin.org/post\", json=payload)\n\nprint(r.text)</code></pre>\n<p><span style=\"background-color:#ffd900;\">如果data传递的参数为字符串，如：json.dumps(payload)，则request对参数进行url编码，Content-Type的值为None，所以data传字符串时，一定要在header中指定Content-Type</span></p>\n<pre><code class=\"language-python\">payload = {'key1': 'value1', 'key2': 'value2'}\n\nheaders={\"Content-Type\": \"application/json\"}\n\nr = requests.post(\"https://httpbin.org/post\", headers=headers,data=json.dumps(payload))\n\nprint(r.text)</code></pre>\n<p><span style=\"background-color:#ffd900;\">如果data传递的是字典、元组组成的列表或列表作为值的字典，则request对参数进行url编码，Content-Type的值为application/x-www-form-urlencoded</span></p>\n<pre><code class=\"language-python\"># 字典\n\npayload1 = {'key1': 'value1', 'key2': 'value2'}  \n\nr = requests.post(\"https://httpbin.org/post\", data=payload1)\n\n# 元组组成的列表\n\npayload2 = [('key1', 'value1'), ('key1', 'value2')]  \n\nr = requests.post(\"https://httpbin.org/post\", data=payload2)\n\n# 列表作为值的字典\n\npayload3 = {'key1': ['value1', 'value2']}  \n\nr = requests.post(\"https://httpbin.org/post\", data=payload3)</code></pre>\n<p></p>\n</div>\n</div>"}