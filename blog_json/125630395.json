{"blogid": "125630395", "writerAge": "码龄5年", "writerBlogNum": "113", "writerCollect": "1685", "writerComment": "174", "writerFan": "2871", "writerGrade": "5级", "writerIntegral": "2838", "writerName": "陈子青 - See", "writerProfileAdress": "writer_image\\profile_125630395.jpg", "writerRankTotal": "6685", "writerRankWeekly": "5289", "writerThumb": "653", "writerVisitNum": "150490", "blog_read_count": "1391", "blog_time": "已于 2022-07-16 11:31:44 修改", "blog_title": "详解最实用的几种dll注入方式", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E6%A6%82%E5%BF%B5-toc\" style=\"margin-left:0px;\"><a href=\"#%E6%A6%82%E5%BF%B5\">概念</a></p>\n<p id=\"%E5%B8%B8%E7%94%A8%E7%9A%84%E6%B3%A8%E5%85%A5%E6%96%B9%E5%BC%8F-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%B8%B8%E7%94%A8%E7%9A%84%E6%B3%A8%E5%85%A5%E6%96%B9%E5%BC%8F\">注入方式</a></p>\n<p id=\"%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5-toc\" style=\"margin-left:40px;\"><a href=\"#%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5\">钩子注入</a></p>\n<p id=\"%E5%8E%9F%E7%90%86-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%8E%9F%E7%90%86\">原理</a></p>\n<p id=\"%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:80px;\"><a href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81\">示例代码</a></p>\n<p id=\"%E4%BB%A3%E7%A0%81%E6%B3%A8%E8%A7%A3-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%BB%A3%E7%A0%81%E6%B3%A8%E8%A7%A3\">代码注解</a></p>\n<p id=\"%E8%BF%90%E8%A1%8C%E6%88%AA%E5%9B%BE-toc\" style=\"margin-left:80px;\"><a href=\"#%E8%BF%90%E8%A1%8C%E6%88%AA%E5%9B%BE\">运行截图</a></p>\n<p id=\"%E8%BF%9C%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5-toc\" style=\"margin-left:40px;\"><a href=\"#%E8%BF%9C%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5\">远线程注入</a></p>\n<p id=\"%E5%8E%9F%E7%90%86-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%8E%9F%E7%90%86\">原理</a></p>\n<p id=\"%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81%C2%A0-toc\" style=\"margin-left:80px;\"><a href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81%C2%A0\">示例代码 </a></p>\n<p id=\"%E7%AA%81%E7%A0%B4Session%200%20%E9%9A%94%E7%A6%BB%E7%9A%84%E8%BF%9C%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#%E7%AA%81%E7%A0%B4Session%200%20%E9%9A%94%E7%A6%BB%E7%9A%84%E8%BF%9C%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5%C2%A0\">突破Session 0 隔离的远线程注入 </a></p>\n<p id=\"%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81%C2%A0-toc\" style=\"margin-left:80px;\"><a href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81%C2%A0\">示例代码 </a></p>\n<p id=\"%E5%85%A5%E5%8F%A3%E7%82%B9%E6%B3%A8%E5%85%A5-toc\" style=\"margin-left:40px;\">*<a href=\"#%E5%85%A5%E5%8F%A3%E7%82%B9%E6%B3%A8%E5%85%A5\">入口点注入</a></p>\n<p id=\"%E5%8E%9F%E7%90%86-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%8E%9F%E7%90%86\">原理</a></p>\n<p id=\"%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81\">参考代码</a></p>\n<p id=\"%C2%A0APC%E6%B3%A8%E5%85%A5-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0APC%E6%B3%A8%E5%85%A5\"> APC注入</a></p>\n<p id=\"一apc注入-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%B8%80apc%E6%B3%A8%E5%85%A5\">一、APC注入</a></p>\n<p id=\"二api-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%BA%8Capi\">二、API</a></p>\n<p id=\"三实现-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%B8%89%E5%AE%9E%E7%8E%B0\">三、实现</a></p>\n<p id=\"%E5%9B%9B%E3%80%81%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%9B%9B%E3%80%81%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81\">四、示例代码</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h1 id=\"%E6%A6%82%E5%BF%B5\"><strong>概念</strong></h1>\n<p>要谈dll注入，首先则要了解dll ，对dll的概念和使用不熟悉的读者可移步<strong><a class=\"link-info\" href=\"https://blog.csdn.net/weixin_40582034/article/details/125614198?spm=1001.2014.3001.5502\" title=\" dll概念和使用方式详解\"> dll概念和使用方式详解</a></strong></p>\n<p>所谓DLL注入就是将一个DLL放进某个进程的地址空间里，让它成为那个进程的一部分。这样该进程和dll共享同一内存空间，这样dll可以使用该进程的所有资源，随时监控程序运行。通常，我们将需要实现的功能封装生成dll文件，然后将其注入到某一进程中，从而在该进程中添加或扩展我们需要的功能。因此dll注入技术被广泛运用在恶意攻击、游戏外挂、木马等程序中。</p>\n<h2></h2>\n<h1 id=\"%E5%B8%B8%E7%94%A8%E7%9A%84%E6%B3%A8%E5%85%A5%E6%96%B9%E5%BC%8F\">注入方式</h1>\n<p></p>\n<h2 id=\"%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5\">钩子注入</h2>\n<h3 id=\"%E5%8E%9F%E7%90%86\">原理</h3>\n<p>利用函数<span style=\"color:#4da8ee;\"><strong>SetWindowsHookEx</strong></span>来实现注入。该函数将一个应用程序定义的挂钩处理函数安装到挂钩链中去,可以通过<strong>安装挂钩处理过程来对系统的某些类型事件进行监控</strong>,这些事件与某个特定的线程或系统中的所有事件相关。如果我们需要向某一进程注入dll，则首先获取该进程中某一线程ID，在dll文件中封装我们的挂钩处理函数，对该线程设置钩子，当触发类型事件时，线程则调用dll文件中的挂钩函数。<span style=\"color:#fe2c24;\"><strong><span style=\"background-color:#f9eda6;\">此时，如果线程想要成功地调用该挂钩函数，必须先加载该dll文件，这样也就实现了我们的dll注入了。</span></strong></span></p>\n<blockquote>\n<p><strong>函数原型</strong></p>\n<p><strong><span style=\"color:#fe2c24;\"><span style=\"background-color:#f9eda6;\">HHOOK SetWindowsHookExA(</span><br/><span style=\"background-color:#f9eda6;\">    [in] int       idHook,</span><br/><span style=\"background-color:#f9eda6;\">    [in] HOOKPROC  lpfn,</span><br/><span style=\"background-color:#f9eda6;\">    [in] HINSTANCE hmod,</span><br/><span style=\"background-color:#f9eda6;\">    [in] DWORD     dwThreadId</span><br/><span style=\"background-color:#f9eda6;\">);</span></span></strong></p>\n<p></p>\n<p><code>[in] lpfn</code></p>\n<p>指向挂接过程的指针。如果 <em>dwThreadId</em> 参数为零或指定由其他进程创建的线程的标识符，则 <em>lpfn</em> 参数必须指向 DLL 中的挂接过程。否则，<em>lpfn</em> 可以指向与当前进程关联的代码中的挂接过程。</p>\n<p></p>\n<p><code>[in] hmod</code></p>\n<p>DLL 的句柄，其中包含 <em>lpfn</em> 参数所指向的挂钩过程。如果 <em>dwThreadId</em> 参数指定由当前进程创建的线程，并且挂接过程位于与当前进程关联的代码中，则必须将 <em>hMod</em> 参数设置为 <strong>NULL</strong>。</p>\n<p></p>\n<p><code>[in] dwThreadId</code></p>\n<p>挂接过程要与之关联的线程的标识符。对于桌面应用程序，如果此参数为零，则挂钩过程将与在与调用线程相同的桌面上运行的所有现有线程相关联</p>\n</blockquote>\n<p></p>\n<h3 id=\"%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81\">示例代码</h3>\n<p></p>\n<p><strong>dll文件</strong></p>\n<pre><code class=\"language-cpp\">#include \"pch.h\"\n#include&lt;windows.h&gt;\nBOOL APIENTRY DllMain( HMODULE hModule,\n                       DWORD  ul_reason_for_call,\n                       LPVOID lpReserved\n                     )\n{\n    switch (ul_reason_for_call)\n    {\n    case DLL_PROCESS_ATTACH:\n    case DLL_THREAD_ATTACH:\n    case DLL_THREAD_DETACH:\n    case DLL_PROCESS_DETACH:\n        break;\n    }\n    return TRUE;\n}\nHHOOK hhk = 0;\n\nLRESULT CALLBACK KeyboardProc(\n   int code,\n   WPARAM wParam,\n   LPARAM lParam\n)\n{\n    if (code == HC_ACTION)\n    {\n        if (wParam == VK_HOME &amp;&amp; (lParam &amp; (1&lt;&lt;30)))\n            MessageBoxA(NULL, \"您按下了HOME键\", \"HOME\",MB_OK);\n    }\n\n    return  CallNextHookEx(hhk, code, wParam, lParam);\n\n}\n\nextern \"C\" _declspec(dllexport)  HOOKPROC getDllPoint(void)\n{\n    return KeyboardProc;\n}\n</code></pre>\n<p></p>\n<p><strong>设置钩子</strong></p>\n<pre><code class=\"language-cpp\">typedef HOOKPROC(*func)(void);\nvoid CInjectTestDlg::OnBnClickedButton1()\n{\n\tHWND  hwnd = ::FindWindowA(NULL, \"陈子青注入工具2.0\");\n\tDWORD pid;\n\tDWORD thread_id = ::GetWindowThreadProcessId(hwnd, &amp;pid);\n\t\n\tHMODULE mod = LoadLibraryA(\"myDll.dll\");\n\tfunc proc = (func)::GetProcAddress(mod, \"getDllPoint\");\n\n\tHOOKPROC fp=proc();\n\t\n\tHHOOK hhk= ::SetWindowsHookEx(WH_KEYBOARD, fp, mod, thread_id);\n}\n\n</code></pre>\n<h3 id=\"%E4%BB%A3%E7%A0%81%E6%B3%A8%E8%A7%A3\">代码注解</h3>\n<p>首先获取窗口线程，加载dll文件获取<strong>getDllPoint</strong>函数，该函数返回<strong>钩子处理函数的地址</strong>，然后给窗口线程设置键盘钩子，当触发键盘事件时，该线程调用myDll.dll文件中的处理函数，那么该线程必须先加载该dll文件，这时也就等同于我们将myDll.dll注入到该程序中了。</p>\n<p></p>\n<h3 id=\"%E8%BF%90%E8%A1%8C%E6%88%AA%E5%9B%BE\">运行截图</h3>\n<p><em>点击注入，当按下HOME键时，弹出信息框。</em></p>\n<p><img alt=\"\" height=\"365\" src=\"image\\6e7cfb7932ba48fba396608be3e4c8a0.png\" width=\"420\"/></p>\n<p></p>\n<p></p>\n<h2 id=\"%E8%BF%9C%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5\">远线程注入</h2>\n<h3>原理</h3>\n<p>远线程注入比较好理解，通过<strong><span style=\"color:#4da8ee;\">CreateRemoteThread</span></strong>函数在需要注入的进程中创建一个自己的线程，在该线程中调用系统的<span style=\"color:#4da8ee;\"><strong>LoadLibraryA</strong></span>加载dll文件即可。</p>\n<p><span style=\"color:#4da8ee;\"><strong>LoadLibraryA</strong></span>函数<span style=\"color:#4da8ee;\"><strong>Kernel32.dll</strong></span>中，因此可以通过加载<span style=\"color:#4da8ee;\"><strong>Kernel32.dll</strong></span>以来获取<span style=\"color:#4da8ee;\"><strong>LoadLibraryA</strong></span>函数地址，其函数的参数就是dll文件的路径。此时可以通过<span style=\"color:#4da8ee;\"><strong>VirtualAllocEx</strong></span>函数在该进程中创建一块内存用来保存需要被注入dll文件路径。</p>\n<blockquote>\n<p><strong><span style=\"color:#4da8ee;\">CreateRemoteThread函数原型</span></strong></p>\n<p></p>\n<p><strong><span style=\"color:#fe2c24;\"><span style=\"background-color:#fefcd8;\">HANDLE CreateRemoteThread(</span><br/><span style=\"background-color:#fefcd8;\">  [in]  HANDLE                 hProcess,</span><br/><span style=\"background-color:#fefcd8;\">  [in]  LPSECURITY_ATTRIBUTES  lpThreadAttributes,</span><br/><span style=\"background-color:#fefcd8;\">  [in]  SIZE_T                 dwStackSize,</span><br/><span style=\"background-color:#fefcd8;\">  [in]  LPTHREAD_START_ROUTINE lpStartAddress,</span><br/><span style=\"background-color:#fefcd8;\">  [in]  LPVOID                 lpParameter,</span><br/><span style=\"background-color:#fefcd8;\">  [in]  DWORD                  dwCreationFlags,</span><br/><span style=\"background-color:#fefcd8;\">  [out] LPDWORD                lpThreadId</span><br/><span style=\"background-color:#fefcd8;\">);</span></span></strong></p>\n<p></p>\n<p></p>\n<p><code>[in] hProcess</code></p>\n<p>要在其中创建线程的进程的句柄。句柄必须具有<strong>PROCESS_CREATE_THREAD</strong>、<strong>PROCESS_QUERY_INFORMATION</strong>、<strong>PROCESS_VM_OPERATION</strong>、<strong>PROCESS_VM_WRITE</strong>和<strong>PROCESS_VM_READ</strong>访问权限，并且在某些平台上没有这些权限可能会失败。有关详细信息，请参阅<a href=\"https://docs.microsoft.com/en-us/windows/desktop/ProcThread/process-security-and-access-rights\" title=\"进程安全性和访问权限\">进程安全性和访问权限</a>。</p>\n<p></p>\n<p><code>[in] lpThreadAttributes</code></p>\n<p>指向<a href=\"https://docs.microsoft.com/en-us/previous-versions/windows/desktop/legacy/aa379560%28v=vs.85%29\" title=\"SECURITY_ATTRIBUTES\">SECURITY_ATTRIBUTES</a>结构的指针，该结构指定新线程的安全描述符，并确定子进程是否可以继承返回的句柄。如果 <em>lpThreadAttributes</em> 为 NULL，则线程将获得默认的安全描述符，并且句柄无法继承。</p>\n<p></p>\n<p><code>[in] lpStartAddress</code></p>\n<p>指向<strong>类型为 LPTHREAD_START_ROUTINE</strong>的应用程序定义函数的指针将由线程执行，并表示远程进程中线程的起始地址。该函数必须存在于远程进程中。有关详细信息，请参阅<a href=\"https://docs.microsoft.com/en-us/previous-versions/windows/desktop/legacy/ms686736%28v=vs.85%29\" title=\"线程过程\">线程过程</a>。</p>\n<p></p>\n<p><code>[in] lpParameter</code></p>\n<p>指向要传递给线程函数的变量的指针。</p>\n<p></p>\n<p><code>[in] dwCreationFlags</code></p>\n<p>控制线程创建的标志。</p>\n<table><tbody><tr><th>价值</th><th>意义</th></tr><tr><td> <p>0</p> </td><td>线程在创建后立即运行。</td></tr><tr><td><a id=\"CREATE_SUSPENDED\"></a><a id=\"create_suspended\"></a> <p><strong>CREATE_SUSPENDED</strong></p> <p>0x00000004</p> </td><td>线程是在挂起状态下创建的，并且在调用 <a href=\"https://docs.microsoft.com/en-us/windows/desktop/api/processthreadsapi/nf-processthreadsapi-resumethread\" title=\"ResumeThread\">ResumeThread</a> 函数之前不会运行。</td></tr><tr><td><a id=\"STACK_SIZE_PARAM_IS_A_RESERVATION\"></a><a id=\"stack_size_param_is_a_reservation\"></a> <p><strong>STACK_SIZE_PARAM_IS_A_RESERVATION</strong></p> <p>0x00010000</p> </td><td><em>dwStackSize</em> 参数指定堆栈的初始保留大小。如果未指定此标志，<em>则 dwStackSize</em> 指定提交大小。</td></tr></tbody></table>\n<p></p>\n<p><code>[out] lpThreadId</code></p>\n<p>指向接收线程标识符的变量的指针。</p>\n<p>如果此参数为 <strong>NULL</strong>，则不返回线程标识符。</p>\n</blockquote>\n<p></p>\n<blockquote>\n<p><span style=\"color:#4da8ee;\"><strong>VirtualAllocEx函数原型</strong></span></p>\n<p></p>\n<p><span style=\"color:#fe2c24;\"><strong><span style=\"background-color:#fefcd8;\">LPVOID VirtualAllocEx(</span><br/><span style=\"background-color:#fefcd8;\">  [in]           HANDLE hProcess,</span><br/><span style=\"background-color:#fefcd8;\">  [in, optional] LPVOID lpAddress,</span><br/><span style=\"background-color:#fefcd8;\">  [in]           SIZE_T dwSize,</span><br/><span style=\"background-color:#fefcd8;\">  [in]           DWORD  flAllocationType,</span><br/><span style=\"background-color:#fefcd8;\">  [in]           DWORD  flProtect</span><br/><span style=\"background-color:#fefcd8;\">); </span></strong></span></p>\n<p></p>\n<p></p>\n<p style=\"margin-left:0;\"><code>[in] hProcess</code></p>\n<p style=\"margin-left:0;\">进程的句柄。该函数在此进程的虚拟地址空间内分配内存。</p>\n<p style=\"margin-left:0;\">句柄必须具有<strong>PROCESS_VM_OPERATION</strong>访问权限。</p>\n<p style=\"margin-left:0;\"></p>\n<p style=\"margin-left:0;\"><code>[in, optional] lpAddress</code></p>\n<p style=\"margin-left:0;\">为要分配的页面区域指定所需起始地址的指针。</p>\n<p style=\"margin-left:0;\">如果要预留内存，该函数会将此地址向下舍入到分配粒度的最接近的倍数。</p>\n<p style=\"margin-left:0;\">如果要提交已预留的内存，则该函数会将此地址向下舍入到最近的页边界。若要确定主计算机上的页面大小和分配粒度，请使用 <a href=\"https://docs.microsoft.com/en-us/windows/desktop/api/sysinfoapi/nf-sysinfoapi-getsysteminfo\" title=\"GetSystemInfo\">GetSystemInfo</a> 函数。</p>\n<p style=\"margin-left:0;\"></p>\n<p style=\"margin-left:0;\"><code>[in] dwSize</code></p>\n<p style=\"margin-left:0;\">要分配的内存区域的大小，以字节为单位。</p>\n<p style=\"margin-left:0;\">如果 <em>lpAddress</em> 为 <strong>NULL</strong>，则该函数将 <em>dwSize</em> 向上舍入到下一页边界。</p>\n<p style=\"margin-left:0;\">如果 <em>lpAddress</em> 不是 <strong>NULL</strong>，则该函数将分配包含从 <em>lpAddress 到 lpAddress</em>+<em>dwSize</em> 范围内的一个或多个字节的所有页面。这意味着，例如，跨越页面边界的 2 字节范围会导致函数同时分配这两个页面。</p>\n<p style=\"margin-left:0;\"></p>\n<p style=\"margin-left:0;\"><code>[in] flAllocationType</code></p>\n<p style=\"margin-left:0;\">内存分配的类型。此参数必须包含以下值之一。</p>\n<div>\n<table border=\"1\" cellspacing=\"0\"><tbody><tr><th style=\"text-align:left;vertical-align:top;\">价值</th><th style=\"text-align:left;vertical-align:top;\">意义</th></tr><tr><td style=\"text-align:left;vertical-align:top;\"><a id=\"MEM_COMMIT\"></a><a id=\"mem_commit\"></a> <p><strong>MEM_COMMIT</strong></p> <p>0x00001000</p> </td><td style=\"text-align:left;vertical-align:top;\">为指定的保留内存页分配内存费用（从内存的总大小和磁盘上的分页文件）。该函数还保证当调用方稍后最初访问内存时，内容将为零。除非/直到实际访问虚拟地址，否则不会分配实际的物理页。 <p style=\"margin-left:0;\">要一步到位地保留和提交页面，请使用 调用 <strong>VirtualAllocEx</strong>。<code>MEM_COMMIT | MEM_RESERVE</code></p> <p style=\"margin-left:0;\">尝试通过指定<strong>不MEM_RESERVE</strong>和非 <strong>NULL</strong> <em>lpAddress</em> 的<strong>MEM_COMMIT</strong>来提交特定地址范围将失败，除非已保留整个范围。生成的错误代码为 <strong>ERROR_INVALID_ADDRESS</strong>。</p> <p style=\"margin-left:0;\">尝试提交已提交的页不会导致函数失败。这意味着您可以提交页面，而无需首先确定每个页面的当前提交状态。</p> <p style=\"margin-left:0;\">如果 <em>lpAddress</em> 指定安全区内的地址，则必须<strong>MEM_COMMIT</strong> <em>flAllocationType</em>。</p> </td></tr><tr><td style=\"text-align:left;vertical-align:top;\"><a id=\"MEM_RESERVE\"></a><a id=\"mem_reserve\"></a> <p><strong>MEM_RESERVE</strong></p> <p>0x00002000</p> </td><td style=\"text-align:left;vertical-align:top;\">保留进程的一系列虚拟地址空间，而不在内存或磁盘上的分页文件中分配任何实际的物理存储。 <p style=\"margin-left:0;\">您可以通过使用<strong>MEM_COMMIT</strong>再次调用<strong>VirtualAllocEx</strong>来提交保留页面。要一步到位地保留和提交页面，请使用 调用 <strong>VirtualAllocEx</strong>。<code>MEM_COMMIT | MEM_RESERVE</code></p> <p style=\"margin-left:0;\">其他内存分配函数（如 <strong>malloc</strong> 和 <a href=\"https://docs.microsoft.com/en-us/windows/desktop/api/winbase/nf-winbase-localalloc\" title=\"LocalAlloc\">LocalAlloc</a>）在释放保留内存之前无法使用保留内存。</p> </td></tr><tr><td style=\"text-align:left;vertical-align:top;\"><a id=\"MEM_RESET\"></a><a id=\"mem_reset\"></a> <p><strong>MEM_RESET</strong></p> <p>0x00080000</p> </td><td style=\"text-align:left;vertical-align:top;\">指示不再对 <em>lpAddress</em> 和 <em>dwSize</em> 指定的内存范围中的数据感兴趣。不应从分页文件中读取或写入分页文件。但是，稍后将再次使用内存块，因此不应将其取消提交。此值不能与任何其他值一起使用。 <p style=\"margin-left:0;\">使用此值并不能保证使用<strong>MEM_RESET</strong>操作的范围将包含零。如果希望范围包含零，请取消提交内存，然后重新提交。</p> <p style=\"margin-left:0;\">当您使用<strong>MEM_RESET</strong>时，<strong>VirtualAllocEx</strong> 函数将忽略 <em>fProtect</em> 的值。但是，您仍必须将 <em>fProtect</em> 设置为有效的保护值，如<strong>PAGE_NOACCESS</strong>。</p> <p style=\"margin-left:0;\">如果您使用<strong>MEM_RESET</strong>并且内存范围映射到文件，<strong>则VirtualAllocEx</strong>将返回错误。共享视图只有在映射到分页文件时才可接受。</p> </td></tr><tr><td style=\"text-align:left;vertical-align:top;\"><a id=\"MEM_RESET_UNDO\"></a><a id=\"mem_reset_undo\"></a> <p><strong>MEM_RESET_UNDO</strong></p> <p>0x1000000</p> </td><td style=\"text-align:left;vertical-align:top;\"><strong>MEM_RESET_UNDO</strong>应仅在之前已成功应用<strong>MEM_RESET</strong>的地址范围上调用。它指示调用方对 <em>lpAddress</em> 和 <em>dwSize</em> 指定的指定内存范围内的数据感兴趣，并尝试反转<strong>MEM_RESET</strong>的影响。如果函数成功，则意味着指定地址范围内的所有数据都完好无损。如果函数失败，则地址范围内至少有一些数据已替换为零。 <p style=\"margin-left:0;\">此值不能与任何其他值一起使用。如果在之前未<strong>MEM_RESET</strong>的地址范围上调用<strong>MEM_RESET_UNDO</strong>，则行为未定义。指定<strong>MEM_RESET</strong>时，<strong>VirtualAllocEx</strong> 函数将忽略 <em>flProtect 的值</em>。但是，您仍必须将 <em>flProtect</em> 设置为有效的保护值，如<strong>PAGE_NOACCESS</strong>。</p> <p style=\"margin-left:0;\"><strong>Windows Server 2008 R2、Windows 7、Windows Server 2008、Windows Vista、Windows Server 2003 和 Windows XP： MEM_RESET_UNDO</strong>标志在 Windows 8 和 Windows Server 2012 之前不受支持。</p> </td></tr></tbody></table>\n</div>   \n <p style=\"margin-left:0;\">此参数还可以指定以下值，如所示。</p>\n<div>\n<table border=\"1\" cellspacing=\"0\"><tbody><tr><th style=\"text-align:left;vertical-align:top;\">价值</th><th style=\"text-align:left;vertical-align:top;\">意义</th></tr><tr><td style=\"text-align:left;vertical-align:top;\"><a id=\"MEM_LARGE_PAGES\"></a><a id=\"mem_large_pages\"></a> <p><strong>MEM_LARGE_PAGES</strong></p> <p>0x20000000</p> </td><td style=\"text-align:left;vertical-align:top;\">使用<a href=\"https://docs.microsoft.com/en-us/windows/desktop/Memory/large-page-support\" title=\"大页面支持\">大页面支持</a>分配内存。 <p style=\"margin-left:0;\">大小和对齐方式必须是大页最小值的倍数。若要获取此值，请使用 <a href=\"https://docs.microsoft.com/en-us/windows/desktop/api/memoryapi/nf-memoryapi-getlargepageminimum\" title=\"GetLargePageMinimum\">GetLargePageMinimum</a> 函数。</p> <p style=\"margin-left:0;\">如果指定此值，则还必须指定<strong>MEM_RESERVE</strong>和<strong>MEM_COMMIT</strong>。</p> </td></tr><tr><td style=\"text-align:left;vertical-align:top;\"><a id=\"MEM_PHYSICAL\"></a><a id=\"mem_physical\"></a> <p><strong>MEM_PHYSICAL</strong></p> <p>0x00400000</p> </td><td style=\"text-align:left;vertical-align:top;\">保留可用于映射地址<a href=\"https://docs.microsoft.com/en-us/windows/desktop/Memory/address-windowing-extensions\" title=\"窗口化扩展\">窗口化扩展</a>插件 （AWE） 页的地址范围。 <p style=\"margin-left:0;\">此值必须与<strong>MEM_RESERVE</strong>一起使用，不得与其他值一起使用。</p> </td></tr><tr><td style=\"text-align:left;vertical-align:top;\"><a id=\"MEM_TOP_DOWN\"></a><a id=\"mem_top_down\"></a> <p><strong>MEM_TOP_DOWN</strong></p> <p>0x00100000</p> </td><td style=\"text-align:left;vertical-align:top;\">在可能的最高地址分配内存。这可能比常规分配慢，尤其是在分配很多时。</td></tr></tbody></table>\n</div>\n<p style=\"margin-left:0;\"></p>\n<p style=\"margin-left:0;\"><code>[in] flProtect</code></p>\n<p style=\"margin-left:0;\">要分配的页面区域的内存保护。如果要提交页，则可以指定任何一个<a href=\"https://docs.microsoft.com/en-us/windows/win32/Memory/memory-protection-constants\" title=\"内存保护常量\">内存保护常量</a>。</p>\n<p style=\"margin-left:0;\">如果 <em>lpAddress</em> 指定安全区内的地址，<em>则 flProtect</em> 不能是以下任何值：</p>\n<ul style=\"margin-left:38px;\"><li>PAGE_NOACCESS</li><li>PAGE_GUARD</li><li>PAGE_NOCACHE</li><li>PAGE_WRITECOMBINE</li></ul>\n<p style=\"margin-left:0;\">为安全区分配动态内存时，必须<strong>PAGE_READWRITE</strong>或<strong>PAGE_EXECUTE_READWRITE</strong> <em>flProtect</em> 参数。</p>\n</blockquote>\n<p></p>\n<p></p>\n<h3 id=\"%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81%C2%A0\">示例代码 </h3>\n<pre><code class=\"language-cpp\">void CInjectTestDlg::OnBnClickedButton2()\n{\n\tconst char* path = \"E:\\\\工程文件\\\\myDll\\\\Debug\\\\mydll2.dll\";//要注入的dll路径\n\n\tHWND  hwnd = ::FindWindowA(NULL, \"陈子青注入工具2.0\");\n\tDWORD pid;\n\tGetWindowThreadProcessId(hwnd, &amp;pid);\n\n\tHANDLE hProc = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);\n\n\tLPVOID lpAddr =  VirtualAllocEx(hProc,NULL, strlen(path)+1, MEM_COMMIT, PAGE_READWRITE);\n\tWriteProcessMemory(hProc, lpAddr, path,strlen(path), NULL);\n\n\tHMODULE sysMod = LoadLibraryA(\"Kernel32.dll\");\n\n\n\t\n\tLPTHREAD_START_ROUTINE fp =(LPTHREAD_START_ROUTINE) GetProcAddress(sysMod, \"LoadLibraryA\");\n\t\n\tCreateRemoteThread(hProc, NULL, NULL,(LPTHREAD_START_ROUTINE)fp, lpAddr, 0, NULL);\n\t\n\n}</code></pre>\n<p></p>\n<h2 id=\"%E7%AA%81%E7%A0%B4Session%200%20%E9%9A%94%E7%A6%BB%E7%9A%84%E8%BF%9C%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5%C2%A0\">突破Session 0 隔离的远线程注入 </h2>\n<p>使用<span style=\"color:#4da8ee;\"><strong>ZwCreateThreadEx</strong></span>函数，突破<em>SESSION 0</em>隔离，向system等权限的系统服务器进程中入时，由于系统的<em>SESSION 0</em>隔离机制，导致注入失败；我们可使用<em>ZwCreateThreadEx</em>函数进行远程线程注入。<em>ZwCreateThreadEx</em>函数在<em>ntdll.dll</em>中没有被声明，所以需要使用<em>GetProcAddress</em>从<em>ntdll.dll</em>中获取函数导出地址。该函数在官网文档里是查询不到的。其函数原型如下</p>\n<blockquote>\n<p>X64<br/><span style=\"color:#fe2c24;\"><strong><span style=\"background-color:#ffd900;\">DWORD ZwCreateThreadEx(</span><br/><span style=\"background-color:#ffd900;\">    PHANDLE                    ThreadHandle,</span><br/><span style=\"background-color:#ffd900;\">    ACCESS_MASK                DesiredAccess,</span><br/><span style=\"background-color:#ffd900;\">    LPVOID                    ObjectAttributes,</span><br/><span style=\"background-color:#ffd900;\">    HANDLE                    ProcessHandle,</span><br/><span style=\"background-color:#ffd900;\">    LPTHREAD_START_ROUTINE    lpStartAddress,</span><br/><span style=\"background-color:#ffd900;\">    LPVOID                    lpParameter,</span><br/><span style=\"background-color:#ffd900;\">    ULONG                    CreateThreadFlags,</span><br/><span style=\"background-color:#ffd900;\">    SIZE_T                    ZeroBits,</span><br/><span style=\"background-color:#ffd900;\">    SIZE_T                    StackSize,</span><br/><span style=\"background-color:#ffd900;\">    SIZE_T                    MaximumStackSize,</span><br/><span style=\"background-color:#ffd900;\">    LPVOID                    pUnkown</span><br/><span style=\"background-color:#ffd900;\">)</span></strong></span></p>\n</blockquote>\n<blockquote>\n<p>X32<br/><strong><span style=\"color:#fe2c24;\"><span style=\"background-color:#ffd900;\">DWORD ZwCreateThreadEx(</span><br/><span style=\"background-color:#ffd900;\">    PHANDLE ThreadHandle,</span><br/><span style=\"background-color:#ffd900;\">    ACCESS_MASK DesiredAccess,</span><br/><span style=\"background-color:#ffd900;\">    LPVOID ObjectAttributes,</span><br/><span style=\"background-color:#ffd900;\">    HANDLE ProcessHandle,</span><br/><span style=\"background-color:#ffd900;\">    LPTHREAD_START_ROUTINE lpStartAddress,</span><br/><span style=\"background-color:#ffd900;\">    LPVOID lpParameter,</span><br/><span style=\"background-color:#ffd900;\">    BOOL CreateSuspended,</span><br/><span style=\"background-color:#ffd900;\">    DWORD dwStackSize,</span><br/><span style=\"background-color:#ffd900;\">    DWORD dw1,</span><br/><span style=\"background-color:#ffd900;\">    DWORD dw2,</span><br/><span style=\"background-color:#ffd900;\">    LPVOID pUnkown);</span></span></strong></p>\n</blockquote>\n<h3><strong>示例代码 </strong></h3>\n<pre><code class=\"language-cpp\"> typedef_ZwCreateThreadEx ZwCreateThreadEx = (typedef_ZwCreateThreadEx)GetProcAddress(hNtdll, \"ZwCreateThreadEx\");\n    if (NULL == ZwCreateThreadEx)\n    {\n        printf(\"获取ZwCreateThreadEx函数地址失败！\");\n        CloseHandle(hProcess);\n        return FALSE;\n    }\n\n    //在目标进程中创建线程\n    HANDLE hRemoteThread = NULL;\n    //pfnStartAddress 为loadlibrary函数地址， pBuf 传参\n    DWORD dwStatus = ZwCreateThreadEx(&amp;hRemoteThread, PROCESS_ALL_ACCESS, NULL, hProcess,\n            pfnStartAddress, pBuf, 0, 0, 0, 0, NULL);\n    if (NULL == hRemoteThread)\n    {\n        printf(\"目标进程中创建线程失败！\");\n        CloseHandle(hProcess);\n        return FALSE;\n    }\n</code></pre>\n<p></p>\n<h2 id=\"%E5%85%A5%E5%8F%A3%E7%82%B9%E6%B3%A8%E5%85%A5\">*入口点注入</h2>\n<h3><strong>原理</strong></h3>\n<p>在以<strong>CREATE_SUSPENDED</strong>的方式启动程序，进程启动时被挂起，此时该进程无法拿到任何权限和数据，此时修改PE文件的入口点代码，在进程入口点跳转到实现注入的代码段，并在此恢复入口点代码再跳转回入口点，让程序正常运行。</p>\n<p>这样做的好处是：第一我们注入的代码时运行在进程的主线程中的；第二进程在拉起时就被暂定完成注入之后才开始运行，实现“神不知鬼不觉”的效果</p>\n<p>实现过程中涉及如下关键技术点</p>\n<p>① 获取程序入口点  <a class=\"link-info\" href=\"https://blog.csdn.net/weixin_40582034/article/details/125716018?spm=1001.2014.3001.5502\" title=\"C++获取程序入口点\">C++获取程序入口点</a></p>\n<p>② 进程的创建挂起  <a class=\"link-info\" href=\"https://blog.csdn.net/weixin_40582034/article/details/125676893?spm=1001.2014.3001.5502\" title=\"进程的创建与使用\">进程的创建与使用</a></p>\n<p>③  jmp 远跳 对应机器码 0xE9</p>\n<p>④ 如何定位写入数据 技巧 ：通过 0xCCCCCCCC 来转换</p>\n<p>⑤ 关于写入函数的问题，函数中涉及调用都是通过地址寻址来调用的，如果直接写入，该地址在对方内存空间中是无效的 。</p>\n<p>⑥ Jmp调转的相对地址计算 = 跳转的目标地址 - 当前地址 - 0x5</p>\n<p>该方法需要对注入进程的内存进行反复改写和恢复，修正过程中要在对方进程中进行Debug，因此需要一定的逆向基础真正完善，否则程序常常是容易崩溃的，</p>\n<p></p>\n<p>下面提供一段入口点注入的代码，仅供参考</p>\n<h3 id=\"%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81\">参考代码</h3>\n<pre><code class=\"language-cpp\">#include&lt;stdio.h&gt;\n#include&lt;cstring&gt;\n#include&lt;Windows.h&gt;\nusing namespace std;\n\n\nchar dllPath[MAX_PATH] = \"E:\\\\工程文件\\\\EntryPointDemo\\\\Debug\\\\Dll1.dll\";\nconst char exePath[MAX_PATH] = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\game.exe\";\n\ntypedef HMODULE(*_loadLibrayA)(LPCSTR);\ntypedef HMODULE (*_getModuleHandle)(LPCSTR);\ntypedef BOOL (*_virtualProtect)(LPVOID ,SIZE_T,DWORD,PDWORD);\n\ntypedef struct ROMOTE_DATA\n{\n\tchar path[MAX_PATH];//dll地址\n\t_loadLibrayA loadLibrary;\n\tDWORD entryPoint;\n\t_getModuleHandle getModuleHande;\n\t_virtualProtect  virtualProtect;\n\tchar code[0x5];\n\tLPVOID injectAddr;\n\n}*PROMOTE_DATA;\n\nPROMOTE_DATA rotData;\n\nDWORD GetEntryPointAddr();\nvoid initRotData()\n{\n\t//strcpy_s(rotData-&gt;path,dllPath);\n\tmemcpy(rotData-&gt;path,dllPath,sizeof(dllPath));\n\n\tHMODULE hMod =  LoadLibraryA(\"Kernel32.dll\");\n\trotData-&gt;loadLibrary = (_loadLibrayA)GetProcAddress(hMod, \"LoadLibraryA\");\n\t//printf(\"loadLibrary :%x\\n\", rotData-&gt;loadLibrary);\n\trotData-&gt;entryPoint = GetEntryPointAddr();\n\n\trotData-&gt;getModuleHande = (_getModuleHandle)GetProcAddress(hMod, \"GetModuleHandleA\");\n\t//printf(\"getModuleHande:%x\\n\", rotData-&gt;getModuleHande);\n\trotData-&gt;virtualProtect = (_virtualProtect)GetProcAddress(hMod, \"VirtualProtect\");\n\t//printf(\"virtualProtect: %x\\n\", rotData-&gt;virtualProtect);\n\n}\n\nDWORD GetEntryPointAddr()\n{\n\tHANDLE hFile = CreateFileA(exePath, GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);\n\tint szFile = GetFileSize(hFile, NULL);\n\tLPBYTE lpFile = new BYTE[szFile];\n\tint ret = ReadFile(hFile, lpFile, szFile, NULL, NULL);\n\tif (ret == 0)\n\t{\n\t\tprintf(\"read file error:%d\", GetLastError());\n\t\treturn NULL;\n\t}\n\n\tPIMAGE_DOS_HEADER imgDosHeader = (PIMAGE_DOS_HEADER)lpFile;\n\tPIMAGE_NT_HEADERS imgNtHeader = (PIMAGE_NT_HEADERS)(lpFile + imgDosHeader-&gt;e_lfanew);\n\tPIMAGE_OPTIONAL_HEADER imgOptionHeader = &amp;(imgNtHeader-&gt;OptionalHeader);\n\n\tDWORD bRet = imgOptionHeader-&gt;AddressOfEntryPoint;\n\n\tif (hFile != INVALID_HANDLE_VALUE) CloseHandle(hFile);\n\tif (lpFile != NULL) delete[] lpFile;\n\n\treturn bRet;\n}\n\nvoid InjectFunc()\n{\n\tPROMOTE_DATA pData = (PROMOTE_DATA)0xCCCCCCCC;\n\tpData-&gt;loadLibrary(pData-&gt;path);\n\n\tchar* prevcode = (char*)pData-&gt;entryPoint;\n\tfor (int i = 0; i &lt; 0x5; i++) prevcode[i] = pData-&gt;code[i];\n\n\tunsigned point = pData-&gt;entryPoint;\n\t__asm\n\t{\n\t\tmov eax, point\n\t\tjmp eax\n\t}\n}\n\nvoid modifyEntryPoint(PROMOTE_DATA p)\n{\n\tDWORD baseAddr= (DWORD)p-&gt;getModuleHande(0);\n\tp-&gt;entryPoint += baseAddr;\n\n\tDWORD lwt{};\n\tp-&gt;virtualProtect((LPVOID)p-&gt;entryPoint, 0x5, PAGE_EXECUTE_READWRITE, &amp;lwt);\n\n\tchar *prevcode = (char*)p-&gt;entryPoint;\n\tfor (int i = 0; i &lt; 5; ++i) p-&gt;code[i] = prevcode[i];\n\tprevcode[0] = 0xE9;//jmp\n\tunsigned distance = (unsigned)( (DWORD)p-&gt;injectAddr - p-&gt;entryPoint - 0x5);\n\n\tunsigned *_code = (unsigned*)(p-&gt;entryPoint+1);\n\t_code[0] = distance;\n\n}\nint main()\n{\n\tSTARTUPINFOA startUp;\n\tZeroMemory(&amp;startUp, sizeof(STARTUPINFOA));\n\tPROCESS_INFORMATION  proInfo;\n\tZeroMemory(&amp;proInfo, sizeof(PROCESS_INFORMATION));\n\tint bRet = CreateProcessA(exePath, NULL, NULL, NULL, FALSE, CREATE_SUSPENDED, NULL,\n\t\t\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\\",\n\t\t&amp;startUp, &amp;proInfo);\n\tif (bRet == 0)\n\t{\n\t\tprintf(\"createprocess error:%d\\n\", GetLastError());\n\t\treturn 0;\n\t}\n\n\t//进行入口点注入\n\trotData = new ROMOTE_DATA;\n\n\tDWORD rotAddr=(DWORD)VirtualAllocEx(proInfo.hProcess, NULL, 0x3000, MEM_COMMIT, PAGE_EXECUTE_READWRITE);\n\tDWORD rotDataAddr = rotAddr + 0x200;\n\t\n\tinitRotData();\n\n\tchar modifyCode[0x200];\n\t\t\n\tmemcpy(modifyCode, InjectFunc, sizeof(modifyCode));\n\n\tfor (int i = 0; i &lt; 0x200; i++)\n\t{ \n\t\tunsigned* pcode = (unsigned*)(&amp;modifyCode[i]);\n\t\tif(pcode[0] == 0xCCCCCCCC)\n\t\t{\n\t\t\tpcode[0] = (unsigned)rotDataAddr;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tDWORD injectAddr = rotAddr + 0x1000; //注入dll的函数\n\trotData-&gt;injectAddr = (LPVOID)injectAddr;\n\tWriteProcessMemory(proInfo.hProcess, (LPVOID)rotDataAddr, rotData, 0x200, NULL);\n\n\tWriteProcessMemory(proInfo.hProcess, (LPVOID)injectAddr, modifyCode, 0x200, NULL);\n\n\tDWORD rotFuncAddr = rotAddr + 0x2000; //写入远程函数\n\tWriteProcessMemory(proInfo.hProcess, (LPVOID)rotFuncAddr, modifyEntryPoint, 0x500, NULL);\n\n\tHANDLE hProcHnd = CreateRemoteThread(proInfo.hProcess, NULL, 0,\n\t\t(LPTHREAD_START_ROUTINE)rotFuncAddr, (LPVOID)rotDataAddr, 0, NULL);\n\tif (hProcHnd != INVALID_HANDLE_VALUE) WaitForSingleObject(hProcHnd, INFINITE);\n\telse printf(\"CreateRemoteThread error : %d\", GetLastError());\n\n\t//注入完成后恢复进程运行\n\tResumeThread(proInfo.hThread);\n\n\n\t\n\treturn 0;\n}</code></pre>\n<p></p>\n<p></p>\n<h2 id=\"%C2%A0APC%E6%B3%A8%E5%85%A5\"> APC注入</h2>\n<h3 id=\"一apc注入\">一、APC注入</h3>\n<p>什么是APC?<br/><br/><a href=\"https://bbs.pediy.com/thread-217298.htm#msg_header_h1_2\" title=\"[原创]小Win，点一份APC（Apc机制详解）（一）-编程技术-看雪论坛-安全社区|安全招聘|bbs.pediy.com\">[原创]小Win，点一份APC（Apc机制详解）（一）-编程技术-看雪论坛-安全社区|安全招聘|bbs.pediy.com</a><br/> 每一个线程都有自己的APC队列，使用QueueUserAPC函数把一个APC函数压入APC队列中。当处于处于用户模式的APC压入线程APC队列后，该线程并不直接调用APC函数，除非该线程处于可通知状态，调用的顺序为先入先出(FIFO)。</p>\n<h3 id=\"二api\">二、API</h3>\n<p>QueueUserAPC函数<br/><a href=\"https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-queueuserapc\" title=\"QueueUserAPC function (processthreadsapi.h) - Win32 apps | Microsoft Docs\">QueueUserAPC function (processthreadsapi.h) - Win32 apps | Microsoft Docs</a></p>\n<h3 id=\"三实现\">三、实现</h3>\n<p>一个进程包含多个线程，为了确保能够执行插入的APC,应向目标进程的所有线程都插入相同的APC，实现加载DLL的操作<br/> 实现APC注入的具体流程如下:<br/> 首先，通过OpenProcess函数打开目标进程，获取目标进程的句柄。<br/> 然后，通过调用WIN32 API函数CreateToolhelp32Snapshot、Thread32First以及Thread32Next遍历线程快照，获取目标进程的所有ID。<br/> 接着，调用VirtualAllocEx函数在目标进程中申请内存，并通过WriteProcessMemory函数向内存中写入DLL的注入路径。<br/> 最后，遍历获取的线程ID，并调用OpenThread函数以THREAD_ALL_ACCESS访问权限打开线程，获取线程句柄。并调用QueueUserAPC函数向线程插入APC函数，设置APC函数的地址为LoadLibraryA函数的地址,并设置APC函数参数为上述DLL路径地址。</p>\n<h3 id=\"%E5%9B%9B%E3%80%81%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81\">四、示例代码</h3>\n<pre><code class=\"language-cpp\">#include \"stdafx.h\"\n#include \"ApcInject.h\"\n\n\nvoid ShowError(char *pszText)\n{\n\tchar szErr[MAX_PATH] = { 0 };\n\t::wsprintf(szErr, \"%s Error[%d]\\n\", pszText);\n\t::MessageBox(NULL, szErr, \"ERROR\", MB_OK | MB_ICONERROR);\n}\n\n\n// 根据进程名称获取PID\nDWORD GetProcessIdByProcessName(char *pszProcessName)\n{\n\tDWORD dwProcessId = 0;\n\tPROCESSENTRY32 pe32 = { 0 };\n\tHANDLE hSnapshot = NULL;\n\tBOOL bRet = FALSE;\n\t::RtlZeroMemory(&amp;pe32, sizeof(pe32));\n\tpe32.dwSize = sizeof(pe32);\n\n\t// 获取进程快照\n\thSnapshot = ::CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n\tif (NULL == hSnapshot)\n\t{\n\t\tShowError(\"CreateToolhelp32Snapshot\");\n\t\treturn dwProcessId;\n\t}\n\n\t// 获取第一条进程快照信息\n\tbRet = ::Process32First(hSnapshot, &amp;pe32);\n\twhile (bRet)\n\t{\n\t\t// 获取快照信息\n\t\tif (0 == ::lstrcmpi(pe32.szExeFile, pszProcessName))\n\t\t{\n\t\t\tdwProcessId = pe32.th32ProcessID;\n\t\t\tbreak;\n\t\t}\n\n\t\t// 遍历下一个进程快照信息\n\t\tbRet = ::Process32Next(hSnapshot, &amp;pe32);\n\t}\n\n\treturn dwProcessId;\n}\n\n\n// 根据PID获取所有的相应线程ID\nBOOL GetAllThreadIdByProcessId(DWORD dwProcessId, DWORD **ppThreadId, DWORD *pdwThreadIdLength)\n{\n\tDWORD *pThreadId = NULL;\n\tDWORD dwThreadIdLength = 0;\n\tDWORD dwBufferLength = 1000;\n\tTHREADENTRY32 te32 = { 0 };\n\tHANDLE hSnapshot = NULL;\n\tBOOL bRet = TRUE;\n\n\tdo\n\t{\n\t\t// 申请内存\n\t\tpThreadId = new DWORD[dwBufferLength];\n\t\tif (NULL == pThreadId)\n\t\t{\n\t\t\tShowError(\"new\");\n\t\t\tbRet = FALSE;\n\t\t\tbreak;\n\t\t}\n\t\t::RtlZeroMemory(pThreadId, (dwBufferLength * sizeof(DWORD)));\n\n\t\t// 获取线程快照\n\t\t::RtlZeroMemory(&amp;te32, sizeof(te32));\n\t\tte32.dwSize = sizeof(te32);\n\t\thSnapshot = ::CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0);\n\t\tif (NULL == hSnapshot)\n\t\t{\n\t\t\tShowError(\"CreateToolhelp32Snapshot\");\n\t\t\tbRet = FALSE;\n\t\t\tbreak;\n\t\t}\n\n\t\t// 获取第一条线程快照信息\n\t\tbRet = ::Thread32First(hSnapshot, &amp;te32);\n\t\twhile (bRet)\n\t\t{\n\t\t\t// 获取进程对应的线程ID\n\t\t\tif (te32.th32OwnerProcessID == dwProcessId)\n\t\t\t{\n\t\t\t\tpThreadId[dwThreadIdLength] = te32.th32ThreadID;\n\t\t\t\tdwThreadIdLength++;\n\t\t\t}\n\n\t\t\t// 遍历下一个线程快照信息\n\t\t\tbRet = ::Thread32Next(hSnapshot, &amp;te32);\n\t\t}\n\n\t\t// 返回\n\t\t*ppThreadId = pThreadId;\n\t\t*pdwThreadIdLength = dwThreadIdLength;\n\t\tbRet = TRUE;\n\n\t} while (FALSE);\n\n\tif (FALSE == bRet)\n\t{\n\t\tif (pThreadId)\n\t\t{\n\t\t\tdelete[]pThreadId;\n\t\t\tpThreadId = NULL;\n\t\t}\n\t}\n\n\treturn bRet;\n}\n\n\n// APC注入\nBOOL ApcInjectDll(char *pszProcessName, char *pszDllName)\n{\n\tBOOL bRet = FALSE;\n\tDWORD dwProcessId = 0;\n\tDWORD *pThreadId = NULL;\n\tDWORD dwThreadIdLength = 0;\n\tHANDLE hProcess = NULL, hThread = NULL;\n\tPVOID pBaseAddress = NULL;\n\tPVOID pLoadLibraryAFunc = NULL;\n\tSIZE_T dwRet = 0, dwDllPathLen = 1 + ::lstrlen(pszDllName);\n\tDWORD i = 0;\n\n\tdo\n\t{\n\t\t// 根据进程名称获取PID\n\t\tdwProcessId = GetProcessIdByProcessName(pszProcessName);\n\t\tif (0 &gt;= dwProcessId)\n\t\t{\n\t\t\tbRet = FALSE;\n\t\t\tbreak;\n\t\t}\n\n\t\t// 根据PID获取所有的相应线程ID\n\t\tbRet = GetAllThreadIdByProcessId(dwProcessId, &amp;pThreadId, &amp;dwThreadIdLength);\n\t\tif (FALSE == bRet)\n\t\t{\n\t\t\tbRet = FALSE;\n\t\t\tbreak;\n\t\t}\n\n\t\t// 打开注入进程\n\t\thProcess = ::OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);\n\t\tif (NULL == hProcess)\n\t\t{\n\t\t\tShowError(\"OpenProcess\");\n\t\t\tbRet = FALSE;\n\t\t\tbreak;\n\t\t}\n\n\t\t// 在注入进程空间申请内存\n\t\tpBaseAddress = ::VirtualAllocEx(hProcess, NULL, dwDllPathLen, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);\n\t\tif (NULL == pBaseAddress)\n\t\t{\n\t\t\tShowError(\"VirtualAllocEx\");\n\t\t\tbRet = FALSE;\n\t\t\tbreak;\n\t\t}\n\t\t// 向申请的空间中写入DLL路径数据 \n\t\t::WriteProcessMemory(hProcess, pBaseAddress, pszDllName, dwDllPathLen, &amp;dwRet);\n\t\tif (dwRet != dwDllPathLen)\n\t\t{\n\t\t\tShowError(\"WriteProcessMemory\");\n\t\t\tbRet = FALSE;\n\t\t\tbreak;\n\t\t}\n\n\t\t// 获取 LoadLibrary 地址\n\t\tpLoadLibraryAFunc = ::GetProcAddress(::GetModuleHandle(\"kernel32.dll\"), \"LoadLibraryA\");\n\t\tif (NULL == pLoadLibraryAFunc)\n\t\t{\n\t\t\tShowError(\"GetProcessAddress\");\n\t\t\tbRet = FALSE;\n\t\t\tbreak;\n\t\t}\n\n\t\t// 遍历线程, 插入APC\n\t\tfor (i = 0; i &lt; dwThreadIdLength; i++)\n\t\t{\n\t\t\t// 打开线程\n\t\t\thThread = ::OpenThread(THREAD_ALL_ACCESS, FALSE, pThreadId[i]);\n\t\t\tif (hThread)\n\t\t\t{\n\t\t\t\t// 插入APC\n\t\t\t\t::QueueUserAPC((PAPCFUNC)pLoadLibraryAFunc, hThread, (ULONG_PTR)pBaseAddress);\n\t\t\t\t// 关闭线程句柄\n\t\t\t\t::CloseHandle(hThread);\n\t\t\t\thThread = NULL;\n\t\t\t}\n\t\t}\n\n\t\tbRet = TRUE;\n\n\t} while (FALSE);\n\n\t// 释放内存\n\tif (hProcess)\n\t{\n\t\t::CloseHandle(hProcess);\n\t\thProcess = NULL;\n\t}\n\tif (pThreadId)\n\t{\n\t\tdelete[]pThreadId;\n\t\tpThreadId = NULL;\n\t}\n\n\treturn bRet;\n}</code></pre>\n<p></p>\n</div>\n</div>"}