{"blogid": "124718532", "writerAge": "码龄4年", "writerBlogNum": "158", "writerCollect": "701", "writerComment": "190", "writerFan": "791", "writerGrade": "5级", "writerIntegral": "2081", "writerName": "biter0088", "writerProfileAdress": "writer_image\\profile_124718532.jpg", "writerRankTotal": "8918", "writerRankWeekly": "10521", "writerThumb": "252", "writerVisitNum": "186064", "blog_read_count": "2245", "blog_time": "已于 2022-06-18 23:17:32 修改", "blog_title": "Eigen(2):使用eigen进行四元数与旋转矩阵转换(c++实现)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h3>1 四元数转旋转矩阵</h3>\n<p>        使用了normalized()函数和toRotationMatrix()函数</p>\n<pre><code class=\"language-cpp\">//下面的变量名称自拟      \n    Eigen::Quaterniond q_odom_curr_tmp;//声明一个Eigen类的四元数\n    //此处进行赋值，使用其他语句以及合理的常数也可\n    q_odom_curr_tmp.x() = imuVec[imuVec.size()-1].orientation.x;\n    q_odom_curr_tmp.y() = imuVec[imuVec.size()-1].orientation.y;\n    q_odom_curr_tmp.z() = imuVec[imuVec.size()-1].orientation.z;\n    q_odom_curr_tmp.w() =imuVec[imuVec.size()-1].orientation.w;\n    Eigen::Matrix3d R_odom_curr_tmp;//声明一个Eigen类的3*3的旋转矩阵\n    //四元数转为旋转矩阵--先归一化再转为旋转矩阵\n    R_odom_curr_tmp= q_odom_curr_tmp.normalized().toRotationMatrix();  \n</code></pre>\n<p>        打印输出四元数：</p>\n<pre><code class=\"language-cpp\">    std::cout&lt;&lt;\"q_odom_curr_now:\"&lt;&lt; q_odom_curr_now.x() &lt;&lt;q_odom_curr_now.y()&lt;&lt;q_odom_curr_now.z()&lt;&lt;q_odom_curr_now.w()&lt;&lt;std::endl;</code></pre>\n<h3>2 旋转矩阵转四元数</h3>\n<p>        下面使用了inverse()--求逆函数，Eigen::Quaterniond()--求四元数，normalize()--归一化</p>\n<pre><code class=\"language-cpp\">//注：下面的赋值方法及变量名称自己按情况定\nEigen::Matrix3d R_odom_curr_now;//3*3旋转矩阵\nR_odom_curr_now=R_odom_curr0.inverse()*R_odom_curr_tmp;//对旋转矩阵进行赋值\nq_odom_curr_now=Eigen::Quaterniond(R_odom_curr_now);//旋转矩阵转为四元数\nq_odom_curr_now.normalize();//转为四元数之后，需要进行归一化</code></pre>\n<h3>3 四元数转欧拉角</h3>\n<p>        下面是函数的主体代码，用到了ros的tf::Quaternion和tf::Matrix3x3，Eigen可用可不用，主要传递给函数的参数能够代替四元数即可，返回值为角度值</p>\n<pre><code class=\"language-cpp\">#include &lt;tf/transform_datatypes.h&gt;\n#include &lt;tf/transform_broadcaster.h&gt;\n#define M_PI 3.1415926;\n\ndouble getyaw(Eigen::Quaterniond qua){\n  tf::Quaternion q(qua.x(),\n    qua.y(),\n    qua.z(),\n    qua.w());\n  tf::Matrix3x3 m(q);\n  double roll, pitch, yaw;\n  m.getRPY(roll, pitch, yaw);\n  return yaw*180.0/M_PI;\n}</code></pre>\n<h3>4 变换矩阵、旋转矩阵/四元数、平移向量</h3>\n<p>四元数+平移向量构造变换矩阵</p>\n<pre><code class=\"language-cpp\">      Eigen::Quaterniond q_odom_curr0;//四元数\n      Eigen::Isometry3d T_1=Eigen::Isometry3d::Identity(); //变换矩阵\n      T_1.rotate ( q_odom_curr0.toRotationMatrix() );  \n      T_1.pretranslate ( Eigen::Vector3d ( 0,0,0 ) ); \n</code></pre>\n<p> 变换矩阵转旋转向量/四元数+平移向量</p>\n<pre><code class=\"language-cpp\">      Eigen::Matrix3d rotation_matrix;//旋转矩阵\n      rotation_matrix = T_1.rotation();\n      t_odom_curr_now = T_1.translation();//t_odom_curr_now 平移向量\n      q_odom_curr_now = Eigen::Quaterniond ( rotation_matrix );//转为四元数</code></pre>\n<h3>参考链接：</h3>\n<p>讲解四元数、旋转矩阵、欧拉角的转换，很不错：</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/259999988\" title=\"https://zhuanlan.zhihu.com/p/259999988\">https://zhuanlan.zhihu.com/p/259999988</a></p>\n<p>讲解了Eigen与矩阵相关的函数和类，也很不错</p>\n<p><a href=\"https://blog.csdn.net/weixin_31707171/article/details/112363668\" title=\"https://blog.csdn.net/weixin_31707171/article/details/112363668\">https://blog.csdn.net/weixin_31707171/article/details/112363668</a></p>\n<p>eigen矩阵索引：</p>\n<p><a href=\"https://blog.csdn.net/xiaoyucyt/article/details/87866445\" title=\"https://blog.csdn.net/xiaoyucyt/article/details/87866445\">https://blog.csdn.net/xiaoyucyt/article/details/87866445</a></p>\n<p>四元数、旋转矩阵、平移向量、变换矩阵等：</p>\n<p><a href=\"https://blog.csdn.net/HERO_CJN/article/details/82426372\" title=\"https://blog.csdn.net/HERO_CJN/article/details/82426372\">https://blog.csdn.net/HERO_CJN/article/details/82426372</a></p>\n<p><a href=\"https://blog.csdn.net/qq_40081208/article/details/102937581\" title=\"https://blog.csdn.net/qq_40081208/article/details/102937581\">https://blog.csdn.net/qq_40081208/article/details/102937581</a> </p>\n<p><a href=\"https://www.cnblogs.com/jerry323/p/9097264.html\" title=\"https://www.cnblogs.com/jerry323/p/9097264.html\">https://www.cnblogs.com/jerry323/p/9097264.html</a> </p>\n<p>@meng</p>\n</div>\n</div>"}