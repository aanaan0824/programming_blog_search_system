{"blogid": "125292848", "writerAge": "码龄5年", "writerBlogNum": "21", "writerCollect": "234", "writerComment": "18", "writerFan": "90", "writerGrade": "2级", "writerIntegral": "284", "writerName": "weixin_38950816", "writerProfileAdress": "writer_image\\profile_125292848.jpg", "writerRankTotal": "64503", "writerRankWeekly": "116592", "writerThumb": "29", "writerVisitNum": "26731", "blog_read_count": "1810", "blog_time": "已于 2022-06-15 12:03:07 修改", "blog_title": "C#上位机和松下PLC通讯", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"CPLC_0\"></a>C#上位机和松下PLC通讯</h2>\n<p><strong>1、前言</strong><br/> 也好久没回来看博客了，看大家对于其他的PLC的需求都是有的，说明搞我们工业控制这一行的人也是很多的。刚好最近基于项目需要，一些新的东西，需要和松下PLC的FP系列的CPU进行通讯然后使用松下的NewTocol协议进行通讯，对对应的寄存器/线圈进行读写操作。于是，就随笔记录下相应的程序代码。<br/> 松下FP系列PLC与工控机之间的通信方式可以采用串口通信，与工控机连接的RS232电缆（长度有限485的长度会比较长很多）必须按照松下的产品手册所给的连线图进行制作，否则通信将无法实现。电缆连线图如下：<br/> <img alt=\"串口接线图\" src=\"image\\5417654c9eb44a778db6443062498343.png\"/><br/> 至于怎么接线，需要的可以去了解下，不过一般在项目过程中，PLC的编程人员会把线接好，直接接入到工控机就可以使用了。<br/> 既然是串口通讯，我们就需要了解下串口通讯的一些概念。我们往下走。<br/> <strong>2、概念</strong><br/> 2.1 波特率<br/> 在电子通信领域，波特（Baud）即调制速率，指的是有效数据讯号调制载波的速率，即单位时间内载波调制状态变化的次数。通俗一点，就是一个单位时间内数据传递的符号的个数<br/> 2.2 奇偶校验位<br/> 奇偶校验位 (Parity)通常用在数据通信中来保证数据的有效性。分为偶校验、奇校验、或非校验。如果偶校验在使用，校验位将这些位置为偶数；如果奇校验在使用，校验位将这些位置为奇数。<br/> 2.3 数据位<br/> 数据位一般为8位一个字节的数据（也有6位、7位的情况），低位（LSB）在前，高位（MSB）在后。<br/> 2.4 停止位<br/> 用于表示单个包的最后一位。典型的值为1，1.5和2位。<br/> 2.5 SerialPort类<br/> 需要引入System.IO.Port命名空间。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\96f2f756c7e64e07a6c75113b923871c.png\"/><br/> <strong>3、NewTocol协议</strong><br/> 至于协议文档，大家可以去官方或者百度查询了解，该协议由以下特点：</p>\n<ol><li>数据传输采用ASCII的形式。</li><li>应答式协议，首先由工控机发送指令，然后PLC会自动对指令进行响应。也就是说，不需要编写任何PLC程序，只要PLC和工控机连接正常，工控机给PLC发送指令，都能得到PLC的响应回复。</li></ol>\n<p><strong>4、上位机发送数据帧格式</strong><br/> 指令是以帧为单位进行，工控机向PLC发送命令帧，然后PLC作出响应，向工控机发送响应帧。<br/> 格式内容如下: <img alt=\"在这里插入图片描述\" src=\"image\\32243bb6dafa45a6b1f728d9aa6ff3ba.png\"/><br/> 其中：</p>\n<ol><li>%为起始码，这是固定不变的。</li><li>AD(H)和 AD(L)是目标站号的高位和低位。一般如果只有一个PLC的话，那么就填写01，高位是0，低位是1。</li><li>#也是固定不变的。</li><li>指令代码。每个指令会有不同的指令代码，下面会讲。<br/> 文本代码。指令的内容，不同的指令，内容也不同。</li><li>BCC(H)和BCC(L)，是帧的数据校验的高低位，数据校验范围是BCC前面的所有字符；下面我们会展开介绍说明。</li><li>CR，回车键，ASCII为0x0D，不可见字符。</li></ol>\n<p><strong>5、PLC响应帧格式</strong><br/> 响应帧有两种，一种是正确响应，一种是错误响应。也就是说，如果工控机给PLC发送的指令是正确的，那么PLC就会返回正确的响应帧，否则就返回错误的响应帧。 <img alt=\"在这里插入图片描述\" src=\"image\\1f135cb4540040ab8d67676ec8d59e96.png\"/><br/> <strong>6、工作站的配置</strong><br/> 以下是电气工程师提供的PLC配置图为例，我们可以看到PLC内部的设备预设站号是1，那么对于上位机而言目标站号就是1，此配置可以找电气工程师告知即可。<img alt=\"在这里插入图片描述\" src=\"image\\d51f00568eb54f4984d7c4408efe8717.png\"/><br/> <strong>7、指令代码</strong><br/> 工控机可以给PLC发送的指令一共有20多种，不过我们常用的指令一般有9种。如下图所示：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\7245b9c4b6584c40b414908c3dfcb772.png\"/><br/> 其中常用的：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\56f249123fed4281998cb34e886e27f5.png\"/></p>\n<p><strong>8、BCC的计算方式</strong><br/> BCC校验码的计算方式是将指令中的各个ASCII字符的16进制(00～FF)进行异或求和后生成的. 该校验码也以两个ASCII码字符表示（高位在前，低位在后）。<br/> 例如这条指令：<br/> %01#RCSX00001DCR<br/> 注意：CR不是两个字符，是一个字符，回车键，但是是不可显示字符，所以这里用CR来表示。<br/> 计算方式：<img alt=\"在这里插入图片描述\" src=\"image\\a5d025c546aa4ba1a4819b79b066bcf6.png\"/><br/> 在此贴上BCC校验的代码：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// BCC校验码</span>\n        <span class=\"token comment\">/// 计算方式是将指令中的各个ASCII字符的16进制(00～FF)进行异或求和后生成的. </span>\n        <span class=\"token comment\">/// 该校验码也以两个ASCII码字符表示（高位在前，低位在后）</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"cmd\"&gt;&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;returns&gt;&lt;/returns&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">Bcc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> cmd<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            cmd <span class=\"token operator\">=</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">byte</span></span> bcc <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> cmdArr <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>Encoding<span class=\"token punctuation\">.</span>ASCII<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> cmdArr<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                bcc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>bcc <span class=\"token operator\">^</span> cmdArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> bcc<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>9、常用指令举例</strong><br/> 例1：写入单触点状态（指令代码：WCS） <img alt=\"在这里插入图片描述\" src=\"image\\1b92947355334004956bda69c87863e4.png\"/><br/> 例如我们往触点R12写入1，则命令帧为：<br/> %01#WCSR0012120CR<br/> 拆开成各个部分：% 01 # WCS R 0012 1 20 CR<br/> 正常通信情况下，PLC会返回正确的响应帧：%01$WC14CR</p>\n<pre><code>例2：读取单触点状态（指令代码：RCS）\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8c0936239f43487c902d0f7a38263180.png\"/><br/> 例如我们读取触点R12的值，则命令帧为：<br/> %01#RCSR001214CR<br/> 拆分成各个部分：% 01 # RCS R 0012 14 CR<br/> 正常通信情况下，假如R12触点的值为1，那么PLC返回的响应帧为<br/> %01$RC120**CR<br/> 例3：写入数据寄存器值（指令代码：WD）<br/> <img alt=\"在这里插入图片描述\" src=\"image\\20cedd5aa9fb4edfb38be5461166616c.png\"/><br/> 例如我们写入字数值到PLC的 DT1到DT3，其中：DT1=05H，DT2=1507H，DT3=900H，则命令帧为：<br/> 这里需要注意的是：<br/> 写入的数值是按字写入，也就是说，每个值占2个字节。<br/> 低位在前，高位在后。<br/> 写入的字符是16进制的。<br/> 所以，需要代码进行处理。例如此处的DT2=1507H，1507H的10进制值是5383，则处理步骤为：<br/> 先将5383转换为16进制的字符1507<br/> 将字符转换顺序，低位在前，高位在后，也就是转换成：0715<br/> 我们写一个函数来进行处理：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">ConvertShortToPlcFormat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">short</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> temp<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>正常通信情况下，PLC的响应帧为： <img alt=\"在这里插入图片描述\" src=\"image\\e7c15fa8db534670bf703372c22d20d9.png\"/><br/> <strong>10、代码实现</strong><br/> 1、先定义松下通讯配置用的数据模型<br/> 以下是配置文件内容和模型代码：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\dd073c63c3f34c6a94b5244ae5ff9cf0.png\"/></p>\n<pre><code class=\"prism language-csharp\"> <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PanasonicParaModel</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 名称</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> PlcName <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 站号</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> PlcStationNo <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// COM口号 比如COM1</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> PlcComNo <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 波特率</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> PlcBoardRate <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 奇偶校验1奇校验 2偶校验 0不校验 </span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Parity</span> PlcParity <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 数据位 正常是8</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> PlcDataLen <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 停止位1 2 1.5 默认是1</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">StopBits</span> PlcStopBit <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 连接标志位</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> LinkRes <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>2、定义一个串口帮助方法类</p>\n<pre><code class=\"prism language-csharp\"> <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SerialPortHelper</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> 单例实现</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SerialPortHelper</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> SerialPort<span class=\"token punctuation\">&gt;</span></span> _dicSerialPort <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//保存串口对象的集合</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token function\">SerialPortHelper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_dicSerialPort <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_dicSerialPort <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> SerialPort<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">SerialPortHelper</span> Instance\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">get</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SerialPortHelper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> 获得奇偶校验</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 获得奇偶校验</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"num\"&gt;&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;returns&gt;&lt;/returns&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Parity</span> <span class=\"token function\">GetParityByConfigNum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> num<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> Parity<span class=\"token punctuation\">.</span>Odd<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> Parity<span class=\"token punctuation\">.</span>Even<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> Parity<span class=\"token punctuation\">.</span>None<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> 获得停止位</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 获得停止位</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"num\"&gt;&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;returns&gt;&lt;/returns&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">StopBits</span> <span class=\"token function\">GetStopBitByConfigNum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">double</span></span> num<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> StopBits<span class=\"token punctuation\">.</span>One<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> StopBits<span class=\"token punctuation\">.</span>Two<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> StopBits<span class=\"token punctuation\">.</span>OnePointFive<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> StopBits<span class=\"token punctuation\">.</span>One<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>3、定义连接对象类<br/> 话不多说了，直接上代码</p>\n<pre><code class=\"prism language-csharp\">\t\t<span class=\"token comment\">/// &lt;summary&gt;</span>\n    <span class=\"token comment\">/// 松下PLC Newtocol协议</span>\n    <span class=\"token comment\">/// &lt;/summary&gt;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Panasonic_Newtocol</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDisposable</span></span>\n    <span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 232串口对象</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">SerialPort</span> serialPort <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 起始码%固定不变</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> headStr <span class=\"token operator\">=</span> <span class=\"token string\">\"%\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 目标站号 高位和低位</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> stationCode <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 分隔符#固定不变</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> fixCode <span class=\"token operator\">=</span> <span class=\"token string\">\"#\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 结束符\\r 固定不变</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> endStr <span class=\"token operator\">=</span> <span class=\"token string\">\"\\r\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 正确响应时的字符串内容</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> successResponseHead <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 失败响应时的字符串内容</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> failResponseHead <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> DTValue <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> arrXYMValue <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 保存日志的委托</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"logStr\"&gt;&lt;/param&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SaveLogForRecord</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> logStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 记录日志事件实现</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">event</span> <span class=\"token class-name\">SaveLogForRecord</span> SaveLog<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 写入单触点标志位</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> writeCoilSingleResult <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 写入寄存器数据结果</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> writeDataResult <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 读取寄存器数据结果</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> readDataResult <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 读取多个/单个触点结果</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> readCoilMany_SingleResult <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">Panasonic_Newtocol</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PanasonicParaModel</span> _serialPort<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            stationCode <span class=\"token operator\">=</span> _serialPort<span class=\"token punctuation\">.</span>PlcStationNo<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            serialPort <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SerialPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                PortName <span class=\"token operator\">=</span> _serialPort<span class=\"token punctuation\">.</span>PlcComNo<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                BaudRate <span class=\"token operator\">=</span> _serialPort<span class=\"token punctuation\">.</span>PlcBoardRate<span class=\"token punctuation\">,</span>\n                Parity <span class=\"token operator\">=</span> _serialPort<span class=\"token punctuation\">.</span>PlcParity<span class=\"token punctuation\">,</span>\n                DataBits <span class=\"token operator\">=</span> _serialPort<span class=\"token punctuation\">.</span>PlcDataLen<span class=\"token punctuation\">,</span>\n                StopBits <span class=\"token operator\">=</span> _serialPort<span class=\"token punctuation\">.</span>PlcStopBit<span class=\"token punctuation\">,</span>\n                ReceivedBytesThreshold <span class=\"token operator\">=</span> <span class=\"token number\">8</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            successResponseHead <span class=\"token operator\">=</span> headStr <span class=\"token operator\">+</span> stationCode <span class=\"token operator\">+</span> <span class=\"token string\">\"$\"</span><span class=\"token punctuation\">;</span>\n            failResponseHead <span class=\"token operator\">=</span> headStr <span class=\"token operator\">+</span> stationCode <span class=\"token operator\">+</span> <span class=\"token string\">\"!\"</span><span class=\"token punctuation\">;</span>\n\n            SaveLog <span class=\"token operator\">+=</span> Panasonic_Newtocol_SaveLog<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SerialPort_DataReceived</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SerialDataReceivedEventArgs</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//让缓存区数据接收完成</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> n <span class=\"token operator\">=</span> serialPort<span class=\"token punctuation\">.</span>BytesToRead<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> buf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">byte</span></span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            serialPort<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> readText <span class=\"token operator\">=</span> Encoding<span class=\"token punctuation\">.</span>ASCII<span class=\"token punctuation\">.</span><span class=\"token function\">GetString</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>readText<span class=\"token punctuation\">.</span><span class=\"token function\">StartsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> readText<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">&gt;=</span> serialPort<span class=\"token punctuation\">.</span>ReceivedBytesThreshold<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> 字节流数据正确</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> len <span class=\"token operator\">=</span> readText<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sHead <span class=\"token operator\">=</span> readText<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sComm <span class=\"token operator\">=</span> readText<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sComm1 <span class=\"token operator\">=</span> readText<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sValues <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> tValue <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sHead <span class=\"token operator\">==</span> successResponseHead<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>sComm<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">case</span> <span class=\"token string\">\"RD\"</span><span class=\"token punctuation\">:</span>\n                            <span class=\"token punctuation\">{<!-- --></span>\n                                <span class=\"token comment\">//%01$RD XXXX_XXXX_XXXX_XXXX_XXXX_XXXX 文本代码 BCC高低位 结束符</span>\n                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>readDataResult<span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">{<!-- --></span>\n                                    <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> 读取D,转换为十进制</span>\n                                    sValues <span class=\"token operator\">=</span> readText<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">-</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                    DTValue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">double</span></span><span class=\"token punctuation\">[</span>sValues<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>sValues<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                                    <span class=\"token punctuation\">{<!-- --></span>\n                                        tValue <span class=\"token operator\">=</span> sValues<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                        DTValue<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToInt32</span><span class=\"token punctuation\">(</span>tValue<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> tValue<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token punctuation\">}</span>\n                                    <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n                                    readDataResult <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span>\n                                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token keyword\">case</span> <span class=\"token string\">\"RC\"</span><span class=\"token punctuation\">:</span>\n                            <span class=\"token punctuation\">{<!-- --></span>\n                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>readCoilMany_SingleResult<span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">{<!-- --></span>\n                                    <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> 读多个/单个触点</span>\n                                    sValues <span class=\"token operator\">=</span> readText<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">-</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                    arrXYMValue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">bool</span></span><span class=\"token punctuation\">[</span>sValues<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arrXYMValue<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                                    <span class=\"token punctuation\">{<!-- --></span>\n                                        tValue <span class=\"token operator\">=</span> sValues<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                        arrXYMValue<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tValue <span class=\"token operator\">==</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token punctuation\">}</span>\n                                    <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n                                    readCoilMany_SingleResult <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span>\n                                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token keyword\">case</span> <span class=\"token string\">\"WD\"</span><span class=\"token punctuation\">:</span>\n                            <span class=\"token punctuation\">{<!-- --></span>\n                                <span class=\"token comment\">//写入D成功,没返回值</span>\n                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>writeDataResult<span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">{<!-- --></span>\n                                    writeDataResult <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span>\n                                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token keyword\">case</span> <span class=\"token string\">\"WC\"</span><span class=\"token punctuation\">:</span>\n                            <span class=\"token punctuation\">{<!-- --></span>\n                                <span class=\"token comment\">//写入触点成功,没返回值</span>\n                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>writeCoilSingleResult<span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">{<!-- --></span>\n                                    writeCoilSingleResult <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span>\n                                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> 记录日志</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 记录日志</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"logStr\"&gt;&lt;/param&gt;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Panasonic_Newtocol_SaveLog</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> logStr<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            System<span class=\"token punctuation\">.</span>Diagnostics<span class=\"token punctuation\">.</span>Debug<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>logStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> 打开串口连接</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 打开串口连接</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token comment\">/// &lt;returns&gt;&lt;/returns&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">OpenLinkSerial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">try</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>serialPort <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token function\">CloseLinkSerial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    serialPort<span class=\"token punctuation\">.</span>DataReceived <span class=\"token operator\">+=</span> SerialPort_DataReceived<span class=\"token punctuation\">;</span>\n                    serialPort<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">Panasonic_Newtocol_SaveLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"串口打开成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token function\">Panasonic_Newtocol_SaveLog</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span>StackTrace<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> 关闭串口连接</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 关闭串口连接</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">CloseLinkSerial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>serialPort <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> serialPort<span class=\"token punctuation\">.</span>IsOpen<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                serialPort<span class=\"token punctuation\">.</span><span class=\"token function\">DiscardInBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                serialPort<span class=\"token punctuation\">.</span><span class=\"token function\">DiscardOutBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                serialPort<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n\n\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> 写入单触点值</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 写入单触点值</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"XYMAddr\"&gt;例如R12 X触点 Y触点 M状态寄存器&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"value\"&gt;0=off 1=on&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;returns&gt;&lt;/returns&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">WriteCoilSingle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> XYMAddr<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            writeCoilSingleResult <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> writeStr <span class=\"token operator\">=</span> <span class=\"token function\">WriteCoilSingle_CommStr</span><span class=\"token punctuation\">(</span>XYMAddr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>serialPort <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> serialPort<span class=\"token punctuation\">.</span>IsOpen<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                serialPort<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>writeStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> numPro <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>writeCoilSingleResult <span class=\"token operator\">&amp;&amp;</span> numPro <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    numPro<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numPro <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> 写入单触点值发送的字符串内容 WCS</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 写入单触点值发送的字符串内容 WCS X Y M</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"XYMAddr\"&gt;例如R12 X触点 Y触点 M状态寄存器&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"value\"&gt;0=off 1=on&lt;/param&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">WriteCoilSingle_CommStr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> XYMAddr<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> commmandCode <span class=\"token operator\">=</span> <span class=\"token string\">\"WCS\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//发送</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> outStr <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sReg <span class=\"token operator\">=</span> XYMAddr<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sAddr <span class=\"token operator\">=</span> XYMAddr<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PadLeft</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            outStr <span class=\"token operator\">=</span> headStr <span class=\"token operator\">+</span> stationCode <span class=\"token operator\">+</span> fixCode <span class=\"token operator\">+</span> commmandCode <span class=\"token operator\">+</span> sReg <span class=\"token operator\">+</span> sAddr <span class=\"token operator\">+</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span> <span class=\"token punctuation\">?</span> <span class=\"token string\">\"1\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            outStr <span class=\"token operator\">=</span> outStr <span class=\"token operator\">+</span> <span class=\"token function\">Bcc</span><span class=\"token punctuation\">(</span>outStr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> endStr<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> outStr<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> 读单触点状态</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 读单触点状态</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"XYMAddr\"&gt;X Y M地址 比如M1&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"value\"&gt;读取的结果&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;returns&gt;TRUE表示读取成功 false表示读取失败&lt;/returns&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">ReadCoilSingle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> XYMAddr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            readCoilMany_SingleResult <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> writeStr <span class=\"token operator\">=</span> <span class=\"token function\">ReadCoilSingle_CommStr</span><span class=\"token punctuation\">(</span>XYMAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>serialPort <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> serialPort<span class=\"token punctuation\">.</span>IsOpen<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                serialPort<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>writeStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> numPro <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>readCoilMany_SingleResult <span class=\"token operator\">&amp;&amp;</span> numPro <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    numPro<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numPro <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> arrXYMValue<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> 读单触点状态发送的字符串内容 RCS</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 读单触点状态发送的字符串内容 RCS</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"XYMAddr\"&gt;例如R12 X触点 Y触点 M状态寄存器&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;returns&gt;&lt;/returns&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">ReadCoilSingle_CommStr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> XYMAddr<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> commmandCode <span class=\"token operator\">=</span> <span class=\"token string\">\"RCS\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//发送</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> outStr <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sReg <span class=\"token operator\">=</span> XYMAddr<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sAddr <span class=\"token operator\">=</span> XYMAddr<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PadLeft</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            outStr <span class=\"token operator\">=</span> headStr <span class=\"token operator\">+</span> stationCode <span class=\"token operator\">+</span> fixCode <span class=\"token operator\">+</span> commmandCode <span class=\"token operator\">+</span> sReg <span class=\"token operator\">+</span> sAddr<span class=\"token punctuation\">;</span>\n            outStr <span class=\"token operator\">=</span> outStr <span class=\"token operator\">+</span> <span class=\"token function\">Bcc</span><span class=\"token punctuation\">(</span>outStr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> endStr<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> outStr<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> 读多个单触点状态结果 RCP</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 读多个单触点状态结果 RCP</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"startAddr\"&gt;&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"endAddr\"&gt;&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"value\"&gt;&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;returns&gt;&lt;/returns&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">ReadManyCoilData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span> xymAddr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            readCoilMany_SingleResult <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> writeStr <span class=\"token operator\">=</span> <span class=\"token function\">ReadCoilMany_CommStr</span><span class=\"token punctuation\">(</span>xymAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">bool</span></span><span class=\"token punctuation\">[</span>xymAddr<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">value</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>serialPort <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> serialPort<span class=\"token punctuation\">.</span>IsOpen<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                serialPort<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>writeStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> numPro <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>readCoilMany_SingleResult <span class=\"token operator\">&amp;&amp;</span> numPro <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    numPro<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numPro <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> arrXYMValue<span class=\"token punctuation\">;</span>\n                    Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> 读多个单触点状态发送的字符串内容 RCP</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 读多个单触点状态发送的字符串内容 RCP</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"XYMAddr\"&gt;长度为1-8的触点集合&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;returns&gt;&lt;/returns&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">ReadCoilMany_CommStr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span> XYMAddr<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> commmandCode <span class=\"token operator\">=</span> <span class=\"token string\">\"RCP\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//发送</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> outStr <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n            outStr <span class=\"token operator\">=</span> headStr <span class=\"token operator\">+</span> stationCode <span class=\"token operator\">+</span> fixCode <span class=\"token operator\">+</span> commmandCode <span class=\"token operator\">+</span> XYMAddr<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> XYMAddr<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sReg1 <span class=\"token operator\">=</span> XYMAddr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sAddr1 <span class=\"token operator\">=</span> XYMAddr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PadLeft</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                outStr <span class=\"token operator\">+=</span> sReg1 <span class=\"token operator\">+</span> sAddr1<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            outStr <span class=\"token operator\">=</span> outStr <span class=\"token operator\">+</span> <span class=\"token function\">Bcc</span><span class=\"token punctuation\">(</span>outStr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> endStr<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> outStr<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> 读取数据寄存器值</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 读取数据寄存器值</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"startAddr\"&gt;&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"endAddr\"&gt;&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"value\"&gt;&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;returns&gt;&lt;/returns&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">ReadDT_Data</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> startAddr<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> endAddr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            readDataResult <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> writeStr <span class=\"token operator\">=</span> <span class=\"token function\">ReadData_CommStr</span><span class=\"token punctuation\">(</span>startAddr<span class=\"token punctuation\">,</span> endAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sAddr1 <span class=\"token operator\">=</span> startAddr<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PadLeft</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sAddr2 <span class=\"token operator\">=</span> endAddr<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PadLeft</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> readLength <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>sAddr2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>sAddr1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">double</span></span><span class=\"token punctuation\">[</span>readLength<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">value</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>serialPort <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> serialPort<span class=\"token punctuation\">.</span>IsOpen<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                serialPort<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>writeStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> numPro <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>readDataResult <span class=\"token operator\">&amp;&amp;</span> numPro <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    numPro<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numPro <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> DTValue<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> 读取数据寄存器值发送的字符串内容 RD</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 读取数据寄存器值发送的字符串内容 RD</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"startAddr\"&gt;起始地址D/L/F XXXX&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"endAddr\"&gt;结束地址D/L/F XXXX&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;returns&gt;&lt;/returns&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">ReadData_CommStr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> startAddr<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> endAddr<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> commmandCode <span class=\"token operator\">=</span> <span class=\"token string\">\"RD\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//发送</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> outStr <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sReg <span class=\"token operator\">=</span> startAddr<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sAddr1 <span class=\"token operator\">=</span> startAddr<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PadLeft</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sAddr2 <span class=\"token operator\">=</span> endAddr<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PadLeft</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            outStr <span class=\"token operator\">=</span> headStr <span class=\"token operator\">+</span> stationCode <span class=\"token operator\">+</span> fixCode <span class=\"token operator\">+</span> commmandCode <span class=\"token operator\">+</span> sReg <span class=\"token operator\">+</span> sAddr1 <span class=\"token operator\">+</span> sAddr2<span class=\"token punctuation\">;</span>\n            outStr <span class=\"token operator\">=</span> outStr <span class=\"token operator\">+</span> <span class=\"token function\">Bcc</span><span class=\"token punctuation\">(</span>outStr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> endStr<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> outStr<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n\n\n\n\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> 写入数据寄存器值</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 写入数据寄存器值</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"startAddr\"&gt;D/L/F XXXX&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"endAddr\"&gt;D/L/F XXXX&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"writeContent\"&gt;写入的数据内容&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;returns&gt;&lt;/returns&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">WriteData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> startAddr<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> endAddr<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> writeContent<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            writeDataResult <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> writeStr <span class=\"token operator\">=</span> <span class=\"token function\">WriteData_CommStr</span><span class=\"token punctuation\">(</span>startAddr<span class=\"token punctuation\">,</span> endAddr<span class=\"token punctuation\">,</span> writeContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>serialPort <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> serialPort<span class=\"token punctuation\">.</span>IsOpen<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                serialPort<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>writeStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> numPro <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>writeDataResult <span class=\"token operator\">&amp;&amp;</span> numPro <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    numPro<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">//等待正确响应 或者超时</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numPro <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> 写入数据寄存器值发送的字符串内容 WD</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 写入数据寄存器值发送的字符串内容 WD</span>\n        <span class=\"token comment\">/// 写入的数值是按字写入，也就是说，每个值占2个字节</span>\n        <span class=\"token comment\">/// 低位在前，高位在后。</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"startAddr\"&gt;D/L/F XXXX&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"endAddr\"&gt;D/L/F XXXX&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"writeContent\"&gt;写入的数据内容&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;returns&gt;&lt;/returns&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">WriteData_CommStr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> startAddr<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> endAddr<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> writeContent<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> commmandCode <span class=\"token operator\">=</span> <span class=\"token string\">\"WD\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//发送</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> outStr <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sReg <span class=\"token operator\">=</span> startAddr<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sAddr1 <span class=\"token operator\">=</span> startAddr<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PadLeft</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sAddr2 <span class=\"token operator\">=</span> endAddr<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PadLeft</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            outStr <span class=\"token operator\">=</span> headStr <span class=\"token operator\">+</span> stationCode <span class=\"token operator\">+</span> fixCode <span class=\"token operator\">+</span> commmandCode <span class=\"token operator\">+</span> sReg <span class=\"token operator\">+</span> sAddr1 <span class=\"token operator\">+</span> sAddr2<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> writeLength <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>sAddr2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>sAddr1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>writeLength <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> strTemp <span class=\"token operator\">=</span> <span class=\"token function\">ConvertShortToPlcFormat</span><span class=\"token punctuation\">(</span>writeContent<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                outStr <span class=\"token operator\">+=</span> strTemp <span class=\"token operator\">+</span> strTemp<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> writeLength<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> strTemp <span class=\"token operator\">=</span> <span class=\"token function\">ConvertShortToPlcFormat</span><span class=\"token punctuation\">(</span>writeContent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    outStr <span class=\"token operator\">+=</span> strTemp<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            outStr <span class=\"token operator\">=</span> outStr <span class=\"token operator\">+</span> <span class=\"token function\">Bcc</span><span class=\"token punctuation\">(</span>outStr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> endStr<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> outStr<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> 写入字单位的触点的状态信息发送的字符串内容 WCC</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 写入字单位的触点的状态信息发送的字符串内容 WCC</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"startAddr\"&gt;起始地址&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"endAddr\"&gt;结束地址&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"writeValues\"&gt;写入的值数组 1=on 0=off&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;returns&gt;&lt;/returns&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">WriteCoilCoils_CommStr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> startAddr<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> endAddr<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> writeValues<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> commmandCode <span class=\"token operator\">=</span> <span class=\"token string\">\"WCC\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//发送</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> outStr <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sReg <span class=\"token operator\">=</span> startAddr<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Y R L</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sAddr1 <span class=\"token operator\">=</span> startAddr<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PadLeft</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sAddr2 <span class=\"token operator\">=</span> endAddr<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PadLeft</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            outStr <span class=\"token operator\">=</span> headStr <span class=\"token operator\">+</span> stationCode <span class=\"token operator\">+</span> fixCode <span class=\"token operator\">+</span> commmandCode <span class=\"token operator\">+</span> sReg <span class=\"token operator\">+</span> sAddr1 <span class=\"token operator\">+</span> sAddr2<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> readLength <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>sAddr2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>sAddr1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> readLength<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> strTemp <span class=\"token operator\">=</span> <span class=\"token function\">ConvertShortToPlcFormat</span><span class=\"token punctuation\">(</span>writeValues<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">?</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                outStr <span class=\"token operator\">+=</span> strTemp<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            outStr <span class=\"token operator\">=</span> outStr <span class=\"token operator\">+</span> <span class=\"token function\">Bcc</span><span class=\"token punctuation\">(</span>outStr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> endStr<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> outStr<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> 读取字单位的触点的状态信息发送的字符串内容 RCC</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 读取字单位的触点的状态信息发送的字符串内容 RCC</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"startAddr\"&gt;M1&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"endAddr\"&gt;M4&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;returns&gt;&lt;/returns&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">ReadCoilCoils_CommStr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> startAddr<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> endAddr<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> commmandCode <span class=\"token operator\">=</span> <span class=\"token string\">\"RCC\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//发送</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> outStr <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sReg <span class=\"token operator\">=</span> startAddr<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sAddr1 <span class=\"token operator\">=</span> startAddr<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PadLeft</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sAddr2 <span class=\"token operator\">=</span> endAddr<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PadLeft</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            outStr <span class=\"token operator\">=</span> headStr <span class=\"token operator\">+</span> stationCode <span class=\"token operator\">+</span> fixCode <span class=\"token operator\">+</span> commmandCode <span class=\"token operator\">+</span> sReg <span class=\"token operator\">+</span> sAddr1 <span class=\"token operator\">+</span> sAddr2<span class=\"token punctuation\">;</span>\n            outStr <span class=\"token operator\">=</span> outStr <span class=\"token operator\">+</span> <span class=\"token function\">Bcc</span><span class=\"token punctuation\">(</span>outStr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> endStr<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> outStr<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> 读多个触点发送的字符串内容</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 读多个触点发送的字符串内容</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"XYMAddr\"&gt;&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;returns&gt;&lt;/returns&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">ReadCoilPlural_CommStr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> XYMAddr<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> commmandCode <span class=\"token operator\">=</span> <span class=\"token string\">\"RCP\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//发送</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> outStr <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sReg <span class=\"token operator\">=</span> XYMAddr<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sAddr <span class=\"token operator\">=</span> XYMAddr<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PadLeft</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            outStr <span class=\"token operator\">=</span> headStr <span class=\"token operator\">+</span> stationCode <span class=\"token operator\">+</span> fixCode <span class=\"token operator\">+</span> commmandCode <span class=\"token operator\">+</span> sReg <span class=\"token operator\">+</span> sAddr<span class=\"token punctuation\">;</span>\n            outStr <span class=\"token operator\">=</span> outStr <span class=\"token operator\">+</span> <span class=\"token function\">Bcc</span><span class=\"token punctuation\">(</span>outStr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> endStr<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> outStr<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> 获得BCC校验码</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// BCC校验码</span>\n        <span class=\"token comment\">/// 计算方式是将指令中的各个ASCII字符的16进制(00～FF)进行异或求和后生成的. </span>\n        <span class=\"token comment\">/// 该校验码也以两个ASCII码字符表示（高位在前，低位在后）</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"cmd\"&gt;&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;returns&gt;&lt;/returns&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">Bcc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> cmd<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            cmd <span class=\"token operator\">=</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">byte</span></span> bcc <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> cmdArr <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>Encoding<span class=\"token punctuation\">.</span>ASCII<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> cmdArr<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                bcc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>bcc <span class=\"token operator\">^</span> cmdArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> bcc<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> ASC</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// ASC</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"cmd\"&gt;&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;returns&gt;&lt;/returns&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Asc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> cmd<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">ASCIIEncoding</span> ascii <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ASCIIEncoding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> intAscii <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>ascii<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> intAscii<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> 将整形转换为16进制 然后低位在前 高位在后</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 将整形转换为16进制 然后低位在前 高位在后</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"value\"&gt;&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;returns&gt;&lt;/returns&gt;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">ConvertShortToPlcFormat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> temp<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> 释放</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>serialPort <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>serialPort<span class=\"token punctuation\">.</span>IsOpen<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    serialPort<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    serialPort<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> 获得所有串口名数组</span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 所有串口名数组</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token comment\">/// &lt;returns&gt;&lt;/returns&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetPortsName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> SerialPort<span class=\"token punctuation\">.</span><span class=\"token function\">GetPortNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ToList</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span>   </span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>11、项目案例</strong><br/> 以下是PLC定义的值表内容<img alt=\"在这里插入图片描述\" src=\"image\\38e221f59e6f4ae4bf10b28f9d45f986.png\"/><br/> 来看看我的项目截图<br/> <img alt=\"在这里插入图片描述\" src=\"image\\931a16f6d2f3445e85931836461879c5.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f5c18d2aafe3480192409905d29b835c.png\"/><br/> <strong>12、总结</strong><br/> 只要我们明白NewTocol协议的机制和内容，其他的逻辑部分的处理对于我们程序猿来说就是洒洒水的事的，祝大家看完我的博客可以有所收获，也欢迎大家踊跃来交流交流技术。</p>\n<blockquote>\n<p>ps:部分截图和文字内容来自网上，程序是自己写的，如有侵权，请告知删除，写写。</p>\n</blockquote>\n<ul><li></li></ul>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}