{"blogid": "125066365", "writerAge": "码龄15年", "writerBlogNum": "478", "writerCollect": "197", "writerComment": "13", "writerFan": "1691", "writerGrade": "6级", "writerIntegral": "4931", "writerName": "中亿丰数字科技集团有限公司", "writerProfileAdress": "writer_image\\profile_125066365.jpg", "writerRankTotal": "3970", "writerRankWeekly": "8221", "writerThumb": "47", "writerVisitNum": "590297", "blog_read_count": "1188", "blog_time": "于 2022-05-31 16:33:34 发布", "blog_title": "C#从零开始的学习笔记（6）Main方法", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#_1\">概述</a></li><li><a href=\"#Main_31\">Main方法的声明</a></li><li><a href=\"#Main_67\">Main返回值</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"_1\"></a>概述</h2>\n<p>C#可执行程序必须包含一个Main方法，用于控制程序的开始和结束。Main方法是驻留在类或结构内的静态方法，在Main中可以创建对象和执行其他方法。<br/> 在编译C#控制台或者Windows应用程序时，默认情况下，编译器会在源代码中查找Main方法，并使该方法成为应用程序的入口。如果有多个Main方法，编译器就会返回一个错误。但是可以在编译器中的项目菜单下的属性里修改启动项，这样就可以明确告诉编译器哪个方法是程序的入口点。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b7583406795b410cbef53d5a9991fa77.png\"/></p>\n<p>Main方法选择相关实例如下所示：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">test1_2</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是第一个\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld2</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"运行成功，这是第二个\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果如下所示：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\dbdbb89334f94f3f9d79cc64e106f899.png\"/></p>\n<h2><a id=\"Main_31\"></a>Main方法的声明</h2>\n<p>下面几种方法都可以声明main方法：<br/> 首先是不带参数的void类型：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t代码块\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>其次是不带参数但是返回int类型：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t代码块\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>接下来是带参数的void类型：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t代码块\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>最后是带参数返回int类型：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t代码块\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"Main_67\"></a>Main返回值</h2>\n<p>Main方法的返回值如上所示，既可以是void类型，也可以是int，如果各位开发者不需要使用Main的返回值，那么使用void可以使得代码变得简洁。而返回整数可以使得程序将状态信息传递给调用该可执行文件的其他程序或者脚本文件。各位开发者可视自身情况进行选择。<br/> 下面是简单实例，如果不带命令行参数就给出相应提示，否则输出命令行参数信息：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">test1_2</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入一个字符串作为参数：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello,\"</span> <span class=\"token operator\">+</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>下面分别是不带参数与带上参数的运行结果（在cmd中运行）：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\252e4a4bb660448fa2fd348be2fce7ad.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}