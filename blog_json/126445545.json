{"blogid": "126445545", "writerAge": "码龄2年", "writerBlogNum": "51", "writerCollect": "370", "writerComment": "594", "writerFan": "528", "writerGrade": "5级", "writerIntegral": "1673", "writerName": "new Handsome()", "writerProfileAdress": "writer_image\\profile_126445545.jpg", "writerRankTotal": "12819", "writerRankWeekly": "128", "writerThumb": "455", "writerVisitNum": "13472", "blog_read_count": "502", "blog_time": "已于 2022-09-05 08:41:43 修改", "blog_title": "3、Java 的变量和数据类型", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>变量和数据类型</h3>\n<ul><li><a href=\"#__4\">一、什么是变量 ？</a></li><li><a href=\"#_20\">二、变量的声明与赋值</a></li><li><a href=\"#_92\">三、使用变量的注意事项</a></li><li><a href=\"#Java__115\">四、Java 程序中加号【+】的使用</a></li><li><a href=\"#_1024_163\">五、关于 1024</a></li><li><ul><li><a href=\"#1_____164\">(1) 《念奴娇 · 程序员怀古 》</a></li><li><a href=\"#2__206\">(2) 程序员节</a></li><li><a href=\"#3_210_211\">(3) 2的10次方和存储容量换算单位</a></li></ul>\n</li><li><a href=\"#_229\">六、数据类型</a></li><li><ul><li><a href=\"#1__235\">(1) 介绍数据类型</a></li><li><a href=\"#2__249\">(2) 整数类型</a></li><li><a href=\"#3__277\">(3) 浮点类型</a></li><li><a href=\"#4__322\">(4) 字符类型</a></li><li><a href=\"#5__365\">(5) 布尔类型</a></li><li><a href=\"#6__378\">(6) 自动类型转换（数值型基本数据类型）</a></li><li><a href=\"#7__444\">(7) 强制类型转换</a></li><li><a href=\"#8_Exercise_510\">(8) Exercise</a></li></ul>\n</li><li><a href=\"#_String__539\">七、基本数据类型和 String 类型的转换</a></li><li><ul><li><a href=\"#1__String_548\">(1) 基本数据类型转 String</a></li><li><a href=\"#2_String__574\">(2) String 转基本类型</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"__4\"></a>一、什么是变量 ？</h1>\n<p>❄️ 【个人解释】① 用<font color=\"blue\">英文单词</font>（或英文单词加数字）表示 一个<strong>值</strong>（如：数字、中文、小数、字母）<br/> ❄️ 【个人解释】② 如果这个<strong>值</strong>永远都不会变化，则这个<font color=\"blue\">英文单词</font>是<strong>常量</strong><br/> ❄️ 【个人解释】② 如果这个<strong>值</strong>会变化（不是一层不变的），则这个<font color=\"blue\">英文单词</font>是<strong>变量</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\23742e9a43774438a4087124dfd6b0fb.png\"/></p>\n<hr/>\n<p><strong>变量</strong>相当于<strong>内存</strong>中一个<strong>数据存储空间</strong>的<strong>表示</strong>，可把变量看做是一个房间的门牌号，通过门牌号可以找到房间，而通过变量名可以访问变量的值。</p>\n<p>变量是程序的基本组成单位（下面图片中，红色箭头指向的或红色框框中的都是变量）<br/> <img alt=\"在这里插入图片描述\" src=\"image\\4d43a813e95f452caf99544db8cde105.png\"/></p>\n<h1><a id=\"_20\"></a>二、变量的声明与赋值</h1>\n<ul><li>变量的声明（指定变量类型和变量名）：想象拿出一个盒子 📦，指定盒子的名字和盒子存放什么类型的东西</li><li>变量的赋值：在变量中存放指定类型的数据（想象把东西放入盒子 📦）</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">// 声明一个变量 action(中文意思：行动、动作)</span>\n<span class=\"token comment\">// String 限定给 action 赋的值必须是 String（字符串）类型</span>\n<span class=\"token comment\">// 被【双引号】包裹的内容就是字符串</span>\n<span class=\"token class-name\">String</span> action<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 先声明后赋值</span>\naction <span class=\"token operator\">=</span> <span class=\"token string\">\"点赞\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 给变量 action 赋值为“点赞”</span>\naction <span class=\"token operator\">=</span> <span class=\"token string\">\"评论\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 给变量 action 赋值为“评论”</span>\naction <span class=\"token operator\">=</span> <span class=\"token string\">\"收藏\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 给变量 action 赋值为“收藏”</span>\naction <span class=\"token operator\">=</span> <span class=\"token string\">\"转发\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 给变量 action 赋值为“转发”</span>\n</code></pre>\n<ul><li>数据类型（变量可以存放的数据的类型）后面会详谈</li></ul>\n<blockquote>\n<p>变量三要素：① 数据类型 + ② 变量名 = ③ 值</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">// 下面代码的变量三要素</span>\n<span class=\"token comment\">// 1. 数据类型：int</span>\n<span class=\"token comment\">// 2. 变量：likeNum</span>\n<span class=\"token comment\">// 3. 值：50</span>\n<span class=\"token keyword\">int</span> likeNum <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 声明后立即赋值</span>\n</code></pre>\n<hr/>\n<p><code>小练习：用变量描述一篇 CSDN 文章（自己思考：一篇 CSDN 文章都有什么? 然后用变量表示出来）</code></p>\n<blockquote>\n<p>① 文章名：articleName<br/> ② 文章内容：articleContent<br/> ③ 文章类型：articleType<br/> ④ 文章作者：articeWriter<br/> ⑤ 文章作者的粉丝量：articleWriteFansNum<br/> ⑥ 文章的点赞量：articleLikeNum<br/> ⑦ 文章的评论量：articleCommentNum<br/> ⑧ 文章的浏览量：visitorVolume</p>\n<p>😄 请大家不要误会我在拉关注哈，这只是一个小练习，不要想歪了 😄<br/> ⛄️ 变量名一定要<font color=\"blue\">见名知意</font>，最好是英文单词（不知道就百度一下），千万不能是中文拼音首字母缩写（如：点赞量 ➡️ dzl ❌）</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DescriptionCSDNArticle</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">String</span> articleName <span class=\"token operator\">=</span> <span class=\"token string\">\"五分钟精通 Python 教程\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> articleContent <span class=\"token operator\">=</span> <span class=\"token string\">\"洗洗睡吧, 想啥呢？\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> articleType <span class=\"token operator\">=</span> <span class=\"token string\">\"做梦系列\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> articleWriter <span class=\"token operator\">=</span> <span class=\"token string\">\"Java 初学者, 请多多关照\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> articleWriterFansNum <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> articleLikeNum <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果可以达到我会好开心 (但应该不能吧)</span>\n        <span class=\"token keyword\">int</span> articleCommentNum <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> visitorVolume <span class=\"token operator\">=</span> <span class=\"token number\">999</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// \\n: 换行（上篇文章的内容）</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n-------- 用变量描述一篇 CSDN 的文章 --------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"articleName = \"</span> <span class=\"token operator\">+</span> articleName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"articleContent = \"</span> <span class=\"token operator\">+</span> articleContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"articleType = \"</span> <span class=\"token operator\">+</span> articleType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"articleWriter = \"</span> <span class=\"token operator\">+</span> articleWriter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"articleWriterFansNum = \"</span> <span class=\"token operator\">+</span> articleWriterFansNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"articleLikeNum = \"</span> <span class=\"token operator\">+</span> articleLikeNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"articleCommentNum = \"</span> <span class=\"token operator\">+</span> articleCommentNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"visitorVolume = \"</span> <span class=\"token operator\">+</span> visitorVolume<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>代执行结果:</code><br/> <img alt=\"在这里插入图片描述\" src=\"image\\89bb9c46926140f29a9e087633593e9e.png\"/></p>\n<h1><a id=\"_92\"></a>三、使用变量的注意事项</h1>\n<p>✔️ 变量表示内存中的一个存储区域（不同的变量有不同的类型，不同类型的变量占用不同大小的内存空间）</p>\n<blockquote>\n<p>如：<br/> int（整数类型）：占用4字节<br/> double（小数类型）：占用8字节<br/> 字节（byte）：计算机中用于计量存储容量的一种计量单位【后面详说】<br/> 数据类型有两种：基本数据类型（byte、short、int、long、float、double、boolean、char）和引用类型【后面详说】</p>\n</blockquote>\n<p>✔️ 变量必须先声明并赋值后才可使用</p>\n<blockquote>\n<p>❌ 未声明变量就想使用<br/> <img alt=\"在这里插入图片描述\" src=\"image\\1a6e1a4ac56241fdad96e4a953cccb9f.png\"/><br/> ❌ 声明变量，未赋值就想使用<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e29f31b077704e19b68af82d1322c890.png\"/></p>\n</blockquote>\n<p>✔️ 变量在同一作用域内不能重名</p>\n<blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b54cd80a0d9f4fefb8f81852d4164932.png\"/><br/> 程序中使用到了【+】号，第四节详谈。</p>\n</blockquote>\n<p>✔️ 某一变量（如 int age）的值可在同一类型（如 int）范围内不断变化</p>\n<blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7ca4fdfa4c7e461f859b0a20c8b0bf4b.png\"/></p>\n</blockquote>\n<p>✔️ 变量三要素：数据类型 + 变量名 = 值</p>\n<h1><a id=\"Java__115\"></a>四、Java 程序中加号【+】的使用</h1>\n<p>🔵 当加号【+】的左右两边连接的是数值类型，是加法运行<br/> 🔵 当加号【+】左右两边有一边或两边为字符串，是字符串拼接操作</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> pen <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ruler <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 加号【+】的左右两边都是数值类型 --- 加法运算</span>\n    <span class=\"token keyword\">int</span> total <span class=\"token operator\">=</span> pen <span class=\"token operator\">+</span> ruler<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 加号【+】左右两边有一边或两边为字符串 --- 字符串拼接操作</span>\n    <span class=\"token comment\">// 钢笔和尺子一共 500 元</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"钢笔和尺子一共\"</span> <span class=\"token operator\">+</span> total <span class=\"token operator\">+</span> <span class=\"token string\">\"元\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 加号【+】两边都是字符串</span>\n    <span class=\"token comment\">// 500元？被坑了吧</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>total <span class=\"token operator\">+</span> <span class=\"token string\">\"元？被坑了吧\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 加号【+】有一边是字符串</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>思考：有一整数类型的变量【int weight = 100】如何把它转换为字符串类型?</code></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Integer2String</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> weight <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> weightString <span class=\"token operator\">=</span> weight <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 100（数字类型）</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 100（字符串类型）</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>weightString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 输出结果：1024（进行了加法计算）</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>weight <span class=\"token operator\">+</span> <span class=\"token number\">924</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 输出结果：100924（只进行了拼接操作）</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>weightString <span class=\"token operator\">+</span> <span class=\"token number\">924</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>上面的代码：<br/> 🍃 变量 weight 是数值类型的，值是 100<br/> 🍃 weightString 是变量 weight 拼接一个字符串的结果（引号包裹的内容是字符串，只是这里引号啥也没有包裹而已，专业说法是<strong>空串</strong>）<br/> 🍃 单独打印 weight 和 weightString 的结果都是 100，但两个100的类型不同<br/> 🍃 打印【weight + 924】的结果是1024，更加说明 weight 是数值类型（只有加号两边是数值才会执行加法操作）<br/> 🍃 打印【weightString + 924】的结果是100924，说明 weightString 是字符串类型（924 肯定是数值类型，数值类型和字符串拼接才会得到 100924 的结果）<br/> 🍃 <strong>【1024】在计算机里面是一个特殊的数字（请看下节）</strong></p>\n</blockquote>\n<h1><a id=\"_1024_163\"></a>五、关于 1024</h1>\n<h2><a id=\"1_____164\"></a>(1) 《念奴娇 · 程序员怀古 》</h2>\n<p>🐰 来看一首有趣、搞笑的自嘲词</p>\n<blockquote>\n<p>《念奴娇·程序员怀古 》<br/> 大京东去，淘宝进，格子衫牛仔裤。<br/> 成都西安，北上广，南山区杭州西。<br/> 地铁穿空，公交进站，车门一堆挤。<br/> 江山如画，一时多少豪杰。<br/> 遥想老夫当年，小班初上了，意气风发。<br/> 生龙活虎，电脑前，撸码没日没夜。<br/> 早出晚归，活好钱不多，秃顶华发。<br/> 人生如梦，一尊还酹江月。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ea3ef76539a94885ac753e84c1254cc0.png\"/></p>\n</blockquote>\n<p><font color=\"blue\">上面这首诗来自网站 <a href=\"https://1024.com/\">https://1024.com/</a>，一个非常有的网站</font></p>\n<hr/>\n<p><code>下面是我个人对这首诗的评析：</code></p>\n<p>🍀<strong>《念奴娇·程序员怀古 》</strong>【<font color=\"red\">该诗题目言简意赅，没有废话，一读题目就知道该诗讲述的主要角色是 “<strong>程序员</strong>”，让各位程序猿一看题目就有想读下去的冲动，写作手法高超👍。\"念奴娇\"是词牌名，“程序员怀古\"则化用了苏轼的\"赤壁怀古”，这一化用简直精妙，B 格立刻提升。能化用苏轼的词的题目可见作者对诗词的掌握能力之高深，简直是被编程耽误的文学家啊！</font>】<br/> <img alt=\"在这里插入图片描述\" src=\"image\\3ad4871e10db475980f744eef1ae7b7f.png\"/></p>\n<p>🍀<strong>大京东去，淘宝进，格子衫牛仔裤。</strong>【<font color=\"red\">这句词非常押韵，使人读起来朗朗上口，词的内容也直指各位程序员的内心，真是字字珠玑，语不惊人死不休。不仅让人读起来有美感，也描述了作者的从业经历。作者从自己的家乡不远万里到北京，进入阿里巴巴当程序员，从此格子衬衫和牛仔裤成为了他的工作服，格子衬衫和牛仔裤成为了他的战袍。格子衬衫和牛仔裤也正是描述了各位程序员的现状，用文字把一个程序员的现状描述得如此栩栩如生，真是“用文字画画的高手”。</font>】<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0f091d744847452bbfa19ae848499c19.png\"/></p>\n<p>🍀<strong>成都西安，北上广，南山区杭州西。</strong>【<font color=\"red\">作者的工作经历并非平平淡淡，而是经历了多次转折（跳槽）。西安、成都、北京、上海、广东等作者都跳槽过，可见作者经历丰富，有较多的社会阅历。这里鼓励我们，要学会跳槽，要坚持不懈，无论生活多么困难，我们都要努力走下去。</font>】</p>\n<p>🍀<strong>地铁穿空，公交进站，车门一堆挤。</strong>【<font color=\"red\">讲述完自己的工作经历后，作者描绘了自己上班途中的场景。作者上班的时候，可以看到\"地铁穿空\"的景象，地铁迅速疾驰而过，形容时间飞快，像地铁行驶一样。不仅能够看到地铁穿空的宏伟景象，还可以看到一大堆奋斗者一起为了一个地铁位置而努力，大家都如此努力，大家都为了生活而拼搏，你有什么理由不努力。更加激起了读者的奋斗欲望，教导读者：即时地铁穿空（时间流逝飞快），也要珍惜时间，为了生活而和一大堆人竞争。😊</font>】<br/> <img alt=\"在这里插入图片描述\" src=\"image\\18b3a888f45249d4975d5e45b751a2b0.png\"/></p>\n<p>🍀<strong>江山如画，一时多少豪杰。</strong>【<font color=\"red\">借用苏轼的《念奴娇 赤壁怀古》描绘当时上班、上班途中的场景如画一般让人怀念，不禁感叹，“那个时候多豪杰啊！”😊</font>】</p>\n<p>🍀<strong>遥想老夫当年，小班初上了，意气风发。</strong>【<font color=\"red\">借古讽今，作者把当年小班时候的意气风发和如今的“多少豪杰”进行对比。更加体现时间流逝，不知不觉小班都毕业了。现在要在北上广挤地铁了，要格子衬衫牛仔裤了。😊</font>】<br/> <img alt=\"在这里插入图片描述\" src=\"image\\280fa43516844f79be2a8b1ce552583b.png\"/></p>\n<p>🍀<strong>生龙活虎，电脑前，撸码没日没夜。</strong>【<font color=\"red\">作者描述自己面对代码的时候总是生龙活虎，只要坐在电脑前撸代码，总能废寝忘食、总是没日没夜的写代码，真【生龙活虎😏】😊</font>】</p>\n<p>🍀<strong>早出晚归，活好钱不多，秃顶华发。</strong>【<font color=\"red\">作者每天的工作状态：早上出门，晚上回家，非常充实，没有浪费一点点时间，这也是要激励我们这些后辈珍惜时间、过充实的生活。虽然钱不多，但活非常好，总能学到超越金钱的东西。😊</font>】<br/> <img alt=\"在这里插入图片描述\" src=\"image\\393aedadbbae47dbbd2951f214f4a619.png\"/></p>\n<p>🍀<strong>人生如梦，一尊还酹江月。</strong>【<font color=\"red\">最后一句，<strong>不知道咋编了。</strong>😊</font>】</p>\n<h2><a id=\"2__206\"></a>(2) 程序员节</h2>\n<p>教师有教师节、护士有护士节、月亮有中秋节、屈原有端午节、妇女有女神节、程序员也有程序员节。至于放不放假嘛，不一定。放假一天，加班3天。</p>\n<blockquote>\n<p>程序员：今天是程序员节？那就熬到2点吧，多睡一个小时，给自己放放假。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\172e5253d0da40a28646379d6751b234.png\"/></p>\n</blockquote>\n<h2><a id=\"3_210_211\"></a>(3) 2的10次方和存储容量换算单位</h2>\n<ul><li> <p>计算机上的 doc 文档、ppt 文件的大小是多少？是1G、1M、还是1T？这里的 G、M 和 T 是计算计算机存储容量的单位。类似长度单位的 m、mm、cm<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c400745a75b34a0db44cd6bac3f6ba9b.png\"/></p> </li><li> <p>计算机上的文件的大小的计算机单位的换算如下：<br/> 1K = <strong>1024</strong> byte<br/> 1M = <strong>1024</strong> K<br/> 1G = <strong>1024</strong> M<br/> 1T = <strong>1024</strong> G</p> </li></ul>\n<p>由于 <strong>2的10次方</strong>等于1024，也可以写作：<br/> 1K = <strong>2^10</strong> byte<br/> 1M = <strong>2^10</strong> K<br/> 1G = <strong>2^10</strong> M<br/> 1T = <strong>2^10</strong> G</p>\n<p><code>关于 1024 还有啥有趣的地方也可以分享到评论区哈, 感谢！</code>🙏</p>\n<h1><a id=\"_229\"></a>六、数据类型</h1>\n<blockquote>\n<p>前面说到：<br/> 🔥 变量的三要素：<font color=\"green\">数据类型 + 变量名 = 值</font><br/> 🔥 不同类型的变量可在指定数据类型的范围内不断变化（那数据类型有那些？更多的细节呢？下面来看 …）<br/> <img alt=\"在这里插入图片描述\" src=\"image\\7aa5e622c5e24575a9e42d7d66854482.png\"/></p>\n</blockquote>\n<h2><a id=\"1__235\"></a>(1) 介绍数据类型</h2>\n<p>🍃 每一种数据都定义了明确的<strong>数据类型</strong>（整数数据的数据类型是 int、小数数据的数据类型是 float 和 double、文字数据的数据类型是 String …）</p>\n<p>🍃 针对每种数据类型在内存中分配了不同大小的内存空间（字节）【就像瘦子和胖子占的体积都是不一样的嘛】<br/> <img alt=\"在这里插入图片描述\" src=\"image\\06baad39d8e6489da344efe24c0dc263.png\"/></p>\n<p>🍃 每种数据类型规定了变量可以存放什么类型的数据和占用的字节大小</p>\n<p>🍃 Java 是强类型的编程语言，对变量的类型要求非常严格。有些编程语言是没有这么强的类型要求的（如 JavaScript）</p>\n<p>🍃 Java 的数据类型如下所示：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\8315e6a3223e49d1be5256b7eae6053b.png\"/></p>\n<h2><a id=\"2__249\"></a>(2) 整数类型</h2>\n<p>用于存放整数数据（如 520、1314、9527、9420、240、1314、-7 等）</p>\n<p>🍁 有四种：byte、short、int、long</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">byte</span> number1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 占1字节</span>\n<span class=\"token keyword\">short</span> number2 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 占2字节</span>\n<span class=\"token keyword\">int</span> number3 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 占4字节</span>\n<span class=\"token keyword\">long</span> number4 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 占8字节</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b1c73ff856b04330bc86454125a01835.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\a55827af150f4f199b9cef98f4c8c706.png\"/></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IntegerType</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// Java 的整型常量默认是 int 类型, 声明 long 类型需在常量后面加【l】或【L(推荐)】</span>\n        <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -5 默认是 int 类型</span>\n        <span class=\"token keyword\">long</span> num2 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">5L</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -5L 是 long 类型 </span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"3__277\"></a>(3) 浮点类型</h2>\n<p>用于表示一个<strong>小数</strong>（如 3.14、6.9、-7.8）<br/> <img alt=\"在这里插入图片描述\" src=\"image\\68c90cdade494a798bb2524b3522713a.png\"/></p>\n<ul><li>浮点数在机器中的存放形式：浮点数 = 符号位 + 指数位 + 尾数位</li><li>尾数部分可能丢失精度（<strong>浮点数都是近似值</strong>）</li></ul>\n<p><img alt=\"未完 ......\" src=\"image\\10c9106c4f924b8cacf37213a9a3bdcc.png\"/></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FloatDoubleType</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">double</span> pi1 <span class=\"token operator\">=</span> <span class=\"token number\">3.14159</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Java 字符型常量默认是 double 类型</span>\n        <span class=\"token comment\">// 若想声明 float 类型的变量, 在常量末尾必须加 F 或 f</span>\n        <span class=\"token keyword\">float</span> pi2 <span class=\"token operator\">=</span> <span class=\"token number\">3.141592F</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">double</span> pi3 <span class=\"token operator\">=</span> <span class=\"token number\">3.14F</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// pi1 ≈ 3.14159</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pi1 ≈ \"</span> <span class=\"token operator\">+</span> pi1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// pi2 ≈ 3.141592</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pi2 ≈ \"</span> <span class=\"token operator\">+</span> pi2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// pi3 ≈ 3.140000104904175</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pi3 ≈ \"</span> <span class=\"token operator\">+</span> pi3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">double</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">.532</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">0.532</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// num1 = 0.532</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 = \"</span> <span class=\"token operator\">+</span> num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// num2 = 0.532</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num2 = \"</span> <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 科学计数法类型</span>\n        <span class=\"token comment\">// 512.0</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">5.12E2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5.12 * 10^2</span>\n        <span class=\"token comment\">// 0.0512</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">5.12E-2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5.12 * 10^-2</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"4__322\"></a>(4) 字符类型</h2>\n<p>✨ char 表示字符类型，用于存放单个字符（用单引号包裹）<br/> ✨ char 占2个字节（可以存放汉字）<br/> ✨ 单个字符用 char 类型，多个字符的话使用 String（后面详细说）</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CharType</span> <span class=\"token punctuation\">{<!-- --></span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token keyword\">char</span> star <span class=\"token operator\">=</span> <span class=\"token char\">'❤'</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">char</span> word <span class=\"token operator\">=</span> <span class=\"token char\">'庆'</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">char</span> japanese <span class=\"token operator\">=</span> <span class=\"token char\">'の'</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">char</span> letter <span class=\"token operator\">=</span> <span class=\"token char\">'X'</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">char</span> digit <span class=\"token operator\">=</span> <span class=\"token char\">'9'</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">char</span> a <span class=\"token operator\">=</span> <span class=\"token number\">97</span><span class=\"token punctuation\">;</span>\n\n       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"star = \"</span> <span class=\"token operator\">+</span> star<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"word = \"</span> <span class=\"token operator\">+</span> word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"japanese = \"</span> <span class=\"token operator\">+</span> japanese<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"letter = \"</span> <span class=\"token operator\">+</span> letter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"digit = \"</span> <span class=\"token operator\">+</span> digit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a = \"</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       \n       <span class=\"token comment\">/*\n           输出结果：\n           star = ❤\n           word = 庆\n           japanese = の\n           letter = X\n           digit = 9\n           a = a\n        */</span>\n   <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>✨ 在 Java 中，char 的本质是一个整数，输出的是 unicode 码对应的字符（可直接给 char 变量赋值一个整数，输出的时候会按照对应的 unicode 字符输出）<br/> ✨ char 类型的变量是可以进行运算的（char 类型的变量本质是整数）<br/> <img alt=\"在这里插入图片描述\" src=\"image\\05e0ae22b1c846ff8938398e4de3a269.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\bfa1d49fd5c54bf7a1d07813375c6938.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\c082672f7f9445f09412158cc9f26eec.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\82db0830018a42bfbcf5335f8e3c7cf1.png\"/></p>\n<h2><a id=\"5__365\"></a>(5) 布尔类型</h2>\n<p>boolean 类型只有两种取值：true 或 false（占1个字节）</p>\n<p>boolean 类型用于判断一个表达式的值是真还是假</p>\n<p>布尔类型一般是做逻辑运算（用在流程控制语句中）</p>\n<p>流程控制语句有：</p>\n<ul><li>if 条件控制语句</li><li>while 循环控制语句</li><li>do-while 循环控制语句</li><li>for 循环控制语句</li></ul>\n<h2><a id=\"6__378\"></a>(6) 自动类型转换（数值型基本数据类型）</h2>\n<p>🍁 Java 的基本数据类型的变量进行赋值操作的时候，精度<strong>小</strong>的数据类型会自动转换为精度<strong>大</strong>的数据类型<br/> 🍁 数据类型精度排行<br/> byte ➡️ short ➡️ int ➡️ long ➡️ float ➡️ double</p>\n<p>char ➡️ int ➡️ long ➡️ float ➡️ double</p>\n<hr/>\n<p>✨ ① 有多种类型的数据混合运算的时候, 编译器首先自动将等号右边的混合数据类型(如 int 和 float)转换为精度最大的那种数据类型(int), 然后才进行自动类型转换<br/> <img alt=\"在这里插入图片描述\" src=\"image\\3b9ba273af3341699091d721e7bcd2b1.png\"/></p>\n<blockquote>\n<p>上图的代码中：<br/> ① 变量 i 是 int 类型，<br/> ② 数字 1.2 是 double类型（浮点数常量默认是 double 类型，若想使用 float 类型需要在浮点数常量后面加【f】或【F】）<br/> ③ 当多种类型的数据进行混合运算的时候，编译器会将它们先转换为精度最大的那种数据类型，然后才进行自动类型转换<br/> ④ int 类型的精度低于 double 类型的精度，所以等号右边可看做是 double 类型<br/> ⑤ double 类型的数据赋值给 float 常量自然就会报错</p>\n</blockquote>\n<p><code>如何解决上图的错误？</code><br/> （1）用 double 类型的变量接收</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// float f = i + 1.2; // ERROR</span>\n        <span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1.2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>（2）强制类型转换（后面还会详说）</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// float f = i + 1.2; // ERROR</span>\n        <span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1.2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n\n        <span class=\"token comment\">// 强制类型转换</span>\n        <span class=\"token keyword\">float</span> f1 <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1.2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n        <span class=\"token keyword\">float</span> f2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d = \"</span> <span class=\"token operator\">+</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f1 = \"</span> <span class=\"token operator\">+</span> f1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f2 = \"</span> <span class=\"token operator\">+</span> f2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">/*\n            输出结果：\n            d = 11.2\n            f1 = 11.2\n            f2 = 11.2\n         */</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>上面的代码中：用强制类型转换运算符 <font color=\"blue\"><strong>()</strong></font> 将高精度的 <strong>double</strong> 类型强制类型转换为了低精度数据类型 <strong>float</strong></p>\n</blockquote>\n<p>✨ ② 精度小的的数据类型会自动转换为精度大的数据类型（弱者服从强者）；<font color=\"red\">精度大的数据类型不能自动转换为精度小的数据类型（会报错）</font></p>\n<p>✨ ③ <strong>byte、shor</strong>t 和 char 之间不会相互自动类型转换<br/> byte、short、char 之间进行计算首先会被转换为 int 类型<br/> boolean 不会参与自动类型转换<br/> 自动类型提升原则：表达式结果的类型自动提升为操作数中的最大精度的类型</p>\n<h2><a id=\"7__444\"></a>(7) 强制类型转换</h2>\n<p>💦 强制类型转换：把精度大的数据的类型强制转换为精度小的类型</p>\n<p>💦 使用需加上强制类型转换符 <font color=\"blue\">()</font><br/> 💦 可能造成精度降低或溢出</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> i1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token number\">6.6</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1.9</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token number\">2.5</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6 精度丢失</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 精度丢失</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2 精度丢失</span>\n\n        <span class=\"token keyword\">int</span> i_ <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">byte</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span> i_<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<p>✨ ① 当精度低的数据需要转换为精度高的数据的时候需要进行强制类型转换<br/> ✨ ② 强制类型转换符只对它附近的操作数进行强制类型转换（就近原则）</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token number\">2.2</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 下面代码的【(float)】不会对变量 d 进行强制类型转换, d 仍旧是 double 类型</span>\n        <span class=\"token comment\">// float f0 = (float) 1.1 + d;</span>\n\n        <span class=\"token keyword\">float</span> f1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1.1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> d<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 两次丢失精度</span>\n        <span class=\"token keyword\">float</span> f2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.1</span> <span class=\"token operator\">+</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 一次丢失精度</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f1 = \"</span> <span class=\"token operator\">+</span> f1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// f1 = 3.3000002</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f2 = \"</span> <span class=\"token operator\">+</span> f2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// f2 = 3.3</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>浮点数永远是近似值</code></p>\n<p>✨ ③ char 类型可以保存 int 类型的常量值<br/> 不能保存 int 类型的变量值（若想？<strong>强制类型转换</strong>）</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">98</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// b = b</span>\n\n        <span class=\"token comment\">/*\n            下面代码的等号右边会先被编译器识别为一个 int 类型\n            int 类型无法赋值给精度比它低的 char 类型\n         */</span>\n        <span class=\"token comment\">// char c2 = b + 1; // ERROR</span>\n\n        <span class=\"token keyword\">char</span> c3 <span class=\"token operator\">=</span> <span class=\"token number\">98</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c3 = \"</span> <span class=\"token operator\">+</span> c3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// c3 = c</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"8_Exercise_510\"></a>(8) Exercise</h2>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">short</span> s <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// s = s - 9; // ERR: 9 是 int 类型</span>\n        s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">-</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s = \"</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// s = 3</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">byte</span> b <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">short</span> s <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 等号右边的表达式先进行运算</span>\n        <span class=\"token comment\">// 运算后的值是 22 (int 类型)</span>\n        <span class=\"token comment\">// 需强制为 short</span>\n        <span class=\"token comment\">// short  b1= b + s; // ERROR</span>\n        <span class=\"token keyword\">short</span> b2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">+</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b2 = \"</span> <span class=\"token operator\">+</span> b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// b2 = 22</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_String__539\"></a>七、基本数据类型和 String 类型的转换</h1>\n<p>String：字符串（在 Java 中，被双引号包裹的内容就是字符串）<br/> <code>String 在后期会非常非常详细地进一步说明</code></p>\n<p>基本数据类型 byte、short、int、long、float、double、char、boolean 转换为字符串类型和字符串类型转换为基本数据类型在开发中非常常见。在此，先基本学习一下，后期能够有更深的体会。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\9c57b5dd3cf04d56a81608ec36690933.png\"/></p>\n<hr/>\n<h2><a id=\"1__String_548\"></a>(1) 基本数据类型转 String</h2>\n<p><code>直接拼接空串</code></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">byte</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">short</span> s <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> l <span class=\"token operator\">=</span> <span class=\"token number\">666L</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 必须加【L】, 否则 666 是 int 类型</span>\n        <span class=\"token keyword\">float</span> f <span class=\"token operator\">=</span> <span class=\"token number\">3.14F</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 必须加【F】, 否则 3.14 是 double 类型</span>\n        <span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token number\">3.14159</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token char\">'龙'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span> bool <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 666</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3.14</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>d <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3.14159</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 龙</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bool <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"2_String__574\"></a>(2) String 转基本类型</h2>\n<p>使用基本类型的<strong>包装类型</strong><br/> <code>下面简单说明一下【基本类型的包装类型】，后期会详细说明</code></p>\n<blockquote>\n<p>基本类型的缺点：<br/> 🎵 无法表达空值（不存在的值）<br/> 🎵 使用过程不够面向对象<br/> 🎵 常用于面向过程编程中<br/> <font color=\"red\"><strong>这里不用看了</strong></font></p>\n</blockquote>\n<p>基本数据类型的包装类型可认为是基本数据类型的高级版本🌹，使用方法和基本数据类型一模一样。<br/> 写法上除了 int 和 char 之外，都是基本类型写法的首字母大写。</p>\n<table><thead><tr><th>基本类型</th><th>包装类型</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td><strong>Integer</strong></td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>char</td><td><strong>Character</strong></td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table>\n<hr/>\n<p><code>String 转基本类型的方法（代码）：</code></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">String</span> bStr <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> sStr <span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> iStr <span class=\"token operator\">=</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> lStr <span class=\"token operator\">=</span> <span class=\"token string\">\"5\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> fStr <span class=\"token operator\">=</span> <span class=\"token string\">\"3.14\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> dStr <span class=\"token operator\">=</span> <span class=\"token string\">\"3.14159\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> boolStr <span class=\"token operator\">=</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 字符串转基本数据类型</span>\n        <span class=\"token keyword\">byte</span> b <span class=\"token operator\">=</span> <span class=\"token class-name\">Byte</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseByte</span><span class=\"token punctuation\">(</span>bStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">short</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">Short</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseShort</span><span class=\"token punctuation\">(</span>sStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>iStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> l <span class=\"token operator\">=</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>lStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> f <span class=\"token operator\">=</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>fStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseDouble</span><span class=\"token punctuation\">(</span>dStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span> bool <span class=\"token operator\">=</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseBoolean</span><span class=\"token punctuation\">(</span>boolStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<p>❀ 在将 String 类型转成基本数据类型时，需保证字符串能够转换为对应的基本类型。如可将【123】转成一 个整数，但不能把【ILoveYou】转成一个整数。<br/> ❀ 如果无法转换会出现类型转换<strong>异常</strong>（异常后期会详细说）</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}