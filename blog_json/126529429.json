{"blogid": "126529429", "writerAge": "码龄15年", "writerBlogNum": "91", "writerCollect": "561", "writerComment": "24", "writerFan": "369", "writerGrade": "4级", "writerIntegral": "1039", "writerName": "宋宋讲编程", "writerProfileAdress": "writer_image\\profile_126529429.jpg", "writerRankTotal": "16785", "writerRankWeekly": "1929", "writerThumb": "79", "writerVisitNum": "52839", "blog_read_count": "5208", "blog_time": "于 2022-08-25 17:37:31 发布", "blog_title": "Python杀死Excel？众多模块哪家强", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>大家可能可能会面临这个问题：</p>\n<blockquote>\n<ol><li> <p>成堆的科学实验数据需要导入 Excel 进行分析</p> </li><li> <p>成堆的销售数据表格等待统计</p> </li><li> <p>成堆的商品数据等待分析</p> </li></ol>\n</blockquote>\n<p>作为人生苦短的 Python 程序员，该如何优雅地操作 Excel？其实Python提供的操作Excel的库有7个之多，到底哪个更好使用更加方便呢？</p>\n<p>首先让我们来整体把握下不同库的特点：</p>\n<blockquote>\n<ol><li> <p>xlrd是一个从Excel文件读取数据和格式化信息的库，支持.xls以及.xlsx文件。官方文档：http://xlrd.readthedocs.io/en/latest/</p> </li><li> <p>xlwt是一个用于将数据和格式化信息写入旧Excel文件的库（如.xls）。官方文档：https://xlwt.readthedocs.io/en/latest/</p> </li><li> <p>xlutils是一个处理Excel文件的库，依赖于xlrd和xlwt。它仅支持.xls文件的操作。官方文档：http://xlutils.readthedocs.io/en/latest/</p> </li><li> <p>xlwings 简单强大，使用方便，可替代VBA。xlwings可以支持.xls读，支持.xlsx文件读写。官方文档：http://docs.xlwings.org/en/stable/index.html</p> </li><li> <p>XlsxWriter 是一个用来写 .xlsx 文件格式的模块，但不能用来读取和修改 Excel 文件。官方文档：https://xlsxwriter.readthedocs.io/</p> </li><li> <p>openpyxl是一个用于读取和编写Excel 2010 xlsx/xlsm/xltx/xltm文件的库。官方文档：https://openpyxl.readthedocs.io/en/stable/</p> </li><li> <p>pandas是一个进行数据处理和分析的强大模块，有时也可以用来自动化处理Excel，官方文档：http://pandas.pydata.org/</p> </li></ol>\n</blockquote>\n<p>另外还有win32com，通过名字大家就知道离不开windows系统，该库存在于pywin32中，是一个读写和处理Excel文件的库。但是我的电脑是Mac，就不做展开了。 </p>\n<p>官方文档：http://pythonexcels.com/python-excel-mini-cookbook/ </p>\n<p>DataNitro呢？严格来说它是一个Excel 的插件，安装也需单独到官网下载。也是仅支持windows系统。 </p>\n<p>官方文档：https://datanitro.com/</p>\n<p>具体内容大家也可以参看：http://www.python-excel.org</p>\n<h2><strong>环境安装</strong></h2>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\07bf90fa57c83d10f727a65dab38a287.png\"/></p>\n<h2><strong>安装</strong></h2>\n<p>7个模块均为<strong>非标准库</strong>，因此都需要在命令行中 <code>pip/pip3</code>进行安装：</p>\n<blockquote>\n<p>pip/pip3   install   xlrd</p>\n<p>pip/pip3   install   xlwt</p>\n<p>pip/pip3   install   xlutils</p>\n<p>pip/pip3   install   xlwings</p>\n<p>pip/pip3   install   XlsxWriter</p>\n<p>pip/pip3   install   openpyxl</p>\n<p>pip/pip3   install   pandas</p>\n</blockquote>\n<p>提示：</p>\n<ul><li> <p>xlutils 仅支持 xls 文件，即2003以下版本；</p> </li><li> <p>xlwings 安装成功后，如果运行提示报错“ImportError: no module named win32api”，请再安装 pypiwin32 或者 pywin32 包；</p> </li></ul>\n<h2><strong>模块导入</strong></h2>\n<p>模块的导入跟以往导入其他模块一样，使用import进行导入，如果名字比较长还可以使用as起个别名。</p>\n<blockquote>\n<p>import xlrd</p>\n<p>import xlwt</p>\n<p>import xlwings as xw</p>\n<p>import xlsxwriter</p>\n<p>import openpyxl</p>\n<p>import pandas as pd</p>\n</blockquote>\n<p>xlutils 模块是 xlrd和 xlwt之间的桥梁，最核心的作用是拷贝一份通过 <code>xlrd</code> 读取到内存中的 <code>.xls</code> 对象，然后再拷贝对象上通过 <code>xlwt</code> 修改 <code>.xls</code> 表格的内容。<code>xlutils</code> 可以将 <code>xlrd</code> 的 Book 对象复制转换为xlwt 的Workbook 对象。</p>\n<p>具体使用时通常导入的是模块中的copy子模块：</p>\n<blockquote>\n<p>import xlutils.copy</p>\n</blockquote>\n<h2><strong>文档操作</strong></h2>\n<p>由于设计模式的不同，导致基本的新建文件、修改文件、保存文件等功能在不同的库中存在着一定差异，比如xlsxwriter并不支持打开或修改现有文件，xlwings不支持对新建文件的命名等等，但是分析发现xlwings和openpyxl是对excel操作支持最多的两个库。</p>\n<p>特别要说明一下xlutils库，<code>xlrd</code>、<code>xlwt</code>、<code>xlutils</code> 各自的功能都有局限性，但三者互为补充，覆盖了Excel文件尤其是 <code>.xls</code> 文件的操作。<code>xlwt</code> 可以生成 <code>.xls</code> 文件，<code>xlrd</code> 可以读取已经存在的 <code>.xls</code>文件，<code>xlutils</code> 连接 <code>xlrd</code> 和 <code>xlwt</code> 两个模块，使用户可以同时读写一个 <code>.xls</code> 文件。简单来说，<code>xlrd</code>负责读、<code>xlwt</code> 负责写、<code>xlutils</code> 负责提供辅助和衔接</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\4748f1837f2df08a01ae632a1af1f34a.png\"/></p>\n<h2><strong>性能对比</strong></h2>\n<p>对几个库做了最基本的写入和读取测试，分别使用不同库进行添加及读取 5000行 * 800列 数据操作，得到所用时间，重复操作取平均值。另外在不同的电脑配置，不同的环境下结果肯定会有出入，数据仅供参考。</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\4e995e499534b5396f85d6ab242a89c1.png\"/></p>\n<p>openpyxl虽然操作Excel的功能强大，但读写性能过于糟糕，尤其是写大表时，会占用大量内存，开启read_only和write_only模式后对其性能有大幅提升，尤其是对读的性能提升很大，使其几乎不耗时。</p>\n<p>pandas把Excel当作数据读写的容器，为其强大的数据分析服务，因此读写性能表现中规中矩，但其对Excel文件兼容性是最好的，支持读写.xls，.xlsx文件，且支持只读表中单一工作页。</p>\n<p>同样支持此功能的库还有xlrd，但xlrd只支持读，并不支持写，且性能不突出，需要配合xlutils进行Excel操作。</p>\n<p>xlsxwriter功能单一，一般用来创建.xlsx文件，写入性能中庸。</p>\n<p>综合考虑，xlwings的表现最佳，正如其名，xlwings——Make Excel Fly！</p>\n<p>通过以上分析，相信大家对几个库都有了简单的了解。你可根据自己的需求和生产环境，选择合适的 Python-Excel 模块</p>\n<p>附上一部分常用代码：</p>\n<p><strong>xlwings基本代码</strong></p>\n<pre><code>import xlwings as xw\n\n#连接到excel\nworkbook = xw.Book('你的excel文件的路径')#连接excel文件\n#连接到指定单元格\ndata_range = workbook.sheets('Sheet1').range('A1')\n#写入数据\ndata_range.value = ['a','b','c']\n#保存\nworkbook.save()\n</code></pre>\n<p><strong>xlsxwriter基本代码</strong></p>\n<pre><code>import xlsxwriter as xw\n#新建excel\nworkbook  = xw.Workbook('你的excel文件的路径')\n#新建工作薄\nworksheet = workbook.add_worksheet()\n#写入数据\nworksheet.wirte('A1','a')\n#关闭保存\nworkbook.close()\n</code></pre>\n<p><strong>xlutils基本代码</strong></p>\n<pre><code>import xlrd #读取数据\nimport xlwt #写入数据\nimport xlutils.copy #操作excel\n# 通过xlrd读取数据\n\n#打开excel文件\nworkbook = xlrd.open_workbook('你的excel文件的路径')\n#获取表单\nworksheet = workbook.sheet_by_index(0)\n#读取数据\ndata = worksheet.cell_value(0,0)\n\n# 通过xlwt写入数据\n#新建excel\nwb = xlwt.Workbook()\n#添加工作薄\nsh = wb.add_sheet('Sheet1')\n#写入数据\nsh.write(0,0,'abc')\n#保存文件\nwb.save('myexcel.xls')\n\n\n#打开excel文件\nbook = xlrd.open_workbook('你的excel文件的路径')\n#复制一份\nnew_book = copy(book)\n#拿到工作薄\nworksheet = new_book.getsheet(0)\n#写入数据\nworksheet.write(0,0,'mydata')\n#保存\nnew_book.save()\n</code></pre>\n<p><strong>openpyxl基本代码</strong></p>\n<pre><code> import openpyxl\n # 新建文件\n workbook = openpyxl.Workbook() \n # 写入文件\n sheet = workbook.activesheet['A1']='A1'\n # 保存文件 \n workbook.save('你的excel保存路径')\n</code></pre>\n<p><strong>本文目的并不是要评出一个最好的库，仅是从不同角度对不同库进行对比，希望能够让大家了解各个库所擅长的工作</strong>。</p>\n<p>只有充分了解不同工具的特点，才能够在不同的场景下灵活运用不同的方法来高效解决问题！</p>\n<p style=\"text-align:center;\"><strong>-END-</strong></p>\n<p style=\"text-align:center;\"><strong>扫码添加请备注：python，进群与宋老师面对面交流：517745409</strong></p>\n<p><img alt=\"\" src=\"image\\6be7cded2f634421bd05b15438442c9d.jpeg\"/></p>\n<p> </p>\n<p> </p>\n</div>\n</div>"}