{"blogid": "125047279", "writerAge": "码龄4年", "writerBlogNum": "473", "writerCollect": "6881", "writerComment": "11736", "writerFan": "24970", "writerGrade": "7级", "writerIntegral": "23733", "writerName": "不渴望力量的哈士奇", "writerProfileAdress": "writer_image\\profile_125047279.jpg", "writerRankTotal": "307", "writerRankWeekly": "33", "writerThumb": "7931", "writerVisitNum": "1020298", "blog_read_count": "3973", "blog_time": "已于 2022-06-04 10:14:53 修改", "blog_title": "〖Python接口自动化测试实战篇⑧〗- 小案例 - 使用python实现接口请求 [查询天行数据]", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<table><thead><tr><th align=\"center\"><font color=\"red\">点击下方图片有惊喜，精美礼品等你来拿哦</font></th></tr></thead></table>\n<p><a href=\"https://bbs.csdn.net/topics/606826583\"><img src=\"image\\baf2832b240e45e38a8b4c116f6c94e7.png\"/></a></p>\n<p><a href=\"https://bbs.csdn.net/topics/606826583\"><img src=\"image\\d9368a3c32894d6d9fa10f34f60f7f92.png\"/></a></p>\n<hr/>\n<blockquote>\n<p><strong>前言</strong>：<br/> ✌ 作者简介：<a href=\"https://blog.csdn.net/weixin_42250835?type=blog\">渴望力量的哈士奇</a> ✌，大家可以叫我 🐶哈士奇🐶 ，一位致力于 <font color=\"red\">TFS</font> 赋能的博主 ✌<br/> 🏆 <font color=\"red\" size=\"3\">CSDN博客专家认证、新星计划第三季全栈赛道 top_1 、华为云享专家、阿里云专家博主 🏆 </font><br/> 📫 如果文章知识点有错误的地方，请指正！和大家一起学习，一起进步👀<br/> 💬 人生格言：优于别人,并不高贵,真正的高贵应该是优于过去的自己。💬<br/> <font color=\"red\" size=\"3\">🔥 如果感觉博主的文章还不错的话，还请👍关注、点赞、收藏三连支持👍一下博主哦</font></p>\n<hr/>\n<table><tbody><tr align=\"center\"><th>专栏系列（点击解锁）</th><th>学习路线指引</th><th>知识定位</th></tr><tr><td align=\"center\" rowspan=\"10\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11631906.html\"> <font color=\"red\" size=\"4.5\">🔥Python全栈白皮书🔥</font> </a> </td><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11631913.html\"> <font color=\"#ff6984\" size=\"3\"> 零基础入门篇 </font> </a> </td><td>以浅显易懂的方式轻松入门，让你彻底爱上Python的魅力。</td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11631928.html\"> <font color=\"#ff6984\" size=\"3\"> 语法进阶篇 </font> </a> </td><td>主要围绕多线程编程、正则表达式学习、含贴近实战的项目练习 。 </td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11798104.html\"> <font color=\"#ff6984\" size=\"3\"> 自动化办公篇 </font> </a> </td><td>实现日常办公软件的自动化操作，节省时间、提高办公效率。</td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11834532.html\"> <font color=\"#ff6984\" size=\"3\"> 自动化测试实战篇 </font> </a> </td><td>从实战的角度出发，先人一步，快速转型测试开发工程师。</td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11840815.html\"> <font color=\"#ff6984\" size=\"3\"> 数据库开发实战篇</font> </a> </td><td><font color=\"bule\">更新中</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11840958.html\"> <font color=\"#ff6984\" size=\"3\"> 爬虫入门与实战</font> </a> </td><td><font color=\"bule\">更新中</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11841010.html\"> <font color=\"#ff6984\" size=\"3\">数据分析篇</font> </a> </td><td><font color=\"bule\">更新中</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11841028.html\"> <font color=\"#ff6984\" size=\"3\">前端入门+flask 全栈篇</font> </a> </td><td><font color=\"bule\">更新中</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11841035.html\"> <font color=\"#ff6984\" size=\"3\">django+vue全栈篇</font> </a> </td><td><font color=\"bule\">更新中</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11841157.html\"> <font color=\"#ff6984\" size=\"3\">拓展-人工智能入门</font> </a> </td><td><font color=\"bule\">更新中</font></td></tr><tr><td align=\"center\" rowspan=\"6\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11123904.html\"> <font color=\"red\" size=\"4.5\">网络安全之路</font> </a> </td><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11170008.html\"> <font color=\"#ff6984\" size=\"3\"> 踩坑篇 </font> </a> </td><td>记录学习及演练过程中遇到的坑，便于后来居上者</td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11123907.html\"> <font color=\"#ff6984\" size=\"3\"> 网安知识扫盲篇 </font> </a> </td><td>三天打鱼，不深入了解原理，只会让你成为脚本小子。 </td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11366695.html\"> <font color=\"#ff6984\" size=\"3\"> vulhub靶场漏洞复现 </font> </a> </td><td>让漏洞复现变得简单，让安全研究者更加专注于漏洞原理本身。</td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11324653.html\"> <font color=\"#ff6984\" size=\"3\"> shell编程篇 </font> </a> </td><td>不涉及linux基础，最终案例会偏向于安全加固方向。 <font color=\"red\">[待完结]</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11134620.html\"> <font color=\"#ff6984\" size=\"3\"> WEB漏洞攻防篇</font> </a> </td><td><font color=\"red\">2021年9月3日停止更新，转战先知社区等安全社区及小密圈</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_10675569.html\"> <font color=\"#ff6984\" size=\"3\"> 渗透工具使用集锦</font> </a> </td><td><font color=\"red\">2021年9月3日停止更新，转战先知社区等安全社区及小密圈</font></td></tr><tr><td align=\"center\" rowspan=\"6\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11366983.html\"> <font color=\"red\" size=\"4.5\">点点点工程师</font> </a> </td><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11563688.html\"> <font color=\"#ff6984\" size=\"3\"> 测试神器 - Charles </font> </a> </td><td>软件测试数据包抓包分析神器</td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11393389.html\"> <font color=\"#ff6984\" size=\"3\"> 测试神器 - Fiddler </font> </a> </td><td>一文学会 fiddle ，学不会倒立吃翔，<font color=\"red\">稀得！</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11393395.html\"> <font color=\"#ff6984\" size=\"3\"> 测试神器 - Jmeter </font> </a> </td><td>不仅是性能测试神器，更可用于搭建轻量级接口自动化测试框架。</td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11462996.html\"> <font color=\"#ff6984\" size=\"3\"> RobotFrameWork</font> </a> </td><td><font color=\"blue\">Python实现的自动化测试利器，该篇章仅介绍UI自动化部分。</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11411882.html\"> <font color=\"#ff6984\" size=\"3\"> Java实现UI自动化</font> </a> </td><td><font color=\"blue\">文档写于2016年，Java实现的UI自动化，仍有借鉴意义。</font></td></tr><tr><td align=\"center\"> <a href=\"#\"> <font color=\"#ff6984\" size=\"3\"> MonkeyRunner</font> </a> </td><td><font color=\"blue\">该工具目前的应用场景已不多，文档已删，为了排版好看才留着。</font></td></tr></tbody></table>\n</blockquote>\n<hr/>\n<div align=\"center\">\n<img src=\"https://img-blog.csdnimg.cn/1c11651055dc45f58606951689560969.gif#pic_center\" width=\"1000\"/>\n</div>\n<hr/>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#__Python___248\">🐳 使用 Python 发送 请求</a></li><li><ul><li><a href=\"#_Python__261\">🐬 Python 发送请求的方式</a></li><li><a href=\"#_requests__277\">🐬 requests 库的配置</a></li><li><a href=\"#____312\">🐬 天行数据 - 空气质量接口</a></li><li><a href=\"#__requests____368\">🐬 利用 requests 发送查询 空气质量接口 请求</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<p>在前文说过，如果想要更好的做接口测试，我们要利用自己的代码基础与代码优势，所以该章节不会再介绍商业化的、通用的接口测试工具，重点介绍如何通过 python 编码来实现我们的接口测试以及通过 Pycharm 的实际应用编写一个简单接口测试。</p>\n<h2><a id=\"__Python___248\"></a>🐳 使用 Python 发送 请求</h2>\n<p>应为从最开始写这个 <a href=\"https://blog.csdn.net/weixin_42250835/category_11631906.html\">Python全栈系列</a> 一直使用的就是 python3.x (这里我使用的是 python 3.8 版本) ，实际上 python 3 本身自带的就有能够实现发送请求的模块：</p>\n<blockquote>\n<ul><li>http.client</li><li>urllib.request</li></ul>\n</blockquote>\n<h3><a id=\"_Python__261\"></a>🐬 Python 发送请求的方式</h3>\n<p>以上两个都可以实现发送 http 请求，也就是说它们都可以帮助我们完成接口测试。不过相对于来说它们更偏向于底层，需要更多的定义，所以在使用上面比较的麻烦；</p>\n<p>在实际的工作中，使用的更多的反而是第三方库 <code>resuests</code> ，为什么会选择使用 <code>resuests</code> ？那是因为它是经过二次集成、二次封装的，它能够让我们发送请求变得更简单，支持编码、解码、会话保持、长链接、可以加载 Header等等等等。</p>\n<p>这也是我们使用 Python 做接口测试的一个首选方式，接下来就学习一下如何安装并使用 <code>requests 库</code> 吧。</p>\n<h3><a id=\"_requests__277\"></a>🐬 requests 库的配置</h3>\n<p>安装 <code>Requests 库</code> 其实也非常的简单，直接在 <code>terminal</code> 终端 执行 <code>pip install requests</code> ， 见下图：</p>\n<hr/>\n<div align=\"center\">\n<img src=\"image\\1172a890a2354936a5f4e542f1441346.png\" width=\"1000\"/>\n</div>\n<hr/>\n<p>也可以通过设置中心去安装，在 Windows 系统，选择的是 <code>File --&gt; Settings...</code> ，Mac 系统选择的是 <code>PyCharm --&gt; Preferences...</code> 如下图：</p>\n<div align=\"center\">\n<img src=\"image\\268bdd95992c42d5b040cab42e38841c.png\" width=\"900\"/>\n</div> ![在这里插入图片描述]() \n<p>如果安装失败，或者安装超时，可以换一个国内的源地址，或者考虑一下 <code>ke xue shang wang </code> 吧。</p>\n<hr/>\n<h3><a id=\"____312\"></a>🐬 天行数据 - 空气质量接口</h3>\n<p>从天行数据网站可以找到公开的 <a href=\"https://www.juhe.cn/docs/api/id/33\">空气质量接口</a>，通过该接口，可以免费查询全国各地城市的空气质量。</p>\n<p>API详情如下：</p>\n<blockquote>\n<hr/>\n<p><strong>接口地址：</strong><code>http://web.juhe.cn/environment/air/cityair</code></p>\n<p>**返回格式：**json</p>\n<p>**请求方式：**get</p>\n<p><strong>请求示例：</strong><code>http://web.juhe.cn/environment/air/cityair?city=城市名称&amp;key=您申请的APPKEY值</code></p>\n<hr/>\n<p>请求参数说明：</p>\n<table><thead><tr><th align=\"center\">参数</th><th align=\"center\">是否必填项</th><th align=\"center\">类型</th><th align=\"center\">说明</th></tr></thead><tbody><tr><td align=\"center\">city</td><td align=\"center\">yes</td><td align=\"center\">string</td><td align=\"center\"><font size=\"2\">城市名称的中文名称或拼音，如：上海 或 shanghai</font></td></tr><tr><td align=\"center\">key</td><td align=\"center\">yes</td><td align=\"center\">string</td><td align=\"center\"><font size=\"2\">APP key （注册之后申请该接口的使用，自动生成一个key）</font></td></tr></tbody></table>\n<hr/>\n<div align=\"center\">\n<img src=\"image\\620755d848f4426cb55670e5cb6d4c80.png\" width=\"900\"/>\n</div>\n<hr/>\n<p>返回参数说明：</p>\n<table><thead><tr><th align=\"center\">名称</th><th align=\"center\">类型</th><th align=\"center\">说明</th></tr></thead><tbody><tr><td align=\"center\">citynow</td><td align=\"center\">JSONObject</td><td align=\"center\"><font size=\"2\">当前城市的空气质量的最新结果</font></td></tr><tr><td align=\"center\">lastTwoWeeks</td><td align=\"center\">JSONObject</td><td align=\"center\"><font size=\"2\">最近几周的空气质量数据（4周28天）</font></td></tr><tr><td align=\"center\">lastMoniData</td><td align=\"center\">JSONObject</td><td align=\"center\"><font size=\"2\">各监测点的数据,如果字段返回\"—\",可能是该监测点未监测这项数据或者有延迟</font></td></tr></tbody></table>\n<hr/>\n</blockquote>\n<h3><a id=\"__requests____368\"></a>🐬 利用 requests 发送查询 空气质量接口 请求</h3>\n<blockquote>\n<p>实现发送请求的三步：</p>\n<ul><li>1、组装请求 （包含 url 、请求的参数、请求的数据、 headers、cookies等等）</li><li>2、发送请求，获取响应</li><li>3、解析响应、获取到想要的文本</li></ul>\n</blockquote>\n<p>代码示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># coding:utf-8</span>\n\n\n<span class=\"token keyword\">import</span> requests\n\n\n<span class=\"token triple-quoted-string string\">'''\n天行空气质量接口：\n    get：http://web.juhe.cn/environment/air/cityair?city=城市名称&amp;key=您申请的APPKEY值\n'''</span>\n\nurl <span class=\"token operator\">=</span> <span class=\"token string\">\"http://web.juhe.cn/environment/air/cityair?city=shanghai&amp;key=98a470ea50853d3e698b2dfea09ae079\"</span>\t<span class=\"token comment\"># 定义url</span>\n\nresult <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\"># 使用 requests 包的 get 方法获取响应结果</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\t\t\t\t<span class=\"token comment\"># 打印输出 result 的文字解析</span>\n</code></pre>\n<p>运行结果如下：</p>\n<hr/>\n<div align=\"center\">\n<img src=\"image\\1fd3e7080ae24505b35dc4762cc8bb7c.png\" width=\"900\"/>\n</div>\n<hr/>\n<p>url 还支持 param 等一些信息，所以我们在组装<code>url</code>的时候，还可以不用像上图中那样直接去定义；可以单独定义一个 param ，以字典的形式写入我们要传入的内容。代码示例如下：</p>\n<p><code>PS：\"param\" 就是 get 请求方法的 \"url\" 问号后面的内容，示例：\"http://web.juhe.cn/environment/air/cityair?city=城市名称&amp;key=您申请的APPKEY值\"</code></p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># coding:utf-8</span>\n\n\n<span class=\"token keyword\">import</span> requests\n\n\n<span class=\"token triple-quoted-string string\">'''\n天行空气质量接口：\n    get：http://web.juhe.cn/environment/air/cityair?city=城市名称&amp;key=您申请的APPKEY值\n'''</span>\n\n<span class=\"token comment\"># url = \"http://web.juhe.cn/environment/air/cityair?city=shanghai&amp;key=98a470ea50853d3e698b2dfea09ae079\"</span>\nurl <span class=\"token operator\">=</span> <span class=\"token string\">\"http://web.juhe.cn/environment/air/cityair\"</span>\t\t<span class=\"token comment\"># 定义url\t</span>\n\nparam <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"98a470ea50853d3e698b2dfea09ae079\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"city\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"shanghai\"</span><span class=\"token punctuation\">}</span>\t\t<span class=\"token comment\"># 定义param</span>\n\nresult <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span>url<span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span>param<span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\"># 使用 requests 包的 get 方法获取响应结果</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\"># 打印输出 result 的文字解析</span>\n</code></pre>\n<p>运行结果如下：</p>\n<hr/>\n<div align=\"center\">\n<img src=\"image\\c7f426de78554d119ea52f06cb1a19e0.png\" width=\"900\"/>\n</div>\n<hr/>\n<p>接下来再尝试一下通过 <code>psot</code> 方法，运行的结果会怎么样。</p>\n<p>代码示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># coding:utf-8</span>\n\n\n<span class=\"token keyword\">import</span> requests\n\n\n<span class=\"token triple-quoted-string string\">'''\n天行空气质量接口：\n    get：http://web.juhe.cn/environment/air/cityair?city=城市名称&amp;key=您申请的APPKEY值\n'''</span>\n\n<span class=\"token comment\"># url = \"http://web.juhe.cn/environment/air/cityair?city=shanghai&amp;key=98a470ea50853d3e698b2dfea09ae079\"</span>\nurl <span class=\"token operator\">=</span> <span class=\"token string\">\"http://web.juhe.cn/environment/air/cityair\"</span>\t\t<span class=\"token comment\"># 定义url</span>\n\n<span class=\"token comment\"># param = {\"key\": \"98a470ea50853d3e698b2dfea09ae079\", \"city\": \"shanghai\"}\t# \"param\" 就是 get 请求方法的 \"url\" 问号后面的内容</span>\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"98a470ea50853d3e698b2dfea09ae079\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"city\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"shanghai\"</span><span class=\"token punctuation\">}</span>\t\t<span class=\"token comment\"># data 的内容才是 post 方法里需要传入的参数</span>\n\n<span class=\"token comment\"># result = requests.get(url=url, params=param)</span>\nresult <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span>url<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">)</span>\t\t\t<span class=\"token comment\"># 使用 requests 包的 post 方法获取响应结果</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\"># 打印输出 result 的文字解析</span>\n</code></pre>\n<p>运行结果如下：</p>\n<hr/>\n<div align=\"center\">\n<img src=\"image\\9334ab4c00b949ee9e241407461684f6.png\" width=\"900\"/>\n</div>\n<p>😝 这里会发现结果与 <code>get</code> 方法是一致的，其实想要测试个简单的接口其实一点都不复杂… 对不对？ 😋 再接下来就准备开始一套完整的测试自动化测试的实现吧 😝</p>\n<hr/>\n<div align=\"center\">\n<img src=\"https://img-blog.csdnimg.cn/975ef72a4a20472c83cab3dff3a2cbb4.gif#pic_center\" width=\"1000\"/>\n</div>\n<hr/>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}