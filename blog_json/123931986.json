{"blogid": "123931986", "writerAge": "码龄4年", "writerBlogNum": "263", "writerCollect": "715", "writerComment": "155", "writerFan": "79", "writerGrade": "5级", "writerIntegral": "3868", "writerName": "jonssonyan", "writerProfileAdress": "writer_image\\profile_123931986.jpg", "writerRankTotal": "5067", "writerRankWeekly": "16054", "writerThumb": "223", "writerVisitNum": "270125", "blog_read_count": "1255", "blog_time": "已于 2022-04-04 00:12:16 修改", "blog_title": "手摸手教你之Windows配置Rust开发环境", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>大家好，Rust以它的内存安全，没有GC而著名，常用于一些高性能的场景，可以用来写底层、系统、内核等。本文详细介绍在Windows环境下配置Rust环境。</p>\n<h1><a id=\"0x0__2\"></a>0x0. 相关概念</h1>\n<h2><a id=\"1_channel_4\"></a>1). channel</h2>\n<p>Rust 发布在三个不同的 channel 上：stable、beta、nightly，简单说就是三种不同的版本。</p>\n<ul><li>stable：Rust 的稳定版本，每 6 周发布一次。</li><li>beta：Rust 的公开测试版本，将是下一个 stable 版本。</li><li>nightly：每天更新，包含以一些实验性的新特性。</li></ul>\n<h2><a id=\"2_toolchain_12\"></a>2). toolchain</h2>\n<p>一套 Rust 组件，包括编译器及其相关工具，并且包含 channel，版本及支持的平台信息。</p>\n<h2><a id=\"3_target_16\"></a>3). target</h2>\n<p>指编译的目标平台，即：编译后的程序在哪种操作系统上运行。</p>\n<h2><a id=\"4_component_20\"></a>4). component</h2>\n<p>toolchain 是由 component 组成的。</p>\n<p>查看所有可用和已经安装的组件命令如下：</p>\n<pre><code class=\"prism language-bash\">rustup component list\n</code></pre>\n<p>rustup 默认安装的组件：</p>\n<ul><li>rustc：Rust 编译器。</li><li>rust-std：Rust 标准库。</li><li>cargo：包管理和构建工具。</li><li>rust-docs：Rust 文档。</li><li>rustfmt：用来格式化 Rust 源代码。</li><li>clippy：Rust 的代码检查工具。</li></ul>\n<h2><a id=\"5_profile_39\"></a>5). profile</h2>\n<p>为了方便对 component 进行管理，使用 profile 定义一组 component。</p>\n<p>不同的 profile 包含不同的组件，安装 rustup 时有三种 profile 可选：</p>\n<table><thead><tr><th>Profile</th><th>components</th></tr></thead><tbody><tr><td>minimal</td><td>rustc, rust-std, cargo</td></tr><tr><td>default</td><td>rustc, rust-std, cargo, rust-docs, rustfmt, clippy</td></tr><tr><td>complete</td><td>all</td></tr></tbody></table>\n<p>修改 profile 命令如下：</p>\n<pre><code class=\"prism language-bash\">rustup <span class=\"token builtin class-name\">set</span> profile minimal\n</code></pre>\n<h1><a id=\"0x1__Rust_57\"></a>0x1. 下载 Rust</h1>\n<blockquote>\n<p>Rust 官网：https://www.rust-lang.org/tools/install</p>\n</blockquote>\n<h1><a id=\"0x2__Rust_61\"></a>0x2. 安装 Rust</h1>\n<p><img alt=\"\" src=\"image\\3fb2d8e134aba4ab29fe5f1d43835817.png\"/></p>\n<p>默认情况，Rust 依赖 <code>C++ build tools</code>，没有安装也关系。</p>\n<p><img alt=\"\" src=\"image\\77fe6ae5bcc4522f52e8a80e3dfb8869.png\"/></p>\n<p>这里我么选择 2，进行自定义安装。</p>\n<p>输入：<code>x86_64-pc-windows-gnu</code>，其他的默认。</p>\n<p>最后会确认安装信息，回车进行安装，会从网上下载文件，所以安装过程需要保证网络正常。</p>\n<p>以下是一些常用的命令：</p>\n<ol><li>rustup 相关</li></ol>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 显示当前安装的工具链信息</span>\nrustup show\n<span class=\"token comment\"># 检查安装更新</span>\nrustup update\n<span class=\"token comment\"># 卸载</span>\nrustup self uninstall\n<span class=\"token comment\"># 设置当前默认工具链</span>\nrustup default stable-x86_64-pc-windows-gnu\n<span class=\"token comment\"># 查看帮助</span>\nrustup -h\n<span class=\"token comment\"># --------------------------&gt;配置工具链</span>\n<span class=\"token comment\"># 查看工具链</span>\nrustup toolchain list\n<span class=\"token comment\"># 安装工具链</span>\nrustup toolchain <span class=\"token function\">install</span> stable-x86_64-pc-windows-gnu\n<span class=\"token comment\"># 卸载工具链</span>\nrustup toolchain uninstall stable-x86_64-pc-windows-gnu\n<span class=\"token comment\"># 设置自定义工具链</span>\nrustup toolchain <span class=\"token function\">link</span> <span class=\"token operator\">&lt;</span>toolchain-name<span class=\"token operator\">&gt;</span> <span class=\"token string\">\"&lt;toolchain-path&gt;\"</span>\n<span class=\"token comment\"># --------------------------&gt;配置一个目录以及其子目录的默认工具链</span>\n<span class=\"token comment\"># 查看已设置的默认工具链</span>\nrustup override list\n<span class=\"token comment\"># 设置该目录以及其子目录的默认工具链</span>\nrustup override <span class=\"token builtin class-name\">set</span> <span class=\"token operator\">&lt;</span>toolchain<span class=\"token operator\">&gt;</span> --path <span class=\"token operator\">&lt;</span>path<span class=\"token operator\">&gt;</span>\n<span class=\"token comment\"># 取消目录以及其子目录的默认工具链</span>\nrustup override <span class=\"token builtin class-name\">unset</span> --path <span class=\"token operator\">&lt;</span>path<span class=\"token operator\">&gt;</span>\n<span class=\"token comment\"># --------------------------&gt;配置工具链的可用目标</span>\n<span class=\"token comment\"># 查看目标列表</span>\nrustup target list\n<span class=\"token comment\"># 安装目标</span>\nrustup target <span class=\"token function\">add</span> <span class=\"token operator\">&lt;</span>target<span class=\"token operator\">&gt;</span>\n<span class=\"token comment\"># 卸载目标</span>\nrustup target remove <span class=\"token operator\">&lt;</span>target<span class=\"token operator\">&gt;</span>\n<span class=\"token comment\"># 为特定工具链安装目标</span>\nrustup target <span class=\"token function\">add</span> --toolchain <span class=\"token operator\">&lt;</span>toolchain<span class=\"token operator\">&gt;</span> <span class=\"token operator\">&lt;</span>target<span class=\"token operator\">&gt;</span>\n<span class=\"token comment\"># --------------------------&gt;配置 rustup 安装的组件</span>\n<span class=\"token comment\"># 查看可用组件</span>\nrustup component list\n<span class=\"token comment\"># 安装组件</span>\nrustup component <span class=\"token function\">add</span> <span class=\"token operator\">&lt;</span>component<span class=\"token operator\">&gt;</span>\n<span class=\"token comment\"># 卸载组件</span>\nrustup component remove <span class=\"token operator\">&lt;</span>component<span class=\"token operator\">&gt;</span>\n</code></pre>\n<ol start=\"2\"><li>rustc 相关</li></ol>\n<pre><code># 查看rustc版本\nrustc --version\n</code></pre>\n<ol start=\"3\"><li>cargo 相关</li></ol>\n<pre><code># 查看cargo版本\ncargo --version\n# 新建项目\ncargo new &lt;project_name&gt;\n# 构建项目\ncargo build\n# 运行项目\ncargo run\n# 检查项目\ncargo check\n# 查看帮助\ncargo -h\n</code></pre>\n<h1><a id=\"0x3__148\"></a>0x3. 配置工具链安装位置</h1>\n<p>在系统环境变量中添加如下变量：</p>\n<p><code>CARGO_HOME</code> 指定 <code>cargo</code> 的安装目录</p>\n<p><code>RUSTUP_HOME</code> 指定 <code>rustup</code> 的安装目录</p>\n<p>默认分别安装到用户目录下的<code>.cargo</code> 和<code>.rustup</code> 目录</p>\n<h1><a id=\"0x4__158\"></a>0x4. 配置国内镜像</h1>\n<h2><a id=\"1__rustup__160\"></a>1). 配置 rustup 国内镜像</h2>\n<p>在系统环境变量中添加如下变量（选一个就可以，可以组合）：</p>\n<pre><code># 清华大学\nRUSTUP_DIST_SERVER：https://mirrors.tuna.tsinghua.edu.cn/rustup\nRUSTUP_UPDATE_ROOT：https://mirrors.tuna.tsinghua.edu.cn/rustup/rustup\n# 中国科学技术大学\nRUSTUP_DIST_SERVER：https://mirrors.ustc.edu.cn/rust-static\nRUSTUP_UPDATE_ROOT：https://mirrors.ustc.edu.cn/rust-static/rustup\n</code></pre>\n<h2><a id=\"2__cargo__173\"></a>2). 配置 cargo 国内镜像</h2>\n<p>在 cargo 安装目录下新建 config 文件（注意 config 没有任何后缀），文件内容如下：</p>\n<pre><code>[source.crates-io]\nregistry = \"https://github.com/rust-lang/crates.io-index\"\nreplace-with = 'tuna'\n\n# 清华大学\n[source.tuna]\nregistry = \"https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git\"\n\n# 中国科学技术大学\n[source.ustc]\nregistry = \"git://mirrors.ustc.edu.cn/crates.io-index\"\n# 设置代理\n[http]\nproxy = \"127.0.0.1:8889\"\n[https]\nproxy = \"127.0.0.1:8889\"\n</code></pre>\n<h1><a id=\"0x5_Windows__Linux__196\"></a>0x5. Windows 交叉编译 Linux 程序</h1>\n<p>目标服务器是 <code>Linux(CentOS 7) 64bit</code>, 所以我们添加的 target 应该是<code>x86_64-unknown-linux-gnu</code>(动态依赖) 或者<code>x86_64-unknown-linux-musl</code>（静态依赖）</p>\n<p>解释：</p>\n<ul><li> <p>动态依赖：目标服务器需要包含动态依赖的相关库（用户共享库）</p> </li><li> <p>静态依赖，目标服务器不需要包含相应的库，但是打包文件会更大些</p> <p>1). 添加需要的 target</p> </li></ul>\n<pre><code class=\"prism language-bash\">rustup target <span class=\"token function\">add</span>  x86_64-unknown-linux-musl\n\n</code></pre>\n<p>2). 在 cargo 安装目录下新建 config 文件（注意 config 没有任何后缀），添加的文件内容如下：</p>\n<pre><code>[target.x86_64-unknown-linux-musl]\nlinker = \"rust-lld\"\n</code></pre>\n<p>3). 构建</p>\n<pre><code class=\"prism language-bash\">cargo build --target x86_64-unknown-linux-musl\n</code></pre>\n<h1><a id=\"0x6__225\"></a>0x6. 参考</h1>\n<ol><li>官方指南：https://kaisery.github.io/trpl-zh-cn/</li></ol>\n<p>好了，本期内容到这里就结束了，喜欢这篇文章的朋友可以帮忙点一个免费的赞，这对我很重要，我们下期再见！拜拜</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}